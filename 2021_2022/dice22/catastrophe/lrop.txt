TARGET 0 - 'libc.so.6': ELF-X64, 0x00000000029f50 entry, 1656001/1 executable bytes/segments 

0x00000000129091: adc [r10+0x13], r14b; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x0000000008979a: adc [r10+0x32], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000089bba: adc [r10+0x42], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x0000000008a0b4: adc [r11+0x10], r14b; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000008a07a: adc [r11+0x12], r14b; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000a78ae: adc [r11+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000118d23: adc [r13+0x41], r11b; pop rsp; pop r13; pop r14; ret; 
0x00000000090c35: adc [r13+0x4c1574c0], r8b; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000009a015: adc [r13+0x531574c0], r8b; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000149caa: adc [r13+0x5b0875c0], r8b; pop rbp; pop r12; ret; 
0x000000000b4b8f: adc [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000d6e1f: adc [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x00000000112a8f: adc [r15], r9b; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c511d: adc [r15], r9b; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; ret; 
0x00000000119593: adc [r15], r9b; adc [rdi+0x20], ecx; ret; 
0x000000000c4a80: adc [r15], r9b; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x00000000127cc7: adc [r15], r9d; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000147cd5: adc [r8+0x14], dil; add edx, 0x1; syscall; 
0x000000000f01b2: adc [r8+0x1], r9b; fmul st, dword ptr [rax-0x7d]; ret; 
0x00000000085e82: adc [r8+0x1], r9b; ret; 
0x000000000906be: adc [r8+0x5a], bl; pop rbx; ret; 
0x00000000091292: adc [r8+r9*4+0x4], r12b; and eax, 0x972; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x000000000c3f6f: adc [r8-0x12cfeba9], r9b; mov [rdi+0x15], ch; ret; 
0x00000000149d29: adc [r8-0x7d], r9b; ret; 
0x0000000011c6cc: adc [r8], al; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000009a026: adc [r8], al; add [rax], al; add [rbx-0x3d], bl; xchg ax, ax; ret; 
0x0000000011429c: adc [r8], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000114418: adc [r8], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114284: adc [r8], al; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114a94: adc [r8], al; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000c3eec: adc [r8], r14b; in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000c3f0e: adc [r8], r14b; in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000c3f4c: adc [r8], r14b; in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000c3fce: adc [r8], r14b; in eax, dx; mov [rdi+0x18], ch; ret; 
0x0000000016a207: adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000113ea4: adc [r8], r8b; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000114618: adc [r8], r8b; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000113f04: adc [r8], r8b; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000016a595: adc [r9], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000008f21c: adc [r9], r13b; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x0000000011aaf7: adc [rax+0x10], bh; syscall; 
0x0000000012626f: adc [rax+0x130], bh; syscall; 
0x0000000011ab5f: adc [rax+0x13], bh; syscall; 
0x00000000046c7f: adc [rax+0x13e], bh; syscall; 
0x00000000147cd6: adc [rax+0x14], bh; add edx, 0x1; syscall; 
0x0000000011abff: adc [rax+0x14], bh; syscall; 
0x000000000a7f86: adc [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000083cf4: adc [rax+0x1], bh; pop rbx; ret; 
0x000000000f41a0: adc [rax+0x1], bh; ret; 
0x00000000114a2f: adc [rax+0x1], bh; syscall; 
0x000000000d7e6e: adc [rax+0x1], cl; clc; ret; 
0x000000000f01b3: adc [rax+0x1], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x000000001bab1e: adc [rax+0x1], cl; out dx, eax; call r12; 
0x0000000005553e: adc [rax+0x1], cl; ret; 
0x0000000016649d: adc [rax+0x1], dil; ret; 
0x000000001663e3: adc [rax+0x1], edi; movups [rdi+0x20], xmm2; ret; 
0x0000000011ec8f: adc [rax+0x1a], bh; syscall; 
0x000000000fbce2: adc [rax+0x21], cl; ret; 
0x000000000fbce1: adc [rax+0x21], r9b; ret; 
0x000000000ea65f: adc [rax+0x22], bh; syscall; 
0x0000000012769f: adc [rax+0x2a], bh; syscall; 
0x000000001275cf: adc [rax+0x2b], bh; syscall; 
0x000000000eabf5: adc [rax+0x2d8], eax; mov eax, 0x111; syscall; 
0x00000000127b0f: adc [rax+0x2e], bh; syscall; 
0x0000000005479f: adc [rax+0x39], cl; ret far; 
0x000000000afe17: adc [rax+0x39], cl; ret; 
0x00000000077b37: adc [rax+0x39], ecx; ret; 
0x0000000011510f: adc [rax+0x3], bh; syscall; 
0x00000000174a23: adc [rax+0x3b], cl; sub [rbx-0x1b], sil; mov eax, 0x1; ret; 
0x000000000ea497: adc [rax+0x3d], bh; syscall; 
0x0000000008441b: adc [rax+0x40], eax; pop rbx; ret; 
0x00000000128517: adc [rax+0x42], bh; syscall; 
0x0000000012835f: adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x0000000011ba2f: adc [rax+0x4a], bh; syscall; 
0x0000000011baef: adc [rax+0x4b], bh; syscall; 
0x0000000011540d: adc [rax+0x4f], bh; syscall; 
0x0000000011529f: adc [rax+0x55], bh; syscall; 
0x000000000906bf: adc [rax+0x5a], bl; pop rbx; ret; 
0x000000000984c0: adc [rax+0x63], cl; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x0000000007dcb7: adc [rax+0x63], cl; add al, 0x86; add rax, rsi; notrack jmp rax; 
0x00000000105afd: adc [rax+0x63], cl; ret far; 
0x0000000011a6af: adc [rax+0x63], ecx; ret; 
0x0000000018d6a2: adc [rax+0x66c30251], ecx; nop [rax+rax]; mov [rcx], edx; ret; 
0x0000000018d6c1: adc [rax+0x66c30451], ecx; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d702: adc [rax+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x00000000118d3f: adc [rax+0x7], bh; syscall; 
0x0000000011ebcf: adc [rax+0x9], bh; syscall; 
0x00000000126529: adc [rax+0x9d], bh; syscall; 
0x00000000156f1e: adc [rax+0xa0], edx; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000156f37: adc [rax+0xb0], ebx; ret; 
0x000000001563c6: adc [rax+0xc8], eax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000091fd6: adc [rax+0xc], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000009478c: adc [rax+0xcb], bh; syscall; 
0x000000000a041f: adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x000000000ea551: adc [rax+0xf7], bh; syscall; 
0x00000000060ec5: adc [rax+rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x00000000133c84: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000002a13d: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; jmp rax; 
0x00000000155587: adc [rax+rcx*2+0x33], esp; cmp al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x00000000091293: adc [rax+rcx*4+0x4], ah; and eax, 0x972; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x000000000c50ac: adc [rax+rdx-0x10], eax; ret; 
0x000000000c40f4: adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000c3ff2: adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret; 
0x000000000c3f70: adc [rax-0x12cfeba9], cl; mov [rdi+0x15], ch; ret; 
0x000000000e5692: adc [rax-0x1], bh; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000083d23: adc [rax-0x1], bh; pop rbx; ret; 
0x000000000a7a1e: adc [rax-0x2fd6fdfd], edx; mov rdx, [rdx+0x8]; test rdx, rdx; jne short 0x00000000000a7a20; ret; 
0x00000000133ca4: adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000018d2c4: adc [rax-0x73], cl; adc [rdi], cl; test [rcx+0x5], eax; add [rax], al; ret; 
0x0000000012a5f4: adc [rax-0x73], cl; adc al, 0xb2; add eax, [rdx+rcx]; ret; 
0x00000000039cdb: adc [rax-0x73], cl; add al, 0xb0; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x000000000a8b98: adc [rax-0x73], cl; add eax, 0x1bc60; cmovne rax, rdx; ret; 
0x000000000a8a78: adc [rax-0x73], cl; add eax, 0x1bcd0; cmovne rax, rdx; ret; 
0x000000000a84b8: adc [rax-0x73], cl; add eax, 0x1c1e0; cmovne rax, rdx; ret; 
0x00000000135b72: adc [rax-0x73], cl; add eax, 0x71586; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x000000000c5bd2: adc [rax-0x73], cl; add eax, 0xe1536; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000c06bb: adc [rax-0x73], cl; jg short 0x00000000000c06d0; jne 0x00000000000c0d90; ret; 
0x000000000c1ddf: adc [rax-0x73], cl; jg short 0x00000000000c1df4; jne 0x00000000000c25e0; ret; 
0x0000000012a7e4: adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x000000000c06de: adc [rax-0x73], ecx; jg short 0x00000000000c06f4; jne 0x00000000000c0d90; ret; 
0x000000000c1e02: adc [rax-0x73], ecx; jg short 0x00000000000c1e18; jne 0x00000000000c25e0; ret; 
0x0000000008287e: adc [rax-0x73], ecx; jno short 0x0000000000082887; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000010ffba: adc [rax-0x73], ecx; or eax, 0xc5c72; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000012a7e3: adc [rax-0x73], r9b; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x00000000083362: adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x00000000164d6f: adc [rax-0x75], cl; and al, 0x48; call qword ptr [rax+0x28]; 
0x00000000029d88: adc [rax-0x75], cl; and al, 0x8; call rax; 
0x00000000129d60: adc [rax-0x75], cl; and al, 0x8; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc1: adc [rax-0x75], cl; and al, 0x8; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000015d521: adc [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call rcx; 
0x00000000125d07: adc [rax-0x75], cl; je short 0x0000000000125d30; or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x00000000127f87: adc [rax-0x75], cl; je short 0x0000000000127fb0; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x00000000115408: adc [rax-0x75], cl; jl short 0x0000000000115431; adc [rax+0x4f], bh; syscall; 
0x00000000091d28: adc [rax-0x75], cl; jnp short 0x0000000000091d35; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x0000000009192d: adc [rax-0x75], cl; js short 0x000000000009193a; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x0000000015de2d: adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015fc91: adc [rax-0x75], cl; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x000000000852d0: adc [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x000000000b147c: adc [rax-0x77], cl; adc bl, al; nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x0000000016be46: adc [rax-0x77], cl; and al, 0x10; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000bf5bc: adc [rax-0x77], cl; clc; ret; 
0x00000000168339: adc [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; out dx, al; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x000000000a376a: adc [rax-0x77], cl; jl short 0x00000000000a3793; or al, ch; ret far; 
0x000000000daa5a: adc [rax-0x77], cl; jo short 0x00000000000daa67; add rsp, 0x10; pop rbp; ret; 
0x00000000110a2e: adc [rax-0x77], cl; or [r8-0x7d], r9b; ret; 
0x000000000b154c: adc [rax-0x77], cl; or [rax-0x73], cl; adc dil, r15b; ret; 
0x0000000016b6b0: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000008aa15: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000016b657: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000120037: adc [rax-0x77], cl; out dx, eax; call rax; 
0x0000000015e1d7: adc [rax-0x77], cl; out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000c66ae: adc [rax-0x77], cl; out dx, eax; mov rsi, [rsp+0x18]; call rbx; 
0x000000000835fc: adc [rax-0x77], cl; push rax; movups [rax], xmm0; ret; 
0x000000000835c1: adc [rax-0x77], cl; push rax; movups [rax], xmm1; ret; 
0x000000001207be: adc [rax-0x77], cl; ret far; 
0x000000000f0491: adc [rax-0x77], cl; ret; 
0x00000000029cce: adc [rax-0x77], ecx; add eax, 0x1f1d52; ret; 
0x00000000089ca3: adc [rax-0x77], ecx; ret far; 
0x0000000015530b: adc [rax-0x77], ecx; test ch, bl; sar ch, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x0000000011ff01: adc [rax-0x7b], cl; dec dword ptr [rdi]; test [rbp+0x49000000], edx; mov edi, [rbp]; call rbx; 
0x00000000120ce1: adc [rax-0x7b], cl; dec dword ptr [rdi]; test [rbp+0x49000000], esi; mov edi, [rbp]; call rbx; 
0x0000000011fecc: adc [rax-0x7b], cl; dec dword ptr [rdi]; test [rdx+0x49000000], ecx; mov edi, [rbp]; call rbx; 
0x0000000011fe99: adc [rax-0x7b], cl; dec dword ptr [rdi]; test [rip+0x49000001], ebx; mov edi, [rbp]; call rbx; 
0x00000000120d3d: adc [rax-0x7b], cl; push qword ptr [rbp+0x1d]; mov rdi, [r13]; call rbx; 
0x00000000120c6f: adc [rax-0x7b], cl; push qword ptr [rbp+0x4b]; mov rdi, [r12]; call rbx; 
0x0000000011ff2d: adc [rax-0x7b], cl; push qword ptr [rbp+0x4d]; mov rdi, [r13]; call rbx; 
0x00000000120d11: adc [rax-0x7b], cl; push qword ptr [rbp+0x69]; mov rdi, [r13]; call rbx; 
0x000000000c9d33: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000010c362: adc [rax-0x7d], cl; add al, 0x24; add [rax-0x77], ecx; ret; 
0x000000000639c1: adc [rax-0x7d], cl; ret; 
0x000000000b122f: adc [rax-0x7d], cl; rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je short 0x00000000000b1230; ret; 
0x0000000011f0cc: adc [rax-0x7d], ecx; ret; 
0x0000000014473b: adc [rax-0xc], edx; call qword ptr [rax-0x3fce2dcf]; 
0x0000000005aa40: adc [rax-0xdf6b], ecx; jmp qword ptr [rsi+0xf]; 
0x00000000104495: adc [rax], al; add [rax-0x77], cl; ret; 
0x00000000104494: adc [rax], al; add [rax-0x77], cl; ret; 
0x0000000011c6ce: adc [rax], al; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000009a027: adc [rax], al; add [rax], al; add [rbx-0x3d], bl; xchg ax, ax; ret; 
0x0000000016a208: adc [rax], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000012e8fc: adc [rax], al; add [rax], al; add cl, ch; paddb mm7, mm7; jmp qword ptr [rsi+0x2e]; 
0x000000000a0ede: adc [rax], al; add [rax], al; cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x0000000009be60: adc [rax], al; add [rax], al; cmove eax, ecx; ret; 
0x000000001758f2: adc [rax], al; add [rax], al; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x00000000096560: adc [rax], al; add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000015ed82: adc [rax], al; add [rax], al; mov [rsi+0x8], rax; ret; 
0x00000000090aee: adc [rax], al; add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x00000000119aae: adc [rax], al; add [rax], al; mov eax, 0x48; syscall; 
0x0000000015ee49: adc [rax], al; add [rax], al; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000015edae: adc [rax], al; add [rax], al; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x000000000807b1: adc [rax], al; add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000015d475: adc [rax], al; add [rax], al; pop rbx; pop rbp; ret; 
0x000000000620c1: adc [rax], al; add [rax], al; ret; 
0x00000000119f0b: adc [rax], al; add [rax], al; syscall; 
0x000000000b3878: adc [rax], al; add [rbp-0x77], cl; ret far; 
0x00000000061174: adc [rax], al; add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x0000000007afe0: adc [rax], al; add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x00000000121bf6: adc [rax], al; add [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000121c09: adc [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000010b1e9: adc [rax], al; add rax, fs:[0x0]; mov r8, rax; add r9, r13; call r15; 
0x0000000011db52: adc [rax], al; add rsp, 0x8; ret; 
0x0000000011d319: adc [rax], al; and eax, esi; inc dword ptr [rax]; ret; 
0x000000000a94f6: adc [rax], al; cmove rax, rdx; ret; 
0x0000000011e93a: adc [rax], al; cmp eax, 0x1; jg short 0x000000000011e980; pop rbp; ret; 
0x000000000355ce: adc [rax], al; endbr64; mov rax, [rip+0x1e54a5]; ret; 
0x000000000298af: adc [rax], al; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000a9d83: adc [rax], al; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a9943: adc [rax], al; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a9713: adc [rax], al; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a9833: adc [rax], al; lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000ab07f: adc [rax], al; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a94ef: adc [rax], al; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x00000000118bd5: adc [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x0000000011429d: adc [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000118d0d: adc [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000113ea5: adc [rax], al; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000011c355: adc [rax], al; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000b7c01: adc [rax], al; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000011dae1: adc [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011dab1: adc [rax], al; mov rax, r8; ret; 
0x000000000c52d8: adc [rax], al; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000c41dd: adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3948: adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c37a8: adc [rax], al; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000114fb8: adc [rax], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114419: adc [rax], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000113c55: adc [rax], al; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000112965: adc [rax], al; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000002b964: adc [rax], al; nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x0000000011f447: adc [rax], al; pop r12; pop r13; ret; 
0x0000000011eee4: adc [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000011c40e: adc [rax], al; pop rbx; pop rbp; ret; 
0x000000000516a1: adc [rax], al; ret; 
0x000000000a834d: adc [rax], al; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a878d: adc [rax], al; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000a880d: adc [rax], al; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a4d: adc [rax], al; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a960d: adc [rax], al; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000ab0fc: adc [rax], al; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x0000000011d7f9: adc [rax], al; test rdi, rdi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x000000001a622e: adc [rax], bh; enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x00000000053b48: adc [rax], bh; jne short 0x0000000000053b53; push r10; ret; 
0x00000000054031: adc [rax], bh; jne short 0x000000000005403c; push r10; ret; 
0x00000000098288: adc [rax], bl; add [rcx], bh; ret; 
0x0000000015ee97: adc [rax], ch; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000000c3eed: adc [rax], dh; in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000c3f0f: adc [rax], dh; in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000c3f4d: adc [rax], dh; in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000c3fcf: adc [rax], dh; in eax, dx; mov [rdi+0x18], ch; ret; 
0x000000000c40d1: adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x00000000061368: adc [rax], dl; add [rax], al; pop rbp; ret; 
0x0000000008c1a5: adc [rax], eax; add [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x000000001128f4: adc [rax], eax; add [rax], al; syscall; 
0x000000000b36f8: adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000173e04: adc [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000eabb5: adc [rax], eax; and [rcx], al; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000846b6: adc [rax], eax; mov [rax], rdx; xor eax, eax; ret; 
0x00000000105889: adc [rax], eax; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000b314f: adc [rax], eax; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000c03a8: adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb27: adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c024b: adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c50a9: adc [rax], eax; movups [rax+rdx-0x10], xmm0; ret; 
0x00000000108bf9: adc [rax], eax; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108d4d: adc [rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000083603: adc [rax], eax; ret; 
0x0000000009ea4d: adc [rax], ebx; add [rbp+rcx*4+0x5a], cl; add [rcx+0x39], ecx; ret; 
0x00000000162ce6: adc [rax], ecx; mov eax, 0x1; ret; 
0x000000000835c8: adc [rax], ecx; ret; 
0x000000000355cd: adc [rax], edx; add bl, dh; nop edx, edi; mov rax, [rip+0x1e54a5]; ret; 
0x000000000ab07e: adc [rax], r8b; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x0000000011c354: adc [rax], r8b; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000001149f4: adc [rax], r8b; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011c40c: adc [rax], r8b; pop rbx; pop rbp; ret; 
0x00000000059e1c: adc [rbp+0x29], cl; ret; 
0x0000000015045c: adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x00000000107d19: adc [rbp+0x39], cl; ret far; 
0x00000000118d24: adc [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000a60b2: adc [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x00000000039c81: adc [rbp+0x440a75d2], eax; mov eax, eax; ret; 
0x0000000012a57d: adc [rbp+0x440e75d2], eax; mov eax, eax; ret; 
0x0000000015fc8d: adc [rbp+0x481074c0], al; mov eax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b64a: adc [rbp+0x487974c0], al; mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000015d64e: adc [rbp+0x494874c0], al; mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000090c36: adc [rbp+0x4c1574c0], al; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000009a016: adc [rbp+0x531574c0], al; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000095cb8: adc [rbp+0x5], dh; ret; 
0x00000000149cab: adc [rbp+0x5b0875c0], al; pop rbp; pop r12; ret; 
0x000000000c267f: adc [rbp+rcx*4+0x1d], cl; or [rip+0x634b0011], ecx; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001750b4: adc [rbp+rcx*4+0x44], cl; and al, 0x20; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x0000000003081f: adc [rbp+rcx*4-0x74], cl; and al, 0x98; add [rax], al; add al, ch; ret; 
0x0000000015f838: adc [rbp-0x17bf040], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x000000000996fa: adc [rbp-0x1f], dh; mov qword ptr fs:[0x2f0], 0x0; nop; xor eax, eax; ret; 
0x00000000172545: adc [rbp-0x3d], bl; nop [rax+rax]; endbr64; ret; 
0x000000000c5a1d: adc [rbp-0x6b], esi; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x0000000007b44a: adc [rbp-0x77], al; ret far; 
0x00000000037424: adc [rbp-0x77], ecx; ret far; 
0x00000000133144: adc [rbp-0x78], ebp; call rax; 
0x00000000132f2e: adc [rbp-0x78], ebx; call rax; 
0x000000001330c1: adc [rbp-0x78], ecx; call rcx; 
0x00000000133339: adc [rbp-0x78], edi; call rax; 
0x0000000013325d: adc [rbp-0x78], edx; call r8; 
0x0000000013365e: adc [rbp-0x78], esi; call rax; 
0x000000001331a6: adc [rbp-0x78], esp; call rax; 
0x00000000120c36: adc [rbp-0x7b], cl; in al, 0x75; and al, 0x48; mov edi, [rbp]; call rbx; 
0x0000000011fe0d: adc [rbp-0x7b], cl; in al, 0x75; mov rdi, [rbp]; call rbx; 
0x0000000011fe3f: adc [rbp-0x7b], cl; in eax, dx; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe6f: adc [rbp-0x7b], cl; in eax, dx; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c9b: adc [rbp-0x7b], cl; in eax, dx; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x00000000029e0e: adc [rbp-0x7b], cl; push qword ptr [rsp+rbp+0x4c]; mov esi, esp; mov edi, ebp; call r15; 
0x00000000152304: adc [rbp-0xf], dh; ret; 
0x0000000008a0b5: adc [rbx+0x10], dh; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000001142fb: adc [rbx+0x10], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000008a07b: adc [rbx+0x12], dh; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000008a643: adc [rbx+0x18], eax; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x000000000a7a01: adc [rbx+0x18], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000008a647: adc [rbx+0x28], eax; pop rbx; ret; 
0x00000000170afb: adc [rbx+0x3145000a], eax; jmp qword ptr [rdi+rax*8]; 
0x0000000002be47: adc [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000a759c: adc [rbx+0x38], eax; and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x000000000a767d: adc [rbx+0x38], eax; mov [rbx], rsi; call rax; 
0x0000000008dd96: adc [rbx+0x38], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000126327: adc [rbx+0x397426fa], al; mov eax, r8d; ret; 
0x000000001a683f: adc [rbx+0x463bfc47], cl; cld; jne short 0x00000000001a6850; xor eax, eax; ret; 
0x00000000046059: adc [rbx+0x48], bl; mov dword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x0000000002d03c: adc [rbx+0x48], eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008d866: adc [rbx+0x48], eax; pop rbx; ret; 
0x000000000900a2: adc [rbx+0x5d], bl; pop r12; jmp rax; 
0x00000000080ff9: adc [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000007e034: adc [rbx+0x5d], bl; pop r12; ret; 
0x0000000008a63f: adc [rbx+0x8], eax; movups [rbx+0x18], xmm0; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x0000000008a746: adc [rbx+0x8], eax; pop rbx; ret; 
0x0000000008b5f4: adc [rbx+0x8], ecx; pop rbx; pop rbp; pop r12; ret; 
0x000000001426ce: adc [rbx+0xba05ff], eax; add [rax], al; add [rax+0x102], bh; cmovne eax, edx; ret; 
0x000000000bfe87: adc [rbx+0xff3174e], cl; jg short 0x00000000000bfe96; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c0b77: adc [rbx+0xff3174e], cl; jg short 0x00000000000c0b86; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c3197: adc [rbx+0xff3174e], cl; jg short 0x00000000000c31a6; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c3c87: adc [rbx+0xff3174e], cl; jg short 0x00000000000c3c96; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000bfea7: adc [rbx+0xff3184e], cl; jg short 0x00000000000bfeb6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c0b97: adc [rbx+0xff3184e], cl; jg short 0x00000000000c0ba6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c31b7: adc [rbx+0xff3184e], cl; jg short 0x00000000000c31c6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c3ca7: adc [rbx+0xff3184e], cl; jg short 0x00000000000c3cb6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x00000000118136: adc [rbx+r9*4+0x63], r9b; or [rax-0x7d], cl; ret; 
0x00000000118137: adc [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x0000000008f21a: adc [rbx-0x2fd6efb9], cl; ret; 
0x0000000016ca26: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000015fbd6: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000001148e7: adc [rbx-0x47e7db84], cl; add [rcx], eax; add [rax], al; syscall; 
0x00000000128042: adc [rbx-0x47f3db84], cl; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000015d1fe: adc [rbx-0x72b7a3b0], ecx; jo short 0x000000000015d24e; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x00000000174494: adc [rbx-0x76be0008], al; ret; 
0x000000001187c5: adc [rbx-0x7d17d785], cl; ret far; 
0x000000000ead67: adc [rbx-0x7d], bl; loopne 0x00000000000ead78; pop rbp; pop r12; ret; 
0x00000000115c0c: adc [rbx], cl; add al, [rax]; endbr64; mov eax, 0x5c; syscall; 
0x00000000046a58: adc [rbx], eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009f1f1: adc [rcx+0x244489ee], cl; adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall; 
0x000000000da06e: adc [rcx+0x29], al; ret; 
0x000000001a4216: adc [rcx+0x4], esp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4215: adc [rcx+0x4], rsp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x00000000142f49: adc [rcx+0x4e2c1f2], ecx; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000001a421d: adc [rcx+0x5], ebp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a421c: adc [rcx+0x5], rbp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000000a7a97: adc [rcx+0x5c], al; ret; 
0x0000000015da5b: adc [rcx+0x5d90ffec], ebp; ret; 
0x0000000018d6e1: adc [rcx+0x66c30351], ecx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x0000000018d722: adc [rcx+0x66c30751], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d732: adc [rcx+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001a4224: adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4223: adc [rcx+0x6], rsi; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a422b: adc [rcx+0x7], edi; ret; 
0x000000001a422a: adc [rcx+0x7], rdi; ret; 
0x00000000162f11: adc [rcx+rcx*4-0x1a], cl; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015f82f: adc [rcx+rcx*4-0x1e], cl; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86d: adc [rcx+rcx*4-0x1e], cl; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000e8135: adc [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000e8535: adc [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000431e4: adc [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000001279bb: adc [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000007e221: adc [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000007b5b0: adc [rcx+rcx*4-0x3e], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x000000000a0844: adc [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x00000000039ce3: adc [rcx+rcx*4-0x40], al; ret; 
0x000000000c4052: adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret; 
0x000000000c4032: adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret; 
0x000000001a3ec6: adc [rcx-0x1], ebx; ret; 
0x000000001a3e8a: adc [rcx-0x1], edi; ret; 
0x000000001a3ec5: adc [rcx-0x1], rbx; ret; 
0x000000001a3e89: adc [rcx-0x1], rdi; ret; 
0x000000001a3ebf: adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x000000001a40bd: adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e83: adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x000000001a3ebe: adc [rcx-0x2], rdx; vmovups [r9-0x40], zmm3; ret; 
0x000000001a40bc: adc [rcx-0x2], rsi; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e82: adc [rcx-0x2], rsi; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40b6: adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e7c: adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40b5: adc [rcx-0x3], rbp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e7b: adc [rcx-0x3], rbp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000000466ee: adc [rcx-0x3f76bbea], cl; ret; 
0x000000001a40af: adc [rcx-0x4], esp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e75: adc [rcx-0x4], esp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40ae: adc [rcx-0x4], rsp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e74: adc [rcx-0x4], rsp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000000fbcde: adc [rcx-0x75], cl; adc [rax+0x21], r9b; ret; 
0x00000000051d0d: adc [rcx-0x75], cl; ret; 
0x00000000046caf: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x13e; syscall; 
0x0000000011ecbf: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x1a; syscall; 
0x00000000118d6f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x7; syscall; 
0x000000001149c0: adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x0000000012607b: adc [rcx-0x77], al; ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 0x8; mov eax, 0x114; syscall; 
0x000000001199ac: adc [rcx-0x77], al; ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 0x8; mov eax, 0x11d; syscall; 
0x0000000016fafc: adc [rcx-0x77], cl; ret; 
0x000000000a0dae: adc [rcx-0x7d], al; ret; 
0x0000000004f9cb: adc [rcx-0x7d], cl; in al, dx; add [rcx+0x29], ecx; ret far; 
0x0000000007ba08: adc [rcx], al; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000016a596: adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000174c61: adc [rcx], al; add [rax], al; mov eax, r12d; pop r12; ret; 
0x00000000149fc4: adc [rcx], al; add [rax], al; pop rbx; ret; 
0x00000000126fc5: adc [rcx], al; add [rax], al; syscall; 
0x0000000016d11f: adc [rcx], al; imul ebp, [rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000198797: adc [rcx], ch; cmp edx, ecx; jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x0000000008f21d: adc [rcx], ch; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x0000000012e5f5: adc [rcx], dh; idiv byte ptr [rdi+0x2000004]; call rax; 
0x000000000a61ab: adc [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x000000000a536f: adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000846ba: adc [rcx], dh; rol bl, 0x66; nop; mov eax, 0xffffffff; ret; 
0x0000000008597f: adc [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x80]; 
0x00000000153821: adc [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10; 
0x00000000094931: adc [rcx], eax; add [rax], al; syscall; 
0x000000000c4b8c: adc [rcx], eax; ret; 
0x000000001663fb: adc [rcx], ebx; ret; 
0x00000000165ae3: adc [rcx], ecx; ret; 
0x000000001a2684: adc [rcx], edx; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000165afb: adc [rcx], edx; ret; 
0x000000001663db: adc [rcx], esp; ret; 
0x00000000112a8e: adc [rdi+0x10], eax; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c511c: adc [rdi+0x10], eax; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; ret; 
0x00000000119592: adc [rdi+0x10], eax; movups [rdi+0x20], xmm1; ret; 
0x000000000c4bef: adc [rdi+0x10], ebp; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000c4a7f: adc [rdi+0x10], ecx; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x0000000016ce6e: adc [rdi+0x18], eax; ret; 
0x000000001a3eb8: adc [rdi+0x1], ecx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a45c5: adc [rdi+0x1], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a3eb7: adc [rdi+0x1], rcx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a45c4: adc [rdi+0x1], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x00000000112a92: adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c5120: adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; ret; 
0x00000000119596: adc [rdi+0x20], ecx; ret; 
0x000000001663ea: adc [rdi+0x20], edx; ret; 
0x000000000c4bf3: adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x00000000112a96: adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x000000000c5124: adc [rdi+0x30], eax; ret; 
0x000000000c4bf7: adc [rdi+0x30], edi; movups [rdx+rdi-0x10], xmm8; ret; 
0x00000000112a9a: adc [rdi+0x40], eax; ret; 
0x00000000112fb1: adc [rdi+0x68], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x00000000092627: adc [rdi+0x70], edi; pop rbx; pop rbp; pop r12; ret; 
0x00000000112fba: adc [rdi+0x78], edi; ret; 
0x0000000008d79c: adc [rdi+0x8], eax; ret; 
0x0000000008d761: adc [rdi+0x8], ecx; ret; 
0x000000001139f3: adc [rdi+0xe8], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000001139ff: adc [rdi+0xf8], edi; ret; 
0x000000000c4b86: adc [rdi+rcx+0x11], al; add cl, [rdi]; adc [rcx], eax; ret; 
0x00000000143004: adc [rdi+rdx+0x8], eax; ret; 
0x000000000c500d: adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x000000000c4da5: adc [rdi+rdx-0x10], ebx; ret; 
0x000000000c4917: adc [rdi+rdx-0x10], ecx; ret; 
0x000000000c4a83: adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4adc: adc [rdi+rdx-0x10], esp; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4ae1: adc [rdi+rdx-0x20], ebp; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4a88: adc [rdi+rdx-0x20], ebx; ret; 
0x000000000c4da0: adc [rdi+rdx-0x20], edx; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4d9b: adc [rdi+rdx-0x30], ecx; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4ae6: adc [rdi+rdx-0x30], esi; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4d96: adc [rdi+rdx-0x40], eax; movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4aeb: adc [rdi+rdx-0x40], edi; ret; 
0x000000000c50b6: adc [rdi-0x10], eax; ret; 
0x000000000c50b2: adc [rdi-0x20], eax; movups [rdi-0x10], xmm0; ret; 
0x000000001a4378: adc [rdi-0x5], esp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4377: adc [rdi-0x5], rsp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a437f: adc [rdi-0x6], ebp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a437e: adc [rdi-0x6], rbp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4386: adc [rdi-0x7], esi; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4385: adc [rdi-0x7], rsi; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a438d: adc [rdi-0x8], edi; ret; 
0x000000001a438c: adc [rdi-0x8], rdi; ret; 
0x000000000846b4: adc [rdi], cl; adc [rax], eax; mov [rax], rdx; xor eax, eax; ret; 
0x00000000112a90: adc [rdi], cl; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c511e: adc [rdi], cl; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; ret; 
0x00000000119594: adc [rdi], cl; adc [rdi+0x20], ecx; ret; 
0x000000000c4bf1: adc [rdi], cl; adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000c4a81: adc [rdi], cl; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x00000000127d2b: adc [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000166478: adc [rdi], cl; enter 0xc089, 0x48; mov [rcx], eax; mov eax, 0x1; ret; 
0x000000000b14d5: adc [rdi], cl; mov bh, 0x54; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000001367ea: adc [rdi], cl; mov bh, 0xc6; or eax, edi; bswap eax; ret; 
0x000000000b14bd: adc [rdi], cl; mov dh, 0x54; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000b149f: adc [rdi], cl; mov dh, 0x54; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x0000000018d2c7: adc [rdi], cl; test [rcx+0x5], eax; add [rax], al; ret; 
0x0000000009141b: adc [rdi], eax; mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000004186f: adc [rdi], eax; movaps xmm0, xmm1; ret; 
0x00000000041880: adc [rdi], eax; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000000c5119: adc [rdi], eax; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; ret; 
0x000000000c4a7c: adc [rdi], eax; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4914: adc [rdi], eax; movups [rdi+rdx-0x10], xmm1; ret; 
0x0000000004673c: adc [rdi], eax; ret; 
0x000000001a3eb2: adc [rdi], eax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x00000000127cc8: adc [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000127c94: adc [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000127c44: adc [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000001a45bf: adc [rdi], edx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45e0: adc [rdi], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a3eb1: adc [rdi], rax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a45be: adc [rdi], rdx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45df: adc [rdi], rdx; vmovups [rsi-0x40], zmm2; ret; 
0x000000000c4b84: adc [rdx+0x10], edi; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x00000000129092: adc [rdx+0x13], dh; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000000c63a0: adc [rdx+0x1], ch; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000c6326: adc [rdx+0x1], ch; xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x000000000c4b80: adc [rdx+0x20], esi; movups [rdx+0x10], xmm7; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x0000000008979b: adc [rdx+0x32], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000089bbb: adc [rdx+0x42], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x0000000015e409: adc [rdx+0x59], bl; mov rdi, [rsp+0x8]; mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000005168c: adc [rdx+0x6], bh; mov [rip+0x1ca24d], al; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000009282d: adc [rdx+0x80], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001294c6: adc [rdx+0x8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000108e0e: adc [rdx+0x8], dh; setne al; movzx eax, al; neg eax; ret; 
0x0000000009e6f6: adc [rdx+0x8], eax; cmp eax, 0x2; je short 0x000000000009e71b; ret; 
0x0000000009e017: adc [rdx+0x8], eax; je short 0x000000000009e03b; ret; 
0x0000000017b3fa: adc [rdx+0x9], dh; movaps [rdi], xmm4; notrack jmp r9; 
0x000000000c0ab6: adc [rdx+0xff31456], cl; jg short 0x00000000000c0ac5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000c0ab5: adc [rdx+0xff31456], r9b; jg short 0x00000000000c0ac5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000c0b37: adc [rdx+0xff3184e], cl; jg short 0x00000000000c0b46; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c0c38: adc [rdx+0xff3204e], cl; jg short 0x00000000000c0c47; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c2488: adc [rdx+0xff3204e], cl; jg short 0x00000000000c2497; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c4bfc: adc [rdx+rdi-0x10], eax; ret; 
0x000000000404ea: adc [rdx+rdx*8-0x3c3c268b], eax; nop [rax]; xor eax, eax; ret; 
0x000000001509eb: adc [rdx-0x13], edi; dec dword ptr [rax-0x77]; ret; 
0x00000000191a4c: adc [rdx], al; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c534a: adc [rdx], al; add [rax], al; ret; 
0x0000000014231e: adc [rdx], al; cmp rcx, rdi; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x000000000c4b89: adc [rdx], eax; movups [rcx], xmm0; ret; 
0x000000000414c0: adc [rdx], ecx; and rsi, rax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000414e5: adc [rdx], ecx; movapd xmm0, xmm2; ret; 
0x00000000041493: adc [rdx], ecx; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x0000000004152c: adc [rdx], ecx; ret; 
0x00000000041816: adc [rip+0x18b064], bl; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x000000000415d8: adc [rip+0x1a0ac2], cl; orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415aa: adc [rip+0x1a0b00], cl; orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000001baaae: adc [rip+0x2830c], al; divss xmm0, [rip+0x29368]; ret; 
0x00000000155b83: adc [rip+0xcdb5f], esp; call rbx; 
0x00000000041097: adc [rip-0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x000000001a4705: adc [rsi+0x1], edx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a4704: adc [rsi+0x1], rdx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000003de7c: adc [rsi+0x2948fffe], ah; ret; 
0x000000001a470c: adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a470b: adc [rsi+0x2], rdx; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a4713: adc [rsi+0x3], edx; ret; 
0x000000001a4712: adc [rsi+0x3], rdx; ret; 
0x00000000174ec5: adc [rsi+0x40], bh; mov rdi, r12; call rax; 
0x000000001a479b: adc [rsi+0x4], edx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a479a: adc [rsi+0x4], rdx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47a2: adc [rsi+0x5], edx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47a1: adc [rsi+0x5], rdx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000000923a1: adc [rsi+0x60], esi; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000112f61: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x00000000113966: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000001a47a9: adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47a8: adc [rsi+0x6], rdx; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000000923af: adc [rsi+0x70], edi; ret; 
0x000000001a47b0: adc [rsi+0x7], edx; ret; 
0x000000001a47af: adc [rsi+0x7], rdx; ret; 
0x000000001069d6: adc [rsi+0x8], eax; ret; 
0x0000000015eddc: adc [rsi+0x8], ecx; ret; 
0x00000000119869: adc [rsi+0xf], ah; insb [rdi], dx; ret far; 
0x000000000b1bcb: adc [rsi+0xf], ah; outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x000000000b4b90: adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000d6e20: adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x00000000119868: adc [rsi+0xf], r12b; insb [rdi], dx; ret far; 
0x000000001430aa: adc [rsi+rcx+0x8], edx; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000c490f: adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000001a45b2: adc [rsi-0x1], edx; ret; 
0x000000001a45b1: adc [rsi-0x1], rdx; ret; 
0x000000001a45ab: adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45aa: adc [rsi-0x2], rdx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45a4: adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45a3: adc [rsi-0x3], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a459d: adc [rsi-0x4], edx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a459c: adc [rsi-0x4], rdx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a3f4e: adc [rsi-0x75], ah; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000000c4013: adc [rsi-0x77], ah; sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000567c0: adc [rsi], eax; mov [rdi], eax; mov eax, 0x2; ret; 
0x000000001659ee: adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000016631e: adc [rsi], eax; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x00000000162bf1: adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x000000000463cc: adc [rsi], eax; sub edi, 0x1; jns short 0x0000000000046391; xor eax, eax; ret; 
0x000000001a46ff: adc [rsi], edx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a46fe: adc [rsi], rdx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x00000000119f8f: adc [rsp+0x11], esp; syscall; 
0x00000000113199: adc [rsp+0x128], eax; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000169030: adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000016d268: adc [rsp+0x18], eax; call r8; 
0x00000000169334: adc [rsp+0x18], ecx; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x00000000169339: adc [rsp+0x38], eax; call qword ptr [rax+0x18]; 
0x000000000425da: adc [rsp+0x78], esi; movups [rsp+0x88], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000000425df: adc [rsp+0x88], edi; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000001695f2: adc [rsp+0xb8], ebx; call qword ptr [rax+0x18]; 
0x0000000016955c: adc [rsp+0xb8], edx; call rax; 
0x000000000d8f6e: adc [rsp-0x10], al; ret; 
0x0000000015e405: adc [rsp], edx; call qword ptr [rax]; 
0x000000000a828a: adc ah, [rbp-0x72b7ffff]; adc eax, 0x12afb; cmovne rax, rdx; ret; 
0x000000000c516d: adc ah, bh; ret; 
0x000000001a1224: adc ah, bh; vzeroupper; ret; 
0x000000000ee5ea: adc al, 0x0; add [rax-0x77], cl; ret far; 
0x000000000475c9: adc al, 0x0; add [rax], al; add [rcx-0x80], al; jmp far fword ptr [rbx]; 
0x0000000010932f: adc al, 0x0; add [rax], al; add [rdx+0x2], edi; cmove eax, edx; ret; 
0x00000000147cd8: adc al, 0x0; add [rax], al; add edx, 0x1; syscall; 
0x0000000011ac01: adc al, 0x0; add [rax], al; syscall; 
0x000000000b33f8: adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000db58c: adc al, 0x0; cmp eax, 0x1; jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x0000000002b306: adc al, 0x0; mov rax, [rbp-0x68]; mov rdi, r12; call rax; 
0x0000000002b788: adc al, 0x0; mov rdi, rbx; call r12; 
0x0000000002b8b4: adc al, 0x0; mov rdi, rbx; call r14; 
0x0000000002adb7: adc al, 0x0; mov rdi, rbx; call r15; 
0x0000000002b9c7: adc al, 0x0; mov rdi, rbx; call rbp; 
0x0000000009036d: adc al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000008c2c0: adc al, 0x0; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x00000000039c80: adc al, 0x11; test edx, edx; jne short 0x0000000000039c90; mov eax, r8d; ret; 
0x0000000012a57c: adc al, 0x11; test edx, edx; jne short 0x000000000012a590; mov eax, r8d; ret; 
0x0000000012a7cf: adc al, 0x11; test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b05f: adc al, 0x11; test edx, edx; jne short 0x000000000012b070; ret; 
0x0000000017aef5: adc al, 0x13; notrack jmp rdx; 
0x000000000b2e39: adc al, 0x16; sub eax, edx; ret; 
0x00000000198b00: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x00000000047848: adc al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000001a6738: adc al, 0x1; add [rax], al; ret; 
0x00000000126044: adc al, 0x1; add [rax], al; syscall; 
0x0000000013f368: adc al, 0x20; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000016c62e: adc al, 0x24; call qword ptr [rax+0x48]; 
0x0000000015e406: adc al, 0x24; call qword ptr [rax]; 
0x00000000029eb2: adc al, 0x24; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000001163eb: adc al, 0x2; call qword ptr [rbx+0x40]; 
0x000000000c3f73: adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret; 
0x000000001b3116: adc al, 0x3a; sub eax, edx; ret; 
0x0000000019912d: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000043300: adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall; 
0x00000000042c6a: adc al, 0x48; add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000d8ec4: adc al, 0x48; add esp, 0x28; ret; 
0x000000000c14a0: adc al, 0x48; lea eax, [rdi+0x14]; ret; 
0x000000000c2313: adc al, 0x48; lea eax, [rdi+0x15]; ret; 
0x000000000b511b: adc al, 0x48; lea eax, [rdi+rax+0x30]; ret; 
0x000000000c0741: adc al, 0x48; lea edi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c1e85: adc al, 0x48; lea edi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x00000000098efb: adc al, 0x48; lea edx, [rip+0x139ced]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000015dfa7: adc al, 0x48; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000008e07b: adc al, 0x48; mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000029d80: adc al, 0x48; mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000011aceb: adc al, 0x48; mov esi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011adab: adc al, 0x48; mov esi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000c0760: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c1eb3: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x0000000009f1f7: adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall; 
0x0000000011adc8: adc al, 0x5d; idiv edi; mov rax, [rsp]; add rsp, 0x28; ret; 
0x0000000008e7fb: adc al, 0x5d; ret; 
0x0000000013f1b8: adc al, 0x63; add eax, [rax]; mov rdi, r12; call rbx; 
0x000000001bb8b6: adc al, 0x66; nop [rax+rax]; call qword ptr [rbx]; 
0x000000000b1236: adc al, 0x7; cmp edx, esi; je short 0x00000000000b1230; ret; 
0x00000000116e5b: adc al, 0x82; call qword ptr [rsp+0x50]; 
0x000000001af97b: adc al, 0x83; shl byte ptr [rax+0x48], 0x1; clc; ret; 
0x00000000199afb: adc al, 0x83; shl byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x00000000138b68: adc al, 0x88; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000009bdc3: adc al, 0x89; out dx, al; mov edi, r12d; mov eax, 0x129; syscall; 
0x00000000084675: adc al, 0x90; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007d3e5: adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x00000000196700: adc al, 0x91; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000194e2e: adc al, 0x91; sub eax, edx; ret; 
0x0000000003ff4a: adc al, 0x93; add r10, r11; notrack jmp r10; 
0x0000000017aef1: adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b7b3b: adc al, 0x94; add r10, r12; notrack jmp r10; 
0x0000000003fc74: adc al, 0x96; add rdx, rsi; notrack jmp rdx; 
0x00000000104c82: adc al, 0x97; add rdx, r15; notrack jmp rdx; 
0x00000000053c9d: adc al, 0x97; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b146b: adc al, 0x97; add rdx, rdi; notrack jmp rdx; 
0x000000000f4199: adc al, 0x9; mov byte ptr [rax+0x8], 0x1; mov [rax], dl; mov eax, 0x1; ret; 
0x00000000161904: adc al, 0xa; mov [rdi+0x7], dl; ret; 
0x000000000b1a37: adc al, 0xa; notrack jmp r10; 
0x000000000b2fa3: adc al, 0xa; sub eax, edx; ret; 
0x00000000198c7d: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x0000000012a5f7: adc al, 0xb2; add eax, [rdx+rcx]; ret; 
0x000000000a95f8: adc al, 0xc0; add [rax], al; cmove rax, rdx; ret; 
0x000000000540f1: adc al, 0xc0; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x000000000540f5: adc al, 0xc6; xor eax, eax; ret; 
0x00000000175e1e: adc al, 0xc7; xor eax, eax; ret; 
0x0000000004b516: adc al, 0xd4; std; jmp qword ptr [rsi+0xf]; 
0x000000000a98d5: adc al, 0xd; add [rax-0x73], cl; adc eax, 0xd6a31; cmovne rax, rdx; ret; 
0x00000000036bff: adc al, 0xe0; test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x000000000c4978: adc al, 0xe; cmp rdi, rdx; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x00000000061b55: adc al, 0xe; mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x00000000192f41: adc al, 0xe; sub eax, edx; ret; 
0x00000000116ea6: adc al, 0xf1; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000168b40: adc al, 0xf3; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000c0ab9: adc al, 0xf3; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x0000000011f4cb: adc al, 0xf4; call far fword ptr [rax+0x4c]; 
0x0000000012795c: adc al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000c1e89: adc al, 0xf; test [rax+0x7], edx; add [rax], al; ret; 
0x00000000173c31: adc al, 0xfc; jmp qword ptr [rsi+0x2e]; 
0x0000000013608b: adc al, 0xfd; jmp qword ptr [rsi-0x70]; 
0x000000000e5cbb: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x000000001129a4: adc al, [rax]; add [rax], al; syscall; 
0x000000000b8fde: adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000019c08f: adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000ec15b: adc al, [rax]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000ec1eb: adc al, [rax]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec4ab: adc al, [rax]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec54b: adc al, [rax]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x000000000b1390: adc al, [rax]; mov edi, ecx; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x000000000b1525: adc al, [rax]; mov edi, edx; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x000000000b1465: adc al, [rax]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000b1a2f: adc al, [rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000a6fce: adc al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ea389: adc al, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea4c5: adc al, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000014268d: adc al, [rbx+0x7ba14fe]; add [rax], eax; add [rax-0x1], bh; cmove eax, edx; ret; 
0x000000000af9fb: adc al, [rbx-0x76befc17]; ret far; 
0x0000000004548a: adc al, [rcx]; add [rax], al; mov esi, ebp; mov rdi, r13; call rax; 
0x000000000bc774: adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x0000000016725a: adc al, [rdi]; add [rax-0x77], cl; ret; 
0x000000001af2fa: adc al, [rdi]; add [rdi], cl; sub dword ptr [rbp-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x0000000019f70a: adc al, [rdx]; add [rax], al; vzeroupper; ret; 
0x000000000378da: adc al, [rsi]; add [rax], al; xchg ax, ax; ret; 
0x000000001a1128: adc al, ah; vzeroupper; ret; 
0x000000000c5166: adc al, bh; ret; 
0x000000001a1216: adc al, bh; vzeroupper; ret; 
0x000000001096ab: adc al, ch; jmp far fword ptr [rcx+0x63490003]; 
0x0000000012178b: adc al, ch; paddd mm7, mm7; call far fword ptr [rax+0x5a]; 
0x00000000055b9f: adc al, ch; ret far; 
0x00000000062297: adc al, ch; ret; 
0x000000001515bc: adc al, ch; scasb [rdi]; insd [rdi], dx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000000ea4ad: adc al, ch; sub eax, 0x8bfffa66; and al, 0x10; add rsp, 0x28; ret; 
0x000000000909e3: adc al, ch; xchg [rcx-0x7], edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000c50ae: adc al, dh; ret; 
0x000000001a120a: adc al, dh; vzeroupper; ret; 
0x000000001a1127: adc al, r12b; vzeroupper; ret; 
0x000000000c50ad: adc al, r14b; ret; 
0x000000001a1209: adc al, r14b; vzeroupper; ret; 
0x00000000078bdc: adc bh, ah; call qword ptr [rax+0x87e8b48]; 
0x000000001754a4: adc bh, ah; jmp qword ptr [rsi+0xf]; 
0x0000000016a205: adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x000000000b153e: adc bh, bh; ret; 
0x000000001a162f: adc bh, bh; ret; 
0x000000001a1236: adc bh, bh; vzeroupper; ret; 
0x000000001a1331: adc bh, bh; vzeroupper; ret; 
0x000000001ae351: adc bh, bh; xtest; je short 0x00000000001ae35c; vzeroall; ret; 
0x00000000133cdb: adc bl, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x0000000012c435: adc bl, [rbx+0x5d]; pop r12; ret; 
0x000000000a9a0a: adc bl, [rsi+0x1]; add [rax-0x73], cl; adc eax, 0xe492b; cmovne rax, rdx; ret; 
0x000000001b53ab: adc bl, al; mov rax, r8; ret; 
0x000000000b4bc7: adc bl, al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b5097: adc bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b147f: adc bl, al; nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x000000000410cc: adc bl, bl; insb [rdi], dx; and al, 0x8; ret; 
0x00000000089bf3: adc bl, ch; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000054db6: adc bl, ch; jge short 0x0000000000054e03; shl ecx, cl; mov [rdi], r9; ret; 
0x00000000182770: adc bl, dh; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c2286: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a66: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000c1437: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd87: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000c1476: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000bfdc6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000bfdb6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000c14f7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2367: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000bfe47: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe27: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x000000000c15f8: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c2468: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000bff28: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000001baaab: adc bl, dh; movups xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x0000000018276f: adc bl, r14b; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c2285: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a65: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000c1436: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd86: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000c1475: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000bfdc5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000bfdb5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000c14f6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2366: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000bfe46: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe26: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x000000000c5349: adc byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000114f9c: adc byte ptr [rdi], 0x2; add bl, dh; nop edx, edi; mov eax, 0x49; syscall; 
0x000000000b8fdd: adc byte ptr [rdx], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000018895d: adc byte ptr [rsi], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000011bba9: adc ch, [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000157bb2: adc ch, bl; ret; 
0x000000000b1969: adc cl, [rax+0x29]; ret; 
0x00000000083576: adc cl, [rax+0x39]; enter 0xf48, 0x4f; ror dword ptr [rax-0x7b], 0xd2; jne short 0x0000000000083570; ret; 
0x0000000008d56e: adc cl, [rax+0x39]; enter 0xf48, 0x4f; ror dword ptr [rax-0x7b], 0xd2; jne short 0x000000000008d568; ret; 
0x00000000083366: adc cl, [rax+0x39]; ret far; 
0x0000000008fe4a: adc cl, [rax+0xe]; add [rsi-0x70], ah; mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x000000000c0703: adc cl, [rax-0x73]; jg short 0x00000000000c071a; jne 0x00000000000c0d90; ret; 
0x000000000c1e27: adc cl, [rax-0x73]; jg short 0x00000000000c1e3e; jne 0x00000000000c25e0; ret; 
0x000000000829e5: adc cl, [rax-0x73]; jno short 0x00000000000829ee; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000174ea9: adc cl, [rax-0x75]; add eax, 0xa4017; call qword ptr [rax+0x368]; 
0x0000000008e55d: adc cl, [rax-0x75]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000053d44: adc cl, [rax-0x77]; push rbp; push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70]; 
0x00000000086e8d: adc cl, [rbx+0x42394c42]; cmovne rax, rcx; ret; 
0x000000000bc93f: adc cl, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95f: adc cl, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97f: adc cl, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4cf: adc cl, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc7c5: adc cl, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x00000000127b74: adc cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000005d5ed: adc cl, [rdi]; mov esi, 0x77cf390e; jrcxz 0x000000000005d63a; mov eax, eax; ret; 
0x000000001350a6: adc cl, [rdx-0x11]; jmp qword ptr [rsi+0xf]; 
0x000000000467c0: adc cl, al; loop 0x00000000000467ce; and eax, 0x3ff; xor eax, edx; ret; 
0x000000000a6b54: adc cl, ch; paddd mm7, mm7; dec dword ptr [rax-0x77]; ret far; 
0x0000000007cdcb: adc cl, ch; ret; 
0x00000000198a89: adc dh, [rbx-0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000014ed7a: adc dh, [rcx]; test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x0000000012817c: adc dh, [rdi+0xd]; movzx edi, di; lea rax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x0000000015562f: adc dh, bh; jmp qword ptr [rsi+0x66]; 
0x000000001474bf: adc dh, ch; inc dword ptr [rbp-0x507bf040]; add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x000000000ebfc1: adc dh, dh; ret; 
0x000000000b153d: adc dil, r15b; ret; 
0x00000000098b3a: adc dl, [rbx]; cli; jmp qword ptr [rsi-0x70]; 
0x0000000012ea6a: adc dl, [rcx]; add [rcx+rcx*4-0x2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000088a7c: adc dl, [rip+0x13cce800]; sti; jmp qword ptr [rsi+0x66]; 
0x000000000a0fbb: adc dword ptr [rdi], 0x0; add [rax], eax; add [rax], al; mov [rip+0x1783d8], eax; ret; 
0x000000000a0a2c: adc dword ptr [rdi], 0x0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0f66: adc dword ptr [rdi], 0x0; ret; 
0x00000000162ef5: adc eax, 0x0; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000118da2: adc eax, 0x100069; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001152f2: adc eax, 0x103b19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115242: adc eax, 0x103bc9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115162: adc eax, 0x103ca9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ba278: adc eax, 0x104243; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ba253: adc eax, 0x104268; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000114b0a: adc eax, 0x104301; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114ada: adc eax, 0x104331; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000114a92: adc eax, 0x104379; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001149f2: adc eax, 0x104419; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001142fa: adc eax, 0x104b11; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001142ca: adc eax, 0x104b41; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114282: adc eax, 0x104b89; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ab07c: adc eax, 0x104c1f; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x00000000113f02: adc eax, 0x104f09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a9d80: adc eax, 0x10512b; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a94ec: adc eax, 0x10518f; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x00000000113c52: adc eax, 0x1051b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a9940: adc eax, 0x10554b; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a9710: adc eax, 0x10579b; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a9830: adc eax, 0x10628b; lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x00000000112a12: adc eax, 0x1063f9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000112962: adc eax, 0x1064a9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000b7c18: adc eax, 0x1068a3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000b7bfe: adc eax, 0x1068bd; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000c52d5: adc eax, 0x10e2a6; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000d7e6a: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x00000000108dea: adc eax, 0x110021; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000108d4a: adc eax, 0x1100c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c6d7f: adc eax, 0x118ac; cmovne rax, rdx; ret; 
0x000000000b7d6c: adc eax, 0x11b22f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5afc: adc eax, 0x11d41f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b314c: adc eax, 0x11fd4f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a2c: adc eax, 0x1213ef; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000a8290: adc eax, 0x12afb; cmovne rax, rdx; ret; 
0x000000000a6fcb: adc eax, 0x12bdb0; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c55ef: adc eax, 0x12e5c; cmovne rax, rdx; ret; 
0x000000000ea6a2: adc eax, 0x12e769; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea582: adc eax, 0x12e889; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea4c2: adc eax, 0x12e949; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e66c2: adc eax, 0x132749; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000e5772: adc eax, 0x133699; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e5702: adc eax, 0x133709; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000098efe: adc eax, 0x139ced; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000984b8: adc eax, 0x13a623; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000dcdfa: adc eax, 0x13c011; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000dcdca: adc eax, 0x13c041; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000088a7d: adc eax, 0x13cce800; sti; jmp qword ptr [rsi+0x66]; 
0x000000000d9cd2: adc eax, 0x13f139; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9b12: adc eax, 0x13f2f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d99fa: adc eax, 0x13f411; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a8860: adc eax, 0x1414b; cmovne rax, rdx; ret; 
0x0000000009036a: adc eax, 0x142479; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000008c2bd: adc eax, 0x1462fe; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c304: adc eax, 0x146313; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c359: adc eax, 0x14631a; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3a9: adc eax, 0x146326; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3f9: adc eax, 0x146332; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c449: adc eax, 0x14633e; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000007ddaa: adc eax, 0x14634800; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x0000000007d365: adc eax, 0x1547d6; add rax, rdx; ret; 
0x0000000007d4e7: adc eax, 0x154d24; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c0764: adc eax, 0x157f8d48; jne 0x00000000000c0d90; ret; 
0x000000000c1eb8: adc eax, 0x157f8d48; jne 0x00000000000c25e0; ret; 
0x000000000c4c0e: adc eax, 0x15b98d; jae short 0x00000000000c4c20; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000063a35: adc eax, 0x16d416; movzx ebx, bl; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000633d6: adc eax, 0x16d9c5; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000062f7c: adc eax, 0x16dc13; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c1ee2: adc eax, 0x16e88349; lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000886df: adc eax, 0x176ae800; sti; jmp qword ptr [rsi+0x2e]; 
0x000000000a0a92: adc eax, 0x178379; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0a2a: adc eax, 0x1783e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a09ca: adc eax, 0x178441; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0d29: adc eax, 0x17869a; ret; 
0x000000000a050a: adc eax, 0x178901; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0452: adc eax, 0x1789b9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a03aa: adc eax, 0x178a61; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009fdda: adc eax, 0x179031; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009e79e: adc eax, 0x18141d; ret; 
0x0000000009e09e: adc eax, 0x181b1d; ret; 
0x0000000002a3aa: adc eax, 0x192c51; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d60: adc eax, 0x1ab8b; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a9920: adc eax, 0x1afab; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96f0: adc eax, 0x1b1fb; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x00000000061f72: adc eax, 0x1b6e99; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000061f3a: adc eax, 0x1b6ed1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a97b4: adc eax, 0x1b8c7; lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x00000000046ce2: adc eax, 0x1d2129; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000043161: adc eax, 0x1d6082; ret; 
0x00000000042832: adc eax, 0x1d65d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000427a2: adc eax, 0x1d6669; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000042482: adc eax, 0x1d6989; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003a404: adc eax, 0x1de9df; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000029ce9: adc eax, 0x1ef19a; cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x000000001bb3d3: adc eax, 0x20478b48; test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x0000000012725e: adc eax, 0x20c48348; pop rbx; pop rbp; pop r12; ret; 
0x0000000019d2d8: adc eax, 0x211e3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019d2b3: adc eax, 0x21208; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b918: adc eax, 0x22ba3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b8fe: adc eax, 0x22bbd; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000198718: adc eax, 0x25da3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001986f3: adc eax, 0x25dc8; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000196748: adc eax, 0x27d73; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019672e: adc eax, 0x27d8d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001b7997: adc eax, 0x2c3e8; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x00000000086c6e: adc eax, 0x31dbe800; sti; jmp qword ptr [rsi+0x66]; 
0x00000000189ff8: adc eax, 0x344c3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000189fd3: adc eax, 0x344e8; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000007dd52: adc eax, 0x34634800; mov bh, 0x48; add esi, edi; notrack jmp rsi; 
0x00000000187a88: adc eax, 0x36a33; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000187a6e: adc eax, 0x36a4d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000167cdc: adc eax, 0x36ff; call qword ptr [rax]; 
0x000000000d7b6a: adc eax, 0x3b30478b; xor [rbp+0x3d], r14b; ret; 
0x000000000752b1: adc eax, 0x3d8d4800; cmpsb [rsi], [rdi]; ret; 
0x00000000078c28: adc eax, 0x4634800; nop; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000182c24: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000ec93b: adc eax, 0x48000005; add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000a8915: adc eax, 0x4802e580; lea eax, [rip+0xa780]; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x000000000c5af2: adc eax, 0x4802e680; lea eax, [rip+0x10fe3]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000a9532: adc eax, 0x4802e680; lea eax, [rip+0xbcd3]; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bc7: adc eax, 0x4802e680; lea eax, [rip+0xbe2e]; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b27: adc eax, 0x4802e680; lea eax, [rip+0xbeae]; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a9c17: adc eax, 0x4802e680; lea eax, [rip+0xe02e]; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b77: adc eax, 0x4802e680; lea eax, [rip+0xe0ae]; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x00000000135b57: adc eax, 0x4804e680; lea eax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x000000000c5bb7: adc eax, 0x4804e680; lea eax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000c4c11: adc eax, 0x480b7300; mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x0000000019ba48: adc eax, 0x482c3; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019964a: adc eax, 0x48c7ff48; add eax, edi; vzeroupper; ret; 
0x00000000128f2a: adc eax, 0x48db6348; mov [rip+0xf050b], ebx; pop rbx; ret; 
0x000000000e6c27: adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x0000000017dff7: adc eax, 0x49000651; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c337: adc eax, 0x4900066c; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000019a3a8: adc eax, 0x49923; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bdc: adc eax, 0x4b3ff; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000013471a: adc eax, 0x4bbe1; cmovne rax, rdx; ret; 
0x000000001344ba: adc eax, 0x4be61; cmovne rax, rdx; ret; 
0x00000000196888: adc eax, 0x4c683; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a5c: adc eax, 0x4d4ff; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000194cb8: adc eax, 0x4e213; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001345ea: adc eax, 0x4e821; cmovne rax, rdx; ret; 
0x00000000193c78: adc eax, 0x4f213; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192ea8: adc eax, 0x4ffa3; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000104c7a: adc eax, 0x56b60f41; xor [rcx+0x63], cl; adc al, 0x97; add rdx, r15; notrack jmp rdx; 
0x000000001796ac: adc eax, 0x5982f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000017841c: adc eax, 0x5aa3f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000112cea: adc eax, 0x5bc33948; setl al; ret; 
0x000000000c0768: adc eax, 0x621850f; add [rax], al; ret; 
0x0000000003a9f0: adc eax, 0x63480019; add al, 0x91; add rax, rcx; notrack jmp rax; 
0x000000000d7a5a: adc eax, 0x63b078b; jne 0x00000000000d7bb0; ret; 
0x000000001781f7: adc eax, 0x64000a0c; mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177ef7: adc eax, 0x64000a0f; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000135b64: adc eax, 0x6b4d7; cmove rax, rdx; ret; 
0x000000001347a0: adc eax, 0x6c0db; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x00000000134670: adc eax, 0x6c22b; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x00000000134540: adc eax, 0x6c35b; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x0000000013480d: adc eax, 0x6c85e; lea rax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000166376: adc eax, 0x71ba9; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c1ebc: adc eax, 0x71d850f; add [rax], al; ret; 
0x00000000134740: adc eax, 0x7213b; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x00000000134610: adc eax, 0x7228b; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344e0: adc eax, 0x723bb; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x00000000165aa2: adc eax, 0x7243d; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000134864: adc eax, 0x728c7; cmove rax, rdx; ret; 
0x000000001346d8: adc eax, 0x73623; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a8: adc eax, 0x73773; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134478: adc eax, 0x738a3; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000134874: adc eax, 0x73ff7; lea rax, [rip+0x74060]; cmove rax, rdx; ret; 
0x0000000004f9c6: adc eax, 0x74db854d; adc [rcx-0x7d], cl; in al, dx; add [rcx+0x29], ecx; ret far; 
0x00000000135b7c: adc eax, 0x79eff; cmovne rax, rdx; ret; 
0x00000000134780: adc eax, 0x7a6fb; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x00000000134650: adc eax, 0x7a84b; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x00000000134520: adc eax, 0x7a97b; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x000000001348a0: adc eax, 0x7b20b; lea rax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x000000000c5345: adc eax, 0x808b4800; adc [rdx], al; add [rax], al; ret; 
0x000000000c5325: adc eax, 0x808b4800; add [rdx], al; add [rax], al; ret; 
0x000000000c5365: adc eax, 0x808b4800; and [rdx], al; add [rax], al; ret; 
0x000000000c5395: adc eax, 0x808b4800; cmp [rdx], al; add [rax], al; ret; 
0x000000000c5335: adc eax, 0x808b4800; or [rdx], al; add [rax], al; ret; 
0x000000000c5355: adc eax, 0x808b4800; sbb [rdx], al; add [rax], al; ret; 
0x000000000c5375: adc eax, 0x808b4800; sub [rdx], al; add [rax], al; ret; 
0x000000000c5385: adc eax, 0x808b4800; xor [rdx], al; add [rax], al; ret; 
0x0000000006bee1: adc eax, 0x83410000; cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000015ce19: adc eax, 0x8348001c; ret; 
0x0000000015575a: adc eax, 0x83c03145; clc; add dh, [rbp+0x1d]; mov eax, r8d; ret; 
0x00000000090c3a: adc eax, 0x8478b4c; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000166fba: adc eax, 0x89480007; ret; 
0x00000000075d19: adc eax, 0x894c0000; cli; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000019bd8f: adc eax, 0x894d0000; ret far; 
0x000000001797d8: adc eax, 0x894d0000; ret far; 
0x00000000045367: adc eax, 0x8b001d3b; add [rbp-0x16f08a40], al; cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000001721aa: adc eax, 0x8c48348; ret; 
0x00000000135b77: adc eax, 0x8d480007; adc eax, 0x79eff; cmovne rax, rdx; ret; 
0x000000000c5bd7: adc eax, 0x8d48000e; adc eax, 0xe9eaf; cmovne rax, rdx; ret; 
0x000000000c5bd6: adc eax, 0x8d48000e; adc eax, 0xe9eaf; cmovne rax, rdx; ret; 
0x00000000177e92: adc eax, 0xa0f79; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000175db2: adc eax, 0xa3111; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000015f252: adc eax, 0xb9949; jmp qword ptr [rdx+rax*8]; 
0x00000000118409: adc eax, 0xb9e9; add [rax-0xf00a418], dl; jmp qword ptr [rsi-0x7d]; 
0x00000000168a97: adc eax, 0xbf004; cmp rax, rdx; je short 0x0000000000168aa8; pop rbx; ret; 
0x0000000016896d: adc eax, 0xbf12e; mov fs:[rax], rdx; ret; 
0x000000000c52b8: adc eax, 0xc0310100; ret; 
0x0000000015d72b: adc eax, 0xc0850000; je short 0x000000000015d7a0; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000103037: adc eax, 0xc2e9ffff; loop 0x000000000010303d; call qword ptr [rax+0x24448b48]; 
0x0000000015501a: adc eax, 0xc3df1; mov eax, 0x22; mov fs:[rdx], eax; pop rbx; ret; 
0x00000000111831: adc eax, 0xc4606; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001106cc: adc eax, 0xc5623; mov r10, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000010fc50: adc eax, 0xc5f6b; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c54fd: adc eax, 0xcd29e; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x00000000107555: adc eax, 0xcde86; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000001075ab: adc eax, 0xce088; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000a83a0: adc eax, 0xcffeb; cmovne rax, rdx; ret; 
0x0000000007d367: adc eax, 0xd0014800; ret; 
0x000000000a8922: adc eax, 0xd0cd9; cmovne rax, rdx; ret; 
0x0000000007d491: adc eax, 0xd2b60f00; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000015df96: adc eax, 0xd445; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000a9d1a: adc eax, 0xd6611; cmovne rax, rdx; ret; 
0x000000000a98da: adc eax, 0xd6a31; cmovne rax, rdx; ret; 
0x00000000127894: adc eax, 0xd8f7000f; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a96aa: adc eax, 0xd9771; cmovne rax, rdx; ret; 
0x000000000c5bc4: adc eax, 0xdb487; cmove rax, rdx; ret; 
0x000000000c5a87: adc eax, 0xdbbb4; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000a9bd4: adc eax, 0xdbd87; cmovne rax, rdx; ret; 
0x000000000a9b34: adc eax, 0xdbe07; cmovne rax, rdx; ret; 
0x000000000c54c0: adc eax, 0xdc46b; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56f0: adc eax, 0xdc68b; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c5820: adc eax, 0xdcd1b; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c5440: adc eax, 0xdce7b; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000f7a00: adc eax, 0xdcfbb; movzx r12d, r12b; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b3e: adc eax, 0xdcfe1; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9c24: adc eax, 0xdde97; cmovne rax, rdx; ret; 
0x000000000a9b84: adc eax, 0xddf17; cmovne rax, rdx; ret; 
0x000000000f65b7: adc eax, 0xde3e4; movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x000000000c5aff: adc eax, 0xe074c; cmovne rax, rdx; ret; 
0x000000000d838a: adc eax, 0xe180d188; pcmpeqb mm3, [rsi]; ret; 
0x000000000a8450: adc eax, 0xe1bbb; cmovne rax, rdx; ret; 
0x000000000f257f: adc eax, 0xe22a4; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a8990: adc eax, 0xe2e2b; cmovne rax, rdx; ret; 
0x000000001354f2: adc eax, 0xe3919; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f0917: adc eax, 0xe3d9c; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9a10: adc eax, 0xe492b; cmovne rax, rdx; ret; 
0x000000000a9aa0: adc eax, 0xe60ab; cmovne rax, rdx; ret; 
0x000000000ed9b3: adc eax, 0xe6cac; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed551: adc eax, 0xe6f06; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed626: adc eax, 0xe6f5d; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed426: adc eax, 0xe6f79; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000eca2c: adc eax, 0xe791f; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000b1640: adc eax, 0xe823b; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000c5bdc: adc eax, 0xe9eaf; cmovne rax, rdx; ret; 
0x000000000ab057: adc eax, 0xee6b4; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000c5aac: adc eax, 0xefc4f; lea rax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000a8b8d: adc eax, 0xefdfe; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a6d: adc eax, 0xefdfe; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a94c7: adc eax, 0xeff74; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a84ad: adc eax, 0xf027e; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x0000000011ccba: adc eax, 0xf0658d48; pop r12; pop r13; pop rbp; ret; 
0x0000000012868a: adc eax, 0xf0781; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128612: adc eax, 0xf07f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285da: adc eax, 0xf0831; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285aa: adc eax, 0xf0861; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000128572: adc eax, 0xf0899; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012847a: adc eax, 0xf0991; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012843a: adc eax, 0xf09d1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001283da: adc eax, 0xf0a31; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a95f0: adc eax, 0xf0a4b; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x00000000128392: adc eax, 0xf0a79; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001282d2: adc eax, 0xf0b39; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e30ae: adc eax, 0xf0cd9; mov eax, ecx; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000128072: adc eax, 0xf0d99; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127fba: adc eax, 0xf0e51; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127f02: adc eax, 0xf0f09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c92: adc eax, 0xf1179; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c42: adc eax, 0xf11c9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127b72: adc eax, 0xf1299; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127ad2: adc eax, 0xf1339; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000012795a: adc eax, 0xf14b1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127892: adc eax, 0xf1579; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001277b2: adc eax, 0xf1659; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127702: adc eax, 0xf1709; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127632: adc eax, 0xf17d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126ad2: adc eax, 0xf2339; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ab0e0: adc eax, 0xf249b; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x00000000126772: adc eax, 0xf2699; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012670a: adc eax, 0xf2701; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001266aa: adc eax, 0xf2761; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012664a: adc eax, 0xf27c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012660a: adc eax, 0xf2801; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001265d2: adc eax, 0xf2839; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126592: adc eax, 0xf2879; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001264c2: adc eax, 0xf2949; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012648a: adc eax, 0xf2981; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001263b2: adc eax, 0xf2a59; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001262d2: adc eax, 0xf2b39; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126232: adc eax, 0xf2bd9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126162: adc eax, 0xf2ca9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001260b2: adc eax, 0xf2d59; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126002: adc eax, 0xf2e09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125f32: adc eax, 0xf2ed9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e62: adc eax, 0xf2fa9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e12: adc eax, 0xf2ff9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125d42: adc eax, 0xf30c9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125c2a: adc eax, 0xf31e1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000125bfa: adc eax, 0xf3211; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012c17d: adc eax, 0xf489066; mov esi, 0x83480153; ret; 
0x000000000a8a30: adc eax, 0xf4d5b; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x0000000012c6fc: adc eax, 0xf5197; cmp edx, 0x1; jg short 0x000000000012c720; add rsp, 0x18; ret; 
0x000000000a8770: adc eax, 0xf51eb; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87f0: adc eax, 0xf52eb; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000a9da0: adc eax, 0xf6b0b; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a9960: adc eax, 0xf6f2b; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x00000000127cf7: adc eax, 0xf7000f11; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001270f7: adc eax, 0xf7000f1d; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126df7: adc eax, 0xf7000f20; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001221f7: adc eax, 0xf7000f6c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011edf7: adc eax, 0xf7000fa0; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000108bf7: adc eax, 0xf7001102; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000a9730: adc eax, 0xf717b; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000001217d2: adc eax, 0xf7639; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a979d: adc eax, 0xf78de; lea rax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x0000000012914f: adc eax, 0xf84a4; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000011ecf2: adc eax, 0xfa119; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000106ba8: adc eax, 0xfa1842e9; jmp qword ptr [rsi-0x70]; 
0x0000000011ec02: adc eax, 0xfa209; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a953f: adc eax, 0xfb59c; cmovne rax, rdx; ret; 
0x0000000009a01a: adc eax, 0xfb894853; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000000edc38: adc eax, 0xfba7b2e9; jmp qword ptr [rsi-0x70]; 
0x0000000011d17a: adc eax, 0xfbc91; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011d14a: adc eax, 0xfbcc1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a8311: adc eax, 0xfc4aa; cmovne rax, rdx; ret; 
0x000000000a9d40: adc eax, 0xfcb6b; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a9900: adc eax, 0xfcf8b; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96d0: adc eax, 0xfd1db; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x0000000011bbc2: adc eax, 0xfd249; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011bb42: adc eax, 0xfd2c9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011ba82: adc eax, 0xfd389; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a97f4: adc eax, 0xfd947; cmove rax, rdx; ret; 
0x0000000011adda: adc eax, 0xfe031; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a9cd8: adc eax, 0xfe053; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x0000000011ad1a: adc eax, 0xfe0f1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011ac62: adc eax, 0xfe1a9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011abc2: adc eax, 0xfe249; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a9898: adc eax, 0xfe473; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x0000000011a912: adc eax, 0xfe4f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a9668: adc eax, 0xfe6c3; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x0000000011a51a: adc eax, 0xfe8f1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4e2: adc eax, 0xfe929; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4a2: adc eax, 0xfe969; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a2aa: adc eax, 0xfeb61; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119fab: adc eax, 0xfee60; mov esi, 0x5401; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x000000000a9804: adc eax, 0xff077; lea rax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x00000000119d5a: adc eax, 0xff0b1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119d22: adc eax, 0xff0e9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119cea: adc eax, 0xff121; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119a2a: adc eax, 0xff3e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001199e2: adc eax, 0xff429; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119932: adc eax, 0xff4d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009cd8a: adc eax, 0xff508d48; lock cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x00000000119482: adc eax, 0xff989; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119442: adc eax, 0xff9c9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001193f2: adc eax, 0xffa19; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000134760: adc eax, 0xfff9015b; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x00000000134630: adc eax, 0xfff902ab; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x00000000134500: adc eax, 0xfff903db; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x00000000134824: adc eax, 0xfff90827; lea rax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x00000000167d8d: adc eax, 0xffff9dce; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000167b83: adc eax, 0xffff9e28; lea r8, [rip-0x617f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a43: adc eax, 0xffff9f68; lea r8, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167927: adc eax, 0xffffa044; lea r8, [rip-0x5f23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167827: adc eax, 0xffffa144; lea r8, [rip-0x5e23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000078c30: adc eax, 0xfffffb92; add rax, rdx; jmp rax; 
0x000000000736a4: adc eax, 0xfffffbc4; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x000000000a939d: adc eax, 0xfffffc9e; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x000000000d9bda: adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9aba: adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000011ab61: adc eax, [rax]; add [rax], al; syscall; 
0x000000000d59dd: adc eax, [rax]; add [rbp+0x31], al; shr cl, 0x6e; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000b3578: adc eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000739ce: adc eax, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000ecf67: adc eax, [rax]; add [rdx+0x7f], bh; cmovne rax, rdx; ret; 
0x000000000e772b: adc eax, [rax]; cmp byte ptr [rax], 0x0; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000eaf26: adc eax, [rax]; cmp eax, 0x1; jg short 0x00000000000eaf40; pop rbx; ret; 
0x000000000984bb: adc eax, [rax]; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000dd725: adc eax, [rax]; mov [rax], edx; xor eax, eax; pop rbx; ret; 
0x000000000951c7: adc eax, [rax]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000e578c: adc eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e578d: adc eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d8e45: adc eax, [rax]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000e5724: adc eax, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000e5725: adc eax, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d8e25: adc eax, [rax]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x0000000009683e: adc eax, [rax]; mov eax, 0xe; syscall; 
0x00000000035dff: adc eax, [rax]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x000000000eb024: adc eax, [rax]; mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x000000000e5665: adc eax, [rax]; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000eb06c: adc eax, [rax]; mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000eafac: adc eax, [rax]; mov rax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x0000000003557f: adc eax, [rax]; mov rdi, rbx; call r12; 
0x00000000098f01: adc eax, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000d9b15: adc eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e5774: adc eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9b14: adc eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d99fd: adc eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a0bc0: adc eax, [rax]; sub rsp, 0x8; syscall; 
0x000000000969b1: adc eax, [rax]; syscall; 
0x00000000142e0c: adc eax, [rbx-0x1914fe3a]; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001261f6: adc eax, [rcx]; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001261a4: adc eax, [rcx]; add [rax], al; syscall; 
0x000000000bc8bb: adc eax, [rdx]; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000bc8db: adc eax, [rdx]; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000bc8fb: adc eax, [rdx]; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000bc91b: adc eax, [rdx]; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000bc778: adc eax, [rdx]; mov rax, rdi; ret; 
0x000000000bc7ca: adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc93b: adc eax, [rdx]; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95b: adc eax, [rdx]; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97b: adc eax, [rdx]; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4cb: adc eax, [rdx]; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf54c: adc eax, [rdx]; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x00000000181ef1: adc eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000005452d: adc eax, eax; ret; 
0x000000000da982: adc eax, ebp; clc; fxtract; dec dword ptr [rax-0x77]; ret; 
0x000000000ee612: adc eax, ebp; js short 0x00000000000ee5b4; inc dword ptr [rcx-0x80]; jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x00000000054666: adc eax, edx; pop rbp; pop rbx; ret; 
0x00000000082191: adc ebp, ebx; ret far; 
0x000000000e6a21: adc ebp, ecx; leave; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000e6a41: adc ebp, ecx; mov [rdx], ebx; cld; jmp qword ptr [rsi+0xf]; 
0x00000000126a5c: adc ebx, [rbx+0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000419c7: adc ebx, [rdx]; add bl, al; nop [rax+rax]; addss xmm0, xmm0; ret; 
0x0000000018d681: adc ebx, eax; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x00000000129094: adc ecx, [rax-0x39]; add eax, 0xf03a0; add al, [rax]; add [rax], al; ret; 
0x000000000c0721: adc ecx, [rax-0x73]; jg short 0x00000000000c0739; jne 0x00000000000c0d90; ret; 
0x000000000c1e55: adc ecx, [rax-0x73]; jg short 0x00000000000c1e6d; jne 0x00000000000c25e0; ret; 
0x00000000045d98: adc ecx, [rax-0x75]; jge short 0x0000000000045da5; call rax; 
0x0000000007f8ac: adc ecx, [rax-0x75]; mov edi, 0xe0; jmp rax; 
0x00000000045541: adc ecx, [rax-0x7d]; ret; 
0x00000000078519: adc ecx, [rcx+rax-0x16]; call qword ptr [r10+rax*8]; 
0x00000000072fe6: adc ecx, [rcx+rax-0x1e]; call qword ptr [r10+rax*8]; 
0x0000000009762f: adc ecx, [rcx-0x3c3fcefa]; nop [rax]; mov eax, 0x16; ret; 
0x0000000009837b: adc ecx, [rcx]; ret; 
0x00000000127ad4: adc ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000017bc7c: adc ecx, [rdi]; sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x000000000bc944: adc ecx, [rdx+0x5]; mov rax, rdi; ret; 
0x000000000bc964: adc ecx, [rdx+0x6]; mov rax, rdi; ret; 
0x000000000bc984: adc ecx, [rdx+0x7]; mov rax, rdi; ret; 
0x000000000bc7ce: adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000bf5b5: adc ecx, [rdx+0x8]; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x00000000171ccc: adc edi, [rax]; cmove rax, rbx; pop rbx; ret; 
0x0000000003c979: adc edi, [rbx-0x7cb70002]; ret; 
0x0000000017aef6: adc edi, [rsi]; jmp rdx; 
0x000000001653bb: adc edi, ebp; jmp qword ptr [rsi-0x70]; 
0x00000000088a81: adc edi, ebx; jmp qword ptr [rsi+0x66]; 
0x0000000009834f: adc edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000098b3b: adc edi, edx; jmp qword ptr [rsi-0x70]; 
0x000000001753ce: adc edi, esp; jmp qword ptr [rsi+0x66]; 
0x000000000b1a2e: adc edx, [rdx]; add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000017daf9: adc edx, [rsi+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a7d99: adc edx, ebx; clc; jmp qword ptr [rsi+0x66]; 
0x00000000054525: adc edx, ebx; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000074ddd: adc esi, 0xe9fffff9; loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000125baa: adc esi, [rcx+rax-0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x00000000156da6: adc esi, eax; xchg [rax+rax+0x5b000000], edi; pop rbp; pop r12; ret; 
0x00000000168c40: adc esi, ebx; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000116f7d: adc esi, ecx; jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000012c599: adc esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x00000000112964: adc fs:[rax], al; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000120c35: adc gs:[rbp-0x7b], cl; in al, 0x75; and al, 0x48; mov edi, [rbp]; call rbx; 
0x0000000011fe0c: adc gs:[rbp-0x7b], cl; in al, 0x75; mov rdi, [rbp]; call rbx; 
0x00000000054523: adc r10, r11; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000089bf2: adc r11b, r13b; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001753cd: adc r15, r12; jmp qword ptr [rsi+0x66]; 
0x000000001a162e: adc r15b, dil; ret; 
0x000000001a1330: adc r15b, dil; vzeroupper; ret; 
0x000000001ae350: adc r15b, dil; xtest; je short 0x00000000001ae35c; vzeroall; ret; 
0x000000000d59dc: adc r8d, [r8]; add [rbp+0x31], al; shr cl, 0x6e; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000166fb9: adc rax, 0xffffffff89480007; ret; 
0x0000000007d490: adc rax, 0xffffffffd2b60f00; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000054665: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000001a3eb9: add [r10-0x2f], r12; jl short 0x00000000001a3f07; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x00000000119c5f: add [r13+rbp-0x48], sil; add [rcx], eax; add [rax], al; syscall; 
0x00000000062da0: add [r14+0xf], r12d; insb [rdi], dx; ret; 
0x0000000005a438: add [r8-0x73], ecx; add cl, [rcx+0x39]; ret; 
0x00000000110a29: add [r8-0x75], r9b; push rbp; adc [rax-0x77], cl; or [r8-0x7d], r9b; ret; 
0x000000001320b1: add [r8-0x77], ecx; ret; 
0x0000000008f0e5: add [r8-0x77], r9b; imul esp, [rax+0x5b], 0x5d; pop r12; ret; 
0x00000000040402: add [r8-0x7d], ecx; ret; 
0x00000000120dfa: add [r8-0x7d], r9b; ret; 
0x000000000f025b: add [r8-0x7d], r9d; mov dword ptr [rcx], 0x9c75c084; xor eax, eax; ret; 
0x00000000076ed9: add [r8-0x7d], rcx; ret; 
0x0000000009c552: add [r8], al; add [rax-0x1], bh; ret; 
0x000000000d8d2d: add [r8], al; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x00000000098281: add [r8], eax; add [rbx+0x18102505], cl; add [rcx], bh; ret; 
0x000000000a8861: add [r8], eax; cmovne rax, rdx; ret; 
0x00000000163b22: add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000ab3da: add [r8], r8b; add [rax], al; add bl, ch; ret far; 
0x000000001b2c56: add [r8], r8d; ret; 
0x0000000019ec06: add [r8], r8d; vzeroupper; ret; 
0x00000000046ac0: add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001428af: add [r9], r15b; ret; 
0x000000001426d6: add [rax+0x102], bh; cmovne eax, edx; ret; 
0x000000001426ac: add [rax+0x104], bh; cmovne eax, edx; ret; 
0x000000000620bf: add [rax+0x10], bh; ret; 
0x0000000011a249: add [rax+0x10], bh; syscall; 
0x0000000009492f: add [rax+0x111], bh; syscall; 
0x00000000125cb8: add [rax+0x119], bh; syscall; 
0x000000000eb170: add [rax+0x142], bh; syscall; 
0x000000001a4a0e: add [rax+0x1478d48], dl; ret; 
0x00000000128ac4: add [rax+0x14], bh; syscall; 
0x00000000094b00: add [rax+0x14e], bh; syscall; 
0x0000000009276f: add [rax+0x16], bh; cmove eax, edx; ret; 
0x0000000009108f: add [rax+0x16], bh; ret; 
0x00000000092e66: add [rax+0x16], dil; ret; 
0x0000000017545e: add [rax+0x17247c], al; je short 0x0000000000175441; mov [rsp+0xc], eax; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x000000000c20ee: add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x000000000e55cd: add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000d7baf: add [rax+0x1], bh; jg short 0x00000000000d7bb9; neg eax; ret; 
0x000000001a684f: add [rax+0x1], bh; jg short 0x00000000001a6860; neg eax; ret; 
0x0000000005664c: add [rax+0x1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000015b968: add [rax+0x1], bh; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001607ba: add [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000112cff: add [rax+0x1], bh; pop rbx; ret; 
0x00000000056566: add [rax+0x1], bh; ret; 
0x000000000b4984: add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000001af8b5: add [rax+0x1], cl; clc; ret; 
0x00000000199a29: add [rax+0x1], cl; clc; vzeroupper; ret; 
0x000000000c95d8: add [rax+0x1], cl; fmul st, dword ptr [rax-0x77]; ret; 
0x000000000b0217: add [rax+0x1], cl; ret far; 
0x00000000041da6: add [rax+0x1], cl; ret; 
0x0000000007d369: add [rax+0x1], cl; rol bl, 0x1; xchg ax, ax; xor eax, eax; ret; 
0x00000000112cfe: add [rax+0x1], dil; pop rbx; ret; 
0x0000000011ccfe: add [rax+0x1], dil; ret; 
0x0000000016edec: add [rax+0x1], ecx; ret far; 
0x00000000108266: add [rax+0x1], ecx; ret; 
0x000000000f4128: add [rax+0x1], edi; ret; 
0x00000000163adf: add [rax+0x1], edi; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000d807e: add [rax+0x1a948], dl; add [rax], al; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x000000000d7adf: add [rax+0x1b740fe6], al; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a7f: add [rax+0x1b740fe6], al; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000d7bb0; ret; 
0x000000001a673f: add [rax+0x1b740fe6], al; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000000f419e: add [rax+0x1b810], ecx; add [rax], al; ret; 
0x00000000125d88: add [rax+0x1b9], bh; syscall; 
0x00000000051691: add [rax+0x1ca24d05], cl; add [rax-0x73], cl; add eax, 0x1ca241; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000155036: add [rax+0x1d], bh; or dword ptr [rbx], 0x20; mov fs:[rdx], eax; pop rbx; ret; 
0x000000001751e7: add [rax+0x1f247c], al; je short 0x00000000001751fa; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000041805: add [rax+0x1fe8c17f], al; ret; 
0x000000000ecfeb: add [rax+0x20], bh; cmove rax, rdx; ret; 
0x0000000015501e: add [rax+0x22], bh; mov fs:[rdx], eax; pop rbx; ret; 
0x000000000417fc: add [rax+0x2444237f], al; cld; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000018f9e1: add [rax+0x28d4802], ecx; ret; 
0x0000000008e957: add [rax+0x29], cl; enter 0xe883, 0x1; ret; 
0x0000000004f904: add [rax+0x29], cl; ret far; 
0x000000000778eb: add [rax+0x29], cl; ret; 
0x00000000160907: add [rax+0x29], ecx; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x00000000056762: add [rax+0x2], bh; ret; 
0x000000000ec15c: add [rax+0x2e740038], al; mov eax, 0x69; syscall; 
0x000000000ec1ec: add [rax+0x2e740038], al; mov eax, 0x6a; syscall; 
0x0000000011b0ec: add [rax+0x2e740038], al; mov eax, 0x71; syscall; 
0x0000000011b17c: add [rax+0x2e740038], al; mov eax, 0x72; syscall; 
0x000000000e772c: add [rax+0x2e740038], al; mov eax, 0x74; syscall; 
0x000000000ec4ac: add [rax+0x2e740038], al; mov eax, 0x75; syscall; 
0x000000000ec54c: add [rax+0x2e740038], al; mov eax, 0x77; syscall; 
0x00000000136882: add [rax+0x31], dl; shr al, 0xb5; lahf; call far fword ptr [rax+0x4c]; 
0x000000000eabbf: add [rax+0x38], bh; syscall; 
0x000000000e621b: add [rax+0x39480000], al; ret; 
0x00000000136167: add [rax+0x39], cl; enter 0x577, 0xe9; out dx, al; add cl, bh; call qword ptr [rax-0x18]; 
0x00000000095cdc: add [rax+0x39], cl; mov edi, 0x628; cmove eax, edx; ret; 
0x000000000632c8: add [rax+0x39], cl; ret far; 
0x0000000002f458: add [rax+0x39], cl; ret; 
0x00000000168a9b: add [rax+0x39], cl; shl byte ptr [rdi+rax+0x5b], 0x1; ret; 
0x00000000168b8b: add [rax+0x39], cl; shl byte ptr [rdi+rcx+0x48], 0x1; add eax, 0xa0; pop rbx; ret; 
0x00000000168c0b: add [rax+0x39], cl; shl byte ptr [rdi+rcx+0x48], 0x1; add eax, 0xa8; pop rbx; ret; 
0x00000000168b0b: add [rax+0x39], cl; shl byte ptr [rdi+rcx+0x48], 0x1; sub eax, 0xffffff80; pop rbx; ret; 
0x000000001bab30: add [rax+0x39], ecx; ret far; 
0x0000000002fbb2: add [rax+0x39], ecx; ret; 
0x000000000ef5f3: add [rax+0x39], ecx; shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf]; 
0x000000000961f7: add [rax+0x3], bh; ret; 
0x0000000013eb2a: add [rax+0x3], cl; or eax, 0xda2de; call rbp; 
0x000000001a672e: add [rax+0x3bf4478b], dl; hlt; jne 0x00000000001a6850; ret; 
0x000000000d3c43: add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret; 
0x00000000119ab1: add [rax+0x48], bh; syscall; 
0x0000000010aac5: add [rax+0x48], dl; mov eax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x00000000175531: add [rax+0x48], dl; mov eax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x0000000011f492: add [rax+0x4c], bl; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000424ae: add [rax+0x59058b48], dl; imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x0000000003a408: add [rax+0x5], cl; add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret; 
0x0000000015eece: add [rax+0x5d5bc031], dl; pop r12; ret; 
0x0000000008335f: add [rax+0x63], cl; adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x0000000007ddac: add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x00000000062577: add [rax+0x63], cl; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x0000000007d4eb: add [rax+0x63], cl; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x000000000f0e21: add [rax+0x63], cl; add al, 0x86; add rax, rsi; notrack jmp rax; 
0x00000000078c29: add [rax+0x63], cl; add al, 0x90; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x0000000003a9f2: add [rax+0x63], cl; add al, 0x91; add rax, rcx; notrack jmp rax; 
0x000000000ed42a: add [rax+0x63], cl; add al, 0xaa; add rax, rdx; notrack jmp rax; 
0x000000000c52d9: add [rax+0x63], cl; add al, 0xba; add rax, rdx; notrack jmp rax; 
0x00000000039c3a: add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000007305e: add [rax+0x63], cl; or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x00000000049e36: add [rax+0x63], cl; ret far; 
0x00000000072864: add [rax+0x63], cl; ret; 
0x00000000142d17: add [rax+0x63], cl; rol byte ptr [rcx+rcx*4-0x40], cl; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000015f238: add [rax+0x63], cl; sbb [r11+0xe7603f8], r8b; mov eax, 0x2; ret; 
0x0000000007ba60: add [rax+0x63], cl; xor al, 0x8f; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x0000000007dd55: add [rax+0x63], cl; xor al, 0xb7; add rsi, rdi; notrack jmp rsi; 
0x0000000009af79: add [rax+0x64227401], ch; mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000001b0a4e: add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x0000000018d67e: add [rax+0x6666c311], cl; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x000000000c0c5e: add [rax+0x6666c317], cl; nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000001b3b8c: add [rax+0x66c3404f], ecx; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000c3ece: add [rax+0x66f0ff3], dl; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x0000000004187c: add [rax+0x7110ff3], al; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x0000000019f88e: add [rax+0x77f8c517], cl; ret; 
0x000000000c12af: add [rax+0x78d4837], cl; ret; 
0x000000000c1baf: add [rax+0x78d4837], cl; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x000000000ecf01: add [rax+0x7f], bh; cmove rax, rdx; ret; 
0x00000000042788: add [rax+0x7f], bh; syscall; 
0x000000000431b0: add [rax+0x80], bh; syscall; 
0x000000000427d4: add [rax+0x82], bh; syscall; 
0x0000000015ebee: add [rax+0x8c48348], dl; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x000000000947d2: add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x00000000126337: add [rax+0x95], bh; syscall; 
0x000000000a4bc0: add [rax+0x9], cl; ret; 
0x0000000005399d: add [rax+0x9e], bh; syscall; 
0x000000000414bc: add [rax+0xa110ff2], al; and rsi, rax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000d7b3f: add [rax+0xb740fe6], al; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b8f: add [rax+0xb740fe6], al; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000d7bb0; ret; 
0x0000000009af3f: add [rax+0xb], bh; ret; 
0x000000000968ef: add [rax+0xba], bh; syscall; 
0x0000000017604e: add [rax+0xba], dil; syscall; 
0x000000000912d3: add [rax+0xca], bh; syscall; 
0x00000000091334: add [rax+0xca], bh; xor sil, 0x80; syscall; 
0x0000000009367c: add [rax+0xca], bh; xor sil, 0x81; syscall; 
0x0000000009b5a9: add [rax+0xcb], bh; syscall; 
0x00000000095d61: add [rax+0xcc], bh; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000095db4: add [rax+0xcc], bh; syscall; 
0x000000000425eb: add [rax+0xd], bh; syscall; 
0x000000000e56ef: add [rax+0xe4], bh; syscall; 
0x000000000e58b7: add [rax+0xe6], bh; syscall; 
0x00000000119564: add [rax+0xe740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000009498b: add [rax+0xe], bh; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a0bb5: add [rax+0xe], bh; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x00000000053a09: add [rax+0xe], bh; syscall; 
0x000000000a02c5: add [rax+0xf0], edi; syscall; 
0x000000000a054c: add [rax+0xf1], edi; syscall; 
0x0000000008e943: add [rax+0xf740a39], eax; cmp rcx, rsi; ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x000000000519bc: add [rax+0xf], al; mov dh, 0xf6; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x000000001247b3: add [rax+0xf], al; xchg esp, eax; ror dword ptr [rax-0x73], 0x5; ret; 
0x00000000091212: add [rax+0xf], cl; mov [0x73d8d48501772d1], eax; ret far; 
0x000000000ba729: add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000016ba1f: add [rax+0xf], cl; mov edi, 0xe6894806; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000004759f: add [rax+0xf], cl; mov esi, 0x83480143; ret; 
0x000000000e8977: add [rax+0xf], cl; mov esi, 0x83480153; ret; 
0x0000000016bb1f: add [rax+0xf], cl; mov esi, 0xe68948c5; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000011bf8c: add [rax+0xf], cl; ret; 
0x00000000090a5a: add [rax+0xf], cl; shl byte ptr [rcx], 0x1; ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x000000000fecb4: add [rax+0xf], ecx; ret; 
0x000000000ecf97: add [rax+0xfc17], bh; ret; 
0x000000000ecf96: add [rax+0xfc17], dil; ret; 
0x000000000ed0c7: add [rax+0xff], bh; ret; 
0x000000000ed0c6: add [rax+0xff], dil; ret; 
0x000000000f0260: add [rax+rax*8-0x3fce638b], eax; ret; 
0x0000000009c09c: add [rax+rax*8-0x3fcef08c], al; add rsp, 0x8; ret; 
0x000000000c5b35: add [rax+rax], al; add [rax-0x73], cl; add eax, 0xdb700; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db0: add [rax+rax], al; add [rax-0x73], cl; add eax, 0xdbb85; jne short 0x00000000000c6d6f; ret; 
0x000000000c5620: add [rax+rax], al; add [rax-0x73], cl; add eax, 0xdd115; jne short 0x00000000000c55df; ret; 
0x000000000a9575: add [rax+rax], al; add [rax-0x73], cl; add eax, 0xf0680; jne short 0x00000000000a9524; ret; 
0x00000000096778: add [rax+rax], al; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x000000000a82b9: add [rax+rax], al; add [rbp-0x4b], dh; ret; 
0x0000000013ef1c: add [rax+rax], al; add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x0000000013b5b6: add [rax+rax], al; add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x0000000011a9f9: add [rax+rax], cl; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000011fa62: add [rax+rax], cl; add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000a4119: add [rax+rax], cl; add [rax], al; xor eax, eax; ret; 
0x00000000057113: add [rax+rax], cl; add [rdi+rax*4-0x17], dh; sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000d42c3: add [rax+rax], cl; add [rdi+rax*4-0x17], dh; sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x00000000119fb1: add [rax+rax], edx; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x000000000d8135: add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret; 
0x000000000f700c: add [rax+rbp*4-0x7d], esi; jrcxz 0x00000000000f701a; je short 0x00000000000f6f97; pop rbx; ret; 
0x000000001754e5: add [rax+rbx+0x48], dh; mov eax, [rip+0xa39d9]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x0000000002a25a: add [rax+rcx*2+0x3], ah; add al, 0x25; add [rax], al; add [rax], al; ret; 
0x0000000016acd7: add [rax+rcx*2-0x75], ah; or [rbx+0x798db90c], ecx; mov edi, 0x8337e983; call far fword ptr [rdx]; 
0x00000000045d94: add [rax+rcx*2-0x77], ah; adc ecx, [rax-0x75]; jge short 0x0000000000045da5; call rax; 
0x00000000090be6: add [rax+rcx*2-0x77], ah; cmp al, 0x25; add [rbx], al; add [rax], al; ret; 
0x00000000064369: add [rax+rcx*4+0x6b], eax; jmp far fword ptr [rcx]; 
0x00000000054313: add [rax+rcx+0x48], esi; mov ecx, [rcx+rdx*8]; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000000540ec: add [rax+rcx+0x49], esi; mov edx, [rax+rax*8]; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x000000000ab495: add [rax+rdx+0x5b], dh; pop rbp; pop r12; ret; 
0x00000000090ae6: add [rax+rdx+0x64], esi; mov rax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000005b3d2: add [rax-0x13b43], al; jmp qword ptr [rsi+0xf]; 
0x000000000a83ba: add [rax-0x168af71b], al; lea rax, [rip+0xf06f9]; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000a82aa: add [rax-0x168af71b], al; lea rax, [rip+0xf5af9]; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a887a: add [rax-0x168af71b], al; lea rax, [rip+0xf5b99]; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a9a2a: add [rax-0x168af71b], al; lea rax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9aba: add [rax-0x168af71b], al; lea rax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000a89aa: add [rax-0x168af71b], al; lea rax, [rip+0xf6809]; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a846a: add [rax-0x168af71b], al; lea rax, [rip+0xf69b9]; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000c04cf: add [rax-0x177cb6c9], cl; add [rax-0x73], ecx; jg short 0x00000000000c04db; jne 0x00000000000c0d90; ret; 
0x00000000142695: add [rax-0x1], bh; cmove eax, edx; ret; 
0x000000001724c1: add [rax-0x1], bh; mov qword ptr [rdx], 0x0; ret; 
0x0000000004519d: add [rax-0x1], bh; pop rbp; pop r12; pop r13; ret; 
0x000000000407ed: add [rax-0x1], bh; pop rbp; ret; 
0x00000000142cbf: add [rax-0x1], bh; pop rbx; ret; 
0x0000000002a53d: add [rax-0x1], bh; ret; 
0x00000000061f0e: add [rax-0x1], dil; pop rbp; ret; 
0x0000000014d15e: add [rax-0x1], dil; ret; 
0x000000000a832f: add [rax-0x1a8af71a], al; lea rax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000c6da8: add [rax-0x258af71b], al; and esi, 0x400; lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c5618: add [rax-0x258af71b], al; and esi, 0x400; lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000c5b2d: add [rax-0x2a8af71b], al; and esi, 0x400; lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000a956d: add [rax-0x2a8af71b], al; and esi, 0x400; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x00000000042ebd: add [rax-0x2d], cl; loopne 0x0000000000042f0a; or [rdi], eax; xor eax, eax; ret; 
0x00000000029dae: add [rax-0x2f7600cf], dl; syscall; 
0x00000000041894: add [rax-0x3591f09a], al; movd xmm0, esi; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000143672: add [rax-0x39], cl; add al, 0x24; add [rax], al; add [rax], al; call rax; 
0x0000000008f59e: add [rax-0x39], cl; add eax, 0x18c4ae; add [rax], al; add [rax], al; ret; 
0x000000001290ee: add [rax-0x39], cl; add eax, 0xf0346; add [rax], al; add [rax], al; ret; 
0x000000001290c5: add [rax-0x39], cl; add eax, 0xf036f; add [rax], al; add [rax], al; ret; 
0x0000000012906e: add [rax-0x39], cl; add eax, 0xf03c6; add [rax], al; add [rax], al; ret; 
0x00000000125a91: add [rax-0x39], cl; add eax, 0xfba2b; add [rax], al; add [rax], al; ret; 
0x0000000010e398: add [rax-0x39], cl; ret; 
0x000000000d83ff: add [rax-0x39], cl; rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x000000000d843f: add [rax-0x39], cl; rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000000d83ef: add [rax-0x39], cl; rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x000000000d842f: add [rax-0x39], cl; rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x0000000004251e: add [rax-0x39], cl; ror byte ptr [rdi], 0x0; add [rax], al; syscall; 
0x000000000c0c7e: add [rax-0x3c00a877], dl; nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000001367ad: add [rax-0x3c38baf1], al; nop [rax+rax]; mov eax, edi; and eax, 0xffffff; ret; 
0x0000000013682e: add [rax-0x3c38baf1], al; nop [rax]; mov eax, edi; shr eax, 0x18; ret; 
0x000000001a49fe: add [rax-0x3cf872b8], dl; nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x00000000041099: add [rax-0x3f000001], al; shr eax, 0x1f; ret; 
0x0000000019d5de: add [rax-0x3f43f00d], dl; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000001b439e: add [rax-0x3f43f00d], dl; cmp esi, [rdi+rax*4+0x60]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b14be: add [rax-0x3f43f00d], dl; cmp sil, [rdi+rax+0x60]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x0000000019977e: add [rax-0x3f43f00d], dl; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000ab6ef: add [rax-0x3f7cb7f8], cl; add [rax-0x7d], ecx; ret; 
0x00000000143592: add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000014a63f: add [rax-0x3f], cl; out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000029cca: add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x1f1d52], eax; ret; 
0x000000001258cc: add [rax-0x3f], cl; ret; 
0x00000000119e1c: add [rax-0x3fcef877], al; ret; 
0x0000000005662f: add [rax-0x3ffe], bh; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000dfa64: add [rax-0x41], cl; ret; 
0x00000000128e5e: add [rax-0x42], cl; ret; 
0x0000000009af8e: add [rax-0x472b8aff], bpl; adc [rax], al; add [rax], al; ret; 
0x0000000009af8f: add [rax-0x472b8aff], ch; adc [rax], al; add [rax], al; ret; 
0x00000000056648: add [rax-0x47ff76b7], al; add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000001ba8fa: add [rax-0x48], cl; add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret; 
0x0000000011462e: add [rax-0x5e1f00d], dl; mov eax, 0x102; syscall; 
0x0000000011627e: add [rax-0x5e1f00d], dl; mov eax, 0x107; syscall; 
0x000000001161be: add [rax-0x5e1f00d], dl; mov eax, 0x10a; syscall; 
0x00000000126fbe: add [rax-0x5e1f00d], dl; mov eax, 0x110; syscall; 
0x0000000012701e: add [rax-0x5e1f00d], dl; mov eax, 0x11b; syscall; 
0x00000000126cee: add [rax-0x5e1f00d], dl; mov eax, 0x123; syscall; 
0x000000001151ee: add [rax-0x5e1f00d], dl; mov eax, 0x124; syscall; 
0x00000000126e0e: add [rax-0x5e1f00d], dl; mov eax, 0x126; syscall; 
0x0000000012704e: add [rax-0x5e1f00d], dl; mov eax, 0x12c; syscall; 
0x000000001270de: add [rax-0x5e1f00d], dl; mov eax, 0x13f; syscall; 
0x0000000012710e: add [rax-0x5e1f00d], dl; mov eax, 0x14a; syscall; 
0x0000000012713e: add [rax-0x5e1f00d], dl; mov eax, 0x14b; syscall; 
0x00000000108c9e: add [rax-0x5e1f00d], dl; mov eax, 0x18; syscall; 
0x0000000011ed4e: add [rax-0x5e1f00d], dl; mov eax, 0x1b; syscall; 
0x000000001151be: add [rax-0x5e1f00d], dl; mov eax, 0x21; syscall; 
0x00000000127cde: add [rax-0x5e1f00d], dl; mov eax, 0x29; syscall; 
0x0000000012775e: add [rax-0x5e1f00d], dl; mov eax, 0x33; syscall; 
0x0000000011d12e: add [rax-0x5e1f00d], dl; mov eax, 0x4c; syscall; 
0x0000000011534e: add [rax-0x5e1f00d], dl; mov eax, 0x51; syscall; 
0x000000001162ae: add [rax-0x5e1f00d], dl; mov eax, 0x54; syscall; 
0x000000001161ee: add [rax-0x5e1f00d], dl; mov eax, 0x59; syscall; 
0x0000000011442e: add [rax-0x5e1f00d], dl; mov eax, 0x5b; syscall; 
0x00000000115c3e: add [rax-0x5e1f00d], dl; mov eax, 0x5d; syscall; 
0x00000000115c6e: add [rax-0x5e1f00d], dl; mov eax, 0x5e; syscall; 
0x000000000ea39e: add [rax-0x5e1f00d], dl; mov eax, 0x64; syscall; 
0x00000000126e6e: add [rax-0x5e1f00d], dl; mov eax, 0x67; syscall; 
0x000000000ec36e: add [rax-0x5e1f00d], dl; mov eax, 0x6d; syscall; 
0x000000000ec39e: add [rax-0x5e1f00d], dl; mov eax, 0x6f; syscall; 
0x000000000ec3fe: add [rax-0x5e1f00d], dl; mov eax, 0x70; syscall; 
0x000000000ec42e: add [rax-0x5e1f00d], dl; mov eax, 0x76; syscall; 
0x000000000ec45e: add [rax-0x5e1f00d], dl; mov eax, 0x78; syscall; 
0x00000000125c6e: add [rax-0x5e1f00d], dl; mov eax, 0x7b; syscall; 
0x00000000126c2e: add [rax-0x5e1f00d], dl; mov eax, 0x7e; syscall; 
0x00000000126fee: add [rax-0x5e1f00d], dl; mov eax, 0x86; syscall; 
0x00000000108c0e: add [rax-0x5e1f00d], dl; mov eax, 0x8f; syscall; 
0x00000000108c3e: add [rax-0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x00000000108c6e: add [rax-0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x00000000108cce: add [rax-0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000108cfe: add [rax-0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x00000000108d2e: add [rax-0x5e1f00d], dl; mov eax, 0x94; syscall; 
0x0000000011edde: add [rax-0x5e1f00d], dl; mov eax, 0x96; syscall; 
0x0000000011ee0e: add [rax-0x5e1f00d], dl; mov eax, 0x97; syscall; 
0x0000000011ee3e: add [rax-0x5e1f00d], dl; mov eax, 0x98; syscall; 
0x00000000126bbe: add [rax-0x5e1f00d], dl; mov eax, 0x9a; syscall; 
0x00000000126efe: add [rax-0x5e1f00d], dl; mov eax, 0x9b; syscall; 
0x0000000011b9ee: add [rax-0x5e1f00d], dl; mov eax, 0xa1; syscall; 
0x0000000011bece: add [rax-0x5e1f00d], dl; mov eax, 0xa7; syscall; 
0x0000000011befe: add [rax-0x5e1f00d], dl; mov eax, 0xa8; syscall; 
0x0000000011ec4e: add [rax-0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x00000000125b2e: add [rax-0x5e1f00d], dl; mov eax, 0xac; syscall; 
0x00000000126c5e: add [rax-0x5e1f00d], dl; mov eax, 0xae; syscall; 
0x00000000126c8e: add [rax-0x5e1f00d], dl; mov eax, 0xb0; syscall; 
0x0000000012716e: add [rax-0x5e1f00d], dl; mov eax, 0xba; syscall; 
0x000000001222fe: add [rax-0x5e1f00d], dl; mov eax, 0xc6; syscall; 
0x000000001221de: add [rax-0x5e1f00d], dl; mov eax, 0xc7; syscall; 
0x00000000126cbe: add [rax-0x5e1f00d], dl; mov eax, 0xd5; syscall; 
0x00000000126bee: add [rax-0x5e1f00d], dl; mov eax, 0xe4; syscall; 
0x00000000126dde: add [rax-0x5e1f00d], dl; mov eax, 0xfd; syscall; 
0x00000000126e3e: add [rax-0x5e1f00d], dl; mov eax, 0xff; syscall; 
0x00000000140fee: add [rax-0x5e1f00d], dl; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x0000000004277e: add [rax-0x5e1f00d], dl; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000115c9e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x104; syscall; 
0x0000000011615e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x109; syscall; 
0x0000000011621e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000012707e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000113c2e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000127d0e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000012778e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126e9e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d7e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f2e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000012238e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbc; syscall; 
0x0000000012232e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbd; syscall; 
0x0000000012220e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000012229e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xc0; syscall; 
0x0000000011ed7e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000126d1e: add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000002a24e: add [rax-0x5e1f00d], dl; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x000000001271ae: add [rax-0x5e1f00d], dl; mov rax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000041f7e: add [rax-0x5e1f00d], dl; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000041a4e: add [rax-0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x0000000009c0ce: add [rax-0x5e1f00d], dl; xor eax, eax; ret; 
0x0000000011521e: add [rax-0x5e1f00d], dl; xor esi, esi; mov eax, 0x125; syscall; 
0x000000000924a3: add [rax-0x68], cl; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000001b0a1c: add [rax-0x72b7bfb1], ecx; ret; 
0x0000000005a435: add [rax-0x72b7febf], ecx; add cl, [rcx+0x39]; ret; 
0x000000000b153a: add [rax-0x73], cl; adc dil, r15b; ret; 
0x000000000a9d7d: add [rax-0x73], cl; adc eax, 0x10512b; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a993d: add [rax-0x73], cl; adc eax, 0x10554b; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a970d: add [rax-0x73], cl; adc eax, 0x10579b; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000c52d2: add [rax-0x73], cl; adc eax, 0x10e2a6; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000c6d7c: add [rax-0x73], cl; adc eax, 0x118ac; cmovne rax, rdx; ret; 
0x000000000a828d: add [rax-0x73], cl; adc eax, 0x12afb; cmovne rax, rdx; ret; 
0x000000000c55ec: add [rax-0x73], cl; adc eax, 0x12e5c; cmovne rax, rdx; ret; 
0x000000000a885d: add [rax-0x73], cl; adc eax, 0x1414b; cmovne rax, rdx; ret; 
0x0000000007d4e4: add [rax-0x73], cl; adc eax, 0x154d24; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d5d: add [rax-0x73], cl; adc eax, 0x1ab8b; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a991d: add [rax-0x73], cl; adc eax, 0x1afab; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96ed: add [rax-0x73], cl; adc eax, 0x1b1fb; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x00000000134717: add [rax-0x73], cl; adc eax, 0x4bbe1; cmovne rax, rdx; ret; 
0x000000001344b7: add [rax-0x73], cl; adc eax, 0x4be61; cmovne rax, rdx; ret; 
0x000000001345e7: add [rax-0x73], cl; adc eax, 0x4e821; cmovne rax, rdx; ret; 
0x0000000013479d: add [rax-0x73], cl; adc eax, 0x6c0db; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x0000000013466d: add [rax-0x73], cl; adc eax, 0x6c22b; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x0000000013453d: add [rax-0x73], cl; adc eax, 0x6c35b; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x0000000013473d: add [rax-0x73], cl; adc eax, 0x7213b; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x0000000013460d: add [rax-0x73], cl; adc eax, 0x7228b; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344dd: add [rax-0x73], cl; adc eax, 0x723bb; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x00000000134861: add [rax-0x73], cl; adc eax, 0x728c7; cmove rax, rdx; ret; 
0x000000001346d5: add [rax-0x73], cl; adc eax, 0x73623; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a5: add [rax-0x73], cl; adc eax, 0x73773; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134475: add [rax-0x73], cl; adc eax, 0x738a3; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000135b79: add [rax-0x73], cl; adc eax, 0x79eff; cmovne rax, rdx; ret; 
0x0000000013477d: add [rax-0x73], cl; adc eax, 0x7a6fb; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x0000000013464d: add [rax-0x73], cl; adc eax, 0x7a84b; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x0000000013451d: add [rax-0x73], cl; adc eax, 0x7a97b; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x0000000015f24f: add [rax-0x73], cl; adc eax, 0xb9949; jmp qword ptr [rdx+rax*8]; 
0x0000000016896a: add [rax-0x73], cl; adc eax, 0xbf12e; mov fs:[rax], rdx; ret; 
0x000000000a839d: add [rax-0x73], cl; adc eax, 0xcffeb; cmovne rax, rdx; ret; 
0x000000000a891f: add [rax-0x73], cl; adc eax, 0xd0cd9; cmovne rax, rdx; ret; 
0x000000000a9d17: add [rax-0x73], cl; adc eax, 0xd6611; cmovne rax, rdx; ret; 
0x000000000a98d7: add [rax-0x73], cl; adc eax, 0xd6a31; cmovne rax, rdx; ret; 
0x000000000a96a7: add [rax-0x73], cl; adc eax, 0xd9771; cmovne rax, rdx; ret; 
0x000000000a9bd1: add [rax-0x73], cl; adc eax, 0xdbd87; cmovne rax, rdx; ret; 
0x000000000a9b31: add [rax-0x73], cl; adc eax, 0xdbe07; cmovne rax, rdx; ret; 
0x000000000a9c21: add [rax-0x73], cl; adc eax, 0xdde97; cmovne rax, rdx; ret; 
0x000000000a9b81: add [rax-0x73], cl; adc eax, 0xddf17; cmovne rax, rdx; ret; 
0x000000000c5afc: add [rax-0x73], cl; adc eax, 0xe074c; cmovne rax, rdx; ret; 
0x000000000a844d: add [rax-0x73], cl; adc eax, 0xe1bbb; cmovne rax, rdx; ret; 
0x000000000f257c: add [rax-0x73], cl; adc eax, 0xe22a4; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a898d: add [rax-0x73], cl; adc eax, 0xe2e2b; cmovne rax, rdx; ret; 
0x000000000f0914: add [rax-0x73], cl; adc eax, 0xe3d9c; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9a0d: add [rax-0x73], cl; adc eax, 0xe492b; cmovne rax, rdx; ret; 
0x000000000a9a9d: add [rax-0x73], cl; adc eax, 0xe60ab; cmovne rax, rdx; ret; 
0x000000000ed54e: add [rax-0x73], cl; adc eax, 0xe6f06; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed423: add [rax-0x73], cl; adc eax, 0xe6f79; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000c5bd9: add [rax-0x73], cl; adc eax, 0xe9eaf; cmovne rax, rdx; ret; 
0x000000000a9d9d: add [rax-0x73], cl; adc eax, 0xf6b0b; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a995d: add [rax-0x73], cl; adc eax, 0xf6f2b; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a972d: add [rax-0x73], cl; adc eax, 0xf717b; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a953c: add [rax-0x73], cl; adc eax, 0xfb59c; cmovne rax, rdx; ret; 
0x000000000a830e: add [rax-0x73], cl; adc eax, 0xfc4aa; cmovne rax, rdx; ret; 
0x000000000a9d3d: add [rax-0x73], cl; adc eax, 0xfcb6b; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a98fd: add [rax-0x73], cl; adc eax, 0xfcf8b; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96cd: add [rax-0x73], cl; adc eax, 0xfd1db; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a97f1: add [rax-0x73], cl; adc eax, 0xfd947; cmove rax, rdx; ret; 
0x000000000a9cd5: add [rax-0x73], cl; adc eax, 0xfe053; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a9895: add [rax-0x73], cl; adc eax, 0xfe473; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a9665: add [rax-0x73], cl; adc eax, 0xfe6c3; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x0000000013475d: add [rax-0x73], cl; adc eax, 0xfff9015b; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x0000000013462d: add [rax-0x73], cl; adc eax, 0xfff902ab; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x000000001344fd: add [rax-0x73], cl; adc eax, 0xfff903db; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x000000000c5e04: add [rax-0x73], cl; add [rbp+rcx*4+0x4c], rcx; and al, 0x38; call rbx; 
0x000000000c5f6a: add [rax-0x73], cl; add al, 0x4c; lea ecx, [rsp+0x18]; call rbx; 
0x000000000c63a4: add [rax-0x73], cl; add al, 0x4c; lea ecx, [rsp+0x20]; call rbx; 
0x000000000ba2de: add [rax-0x73], cl; add al, 0x7; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000001a4a3f: add [rax-0x73], cl; add al, 0xc3; nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x000000000a9d84: add [rax-0x73], cl; add eax, 0x1051b4; cmove rax, rdx; ret; 
0x000000000a9944: add [rax-0x73], cl; add eax, 0x1055b4; cmove rax, rdx; ret; 
0x000000000a9607: add [rax-0x73], cl; add eax, 0x105671; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000a9714: add [rax-0x73], cl; add eax, 0x105824; cmove rax, rdx; ret; 
0x000000000a9834: add [rax-0x73], cl; add eax, 0x106304; cmove rax, rdx; ret; 
0x000000000ab0f7: add [rax-0x73], cl; add eax, 0x106601; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a8347: add [rax-0x73], cl; add eax, 0x109111; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a8787: add [rax-0x73], cl; add eax, 0x109a91; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000ab080: add [rax-0x73], cl; add eax, 0x10afb8; cmove rax, rdx; ret; 
0x000000000a8807: add [rax-0x73], cl; add eax, 0x10b671; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a47: add [rax-0x73], cl; add eax, 0x10b6f1; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a94f0: add [rax-0x73], cl; add eax, 0x10c848; cmove rax, rdx; ret; 
0x000000000c5a8b: add [rax-0x73], cl; add eax, 0x110cd; cmove rax, rdx; ret; 
0x000000000c54c4: add [rax-0x73], cl; add eax, 0x11a34; cmove rax, rdx; ret; 
0x000000000a8a34: add [rax-0x73], cl; add eax, 0x11c94; cmove rax, rdx; ret; 
0x000000000a8774: add [rax-0x73], cl; add eax, 0x12254; cmove rax, rdx; ret; 
0x000000000a87f4: add [rax-0x73], cl; add eax, 0x12374; cmove rax, rdx; ret; 
0x000000000c56f4: add [rax-0x73], cl; add eax, 0x124d4; cmove rax, rdx; ret; 
0x000000000c5824: add [rax-0x73], cl; add eax, 0x12664; cmove rax, rdx; ret; 
0x000000000c5444: add [rax-0x73], cl; add eax, 0x128b4; cmove rax, rdx; ret; 
0x0000000003888f: add [rax-0x73], cl; add eax, 0x19fbd8; ret; 
0x000000000a9d64: add [rax-0x73], cl; add eax, 0x1ac94; cmove rax, rdx; ret; 
0x000000000a9924: add [rax-0x73], cl; add eax, 0x1b084; cmove rax, rdx; ret; 
0x000000000a96f4: add [rax-0x73], cl; add eax, 0x1b304; cmove rax, rdx; ret; 
0x000000000a97b8: add [rax-0x73], cl; add eax, 0x1b820; cmovne rax, rdx; ret; 
0x00000000051697: add [rax-0x73], cl; add eax, 0x1ca241; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000469d3: add [rax-0x73], cl; add eax, 0x1d4d7b; add rsp, 0x8; ret; 
0x00000000038826: add [rax-0x73], cl; add eax, 0x1e2412; ret; 
0x000000001a4a4f: add [rax-0x73], cl; add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000000b1644: add [rax-0x73], cl; add eax, 0x37f4; cmove rax, rdx; ret; 
0x000000001347a4: add [rax-0x73], cl; add eax, 0x6c144; cmove rax, rdx; ret; 
0x00000000134674: add [rax-0x73], cl; add eax, 0x6c294; cmove rax, rdx; ret; 
0x00000000134544: add [rax-0x73], cl; add eax, 0x6c3c4; cmove rax, rdx; ret; 
0x00000000134811: add [rax-0x73], cl; add eax, 0x6c8c7; cmove rax, rdx; ret; 
0x00000000134744: add [rax-0x73], cl; add eax, 0x721a4; cmove rax, rdx; ret; 
0x00000000134614: add [rax-0x73], cl; add eax, 0x722f4; cmove rax, rdx; ret; 
0x000000001344e4: add [rax-0x73], cl; add eax, 0x72424; cmove rax, rdx; ret; 
0x000000001346dc: add [rax-0x73], cl; add eax, 0x7368c; cmove rax, rdx; ret; 
0x000000001345ac: add [rax-0x73], cl; add eax, 0x737dc; cmove rax, rdx; ret; 
0x0000000013447c: add [rax-0x73], cl; add eax, 0x7390c; cmove rax, rdx; ret; 
0x00000000134878: add [rax-0x73], cl; add eax, 0x74060; cmove rax, rdx; ret; 
0x00000000134784: add [rax-0x73], cl; add eax, 0x7a764; cmove rax, rdx; ret; 
0x00000000134654: add [rax-0x73], cl; add eax, 0x7a8b4; cmove rax, rdx; ret; 
0x00000000134524: add [rax-0x73], cl; add eax, 0x7a9e4; cmove rax, rdx; ret; 
0x000000001348a4: add [rax-0x73], cl; add eax, 0x7b264; cmove rax, rdx; ret; 
0x000000000ab05b: add [rax-0x73], cl; add eax, 0x9bcd; cmove rax, rdx; ret; 
0x000000000a94cb: add [rax-0x73], cl; add eax, 0xb42d; cmove rax, rdx; ret; 
0x000000000a95f4: add [rax-0x73], cl; add eax, 0xc014; cmove rax, rdx; ret; 
0x000000000c5b38: add [rax-0x73], cl; add eax, 0xdb700; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db3: add [rax-0x73], cl; add eax, 0xdbb85; jne short 0x00000000000c6d6f; ret; 
0x000000000c5623: add [rax-0x73], cl; add eax, 0xdd115; jne short 0x00000000000c55df; ret; 
0x000000000c5457: add [rax-0x73], cl; add eax, 0xeeee1; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54d7: add [rax-0x73], cl; add eax, 0xef0e1; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c5707: add [rax-0x73], cl; add eax, 0xef4f1; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c5837: add [rax-0x73], cl; add eax, 0xefcb1; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x000000000a9578: add [rax-0x73], cl; add eax, 0xf0680; jne short 0x00000000000a9524; ret; 
0x000000000c5ab0: add [rax-0x73], cl; add eax, 0xf0728; cmove rax, rdx; ret; 
0x000000000ab0e4: add [rax-0x73], cl; add eax, 0xf3d4; cmove rax, rdx; ret; 
0x000000000a9da4: add [rax-0x73], cl; add eax, 0xf6b94; cmove rax, rdx; ret; 
0x000000000a9964: add [rax-0x73], cl; add eax, 0xf6f94; cmove rax, rdx; ret; 
0x000000000a9734: add [rax-0x73], cl; add eax, 0xf7204; cmove rax, rdx; ret; 
0x000000000a97a1: add [rax-0x73], cl; add eax, 0xf7957; cmove rax, rdx; ret; 
0x000000000a9d44: add [rax-0x73], cl; add eax, 0xfcbf4; cmove rax, rdx; ret; 
0x000000000a9904: add [rax-0x73], cl; add eax, 0xfcff4; cmove rax, rdx; ret; 
0x000000000a96d4: add [rax-0x73], cl; add eax, 0xfd264; cmove rax, rdx; ret; 
0x000000000b1657: add [rax-0x73], cl; add eax, 0xfe0a1; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000000a9cdc: add [rax-0x73], cl; add eax, 0xfe0dc; cmove rax, rdx; ret; 
0x000000000a989c: add [rax-0x73], cl; add eax, 0xfe4dc; cmove rax, rdx; ret; 
0x000000000a966c: add [rax-0x73], cl; add eax, 0xfe74c; cmove rax, rdx; ret; 
0x000000000a9808: add [rax-0x73], cl; add eax, 0xff0f0; cmove rax, rdx; ret; 
0x000000000d9c06: add [rax-0x73], cl; add eax, 0xfffffee1; ret; 
0x000000000d9bf6: add [rax-0x73], cl; add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x000000000d9ae6: add [rax-0x73], cl; add eax, 0xfffffef1; ret; 
0x000000000d9ad6: add [rax-0x73], cl; add eax, 0xffffff01; add rsp, 0x58; ret; 
0x000000001a4a1f: add [rax-0x73], cl; add r8b, r11b; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x000000001a4a2f: add [rax-0x73], cl; add r8d, r11d; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000000d817f: add [rax-0x73], cl; clc; ret; 
0x000000000d818f: add [rax-0x73], cl; cld; ret; 
0x00000000052f67: add [rax-0x73], cl; dec dword ptr [rax+0x39]; ret; 
0x000000000d816f: add [rax-0x73], cl; hlt; ret; 
0x0000000011c7b8: add [rax-0x73], cl; jb short 0x000000000011c7be; jne short 0x000000000011c78d; ret; 
0x00000000085896: add [rax-0x73], cl; je short 0x00000000000858bf; xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x0000000008aa10: add [rax-0x73], cl; je short 0x000000000008aa39; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000008b05a: add [rax-0x73], cl; je short 0x000000000008b083; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000007d79c: add [rax-0x73], cl; jmp qword ptr [r14+0x48]; 
0x000000000919ee: add [rax-0x73], cl; js short 0x0000000000091a13; mov eax, 0xca; syscall; 
0x000000001758f5: add [rax-0x73], cl; js short 0x0000000000175916; mov eax, 0xca; syscall; 
0x00000000175c25: add [rax-0x73], cl; js short 0x0000000000175c46; mov eax, 0xca; syscall; 
0x00000000094a1f: add [rax-0x73], cl; mov bl, 0xf0; or [rax], al; add [rax+0xe], bh; syscall; 
0x00000000094928: add [rax-0x73], cl; mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x00000000094af9: add [rax-0x73], cl; mov eax, 0x9a0; mov eax, 0x14e; syscall; 
0x00000000075607: add [rax-0x73], cl; mov esp, 0xf024; add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001a4aaf: add [rax-0x73], cl; or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x0000000007dda5: add [rax-0x73], cl; or eax, 0x1546a7; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000062570: add [rax-0x73], cl; or eax, 0x16e0a8; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000008a6a4: add [rax-0x73], cl; or eax, 0x18b954; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x000000001a4abf: add [rax-0x73], cl; or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x00000000175329: add [rax-0x73], cl; or eax, 0xfffffcbf; call qword ptr [rbx+0x358]; 
0x000000001a4a6f: add [rax-0x73], cl; or r11b, r8b; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x000000001a4a7f: add [rax-0x73], cl; or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x000000001a4a8f: add [rax-0x73], cl; or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000001a4a9f: add [rax-0x73], cl; or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000001203f6: add [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret; 
0x000000000947d7: add [rax-0x73], cl; xchg ebx, eax; cmp [rsi], al; add [rax], al; syscall; 
0x000000000a0bba: add [rax-0x73], cl; xor eax, 0x13213e; sub rsp, 0x8; syscall; 
0x00000000101c03: add [rax-0x73], cl; xor eax, 0xd3109; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x0000000007bc40: add [rax-0x73], cl; xor eax, 0xfffff3f8; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000761c2: add [rax-0x73], cl; xor eax, 0xfffff626; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x000000001320ae: add [rax-0x73], ecx; add [r8-0x77], ecx; ret; 
0x0000000005a429: add [rax-0x73], ecx; add [rcx+0x39], ecx; ret; 
0x0000000018d4ba: add [rax-0x73], ecx; add [rdi], rcx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x0000000005a439: add [rax-0x73], ecx; add cl, [rcx+0x39]; ret; 
0x000000000c04d5: add [rax-0x73], ecx; jg short 0x00000000000c04db; jne 0x00000000000c0d90; ret; 
0x000000000c1bb8: add [rax-0x73], ecx; jg short 0x00000000000c1bbe; jne 0x00000000000c25e0; ret; 
0x0000000019f4eb: add [rax-0x73], ecx; jg short 0x000000000019f4f1; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0203: add [rax-0x73], ecx; jg short 0x00000000001a0209; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b062b: add [rax-0x73], ecx; jg short 0x00000000001b0631; jne 0x00000000001b0ac0; ret; 
0x000000001b37e3: add [rax-0x73], ecx; jg short 0x00000000001b37e9; jne 0x00000000001b3c30; ret; 
0x00000000150459: add [rax-0x75], cl; adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x000000000c5346: add [rax-0x75], cl; adc byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000120df7: add [rax-0x75], cl; add [r8-0x7d], r9b; ret; 
0x0000000003a151: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e1: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x0000000003a341: add [rax-0x75], cl; add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a121: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b1: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret; 
0x0000000018b63f: add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x0000000015e586: add [rax-0x75], cl; add [rax-0x7b], cl; shl byte ptr [rax+rax*2+0x41], 0x83; call qword ptr [rbx]; 
0x000000001668e0: add [rax-0x75], cl; add [rax-0x7b], cl; shl byte ptr [rbp-0x21], 0xe8; mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x00000000162d97: add [rax-0x75], cl; add [rbx-0x37f0fe18], al; mov [rdi+0xa8], eax; mov eax, 0x1; ret; 
0x00000000045ea9: add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret; 
0x00000000165b6f: add [rax-0x75], cl; add [rdi], ecx; enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x000000001ba254: add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000083b98: add [rax-0x75], cl; add al, 0x24; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000013f21b: add [rax-0x75], cl; add al, 0x24; mov rdi, r12; call rax; 
0x0000000013e5e6: add [rax-0x75], cl; add al, 0x24; mov rdi, rbx; call rax; 
0x0000000007d337: add [rax-0x75], cl; add al, 0xf8; ret; 
0x000000000c5326: add [rax-0x75], cl; add byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000118d07: add [rax-0x75], cl; add eax, 0x100101; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000114297: add [rax-0x75], cl; add eax, 0x104b71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000113e9e: add [rax-0x75], cl; add eax, 0x104f69; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000e6538: add [rax-0x75], cl; add eax, 0x1328d0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5787: add [rax-0x75], cl; add eax, 0x133681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e571f: add [rax-0x75], cl; add eax, 0x1336e9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d8e3e: add [rax-0x75], cl; add eax, 0x13ffc9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000c52ff: add [rax-0x75], cl; add eax, 0x153bc1; mov rax, [rax+0x1f0]; ret; 
0x000000000c52e6: add [rax-0x75], cl; add eax, 0x153bd9; mov rax, [rax+0x248]; ret; 
0x000000000a76e6: add [rax-0x75], cl; add eax, 0x1716f1; call qword ptr [rax]; 
0x000000000a761f: add [rax-0x75], cl; add eax, 0x1717b9; call qword ptr [rax]; 
0x000000000a410f: add [rax-0x75], cl; add eax, 0x174cf9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009dfaf: add [rax-0x75], cl; add eax, 0x17ae59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cd9f: add [rax-0x75], cl; add eax, 0x17c069; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009c547: add [rax-0x75], cl; add eax, 0x17c8c1; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009c10f: add [rax-0x75], cl; add eax, 0x17ccf9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c06f: add [rax-0x75], cl; add eax, 0x17cd99; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000909f6: add [rax-0x75], cl; add eax, 0x1884c9; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x000000000897cf: add [rax-0x75], cl; add eax, 0x18f639; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000875b6: add [rax-0x75], cl; add eax, 0x191851; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000081187: add [rax-0x75], cl; add eax, 0x197c81; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000046d8f: add [rax-0x75], cl; add eax, 0x1d2079; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000000466a7: add [rax-0x75], cl; add eax, 0x1d2761; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043107: add [rax-0x75], cl; add eax, 0x1d5d01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000430c7: add [rax-0x75], cl; add eax, 0x1d5d41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043087: add [rax-0x75], cl; add eax, 0x1d5d81; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f67: add [rax-0x75], cl; add eax, 0x1d5ea1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f1f: add [rax-0x75], cl; add eax, 0x1d5ee9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ecf: add [rax-0x75], cl; add eax, 0x1d5f39; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424ef: add [rax-0x75], cl; add eax, 0x1d6919; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004077f: add [rax-0x75], cl; add eax, 0x1d8689; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000039bef: add [rax-0x75], cl; add eax, 0x1df309; mov [rax], rdx; ret; 
0x0000000002a52e: add [rax-0x75], cl; add eax, 0x1ee8d9; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000001760d7: add [rax-0x75], cl; add eax, 0xa2d31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000168c1f: add [rax-0x75], cl; add eax, 0xb01b1; pop rbx; ret; 
0x00000000168b1f: add [rax-0x75], cl; add eax, 0xb0309; pop rbx; ret; 
0x00000000168b9f: add [rax-0x75], cl; add eax, 0xb0421; pop rbx; ret; 
0x00000000168aa7: add [rax-0x75], cl; add eax, 0xb0499; pop rbx; ret; 
0x0000000015506f: add [rax-0x75], cl; add eax, 0xc3d99; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x0000000014961e: add [rax-0x75], cl; add eax, 0xcf7e9; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001360bf: add [rax-0x75], cl; add eax, 0xe2d49; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267ef: add [rax-0x75], cl; add eax, 0xf2619; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267b7: add [rax-0x75], cl; add eax, 0xf2651; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126787: add [rax-0x75], cl; add eax, 0xf2681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012671f: add [rax-0x75], cl; add eax, 0xf26e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266bf: add [rax-0x75], cl; add eax, 0xf2749; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012665f: add [rax-0x75], cl; add eax, 0xf27a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012644f: add [rax-0x75], cl; add eax, 0xf29b9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012640e: add [rax-0x75], cl; add eax, 0xf29f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001217e7: add [rax-0x75], cl; add eax, 0xf7621; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012942f: add [rax-0x75], cl; add eax, 0xf81e1; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000011bfc7: add [rax-0x75], cl; add eax, 0xfce41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011a9ef: add [rax-0x75], cl; add eax, 0xfe419; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000001194c6: add [rax-0x75], cl; add eax, 0xff941; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000085de6: add [rax-0x75], cl; and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x0000000015d533: add [rax-0x75], cl; and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000015d54c: add [rax-0x75], cl; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000b1547: add [rax-0x75], cl; and al, 0x10; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000174c78: add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x00000000174c1b: add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rcx; 
0x0000000015ea86: add [rax-0x75], cl; and al, 0x28; call rax; 
0x00000000046cd3: add [rax-0x75], cl; and al, 0x8; add rsp, 0x28; ret; 
0x0000000015f2b7: add [rax-0x75], cl; and al, 0x8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000015d2d8: add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000c5366: add [rax-0x75], cl; and byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000012249f: add [rax-0x75], cl; and byte ptr [rax], 0x3; add [rax], al; ret; 
0x000000001636a5: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x00000000162c5f: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x000000000c5316: add [rax-0x75], cl; cmp al, 0x1; add [rax], al; ret; 
0x000000001754ee: add [rax-0x75], cl; cmp al, 0x24; mov rax, [rax+0x338]; jmp rax; 
0x0000000014056e: add [rax-0x75], cl; cmp al, [rcx-0xa]; ret; 
0x000000000c5396: add [rax-0x75], cl; cmp byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000167557: add [rax-0x75], cl; cmp ebp, ebx; ret; 
0x0000000015d8a0: add [rax-0x75], cl; cmp ecx, [rax-0x7b]; push qword ptr [rsi+rcx+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000f070e: add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x0000000002b307: add [rax-0x75], cl; cwde; mov rdi, r12; call rax; 
0x0000000002d276: add [rax-0x75], cl; je short 0x000000000002d29f; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000007aaf9: add [rax-0x75], cl; je short 0x000000000007ab22; or [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x19]; call qword ptr [rbp+0x38]; 
0x000000000dd8ba: add [rax-0x75], cl; je short 0x00000000000dd8e3; or al, ch; ret far; 
0x0000000010f257: add [rax-0x75], cl; je short 0x000000000010f280; adc [rax-0x77], cl; ret; 
0x00000000153a2c: add [rax-0x75], cl; je short 0x0000000000153a55; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000162ef9: add [rax-0x75], cl; je short 0x0000000000162f22; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x000000000909fe: add [rax-0x75], cl; jg short 0x0000000000090a13; call qword ptr [rax+0x360]; 
0x000000000a774b: add [rax-0x75], cl; jg short 0x00000000000a7798; mov rsi, r12; call rax; 
0x0000000009006f: add [rax-0x75], cl; jge short 0x0000000000090084; call qword ptr [rbx+0x360]; 
0x0000000009029f: add [rax-0x75], cl; jge short 0x00000000000902b4; call qword ptr [r12+0x360]; 
0x0000000013eec7: add [rax-0x75], cl; jl short 0x000000000013eef0; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x000000000a798f: add [rax-0x75], cl; jnp short 0x00000000000a79dc; call rax; 
0x00000000094785: add [rax-0x75], cl; jo short 0x0000000000094792; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000165c68: add [rax-0x75], cl; jo short 0x0000000000165cb6; mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000000782e7: add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2a9: add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000078d1e: add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000079451: add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007973f: add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000000949a7: add [rax-0x75], cl; mov ebx, 0x648; call qword ptr [rbx+0x640]; 
0x000000001134ef: add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000003a154: add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e4: add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x0000000017d17f: add [rax-0x75], cl; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d37f: add [rax-0x75], cl; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000003a344: add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000015eef0: add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000016458f: add [rax-0x75], cl; or [r8-0x73], r9b; jae short 0x00000000001645b0; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016943a: add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000016957f: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28]; 
0x0000000016941f: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000015fc7f: add [rax-0x75], cl; or [r9-0x77], r9b; in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000150412: add [rax-0x75], cl; or [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x000000000c5336: add [rax-0x75], cl; or byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000001753b6: add [rax-0x75], cl; pop rax; add rsp, 0x70; pop rbx; jmp rax; 
0x0000000003a124: add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b4: add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret; 
0x0000000007c7a7: add [rax-0x75], cl; pop rsp; and al, 0x58; jmp rsi; 
0x00000000076ce7: add [rax-0x75], cl; pop rsp; and al, 0x70; jmp rsi; 
0x0000000003a9a9: add [rax-0x75], cl; pop rsp; ret; 
0x0000000012addf: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x1000; ret; 
0x0000000012ad5f: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x100; ret; 
0x0000000012a95f: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x1; ret; 
0x0000000012acdf: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x2000; ret; 
0x0000000012aadf: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x200; ret; 
0x0000000012a9df: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x2; ret; 
0x0000000012abdf: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x4000; ret; 
0x0000000012a8df: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x400; ret; 
0x0000000012ac5f: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x4; ret; 
0x0000000012ab5f: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x8000; ret; 
0x0000000012a85f: add [rax-0x75], cl; push 0x5004b70f; and eax, 0x8; ret; 
0x000000000a0da6: add [rax-0x75], cl; push rax; or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x00000000110a2a: add [rax-0x75], cl; push rbp; adc [rax-0x77], cl; or [r8-0x7d], r9b; ret; 
0x0000000009051b: add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x0000000008cca8: add [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000001675af: add [rax-0x75], cl; push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x0000000017c82e: add [rax-0x75], cl; push rsi; clc; mov [rdi-0x8], rdx; ret; 
0x0000000018230e: add [rax-0x75], cl; push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000b1477: add [rax-0x75], cl; push rsp; and al, 0x10; mov [rax], rdx; ret; 
0x00000000127927: add [rax-0x75], cl; push rsp; and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x00000000129446: add [rax-0x75], cl; sbb [rbx-0x6f3cff00], al; ret; 
0x00000000129436: add [rax-0x75], cl; sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x000000000c5356: add [rax-0x75], cl; sbb byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000c5376: add [rax-0x75], cl; sub byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000089187: add [rax-0x75], cl; sub rax, [rdi+0x38]; ret; 
0x0000000017c9ef: add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000007f592: add [rax-0x75], cl; xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x000000001204d7: add [rax-0x75], cl; xor [rcx+rcx*4-0x9], cl; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x000000000c5306: add [rax-0x75], cl; xor al, 0x1; add [rax], al; ret; 
0x000000000c5386: add [rax-0x75], cl; xor byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000068d7b: add [rax-0x75], ecx; add dh, al; xor dil, r15b; add cl, ch; jmp qword ptr [rbx-0x76bb0001]; 
0x000000000f6b31: add [rax-0x75], ecx; or [r9-0x75], r9b; je short 0x00000000000f6b5e; or [rcx], ch; ret far; 
0x00000000110636: add [rax-0x75], ecx; xor ecx, [rax-0x7d]; ret; 
0x0000000009328e: add [rax-0x76fc8bfe], ch; push rdi; and al, 0x90; xor eax, eax; ret; 
0x000000000bc7e6: add [rax-0x776b7fe], ecx; ret; 
0x0000000018d4b1: add [rax-0x776b7fe], ecx; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000012908e: add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x00000000174fd8: add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret; 
0x000000000a0fa1: add [rax-0x77], cl; add eax, 0x1783c7; ret; 
0x000000000a0f81: add [rax-0x77], cl; add eax, 0x1783df; ret; 
0x000000000a0f61: add [rax-0x77], cl; add eax, 0x1783f7; ret; 
0x00000000175543: add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret; 
0x00000000164d6a: add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000008597a: add [rax-0x77], cl; and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000050c6c: add [rax-0x77], cl; and al, 0x8; xor eax, eax; mov eax, 0x3e; syscall; 
0x0000000011d312: add [rax-0x77], cl; clc; mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000bf5ce: add [rax-0x77], cl; clc; ret; 
0x000000001a084f: add [rax-0x77], cl; clc; vzeroupper; ret; 
0x000000000c515f: add [rax-0x77], cl; cmp [rax-0x77], cl; jl short 0x00000000000c5177; clc; ret; 
0x0000000010588d: add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret; 
0x000000000902fe: add [rax-0x77], cl; cmp al, 0x24; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000009e5e0: add [rax-0x77], cl; cmp eax, 0x1815e0; mov [rdi+0x18], rax; ret; 
0x000000001754ba: add [rax-0x77], cl; dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x338]; jmp rax; 
0x0000000008c1a7: add [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x00000000130f8d: add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000893dc: add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2]; mov eax, r9d; syscall; 
0x00000000064d17: add [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; ret far; 
0x00000000073791: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x0000000013e590: add [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x10]; 
0x000000000f9a78: add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x00000000111326: add [rax-0x77], cl; fucomip st, st(0); jo short 0x000000000011131f; call qword ptr [rax+0x1b8]; 
0x00000000088834: add [rax-0x77], cl; fucomip st, st(0); ret; 
0x0000000003d7b9: add [rax-0x77], cl; fucomip st, st(0); scasb [rdi]; ret far; 
0x0000000008f0e6: add [rax-0x77], cl; imul esp, [rax+0x5b], 0x5d; pop r12; ret; 
0x000000000928b7: add [rax-0x77], cl; ja short 0x00000000000928dc; xor eax, eax; ret; 
0x0000000011f9c3: add [rax-0x77], cl; je short 0x000000000011f9d0; pop rbx; ret; 
0x0000000011f9c2: add [rax-0x77], cl; je short 0x000000000011f9d0; pop rbx; ret; 
0x00000000174651: add [rax-0x77], cl; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x00000000090b0c: add [rax-0x77], cl; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x00000000152208: add [rax-0x77], cl; or [r8-0x77], cl; ret far; 
0x0000000008ba2d: add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [r13+0x90]; 
0x0000000008a7b7: add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [r15+0x90]; 
0x0000000007ebe6: add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x00000000169607: add [rax-0x77], cl; out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x00000000166ccb: add [rax-0x77], cl; out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000163691: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015eef9: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30]; 
0x0000000008b80b: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x0000000007f09b: add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x00000000167ccf: add [rax-0x77], cl; out dx, eax; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015deda: add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000164469: add [rax-0x77], cl; out dx, eax; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000009904c: add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x00000000099eef: add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000009b114: add [rax-0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000090b19: add [rax-0x77], cl; push r8; mov fs:[0x300], rdi; ret; 
0x000000000d9805: add [rax-0x77], cl; push rsp; and al, 0x38; call r12; 
0x0000000003b218: add [rax-0x77], cl; ret far; 
0x0000000002b24f: add [rax-0x77], cl; ret; 
0x00000000103876: add [rax-0x77], cl; ror byte ptr [rax+0x63], 0x1; adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x0000000005676f: add [rax-0x77], cl; ror byte ptr [rax+0xf], 0x1; mov edx, 0x894830e8; or [rax+0x2], r15b; ret; 
0x00000000174f90: add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret; 
0x000000000b1057: add [rax-0x77], cl; shl dword ptr [rcx], 0xc0; mov [rdx], rcx; ret; 
0x00000000155b73: add [rax-0x77], cl; sub eax, 0xccb5d; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b23: add [rax-0x77], cl; sub eax, 0xcdbed; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155acc: add [rax-0x77], cl; sub eax, 0xcec84; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a75: add [rax-0x77], cl; sub eax, 0xcfd1b; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a1e: add [rax-0x77], cl; sub eax, 0xd0db2; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x000000000776d7: add [rax-0x77], cl; test [rax+rdi*8], ah; add [rax], al; add al, ch; ret far; 
0x00000000073132: add [rax-0x77], cl; test [rax], ebp; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000001190de: add [rax-0x77], cl; xor esi, esi; syscall; 
0x000000000a0d26: add [rax-0x77], ecx; adc eax, 0x17869a; ret; 
0x0000000018faf2: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x0000000018b762: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000018b642: add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x0000000018fa72: add [rax-0x77], ecx; add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret; 
0x0000000018b752: add [rax-0x77], ecx; add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret; 
0x0000000006a10c: add [rax-0x77], ecx; lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x0000000015d5f3: add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x000000000601b1: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0x13e17], ch; jmp qword ptr [rsi-0x70]; 
0x0000000005ed81: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0x6f117], ch; jmp qword ptr [rsi-0x70]; 
0x0000000008a081: add [rax-0x77], ecx; push rdi; or [rdi], cl; mov dh, 0x0; ret; 
0x0000000008a048: add [rax-0x77], ecx; push rsi; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x0000000004885b: add [rax-0x77], ecx; ret; 
0x0000000006a10b: add [rax-0x77], rcx; lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x00000000142b53: add [rax-0x78], eax; ja short 0x0000000000142b59; ret; 
0x000000001ba901: add [rax-0x7ab70000], al; ret; 
0x0000000011d7fa: add [rax-0x7b], cl; push qword ptr [rbp+0x10]; mov eax, 0x1; ret; 
0x0000000015da49: add [rax-0x7b], cl; push qword ptr [rdi+rax+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000788d2: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x00000000113819: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000bd033: add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000015e58a: add [rax-0x7b], cl; shl byte ptr [rax+rax*2+0x41], 0x83; call qword ptr [rbx]; 
0x00000000113cc2: add [rax-0x7b], cl; shl byte ptr [rax+rdi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax; 
0x00000000132aad: add [rax-0x7b], cl; shl byte ptr [rbp+rbp+0x48], 0x8b; jp short 0x0000000000132b07; mov rsi, rdx; call rax; 
0x000000001668e3: add [rax-0x7b], cl; shl byte ptr [rbp-0x21], 0xe8; mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x0000000007f8a7: add [rax-0x7b], cl; shl byte ptr [rbx+rdx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000007f7c7: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000013ea5b: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xe34b8; call rax; 
0x00000000121f25: add [rax-0x7b], cl; shl byte ptr [rdx+0x48], 0x39; ret; 
0x0000000007f850: add [rax-0x7b], cl; shl byte ptr [rdx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x00000000101622: add [rax-0x7b], cl; shl byte ptr [rsi+0xf], 0xef; ror byte ptr [rdi], 0x84; ret far; 
0x00000000113d4e: add [rax-0x7b], cl; shl byte ptr [rsp+rsi+0x31], 0xd2; call rax; 
0x000000000ac065: add [rax-0x7b], ecx; ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdx; ret; 
0x000000001432df: add [rax-0x7b], ecx; sar byte ptr [rax+0xb], 0x48; movsxd edx, ecx; ret; 
0x0000000002cc93: add [rax-0x7bf10000], al; ret; 
0x000000001915f7: add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000001223ca: add [rax-0x7d], cl; call qword ptr [rax]; 
0x000000000a2645: add [rax-0x7d], cl; clc; push qword ptr [rsp+rcx+0x48]; add esp, 0x8; ret; 
0x000000000415c7: add [rax-0x7d], cl; clc; ret far; 
0x0000000009109f: add [rax-0x7d], cl; cmp [rax], eax; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x0000000010d2bb: add [rax-0x7d], cl; in al, dx; or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x00000000061122: add [rax-0x7d], cl; in al, dx; sbb [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000015f9db: add [rax-0x7d], cl; mov eax, 0x100; add [rax-0x77], cl; ret; 
0x000000001416a7: add [rax-0x7d], cl; out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x0000000003834f: add [rax-0x7d], cl; ret; 
0x0000000003514d: add [rax-0x7d], cl; rol byte ptr [rax+rcx*2], 0x83; ret; 
0x000000000d83bf: add [rax-0x7d], cl; rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret; 
0x000000000d83ae: add [rax-0x7d], cl; rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 0x3; ret; 
0x00000000051abf: add [rax-0x7d], cl; rol byte ptr [rcx], 0xc6; jmp qword ptr [rax]; 
0x000000001915fa: add [rax-0x7d], ecx; fdivr st, st(7); ret; 
0x000000000f83c3: add [rax-0x7d], ecx; jmp qword ptr [rax]; 
0x000000000f025c: add [rax-0x7d], ecx; mov dword ptr [rcx], 0x9c75c084; xor eax, eax; ret; 
0x0000000002b7a9: add [rax-0x7d], ecx; ret; 
0x00000000053cca: add [rax-0x7d], ecx; ror dword ptr [rax], 0x39; ret; 
0x000000000785ff: add [rax-0x7f], cl; ret; 
0x00000000048a4c: add [rax-0x80], al; jmp far fword ptr [rbx]; 
0x000000000f3187: add [rax-0x80], eax; jmp far fword ptr [rsi]; 
0x0000000005a162: add [rax-0x8], ebp; saveprevssp; mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000007434e: add [rax-0x8cb43], al; jmp qword ptr [rax]; 
0x000000000740ea: add [rax-0x8cb43], eax; jmp qword ptr [rax]; 
0x00000000079a5f: add [rax-0x8eb43], al; jmp qword ptr [rax]; 
0x000000000792ff: add [rax-0x8eb43], eax; jmp qword ptr [rax]; 
0x0000000011840e: add [rax-0xf00a418], dl; jmp qword ptr [rsi-0x7d]; 
0x0000000003a047: add [rax], ah; add [rax], al; ret; 
0x000000000a8b96: add [rax], al; adc [rax-0x73], cl; add eax, 0x1bc60; cmovne rax, rdx; ret; 
0x000000000a8a76: add [rax], al; adc [rax-0x73], cl; add eax, 0x1bcd0; cmovne rax, rdx; ret; 
0x000000000a84b6: add [rax], al; adc [rax-0x73], cl; add eax, 0x1c1e0; cmovne rax, rdx; ret; 
0x00000000119c5d: add [rax], al; add [r13+rbp-0x48], sil; add [rcx], eax; add [rax], al; syscall; 
0x000000001426d4: add [rax], al; add [rax+0x102], bh; cmovne eax, edx; ret; 
0x000000001426aa: add [rax], al; add [rax+0x104], bh; cmovne eax, edx; ret; 
0x000000000620bd: add [rax], al; add [rax+0x10], bh; ret; 
0x00000000125cb6: add [rax], al; add [rax+0x119], bh; syscall; 
0x000000001a4a0c: add [rax], al; add [rax+0x1478d48], dl; ret; 
0x00000000128ac1: add [rax], al; add [rax+0x14], bh; syscall; 
0x0000000009276d: add [rax], al; add [rax+0x16], bh; cmove eax, edx; ret; 
0x0000000009297d: add [rax], al; add [rax+0x16], bh; ret; 
0x000000000c20ec: add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x000000000e55ca: add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000e55cb: add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000d7bad: add [rax], al; add [rax+0x1], bh; jg short 0x00000000000d7bb9; neg eax; ret; 
0x00000000056564: add [rax], al; add [rax+0x1], bh; ret; 
0x000000000d7da4: add [rax], al; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000001af8b3: add [rax], al; add [rax+0x1], cl; clc; ret; 
0x00000000199a27: add [rax], al; add [rax+0x1], cl; clc; vzeroupper; ret; 
0x000000000c95d6: add [rax], al; add [rax+0x1], cl; fmul st, dword ptr [rax-0x77]; ret; 
0x000000000b0215: add [rax], al; add [rax+0x1], cl; ret far; 
0x00000000041da4: add [rax], al; add [rax+0x1], cl; ret; 
0x00000000125d86: add [rax], al; add [rax+0x1b9], bh; syscall; 
0x000000000ed023: add [rax], al; add [rax+0x20], bh; cmove rax, rdx; ret; 
0x00000000084274: add [rax], al; add [rax+0x29], cl; ret far; 
0x000000000778e9: add [rax], al; add [rax+0x29], cl; ret; 
0x00000000056760: add [rax], al; add [rax+0x2], bh; ret; 
0x00000000136880: add [rax], al; add [rax+0x31], dl; shr al, 0xb5; lahf; call far fword ptr [rax+0x4c]; 
0x00000000095cda: add [rax], al; add [rax+0x39], cl; mov edi, 0x628; cmove eax, edx; ret; 
0x000000000d4df1: add [rax], al; add [rax+0x39], cl; ret far; 
0x0000000002f456: add [rax], al; add [rax+0x39], cl; ret; 
0x000000000961f5: add [rax], al; add [rax+0x3], bh; ret; 
0x0000000013eb28: add [rax], al; add [rax+0x3], cl; or eax, 0xda2de; call rbp; 
0x000000001a672c: add [rax], al; add [rax+0x3bf4478b], dl; hlt; jne 0x00000000001a6850; ret; 
0x000000000d3c41: add [rax], al; add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret; 
0x00000000119aaf: add [rax], al; add [rax+0x48], bh; syscall; 
0x0000000010aac3: add [rax], al; add [rax+0x48], dl; mov eax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x0000000008335d: add [rax], al; add [rax+0x63], cl; adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x0000000004cc78: add [rax], al; add [rax+0x63], cl; ret far; 
0x00000000049e34: add [rax], al; add [rax+0x63], cl; ret far; 
0x0000000015f236: add [rax], al; add [rax+0x63], cl; sbb [r11+0xe7603f8], r8b; mov eax, 0x2; ret; 
0x000000001b0a4c: add [rax], al; add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x0000000004187a: add [rax], al; add [rax+0x7110ff3], al; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000000c12ad: add [rax], al; add [rax+0x78d4837], cl; ret; 
0x00000000042786: add [rax], al; add [rax+0x7f], bh; syscall; 
0x000000000431ae: add [rax], al; add [rax+0x80], bh; syscall; 
0x000000000427d2: add [rax], al; add [rax+0x82], bh; syscall; 
0x00000000126335: add [rax], al; add [rax+0x95], bh; syscall; 
0x000000000a4bbe: add [rax], al; add [rax+0x9], cl; ret; 
0x0000000009af3d: add [rax], al; add [rax+0xb], bh; ret; 
0x000000000912d1: add [rax], al; add [rax+0xca], bh; syscall; 
0x00000000091332: add [rax], al; add [rax+0xca], bh; xor sil, 0x80; syscall; 
0x0000000009367a: add [rax], al; add [rax+0xca], bh; xor sil, 0x81; syscall; 
0x00000000095db2: add [rax], al; add [rax+0xcc], bh; syscall; 
0x000000000425e9: add [rax], al; add [rax+0xd], bh; syscall; 
0x000000000e56ed: add [rax], al; add [rax+0xe4], bh; syscall; 
0x000000000e58b5: add [rax], al; add [rax+0xe6], bh; syscall; 
0x00000000094989: add [rax], al; add [rax+0xe], bh; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a0bb3: add [rax], al; add [rax+0xe], bh; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x00000000053a07: add [rax], al; add [rax+0xe], bh; syscall; 
0x00000000091210: add [rax], al; add [rax+0xf], cl; mov [0x73d8d48501772d1], eax; ret far; 
0x0000000004759d: add [rax], al; add [rax+0xf], cl; mov esi, 0x83480143; ret; 
0x0000000011bf8a: add [rax], al; add [rax+0xf], cl; ret; 
0x000000000d8133: add [rax], al; add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret; 
0x00000000045d92: add [rax], al; add [rax+rcx*2-0x77], ah; adc ecx, [rax-0x75]; jge short 0x0000000000045da5; call rax; 
0x000000001724bf: add [rax], al; add [rax-0x1], bh; mov qword ptr [rdx], 0x0; ret; 
0x000000000407eb: add [rax], al; add [rax-0x1], bh; pop rbp; ret; 
0x00000000142cbd: add [rax], al; add [rax-0x1], bh; pop rbx; ret; 
0x00000000042f8e: add [rax], al; add [rax-0x1], bh; ret; 
0x0000000002a53b: add [rax], al; add [rax-0x1], bh; ret; 
0x00000000029dac: add [rax], al; add [rax-0x2f7600cf], dl; syscall; 
0x000000000d83fd: add [rax], al; add [rax-0x39], cl; rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x000000000d843d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000000d83ed: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x000000000d842d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x00000000143590: add [rax], al; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000014a63d: add [rax], al; add [rax-0x3f], cl; out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000029cc8: add [rax], al; add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x1f1d52], eax; ret; 
0x000000001258ca: add [rax], al; add [rax-0x3f], cl; ret; 
0x00000000119e1a: add [rax], al; add [rax-0x3fcef877], al; ret; 
0x0000000011462c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x102; syscall; 
0x0000000011627c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x107; syscall; 
0x000000001161bc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x10a; syscall; 
0x00000000126fbc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x110; syscall; 
0x0000000012701c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x11b; syscall; 
0x00000000126cec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x123; syscall; 
0x000000001151ec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x124; syscall; 
0x00000000126e0c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x126; syscall; 
0x0000000012704c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x12c; syscall; 
0x000000001270dc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x13f; syscall; 
0x0000000012710c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x14a; syscall; 
0x0000000012713c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x14b; syscall; 
0x00000000108c9c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x18; syscall; 
0x0000000011ed4c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x1b; syscall; 
0x000000001151bc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x21; syscall; 
0x00000000127cdc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x29; syscall; 
0x0000000012775c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x33; syscall; 
0x0000000011d12c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x4c; syscall; 
0x0000000011534c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x51; syscall; 
0x000000001162ac: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x54; syscall; 
0x000000001161ec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x59; syscall; 
0x0000000011442c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5b; syscall; 
0x00000000115c3c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5d; syscall; 
0x00000000115c6c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5e; syscall; 
0x000000000ea39c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x64; syscall; 
0x00000000126e6c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x67; syscall; 
0x000000000ec36c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x6d; syscall; 
0x000000000ec39c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x6f; syscall; 
0x000000000ec3fc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x70; syscall; 
0x000000000ec42c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x76; syscall; 
0x000000000ec45c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x78; syscall; 
0x00000000125c6c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x7b; syscall; 
0x00000000126c2c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x7e; syscall; 
0x00000000126fec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x86; syscall; 
0x00000000108c0c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x8f; syscall; 
0x00000000108c3c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x00000000108c6c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x00000000108ccc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000108cfc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x00000000108d2c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x94; syscall; 
0x0000000011eddc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x96; syscall; 
0x0000000011ee0c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x97; syscall; 
0x0000000011ee3c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x98; syscall; 
0x00000000126bbc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x9a; syscall; 
0x00000000126efc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x9b; syscall; 
0x0000000011b9ec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa1; syscall; 
0x0000000011becc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa7; syscall; 
0x0000000011befc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa8; syscall; 
0x0000000011ec4c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x00000000125b2c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xac; syscall; 
0x00000000126c5c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xae; syscall; 
0x00000000126c8c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xb0; syscall; 
0x0000000012716c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xba; syscall; 
0x000000001222fc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xc6; syscall; 
0x000000001221dc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xc7; syscall; 
0x00000000126cbc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xd5; syscall; 
0x00000000126bec: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xe4; syscall; 
0x00000000126ddc: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xfd; syscall; 
0x00000000126e3c: add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xff; syscall; 
0x00000000140fec: add [rax], al; add [rax-0x5e1f00d], dl; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x0000000004277c: add [rax], al; add [rax-0x5e1f00d], dl; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000115c9c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x104; syscall; 
0x0000000011615c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x109; syscall; 
0x0000000011621c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000012707c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000113c2c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000127d0c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000012778c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126e9c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d7c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f2c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000012238c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbc; syscall; 
0x0000000012232c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbd; syscall; 
0x0000000012220c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000012229c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xc0; syscall; 
0x0000000011ed7c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000126d1c: add [rax], al; add [rax-0x5e1f00d], dl; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000002a24c: add [rax], al; add [rax-0x5e1f00d], dl; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x00000000041f7c: add [rax], al; add [rax-0x5e1f00d], dl; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000041a4c: add [rax], al; add [rax-0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x0000000009c0cc: add [rax], al; add [rax-0x5e1f00d], dl; xor eax, eax; ret; 
0x0000000011521c: add [rax], al; add [rax-0x5e1f00d], dl; xor esi, esi; mov eax, 0x125; syscall; 
0x0000000015f24d: add [rax], al; add [rax-0x73], cl; adc eax, 0xb9949; jmp qword ptr [rdx+rax*8]; 
0x0000000003888d: add [rax], al; add [rax-0x73], cl; add eax, 0x19fbd8; ret; 
0x000000000d817d: add [rax], al; add [rax-0x73], cl; clc; ret; 
0x000000000d818d: add [rax], al; add [rax-0x73], cl; cld; ret; 
0x000000000d816d: add [rax], al; add [rax-0x73], cl; hlt; ret; 
0x000000000919ec: add [rax], al; add [rax-0x73], cl; js short 0x0000000000091a13; mov eax, 0xca; syscall; 
0x000000001758f3: add [rax], al; add [rax-0x73], cl; js short 0x0000000000175916; mov eax, 0xca; syscall; 
0x00000000175c23: add [rax], al; add [rax-0x73], cl; js short 0x0000000000175c46; mov eax, 0xca; syscall; 
0x00000000094926: add [rax], al; add [rax-0x73], cl; mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x00000000094af7: add [rax], al; add [rax-0x73], cl; mov eax, 0x9a0; mov eax, 0x14e; syscall; 
0x00000000175327: add [rax], al; add [rax-0x73], cl; or eax, 0xfffffcbf; call qword ptr [rbx+0x358]; 
0x000000000a0bb8: add [rax], al; add [rax-0x73], cl; xor eax, 0x13213e; sub rsp, 0x8; syscall; 
0x00000000045ea7: add [rax], al; add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret; 
0x000000000c52fd: add [rax], al; add [rax-0x75], cl; add eax, 0x153bc1; mov rax, [rax+0x1f0]; ret; 
0x000000000a761d: add [rax], al; add [rax-0x75], cl; add eax, 0x1717b9; call qword ptr [rax]; 
0x00000000039bed: add [rax], al; add [rax-0x75], cl; add eax, 0x1df309; mov [rax], rdx; ret; 
0x00000000168c1d: add [rax], al; add [rax-0x75], cl; add eax, 0xb01b1; pop rbx; ret; 
0x00000000168b1d: add [rax], al; add [rax-0x75], cl; add eax, 0xb0309; pop rbx; ret; 
0x00000000168b9d: add [rax], al; add [rax-0x75], cl; add eax, 0xb0421; pop rbx; ret; 
0x00000000085de4: add [rax], al; add [rax-0x75], cl; and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x00000000174c76: add [rax], al; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x00000000174c19: add [rax], al; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rcx; 
0x00000000164b75: add [rax], al; add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000153a2a: add [rax], al; add [rax-0x75], cl; je short 0x0000000000153a55; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000162ef7: add [rax], al; add [rax-0x75], cl; je short 0x0000000000162f22; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x0000000009029d: add [rax], al; add [rax-0x75], cl; jge short 0x00000000000902b4; call qword ptr [r12+0x360]; 
0x000000000a798d: add [rax], al; add [rax-0x75], cl; jnp short 0x00000000000a79dc; call rax; 
0x000000001134ed: add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000016957d: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28]; 
0x0000000007c7a5: add [rax], al; add [rax-0x75], cl; pop rsp; and al, 0x58; jmp rsi; 
0x00000000076ce5: add [rax], al; add [rax-0x75], cl; pop rsp; and al, 0x70; jmp rsi; 
0x0000000012addd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x1000; ret; 
0x0000000012ad5d: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x100; ret; 
0x0000000012a95d: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x1; ret; 
0x0000000012acdd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x2000; ret; 
0x0000000012aadd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x200; ret; 
0x0000000012a9dd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x2; ret; 
0x0000000012abdd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x4000; ret; 
0x0000000012a8dd: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x400; ret; 
0x0000000012ac5d: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x4; ret; 
0x0000000012ab5d: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x8000; ret; 
0x0000000012a85d: add [rax], al; add [rax-0x75], cl; push 0x5004b70f; and eax, 0x8; ret; 
0x0000000017c9ed: add [rax], al; add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000a0f9f: add [rax], al; add [rax-0x77], cl; add eax, 0x1783c7; ret; 
0x000000000a0f7f: add [rax], al; add [rax-0x77], cl; add eax, 0x1783df; ret; 
0x000000000a0f5f: add [rax], al; add [rax-0x77], cl; add eax, 0x1783f7; ret; 
0x00000000164d68: add [rax], al; add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x000000000c20dd: add [rax], al; add [rax-0x77], cl; clc; ret; 
0x000000001a084d: add [rax], al; add [rax-0x77], cl; clc; vzeroupper; ret; 
0x0000000009e5de: add [rax], al; add [rax-0x77], cl; cmp eax, 0x1815e0; mov [rdi+0x18], rax; ret; 
0x000000000893da: add [rax], al; add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2]; mov eax, r9d; syscall; 
0x0000000006500d: add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; ret far; 
0x000000000f9a76: add [rax], al; add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x00000000111324: add [rax], al; add [rax-0x77], cl; fucomip st, st(0); jo short 0x000000000011131f; call qword ptr [rax+0x1b8]; 
0x00000000088831: add [rax], al; add [rax-0x77], cl; fucomip st, st(0); ret; 
0x0000000007ebe4: add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x00000000169605: add [rax], al; add [rax-0x77], cl; out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x0000000016368f: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015eef7: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30]; 
0x0000000008b809: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x0000000007f099: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000015ded8: add [rax], al; add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000164467: add [rax], al; add [rax-0x77], cl; out dx, eax; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000009904a: add [rax], al; add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x00000000099eed: add [rax], al; add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x000000000d9803: add [rax], al; add [rax-0x77], cl; push rsp; and al, 0x38; call r12; 
0x00000000043745: add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000004fa89: add [rax], al; add [rax-0x77], cl; ret; 
0x0000000005a6aa: add [rax], al; add [rax-0x77], cl; ret; 
0x0000000015d5f1: add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x000000001ba8ff: add [rax], al; add [rax-0x7ab70000], al; ret; 
0x000000000788d0: add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x00000000113817: add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000007f8a5: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rbx+rdx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000007f7c5: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000415c5: add [rax], al; add [rax-0x7d], cl; clc; ret far; 
0x0000000004784a: add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000051abd: add [rax], al; add [rax-0x7d], cl; rol byte ptr [rcx], 0xc6; jmp qword ptr [rax]; 
0x00000000079a5d: add [rax], al; add [rax-0x8eb43], al; jmp qword ptr [rax]; 
0x0000000011840c: add [rax], al; add [rax-0xf00a418], dl; jmp qword ptr [rsi-0x7d]; 
0x000000000620bb: add [rax], al; add [rax], al; add [rax+0x10], bh; ret; 
0x000000001a4a0a: add [rax], al; add [rax], al; add [rax+0x1478d48], dl; ret; 
0x0000000009297b: add [rax], al; add [rax], al; add [rax+0x16], bh; ret; 
0x000000000c20ea: add [rax], al; add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x000000000a795b: add [rax], al; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000d4def: add [rax], al; add [rax], al; add [rax+0x39], cl; ret far; 
0x000000000dd07b: add [rax], al; add [rax], al; add [rax+0x39], cl; ret; 
0x000000001b0a4a: add [rax], al; add [rax], al; add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x000000000c12ab: add [rax], al; add [rax], al; add [rax+0x78d4837], cl; ret; 
0x0000000009af3b: add [rax], al; add [rax], al; add [rax+0xb], bh; ret; 
0x000000000e56eb: add [rax], al; add [rax], al; add [rax+0xe4], bh; syscall; 
0x0000000004759b: add [rax], al; add [rax], al; add [rax+0xf], cl; mov esi, 0x83480143; ret; 
0x00000000142cbb: add [rax], al; add [rax], al; add [rax-0x1], bh; pop rbx; ret; 
0x0000000004316b: add [rax], al; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000011462a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x102; syscall; 
0x0000000011627a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x107; syscall; 
0x000000001161ba: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x10a; syscall; 
0x00000000126fba: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x110; syscall; 
0x0000000012701a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x11b; syscall; 
0x00000000126cea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x123; syscall; 
0x000000001151ea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x124; syscall; 
0x00000000126e0a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x126; syscall; 
0x0000000012704a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x12c; syscall; 
0x000000001270da: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x13f; syscall; 
0x0000000012710a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x14a; syscall; 
0x0000000012713a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x14b; syscall; 
0x00000000108c9a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x18; syscall; 
0x0000000011ed4a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x1b; syscall; 
0x000000001151ba: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x21; syscall; 
0x00000000127cda: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x29; syscall; 
0x0000000012775a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x33; syscall; 
0x0000000011d12a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x4c; syscall; 
0x0000000011534a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x51; syscall; 
0x000000001162aa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x54; syscall; 
0x000000001161ea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x59; syscall; 
0x0000000011442a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5b; syscall; 
0x00000000115c3a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5d; syscall; 
0x00000000115c6a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x5e; syscall; 
0x000000000ea39a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x64; syscall; 
0x00000000126e6a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x67; syscall; 
0x000000000ec36a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x6d; syscall; 
0x000000000ec39a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x6f; syscall; 
0x000000000ec3fa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x70; syscall; 
0x000000000ec42a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x76; syscall; 
0x000000000ec45a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x78; syscall; 
0x00000000125c6a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x7b; syscall; 
0x00000000126c2a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x7e; syscall; 
0x00000000126fea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x86; syscall; 
0x00000000108c0a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x8f; syscall; 
0x00000000108c3a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x00000000108c6a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x00000000108cca: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000108cfa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x00000000108d2a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x94; syscall; 
0x0000000011edda: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x96; syscall; 
0x0000000011ee0a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x97; syscall; 
0x0000000011ee3a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x98; syscall; 
0x00000000126bba: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x9a; syscall; 
0x00000000126efa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0x9b; syscall; 
0x0000000011b9ea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa1; syscall; 
0x0000000011beca: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa7; syscall; 
0x0000000011befa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa8; syscall; 
0x0000000011ec4a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x00000000125b2a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xac; syscall; 
0x00000000126c5a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xae; syscall; 
0x00000000126c8a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xb0; syscall; 
0x0000000012716a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xba; syscall; 
0x000000001222fa: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xc6; syscall; 
0x000000001221da: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xc7; syscall; 
0x00000000126cba: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xd5; syscall; 
0x00000000126bea: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xe4; syscall; 
0x00000000126dda: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xfd; syscall; 
0x00000000126e3a: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; mov eax, 0xff; syscall; 
0x0000000009c0ca: add [rax], al; add [rax], al; add [rax-0x5e1f00d], dl; xor eax, eax; ret; 
0x0000000015f24b: add [rax], al; add [rax], al; add [rax-0x73], cl; adc eax, 0xb9949; jmp qword ptr [rdx+rax*8]; 
0x0000000003888b: add [rax], al; add [rax], al; add [rax-0x73], cl; add eax, 0x19fbd8; ret; 
0x000000000d817b: add [rax], al; add [rax], al; add [rax-0x73], cl; clc; ret; 
0x000000000d818b: add [rax], al; add [rax], al; add [rax-0x73], cl; cld; ret; 
0x000000000d816b: add [rax], al; add [rax], al; add [rax-0x73], cl; hlt; ret; 
0x000000000a761b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x1717b9; call qword ptr [rax]; 
0x0000000009029b: add [rax], al; add [rax], al; add [rax-0x75], cl; jge short 0x00000000000902b4; call qword ptr [r12+0x360]; 
0x000000000c20db: add [rax], al; add [rax], al; add [rax-0x77], cl; clc; ret; 
0x0000000006b1fb: add [rax], al; add [rax], al; add [rax-0x77], cl; ret; 
0x000000001ba8fd: add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret; 
0x0000000009178b: add [rax], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000051abb: add [rax], al; add [rax], al; add [rax-0x7d], cl; rol byte ptr [rcx], 0xc6; jmp qword ptr [rax]; 
0x00000000079a5b: add [rax], al; add [rax], al; add [rax-0x8eb43], al; jmp qword ptr [rax]; 
0x000000000d4ded: add [rax], al; add [rax], al; add [rax], al; add [rax+0x39], cl; ret far; 
0x00000000062379: add [rax], al; add [rax], al; add [rax], al; add al, ch; ret; 
0x0000000015704b: add [rax], al; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001576cd: add [rax], al; add [rax], al; add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x0000000015f650: add [rax], al; add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000156f30: add [rax], al; add [rax], al; add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x000000000913e5: add [rax], al; add [rax], al; add [rax], al; ret; 
0x0000000002e76b: add [rax], al; add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x000000001b6edb: add [rax], al; add [rax], al; add [rbp-0x76b23fb6], cl; ret far; 
0x000000001410ab: add [rax], al; add [rax], al; add [rbx+0x3b83b], cl; add [rax], al; syscall; 
0x000000000bfcab: add [rax], al; add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x00000000192dcb: add [rax], al; add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x00000000163b23: add [rax], al; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000044bbb: add [rax], al; add [rax], al; add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x00000000149e55: add [rax], al; add [rax], al; add [rbx-0x7cb7efab], cl; ret; 
0x00000000149d23: add [rax], al; add [rax], al; add [rbx-0x7cb7efbb], cl; ret; 
0x000000000c758b: add [rax], al; add [rax], al; add [rbx-0x7cb7fb85], cl; ret; 
0x000000000c579b: add [rax], al; add [rax], al; add [rbx-0x7cb7fb8d], cl; ret; 
0x000000000c451b: add [rax], al; add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000018d6db: add [rax], al; add [rax], al; add [rcx+0x3518911], cl; ret; 
0x000000000b158b: add [rax], al; add [rax], al; add [rcx+0x448d4808], cl; adc bh, bh; ret; 
0x0000000015f651: add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x000000001b88eb: add [rax], al; add [rax], al; add [rcx-0x77], cl; ror dword ptr [rcx+0x9], cl; ret; 
0x000000000cdefb: add [rax], al; add [rax], al; add [rcx-0x7d], cl; ret; 
0x000000000614ab: add [rax], al; add [rax], al; add [rcx-0x80], al; jl short 0x00000000000614c9; jmp far fword ptr [rdi]; 
0x0000000008f56b: add [rax], al; add [rax], al; add [rdi+0x18c4da05], al; add [rbx+0x57f01f8], al; ret; 
0x00000000080a4b: add [rax], al; add [rax], al; add [rdi+0x19afba05], al; add [rbx+0x57f01f8], al; ret; 
0x00000000156f31: add [rax], al; add [rax], al; add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x000000001af90b: add [rax], al; add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x0000000012962b: add [rax], al; add [rax], al; add [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x0000000015d219: add [rax], al; add [rax], al; add [rsi-0x70], ah; endbr64; ret; 
0x0000000018d689: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x000000000c0c69: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x000000001b3e59: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov rax, rdi; ret; 
0x000000000d6ee9: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000d7e79: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret; 
0x0000000003ae3b: add [rax], al; add [rax], al; add al, ch; ret far; 
0x0000000006237b: add [rax], al; add [rax], al; add al, ch; ret; 
0x000000001bb8bb: add [rax], al; add [rax], al; add bh, bh; adc ecx, [rax-0x7d]; ret; 
0x000000000ab3db: add [rax], al; add [rax], al; add bl, ch; ret far; 
0x000000000c0d3b: add [rax], al; add [rax], al; add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000c0d4b: add [rax], al; add [rax], al; add bl, dh; movq [rdi], mm0; ret; 
0x00000000029cfb: add [rax], al; add [rax], al; add bl, dh; nop edx, edi; ret; 
0x000000000d83bc: add [rax], al; add [rax], al; add rax, 0x3; ret; 
0x0000000013eb27: add [rax], al; add [rax], al; add rcx, [rip+0xda2de]; call rbp; 
0x0000000011c6d0: add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000009277c: add [rax], al; add [rax], al; and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x00000000099e2c: add [rax], al; add [rax], al; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x000000000b4bac: add [rax], al; add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000b4bbc: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b4bcc: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000001af90c: add [rax], al; add [rax], al; bsr eax, eax; add rax, rdi; ret; 
0x000000000b508c: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b509c: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50ac: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x0000000015e273: add [rax], al; add [rax], al; call qword ptr [rax+0x20]; 
0x0000000015d5d8: add [rax], al; add [rax], al; call qword ptr [rax+0x28]; 
0x000000001bb8bc: add [rax], al; add [rax], al; call qword ptr [rbx]; 
0x00000000143677: add [rax], al; add [rax], al; call rax; 
0x0000000009b5bb: add [rax], al; add [rax], al; cmova eax, edx; ret; 
0x000000001281cb: add [rax], al; add [rax], al; cmovb rax, rdx; ret; 
0x0000000011bf89: add [rax], al; add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x000000000abd07: add [rax], al; add [rax], al; cmove rax, rdx; ret; 
0x0000000009e66a: add [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x000000001270ac: add [rax], al; add [rax], al; endbr64; mov eax, 0x134; syscall; 
0x0000000015d22c: add [rax], al; add [rax], al; endbr64; mov eax, 0x1; ret; 
0x000000000eb0ec: add [rax], al; add [rax], al; endbr64; mov eax, 0x3b; syscall; 
0x00000000061f1c: add [rax], al; add [rax], al; endbr64; mov eax, 0x52; syscall; 
0x0000000011624c: add [rax], al; add [rax], al; endbr64; mov eax, 0x57; syscall; 
0x0000000011618c: add [rax], al; add [rax], al; endbr64; mov eax, 0x58; syscall; 
0x00000000126f8c: add [rax], al; add [rax], al; endbr64; mov eax, 0x63; syscall; 
0x0000000011a8ec: add [rax], al; add [rax], al; endbr64; mov eax, 0x8c; syscall; 
0x0000000011edac: add [rax], al; add [rax], al; endbr64; mov eax, 0x95; syscall; 
0x0000000011be9c: add [rax], al; add [rax], al; endbr64; mov eax, 0x99; syscall; 
0x0000000011b9bc: add [rax], al; add [rax], al; endbr64; mov eax, 0xa3; syscall; 
0x00000000126d4c: add [rax], al; add [rax], al; endbr64; mov eax, 0xb1; syscall; 
0x00000000126ecc: add [rax], al; add [rax], al; endbr64; mov eax, 0xb4; syscall; 
0x0000000012226c: add [rax], al; add [rax], al; endbr64; mov eax, 0xc2; syscall; 
0x000000001222cc: add [rax], al; add [rax], al; endbr64; mov eax, 0xc3; syscall; 
0x000000001221ac: add [rax], al; add [rax], al; endbr64; mov eax, 0xc4; syscall; 
0x0000000012235c: add [rax], al; add [rax], al; endbr64; mov eax, 0xc5; syscall; 
0x00000000108dcc: add [rax], al; add [rax], al; endbr64; mov eax, 0xcb; syscall; 
0x00000000126dac: add [rax], al; add [rax], al; endbr64; mov eax, 0xfe; syscall; 
0x0000000008ddcc: add [rax], al; add [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008e81c: add [rax], al; add [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f4dc: add [rax], al; add [rax], al; endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000008f4bc: add [rax], al; add [rax], al; endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x0000000002b96c: add [rax], al; add [rax], al; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000175c9c: add [rax], al; add [rax], al; endbr64; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x0000000009b58c: add [rax], al; add [rax], al; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000008f4ec: add [rax], al; add [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000029cfc: add [rax], al; add [rax], al; endbr64; ret; 
0x000000000945cc: add [rax], al; add [rax], al; endbr64; xor eax, eax; ret; 
0x00000000041188: add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000053b4a: add [rax], al; add [rax], al; jne short 0x0000000000053b53; push r10; ret; 
0x00000000054033: add [rax], al; add [rax], al; jne short 0x000000000005403c; push r10; ret; 
0x000000001283fe: add [rax], al; add [rax], al; jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x000000001a4a1c: add [rax], al; add [rax], al; lea rax, [rdi+0x2]; ret; 
0x000000001a4a2c: add [rax], al; add [rax], al; lea rax, [rdi+0x3]; ret; 
0x000000001a4a3c: add [rax], al; add [rax], al; lea rax, [rdi+0x4]; ret; 
0x000000001a4a4c: add [rax], al; add [rax], al; lea rax, [rdi+0x5]; ret; 
0x000000001a4a5c: add [rax], al; add [rax], al; lea rax, [rdi+0x6]; ret; 
0x000000001a4a6c: add [rax], al; add [rax], al; lea rax, [rdi+0x8]; ret; 
0x000000001a4a7c: add [rax], al; add [rax], al; lea rax, [rdi+0x9]; ret; 
0x000000001a4a8c: add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret; 
0x000000001a4a9c: add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret; 
0x000000001a4aac: add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret; 
0x000000001a4abc: add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret; 
0x000000001a4acc: add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret; 
0x000000000d818c: add [rax], al; add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000d817c: add [rax], al; add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000d816c: add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret; 
0x0000000003888c: add [rax], al; add [rax], al; lea rax, [rip+0x19fbd8]; ret; 
0x00000000175326: add [rax], al; add [rax], al; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x0000000015f24c: add [rax], al; add [rax], al; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x0000000003f344: add [rax], al; add [rax], al; mov [rax+0x4], ebx; pop rbx; ret; 
0x000000000b158c: add [rax], al; add [rax], al; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14ac: add [rax], al; add [rax], al; mov [rax], ecx; ret; 
0x000000000b155c: add [rax], al; add [rax], al; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x0000000018d6dc: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6cc: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d6ac: add [rax], al; add [rax], al; mov [rcx], edx; ret; 
0x0000000018d73c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d74c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x0000000018d71c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x0000000018d75c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000018d70c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x0000000018d72c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d76c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000018d6ec: add [rax], al; add [rax], al; mov [rcx], rdx; ret; 
0x000000001576cf: add [rax], al; add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x000000000c0cbc: add [rax], al; add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000c12ac: add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000bfc6c: add [rax], al; add [rax], al; mov [rdi], dh; ret; 
0x000000001b0a2c: add [rax], al; add [rax], al; mov [rdi], dl; ret; 
0x0000000019f89c: add [rax], al; add [rax], al; mov [rdi], dx; vzeroupper; ret; 
0x000000000c0cac: add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000c0d1c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d2c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000c0cfc: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000c0cec: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000c0d0c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000001b0a6c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x000000000c0ccc: add [rax], al; add [rax], al; mov [rdi], rdx; ret; 
0x0000000009c574: add [rax], al; add [rax], al; mov [rdx+0x8], rax; ret; 
0x0000000009e5dd: add [rax], al; add [rax], al; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x0000000015ee51: add [rax], al; add [rax], al; mov [rsi+0x10], rax; ret; 
0x00000000164d66: add [rax], al; add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x000000000f41ac: add [rax], al; add [rax], al; mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000b1484: add [rax], al; add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x00000000128b94: add [rax], al; add [rax], al; mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x0000000007533a: add [rax], al; add [rax], al; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000157043: add [rax], al; add [rax], al; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x000000000a0bfa: add [rax], al; add [rax], al; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x0000000015ee3c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee2c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee1c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x0000000007c6cc: add [rax], al; add [rax], al; mov dword ptr [rsp+0x28], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000169023: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000007ac49: add [rax], al; add [rax], al; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007ac41: add [rax], al; add [rax], al; mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000075332: add [rax], al; add [rax], al; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000076c04: add [rax], al; add [rax], al; mov dword ptr [rsp+0x50], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076b14: add [rax], al; add [rax], al; mov dword ptr [rsp+0x5c], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000c096c: add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000001426d3: add [rax], al; add [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000620bc: add [rax], al; add [rax], al; mov eax, 0x10; ret; 
0x0000000009297c: add [rax], al; add [rax], al; mov eax, 0x16; ret; 
0x00000000056563: add [rax], al; add [rax], al; mov eax, 0x1; ret; 
0x0000000005675f: add [rax], al; add [rax], al; mov eax, 0x2; ret; 
0x000000000961f4: add [rax], al; add [rax], al; mov eax, 0x3; ret; 
0x00000000126334: add [rax], al; add [rax], al; mov eax, 0x95; syscall; 
0x0000000009af3c: add [rax], al; add [rax], al; mov eax, 0xb; ret; 
0x000000000977ac: add [rax], al; add [rax], al; mov eax, 0xca; syscall; 
0x000000000e56ec: add [rax], al; add [rax], al; mov eax, 0xe4; syscall; 
0x00000000142cbc: add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000004316c: add [rax], al; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000046063: add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret; 
0x000000000eac8c: add [rax], al; add [rax], al; mov eax, edx; syscall; 
0x000000001410ac: add [rax], al; add [rax], al; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x00000000182cac: add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000016669c: add [rax], al; add [rax], al; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x0000000008e6bb: add [rax], al; add [rax], al; mov qword ptr [rax+0x8], 0x0; ret; 
0x0000000015b972: add [rax], al; add [rax], al; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001576c4: add [rax], al; add [rax], al; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x0000000016d548: add [rax], al; add [rax], al; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000011db22: add [rax], al; add [rax], al; mov qword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000008f59b: add [rax], al; add [rax], al; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x000000001290c2: add [rax], al; add [rax], al; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x00000000125a8e: add [rax], al; add [rax], al; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x0000000010b1f0: add [rax], al; add [rax], al; mov r8, rax; add r9, r13; call r15; 
0x000000000891cc: add [rax], al; add [rax], al; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000014337c: add [rax], al; add [rax], al; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x0000000015236c: add [rax], al; add [rax], al; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000d83ec: add [rax], al; add [rax], al; mov rax, 0x2; ret; 
0x000000000d83fc: add [rax], al; add [rax], al; mov rax, 0x3; ret; 
0x000000000d840c: add [rax], al; add [rax], al; mov rax, 0x4; ret; 
0x000000000d841c: add [rax], al; add [rax], al; mov rax, 0x5; ret; 
0x000000000d842c: add [rax], al; add [rax], al; mov rax, 0x6; ret; 
0x000000000d843c: add [rax], al; add [rax], al; mov rax, 0x7; ret; 
0x000000001432ec: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000008fe9c: add [rax], al; add [rax], al; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x0000000008fee4: add [rax], al; add [rax], al; mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x00000000122494: add [rax], al; add [rax], al; mov rax, [rax+0x60]; ret; 
0x0000000016957c: add [rax], al; add [rax], al; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000017510c: add [rax], al; add [rax], al; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x0000000009e07c: add [rax], al; add [rax], al; mov rax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000016c97c: add [rax], al; add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016ca2c: add [rax], al; add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000015fbdc: add [rax], al; add [rax], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000c52fc: add [rax], al; add [rax], al; mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000a761c: add [rax], al; add [rax], al; mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x00000000168c1c: add [rax], al; add [rax], al; mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b1c: add [rax], al; add [rax], al; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168b9c: add [rax], al; add [rax], al; mov rax, [rip+0xb0421]; pop rbx; ret; 
0x0000000009e77c: add [rax], al; add [rax], al; mov rax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000003889c: add [rax], al; add [rax], al; mov rax, [rsi+rax*8+0x80]; ret; 
0x00000000174c75: add [rax], al; add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000164b74: add [rax], al; add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000c20dc: add [rax], al; add [rax], al; mov rax, rdi; ret; 
0x000000001a084c: add [rax], al; add [rax], al; mov rax, rdi; vzeroupper; ret; 
0x0000000007c7a4: add [rax], al; add [rax], al; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076ce4: add [rax], al; add [rax], al; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000076c5c: add [rax], al; add [rax], al; mov rbx, rcx; mov r15d, 0x1; jmp rsi; 
0x0000000015510e: add [rax], al; add [rax], al; mov rcx, r15; call rbp; 
0x0000000009029c: add [rax], al; add [rax], al; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x000000000a798c: add [rax], al; add [rax], al; mov rdi, [rbx+0x48]; call rax; 
0x0000000015f652: add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000a78bc: add [rax], al; add [rax], al; mov rdi, r12; call rax; 
0x0000000016a209: add [rax], al; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000169604: add [rax], al; add [rax], al; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000001675ac: add [rax], al; add [rax], al; mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000182aec: add [rax], al; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000c0d3c: add [rax], al; add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000c0d4c: add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret; 
0x00000000084416: add [rax], al; add [rax], al; movups [rax+0x40], xmm0; pop rbx; ret; 
0x00000000156f32: add [rax], al; add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x00000000133334: add [rax], al; add [rax], al; movups [rbp-0x78], xmm7; call rax; 
0x0000000008d861: add [rax], al; add [rax], al; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x000000001069ea: add [rax], al; add [rax], al; movups [rsi+0x8], xmm0; ret; 
0x0000000016902b: add [rax], al; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000182dfc: add [rax], al; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x00000000182d8c: add [rax], al; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000009122c: add [rax], al; add [rax], al; neg eax; ret; 
0x0000000018d678: add [rax], al; add [rax], al; nop [rax]; mov [rcx], dl; ret; 
0x000000000c0c58: add [rax], al; add [rax], al; nop [rax]; mov [rdi], dl; ret; 
0x00000000042518: add [rax], al; add [rax], al; nop [rax]; mov rax, 0xf; syscall; 
0x000000000bf5c8: add [rax], al; add [rax], al; nop [rax]; mov rax, rdi; ret; 
0x000000000c0948: add [rax], al; add [rax], al; nop [rax]; ret; 
0x000000000b5129: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret; 
0x00000000199fb8: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret; 
0x000000001a4a0b: add [rax], al; add [rax], al; nop; lea rax, [rdi+0x1]; ret; 
0x000000001a49fb: add [rax], al; add [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000c0c7b: add [rax], al; add [rax], al; nop; mov [rdi-0x1], edx; ret; 
0x000000000c0c8b: add [rax], al; add [rax], al; nop; mov [rdi], edx; ret; 
0x000000000d83db: add [rax], al; add [rax], al; nop; mov rax, 0x1; ret; 
0x00000000099706: add [rax], al; add [rax], al; nop; xor eax, eax; ret; 
0x000000000ab50b: add [rax], al; add [rax], al; pop r12; ret; 
0x000000000d2bb4: add [rax], al; add [rax], al; pop rbp; ret; 
0x00000000035e05: add [rax], al; add [rax], al; pop rbx; ret; 
0x0000000002a260: add [rax], al; add [rax], al; ret; 
0x0000000014358f: add [rax], al; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000014a63c: add [rax], al; add [rax], al; shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000092b26: add [rax], al; add [rax], al; syscall; 
0x000000001b525c: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b524c: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f0c: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3efc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3edc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b526c: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b57ac: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b59dc: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b178c: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b175c: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001afb6c: add [rax], al; add [rax], al; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001b0a7c: add [rax], al; add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000019ed2e: add [rax], al; add [rax], al; vzeroupper; ret; 
0x0000000015d21a: add [rax], al; add [rax], al; xchg ax, ax; endbr64; ret; 
0x0000000018d68a: add [rax], al; add [rax], al; xchg ax, ax; mov [rcx], dx; ret; 
0x000000000c0c6a: add [rax], al; add [rax], al; xchg ax, ax; mov [rdi], dx; ret; 
0x000000001b3e5a: add [rax], al; add [rax], al; xchg ax, ax; mov rax, rdi; ret; 
0x000000000d6eea: add [rax], al; add [rax], al; xchg ax, ax; xor eax, eax; ret; 
0x000000000d7e7a: add [rax], al; add [rax], al; xchg ax, ax; xor rax, rax; ret; 
0x000000000a2654: add [rax], al; add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x000000000a80a6: add [rax], al; add [rax], al; xor eax, eax; mov [r8], rsi; ret; 
0x0000000009324c: add [rax], al; add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000404f4: add [rax], al; add [rax], al; xor eax, eax; ret; 
0x0000000019965c: add [rax], al; add [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000094adc: add [rax], al; add [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000d819c: add [rax], al; add [rax], al; xor rax, rax; ret; 
0x000000000a8b95: add [rax], al; add [rax], dl; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a75: add [rax], al; add [rax], dl; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b5: add [rax], al; add [rax], dl; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x00000000169414: add [rax], al; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x00000000091c8e: add [rax], al; add [rax], eax; add [rax], al; lea rdi, [r8+0x35c]; syscall; 
0x00000000169409: add [rax], al; add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x000000001695eb: add [rax], al; add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x00000000128232: add [rax], al; add [rbp+0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x00000000134cf0: add [rax], al; add [rbp+0x10], dh; add rsp, 0xd8; ret; 
0x000000001739c3: add [rax], al; add [rbp+0x11], dh; add rsp, 0x18; ret; 
0x00000000089fe3: add [rax], al; add [rbp+0x11], dh; add rsp, 0x48; ret; 
0x0000000011c071: add [rax], al; add [rbp+0x11], dh; add rsp, 0x58; ret; 
0x000000000d8ec0: add [rax], al; add [rbp+0x14], dh; add rsp, 0x28; ret; 
0x00000000143238: add [rax], al; add [rbp+0x17], dh; add rsp, 0x20; pop rbp; ret; 
0x00000000049cfb: add [rax], al; add [rbp+0x1], al; dec dword ptr [rax-0x7d]; ret; 
0x00000000121c36: add [rax], al; add [rbp+0x1a], dh; add rsp, 0x1018; ret; 
0x00000000147f86: add [rax], al; add [rbp+0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000126544: add [rax], al; add [rbp+0x1a], dh; add rsp, 0x58; ret; 
0x0000000005a250: add [rax], al; add [rbp+0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x00000000167340: add [rax], al; add [rbp+0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000014a363: add [rax], al; add [rbp+0x1c], dh; add rsp, 0x118; ret; 
0x000000001283ff: add [rax], al; add [rbp+0x1c], dh; mov eax, 0x47; syscall; 
0x000000000d2c10: add [rax], al; add [rbp+0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000a0c9f: add [rax], al; add [rbp+0x1f], dh; add rsp, 0xe0; pop rbp; ret; 
0x00000000141e9d: add [rax], al; add [rbp+0x20850fdb], al; add [rax], eax; add [rax+0x63], cl; ret; 
0x0000000009dadf: add [rax], al; add [rbp+0x23], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000011ab14: add [rax], al; add [rbp+0x23], dh; mov eax, r8d; add rsp, 0x58; ret; 
0x00000000046285: add [rax], al; add [rbp+0x24], dh; add rsp, 0x18; ret; 
0x000000001698ee: add [rax], al; add [rbp+0x25], dh; add rsp, 0x28; ret; 
0x0000000011a179: add [rax], al; add [rbp+0x26], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000013d12c: add [rax], al; add [rbp+0x28], dh; add rsp, 0x38; ret; 
0x000000000db38a: add [rax], al; add [rbp+0x29], al; ret; 
0x000000000a8c78: add [rax], al; add [rbp+0x29], cl; ret far; 
0x00000000090482: add [rax], al; add [rbp+0x2a], dh; add rsp, 0x28; ret; 
0x00000000090625: add [rax], al; add [rbp+0x2c], dh; add rsp, 0x38; ret; 
0x00000000042d03: add [rax], al; add [rbp+0x2d], dh; add rsp, 0x40; pop rbx; ret; 
0x0000000016014f: add [rax], al; add [rbp+0x2e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000017213f: add [rax], al; add [rbp+0x30], dh; add rsp, 0x18; ret; 
0x00000000090760: add [rax], al; add [rbp+0x30], dh; add rsp, 0x38; ret; 
0x000000000d59b1: add [rax], al; add [rbp+0x31], al; imul cl; ret far; 
0x0000000009a6fe: add [rax], al; add [rbp+0x31], al; rcl byte ptr [rax-0x3f76bba5], 0x5d; pop r12; ret; 
0x0000000002e76d: add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x00000000172356: add [rax], al; add [rbp+0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x000000001601ed: add [rax], al; add [rbp+0x33], dh; add rsp, 0x10; pop rbx; ret; 
0x000000001750e3: add [rax], al; add [rbp+0x34], dh; add rsp, 0x50; pop rbx; ret; 
0x000000001751da: add [rax], al; add [rbp+0x35], dh; add rsp, 0x60; pop rbx; ret; 
0x000000000da0ad: add [rax], al; add [rbp+0x39], al; ret; 
0x00000000053b4b: add [rax], al; add [rbp+0x3], dh; push r10; ret; 
0x0000000011c1bc: add [rax], al; add [rbp+0x3c], dh; add rsp, 0x68; ret; 
0x000000000d9c5b: add [rax], al; add [rbp+0x3e], dh; add rsp, 0x28; ret; 
0x0000000016b4be: add [rax], al; add [rbp+0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000015fbce: add [rax], al; add [rbp+0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000009cbe0: add [rax], al; add [rbp+0x40], dh; add rsp, 0x120; pop rbp; ret; 
0x00000000125cac: add [rax], al; add [rbp+0x411d75c0], al; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x00000000125d7c: add [rax], al; add [rbp+0x411d75c0], al; mov ecx, 0x8; mov eax, 0x1b9; syscall; 
0x000000000431a4: add [rax], al; add [rbp+0x414575c0], al; mov edx, 0x8; mov eax, 0x80; syscall; 
0x00000000112ca3: add [rax], al; add [rbp+0x41], bl; pop rsi; ret; 
0x0000000002a1f3: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x0000000005f97b: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x00000000042a47: add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x0000000016b9ee: add [rax], al; add [rbp+0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca1e: add [rax], al; add [rbp+0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000ec17c: add [rax], al; add [rbp+0x42], dh; add rsp, 0x38; ret; 
0x0000000009dcfd: add [rax], al; add [rbp+0x43], dh; add rsp, 0x120; pop rbp; ret; 
0x0000000011ac9c: add [rax], al; add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0x127; syscall; 
0x0000000011ad5c: add [rax], al; add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000ea4fc: add [rax], al; add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0xf7; syscall; 
0x000000000426ba: add [rax], al; add [rbp+0x45], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000016bc2e: add [rax], al; add [rbp+0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000126b32: add [rax], al; add [rbp+0x46], dh; add rsp, 0x58; ret; 
0x00000000119a98: add [rax], al; add [rbp+0x46], dh; add rsp, 0x68; ret; 
0x00000000119b27: add [rax], al; add [rbp+0x47], dh; add rsp, 0x18; ret; 
0x0000000005a499: add [rax], al; add [rbp+0x47], dh; add rsp, 0x38; ret; 
0x00000000119bdf: add [rax], al; add [rbp+0x47], dh; add rsp, 0x58; ret; 
0x00000000115bbd: add [rax], al; add [rbp+0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x00000000119c7d: add [rax], al; add [rbp+0x49], dh; add rsp, 0x58; ret; 
0x000000000e774c: add [rax], al; add [rbp+0x4a], dh; add rsp, 0x38; ret; 
0x0000000014a5ac: add [rax], al; add [rbp+0x4b], dh; add rsp, 0x18; ret; 
0x00000000167dcd: add [rax], al; add [rbp+0x4f], dh; add rsp, 0x20; pop r12; ret; 
0x0000000017544c: add [rax], al; add [rbp+0x51], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000ec4cc: add [rax], al; add [rbp+0x52], dh; add rsp, 0x38; ret; 
0x00000000175375: add [rax], al; add [rbp+0x52], dh; add rsp, 0x70; pop rbx; ret; 
0x000000001284e8: add [rax], al; add [rbp+0x58], dh; add rsp, 0x58; ret; 
0x000000000420f2: add [rax], al; add [rbp+0x5], dh; add rsp, 0x18; ret; 
0x00000000045f20: add [rax], al; add [rbp+0x5], dh; add rsp, 0x28; ret; 
0x00000000113e12: add [rax], al; add [rbp+0x5], dh; add rsp, 0x38; ret; 
0x0000000016b3c3: add [rax], al; add [rbp+0x5], dh; add rsp, 0x48; ret; 
0x00000000169042: add [rax], al; add [rbp+0x5], dh; add rsp, 0x78; ret; 
0x000000001197c9: add [rax], al; add [rbp+0x5d0875c0], al; ret; 
0x00000000050ceb: add [rax], al; add [rbp+0x5e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000016b587: add [rax], al; add [rbp+0x5f], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000011b243: add [rax], al; add [rbp+0x60], dh; add rsp, 0x38; ret; 
0x000000000a02e0: add [rax], al; add [rbp+0x60], dh; add rsp, 0x58; ret; 
0x00000000090d71: add [rax], al; add [rbp+0x6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000016d3d7: add [rax], al; add [rbp+0x6], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000009064b: add [rax], al; add [rbp+0x6], dh; add rsp, 0x38; jmp rax; 
0x000000000d8f3a: add [rax], al; add [rbp+0x6], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000133d91: add [rax], al; add [rbp+0x6], dh; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000108ef9: add [rax], al; add [rbp+0x70], dh; add rsp, 0x38; ret; 
0x0000000009bcba: add [rax], al; add [rbp+0x78], dh; add rsp, 0x98; ret; 
0x00000000119721: add [rax], al; add [rbp+0x79], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000562e7: add [rax], al; add [rbp+0x79], dh; leave; ret; 
0x00000000042405: add [rax], al; add [rbp+0x8], dh; add rsp, 0x148; ret; 
0x00000000149c77: add [rax], al; add [rbp+0x8], dh; add rsp, 0x218; ret; 
0x00000000121358: add [rax], al; add [rbp+0x8], dh; add rsp, 0x418; ret; 
0x00000000051504: add [rax], al; add [rbp+0x8], dh; add rsp, 0x428; ret; 
0x00000000042acf: add [rax], al; add [rbp+0x8], dh; add rsp, 0x98; ret; 
0x000000000434a2: add [rax], al; add [rbp+0x8], dh; add rsp, 0xa8; ret; 
0x00000000051892: add [rax], al; add [rbp+0x8], dh; add rsp, 0xd8; ret; 
0x0000000016d308: add [rax], al; add [rbp+0x8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x00000000116110: add [rax], al; add [rbp+0x8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000014e57f: add [rax], al; add [rbp+0x8], dh; movzx eax, ax; add rsp, 0x28; ret; 
0x00000000061360: add [rax], al; add [rbp+0x9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000016d294: add [rax], al; add [rbp+0x9], dh; add rsp, 0x90; pop rbx; ret; 
0x000000000e6110: add [rax], al; add [rbp+0x9], dh; add rsp, 0xe0; pop rbx; ret; 
0x00000000136245: add [rax], al; add [rbp+0xb], dh; add rsp, 0x28; ret; 
0x0000000011a1ea: add [rax], al; add [rbp+0xc], dh; add rsp, 0x18; ret; 
0x00000000134bec: add [rax], al; add [rbp+0xd], dh; add rsp, 0xd8; ret; 
0x00000000061e94: add [rax], al; add [rbp+0xe], dh; add rsp, 0x18; ret; 
0x00000000042941: add [rax], al; add [rbp+0xf], dh; add rsp, 0x118; ret; 
0x00000000160ce3: add [rax], al; add [rbp+0xf], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000061478: add [rax], al; add [rbp+rcx*4+0x35], cl; ret; 
0x00000000049302: add [rax], al; add [rbp+rcx*4+0x6a], al; inc byte ptr [rbx-0x7bf0fe06]; ret; 
0x00000000145ee6: add [rax], al; add [rbp+rcx*4-0x6c], cl; ret; 
0x000000000903f7: add [rax], al; add [rbp+rcx+0x48], dh; mov eax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x0000000011955d: add [rax], al; add [rbp+rdi+0x3d], dh; add [rax+0xe740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000029cf2: add [rax], al; add [rbp-0x3c], dh; ret; 
0x00000000091ef6: add [rax], al; add [rbp-0x3dbaf040], al; ret; 
0x00000000121c90: add [rax], al; add [rbp-0x3dbbf040], al; add rsp, 0x8; ret; 
0x00000000114858: add [rax], al; add [rbp-0x479e8a40], al; add [rcx], eax; add [rax], al; syscall; 
0x000000001128ec: add [rax], al; add [rbp-0x47ea8a40], al; adc [rax], eax; add [rax], al; syscall; 
0x0000000012603c: add [rax], al; add [rbp-0x47ea8a40], al; adc al, 0x1; add [rax], al; syscall; 
0x0000000011299c: add [rax], al; add [rbp-0x47ea8a40], al; adc al, [rax]; add [rax], al; syscall; 
0x0000000012619c: add [rax], al; add [rbp-0x47ea8a40], al; adc eax, [rcx]; add [rax], al; syscall; 
0x00000000127e8c: add [rax], al; add [rbp-0x47ea8a40], al; and [rcx], al; add [rax], al; syscall; 
0x00000000127bac: add [rax], al; add [rbp-0x47ea8a40], al; sub al, 0x0; add [rax], al; syscall; 
0x00000000127f3c: add [rax], al; add [rbp-0x47ea8a40], al; sub eax, [rcx]; add [rax], al; syscall; 
0x00000000127ffc: add [rax], al; add [rbp-0x47ea8a40], al; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000011abf9: add [rax], al; add [rbp-0x47ef8a40], al; adc al, 0x0; add [rax], al; syscall; 
0x0000000011ab59: add [rax], al; add [rbp-0x47ef8a40], al; adc eax, [rax]; add [rax], al; syscall; 
0x00000000114a29: add [rax], al; add [rbp-0x47ef8a40], al; add [rax], eax; add [rax], al; syscall; 
0x00000000115109: add [rax], al; add [rbp-0x47ef8a40], al; add eax, [rax]; add [rax], al; syscall; 
0x000000000ea659: add [rax], al; add [rbp-0x47ef8a40], al; and al, [rax]; add [rax], al; syscall; 
0x0000000011ec89: add [rax], al; add [rbp-0x47ef8a40], al; sbb al, [rax]; add [rax], al; syscall; 
0x00000000127699: add [rax], al; add [rbp-0x47ef8a40], al; sub al, [rax]; add [rax], al; syscall; 
0x000000001275c9: add [rax], al; add [rbp-0x47ef8a40], al; sub eax, [rax]; add [rax], al; syscall; 
0x00000000126269: add [rax], al; add [rbp-0x47ef8a40], al; xor [rcx], al; add [rax], al; syscall; 
0x000000001b6edd: add [rax], al; add [rbp-0x76b23fb6], cl; ret far; 
0x00000000194a98: add [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000016c012: add [rax], al; add [rbp-0x7b], cl; in al, 0x74; mov [0xe80c244489e7894c], al; ret; 
0x000000001af8fe: add [rax], al; add [rbx+0x14840c0], al; clc; ret; 
0x00000000199a78: add [rax], al; add [rbx+0x14840c0], al; clc; vzeroupper; ret; 
0x00000000092736: add [rax], al; add [rbx+0x27602fe], al; ret; 
0x0000000008c1cd: add [rax], al; add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000001410ad: add [rax], al; add [rbx+0x3b83b], cl; add [rax], al; syscall; 
0x0000000009403b: add [rax], al; add [rbx+0x40082474], cl; xor dh, 0x81; syscall; 
0x0000000009446a: add [rax], al; add [rbx+0x40182474], cl; xor dh, 0x81; syscall; 
0x00000000091156: add [rax], al; add [rbx+0x41], bl; pop rsp; pop r13; ret; 
0x000000000ec943: add [rax], al; add [rbx+0x41], bl; pop rsp; ret; 
0x000000000c099d: add [rax], al; add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000c12ed: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000bfcad: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x00000000192dcd: add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x000000000f47c0: add [rax], al; add [rbx+0x5b010447], al; pop rbp; pop r12; ret; 
0x0000000004332a: add [rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000428d0: add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000007e99e: add [rax], al; add [rbx+0x5d], bl; ret; 
0x00000000113a16: add [rax], al; add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x0000000016669d: add [rax], al; add [rbx+0x88b3], cl; add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x28]; 
0x00000000099de5: add [rax], al; add [rbx+0xb7401fe], al; mov eax, 0x16; ret; 
0x00000000182c3d: add [rax], al; add [rbx+0xe8b0156], cl; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000182bcd: add [rax], al; add [rbx+0xe8b0256], cl; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x00000000182b5d: add [rax], al; add [rbx+0xe8b0356], cl; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000001207c8: add [rax], al; add [rbx+rcx*4+0x5e], cl; or [rcx-0xa], al; ret; 
0x00000000044bbd: add [rax], al; add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x000000000903b6: add [rax], al; add [rbx-0x17], bl; jno short 0x000000000009033f; stc; call qword ptr [rax+0x50b78b48]; 
0x0000000016c475: add [rax], al; add [rbx-0x2c8afe08], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000166457: add [rax], al; add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000155183: add [rax], al; add [rbx-0x3d], bl; lea rdi, [rbx+0x8]; call rsi; 
0x0000000009a029: add [rax], al; add [rbx-0x3d], bl; xchg ax, ax; ret; 
0x0000000012216d: add [rax], al; add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x0000000012a0cd: add [rax], al; add [rbx-0x3fcecf16], al; cmp edx, 0x9; setbe al; ret; 
0x00000000162d4d: add [rax], al; add [rbx-0x47ef76e9], cl; add [rax], eax; add [rax], al; ret; 
0x00000000065e91: add [rax], al; add [rbx-0x66773], cl; dec dword ptr [rax-0x7d]; ret; 
0x00000000166434: add [rax], al; add [rbx-0x7637f100], cl; ror byte ptr [rax-0x77], 0x1; mov eax, 0x1; ret; 
0x00000000142b4e: add [rax], al; add [rbx-0x77bffe12], al; ja short 0x0000000000142b59; ret; 
0x0000000003e7c9: add [rax], al; add [rbx-0x7bf0fe08], al; ret far; 
0x0000000017273d: add [rax], al; add [rbx-0x7c99fa17], al; stc; add esi, [rsi+0x7]; ret; 
0x00000000149e57: add [rax], al; add [rbx-0x7cb7efab], cl; ret; 
0x00000000149d25: add [rax], al; add [rbx-0x7cb7efbb], cl; ret; 
0x000000000c758d: add [rax], al; add [rbx-0x7cb7fb85], cl; ret; 
0x000000000c579d: add [rax], al; add [rbx-0x7cb7fb8d], cl; ret; 
0x0000000019e2e1: add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x00000000072d6e: add [rax], al; add [rbx-0x89f63], cl; dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000001443f0: add [rax], al; add [rbx-0xb34b], cl; jmp qword ptr [rbx]; 
0x0000000012a7dd: add [rax], al; add [rcx+0x104e23c1], cl; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000012ae95: add [rax], al; add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000000852ef: add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000011f34c: add [rax], al; add [rcx+0x312b013a], cl; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000018d6dd: add [rax], al; add [rcx+0x3518911], cl; ret; 
0x000000000320b9: add [rax], al; add [rcx+0x3948fc51], cl; ret; 
0x000000000b158d: add [rax], al; add [rcx+0x448d4808], cl; adc bh, bh; ret; 
0x000000001428a8: add [rax], al; add [rcx+0x458b4101], cl; add [rcx], bh; ret; 
0x0000000002a1a2: add [rax], al; add [rcx+0x5c], al; pop r13; pop r14; jmp rax; 
0x00000000133cf1: add [rax], al; add [rcx+0x5c], al; pop rbp; ret; 
0x000000000ab50c: add [rax], al; add [rcx+0x5c], al; ret; 
0x00000000091b44: add [rax], al; add [rcx+0xeab8c7], cl; add [rax], al; mov esi, [r9+0x10]; syscall; 
0x000000000788f5: add [rax], al; add [rcx+0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x00000000155021: add [rax], al; add [rcx+rcx*4+0x2], ah; pop rbx; ret; 
0x00000000036a85: add [rax], al; add [rcx+rcx*4+0x4], cl; and al, 0xe8; add rax, 0xffffffff89480000; ret; 
0x000000000a01d6: add [rax], al; add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x0000000016a20a: add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000009a538: add [rax], al; add [rcx+rcx*4-0x11], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000d9567: add [rax], al; add [rcx+rcx*4-0x12], cl; mov [rsp+0xd0], rax; call r12; 
0x000000000807b2: add [rax], al; add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008b409: add [rax], al; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000118e12: add [rax], al; add [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x00000000091c83: add [rax], al; add [rcx+rcx*4-0x18], al; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x0000000015f653: add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000015f83e: add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x000000000a78bd: add [rax], al; add [rcx+rcx*4-0x19], cl; call rax; 
0x0000000009ad76: add [rax], al; add [rcx+rcx*4-0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000001666b8: add [rax], al; add [rcx+rcx*4-0x1], cl; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000085c5d: add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [r13+0x80]; 
0x000000001666a3: add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x28]; 
0x00000000085e4b: add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [rbp+0x80]; 
0x00000000094416: add [rax], al; add [rcx+rcx*4-0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091bf4: add [rax], al; add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x00000000093a1e: add [rax], al; add [rcx+rcx*4-0x1], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000080047: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081755: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x000000000815f0: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000114563: add [rax], al; add [rcx+rcx*4-0x20], al; pop r12; pop r13; ret; 
0x00000000167771: add [rax], al; add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x000000001528f4: add [rax], al; add [rcx+rcx*4-0x20], al; syscall; 
0x0000000009d38d: add [rax], al; add [rcx+rcx*4-0x20], cl; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000d8d2e: add [rax], al; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000004078b: add [rax], al; add [rcx+rcx*4-0x30], cl; ret; 
0x00000000092f69: add [rax], al; add [rcx+rcx*4-0x31], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000893e2: add [rax], al; add [rcx+rcx*4-0x38], al; syscall; 
0x00000000099949: add [rax], al; add [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x0000000009bc8e: add [rax], al; add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall; 
0x0000000011d79c: add [rax], al; add [rcx+rcx*4-0x40], al; add rsp, 0x8; ret; 
0x0000000003572a: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret; 
0x000000000d9dee: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x000000000891d3: add [rax], al; add [rcx+rcx*4-0x40], al; ret; 
0x000000001563c9: add [rax], al; add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x000000000951bc: add [rax], al; add [rcx+rcx*4-0x6], cl; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000729e5: add [rax], al; add [rcx+rcx*4-0x6], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000015510f: add [rax], al; add [rcx+rcx*4-0x7], cl; call rbp; 
0x0000000009eb90: add [rax], al; add [rcx+rcx*4-0x8], al; mov r10d, 0x8; syscall; 
0x0000000009ebc6: add [rax], al; add [rcx+rcx*4-0x8], al; syscall; 
0x00000000093e70: add [rax], al; add [rcx+rcx*4-0x9], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000969a6: add [rax], al; add [rcx+rcx*4-0xe], cl; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f8a: add [rax], al; add [rcx+rcx*4-0xe], cl; lea rsi, [rip+0x5cac9]; syscall; 
0x0000000007284d: add [rax], al; add [rcx+rcx*4-0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000011fcef: add [rax], al; add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x000000000961e9: add [rax], al; add [rcx-0x3c3fcefa], cl; nop [rax]; mov eax, 0x3; ret; 
0x00000000033ea9: add [rax], al; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x000000001685cc: add [rax], al; add [rcx-0x73], cl; jb short 0x00000000001685db; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168810: add [rax], al; add [rcx-0x73], cl; jne short 0x000000000016881f; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000091c91: add [rax], al; add [rcx-0x73], cl; mov eax, 0x35c; syscall; 
0x0000000007d903: add [rax], al; add [rcx-0x74b7cbbd], cl; jl short 0x000000000007d931; or [rbx-0x7bf00002], al; ret; 
0x00000000091b4b: add [rax], al; add [rcx-0x75], al; jno short 0x0000000000091b62; syscall; 
0x00000000091bab: add [rax], al; add [rcx-0x75], al; jno short 0x0000000000091bc2; syscall; 
0x0000000011fed3: add [rax], al; add [rcx-0x75], cl; jge short 0x000000000011feda; call rbx; 
0x0000000011ff08: add [rax], al; add [rcx-0x75], cl; jge short 0x000000000011ff0f; call rbx; 
0x00000000120ce8: add [rax], al; add [rcx-0x75], cl; jge short 0x0000000000120cef; call rbx; 
0x00000000166160: add [rax], al; add [rcx-0x75], cl; jo short 0x00000000001661b0; mov edi, ebp; call qword ptr [rax+0x20]; 
0x0000000012002d: add [rax], al; add [rcx-0x75], cl; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000052332: add [rax], al; add [rcx-0x75], cl; ret; 
0x0000000016cc6e: add [rax], al; add [rcx-0x76b7d7b9], cl; ja short 0x000000000016cc90; mov eax, r8d; ret; 
0x00000000141e1b: add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x00000000142bd0: add [rax], al; add [rcx-0x77], al; ret far; 
0x0000000002f819: add [rax], al; add [rcx-0x77], al; ret; 
0x0000000003e5c5: add [rax], al; add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret; 
0x000000000d9314: add [rax], al; add [rcx-0x77], cl; ret far; 
0x000000000ad20d: add [rax], al; add [rcx-0x77], cl; ret; 
0x0000000010b1f1: add [rax], al; add [rcx-0x77], cl; ror byte ptr [rbp+0x1], 0xe9; call r15; 
0x000000001b88ed: add [rax], al; add [rcx-0x77], cl; ror dword ptr [rcx+0x9], cl; ret; 
0x0000000015018b: add [rax], al; add [rcx-0x7d], al; iretd; jmp qword ptr [rcx+rcx*4+0x10]; 
0x0000000007c27d: add [rax], al; add [rcx-0x7d], al; jmp qword ptr [rdi+rcx]; 
0x0000000006b1d5: add [rax], al; add [rcx-0x7d], al; jmp qword ptr [rsp+rsi*2]; 
0x00000000120277: add [rax], al; add [rcx-0x7d], cl; ret far; 
0x000000000cdefd: add [rax], al; add [rcx-0x7d], cl; ret; 
0x000000000614ad: add [rax], al; add [rcx-0x80], al; jl short 0x00000000000614c9; jmp far fword ptr [rdi]; 
0x000000000475cb: add [rax], al; add [rcx-0x80], al; jmp far fword ptr [rbx]; 
0x0000000013fe8b: add [rax], al; add [rcx-0xa], al; ret; 
0x00000000160903: add [rax], al; add [rcx-0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x000000000f304a: add [rax], al; add [rcx], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000019db47: add [rax], al; add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x00000000109330: add [rax], al; add [rcx], al; mov edx, 0x2; cmove eax, edx; ret; 
0x00000000099231: add [rax], al; add [rcx], bh; ret; 
0x000000000da054: add [rax], al; add [rcx], ch; ret; 
0x0000000003e37a: add [rax], al; add [rcx], dh; call qword ptr [rax+0x480ab60f]; 
0x0000000016763c: add [rax], al; add [rcx], dh; fisttp dword ptr [rbp+rcx*4+0x4c], st; and al, 0x14; call qword ptr [rax]; 
0x00000000167e90: add [rax], al; add [rcx], dh; in eax, dx; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000101f42: add [rax], al; add [rcx], dh; jmp qword ptr [rsi+0xf]; 
0x0000000009ede5: add [rax], al; add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000089d2b: add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000008ae68: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000004649b: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000a80a7: add [rax], al; add [rcx], dh; ror byte ptr [rcx-0x77], 0x30; ret; 
0x000000000923a9: add [rax], al; add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x0000000000092422; ret; 
0x000000000f6ff5: add [rax], al; add [rcx], dh; sar byte ptr [rax], 0xe; je 0x00000000000f6f5d; ret; 
0x000000000f0676: add [rax], al; add [rcx], dh; shr al, 0xe0; jg short 0x00000000000f0672; jmp qword ptr [rsi+0xf]; 
0x0000000011e933: add [rax], al; add [rdi+0x102a6c05], al; add [rbx+0x3f7f01f8], al; pop rbp; ret; 
0x0000000008f56d: add [rax], al; add [rdi+0x18c4da05], al; add [rbx+0x57f01f8], al; ret; 
0x0000000008d095: add [rax], al; add [rdi+0x18e9b205], al; add [rbx+0x3d7f01f8], al; add rsp, 0x8; ret; 
0x00000000080a4d: add [rax], al; add [rdi+0x19afba05], al; add [rbx+0x57f01f8], al; ret; 
0x00000000095331: add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x000000000620eb: add [rax], al; add [rdi+0x1f88307], al; jg short 0x0000000000062100; ret; 
0x000000000d7bb2: add [rax], al; add [rdi+0x2], bh; neg eax; ret; 
0x00000000149616: add [rax], al; add [rdi+0x5], bh; ret; 
0x000000001803c8: add [rax], al; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; notrack jmp r9; 
0x000000001a71d7: add [rax], al; add [rdi+0x64], dh; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a6852: add [rax], al; add [rdi+0x9], bh; neg eax; ret; 
0x00000000120ae6: add [rax], al; add [rdi+rbp+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x0000000007b440: add [rax], al; add [rdi+rcx+0x48], cl; enter 0x448b, 0x24; adc [rbp-0x77], al; ret far; 
0x0000000014965d: add [rax], al; add [rdi-0x42], bh; mov eax, 0x1; ret; 
0x00000000041a35: add [rax], al; add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret; 
0x00000000084417: add [rax], al; add [rdi], cl; adc [rax+0x40], eax; pop rbx; ret; 
0x00000000156f33: add [rax], al; add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x00000000133335: add [rax], al; add [rdi], cl; adc [rbp-0x78], edi; call rax; 
0x0000000008d862: add [rax], al; add [rdi], cl; adc [rbx+0x48], eax; pop rbx; ret; 
0x000000001663f7: add [rax], al; add [rdi], cl; adc [rcx], ebx; ret; 
0x00000000165adf: add [rax], al; add [rdi], cl; adc [rcx], ecx; ret; 
0x00000000165af7: add [rax], al; add [rdi], cl; adc [rcx], edx; ret; 
0x000000001663d7: add [rax], al; add [rdi], cl; adc [rcx], esp; ret; 
0x000000001663e6: add [rax], al; add [rdi], cl; adc [rdi+0x20], edx; ret; 
0x00000000165aca: add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x000000000c5009: add [rax], al; add [rdi], cl; adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x0000000011396e: add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x000000001069eb: add [rax], al; add [rdi], cl; adc [rsi+0x8], eax; ret; 
0x0000000015edd8: add [rax], al; add [rdi], cl; adc [rsi+0x8], ecx; ret; 
0x0000000016902c: add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000169330: add [rax], al; add [rdi], cl; adc [rsp+0x18], ecx; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x000000001695ee: add [rax], al; add [rdi], cl; adc [rsp+0xb8], ebx; call qword ptr [rax+0x18]; 
0x00000000169558: add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x00000000095680: add [rax], al; add [rdi], cl; add eax, 0xfffc17e9; jmp qword ptr [rsi+0xf]; 
0x00000000166497: add [rax], al; add [rdi], cl; enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x00000000166397: add [rax], al; add [rdi], cl; enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x00000000182d8d: add [rax], al; add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret; 
0x00000000182dfd: add [rax], al; add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret; 
0x000000000ea0ad: add [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000077345: add [rax], al; add [rdi], cl; mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x000000001af91d: add [rax], al; add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x000000000b509d: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b50ad: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000b508d: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000001af90d: add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x00000000199a8d: add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000b4bcd: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b4bbd: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000b4bad: add [rax], al; add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000011487d: add [rax], al; add [rdi], cl; test [rbp+0x48000000], edi; add esp, 0x78; ret; 
0x0000000009499f: add [rax], al; add [rdi], cl; test [rcx+0x48000001], cl; mov edi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x00000000114ef3: add [rax], al; add [rdi], cl; test [rdi+0x48000000], ebx; add esp, 0x68; ret; 
0x0000000006d4cd: add [rax], al; add [rdi], cl; xchg ebp, eax; ret; 
0x0000000016507a: add [rax], al; add [rdi], cl; xchg edi, eax; ret; 
0x000000000825e5: add [rax], al; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000076be6: add [rax], al; add [rdx+0x1], bh; jmp rsi; 
0x0000000008c966: add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000867c3: add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008ca14: add [rax], al; add [rdx+0x1], bh; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000109331: add [rax], al; add [rdx+0x2], edi; cmove eax, edx; ret; 
0x000000000c3d4d: add [rax], al; add [rdx+0x30178816], cl; in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000c5505: add [rax], al; add [rdx], al; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000d9a87: add [rax], al; add [rdx], ch; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x00000000119c58: add [rax], al; add [rip+0x410000], dil; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x00000000099944: add [rax], al; add [rsi+0x1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000a0eca: add [rax], al; add [rsi+0x1], dh; ret; 
0x0000000011a242: add [rax], al; add [rsi+0x5409], bh; mov eax, 0x10; syscall; 
0x0000000011a273: add [rax], al; add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000912cc: add [rax], al; add [rsi+0x80], bh; mov eax, 0xca; syscall; 
0x00000000177e0c: add [rax], al; add [rsi+0x80], bh; syscall; 
0x00000000091389: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x000000001528ef: add [rax], al; add [rsi+0x81], bh; mov eax, r12d; syscall; 
0x000000001644a3: add [rax], al; add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000012962d: add [rax], al; add [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000b4fb9: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b4fba: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x00000000083d4d: add [rax], al; add [rsi-0x1], bh; call qword ptr [rax+0x18]; 
0x0000000008da1e: add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000012646b: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x11f; syscall; 
0x000000001265eb: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x131; syscall; 
0x00000000119d3b: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x1; syscall; 
0x000000001197fb: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x1b4; syscall; 
0x0000000009fdbb: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x3; syscall; 
0x000000000ec33b: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0x79; syscall; 
0x0000000011ec1b: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0xb; syscall; 
0x000000000d99db: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, 0xc9; syscall; 
0x000000000e66db: add [rax], al; add [rsi-0x70], ah; endbr64; mov eax, [rdi]; ret; 
0x0000000015d21b: add [rax], al; add [rsi-0x70], ah; endbr64; ret; 
0x0000000009be1b: add [rax], al; add [rsi-0x70], ah; endbr64; xor eax, eax; ret; 
0x0000000018d68b: add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x0000000018d6bb: add [rax], al; add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000c0c6b: add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x000000000c0c9b: add [rax], al; add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000bfc7b: add [rax], al; add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000001b3e5b: add [rax], al; add [rsi-0x70], ah; mov rax, rdi; ret; 
0x000000001b61ab: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b643b: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcfb: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c3d3b: add [rax], al; add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret; 
0x000000000d6eeb: add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000d7e7b: add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret; 
0x000000000b155d: add [rax], al; add [rsi-0x77], ah; xor [rax-0x73], cl; adc dil, r15b; ret; 
0x000000000cf80a: add [rax], al; add [rsp+rax+0x44], dh; mov eax, eax; ret; 
0x00000000162c14: add [rax], al; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x00000000169555: add [rax], al; add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x000000001367a5: add [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000001509e7: add [rax], al; add al, ch; adc [rdx-0x13], edi; dec dword ptr [rax-0x77]; ret; 
0x0000000012c595: add [rax], al; add al, ch; adc esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x0000000014c02d: add [rax], al; add al, ch; cmp eax, ebx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000010c02a: add [rax], al; add al, ch; data64 ret far; 
0x0000000007560d: add [rax], al; add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000ce4d9: add [rax], al; add al, ch; jmp rsi; 
0x0000000015146f: add [rax], al; add al, ch; mov [rdi-0x13], ebp; dec dword ptr [rax-0x77]; ret; 
0x0000000008a678: add [rax], al; add al, ch; mov al, [0xb74c08548ffffff]; pop rbx; ret; 
0x0000000003ae3d: add [rax], al; add al, ch; ret far; 
0x00000000030825: add [rax], al; add al, ch; ret; 
0x00000000172cfe: add [rax], al; add al, ch; stosb [rdi]; js short 0x0000000000172cfc; jmp qword ptr [rsi+0xf]; 
0x000000001172c2: add [rax], al; add al, ch; xchg esi, eax; ret far; 
0x00000000096561: add [rax], al; add al, dh; cmpxchg [rsp-0x8], rdx; ret; 
0x0000000005664f: add [rax], al; add bh, al; add al, [rdx]; sar bh, 0xff; ret; 
0x000000000791ca: add [rax], al; add bh, al; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000005b439: add [rax], al; add bh, al; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rsi]; 
0x000000001bb8bd: add [rax], al; add bh, bh; adc ecx, [rax-0x7d]; ret; 
0x0000000007f7d1: add [rax], al; add bh, bh; loopne 0x000000000007f81f; mov eax, 0xffffffff; ret; 
0x000000000f6f63: add [rax], al; add bh, dh; ret; 
0x000000000f413c: add [rax], al; add bl, al; mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x000000000edc4a: add [rax], al; add bl, al; mov eax, 0xffffffff; ret; 
0x000000000a7496: add [rax], al; add bl, al; nop [rax+rax]; endbr64; ret; 
0x0000000015f244: add [rax], al; add bl, al; nop [rax+rax]; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x0000000015ee33: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee23: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee13: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000009af32: add [rax], al; add bl, al; nop [rax+rax]; mov eax, 0xb; ret; 
0x00000000142b62: add [rax], al; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000000d83e4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000d83f4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000d8404: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000d8414: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000d8424: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000d8434: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x7; ret; 
0x00000000122403: add [rax], al; add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x00000000174a2d: add [rax], al; add bl, al; nop [rax]; xor eax, eax; ret; 
0x000000001664bb: add [rax], al; add bl, al; nop; xor eax, eax; ret; 
0x000000000a7962: add [rax], al; add bl, al; ret; 
0x000000001b59cb: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001ae93e: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5f6c: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000041189: add [rax], al; add bl, bl; insb [rdi], dx; and al, 0xe8; ret; 
0x00000000173a3c: add [rax], al; add bl, ch; fucomip st, st(0); fisubr st, dword ptr [rsp+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x0000000015dd38: add [rax], al; add bl, ch; mov eax, 0xfd89dee8; jmp qword ptr [rsi+0x66]; 
0x00000000160220: add [rax], al; add bl, ch; mov ebp, 0xfd64f6e8; jmp qword ptr [rsi+0xf]; 
0x00000000172700: add [rax], al; add bl, ch; mov edx, 0xfc4016e8; jmp qword ptr [rsi+0xf]; 
0x000000000ab3dd: add [rax], al; add bl, ch; ret far; 
0x00000000112d89: add [rax], al; add bl, ch; ret; 
0x000000001ae6b3: add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x000000001b525d: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b524d: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f0d: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3efd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3edd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b526d: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b57ad: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b59dd: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b5733: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b178d: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b175d: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000000c0d3d: add [rax], al; add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000c0d4d: add [rax], al; add bl, dh; movq [rdi], mm0; ret; 
0x000000001139f6: add [rax], al; add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000001270ad: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x134; syscall; 
0x0000000015d22d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x1; ret; 
0x000000000eb0ed: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x3b; syscall; 
0x00000000061f1d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x52; syscall; 
0x0000000011624d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x57; syscall; 
0x0000000011618d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x58; syscall; 
0x00000000126f8d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x63; syscall; 
0x0000000011a8ed: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x8c; syscall; 
0x0000000011edad: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x95; syscall; 
0x0000000011be9d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0x99; syscall; 
0x0000000011b9bd: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xa3; syscall; 
0x00000000126d4d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xb1; syscall; 
0x00000000126ecd: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xb4; syscall; 
0x0000000012226d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xc2; syscall; 
0x000000001222cd: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xc3; syscall; 
0x000000001221ad: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xc4; syscall; 
0x0000000012235d: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xc5; syscall; 
0x00000000108dcd: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xcb; syscall; 
0x00000000126dad: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xfe; syscall; 
0x0000000008ddcd: add [rax], al; add bl, dh; nop edx, edi; mov eax, 0xffffffff; ret; 
0x0000000008e81d: add [rax], al; add bl, dh; nop edx, edi; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f4dd: add [rax], al; add bl, dh; nop edx, edi; mov rax, [rdi+0x68]; ret; 
0x0000000008f4bd: add [rax], al; add bl, dh; nop edx, edi; mov rax, [rip+0x18b1b5]; ret; 
0x0000000002b96d: add [rax], al; add bl, dh; nop edx, edi; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000175c9d: add [rax], al; add bl, dh; nop edx, edi; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x0000000009b58d: add [rax], al; add bl, dh; nop edx, edi; mov rax, fs:[0x10]; ret; 
0x0000000008f4ed: add [rax], al; add bl, dh; nop edx, edi; mov rax, rdi; ret; 
0x00000000029cfd: add [rax], al; add bl, dh; nop edx, edi; ret; 
0x000000000945cd: add [rax], al; add bl, dh; nop edx, edi; xor eax, eax; ret; 
0x000000000d3c42: add [rax], al; add byte ptr [rcx+rcx*4+0x42], 0x4; mov [rdx], eax; xor eax, eax; ret; 
0x000000000c5506: add [rax], al; add cl, [rax-0x73]; add eax, 0x127c0; cmovne rax, rdx; ret; 
0x000000000d3746: add [rax], al; add cl, ch; bnd jo short 0x00000000000d3746; jmp qword ptr [rsi-0x70]; 
0x000000001450e2: add [rax], al; add cl, ch; cmp ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000038f97: add [rax], al; add cl, ch; cmp ebx, 0xffffffff; call qword ptr [rax-0x1a77a39]; 
0x0000000007a9c7: add [rax], al; add cl, ch; fcos; call qword ptr [rax-0x5e1f00d]; 
0x00000000157a7d: add [rax], al; add cl, ch; idiv r15; jmp qword ptr [rsi+0x66]; 
0x0000000015a35d: add [rax], al; add cl, ch; imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x0000000009bc42: add [rax], al; add cl, ch; imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000003be4c: add [rax], al; add cl, ch; in al, dx; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x0000000007cb27: add [rax], al; add cl, ch; lahf; out 0xff, al; call qword ptr [rax-0x382708b8]; 
0x0000000012e8fe: add [rax], al; add cl, ch; paddb mm7, mm7; jmp qword ptr [rsi+0x2e]; 
0x00000000096daf: add [rax], al; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x0000000015936d: add [rax], al; add cl, ch; pop rbx; fdivp st(7), st; jmp qword ptr [rsi+0x66]; 
0x00000000099b72: add [rax], al; add cl, ch; push rsi; je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x0000000007b6e9: add [rax], al; add cl, ch; ret far; 
0x00000000034805: add [rax], al; add cl, ch; ret; 
0x0000000008fe22: add [rax], al; add cl, ch; sar dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001138ca: add [rax], al; add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000001ab72f: add [rax], al; add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000006690b: add [rax], al; add cl, ch; stosd [rdi]; ret; 
0x0000000015ca86: add [rax], al; add cl, ch; test al, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000000f6e1b: add [rax], al; add cl, ch; ud0 edi, edi; jmp qword ptr [rsi+0x66]; 
0x000000000b1485: add [rax], al; add dh, al; add [rax], al; ret; 
0x000000000f41ad: add [rax], al; add dh, al; or [rdx], bl; mov eax, 0x2; ret; 
0x00000000143a64: add [rax], al; add dh, al; ret; 
0x00000000090aef: add [rax], al; add dh, al; xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x00000000071e72: add [rax], al; add dh, dh; ret; 
0x00000000131dae: add [rax], al; add dh, dh; test [rdi+rdi*8-0x1], edi; call qword ptr [rax]; 
0x00000000131063: add [rax], al; add dh, dh; test [rdi+rdi*8-0x1], edi; jmp qword ptr [rax]; 
0x000000000516f2: add [rax], al; add eax, 0x34e85300; jno short 0x00000000000516f9; dec dword ptr [rax-0x77]; ret; 
0x000000001af8ff: add [rax], al; add eax, 0x40; add rax, rdi; ret; 
0x00000000199a79: add [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000019db48: add [rax], al; add eax, ecx; vzeroupper; ret; 
0x0000000014b4fa: add [rax], al; add ebx, ebp; out dx, al; ret; 
0x00000000147cda: add [rax], al; add edx, 0x1; syscall; 
0x000000000d83be: add [rax], al; add rax, 0x3; ret; 
0x000000000b4983: add [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000001af8b4: add [rax], al; add rax, rdi; ret; 
0x00000000199a28: add [rax], al; add rax, rdi; vzeroupper; ret; 
0x0000000013eb29: add [rax], al; add rcx, [rip+0xda2de]; call rbp; 
0x00000000163855: add [rax], al; add rdi, 0x10; jmp rcx; 
0x00000000166345: add [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000165a15: add [rax], al; add rdi, 0x68; jmp rcx; 
0x00000000162c18: add [rax], al; add rdi, 0xc8; jmp rcx; 
0x000000001af8ab: add [rax], al; add rdx, rax; jl 0x00000000001af990; add rax, rdi; ret; 
0x00000000164a76: add [rax], al; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000007ad8e: add [rax], al; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000083d1e: add [rax], al; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000113ca7: add [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000149fbf: add [rax], al; add rsp, 0x110; pop rbx; ret; 
0x00000000086184: add [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000011301d: add [rax], al; add rsp, 0x18; ret; 
0x00000000113f74: add [rax], al; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000004209f: add [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000001642c7: add [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000016b635: add [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000001ba8bd: add [rax], al; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000011503b: add [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000086b3f: add [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000118e39: add [rax], al; add rsp, 0x40; pop r13; ret; 
0x00000000147cf3: add [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000011a5a5: add [rax], al; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000015dda8: add [rax], al; add rsp, 0x60; pop rbp; ret; 
0x0000000011b912: add [rax], al; add rsp, 0x68; pop r12; pop r14; ret; 
0x00000000114709: add [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000107592: add [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000114efa: add [rax], al; add rsp, 0x68; ret; 
0x00000000114884: add [rax], al; add rsp, 0x78; ret; 
0x0000000012203a: add [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000011d7dc: add [rax], al; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000abd4e: add [rax], al; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000015f5b4: add [rax], al; add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002ac56: add [rax], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000043651: add [rax], al; add rsp, 0x8; ret; 
0x00000000041386: add [rax], al; add rsp, 0x8; ret; 
0x00000000029fcc: add [rax], al; add rsp, 0x98; ret; 
0x0000000011961b: add [rax], al; add rsp, 0xa0; pop rbx; ret; 
0x00000000092c7c: add [rax], al; add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000ec93d: add [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000167549: add [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x000000000419ce: add [rax], al; addss xmm0, xmm0; ret; 
0x0000000009277e: add [rax], al; and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x00000000099e2e: add [rax], al; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000095cb4: add [rax], al; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x00000000125616: add [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000003a34f: add [rax], al; and eax, esi; ret; 
0x00000000098397: add [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000b4bae: add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000b4bbe: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b4bce: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000bac10: add [rax], al; bsf rax, rdx; ret; 
0x000000000d86e5: add [rax], al; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000001af91e: add [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x000000001af92e: add [rax], al; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x000000001af93e: add [rax], al; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000001af90e: add [rax], al; bsr eax, eax; add rax, rdi; ret; 
0x00000000199a8e: add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000b508e: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b509e: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50ae: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000000ba728: add [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x000000000ba7c2: add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x00000000166498: add [rax], al; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000166398: add [rax], al; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x00000000162ee2: add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x000000001691e9: add [rax], al; call qword ptr [rax+0x18]; 
0x0000000015e275: add [rax], al; call qword ptr [rax+0x20]; 
0x0000000015d55b: add [rax], al; call qword ptr [rax+0x28]; 
0x00000000175115: add [rax], al; call qword ptr [rax+0x48]; 
0x00000000175205: add [rax], al; call qword ptr [rax+0x50]; 
0x00000000094b3b: add [rax], al; call qword ptr [rax+0x640]; 
0x00000000083c19: add [rax], al; call qword ptr [rax+0x68]; 
0x000000001134f5: add [rax], al; call qword ptr [rax+0x88]; 
0x00000000167cde: add [rax], al; call qword ptr [rax]; 
0x00000000167735: add [rax], al; call qword ptr [rax]; 
0x000000001168b0: add [rax], al; call qword ptr [rbp+0x40]; 
0x000000000949ad: add [rax], al; call qword ptr [rbx+0x640]; 
0x000000001bb8be: add [rax], al; call qword ptr [rbx]; 
0x000000000d9573: add [rax], al; call r12; 
0x000000000352fc: add [rax], al; call r15; 
0x0000000016b3b3: add [rax], al; call r8; 
0x000000000454d6: add [rax], al; call rax; 
0x00000000155a2b: add [rax], al; call rbx; 
0x00000000098874: add [rax], al; clc; inc dword ptr [rcx+0x39]; ret far; 
0x0000000009b5bd: add [rax], al; cmova eax, edx; ret; 
0x000000000a0ee0: add [rax], al; cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x00000000142f56: add [rax], al; cmovb eax, edx; ret; 
0x000000001281cd: add [rax], al; cmovb rax, rdx; ret; 
0x0000000009be62: add [rax], al; cmove eax, ecx; ret; 
0x00000000092773: add [rax], al; cmove eax, edx; ret; 
0x000000000e5639: add [rax], al; cmove r8d, eax; mov eax, r8d; ret; 
0x0000000011bf8b: add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x000000000a94d1: add [rax], al; cmove rax, rdx; ret; 
0x000000000ab0e9: add [rax], al; cmove rax, rdx; ret; 
0x000000000f6fb2: add [rax], al; cmovne eax, edx; pop rbx; ret; 
0x000000001426b0: add [rax], al; cmovne eax, edx; ret; 
0x0000000009e66c: add [rax], al; cmovne rax, rdx; ret; 
0x00000000095cdb: add [rax], al; cmp [rdi+0x628], rdi; cmove eax, edx; ret; 
0x000000001915f6: add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001092bc: add [rax], al; cmp dx, 0x2; je short 0x00000000001092c8; ret; 
0x00000000090c1a: add [rax], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x0000000009129a: add [rax], al; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x0000000009963b: add [rax], al; cmp eax, 0x21; je short 0x00000000000996a0; mov eax, 0x16; ret; 
0x000000001a6178: add [rax], al; cmp eax, ecx; jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000000a873e: add [rax], al; cmp esi, 0x120; je short 0x00000000000a8750; ret; 
0x000000000a87be: add [rax], al; cmp esi, 0x120; je short 0x00000000000a87d0; ret; 
0x000000000a89fe: add [rax], al; cmp esi, 0x120; je short 0x00000000000a8a10; ret; 
0x000000000a948e: add [rax], al; cmp esi, 0x120; je short 0x00000000000a94a0; ret; 
0x000000000a95be: add [rax], al; cmp esi, 0x120; je short 0x00000000000a95d0; ret; 
0x000000000ab01e: add [rax], al; cmp esi, 0x120; je short 0x00000000000ab030; ret; 
0x000000000ab0ae: add [rax], al; cmp esi, 0x120; je short 0x00000000000ab0c0; ret; 
0x000000000b160e: add [rax], al; cmp esi, 0x120; je short 0x00000000000b1620; ret; 
0x000000000c540e: add [rax], al; cmp esi, 0x120; je short 0x00000000000c5420; ret; 
0x000000000c548e: add [rax], al; cmp esi, 0x120; je short 0x00000000000c54a0; ret; 
0x000000000c56be: add [rax], al; cmp esi, 0x120; je short 0x00000000000c56d0; ret; 
0x000000000c57ee: add [rax], al; cmp esi, 0x120; je short 0x00000000000c5800; ret; 
0x000000000c5a4e: add [rax], al; cmp esi, 0x120; je short 0x00000000000c5a60; ret; 
0x00000000099de6: add [rax], al; cmp esi, 0x1; je short 0x0000000000099df8; mov eax, 0x16; ret; 
0x00000000092737: add [rax], al; cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000083bf9: add [rax], al; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x0000000009109e: add [rax], al; cmp qword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x00000000095d65: add [rax], al; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x000000000a50f0: add [rax], al; cmp rax, rsi; jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x00000000092867: add [rax], al; cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000000928a7: add [rax], al; cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x00000000092bae: add [rax], al; endbr64; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x00000000029f2e: add [rax], al; endbr64; lea rax, [rip+0x1ae09b]; ret; 
0x0000000009266e: add [rax], al; endbr64; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000092b7e: add [rax], al; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be6e: add [rax], al; endbr64; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0bee: add [rax], al; endbr64; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x0000000011bb6e: add [rax], al; endbr64; mov eax, 0x132; syscall; 
0x000000001270ae: add [rax], al; endbr64; mov eax, 0x134; syscall; 
0x0000000015d22e: add [rax], al; endbr64; mov eax, 0x1; ret; 
0x0000000011ed1e: add [rax], al; endbr64; mov eax, 0x1c; syscall; 
0x0000000011518e: add [rax], al; endbr64; mov eax, 0x20; syscall; 
0x000000000ea5ae: add [rax], al; endbr64; mov eax, 0x25; syscall; 
0x000000000dcdde: add [rax], al; endbr64; mov eax, 0x26; syscall; 
0x000000000ec0ae: add [rax], al; endbr64; mov eax, 0x27; syscall; 
0x0000000015f54e: add [rax], al; endbr64; mov eax, 0x2; ret; 
0x0000000012765e: add [rax], al; endbr64; mov eax, 0x31; syscall; 
0x0000000012772e: add [rax], al; endbr64; mov eax, 0x34; syscall; 
0x00000000119a0e: add [rax], al; endbr64; mov eax, 0x3; syscall; 
0x000000000eb0ee: add [rax], al; endbr64; mov eax, 0x3b; syscall; 
0x0000000004274e: add [rax], al; endbr64; mov eax, 0x3e; syscall; 
0x0000000012845e: add [rax], al; endbr64; mov eax, 0x40; syscall; 
0x0000000011d15e: add [rax], al; endbr64; mov eax, 0x4d; syscall; 
0x0000000011531e: add [rax], al; endbr64; mov eax, 0x50; syscall; 
0x00000000061f1e: add [rax], al; endbr64; mov eax, 0x52; syscall; 
0x0000000011624e: add [rax], al; endbr64; mov eax, 0x57; syscall; 
0x0000000011618e: add [rax], al; endbr64; mov eax, 0x58; syscall; 
0x00000000126f8e: add [rax], al; endbr64; mov eax, 0x63; syscall; 
0x00000000042d3e: add [rax], al; endbr64; mov eax, 0x83; syscall; 
0x000000001142de: add [rax], al; endbr64; mov eax, 0x8a; syscall; 
0x0000000011a8ee: add [rax], al; endbr64; mov eax, 0x8c; syscall; 
0x0000000011edae: add [rax], al; endbr64; mov eax, 0x95; syscall; 
0x0000000011be9e: add [rax], al; endbr64; mov eax, 0x99; syscall; 
0x0000000011baae: add [rax], al; endbr64; mov eax, 0xa2; syscall; 
0x0000000011b9be: add [rax], al; endbr64; mov eax, 0xa3; syscall; 
0x00000000125bde: add [rax], al; endbr64; mov eax, 0xa6; syscall; 
0x00000000125afe: add [rax], al; endbr64; mov eax, 0xad; syscall; 
0x00000000126d4e: add [rax], al; endbr64; mov eax, 0xb1; syscall; 
0x00000000126ece: add [rax], al; endbr64; mov eax, 0xb4; syscall; 
0x00000000125c0e: add [rax], al; endbr64; mov eax, 0xbb; syscall; 
0x0000000012226e: add [rax], al; endbr64; mov eax, 0xc2; syscall; 
0x000000001222ce: add [rax], al; endbr64; mov eax, 0xc3; syscall; 
0x000000001221ae: add [rax], al; endbr64; mov eax, 0xc4; syscall; 
0x0000000012235e: add [rax], al; endbr64; mov eax, 0xc5; syscall; 
0x00000000108dce: add [rax], al; endbr64; mov eax, 0xcb; syscall; 
0x00000000126dae: add [rax], al; endbr64; mov eax, 0xfe; syscall; 
0x0000000008ddce: add [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x0000000015204e: add [rax], al; endbr64; mov eax, [rdi+0x20]; ret; 
0x000000000891de: add [rax], al; endbr64; mov eax, [rdi]; and eax, 0x804; ret; 
0x000000000961be: add [rax], al; endbr64; mov eax, [rip+0x189926]; ret; 
0x0000000004312e: add [rax], al; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000013677e: add [rax], al; endbr64; mov eax, edi; rol ax, 0x8; ret; 
0x0000000017836e: add [rax], al; endbr64; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x00000000061f4e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000012649e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0x11e; syscall; 
0x0000000012656e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0x136; syscall; 
0x0000000011931e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000126f5e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000012223e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0xbf; syscall; 
0x0000000012217e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000012854e: add [rax], al; endbr64; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000113ede: add [rax], al; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000126aae: add [rax], al; endbr64; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141de: add [rax], al; endbr64; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ede: add [rax], al; endbr64; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000009bf1e: add [rax], al; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008e81e: add [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000016cc2e: add [rax], al; endbr64; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b2e: add [rax], al; endbr64; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4de: add [rax], al; endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000009f18e: add [rax], al; endbr64; mov rax, [rdi+0x78]; ret; 
0x00000000090c5e: add [rax], al; endbr64; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000008f4be: add [rax], al; endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x0000000003a39e: add [rax], al; endbr64; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a37e: add [rax], al; endbr64; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x0000000002b96e: add [rax], al; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000175c9e: add [rax], al; endbr64; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x0000000014a38e: add [rax], al; endbr64; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x00000000136b1e: add [rax], al; endbr64; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x00000000129cfe: add [rax], al; endbr64; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x0000000009b58e: add [rax], al; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000008f4ee: add [rax], al; endbr64; mov rax, rdi; ret; 
0x0000000009a66e: add [rax], al; endbr64; nop; xor eax, eax; ret; 
0x000000000eac2e: add [rax], al; endbr64; pop rdi; mov eax, 0x3a; syscall; 
0x00000000029cfe: add [rax], al; endbr64; ret; 
0x0000000008d32e: add [rax], al; endbr64; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x000000000945ce: add [rax], al; endbr64; xor eax, eax; ret; 
0x000000001285ee: add [rax], al; endbr64; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000000412ee: add [rax], al; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x0000000004118a: add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001a715c: add [rax], al; ja 0x00000000001a7249; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000009286e: add [rax], al; ja short 0x0000000000092878; ret; 
0x000000000928ae: add [rax], al; ja short 0x00000000000928b8; ret; 
0x00000000136699: add [rax], al; ja short 0x00000000001366a5; mov rax, rdi; sar rax, 0x6; ret; 
0x000000001a71d8: add [rax], al; ja short 0x00000000001a7240; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000000a0cfb: add [rax], al; jbe short 0x00000000000a0d00; ret; 
0x000000000a0d3b: add [rax], al; jbe short 0x00000000000a0d40; ret; 
0x000000000a0ecb: add [rax], al; jbe short 0x00000000000a0ed0; ret; 
0x000000000949a0: add [rax], al; je 0x0000000000094b31; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000000d8084: add [rax], al; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x0000000019ea1d: add [rax], al; je 0x000000000019eb60; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001b2a4d: add [rax], al; je 0x00000000001b2b90; mov byte ptr [rdi], 0x0; ret; 
0x000000000903f8: add [rax], al; je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x00000000099c3c: add [rax], al; je short 0x0000000000099c48; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a8352: add [rax], al; je short 0x00000000000a8329; ret; 
0x000000000a8744: add [rax], al; je short 0x00000000000a8750; ret; 
0x000000000a8792: add [rax], al; je short 0x00000000000a875f; ret; 
0x000000000a87c4: add [rax], al; je short 0x00000000000a87d0; ret; 
0x000000000a8812: add [rax], al; je short 0x00000000000a87df; ret; 
0x000000000a8a04: add [rax], al; je short 0x00000000000a8a10; ret; 
0x000000000a8a52: add [rax], al; je short 0x00000000000a8a1f; ret; 
0x000000000a9494: add [rax], al; je short 0x00000000000a94a0; ret; 
0x000000000a95c4: add [rax], al; je short 0x00000000000a95d0; ret; 
0x000000000a9612: add [rax], al; je short 0x00000000000a95df; ret; 
0x000000000ab024: add [rax], al; je short 0x00000000000ab030; ret; 
0x000000000ab0b4: add [rax], al; je short 0x00000000000ab0c0; ret; 
0x000000000ab102: add [rax], al; je short 0x00000000000ab0cf; ret; 
0x000000000b1614: add [rax], al; je short 0x00000000000b1620; ret; 
0x000000000b1662: add [rax], al; je short 0x00000000000b162f; ret; 
0x000000000c5414: add [rax], al; je short 0x00000000000c5420; ret; 
0x000000000c5462: add [rax], al; je short 0x00000000000c542f; ret; 
0x000000000c5494: add [rax], al; je short 0x00000000000c54a0; ret; 
0x000000000c54e2: add [rax], al; je short 0x00000000000c54af; ret; 
0x000000000c563a: add [rax], al; je short 0x00000000000c5612; ret; 
0x000000000c56c4: add [rax], al; je short 0x00000000000c56d0; ret; 
0x000000000c5712: add [rax], al; je short 0x00000000000c56df; ret; 
0x000000000c57f4: add [rax], al; je short 0x00000000000c5800; ret; 
0x000000000c5842: add [rax], al; je short 0x00000000000c580f; ret; 
0x000000000c5a54: add [rax], al; je short 0x00000000000c5a60; ret; 
0x000000000c6dca: add [rax], al; je short 0x00000000000c6da2; ret; 
0x000000000cf80b: add [rax], al; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x000000000d8134: add [rax], al; je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x00000000119566: add [rax], al; je short 0x0000000000119578; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000011fcf0: add [rax], al; je short 0x000000000011fd25; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000011fd80: add [rax], al; je short 0x000000000011fdb5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120ae7: add [rax], al; je short 0x0000000000120b1a; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120b98: add [rax], al; je short 0x0000000000120bcd; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000019e2fd: add [rax], al; je short 0x000000000019e380; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019f09d: add [rax], al; je short 0x000000000019f120; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001b011d: add [rax], al; je short 0x00000000001b01a0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x000000001b131d: add [rax], al; je short 0x00000000001b13a0; mov byte ptr [rdi], 0x0; ret; 
0x000000001b20cd: add [rax], al; je short 0x00000000001b2150; mov byte ptr [rdi], 0x0; ret; 
0x000000000d7bb3: add [rax], al; jg short 0x00000000000d7bb9; neg eax; ret; 
0x0000000014965e: add [rax], al; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149617: add [rax], al; jg short 0x0000000000149620; ret; 
0x000000001a6853: add [rax], al; jg short 0x00000000001a6860; neg eax; ret; 
0x0000000008fe55: add [rax], al; jmp qword ptr [rax+0x28]; 
0x0000000008fea5: add [rax], al; jmp qword ptr [rax+0x30]; 
0x0000000002a145: add [rax], al; jmp rax; 
0x00000000162c1f: add [rax], al; jmp rcx; 
0x00000000075a49: add [rax], al; jmp rsi; 
0x000000000f7032: add [rax], al; jne 0x00000000000f6f5d; ret; 
0x00000000113ca1: add [rax], al; jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x0000000011487e: add [rax], al; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114ef4: add [rax], al; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x00000000115035: add [rax], al; jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e33: add [rax], al; jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x00000000119615: add [rax], al; jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x00000000149fb9: add [rax], al; jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0c9: add [rax], al; jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a254: add [rax], al; jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000015dda2: add [rax], al; jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x000000001642c1: add [rax], al; jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x00000000199fa8: add [rax], al; jne 0x0000000000199ce0; ret; 
0x000000001a15bd: add [rax], al; jne 0x00000000001a1320; ret; 
0x000000001a79a8: add [rax], al; jne 0x00000000001a76e0; ret; 
0x000000001ae5dd: add [rax], al; jne 0x00000000001ae340; ret; 
0x00000000029cf3: add [rax], al; jne short 0x0000000000029cbb; ret; 
0x000000000420f3: add [rax], al; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x00000000042406: add [rax], al; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x000000000426bb: add [rax], al; jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x00000000042942: add [rax], al; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429c5: add [rax], al; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042ad0: add [rax], al; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042d04: add [rax], al; jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x00000000043013: add [rax], al; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x000000000434a3: add [rax], al; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f21: add [rax], al; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x00000000046011: add [rax], al; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046286: add [rax], al; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x0000000004680b: add [rax], al; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046858: add [rax], al; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x000000000468aa: add [rax], al; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f7: add [rax], al; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x0000000004694a: add [rax], al; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046997: add [rax], al; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000050cec: add [rax], al; jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x00000000051505: add [rax], al; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x00000000051893: add [rax], al; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052ddd: add [rax], al; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x00000000053b4c: add [rax], al; jne short 0x0000000000053b53; push r10; ret; 
0x00000000054035: add [rax], al; jne short 0x000000000005403c; push r10; ret; 
0x000000000562e8: add [rax], al; jne short 0x0000000000056365; leave; ret; 
0x0000000005a251: add [rax], al; jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a49a: add [rax], al; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060756: add [rax], al; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x0000000006082b: add [rax], al; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608e2: add [rax], al; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609b4: add [rax], al; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a76: add [rax], al; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b36: add [rax], al; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c24: add [rax], al; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cfb: add [rax], al; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x00000000061361: add [rax], al; jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613e3: add [rax], al; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e95: add [rax], al; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621ce: add [rax], al; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a9: add [rax], al; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082c06: add [rax], al; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cc2: add [rax], al; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082dbb: add [rax], al; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e8b: add [rax], al; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f44: add [rax], al; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000089fe4: add [rax], al; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090483: add [rax], al; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x0000000009064c: add [rax], al; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090626: add [rax], al; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x0000000009078b: add [rax], al; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000090761: add [rax], al; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x00000000090d72: add [rax], al; jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x0000000009183f: add [rax], al; jne short 0x0000000000091828; pop rbx; ret; 
0x0000000009677a: add [rax], al; jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x000000000975b0: add [rax], al; jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x0000000009bcbb: add [rax], al; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009cbe1: add [rax], al; jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009dae0: add [rax], al; jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009dcfe: add [rax], al; jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x000000000a02e1: add [rax], al; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000a0ca0: add [rax], al; jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x000000000a4f79: add [rax], al; jne short 0x00000000000a4f80; ret; 
0x000000000a82bb: add [rax], al; jne short 0x00000000000a8274; ret; 
0x000000000a83cb: add [rax], al; jne short 0x00000000000a8384; ret; 
0x000000000a847b: add [rax], al; jne short 0x00000000000a8434; ret; 
0x000000000a888b: add [rax], al; jne short 0x00000000000a8844; ret; 
0x000000000a89bb: add [rax], al; jne short 0x00000000000a8974; ret; 
0x000000000a9a3b: add [rax], al; jne short 0x00000000000a99f4; ret; 
0x000000000a9acb: add [rax], al; jne short 0x00000000000a9a84; ret; 
0x000000000d2c11: add [rax], al; jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d364e: add [rax], al; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3729: add [rax], al; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8ec1: add [rax], al; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f3b: add [rax], al; jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9c5c: add [rax], al; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2eaa: add [rax], al; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e559a: add [rax], al; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e6111: add [rax], al; jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e619d: add [rax], al; jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e774d: add [rax], al; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec17d: add [rax], al; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec20d: add [rax], al; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4cd: add [rax], al; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec56d: add [rax], al; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x000000000ecf43: add [rax], al; jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x000000000ed064: add [rax], al; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x00000000108efa: add [rax], al; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a99: add [rax], al; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e13: add [rax], al; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000115bbe: add [rax], al; jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x00000000116111: add [rax], al; jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x00000000119722: add [rax], al; jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x00000000119a99: add [rax], al; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b28: add [rax], al; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119be0: add [rax], al; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c7e: add [rax], al; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a17a: add [rax], al; jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011a1eb: add [rax], al; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011ab15: add [rax], al; jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011b10d: add [rax], al; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b19d: add [rax], al; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b244: add [rax], al; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b304: add [rax], al; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3ec: add [rax], al; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c072: add [rax], al; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0eb: add [rax], al; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1bd: add [rax], al; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf85: add [rax], al; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d018: add [rax], al; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d09c: add [rax], al; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d117: add [rax], al; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011e656: add [rax], al; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e72f: add [rax], al; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x0000000011ebcc: add [rax], al; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x0000000011f987: add [rax], al; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x000000001210bb: add [rax], al; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x0000000012117b: add [rax], al; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121359: add [rax], al; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x00000000121582: add [rax], al; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x0000000012179f: add [rax], al; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000121c37: add [rax], al; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000126545: add [rax], al; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b33: add [rax], al; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e6c: add [rax], al; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000128233: add [rax], al; jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x00000000128400: add [rax], al; jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x000000001284e9: add [rax], al; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000130aad: add [rax], al; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x00000000132596: add [rax], al; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000133d92: add [rax], al; jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134bed: add [rax], al; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cf1: add [rax], al; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e07: add [rax], al; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ecf: add [rax], al; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c61: add [rax], al; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d77: add [rax], al; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e3f: add [rax], al; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136246: add [rax], al; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a6: add [rax], al; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x0000000013636f: add [rax], al; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x0000000013644f: add [rax], al; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x0000000013652f: add [rax], al; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d12d: add [rax], al; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1ca: add [rax], al; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d237: add [rax], al; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000143239: add [rax], al; jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000147f87: add [rax], al; jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fdc: add [rax], al; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x0000000014802f: add [rax], al; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488de: add [rax], al; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x00000000149c78: add [rax], al; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000014a364: add [rax], al; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5ad: add [rax], al; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014e580: add [rax], al; jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000015d309: add [rax], al; jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000015fbcf: add [rax], al; jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x00000000160150: add [rax], al; jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601ee: add [rax], al; jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160ce4: add [rax], al; jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x00000000167341: add [rax], al; jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x00000000167dce: add [rax], al; jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x00000000169043: add [rax], al; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x000000001690b9: add [rax], al; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169129: add [rax], al; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169199: add [rax], al; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691fa: add [rax], al; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x0000000016925e: add [rax], al; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c9: add [rax], al; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x0000000016934c: add [rax], al; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698aa: add [rax], al; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698ef: add [rax], al; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3c4: add [rax], al; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000016b42f: add [rax], al; jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4bf: add [rax], al; jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b588: add [rax], al; jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9ef: add [rax], al; jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba7f: add [rax], al; jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bc2f: add [rax], al; jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcbf: add [rax], al; jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca1f: add [rax], al; jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016caaf: add [rax], al; jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb3f: add [rax], al; jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbcf: add [rax], al; jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d295: add [rax], al; jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d309: add [rax], al; jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d36a: add [rax], al; jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3d8: add [rax], al; jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d44b: add [rax], al; jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x00000000172140: add [rax], al; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172357: add [rax], al; jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e7: add [rax], al; jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001739c4: add [rax], al; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a2c: add [rax], al; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000001750e4: add [rax], al; jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751db: add [rax], al; jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x00000000175376: add [rax], al; jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x0000000017544d: add [rax], al; jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x0000000017612c: add [rax], al; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000178289: add [rax], al; jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x0000000017830f: add [rax], al; jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x000000001af832: add [rax], al; kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x0000000004317e: add [rax], al; lea eax, [rdx-0x1]; mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x000000001b7993: add [rax], al; lea r10, [rip+0x2c3e8]; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x000000000c390e: add [rax], al; lea r11, [rip+0x10fb3d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a4e: add [rax], al; lea r11, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c036e: add [rax], al; lea r11, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000182e3d: add [rax], al; lea r11, [rip+0x6098a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b7b30: add [rax], al; lea r12, [rip+0x2c2b7]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x0000000017560a: add [rax], al; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000015df99: add [rax], al; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000b1539: add [rax], al; lea rax, [rax+rdx-0x1]; ret; 
0x000000001a4a1e: add [rax], al; lea rax, [rdi+0x2]; ret; 
0x000000001a4a2e: add [rax], al; lea rax, [rdi+0x3]; ret; 
0x000000001a4a3e: add [rax], al; lea rax, [rdi+0x4]; ret; 
0x000000001a4a4e: add [rax], al; lea rax, [rdi+0x5]; ret; 
0x000000001a4a5e: add [rax], al; lea rax, [rdi+0x6]; ret; 
0x000000001a499a: add [rax], al; lea rax, [rdi+0x7]; ret; 
0x000000001a4a6e: add [rax], al; lea rax, [rdi+0x8]; ret; 
0x000000001a4a7e: add [rax], al; lea rax, [rdi+0x9]; ret; 
0x000000001a4a8e: add [rax], al; lea rax, [rdi+0xa]; ret; 
0x000000001a4a9e: add [rax], al; lea rax, [rdi+0xb]; ret; 
0x000000001a4aae: add [rax], al; lea rax, [rdi+0xc]; ret; 
0x000000001a4abe: add [rax], al; lea rax, [rdi+0xd]; ret; 
0x000000001a4ace: add [rax], al; lea rax, [rdi+0xe]; ret; 
0x000000001a49ed: add [rax], al; lea rax, [rdi+0xf]; ret; 
0x000000000ba2dd: add [rax], al; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000d800b: add [rax], al; lea rax, [rdi-0x10]; ret; 
0x000000000d818e: add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000d817e: add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000d816e: add [rax], al; lea rax, [rdi-0xc]; ret; 
0x000000000a9606: add [rax], al; lea rax, [rip+0x105671]; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000ab0f6: add [rax], al; lea rax, [rip+0x106601]; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a8346: add [rax], al; lea rax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a8786: add [rax], al; lea rax, [rip+0x109a91]; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000a8806: add [rax], al; lea rax, [rip+0x10b671]; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a46: add [rax], al; lea rax, [rip+0x10b6f1]; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x0000000003888e: add [rax], al; lea rax, [rip+0x19fbd8]; ret; 
0x000000000469d2: add [rax], al; lea rax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x000000000c5b37: add [rax], al; lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db2: add [rax], al; lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c5622: add [rax], al; lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000c5456: add [rax], al; lea rax, [rip+0xeeee1]; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54d6: add [rax], al; lea rax, [rip+0xef0e1]; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c5706: add [rax], al; lea rax, [rip+0xef4f1]; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c5836: add [rax], al; lea rax, [rip+0xefcb1]; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x000000000a9577: add [rax], al; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x000000000b1656: add [rax], al; lea rax, [rip+0xfe0a1]; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x0000000007dda4: add [rax], al; lea rcx, [rip+0x1546a7]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000006256f: add [rax], al; lea rcx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000008a6a3: add [rax], al; lea rcx, [rip+0x18b954]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000175328: add [rax], al; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000091c92: add [rax], al; lea rdi, [r8+0x35c]; syscall; 
0x000000001758f4: add [rax], al; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000000919ed: add [rax], al; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x00000000094927: add [rax], al; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x00000000094af8: add [rax], al; lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x000000000947d6: add [rax], al; lea rdx, [rbx+0x638]; syscall; 
0x000000000a9d7c: add [rax], al; lea rdx, [rip+0x10512b]; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a993c: add [rax], al; lea rdx, [rip+0x10554b]; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a970c: add [rax], al; lea rdx, [rip+0x10579b]; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000c52d1: add [rax], al; lea rdx, [rip+0x10e2a6]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000a885c: add [rax], al; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x0000000007d4e3: add [rax], al; lea rdx, [rip+0x154d24]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d5c: add [rax], al; lea rdx, [rip+0x1ab8b]; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a991c: add [rax], al; lea rdx, [rip+0x1afab]; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96ec: add [rax], al; lea rdx, [rip+0x1b1fb]; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x0000000013479c: add [rax], al; lea rdx, [rip+0x6c0db]; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x0000000013466c: add [rax], al; lea rdx, [rip+0x6c22b]; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x0000000013453c: add [rax], al; lea rdx, [rip+0x6c35b]; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x0000000013473c: add [rax], al; lea rdx, [rip+0x7213b]; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x0000000013460c: add [rax], al; lea rdx, [rip+0x7228b]; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344dc: add [rax], al; lea rdx, [rip+0x723bb]; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x000000001346d4: add [rax], al; lea rdx, [rip+0x73623]; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a4: add [rax], al; lea rdx, [rip+0x73773]; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134474: add [rax], al; lea rdx, [rip+0x738a3]; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x0000000013477c: add [rax], al; lea rdx, [rip+0x7a6fb]; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x0000000013464c: add [rax], al; lea rdx, [rip+0x7a84b]; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x0000000013451c: add [rax], al; lea rdx, [rip+0x7a97b]; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x0000000015f24e: add [rax], al; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x000000000a839c: add [rax], al; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000a891e: add [rax], al; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x000000000a9bd0: add [rax], al; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b30: add [rax], al; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a9c20: add [rax], al; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b80: add [rax], al; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000f257b: add [rax], al; lea rdx, [rip+0xe22a4]; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a898c: add [rax], al; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000f0913: add [rax], al; lea rdx, [rip+0xe3d9c]; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9a9c: add [rax], al; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000ed54d: add [rax], al; lea rdx, [rip+0xe6f06]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed422: add [rax], al; lea rdx, [rip+0xe6f79]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d9c: add [rax], al; lea rdx, [rip+0xf6b0b]; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a995c: add [rax], al; lea rdx, [rip+0xf6f2b]; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a972c: add [rax], al; lea rdx, [rip+0xf717b]; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a953b: add [rax], al; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9d3c: add [rax], al; lea rdx, [rip+0xfcb6b]; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a98fc: add [rax], al; lea rdx, [rip+0xfcf8b]; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96cc: add [rax], al; lea rdx, [rip+0xfd1db]; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a9cd4: add [rax], al; lea rdx, [rip+0xfe053]; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a9894: add [rax], al; lea rdx, [rip+0xfe473]; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a9664: add [rax], al; lea rdx, [rip+0xfe6c3]; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000001344fc: add [rax], al; lea rdx, [rip-0x6fc25]; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x0000000013462c: add [rax], al; lea rdx, [rip-0x6fd55]; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x0000000013475c: add [rax], al; lea rdx, [rip-0x6fea5]; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x00000000119aa6: add [rax], al; lea rdx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000001685cd: add [rax], al; lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168811: add [rax], al; lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000094a1e: add [rax], al; lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x0000000009498f: add [rax], al; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a0bb9: add [rax], al; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x00000000101c02: add [rax], al; lea rsi, [rip+0xd3109]; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x000000000761c1: add [rax], al; lea rsi, [rip-0x9da]; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007bc3f: add [rax], al; lea rsi, [rip-0xc08]; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000008aa0f: add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000085895: add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000007f85b: add [rax], al; lea rsi, [rsp+0x8]; call rax; 
0x00000000090de5: add [rax], al; lock cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x00000000090f7b: add [rax], al; lock cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x00000000096562: add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x000000000416c6: add [rax], al; loopne 0x0000000000041709; or rax, rdx; movq xmm0, rax; ret; 
0x0000000003f346: add [rax], al; mov [rax+0x4], ebx; pop rbx; ret; 
0x00000000162d3b: add [rax], al; mov [rax+0x6c], dx; mov eax, 0x1; ret; 
0x0000000006209c: add [rax], al; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x000000001a122e: add [rax], al; mov [rax], di; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000000b158e: add [rax], al; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14ae: add [rax], al; mov [rax], ecx; ret; 
0x000000000c515e: add [rax], al; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000000903e8: add [rax], al; mov [rax], rdx; pop rbx; ret; 
0x000000000b155e: add [rax], al; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x00000000162edc: add [rax], al; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000160904: add [rax], al; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x0000000018d6de: add [rax], al; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6ce: add [rax], al; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d6ae: add [rax], al; mov [rcx], edx; ret; 
0x0000000018d73e: add [rax], al; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d74e: add [rax], al; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x0000000018d71e: add [rax], al; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x0000000018d75e: add [rax], al; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000018d70e: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x0000000018d72e: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d76e: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000018d6ee: add [rax], al; mov [rcx], rdx; ret; 
0x0000000009af84: add [rax], al; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x00000000090b62: add [rax], al; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000001576d1: add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x000000000928b6: add [rax], al; mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x0000000016cc6f: add [rax], al; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x00000000090b18: add [rax], al; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000000975e0: add [rax], al; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000141e1c: add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x000000000c0cbe: add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000c12ae: add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000bfc6e: add [rax], al; mov [rdi], dh; ret; 
0x000000001b0a2e: add [rax], al; mov [rdi], dl; ret; 
0x0000000019f8ae: add [rax], al; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000019f89e: add [rax], al; mov [rdi], dx; vzeroupper; ret; 
0x000000000c0cae: add [rax], al; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000001b0a5e: add [rax], al; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000000b1109: add [rax], al; mov [rdi], rax; mov rax, r9; ret; 
0x000000000c0d1e: add [rax], al; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d2e: add [rax], al; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000c0cfe: add [rax], al; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000c0cee: add [rax], al; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000c0d0e: add [rax], al; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000001b0a6e: add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f8ce: add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000c0cce: add [rax], al; mov [rdi], rdx; ret; 
0x0000000009c576: add [rax], al; mov [rdx+0x8], rax; ret; 
0x0000000007f598: add [rax], al; mov [rdx+0xe0], rcx; ret; 
0x000000000e5646: add [rax], al; mov [rdx], edi; mov eax, r8d; ret; 
0x000000000a0fa0: add [rax], al; mov [rip+0x1783c7], rax; ret; 
0x000000000a0fc0: add [rax], al; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f80: add [rax], al; mov [rip+0x1783df], rax; ret; 
0x000000000a0f60: add [rax], al; mov [rip+0x1783f7], rax; ret; 
0x0000000009e5df: add [rax], al; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x00000000051690: add [rax], al; mov [rip+0x1ca24d], al; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000015edb8: add [rax], al; mov [rsi+0x10], rax; ret; 
0x00000000046b57: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046ba6: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x0000000015edc7: add [rax], al; mov [rsi+0x8], eax; ret; 
0x0000000015ed84: add [rax], al; mov [rsi+0x8], rax; ret; 
0x00000000046be8: add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x0000000009b781: add [rax], al; mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x000000000961ea: add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x0000000012242d: add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000056578: add [rax], al; mov [rsi], rdx; ret; 
0x00000000164d69: add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000085979: add [rax], al; mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000115402: add [rax], al; mov [rsp+0x10], rdi; mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x0000000011319e: add [rax], al; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000a01d7: add [rax], al; mov [rsp+0x38], r12d; syscall; 
0x000000000d9804: add [rax], al; mov [rsp+0x38], rdx; call r12; 
0x000000000d97fc: add [rax], al; mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x000000001453f9: add [rax], al; mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r15; call rax; 
0x00000000050c6b: add [rax], al; mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x00000000114c91: add [rax], al; mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x00000000169546: add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x00000000041136: add [rax], al; mov [rsp-0x10], ax; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000018f9ee: add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x0000000018b6be: add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x000000000f41ae: add [rax], al; mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000f41be: add [rax], al; mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x00000000090af0: add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x000000000b1536: add [rax], al; mov byte ptr [rax], 0x0; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1486: add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x00000000128b96: add [rax], al; mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x0000000014482e: add [rax], al; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x000000001b2a53: add [rax], al; mov byte ptr [rdi], 0x0; ret; 
0x0000000019ea23: add [rax], al; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000007533c: add [rax], al; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x000000000bfc8e: add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000918c1: add [rax], al; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000157045: add [rax], al; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x00000000156f2a: add [rax], al; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000128b8c: add [rax], al; mov dword ptr [rbp-0x7d0], 0x0; mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x00000000099f7d: add [rax], al; mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000015f64a: add [rax], al; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000008beac: add [rax], al; mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret; 
0x00000000162d5e: add [rax], al; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000056650: add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000a0bfc: add [rax], al; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x0000000015ee3e: add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee2e: add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee1e: add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x0000000016901d: add [rax], al; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001691d9: add [rax], al; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000169235: add [rax], al; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x000000001691e1: add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000016923d: add [rax], al; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000169245: add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x0000000007c6ce: add [rax], al; mov dword ptr [rsp+0x28], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000169025: add [rax], al; mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169329: add [rax], al; mov dword ptr [rsp+0x30], 0x2; movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x0000000007ac4b: add [rax], al; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007ac43: add [rax], al; mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c646: add [rax], al; mov dword ptr [rsp+0x3c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c36: add [rax], al; mov dword ptr [rsp+0x40], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007c6fe: add [rax], al; mov dword ptr [rsp+0x48], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000977a6: add [rax], al; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x00000000075334: add [rax], al; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000076c06: add [rax], al; mov dword ptr [rsp+0x50], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007532c: add [rax], al; mov dword ptr [rsp+0x58], 0x0; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000076b16: add [rax], al; mov dword ptr [rsp+0x5c], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007ac3b: add [rax], al; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000169402: add [rax], al; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016940d: add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016954e: add [rax], al; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x000000000c12be: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c20fe: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000c096e: add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000001426d5: add [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000001426ab: add [rax], al; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000000620be: add [rax], al; mov eax, 0x10; ret; 
0x0000000011a248: add [rax], al; mov eax, 0x10; syscall; 
0x0000000009492e: add [rax], al; mov eax, 0x111; syscall; 
0x00000000125cb7: add [rax], al; mov eax, 0x119; syscall; 
0x00000000128ac3: add [rax], al; mov eax, 0x14; syscall; 
0x00000000094aff: add [rax], al; mov eax, 0x14e; syscall; 
0x0000000009276e: add [rax], al; mov eax, 0x16; cmove eax, edx; ret; 
0x00000000091236: add [rax], al; mov eax, 0x16; ret; 
0x000000000e55cc: add [rax], al; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000d7bae: add [rax], al; mov eax, 0x1; jg short 0x00000000000d7bb9; neg eax; ret; 
0x000000001a684e: add [rax], al; mov eax, 0x1; jg short 0x00000000001a6860; neg eax; ret; 
0x00000000056565: add [rax], al; mov eax, 0x1; ret; 
0x00000000125d87: add [rax], al; mov eax, 0x1b9; syscall; 
0x000000000ecfea: add [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000056761: add [rax], al; mov eax, 0x2; ret; 
0x000000000eabbe: add [rax], al; mov eax, 0x38; syscall; 
0x000000000961f6: add [rax], al; mov eax, 0x3; ret; 
0x00000000119ab0: add [rax], al; mov eax, 0x48; syscall; 
0x000000000ecf00: add [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000042787: add [rax], al; mov eax, 0x7f; syscall; 
0x000000000431af: add [rax], al; mov eax, 0x80; syscall; 
0x000000000427d3: add [rax], al; mov eax, 0x82; syscall; 
0x000000000947d1: add [rax], al; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x00000000126336: add [rax], al; mov eax, 0x95; syscall; 
0x0000000005399c: add [rax], al; mov eax, 0x9e; syscall; 
0x0000000009af3e: add [rax], al; mov eax, 0xb; ret; 
0x000000000968ee: add [rax], al; mov eax, 0xba; syscall; 
0x000000000912d2: add [rax], al; mov eax, 0xca; syscall; 
0x00000000091333: add [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000009367b: add [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000009b5a8: add [rax], al; mov eax, 0xcb; syscall; 
0x00000000095d60: add [rax], al; mov eax, 0xcc; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000095db3: add [rax], al; mov eax, 0xcc; syscall; 
0x000000000425ea: add [rax], al; mov eax, 0xd; syscall; 
0x000000000e56ee: add [rax], al; mov eax, 0xe4; syscall; 
0x000000000e58b6: add [rax], al; mov eax, 0xe6; syscall; 
0x0000000009498a: add [rax], al; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a0bb4: add [rax], al; mov eax, 0xe; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x00000000053a08: add [rax], al; mov eax, 0xe; syscall; 
0x00000000142694: add [rax], al; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000001724c0: add [rax], al; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000000407ec: add [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000142cbe: add [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000002a53c: add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000012216e: add [rax], al; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x00000000046065: add [rax], al; mov eax, [rax+0x58]; ret; 
0x00000000192dce: add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x000000000d7ace: add [rax], al; mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b2e: add [rax], al; mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7a6e: add [rax], al; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x0000000009b7d3: add [rax], al; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000119fb3: add [rax], al; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x000000001367b6: add [rax], al; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000eac8e: add [rax], al; mov eax, edx; syscall; 
0x00000000114564: add [rax], al; mov eax, r12d; pop r12; pop r13; ret; 
0x00000000174c63: add [rax], al; mov eax, r12d; pop r12; ret; 
0x00000000167772: add [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000001528f5: add [rax], al; mov eax, r12d; syscall; 
0x00000000091c84: add [rax], al; mov eax, r13d; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x0000000009eb91: add [rax], al; mov eax, r15d; mov r10d, 0x8; syscall; 
0x0000000009ebc7: add [rax], al; mov eax, r15d; syscall; 
0x0000000011d79d: add [rax], al; mov eax, r8d; add rsp, 0x8; ret; 
0x0000000003572b: add [rax], al; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000042c70: add [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000891d4: add [rax], al; mov eax, r8d; ret; 
0x000000000893e3: add [rax], al; mov eax, r9d; syscall; 
0x000000000bfcae: add [rax], al; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x00000000095332: add [rax], al; mov edi, 0x1; mov eax, 0xe; syscall; 
0x00000000053ecd: add [rax], al; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000005a12f: add [rax], al; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x00000000141288: add [rax], al; mov edi, [rbp-0x60]; syscall; 
0x000000000947cb: add [rax], al; mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000001410ae: add [rax], al; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x000000000a04e0: add [rax], al; mov edi, [rsp+0x10]; syscall; 
0x0000000011b95a: add [rax], al; mov edi, [rsp+0x1c]; syscall; 
0x00000000125d10: add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x000000000a0423: add [rax], al; mov edi, [rsp+0x8]; syscall; 
0x00000000091b45: add [rax], al; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x0000000004543b: add [rax], al; mov edi, ebp; call rax; 
0x00000000131966: add [rax], al; mov edi, r13d; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x000000000825e6: add [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000076be7: add [rax], al; mov edx, 0x1; jmp rsi; 
0x0000000008c967: add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000867c4: add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008ca15: add [rax], al; mov edx, 0x1; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x000000000ed074: add [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecf68: add [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000125e4a: add [rax], al; mov edx, 0x8; syscall; 
0x00000000162d4e: add [rax], al; mov edx, [rdi]; mov [rax], edx; mov eax, 0x1; ret; 
0x000000000bfc9e: add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000085b84: add [rax], al; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008ac54: add [rax], al; mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x00000000099945: add [rax], al; mov esi, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000015ded4: add [rax], al; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000011a243: add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000011a274: add [rax], al; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000912cd: add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000095dae: add [rax], al; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000177e0d: add [rax], al; mov esi, 0x80; syscall; 
0x0000000009138a: add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528f0: add [rax], al; mov esi, 0x81; mov eax, r12d; syscall; 
0x000000001644a4: add [rax], al; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000083d4e: add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000008ea35: add [rax], al; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008b748: add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008da1f: add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008e206: add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000092b19: add [rax], al; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000091b4c: add [rax], al; mov esi, [r9+0x10]; syscall; 
0x0000000016669e: add [rax], al; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x0000000009446b: add [rax], al; mov esi, [rsp+0x18]; xor sil, 0x81; syscall; 
0x0000000009403c: add [rax], al; mov esi, [rsp+0x8]; xor sil, 0x81; syscall; 
0x0000000004548c: add [rax], al; mov esi, ebp; mov rdi, r13; call rax; 
0x00000000092ef1: add [rax], al; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x00000000093bd4: add [rax], al; mov esi, ebx; xor sil, 0x81; syscall; 
0x00000000083a04: add [rax], al; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000091268: add [rax], al; mov fs:[0x2f8], rdi; ret; 
0x00000000090be5: add [rax], al; mov fs:[0x300], rdi; ret; 
0x00000000045d93: add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000155022: add [rax], al; mov fs:[rdx], eax; pop rbx; ret; 
0x0000000003a40d: add [rax], al; mov fs:[rdx], rax; ret; 
0x000000001290bc: add [rax], al; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x0000000008e6bd: add [rax], al; mov qword ptr [rax+0x8], 0x0; ret; 
0x0000000015703a: add [rax], al; mov qword ptr [rax+0xa0], 0x0; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x0000000015b96c: add [rax], al; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x0000000015b974: add [rax], al; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001576bb: add [rax], al; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001576c6: add [rax], al; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x0000000016d54a: add [rax], al; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000011959e: add [rax], al; mov qword ptr [rdi], 0x0; ret; 
0x0000000011db24: add [rax], al; mov qword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000011c6c7: add [rax], al; mov qword ptr [rip+0x104b4c], 0x0; add rsp, 0x8; ret; 
0x0000000008f59d: add [rax], al; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x000000001290c4: add [rax], al; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x00000000128cf6: add [rax], al; mov qword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x00000000128cc1: add [rax], al; mov qword ptr [rip+0xf0772], 0x3; add rsp, 0x8; ret; 
0x00000000125a90: add [rax], al; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x0000000015ee4b: add [rax], al; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000015edb0: add [rax], al; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x000000000923b6: add [rax], al; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000143671: add [rax], al; mov qword ptr [rsp], 0x0; call rax; 
0x00000000174c6e: add [rax], al; mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x000000000eb165: add [rax], al; mov r10, r12; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000425e4: add [rax], al; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000053a41: add [rax], al; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000149b5e: add [rax], al; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000010b1f2: add [rax], al; mov r8, rax; add r9, r13; call r15; 
0x000000000891ce: add [rax], al; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000014337e: add [rax], al; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x0000000015236e: add [rax], al; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000009056c: add [rax], al; mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x0000000011a279: add [rax], al; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000427fe: add [rax], al; mov r8d, eax; mov eax, 0x82; syscall; 
0x000000000d83ee: add [rax], al; mov rax, 0x2; ret; 
0x000000000d83fe: add [rax], al; mov rax, 0x3; ret; 
0x000000000d840e: add [rax], al; mov rax, 0x4; ret; 
0x000000000d841e: add [rax], al; mov rax, 0x5; ret; 
0x000000000d842e: add [rax], al; mov rax, 0x6; ret; 
0x000000000d843e: add [rax], al; mov rax, 0x7; ret; 
0x000000001432ee: add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000004244c: add [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000163689: add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000166161: add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000086092: add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x0000000015f6c0: add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000008fe9e: add [rax], al; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x0000000008fee6: add [rax], al; mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x000000000904a5: add [rax], al; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x000000001753b5: add [rax], al; mov rax, [rax+0x58]; add rsp, 0x70; pop rbx; jmp rax; 
0x00000000175495: add [rax], al; mov rax, [rax+0x60]; add rsp, 0x30; pop rbx; jmp rax; 
0x00000000122416: add [rax], al; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000122496: add [rax], al; mov rax, [rax+0x60]; ret; 
0x0000000008e64d: add [rax], al; mov rax, [rax+0x68]; test rax, rax; jne short 0x000000000008e648; ret; 
0x0000000008feed: add [rax], al; mov rax, [rax+0x8]; jmp rax; 
0x00000000045ea8: add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x0000000016458e: add [rax], al; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001695e0: add [rax], al; mov rax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x0000000015eeef: add [rax], al; mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000016957e: add [rax], al; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000169439: add [rax], al; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000015d532: add [rax], al; mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000017510e: add [rax], al; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000166706: add [rax], al; mov rax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x00000000165c67: add [rax], al; mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000162ef1: add [rax], al; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000001673c1: add [rax], al; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000192dde: add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000009e07e: add [rax], al; mov rax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x000000000892b6: add [rax], al; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x00000000089186: add [rax], al; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x0000000016b31e: add [rax], al; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000016746f: add [rax], al; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000016c96e: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016c97e: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016b53e: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000016751e: add [rax], al; mov rax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000016be96: add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016ca2e: add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000015fc7e: add [rax], al; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016c5d6: add [rax], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000015fbde: add [rax], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000892a3: add [rax], al; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000089173: add [rax], al; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000118d06: add [rax], al; mov rax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000114296: add [rax], al; mov rax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5786: add [rax], al; mov rax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e571e: add [rax], al; mov rax, [rip+0x1336e9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000c52fe: add [rax], al; mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000a761e: add [rax], al; mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x000000000a410e: add [rax], al; mov rax, [rip+0x174cf9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009dfae: add [rax], al; mov rax, [rip+0x17ae59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cd9e: add [rax], al; mov rax, [rip+0x17c069]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009c06e: add [rax], al; mov rax, [rip+0x17cd99]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000897ce: add [rax], al; mov rax, [rip+0x18f639]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000046d8e: add [rax], al; mov rax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000043086: add [rax], al; mov rax, [rip+0x1d5d81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f66: add [rax], al; mov rax, [rip+0x1d5ea1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f1e: add [rax], al; mov rax, [rip+0x1d5ee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ece: add [rax], al; mov rax, [rip+0x1d5f39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424ee: add [rax], al; mov rax, [rip+0x1d6919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004077e: add [rax], al; mov rax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000039bee: add [rax], al; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x000000001760d6: add [rax], al; mov rax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000168c1e: add [rax], al; mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b1e: add [rax], al; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168b9e: add [rax], al; mov rax, [rip+0xb0421]; pop rbx; ret; 
0x00000000168aa6: add [rax], al; mov rax, [rip+0xb0499]; pop rbx; ret; 
0x0000000015506e: add [rax], al; mov rax, [rip+0xc3d99]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x000000001360be: add [rax], al; mov rax, [rip+0xe2d49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267ee: add [rax], al; mov rax, [rip+0xf2619]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126786: add [rax], al; mov rax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012671e: add [rax], al; mov rax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266be: add [rax], al; mov rax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012665e: add [rax], al; mov rax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012644e: add [rax], al; mov rax, [rip+0xf29b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001217e6: add [rax], al; mov rax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012942e: add [rax], al; mov rax, [rip+0xf81e1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000011bfc6: add [rax], al; mov rax, [rip+0xfce41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009e77e: add [rax], al; mov rax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000012adde: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012ad5e: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a95e: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012acde: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012aade: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a9de: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012abde: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a8de: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012ac5e: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012ab5e: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a85e: add [rax], al; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x0000000003889e: add [rax], al; mov rax, [rsi+rax*8+0x80]; ret; 
0x00000000174c77: add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000015ea85: add [rax], al; mov rax, [rsp+0x28]; call rax; 
0x0000000015f2b6: add [rax], al; mov rax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000015d2d7: add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001ba253: add [rax], al; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000083b97: add [rax], al; mov rax, [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x000000001758eb: add [rax], al; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000004078c: add [rax], al; mov rax, r10; ret; 
0x0000000009d38e: add [rax], al; mov rax, r12; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000d8d2f: add [rax], al; mov rax, r12; pop r12; ret; 
0x00000000061175: add [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x000000001563ca: add [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x000000001726d7: add [rax], al; mov rax, r8; pop rbp; ret; 
0x00000000121f56: add [rax], al; mov rax, r8; ret; 
0x000000000c0f3e: add [rax], al; mov rax, rdi; ret; 
0x000000001a084e: add [rax], al; mov rax, rdi; vzeroupper; ret; 
0x0000000007c7a6: add [rax], al; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076ce6: add [rax], al; mov rbx, [rsp+0x70]; jmp rsi; 
0x000000000761d0: add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000007ba0b: add [rax], al; mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c66e: add [rax], al; mov rbx, rcx; mov ebp, 0x1; xor r8d, r8d; jmp rsi; 
0x00000000076c5e: add [rax], al; mov rbx, rcx; mov r15d, 0x1; jmp rsi; 
0x0000000007c6ee: add [rax], al; mov rbx, rcx; mov r8d, 0x1; jmp rsi; 
0x00000000076bde: add [rax], al; mov rbx, rdx; mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x0000000007561e: add [rax], al; mov rbx, rdx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x000000000bfcee: add [rax], al; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000b1546: add [rax], al; mov rcx, [rsp+0x10]; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000174c1a: add [rax], al; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x00000000155110: add [rax], al; mov rcx, r15; call rbp; 
0x0000000015d503: add [rax], al; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000011fea1: add [rax], al; mov rdi, [r13]; call rbx; 
0x0000000009029e: add [rax], al; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000009006e: add [rax], al; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x360]; 
0x000000000782e6: add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2a8: add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000078d1d: add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000079450: add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007973e: add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000000a798e: add [rax], al; mov rdi, [rbx+0x48]; call rax; 
0x000000000949a6: add [rax], al; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000001134ee: add [rax], al; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000a774a: add [rax], al; mov rdi, [rdi+0x48]; mov rsi, r12; call rax; 
0x00000000043815: add [rax], al; mov rdi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000015f670: add [rax], al; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000015f654: add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000015f83f: add [rax], al; mov rdi, r12; call qword ptr [rbx]; 
0x000000000a78be: add [rax], al; mov rdi, r12; call rax; 
0x0000000009ad77: add [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000016a20b: add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000009a539: add [rax], al; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093e71: add [rax], al; mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001666b9: add [rax], al; mov rdi, r15; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000085c5e: add [rax], al; mov rdi, r15; call qword ptr [r13+0x80]; 
0x000000000841c7: add [rax], al; mov rdi, r15; call qword ptr [rax+0x20]; 
0x000000001666a4: add [rax], al; mov rdi, r15; call qword ptr [rax+0x28]; 
0x00000000085e4c: add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000094417: add [rax], al; mov rdi, r15; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091bf5: add [rax], al; mov rdi, r15; mov eax, r9d; syscall; 
0x00000000093a1f: add [rax], al; mov rdi, r15; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009994a: add [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000092f6a: add [rax], al; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000090106: add [rax], al; mov rdi, rax; call qword ptr [rbx+0x360]; 
0x00000000163690: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015eef8: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000008b80a: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000007f09a: add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000167cce: add [rax], al; mov rdi, rbp; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015ded9: add [rax], al; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000164468: add [rax], al; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000009904b: add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000099eee: add [rax], al; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000009b113: add [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008c96c: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000008bf73: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000087797: add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008e156: add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000867c9: add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007e180: add [rax], al; mov rdi, rbx; call r8; 
0x0000000007dadf: add [rax], al; mov rdi, rbx; call rax; 
0x00000000169606: add [rax], al; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x00000000090407: add [rax], al; mov rdx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x0000000009051a: add [rax], al; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000008cca7: add [rax], al; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000903e1: add [rax], al; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x000000001675ae: add [rax], al; mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x0000000007f591: add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000bfcde: add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b1476: add [rax], al; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x00000000127926: add [rax], al; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000012e5ef: add [rax], al; mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000b13ae: add [rax], al; mov rdx, [rsp+0x18]; mov [rax], rdx; add rax, rcx; ret; 
0x00000000072dbc: add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000080048: add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081756: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x000000000815f1: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000118e13: add [rax], al; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000007498a: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739cf: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000969a7: add [rax], al; mov rdx, r14; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f8b: add [rax], al; mov rdx, r14; lea rsi, [rip+0x5cac9]; syscall; 
0x0000000007284e: add [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007afe1: add [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000007707d: add [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f2: add [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007603c: add [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000951bd: add [rax], al; mov rdx, r15; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000729e6: add [rax], al; mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013b5b8: add [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000075d1a: add [rax], al; mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000076588: add [rax], al; mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000007cb6e: add [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bda9: add [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x00000000096834: add [rax], al; mov rdx, rbp; lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x0000000008ca52: add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x00000000073790: add [rax], al; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000001190dd: add [rax], al; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000119b36: add [rax], al; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000012002e: add [rax], al; mov rsi, [r14]; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000094784: add [rax], al; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000001134e7: add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000001193b8: add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000162ef8: add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000153a2b: add [rax], al; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x0000000007aaf8: add [rax], al; mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x000000000751bb: add [rax], al; mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000d9568: add [rax], al; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x0000000012f750: add [rax], al; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x000000000807b3: add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008b40a: add [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000015d5e7: add [rax], al; mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000012ea6c: add [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000013ef1e: add [rax], al; mov rsi, r15; mov rdi, r12; call rbp; 
0x0000000009bc8f: add [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000128a33: add [rax], al; mov rsi, r9; mov edi, r12d; mov eax, r10d; syscall; 
0x00000000174650: add [rax], al; mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000166cca: add [rax], al; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000130f8c: add [rax], al; mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000893db: add [rax], al; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x0000000011d29e: add [rax], al; mov rsi, rcx; mov rax, rdi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000008ba2c: add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008a7b6: add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x0000000007ebe5: add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000005a16e: add [rax], al; mov rsp, rdx; ret; 
0x00000000167452: add [rax], al; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x000000000c0d3e: add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000c0d4e: add [rax], al; movdqu [rdi], xmm0; ret; 
0x00000000162cce: add [rax], al; movdqu xmm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x0000000015edfe: add [rax], al; movdqu xmm0, [rdi+0x38]; mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x000000000bfd6e: add [rax], al; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000001663b6: add [rax], al; movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad6: add [rax], al; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162cde: add [rax], al; movdqu xmm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x00000000165aee: add [rax], al; movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x00000000156f22: add [rax], al; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000001663ce: add [rax], al; movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x000000001139f7: add [rax], al; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000bc770: add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000001803c9: add [rax], al; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000000379ca: add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; notrack jmp rcx; 
0x0000000007305d: add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x0000000007d201: add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000142d16: add [rax], al; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x00000000077746: add [rax], al; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000001563c2: add [rax], al; movups [r8+0xc8], xmm0; mov rax, r8; add rsp, 0x8; ret; 
0x00000000084418: add [rax], al; movups [rax+0x40], xmm0; pop rbx; ret; 
0x00000000156f34: add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x00000000133336: add [rax], al; movups [rbp-0x78], xmm7; call rax; 
0x0000000008d863: add [rax], al; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x00000000165ae0: add [rax], al; movups [rcx], xmm1; ret; 
0x00000000165af8: add [rax], al; movups [rcx], xmm2; ret; 
0x000000001663f8: add [rax], al; movups [rcx], xmm3; ret; 
0x000000001663d8: add [rax], al; movups [rcx], xmm4; ret; 
0x000000001663e7: add [rax], al; movups [rdi+0x20], xmm2; ret; 
0x00000000165acb: add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x000000000c500a: add [rax], al; movups [rdi+rdx-0x10], xmm0; movups [rdi], xmm0; ret; 
0x00000000155b80: add [rax], al; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000113963: add [rax], al; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x0000000011396f: add [rax], al; movups [rsi+0x70], xmm7; ret; 
0x000000001069ec: add [rax], al; movups [rsi+0x8], xmm0; ret; 
0x0000000015edd9: add [rax], al; movups [rsi+0x8], xmm1; ret; 
0x00000000162bee: add [rax], al; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000016902d: add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169331: add [rax], al; movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x00000000169559: add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x000000001695ef: add [rax], al; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x000000000c490c: add [rax], al; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000001b30c9: add [rax], al; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001b310e: add [rax], al; movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x000000001b2f19: add [rax], al; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001a5d5e: add [rax], al; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x000000001a5d4e: add [rax], al; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001a5d3e: add [rax], al; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d2e: add [rax], al; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d1e: add [rax], al; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d0e: add [rax], al; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x000000000b48ee: add [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001b13ae: add [rax], al; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b091e: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000182dfe: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000019f7ae: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x000000001b092e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001b2c5e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000182d8e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000019e37e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x000000000519bb: add [rax], al; movzx esi, sil; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x0000000009122e: add [rax], al; neg eax; ret; 
0x0000000002a521: add [rax], al; neg eax; sbb eax, eax; add rsp, 0x8; ret; 
0x0000000016a129: add [rax], al; nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x00000000042749: add [rax], al; nop [rax+rax]; endbr64; mov eax, 0x3e; syscall; 
0x00000000128459: add [rax], al; nop [rax+rax]; endbr64; mov eax, 0x40; syscall; 
0x00000000125bd9: add [rax], al; nop [rax+rax]; endbr64; mov eax, 0xa6; syscall; 
0x00000000125af9: add [rax], al; nop [rax+rax]; endbr64; mov eax, 0xad; syscall; 
0x00000000134415: add [rax], al; nop [rax+rax]; endbr64; ret; 
0x000000001b2b84: add [rax], al; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000134978: add [rax], al; nop [rax+rax]; ret; 
0x000000001b1754: add [rax], al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000000b4dfb: add [rax], al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000001b3eca: add [rax], al; nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x00000000125e7a: add [rax], al; nop [rax]; endbr64; mov eax, 0x122; syscall; 
0x0000000011525a: add [rax], al; nop [rax]; endbr64; mov eax, 0x125; syscall; 
0x0000000016b3db: add [rax], al; nop [rax]; endbr64; mov eax, 0x1; ret; 
0x0000000012858a: add [rax], al; nop [rax]; endbr64; mov eax, 0x1e; syscall; 
0x000000000dcdab: add [rax], al; nop [rax]; endbr64; mov eax, 0x24; syscall; 
0x00000000127caa: add [rax], al; nop [rax]; endbr64; mov eax, 0x30; syscall; 
0x000000001277ca: add [rax], al; nop [rax]; endbr64; mov eax, 0x32; syscall; 
0x0000000011612a: add [rax], al; nop [rax]; endbr64; mov eax, 0x56; syscall; 
0x0000000011a4fa: add [rax], al; nop [rax]; endbr64; mov eax, 0x62; syscall; 
0x00000000125f4a: add [rax], al; nop [rax]; endbr64; mov eax, 0x87; syscall; 
0x0000000011a92a: add [rax], al; nop [rax]; endbr64; mov eax, 0x8d; syscall; 
0x00000000126b8a: add [rax], al; nop [rax]; endbr64; mov eax, 0x9e; syscall; 
0x000000000a038a: add [rax], al; nop [rax]; endbr64; mov eax, 0xf5; syscall; 
0x0000000017503b: add [rax], al; nop [rax]; endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x0000000009d4eb: add [rax], al; nop [rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x00000000099c1a: add [rax], al; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000092b5b: add [rax], al; nop [rax]; endbr64; xor eax, eax; ret; 
0x0000000018d67a: add [rax], al; nop [rax]; mov [rcx], dl; ret; 
0x000000000c0c5a: add [rax], al; nop [rax]; mov [rdi], dl; ret; 
0x000000000c095a: add [rax], al; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x00000000092e62: add [rax], al; nop [rax]; mov eax, 0x16; ret; 
0x0000000018258a: add [rax], al; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x0000000004251a: add [rax], al; nop [rax]; mov rax, 0xf; syscall; 
0x000000000bf5ca: add [rax], al; nop [rax]; mov rax, rdi; ret; 
0x0000000017c82a: add [rax], al; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x0000000018271a: add [rax], al; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x0000000018269a: add [rax], al; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000000c094a: add [rax], al; nop [rax]; ret; 
0x000000001b18fb: add [rax], al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x00000000199fba: add [rax], al; nop [rax]; xor eax, eax; ret; 
0x000000000b512b: add [rax], al; nop [rax]; xor eax, eax; ret; 
0x0000000015349f: add [rax], al; nop [rax]; xor eax, eax; ret; 
0x0000000019d94b: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a21ca: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000094ad7: add [rax], al; nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000011462d: add [rax], al; nop; endbr64; mov eax, 0x102; syscall; 
0x0000000011627d: add [rax], al; nop; endbr64; mov eax, 0x107; syscall; 
0x000000001161bd: add [rax], al; nop; endbr64; mov eax, 0x10a; syscall; 
0x00000000126fbd: add [rax], al; nop; endbr64; mov eax, 0x110; syscall; 
0x0000000012701d: add [rax], al; nop; endbr64; mov eax, 0x11b; syscall; 
0x00000000126ced: add [rax], al; nop; endbr64; mov eax, 0x123; syscall; 
0x000000001151ed: add [rax], al; nop; endbr64; mov eax, 0x124; syscall; 
0x00000000126e0d: add [rax], al; nop; endbr64; mov eax, 0x126; syscall; 
0x0000000012704d: add [rax], al; nop; endbr64; mov eax, 0x12c; syscall; 
0x000000001270dd: add [rax], al; nop; endbr64; mov eax, 0x13f; syscall; 
0x0000000012710d: add [rax], al; nop; endbr64; mov eax, 0x14a; syscall; 
0x0000000012713d: add [rax], al; nop; endbr64; mov eax, 0x14b; syscall; 
0x00000000108c9d: add [rax], al; nop; endbr64; mov eax, 0x18; syscall; 
0x0000000011ed4d: add [rax], al; nop; endbr64; mov eax, 0x1b; syscall; 
0x000000001151bd: add [rax], al; nop; endbr64; mov eax, 0x21; syscall; 
0x00000000127cdd: add [rax], al; nop; endbr64; mov eax, 0x29; syscall; 
0x0000000012775d: add [rax], al; nop; endbr64; mov eax, 0x33; syscall; 
0x0000000011d12d: add [rax], al; nop; endbr64; mov eax, 0x4c; syscall; 
0x0000000011534d: add [rax], al; nop; endbr64; mov eax, 0x51; syscall; 
0x000000001162ad: add [rax], al; nop; endbr64; mov eax, 0x54; syscall; 
0x000000001161ed: add [rax], al; nop; endbr64; mov eax, 0x59; syscall; 
0x0000000011442d: add [rax], al; nop; endbr64; mov eax, 0x5b; syscall; 
0x00000000115c3d: add [rax], al; nop; endbr64; mov eax, 0x5d; syscall; 
0x00000000115c6d: add [rax], al; nop; endbr64; mov eax, 0x5e; syscall; 
0x000000000ea39d: add [rax], al; nop; endbr64; mov eax, 0x64; syscall; 
0x00000000126e6d: add [rax], al; nop; endbr64; mov eax, 0x67; syscall; 
0x000000000ec36d: add [rax], al; nop; endbr64; mov eax, 0x6d; syscall; 
0x000000000ec39d: add [rax], al; nop; endbr64; mov eax, 0x6f; syscall; 
0x000000000ec3fd: add [rax], al; nop; endbr64; mov eax, 0x70; syscall; 
0x000000000ec42d: add [rax], al; nop; endbr64; mov eax, 0x76; syscall; 
0x000000000ec45d: add [rax], al; nop; endbr64; mov eax, 0x78; syscall; 
0x00000000125c6d: add [rax], al; nop; endbr64; mov eax, 0x7b; syscall; 
0x00000000126c2d: add [rax], al; nop; endbr64; mov eax, 0x7e; syscall; 
0x00000000126fed: add [rax], al; nop; endbr64; mov eax, 0x86; syscall; 
0x00000000108c0d: add [rax], al; nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000108c3d: add [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x00000000108c6d: add [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x00000000108ccd: add [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000108cfd: add [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x00000000108d2d: add [rax], al; nop; endbr64; mov eax, 0x94; syscall; 
0x0000000011eddd: add [rax], al; nop; endbr64; mov eax, 0x96; syscall; 
0x0000000011ee0d: add [rax], al; nop; endbr64; mov eax, 0x97; syscall; 
0x0000000011ee3d: add [rax], al; nop; endbr64; mov eax, 0x98; syscall; 
0x00000000126bbd: add [rax], al; nop; endbr64; mov eax, 0x9a; syscall; 
0x00000000126efd: add [rax], al; nop; endbr64; mov eax, 0x9b; syscall; 
0x0000000011b9ed: add [rax], al; nop; endbr64; mov eax, 0xa1; syscall; 
0x0000000011becd: add [rax], al; nop; endbr64; mov eax, 0xa7; syscall; 
0x0000000011befd: add [rax], al; nop; endbr64; mov eax, 0xa8; syscall; 
0x0000000011ec4d: add [rax], al; nop; endbr64; mov eax, 0xa; syscall; 
0x00000000125b2d: add [rax], al; nop; endbr64; mov eax, 0xac; syscall; 
0x00000000126c5d: add [rax], al; nop; endbr64; mov eax, 0xae; syscall; 
0x00000000126c8d: add [rax], al; nop; endbr64; mov eax, 0xb0; syscall; 
0x0000000012716d: add [rax], al; nop; endbr64; mov eax, 0xba; syscall; 
0x000000001222fd: add [rax], al; nop; endbr64; mov eax, 0xc6; syscall; 
0x000000001221dd: add [rax], al; nop; endbr64; mov eax, 0xc7; syscall; 
0x00000000126cbd: add [rax], al; nop; endbr64; mov eax, 0xd5; syscall; 
0x00000000126bed: add [rax], al; nop; endbr64; mov eax, 0xe4; syscall; 
0x00000000126ddd: add [rax], al; nop; endbr64; mov eax, 0xfd; syscall; 
0x00000000126e3d: add [rax], al; nop; endbr64; mov eax, 0xff; syscall; 
0x0000000009c0cd: add [rax], al; nop; endbr64; xor eax, eax; ret; 
0x000000001a4a0d: add [rax], al; nop; lea rax, [rdi+0x1]; ret; 
0x000000001a49fd: add [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000018d69d: add [rax], al; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d6fd: add [rax], al; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000000c0c7d: add [rax], al; nop; mov [rdi-0x1], edx; ret; 
0x000000001b0a4d: add [rax], al; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000c0c8d: add [rax], al; nop; mov [rdi], edx; ret; 
0x000000000c0cdd: add [rax], al; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000d83dd: add [rax], al; nop; mov rax, 0x1; ret; 
0x0000000019fb0d: add [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x00000000099708: add [rax], al; nop; xor eax, eax; ret; 
0x00000000029dad: add [rax], al; nop; xor edi, edi; mov eax, edx; syscall; 
0x000000000a93a6: add [rax], al; or [rax-0x73], cl; add eax, 0x1ae50; cmove rax, rdx; ret; 
0x00000000056647: add [rax], al; or byte ptr [rcx-0x77], 0x0; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000011d7d6: add [rax], al; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000008a74e: add [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000015503a: add [rax], al; or dword ptr [rbx], 0x20; mov fs:[rdx], eax; pop rbx; ret; 
0x00000000099df6: add [rax], al; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x000000000606a3: add [rax], al; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000410c5: add [rax], al; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000009104b: add [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000b4af9: add [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b4fe0: add [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x0000000002a1a3: add [rax], al; pop r12; pop r13; pop r14; jmp rax; 
0x00000000133cf2: add [rax], al; pop r12; pop rbp; ret; 
0x000000000ab50d: add [rax], al; pop r12; ret; 
0x0000000015f603: add [rax], al; pop rbp; jmp rcx; 
0x0000000002a1f4: add [rax], al; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000005f97c: add [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000042a48: add [rax], al; pop rbp; pop r12; ret; 
0x00000000112ca4: add [rax], al; pop rbp; pop r14; ret; 
0x0000000005a25a: add [rax], al; pop rbp; ret; 
0x00000000091157: add [rax], al; pop rbx; pop r12; pop r13; ret; 
0x000000000ec944: add [rax], al; pop rbx; pop r12; ret; 
0x000000000428d1: add [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000007e99f: add [rax], al; pop rbx; pop rbp; ret; 
0x00000000035e07: add [rax], al; pop rbx; ret; 
0x00000000175020: add [rax], al; push 0x0; call qword ptr [rax+0x340]; 
0x000000000d9a88: add [rax], al; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x00000000174fcf: add [rax], al; push 0x2; call qword ptr [rax+0x340]; 
0x0000000015de19: add [rax], al; push qword ptr [rip+0x84727]; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dcda: add [rax], al; push qword ptr [rip+0x84866]; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000010aac4: add [rax], al; push rax; mov rax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x0000000008f2e3: add [rax], al; pxor xmm0, xmm0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x00000000029fd3: add [rax], al; ret; 
0x000000001367a6: add [rax], al; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000029cc9: add [rax], al; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x00000000143591: add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000163ae3: add [rax], al; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000d6b4e: add [rax], al; setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x000000001b49d3: add [rax], al; setl al; neg eax; or eax, 0x1; ret; 
0x00000000109356: add [rax], al; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000000ed10e: add [rax], al; setne al; ret; 
0x00000000042ebc: add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x0000000014a63e: add [rax], al; shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000090cbb: add [rax], al; shr eax, 0xb; and eax, 0x1; mov [rip+0x18adcb], eax; ret; 
0x00000000112efa: add [rax], al; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000008747e: add [rax], al; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000008754e: add [rax], al; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x0000000017273e: add [rax], al; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x0000000008f216: add [rax], al; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000011a906: add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000142b4f: add [rax], al; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x00000000121350: add [rax], al; sub rax, fs:[0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x00000000149c6f: add [rax], al; sub rax, fs:[0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x00000000084546: add [rax], al; sub rax, rcx; sar rax, 0x2; sub eax, 0x1; ret; 
0x0000000008e956: add [rax], al; sub rax, rcx; sub eax, 0x1; ret; 
0x000000000c4741: add [rax], al; sub rax, rdx; ret; 
0x000000000423fd: add [rax], al; sub rdx, fs:[0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x00000000042939: add [rax], al; sub rdx, fs:[0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429bc: add [rax], al; sub rdx, fs:[0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042ac7: add [rax], al; sub rdx, fs:[0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x0000000004300a: add [rax], al; sub rdx, fs:[0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x0000000004349a: add [rax], al; sub rdx, fs:[0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x000000000514fc: add [rax], al; sub rdx, fs:[0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x000000000613da: add [rax], al; sub rdx, fs:[0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x0000000009bcb2: add [rax], al; sub rdx, fs:[0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x00000000121c2e: add [rax], al; sub rdx, fs:[0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x0000000014a35b: add [rax], al; sub rdx, fs:[0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000008ca1a: add [rax], al; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000042525: add [rax], al; syscall; 
0x000000001a49e4: add [rax], al; test ah, 0x40; jne 0x00000000001a4ad0; lea rax, [rdi+0xf]; ret; 
0x000000001a4992: add [rax], al; test al, 0x40; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000000d8003: add [rax], al; test al, 0xf0; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x0000000008e7f4: add [rax], al; test byte ptr [rbp], 0x80; jne short 0x000000000008e810; pop rbp; ret; 
0x000000001a4905: add [rax], al; test dh, 0x40; jne 0x00000000001a4840; lea rax, [rdi+0xf]; ret; 
0x000000001a494b: add [rax], al; test dh, 0x4; jne 0x00000000001a4840; lea rax, [rdi+0xb]; ret; 
0x000000001a4882: add [rax], al; test dl, 0x40; jne short 0x00000000001a4840; lea rax, [rdi+0x7]; ret; 
0x000000001a48b0: add [rax], al; test dl, 0x4; jne short 0x00000000001a4840; lea rax, [rdi+0x3]; ret; 
0x00000000121c91: add [rax], al; test eax, eax; cmove eax, edx; add rsp, 0x8; ret; 
0x00000000091ef7: add [rax], al; test eax, eax; cmovne eax, edx; ret; 
0x0000000015ecf3: add [rax], al; test eax, eax; je short 0x000000000015ed00; xor eax, eax; ret; 
0x00000000046c7a: add [rax], al; test eax, eax; jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x000000000a03cd: add [rax], al; test eax, eax; jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a048d: add [rax], al; test eax, eax; jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000ea44d: add [rax], al; test eax, eax; jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea65a: add [rax], al; test eax, eax; jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000001128ed: add [rax], al; test eax, eax; jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x0000000011299d: add [rax], al; test eax, eax; jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x00000000114859: add [rax], al; test eax, eax; jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x0000000011498a: add [rax], al; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x00000000114a2a: add [rax], al; test eax, eax; jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f0e: add [rax], al; test eax, eax; jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x0000000011510a: add [rax], al; test eax, eax; jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x0000000011529a: add [rax], al; test eax, eax; jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000118d3a: add [rax], al; test eax, eax; jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x0000000011935d: add [rax], al; test eax, eax; jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x000000001197ca: add [rax], al; test eax, eax; jne short 0x00000000001197d8; pop rbp; ret; 
0x000000001198bd: add [rax], al; test eax, eax; jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x0000000011996d: add [rax], al; test eax, eax; jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x0000000011ab5a: add [rax], al; test eax, eax; jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abfa: add [rax], al; test eax, eax; jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011ba2a: add [rax], al; test eax, eax; jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011baea: add [rax], al; test eax, eax; jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011ec8a: add [rax], al; test eax, eax; jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x00000000125f8d: add [rax], al; test eax, eax; jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x0000000012603d: add [rax], al; test eax, eax; jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260ed: add [rax], al; test eax, eax; jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x0000000012619d: add [rax], al; test eax, eax; jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x0000000012626a: add [rax], al; test eax, eax; jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x000000001275ca: add [rax], al; test eax, eax; jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x0000000012769a: add [rax], al; test eax, eax; jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x000000001278cd: add [rax], al; test eax, eax; jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x000000001279a0: add [rax], al; test eax, eax; jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127b0a: add [rax], al; test eax, eax; jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127bad: add [rax], al; test eax, eax; jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e8d: add [rax], al; test eax, eax; jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f3d: add [rax], al; test eax, eax; jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000127ffd: add [rax], al; test eax, eax; jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x0000000012825d: add [rax], al; test eax, eax; jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x0000000012830d: add [rax], al; test eax, eax; jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x000000000ed197: add [rax], al; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x0000000007f7c6: add [rax], al; test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f8a6: add [rax], al; test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000e566c: add [rax], al; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000e56d0: add [rax], al; test rax, rax; je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x00000000113d4d: add [rax], al; test rax, rax; je short 0x0000000000113d88; xor edx, edx; call rax; 
0x0000000014a630: add [rax], al; test rax, rax; je short 0x000000000014a640; ret; 
0x000000001ae6b4: add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000199474: add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001b525e: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b524e: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f0e: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3efe: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3ede: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b526e: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b57ae: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57be: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57ce: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57de: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b5734: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b178e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8be: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae72e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae73e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae74e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001a276b: add [rax], al; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001b225e: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b226e: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b227e: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001a10a2: add [rax], al; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x000000001a72ee: add [rax], al; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a71ee: add [rax], al; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001afb6e: add [rax], al; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001afadf: add [rax], al; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001a7162: add [rax], al; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001b0a7e: add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001aeecf: add [rax], al; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001a68d2: add [rax], al; vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000019ed30: add [rax], al; vzeroupper; ret; 
0x000000000454ca: add [rax], al; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x000000000620ec: add [rax], al; xchg [rdi], eax; cmp eax, 0x1; jg short 0x0000000000062100; ret; 
0x0000000008f56e: add [rax], al; xchg [rip+0x18c4da], eax; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x00000000080a4e: add [rax], al; xchg [rip+0x19afba], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x0000000012646c: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x11f; syscall; 
0x000000001265ec: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x131; syscall; 
0x00000000119d3c: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x1; syscall; 
0x000000001197fc: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x1b4; syscall; 
0x0000000009fdbc: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x3; syscall; 
0x000000000ec33c: add [rax], al; xchg ax, ax; endbr64; mov eax, 0x79; syscall; 
0x0000000011ec1c: add [rax], al; xchg ax, ax; endbr64; mov eax, 0xb; syscall; 
0x000000000d99dc: add [rax], al; xchg ax, ax; endbr64; mov eax, 0xc9; syscall; 
0x000000000e66dc: add [rax], al; xchg ax, ax; endbr64; mov eax, [rdi]; ret; 
0x0000000015d21c: add [rax], al; xchg ax, ax; endbr64; ret; 
0x0000000009be1c: add [rax], al; xchg ax, ax; endbr64; xor eax, eax; ret; 
0x0000000018d68c: add [rax], al; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000018d6bc: add [rax], al; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000c0c6c: add [rax], al; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000c0c9c: add [rax], al; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000bfc7c: add [rax], al; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000015df0c: add [rax], al; xchg ax, ax; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001b3e5c: add [rax], al; xchg ax, ax; mov rax, rdi; ret; 
0x000000000378dc: add [rax], al; xchg ax, ax; ret; 
0x000000001b61ac: add [rax], al; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b643c: add [rax], al; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcfc: add [rax], al; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c3d3c: add [rax], al; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000d6eec: add [rax], al; xchg ax, ax; xor eax, eax; ret; 
0x000000000d7e7c: add [rax], al; xchg ax, ax; xor rax, rax; ret; 
0x00000000099dfb: add [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x00000000090e2a: add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x000000000f6ff6: add [rax], al; xor eax, eax; cmp [rsi], cl; je 0x00000000000f6f5d; ret; 
0x0000000009b7ba: add [rax], al; xor eax, eax; cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x000000000a80a8: add [rax], al; xor eax, eax; mov [r8], rsi; ret; 
0x00000000114c99: add [rax], al; xor eax, eax; mov eax, 0x1b7; syscall; 
0x000000001653e5: add [rax], al; xor eax, eax; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000121c0a: add [rax], al; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x000000000923aa: add [rax], al; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000092c83: add [rax], al; xor eax, eax; pop rbp; ret; 
0x0000000009324e: add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000404f6: add [rax], al; xor eax, eax; ret; 
0x000000001992ee: add [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000467c7: add [rax], al; xor eax, edx; ret; 
0x00000000167e91: add [rax], al; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000016763d: add [rax], al; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x000000000416d6: add [rax], al; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x0000000015df90: add [rax], al; xor ecx, ecx; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000095720: add [rax], al; xor edi, edi; mov eax, 0x8f; syscall; 
0x00000000094ade: add [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000d9cba: add [rax], al; xor edi, edi; syscall; 
0x00000000075627: add [rax], al; xor edx, edx; jmp rsi; 
0x000000000a85d6: add [rax], al; xor edx, edx; mov eax, edx; ret; 
0x00000000085f39: add [rax], al; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x0000000008ab80: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008ae69: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008b5a6: add [rax], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000c47f1: add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000008ed16: add [rax], al; xor edx, edx; xor esi, esi; mov rdi, r15; call qword ptr [rax+0x58]; 
0x000000000e561c: add [rax], al; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x00000000085e45: add [rax], al; xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008add5: add [rax], al; xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000085c57: add [rax], al; xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f093: add [rax], al; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000045a4d: add [rax], al; xor esi, esi; mov rdi, r8; call rax; 
0x0000000007ed57: add [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x000000000d8d3e: add [rax], al; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x0000000007c676: add [rax], al; xor r8d, r8d; jmp rsi; 
0x000000000d7bbe: add [rax], al; xor rax, rax; ret; 
0x00000000091338: add [rax], al; xor sil, 0x80; syscall; 
0x00000000092a5c: add [rax], al; xor sil, 0x81; syscall; 
0x000000001a9bac: add [rax], al; xtest; je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001ac0b4: add [rax], al; xtest; je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001b50ef: add [rax], bh; setl al; neg eax; or eax, 0x1; ret; 
0x00000000039fa7: add [rax], cl; add [rax], al; ret; 
0x000000000c6d74: add [rax], cl; lea rax, [rip+0x11873]; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c55e4: add [rax], cl; lea rax, [rip+0x12bc3]; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x000000000a93a7: add [rax], cl; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x0000000009679d: add [rax], cl; xor eax, eax; mov [rdi], ecx; ret; 
0x000000000e6228: add [rax], dl; add [rax+0x39], cl; ret; 
0x0000000003a087: add [rax], dl; add [rax], al; ret; 
0x00000000118da4: add [rax], dl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000a8b97: add [rax], dl; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a77: add [rax], dl; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b7: add [rax], dl; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x000000000ecfe9: add [rax], eax; add [rax+0x20], bh; cmove rax, rdx; ret; 
0x0000000004f902: add [rax], eax; add [rax+0x29], cl; ret far; 
0x000000000fc149: add [rax], eax; add [rax+0x39], cl; ret; 
0x00000000072862: add [rax], eax; add [rax+0x63], cl; ret; 
0x000000001131a4: add [rax], eax; add [rax+0xe], bh; syscall; 
0x000000000ba727: add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000142693: add [rax], eax; add [rax-0x1], bh; cmove eax, edx; ret; 
0x000000000469d1: add [rax], eax; add [rax-0x73], cl; add eax, 0x1d4d7b; add rsp, 0x8; ret; 
0x0000000007d79a: add [rax], eax; add [rax-0x73], cl; jmp qword ptr [r14+0x48]; 
0x0000000015ea84: add [rax], eax; add [rax-0x75], cl; and al, 0x28; call rax; 
0x0000000014056c: add [rax], eax; add [rax-0x75], cl; cmp al, [rcx-0xa]; ret; 
0x000000000a7749: add [rax], eax; add [rax-0x75], cl; jg short 0x00000000000a7798; mov rsi, r12; call rax; 
0x000000000949a5: add [rax], eax; add [rax-0x75], cl; mov ebx, 0x648; call qword ptr [rbx+0x640]; 
0x0000000015eeee: add [rax], eax; add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000003d7b7: add [rax], eax; add [rax-0x77], cl; fucomip st, st(0); scasb [rdi]; ret far; 
0x0000000008ba2b: add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [r13+0x90]; 
0x0000000008a7b5: add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [r15+0x90]; 
0x0000000009e8d5: add [rax], eax; add [rax-0x77], cl; ret; 
0x000000001190dc: add [rax], eax; add [rax-0x77], cl; xor esi, esi; syscall; 
0x00000000191a7d: add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000178376: add [rax], eax; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000e55cf: add [rax], eax; add [rax], al; add rsp, 0x8; ret; 
0x000000001691e7: add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x0000000015d559: add [rax], eax; add [rax], al; call qword ptr [rax+0x28]; 
0x000000001168ae: add [rax], eax; add [rax], al; call qword ptr [rbp+0x40]; 
0x0000000011fd0d: add [rax], eax; add [rax], al; call r12; 
0x000000000d8082: add [rax], eax; add [rax], al; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x000000000d8132: add [rax], eax; add [rax], al; je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x000000000d7bb1: add [rax], eax; add [rax], al; jg short 0x00000000000d7bb9; neg eax; ret; 
0x000000001a6851: add [rax], eax; add [rax], al; jg short 0x00000000001a6860; neg eax; ret; 
0x00000000075a47: add [rax], eax; add [rax], al; jmp rsi; 
0x00000000091c90: add [rax], eax; add [rax], al; lea rdi, [r8+0x35c]; syscall; 
0x000000000a0f9e: add [rax], eax; add [rax], al; mov [rip+0x1783c7], rax; ret; 
0x000000000a0fbe: add [rax], eax; add [rax], al; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f7e: add [rax], eax; add [rax], al; mov [rip+0x1783df], rax; ret; 
0x000000000a0f5e: add [rax], eax; add [rax], al; mov [rip+0x1783f7], rax; ret; 
0x0000000015edb6: add [rax], eax; add [rax], al; mov [rsi+0x10], rax; ret; 
0x00000000046be6: add [rax], eax; add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x00000000056576: add [rax], eax; add [rax], al; mov [rsi], rdx; ret; 
0x0000000005664e: add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000001691d7: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x000000001691df: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000016923b: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000169243: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000169400: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016940b: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000162d63: add [rax], eax; add [rax], al; mov eax, 0x1; ret; 
0x000000000913ac: add [rax], eax; add [rax], al; mov eax, 0xca; syscall; 
0x00000000093679: add [rax], eax; add [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000e58b4: add [rax], eax; add [rax], al; mov eax, 0xe6; syscall; 
0x00000000095335: add [rax], eax; add [rax], al; mov eax, 0xe; syscall; 
0x0000000011d79b: add [rax], eax; add [rax], al; mov eax, r8d; add rsp, 0x8; ret; 
0x000000000891d2: add [rax], eax; add [rax], al; mov eax, r8d; ret; 
0x00000000076be5: add [rax], eax; add [rax], al; mov edx, 0x1; jmp rsi; 
0x0000000011a241: add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x00000000091388: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528ee: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, r12d; syscall; 
0x000000001290ba: add [rax], eax; add [rax], al; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x0000000015f6be: add [rax], eax; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000761ce: add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000007ba09: add [rax], eax; add [rax], al; mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000016a597: add [rax], eax; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000085e4a: add [rax], eax; add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000099948: add [rax], eax; add [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000008b808: add [rax], eax; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008adda: add [rax], eax; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008c96a: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000867c7: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007e17e: add [rax], eax; add [rax], al; mov rdi, rbx; call r8; 
0x0000000007dadd: add [rax], eax; add [rax], al; mov rdi, rbx; call rax; 
0x00000000165ade: add [rax], eax; add [rax], al; movups [rcx], xmm1; ret; 
0x00000000165af6: add [rax], eax; add [rax], al; movups [rcx], xmm2; ret; 
0x000000001663f6: add [rax], eax; add [rax], al; movups [rcx], xmm3; ret; 
0x000000001663d6: add [rax], eax; add [rax], al; movups [rcx], xmm4; ret; 
0x000000001663e5: add [rax], eax; add [rax], al; movups [rdi+0x20], xmm2; ret; 
0x00000000165ac9: add [rax], eax; add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x000000001692b1: add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001695ed: add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x000000001572e6: add [rax], eax; add [rax], al; pop rbp; pop r12; ret; 
0x0000000007ff6b: add [rax], eax; add [rax], al; pop rbx; pop rbp; ret; 
0x00000000083cf6: add [rax], eax; add [rax], al; pop rbx; ret; 
0x0000000005411f: add [rax], eax; add [rax], al; ret; 
0x00000000163ae1: add [rax], eax; add [rax], al; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x0000000008ca18: add [rax], eax; add [rax], al; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000114a31: add [rax], eax; add [rax], al; syscall; 
0x000000000ed195: add [rax], eax; add [rax], al; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x000000000620a5: add [rax], eax; add [rax], al; xor eax, eax; ret; 
0x0000000016763b: add [rax], eax; add [rax], al; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000075625: add [rax], eax; add [rax], al; xor edx, edx; jmp rsi; 
0x0000000007c674: add [rax], eax; add [rax], al; xor r8d, r8d; jmp rsi; 
0x000000000a93a5: add [rax], eax; add [rax], cl; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x000000000c92da: add [rax], eax; add [rbp+0x31], al; shr cl, 0x77; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000060e36: add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000b4778: add [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000098282: add [rax], eax; add [rbx+0x18102505], cl; add [rcx], bh; ret; 
0x000000000606a2: add [rax], eax; add [rbx+0x28907c8], al; mov eax, 0x1; ret; 
0x00000000144693: add [rax], eax; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000009dc6c: add [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000009963a: add [rax], eax; add [rbx+0x5e7421f8], al; mov eax, 0x16; ret; 
0x00000000107eb3: add [rax], eax; add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret; 
0x00000000171915: add [rax], eax; add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff4fe924048b49], al; jmp qword ptr [rsi+0xf]; 
0x0000000011319d: add [rax], eax; add [rcx+0x1482484], cl; add [rax], al; mov eax, 0xe; syscall; 
0x0000000006ad0c: add [rax], eax; add [rcx+0x1], al; ret far; 
0x000000000841c6: add [rax], eax; add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x20]; 
0x00000000083a03: add [rax], eax; add [rcx+rcx*4-0x1a], al; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000174c62: add [rax], eax; add [rcx+rcx*4-0x20], al; pop r12; ret; 
0x00000000042c6e: add [rax], eax; add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x000000001726d6: add [rax], eax; add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x0000000004548b: add [rax], eax; add [rcx-0x1076b312], cl; call rax; 
0x0000000007e40d: add [rax], eax; add [rcx-0x73], al; dec dword ptr [r9-0x74b6cfbd]; add [rcx+0x39], cl; ret; 
0x00000000033e50: add [rax], eax; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x0000000011fea0: add [rax], eax; add [rcx-0x75], cl; jge short 0x000000000011fea7; call rbx; 
0x0000000003261e: add [rax], eax; add [rcx-0x77], al; xor ecx, [rcx-0x77]; ret far; 
0x0000000003c1d7: add [rax], eax; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000006d68a: add [rax], eax; add [rcx-0x7d], cl; ret; 
0x000000000ffb64: add [rax], eax; add [rcx], bh; ret; 
0x00000000085e44: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008add4: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007f092: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000085f38: add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x00000000113f36: add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi; 
0x0000000007ed56: add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x00000000053ecc: add [rax], eax; add [rdi+0x2], bh; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000014526b: add [rax], eax; add [rdi], cl; xchg [rax+rax-0x76b40000], bl; ret far; 
0x000000000379c9: add [rax], eax; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; notrack jmp rcx; 
0x00000000125e49: add [rax], eax; add [rdx+0x8], bh; syscall; 
0x000000001b30e7: add [rax], eax; add [rdx-0x4e], ah; and gs:[rsi], ah; ret far; 
0x0000000015ded3: add [rax], eax; add [rsi+0x4], bh; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000008ea34: add [rax], eax; add [rsi-0x1], bh; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008b747: add [rax], eax; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000001623c2: add [rax], eax; add al, ch; mov dh, 0x5f; in al, dx; jmp qword ptr [rsi+0xf]; 
0x0000000015eab5: add [rax], eax; add al, ch; ret; 
0x00000000098290: add [rax], eax; add bh, dh; ret; 
0x000000001426eb: add [rax], eax; add bl, al; mov eax, 0x29; ret; 
0x0000000018d66c: add [rax], eax; add bl, al; ret; 
0x000000001426e2: add [rax], eax; add bl, al; xor eax, eax; ret; 
0x00000000164b88: add [rax], eax; add bl, ch; mov eax, 0xfd1b8ee8; jmp qword ptr [rsi+0x66]; 
0x00000000199990: add [rax], eax; add ch, al; std; xlat [rbx]; ret; 
0x000000001af819: add [rax], eax; add ch, al; sti; xchg ebx, eax; ret; 
0x000000000c5829: add [rax], eax; cmove rax, rdx; ret; 
0x000000000a877a: add [rax], eax; cmove rax, rdx; ret; 
0x000000000a8293: add [rax], eax; cmovne rax, rdx; ret; 
0x000000000c55f1: add [rax], eax; cmovne rax, rdx; ret; 
0x00000000061ed1: add [rax], eax; cmp rax, 0x1; sbb eax, eax; add rsp, 0x18; ret; 
0x00000000119cce: add [rax], eax; endbr64; xor eax, eax; syscall; 
0x00000000052fc6: add [rax], eax; jne short 0x0000000000052fc0; pop rbx; ret; 
0x000000000a9d63: add [rax], eax; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a9923: add [rax], eax; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96f3: add [rax], eax; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x000000000a97b7: add [rax], eax; lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x000000000c6d7b: add [rax], eax; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000a828c: add [rax], eax; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000c55eb: add [rax], eax; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x000000000c5afb: add [rax], eax; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000a844c: add [rax], eax; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a9a0c: add [rax], eax; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a830d: add [rax], eax; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000ecf15: add [rax], eax; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000011a8e6: add [rax], eax; nop [rax+rax]; endbr64; mov eax, 0x8c; syscall; 
0x0000000011b9b6: add [rax], eax; nop [rax+rax]; endbr64; mov eax, 0xa3; syscall; 
0x0000000011b65a: add [rax], eax; nop [rax]; endbr64; mov eax, 0xab; syscall; 
0x00000000046b64: add [rax], eax; ret; 
0x0000000013e66a: add [rax], eax; test rax, rax; je short 0x000000000013e676; mov rdi, rbx; call rax; 
0x0000000013e9aa: add [rax], eax; test rax, rax; je short 0x000000000013e9b6; mov rdi, rbx; call rax; 
0x0000000013ea5a: add [rax], eax; test rax, rax; je short 0x000000000013ea6a; lea rdi, [rip+0xe34b8]; call rax; 
0x0000000019ec07: add [rax], eax; vzeroupper; ret; 
0x0000000011b51c: add [rax], eax; xchg ax, ax; endbr64; mov eax, 0xaa; syscall; 
0x0000000005399a: add [rax], esi; add [rax], al; mov eax, 0x9e; syscall; 
0x0000000013b50a: add [rax], esp; je 0x000000000013b486; mov [rax+0x5], dl; pop rbx; ret; 
0x00000000076c1b: add [rax], r8; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000013e669: add [rax], r8; test rax, rax; je short 0x000000000013e676; mov rdi, rbx; call rax; 
0x00000000075339: add [rax], r8b; add [rax], al; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000083d1d: add [rax], r8b; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000002ac55: add [rax], r8b; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000419cd: add [rax], r8b; addss xmm0, xmm0; ret; 
0x000000001af92d: add [rax], r8b; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x000000001af93d: add [rax], r8b; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000029f2d: add [rax], r8b; endbr64; lea rax, [rip+0x1ae09b]; ret; 
0x00000000092b7d: add [rax], r8b; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000011bb6d: add [rax], r8b; endbr64; mov eax, 0x132; syscall; 
0x0000000011ed1d: add [rax], r8b; endbr64; mov eax, 0x1c; syscall; 
0x0000000011518d: add [rax], r8b; endbr64; mov eax, 0x20; syscall; 
0x000000000ea5ad: add [rax], r8b; endbr64; mov eax, 0x25; syscall; 
0x000000000dcddd: add [rax], r8b; endbr64; mov eax, 0x26; syscall; 
0x000000000ec0ad: add [rax], r8b; endbr64; mov eax, 0x27; syscall; 
0x0000000015f54d: add [rax], r8b; endbr64; mov eax, 0x2; ret; 
0x0000000012765d: add [rax], r8b; endbr64; mov eax, 0x31; syscall; 
0x0000000012772d: add [rax], r8b; endbr64; mov eax, 0x34; syscall; 
0x00000000119a0d: add [rax], r8b; endbr64; mov eax, 0x3; syscall; 
0x0000000004274d: add [rax], r8b; endbr64; mov eax, 0x3e; syscall; 
0x0000000012845d: add [rax], r8b; endbr64; mov eax, 0x40; syscall; 
0x0000000011d15d: add [rax], r8b; endbr64; mov eax, 0x4d; syscall; 
0x0000000011531d: add [rax], r8b; endbr64; mov eax, 0x50; syscall; 
0x00000000042d3d: add [rax], r8b; endbr64; mov eax, 0x83; syscall; 
0x000000001142dd: add [rax], r8b; endbr64; mov eax, 0x8a; syscall; 
0x0000000011baad: add [rax], r8b; endbr64; mov eax, 0xa2; syscall; 
0x00000000125bdd: add [rax], r8b; endbr64; mov eax, 0xa6; syscall; 
0x00000000125afd: add [rax], r8b; endbr64; mov eax, 0xad; syscall; 
0x00000000125c0d: add [rax], r8b; endbr64; mov eax, 0xbb; syscall; 
0x000000000a74bd: add [rax], r8b; endbr64; mov eax, 0xffffffff; ret; 
0x0000000015204d: add [rax], r8b; endbr64; mov eax, [rdi+0x20]; ret; 
0x000000000891dd: add [rax], r8b; endbr64; mov eax, [rdi]; and eax, 0x804; ret; 
0x000000000961bd: add [rax], r8b; endbr64; mov eax, [rip+0x189926]; ret; 
0x0000000004312d: add [rax], r8b; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000017836d: add [rax], r8b; endbr64; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x00000000061f4d: add [rax], r8b; endbr64; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000012649d: add [rax], r8b; endbr64; mov r10, rcx; mov eax, 0x11e; syscall; 
0x0000000011931d: add [rax], r8b; endbr64; mov r10, rcx; mov eax, 0x28; syscall; 
0x0000000012854d: add [rax], r8b; endbr64; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126aad: add [rax], r8b; endbr64; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x0000000009c9fd: add [rax], r8b; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008f47d: add [rax], r8b; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000009f18d: add [rax], r8b; endbr64; mov rax, [rdi+0x78]; ret; 
0x00000000090c5d: add [rax], r8b; endbr64; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000008f4ad: add [rax], r8b; endbr64; ret; 
0x0000000015d23d: add [rax], r8b; endbr64; xor eax, eax; ret; 
0x000000001285ed: add [rax], r8b; endbr64; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000000412ed: add [rax], r8b; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x000000000c1a4d: add [rax], r8b; lea r11, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c036d: add [rax], r8b; lea r11, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000a8345: add [rax], r8b; lea rax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x00000000119aa5: add [rax], r8b; lea rdx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000001a122d: add [rax], r8b; mov [rax], di; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000000c515d: add [rax], r8b; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000000928b5: add [rax], r8b; mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x000000001b0a5d: add [rax], r8b; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f8cd: add [rax], r8b; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000e5645: add [rax], r8b; mov [rdx], edi; mov eax, r8d; ret; 
0x000000000f41bd: add [rax], r8b; mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000b1535: add [rax], r8b; mov byte ptr [rax], 0x0; lea rax, [rax+rdx-0x1]; ret; 
0x0000000014482d: add [rax], r8b; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x00000000162d5d: add [rax], r8b; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000007c645: add [rax], r8b; mov dword ptr [rsp+0x3c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c35: add [rax], r8b; mov dword ptr [rsp+0x40], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007c6fd: add [rax], r8b; mov dword ptr [rsp+0x48], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000009bf0d: add [rax], r8b; mov eax, 0x10; ret; 
0x00000000091235: add [rax], r8b; mov eax, 0x16; ret; 
0x000000001a684d: add [rax], r8b; mov eax, 0x1; jg short 0x00000000001a6860; neg eax; ret; 
0x000000000edc45: add [rax], r8b; mov eax, 0x1; ret; 
0x000000001062cd: add [rax], r8b; mov eax, 0x2; ret; 
0x000000000968ed: add [rax], r8b; mov eax, 0xba; syscall; 
0x0000000008609d: add [rax], r8b; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000084c15: add [rax], r8b; mov eax, 0xffffffff; ret; 
0x000000001367b5: add [rax], r8b; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000bfc9d: add [rax], r8b; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000011959d: add [rax], r8b; mov qword ptr [rdi], 0x0; ret; 
0x000000000923b5: add [rax], r8b; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000174c6d: add [rax], r8b; mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000149b5d: add [rax], r8b; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000015237d: add [rax], r8b; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000122415: add [rax], r8b; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x000000000892b5: add [rax], r8b; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x00000000089185: add [rax], r8b; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x0000000016b31d: add [rax], r8b; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000016c96d: add [rax], r8b; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016b53d: add [rax], r8b; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000016be95: add [rax], r8b; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016c5d5: add [rax], r8b; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000016c21d: add [rax], r8b; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000118d05: add [rax], r8b; mov rax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000114295: add [rax], r8b; mov rax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5785: add [rax], r8b; mov rax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e571d: add [rax], r8b; mov rax, [rip+0x1336e9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000a410d: add [rax], r8b; mov rax, [rip+0x174cf9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000043085: add [rax], r8b; mov rax, [rip+0x1d5d81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f65: add [rax], r8b; mov rax, [rip+0x1d5ea1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001760d5: add [rax], r8b; mov rax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000168aa5: add [rax], r8b; mov rax, [rip+0xb0499]; pop rbx; ret; 
0x000000001267ed: add [rax], r8b; mov rax, [rip+0xf2619]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126785: add [rax], r8b; mov rax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012671d: add [rax], r8b; mov rax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266bd: add [rax], r8b; mov rax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012665d: add [rax], r8b; mov rax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001217e5: add [rax], r8b; mov rax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000121f55: add [rax], r8b; mov rax, r8; ret; 
0x000000000c0f3d: add [rax], r8b; mov rax, rdi; ret; 
0x0000000007c6ed: add [rax], r8b; mov rbx, rcx; mov r8d, 0x1; jmp rsi; 
0x0000000007561d: add [rax], r8b; mov rbx, rdx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x0000000009006d: add [rax], r8b; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x360]; 
0x00000000090105: add [rax], r8b; mov rdi, rax; call qword ptr [rbx+0x360]; 
0x000000000bfcdd: add [rax], r8b; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b1475: add [rax], r8b; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x00000000077d85: add [rax], r8b; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000012f74f: add [rax], r8b; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000012f74e: add [rax], r8b; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000162ccd: add [rax], r8b; movdqu xmm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x000000001663b5: add [rax], r8b; movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad5: add [rax], r8b; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162cdd: add [rax], r8b; movdqu xmm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x00000000142d15: add [rax], r8b; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000001a5d5d: add [rax], r8b; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x000000001a5d4d: add [rax], r8b; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001a5d3d: add [rax], r8b; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d2d: add [rax], r8b; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d1d: add [rax], r8b; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d0d: add [rax], r8b; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x0000000019f7ad: add [rax], r8b; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x000000001b092d: add [rax], r8b; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001b2c5d: add [rax], r8b; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000008a74d: add [rax], r8b; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000099df5: add [rax], r8b; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x000000000e60a5: add [rax], r8b; pop rbp; ret; 
0x00000000035da5: add [rax], r8b; ret; 
0x0000000008f215: add [rax], r8b; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x00000000084545: add [rax], r8b; sub rax, rcx; sar rax, 0x2; sub eax, 0x1; ret; 
0x0000000008e955: add [rax], r8b; sub rax, rcx; sub eax, 0x1; ret; 
0x000000001b57bd: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57cd: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57dd: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001ae8bd: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae72d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae73d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae74d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b225d: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b226d: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b227d: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001a72ed: add [rax], r8b; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a71ed: add [rax], r8b; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x0000000011d76d: add [rax], r8b; xor eax, eax; add rsp, 0x8; ret; 
0x000000001740a5: add [rax], r8b; xor eax, eax; pop rbp; ret; 
0x000000000d8e35: add [rax], r8b; xor eax, eax; pop rbx; ret; 
0x00000000086a4d: add [rax], r8b; xor eax, eax; ret; 
0x000000001992ed: add [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x000000000416d5: add [rax], r8b; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000a85d5: add [rax], r8b; xor edx, edx; mov eax, edx; ret; 
0x000000000d7bbd: add [rax], r8b; xor rax, rax; ret; 
0x000000000379c8: add [rax], r8d; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; notrack jmp rcx; 
0x000000001131a3: add [rax], rax; add [rax+0xe], bh; syscall; 
0x0000000007c703: add [rax], rax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000013e9a9: add [rax], rax; test rax, rax; je short 0x000000000013e9b6; mov rdi, rbx; call rax; 
0x0000000013ea59: add [rax], rax; test rax, rax; je short 0x000000000013ea6a; lea rdi, [rip+0xe34b8]; call rax; 
0x00000000128234: add [rbp+0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x00000000134cf2: add [rbp+0x10], dh; add rsp, 0xd8; ret; 
0x0000000011ebcd: add [rbp+0x10], dh; mov eax, 0x9; syscall; 
0x000000001739c5: add [rbp+0x11], dh; add rsp, 0x18; ret; 
0x00000000089fe5: add [rbp+0x11], dh; add rsp, 0x48; ret; 
0x0000000011c073: add [rbp+0x11], dh; add rsp, 0x58; ret; 
0x0000000009049d: add [rbp+0x11], dh; mov rax, [rax+0x388]; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x00000000042c68: add [rbp+0x14], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000d8ec2: add [rbp+0x14], dh; add rsp, 0x28; ret; 
0x0000000008ef05: add [rbp+0x15890150], cl; ret far; 
0x0000000014a627: add [rbp+0x16], dh; mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x000000000014a640; ret; 
0x0000000014323a: add [rbp+0x17], dh; add rsp, 0x20; pop rbp; ret; 
0x00000000042b4c: add [rbp+0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000008f525: add [rbp+0x18], dh; mov [rip+0x18c529], rbx; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000004342b: add [rbp+0x19], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000afb28: add [rbp+0x19], eax; fild st, dword ptr [rcx-0x7d]; ret; 
0x00000000049cfd: add [rbp+0x1], al; dec dword ptr [rax-0x7d]; ret; 
0x00000000121c38: add [rbp+0x1a], dh; add rsp, 0x1018; ret; 
0x00000000147f88: add [rbp+0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000126546: add [rbp+0x1a], dh; add rsp, 0x58; ret; 
0x0000000011435a: add [rbp+0x1a], dh; add rsp, 0x88; pop rbp; pop r12; ret; 
0x0000000005a252: add [rbp+0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x00000000152358: add [rbp+0x1b], dh; mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000167342: add [rbp+0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000014a365: add [rbp+0x1c], dh; add rsp, 0x118; ret; 
0x000000000433a8: add [rbp+0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000128401: add [rbp+0x1c], dh; mov eax, 0x47; syscall; 
0x000000000ecf44: add [rbp+0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000d2c12: add [rbp+0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000a0ca1: add [rbp+0x1f], dh; add rsp, 0xe0; pop rbp; ret; 
0x00000000141e9f: add [rbp+0x20850fdb], al; add [rax], eax; add [rax+0x63], cl; ret; 
0x00000000155064: add [rbp+0x21], esi; ret; 
0x0000000009dae1: add [rbp+0x23], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000171c79: add [rbp+0x23], dh; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x0000000011ab16: add [rbp+0x23], dh; mov eax, r8d; add rsp, 0x58; ret; 
0x00000000099e1a: add [rbp+0x23], esi; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000046287: add [rbp+0x24], dh; add rsp, 0x18; ret; 
0x000000001698f0: add [rbp+0x25], dh; add rsp, 0x28; ret; 
0x00000000095cad: add [rbp+0x26], dh; mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x0000000011a17b: add [rbp+0x26], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000014109c: add [rbp+0x28], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000013d12e: add [rbp+0x28], dh; add rsp, 0x38; ret; 
0x000000000db38c: add [rbp+0x29], al; ret; 
0x000000000a8c7a: add [rbp+0x29], cl; ret far; 
0x000000000d29d6: add [rbp+0x29dd75db], al; ret; 
0x000000000a083e: add [rbp+0x2a], dh; add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x00000000090484: add [rbp+0x2a], dh; add rsp, 0x28; ret; 
0x00000000090627: add [rbp+0x2c], dh; add rsp, 0x38; ret; 
0x00000000042d05: add [rbp+0x2d], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000160151: add [rbp+0x2e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000013239f: add [rbp+0x2e], dh; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000050709: add [rbp+0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000172141: add [rbp+0x30], dh; add rsp, 0x18; ret; 
0x00000000090762: add [rbp+0x30], dh; add rsp, 0x38; ret; 
0x0000000015d374: add [rbp+0x310f75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001600d7: add [rbp+0x31], al; imul bl; shr eax, cl; std; jmp qword ptr [rsi+0x66]; 
0x000000000d59b3: add [rbp+0x31], al; imul cl; ret far; 
0x000000000d8d3f: add [rbp+0x31], al; in al, 0x4c; mov eax, esp; pop r12; ret; 
0x000000001353db: add [rbp+0x31], al; jmp qword ptr [rbx+rax*4+0x39]; 
0x00000000038f8f: add [rbp+0x31], al; jmp qword ptr [rdi+rax*8]; 
0x0000000009a700: add [rbp+0x31], al; rcl byte ptr [rax-0x3f76bba5], 0x5d; pop r12; ret; 
0x00000000149ac6: add [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x30], cl; ret; 
0x0000000002e76f: add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x00000000148890: add [rbp+0x31], al; ror byte ptr [rax-0x7d], 0xc7; add [rcx+0x39], ecx; ret; 
0x00000000175ad1: add [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x11], 0x45; xor ecx, ecx; mov rsi, r12; call qword ptr [rax+0x340]; 
0x00000000086f72: add [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0xf], 0x4c; mov esi, ebp; mov rdi, r15; call rbx; 
0x000000000919a1: add [rbp+0x31], al; sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000099fc9: add [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000919e6: add [rbp+0x31], al; sar byte ptr [rsi+0x81], cl; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000002ab07: add [rbp+0x31], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x00000000097bde: add [rbp+0x31], al; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, r13d; syscall; 
0x00000000096e9e: add [rbp+0x31], al; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, r15d; syscall; 
0x000000000d59df: add [rbp+0x31], al; shr cl, 0x6e; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000c92dc: add [rbp+0x31], al; shr cl, 0x77; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000172358: add [rbp+0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000c6111: add [rbp+0x31], eax; shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x18]; call r13; 
0x00000000192d9b: add [rbp+0x32], esi; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x000000001601ef: add [rbp+0x33], dh; add rsp, 0x10; pop rbx; ret; 
0x000000001726cf: add [rbp+0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000001750e5: add [rbp+0x34], dh; add rsp, 0x50; pop rbx; ret; 
0x0000000002a2d8: add [rbp+0x35], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000001751dc: add [rbp+0x35], dh; add rsp, 0x60; pop rbx; ret; 
0x00000000042a40: add [rbp+0x35], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000015e1ac: add [rbp+0x36], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000da0af: add [rbp+0x39], al; ret; 
0x00000000053b4d: add [rbp+0x3], dh; push r10; ret; 
0x000000000a4f7a: add [rbp+0x3], dh; ret; 
0x0000000011c1be: add [rbp+0x3c], dh; add rsp, 0x68; ret; 
0x000000000e6acb: add [rbp+0x3c], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000059b39: add [rbp+0x3d], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000d9c5d: add [rbp+0x3e], dh; add rsp, 0x28; ret; 
0x0000000016b4c0: add [rbp+0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000167675: add [rbp+0x3f], dh; add rsp, 0x18; pop rbx; pop r12; ret; 
0x0000000015fbd0: add [rbp+0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000009cbe2: add [rbp+0x40], dh; add rsp, 0x120; pop rbp; ret; 
0x00000000167874: add [rbp+0x40], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000125cae: add [rbp+0x411d75c0], al; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x00000000125d7e: add [rbp+0x411d75c0], al; mov ecx, 0x8; mov eax, 0x1b9; syscall; 
0x00000000118e0a: add [rbp+0x413975c0], al; mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000431a6: add [rbp+0x414575c0], al; mov edx, 0x8; mov eax, 0x80; syscall; 
0x00000000112ca5: add [rbp+0x41], bl; pop rsi; ret; 
0x0000000002a1f5: add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x000000000624ae: add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000005f97d: add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x00000000042a49: add [rbp+0x41], bl; pop rsp; ret; 
0x0000000016b9f0: add [rbp+0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000143199: add [rbp+0x41], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016ca20: add [rbp+0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000ec17e: add [rbp+0x42], dh; add rsp, 0x38; ret; 
0x0000000009dcff: add [rbp+0x43], dh; add rsp, 0x120; pop rbp; ret; 
0x000000001305e5: add [rbp+0x440f45c0], eax; ret; 
0x0000000011ac9e: add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0x127; syscall; 
0x0000000011ad5e: add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000ea4fe: add [rbp+0x451d75c0], al; xor eax, eax; mov eax, 0xf7; syscall; 
0x00000000127a4e: add [rbp+0x451d75c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000012780e: add [rbp+0x451d75c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000115d27: add [rbp+0x45], dh; add rsp, 0x50; mov rax, r8; pop rbp; ret; 
0x000000000426bc: add [rbp+0x45], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000016bc30: add [rbp+0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000126b34: add [rbp+0x46], dh; add rsp, 0x58; ret; 
0x00000000119a9a: add [rbp+0x46], dh; add rsp, 0x68; ret; 
0x00000000119b29: add [rbp+0x47], dh; add rsp, 0x18; ret; 
0x0000000005a49b: add [rbp+0x47], dh; add rsp, 0x38; ret; 
0x00000000119be1: add [rbp+0x47], dh; add rsp, 0x58; ret; 
0x00000000161a2f: add [rbp+0x480c74d2], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004271c: add [rbp+0x480f75c0], al; add esp, 0x8; ret; 
0x00000000128f26: add [rbp+0x481574db], al; movsxd ebx, ebx; mov [rip+0xf050b], rbx; pop rbx; ret; 
0x0000000015d72d: add [rbp+0x486e74c0], al; mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e287: add [rbp+0x489374c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e263: add [rbp+0x48b774c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000115bbf: add [rbp+0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x0000000016bb0f: add [rbp+0x49], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000119c7f: add [rbp+0x49], dh; add rsp, 0x58; ret; 
0x0000000011be28: add [rbp+0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e774e: add [rbp+0x4a], dh; add rsp, 0x38; ret; 
0x000000000a2472: add [rbp+0x4b], dh; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000014a5ae: add [rbp+0x4b], dh; add rsp, 0x18; ret; 
0x00000000090b90: add [rbp+0x4c1374f6], al; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000167dcf: add [rbp+0x4f], dh; add rsp, 0x20; pop r12; ret; 
0x00000000174c5b: add [rbp+0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000017544e: add [rbp+0x51], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000ec4ce: add [rbp+0x52], dh; add rsp, 0x38; ret; 
0x00000000175377: add [rbp+0x52], dh; add rsp, 0x70; pop rbx; ret; 
0x00000000143698: add [rbp+0x56], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000050887: add [rbp+0x58], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000001284ea: add [rbp+0x58], dh; add rsp, 0x58; ret; 
0x000000000420f4: add [rbp+0x5], dh; add rsp, 0x18; ret; 
0x00000000045f22: add [rbp+0x5], dh; add rsp, 0x28; ret; 
0x00000000113e14: add [rbp+0x5], dh; add rsp, 0x38; ret; 
0x0000000016b3c5: add [rbp+0x5], dh; add rsp, 0x48; ret; 
0x00000000169044: add [rbp+0x5], dh; add rsp, 0x78; ret; 
0x0000000007e997: add [rbp+0x5a], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000507b9: add [rbp+0x5c], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007eb25: add [rbp+0x5c], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000042475: add [rbp+0x5d0675c0], al; ret; 
0x000000001197cb: add [rbp+0x5d0875c0], al; ret; 
0x00000000050ced: add [rbp+0x5e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000016b589: add [rbp+0x5f], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000011b245: add [rbp+0x60], dh; add rsp, 0x38; ret; 
0x000000000a02e2: add [rbp+0x60], dh; add rsp, 0x58; ret; 
0x000000000cc299: add [rbp+0x6348ff43], cl; ret far; 
0x00000000167a90: add [rbp+0x64], dh; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000090d73: add [rbp+0x6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000016d3d9: add [rbp+0x6], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000009064d: add [rbp+0x6], dh; add rsp, 0x38; jmp rax; 
0x000000000d8f3c: add [rbp+0x6], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000133d93: add [rbp+0x6], dh; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000108efb: add [rbp+0x70], dh; add rsp, 0x38; ret; 
0x000000000e9337: add [rbp+0x75], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000015df3d: add [rbp+0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000d9de7: add [rbp+0x77], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x0000000009bcbc: add [rbp+0x78], dh; add rsp, 0x98; ret; 
0x00000000119723: add [rbp+0x79], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000562e9: add [rbp+0x79], dh; leave; ret; 
0x0000000003a886: add [rbp+0x7], dh; add rsp, 0x18; ret; 
0x000000000a1c2f: add [rbp+0x7], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000045e4e: add [rbp+0x7], dh; pop rbx; ret; 
0x0000000009cd5e: add [rbp+0x7], dh; xor eax, eax; pop rbp; ret; 
0x00000000042407: add [rbp+0x8], dh; add rsp, 0x148; ret; 
0x000000000dcee5: add [rbp+0x8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000149c79: add [rbp+0x8], dh; add rsp, 0x218; ret; 
0x0000000012135a: add [rbp+0x8], dh; add rsp, 0x418; ret; 
0x00000000051506: add [rbp+0x8], dh; add rsp, 0x428; ret; 
0x00000000042ad1: add [rbp+0x8], dh; add rsp, 0x98; ret; 
0x000000000434a4: add [rbp+0x8], dh; add rsp, 0xa8; ret; 
0x00000000051894: add [rbp+0x8], dh; add rsp, 0xd8; ret; 
0x0000000009be9b: add [rbp+0x8], dh; and eax, 0x38; cmp eax, 0x8; je short 0x000000000009bea7; ret; 
0x00000000090aa1: add [rbp+0x8], dh; and edx, 0x38; cmp edx, 0x8; je short 0x0000000000090aad; ret; 
0x000000000ed065: add [rbp+0x8], dh; mov eax, 0x40; ret; 
0x0000000016d30a: add [rbp+0x8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x00000000116112: add [rbp+0x8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000014e581: add [rbp+0x8], dh; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000009aed5: add [rbp+0x8], esi; xor eax, eax; ret; 
0x00000000061362: add [rbp+0x9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000009087d: add [rbp+0x9], dh; add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x0000000016d296: add [rbp+0x9], dh; add rsp, 0x90; pop rbx; ret; 
0x000000000e6112: add [rbp+0x9], dh; add rsp, 0xe0; pop rbx; ret; 
0x000000000a6d5b: add [rbp+0xa], dh; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000121e19: add [rbp+0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000136247: add [rbp+0xb], dh; add rsp, 0x28; ret; 
0x0000000011a1ec: add [rbp+0xc], dh; add rsp, 0x18; ret; 
0x00000000134bee: add [rbp+0xd], dh; add rsp, 0xd8; ret; 
0x00000000061e96: add [rbp+0xe], dh; add rsp, 0x18; ret; 
0x000000000ea634: add [rbp+0xe], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000167d0b: add [rbp+0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000cc291: add [rbp+0xf8e0fdb], al; add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x0000000003ff43: add [rbp+0xf], al; mov dh, 0xd2; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x000000000f7ab8: add [rbp+0xf], al; mov dh, 0xe4; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000000f7a04: add [rbp+0xf], al; mov dh, 0xe4; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b42: add [rbp+0xf], al; mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x00000000054f2f: add [rbp+0xf], cl; lodsd [rsi]; ret; 
0x00000000054e1f: add [rbp+0xf], cl; movsd [rdi], [rsi]; ret; 
0x00000000042943: add [rbp+0xf], dh; add rsp, 0x118; ret; 
0x00000000160ce5: add [rbp+0xf], dh; add rsp, 0x40; pop rbx; ret; 
0x0000000008f206: add [rbp+0xf], dh; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x00000000119c60: add [rbp+rbp-0x48], dh; add [rcx], eax; add [rax], al; syscall; 
0x000000000dfc6f: add [rbp+rcx*4+0x14], eax; ret; 
0x000000000c390f: add [rbp+rcx*4+0x1d], cl; cmp eax, 0x490010fb; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000017bca6: add [rbp+rcx*4+0x1d], cl; mov [0x4993146349000672], al; lea edx, [rbx+rdx]; notrack jmp rdx; 
0x0000000009c8ad: add [rbp+rcx*4+0x1d], cl; ret far; 
0x000000000c036f: add [rbp+rcx*4+0x1d], cl; sub [rip+0x63490011], ebp; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000017eb11: add [rbp+rcx*4+0x1d], cl; test dword ptr [rbp+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e481: add [rbp+rcx*4+0x1d], cl; xchg [rsi+rax], ecx; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000045532: add [rbp+rcx*4+0x25], cl; mov byte ptr [rbx*1-0x1cc6b400], 0x73; or al, 0x90; call qword ptr [rbx]; 
0x000000000778e3: add [rbp+rcx*4+0x2c], cl; test [rax], eax; add [rax], al; add [rax+0x29], cl; ret; 
0x0000000006147a: add [rbp+rcx*4+0x35], cl; ret; 
0x0000000017560b: add [rbp+rcx*4+0x44], cl; and al, 0x20; call qword ptr [rax+0x340]; 
0x000000000d9a8d: add [rbp+rcx*4+0x44], cl; and al, 0x40; call qword ptr [rax+0x340]; 
0x000000000a444c: add [rbp+rcx*4+0x4a], cl; adc [rax+0x39], cl; ret far; 
0x000000000c6116: add [rbp+rcx*4+0x4c], cl; and al, 0x18; call r13; 
0x0000000015df9a: add [rbp+rcx*4+0x4c], cl; and al, 0x20; call qword ptr [rax]; 
0x0000000015dce7: add [rbp+rcx*4+0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x000000000c632c: add [rbp+rcx*4+0x4c], ecx; and al, 0x20; call rbx; 
0x000000000c5e08: add [rbp+rcx*4+0x4c], ecx; and al, 0x38; call rbx; 
0x000000000c5e07: add [rbp+rcx*4+0x4c], rcx; and al, 0x38; call rbx; 
0x000000000f57f6: add [rbp+rcx*4+0x4f], cl; jmp qword ptr [rsi+0x41]; 
0x0000000005ff1f: add [rbp+rcx*4+0x5], cl; ret; 
0x0000000009ea4f: add [rbp+rcx*4+0x5a], cl; add [rcx+0x39], ecx; ret; 
0x000000000f3183: add [rbp+rcx*4+0x68], ecx; add [rax-0x80], eax; jmp far fword ptr [rsi]; 
0x00000000049304: add [rbp+rcx*4+0x6a], al; inc byte ptr [rbx-0x7bf0fe06]; ret; 
0x0000000002a909: add [rbp+rcx*4+0x7b], cl; jmp qword ptr [rbp+rax*2-0x75]; 
0x000000000984bc: add [rbp+rcx*4+0x7f], cl; adc [rax+0x63], cl; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x00000000145ee8: add [rbp+rcx*4-0x6c], cl; ret; 
0x000000000eabb8: add [rbp+rcx*4-0x70], ecx; rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x000000000903f9: add [rbp+rcx+0x48], dh; mov eax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x00000000142d08: add [rbp+rcx-0x7b], esi; shl byte ptr [rbp+0x19], 0x44; mov eax, eax; ret; 
0x00000000119560: add [rbp+rdi+0x3d], dh; add [rax+0xe740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000016b532: add [rbp-0x10], esi; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x000000000aa7a3: add [rbp-0x16], esi; ret; 
0x0000000004536c: add [rbp-0x16f08a40], al; cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000001bbb9b: add [rbp-0x17], bl; ficom st, word ptr [rdi-0x13]; jmp qword ptr [rsi+0xf]; 
0x00000000091840: add [rbp-0x1b], dh; pop rbx; ret; 
0x0000000009677b: add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x0000000005411b: add [rbp-0x1e], esi; mov eax, 0x1; ret; 
0x00000000029ce4: add [rbp-0x2c], dh; mov rdx, [rip+0x1ef19a]; cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x0000000009af91: add [rbp-0x2c], esi; mov eax, 0x10; ret; 
0x0000000016c2fa: add [rbp-0x2d], esi; mov rax, [rbp+0x8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c47a: add [rbp-0x2d], esi; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000a79ba: add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x0000000005d5ff: add [rbp-0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000011c7bc: add [rbp-0x32], esi; ret; 
0x00000000029cf4: add [rbp-0x3c], dh; ret; 
0x00000000091ef8: add [rbp-0x3dbaf040], al; ret; 
0x00000000121c92: add [rbp-0x3dbbf040], al; add rsp, 0x8; ret; 
0x00000000175db6: add [rbp-0x3eb7fbb9], cl; loopne 0x0000000000175dc3; lea rax, [rax+rdx+0x4]; ret; 
0x0000000016191c: add [rbp-0x3f6af040], al; add rsp, 0x8; movzx eax, al; ret; 
0x000000000427cb: add [rbp-0x41e78a40], al; or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x0000000011485a: add [rbp-0x479e8a40], al; add [rcx], eax; add [rax], al; syscall; 
0x000000001128ee: add [rbp-0x47ea8a40], al; adc [rax], eax; add [rax], al; syscall; 
0x0000000012603e: add [rbp-0x47ea8a40], al; adc al, 0x1; add [rax], al; syscall; 
0x0000000011299e: add [rbp-0x47ea8a40], al; adc al, [rax]; add [rax], al; syscall; 
0x0000000012619e: add [rbp-0x47ea8a40], al; adc eax, [rcx]; add [rax], al; syscall; 
0x00000000127e8e: add [rbp-0x47ea8a40], al; and [rcx], al; add [rax], al; syscall; 
0x00000000127bae: add [rbp-0x47ea8a40], al; sub al, 0x0; add [rax], al; syscall; 
0x00000000127f3e: add [rbp-0x47ea8a40], al; sub eax, [rcx]; add [rax], al; syscall; 
0x00000000127ffe: add [rbp-0x47ea8a40], al; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000011abfb: add [rbp-0x47ef8a40], al; adc al, 0x0; add [rax], al; syscall; 
0x0000000011ab5b: add [rbp-0x47ef8a40], al; adc eax, [rax]; add [rax], al; syscall; 
0x00000000114a2b: add [rbp-0x47ef8a40], al; add [rax], eax; add [rax], al; syscall; 
0x0000000011510b: add [rbp-0x47ef8a40], al; add eax, [rax]; add [rax], al; syscall; 
0x000000000ea65b: add [rbp-0x47ef8a40], al; and al, [rax]; add [rax], al; syscall; 
0x0000000011ec8b: add [rbp-0x47ef8a40], al; sbb al, [rax]; add [rax], al; syscall; 
0x0000000012769b: add [rbp-0x47ef8a40], al; sub al, [rax]; add [rax], al; syscall; 
0x000000001275cb: add [rbp-0x47ef8a40], al; sub eax, [rax]; add [rax], al; syscall; 
0x0000000012626b: add [rbp-0x47ef8a40], al; xor [rcx], al; add [rax], al; syscall; 
0x000000000a82bc: add [rbp-0x4b], dh; ret; 
0x000000000c562a: add [rbp-0x4e], dh; ret; 
0x000000000a957f: add [rbp-0x5e], dh; ret; 
0x0000000009a1bb: add [rbp-0x6af0bf37], al; mov byte ptr [rbp+0x31], 0xd2; shl esi, 0x7; xor sil, 0x81; syscall; 
0x000000000db343: add [rbp-0x73], eax; add eax, [r13+0xf]; ret; 
0x00000000099c58: add [rbp-0x741c812e], al; add eax, 0x17f651; mov [rsi], eax; xor eax, eax; ret; 
0x000000001b6916: add [rbp-0x76b23fb6], cl; ret far; 
0x000000000ff38d: add [rbp-0x76b30090], cl; imul eax; xchg edi, eax; jp short 0x00000000000ff397; jmp far fword ptr [rax+0x6850f01]; 
0x00000000049b90: add [rbp-0x76b3d7b5], cl; loopne 0x0000000000049b1b; ret; 
0x0000000004c9d0: add [rbp-0x76b3f4b5], cl; loopne 0x000000000004c95b; ret; 
0x000000000eb166: add [rbp-0x77], cl; loop 0x00000000000eb1b3; lea esi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000b319d: add [rbp-0x77], cl; ret far; 
0x000000000328ba: add [rbp-0x77], cl; ret; 
0x00000000149b5f: add [rbp-0x77], cl; ror byte ptr [rcx+rcx*4-0x30], 0x1; mov byte ptr [r8], 0x0; ret; 
0x00000000054cc3: add [rbp-0x77], ecx; ret far; 
0x000000000cda3e: add [rbp-0x7b], al; test byte ptr [rdi], 0x94; shr ecx, 0xdf; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000016c014: add [rbp-0x7b], cl; in al, 0x74; mov [0xe80c244489e7894c], al; ret; 
0x0000000010ff07: add [rbp-0x7cd48b25], al; sti; add cl, [rdi]; xchg ebp, eax; ret; 
0x00000000154dd3: add [rbp-0x7e], esi; ret; 
0x0000000009dc36: add [rbp-0x7ea28a40], al; ret far; 
0x0000000014481f: add [rbp-0x7ffa8140], al; cmp ebp, [rsi]; je short 0x0000000000144830; pop rbx; ret; 
0x00000000052fc7: add [rbp-0xa], dh; pop rbx; ret; 
0x000000000ecf18: add [rbp], bh; add [rax+0x7f], bh; cmove rax, rdx; ret; 
0x00000000114b0b: add [rbx+0x10], eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000108b0a: add [rbx+0x1186770d], cl; add [rcx+0x5b595a0a], cl; ret; 
0x000000000eaf27: add [rbx+0x137f01f8], al; pop rbx; ret; 
0x000000001af900: add [rbx+0x14840c0], al; clc; ret; 
0x00000000199a7a: add [rbx+0x14840c0], al; clc; vzeroupper; ret; 
0x00000000194e29: add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x00000000182c42: add [rbx+0x157890e], ecx; mov [rdi], ecx; ret; 
0x000000001721a5: add [rbx+0x157f01f8], al; add rsp, 0x8; ret; 
0x00000000095e23: add [rbx+0x177f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000000873ce: add [rbx+0x1789cfe2], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000098284: add [rbx+0x18102505], cl; add [rcx], bh; ret; 
0x0000000008f52e: add [rbx+0x18c51e05], al; add [rcx], al; pop rbx; ret; 
0x00000000150d28: add [rbx+0x1a7f01f8], al; pop rbp; ret; 
0x0000000012c700: add [rbx+0x1a7f01fa], al; add rsp, 0x18; ret; 
0x000000000db58d: add [rbx+0x1d7f01f8], al; add rsp, 0x8; ret; 
0x000000000460cd: add [rbx+0x1d7f01f8], al; pop rbp; ret; 
0x0000000017227c: add [rbx+0x1e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x0000000013e8e4: add [rbx+0x1e7f01fa], al; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000001bb9cb: add [rbx+0x1f7f01f8], al; pop rbx; ret; 
0x000000000461e9: add [rbx+0x217f01fa], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000004530c: add [rbx+0x267f01f8], al; xor eax, eax; pop rbx; ret; 
0x00000000092738: add [rbx+0x27602fe], al; ret; 
0x000000000606a4: add [rbx+0x28907c8], al; mov eax, 0x1; ret; 
0x0000000016d120: add [rbx+0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000947cc: add [rbx+0x2d0bb], cl; add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x000000001721fc: add [rbx+0x2e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000000c3d8f: add [rbx+0x30178916], cl; in eax, dx; mov [rdi+0x4], ch; ret; 
0x000000000620ae: add [rbx+0x31010442], al; rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x00000000092656: add [rbx+0x3101084f], al; rol bl, 0x90; mov eax, 0x16; ret; 
0x0000000002ab04: add [rbx+0x314500d0], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x00000000141f24: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000008c1cf: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000172468: add [rbx+0x327f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x00000000155c27: add [rbx+0x337f01f8], al; add rsp, 0x8; ret; 
0x000000000c131e: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000c216e: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000bfccf: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x000000000915cc: add [rbx+0x367f01f8], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001410af: add [rbx+0x3b83b], cl; add [rax], al; syscall; 
0x0000000008d09d: add [rbx+0x3d7f01f8], al; add rsp, 0x8; ret; 
0x0000000011e93b: add [rbx+0x3f7f01f8], al; pop rbp; ret; 
0x0000000009403d: add [rbx+0x40082474], cl; xor dh, 0x81; syscall; 
0x0000000009446c: add [rbx+0x40182474], cl; xor dh, 0x81; syscall; 
0x00000000091158: add [rbx+0x41], bl; pop rsp; pop r13; ret; 
0x000000000ec945: add [rbx+0x41], bl; pop rsp; ret; 
0x000000000c213f: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000c099f: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000d7a6f: add [rbx+0x463b0447], cl; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x000000000d7a9f: add [rbx+0x463b0c47], cl; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x000000001a675f: add [rbx+0x463bfc47], cl; cld; jne 0x00000000001a6850; ret; 
0x00000000114206: add [rbx+0x47426f8], al; mov eax, r9d; ret; 
0x000000000c12ef: add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000bfcaf: add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x00000000125a6e: add [rbx+0x47f01f8], al; ret; 
0x0000000018fa1e: add [rbx+0x48028901], cl; lea eax, [rdx+0x3]; ret; 
0x00000000192dcf: add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x0000000013d9a0: add [rbx+0x4804c244], cl; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004281d: add [rbx+0x48082444], cl; add esp, 0x18; ret; 
0x0000000009b7d4: add [rbx+0x480c2444], cl; add esp, 0x18; ret; 
0x00000000029d7c: add [rbx+0x4814247c], cl; mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000019fe3f: add [rbx+0x48178916], cl; lea eax, [rdi+0x3]; vzeroupper; ret; 
0x000000000c212e: add [rbx+0x48178916], cl; lea eax, [rdi+0x4]; ret; 
0x00000000142ef4: add [rbx+0x48], bl; movsxd edx, eax; add r10, rdx; mov [r9], r10; ret; 
0x000000000c052f: add [rbx+0x49178916], cl; sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000001b39cf: add [rbx+0x49178916], cl; sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x00000000117220: add [rbx+0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000017d59e: add [rbx+0x4e8bf956], cl; cld; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d39e: add [rbx+0x4e8bfa56], cl; cld; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d19e: add [rbx+0x4e8bfb56], cl; cld; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000013ea42: add [rbx+0x507f01f8], al; add rsp, 0x8; ret; 
0x0000000009107f: add [rbx+0x57492f8], al; cmp eax, 0xffffffb5; jne short 0x0000000000091070; neg eax; ret; 
0x00000000095cb5: add [rbx+0x57510e0], al; ret; 
0x0000000018258e: add [rbx+0x5789fc56], cl; cld; ret; 
0x00000000080a55: add [rbx+0x57f01f8], al; ret; 
0x000000000f47c2: add [rbx+0x5b010447], al; pop rbp; pop r12; ret; 
0x0000000009d2a6: add [rbx+0x5d], bl; mov eax, r12d; pop r12; ret; 
0x00000000055cd7: add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000004332c: add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000003e410: add [rbx+0x5d], bl; pop r12; ret; 
0x0000000007e9a0: add [rbx+0x5d], bl; ret; 
0x000000000f47c6: add [rbx+0x5d], ebx; pop r12; ret; 
0x0000000009963c: add [rbx+0x5e7421f8], al; mov eax, 0x16; ret; 
0x00000000155177: add [rbx+0x627f01f8], al; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000154d3c: add [rbx+0x634807e6], al; add al, 0xb7; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x000000001063a1: add [rbx+0x634c01c3], al; ret; 
0x000000000c03a9: add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000921f6: add [rbx+0x64], bl; mov eax, [rax]; ret; 
0x000000000f14b7: add [rbx+0x6b8d483b], cl; add al, 0x83; call far fword ptr [rbp+0xf]; 
0x0000000016be3f: add [rbx+0x748d4802], cl; and al, 0x10; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016bfdf: add [rbx+0x748d4806], cl; and al, 0x10; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000928f7: add [rbx+0x74d28517], cl; cmp cl, [rbx+0x31450c77]; rol byte ptr [rcx+rcx*4-0x40], cl; xor sil, 0x80; syscall; 
0x0000000004536a: add [rbx+0x75c08500], cl; psubsw mm7, mm2; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000090c1b: add [rbx+0x77401f8], al; ret; 
0x00000000113a18: add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x0000000016669f: add [rbx+0x88b3], cl; add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x28]; 
0x000000000a10c0: add [rbx+0xa7401f8], al; add rsp, 0x8; ret; 
0x00000000099de7: add [rbx+0xb7401fe], al; mov eax, 0x16; ret; 
0x000000000a5047: add [rbx+0xb7f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000c4c12: add [rbx+0xb], dh; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000012914a: add [rbx+0xc], dh; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x00000000142d05: add [rbx+0xd7401f8], al; test eax, eax; jne short 0x0000000000142d28; mov eax, r8d; ret; 
0x00000000182c3f: add [rbx+0xe8b0156], cl; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000182bcf: add [rbx+0xe8b0256], cl; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x00000000182b5f: add [rbx+0xe8b0356], cl; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000000fecb1: add [rbx+0xf4801e2], al; ret; 
0x00000000163e16: add [rbx+rax*4+0x38], ah; add al, 0x75; ret; 
0x000000000ed176: add [rbx+rax*4+0x38], ah; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x00000000165d95: add [rbx+rbp*4+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000126324: add [rbx+rcx*4+0x10], ah; cmp edx, 0x26; je short 0x0000000000126366; mov eax, r8d; ret; 
0x00000000090511: add [rbx+rcx*4+0x12], cl; mov rax, [rax+0x348]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000009c2a9: add [rbx+rcx*4+0x15], cl; pop rdi; ret far; 
0x0000000003b115: add [rbx+rcx*4+0x3d], cl; ret; 
0x000000000d3a48: add [rbx+rcx*4+0x4c], cl; and al, 0x10; call r13; 
0x000000000301bc: add [rbx+rcx*4+0x4c], cl; and al, 0x38; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x000000001106d0: add [rbx+rcx*4+0x54], cl; and al, 0x20; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000009056d: add [rbx+rcx*4+0x5], al; mov bl, 0xa4; sbb [rax], al; push r10; call rax; 
0x000000001207ca: add [rbx+rcx*4+0x5e], cl; or [rcx-0xa], al; ret; 
0x00000000107eb5: add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret; 
0x00000000044bbf: add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x0000000009d42e: add [rbx+rcx*4+0x65], cl; sbb [rax-0x75], cl; jge short 0x000000000009d440; call qword ptr [rbp]; 
0x0000000009ecf8: add [rbx+rcx*4+0x78], al; push 0xfffffffffffc91e9; jmp qword ptr [rsi+0xf]; 
0x0000000003c1d1: add [rbx+rcx*4-0x44], cl; and al, 0x0; add [rax], eax; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000006d90d: add [rbx+rcx*4-0x4b], cl; cmp bl, 0xff; dec dword ptr [rcx-0x7d]; ret; 
0x00000000114203: add [rbx+rcx*4], ah; cmp eax, 0x26; je short 0x0000000000114210; mov eax, r9d; ret; 
0x00000000046d66: add [rbx+rcx*4], ah; cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x0000000010588a: add [rbx+rcx*4], cl; mov [rax], rdi; mov rax, r8; ret; 
0x000000001750f4: add [rbx+rcx+0x48], dh; mov edi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x000000001751ec: add [rbx+rcx+0x48], dh; mov edi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000171917: add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff4fe924048b49], al; jmp qword ptr [rsi+0xf]; 
0x000000000903b8: add [rbx-0x17], bl; jno short 0x000000000009033f; stc; call qword ptr [rax+0x50b78b48]; 
0x0000000016b4ef: add [rbx-0x1976b7fa], cl; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000a754b: add [rbx-0x1f6217c8], cl; stc; jmp qword ptr [rsi+0x66]; 
0x0000000016c2f7: add [rbx-0x2c8afe08], al; mov rax, [rbp+0x8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c477: add [rbx-0x2c8afe08], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000011347f: add [rbx-0x2dcef787], cl; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x00000000165b57: add [rbx-0x37f0a7b9], cl; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x00000000165b2f: add [rbx-0x37f0b7b9], cl; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x00000000166476: add [rbx-0x37f0efc0], cl; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x000000001664ae: add [rbx-0x37f0f3c0], cl; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x00000000162d9a: add [rbx-0x37f0fe18], al; mov [rdi+0xa8], eax; mov eax, 0x1; ret; 
0x00000000166459: add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000165b42: add [rbx-0x37f0fe18], eax; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x0000000011d1bd: add [rbx-0x387c0f19], al; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000084027: add [rbx-0x3b7cb7fe], cl; or [rbx+0x5d], bl; ret; 
0x00000000155185: add [rbx-0x3d], bl; lea rdi, [rbx+0x8]; call rsi; 
0x00000000168c16: add [rbx-0x3d], bl; nop [rax]; mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b96: add [rbx-0x3d], bl; nop [rax]; mov rax, [rip+0xb0421]; pop rbx; ret; 
0x0000000011fa9b: add [rbx-0x3d], bl; xchg ax, ax; mov rax, [rip+0xf9369]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000009a02b: add [rbx-0x3d], bl; xchg ax, ax; ret; 
0x00000000046d69: add [rbx-0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x0000000012216f: add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x0000000015ed8f: add [rbx-0x3f7acfb9], cl; jne short 0x000000000015ede0; mov dword ptr [rsi], 0x0; ret; 
0x0000000014b1aa: add [rbx-0x3f7ae7c0], cl; jne short 0x000000000014b1b8; ret; 
0x0000000012a0cf: add [rbx-0x3fcecf16], al; cmp edx, 0x9; setbe al; ret; 
0x00000000147b36: add [rbx-0x46f6b], cl; jmp qword ptr [rbx+rcx*4+0x18]; 
0x000000001470fe: add [rbx-0x47b4b], cl; jmp qword ptr [rbx+rcx*4]; 
0x00000000162d4f: add [rbx-0x47ef76e9], cl; add [rax], eax; add [rax], al; ret; 
0x00000000146379: add [rbx-0x47f63], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000000f4174: add [rbx-0x48], bl; add [rax], eax; add [rax], al; ret; 
0x00000000071723: add [rbx-0x51f4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000006658f: add [rbx-0x5a76b], cl; inc dword ptr [rbx-0x78f0d006]; ret; 
0x000000000684eb: add [rbx-0x5ff7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000069ddb: add [rbx-0x6477b], ecx; dec dword ptr [rax-0x7d]; ret; 
0x000000000f41cf: add [rbx-0x658bfb1e], al; mov byte ptr [rax+0x8], 0x1e; mov eax, 0x2; ret; 
0x00000000065e93: add [rbx-0x66773], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000011d823: add [rbx-0x6af00008], al; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x0000000013e823: add [rbx-0x70f09b08], eax; ret far; 
0x000000000963b3: add [rbx-0x70f0fe08], al; ret; 
0x0000000002f810: add [rbx-0x72b3fd20], al; mov [rax+rcx*4], fs; add [rax], al; add [rcx-0x77], al; ret; 
0x00000000090364: add [rbx-0x72b7f7bd], cl; adc eax, 0x142479; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000045eac: add [rbx-0x75], bl; pop rax; ret; 
0x0000000018fa2f: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x0000000018b6ef: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000166436: add [rbx-0x7637f100], cl; ror byte ptr [rax-0x77], 0x1; mov eax, 0x1; ret; 
0x000000000d2aa7: add [rbx-0x76b30383], cl; out 0x89, al; ret; 
0x0000000009e8b9: add [rbx-0x76b3ffab], cl; ret; 
0x00000000142b50: add [rbx-0x77bffe12], al; ja short 0x0000000000142b59; ret; 
0x0000000007dcaf: add [rbx-0x77cdf18], al; sub [rdi+0x10], esi; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000007b68b: add [rbx-0x78f0d008], al; ret; 
0x00000000073055: add [rbx-0x78f0f807], al; add [rip+0x63480000], eax; or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x00000000078585: add [rbx-0x78f0f807], al; mov eax, [0x488a0c6348000005]; add ecx, edx; notrack jmp rcx; 
0x00000000102796: add [rbx-0x7a8bdbbc], cl; ror byte ptr [rdi], 0x8e; ret; 
0x00000000029fc4: add [rbx-0x7bf00008], al; mov [0x98c48148000000], al; add [rax], al; ret; 
0x000000000cd2bb: add [rbx-0x7bf0d402], al; ret; 
0x0000000003e7c2: add [rbx-0x7bf0fc08], al; pushfq; add [rax], al; add [rbx-0x7bf0fe08], al; ret far; 
0x00000000093f53: add [rbx-0x7bf0fc08], eax; ret far; 
0x0000000003e7cb: add [rbx-0x7bf0fe08], al; ret far; 
0x0000000010227b: add [rbx-0x7bf0fe08], al; ret; 
0x0000000017273f: add [rbx-0x7c99fa17], al; stc; add esi, [rsi+0x7]; ret; 
0x000000000ff9a6: add [rbx-0x7c], cl; and al, 0x60; add al, [rax]; add [rcx], al; ret; 
0x00000000149e59: add [rbx-0x7cb7efab], cl; ret; 
0x00000000149d27: add [rbx-0x7cb7efbb], cl; ret; 
0x000000000c758f: add [rbx-0x7cb7fb85], cl; ret; 
0x000000000c579f: add [rbx-0x7cb7fb8d], cl; ret; 
0x0000000005f75e: add [rbx-0x7cb7fbbd], cl; ret; 
0x00000000053cc7: add [rbx-0x7cb7fe40], al; ror dword ptr [rax], 0x39; ret; 
0x000000000ebfa5: add [rbx-0x7cf0f705], al; xchg ecx, eax; add [rax], al; add dh, dh; ret; 
0x000000001b00fa: add [rbx-0x7cf0f706], al; in al, dx; add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x0000000019e2e3: add [rbx-0x7cf0fb06], al; ret; 
0x00000000163876: add [rbx-0x7e17ff83], cl; sbb bl, bh; jmp qword ptr [rsi-0x7d]; 
0x00000000072d70: add [rbx-0x89f63], cl; dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000001443f2: add [rbx-0xb34b], cl; jmp qword ptr [rbx]; 
0x0000000003b913: add [rbx-0xc373], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x00000000054fc2: add [rbx-0xd], esi; mov rax, rdx; ret; 
0x0000000011d31b: add [rbx], ah; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000090b23: add [rbx], al; add [rax], al; ret; 
0x0000000008f217: add [rbx], ch; push rax; adc [rbx-0x2fd6efb9], cl; ret; 
0x0000000009cda9: add [rbx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000009c551: add [rbx], cl; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000d8d2c: add [rbx], cl; add [rax], al; mov rax, r12; pop r12; ret; 
0x000000000d8e29: add [rbx], cl; add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000f411f: add [rbx], edi; jl short 0x00000000000f4190; mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x0000000012a7df: add [rcx+0x104e23c1], cl; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000012a5ef: add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000001a121e: add [rcx+0x107c8938], cl; cld; vzeroupper; ret; 
0x0000000015edeb: add [rcx+0x146348c2], cl; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x00000000053c98: add [rcx+0x146348c2], cl; xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b1466: add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; notrack jmp rdx; 
0x0000000003fc6f: add [rcx+0x146348d2], cl; xchg esi, eax; add rdx, rsi; notrack jmp rdx; 
0x00000000162cb6: add [rcx+0x146348f2], cl; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x0000000011319f: add [rcx+0x1482484], cl; add [rax], al; mov eax, 0xe; syscall; 
0x00000000165ac3: add [rcx+0x1847c7f0], ecx; add [rax], eax; add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x00000000136836: add [rcx+0x18e8c1f8], cl; ret; 
0x0000000006ad0e: add [rcx+0x1], al; ret far; 
0x000000000852f1: add [rcx+0x1], cl; ret; 
0x0000000004315f: add [rcx+0x1d608215], ecx; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000000dce29: add [rcx+0x1eb850c7], al; add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+0x3]; ret; 
0x0000000005db82: add [rcx+0x21], cl; ret; 
0x000000000d2a4f: add [rcx+0x295d5bd8], cl; rol byte ptr [rcx+0x5c], 0x1; pop r13; pop r14; ret; 
0x00000000193d25: add [rcx+0x29], cl; ret far; 
0x0000000004f9cf: add [rcx+0x29], ecx; ret far; 
0x00000000085e7f: add [rcx+0x2b], cl; adc [r8+0x1], r9b; ret; 
0x0000000011f34e: add [rcx+0x312b013a], cl; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000018fa61: add [rcx+0x3418b02], ecx; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000bc876: add [rcx+0x3418b02], ecx; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x0000000018d6df: add [rcx+0x3518911], cl; ret; 
0x000000000320bb: add [rcx+0x3948fc51], cl; ret; 
0x00000000032451: add [rcx+0x3948fc56], cl; ret; 
0x000000000748de: add [rcx+0x39], al; ret; 
0x00000000054c3f: add [rcx+0x39], cl; ret far; 
0x0000000007e419: add [rcx+0x39], cl; ret; 
0x0000000012f1f3: add [rcx+0x39], ecx; ret far; 
0x0000000005a42c: add [rcx+0x39], ecx; ret; 
0x000000000b1391: add [rcx+0x3c6349cf], cl; mov ecx, 0x3ecf014c; jmp rdi; 
0x000000000b1526: add [rcx+0x3c6349d7], cl; mov eax, 0x3ec7014c; jmp rdi; 
0x0000000018fa41: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000bc856: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x0000000018fa31: add [rcx+0x4418a02], ecx; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000bc836: add [rcx+0x4418a02], ecx; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000000b158f: add [rcx+0x448d4808], cl; adc bh, bh; ret; 
0x000000001428aa: add [rcx+0x458b4101], cl; add [rcx], bh; ret; 
0x000000000eca30: add [rcx+0x46348f6], cl; mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000001075af: add [rcx+0x46348ff], cl; mov edx, 0x3ed00148; jmp rax; 
0x000000001b78d8: add [rcx+0x4634ac7], cl; mov eax, [0x48cfb60f44ef3144]; add eax, ecx; notrack jmp rax; 
0x000000001453fa: add [rcx+0x4808244c], cl; mov eax, [rsp]; mov rdi, r15; call rax; 
0x00000000090574: add [rcx+0x52], al; call rax; 
0x00000000133cd3: add [rcx+0x533b1853], ecx; sbb al, 0x74; adc bl, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x000000000c0caf: add [rcx+0x57896617], cl; add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x00000000108b10: add [rcx+0x5b595a0a], cl; ret; 
0x000000000dd726: add [rcx+0x5bc03110], cl; ret; 
0x0000000002a1a4: add [rcx+0x5c], al; pop r13; pop r14; jmp rax; 
0x0000000011f448: add [rcx+0x5c], al; pop r13; ret; 
0x00000000133cf3: add [rcx+0x5c], al; pop rbp; ret; 
0x000000000ab50e: add [rcx+0x5c], al; ret; 
0x00000000153301: add [rcx+0x5c], eax; pop r13; ret; 
0x0000000011f40f: add [rcx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000017aeee: add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000bfb28: add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000007b30d: add [rcx+0x63], cl; ret; 
0x00000000149822: add [rcx+0x63], ecx; ret; 
0x00000000113434: add [rcx+0x63], ecx; test [rax], r8d; add rax, r13; notrack jmp rax; 
0x000000001526f2: add [rcx+0x77a6e8c7], cl; out dx, al; jmp qword ptr [rsi+0xf]; 
0x000000001194fd: add [rcx+0x9], cl; enter 0x774, 0x31; ror byte ptr [rax+0x39], 0xca; je short 0x0000000000119510; ret; 
0x00000000091b46: add [rcx+0xeab8c7], cl; add [rax], al; mov esi, [r9+0x10]; syscall; 
0x000000001563c3: add [rcx+0xf], al; adc [rax+0xc8], eax; mov rax, r8; add rsp, 0x8; ret; 
0x000000000788f7: add [rcx+0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x00000000076309: add [rcx+0xf], al; mov esi, 0x1d8d48cd; ret far; 
0x00000000099df7: add [rcx+0xf], al; xor byte ptr [rcx], 0xc0; ret; 
0x0000000003c39e: add [rcx+0xf], cl; ret far; 
0x0000000004f3e0: add [rcx+0xf], eax; mov esi, 0x89412404; ret; 
0x0000000016d4e1: add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x000000001138fe: add [rcx+0xf], ecx; ret; 
0x0000000010128c: add [rcx+rax-0x16], cl; notrack jmp rdx; 
0x00000000113439: add [rcx+rax-0x18], cl; notrack jmp rax; 
0x0000000014d6f9: add [rcx+rax-0x39], cl; notrack jmp rdi; 
0x000000001286ac: add [rcx+rax-0x3d], dh; mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x00000000149655: add [rcx+rbp-0x37], ecx; cmp rcx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x0000000014960e: add [rcx+rbp-0x37], ecx; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x0000000010d56a: add [rcx+rbx*2+0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000012c3a0: add [rcx+rcx*4+0x24], ecx; and al, 0xeb; ret far; 
0x00000000155b6c: add [rcx+rcx*4+0x25], cl; pop rsp; ret far; 
0x00000000042486: add [rcx+rcx*4+0x2], ah; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000155023: add [rcx+rcx*4+0x2], ah; pop rbx; ret; 
0x00000000125925: add [rcx+rcx*4+0x3d], cl; ret; 
0x00000000036a87: add [rcx+rcx*4+0x4], cl; and al, 0xe8; add rax, 0xffffffff89480000; ret; 
0x000000000a01d8: add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x00000000112c8e: add [rcx+rcx*4+0x70], cl; or [rcx], dh; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsi; ret; 
0x00000000131967: add [rcx+rcx*4-0x11], al; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x0000000016a20c: add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x000000001759ce: add [rcx+rcx*4-0x11], cl; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x0000000009a53a: add [rcx+rcx*4-0x11], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000d9569: add [rcx+rcx*4-0x12], cl; mov [rsp+0xd0], rax; call r12; 
0x0000000012f751: add [rcx+rcx*4-0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x000000001289a0: add [rcx+rcx*4-0x12], cl; mov edi, r12d; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x000000000807b4: add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008b40b: add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000008ac55: add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x00000000118e14: add [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x000000000c66a6: add [rcx+rcx*4-0x16], cl; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000c685e: add [rcx+rcx*4-0x16], cl; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000d349b: add [rcx+rcx*4-0x16], cl; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000007498b: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739d0: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000c655d: add [rcx+rcx*4-0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x0000000008122e: add [rcx+rcx*4-0x17], al; mov edx, r12d; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x0000000013ef17: add [rcx+rcx*4-0x17], cl; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x00000000091c85: add [rcx+rcx*4-0x18], al; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x0000000015f671: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000015f655: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000015f840: add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x000000000a78bf: add [rcx+rcx*4-0x19], cl; call rax; 
0x0000000013ee83: add [rcx+rcx*4-0x19], cl; call rbp; 
0x0000000013f1bb: add [rcx+rcx*4-0x19], cl; call rbx; 
0x000000001755fe: add [rcx+rcx*4-0x19], cl; xor r13d, r13d; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000175798: add [rcx+rcx*4-0x19], cl; xor r9d, r9d; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000009ad78: add [rcx+rcx*4-0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000001666ba: add [rcx+rcx*4-0x1], cl; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000085c5f: add [rcx+rcx*4-0x1], cl; call qword ptr [r13+0x80]; 
0x000000000841c8: add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x20]; 
0x000000001666a5: add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x28]; 
0x00000000085e4d: add [rcx+rcx*4-0x1], cl; call qword ptr [rbp+0x80]; 
0x00000000094418: add [rcx+rcx*4-0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091bf6: add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x00000000093a20: add [rcx+rcx*4-0x1], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008dead: add [rcx+rcx*4-0x1], ecx; call qword ptr [rax+0x18]; 
0x00000000083a05: add [rcx+rcx*4-0x1a], al; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000114dd7: add [rcx+rcx*4-0x1e], al; mov eax, 0x10d; syscall; 
0x00000000096a3b: add [rcx+rcx*4-0x1e], al; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000968cb: add [rcx+rcx*4-0x1e], al; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000968fd: add [rcx+rcx*4-0x1e], al; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000085b85: add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000072dbd: add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000080049: add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081757: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x000000000815f2: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000016099f: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x000000000c692e: add [rcx+rcx*4-0x1f], cl; mov rdx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000114565: add [rcx+rcx*4-0x20], al; pop r12; pop r13; ret; 
0x00000000174c64: add [rcx+rcx*4-0x20], al; pop r12; ret; 
0x0000000012c61f: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; pop r13; ret; 
0x00000000167773: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x00000000092596: add [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000001528f6: add [rcx+rcx*4-0x20], al; syscall; 
0x0000000009d38f: add [rcx+rcx*4-0x20], cl; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000d8d30: add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000007f9e3: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000061176: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x000000000e628c: add [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000012ea6d: add [rcx+rcx*4-0x2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000013ef1f: add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x0000000004078d: add [rcx+rcx*4-0x30], cl; ret; 
0x00000000092f6b: add [rcx+rcx*4-0x31], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000128a34: add [rcx+rcx*4-0x32], cl; mov edi, r12d; mov eax, r10d; syscall; 
0x000000000893e4: add [rcx+rcx*4-0x38], al; syscall; 
0x000000000995ee: add [rcx+rcx*4-0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009994b: add [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x0000000009bc90: add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall; 
0x0000000011d79e: add [rcx+rcx*4-0x40], al; add rsp, 0x8; ret; 
0x0000000003572c: add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret; 
0x00000000042c71: add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x00000000084794: add [rcx+rcx*4-0x40], al; ret; 
0x0000000011dae2: add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x000000001726d8: add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x0000000011dab2: add [rcx+rcx*4-0x40], cl; ret; 
0x00000000142fb8: add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000103c69: add [rcx+rcx*4-0x54], al; and al, 0xa0; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000010331c: add [rcx+rcx*4-0x5c], al; and al, 0x98; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000951be: add [rcx+rcx*4-0x6], cl; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000729e7: add [rcx+rcx*4-0x6], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000008b278: add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000013b5b9: add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000075d1b: add [rcx+rcx*4-0x6], cl; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000076589: add [rcx+rcx*4-0x6], cl; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000007cb6f: add [rcx+rcx*4-0x6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdaa: add [rcx+rcx*4-0x6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x00000000155111: add [rcx+rcx*4-0x7], cl; call rbp; 
0x0000000009eb92: add [rcx+rcx*4-0x8], al; mov r10d, 0x8; syscall; 
0x0000000009ebc8: add [rcx+rcx*4-0x8], al; syscall; 
0x000000000e7174: add [rcx+rcx*4-0x8], cl; call rax; 
0x00000000093e72: add [rcx+rcx*4-0x9], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000015d5e8: add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000969a8: add [rcx+rcx*4-0xe], cl; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f8c: add [rcx+rcx*4-0xe], cl; lea rsi, [rip+0x5cac9]; syscall; 
0x000000000c6c3e: add [rcx+rcx*4-0xe], cl; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000007284f: add [rcx+rcx*4-0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007afe2: add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000007707e: add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f3: add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007603d: add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000c6b4e: add [rcx+rcx*4-0xe], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x0000000005d8d8: add [rcx+rcx*4-0xf], cl; call qword ptr [rax+r8*8]; 
0x000000000b13e6: add [rcx+rcx*4], al; add rax, rcx; ret; 
0x00000000153eae: add [rcx+rcx*8+0x7880cd75], eax; jmp far fword ptr [rsi]; 
0x000000000b12fb: add [rcx+rcx*8-0x2ec6f78c], eax; jne short 0x00000000000b12f0; ret; 
0x00000000045539: add [rcx+rdi-0x1d], cl; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x0000000011fcf1: add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x0000000004548d: add [rcx-0x1076b312], cl; call rax; 
0x0000000005c4bb: add [rcx-0x1177b], ecx; jmp far fword ptr [rcx]; 
0x000000001afb91: add [rcx-0x1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000000388f6: add [rcx-0x1a743], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000466e6: add [rcx-0x1e], al; jg short 0x0000000000046677; adc [rcx-0x3f76bbea], cl; ret; 
0x000000000a050b: add [rcx-0x2708ffe9], ecx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093672: add [rcx-0x2dceba12], cl; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000edc85: add [rcx-0x2ff6b], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000524a3: add [rcx-0x3a], eax; jmp qword ptr [r8]; 
0x000000000961eb: add [rcx-0x3c3fcefa], cl; nop [rax]; mov eax, 0x3; ret; 
0x000000000e5647: add [rcx-0x3f76bbc6], cl; ret; 
0x0000000009af85: add [rcx-0x3fcee7b9], cl; ret; 
0x000000000975e1: add [rcx-0x3fcef7b9], cl; ret; 
0x000000000463d0: add [rcx-0x42], edi; xor eax, eax; ret; 
0x0000000009b782: add [rcx-0x4577bffa], cl; jno short 0x000000000009b793; add [rax], al; xor eax, eax; ret; 
0x000000000425e5: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xd; syscall; 
0x00000000053a42: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x000000000891cf: add [rcx-0x48], al; add [rax], eax; add [rax], al; mov eax, r8d; ret; 
0x0000000006542d: add [rcx-0x60f4b], ecx; dec dword ptr [rdi]; test [rsi-0x76000020], ecx; ret; 
0x0000000007e40f: add [rcx-0x73], al; dec dword ptr [r9-0x74b6cfbd]; add [rcx+0x39], cl; ret; 
0x00000000033ba7: add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x00000000033820: add [rcx-0x73], cl; add r9b, [r8+0x39]; ret; 
0x000000001685ce: add [rcx-0x73], cl; jb short 0x00000000001685db; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168812: add [rcx-0x73], cl; jne short 0x000000000016881f; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000091c93: add [rcx-0x73], cl; mov eax, 0x35c; syscall; 
0x00000000055fe5: add [rcx-0x73], cl; or [r8+0x39], r9b; ret; 
0x0000000007d905: add [rcx-0x74b7cbbd], cl; jl short 0x000000000007d931; or [rbx-0x7bf00002], al; ret; 
0x000000000d27e5: add [rcx-0x75], al; add [rcx-0x7ab767bb], ecx; shl byte ptr [rbp-0x51], 0x83; ret; 
0x00000000153680: add [rcx-0x75], al; jge short 0x0000000000153685; call qword ptr [rsp+0x20]; 
0x00000000091b4d: add [rcx-0x75], al; jno short 0x0000000000091b62; syscall; 
0x00000000091bad: add [rcx-0x75], al; jno short 0x0000000000091bc2; syscall; 
0x00000000092b1a: add [rcx-0x75], al; jo short 0x0000000000092b2b; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000153b6b: add [rcx-0x75], al; notrack call qword ptr [rsp+0x70]; 
0x0000000014efc8: add [rcx-0x75], al; outsb dx, [rsi]; adc [rax-0x7d], cl; ret; 
0x00000000044483: add [rcx-0x75], cl; cmp al, 0x24; mov rdx, r14; mov rax, [rsp]; call rax; 
0x0000000015d504: add [rcx-0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000c5d56: add [rcx-0x75], cl; jge short 0x00000000000c5d5b; movzx esi, bl; call rbp; 
0x0000000011fea2: add [rcx-0x75], cl; jge short 0x000000000011fea7; call rbx; 
0x0000000011fed5: add [rcx-0x75], cl; jge short 0x000000000011feda; call rbx; 
0x0000000011ff0a: add [rcx-0x75], cl; jge short 0x000000000011ff0f; call rbx; 
0x00000000120cea: add [rcx-0x75], cl; jge short 0x0000000000120cef; call rbx; 
0x00000000166162: add [rcx-0x75], cl; jo short 0x00000000001661b0; mov edi, ebp; call qword ptr [rax+0x20]; 
0x0000000012002f: add [rcx-0x75], cl; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000105af5: add [rcx-0x75], cl; or [rcx-0x75], r9b; push rsi; adc [rax+0x63], cl; ret far; 
0x00000000052334: add [rcx-0x75], cl; ret; 
0x00000000029eef: add [rcx-0x75], cl; xor al, 0x24; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed0: add [rcx-0x75], cl; xor al, 0x24; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x000000001428ac: add [rcx-0x75], eax; add [r9], r15b; ret; 
0x0000000016cc70: add [rcx-0x76b7d7b9], cl; ja short 0x000000000016cc90; mov eax, r8d; ret; 
0x00000000141e1d: add [rcx-0x76b7f3a9], cl; ret; 
0x000000000bc826: add [rcx-0x776b7fe], ecx; ret; 
0x0000000018d511: add [rcx-0x776b7fe], ecx; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x00000000142bd2: add [rcx-0x77], al; ret far; 
0x0000000002f81b: add [rcx-0x77], al; ret; 
0x00000000113f46: add [rcx-0x77], al; ror byte ptr [rax-0x77], 0x1; ret far; 
0x00000000032620: add [rcx-0x77], al; xor ecx, [rcx-0x77]; ret far; 
0x000000000910a3: add [rcx-0x77], bh; mov eax, 0x6e; ret; 
0x000000000b1167: add [rcx-0x77], cl; cmp cl, [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000003e5c7: add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret; 
0x00000000121f49: add [rcx-0x77], cl; fmul st, dword ptr [rcx+rcx*4-0x40]; pop rbx; ret; 
0x000000000a417a: add [rcx-0x77], cl; or [rax+0x39], cl; ret; 
0x00000000032727: add [rcx-0x77], cl; ret far; 
0x000000000a8c6f: add [rcx-0x77], cl; ret; 
0x0000000010b1f3: add [rcx-0x77], cl; ror byte ptr [rbp+0x1], 0xe9; call r15; 
0x000000001b88ef: add [rcx-0x77], cl; ror dword ptr [rcx+0x9], cl; ret; 
0x000000000c83d7: add [rcx-0x77], ecx; fiadd st, word ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x00000000082b3f: add [rcx-0x77], ecx; push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x000000000733bc: add [rcx-0x77], ecx; push rsi; sub dh, al; add [rcx-0x7d], cl; ret; 
0x00000000055b08: add [rcx-0x77], ecx; push rsp; ret; 
0x000000000974ce: add [rcx-0x77cf7a9], cl; and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x000000000d27e8: add [rcx-0x7ab767bb], ecx; shl byte ptr [rbp-0x51], 0x83; ret; 
0x000000001ba904: add [rcx-0x7b], cl; ret; 
0x0000000007b324: add [rcx-0x7d], al; call far fword ptr [rax+0x48]; 
0x0000000006aec9: add [rcx-0x7d], al; call qword ptr [rbx+0xf]; 
0x0000000006bee3: add [rcx-0x7d], al; cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000740e6: add [rcx-0x7d], al; in al, dx; add [rax-0x8cb43], eax; jmp qword ptr [rax]; 
0x000000000792fb: add [rcx-0x7d], al; in al, dx; add [rax-0x8eb43], eax; jmp qword ptr [rax]; 
0x0000000015018d: add [rcx-0x7d], al; iretd; jmp qword ptr [rcx+rcx*4+0x10]; 
0x000000000710b2: add [rcx-0x7d], al; iretd; jmp qword ptr [rdi+rax*8]; 
0x000000001474c9: add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x0000000007c27f: add [rcx-0x7d], al; jmp qword ptr [rdi+rcx]; 
0x0000000006b1d7: add [rcx-0x7d], al; jmp qword ptr [rsp+rsi*2]; 
0x0000000005c5c7: add [rcx-0x7d], al; out dx, eax; add [rax+0x39], ecx; ret; 
0x0000000007b79d: add [rcx-0x7d], al; vpsubsw xmm15, xmm15, xmm1; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000003c1d9: add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x00000000120279: add [rcx-0x7d], cl; ret far; 
0x00000000048b3f: add [rcx-0x7d], cl; ret; 
0x00000000054cbf: add [rcx-0x7d], cl; stc; add [rbp-0x77], ecx; ret far; 
0x0000000009886d: add [rcx-0x7e3d763f], cl; loope 0x0000000000098875; add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x0000000010fd38: add [rcx-0x80], al; call far fword ptr [rdi+rcx-0x7c]; 
0x000000000614af: add [rcx-0x80], al; jl short 0x00000000000614c9; jmp far fword ptr [rdi]; 
0x000000000475cd: add [rcx-0x80], al; jmp far fword ptr [rbx]; 
0x0000000010fcd9: add [rcx-0x80], al; jmp qword ptr [rdi]; 
0x0000000019d8cb: add [rcx-0x876b730], cl; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000133297: add [rcx-0x877b], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000009f9cf: add [rcx-0x877b], ecx; dec dword ptr [rax-0x7d]; ret; 
0x0000000009332f: add [rcx-0x97fbf22], cl; add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov eax, 0xca; syscall; 
0x0000000016ea07: add [rcx-0xa37b], cl; jmp far fword ptr [rax-0x7cc98aff]; 
0x0000000013fe8d: add [rcx-0xa], al; ret; 
0x000000001367b7: add [rcx-0xda08], cl; inc dword ptr [rax]; ret; 
0x00000000160905: add [rcx-0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x000000001247b1: add [rcx], al; add [rax+0xf], al; xchg esp, eax; ror dword ptr [rax-0x73], 0x5; ret; 
0x000000000a0f9d: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x1783c7; ret; 
0x000000000a0f7d: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x1783df; ret; 
0x000000000a0f5d: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x1783f7; ret; 
0x0000000015f9df: add [rcx], al; add [rax], al; add [rax-0x77], cl; ret; 
0x000000000f304c: add [rcx], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000091c8f: add [rcx], al; add [rax], al; add [rcx-0x73], cl; mov eax, 0x35c; syscall; 
0x000000001695ec: add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], ebx; call qword ptr [rax+0x18]; 
0x000000000918c9: add [rcx], al; add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x0000000003a34d: add [rcx], al; add [rax], al; and eax, esi; ret; 
0x000000000ecfe8: add [rcx], al; add [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000003a067: add [rcx], al; add [rax], al; ret; 
0x000000000c473f: add [rcx], al; add [rax], al; sub rax, rdx; ret; 
0x00000000045772: add [rcx], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000119c59: add [rcx], al; cmp eax, 0x410000; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x0000000019db49: add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x00000000119c5e: add [rcx], al; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x00000000109332: add [rcx], al; mov edx, 0x2; cmove eax, edx; ret; 
0x000000001666bf: add [rcx], al; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x0000000015d5f2: add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008f534: add [rcx], al; pop rbx; ret; 
0x000000000ff9ae: add [rcx], al; ret; 
0x000000000c52b9: add [rcx], al; xor eax, eax; ret; 
0x0000000003887a: add [rcx], bh; jp short 0x00000000000388b6; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000009828a: add [rcx], bh; ret; 
0x0000000011c10e: add [rcx], bl; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001b4124: add [rcx], ch; enter 0x3948, 0xc6; ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54c7: add [rcx], ch; enter 0x3948, 0xc6; ja 0x00000000001b5287; mov eax, esi; ret; 
0x000000000da056: add [rcx], ch; ret; 
0x000000000407e9: add [rcx], cl; add [rax], al; add [rax-0x1], bh; pop rbp; ret; 
0x0000000002a539: add [rcx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000410c6: add [rcx], cl; ror byte ptr [rcx-0x24efdbbc], 0x1; insb [rdi], dx; and al, 0x8; ret; 
0x0000000003e37c: add [rcx], dh; call qword ptr [rax+0x480ab60f]; 
0x0000000002bf43: add [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi+0xf]; 
0x0000000016763e: add [rcx], dh; fisttp dword ptr [rbp+rcx*4+0x4c], st; and al, 0x14; call qword ptr [rax]; 
0x00000000085e46: add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008add6: add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000085c58: add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f094: add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000045c6d: add [rcx], dh; imul cl; imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000167e92: add [rcx], dh; in eax, dx; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000121bf8: add [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000101f44: add [rcx], dh; jmp qword ptr [rsi+0xf]; 
0x000000000416d7: add [rcx], dh; leave; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x0000000015df91: add [rcx], dh; leave; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000009ede7: add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000089d2d: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000b56df: add [rcx], dh; rol bl, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000010934f: add [rcx], dh; rol byte ptr [rcx+0xc0fef9], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x00000000121c0b: add [rcx], dh; ror byte ptr [rax-0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000008b5a7: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000008ab81: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x0000000008ae6a: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000004649d: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000c47f2: add [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000001a1e20: add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4c9d: add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x0000000009ebbf: add [rcx], dh; ror byte ptr [rcx+0x2bfc3], cl; add [rax], al; mov eax, r15d; syscall; 
0x00000000085f3a: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000009eda6: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000113d87: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000095287: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x2], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000000969f0: add [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000000a80a9: add [rcx], dh; ror byte ptr [rcx-0x77], 0x30; ret; 
0x000000000923ab: add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x0000000000092422; ret; 
0x000000000f6ff7: add [rcx], dh; sar byte ptr [rax], 0xe; je 0x00000000000f6f5d; ret; 
0x00000000094984: add [rcx], dh; sar byte ptr [rdi+0x2], cl; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000053a3b: add [rcx], dh; sar byte ptr [rdi+0x2], cl; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000113f38: add [rcx], dh; shl bh, 0xc2; jmp rsi; 
0x00000000113cff: add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall; 
0x00000000118362: add [rcx], dh; shr al, 0x26; ret; 
0x000000000f0678: add [rcx], dh; shr al, 0xe0; jg short 0x00000000000f0672; jmp qword ptr [rsi+0xf]; 
0x000000001751f9: add [rcx], dh; shr bl, 0xd1; xchg ax, ax; mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x00000000175101: add [rcx], dh; shr bl, 0xd2; nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x000000001b81b6: add [rcx], dh; shr cl, 0x48; idiv edi; jmp qword ptr [rsi-0x70]; 
0x0000000007ed58: add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x00000000108d18: add [rcx], dl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000108d4c: add [rcx], dl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000118d0b: add [rcx], eax; adc [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000d806b: add [rcx], eax; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x000000001426ea: add [rcx], eax; add [rax], al; ret; 
0x000000001146e5: add [rcx], eax; add [rax], al; syscall; 
0x0000000009df8b: add [rcx], ebx; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000092acf: add [rcx], edi; ret; 
0x00000000108c28: add [rcx], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000620b3: add [rcx], esi; rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000009265b: add [rcx], esi; rol bl, 0x90; mov eax, 0x16; ret; 
0x000000000c6328: add [rcx], esi; shr byte ptr [rdx+0x1], cl; lea r9, [rsp+0x20]; call rbx; 
0x000000001afa06: add [rcx], esp; rol byte ptr [rbp+0xf8374c0], 0x1; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000000b56de: add [rcx], sil; rol bl, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000011e935: add [rdi+0x102a6c05], al; add [rbx+0x3f7f01f8], al; pop rbp; ret; 
0x000000000eaf2a: add [rdi+0x13], edi; pop rbx; ret; 
0x000000001721a8: add [rdi+0x15], edi; add rsp, 0x8; ret; 
0x00000000095e26: add [rdi+0x17], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000008f56f: add [rdi+0x18c4da05], al; add [rbx+0x57f01f8], al; ret; 
0x0000000008d097: add [rdi+0x18e9b205], al; add [rbx+0x3d7f01f8], al; add rsp, 0x8; ret; 
0x00000000107550: add [rdi+0x19], dh; lea rdx, [rip+0xcde86]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x00000000080a4f: add [rdi+0x19afba05], al; add [rbx+0x57f01f8], al; ret; 
0x00000000095333: add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x0000000012c703: add [rdi+0x1a], edi; add rsp, 0x18; ret; 
0x00000000150d2b: add [rdi+0x1a], edi; pop rbp; ret; 
0x000000000c5151: add [rdi+0x1c], esi; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x00000000081dd0: add [rdi+0x1d], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e6598: add [rdi+0x1d], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000db590: add [rdi+0x1d], edi; add rsp, 0x8; ret; 
0x000000000460d0: add [rdi+0x1d], edi; pop rbp; ret; 
0x000000000e6610: add [rdi+0x1d], edi; pop rbx; pop rbp; pop r12; ret; 
0x0000000017227f: add [rdi+0x1e], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000013e8e7: add [rdi+0x1e], edi; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000620ed: add [rdi+0x1f88307], al; jg short 0x0000000000062100; ret; 
0x000000001bb9ce: add [rdi+0x1f], edi; pop rbx; ret; 
0x0000000007e81d: add [rdi+0x20], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000461ec: add [rdi+0x21], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008a1eb: add [rdi+0x22], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000004530f: add [rdi+0x26], edi; xor eax, eax; pop rbx; ret; 
0x000000001afc57: add [rdi+0x26], esi; jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x0000000016d094: add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x00000000053ece: add [rdi+0x2], bh; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000d7bb4: add [rdi+0x2], bh; neg eax; ret; 
0x00000000126630: add [rdi+0x2d], esi; mov eax, 0x4; syscall; 
0x000000001266f0: add [rdi+0x2d], esi; mov eax, 0x6; syscall; 
0x000000001721ff: add [rdi+0x2e], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000012668f: add [rdi+0x2e], esi; mov eax, 0x5; syscall; 
0x0000000005a130: add [rdi+0x3004], bh; mov eax, 0x9e; syscall; 
0x00000000126755: add [rdi+0x30], esi; mov eax, 0x106; syscall; 
0x0000000017246b: add [rdi+0x32], edi; add rsp, 0x10; pop rbp; ret; 
0x00000000155c2a: add [rdi+0x33], edi; add rsp, 0x8; ret; 
0x000000000915cf: add [rdi+0x36], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001a11f6: add [rdi+0x37], esi; jb short 0x00000000001a11b3; mov [rax], sil; vzeroupper; ret; 
0x000000001a72e1: add [rdi+0x3c], esi; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x0000000008d0a0: add [rdi+0x3d], edi; add rsp, 0x8; ret; 
0x0000000013ed37: add [rdi+0x3e], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000011e93e: add [rdi+0x3f], edi; pop rbp; ret; 
0x0000000008746c: add [rdi+0x41], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016302c: add [rdi+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000099a0c: add [rdi+0x49], edi; nop; add rsp, 0x18; ret; 
0x00000000125a71: add [rdi+0x4], edi; ret; 
0x0000000013ea45: add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x00000000099b28: add [rdi+0x55], edi; nop; add rsp, 0x18; ret; 
0x00000000149618: add [rdi+0x5], bh; ret; 
0x00000000080a58: add [rdi+0x5], edi; ret; 
0x0000000015517a: add [rdi+0x62], edi; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000001b7b38: add [rdi+0x63], cl; adc al, 0x94; add r10, r12; notrack jmp r10; 
0x000000000b1a30: add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192eac: add [rdi+0x63], cl; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3ac: add [rdi+0x63], cl; or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001803ca: add [rdi+0x63], cl; or al, 0x8b; add r9, r11; notrack jmp r9; 
0x0000000017ae1a: add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; notrack jmp r9; 
0x000000001b799b: add [rdi+0x63], cl; or al, 0xa2; add r9, r10; notrack jmp r9; 
0x000000001a71d9: add [rdi+0x64], dh; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001bb9c5: add [rdi+0x650f405], al; add [rbx+0x1f7f01f8], al; pop rbx; ret; 
0x0000000009286f: add [rdi+0x6], dh; ret; 
0x000000001571bf: add [rdi+0x6], edi; ret; 
0x0000000009b576: add [rdi+0x7], esi; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000092b96: add [rdi+0x7], esi; mov [rdi], esi; xor eax, eax; ret; 
0x0000000013669a: add [rdi+0x8], dh; mov rax, rdi; sar rax, 0x6; ret; 
0x000000001a6854: add [rdi+0x9], bh; neg eax; ret; 
0x00000000088023: add [rdi+0xa], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a504a: add [rdi+0xb], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000620f2: add [rdi+0xb], edi; ret; 
0x0000000007d32b: add [rdi+0xe], dh; movsxd rdi, edi; lea rax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x00000000057116: add [rdi+rax*4-0x17], dh; sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000d42c6: add [rdi+rax*4-0x17], dh; sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x0000000009c54e: add [rdi+rax*8], ah; add [r8], al; add [rax-0x1], bh; ret; 
0x00000000042f8a: add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000122486: add [rdi+rax*8], ah; add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x00000000041380: add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x0000000002a536: add [rdi+rax*8], ah; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000011a9f6: add [rdi+rax*8], ah; or al, 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000a4116: add [rdi+rax*8], ah; or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x0000000009cda6: add [rdi+rax*8], ah; or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000149626: add [rdi+rax*8], ah; pop rdx; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000040786: add [rdi+rax*8], ah; sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x00000000120ae8: add [rdi+rbp+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x00000000132716: add [rdi+rbx*2+0x31], esi; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x000000000ecf3b: add [rdi+rcx*4+0x49], dh; cmp eax, 0x2468; jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x0000000007b442: add [rdi+rcx+0x48], cl; enter 0x448b, 0x24; adc [rbp-0x77], al; ret far; 
0x00000000133c2e: add [rdi+rcx-0x3d], dh; nop [rax+rax]; xor eax, eax; ret; 
0x00000000075f5b: add [rdi+rcx-0x4a], al; sub [rax-0x77], ecx; ret far; 
0x00000000092646: add [rdi+rcx-0x7b], esi; div byte ptr [rbp+0x13]; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x0000000003881b: add [rdi+rdi*8], bh; cmove eax, edx; mov [rip+0x1e2476], al; lea rax, [rip+0x1e2412]; ret; 
0x000000000ab674: add [rdi-0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000014965f: add [rdi-0x42], bh; mov eax, 0x1; ret; 
0x000000000c5b3c: add [rdi-0x5d8afff3], dh; ret; 
0x00000000041a37: add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret; 
0x00000000084419: add [rdi], cl; adc [rax+0x40], eax; pop rbx; ret; 
0x00000000156f35: add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x000000000c50aa: add [rdi], cl; adc [rax+rdx-0x10], eax; ret; 
0x00000000133337: add [rdi], cl; adc [rbp-0x78], edi; call rax; 
0x0000000008d864: add [rdi], cl; adc [rbx+0x48], eax; pop rbx; ret; 
0x000000001663f9: add [rdi], cl; adc [rcx], ebx; ret; 
0x00000000165ae1: add [rdi], cl; adc [rcx], ecx; ret; 
0x00000000165af9: add [rdi], cl; adc [rcx], edx; ret; 
0x000000001663d9: add [rdi], cl; adc [rcx], esp; ret; 
0x000000001663e8: add [rdi], cl; adc [rdi+0x20], edx; ret; 
0x00000000165acc: add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x000000000c500b: add [rdi], cl; adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x00000000155b81: add [rdi], cl; adc [rip+0xcdb5f], esp; call rbx; 
0x00000000113964: add [rdi], cl; adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x00000000113970: add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x000000001069ed: add [rdi], cl; adc [rsi+0x8], eax; ret; 
0x0000000015edda: add [rdi], cl; adc [rsi+0x8], ecx; ret; 
0x000000000c490d: add [rdi], cl; adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x00000000162bef: add [rdi], cl; adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000113197: add [rdi], cl; adc [rsp+0x128], eax; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x0000000016902e: add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000169332: add [rdi], cl; adc [rsp+0x18], ecx; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x000000001695f0: add [rdi], cl; adc [rsp+0xb8], ebx; call qword ptr [rax+0x18]; 
0x0000000016955a: add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x00000000113eeb: add [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi+0xb]; xor eax, eax; ret; 
0x00000000095db9: add [rdi], cl; add eax, 0xfff0003d; push qword ptr [rsi+0xd]; neg eax; ret; 
0x00000000095682: add [rdi], cl; add eax, 0xfffc17e9; jmp qword ptr [rsi+0xf]; 
0x000000001a9bad: add [rdi], cl; add esi, edx; je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001aa787: add [rdi], cl; add esi, edx; je short 0x00000000001aa791; vzeroall; ret; 
0x000000001aab37: add [rdi], cl; add esi, edx; je short 0x00000000001aab41; vzeroall; ret; 
0x000000001ab3f7: add [rdi], cl; add esi, edx; je short 0x00000000001ab401; vzeroall; ret; 
0x000000001ac0b5: add [rdi], cl; add esi, edx; je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001a6d2e: add [rdi], cl; cmp dword ptr [rbx-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x00000000166499: add [rdi], cl; enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x00000000166399: add [rdi], cl; enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x00000000162dfa: add [rdi], cl; enter 0x8789, 0xb4; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000162dca: add [rdi], cl; enter 0x8789, 0xb8; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000166438: add [rdi], cl; enter 0xc089, 0x48; mov [rcx], eax; mov eax, 0x1; ret; 
0x00000000099d09: add [rdi], cl; mov [rsi], eax; xor eax, eax; ret; 
0x000000001b019f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000001b092f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001b2c5f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000182d8f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret; 
0x0000000019e37f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; vzeroupper; ret; 
0x00000000039f41: add [rdi], cl; mov bh, 0x4; js short 0x0000000000039eca; loopne 0x0000000000039f51; ret; 
0x00000000039f81: add [rdi], cl; mov bh, 0x4; js short 0x0000000000039f0a; loopne 0x0000000000039f8b; ret; 
0x0000000003a021: add [rdi], cl; mov bh, 0x4; js short 0x0000000000039faa; loopne 0x000000000003a02d; ret; 
0x0000000003a101: add [rdi], cl; mov bh, 0x4; js short 0x000000000003a08a; loopne 0x000000000003a10a; ret; 
0x0000000012a51a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x1000; ret; 
0x0000000012a482: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x100; ret; 
0x00000000129f9a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x1; ret; 
0x0000000012a3ea: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x2000; ret; 
0x0000000012a16a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x200; ret; 
0x0000000012a03a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x2; ret; 
0x0000000012a2aa: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x4000; ret; 
0x00000000129efa: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x400; ret; 
0x0000000012a34a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x4; ret; 
0x0000000012a20a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x8000; ret; 
0x00000000129e5a: add [rdi], cl; mov bh, 0x4; push rax; and eax, 0x8; ret; 
0x0000000007a74f: add [rdi], cl; mov bh, 0x9d; pop rax; idiv edi; jmp qword ptr [rsi-0x77]; 
0x000000001b13af: add [rdi], cl; mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b091f: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000182dff: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret; 
0x0000000019f7af: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; vzeroupper; ret; 
0x000000000403ff: add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000001a5d2f: add [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d1f: add [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x00000000131427: add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x00000000077347: add [rdi], cl; mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x0000000008c2c1: add [rdi], cl; mov dh, 0xc0; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000003c477: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000dd991: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000062f80: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ded91: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000014d4d4: add [rdi], cl; mov dh, 0xc8; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000000e0f9a: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000e1018: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000007d492: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000063a39: add [rdi], cl; mov dh, 0xdb; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000b2ddf: add [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000014d3bd: add [rdi], cl; mov dh, 0xf0; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000c5d5a: add [rdi], cl; mov dh, 0xf3; call rbp; 
0x000000001af91f: add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x00000000199a9f: add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x000000001af92f: add [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; ret; 
0x00000000199aaf: add [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x000000000b509f: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b50af: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000b508f: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x00000000199abf: add [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x000000001af90f: add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x00000000199a8f: add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000b4bcf: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b4bbf: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000b4b9e: add [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000b4bdf: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bee: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4baf: add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000298a9: add [rdi], cl; or eax, [rbx+0x10247c]; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000004196f: add [rdi], cl; push rsi; add eax, 0x1a0759; mulss xmm0, [rip+0x1a0751]; ret; 
0x0000000004194a: add [rdi], cl; push rsi; add eax, 0x1a078e; mulss xmm0, [rip+0x1a0786]; ret; 
0x0000000004181b: add [rdi], cl; push rsp; ret; 
0x000000001b49d4: add [rdi], cl; pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x0000000014cf12: add [rdi], cl; shr r11, 0x1; mov [0x841f0f], eax; mov eax, 0xffffffff; ret; 
0x0000000016745b: add [rdi], cl; sub [rsp+0x20], eax; call qword ptr [rax+0x28]; 
0x000000000a0737: add [rdi], cl; sub [rsp+0x50], eax; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x000000001af2fc: add [rdi], cl; sub dword ptr [rbp-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x00000000193d1f: add [rdi], cl; sub dword ptr [rsi+0xe], 0x0; add [rcx+0x29], cl; ret far; 
0x000000001642c2: add [rdi], cl; test [rax+0x48000000], eax; add esp, 0x20; pop rbx; ret; 
0x00000000118e34: add [rdi], cl; test [rax+0x48000000], ebx; add esp, 0x40; pop r13; ret; 
0x00000000075121: add [rdi], cl; test [rax-0x9ffffdd], bl; ret; 
0x000000000677b9: add [rdi], cl; test [rax], esi; ret far; 
0x0000000011487f: add [rdi], cl; test [rbp+0x48000000], edi; add esp, 0x78; ret; 
0x0000000015dda3: add [rdi], cl; test [rcx+0x48000000], ebx; add esp, 0x60; pop rbp; ret; 
0x00000000115036: add [rdi], cl; test [rcx+0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000949a1: add [rdi], cl; test [rcx+0x48000001], cl; mov edi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x00000000114ef5: add [rdi], cl; test [rdi+0x48000000], ebx; add esp, 0x68; ret; 
0x00000000113ca2: add [rdi], cl; test [rdx+0x48000000], eax; add esp, 0x10; pop rbp; ret; 
0x00000000149fba: add [rdi], cl; test [rdx+0x48000000], esp; add esp, 0x110; pop rbx; ret; 
0x00000000191fc7: add [rdi], cl; test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000014a255: add [rdi], cl; test [rsi+0x48000000], esp; add esp, 0x110; pop rbx; ret; 
0x0000000014526d: add [rdi], cl; xchg [rax+rax-0x76b40000], bl; ret far; 
0x0000000006d4cf: add [rdi], cl; xchg ebp, eax; ret; 
0x0000000016bc53: add [rdi], cl; xchg ebp, eax; ror byte ptr [rcx+0x1b803], 0x0; add bl, ch; ret; 
0x0000000016507c: add [rdi], cl; xchg edi, eax; ret; 
0x0000000009bf30: add [rdi], eax; ret; 
0x000000000a79d0: add [rdi], ebx; clc; call far fword ptr [rbx+0x5d]; 
0x000000001acec0: add [rdi], ecx; add esi, edx; je short 0x00000000001aceca; vzeroall; ret; 
0x000000001ad52d: add [rdi], ecx; add esi, edx; je short 0x00000000001ad537; vzeroall; ret; 
0x0000000016645c: add [rdi], ecx; enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret; 
0x00000000165b45: add [rdi], ecx; enter 0x4789, 0x48; mov eax, 0x1; ret; 
0x00000000165b92: add [rdi], ecx; enter 0x4789, 0x54; mov eax, 0x1; ret; 
0x00000000165b72: add [rdi], ecx; enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x00000000162d9d: add [rdi], ecx; enter 0x8789, 0xa8; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000004cd25: add [rdi], ecx; mov ds, [rsi]; or [rax], al; add [rcx-0x77], cl; ret far; 
0x000000000b1233: add [rdi], ecx; mov esi, 0xf2390714; je short 0x00000000000b1230; ret; 
0x00000000049ee0: add [rdi], ecx; mov fs, [rcx]; or [rax], al; add [rcx-0x77], cl; ret far; 
0x000000000ce80c: add [rdi], ecx; mov gs, [rdi]; add eax, 0x89490000; ret far; 
0x0000000018d4be: add [rdi], ecx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x00000000047570: add [rdi], ecx; test [rcx-0x7cffffff], cl; jmp qword ptr [rdi+rcx]; 
0x0000000019f79f: add [rdi], ecx; test [rdx+0x1], edi; add [rax], al; vzeroupper; ret; 
0x000000001b37e7: add [rdi], ecx; test [rdx+0x4], eax; add [rax], al; ret; 
0x000000001a0207: add [rdi], ecx; test [rdx+0x4], eax; add [rax], al; vzeroupper; ret; 
0x000000001a04d3: add [rdi], ecx; test [rsi+0x1], esi; add [rax], al; vzeroupper; ret; 
0x000000001b085b: add [rdi], ecx; test [rsi+0x2], ebx; add [rax], al; ret; 
0x0000000009bf2f: add [rdi], rax; ret; 
0x0000000018d4bd: add [rdi], rcx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x000000000807af: add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000807ae: add [rdx+0x10], dil; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000015d957: add [rdx+0x19], ch; mov r8, [rsp+0x28]; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000076be8: add [rdx+0x1], bh; jmp rsi; 
0x0000000008c968: add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000867c5: add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000893d7: add [rdx+0x1], bh; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x0000000008ca16: add [rdx+0x1], bh; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x000000000893d6: add [rdx+0x1], dil; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x00000000167d81: add [rdx+0x1e], ch; lea r8, [rip-0x647b]; lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000174fd0: add [rdx+0x2], ch; call qword ptr [rax+0x340]; 
0x00000000109333: add [rdx+0x2], edi; cmove eax, edx; ret; 
0x000000001a4630: add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000000c3d4f: add [rdx+0x30178816], cl; in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000ae4f4: add [rdx+0x38], eax; pop rsp; syscall; 
0x000000000ae4f5: add [rdx+0x38], eax; pop rsp; syscall; 
0x000000001687f7: add [rdx+0x3c], ch; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x000000000ed075: add [rdx+0x40], bh; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000018b6af: add [rdx+0x48028801], cl; mov eax, edi; ret; 
0x000000000bc7e4: add [rdx+0x48028801], ecx; mov eax, edi; ret; 
0x000000001a3f61: add [rdx+0x4], esi; mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000000e7350: add [rdx+0x4c], dl; mov edx, ebx; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x00000000199f5f: add [rdx+0x5e], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000009276a: add [rdx+0x5f], edi; mov eax, 0x16; cmove eax, edx; ret; 
0x000000000f65bb: add [rdx+0x63], cl; add al, 0x92; add rax, rdx; notrack jmp rax; 
0x00000000101c0a: add [rdx+0x63], cl; add al, 0x9e; add rax, rsi; notrack jmp rax; 
0x000000000f091b: add [rdx+0x63], cl; add al, 0xaa; add rax, rdx; notrack jmp rax; 
0x000000000f2583: add [rdx+0x63], cl; add al, 0xb2; add rax, rdx; notrack jmp rax; 
0x0000000006b8c0: add [rdx+0x63], cl; add al, 0xbe; add rax, rsi; notrack jmp rax; 
0x000000000379cb: add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; notrack jmp rcx; 
0x0000000012216a: add [rdx+0x64], bh; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x0000000009af7b: add [rdx+0x64], esi; mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000ecf16: add [rdx+0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecf69: add [rdx+0x7f], bh; cmovne rax, rdx; ret; 
0x00000000125e4b: add [rdx+0x8], bh; syscall; 
0x00000000175464: add [rdx+rbx*8-0x77], dh; and al, 0xc; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x000000000298b0: add [rdx+rbx+0x48], dh; mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000a10c3: add [rdx+rcx+0x48], esi; add esp, 0x8; ret; 
0x00000000045e76: add [rdx-0x1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000001a71e1: add [rdx-0x1f], ah; dec byte ptr [rax+0x7f]; adc dil, r15b; ret; 
0x000000001a7305: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x00000000001a7350; adc bh, bh; ret; 
0x000000001afc65: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x00000000001afcb0; adc bh, bh; ret; 
0x000000001b0a7f: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x00000000001b0a8d; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b3bef: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x00000000001b3bfd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001a3eba: add [rdx-0x2f], esp; jl short 0x00000000001a3f07; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x000000001136cc: add [rdx-0x357c0003], cl; inc dword ptr [rbx-0x39760031]; mov eax, 0x75; syscall; 
0x000000000c095e: add [rdx-0x3ce877ea], cl; nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000001b47cf: add [rdx-0x4e], ah; and gs:[rdi], ah; ret far; 
0x000000001b30e9: add [rdx-0x4e], ah; and gs:[rsi], ah; ret far; 
0x00000000036b02: add [rdx-0x75], cl; add al, 0xf8; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x000000000a478b: add [rdx-0x7d], cl; xor [rax], r9; add [rax+0x39], ecx; ret; 
0x000000001a45c7: add [rdx-0xf], esp; jl short 0x00000000001a4614; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a4707: add [rdx-0xf], esp; jl short 0x00000000001a4754; adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x00000000169556: add [rdx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x0000000003a40b: add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret; 
0x00000000039fc7: add [rdx], al; add [rax], al; ret; 
0x0000000012e5fb: add [rdx], al; call rax; 
0x000000000c5507: add [rdx], al; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000a9a05: add [rdx], al; lea rax, [rip+0x15e12]; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a8445: add [rdx], al; lea rax, [rip+0x172e2]; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a8285: add [rdx], al; lea rax, [rip+0x1a512]; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a9a95: add [rdx], al; lea rax, [rip+0x7e32]; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000a8985: add [rdx], al; lea rax, [rip+0x8fb2]; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8855: add [rdx], al; lea rax, [rip+0x9022]; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8395: add [rdx], al; lea rax, [rip+0x9602]; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x00000000130f94: add [rdx], al; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000012ea74: add [rdx], al; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000012e760: add [rdx], al; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000009d59f: add [rdx], al; ret; 
0x00000000149629: add [rdx], bl; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000040789: add [rdx], ch; add [rax], al; add [rcx+rcx*4-0x30], cl; ret; 
0x00000000175021: add [rdx], ch; call qword ptr [rax+0x340]; 
0x000000000d9a8b: add [rdx], ch; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000000c5e02: add [rdx], ch; lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x000000001759cc: add [rdx], ch; mov rdi, r13; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x000000000d9a89: add [rdx], ch; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000000c5f68: add [rdx], ebp; lea rcx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c63a2: add [rdx], ebp; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000d3a46: add [rdx], ebp; mov r9, [rsp+0x10]; call r13; 
0x0000000009d59e: add [rdx], r8b; ret; 
0x000000000516f3: add [rip+0x34e85300], al; jno short 0x00000000000516f9; dec dword ptr [rax-0x77]; ret; 
0x00000000119c5b: add [rip+0x410000], bh; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x00000000119c5a: add [rip+0x410000], dil; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x0000000007305b: add [rip+0x63480000], eax; or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x000000000c2ecf: add [rip+0x63490011], eax; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000410c1: add [rip+0x7fff], ah; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000125617: add [rip-0x1000], ah; or eax, edx; ret; 
0x000000000601b7: add [rip-0x13e17], ch; jmp qword ptr [rsi-0x70]; 
0x0000000008c995: add [rip-0x16141c8c], bl; nop [rax+rax]; xor eax, eax; ret; 
0x0000000005ed87: add [rip-0x6f117], ch; jmp qword ptr [rsi-0x70]; 
0x00000000099946: add [rsi+0x1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000a0cfc: add [rsi+0x1], dh; ret; 
0x000000000ecebc: add [rsi+0x29], bh; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne short 0x00000000000eced0; ret; 
0x00000000120e9a: add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13; 
0x0000000002b965: add [rsi+0x2e], ah; nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x000000001b2b85: add [rsi+0x2e], ah; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000001b1755: add [rsi+0x2e], ah; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000011fcec: add [rsi+0x3], bh; je short 0x000000000011fd25; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000011fd7c: add [rsi+0x3], bh; je short 0x000000000011fdb5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120ae3: add [rsi+0x3], bh; je short 0x0000000000120b1a; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120b94: add [rsi+0x3], bh; je short 0x0000000000120bcd; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000167cca: add [rsi+0x4], bh; mov rdi, rbp; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015ded5: add [rsi+0x4], bh; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000119faf: add [rsi+0x5401], bh; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x0000000011a244: add [rsi+0x5409], bh; mov eax, 0x10; syscall; 
0x0000000011a275: add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000912ce: add [rsi+0x80], bh; mov eax, 0xca; syscall; 
0x00000000095daf: add [rsi+0x80], bh; mov eax, 0xcc; syscall; 
0x00000000177e0e: add [rsi+0x80], bh; syscall; 
0x0000000009138b: add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x000000001528f1: add [rsi+0x81], bh; mov eax, r12d; syscall; 
0x00000000091c80: add [rsi+0x81], bh; mov eax, r13d; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x000000001758e7: add [rsi+0x81], bh; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000001644a5: add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000bc771: add [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x00000000041bab: add [rsi+0xf], ah; fild st, dword ptr [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000050a4e: add [rsi+0xf], ah; insb [rdi], dx; ret; 
0x0000000008f2e4: add [rsi+0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000001605bb: add [rsi+0xf], ah; outsb dx, [rsi]; ret far; 
0x0000000005aa3c: add [rsi+0xf], ah; outsd dx, [rsi]; adc [rax-0xdf6b], ecx; jmp qword ptr [rsi+0xf]; 
0x00000000167453: add [rsi+0xf], ah; outsd dx, [rsi]; add eax, 0x7b224; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x0000000012962f: add [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x0000000004142b: add [rsi+0xf], ah; push rsp; or eax, 0x1a0c4c; orpd xmm0, xmm1; ret; 
0x000000000b4fbc: add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b4fe1: add [rsi+0xf], ah; xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000000bc775: add [rsi+0xf], esp; adc eax, [rdx]; mov rax, rdi; ret; 
0x00000000062da1: add [rsi+0xf], esp; insb [rdi], dx; ret; 
0x000000000ec54f: add [rsi+rbp-0x48], dh; ja short 0x00000000000ec555; add [rax], al; syscall; 
0x0000000011b17f: add [rsi+rbp-0x48], dh; jb short 0x000000000011b185; add [rax], al; syscall; 
0x000000000e772f: add [rsi+rbp-0x48], dh; je short 0x00000000000e7735; add [rax], al; syscall; 
0x000000000ec4af: add [rsi+rbp-0x48], dh; jne short 0x00000000000ec4b5; add [rax], al; syscall; 
0x0000000011b0ef: add [rsi+rbp-0x48], dh; jno short 0x000000000011b0f5; add [rax], al; syscall; 
0x000000000ec1ef: add [rsi+rbp-0x48], dh; push 0x0; add [rax], al; syscall; 
0x00000000119567: add [rsi+rcx+0x48], dh; mov dword ptr [rdi], 0xffffffff; ret; 
0x00000000083d4f: add [rsi-0x1], bh; call qword ptr [rax+0x18]; 
0x0000000008ea36: add [rsi-0x1], bh; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008b749: add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008da20: add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008e207: add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000089ffd: add [rsi-0x70], ah; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x000000000a00bd: add [rsi-0x70], ah; endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x0000000012646d: add [rsi-0x70], ah; endbr64; mov eax, 0x11f; syscall; 
0x000000001265ed: add [rsi-0x70], ah; endbr64; mov eax, 0x131; syscall; 
0x00000000119d3d: add [rsi-0x70], ah; endbr64; mov eax, 0x1; syscall; 
0x000000001197fd: add [rsi-0x70], ah; endbr64; mov eax, 0x1b4; syscall; 
0x0000000009fdbd: add [rsi-0x70], ah; endbr64; mov eax, 0x3; syscall; 
0x000000001145fd: add [rsi-0x70], ah; endbr64; mov eax, 0x53; syscall; 
0x000000000ec33d: add [rsi-0x70], ah; endbr64; mov eax, 0x79; syscall; 
0x0000000011b51d: add [rsi-0x70], ah; endbr64; mov eax, 0xaa; syscall; 
0x0000000011ec1d: add [rsi-0x70], ah; endbr64; mov eax, 0xb; syscall; 
0x000000000d99dd: add [rsi-0x70], ah; endbr64; mov eax, 0xc9; syscall; 
0x000000000e66dd: add [rsi-0x70], ah; endbr64; mov eax, [rdi]; ret; 
0x000000001265ad: add [rsi-0x70], ah; endbr64; mov r10, rcx; mov eax, 0x137; syscall; 
0x0000000003a35d: add [rsi-0x70], ah; endbr64; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000015d21d: add [rsi-0x70], ah; endbr64; ret; 
0x0000000009be1d: add [rsi-0x70], ah; endbr64; xor eax, eax; ret; 
0x0000000018d68d: add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x0000000018d6bd: add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000c0c6d: add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x000000000c0c9d: add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000018f9dd: add [rsi-0x70], ah; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000bfc7d: add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000008fe4d: add [rsi-0x70], ah; mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x0000000015df0d: add [rsi-0x70], ah; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d4ed: add [rsi-0x70], ah; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001b3e5d: add [rsi-0x70], ah; mov rax, rdi; ret; 
0x000000000c226d: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c140d: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000001b32ed: add [rsi-0x70], ah; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001b2c4d: add [rsi-0x70], ah; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000000378dd: add [rsi-0x70], ah; ret; 
0x000000001b61ad: add [rsi-0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b643d: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcfd: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001afdfd: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000c3d3d: add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret; 
0x000000000d6eed: add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000d7e7d: add [rsi-0x70], ah; xor rax, rax; ret; 
0x0000000018b6bf: add [rsi-0x75], ah; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x00000000041137: add [rsi-0x77], ah; and al, 0xf0; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000162d3c: add [rsi-0x77], ah; push rax; insb [rdi], dx; mov eax, 0x1; ret; 
0x00000000140d6a: add [rsi-0x77], ah; rol r14, 0x45; ret; 
0x000000000b155f: add [rsi-0x77], ah; xor [rax-0x73], cl; adc dil, r15b; ret; 
0x000000000bc7f7: add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x000000000bc807: add [rsi-0x77], esp; add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret; 
0x000000000df748: add [rsi-0x7f], ah; loope 0x00000000000df751; add al, 0x66; cmp ecx, 0x850f0400; ret; 
0x0000000011d2fc: add [rsi-0xf], esi; cmp dl, 0x20; je short 0x000000000011d2f0; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000042f8d: add [rsi], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000019165c: add [rsi], al; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001837c7: add [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000155079: add [rsi], dl; add [rax], al; add [rax+0x16], bh; ret; 
0x00000000118bd9: add [rsi], dl; add [rax], al; add [rax+0x1], bh; ret; 
0x000000001724bd: add [rsi], dl; add [rax], al; add [rax-0x1], bh; mov qword ptr [rdx], 0x0; ret; 
0x000000000424b9: add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000038f95: add [rsi], dl; add [rax], al; add cl, ch; cmp ebx, 0xffffffff; call qword ptr [rax-0x1a77a39]; 
0x0000000008fe20: add [rsi], dl; add [rax], al; add cl, ch; sar dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000183647: add [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000cf80c: add [rsp+rax+0x44], dh; mov eax, eax; ret; 
0x000000000919d1: add [rsp+rcx+0x48], esi; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007a383: add ah, [rax]; add [rax], al; add cl, ch; ret; 
0x0000000012e9f3: add ah, [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001a6c40: add ah, [rdx-0x1f]; dec byte ptr [rax+0x7f]; jg short 0x00000000001a6c4b; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a470e: add ah, [rdx-0xf]; jl short 0x00000000001a475b; adc [rsi+0x3], edx; ret; 
0x000000000bc93c: add ah, [rsi+0xf]; adc cl, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95c: add ah, [rsi+0xf]; adc cl, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97c: add ah, [rsi+0xf]; adc cl, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4cc: add ah, [rsi+0xf]; adc cl, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc7cb: add ah, [rsi+0xf]; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000bc7f4: add ah, [rsi-0x75]; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x0000000018fa43: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000bc858: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x000000000bc8dc: add ah, [rsi-0x75]; or [r14-0x77], spl; or [rax-0x77], cl; clc; ret; 
0x000000000c3d75: add ah, [rsi-0x77]; js 0xffffffffed3c3fd5; mov [rdi+0x3], ch; ret; 
0x0000000017831a: add ah, ah; sti; jmp qword ptr [rsi-0x70]; 
0x000000000c5b36: add al, 0x0; add [rax-0x73], cl; add eax, 0xdb700; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db1: add al, 0x0; add [rax-0x73], cl; add eax, 0xdbb85; jne short 0x00000000000c6d6f; ret; 
0x000000000c5621: add al, 0x0; add [rax-0x73], cl; add eax, 0xdd115; jne short 0x00000000000c55df; ret; 
0x000000000a9576: add al, 0x0; add [rax-0x73], cl; add eax, 0xf0680; jne short 0x00000000000a9524; ret; 
0x00000000150456: add al, 0x0; add [rax-0x75], cl; adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x00000000150410: add al, 0x0; add [rax-0x75], cl; or [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x0000000007690e: add al, 0x0; add [rax-0x77], cl; ret far; 
0x0000000006ad4a: add al, 0x0; add [rax-0x77], cl; ret; 
0x00000000162d71: add al, 0x0; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000977ab: add al, 0x0; add [rax], al; add [rax+0xca], bh; syscall; 
0x0000000009922e: add al, 0x0; add [rax], al; add [rcx], bh; ret; 
0x000000000903f6: add al, 0x0; add [rax], al; je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x0000000015ded7: add al, 0x0; add [rax], al; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000167450: add al, 0x0; add [rax], al; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000169111: add al, 0x0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000d8413: add al, 0x0; add [rax], al; ret; 
0x00000000126634: add al, 0x0; add [rax], al; syscall; 
0x00000000060ec6: add al, 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000cc297: add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x00000000096779: add al, 0x0; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x000000000a82ba: add al, 0x0; add [rbp-0x4b], dh; ret; 
0x000000000b4478: add al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000fecaf: add al, 0x0; add [rbx+0xf4801e2], al; ret; 
0x0000000009e8b7: add al, 0x0; add [rbx-0x76b3ffab], cl; ret; 
0x0000000013ef1d: add al, 0x0; add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x0000000013b5b7: add al, 0x0; add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x0000000007cb6d: add al, 0x0; add [rcx+rcx*4-0x6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007707c: add al, 0x0; add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000001b4c9b: add al, 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x0000000012e5f9: add al, 0x0; add [rdx], al; call rax; 
0x000000000a0cfa: add al, 0x0; add [rsi+0x1], dh; ret; 
0x000000000c093d: add al, 0x0; add bl, al; nop [rax+rax]; nop [rax]; ret; 
0x000000001344bd: add al, 0x0; cmovne rax, rdx; ret; 
0x00000000134715: add al, 0x0; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b6: add al, 0x0; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345e6: add al, 0x0; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x0000000004281c: add al, 0x0; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000046cd2: add al, 0x0; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000185a5f: add al, 0x0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000193c7a: add al, 0x0; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192eab: add al, 0x0; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3ab: add al, 0x0; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000ec0a8: add al, 0x0; nop [rax+rax]; endbr64; mov eax, 0x27; syscall; 
0x00000000045342: add al, 0x0; xor eax, eax; pop rbx; ret; 
0x000000000913e2: add al, 0x10; add [rax], al; add [rax], al; add [rax], al; ret; 
0x000000000cf804: add al, 0x10; cmp r8d, 0xff; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x00000000039ce2: add al, 0x10; mov eax, r8d; ret; 
0x00000000108b08: add al, 0x11; add [rbx+0x1186770d], cl; add [rcx+0x5b595a0a], cl; ret; 
0x000000000c2ef2: add al, 0x11; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000012a7ea: add al, 0x11; ret; 
0x000000000aa79b: add al, 0x17; mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x00000000000aa790; ret; 
0x000000000b2e35: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000198afc: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x000000001b01de: add al, 0x17; ret; 
0x000000000b2dca: add al, 0x17; sub eax, ecx; ret; 
0x0000000019fe5e: add al, 0x17; vzeroupper; ret; 
0x00000000162d61: add al, 0x1; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000096dac: add al, 0x1; add [rax], al; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x000000001426ae: add al, 0x1; add [rax], al; cmovne eax, edx; ret; 
0x000000000d7aa8: add al, 0x1; add [rax], al; ret; 
0x00000000115ca8: add al, 0x1; add [rax], al; syscall; 
0x00000000062053: add al, 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000974d8: add al, 0x1; add rsp, 0x8; ret; 
0x00000000099671: add al, 0x1; je 0x00000000000995b8; xor eax, eax; ret; 
0x0000000009991f: add al, 0x1; je short 0x00000000000998ce; mov eax, 0x83; ret; 
0x000000000f47c4: add al, 0x1; pop rbx; pop rbp; pop r12; ret; 
0x000000000620b1: add al, 0x1; xor eax, eax; ret; 
0x00000000045530: add al, 0x1d; add [rbp+rcx*4+0x25], cl; mov byte ptr [rbx*1-0x1cc6b400], 0x73; or al, 0x90; call qword ptr [rbx]; 
0x00000000045537: add al, 0x1d; add [rcx+rdi-0x1d], cl; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x0000000010c365: add al, 0x24; add [rax-0x77], ecx; ret; 
0x0000000015e271: add al, 0x24; add [rax], al; add [rax], al; call qword ptr [rax+0x20]; 
0x00000000143675: add al, 0x24; add [rax], al; add [rax], al; call rax; 
0x000000000ab509: add al, 0x24; add [rax], al; add [rax], al; pop r12; ret; 
0x0000000011bf4d: add al, 0x24; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000016b3af: add al, 0x24; add al, [rax]; add [rax], al; call r8; 
0x00000000172540: add al, 0x24; add rsp, 0x10; pop rbp; ret; 
0x00000000041f53: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000001152e7: add al, 0x24; add rsp, 0x18; ret; 
0x00000000127884: add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x00000000112955: add al, 0x24; add rsp, 0x28; ret; 
0x0000000012794a: add al, 0x24; add rsp, 0x30; pop r12; ret; 
0x00000000129d68: add al, 0x24; add rsp, 0x38; ret; 
0x00000000129dc9: add al, 0x24; add rsp, 0x40; ret; 
0x0000000015fcce: add al, 0x24; call qword ptr [rax+0x8]; 
0x000000001675b6: add al, 0x24; call qword ptr [rdx+0x20]; 
0x0000000004448d: add al, 0x24; call rax; 
0x00000000119f86: add al, 0x24; mov [rsp+0x23], al; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x0000000008b805: add al, 0x24; mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000083b9b: add al, 0x24; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000044612: add al, 0x24; mov r13, r15; add r15, r14; call rax; 
0x0000000016c332: add al, 0x24; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015fc08: add al, 0x24; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013f21e: add al, 0x24; mov rdi, r12; call rax; 
0x00000000145401: add al, 0x24; mov rdi, r15; call rax; 
0x0000000008df15: add al, 0x24; mov rdi, r15; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000013e5e9: add al, 0x24; mov rdi, rbx; call rax; 
0x00000000044402: add al, 0x24; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000008b842: add al, 0x24; mov rdx, r8; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x000000000445ae: add al, 0x24; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000012c44b: add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000009655e: add al, 0x25; adc [rax], al; add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000090aec: add al, 0x25; adc [rax], al; add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b597: add al, 0x25; adc [rax], al; add [rax], al; ret; 
0x0000000015510c: add al, 0x25; add [rax], al; add [rax], al; mov rcx, r15; call rbp; 
0x0000000002a25e: add al, 0x25; add [rax], al; add [rax], al; ret; 
0x00000000090b3b: add al, 0x25; add [rbx], al; add [rax], al; ret; 
0x00000000133c88: add al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000002a141: add al, 0x25; xor [rax], al; add [rax], al; jmp rax; 
0x0000000014366d: add al, 0x25; xor [rax], al; add [rax], al; mov qword ptr [rsp], 0x0; call rax; 
0x0000000019d567: add al, 0x2; cmovne rax, rcx; vzeroupper; ret; 
0x000000000736a0: add al, 0x2; lea rdx, [rip-0x43c]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000015fe0e: add al, 0x2; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000142dd5: add al, 0x2b; pop rbx; pop rbp; ret; 
0x0000000005a132: add al, 0x30; add [rax], al; mov eax, 0x9e; syscall; 
0x000000000c3da9: add al, 0x30; in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000c3dbb: add al, 0x30; in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000ba8ce: add al, 0x31; ret; 
0x0000000009b57b: add al, 0x31; rol bl, 0x90; mov eax, 0x16; ret; 
0x000000000dce42: add al, 0x31; rol byte ptr [rcx-0x5c28f401], 0x0; setb al; add eax, 0x16d; ret; 
0x000000000b56b5: add al, 0x37; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x000000000ba7ca: add al, 0x37; ret; 
0x000000001b3112: add al, 0x38; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x00000000199129: add al, 0x38; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000c6de6: add al, 0x39; bnd je short 0x00000000000c6def; test edx, edx; jne short 0x00000000000c6de0; ret; 
0x000000000a285f: add al, 0x39; ret; 
0x000000000b11d0: add al, 0x39; shl byte ptr [rbp-0x15], 0x1; mov rax, r8; ret; 
0x00000000191958: add al, 0x3; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000008453f: add al, 0x3a; ret; 
0x000000000d7a71: add al, 0x3b; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x000000000a0893: add al, 0x3f; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x000000000cf80e: add al, 0x44; mov eax, eax; ret; 
0x0000000011420b: add al, 0x44; mov eax, ecx; ret; 
0x000000000b13fd: add al, 0x48; add eax, ecx; ret; 
0x00000000125d2f: add al, 0x48; add esp, 0x20; pop r12; ret; 
0x00000000127faf: add al, 0x48; add esp, 0x28; ret; 
0x00000000112b65: add al, 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000964d1: add al, 0x48; cmp [rdx+rdi], ecx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x000000000b15ac: add al, 0x48; lea eax, [rax+rdx-0x1]; ret; 
0x000000000c130b: add al, 0x48; lea eax, [rdi+0x5]; ret; 
0x000000000c215b: add al, 0x48; lea eax, [rdi+0x6]; ret; 
0x0000000014a643: add al, 0x48; lea eax, [rdi+rsi+0x14]; ret; 
0x0000000018fa38: add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x0000000018fa4a: add al, 0x48; lea eax, [rdx+0x5]; ret; 
0x000000000a8307: add al, 0x48; lea eax, [rip+0x11f81]; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x00000000135b5a: add al, 0x48; lea eax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x000000000c5bba: add al, 0x48; lea eax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x0000000018d51a: add al, 0x48; lea ecx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x000000000c0537: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000000c1c1b: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x0000000019f6d7: add al, 0x48; lea edi, [rdi+0x4]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a040b: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b082b: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x000000001b39d7: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x000000000a0d22: add al, 0x48; lea edx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x000000000c5a84: add al, 0x48; lea edx, [rip+0xdbbb4]; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000c54bd: add al, 0x48; lea edx, [rip+0xdc46b]; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56ed: add al, 0x48; lea edx, [rip+0xdc68b]; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581d: add al, 0x48; lea edx, [rip+0xdcd1b]; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543d: add al, 0x48; lea edx, [rip+0xdce7b]; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000b163d: add al, 0x48; lea edx, [rip+0xe823b]; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000ab054: add al, 0x48; lea edx, [rip+0xee6b4]; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000a94c4: add al, 0x48; lea edx, [rip+0xeff74]; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a95ed: add al, 0x48; lea edx, [rip+0xf0a4b]; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000ab0dd: add al, 0x48; lea edx, [rip+0xf249b]; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2d: add al, 0x48; lea edx, [rip+0xf4d5b]; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876d: add al, 0x48; lea edx, [rip+0xf51eb]; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87ed: add al, 0x48; lea edx, [rip+0xf52eb]; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x0000000011d1e5: add al, 0x48; mov [rax+0x8], edi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000081e3b: add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret; 
0x00000000147cd2: add al, 0x48; mov [rbx+0x10], eax; mov eax, 0x14; add edx, 0x1; syscall; 
0x0000000018293a: add al, 0x48; mov [rdi], ecx; ret; 
0x00000000082882: add al, 0x48; mov [rdx+0x20], esi; mov [rcx], eax; ret; 
0x0000000016ca5b: add al, 0x48; mov eax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016c624: add al, 0x48; mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016c804: add al, 0x48; mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000009e6a1: add al, 0x48; mov eax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000bc83d: add al, 0x48; mov eax, edi; ret; 
0x00000000182933: add al, 0x48; mov ecx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x0000000016c5ee: add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c63f: add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x00000000175db8: add al, 0x48; shl eax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x000000000bab78: add al, 0x48; xor eax, eax; ret; 
0x00000000160f9c: add al, 0x48; xor ecx, eax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x00000000096799: add al, 0x49; mov [rax+rax+0x8], esi; xor eax, eax; mov [rdi], ecx; ret; 
0x000000000c1c39: add al, 0x49; sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x000000000c057b: add al, 0x49; sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x00000000143115: add al, 0x4c; lea eax, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000c5f6d: add al, 0x4c; lea ecx, [rsp+0x18]; call rbx; 
0x000000000c63a7: add al, 0x4c; lea ecx, [rsp+0x20]; call rbx; 
0x0000000012a51d: add al, 0x50; and eax, 0x1000; ret; 
0x0000000012a485: add al, 0x50; and eax, 0x100; ret; 
0x00000000129f9d: add al, 0x50; and eax, 0x1; ret; 
0x0000000012a3ed: add al, 0x50; and eax, 0x2000; ret; 
0x0000000012a16d: add al, 0x50; and eax, 0x200; ret; 
0x0000000012a03d: add al, 0x50; and eax, 0x2; ret; 
0x0000000012a2ad: add al, 0x50; and eax, 0x4000; ret; 
0x00000000129efd: add al, 0x50; and eax, 0x400; ret; 
0x0000000012a34d: add al, 0x50; and eax, 0x4; ret; 
0x0000000012a20d: add al, 0x50; and eax, 0x8000; ret; 
0x00000000129e5d: add al, 0x50; and eax, 0x8; ret; 
0x00000000133c08: add al, 0x50; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000112c97: add al, 0x5b; pop rbp; pop r14; ret; 
0x0000000003f34a: add al, 0x5b; ret; 
0x000000000a9838: add al, 0x63; adc [rax], al; cmove rax, rdx; ret; 
0x000000000df74d: add al, 0x66; cmp ecx, 0x850f0400; ret; 
0x0000000018fa46: add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000bc85b: add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x00000000183347: add al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a72dc: add al, 0x73; cmp al, [rbx+0x3c7701fa]; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000000c514c: add al, 0x73; sbb al, [rbx+0x1c7701fa]; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x00000000113a48: add al, 0x74; or [rax+0x1c], edi; syscall; 
0x000000001b8a82: add al, 0x74; or ecx, [rcx-0x7d]; ret; 
0x000000001187c1: add al, 0x75; adc [rbx-0x7d17d785], cl; ret far; 
0x0000000007fb61: add al, 0x75; ret far; 
0x00000000163e1a: add al, 0x75; ret; 
0x0000000003a084: add al, 0x78; and eax, 0x1000; ret; 
0x0000000003a064: add al, 0x78; and eax, 0x100; ret; 
0x0000000003a104: add al, 0x78; and eax, 0x1; ret; 
0x0000000003a044: add al, 0x78; and eax, 0x2000; ret; 
0x00000000039fc4: add al, 0x78; and eax, 0x200; ret; 
0x00000000039f84: add al, 0x78; and eax, 0x2; ret; 
0x0000000003a004: add al, 0x78; and eax, 0x4000; ret; 
0x00000000039f64: add al, 0x78; and eax, 0x400; ret; 
0x0000000003a024: add al, 0x78; and eax, 0x4; ret; 
0x00000000039fe4: add al, 0x78; and eax, 0x8000; ret; 
0x00000000039fa4: add al, 0x78; and eax, 0x800; ret; 
0x00000000039f44: add al, 0x78; and eax, 0x8; ret; 
0x000000000c0688: add al, 0x7; add [rax], al; ret; 
0x000000001ae6ea: add al, 0x7; cmovle rax, rcx; ret; 
0x000000001994aa: add al, 0x7; cmovle rax, rcx; vzeroupper; ret; 
0x000000000ba2e1: add al, 0x7; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000ba50c: add al, 0x7; ret; 
0x000000001a2da1: add al, 0x7; sub eax, ecx; ret; 
0x00000000199cea: add al, 0x7; sub eax, ecx; vzeroupper; ret; 
0x000000001a0514: add al, 0x7; vzeroupper; ret; 
0x000000000aa99f: add al, 0x80; jo short 0x00000000000aa9a9; sub cl, [rcx+rcx*4-0x40]; ret; 
0x0000000003c47d: add al, 0x81; add rax, rcx; notrack jmp rax; 
0x000000000c51b2: add al, 0x81; je short 0x00000000000c5198; ret; 
0x00000000073534: add al, 0x81; jmp far fword ptr [rdi+0xf000000]; 
0x00000000194e2b: add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000000c51ae: add al, 0x81; sub eax, [rcx+r8*4]; je short 0x00000000000c5198; ret; 
0x00000000196703: add al, 0x81; sub eax, edx; ret; 
0x0000000008c2c7: add al, 0x82; add rax, r10; notrack jmp rax; 
0x0000000002a3b3: add al, 0x82; add rax, rdx; notrack jmp rax; 
0x000000001b45b4: add al, 0x82; ret; 
0x000000000b7c07: add al, 0x82; sub eax, ecx; ret; 
0x000000000974d6: add al, 0x83; add al, 0x1; add rsp, 0x8; ret; 
0x000000000f14bd: add al, 0x83; call far fword ptr [rbp+0xf]; 
0x0000000007bbf9: add al, 0x83; call far fword ptr [rdx+0xf]; 
0x0000000008a018: add al, 0x83; loopne 0x000000000008a01d; ret; 
0x000000001430d4: add al, 0x83; loopne 0x0000000000143157; ret; 
0x0000000016ad1d: add al, 0x83; stc; sbb al, [rcx+0xf]; ret; 
0x0000000010f8ff: add al, 0x84; add rax, r12; notrack jmp rax; 
0x00000000135aab: add al, 0x85; leave; jne short 0x0000000000135a60; mov rax, r8; ret; 
0x000000000c5985: add al, 0x85; shl byte ptr [rbp-0x12], cl; xor eax, eax; ret; 
0x000000000c6dea: add al, 0x85; shl byte ptr [rbp-0xf], cl; ret; 
0x000000000736ab: add al, 0x86; add rax, rdx; jmp rax; 
0x0000000007dcba: add al, 0x86; add rax, rsi; notrack jmp rax; 
0x000000000dd997: add al, 0x87; add rax, rdi; notrack jmp rax; 
0x000000001b576a: add al, 0x87; cmovle rax, rcx; ret; 
0x000000001b438d: add al, 0x87; cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000000c5210: add al, 0x87; je short 0x00000000000c51f0; ret; 
0x000000001b455b: add al, 0x87; ret; 
0x000000000c520c: add al, 0x87; sub eax, [rdi+r8*4]; je short 0x00000000000c51f0; ret; 
0x000000001b5946: add al, 0x87; vzeroupper; ret; 
0x0000000018fa35: add al, 0x88; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x000000000bc83a: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000046680: add al, 0x88; mov [rcx+0x10], r8; mov [rcx+0x28], rax; xor eax, eax; ret; 
0x00000000077b35: add al, 0x89; adc [rax+0x39], ecx; ret; 
0x0000000016ca57: add al, 0x89; and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000000c0554: add al, 0x89; cmovns eax, [rbx-0x72b7fa18]; jg short 0x00000000000c0564; jne 0x00000000000c0d90; ret; 
0x000000000c3da4: add al, 0x89; js 0xffffffffed3c4203; mov [rdi+0x5], ch; ret; 
0x000000000c3db5: add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x000000000891e7: add al, 0x8; add [rax], al; ret; 
0x0000000012a6fc: add al, 0x8; mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x00000000129e3d: add al, 0x8; mov ecx, edx; shr eax, cl; and eax, 0x1; ret; 
0x000000000b2f9f: add al, 0x8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000198c79: add al, 0x8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000bc824: add al, 0x8b; add [rcx-0x776b7fe], ecx; ret; 
0x00000000078c2c: add al, 0x90; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x0000000003a0ba: add al, 0x90; ret; 
0x0000000003a9f5: add al, 0x91; add rax, rcx; notrack jmp rax; 
0x000000000f65be: add al, 0x92; add rax, rdx; notrack jmp rax; 
0x000000000c5c1a: add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x00000000105f51: add al, 0x9; ret; 
0x00000000063109: add al, 0x9a; add rax, rdx; notrack jmp rax; 
0x00000000101c0d: add al, 0x9e; add rax, rsi; notrack jmp rax; 
0x000000000f7abf: add al, 0xa1; add rax, rcx; notrack jmp rax; 
0x000000001b7aef: add al, 0xa1; xor edi, r13d; add rax, rcx; notrack jmp rax; 
0x000000001b78dd: add al, 0xa1; xor edi, r13d; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x000000000f7a0b: add al, 0xa2; add rax, rdx; notrack jmp rax; 
0x0000000012a5fa: add al, 0xa; ret; 
0x000000000ed42d: add al, 0xaa; add rax, rdx; notrack jmp rax; 
0x00000000039cde: add al, 0xb0; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x000000000eca35: add al, 0xb2; add rax, rdx; notrack jmp rax; 
0x000000000a96f8: add al, 0xb3; add [rax], eax; cmove rax, rdx; ret; 
0x00000000154d42: add al, 0xb7; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x0000000016d087: add al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000003a31c: add al, 0xb8; ret; 
0x0000000006aeeb: add al, 0xb9; add rax, rcx; notrack jmp rax; 
0x00000000168968: add al, 0xb; add [rax-0x73], cl; adc eax, 0xbf12e; mov fs:[rax], rdx; ret; 
0x000000000c52dc: add al, 0xba; add rax, rdx; notrack jmp rax; 
0x0000000006b8c3: add al, 0xbe; add rax, rsi; notrack jmp rax; 
0x000000001a4a42: add al, 0xc3; nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x0000000018d6d5: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6c4: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x000000000c0cb5: add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000c0ca4: add al, 0xc3; nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000001a73d0: add al, 0xc5; cld; ja short 0x00000000001a7398; vzeroupper; ret; 
0x000000001a76f2: add al, 0xc5; cld; ja short 0x00000000001a76ba; vzeroupper; ret; 
0x000000001a7b00: add al, 0xc5; cld; ja short 0x00000000001a7ac8; vzeroupper; ret; 
0x000000001a7def: add al, 0xc5; cld; ja short 0x00000000001a7db7; vzeroupper; ret; 
0x000000001a85dd: add al, 0xc5; cld; ja short 0x00000000001a85a5; vzeroupper; ret; 
0x000000001a89b7: add al, 0xc5; cld; ja short 0x00000000001a897f; vzeroupper; ret; 
0x000000001a8a94: add al, 0xc5; cld; ja short 0x00000000001a8a5c; vzeroupper; ret; 
0x000000001a8e11: add al, 0xc5; cld; ja short 0x00000000001a8dd9; vzeroupper; ret; 
0x000000001a8e6c: add al, 0xc5; cld; ja short 0x00000000001a8e34; vzeroupper; ret; 
0x000000001a94a6: add al, 0xc5; cld; ja short 0x00000000001a946e; vzeroupper; ret; 
0x000000001a972f: add al, 0xc5; cld; ja short 0x00000000001a96f7; vzeroupper; ret; 
0x000000001a9bb2: add al, 0xc5; cld; ja short 0x00000000001a9b7a; vzeroupper; ret; 
0x000000001aa78c: add al, 0xc5; cld; ja short 0x00000000001aa754; vzeroupper; ret; 
0x000000001aab3c: add al, 0xc5; cld; ja short 0x00000000001aab04; vzeroupper; ret; 
0x000000001aade2: add al, 0xc5; cld; ja short 0x00000000001aadaa; vzeroupper; ret; 
0x000000001ab3fc: add al, 0xc5; cld; ja short 0x00000000001ab3c4; vzeroupper; ret; 
0x000000001ab898: add al, 0xc5; cld; ja short 0x00000000001ab860; vzeroupper; ret; 
0x000000001ac0ba: add al, 0xc5; cld; ja short 0x00000000001ac082; vzeroupper; ret; 
0x000000001ac9dd: add al, 0xc5; cld; ja short 0x00000000001ac9a5; vzeroupper; ret; 
0x000000001acb4d: add al, 0xc5; cld; ja short 0x00000000001acb15; vzeroupper; ret; 
0x000000001ace60: add al, 0xc5; cld; ja short 0x00000000001ace28; vzeroupper; ret; 
0x000000001acec5: add al, 0xc5; cld; ja short 0x00000000001ace8d; vzeroupper; ret; 
0x000000001ad4a5: add al, 0xc5; cld; ja short 0x00000000001ad46d; vzeroupper; ret; 
0x000000001ad532: add al, 0xc5; cld; ja short 0x00000000001ad4fa; vzeroupper; ret; 
0x000000001add50: add al, 0xc5; cld; ja short 0x00000000001add18; vzeroupper; ret; 
0x000000001aded2: add al, 0xc5; cld; ja short 0x00000000001ade9a; vzeroupper; ret; 
0x000000001ae013: add al, 0xc5; cld; ja short 0x00000000001adfdb; vzeroupper; ret; 
0x000000001ae357: add al, 0xc5; cld; ja short 0x00000000001ae31f; vzeroupper; ret; 
0x000000000e5cc1: add al, 0xd0; ret; 
0x000000001bb2a2: add al, 0xd8; mov [r13+rbx*8], rdx; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x000000000fba1b: add al, 0xd8; sbb [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x000000001521ba: add al, 0xd; add [rax+0x39], cl; ret far; 
0x0000000012996e: add al, 0xe8; cmp al, 0xea; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x00000000169d67: add al, 0xe8; ret; 
0x000000001a3daa: add al, 0xe; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000013b63a: add al, 0xeb; mov edx, 0xffb0dde8; jmp qword ptr [rsi+0x2e]; 
0x00000000112d6d: add al, 0xeb; ret; 
0x00000000182ca2: add al, 0xf3; movq [rdi], mm1; ret; 
0x00000000175def: add al, 0xf7; setne al; movzx eax, al; ret; 
0x000000000a7f52: add al, 0xf8; jmp qword ptr [rsi+0xf]; 
0x0000000007d33a: add al, 0xf8; ret; 
0x00000000036b05: add al, 0xf8; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x000000000b14ee: add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000001a3546: add al, 0xf; movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x00000000192f3d: add al, 0xf; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x00000000198905: add al, 0xf; ret; 
0x000000000d7a74: add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x000000001918ce: add al, 0xf; test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000001b39db: add al, 0xf; test [rsi+0x2], ecx; add [rax], al; ret; 
0x000000000c053b: add al, 0xf; test [rsi+0x8], ecx; add [rax], al; ret; 
0x0000000010639b: add al, 0xf; test [rsi], ch; add eax, [rax]; add [rbx+0x634c01c3], al; ret; 
0x00000000037f33: add al, 0xff; jmp qword ptr [rsi+0x2e]; 
0x0000000009492d: add al, [rax]; add [rax+0x111], bh; syscall; 
0x000000000b4982: add al, [rax]; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000000eabbd: add al, [rax]; add [rax+0x38], bh; syscall; 
0x000000000424ac: add al, [rax]; add [rax+0x59058b48], dl; imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x0000000015eecc: add al, [rax]; add [rax+0x5d5bc031], dl; pop r12; ret; 
0x000000000947d0: add al, [rax]; add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x0000000009b5a7: add al, [rax]; add [rax+0xcb], bh; syscall; 
0x00000000095d5f: add al, [rax]; add [rax+0xcc], bh; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000090b17: add al, [rax]; add [rax-0x77], cl; push r8; mov fs:[0x300], rdi; ret; 
0x0000000019198b: add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000006d065: add al, [rax]; add [rax-0x7d], cl; ret; 
0x000000000565ed: add al, [rax]; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000149e53: add al, [rax]; add [rax], al; add [rax], al; add [rbx-0x7cb7efab], cl; ret; 
0x00000000149d21: add al, [rax]; add [rax], al; add [rax], al; add [rbx-0x7cb7efbb], cl; ret; 
0x00000000163853: add al, [rax]; add [rax], al; add rdi, 0x10; jmp rcx; 
0x00000000166343: add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000165a13: add al, [rax]; add [rax], al; add rdi, 0x68; jmp rcx; 
0x00000000162c16: add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x00000000116c06: add al, [rax]; add [rax], al; call qword ptr [rbp+0x40]; 
0x0000000016b3b1: add al, [rax]; add [rax], al; call r8; 
0x00000000109335: add al, [rax]; add [rax], al; cmove eax, edx; ret; 
0x00000000091331: add al, [rax]; add [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000094988: add al, [rax]; add [rax], al; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x0000000009528e: add al, [rax]; add [rax], al; mov eax, 0xe; syscall; 
0x0000000009eb8f: add al, [rax]; add [rax], al; mov eax, r15d; mov r10d, 0x8; syscall; 
0x0000000009ebc5: add al, [rax]; add [rax], al; mov eax, r15d; syscall; 
0x000000000893e1: add al, [rax]; add [rax], al; mov eax, r9d; syscall; 
0x000000000912cb: add al, [rax]; add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000053a3f: add al, [rax]; add [rax], al; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000085c5c: add al, [rax]; add [rax], al; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f098: add al, [rax]; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000099f82: add al, [rax]; add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000008c18d: add al, [rax]; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000016932f: add al, [rax]; add [rax], al; movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x00000000169557: add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x00000000056764: add al, [rax]; add [rax], al; ret; 
0x00000000142b4d: add al, [rax]; add [rax], al; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000000e5623: add al, [rax]; add [rax], al; syscall; 
0x0000000012248a: add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x000000000832eb: add al, [rax]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000f57f4: add al, [rax]; add [rbp+rcx*4+0x4f], cl; jmp qword ptr [rsi+0x41]; 
0x000000000b45f8: add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000435cd: add al, [rax]; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000009887e: add al, [rax]; add [rcx+0x39], al; ret; 
0x000000001453f8: add al, [rax]; add [rcx+0x4808244c], cl; mov eax, [rsp]; mov rdi, r15; call rax; 
0x0000000008ac53: add al, [rax]; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x00000000085b83: add al, [rax]; add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000128a32: add al, [rax]; add [rcx+rcx*4-0x32], cl; mov edi, r12d; mov eax, r10d; syscall; 
0x000000000388f3: add al, [rax]; add [rcx-0x1a743], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000009af83: add al, [rax]; add [rcx-0x3fcee7b9], cl; ret; 
0x000000000975df: add al, [rax]; add [rcx-0x3fcef7b9], cl; ret; 
0x00000000055fe3: add al, [rax]; add [rcx-0x73], cl; or [r8+0x39], r9b; ret; 
0x0000000014d198: add al, [rax]; add [rcx-0x77], al; ret far; 
0x000000000f0a8a: add al, [rax]; add [rcx-0x77], al; ret; 
0x00000000113f44: add al, [rax]; add [rcx-0x77], al; ror byte ptr [rax-0x77], 0x1; ret far; 
0x000000000740e4: add al, [rax]; add [rcx-0x7d], al; in al, dx; add [rax-0x8cb43], eax; jmp qword ptr [rax]; 
0x000000001474c7: add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x0000000010fcd6: add al, [rax]; add [rcx-0x80], al; jmp qword ptr [rdi]; 
0x0000000010fcd7: add al, [rax]; add [rcx-0x80], al; jmp qword ptr [rdi]; 
0x000000000ff9ac: add al, [rax]; add [rcx], al; ret; 
0x000000000ff4c2: add al, [rax]; add [rcx], bh; ret; 
0x0000000014b815: add al, [rax]; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000001b4e87: add al, [rax]; add [rdx-0x4e], ah; and gs:[rdi], ah; ret far; 
0x00000000095dad: add al, [rax]; add [rsi+0x80], bh; mov eax, 0xcc; syscall; 
0x0000000005aa3a: add al, [rax]; add [rsi+0xf], ah; outsd dx, [rsi]; adc [rax-0xdf6b], ecx; jmp qword ptr [rsi+0xf]; 
0x0000000008e205: add al, [rax]; add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000107290: add al, [rax]; add al, ch; mov dl, dh; std; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001bb8d9: add al, [rax]; add al, ch; mov edi, 0x48ffed50; mov eax, [rip+0x5d5e0]; call qword ptr [rax+0x370]; 
0x000000000ffd81: add al, [rax]; add al, ch; out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x00000000096685: add al, [rax]; add al, ch; ret; 
0x000000000adac2: add al, [rax]; add bh, dh; ret; 
0x000000000af2f0: add al, [rax]; add bh, dh; ret; 
0x000000000c53aa: add al, [rax]; add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x00000000075d67: add al, [rax]; add cl, ch; idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x00000000153865: add al, [rax]; call qword ptr [rsp+0x10]; 
0x000000001baab2: add al, [rax]; divss xmm0, [rip+0x29368]; ret; 
0x00000000114f9e: add al, [rax]; endbr64; mov eax, 0x49; syscall; 
0x00000000115c0e: add al, [rax]; endbr64; mov eax, 0x5c; syscall; 
0x000000001b01b8: add al, [rax]; lea rax, [rdi+0x2]; ret; 
0x0000000019fe28: add al, [rax]; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x00000000194e28: add al, [rax]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000196731: add al, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015367f: add al, [rax]; mov edi, [r13]; call qword ptr [rsp+0x20]; 
0x00000000153b6a: add al, [rax]; mov edi, [r14]; call qword ptr [rsp+0x70]; 
0x000000001966fd: add al, [rax]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000121f48: add al, [rax]; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000001b7b37: add al, [rax]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x000000001b799a: add al, [rax]; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x000000001143ea: add al, [rax]; nop [rax]; endbr64; mov eax, 0x5f; syscall; 
0x00000000142fbe: add al, [rax]; ret; 
0x000000001b39b8: add al, [rax]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x0000000019e398: add al, [rax]; vzeroupper; ret; 
0x000000001145fc: add al, [rax]; xchg ax, ax; endbr64; mov eax, 0x53; syscall; 
0x000000001536e7: add al, [rax]; xor edi, edi; call qword ptr [rsp+0x20]; 
0x00000000153ba3: add al, [rax]; xor edi, edi; call qword ptr [rsp+0x70]; 
0x00000000142f07: add al, [rbp-0x77]; sbb [rbx+0x49], bl; mov [rcx], edx; ret; 
0x00000000142c17: add al, [rbp-0x78]; dec dword ptr [rcx+r9*4+0x10]; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x0000000013056f: add al, [rbx+0x194501f8]; fild st, dword ptr [rcx-0x7d]; ret; 
0x00000000061fc9: add al, [rbx+0x277426f8]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000014d172: add al, [rbx+0x283c78e0]; jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x00000000092339: add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x000000001293db: add al, [rbx+0x6f74fff8]; add eax, 0x1; mov [rdx], eax; ret; 
0x0000000005469a: add al, [rbx-0x6f3cfe18]; xor eax, eax; ret; 
0x000000001411b6: add al, [rbx-0x79f0f008]; clc; add [rax], al; add [rcx-0x77], al; ret; 
0x000000000ee28d: add al, [rbx-0x7cb7fd37]; mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000a0931: add al, [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x00000000108dc1: add al, [rcx+rcx*4-0x38]; ret; 
0x000000000eac21: add al, [rcx+rcx*4-0x40]; ret; 
0x000000000dce34: add al, [rcx-0x70a3d706]; add dh, [rsi+0x3]; ret; 
0x000000001426d8: add al, [rcx]; add [rax], al; cmovne eax, edx; ret; 
0x00000000114635: add al, [rcx]; add [rax], al; syscall; 
0x000000000d8386: add al, [rdx+rdx*8-0x2e77ea8c]; and cl, 0xf; je short 0x00000000000d83b0; ret; 
0x00000000056653: add al, [rdx]; sar bh, 0xff; ret; 
0x000000000c078a: add al, [rsi]; add [rax], al; ret; 
0x000000001367a7: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000136825: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000098875: add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x00000000120f9c: add al, bl; cmc; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001a4a23: add al, bl; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x0000000018d6a5: add al, bl; nop [rax+rax]; mov [rcx], edx; ret; 
0x000000000bfc98: add al, bl; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000892b0: add al, bl; nop [rax+rax]; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x00000000089180: add al, bl; nop [rax+rax]; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x000000000d83aa: add al, bl; nop [rax]; add rax, 0x1; ret; 
0x000000000b14a7: add al, bl; nop [rax]; mov [rax], ecx; ret; 
0x000000000c098b: add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000008839e: add al, bpl; ret far; 
0x0000000008ebb6: add al, bpl; ret; 
0x00000000153b9e: add al, bpl; sub ebx, [rcx]; add al, [rax]; xor edi, edi; call qword ptr [rsp+0x70]; 
0x000000001509e9: add al, ch; adc [rdx-0x13], edi; dec dword ptr [rax-0x77]; ret; 
0x0000000013f366: add al, ch; adc al, 0x20; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000138b66: add al, ch; adc al, 0x88; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000098b38: add al, ch; adc dl, [rbx]; cli; jmp qword ptr [rsi-0x70]; 
0x0000000012c597: add al, ch; adc esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x00000000099c0c: add al, ch; add bh, dl; jmp qword ptr [rsi+0x2e]; 
0x000000000457c7: add al, ch; add dword ptr [rsi-0x1], 0xffffffff; xor eax, eax; ret; 
0x000000001bb965: add al, ch; add eax, 0x5bffe6ca; mov qword ptr [rip+0x64d79], 0x0; ret; 
0x000000000a8221: add al, ch; add r8, rdi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000e7e56: add al, ch; and al, 0x95; cli; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000096f28: add al, ch; and ch, [rdi]; cli; jmp qword ptr [rsi-0x70]; 
0x00000000150b27: add al, ch; and edx, [rbx-0x21170012]; idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000010611b: add al, ch; and r14b, r10b; jmp qword ptr [rsi+0xf]; 
0x00000000097f4b: add al, ch; call far fword ptr [rsi]; 
0x0000000002d61b: add al, ch; call qword ptr [rax-0x76befff0]; 
0x000000001a2981: add al, ch; clc; ja short 0x00000000001a2949; xor eax, eax; ret; 
0x00000000109a50: add al, ch; cli; add esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x00000000100870: add al, ch; cli; jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x0000000008db75: add al, ch; cmc; cmpsd [rsi], [rdi]; stc; jmp qword ptr [rsi+0xf]; 
0x00000000073611: add al, ch; cmp [rax-0x4], ebp; jmp qword ptr [rsi+0xf]; 
0x00000000091a10: add al, ch; cmp bh, [rbp-0x1]; jmp qword ptr [rsi+0x2e]; 
0x0000000014c02f: add al, ch; cmp eax, ebx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000010c02c: add al, ch; data64 ret far; 
0x00000000156f6b: add al, ch; fild st, qword ptr [rsi]; out dx, al; jmp qword ptr [rsi+0x2e]; 
0x00000000093871: add al, ch; fstp dword ptr [rsi-0x1], st; jmp qword ptr [rsi+0xf]; 
0x000000000a4166: add al, ch; hlt; ret far; 
0x00000000099fff: add al, ch; idiv r14; jmp qword ptr [rsi+0x66]; 
0x0000000007560f: add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000156d7b: add al, ch; iretd; xor dh, ch; jmp qword ptr [rsi+0x66]; 
0x000000001522d4: add al, ch; jbe short 0x0000000000152353; out dx, al; jmp qword ptr [rsi+0xf]; 
0x00000000139636: add al, ch; jge short 0x0000000000139630; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000168bbd: add al, ch; jge short 0x0000000000168bd5; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001433ce: add al, ch; jl short 0x000000000014343c; out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x000000000eb0ab: add al, ch; jmp qword ptr [rcx-0x6]; 
0x000000000ce4db: add al, ch; jmp rsi; 
0x00000000168ac5: add al, ch; jne short 0x0000000000168ade; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000078bd9: add al, ch; jno short 0x0000000000078bef; cld; call qword ptr [rax+0x87e8b48]; 
0x00000000151ed1: add al, ch; jns short 0x0000000000151f54; out dx, al; jmp qword ptr [rsi+0xf]; 
0x000000000dcd9d: add al, ch; lodsd [rsi]; shl ch, 0x1; jmp qword ptr [rsi+0x2e]; 
0x0000000009d018: add al, ch; loop 0x000000000009cfcf; clc; dec dword ptr [rax-0x77]; ret; 
0x0000000010f069: add al, ch; loope 0x000000000010f01a; bnd call qword ptr [rax-0x7af0a4c4]; 
0x000000001158c1: add al, ch; mov [rbp-0xe], eax; jmp qword ptr [rsi+0xf]; 
0x00000000151471: add al, ch; mov [rdi-0x13], ebp; dec dword ptr [rax-0x77]; ret; 
0x0000000008a67a: add al, ch; mov al, [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000176ec0: add al, ch; mov ch, [rdi]; in al, dx; jmp qword ptr [rsi+0x2e]; 
0x000000001623c4: add al, ch; mov dh, 0x5f; in al, dx; jmp qword ptr [rsi+0xf]; 
0x00000000111624: add al, ch; mov dl, dh; jmp qword ptr [rsi+0xf]; 
0x00000000107292: add al, ch; mov dl, dh; std; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001bb8db: add al, ch; mov edi, 0x48ffed50; mov eax, [rip+0x5d5e0]; call qword ptr [rax+0x370]; 
0x000000000ad1c1: add al, ch; mov esp, ecx; clc; jmp qword ptr [rsi+0xf]; 
0x00000000093241: add al, ch; or [rbp-0x1], esp; jmp qword ptr [rsi+0xf]; 
0x000000000ffd83: add al, ch; out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x0000000014a664: add al, ch; out 0xf7, al; out dx, al; jmp qword ptr [rsi+0xf]; 
0x0000000009b45c: add al, ch; out dx, al; loop 0x000000000009b45f; jmp qword ptr [rsi+0xf]; 
0x000000000994db: add al, ch; outsd dx, [rsi]; add bh, bh; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000001717ef: add al, ch; pop rbx; xchg ah, ch; jmp qword ptr [rsi+0x66]; 
0x000000001421eb: add al, ch; pop rdi; jl short 0x00000000001421df; jmp qword ptr [rsi+0x66]; 
0x000000000886e0: add al, ch; push 0x17; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000128cf2: add al, ch; push 0x48000004; mov dword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x000000000ed8e0: add al, ch; push 0xffffffffffffffc5; hlt; jmp qword ptr [rsi+0x2e]; 
0x0000000014e6f8: add al, ch; push rdx; mov dh, 0xff; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000013a726: add al, ch; push rsp; insb [rdi], dx; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000004da57: add al, ch; rep ret; 
0x0000000003ae3f: add al, ch; ret far; 
0x00000000030827: add al, ch; ret; 
0x00000000099531: add al, ch; sbb [rcx], ecx; cli; jmp qword ptr [rsi+0xf]; 
0x0000000015274d: add al, ch; sbb al, 0x5c; in eax, dx; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x0000000015274e: add al, ch; sbb al, 0x5c; in eax, dx; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000076a4f: add al, ch; sbb esi, [rip+0x63e90001]; out 0xff, eax; jmp qword ptr [rsi+0xf]; 
0x000000000a2629: add al, ch; shr eax, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x00000000168b3d: add al, ch; std; adc al, 0xf3; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000168c3d: add al, ch; std; adc esi, ebx; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000014204d: add al, ch; std; jge short 0x0000000000142041; jmp qword ptr [rsi+0x66]; 
0x000000000d30e4: add al, ch; sti; jmp qword ptr [rsi+0xf]; 
0x00000000172d00: add al, ch; stosb [rdi]; js short 0x0000000000172cfc; jmp qword ptr [rsi+0xf]; 
0x0000000010eba0: add al, ch; stosb [rdi]; mov dl, 0xf2; jmp qword ptr [rsi+0x2e]; 
0x00000000032722: add al, ch; sub [rdi], dh; add [rcx-0x77], cl; ret far; 
0x00000000091220: add al, ch; sub al, [rbp+0x2e66ffff]; nop [rax+rax]; neg eax; ret; 
0x00000000046030: add al, ch; sub al, [rdx]; or [rax], al; pop rbx; ret; 
0x00000000091c20: add al, ch; sub bh, [rbx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x000000000896f0: add al, ch; sub dh, al; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000153b9f: add al, ch; sub ebx, [rcx]; add al, [rax]; xor edi, edi; call qword ptr [rsp+0x70]; 
0x000000001bb6df: add al, ch; sub edx, [rbp-0xa]; call far fword ptr [rbx+0x48]; 
0x0000000012cff6: add al, ch; test [rbx-0xa], al; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000013acf6: add al, ch; test [rsi-0xb], ah; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000009edc2: add al, ch; test al, 0x95; clc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x0000000009edc1: add al, ch; test al, 0x95; clc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000065fc4: add al, ch; xchg [rsi], bh; std; jmp qword ptr [rsi+0xf]; 
0x000000000328b5: add al, ch; xchg ebp, eax; jne short 0x00000000000328ba; add [rbp-0x77], cl; ret; 
0x0000000008c4a8: add al, ch; xchg edx, eax; ret far; 
0x00000000059ab4: add al, ch; xchg esi, eax; add edi, esi; jmp qword ptr [rsi+0xf]; 
0x00000000094cb4: add al, ch; xchg esi, eax; push rcx; cli; jmp qword ptr [rsi+0xf]; 
0x000000001172c4: add al, ch; xchg esi, eax; ret far; 
0x0000000004dab4: add al, ch; xchg esi, eax; ret; 
0x000000000e97e6: add al, ch; xchg esp, eax; jnp short 0x00000000000e97e5; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000138146: add al, ch; xor al, 0x92; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000090de6: add al, dh; cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x00000000090f7c: add al, dh; cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x00000000096563: add al, dh; cmpxchg [rsp-0x8], rdx; ret; 
0x0000000013eec5: add ax, [rax]; mov rdi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000013ee80: add ax, [rax]; mov rdi, r12; call rbp; 
0x00000000056638: add bh, [rax+0x1]; ret; 
0x00000000042489: add bh, [rax-0x1]; pop rbp; ret; 
0x000000000427ab: add bh, [rax-0x1]; ret; 
0x000000001a6232: add bh, [rcx]; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x00000000162d6f: add bh, al; add al, 0x0; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000009922c: add bh, al; add al, 0x0; add [rax], al; add [rcx], bh; ret; 
0x00000000162d5f: add bh, al; add al, 0x1; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000056651: add bh, al; add al, [rdx]; sar bh, 0xff; ret; 
0x000000000a0bfd: add bh, al; add eax, 0x17f838; add [rax], al; add [rax], al; ret; 
0x000000001691e2: add bh, al; and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x0000000007ac4c: add bh, al; and al, 0x38; and [rax], al; add [rax], al; jmp rsi; 
0x00000000157046: add bh, al; sub byte ptr [rax], 0x0; add [rax], al; add rsp, 0x8; ret; 
0x000000000791cc: add bh, al; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000005b43c: add bh, al; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rsi]; 
0x0000000015f64b: add bh, al; xor dword ptr [rax+0x23], 0x0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000001bb8bf: add bh, bh; adc ecx, [rax-0x7d]; ret; 
0x000000000af303: add bh, bh; dec dword ptr [rdi]; test [rsi-0x8ffffe7], al; ret; 
0x000000000994de: add bh, bh; jmp qword ptr [rax+rcx*2-0x39]; 
0x00000000112fdc: add bh, bh; jne short 0x0000000000112fe5; mov [rdi], si; xor eax, eax; ret; 
0x0000000007f7d3: add bh, bh; loopne 0x000000000007f81f; mov eax, 0xffffffff; ret; 
0x0000000007f8b3: add bh, bh; loopne 0x000000000007f91d; nop [rax+rax]; xor eax, eax; ret; 
0x000000000d6b58: add bh, bh; ret; 
0x00000000169562: add bh, bh; ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000001bb2ad: add bh, bh; ror byte ptr [rax-0x7d], 0x1; ret; 
0x0000000015de20: add bh, bh; xor eax, 0x84719; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015de1a: add bh, bh; xor eax, 0x84727; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dce1: add bh, bh; xor eax, 0x84858; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dcdb: add bh, bh; xor eax, 0x84866; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000001b612f: add bh, ch; jmp qword ptr [rsi+0x66]; 
0x00000000134632: add bh, cl; dec dword ptr [rax-0x73]; add eax, 0xfff90384; cmove rax, rdx; ret; 
0x000000001361cb: add bh, cl; jmp qword ptr [rsi-0x70]; 
0x0000000009122f: add bh, dh; fadd st, st(3); nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000517c5: add bh, dh; fcomp st, dword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000004276a: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000427a6: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000046ce6: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000a82b6: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8274; ret; 
0x000000000a83c6: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8384; ret; 
0x000000000a8476: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8434; ret; 
0x000000000a8886: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8844; ret; 
0x000000000a89b6: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8974; ret; 
0x000000000a9a36: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac6: add bh, dh; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a9a84; ret; 
0x00000000098292: add bh, dh; ret; 
0x00000000099c0f: add bh, dl; jmp qword ptr [rsi+0x2e]; 
0x00000000099c0e: add bh, dl; jmp qword ptr [rsi+0x2e]; 
0x000000000f0616: add bl, [r11+0x5d]; pop r12; pop r13; ret; 
0x0000000015fe0f: add bl, [rbx+0x5d]; mov eax, r8d; ret; 
0x000000000f0617: add bl, [rbx+0x5d]; pop r12; pop r13; ret; 
0x000000001532fc: add bl, [rbx+0x5d]; sub eax, 0x1; pop r12; pop r13; ret; 
0x000000000612cd: add bl, [rbx-0x3d]; xor eax, eax; pop rbx; ret; 
0x00000000149666: add bl, al; cmp r9, r10; jae short 0x0000000000149620; mov byte ptr [r9], 0x0; ret; 
0x000000000f413e: add bl, al; mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x0000000015ee45: add bl, al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x000000001426ed: add bl, al; mov eax, 0x29; ret; 
0x000000000edc4c: add bl, al; mov eax, 0xffffffff; ret; 
0x000000000b56c3: add bl, al; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000419c9: add bl, al; nop [rax+rax]; addss xmm0, xmm0; ret; 
0x0000000015f558: add bl, al; nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x00000000043129: add bl, al; nop [rax+rax]; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000009b584: add bl, al; nop [rax+rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x000000000a7498: add bl, al; nop [rax+rax]; endbr64; ret; 
0x0000000015d238: add bl, al; nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000015f246: add bl, al; nop [rax+rax]; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x000000000f41a5: add bl, al; nop [rax+rax]; mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000f41b8: add bl, al; nop [rax+rax]; mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x00000000162d58: add bl, al; nop [rax+rax]; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000015ee35: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee25: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee15: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000009af34: add bl, al; nop [rax+rax]; mov eax, 0xb; ret; 
0x00000000043165: add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000142b64: add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001b13b9: add bl, al; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000d83e6: add bl, al; nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000d83f6: add bl, al; nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000d8406: add bl, al; nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000d8416: add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000d8426: add bl, al; nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000d8436: add bl, al; nop [rax+rax]; mov rax, 0x7; ret; 
0x000000000c52f5: add bl, al; nop [rax+rax]; mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x00000000038896: add bl, al; nop [rax+rax]; mov rax, [rsi+rax*8+0x80]; ret; 
0x000000000c20d3: add bl, al; nop [rax+rax]; mov rax, rdi; ret; 
0x000000001b3ab3: add bl, al; nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x00000000191abf: add bl, al; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x000000000c0c4f: add bl, al; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000c093f: add bl, al; nop [rax+rax]; nop [rax]; ret; 
0x000000001a685f: add bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000099df1: add bl, al; nop [rax+rax]; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x000000001b2ea4: add bl, al; nop [rax+rax]; ret; 
0x000000001b1784: add bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000122405: add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x00000000029f3a: add bl, al; nop [rax]; endbr64; lea rax, [rip+0x1aff5c]; ret; 
0x0000000016d09b: add bl, al; nop [rax]; endbr64; mov eax, [rdi+0x28]; ret; 
0x0000000002b97a: add bl, al; nop [rax]; endbr64; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000008f4ca: add bl, al; nop [rax]; endbr64; xor eax, eax; ret; 
0x000000000b148a: add bl, al; nop [rax]; mov [rax], si; ret; 
0x000000000f417a: add bl, al; nop [rax]; mov byte ptr [rax+0x8], 0x15; mov eax, 0x1; ret; 
0x00000000162d6b: add bl, al; nop [rax]; mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x000000001b644b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b645b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b5f7b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f8b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x00000000174a2f: add bl, al; nop [rax]; xor eax, eax; ret; 
0x000000000c53ad: add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000c539d: add bl, al; nop; mov rax, [rip+0x153b21]; mov rax, [rax+0x240]; ret; 
0x000000000c538d: add bl, al; nop; mov rax, [rip+0x153b31]; mov rax, [rax+0x238]; ret; 
0x000000000c537d: add bl, al; nop; mov rax, [rip+0x153b41]; mov rax, [rax+0x230]; ret; 
0x000000000c536d: add bl, al; nop; mov rax, [rip+0x153b51]; mov rax, [rax+0x228]; ret; 
0x000000000c535d: add bl, al; nop; mov rax, [rip+0x153b61]; mov rax, [rax+0x220]; ret; 
0x000000000c534d: add bl, al; nop; mov rax, [rip+0x153b71]; mov rax, [rax+0x218]; ret; 
0x000000000c533d: add bl, al; nop; mov rax, [rip+0x153b81]; mov rax, [rax+0x210]; ret; 
0x000000000c532d: add bl, al; nop; mov rax, [rip+0x153b91]; mov rax, [rax+0x208]; ret; 
0x000000000c531d: add bl, al; nop; mov rax, [rip+0x153ba1]; mov rax, [rax+0x200]; ret; 
0x000000000c530d: add bl, al; nop; mov rax, [rip+0x153bb1]; mov rax, [rax+0x1f8]; ret; 
0x000000001664bd: add bl, al; nop; xor eax, eax; ret; 
0x0000000009e637: add bl, al; ret; 
0x000000001b59cd: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001ae940: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5f6e: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000000ecf9c: add bl, al; xchg ax, ax; mov eax, 0x7e; ret; 
0x000000001426e4: add bl, al; xor eax, eax; ret; 
0x000000000412ef: add bl, bl; insb [rdi], dx; and al, 0x8; fadd st, st(0); ret; 
0x0000000004118b: add bl, bl; insb [rdi], dx; and al, 0xe8; ret; 
0x00000000173a3e: add bl, ch; fucomip st, st(0); fisubr st, dword ptr [rsp+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x0000000003b10d: add bl, ch; imul ecx, [rbx+0x1dfbd205], 0x3d8b4c00; ret; 
0x00000000165eab: add bl, ch; mov dh, 0xe8; insd [rdi], dx; or ch, bh; jmp qword ptr [rsi+0x66]; 
0x00000000164b8a: add bl, ch; mov eax, 0xfd1b8ee8; jmp qword ptr [rsi+0x66]; 
0x0000000015dd3a: add bl, ch; mov eax, 0xfd89dee8; jmp qword ptr [rsi+0x66]; 
0x00000000160222: add bl, ch; mov ebp, 0xfd64f6e8; jmp qword ptr [rsi+0xf]; 
0x00000000172702: add bl, ch; mov edx, 0xfc4016e8; jmp qword ptr [rsi+0xf]; 
0x000000000dc201: add bl, ch; or [rax-0x7d], ecx; ret; 
0x000000000a76e1: add bl, ch; or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x1716f1; call qword ptr [rax]; 
0x000000000ab3df: add bl, ch; ret far; 
0x00000000112d8b: add bl, ch; ret; 
0x000000000419cf: add bl, dh; addps xmm0, xmm0; ret; 
0x000000001ae6b5: add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x00000000199475: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001b525f: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b524f: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f0f: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3eff: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3eef: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001b3edf: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b526f: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b57af: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57bf: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57cf: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57df: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b644f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b645f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b5735: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b593f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000001b178f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8bf: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae72f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae73f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae74f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b5f7f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f8f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x000000001afe0f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001b18ff: add bl, dh; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001a276c: add bl, dh; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001b225f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b226f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b227f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001b40bf: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40cf: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001baab3: add bl, dh; divps xmm0, [rip+0x29368]; ret; 
0x000000000c0d3f: add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000c0d4f: add bl, dh; movq [rdi], mm0; ret; 
0x00000000162ccf: add bl, dh; movq mm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x000000001663a7: add bl, dh; movq mm0, [rcx]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x0000000015edff: add bl, dh; movq mm0, [rdi+0x38]; mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x000000000bfd6f: add bl, dh; movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x0000000015edcf: add bl, dh; movq mm1, [rdi+0x20]; mov dword ptr [rsi], 0x6; movups [rsi+0x8], xmm1; ret; 
0x000000001663b7: add bl, dh; movq mm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad7: add bl, dh; movq mm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162cdf: add bl, dh; movq mm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x00000000165aef: add bl, dh; movq mm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x00000000156f23: add bl, dh; movq mm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000001663cf: add bl, dh; movq mm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x000000001139f8: add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000041976: add bl, dh; mulps xmm0, [rip+0x1a0751]; ret; 
0x00000000041951: add bl, dh; mulps xmm0, [rip+0x1a0786]; ret; 
0x0000000016d17f: add bl, dh; nop edx, edi; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000092baf: add bl, dh; nop edx, edi; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x0000000008dd0f: add bl, dh; nop edx, edi; cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x00000000029f2f: add bl, dh; nop edx, edi; lea rax, [rip+0x1ae09b]; ret; 
0x00000000029f3f: add bl, dh; nop edx, edi; lea rax, [rip+0x1aff5c]; ret; 
0x0000000009266f: add bl, dh; nop edx, edi; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000112fff: add bl, dh; nop edx, edi; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000092b7f: add bl, dh; nop edx, edi; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be6f: add bl, dh; nop edx, edi; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0bef: add bl, dh; nop edx, edi; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x00000000125e7f: add bl, dh; nop edx, edi; mov eax, 0x122; syscall; 
0x0000000011525f: add bl, dh; nop edx, edi; mov eax, 0x125; syscall; 
0x0000000011bb6f: add bl, dh; nop edx, edi; mov eax, 0x132; syscall; 
0x000000001270af: add bl, dh; nop edx, edi; mov eax, 0x134; syscall; 
0x00000000114aef: add bl, dh; nop edx, edi; mov eax, 0x15; syscall; 
0x0000000009d53f: add bl, dh; nop edx, edi; mov eax, 0x18; syscall; 
0x0000000015d22f: add bl, dh; nop edx, edi; mov eax, 0x1; ret; 
0x0000000011ed1f: add bl, dh; nop edx, edi; mov eax, 0x1c; syscall; 
0x0000000012858f: add bl, dh; nop edx, edi; mov eax, 0x1e; syscall; 
0x0000000011518f: add bl, dh; nop edx, edi; mov eax, 0x20; syscall; 
0x000000000dcdaf: add bl, dh; nop edx, edi; mov eax, 0x24; syscall; 
0x000000000ea5af: add bl, dh; nop edx, edi; mov eax, 0x25; syscall; 
0x000000000dcddf: add bl, dh; nop edx, edi; mov eax, 0x26; syscall; 
0x000000000ec0af: add bl, dh; nop edx, edi; mov eax, 0x27; syscall; 
0x0000000015f54f: add bl, dh; nop edx, edi; mov eax, 0x2; ret; 
0x00000000127caf: add bl, dh; nop edx, edi; mov eax, 0x30; syscall; 
0x0000000012765f: add bl, dh; nop edx, edi; mov eax, 0x31; syscall; 
0x000000001277cf: add bl, dh; nop edx, edi; mov eax, 0x32; syscall; 
0x0000000012772f: add bl, dh; nop edx, edi; mov eax, 0x34; syscall; 
0x00000000119a0f: add bl, dh; nop edx, edi; mov eax, 0x3; syscall; 
0x000000000eb0ef: add bl, dh; nop edx, edi; mov eax, 0x3b; syscall; 
0x0000000004274f: add bl, dh; nop edx, edi; mov eax, 0x3e; syscall; 
0x0000000012845f: add bl, dh; nop edx, edi; mov eax, 0x40; syscall; 
0x000000001285bf: add bl, dh; nop edx, edi; mov eax, 0x43; syscall; 
0x000000001283bf: add bl, dh; nop edx, edi; mov eax, 0x44; syscall; 
0x00000000114f9f: add bl, dh; nop edx, edi; mov eax, 0x49; syscall; 
0x0000000011d15f: add bl, dh; nop edx, edi; mov eax, 0x4d; syscall; 
0x0000000011531f: add bl, dh; nop edx, edi; mov eax, 0x50; syscall; 
0x00000000061f1f: add bl, dh; nop edx, edi; mov eax, 0x52; syscall; 
0x0000000011612f: add bl, dh; nop edx, edi; mov eax, 0x56; syscall; 
0x0000000011624f: add bl, dh; nop edx, edi; mov eax, 0x57; syscall; 
0x0000000011618f: add bl, dh; nop edx, edi; mov eax, 0x58; syscall; 
0x000000001143ff: add bl, dh; nop edx, edi; mov eax, 0x5a; syscall; 
0x00000000115c0f: add bl, dh; nop edx, edi; mov eax, 0x5c; syscall; 
0x000000001143ef: add bl, dh; nop edx, edi; mov eax, 0x5f; syscall; 
0x0000000011a4ff: add bl, dh; nop edx, edi; mov eax, 0x62; syscall; 
0x00000000126f8f: add bl, dh; nop edx, edi; mov eax, 0x63; syscall; 
0x000000000ec0cf: add bl, dh; nop edx, edi; mov eax, 0x66; syscall; 
0x000000000ec0ef: add bl, dh; nop edx, edi; mov eax, 0x68; syscall; 
0x000000000ec0df: add bl, dh; nop edx, edi; mov eax, 0x6b; syscall; 
0x000000000ec0ff: add bl, dh; nop edx, edi; mov eax, 0x6c; syscall; 
0x000000000ec0bf: add bl, dh; nop edx, edi; mov eax, 0x6e; syscall; 
0x000000000ec10f: add bl, dh; nop edx, edi; mov eax, 0x73; syscall; 
0x00000000125c3f: add bl, dh; nop edx, edi; mov eax, 0x7a; syscall; 
0x000000000ec3cf: add bl, dh; nop edx, edi; mov eax, 0x7c; syscall; 
0x00000000126bff: add bl, dh; nop edx, edi; mov eax, 0x7d; syscall; 
0x00000000042d3f: add bl, dh; nop edx, edi; mov eax, 0x83; syscall; 
0x00000000125f4f: add bl, dh; nop edx, edi; mov eax, 0x87; syscall; 
0x000000001142af: add bl, dh; nop edx, edi; mov eax, 0x89; syscall; 
0x00000000114abf: add bl, dh; nop edx, edi; mov eax, 0x8; syscall; 
0x000000001142df: add bl, dh; nop edx, edi; mov eax, 0x8a; syscall; 
0x0000000011a8ef: add bl, dh; nop edx, edi; mov eax, 0x8c; syscall; 
0x0000000011a92f: add bl, dh; nop edx, edi; mov eax, 0x8d; syscall; 
0x00000000108bdf: add bl, dh; nop edx, edi; mov eax, 0x8e; syscall; 
0x0000000011edaf: add bl, dh; nop edx, edi; mov eax, 0x95; syscall; 
0x0000000011be9f: add bl, dh; nop edx, edi; mov eax, 0x99; syscall; 
0x00000000126b8f: add bl, dh; nop edx, edi; mov eax, 0x9e; syscall; 
0x0000000011baaf: add bl, dh; nop edx, edi; mov eax, 0xa2; syscall; 
0x0000000011b9bf: add bl, dh; nop edx, edi; mov eax, 0xa3; syscall; 
0x00000000125bdf: add bl, dh; nop edx, edi; mov eax, 0xa6; syscall; 
0x0000000011b65f: add bl, dh; nop edx, edi; mov eax, 0xab; syscall; 
0x00000000125aff: add bl, dh; nop edx, edi; mov eax, 0xad; syscall; 
0x00000000126d4f: add bl, dh; nop edx, edi; mov eax, 0xb1; syscall; 
0x00000000126ecf: add bl, dh; nop edx, edi; mov eax, 0xb4; syscall; 
0x00000000125c0f: add bl, dh; nop edx, edi; mov eax, 0xbb; syscall; 
0x0000000012226f: add bl, dh; nop edx, edi; mov eax, 0xc2; syscall; 
0x000000001222cf: add bl, dh; nop edx, edi; mov eax, 0xc3; syscall; 
0x000000001221af: add bl, dh; nop edx, edi; mov eax, 0xc4; syscall; 
0x0000000012235f: add bl, dh; nop edx, edi; mov eax, 0xc5; syscall; 
0x00000000108dcf: add bl, dh; nop edx, edi; mov eax, 0xcb; syscall; 
0x0000000012717f: add bl, dh; nop edx, edi; mov eax, 0xea; syscall; 
0x000000000a038f: add bl, dh; nop edx, edi; mov eax, 0xf5; syscall; 
0x00000000126daf: add bl, dh; nop edx, edi; mov eax, 0xfe; syscall; 
0x0000000008ddcf: add bl, dh; nop edx, edi; mov eax, 0xffffffff; ret; 
0x0000000008f1df: add bl, dh; nop edx, edi; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x0000000015204f: add bl, dh; nop edx, edi; mov eax, [rdi+0x20]; ret; 
0x0000000016d09f: add bl, dh; nop edx, edi; mov eax, [rdi+0x28]; ret; 
0x00000000119d6f: add bl, dh; nop edx, edi; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000008920f: add bl, dh; nop edx, edi; mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000891df: add bl, dh; nop edx, edi; mov eax, [rdi]; and eax, 0x804; ret; 
0x000000000961bf: add bl, dh; nop edx, edi; mov eax, [rip+0x189926]; ret; 
0x0000000004312f: add bl, dh; nop edx, edi; mov eax, [rip+0x1d60aa]; ret; 
0x0000000004311f: add bl, dh; nop edx, edi; mov eax, [rip+0x1d60be]; ret; 
0x0000000003a16f: add bl, dh; nop edx, edi; mov eax, edi; and eax, 0x7f; ret; 
0x0000000013676f: add bl, dh; nop edx, edi; mov eax, edi; bswap eax; ret; 
0x0000000013677f: add bl, dh; nop edx, edi; mov eax, edi; rol ax, 0x8; ret; 
0x0000000017836f: add bl, dh; nop edx, edi; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000009b53f: add bl, dh; nop edx, edi; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f58f: add bl, dh; nop edx, edi; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000061f4f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000119cff: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000012649f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000125f0f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000012656f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x136; syscall; 
0x0000000011931f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000127c6f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000126f5f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000012223f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0xbf; syscall; 
0x0000000012217f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000012854f: add bl, dh; nop edx, edi; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000113edf: add bl, dh; nop edx, edi; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000011941f: add bl, dh; nop edx, edi; mov r10d, ecx; mov eax, 0x118; syscall; 
0x00000000126aaf: add bl, dh; nop edx, edi; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141df: add bl, dh; nop edx, edi; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118edf: add bl, dh; nop edx, edi; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000009bf1f: add bl, dh; nop edx, edi; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008e81f: add bl, dh; nop edx, edi; mov rax, 0xffffffffffffffff; ret; 
0x0000000016cc2f: add bl, dh; nop edx, edi; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b2f: add bl, dh; nop edx, edi; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4df: add bl, dh; nop edx, edi; mov rax, [rdi+0x68]; ret; 
0x0000000009f18f: add bl, dh; nop edx, edi; mov rax, [rdi+0x78]; ret; 
0x0000000009753f: add bl, dh; nop edx, edi; mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c5f: add bl, dh; nop edx, edi; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000008f4bf: add bl, dh; nop edx, edi; mov rax, [rip+0x18b1b5]; ret; 
0x0000000003a39f: add bl, dh; nop edx, edi; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a37f: add bl, dh; nop edx, edi; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x000000000355cf: add bl, dh; nop edx, edi; mov rax, [rip+0x1e54a5]; ret; 
0x0000000002b97f: add bl, dh; nop edx, edi; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000002b96f: add bl, dh; nop edx, edi; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000175c9f: add bl, dh; nop edx, edi; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x0000000017503f: add bl, dh; nop edx, edi; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x0000000014a38f: add bl, dh; nop edx, edi; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x00000000136b1f: add bl, dh; nop edx, edi; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x00000000129cff: add bl, dh; nop edx, edi; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x0000000009b58f: add bl, dh; nop edx, edi; mov rax, fs:[0x10]; ret; 
0x0000000008f4ef: add bl, dh; nop edx, edi; mov rax, rdi; ret; 
0x0000000009a66f: add bl, dh; nop edx, edi; nop; xor eax, eax; ret; 
0x0000000004170f: add bl, dh; nop edx, edi; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000eac2f: add bl, dh; nop edx, edi; pop rdi; mov eax, 0x3a; syscall; 
0x00000000029cff: add bl, dh; nop edx, edi; ret; 
0x0000000008d32f: add bl, dh; nop edx, edi; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x0000000008f48f: add bl, dh; nop edx, edi; xor eax, eax; ret; 
0x00000000119ccf: add bl, dh; nop edx, edi; xor eax, eax; syscall; 
0x000000001285ef: add bl, dh; nop edx, edi; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000001b3eee: add bl, sil; bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001b593e: add bl, sil; bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000001b594e: add bl, sil; bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae94e: add bl, sil; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40be: add bl, sil; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000016d17e: add bl, sil; nop edx, edi; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000029f3e: add bl, sil; nop edx, edi; lea rax, [rip+0x1aff5c]; ret; 
0x00000000112ffe: add bl, sil; nop edx, edi; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000125e7e: add bl, sil; nop edx, edi; mov eax, 0x122; syscall; 
0x0000000011525e: add bl, sil; nop edx, edi; mov eax, 0x125; syscall; 
0x00000000114aee: add bl, sil; nop edx, edi; mov eax, 0x15; syscall; 
0x0000000009d53e: add bl, sil; nop edx, edi; mov eax, 0x18; syscall; 
0x0000000012858e: add bl, sil; nop edx, edi; mov eax, 0x1e; syscall; 
0x0000000016998e: add bl, sil; nop edx, edi; mov eax, 0x2; ret; 
0x00000000127cae: add bl, sil; nop edx, edi; mov eax, 0x30; syscall; 
0x000000001277ce: add bl, sil; nop edx, edi; mov eax, 0x32; syscall; 
0x000000001285be: add bl, sil; nop edx, edi; mov eax, 0x43; syscall; 
0x0000000011612e: add bl, sil; nop edx, edi; mov eax, 0x56; syscall; 
0x000000001143fe: add bl, sil; nop edx, edi; mov eax, 0x5a; syscall; 
0x000000001143ee: add bl, sil; nop edx, edi; mov eax, 0x5f; syscall; 
0x0000000011a4fe: add bl, sil; nop edx, edi; mov eax, 0x62; syscall; 
0x000000000ec0ce: add bl, sil; nop edx, edi; mov eax, 0x66; syscall; 
0x000000000ec0ee: add bl, sil; nop edx, edi; mov eax, 0x68; syscall; 
0x000000000ec0de: add bl, sil; nop edx, edi; mov eax, 0x6b; syscall; 
0x000000000ec0fe: add bl, sil; nop edx, edi; mov eax, 0x6c; syscall; 
0x000000000ec0be: add bl, sil; nop edx, edi; mov eax, 0x6e; syscall; 
0x000000000ec10e: add bl, sil; nop edx, edi; mov eax, 0x73; syscall; 
0x00000000125c3e: add bl, sil; nop edx, edi; mov eax, 0x7a; syscall; 
0x00000000126bfe: add bl, sil; nop edx, edi; mov eax, 0x7d; syscall; 
0x00000000125f4e: add bl, sil; nop edx, edi; mov eax, 0x87; syscall; 
0x000000001142ae: add bl, sil; nop edx, edi; mov eax, 0x89; syscall; 
0x0000000011a92e: add bl, sil; nop edx, edi; mov eax, 0x8d; syscall; 
0x00000000108bde: add bl, sil; nop edx, edi; mov eax, 0x8e; syscall; 
0x00000000126b8e: add bl, sil; nop edx, edi; mov eax, 0x9e; syscall; 
0x0000000011b65e: add bl, sil; nop edx, edi; mov eax, 0xab; syscall; 
0x0000000012717e: add bl, sil; nop edx, edi; mov eax, 0xea; syscall; 
0x000000000a038e: add bl, sil; nop edx, edi; mov eax, 0xf5; syscall; 
0x0000000008f46e: add bl, sil; nop edx, edi; mov eax, 0xffffffff; ret; 
0x0000000008f1de: add bl, sil; nop edx, edi; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000119d6e: add bl, sil; nop edx, edi; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000004311e: add bl, sil; nop edx, edi; mov eax, [rip+0x1d60be]; ret; 
0x0000000003a16e: add bl, sil; nop edx, edi; mov eax, edi; and eax, 0x7f; ret; 
0x0000000013676e: add bl, sil; nop edx, edi; mov eax, edi; bswap eax; ret; 
0x0000000009b53e: add bl, sil; nop edx, edi; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f58e: add bl, sil; nop edx, edi; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000119cfe: add bl, sil; nop edx, edi; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000002b97e: add bl, sil; nop edx, edi; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000004170e: add bl, sil; nop edx, edi; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000008f48e: add bl, sil; nop edx, edi; xor eax, eax; ret; 
0x000000001280e4: add bpl, [r8+0x31467502]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000133332: add byte ptr [r8], 0x0; add [rax], al; movups [rbp-0x78], xmm7; call rax; 
0x000000000c53a9: add byte ptr [rax+0x2], 0x0; add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000c090c: add byte ptr [rax+rax], 0x0; ret; 
0x000000000892e9: add byte ptr [rax-0x17c801b], 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000002f455: add byte ptr [rax], 0x0; add [rax+0x39], cl; ret; 
0x000000000912d0: add byte ptr [rax], 0x0; add [rax+0xca], bh; syscall; 
0x00000000095db1: add byte ptr [rax], 0x0; add [rax+0xcc], bh; syscall; 
0x00000000099eec: add byte ptr [rax], 0x0; add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x000000001bbadb: add byte ptr [rax], 0x0; add [rax], al; add rsp, 0x8; ret; 
0x0000000009277b: add byte ptr [rax], 0x0; add [rax], al; and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x000000000b4bab: add byte ptr [rax], 0x0; add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000b4bcb: add byte ptr [rax], 0x0; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b509b: add byte ptr [rax], 0x0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50ab: add byte ptr [rax], 0x0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000000eb0eb: add byte ptr [rax], 0x0; add [rax], al; endbr64; mov eax, 0x3b; syscall; 
0x0000000008e81b: add byte ptr [rax], 0x0; add [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f4eb: add byte ptr [rax], 0x0; add [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000090ffb: add byte ptr [rax], 0x0; add [rax], al; endbr64; ret; 
0x000000000b14ab: add byte ptr [rax], 0x0; add [rax], al; mov [rax], ecx; ret; 
0x0000000009c573: add byte ptr [rax], 0x0; add [rax], al; mov [rdx+0x8], rax; ret; 
0x000000000b1483: add byte ptr [rax], 0x0; add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x0000000007c6cb: add byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rsp+0x28], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c03: add byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rsp+0x50], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076b13: add byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rsp+0x5c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000099e3b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x16; ret; 
0x00000000142b5b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x2; ret; 
0x000000000961f3: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x3; ret; 
0x00000000126333: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x95; syscall; 
0x0000000014300b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000182cab: add byte ptr [rax], 0x0; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000001432eb: add byte ptr [rax], 0x0; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000008fee3: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x00000000122493: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rax+0x60]; ret; 
0x0000000009e07b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000016ca2b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000015fbdb: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000168c1b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b9b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rip+0xb0421]; pop rbx; ret; 
0x0000000009e77b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x00000000164b73: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000007c7a3: add byte ptr [rax], 0x0; add [rax], al; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076ce3: add byte ptr [rax], 0x0; add [rax], al; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000076c5b: add byte ptr [rax], 0x0; add [rax], al; mov rbx, rcx; mov r15d, 0x1; jmp rsi; 
0x000000000a798b: add byte ptr [rax], 0x0; add [rax], al; mov rdi, [rbx+0x48]; call rax; 
0x000000000a78bb: add byte ptr [rax], 0x0; add [rax], al; mov rdi, r12; call rax; 
0x00000000169603: add byte ptr [rax], 0x0; add [rax], al; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x00000000182aeb: add byte ptr [rax], 0x0; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x00000000133333: add byte ptr [rax], 0x0; add [rax], al; movups [rbp-0x78], xmm7; call rax; 
0x00000000182dfb: add byte ptr [rax], 0x0; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x00000000182d8b: add byte ptr [rax], 0x0; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000000d2bb3: add byte ptr [rax], 0x0; add [rax], al; pop rbp; ret; 
0x00000000052fa3: add byte ptr [rax], 0x0; add [rax], al; ret; 
0x000000001b525b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b524b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f0b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3efb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3edb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b526b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b59db: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b190b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b0a7b: add byte ptr [rax], 0x0; add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000019ed2d: add byte ptr [rax], 0x0; add [rax], al; vzeroupper; ret; 
0x000000000a2653: add byte ptr [rax], 0x0; add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x000000000404f3: add byte ptr [rax], 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000094adb: add byte ptr [rax], 0x0; add [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x00000000049cfa: add byte ptr [rax], 0x0; add [rbp+0x1], al; dec dword ptr [rax-0x7d]; ret; 
0x00000000091bf3: add byte ptr [rax], 0x0; add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x00000000091883: add byte ptr [rax], 0x0; add [rcx+rcx*4-0x38], al; syscall; 
0x000000000923a8: add byte ptr [rax], 0x0; add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x0000000000092422; ret; 
0x000000001803c7: add byte ptr [rax], 0x0; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; notrack jmp r9; 
0x000000001a71d6: add byte ptr [rax], 0x0; add [rdi+0x64], dh; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x0000000013d493: add byte ptr [rax], 0x0; add al, ch; ret; 
0x000000001b59ca: add byte ptr [rax], 0x0; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001ae93d: add byte ptr [rax], 0x0; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000099b71: add byte ptr [rax], 0x0; add cl, ch; push rsi; je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x0000000011d7db: add byte ptr [rax], 0x0; add rsp, 0x8; mov eax, r8d; ret; 
0x00000000119565: add byte ptr [rax], 0x0; je short 0x0000000000119578; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000039fe8: add byte ptr [rax], 0x0; ret; 
0x000000000c5329: add byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000d3c44: add byte ptr [rcx+rcx*4+0x42], 0x4; mov [rdx], eax; xor eax, eax; ret; 
0x000000000a0131: add byte ptr [rcx+rcx*4-0x20], 0x5d; pop r12; pop r13; ret; 
0x0000000017aeec: add byte ptr [rsi], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000a957c: add byte ptr [rsi], 0xf; add [rbp-0x5e], dh; ret; 
0x000000001280e5: add ch, [rax+0x31467502]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000008460a: add ch, [rcx]; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x00000000078932: add ch, [rip-0x7d000000]; ret; 
0x0000000013ceac: add ch, al; mov esi, 0x48fffff5; add esp, 0x18; ret; 
0x0000000003b6d0: add ch, al; pop rdx; in eax, 0xff; inc dword ptr [rax-0x76b7bcc8]; ret; 
0x000000000f6bbc: add ch, al; pop rsi; sbb dh, bl; jmp qword ptr [rsi+0xf]; 
0x000000001036df: add ch, al; ret far; 
0x000000000f6bf4: add ch, al; sbb dh, bl; call far fword ptr [rbx+0x31]; 
0x00000000199992: add ch, al; std; xlat [rbx]; ret; 
0x000000001af78c: add ch, al; sti; xchg ebx, eax; ret; 
0x000000001306fb: add ch, bl; or cl, [rcx+0x63]; rol byte ptr [rbp-0x77], 0x1; ret; 
0x00000000051968: add ch, bl; ret far; 
0x000000001358dc: add ch, cl; sub r13, rdi; jmp qword ptr [rsi+0xf]; 
0x0000000005a448: add cl, [r8-0x73]; add ecx, [rcx+0x39]; ret; 
0x000000000bc80c: add cl, [r8-0x76b7fdbe]; clc; ret; 
0x00000000046b1b: add cl, [r8-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001069cf: add cl, [rax+0x16893847]; movups [rsi+0x8], xmm0; ret; 
0x000000000b13df: add cl, [rax+0x1]; enter 0xfc3, 0x1f; add [rcx+rcx*4], al; add rax, rcx; ret; 
0x000000000d6be0: add cl, [rax+0x29]; bnd jbe 0x00000000000d6ef0; add rax, rdi; add rax, rcx; ret; 
0x000000000d6e77: add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e97: add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb7: add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed7: add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x00000000084373: add cl, [rax+0x29]; ret far; 
0x0000000011a9e4: add cl, [rax+0x39]; clc; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000005fa0d: add cl, [rax+0x39]; enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x000000000326e1: add cl, [rax+0x39]; ret far; 
0x0000000002fb7b: add cl, [rax+0x39]; ret; 
0x0000000014231f: add cl, [rax+0x39]; stc; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x0000000005a427: add cl, [rax+0x428d4801]; add [rcx+0x39], ecx; ret; 
0x000000000d924f: add cl, [rax+0xf]; scasd [rdi]; ret; 
0x0000000005a445: add cl, [rax-0x72b7fdbf]; add ecx, [rcx+0x39]; ret; 
0x000000000b157e: add cl, [rax-0x73]; adc dil, r15b; ret; 
0x000000000736a1: add cl, [rax-0x73]; adc eax, 0xfffffbc4; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000019d564: add cl, [rax-0x73]; add al, 0x2; cmovne rax, rcx; vzeroupper; ret; 
0x000000000c5af5: add cl, [rax-0x73]; add eax, 0x10fe3; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000c5508: add cl, [rax-0x73]; add eax, 0x127c0; cmovne rax, rdx; ret; 
0x000000000a9a06: add cl, [rax-0x73]; add eax, 0x15e12; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a8446: add cl, [rax-0x73]; add eax, 0x172e2; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a8286: add cl, [rax-0x73]; add eax, 0x1a512; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x00000000134710: add cl, [rax-0x73]; add eax, 0x46658; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b0: add cl, [rax-0x73]; add eax, 0x468d8; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345e0: add cl, [rax-0x73]; add eax, 0x49188; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x0000000013485a: add cl, [rax-0x73]; add eax, 0x7293e; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000000a9a96: add cl, [rax-0x73]; add eax, 0x7e32; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000a8986: add cl, [rax-0x73]; add eax, 0x8fb2; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8856: add cl, [rax-0x73]; add eax, 0x9022; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8396: add cl, [rax-0x73]; add eax, 0x9602; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000a8918: add cl, [rax-0x73]; add eax, 0xa780; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x000000000a9535: add cl, [rax-0x73]; add eax, 0xbcd3; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bca: add cl, [rax-0x73]; add eax, 0xbe2e; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b2a: add cl, [rax-0x73]; add eax, 0xbeae; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a9d10: add cl, [rax-0x73]; add eax, 0xd1088; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d0: add cl, [rax-0x73]; add eax, 0xd14a8; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a96a0: add cl, [rax-0x73]; add eax, 0xd40d8; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000a9c1a: add cl, [rax-0x73]; add eax, 0xe02e; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b7a: add cl, [rax-0x73]; add eax, 0xe0ae; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000a97ea: add cl, [rax-0x73]; add eax, 0xfd9ce; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x0000000005a449: add cl, [rax-0x73]; add ecx, [rcx+0x39]; ret; 
0x000000000c04f9: add cl, [rax-0x73]; jg short 0x00000000000c0500; jne 0x00000000000c0d90; ret; 
0x000000000c1bdd: add cl, [rax-0x73]; jg short 0x00000000000c1be4; jne 0x00000000000c25e0; ret; 
0x0000000019f699: add cl, [rax-0x73]; jg short 0x000000000019f6a0; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03cd: add cl, [rax-0x73]; jg short 0x00000000001a03d4; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b07ed: add cl, [rax-0x73]; jg short 0x00000000001b07f4; jne 0x00000000001b0ac0; ret; 
0x000000001b3999: add cl, [rax-0x73]; jg short 0x00000000001b39a0; jne 0x00000000001b3c30; ret; 
0x00000000072fe2: add cl, [rax-0x73]; or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078515: add cl, [rax-0x73]; or al, 0x13; add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000018faf5: add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x0000000018b765: add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000018b695: add cl, [rax-0x75]; or [r8-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x000000000bc80d: add cl, [rax-0x76b7fdbe]; clc; ret; 
0x00000000046b1c: add cl, [rax-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000bc779: add cl, [rax-0x77]; clc; ret; 
0x0000000012e761: add cl, [rax-0x77]; out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000d9eab: add cl, [rax-0x77]; ret; 
0x000000000ee290: add cl, [rax-0x7d]; mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000006a115: add cl, [rax-0x7d]; ret; 
0x000000001b4f47: add cl, [rax-0x7d]; shl dword ptr [rax+0x49], 0x39; ret far; 
0x0000000002f813: add cl, [rbp+rcx*4-0x74]; and al, 0x88; add [rax], al; add [rcx-0x77], al; ret; 
0x000000000b034d: add cl, [rbp-0x77]; ret far; 
0x00000000182bd2: add cl, [rbx+0x257890e]; mov [rdi], ecx; ret; 
0x000000000bc878: add cl, [rbx+0x42890341]; add ecx, [rax-0x77]; clc; ret; 
0x0000000018fa75: add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret; 
0x000000000bc91c: add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret; 
0x000000001b4e5c: add cl, [rcx+0x39]; ret far; 
0x0000000005a0f6: add cl, [rcx+0x39]; ret; 
0x00000000142e87: add cl, [rcx+0x77c739c6]; push rdx; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000093708: add cl, [rcx-0x1f76bb3e]; syscall; 
0x00000000092697: add cl, [rcx-0x3fcef7b9]; ret; 
0x000000000dcaa1: add cl, [rcx-0x77]; vpslldq xmm2, xmm5, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000793ff: add cl, [rcx-0x8a77b]; jmp qword ptr [rsi+0x2e]; 
0x000000000db333: add cl, [rdi+rcx-0x51]; ret; 
0x000000000c4b8a: add cl, [rdi]; adc [rcx], eax; ret; 
0x000000001ad4a0: add cl, [rdi]; add esi, edx; je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000001a03d1: add cl, [rdi]; test [rax+0x2], edi; add [rax], al; vzeroupper; ret; 
0x0000000010ff0e: add cl, [rdi]; xchg ebp, eax; ret; 
0x000000000bc80a: add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret; 
0x0000000018fa33: add cl, [rdx+0x42880441]; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x000000000bc838: add cl, [rdx+0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x000000000bc8bc: add cl, [rdx+0x42880841]; or [rax-0x77], cl; clc; ret; 
0x0000000012e9a9: add cl, [rdx]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000152356: add cl, [rip+0x481b7500]; mov [rip+0xd0276], ecx; mov eax, r8d; ret; 
0x0000000015235f: add cl, [rip-0x3f76bc00]; ret; 
0x0000000013616f: add cl, bh; call qword ptr [rax-0x18]; 
0x00000000135b9b: add cl, bh; jmp qword ptr [rsi-0x70]; 
0x0000000009c086: add cl, bpl; ret; 
0x000000000378d8: add cl, ch; adc al, [rsi]; add [rax], al; xchg ax, ax; ret; 
0x000000000d3748: add cl, ch; bnd jo short 0x00000000000d3746; jmp qword ptr [rsi-0x70]; 
0x0000000017394e: add cl, ch; cmp al, 0xd; cli; jmp qword ptr [rsi+0x66]; 
0x00000000141ffc: add cl, ch; cmp dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001450e4: add cl, ch; cmp ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000038f99: add cl, ch; cmp ebx, 0xffffffff; call qword ptr [rax-0x1a77a39]; 
0x0000000007c27a: add cl, ch; cmpsd [rsi], [rdi]; add [rax], al; add [rcx-0x7d], al; jmp qword ptr [rdi+rcx]; 
0x0000000007a9c9: add cl, ch; fcos; call qword ptr [rax-0x5e1f00d]; 
0x00000000075d69: add cl, ch; idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x00000000157a7f: add cl, ch; idiv r15; jmp qword ptr [rsi+0x66]; 
0x0000000015a35f: add cl, ch; imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x0000000009bc44: add cl, ch; imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000003be4e: add cl, ch; in al, dx; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000068d83: add cl, ch; jmp qword ptr [rbx-0x76bb0001]; 
0x0000000007cb29: add cl, ch; lahf; out 0xff, al; call qword ptr [rax-0x382708b8]; 
0x0000000014adb1: add cl, ch; mov edx, esi; hlt; jmp qword ptr [rsi+0xf]; 
0x0000000008cdfc: add cl, ch; mov esi, 0x66fffffd; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000012e900: add cl, ch; paddb mm7, mm7; jmp qword ptr [rsi+0x2e]; 
0x00000000096db1: add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x0000000015936f: add cl, ch; pop rbx; fdivp st(7), st; jmp qword ptr [rsi+0x66]; 
0x0000000014c09c: add cl, ch; push rbx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000099b74: add cl, ch; push rsi; je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x0000000003d3d2: add cl, ch; ret far; 
0x00000000034807: add cl, ch; ret; 
0x0000000008fe24: add cl, ch; sar dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001138cc: add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000001ab731: add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000147dd1: add cl, ch; sbb [rbx], ebp; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x000000001bb200: add cl, ch; sbb bh, [rdx]; idiv bh; nop [rax+rax]; ret; 
0x000000001b7178: add cl, ch; shl ch, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000007c434: add cl, ch; shl dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000006690d: add cl, ch; stosd [rdi]; ret; 
0x0000000015ca88: add cl, ch; test al, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000000f6e1d: add cl, ch; ud0 edi, edi; jmp qword ptr [rsi+0x66]; 
0x0000000013f71a: add dh, [rax-0x1]; jmp qword ptr [rsi-0x70]; 
0x000000000c3d7b: add dh, [rax]; in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000c42e7: add dh, [rbp+0x16]; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c42e0; ret; 
0x000000000c4397: add dh, [rbp+0x16]; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c4390; ret; 
0x00000000155760: add dh, [rbp+0x1d]; mov eax, r8d; ret; 
0x00000000126b12: add dh, [rbp+0x2b]; xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000083c11: add dh, [rbp+0x74]; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x000000001b16e8: add dh, [rbp-0x72]; add rax, rdx; ret; 
0x00000000093290: add dh, [rbx+rax-0x77]; push rdi; and al, 0x90; xor eax, eax; ret; 
0x000000001467f7: add dh, [rcx+rsi*4-0x75]; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000001496e8: add dh, [rcx]; ror byte ptr [rax-0x77], 0x17; ret; 
0x000000001b49ec: add dh, [rcx]; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001b4610; ret; 
0x00000000128647: add dh, [rdi+0x1e]; mov eax, 0x1f; syscall; 
0x0000000009b556: add dh, [rdi+0x7]; mov [rdi], esi; xor eax, eax; ret; 
0x00000000113a1b: add dh, [rdi+0x8]; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000e57d6: add dh, [rdi+rbx*2-0x7b]; dec dword ptr [rdi]; xchg esp, eax; ret; 
0x000000001a4623: add dh, [rdx+0x8]; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000000a00fb: add dh, [rdx+rax*2+0x48]; mov esi, ebp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x0000000011b51a: add dh, [rdx-0x6f99ffff]; endbr64; mov eax, 0xaa; syscall; 
0x0000000009273b: add dh, [rsi+0x2]; ret; 
0x000000000dce3a: add dh, [rsi+0x3]; ret; 
0x0000000012841d: add dh, [rsi-0x1c]; mov rax, [rip+0xf09e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000128665: add dh, [rsi-0x1e]; mov rax, [rip+0xf07a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b1537: add dh, al; add [rax], al; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1487: add dh, al; add [rax], al; ret; 
0x00000000155b7a: add dh, al; add eax, 0xccb5e; add [rdi], cl; adc [rip+0xcdb5f], esp; call rbx; 
0x0000000014482f: add dh, al; add eax, [rax]; pop rbx; ret; 
0x000000000b1047: add dh, al; inc dword ptr [r8]; mov [rdx], rcx; ret; 
0x000000000f41bf: add dh, al; or [rax+rdi*4], bl; add al, [rax]; add [rax], al; ret; 
0x000000000f41af: add dh, al; or [rdx], bl; mov eax, 0x2; ret; 
0x00000000143a66: add dh, al; ret; 
0x000000000951c8: add dh, al; test [rdi+rcx*4], ah; add [rax], al; add [rax], al; syscall; 
0x00000000090af1: add dh, al; xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x00000000068d7e: add dh, al; xor dil, r15b; add cl, ch; jmp qword ptr [rbx-0x76bb0001]; 
0x000000000d7bb6: add dh, bh; fadd st, st(3); nop [rax+rax]; xor rax, rax; ret; 
0x00000000182d83: add dh, bl; movq [rdi], mm1; ret; 
0x00000000129bdc: add dh, cl; call qword ptr [rax+0x4ced3145]; 
0x00000000071e74: add dh, dh; ret; 
0x000000000c5501: add dh, dh; sbb byte ptr [rbp+0x2000000], 0x48; lea eax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000a8b91: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a71: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b1: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x00000000130bc5: add dh, dh; test [rdi+rdi*8-0x1], edi; call qword ptr [rax]; 
0x00000000131065: add dh, dh; test [rdi+rdi*8-0x1], edi; jmp qword ptr [rax]; 
0x000000000d6b57: add dil, r15b; ret; 
0x00000000108bf8: add dl, [rcx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000a839a: add dl, [rsi-0x72b80000]; adc eax, 0xcffeb; cmovne rax, rdx; ret; 
0x000000000415b7: add dl, dh; mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000001666be: add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x0000000012943c: add dword ptr [rax], 0x1; ret; 
0x000000001758e9: add dword ptr [rax], 0x48640000; mov eax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000000919eb: add dword ptr [rax], 0x8d480000; js short 0x0000000000091a13; mov eax, 0xca; syscall; 
0x0000000019db46: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x000000000913a7: add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov eax, 0xca; syscall; 
0x0000000015d5ed: add dword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000001b4cb8: add dword ptr [rbx+0x4], 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x00000000183889: add dword ptr [rcx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000016d084: add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000062052: add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000974d7: add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x000000000f47c3: add dword ptr [rdi+0x4], 0x1; pop rbx; pop rbp; pop r12; ret; 
0x000000000a2643: add dword ptr [rdi], 0x0; cmp rax, 0xffffffffffffffff; je short 0x00000000000a2658; add rsp, 0x8; ret; 
0x00000000183289: add dword ptr [rdi], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000012868b: add dword ptr [rdi], 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c51af: add dword ptr [rdx+0x2b], 0xe2748104; ret; 
0x000000000620b0: add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x00000000129155: add dword ptr [rdx+rax*2], 0x1; ret; 
0x000000001baab1: add dword ptr [rdx], 0x0; divss xmm0, [rip+0x29368]; ret; 
0x0000000008f52f: add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000004576d: add dword ptr [rip+0x1d576c], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000040765: add dword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x00000000183589: add dword ptr [rsi+rax], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000457c9: add dword ptr [rsi-0x1], 0xffffffff; xor eax, eax; ret; 
0x00000000118d0a: add eax, 0x100101; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000118bd2: add eax, 0x100239; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000117182: add eax, 0x101c89; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011f444: add eax, 0x101ff7; pop r12; pop r13; ret; 
0x0000000011eee1: add eax, 0x1024fa; pop rbp; pop r12; pop r13; ret; 
0x0000000011e937: add eax, 0x102a6c; cmp eax, 0x1; jg short 0x000000000011e980; pop rbp; ret; 
0x0000000011db4f: add eax, 0x10381c; add rsp, 0x8; ret; 
0x0000000011db28: add eax, 0x10383f; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000011dade: add eax, 0x10388d; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daae: add eax, 0x1038bd; mov rax, r8; ret; 
0x0000000011d317: add eax, 0x104033; and eax, esi; inc dword ptr [rax]; ret; 
0x0000000011c6cb: add eax, 0x104b4c; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000011429a: add eax, 0x104b71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011c40b: add eax, 0x104e48; pop rbx; pop rbp; ret; 
0x0000000011c352: add eax, 0x104ec9; mov eax, 0x1; add rsp, 0x8; ret; 
0x00000000113ea2: add eax, 0x104f69; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000a9d87: add eax, 0x1051b4; cmove rax, rdx; ret; 
0x000000000a9947: add eax, 0x1055b4; cmove rax, rdx; ret; 
0x000000000a960a: add eax, 0x105671; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000a9717: add eax, 0x105824; cmove rax, rdx; ret; 
0x000000000a9837: add eax, 0x106304; cmove rax, rdx; ret; 
0x000000000ab0fa: add eax, 0x106601; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a834a: add eax, 0x109111; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a878a: add eax, 0x109a91; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000c267d: add eax, 0x10; lea r11, [rip+0x110d09]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e2d: add eax, 0x10; lea r11, [rip+0x112379]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000141dfa: add eax, 0x10; ret; 
0x000000000ab083: add eax, 0x10afb8; cmove rax, rdx; ret; 
0x000000000a880a: add eax, 0x10b671; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a4a: add eax, 0x10b6f1; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a94f3: add eax, 0x10c848; cmove rax, rdx; ret; 
0x000000000c5af8: add eax, 0x10fe3; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000c5a8e: add eax, 0x110cd; cmove rax, rdx; ret; 
0x00000000105886: add eax, 0x11359d; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000c6d78: add eax, 0x11873; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c54c7: add eax, 0x11a34; cmove rax, rdx; ret; 
0x000000000a8a37: add eax, 0x11c94; cmove rax, rdx; ret; 
0x000000000a830a: add eax, 0x11f81; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000b1522: add eax, 0x1218d5; mov edi, edx; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x000000000a8777: add eax, 0x12254; cmove rax, rdx; ret; 
0x000000000a87f7: add eax, 0x12374; cmove rax, rdx; ret; 
0x000000000c56f7: add eax, 0x124d4; cmove rax, rdx; ret; 
0x000000000c5827: add eax, 0x12664; cmove rax, rdx; ret; 
0x000000000c550b: add eax, 0x127c0; cmovne rax, rdx; ret; 
0x000000000c5447: add eax, 0x128b4; cmove rax, rdx; ret; 
0x000000000c55e8: add eax, 0x12bc3; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x000000000ec548: add eax, 0x12c8cb; cmp byte ptr [rax], 0x0; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x000000000ec4a8: add eax, 0x12c96b; cmp byte ptr [rax], 0x0; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec1e8: add eax, 0x12cc2b; cmp byte ptr [rax], 0x0; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec158: add eax, 0x12ccbb; cmp byte ptr [rax], 0x0; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000e7728: add eax, 0x1316eb; cmp byte ptr [rax], 0x0; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000e653b: add eax, 0x1328d0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e578a: add eax, 0x133681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5722: add eax, 0x1336e9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000e5662: add eax, 0x133861; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000eb069: add eax, 0x135a82; mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000eb021: add eax, 0x135aca; mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x000000000eafa9: add eax, 0x135b42; mov rax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x000000000eaf23: add eax, 0x135b98; cmp eax, 0x1; jg short 0x00000000000eaf40; pop rbx; ret; 
0x000000000dd722: add eax, 0x13b731; mov [rax], edx; xor eax, eax; pop rbx; ret; 
0x000000000d8e42: add eax, 0x13ffc9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000d8e22: add eax, 0x13ffe9; mov dword ptr fs:[rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x000000000db589: add eax, 0x1451d2; cmp eax, 0x1; jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x00000000184547: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183948: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c53a2: add eax, 0x153b21; mov rax, [rax+0x240]; ret; 
0x000000000c5392: add eax, 0x153b31; mov rax, [rax+0x238]; ret; 
0x000000000c5382: add eax, 0x153b41; mov rax, [rax+0x230]; ret; 
0x000000000c5372: add eax, 0x153b51; mov rax, [rax+0x228]; ret; 
0x000000000c5362: add eax, 0x153b61; mov rax, [rax+0x220]; ret; 
0x000000000c5352: add eax, 0x153b71; mov rax, [rax+0x218]; ret; 
0x000000000c5342: add eax, 0x153b81; mov rax, [rax+0x210]; ret; 
0x000000000c5332: add eax, 0x153b91; mov rax, [rax+0x208]; ret; 
0x000000000c5322: add eax, 0x153ba1; mov rax, [rax+0x200]; ret; 
0x000000000c5312: add eax, 0x153bb1; mov rax, [rax+0x1f8]; ret; 
0x000000000c5302: add eax, 0x153bc1; mov rax, [rax+0x1f0]; ret; 
0x000000000c52ea: add eax, 0x153bd9; mov rax, [rax+0x248]; ret; 
0x00000000078c25: add eax, 0x158b36; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x000000000a9a09: add eax, 0x15e12; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000b1830: add eax, 0x16644b; mov rax, [rax+rdi*8]; ret; 
0x000000000b1850: add eax, 0x16664b; mov rax, [rax+rdi*8]; ret; 
0x000000000918e6: add eax, 0x16; and eax, 0xfffffff7; jne short 0x00000000000918a2; pop rbx; ret; 
0x000000000dce4e: add eax, 0x16d; ret; 
0x000000000a7a56: add eax, 0x1713b5; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000a78d3: add eax, 0x171508; call qword ptr [rax]; 
0x000000000a76ea: add eax, 0x1716f1; call qword ptr [rax]; 
0x000000000a7622: add eax, 0x1717b9; call qword ptr [rax]; 
0x000000000a8449: add eax, 0x172e2; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a4112: add eax, 0x174cf9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000a0fa4: add eax, 0x1783c7; ret; 
0x000000000a0fc3: add eax, 0x1783d8; ret; 
0x000000000a0f84: add eax, 0x1783df; ret; 
0x000000000a0fb9: add eax, 0x1783e6; add [rax], eax; add [rax], al; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f64: add eax, 0x1783f7; ret; 
0x000000000a0f99: add eax, 0x178406; add [rax], eax; add [rax], al; mov [rip+0x1783c7], rax; ret; 
0x000000000a0f79: add eax, 0x178426; add [rax], eax; add [rax], al; mov [rip+0x1783df], rax; ret; 
0x000000000a0f59: add eax, 0x178446; add [rax], eax; add [rax], al; mov [rip+0x1783f7], rax; ret; 
0x000000000a0d5a: add eax, 0x178681; ret; 
0x000000000a0cea: add eax, 0x178689; ret; 
0x000000000a0d43: add eax, 0x178690; ret; 
0x000000000a0cda: add eax, 0x1786a1; ret; 
0x0000000009fda2: add eax, 0x179069; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000015ded1: add eax, 0x17a; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000009dfb2: add eax, 0x17ae59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000a50f8: add eax, 0x17b3eb; add [rax], al; add [rax], al; ret; 
0x0000000009cda2: add eax, 0x17c069; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009cb62: add eax, 0x17c2a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cde3: add eax, 0x17c4cc; add rsp, 0x8; ret; 
0x0000000009c54a: add eax, 0x17c8c1; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009c112: add eax, 0x17ccf9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c072: add eax, 0x17cd99; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000a0fd9: add eax, 0x17f51e; ret; 
0x000000000a0ee8: add eax, 0x17f613; ret; 
0x00000000099c5e: add eax, 0x17f651; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0bff: add eax, 0x17f838; add [rax], al; add [rax], al; ret; 
0x000000000a0bf5: add eax, 0x17f846; add [rax], al; add [rax], al; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a00c5: add eax, 0x17fb52; add [rax], al; add [rax], al; ret; 
0x000000000a0733: add eax, 0x17fd08; movaps [rsp+0x50], xmm0; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x0000000009e5d6: add eax, 0x1815ed; mov dword ptr [rdi], 0x0; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x00000000097559: add eax, 0x181d42; ret; 
0x00000000097548: add eax, 0x181d5f; ret; 
0x000000000921f2: add eax, 0x186c19; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000909fa: add eax, 0x1884c9; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x00000000090c98: add eax, 0x1885ff; ret; 
0x00000000090c88: add eax, 0x18860b; ret; 
0x00000000090c78: add eax, 0x188617; ret; 
0x00000000090c68: add eax, 0x188623; ret; 
0x000000000903fe: add eax, 0x188ac5; call qword ptr [rax+0x368]; 
0x000000000961c5: add eax, 0x189926; ret; 
0x00000000090570: add eax, 0x18a4b3; push r10; call rax; 
0x00000000090cc4: add eax, 0x18adcb; ret; 
0x0000000008f4c6: add eax, 0x18b1b5; ret; 
0x000000000420f6: add eax, 0x18c48348; ret; 
0x0000000008f5a1: add eax, 0x18c4ae; add [rax], al; add [rax], al; ret; 
0x0000000008f596: add eax, 0x18c4b1; add [rax], al; add [rax], al; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f571: add eax, 0x18c4da; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x0000000008d099: add eax, 0x18e9b2; cmp eax, 0x1; jg short 0x000000000008d0e0; add rsp, 0x8; ret; 
0x000000000897d2: add eax, 0x18f639; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000875ba: add eax, 0x191851; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000008118a: add eax, 0x197c81; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000007d333: add eax, 0x19a508; mov rax, [rax+rdi*8]; ret; 
0x00000000080a51: add eax, 0x19afba; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x00000000038892: add eax, 0x19fbd8; ret; 
0x00000000038876: add eax, 0x19fbf4; cmp [rdx+0x38], edi; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000052fc1: add eax, 0x1; cmp byte ptr [rax+0x1], 0x0; jne short 0x0000000000052fc0; pop rbx; ret; 
0x00000000129421: add eax, 0x1; mov [rdx], ax; ret; 
0x00000000129422: add eax, 0x1; mov [rdx], ax; ret; 
0x000000001293e1: add eax, 0x1; mov [rdx], eax; ret; 
0x000000000b1231: add eax, 0x1; movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000b1230; ret; 
0x000000000a999f: add eax, 0x1; ret; 
0x000000000abd01: add eax, 0x1; test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x000000001432dd: add eax, 0x1; test rax, rax; js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x0000000007a681: add eax, 0x1a0232; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000041baf: add eax, 0x1a055c; por xmm0, xmm1; ret; 
0x0000000004196b: add eax, 0x1a0750; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x0000000004197a: add eax, 0x1a0751; ret; 
0x00000000041972: add eax, 0x1a0759; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041946: add eax, 0x1a0775; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x00000000041955: add eax, 0x1a0786; ret; 
0x0000000004194d: add eax, 0x1a078e; mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000415e1: add eax, 0x1a0aba; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415b3: add eax, 0x1a0af8; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041427: add eax, 0x1a0c64; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x000000000419c5: add eax, 0x1a13fe; ret; 
0x000000000a8289: add eax, 0x1a512; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x00000000074bad: add eax, 0x1a5d06; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000000a9d67: add eax, 0x1ac94; cmove rax, rdx; ret; 
0x00000000029f36: add eax, 0x1ae09b; ret; 
0x000000000a93ab: add eax, 0x1ae50; cmove rax, rdx; ret; 
0x00000000029f46: add eax, 0x1aff5c; ret; 
0x000000000a9927: add eax, 0x1b084; cmove rax, rdx; ret; 
0x000000000a96f7: add eax, 0x1b304; cmove rax, rdx; ret; 
0x000000000a97bb: add eax, 0x1b820; cmovne rax, rdx; ret; 
0x000000000a8b9b: add eax, 0x1bc60; cmovne rax, rdx; ret; 
0x000000000a8a7b: add eax, 0x1bcd0; cmovne rax, rdx; ret; 
0x0000000005d8d4: add eax, 0x1bcfd7; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000000a84bb: add eax, 0x1c1e0; cmovne rax, rdx; ret; 
0x0000000005169a: add eax, 0x1ca241; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000051693: add eax, 0x1ca24d; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000046d92: add eax, 0x1d2079; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000000466aa: add eax, 0x1d2761; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000469d6: add eax, 0x1d4d7b; add rsp, 0x8; ret; 
0x000000000460c9: add eax, 0x1d567a; cmp eax, 0x1; jg short 0x00000000000460f0; pop rbp; ret; 
0x0000000004605e: add eax, 0x1d56d9; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret; 
0x0000000004310a: add eax, 0x1d5d01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000430ca: add eax, 0x1d5d41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004308a: add eax, 0x1d5d81; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043044: add eax, 0x1d5dc7; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000042f86: add eax, 0x1d5e85; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000042f6a: add eax, 0x1d5ea1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f22: add eax, 0x1d5ee9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ed2: add eax, 0x1d5f39; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e8b: add eax, 0x1d5f80; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e55: add eax, 0x1d5fb6; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043184: add eax, 0x1d605b; mov eax, edx; ret; 
0x00000000043135: add eax, 0x1d60aa; ret; 
0x00000000043125: add eax, 0x1d60be; ret; 
0x000000000424f2: add eax, 0x1d6919; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424b2: add eax, 0x1d6959; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042442: add eax, 0x1d69c9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041ab3: add eax, 0x1d7358; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004177d: add eax, 0x1d768e; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004137c: add eax, 0x1d7a8f; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000407e2: add eax, 0x1d8629; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000040782: add eax, 0x1d8689; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a3a6: add eax, 0x1dea3d; add rax, fs:[0x0]; ret; 
0x0000000003a366: add eax, 0x1dea8d; add rax, fs:[0x0]; ret; 
0x0000000003a386: add eax, 0x1dec6d; add rax, fs:[0x0]; ret; 
0x00000000039bf2: add eax, 0x1df309; mov [rax], rdx; ret; 
0x00000000039c36: add eax, 0x1df335; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388b6: add eax, 0x1e06b5; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x00000000038829: add eax, 0x1e2412; ret; 
0x00000000038822: add eax, 0x1e2476; lea rax, [rip+0x1e2412]; ret; 
0x000000000355d6: add eax, 0x1e54a5; ret; 
0x0000000002a532: add eax, 0x1ee8d9; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002a256: add eax, 0x1eebb5; add rax, fs:[0x0]; ret; 
0x0000000002b986: add eax, 0x1ef0b5; ret; 
0x0000000002b976: add eax, 0x1ef0bd; ret; 
0x000000000961b8: add eax, 0x1f0f000a; add [rax], r8b; endbr64; mov eax, [rip+0x189926]; ret; 
0x000000000961b7: add eax, 0x1f0f000a; add [rax], r8b; endbr64; mov eax, [rip+0x189926]; ret; 
0x00000000029cd1: add eax, 0x1f1d52; ret; 
0x0000000003a40a: add eax, 0x200; mov fs:[rdx], rax; ret; 
0x000000001af923: add eax, 0x20; add rax, rdi; ret; 
0x00000000199aa3: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000001a2b30: add eax, 0x21; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dc85: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000011bf4a: add eax, 0x2404c641; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000011c114: add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001baaaf: add eax, 0x2830c; divss xmm0, [rip+0x29368]; ret; 
0x000000000bc834: add eax, 0x289018b; mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x00000000045f24: add eax, 0x28c48348; ret; 
0x000000001baab7: add eax, 0x29368; ret; 
0x000000000d83a8: add eax, 0x2; ret; 
0x0000000018d544: add eax, 0x2c5850f; add [rax], al; ret; 
0x000000001a4a52: add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000000516f4: add eax, 0x34e85300; jno short 0x00000000000516f9; dec dword ptr [rax-0x77]; ret; 
0x000000001918f5: add eax, 0x364850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b1647: add eax, 0x37f4; cmove rax, rdx; ret; 
0x00000000113e16: add eax, 0x38c48348; ret; 
0x000000000d83c1: add eax, 0x3; ret; 
0x000000001bb1ff: add eax, 0x3a1ae900; idiv bh; nop [rax+rax]; ret; 
0x000000001576b8: add eax, 0x3c03; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000172742: add eax, 0x3f98366; jbe short 0x0000000000172750; ret; 
0x0000000012ae32: add eax, 0x401f0fc3; add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000001143fa: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x5a; syscall; 
0x000000000ec0ca: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x66; syscall; 
0x000000000ec0ea: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x68; syscall; 
0x000000000ec0da: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x6b; syscall; 
0x000000000ec0fa: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x6c; syscall; 
0x000000000ec0ba: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x6e; syscall; 
0x000000000ec10a: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x73; syscall; 
0x00000000126bfa: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0x7d; syscall; 
0x0000000012717a: add eax, 0x401f0fc3; add bl, dh; nop edx, edi; mov eax, 0xea; syscall; 
0x000000001af901: add eax, 0x40; add rax, rdi; ret; 
0x00000000199a7b: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000133cf0: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x000000001a2c3e: add eax, 0x41; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dd5e: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000a04f9: add eax, 0x448bffff; and al, 0x10; add rsp, 0x28; ret; 
0x00000000134713: add eax, 0x46658; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b3: add eax, 0x468d8; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x00000000046b55: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046ba4: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x00000000130f92: add eax, 0x48020000; mov edx, eax; call qword ptr [r12+0x28]; 
0x0000000018fa77: add eax, 0x48054289; lea eax, [rdx+0x8]; ret; 
0x0000000018b727: add eax, 0x48054289; mov eax, edi; ret; 
0x000000001828c3: add eax, 0x480e8b48; mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000c13b6: add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000c2216: add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd36: add eax, 0x480f8948; mov [rdi+0x5], edx; ret; 
0x000000000c3e76: add eax, 0x480f8948; mov [rdi+0x5], edx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000001a421f: add eax, 0x487c5162; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a47a4: add eax, 0x487cf162; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000016b3c7: add eax, 0x48c48348; ret; 
0x0000000017bf47: add eax, 0x49000670; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001345e3: add eax, 0x49188; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x0000000018d59a: add eax, 0x49f88948; sub eax, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x0000000018d61c: add eax, 0x49f88948; sub eax, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x0000000016cd65: add eax, 0x4; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000c5983: add eax, 0x4; test edx, edx; jne short 0x00000000000c5978; xor eax, eax; ret; 
0x000000000c1af7: add eax, 0x4b001118; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0417: add eax, 0x4b00112d; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000011ef37: add eax, 0x4c000003; mov eax, esp; pop r12; ret; 
0x0000000018faf8: add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x0000000018b768: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000018d540: add eax, 0x54a8d48; jne 0x000000000018d810; ret; 
0x000000001918f1: add eax, 0x54a8d48; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001bb6de: add eax, 0x552be800; idiv bh; pop rbx; mov qword ptr [rip+0x5f7cf], 0x0; ret; 
0x000000000c055a: add eax, 0x57f8d48; jne 0x00000000000c0d90; ret; 
0x000000000c1c3e: add eax, 0x57f8d48; jne 0x00000000000c25e0; ret; 
0x000000001bb967: add eax, 0x5bffe6ca; mov qword ptr [rip+0x64d79], 0x0; ret; 
0x0000000010d5c8: add eax, 0x5d000000; pop r12; ret; 
0x000000001695a1: add eax, 0x5d5b0000; pop r12; pop r13; ret; 
0x000000001bb8e3: add eax, 0x5d5e0; call qword ptr [rax+0x370]; 
0x000000001bb6e8: add eax, 0x5f7cf; add [rax], al; add [rax], al; ret; 
0x000000001bb25d: add eax, 0x5f822; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000029cbd: add eax, 0x602ae; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x00000000199ac3: add eax, 0x60; add rax, rdi; ret; 
0x00000000199afc: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000001a2bda: add eax, 0x61; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dd0a: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000007305c: add eax, 0x63480000; or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x000000000c2eaa: add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e36: add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001bb96e: add eax, 0x64d79; add [rax], al; add [rax], al; ret; 
0x000000001bb9c7: add eax, 0x650f4; cmp eax, 0x1; jg short 0x00000000001bb9f0; pop rbx; ret; 
0x000000001bba54: add eax, 0x656eb; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001bbb2b: add eax, 0x65994; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001bbc29: add eax, 0x66956; add [rax], al; add [rax], al; pop rbx; ret; 
0x000000000c20d1: add eax, 0x66c30000; nop [rax+rax]; mov rax, rdi; ret; 
0x000000001bbd66: add eax, 0x6bab9; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001bbd3a: add eax, 0x6badd; add [rax], al; add [rax], al; pop rbx; ret; 
0x000000001347a7: add eax, 0x6c144; cmove rax, rdx; ret; 
0x00000000134677: add eax, 0x6c294; cmove rax, rdx; ret; 
0x00000000134547: add eax, 0x6c3c4; cmove rax, rdx; ret; 
0x00000000134814: add eax, 0x6c8c7; cmove rax, rdx; ret; 
0x000000000c1c5e: add eax, 0x6e88349; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x00000000135b75: add eax, 0x71586; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x00000000134747: add eax, 0x721a4; cmove rax, rdx; ret; 
0x00000000134617: add eax, 0x722f4; cmove rax, rdx; ret; 
0x000000001344e7: add eax, 0x72424; cmove rax, rdx; ret; 
0x0000000013485d: add eax, 0x7293e; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000001b7d47: add eax, 0x72c63948; or ecx, [rcx-0x77]; ret far; 
0x000000000eced1: add eax, 0x72f52011; cmp r8, rax; jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x000000001346df: add eax, 0x7368c; cmove rax, rdx; ret; 
0x000000001345af: add eax, 0x737dc; cmove rax, rdx; ret; 
0x0000000013447f: add eax, 0x7390c; cmove rax, rdx; ret; 
0x0000000013487b: add eax, 0x74060; cmove rax, rdx; ret; 
0x0000000007d35d: add eax, 0x74c08566; or eax, 0xd6158d48; adc eax, 0xd0014800; ret; 
0x00000000169046: add eax, 0x78c48348; ret; 
0x00000000134787: add eax, 0x7a764; cmove rax, rdx; ret; 
0x00000000134657: add eax, 0x7a8b4; cmove rax, rdx; ret; 
0x00000000134527: add eax, 0x7a9e4; cmove rax, rdx; ret; 
0x00000000167457: add eax, 0x7b224; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x000000001348a7: add eax, 0x7b264; cmove rax, rdx; ret; 
0x00000000100f1c: add eax, 0x7b8b4828; adc [rax-0x7d], cl; ret; 
0x00000000100f1d: add eax, 0x7b8b4828; adc [rax-0x7d], cl; ret; 
0x000000000a9a99: add eax, 0x7e32; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000c055e: add eax, 0x82b850f; add [rax], al; ret; 
0x000000001756ec: add eax, 0x840fd284; ret far; 
0x0000000018fa7a: add eax, 0x8428d48; ret; 
0x0000000014d6f5: add eax, 0x88dde; add rdi, r8; notrack jmp rdi; 
0x000000001453f7: add eax, 0x89000002; and al, 0x8; mov rax, [rsp]; mov rdi, r15; call rax; 
0x00000000085978: add eax, 0x89480000; and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007c29b: add eax, 0x89480000; ret far; 
0x00000000036a8e: add eax, 0x89480000; ret; 
0x000000001680b6: add eax, 0x8948ffec; ret; 
0x000000000c95a7: add eax, 0x89490000; ret far; 
0x00000000171c80: add eax, 0x894c0000; loopne 0x0000000000171cc8; pop rsp; ret; 
0x000000000b42f8: add eax, 0x894d0000; ret far; 
0x0000000011dad9: add eax, 0x8; mov [rip+0x10388d], rax; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daa9: add eax, 0x8; mov [rip+0x1038bd], rax; mov rax, r8; ret; 
0x000000000ea6ea: add eax, 0x8c48348; ret; 
0x0000000003381e: add eax, 0x8d490000; add r9b, [r8+0x39]; ret; 
0x000000000a8989: add eax, 0x8fb2; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8859: add eax, 0x9022; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8399: add eax, 0x9602; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000c1c42: add eax, 0x997850f; add [rax], al; ret; 
0x000000000ab05e: add eax, 0x9bcd; cmove rax, rdx; ret; 
0x00000000168b92: add eax, 0xa0; pop rbx; ret; 
0x00000000178346: add eax, 0xa0ac5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178326: add eax, 0xa0ae5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f6: add eax, 0xa0c15; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb6: add eax, 0xa0e55; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f96: add eax, 0xa0e75; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f56: add eax, 0xa0eb5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f36: add eax, 0xa0ed5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f16: add eax, 0xa0ef5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef6: add eax, 0xa0f15; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001760da: add eax, 0xa2d31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000175e92: add eax, 0xa2f79; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000175ca6: add eax, 0xa321d; jmp qword ptr [rax+0x378]; 
0x00000000175535: add eax, 0xa398e; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x000000001754ea: add eax, 0xa39d9; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x000000001754b6: add eax, 0xa3a0d; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000175046: add eax, 0xa3e7d; jmp qword ptr [rax+0x350]; 
0x00000000174f83: add eax, 0xa3f40; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000174eac: add eax, 0xa4017; call qword ptr [rax+0x368]; 
0x000000001724b6: add eax, 0xa6955; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000001720c6: add eax, 0xa6d45; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000a891b: add eax, 0xa780; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x00000000168c12: add eax, 0xa8; pop rbx; ret; 
0x00000000128184: add eax, 0xae017; mov eax, [rax+rdi*4]; ret; 
0x00000000168c22: add eax, 0xb01b1; pop rbx; ret; 
0x00000000168b22: add eax, 0xb0309; pop rbx; ret; 
0x00000000168ba2: add eax, 0xb0421; pop rbx; ret; 
0x00000000168966: add eax, 0xb045d; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x00000000168aaa: add eax, 0xb0499; pop rbx; ret; 
0x000000000a94ce: add eax, 0xb42d; cmove rax, rdx; ret; 
0x000000001722e1: add eax, 0xb599e; cmp eax, 0x1; jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x000000001721a1: add eax, 0xb5ade; cmp eax, 0x1; jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x000000001426d1: add eax, 0xba; add [rax+0x102], bh; cmovne eax, edx; ret; 
0x000000000a9538: add eax, 0xbcd3; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bcd: add eax, 0xbe2e; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x0000000015df8d: add eax, 0xbe; xor ecx, ecx; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000a9b2d: add eax, 0xbeae; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a95f7: add eax, 0xc014; cmove rax, rdx; ret; 
0x000000001666ec: add eax, 0xc0310000; mov rsi, [rsp+0x50]; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000d8423: add eax, 0xc3000000; nop [rax+rax]; mov rax, 0x6; ret; 
0x00000000155072: add eax, 0xc3d99; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x0000000018fafc: add eax, 0xc428d48; ret; 
0x000000000c13bd: add eax, 0xc478d48; ret; 
0x000000000c1d4d: add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x0000000017841f: add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; notrack jmp r10; 
0x0000000015da8a: add eax, 0xc9e31; add rsp, 0x8; ret; 
0x0000000015da75: add eax, 0xc9e46; test eax, eax; je short 0x000000000015da80; ret; 
0x0000000015d34d: add eax, 0xca50e; add rsp, 0x8; ret; 
0x000000000dce2f: add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+0x3]; ret; 
0x00000000155b7c: add eax, 0xccb5e; add [rdi], cl; adc [rip+0xcdb5f], esp; call rbx; 
0x0000000014b1a6: add eax, 0xcdde5; mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x0000000014a396: add eax, 0xcec4d; mov rax, fs:[rax]; ret; 
0x000000001496ab: add eax, 0xcf760; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000149622: add eax, 0xcf7e9; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000152354: add eax, 0xd027f; jne short 0x0000000000152376; mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000156f47: add eax, 0xd08d8; add [rax], al; add [rax], al; ret; 
0x000000001517d6: add eax, 0xd0dad; test rax, rax; jne short 0x00000000001517e8; ret; 
0x000000000a9d13: add eax, 0xd1088; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d3: add eax, 0xd14a8; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x00000000150d24: add eax, 0xd1857; cmp eax, 0x1; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000155c23: add eax, 0xd1be4; cmp eax, 0x1; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x000000000a96a3: add eax, 0xd40d8; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000c221d: add eax, 0xd478d48; ret; 
0x0000000009b5b0: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x000000000c5b3b: add eax, 0xdb700; jne short 0x00000000000c5ae4; ret; 
0x0000000013f264: add eax, 0xdb777; add rsp, 0x8; ret; 
0x000000000c6db6: add eax, 0xdbb85; jne short 0x00000000000c6d6f; ret; 
0x000000000c5626: add eax, 0xdd115; jne short 0x00000000000c55df; ret; 
0x0000000015de16: add eax, 0xddd5; push qword ptr [rip+0x84727]; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000c065d: add eax, 0xde88349; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000a9c1d: add eax, 0xe02e; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b7d: add eax, 0xe0ae; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000c5bd5: add eax, 0xe1536; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x00000000136b26: add eax, 0xe2325; add rax, fs:[0x0]; ret; 
0x00000000096a3a: add eax, 0xe2894400; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000968ca: add eax, 0xe2894400; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000968fc: add eax, 0xe2894400; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000001360c2: add eax, 0xe2d49; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013ea3e: add eax, 0xe3535; cmp eax, 0x1; jg short 0x000000000013ea98; add rsp, 0x8; ret; 
0x000000001bb9a8: add eax, 0xe6c9c2e8; jmp qword ptr [rsi+0xf]; 
0x00000000157a7c: add eax, 0xe9000000; idiv r15; jmp qword ptr [rsi+0x66]; 
0x0000000014c006: add eax, 0xedc364e8; jmp qword ptr [rsi+0xf]; 
0x0000000014bfdc: add eax, 0xedc38ee8; jmp qword ptr [rsi+0xf]; 
0x000000000c6dc2: add eax, 0xee419; test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x0000000012a512: add eax, 0xee8e1; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a47a: add eax, 0xee979; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a3e2: add eax, 0xeea11; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a342: add eax, 0xeeab1; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a2a2: add eax, 0xeeb51; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a202: add eax, 0xeebf1; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a162: add eax, 0xeec91; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a032: add eax, 0xeedc1; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x00000000129f92: add eax, 0xeee61; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x000000000c545a: add eax, 0xeeee1; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x00000000129ef2: add eax, 0xeef01; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x00000000129e52: add eax, 0xeefa1; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000182c29: add eax, 0xef00ff2; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c54da: add eax, 0xef0e1; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x00000000129d06: add eax, 0xef1bd; mov eax, [rax+0x40]; ret; 
0x000000000c5632: add eax, 0xef449; test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x000000000c570a: add eax, 0xef4f1; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c583a: add eax, 0xefcb1; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x00000000169181: add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000003d2cb: add eax, 0xf0018f0; mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000001290f1: add eax, 0xf0346; add [rax], al; add [rax], al; ret; 
0x000000001290c8: add eax, 0xf036f; add [rax], al; add [rax], al; ret; 
0x00000000129097: add eax, 0xf03a0; add al, [rax]; add [rax], al; ret; 
0x00000000129071: add eax, 0xf03c6; add [rax], al; add [rax], al; ret; 
0x0000000012908a: add eax, 0xf03e9; mov [rdi+0x10], rax; jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000000a957b: add eax, 0xf0680; jne short 0x00000000000a9524; ret; 
0x000000000a83c2: add eax, 0xf06f9; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000c5ab3: add eax, 0xf0728; cmove rax, rdx; ret; 
0x00000000128cfa: add eax, 0xf073d; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000128cc5: add eax, 0xf0772; add eax, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x0000000012866a: add eax, 0xf07a1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000128422: add eax, 0xf09e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013564c: add eax, 0xf1be7ee9; call qword ptr [rax-0x18]; 
0x000000001271b6: add eax, 0xf1c55; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000001267f2: add eax, 0xf2619; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267ba: add eax, 0xf2651; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012678a: add eax, 0xf2681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126722: add eax, 0xf26e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010104d: add eax, 0xf2731de8; jmp qword ptr [rsi+0xf]; 
0x00000000100f95: add eax, 0xf273d5e8; jmp qword ptr [rsi+0xf]; 
0x000000001266c2: add eax, 0xf2749; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126662: add eax, 0xf27a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126452: add eax, 0xf29b9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126412: add eax, 0xf29f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ab0e7: add eax, 0xf3d4; cmove rax, rdx; ret; 
0x000000000eae1a: add eax, 0xf3d550e8; jmp qword ptr [rsi+0xf]; 
0x0000000016029b: add eax, 0xf486600; outsb dx, [rsi]; ret far; 
0x00000000134c34: add eax, 0xf4cd26e9; call qword ptr [rax-0x18]; 
0x000000000a8337: add eax, 0xf4fc4; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000a82b2: add eax, 0xf5af9; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a8882: add eax, 0xf5b99; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a9a32: add eax, 0xf60e9; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac2: add eax, 0xf6409; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x00000000041ba9: add eax, 0xf66001a; fild st, dword ptr [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x000000000a89b2: add eax, 0xf6809; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x00000000122482: add eax, 0xf6989; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000a8472: add eax, 0xf69b9; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000a9da7: add eax, 0xf6b94; cmove rax, rdx; ret; 
0x000000000a9967: add eax, 0xf6f94; cmove rax, rdx; ret; 
0x00000000127007: add eax, 0xf7000f1e; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126d07: add eax, 0xf7000f21; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011ba07: add eax, 0xf7000fd4; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000116207: add eax, 0xf700102c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000115207: add eax, 0xf700103c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000eb107: add eax, 0xf70012dd; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000a9737: add eax, 0xf7204; cmove rax, rdx; ret; 
0x000000001217ea: add eax, 0xf7621; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000121620: add eax, 0xf787b; mov rax, [rax]; test rax, rax; je 0x00000000001216d0; call rax; 
0x000000000a97a4: add eax, 0xf7957; cmove rax, rdx; ret; 
0x00000000121466: add eax, 0xf7a35; mov rax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x00000000182c32: add eax, 0xf7f0ff3; ret; 
0x00000000129442: add eax, 0xf81d1; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x00000000129432: add eax, 0xf81e1; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000129146: add eax, 0xf84a5; jae short 0x0000000000129159; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000013616c: add eax, 0xf900eee9; call qword ptr [rax-0x18]; 
0x0000000011faa2: add eax, 0xf9369; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000011fa6d: add eax, 0xf939e; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000011fa5b: add eax, 0xf93b0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000011f21f: add eax, 0xf9bec; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011ebe2: add eax, 0xfa229; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000125a94: add eax, 0xfba2b; add [rax], al; add [rax], al; ret; 
0x00000000125a89: add eax, 0xfba2e; add [rax], al; add [rax], al; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x00000000125a6a: add eax, 0xfba51; cmp eax, 0x1; jg short 0x0000000000125a78; ret; 
0x000000000a9d47: add eax, 0xfcbf4; cmove rax, rdx; ret; 
0x0000000011bff2: add eax, 0xfce19; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011bfca: add eax, 0xfce41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011be86: add eax, 0xfcf85; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000a9907: add eax, 0xfcff4; cmove rax, rdx; ret; 
0x000000001756e5: add eax, 0xfd00148; mov dh, 0x56; add eax, 0x840fd284; ret far; 
0x000000000a96d7: add eax, 0xfd264; cmove rax, rdx; ret; 
0x000000000a97ed: add eax, 0xfd9ce; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x0000000011b376: add eax, 0xfdb4d; mov rax, [rax+0x18]; test rax, rax; je short 0x000000000011b385; ret; 
0x0000000011b178: add eax, 0xfdc9b; cmp byte ptr [rax], 0x0; je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x0000000011b0e8: add eax, 0xfdd2b; cmp byte ptr [rax], 0x0; je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x00000000135538: add eax, 0xfdd3a2e9; call qword ptr [rax-0x18]; 
0x00000000135518: add eax, 0xfdd3c2e9; call qword ptr [rax-0x18]; 
0x000000001360f8: add eax, 0xfdfc82e9; call qword ptr [rax-0x18]; 
0x00000000135628: add eax, 0xfdfd52e9; call qword ptr [rax-0x18]; 
0x000000000b165a: add eax, 0xfe0a1; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000001355a8: add eax, 0xfe0c42e9; call qword ptr [rax-0x18]; 
0x000000001355c8: add eax, 0xfe0c52e9; call qword ptr [rax-0x18]; 
0x000000000a9cdf: add eax, 0xfe0dc; cmove rax, rdx; ret; 
0x000000001366bc: add eax, 0xfe266ee9; call qword ptr [rax-0x18]; 
0x000000001366dc: add eax, 0xfe26eee9; call qword ptr [rax-0x18]; 
0x0000000011a9f2: add eax, 0xfe419; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000a989f: add eax, 0xfe4dc; cmove rax, rdx; ret; 
0x00000000136118: add eax, 0xfe52e2e9; call qword ptr [rax-0x18]; 
0x00000000136138: add eax, 0xfe5412e9; call qword ptr [rax-0x18]; 
0x000000000a966f: add eax, 0xfe74c; cmove rax, rdx; ret; 
0x00000000119e25: add eax, 0xfefe6; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119dcc: add eax, 0xff03f; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000a980b: add eax, 0xff0f0; cmove rax, rdx; ret; 
0x000000001194ca: add eax, 0xff941; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000119494: add eax, 0xff977; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000113eed: add eax, 0xfff0003d; push qword ptr [rdi+0xb]; xor eax, eax; ret; 
0x00000000095d6f: add eax, 0xfff0003d; push qword ptr [rsi+0x9]; neg eax; ret; 
0x00000000095dbb: add eax, 0xfff0003d; push qword ptr [rsi+0xd]; neg eax; ret; 
0x00000000135b5d: add eax, 0xfff8f43e; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x00000000134767: add eax, 0xfff90234; cmove rax, rdx; ret; 
0x00000000134637: add eax, 0xfff90384; cmove rax, rdx; ret; 
0x00000000134507: add eax, 0xfff904b4; cmove rax, rdx; ret; 
0x0000000013482b: add eax, 0xfff907a0; cmovne rax, rdx; ret; 
0x00000000095684: add eax, 0xfffc17e9; jmp qword ptr [rsi+0xf]; 
0x00000000173c28: add eax, 0xffff12e9; call qword ptr [rax-0x18]; 
0x00000000167cd5: add eax, 0xffff6f96; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x000000001720e8: add eax, 0xffff92e9; call qword ptr [rax-0x18]; 
0x00000000167e89: add eax, 0xffff9b82; mov esi, 0xa; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000167d86: add eax, 0xffff9b85; lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000167b8a: add eax, 0xffff9e81; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a4a: add eax, 0xffff9fc1; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016792e: add eax, 0xffffa0dd; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016782e: add eax, 0xffffa1dd; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167635: add eax, 0xffffa2d6; mov esi, 0x1; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016772a: add eax, 0xffffa4a1; xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x000000000c5bbd: add eax, 0xfffff3ee; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000d9c0a: add eax, 0xfffffee1; ret; 
0x000000000d9bfa: add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x000000000d9aea: add eax, 0xfffffef1; ret; 
0x000000000d9ada: add eax, 0xffffff01; add rsp, 0x58; ret; 
0x0000000010b1ed: add eax, [0x0]; mov r8, rax; add r9, r13; call r15; 
0x0000000015510b: add eax, [0x0]; mov rcx, r15; call rbp; 
0x0000000002a25d: add eax, [0x0]; ret; 
0x000000000db346: add eax, [r13+0xf]; ret; 
0x00000000062a37: add eax, [rax+rcx*4+0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000099590: add eax, [rax]; add [rax+0x1], bh; ret; 
0x000000000d6be7: add eax, [rax]; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000000dfa62: add eax, [rax]; add [rax-0x41], cl; ret; 
0x000000001504f7: add eax, [rax]; add [rax-0x75], cl; adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x00000000090519: add eax, [rax]; add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x00000000174fd5: add eax, [rax]; add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret; 
0x00000000175540: add eax, [rax]; add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret; 
0x0000000002b24d: add eax, [rax]; add [rax-0x77], cl; ret; 
0x00000000174f8e: add eax, [rax]; add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret; 
0x00000000113d4c: add eax, [rax]; add [rax-0x7b], cl; shl byte ptr [rsp+rsi+0x31], 0xd2; call rax; 
0x00000000191862: add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000785fd: add eax, [rax]; add [rax-0x7f], cl; ret; 
0x0000000009d57e: add eax, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x000000000e5637: add eax, [rax]; add [rax], al; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000141286: add eax, [rax]; add [rax], al; mov edi, [rbp-0x60]; syscall; 
0x0000000008c965: add eax, [rax]; add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000001690a1: add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000095cd1: add eax, [rax]; add [rax], al; ret; 
0x0000000009fdc5: add eax, [rax]; add [rax], al; syscall; 
0x00000000175609: add eax, [rax]; add [rbp+rcx*4+0x44], cl; and al, 0x20; call qword ptr [rax+0x340]; 
0x0000000009183e: add eax, [rax]; add [rbp-0x1b], dh; pop rbx; ret; 
0x0000000019cf8f: add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001947c8: add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000095cb3: add eax, [rax]; add [rbx+0x57510e0], al; ret; 
0x0000000010639e: add eax, [rax]; add [rbx+0x634c01c3], al; ret; 
0x0000000010639f: add eax, [rax]; add [rbx+0x634c01c3], al; ret; 
0x000000000f14b5: add eax, [rax]; add [rbx+0x6b8d483b], cl; add al, 0x83; call far fword ptr [rbp+0xf]; 
0x0000000003244f: add eax, [rax]; add [rcx+0x3948fc56], cl; ret; 
0x0000000017406c: add eax, [rax]; add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x0000000011ef38: add eax, [rax]; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x000000000edc83: add eax, [rax]; add [rcx-0x2ff6b], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000033ba5: add eax, [rax]; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x00000000085c56: add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000008ab7f: add eax, [rax]; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x0000000005a12e: add eax, [rax]; add [rdi+0x3004], bh; mov eax, 0x9e; syscall; 
0x00000000136698: add eax, [rax]; add [rdi+0x8], dh; mov rax, rdi; sar rax, 0x6; ret; 
0x00000000174fce: add eax, [rax]; add [rdx+0x2], ch; call qword ptr [rax+0x340]; 
0x0000000012f756: add eax, [rax]; add [rdx], al; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000017501f: add eax, [rax]; add [rdx], ch; call qword ptr [rax+0x340]; 
0x000000000b1166: add eax, [rax]; mov [r10], rdi; mov rax, r12; pop r12; ret; 
0x00000000187a71: add eax, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000e6537: add eax, [rax]; mov rax, [rip+0x1328d0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013f21a: add eax, [rax]; mov rax, [rsp]; mov rdi, r12; call rax; 
0x0000000013e5e5: add eax, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax; 
0x0000000013eec6: add eax, [rax]; mov rdi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000013ee82: add eax, [rax]; mov rdi, r12; call rbp; 
0x0000000013f1ba: add eax, [rax]; mov rdi, r12; call rbx; 
0x0000000013e58f: add eax, [rax]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x10]; 
0x00000000144831: add eax, [rax]; pop rbx; ret; 
0x000000000db347: add eax, [rbp+0xf]; ret; 
0x0000000003a9e6: add eax, [rbx+0x27770afa]; lea rcx, [rip+0x19156d]; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x00000000084791: add eax, [rbx+rcx*4]; mov eax, r8d; ret; 
0x0000000015ee8e: add eax, [rbx-0x1d7c0320]; cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000018d509: add eax, [rbx]; add [rax], al; ret; 
0x00000000053b4f: add eax, [rcx+0x52]; ret; 
0x0000000006a80e: add eax, [rcx+rcx*4+0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000c439e: add eax, [rcx+rcx*8+0x31c3ed75]; rol bl, 0x48; mov eax, edi; ret; 
0x0000000012a7e9: add eax, [rcx+rdx]; ret; 
0x000000000af9fe: add eax, [rcx-0x77]; ret far; 
0x0000000011426f: add eax, [rcx]; add [rax], al; syscall; 
0x000000000d9ab5: add eax, [rdx+0x8]; lea rdx, [rip-0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9bd5: add eax, [rdx+0x8]; lea rdx, [rip-0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000012a5f9: add eax, [rdx+rcx]; ret; 
0x0000000018d609: add eax, [rdx]; add [rax], al; ret; 
0x000000000eb068: add eax, [rip+0x135a82]; mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000eb020: add eax, [rip+0x135aca]; mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x000000000eafa8: add eax, [rip+0x135b42]; mov rax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x000000001834c7: add eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000005d608: add eax, eax; mov eax, r8d; ret; 
0x000000000f6ec8: add eax, eax; pop rbx; pop rbp; ret; 
0x000000001afa14: add eax, eax; ret; 
0x00000000199ba5: add eax, eax; vzeroupper; ret; 
0x0000000011343b: add eax, ebp; notrack jmp rax; 
0x000000000ab226: add eax, ebp; shl bh, cl; dec dword ptr [rax+0x29]; ret; 
0x000000001a4a33: add eax, ebx; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x0000000018d6e4: add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000000bfcd9: add eax, ebx; nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000d83c3: add eax, ebx; nop [rax+rax]; xor rax, rax; ret; 
0x0000000003a9f8: add eax, ecx; notrack jmp rax; 
0x000000000b13a4: add eax, ecx; ret; 
0x000000001987d6: add eax, ecx; sub rax, rdi; ret; 
0x0000000019976e: add eax, ecx; vzeroupper; ret; 
0x000000001a8a8e: add eax, ecx; xtest; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001afa11: add eax, edi; add rax, r8; ret; 
0x00000000199ba2: add eax, edi; add rax, r8; vzeroupper; ret; 
0x000000000b4986: add eax, edi; add rax, rcx; ret; 
0x000000000b51ba: add eax, edi; add rax, rsi; ret; 
0x000000001b14ac: add eax, edi; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000a8224: add eax, edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000dd99a: add eax, edi; notrack jmp rax; 
0x000000000b4bb4: add eax, edi; ret; 
0x000000001a2788: add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x000000001a28af: add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019947b: add eax, edi; vzeroupper; ret; 
0x000000001a73ca: add eax, edi; xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a85d7: add eax, edi; xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001ae00d: add eax, edi; xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x000000000736ae: add eax, edx; jmp rax; 
0x000000001aec11: add eax, edx; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001a2db6: add eax, edx; movzx ecx, byte ptr [rsi+rax-0x10]; movzx eax, byte ptr [rdi+rax-0x10]; sub eax, ecx; ret; 
0x000000001aec70: add eax, edx; movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x000000001aec5d: add eax, edx; movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x0000000002a3b6: add eax, edx; notrack jmp rax; 
0x0000000007d36b: add eax, edx; ret; 
0x000000000bab66: add eax, edx; sub rax, rdi; ret; 
0x000000000d85e6: add eax, edx; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000019d780: add eax, edx; vzeroupper; ret; 
0x000000001a94a0: add eax, edx; xtest; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000000967d8: add eax, esi; cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x0000000006b8c6: add eax, esi; notrack jmp rax; 
0x000000000b51bd: add eax, esi; ret; 
0x00000000154dce: add eax, esi; sub rcx, 0x1; jne short 0x0000000000154d58; ret; 
0x000000001b2db2: add eax, esi; xchg [rax], eax; ret; 
0x0000000010f902: add eax, esp; notrack jmp rax; 
0x000000001918f8: add eax, fs:[rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000a25b1: add ebp, [rsi+0x17]; add [rax+0x39], cl; ret; 
0x00000000180909: add ebp, [rsi+rax]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000160010: add ebp, eax; sub edx, eax; mov rsi, r13; call qword ptr [r15+0x40]; 
0x0000000016b162: add ebp, ebx; call rbp; 
0x0000000016027d: add ebp, ebx; sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x0000000016f2a2: add ebp, ebx; test al, ch; jbe short 0x000000000016f31c; cld; jmp qword ptr [rsi+0xf]; 
0x0000000015ff2c: add ebp, ecx; sub edx, ecx; mov rsi, r13; call qword ptr [r15+0x40]; 
0x00000000090fdb: add ebp, edx; xor eax, eax; ret; 
0x00000000175546: add ebx, [rax+0x5a]; pop rbx; ret; 
0x000000000a7b16: add ebx, [rbx+0x44]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000007f9a6: add ebx, [rbx+0x5d]; pop r12; ret; 
0x00000000181809: add ebx, [rip+0x63490006]; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001286ae: add ebx, eax; mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000012943e: add ebx, eax; mov rax, [rip+0xf81d1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x000000000d83b3: add ebx, eax; nop [rax+rax]; add rax, 0x3; ret; 
0x000000001a4a13: add ebx, eax; nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x00000000133c10: add ebx, eax; nop [rax+rax]; xor eax, eax; ret; 
0x00000000142b57: add ebx, eax; nop [rax]; mov eax, 0x2; ret; 
0x000000000a0d3e: add ebx, eax; nop; mov [rip+0x178690], rax; ret; 
0x0000000012944d: add ebx, eax; nop; ret; 
0x0000000005469d: add ebx, eax; nop; xor eax, eax; ret; 
0x00000000160736: add ebx, eax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x000000001b50fc: add ebx, eax; xchg ax, ax; xor eax, eax; ret; 
0x000000001269f3: add ebx, eax; xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x00000000125bac: add ebx, eax; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x00000000142e0f: add ebx, ebp; out 0x66, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000014b4fc: add ebx, ebp; out dx, al; ret; 
0x00000000086d6b: add ebx, ebp; ret far; 
0x000000001a71a9: add ebx, edi; clc; jmp qword ptr [rsi+0x66]; 
0x00000000182df3: add ebx, esi; movq [rdi], mm1; ret; 
0x00000000112ef6: add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000017464c: add ecx, 0x180; mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x000000000967d6: add ecx, 0x1; lock cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x0000000014960c: add ecx, 0x1; sub rcx, r9; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x000000000bc87a: add ecx, [r9-0x76b7fcbe]; clc; ret; 
0x00000000154d47: add ecx, [rax+0x1]; clc; notrack jmp rax; 
0x000000001b8b95: add ecx, [rax+0x21]; ror byte ptr [rcx-0x77], 0x1; ret far; 
0x0000000002f962: add ecx, [rax+0x39]; ret; 
0x000000001bb904: add ecx, [rax-0x73]; insb [rdi], dx; ret; 
0x000000000c051c: add ecx, [rax-0x73]; jg short 0x00000000000c0524; jne 0x00000000000c0d90; ret; 
0x000000000c1c00: add ecx, [rax-0x73]; jg short 0x00000000000c1c08; jne 0x00000000000c25e0; ret; 
0x0000000019f6bd: add ecx, [rax-0x73]; jg short 0x000000000019f6c5; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03f1: add ecx, [rax-0x73]; jg short 0x00000000001a03f9; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0811: add ecx, [rax-0x73]; jg short 0x00000000001b0819; jne 0x00000000001b0ac0; ret; 
0x000000001b39bd: add ecx, [rax-0x73]; jg short 0x00000000001b39c5; jne 0x00000000001b3c30; ret; 
0x000000000bc87d: add ecx, [rax-0x77]; clc; ret; 
0x0000000015ef88: add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000001b88a7: add ecx, [rax-0x77]; ret; 
0x000000001416ab: add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x0000000006d03f: add ecx, [rax-0x7d]; ret; 
0x00000000182b62: add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret; 
0x000000000c1324: add ecx, [rcx+0x357890f]; lea rax, [rdi+0x6]; ret; 
0x000000000c2174: add ecx, [rcx+0x357890f]; lea rax, [rdi+0x7]; ret; 
0x000000000bfcd4: add ecx, [rcx+0x357890f]; ret; 
0x000000000c0594: add ecx, [rcx+0x357890f]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c3dd4: add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x0000000005a44c: add ecx, [rcx+0x39]; ret; 
0x000000000bc87b: add ecx, [rcx-0x76b7fcbe]; clc; ret; 
0x0000000012908c: add ecx, [rdi]; add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000001b39c1: add ecx, [rdi]; test [rax+0x2], ebp; add [rax], al; ret; 
0x0000000019f6c1: add ecx, [rdi]; test [rax+0x2], ebx; add [rax], al; vzeroupper; ret; 
0x000000000c0520: add ecx, [rdi]; test [rcx+0x8], ebp; add [rax], al; ret; 
0x000000000f99a2: add ecx, [rdi]; test [rdi], bl; add al, [rax]; add [rax-0x7d], cl; ret; 
0x000000001918a7: add ecx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000f57f0: add ecx, [rdi]; xchg ch, dl; add al, [rax]; add [rbp+rcx*4+0x4f], cl; jmp qword ptr [rsi+0x41]; 
0x000000001521ff: add ecx, [rip+0x1d894800]; fild st, word ptr [rbx]; or eax, 0x43894800; or [rax-0x77], cl; ret far; 
0x00000000152206: add ecx, [rip+0x43894800]; or [rax-0x77], cl; ret far; 
0x0000000013eb2c: add ecx, [rip+0xda2de]; call rbp; 
0x00000000029e64: add ecx, [rsi]; call rcx; 
0x000000001430cd: add ecx, eax; loopne 0x00000000001430d4; shr rax, 0x4; and eax, 0x7f; ret; 
0x000000001b1c87: add ecx, eax; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x0000000010b1f8: add ecx, ebp; call r15; 
0x000000000ee294: add ecx, ebp; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001b7154: add ecx, ebp; push rsi; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000007b7a1: add ecx, ebp; stc; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000017adbf: add ecx, ebx; notrack jmp r9; 
0x0000000011f914: add ecx, ebx; ret; 
0x00000000134762: add ecx, edi; dec dword ptr [rax-0x73]; add eax, 0xfff90234; cmove rax, rdx; ret; 
0x000000000379d1: add ecx, edi; notrack jmp rcx; 
0x000000001b79a1: add ecx, edx; notrack jmp r9; 
0x00000000073064: add ecx, edx; notrack jmp rcx; 
0x000000000e3154: add ecx, esi; notrack jmp rcx; 
0x00000000163831: add edi, 0x10; jmp rcx; 
0x000000000c38bd: add edi, 0x10; lea r11, [rip+0x10fb8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f2d: add edi, 0x10; lea r11, [rip+0x11049d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2667: add edi, 0x10; lea r11, [rip+0x110d1f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2647: add edi, 0x10; lea r11, [rip+0x110d3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c125d: add edi, 0x10; lea r11, [rip+0x111f8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e17: add edi, 0x10; lea r11, [rip+0x11238f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0df7: add edi, 0x10; lea r11, [rip+0x1123af]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc1d: add edi, 0x10; lea r11, [rip+0x1133f9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000a02c3: add edi, 0x1; mov eax, 0xf0; syscall; 
0x000000000a054a: add edi, 0x1; mov eax, 0xf1; syscall; 
0x000000000f025e: add edi, 0x1; test al, al; jne short 0x00000000000f0201; xor eax, eax; ret; 
0x000000000c38f2: add edi, 0x20; lea r11, [rip+0x10fb58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f62: add edi, 0x20; lea r11, [rip+0x110468]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1292: add edi, 0x20; lea r11, [rip+0x111f58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc52: add edi, 0x20; lea r11, [rip+0x1133c4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001a27a6: add edi, 0x21; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9b6: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000199505: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000015f5ff: add edi, 0x23b0; pop rbp; jmp rcx; 
0x0000000011d1c1: add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000c37a0: add edi, 0x30; lea r11, [rip+0x10fcaa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e2f: add edi, 0x30; lea r11, [rip+0x11059b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c115f: add edi, 0x30; lea r11, [rip+0x11208b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb1f: add edi, 0x30; lea r11, [rip+0x1134f7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001a27c6: add edi, 0x41; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9c6: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000199515: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000166348: add edi, 0x58; jmp rcx; 
0x000000001a27e6: add edi, 0x61; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9d6: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000199525: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000165a18: add edi, 0x68; jmp rcx; 
0x00000000162c1b: add edi, 0xc8; jmp rcx; 
0x0000000019d735: add edi, 0xffffff80; add rax, rdi; vzeroupper; ret; 
0x000000000a7c77: add edi, [rax+0x1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000142b4b: add edi, [rax+0x2]; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000000da4c9: add edi, [rsi-0x8]; call far fword ptr [rcx+0x5e]; 
0x000000000436d0: add edi, [rsp]; mov rsi, r15; call r14; 
0x00000000046d52: add edi, eax; cmp rdi, r8; jb short 0x0000000000046d35; xor eax, eax; ret; 
0x000000000a7fa1: add edi, eax; jmp qword ptr [rsi+0xf]; 
0x000000000b152e: add edi, eax; notrack jmp rdi; 
0x00000000183d09: add edi, ebp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001bab20: add edi, ebp; call r12; 
0x000000001b5266: add edi, ebp; ret; 
0x00000000126407: add edi, ebp; xor eax, eax; ret; 
0x000000001b3f16: add edi, ebx; ret; 
0x00000000134502: add edi, ecx; dec dword ptr [rax-0x73]; add eax, 0xfff904b4; cmove rax, rdx; ret; 
0x000000000b1399: add edi, ecx; notrack jmp rdi; 
0x000000001463cf: add edi, edi; jmp qword ptr [rsi+0x66]; 
0x000000000a0a70: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a0d: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09ad: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x00000000184009: add edi, edx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017adbc: add edi, edx; add r9, r11; notrack jmp r9; 
0x00000000099ae4: add edi, edx; jmp qword ptr [rsi+0xf]; 
0x0000000018486c: add edi, edx; lea r11, [rip+0x5f19b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fc7: add edi, edx; lea r11, [rip+0x60a40]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e60: add edi, edx; lea r11, [rip+0x60ba7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d58: add edi, edx; lea r11, [rip+0x617af]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018013a: add edi, edx; lea r11, [rip+0x62fcd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804c7: add edi, edx; lea r11, [rip+0x63040]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180349: add edi, edx; lea r11, [rip+0x631be]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98b: add edi, edx; lea r11, [rip+0x6577c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8c6: add edi, edx; lea r11, [rip+0x65841]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afab: add edi, edx; lea r11, [rip+0x67f9c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aee6: add edi, edx; lea r11, [rip+0x68061]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000044618: add edi, esi; call rax; 
0x000000000485f7: add edi, esi; jmp qword ptr [rsi+0xf]; 
0x000000001b5276: add edi, esi; ret; 
0x000000001b5256: add edi, esp; ret; 
0x000000001b3f15: add edi, r11d; ret; 
0x000000001b5255: add edi, r12d; ret; 
0x000000001b5265: add edi, r13d; ret; 
0x000000001b5275: add edi, r14d; ret; 
0x00000000096772: add edx, 0x10; cmp rcx, 0x400; jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x0000000014ceef: add edx, 0x1; rol dx, 0x8; mov [rdi+0xa], dx; ret; 
0x00000000147cdc: add edx, 0x1; syscall; 
0x00000000142e3d: add edx, 0x2; mov [r8], ecx; mov [r9], rdx; ret; 
0x00000000142f05: add edx, 0x2; mov [r8], r11d; pop rbx; mov [r9], rdx; ret; 
0x000000001496e6: add edx, 0x2; xor eax, eax; mov [rdi], rdx; ret; 
0x0000000008f1d2: add edx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x00000000142f4f: add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000004076f: add edx, [rdi+0x20]; mov rax, r10; ret; 
0x000000000d97f7: add edx, [rsp+0x80]; mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x000000001281c5: add edx, eax; cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x00000000199a22: add edx, eax; jl 0x0000000000199b10; add rax, rdi; vzeroupper; ret; 
0x000000001af8f9: add edx, eax; jl 0x00000000001af990; add eax, 0x40; add rax, rdi; ret; 
0x000000001af8ae: add edx, eax; jl 0x00000000001af990; add rax, rdi; ret; 
0x000000000b50c8: add edx, eax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000000b50d8: add edx, eax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b50f8: add edx, eax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b5118: add edx, eax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x30]; ret; 
0x000000001af958: add edx, eax; jl short 0x00000000001af990; add eax, 0x20; add rax, rdi; ret; 
0x000000001af978: add edx, eax; jl short 0x00000000001af990; add eax, 0x60; add rax, rdi; ret; 
0x00000000055582: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x0000000007851b: add edx, ebp; call qword ptr [r10+rax*8]; 
0x0000000005a167: add edx, ebp; mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000010128e: add edx, ebp; notrack jmp rdx; 
0x0000000003ff4d: add edx, ebx; notrack jmp r10; 
0x0000000007d3e8: add edx, ecx; notrack jmp rdx; 
0x00000000053ca0: add edx, edi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b146e: add edx, edi; notrack jmp rdx; 
0x00000000142efa: add edx, edx; mov [r9], r10; ret; 
0x000000001288f3: add edx, edx; mov eax, 0x14; syscall; 
0x0000000003fc77: add edx, esi; notrack jmp rdx; 
0x00000000072fe8: add edx, esp; call qword ptr [r10+rax*8]; 
0x000000001b7b3e: add edx, esp; notrack jmp r10; 
0x00000000164a79: add esi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000072fdc: add esi, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000007850f: add esi, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x00000000113af8: add esi, 0x8; cmp rdi, rsi; jne short 0x0000000000113ad8; mov eax, r8d; ret; 
0x00000000029ead: add esi, 0x8; mov [rsp], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000000c3dd9: add esi, [rax]; in eax, dx; mov [rdi+0x7], ch; ret; 
0x0000000015e1dd: add esi, [rcx]; sar bh, 0x53; sbb bl, ch; mov edx, 0xfd8536e8; jmp qword ptr [rsi+0xf]; 
0x0000000017272c: add esi, [rdi+0x11]; cmp dx, cx; sete al; ret; 
0x00000000035dce: add esi, [rdi+rax+0x5b]; ret; 
0x00000000172746: add esi, [rsi+0x7]; ret; 
0x0000000015f23f: add esi, [rsi+0xe]; mov eax, 0x2; ret; 
0x00000000093217: add esi, [rsi+rsi+0x45]; xor edx, edx; mov rdi, r8; mov eax, r9d; syscall; 
0x000000000f4172: add esi, eax; add [rbx-0x48], bl; add [rax], eax; add [rax], al; ret; 
0x0000000015fd6f: add esi, eax; cmp rsi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x00000000051ac3: add esi, eax; jmp qword ptr [rax]; 
0x0000000016ccaa: add esi, eax; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000519c6: add esi, eax; notrack jmp rsi; 
0x0000000012643c: add esi, ebp; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x00000000109a53: add esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x00000000075e6f: add esi, ebx; mov byte ptr [rsp+0x38], 0x20; mov rbx, rcx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x0000000007ba03: add esi, ebx; mov dword ptr [rsp+0x10], 0x1; mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007b9c5: add esi, ebx; mov rbx, [rsp+0x58]; jmp rsi; 
0x0000000007632b: add esi, ebx; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000075a99: add esi, ebx; mov rbx, rcx; jmp rsi; 
0x00000000076218: add esi, ebx; mov rbx, rcx; xor r15d, r15d; mov r11d, 0x1; jmp rsi; 
0x00000000075a41: add esi, ebx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075475: add esi, ebx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000182d13: add esi, ebx; movq [rdi], mm1; ret; 
0x00000000142ffe: add esi, ebx; movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000c497e: add esi, ebx; movsb [rdi], [rsi]; ret; 
0x00000000174657: add esi, ebx; movsq [rdi], [rsi]; ret; 
0x00000000112efe: add esi, ebx; stosq [rdi]; ret; 
0x00000000075f94: add esi, ecx; jmp rsi; 
0x000000000c3a2a: add esi, ecx; lea r11, [rip+0x10faa1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a0a: add esi, ecx; lea r11, [rip+0x10fac1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39e1: add esi, ecx; lea r11, [rip+0x10faea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b6a: add esi, ecx; lea r11, [rip+0x11178d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b4a: add esi, ecx; lea r11, [rip+0x1117ad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b21: add esi, ecx; lea r11, [rip+0x1117d6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c048a: add esi, ecx; lea r11, [rip+0x112c8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c046a: add esi, ecx; lea r11, [rip+0x112cad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0441: add esi, ecx; lea r11, [rip+0x112cd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000184309: add esi, edi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000043859: add esi, edi; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000007dd5b: add esi, edi; notrack jmp rsi; 
0x000000001a6cd0: add esi, edi; sub rcx, rdi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000017adb9: add esi, edx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x000000001a73cd: add esi, edx; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a76ef: add esi, edx; je short 0x00000000001a76f7; vzeroall; ret; 
0x000000001a7afd: add esi, edx; je short 0x00000000001a7b05; vzeroall; ret; 
0x000000001a7dec: add esi, edx; je short 0x00000000001a7df4; vzeroall; ret; 
0x000000001a85da: add esi, edx; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001a89b4: add esi, edx; je short 0x00000000001a89bc; vzeroall; ret; 
0x000000001a8a91: add esi, edx; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001a8e0e: add esi, edx; je short 0x00000000001a8e16; vzeroall; ret; 
0x000000001a8e69: add esi, edx; je short 0x00000000001a8e71; vzeroall; ret; 
0x000000001a94a3: add esi, edx; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000001a972c: add esi, edx; je short 0x00000000001a9734; vzeroall; ret; 
0x000000001a9baf: add esi, edx; je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001aa789: add esi, edx; je short 0x00000000001aa791; vzeroall; ret; 
0x000000001aab39: add esi, edx; je short 0x00000000001aab41; vzeroall; ret; 
0x000000001aaddf: add esi, edx; je short 0x00000000001aade7; vzeroall; ret; 
0x000000001ab3f9: add esi, edx; je short 0x00000000001ab401; vzeroall; ret; 
0x000000001ab895: add esi, edx; je short 0x00000000001ab89d; vzeroall; ret; 
0x000000001ac0b7: add esi, edx; je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001ac9da: add esi, edx; je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001acb4a: add esi, edx; je short 0x00000000001acb52; vzeroall; ret; 
0x000000001ace5d: add esi, edx; je short 0x00000000001ace65; vzeroall; ret; 
0x000000001acec2: add esi, edx; je short 0x00000000001aceca; vzeroall; ret; 
0x000000001ad4a2: add esi, edx; je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000001ad52f: add esi, edx; je short 0x00000000001ad537; vzeroall; ret; 
0x000000001add4d: add esi, edx; je short 0x00000000001add55; vzeroall; ret; 
0x000000001adecf: add esi, edx; je short 0x00000000001aded7; vzeroall; ret; 
0x000000001ae010: add esi, edx; je short 0x00000000001ae018; vzeroall; ret; 
0x000000001ae354: add esi, edx; je short 0x00000000001ae35c; vzeroall; ret; 
0x00000000184604: add esi, edx; lea r11, [rip+0x5f403]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184484: add esi, edx; lea r11, [rip+0x5f583]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184304: add esi, edx; lea r11, [rip+0x5f703]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184185: add esi, edx; lea r11, [rip+0x5f882]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184004: add esi, edx; lea r11, [rip+0x5fa03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183e84: add esi, edx; lea r11, [rip+0x5fb83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183d04: add esi, edx; lea r11, [rip+0x5fd03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183b84: add esi, edx; lea r11, [rip+0x5fe83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183a04: add esi, edx; lea r11, [rip+0x60003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183884: add esi, edx; lea r11, [rip+0x60183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183704: add esi, edx; lea r11, [rip+0x60303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183584: add esi, edx; lea r11, [rip+0x60483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183404: add esi, edx; lea r11, [rip+0x60603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183284: add esi, edx; lea r11, [rip+0x60783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183104: add esi, edx; lea r11, [rip+0x60903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181b04: add esi, edx; lea r11, [rip+0x61a03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181984: add esi, edx; lea r11, [rip+0x61b83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181804: add esi, edx; lea r11, [rip+0x61d03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181685: add esi, edx; lea r11, [rip+0x61e82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181504: add esi, edx; lea r11, [rip+0x62003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181384: add esi, edx; lea r11, [rip+0x62183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181204: add esi, edx; lea r11, [rip+0x62303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181084: add esi, edx; lea r11, [rip+0x62483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180f04: add esi, edx; lea r11, [rip+0x62603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180d84: add esi, edx; lea r11, [rip+0x62783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180c04: add esi, edx; lea r11, [rip+0x62903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180a84: add esi, edx; lea r11, [rip+0x62a83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180904: add esi, edx; lea r11, [rip+0x62c03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180784: add esi, edx; lea r11, [rip+0x62d83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180604: add esi, edx; lea r11, [rip+0x62f03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017efb2: add esi, edx; lea r11, [rip+0x64155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ee62: add esi, edx; lea r11, [rip+0x642a5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed12: add esi, edx; lea r11, [rip+0x643f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ebc2: add esi, edx; lea r11, [rip+0x64545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ea72: add esi, edx; lea r11, [rip+0x64695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e922: add esi, edx; lea r11, [rip+0x647e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e7d2: add esi, edx; lea r11, [rip+0x64935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e532: add esi, edx; lea r11, [rip+0x64bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e2: add esi, edx; lea r11, [rip+0x64d25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e292: add esi, edx; lea r11, [rip+0x64e75]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e142: add esi, edx; lea r11, [rip+0x64fc5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dff2: add esi, edx; lea r11, [rip+0x65115]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dea2: add esi, edx; lea r11, [rip+0x65265]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dd52: add esi, edx; lea r11, [rip+0x653b5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017da8a: add esi, edx; lea r11, [rip+0x6567d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d2: add esi, edx; lea r11, [rip+0x66975]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c482: add esi, edx; lea r11, [rip+0x66ac5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c332: add esi, edx; lea r11, [rip+0x66c15]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c1e2: add esi, edx; lea r11, [rip+0x66d65]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c092: add esi, edx; lea r11, [rip+0x66eb5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf42: add esi, edx; lea r11, [rip+0x67005]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bdf2: add esi, edx; lea r11, [rip+0x67155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bb52: add esi, edx; lea r11, [rip+0x673f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba02: add esi, edx; lea r11, [rip+0x67545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b8b2: add esi, edx; lea r11, [rip+0x67695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b762: add esi, edx; lea r11, [rip+0x677e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b612: add esi, edx; lea r11, [rip+0x67935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b4c2: add esi, edx; lea r11, [rip+0x67a85]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b372: add esi, edx; lea r11, [rip+0x67bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b0aa: add esi, edx; lea r11, [rip+0x67e9d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000f6f84: add esi, esi; ret; 
0x00000000184609: add esi, esp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c473d: add esp, 0x100; sub rax, rdx; ret; 
0x000000000c47ed: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000061366: add esp, 0x1010; pop rbp; ret; 
0x00000000061171: add esp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000121c3c: add esp, 0x1018; ret; 
0x00000000083cf2: add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000083d21: add esp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000a0842: add esp, 0x10; mov eax, r8d; pop rbx; ret; 
0x000000001279b9: add esp, 0x10; mov rax, r12; pop r12; ret; 
0x000000000a7a95: add esp, 0x10; pop r12; ret; 
0x0000000016b5bb: add esp, 0x10; pop rbp; jmp rax; 
0x000000000a60b0: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000090d77: add esp, 0x10; pop rbp; ret; 
0x0000000008d8c5: add esp, 0x10; pop rbx; jmp rax; 
0x000000000900a0: add esp, 0x10; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000007e032: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000041df6: add esp, 0x10; pop rbx; ret; 
0x00000000092416: add esp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000174c5f: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000167fe6: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x00000000149fc2: add esp, 0x110; pop rbx; ret; 
0x00000000042947: add esp, 0x118; ret; 
0x00000000173e01: add esp, 0x11c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000009cbe6: add esp, 0x120; pop rbp; ret; 
0x0000000009dc69: add esp, 0x120; pop rbx; pop rbp; pop r12; ret; 
0x00000000115bc3: add esp, 0x130; pop rbp; ret; 
0x00000000042c6c: add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000004240b: add esp, 0x148; ret; 
0x0000000005385d: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000014355b: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000125f04: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000046151: add esp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000a2476: add esp, 0x18; pop rbp; pop r12; ret; 
0x00000000167679: add esp, 0x18; pop rbx; pop r12; ret; 
0x00000000041f56: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003a88a: add esp, 0x18; ret; 
0x000000001726d3: add esp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000011b603: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x00000000113f77: add esp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x00000000060e33: add esp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000042011: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000125d31: add esp, 0x20; pop r12; ret; 
0x000000000420a2: add esp, 0x20; pop rbp; ret; 
0x0000000008e081: add esp, 0x20; pop rbx; jmp rax; 
0x0000000009113d: add esp, 0x20; pop rbx; pop r12; pop r13; ret; 
0x0000000003584d: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000d2c16: add esp, 0x20; pop rbx; ret; 
0x000000000dcee9: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000008e563: add esp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000149c7d: add esp, 0x218; ret; 
0x000000000435cb: add esp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x000000000904ac: add esp, 0x28; jmp rax; 
0x0000000009c98b: add esp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000082ff1: add esp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000087325: add esp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000006124b: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000059b3d: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000045f26: add esp, 0x28; ret; 
0x000000000832e8: add esp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000001ba8c0: add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000001193e0: add esp, 0x30; pop r12; ret; 
0x0000000017549c: add esp, 0x30; pop rbx; jmp rax; 
0x0000000014082f: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000011503e: add esp, 0x30; pop rbx; ret; 
0x00000000174069: add esp, 0x338; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000090651: add esp, 0x38; jmp rax; 
0x0000000002a2dc: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000005a49f: add esp, 0x38; ret; 
0x00000000118e3c: add esp, 0x40; pop r13; ret; 
0x000000000d8f40: add esp, 0x40; pop rbp; ret; 
0x00000000164b69: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000042d09: add esp, 0x40; pop rbx; ret; 
0x00000000129dcc: add esp, 0x40; ret; 
0x00000000060ec3: add esp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x0000000012135e: add esp, 0x418; ret; 
0x0000000005150a: add esp, 0x428; ret; 
0x0000000005a256: add esp, 0x450; pop rbp; ret; 
0x00000000160c35: add esp, 0x48; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000090855: add esp, 0x48; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000090881: add esp, 0x48; pop rbp; pop r12; jmp rax; 
0x00000000167a94: add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000089fe9: add esp, 0x48; ret; 
0x00000000115d2b: add esp, 0x50; mov rax, r8; pop rbp; ret; 
0x0000000009ee42: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000001750e9: add esp, 0x50; pop rbx; ret; 
0x00000000171c7d: add esp, 0x520; mov rax, r12; pop r12; ret; 
0x00000000147cf6: add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000a02e6: add esp, 0x58; ret; 
0x000000000a6d5f: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000015ddab: add esp, 0x60; pop rbp; ret; 
0x0000000015dc53: add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000001751e0: add esp, 0x60; pop rbx; ret; 
0x00000000119fef: add esp, 0x68; mov eax, r9d; pop rbx; pop rbp; ret; 
0x0000000011b915: add esp, 0x68; pop r12; pop r14; ret; 
0x0000000011470c: add esp, 0x68; pop rbp; pop r12; ret; 
0x00000000107595: add esp, 0x68; pop rbx; pop rbp; ret; 
0x00000000114efd: add esp, 0x68; ret; 
0x000000001753bc: add esp, 0x70; pop rbx; jmp rax; 
0x000000000c5ecb: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000017537b: add esp, 0x70; pop rbx; ret; 
0x00000000114887: add esp, 0x78; ret; 
0x000000001499d9: add esp, 0x820; pop rbp; pop r12; pop r13; ret; 
0x0000000016776e: add esp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000011435e: add esp, 0x88; pop rbp; pop r12; ret; 
0x00000000121e1d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000f6ec5: add esp, 0x8; add eax, eax; pop rbx; pop rbp; ret; 
0x00000000142dd1: add esp, 0x8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x0000000011c406: add esp, 0x8; lea rax, [rip+0x104e48]; pop rbx; pop rbp; ret; 
0x0000000015d471: add esp, 0x8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000099d90: add esp, 0x8; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000016b351: add esp, 0x8; mov eax, 0x1; pop rbp; pop r12; ret; 
0x0000000007ff67: add esp, 0x8; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x0000000013d95f: add esp, 0x8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x0000000007ff89: add esp, 0x8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000086510: add esp, 0x8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000005a581: add esp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000092255: add esp, 0x8; mov eax, r13d; pop r12; pop r13; ret; 
0x000000000f8090: add esp, 0x8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000011d7df: add esp, 0x8; mov eax, r8d; ret; 
0x000000000c53e3: add esp, 0x8; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000a9df1: add esp, 0x8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000e5be5: add esp, 0x8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000016bd93: add esp, 0x8; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000083e77: add esp, 0x8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000009d597: add esp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x00000000125eca: add esp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000015f6e0: add esp, 0x8; movzx eax, al; pop rbp; pop r12; ret; 
0x0000000011ce7a: add esp, 0x8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000050d86: add esp, 0x8; movzx eax, al; ret; 
0x0000000016d486: add esp, 0x8; not eax; shr eax, 0x1f; ret; 
0x0000000016b346: add esp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000081cfa: add esp, 0x8; pop rbp; pop r12; ret; 
0x00000000175f10: add esp, 0x8; pop rbx; pop rbp; jmp rax; 
0x0000000015f5b7: add esp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002ac59: add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002a528: add esp, 0x8; ret; 
0x00000000177f85: add esp, 0x8; sar eax, 0x1f; ret; 
0x0000000009cb55: add esp, 0x8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000046521: add esp, 0x8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000009ff10: add esp, 0x90; pop rbp; pop r12; pop r13; ret; 
0x000000000428cd: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000016d29a: add esp, 0x90; pop rbx; ret; 
0x00000000042a44: add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000029fcf: add esp, 0x98; ret; 
0x00000000042e1a: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000011961e: add esp, 0xa0; pop rbx; ret; 
0x00000000092c7f: add esp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000e6acf: add esp, 0xa8; pop rbp; pop r12; ret; 
0x000000000434a8: add esp, 0xa8; ret; 
0x00000000035727: add esp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000ec940: add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000016754c: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000114560: add esp, 0xc8; mov eax, r12d; pop r12; pop r13; ret; 
0x00000000051898: add esp, 0xd8; ret; 
0x000000000d9deb: add esp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x000000000a0ca5: add esp, 0xe0; pop rbp; ret; 
0x000000000e6116: add esp, 0xe0; pop rbx; ret; 
0x0000000007e99b: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x000000001a6c47: add esp, [rdx+0x61]; dec byte ptr [rax+0x7f]; cmp r15b, dil; ret; 
0x0000000012216c: add fs:[rax], al; add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x000000000c5828: add fs:[rax], eax; cmove rax, rdx; ret; 
0x000000000c95e1: add gs:[rax], eax; add [rax+0x29], cl; ret far; 
0x00000000140c83: add gs:[rbx+0x5d], bl; pop r12; ret; 
0x0000000011aa41: add gs:[rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000015d5ec: add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000004576c: add qword ptr [rip+0x1d576c], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000040764: add qword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x0000000004076e: add r10, [rdi+0x20]; mov rax, r10; ret; 
0x0000000003ff4c: add r10, r11; notrack jmp r10; 
0x000000001b7b3d: add r10, r12; notrack jmp r10; 
0x00000000142ef9: add r10, rdx; mov [r9], r10; ret; 
0x00000000182df2: add r11d, r14d; movq [rdi], mm1; ret; 
0x000000001a4a12: add r11d, r8d; nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x0000000016000f: add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [r15+0x40]; 
0x0000000016b161: add r13, rbx; call rbp; 
0x0000000016027b: add r13, rbx; sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x0000000016027c: add r13, rbx; sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x0000000015ff2b: add r13, rcx; sub edx, ecx; mov rsi, r13; call qword ptr [r15+0x40]; 
0x00000000072fdb: add r14, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000007850e: add r14, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x00000000029eac: add r14, 0x8; mov [rsp], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000142ffd: add r14, r11; movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x00000000043858: add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000182d82: add r14b, r11b; movq [rdi], mm1; ret; 
0x00000000182d12: add r14d, r11d; movq [rdi], mm1; ret; 
0x000000000436cf: add r15, [rsp]; mov rsi, r15; call r14; 
0x00000000044617: add r15, r14; call rax; 
0x000000001463ce: add r15, rdi; jmp qword ptr [rsi+0x66]; 
0x000000000c267c: add r8, 0x10; lea r11, [rip+0x110d09]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e2c: add r8, 0x10; lea r11, [rip+0x112379]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000015510a: add r8, [0x0]; mov rcx, r15; call rbp; 
0x00000000155109: add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x000000000a8223: add r8, rdi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001b01b7: add r8b, [r8]; lea rax, [rdi+0x2]; ret; 
0x0000000019fe27: add r8b, [r8]; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b13b7: add r8b, [r8]; ret; 
0x000000001b39b7: add r8b, [r8]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x0000000019e397: add r8b, [r8]; vzeroupper; ret; 
0x000000000ee28c: add r8b, [rbx-0x7cb7fd37]; mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001a4a22: add r8b, r11b; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x00000000189fd5: add r8d, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000005d607: add r8d, eax; mov eax, r8d; ret; 
0x0000000019db66: add r8d, ecx; vzeroupper; ret; 
0x000000001a27c8: add r8d, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9c8: add r8d, edi; vzeroupper; ret; 
0x000000001a4a32: add r8d, r11d; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000001b79a0: add r9, r10; notrack jmp r9; 
0x0000000017adbe: add r9, r11; notrack jmp r9; 
0x0000000010b1f7: add r9, r13; call r15; 
0x00000000033823: add r9b, [r8+0x39]; ret; 
0x000000001b88a6: add r9d, [r8-0x77]; ret; 
0x000000001430cc: add r9d, r8d; loopne 0x00000000001430d4; shr rax, 0x4; and eax, 0x7f; ret; 
0x00000000052fc0: add rax, 0x1; cmp byte ptr [rax+0x1], 0x0; jne short 0x0000000000052fc0; pop rbx; ret; 
0x000000000b1230: add rax, 0x1; movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000b1230; ret; 
0x000000000d83b0: add rax, 0x1; ret; 
0x000000000abd00: add rax, 0x1; test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x000000001432dc: add rax, 0x1; test rax, rax; js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x0000000003a409: add rax, 0x200; mov fs:[rdx], rax; ret; 
0x000000000d83a7: add rax, 0x2; ret; 
0x0000000018d543: add rax, 0x2c5850f; add [rax], al; ret; 
0x000000001918f4: add rax, 0x364850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000d83c0: add rax, 0x3; ret; 
0x0000000016cd64: add rax, 0x4; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000c5982: add rax, 0x4; test edx, edx; jne short 0x00000000000c5978; xor eax, eax; ret; 
0x000000000eced0: add rax, 0x72f52011; cmp r8, rax; jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x0000000011dad8: add rax, 0x8; mov [rip+0x10388d], rax; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daa8: add rax, 0x8; mov [rip+0x1038bd], rax; mov rax, r8; ret; 
0x00000000168b91: add rax, 0xa0; pop rbx; ret; 
0x00000000168c11: add rax, 0xa8; pop rbx; ret; 
0x000000001756e4: add rax, 0xfd00148; mov dh, 0x56; add eax, 0x840fd284; ret far; 
0x00000000036a8d: add rax, 0xffffffff89480000; ret; 
0x0000000010b1ec: add rax, [0x0]; mov r8, rax; add r9, r13; call r15; 
0x0000000002a25c: add rax, [0x0]; ret; 
0x00000000090518: add rax, [rax]; add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x00000000174f8d: add rax, [rax]; add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret; 
0x000000000d9ab4: add rax, [rdx+0x8]; lea rdx, [rip-0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9bd4: add rax, [rdx+0x8]; lea rdx, [rip-0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000eb067: add rax, [rip+0x135a82]; mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000eb01f: add rax, [rip+0x135aca]; mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x000000000eafa7: add rax, [rip+0x135b42]; mov rax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x0000000010b1eb: add rax, fs:[0x0]; mov r8, rax; add r9, r13; call r15; 
0x0000000002a25b: add rax, fs:[0x0]; ret; 
0x0000000008c2c9: add rax, r10; notrack jmp rax; 
0x0000000010f901: add rax, r12; notrack jmp rax; 
0x0000000011343a: add rax, r13; notrack jmp rax; 
0x000000001afa13: add rax, r8; ret; 
0x00000000199ba4: add rax, r8; vzeroupper; ret; 
0x0000000003a9f7: add rax, rcx; notrack jmp rax; 
0x000000000b13a3: add rax, rcx; ret; 
0x000000001987d5: add rax, rcx; sub rax, rdi; ret; 
0x0000000019976d: add rax, rcx; vzeroupper; ret; 
0x000000001a8a8d: add rax, rcx; xtest; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001afa10: add rax, rdi; add rax, r8; ret; 
0x00000000199ba1: add rax, rdi; add rax, r8; vzeroupper; ret; 
0x000000000b4985: add rax, rdi; add rax, rcx; ret; 
0x000000000b51b9: add rax, rdi; add rax, rsi; ret; 
0x000000001b14ab: add rax, rdi; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000dd999: add rax, rdi; notrack jmp rax; 
0x000000000b50cb: add rax, rdi; ret; 
0x000000000b4bb3: add rax, rdi; ret; 
0x000000001a28ae: add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019947a: add rax, rdi; vzeroupper; ret; 
0x000000001a73c9: add rax, rdi; xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a85d6: add rax, rdi; xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001ae00c: add rax, rdi; xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x000000000736ad: add rax, rdx; jmp rax; 
0x000000001aec10: add rax, rdx; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x0000000002a3b5: add rax, rdx; notrack jmp rax; 
0x0000000007d36a: add rax, rdx; ret; 
0x000000000bab65: add rax, rdx; sub rax, rdi; ret; 
0x000000000d85e5: add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000019d77f: add rax, rdx; vzeroupper; ret; 
0x000000001a949f: add rax, rdx; xtest; je short 0x00000000001a94ab; vzeroall; ret; 
0x0000000006b8c5: add rax, rsi; notrack jmp rax; 
0x000000000b51bc: add rax, rsi; ret; 
0x00000000160735: add rbx, rax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x0000000014960b: add rcx, 0x1; sub rcx, r9; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x00000000029e63: add rcx, [r14]; call rcx; 
0x000000001918a6: add rcx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x0000000013eb2b: add rcx, [rip+0xda2de]; call rbp; 
0x000000001b1c86: add rcx, r8; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x000000000379d0: add rcx, rdi; notrack jmp rcx; 
0x00000000073063: add rcx, rdx; notrack jmp rcx; 
0x000000000e3153: add rcx, rsi; notrack jmp rcx; 
0x00000000163830: add rdi, 0x10; jmp rcx; 
0x000000000c38bc: add rdi, 0x10; lea r11, [rip+0x10fb8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f2c: add rdi, 0x10; lea r11, [rip+0x11049d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2666: add rdi, 0x10; lea r11, [rip+0x110d1f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2646: add rdi, 0x10; lea r11, [rip+0x110d3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c125c: add rdi, 0x10; lea r11, [rip+0x111f8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e16: add rdi, 0x10; lea r11, [rip+0x11238f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0df6: add rdi, 0x10; lea r11, [rip+0x1123af]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc1c: add rdi, 0x10; lea r11, [rip+0x1133f9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000a02c1: add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000000a02c2: add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000000a0548: add rdi, 0x1; mov eax, 0xf1; syscall; 
0x000000000f025d: add rdi, 0x1; test al, al; jne short 0x00000000000f0201; xor eax, eax; ret; 
0x000000000c38f1: add rdi, 0x20; lea r11, [rip+0x10fb58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f61: add rdi, 0x20; lea r11, [rip+0x110468]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1291: add rdi, 0x20; lea r11, [rip+0x111f58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc51: add rdi, 0x20; lea r11, [rip+0x1133c4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000199504: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000015f5fe: add rdi, 0x23b0; pop rbp; jmp rcx; 
0x000000000c379f: add rdi, 0x30; lea r11, [rip+0x10fcaa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e2e: add rdi, 0x30; lea r11, [rip+0x11059b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c115e: add rdi, 0x30; lea r11, [rip+0x11208b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb1e: add rdi, 0x30; lea r11, [rip+0x1134f7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000199514: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000166347: add rdi, 0x58; jmp rcx; 
0x00000000199524: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000165a17: add rdi, 0x68; jmp rcx; 
0x00000000162c1a: add rdi, 0xc8; jmp rcx; 
0x0000000019d734: add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x000000000b152d: add rdi, r8; notrack jmp rdi; 
0x000000000b1398: add rdi, r9; notrack jmp rdi; 
0x00000000046d51: add rdi, rax; cmp rdi, r8; jb short 0x0000000000046d35; xor eax, eax; ret; 
0x000000001bab1f: add rdi, rbp; call r12; 
0x000000000a0a6f: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a0c: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09ac: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x0000000017adbb: add rdi, rdx; add r9, r11; notrack jmp r9; 
0x0000000018486b: add rdi, rdx; lea r11, [rip+0x5f19b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fc6: add rdi, rdx; lea r11, [rip+0x60a40]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e5f: add rdi, rdx; lea r11, [rip+0x60ba7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d57: add rdi, rdx; lea r11, [rip+0x617af]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180139: add rdi, rdx; lea r11, [rip+0x62fcd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804c6: add rdi, rdx; lea r11, [rip+0x63040]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180348: add rdi, rdx; lea r11, [rip+0x631be]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98a: add rdi, rdx; lea r11, [rip+0x6577c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8c5: add rdi, rdx; lea r11, [rip+0x65841]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afaa: add rdi, rdx; lea r11, [rip+0x67f9c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aee5: add rdi, rdx; lea r11, [rip+0x68061]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000096771: add rdx, 0x10; cmp rcx, 0x400; jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x00000000142e3c: add rdx, 0x2; mov [r8], ecx; mov [r9], rdx; ret; 
0x00000000142f04: add rdx, 0x2; mov [r8], r11d; pop rbx; mov [r9], rdx; ret; 
0x000000001496e5: add rdx, 0x2; xor eax, eax; mov [rdi], rdx; ret; 
0x0000000008f1d1: add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x000000000d97f6: add rdx, [rsp+0x80]; mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x00000000072fe7: add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000007851a: add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000010128d: add rdx, r13; notrack jmp rdx; 
0x00000000104c84: add rdx, r15; notrack jmp rdx; 
0x00000000055581: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000001281c4: add rdx, rax; cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x00000000199a21: add rdx, rax; jl 0x0000000000199b10; add rax, rdi; vzeroupper; ret; 
0x000000001af8f7: add rdx, rax; jl 0x00000000001af990; add eax, 0x40; add rax, rdi; ret; 
0x000000001af8ad: add rdx, rax; jl 0x00000000001af990; add rax, rdi; ret; 
0x000000000b50c6: add rdx, rax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000000b50d7: add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b50f7: add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b5117: add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x30]; ret; 
0x000000001af957: add rdx, rax; jl short 0x00000000001af990; add eax, 0x20; add rax, rdi; ret; 
0x000000001af977: add rdx, rax; jl short 0x00000000001af990; add eax, 0x60; add rax, rdi; ret; 
0x0000000007d3e7: add rdx, rcx; notrack jmp rdx; 
0x00000000053c9f: add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b146d: add rdx, rdi; notrack jmp rdx; 
0x0000000003fc76: add rdx, rsi; notrack jmp rdx; 
0x00000000164a78: add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000113af7: add rsi, 0x8; cmp rdi, rsi; jne short 0x0000000000113ad8; mov eax, r8d; ret; 
0x0000000016cca9: add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000519c5: add rsi, r8; notrack jmp rsi; 
0x0000000015fd6e: add rsi, rax; cmp rsi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x00000000075e6e: add rsi, rbx; mov byte ptr [rsp+0x38], 0x20; mov rbx, rcx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x0000000007ba02: add rsi, rbx; mov dword ptr [rsp+0x10], 0x1; mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007b9c4: add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x0000000007632a: add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000075a98: add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076217: add rsi, rbx; mov rbx, rcx; xor r15d, r15d; mov r11d, 0x1; jmp rsi; 
0x00000000075a40: add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075474: add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000075f93: add rsi, rcx; jmp rsi; 
0x000000000c3a29: add rsi, rcx; lea r11, [rip+0x10faa1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a09: add rsi, rcx; lea r11, [rip+0x10fac1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39e0: add rsi, rcx; lea r11, [rip+0x10faea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b69: add rsi, rcx; lea r11, [rip+0x11178d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b49: add rsi, rcx; lea r11, [rip+0x1117ad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b20: add rsi, rcx; lea r11, [rip+0x1117d6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0489: add rsi, rcx; lea r11, [rip+0x112c8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0469: add rsi, rcx; lea r11, [rip+0x112cad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0440: add rsi, rcx; lea r11, [rip+0x112cd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000007dd5a: add rsi, rdi; notrack jmp rsi; 
0x000000001a6ccf: add rsi, rdi; sub rcx, rdi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000017adb8: add rsi, rdx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x00000000184603: add rsi, rdx; lea r11, [rip+0x5f403]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184483: add rsi, rdx; lea r11, [rip+0x5f583]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184303: add rsi, rdx; lea r11, [rip+0x5f703]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184184: add rsi, rdx; lea r11, [rip+0x5f882]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184003: add rsi, rdx; lea r11, [rip+0x5fa03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183e83: add rsi, rdx; lea r11, [rip+0x5fb83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183d03: add rsi, rdx; lea r11, [rip+0x5fd03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183b83: add rsi, rdx; lea r11, [rip+0x5fe83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183a03: add rsi, rdx; lea r11, [rip+0x60003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183883: add rsi, rdx; lea r11, [rip+0x60183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183703: add rsi, rdx; lea r11, [rip+0x60303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183583: add rsi, rdx; lea r11, [rip+0x60483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183403: add rsi, rdx; lea r11, [rip+0x60603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183283: add rsi, rdx; lea r11, [rip+0x60783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183103: add rsi, rdx; lea r11, [rip+0x60903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181b03: add rsi, rdx; lea r11, [rip+0x61a03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181983: add rsi, rdx; lea r11, [rip+0x61b83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181803: add rsi, rdx; lea r11, [rip+0x61d03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181684: add rsi, rdx; lea r11, [rip+0x61e82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181503: add rsi, rdx; lea r11, [rip+0x62003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181383: add rsi, rdx; lea r11, [rip+0x62183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181203: add rsi, rdx; lea r11, [rip+0x62303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181083: add rsi, rdx; lea r11, [rip+0x62483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180f03: add rsi, rdx; lea r11, [rip+0x62603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180d83: add rsi, rdx; lea r11, [rip+0x62783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180c03: add rsi, rdx; lea r11, [rip+0x62903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180a83: add rsi, rdx; lea r11, [rip+0x62a83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180903: add rsi, rdx; lea r11, [rip+0x62c03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180783: add rsi, rdx; lea r11, [rip+0x62d83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180603: add rsi, rdx; lea r11, [rip+0x62f03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017efb1: add rsi, rdx; lea r11, [rip+0x64155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ee61: add rsi, rdx; lea r11, [rip+0x642a5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed11: add rsi, rdx; lea r11, [rip+0x643f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ebc1: add rsi, rdx; lea r11, [rip+0x64545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ea71: add rsi, rdx; lea r11, [rip+0x64695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e921: add rsi, rdx; lea r11, [rip+0x647e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e7d1: add rsi, rdx; lea r11, [rip+0x64935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e531: add rsi, rdx; lea r11, [rip+0x64bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e1: add rsi, rdx; lea r11, [rip+0x64d25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e291: add rsi, rdx; lea r11, [rip+0x64e75]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e141: add rsi, rdx; lea r11, [rip+0x64fc5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dff1: add rsi, rdx; lea r11, [rip+0x65115]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dea1: add rsi, rdx; lea r11, [rip+0x65265]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dd51: add rsi, rdx; lea r11, [rip+0x653b5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017da89: add rsi, rdx; lea r11, [rip+0x6567d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d1: add rsi, rdx; lea r11, [rip+0x66975]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c481: add rsi, rdx; lea r11, [rip+0x66ac5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c331: add rsi, rdx; lea r11, [rip+0x66c15]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c1e1: add rsi, rdx; lea r11, [rip+0x66d65]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c091: add rsi, rdx; lea r11, [rip+0x66eb5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf41: add rsi, rdx; lea r11, [rip+0x67005]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bdf1: add rsi, rdx; lea r11, [rip+0x67155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bb51: add rsi, rdx; lea r11, [rip+0x673f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba01: add rsi, rdx; lea r11, [rip+0x67545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b8b1: add rsi, rdx; lea r11, [rip+0x67695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b761: add rsi, rdx; lea r11, [rip+0x677e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b611: add rsi, rdx; lea r11, [rip+0x67935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b4c1: add rsi, rdx; lea r11, [rip+0x67a85]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b371: add rsi, rdx; lea r11, [rip+0x67bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b0a9: add rsi, rdx; lea r11, [rip+0x67e9d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c473c: add rsp, 0x100; sub rax, rdx; ret; 
0x000000000c47ec: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000061365: add rsp, 0x1010; pop rbp; ret; 
0x00000000061170: add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000121c3b: add rsp, 0x1018; ret; 
0x00000000083cf1: add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000083d20: add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000a0841: add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x000000001279b8: add rsp, 0x10; mov rax, r12; pop r12; ret; 
0x000000000a7a94: add rsp, 0x10; pop r12; ret; 
0x0000000016b5ba: add rsp, 0x10; pop rbp; jmp rax; 
0x000000000a60af: add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000090d76: add rsp, 0x10; pop rbp; ret; 
0x00000000172201: add rsp, 0x10; pop rbp; ret; 
0x0000000008d8c4: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000009009f: add rsp, 0x10; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000007e031: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000160153: add rsp, 0x10; pop rbx; ret; 
0x00000000041df5: add rsp, 0x10; pop rbx; ret; 
0x00000000092414: add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000092415: add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000174c5e: add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000167fe5: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x00000000149fc1: add rsp, 0x110; pop rbx; ret; 
0x00000000042946: add rsp, 0x118; ret; 
0x00000000173e00: add rsp, 0x11c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000009cbe4: add rsp, 0x120; pop rbp; ret; 
0x0000000009dc68: add rsp, 0x120; pop rbx; pop rbp; pop r12; ret; 
0x00000000115bc1: add rsp, 0x130; pop rbp; ret; 
0x00000000042c6b: add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000004240a: add rsp, 0x148; ret; 
0x0000000005385c: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000014355a: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000125f03: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000046150: add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000a2474: add rsp, 0x18; pop rbp; pop r12; ret; 
0x00000000167678: add rsp, 0x18; pop rbx; pop r12; ret; 
0x0000000015e1ae: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000041f55: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003a889: add rsp, 0x18; ret; 
0x000000001726d2: add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000011b602: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x00000000113f76: add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x00000000060e32: add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000042010: add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000125d30: add rsp, 0x20; pop r12; ret; 
0x000000000420a1: add rsp, 0x20; pop rbp; ret; 
0x0000000008e07e: add rsp, 0x20; pop rbx; jmp rax; 
0x0000000009113c: add rsp, 0x20; pop rbx; pop r12; pop r13; ret; 
0x0000000003584c: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000d2c15: add rsp, 0x20; pop rbx; ret; 
0x000000000dcee8: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000008e560: add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000149c7c: add rsp, 0x218; ret; 
0x000000000435ca: add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x000000000904ab: add rsp, 0x28; jmp rax; 
0x0000000009c98a: add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000082ff0: add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000087324: add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000006124a: add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000013ed39: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000059b3c: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000045f25: add rsp, 0x28; ret; 
0x000000000d9c5f: add rsp, 0x28; ret; 
0x000000000832e7: add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000001ba8bf: add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000001193df: add rsp, 0x30; pop r12; ret; 
0x0000000017549b: add rsp, 0x30; pop rbx; jmp rax; 
0x0000000014082e: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000011503d: add rsp, 0x30; pop rbx; ret; 
0x00000000174068: add rsp, 0x338; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000090650: add rsp, 0x38; jmp rax; 
0x0000000002a2db: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000005a49d: add rsp, 0x38; ret; 
0x00000000118e3b: add rsp, 0x40; pop r13; ret; 
0x000000000d8f3f: add rsp, 0x40; pop rbp; ret; 
0x00000000164b68: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000042d08: add rsp, 0x40; pop rbx; ret; 
0x00000000129dcb: add rsp, 0x40; ret; 
0x00000000060ec2: add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x0000000012135d: add rsp, 0x418; ret; 
0x00000000051509: add rsp, 0x428; ret; 
0x0000000005a255: add rsp, 0x450; pop rbp; ret; 
0x00000000160c34: add rsp, 0x48; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000090854: add rsp, 0x48; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000090880: add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x00000000167a93: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000167a92: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000089fe8: add rsp, 0x48; ret; 
0x00000000115d29: add rsp, 0x50; mov rax, r8; pop rbp; ret; 
0x0000000009ee41: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000001750e8: add rsp, 0x50; pop rbx; ret; 
0x00000000171c7c: add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x00000000147cf5: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000a02e5: add rsp, 0x58; ret; 
0x000000000a6d5e: add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000015ddaa: add rsp, 0x60; pop rbp; ret; 
0x0000000015dc52: add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000001751df: add rsp, 0x60; pop rbx; ret; 
0x00000000119fee: add rsp, 0x68; mov eax, r9d; pop rbx; pop rbp; ret; 
0x0000000011b914: add rsp, 0x68; pop r12; pop r14; ret; 
0x0000000011470b: add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000107594: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000114efc: add rsp, 0x68; ret; 
0x000000001753bb: add rsp, 0x70; pop rbx; jmp rax; 
0x000000000c5eca: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000017537a: add rsp, 0x70; pop rbx; ret; 
0x00000000114886: add rsp, 0x78; ret; 
0x000000001499d8: add rsp, 0x820; pop rbp; pop r12; pop r13; ret; 
0x0000000016776c: add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000011435d: add rsp, 0x88; pop rbp; pop r12; ret; 
0x00000000121e1c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000f6ec4: add rsp, 0x8; add eax, eax; pop rbx; pop rbp; ret; 
0x00000000142dd0: add rsp, 0x8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x0000000011c405: add rsp, 0x8; lea rax, [rip+0x104e48]; pop rbx; pop rbp; ret; 
0x0000000015d470: add rsp, 0x8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000099d8f: add rsp, 0x8; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000016b350: add rsp, 0x8; mov eax, 0x1; pop rbp; pop r12; ret; 
0x0000000007ff66: add rsp, 0x8; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x0000000013d95e: add rsp, 0x8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x0000000007ff88: add rsp, 0x8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000008650f: add rsp, 0x8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000005a580: add rsp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000092254: add rsp, 0x8; mov eax, r13d; pop r12; pop r13; ret; 
0x000000000f808f: add rsp, 0x8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000011d7de: add rsp, 0x8; mov eax, r8d; ret; 
0x000000000c53e2: add rsp, 0x8; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000a9df0: add rsp, 0x8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000e5be4: add rsp, 0x8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000016bd92: add rsp, 0x8; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000083e76: add rsp, 0x8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000009d596: add rsp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x00000000125ec9: add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000015f6df: add rsp, 0x8; movzx eax, al; pop rbp; pop r12; ret; 
0x0000000011ce79: add rsp, 0x8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000050d85: add rsp, 0x8; movzx eax, al; ret; 
0x0000000016d485: add rsp, 0x8; not eax; shr eax, 0x1f; ret; 
0x0000000016b345: add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000081cf9: add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000175f0f: add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x0000000015f5b6: add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x000000001323a1: add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002ac58: add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000915d1: add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002a527: add rsp, 0x8; ret; 
0x00000000177f84: add rsp, 0x8; sar eax, 0x1f; ret; 
0x0000000009cb54: add rsp, 0x8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000046520: add rsp, 0x8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000009ff0f: add rsp, 0x90; pop rbp; pop r12; pop r13; ret; 
0x000000000428cc: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000009f21c: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000016d299: add rsp, 0x90; pop rbx; ret; 
0x00000000042a43: add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000029fce: add rsp, 0x98; ret; 
0x00000000042e19: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000011961d: add rsp, 0xa0; pop rbx; ret; 
0x00000000092c7e: add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000e6ace: add rsp, 0xa8; pop rbp; pop r12; ret; 
0x000000000434a7: add rsp, 0xa8; ret; 
0x00000000035726: add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000ec93f: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000016754b: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000011455f: add rsp, 0xc8; mov eax, r12d; pop r12; pop r13; ret; 
0x00000000051897: add rsp, 0xd8; ret; 
0x000000000d9dea: add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x000000000a0ca4: add rsp, 0xe0; pop rbp; ret; 
0x000000000e6115: add rsp, 0xe0; pop rbx; ret; 
0x0000000007e99a: add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000012943b: add word ptr [rax], 0x1; ret; 
0x00000000129154: add word ptr [rdx+rax*2], 0x1; ret; 
0x000000000416db: addps xmm0, xmm0; mov [rdi], ecx; ret; 
0x0000000004174f: addps xmm0, xmm0; ret; 
0x0000000008a425: addr32 loopne 0x000000000008a421; dec dword ptr [rax-0x77]; ret; 
0x0000000017b351: addr32 loopne 0x000000000017b363; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b4a1: addr32 loopne 0x000000000017b4b3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b5f1: addr32 loopne 0x000000000017b603; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b741: addr32 loopne 0x000000000017b753; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b891: addr32 loopne 0x000000000017b8a3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b9e1: addr32 loopne 0x000000000017b9f3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bb31: addr32 loopne 0x000000000017bb43; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bc7f: addr32 loopne 0x000000000017bc91; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bdd1: addr32 loopne 0x000000000017bde3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bf21: addr32 loopne 0x000000000017bf33; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c071: addr32 loopne 0x000000000017c083; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c1c1: addr32 loopne 0x000000000017c1d3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c311: addr32 loopne 0x000000000017c323; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c461: addr32 loopne 0x000000000017c473; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c5b1: addr32 loopne 0x000000000017c5c3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017dd31: addr32 loopne 0x000000000017dd43; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017de81: addr32 loopne 0x000000000017de93; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017dfd1: addr32 loopne 0x000000000017dfe3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e121: addr32 loopne 0x000000000017e133; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e271: addr32 loopne 0x000000000017e283; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e3c1: addr32 loopne 0x000000000017e3d3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e511: addr32 loopne 0x000000000017e523; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e65f: addr32 loopne 0x000000000017e671; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e7b1: addr32 loopne 0x000000000017e7c3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e901: addr32 loopne 0x000000000017e913; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ea51: addr32 loopne 0x000000000017ea63; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017eba1: addr32 loopne 0x000000000017ebb3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ecf1: addr32 loopne 0x000000000017ed03; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ee41: addr32 loopne 0x000000000017ee53; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ef91: addr32 loopne 0x000000000017efa3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x000000000416da: addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x0000000004174e: addsd xmm0, xmm0; ret; 
0x000000000419d0: addss xmm0, xmm0; ret; 
0x0000000015d5e1: and [r11+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000d9ef5: and [r11+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000085de9: and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x00000000119534: and [r13-0x2e], r14b; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x000000000b5071: and [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x00000000112a93: and [r15], r9b; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x000000000c5121: and [r15], r9b; adc [rdi+0x30], eax; ret; 
0x00000000126dc7: and [r15], r9b; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000085e15: and [r8+0x1], r9b; ret; 
0x0000000015d744: and [r8-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000015d734: and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015d536: and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000037ef7: and [r8-0x77], r9b; std; test rax, rax; je short 0x0000000000037f03; call rax; 
0x000000000c40f6: and [r8], r14b; in eax, dx; mov [rdi+0x21], ch; ret; 
0x0000000015d4f2: and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008d816: and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000015d5ce: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d54f: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000011b956: and [rax+0x10e], bh; mov edi, [rsp+0x1c]; syscall; 
0x00000000091153: and [rax+0x16], bh; pop rbx; pop r12; pop r13; ret; 
0x000000001663f4: and [rax+0x1], bh; movups [rcx], xmm3; ret; 
0x000000001af925: and [rax+0x1], cl; clc; ret; 
0x00000000199aa5: and [rax+0x1], cl; clc; vzeroupper; ret; 
0x00000000085e16: and [rax+0x1], cl; ret; 
0x000000001a2b32: and [rax+0x1], ecx; clc; shr rax, 0x2; vzeroupper; ret; 
0x00000000199507: and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x00000000125680: and [rax+0x21], cl; enter 0x948, 0xd0; ret; 
0x0000000007d3da: and [rax+0x307729fa], al; movzx edx, dl; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000012e4eb: and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x000000001262bb: and [rax+0x448bfff6], ebp; and al, 0x8; add rsp, 0x18; ret; 
0x000000001106d5: and [rax+0x63], cl; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x0000000011c196: and [rax+0x65], bh; syscall; 
0x000000001b233e: and [rax+0x9], cl; shl bl, 0x1; bsf rax, rax; add rax, rdi; ret; 
0x000000000919f2: and [rax+0xca], bh; syscall; 
0x000000001baaa9: and [rax+rdx-0xd], dh; movups xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x0000000008a752: and [rax-0x1], bh; pop rbx; ret; 
0x0000000010609f: and [rax-0x39], cl; or [r8], al; add [rax], al; add al, ch; ret; 
0x000000000c0935: and [rax-0x73], cl; jg short 0x00000000000c095a; jne 0x00000000000c0d90; ret; 
0x000000000c20c9: and [rax-0x73], cl; jg short 0x00000000000c20ee; jne 0x00000000000c25e0; ret; 
0x0000000006ad63: and [rax-0x73], cl; or eax, 0x1661f1; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000175424: and [rax-0x73], cl; or eax, 0xfffffc14; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x000000001750b9: and [rax-0x73], cl; or eax, 0xfffffe8f; call qword ptr [rbx+0x358]; 
0x0000000002f4c3: and [rax-0x75], cl; and al, 0x30; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x0000000015d745: and [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x00000000167f50: and [rax-0x75], cl; jge short 0x0000000000167f55; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000012040e: and [rax-0x75], ecx; xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x0000000011aaf2: and [rax-0x77], cl; and al, 0x10; mov eax, 0x10; syscall; 
0x00000000128512: and [rax-0x77], cl; and al, 0x10; mov eax, 0x42; syscall; 
0x00000000126524: and [rax-0x77], cl; and al, 0x10; mov eax, 0x9d; syscall; 
0x00000000092884: and [rax-0x77], cl; ja short 0x00000000000928a1; ret; 
0x0000000015d735: and [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015d537: and [rax-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000015e299: and [rax-0x77], cl; out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000016b697: and [rax-0x77], cl; push rsp; and al, 0x8; call qword ptr [rax+0x8]; 
0x00000000075e75: and [rax-0x77], cl; ret far; 
0x0000000002af5c: and [rax-0x77], cl; ret; 
0x00000000037ef8: and [rax-0x77], cl; std; test rax, rax; je short 0x0000000000037f03; call rax; 
0x00000000107eb9: and [rax-0x7d], cl; ret; 
0x000000000df0df: and [rax-0x80], al; call qword ptr [rax]; 
0x0000000006d051: and [rax], al; add [rax-0x7d], cl; ret; 
0x000000000ecfed: and [rax], al; add [rax], al; cmove rax, rdx; ret; 
0x000000000ed0bb: and [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x0000000007ac51: and [rax], al; add [rax], al; jmp rsi; 
0x00000000094af6: and [rax], al; add [rax], al; lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x0000000015eef6: and [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000115195: and [rax], al; add [rax], al; syscall; 
0x000000000b81fe: and [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000c1dbc: and [rax], cl; add [rax], al; ret; 
0x000000000c40f7: and [rax], dh; in eax, dx; mov [rdi+0x21], ch; ret; 
0x000000001151c5: and [rax], eax; add [rax], al; syscall; 
0x00000000187e1e: and [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000974d4: and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x0000000017b2c5: and [rbp+rcx*4+0x1d], cl; cmp dword ptr [rsi+rax], 0x49; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dca5: and [rbp+rcx*4+0x1d], cl; movsxd edx, [rsi+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c2f64: and [rbp+rcx*4+0x1d], cl; push 0x49001104; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000175189: and [rbp+rcx*4+0x44], cl; and al, 0x30; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017531b: and [rbp+rcx*4+0x44], cl; and al, 0x30; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000001b4629: and [rbp-0x1c], dh; ret; 
0x0000000013cc57: and [rbp-0x1ff7b], cl; jmp qword ptr [rsi+0x3d]; 
0x000000001b1698: and [rbp-0x22], dh; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b4567: and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001a199d: and [rbp-0x27], dh; vzeroupper; ret; 
0x00000000119535: and [rbp-0x2e], dh; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x000000001b43e7: and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b1508: and [rbp-0x3a], dh; lea rax, [rdi+rax+0x20]; ret; 
0x00000000168826: and [rbp-0x7c], al; div byte ptr [rcx+rcx-0x75]; jl short 0x0000000000168853; sbb al, 0xe8; ret far; 
0x0000000007dcb2: and [rbx+0x107729f8], al; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000015d5e2: and [rbx+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000119a78: and [rbx+0x2a7409fe], al; mov eax, 0x48; syscall; 
0x0000000009113f: and [rbx+0x41], bl; pop rsp; pop r13; ret; 
0x00000000136e61: and [rbx+0x48482454], cl; mov edi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x00000000053148: and [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000003584f: and [rbx+0x5d], bl; pop r12; ret; 
0x000000000919ce: and [rbx+0xc7401fa], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000085dea: and [rbx+rcx*4+0x6d], cl; sbb [rax-0x77], cl; ret far; 
0x00000000042310: and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000fc362: and [rbx-0x7cb7fe3e], al; ret; 
0x0000000012242b: and [rbx], al; add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x000000001224a3: and [rbx], al; add [rax], al; ret; 
0x000000001a1b38: and [rbx], bh; cmp r12b, [rax]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1b36: and [rbx], bh; cmp r12b, [rax]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47f6: and [rbx], bh; cmp r12b, [rax]; jne 0x00000000001b4610; ret; 
0x000000001b47f8: and [rbx], bh; cmp r12b, [rax]; jne 0x00000000001b4610; ret; 
0x000000000ad1bf: and [rbx], edx; add al, ch; mov esp, ecx; clc; jmp qword ptr [rsi+0xf]; 
0x00000000136e5a: and [rcx+0x448b4cee], cl; and al, 0x20; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x00000000125a66: and [rcx+0x510587d0], ecx; mov edx, 0xf883000f; add [rdi+0x4], edi; ret; 
0x0000000009051f: and [rcx+0x52], al; call rax; 
0x00000000125d33: and [rcx+0x5c], al; ret; 
0x0000000013acf3: and [rcx+0xe], esi; add al, ch; test [rsi-0xb], ah; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000125611: and [rcx+0xfffe2], al; add [rip-0x1000], ah; or eax, edx; ret; 
0x0000000015503e: and [rcx+rcx*4+0x2], ah; pop rbx; ret; 
0x0000000015d4f3: and [rcx+rcx*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016314d: and [rcx+rcx*4-0x19], cl; call rcx; 
0x0000000013eecc: and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x00000000120e07: and [rcx+rcx*4-0x1a], cl; mov rdi, r15; call r14; 
0x0000000013a38e: and [rcx+rcx*4-0x1e], cl; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e96: and [rcx+rcx*4-0x1e], cl; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x000000000e76e3: and [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000007fa4b: and [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000040771: and [rcx+rcx*4-0x30], cl; ret; 
0x0000000015fd6a: and [rcx-0x39feb70a], cl; cmp rsi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x0000000015b7df: and [rcx-0x7717dbfc], cl; ret far; 
0x000000000b52ee: and [rcx-0x77], ecx; ret; 
0x000000000e5a65: and [rcx-0x7cb7bfbd], cl; ret; 
0x0000000006b8a9: and [rcx-0x7d], eax; jmp qword ptr [rsi+rsi*2]; 
0x000000001ae930: and [rcx], ah; enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000000a873c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a8750; ret; 
0x000000000a87bc: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a87d0; ret; 
0x000000000a89fc: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a8a10; ret; 
0x000000000a948c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a94a0; ret; 
0x000000000a95bc: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a95d0; ret; 
0x000000000ab01c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000ab030; ret; 
0x000000000ab0ac: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000ab0c0; ret; 
0x000000000b160c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b1620; ret; 
0x000000000c540c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000c5420; ret; 
0x000000000c548c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000c54a0; ret; 
0x000000000c56bc: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000c56d0; ret; 
0x000000000c57ec: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000c5800; ret; 
0x000000000c5a4c: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000c5a60; ret; 
0x000000000a8742: and [rcx], al; add [rax], al; je short 0x00000000000a8750; ret; 
0x000000000a87c2: and [rcx], al; add [rax], al; je short 0x00000000000a87d0; ret; 
0x000000000a8a02: and [rcx], al; add [rax], al; je short 0x00000000000a8a10; ret; 
0x000000000a9492: and [rcx], al; add [rax], al; je short 0x00000000000a94a0; ret; 
0x000000000a95c2: and [rcx], al; add [rax], al; je short 0x00000000000a95d0; ret; 
0x000000000ab022: and [rcx], al; add [rax], al; je short 0x00000000000ab030; ret; 
0x000000000ab0b2: and [rcx], al; add [rax], al; je short 0x00000000000ab0c0; ret; 
0x000000000b1612: and [rcx], al; add [rax], al; je short 0x00000000000b1620; ret; 
0x000000000c5412: and [rcx], al; add [rax], al; je short 0x00000000000c5420; ret; 
0x000000000c5492: and [rcx], al; add [rax], al; je short 0x00000000000c54a0; ret; 
0x000000000c56c2: and [rcx], al; add [rax], al; je short 0x00000000000c56d0; ret; 
0x000000000c57f2: and [rcx], al; add [rax], al; je short 0x00000000000c5800; ret; 
0x000000000c5a52: and [rcx], al; add [rax], al; je short 0x00000000000c5a60; ret; 
0x0000000009cbe8: and [rcx], al; add [rax], al; pop rbp; ret; 
0x00000000127e94: and [rcx], al; add [rax], al; syscall; 
0x000000000eabb7: and [rcx], al; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000f46d8: and [rcx], bh; push rbp; sbb [rdx+rdx*2-0x73], dh; add [rax-0x7d], ecx; ret; 
0x00000000199d0d: and [rcx], ch; enter 0xf8c5, 0x77; ret; 
0x000000000b56d8: and [rcx], cl; rol bl, 0x1; nop [rax]; xor eax, eax; ret; 
0x0000000006d795: and [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000008d817: and [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000153644: and [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x0000000015d5cf: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d550: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000c1166: and [rcx], dl; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000125e48: and [rcx], eax; add [rax], al; mov edx, 0x8; syscall; 
0x000000001a27a8: and [rcx], eax; clc; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9b8: and [rcx], eax; clc; vzeroupper; ret; 
0x0000000019db76: and [rcx], eax; enter 0xf8c5, 0x77; ret; 
0x000000000c0f2d: and [rcx], edx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c50a5: and [rdi+0x18], dh; movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x000000001111f4: and [rdi+0x19], esi; movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x000000000c4a13: and [rdi+0x7a], dh; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x00000000175e4f: and [rdi+rax*8], edx; xor eax, eax; ret; 
0x00000000175e4e: and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000000f0e0b: and [rdi-0x76befffd], edx; ret; 
0x000000001b47d3: and [rdi], ah; ret far; 
0x000000001b5b59: and [rdi], ah; ret; 
0x000000001afec9: and [rdi], bh; ret; 
0x000000001b4bb3: and [rdi], bl; ret; 
0x00000000112a94: and [rdi], cl; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x000000000c5122: and [rdi], cl; adc [rdi+0x30], eax; ret; 
0x000000000c4bf5: and [rdi], cl; adc [rdi+0x30], edi; movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000c4b82: and [rdi], cl; adc [rdx+0x10], edi; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x00000000126d3b: and [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001b1b3d: and [rdi], cl; mov dh, 0x54; cmp ah, [rax]; sub eax, edx; ret; 
0x000000000c20cd: and [rdi], cl; test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000c0939: and [rdi], cl; test [rax+0x4], edx; add [rax], al; ret; 
0x000000001a498d: and [rdi], cl; test [rax+rax+0x40a80000], edi; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000000c5005: and [rdi], cl; xchg [rbp+0xf000000], edi; adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x00000000134742: and [rdi], eax; add [rax-0x73], cl; add eax, 0x721a4; cmove rax, rdx; ret; 
0x00000000042f14: and [rdi], eax; xor eax, eax; ret; 
0x00000000126c18: and [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000042f13: and [rdi], rax; xor eax, eax; ret; 
0x000000000927b0: and [rdx+0x10], ecx; pop rbx; ret; 
0x000000000927af: and [rdx+0x10], rcx; pop rbx; ret; 
0x0000000011a23f: and [rdx+0x1], bh; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000c5f66: and [rdx+0x1], ch; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c610f: and [rdx+0x1], ch; xor r8d, r8d; push 0x0; lea r9, [rsp+0x18]; call r13; 
0x000000001a45ec: and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x000000000c536a: and [rdx], al; add [rax], al; ret; 
0x000000001687f5: and [rdx], ch; push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x000000001145fb: and [rdx], eax; add [rsi-0x70], ah; endbr64; mov eax, 0x53; syscall; 
0x00000000046ce4: and [rip+0x64d8f700], ebx; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000046d64: and [rip+0x8b6400], bl; cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x000000001aee6e: and [rip-0x2100e8ac], ah; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x00000000171c7f: and [rip-0x76b40000], al; loopne 0x0000000000171cc8; pop rsp; ret; 
0x000000001b3eb2: and [rsi+0x1b], dh; test eax, eax; je short 0x00000000001b3f20; tzcnt eax, eax; ret; 
0x0000000016744e: and [rsi+0x4], bh; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x000000000b5072: and [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000001b1b23: and [rsi], ah; ret far; 
0x000000001aeacd: and [rsi], ah; ret; 
0x000000001812c7: and [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c076b: and [rsi], eax; add [rax], al; ret; 
0x00000000181147: and [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000011d301: and [rsp+rbp*8-0x3a], dh; inc dword ptr [rax]; ret; 
0x00000000132ac1: and [rsp+rcx+0x5b], dh; ret; 
0x0000000009af7d: and ah, [rbx+rcx*4+0x4]; and eax, 0x2d0; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000bd031: and al, 0x0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000ab4b4: and al, 0x0; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000ab50a: and al, 0x0; add [rax], al; add [rcx+0x5c], al; ret; 
0x00000000083c16: and al, 0x0; add [rax], al; call qword ptr [rax+0x68]; 
0x00000000083d4b: and al, 0x0; add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000008608f: and al, 0x0; add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x000000000dcdb5: and al, 0x0; add [rax], al; syscall; 
0x0000000003c1d5: and al, 0x0; add [rax], eax; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x000000000ecf42: and al, 0x0; add [rbp+0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000b7e05: and al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000011bf4e: and al, 0x0; mov rax, r12; pop r12; ret; 
0x0000000012e0bc: and al, 0x10; add [rax], al; add [rax-0x77], cl; ret; 
0x000000001691dc: and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000011eee3: and al, 0x10; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000298ae: and al, 0x10; add [rdx+rbx+0x48], dh; mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000a04fd: and al, 0x10; add rsp, 0x28; ret; 
0x000000001653f0: and al, 0x10; call qword ptr [rax+0x10]; 
0x0000000016be9f: and al, 0x10; call qword ptr [rax]; 
0x000000000e9a9a: and al, 0x10; call qword ptr [rsp+0x50]; 
0x00000000138e1c: and al, 0x10; call qword ptr [rsp+0x60]; 
0x000000000d3a4b: and al, 0x10; call r13; 
0x00000000033978: and al, 0x10; call rax; 
0x000000000410ca: and al, 0x10; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000001750b3: and al, 0x10; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x000000000b154a: and al, 0x10; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b147b: and al, 0x10; mov [rax], rdx; ret; 
0x0000000016be45: and al, 0x10; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000011aaf5: and al, 0x10; mov eax, 0x10; syscall; 
0x000000000ea496: and al, 0x10; mov eax, 0x3d; syscall; 
0x00000000128515: and al, 0x10; mov eax, 0x42; syscall; 
0x0000000012835e: and al, 0x10; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x0000000011540c: and al, 0x10; mov eax, 0x4f; syscall; 
0x00000000126527: and al, 0x10; mov eax, 0x9d; syscall; 
0x000000000a041e: and al, 0x10; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000ea550: and al, 0x10; mov eax, 0xf7; syscall; 
0x000000001148e6: and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000013a39a: and al, 0x10; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001193bd: and al, 0x10; mov edi, [rsp+0x8]; syscall; 
0x00000000128041: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fd1: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x00000000167aa8: and al, 0x10; mov edi, eax; call rbp; 
0x00000000174ec3: and al, 0x10; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000011ab8d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x0000000011ac2d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a5f: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x00000000127b3d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001149bf: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x000000001275ff: and al, 0x10; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000046cae: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecbe: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d6e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x00000000091188: and al, 0x10; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000016be49: and al, 0x10; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016b68d: and al, 0x10; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016b77d: and al, 0x10; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x00000000164d6d: and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000129d5f: and al, 0x10; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc0: and al, 0x10; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000015d520: and al, 0x10; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x00000000163031: and al, 0x10; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000115407: and al, 0x10; mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x00000000174c7b: and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x00000000174c1e: and al, 0x10; mov rdi, [rsp+0x18]; call rcx; 
0x0000000008e0b0: and al, 0x10; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000139ea2: and al, 0x10; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000016b6af: and al, 0x10; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008aa14: and al, 0x10; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000016b656: and al, 0x10; mov rdi, rbp; call qword ptr [rax]; 
0x00000000120035: and al, 0x10; mov rdi, rbp; call rax; 
0x000000000c66ac: and al, 0x10; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000007b5ae: and al, 0x10; mov rdx, r8; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000012e767: and al, 0x10; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000004381a: and al, 0x10; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000168337: and al, 0x10; mov rdx, rbx; mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000125d06: and al, 0x10; mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x00000000127f86: and al, 0x10; mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x0000000012792b: and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x00000000127a9d: and al, 0x10; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000012785d: and al, 0x10; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000162f0f: and al, 0x10; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000d9048: and al, 0x10; movd xmm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x000000000d9049: and al, 0x10; movd xmm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x00000000041095: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x000000000a04e4: and al, 0x10; syscall; 
0x0000000011fe3e: and al, 0x10; test r13, r13; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe6e: and al, 0x10; test r13, r13; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c9a: and al, 0x10; test r13, r13; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x00000000120c6e: and al, 0x10; test rdi, rdi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x0000000008597d: and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000012e5f4: and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax; 
0x00000000119f91: and al, 0x11; syscall; 
0x00000000119f90: and al, 0x11; syscall; 
0x0000000009036c: and al, 0x14; add [rax+0x63], cl; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x00000000167643: and al, 0x14; call qword ptr [rax]; 
0x000000000432fe: and al, 0x14; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009bdc1: and al, 0x14; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000009f1f5: and al, 0x14; mov rdx, r12; mov eax, 0x81; syscall; 
0x00000000029d7f: and al, 0x14; mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000011acea: and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011adaa: and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000b1432: and al, 0x16; mov [rax+0x6], dl; add rax, rcx; ret; 
0x00000000175462: and al, 0x17; add [rdx+rbx*8-0x77], dh; and al, 0xc; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x0000000017541e: and al, 0x17; lea rsi, [rsp+0x20]; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x0000000009019a: and al, 0x17; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x000000000c1ad8: and al, 0x18; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001691e4: and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x00000000169240: and al, 0x18; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000119925: and al, 0x18; add rsp, 0x28; ret; 
0x000000000901a4: and al, 0x18; call qword ptr [r12+0x358]; 
0x00000000169031: and al, 0x18; call qword ptr [rax+0x18]; 
0x0000000015d967: and al, 0x18; call qword ptr [rax]; 
0x000000001750fa: and al, 0x18; call qword ptr [rbx+0x360]; 
0x00000000136e69: and al, 0x18; call qword ptr [rsp+0x70]; 
0x000000000c6119: and al, 0x18; call r13; 
0x0000000016d269: and al, 0x18; call r8; 
0x0000000002d843: and al, 0x18; call rax; 
0x000000000c5f71: and al, 0x18; call rbx; 
0x00000000174c24: and al, 0x18; call rcx; 
0x000000001750ae: and al, 0x18; lea rdi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x000000000b13b3: and al, 0x18; mov [rax], rdx; add rax, rcx; ret; 
0x000000001148ea: and al, 0x18; mov eax, 0x101; syscall; 
0x00000000119907: and al, 0x18; mov eax, 0x115; syscall; 
0x00000000127ed7: and al, 0x18; mov eax, 0x120; syscall; 
0x00000000127c04: and al, 0x18; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001282a7: and al, 0x18; mov eax, 0x45; syscall; 
0x000000000e9e05: and al, 0x18; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000126081: and al, 0x18; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000001674a3: and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000016746a: and al, 0x18; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000001385c0: and al, 0x18; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x000000000e7357: and al, 0x18; mov rax, [rsp+0x10]; call rax; 
0x00000000174ebf: and al, 0x18; mov rax, [rsp+0x10]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000009d395: and al, 0x18; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009d396: and al, 0x18; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000e9a95: and al, 0x18; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000162efd: and al, 0x18; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000086d09: and al, 0x18; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x000000001666f8: and al, 0x18; mov rdi, r15; call rcx; 
0x00000000029d84: and al, 0x18; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x00000000128359: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x000000000a0419: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x0000000013a394: and al, 0x18; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e9c: and al, 0x18; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000003518d: and al, 0x18; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x0000000002e03e: and al, 0x18; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x00000000138e12: and al, 0x18; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000169335: and al, 0x18; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x0000000015e402: and al, 0x18; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000011e64c: and al, 0x18; sub rax, fs:[0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e725: and al, 0x18; sub rax, fs:[0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210b1: and al, 0x18; sub rax, fs:[0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121171: and al, 0x18; sub rax, fs:[0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121578: and al, 0x18; sub rax, fs:[0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x00000000121795: and al, 0x18; sub rax, fs:[0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa3: and al, 0x18; sub rax, fs:[0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x0000000013258c: and al, 0x18; sub rax, fs:[0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x000000001698a0: and al, 0x18; sub rax, fs:[0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698e5: and al, 0x18; sub rax, fs:[0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x00000000045f18: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x00000000046008: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x0000000005188a: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd4: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000006074d: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060822: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608d9: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609ab: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a6d: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b2d: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c1b: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf2: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x000000000621c5: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a0: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082bfd: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cb9: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db2: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e82: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f3b: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x0000000009047a: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x000000000a02d8: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d3645: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3720: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8eb8: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d9c53: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x00000000113a90: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000119bd7: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c75: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011b3e3: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c0e2: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000012653c: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b2a: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x000000001284e0: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000134be4: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134ce8: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134dfe: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ec6: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c58: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d6e: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e36: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x0000000013623d: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x0000000013629d: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136366: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136446: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136526: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d22e: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000148026: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x00000000176123: and al, 0x18; sub rdx, fs:[0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x0000000002aa98: and al, 0x18; xor r8d, r8d; call rbx; 
0x000000000d3313: and al, 0x18; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000d34a2: and al, 0x18; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000009446f: and al, 0x18; xor sil, 0x81; syscall; 
0x000000000c71c6: and al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000001151f5: and al, 0x1; add [rax], al; syscall; 
0x00000000043805: and al, 0x1; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000167e97: and al, 0x1c; call qword ptr [rax]; 
0x000000000ea54b: and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000a05fd: and al, 0x1c; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x0000000011b95e: and al, 0x1c; syscall; 
0x00000000038824: and al, 0x1e; add [rax-0x73], cl; add eax, 0x1e2412; ret; 
0x000000001751ea: and al, 0x1f; add [rbx+rcx+0x48], dh; mov edi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x0000000012e4ed: and al, 0x1f; call qword ptr [r12+0x28]; 
0x0000000016745e: and al, 0x20; call qword ptr [rax+0x28]; 
0x0000000017560e: and al, 0x20; call qword ptr [rax+0x340]; 
0x0000000015dee0: and al, 0x20; call qword ptr [rax]; 
0x0000000017546e: and al, 0x20; call qword ptr [rbx+0x360]; 
0x000000000c632f: and al, 0x20; call rbx; 
0x00000000119a76: and al, 0x20; cmp esi, 0x9; je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x00000000175188: and al, 0x20; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017531a: and al, 0x20; lea r8, [rsp+0x30]; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000001750b7: and al, 0x20; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x00000000175423: and al, 0x20; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x0000000009019f: and al, 0x20; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x0000000011aaf0: and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x00000000128510: and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x00000000126522: and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x0000000012e4ea: and al, 0x20; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x0000000011b955: and al, 0x20; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x0000000011c194: and al, 0x20; mov eax, 0x65; syscall; 
0x00000000136e5f: and al, 0x20; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x0000000016744d: and al, 0x20; mov esi, 0x4; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x0000000002f4c1: and al, 0x20; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x0000000016314b: and al, 0x20; mov rdi, r12; call rcx; 
0x0000000015d962: and al, 0x20; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013eecb: and al, 0x20; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000001106d4: and al, 0x20; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001687f4: and al, 0x20; push 0x0; push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x0000000014c099: and al, 0x23; add cl, ch; push rbx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000119f89: and al, 0x23; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x00000000167d94: and al, 0x24; call qword ptr [rax]; 
0x000000001385c8: and al, 0x24; call qword ptr [rsp+0x70]; 
0x00000000175323: and al, 0x28; add [rax], al; add [rax], al; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000075e7a: and al, 0x28; add [rax], eax; add [rax], al; jmp rsi; 
0x0000000007c6d1: and al, 0x28; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x000000001751f2: and al, 0x28; call qword ptr [rbx+0x360]; 
0x0000000002d283: and al, 0x28; call rax; 
0x00000000086d10: and al, 0x28; call rbp; 
0x000000000c686a: and al, 0x28; call rbx; 
0x000000001168a7: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116bff: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b97: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000011705d: and al, 0x28; lea rcx, [rsp+0x38]; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000175183: and al, 0x28; lea rdi, [rsp+0x20]; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x000000001261f3: and al, 0x28; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001193b3: and al, 0x28; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001692a6: and al, 0x28; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169096: and al, 0x28; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169106: and al, 0x28; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169176: and al, 0x28; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000162f30: and al, 0x28; mov rdi, r12; call rcx; 
0x000000001385ba: and al, 0x28; mov rdx, [rsp+0x18]; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000015d95c: and al, 0x28; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x0000000011b950: and al, 0x28; mov rsi, [rsp+0x20]; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x0000000002ee50: and al, 0x28; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x00000000033969: and al, 0x28; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c0: and al, 0x28; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x00000000090642: and al, 0x28; sub r8, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090781: and al, 0x28; sub rcx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000114eeb: and al, 0x28; sub rdx, fs:[0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x0000000005a491: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x0000000009061d: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x00000000090758: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x000000000e7744: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec174: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec204: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c4: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec564: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef1: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113e0a: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000119a90: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x0000000011b104: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b194: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b23b: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2fb: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011c1b4: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf7c: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d00f: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d093: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d10e: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000013d124: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c1: and al, 0x28; sub rdx, fs:[0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000011a0eb: and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000001687fc: and al, 0x2a; call qword ptr [rax]; 
0x0000000015dcea: and al, 0x2c; call qword ptr [rax]; 
0x000000000c03f8: and al, 0x2d; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000169028: and al, 0x30; add [rax], al; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001692ae: and al, 0x30; add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016910e: and al, 0x30; add al, 0x0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016917e: and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000016909e: and al, 0x30; add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000e9e09: and al, 0x30; call qword ptr [rsp+0x50]; 
0x000000000c6569: and al, 0x30; call rbx; 
0x0000000017518c: and al, 0x30; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x00000000119f08: and al, 0x30; mov eax, 0x10; syscall; 
0x000000000a073e: and al, 0x30; mov eax, 0xde; syscall; 
0x000000000a01d1: and al, 0x30; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000017531e: and al, 0x30; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000162f2c: and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x0000000008589a: and al, 0x30; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000002f4c6: and al, 0x30; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x000000000e813e: and al, 0x30; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000001685ac: and al, 0x30; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x0000000015e9d5: and al, 0x31; ror byte ptr [rax-0x77], 0xdf; call rcx; 
0x0000000016b29b: and al, 0x31; sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, r12; call r13; 
0x000000000f583a: and al, 0x31; shl byte ptr [rsi+0xf], 0x6f; shl dword ptr [rsi+0xf], 0xd4; ret far; 
0x00000000075e72: and al, 0x38; and [rax-0x77], cl; ret far; 
0x0000000007ac4e: and al, 0x38; and [rax], al; add [rax], al; jmp rsi; 
0x0000000016933a: and al, 0x38; call qword ptr [rax+0x18]; 
0x00000000153a35: and al, 0x38; call qword ptr [rsp+0x68]; 
0x000000000d9809: and al, 0x38; call r12; 
0x00000000035198: and al, 0x38; call r15; 
0x000000000c5e0b: and al, 0x38; call rbx; 
0x000000000352f4: and al, 0x38; lea r8, [rsp+0xa0]; call r15; 
0x0000000015e6f6: and al, 0x38; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000000301bf: and al, 0x38; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x000000000311ae: and al, 0x38; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x00000000117061: and al, 0x38; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000137c9f: and al, 0x38; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000116e50: and al, 0x38; movzx eax, al; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x00000000089fda: and al, 0x38; sub rax, fs:[0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x0000000016b3ba: and al, 0x38; sub rax, fs:[0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x00000000114875: and al, 0x38; sub rdx, fs:[0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x000000000a01db: and al, 0x38; syscall; 
0x000000000a01dc: and al, 0x38; syscall; 
0x0000000016b3a6: and al, 0x38; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 0x2; call r8; 
0x000000000fcdee: and al, 0x39; ret; 
0x0000000015ef87: and al, 0x3; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000001685b4: and al, 0x3a; call qword ptr [rax]; 
0x0000000007ac46: and al, 0x3c; add [rax], al; add [rax], al; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c649: and al, 0x3c; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x00000000076c39: and al, 0x40; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000013d491: and al, 0x40; add byte ptr [rax], 0x0; add al, ch; ret; 
0x000000000d9a90: and al, 0x40; call qword ptr [rax+0x340]; 
0x0000000015e3fc: and al, 0x40; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x00000000163147: and al, 0x40; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000153a30: and al, 0x40; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000035193: and al, 0x40; mov rdi, [rsp+0x38]; call r15; 
0x000000000352ef: and al, 0x40; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x00000000174ea2: and al, 0x40; test rax, rax; je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000001152c8: and al, 0x41; mov eax, eax; mov eax, 0x55; syscall; 
0x0000000012629c: and al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000001276cc: and al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x000000001279e0: and al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000ab3b4: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000083b9c: and al, 0x44; mov esi, esp; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000015d5bb: and al, 0x45; test edi, edi; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001131a2: and al, 0x48; add [rax], eax; add [rax+0xe], bh; syscall; 
0x0000000007c701: and al, 0x48; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x00000000172541: and al, 0x48; add esp, 0x10; pop rbp; ret; 
0x0000000008d8e8: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x00000000041f54: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000046289: and al, 0x48; add esp, 0x18; ret; 
0x00000000127885: and al, 0x48; add esp, 0x20; pop r12; ret; 
0x00000000112956: and al, 0x48; add esp, 0x28; ret; 
0x0000000012794b: and al, 0x48; add esp, 0x30; pop r12; ret; 
0x00000000129d69: and al, 0x48; add esp, 0x38; ret; 
0x00000000129dca: and al, 0x48; add esp, 0x40; ret; 
0x00000000164d72: and al, 0x48; call qword ptr [rax+0x28]; 
0x000000000301ca: and al, 0x48; call r14; 
0x00000000029ef3: and al, 0x48; lea edi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed4: and al, 0x48; lea edi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000090302: and al, 0x48; mov [rsp+0x8], esi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x000000001754c1: and al, 0x48; mov eax, [rax+0x338]; jmp rax; 
0x0000000016c333: and al, 0x48; mov eax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015fc09: and al, 0x48; mov eax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000120c3b: and al, 0x48; mov edi, [rbp]; call rbx; 
0x000000001385c4: and al, 0x48; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000013e5ea: and al, 0x48; mov edi, ebx; call rax; 
0x0000000015d508: and al, 0x48; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000033974: and al, 0x48; mov rax, [rsp+0x10]; call rax; 
0x000000000321cb: and al, 0x48; mov rax, [rsp+0x18]; call rax; 
0x000000000311b9: and al, 0x48; mov rax, [rsp+0x28]; call rax; 
0x00000000035188: and al, 0x48; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x00000000166b4c: and al, 0x48; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000136e64: and al, 0x48; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x0000000002ee56: and al, 0x48; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002d27a: and al, 0x48; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x00000000164eb1: and al, 0x48; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000011c069: and al, 0x48; sub rdx, fs:[0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x000000000977a9: and al, 0x4; add [rax], al; add [rax], al; mov eax, 0xca; syscall; 
0x000000000dc134: and al, 0x4; add [rax], al; add cl, ch; ret far; 
0x000000000ff4c0: and al, 0x4; add al, [rax]; add [rcx], bh; ret; 
0x00000000125d2d: and al, 0x4; add rsp, 0x20; pop r12; ret; 
0x00000000127fad: and al, 0x4; add rsp, 0x28; ret; 
0x0000000016ca37: and al, 0x4; call qword ptr [rax+0x40]; 
0x0000000016ca56: and al, 0x4; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016ca59: and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016c622: and al, 0x4; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016c802: and al, 0x4; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016c5ed: and al, 0x4; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c63e: and al, 0x4; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000125d14: and al, 0x4; syscall; 
0x00000000075337: and al, 0x4c; add [rax], al; add [rax], al; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000076c19: and al, 0x4c; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x00000000145402: and al, 0x4c; mov edi, edi; call rax; 
0x0000000008df16: and al, 0x4c; mov edi, edi; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x00000000145a28: and al, 0x4c; mov edi, esi; call rcx; 
0x0000000013f21f: and al, 0x4c; mov edi, esp; call rax; 
0x0000000008b843: and al, 0x4c; mov edx, eax; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x00000000044487: and al, 0x4c; mov edx, esi; mov rax, [rsp]; call rax; 
0x00000000044403: and al, 0x4c; mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000015d656: and al, 0x4c; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000445af: and al, 0x4c; mov esi, ebp; mov rdi, r12; call rax; 
0x000000000436d2: and al, 0x4c; mov esi, edi; call r14; 
0x0000000004392f: and al, 0x4c; mov esi, edi; mov rdi, r12; mov rdx, r14; call rbp; 
0x0000000015eac0: and al, 0x4c; mov esi, edi; mov rdi, rbx; xor eax, eax; call rcx; 
0x00000000029eb3: and al, 0x4c; mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x00000000044613: and al, 0x4d; mov ebp, edi; add r15, r14; call rax; 
0x00000000076c09: and al, 0x50; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000015d53e: and al, 0x50; call qword ptr [rax+0x20]; 
0x0000000002f4d1: and al, 0x50; call r13; 
0x000000000a073a: and al, 0x50; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x0000000002ee5b: and al, 0x50; mov rax, [rsp+0x18]; call rax; 
0x0000000002d27f: and al, 0x50; mov rax, [rsp+0x28]; call rax; 
0x000000001666f4: and al, 0x50; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000301c5: and al, 0x50; mov rdi, [rsp+0x48]; call r14; 
0x0000000003396f: and al, 0x50; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c6: and al, 0x50; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b4: and al, 0x50; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d83a: and al, 0x50; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x00000000153a22: and al, 0x50; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000000d911b: and al, 0x50; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000a9718: and al, 0x58; adc [rax], al; cmove rax, rdx; ret; 
0x000000000761cb: and al, 0x58; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x000000000ffd7f: and al, 0x58; add al, [rax]; add al, ch; out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x0000000007b9ca: and al, 0x58; jmp rsi; 
0x0000000015e3f8: and al, 0x58; lea r9, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000002d83f: and al, 0x58; mov rax, [rsp+0x18]; call rax; 
0x0000000002f4cc: and al, 0x58; mov rdi, [rsp+0x50]; call r13; 
0x000000001377ac: and al, 0x58; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x00000000119f00: and al, 0x58; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x0000000012c44c: and al, 0x5b; pop rbp; pop r12; ret; 
0x00000000076b19: and al, 0x5c; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x000000000ac03b: and al, 0x5d; pop r12; pop r13; pop r14; ret; 
0x0000000007bc49: and al, 0x60; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x0000000015eab3: and al, 0x60; add [rax], eax; add al, ch; ret; 
0x000000000ff9aa: and al, 0x60; add al, [rax]; add [rcx], al; ret; 
0x000000000e7098: and al, 0x60; call r12; 
0x0000000002d835: and al, 0x60; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000016d264: and al, 0x60; movups [rsp+0x18], xmm0; call r8; 
0x000000001666d8: and al, 0x68; mov rdi, [rax]; mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000e7090: and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000043f17: and al, 0x68; mov rsi, [rsp+0x8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000015d647: and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000001630ef: and al, 0x68; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000001690af: and al, 0x68; sub rax, fs:[0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x0000000016911f: and al, 0x68; sub rax, fs:[0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x0000000016918f: and al, 0x68; sub rax, fs:[0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f0: and al, 0x68; sub rax, fs:[0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169254: and al, 0x68; sub rax, fs:[0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692bf: and al, 0x68; sub rax, fs:[0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169342: and al, 0x68; sub rax, fs:[0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x0000000016903a: and al, 0x68; sub rdx, fs:[0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x00000000180e47: and al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000164470: and al, 0x70; call qword ptr [rax+0x30]; 
0x00000000076330: and al, 0x70; jmp rsi; 
0x0000000016d25b: and al, 0x70; pxor xmm0, xmm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000017191b: and al, 0x72; mov [0xffff4fe924048b49], al; jmp qword ptr [rsi+0xf]; 
0x0000000014c004: and al, 0x74; add eax, 0xedc364e8; jmp qword ptr [rsi+0xf]; 
0x0000000010104b: and al, 0x74; add eax, 0xf2731de8; jmp qword ptr [rsi+0xf]; 
0x00000000100f93: and al, 0x74; add eax, 0xf273d5e8; jmp qword ptr [rsi+0xf]; 
0x000000000ff9bf: and al, 0x78; add al, [rax]; add [rcx], bh; ret; 
0x000000000425dc: and al, 0x78; movups [rsp+0x88], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000000c0668: and al, 0x7; add [rax], al; ret; 
0x0000000002f454: and al, 0x80; add [rax], al; add [rax+0x39], cl; ret; 
0x00000000049cf9: and al, 0x80; add [rax], al; add [rbp+0x1], al; dec dword ptr [rax-0x7d]; ret; 
0x0000000002f817: and al, 0x88; add [rax], al; add [rcx-0x77], al; ret; 
0x00000000119f87: and al, 0x88; and al, 0x23; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x000000000c76e4: and al, 0x89; ret; 
0x0000000007511f: and al, 0x8; add [rdi], cl; test [rax-0x9ffffdd], bl; ret; 
0x00000000172241: and al, 0x8; add rsp, 0x10; pop rbp; ret; 
0x00000000046223: and al, 0x8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003a89e: and al, 0x8; add rsp, 0x18; ret; 
0x00000000125dfc: and al, 0x8; add rsp, 0x20; pop r12; ret; 
0x0000000008e0b5: and al, 0x8; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000013ed89: and al, 0x8; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000046cd6: and al, 0x8; add rsp, 0x28; ret; 
0x000000001193dc: and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x000000000a0442: and al, 0x8; add rsp, 0x38; ret; 
0x0000000009098b: and al, 0x8; add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x0000000016b69b: and al, 0x8; call qword ptr [rax+0x8]; 
0x0000000015fc8a: and al, 0x8; call qword ptr [rax]; 
0x00000000139ea7: and al, 0x8; call qword ptr [rsp+0x50]; 
0x000000000298b6: and al, 0x8; call qword ptr [rsp]; 
0x00000000029d8b: and al, 0x8; call rax; 
0x0000000015364f: and al, 0x8; call rbp; 
0x000000000412f2: and al, 0x8; fadd st, st(0); ret; 
0x0000000004124e: and al, 0x8; fscale; fstp st(1), st; ret; 
0x000000000411be: and al, 0x8; fsubrp; ret; 
0x0000000011aaeb: and al, 0x8; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x0000000012850b: and al, 0x8; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x0000000012651d: and al, 0x8; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x000000000d955f: and al, 0x8; lea rdi, [rsp+0xd0]; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x00000000126085: and al, 0x8; mov eax, 0x114; syscall; 
0x00000000125d0b: and al, 0x8; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x000000001199b6: and al, 0x8; mov eax, 0x11d; syscall; 
0x0000000011acef: and al, 0x8; mov eax, 0x127; syscall; 
0x0000000011adaf: and al, 0x8; mov eax, 0x128; syscall; 
0x00000000127f8b: and al, 0x8; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000001262a2: and al, 0x8; mov eax, 0x130; syscall; 
0x0000000011ab94: and al, 0x8; mov eax, 0x13; syscall; 
0x00000000046cb6: and al, 0x8; mov eax, 0x13e; syscall; 
0x0000000011ac34: and al, 0x8; mov eax, 0x14; syscall; 
0x00000000114a66: and al, 0x8; mov eax, 0x1; syscall; 
0x0000000011ecc6: and al, 0x8; mov eax, 0x1a; syscall; 
0x000000001276d2: and al, 0x8; mov eax, 0x2a; syscall; 
0x00000000127b44: and al, 0x8; mov eax, 0x2e; syscall; 
0x000000001279e6: and al, 0x8; mov eax, 0x2f; syscall; 
0x00000000125b9d: and al, 0x8; mov eax, 0x38; syscall; 
0x00000000114f5e: and al, 0x8; mov eax, 0x48; syscall; 
0x00000000118d76: and al, 0x8; mov eax, 0x7; syscall; 
0x000000000ea492: and al, 0x8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x00000000119903: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ed3: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x000000001282a3: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000126132: and al, 0x8; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x00000000112933: and al, 0x8; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129e3: and al, 0x8; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x00000000119aab: and al, 0x8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000094921: and al, 0x8; mov esi, 0x18; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x000000000427f9: and al, 0x8; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000008563e: and al, 0x8; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000015f2ba: and al, 0x8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000015e40f: and al, 0x8; mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000129d63: and al, 0x8; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc4: and al, 0x8; mov rax, [rsp]; add rsp, 0x40; ret; 
0x000000001453fc: and al, 0x8; mov rax, [rsp]; mov rdi, r15; call rax; 
0x000000000445aa: and al, 0x8; mov rax, [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000015e9d0: and al, 0x8; mov rcx, [rsp]; xor eax, eax; mov rdi, rbx; call rcx; 
0x00000000094b33: and al, 0x8; mov rdi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x00000000090306: and al, 0x8; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000138e17: and al, 0x8; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x000000000859d8: and al, 0x8; mov rdi, r15; call rax; 
0x0000000015d2db: and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015fcde: and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008abd1: and al, 0x8; mov rdi, rbp; call rax; 
0x0000000015d524: and al, 0x8; mov rdi, rbp; call rcx; 
0x000000000e708a: and al, 0x8; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000160a7a: and al, 0x8; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000118e72: and al, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000043f1d: and al, 0x8; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000007aafd: and al, 0x8; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x000000000751c0: and al, 0x8; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000a04d7: and al, 0x8; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000008b4ed: and al, 0x8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000e853f: and al, 0x8; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000011b7de: and al, 0x8; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000410cf: and al, 0x8; ret; 
0x00000000144860: and al, 0x8; sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x000000000420e9: and al, 0x8; sub rax, fs:[0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x00000000046801: and al, 0x8; sub rax, fs:[0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x0000000004684e: and al, 0x8; sub rax, fs:[0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x0000000004627d: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x000000000468a1: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468ee: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046941: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x0000000004698e: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000061e8c: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000e2ea1: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5591: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x00000000119b1f: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x0000000011a1e2: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011f97e: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000127e63: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000147fd3: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x000000001488d5: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a5a4: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x00000000172137: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x000000001739bb: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a23: and al, 0x8; sub rdx, fs:[0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000000a0427: and al, 0x8; syscall; 
0x00000000050c6f: and al, 0x8; xor eax, eax; mov eax, 0x3e; syscall; 
0x000000001149c6: and al, 0x8; xor eax, eax; syscall; 
0x00000000127aa2: and al, 0x8; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127862: and al, 0x8; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000094040: and al, 0x8; xor sil, 0x81; syscall; 
0x00000000149ca8: and al, 0x8b; adc [r13+0x5b0875c0], r8b; pop rbp; pop r12; ret; 
0x000000000951cb: and al, 0x8f; add [rax], al; add [rax], al; syscall; 
0x00000000093295: and al, 0x90; xor eax, eax; ret; 
0x0000000015ea82: and al, 0x92; add [rax], eax; add [rax-0x75], cl; and al, 0x28; call rax; 
0x000000000e7e58: and al, 0x95; cli; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000103320: and al, 0x98; add [rax], al; add [rax-0x77], cl; ret far; 
0x00000000030823: and al, 0x98; add [rax], al; add al, ch; ret; 
0x00000000113f34: and al, 0x98; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi; 
0x00000000103c6d: and al, 0xa0; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000007c2cf: and al, 0xa0; add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x000000000f2d11: and al, 0xa0; add [rax], al; add [rcx-0x77], cl; ret; 
0x00000000112937: and al, 0xb8; adc [rax], eax; add [rax], al; syscall; 
0x000000001129e7: and al, 0xb8; adc al, [rax]; add [rax], al; syscall; 
0x00000000127922: and al, 0xb8; sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000008b806: and al, 0xba; add [rax], eax; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x000000000fb8d7: and al, 0xc0; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000164b86: and al, 0xc8; add [rax], eax; add bl, ch; mov eax, 0xfd1b8ee8; jmp qword ptr [rsi+0x66]; 
0x00000000095e51: and al, 0xc; add rsp, 0x10; pop rbp; ret; 
0x0000000013e919: and al, 0xc; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000009b7d6: and al, 0xc; add rsp, 0x18; ret; 
0x000000000ea56e: and al, 0xc; add rsp, 0x28; ret; 
0x000000000b1411: and al, 0xc; mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000000b14e9: and al, 0xc; mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x00000000128045: and al, 0xc; mov eax, 0x133; syscall; 
0x00000000127606: and al, 0xc; mov eax, 0x2b; syscall; 
0x00000000125fd5: and al, 0xc; mov eax, 0xe8; syscall; 
0x000000001199b2: and al, 0xc; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x00000000167527: and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000011512f: and al, 0xc; mov r8d, eax; mov eax, 0x3; syscall; 
0x0000000011ba4f: and al, 0xc; mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000011bb0f: and al, 0xc; mov r8d, eax; mov eax, 0x4b; syscall; 
0x00000000114f57: and al, 0xc; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000091183: and al, 0xc; mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000175468: and al, 0xc; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x0000000008d8e3: and al, 0xc; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001152c3: and al, 0xc; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000001644f8: and al, 0xc; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000125dd6: and al, 0xc; mov rsi, [rsp]; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x000000000d9565: and al, 0xd0; add [rax], al; add [rcx+rcx*4-0x12], cl; mov [rsp+0xd0], rax; call r12; 
0x0000000009532f: and al, 0xd8; add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x00000000041185: and al, 0xe8; add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000150189: and al, 0xe8; add [rax], al; add [rcx-0x7d], al; iretd; jmp qword ptr [rcx+rcx*4+0x10]; 
0x00000000036a8b: and al, 0xe8; add rax, 0xffffffff89480000; ret; 
0x000000000a7f9e: and al, 0xe8; fadd st, qword ptr [rbx]; clc; jmp qword ptr [rsi+0xf]; 
0x0000000005389d: and al, 0xe8; fisttp qword ptr [rdx-0x3], st; jmp qword ptr [rsi+0xf]; 
0x00000000041204: and al, 0xe8; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000010142b: and al, 0xe8; jmp qword ptr [rdi+rdi*8-0x1]; 
0x000000000b14d2: and al, 0xe8; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x0000000013313b: and al, 0xe8; mov [rbp-0x80], edx; mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x000000000412b6: and al, 0xe8; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000566e8: and al, 0xe8; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001365f6: and al, 0xe8; mov eax, 0x83; syscall; 
0x00000000169910: and al, 0xe8; mov edx, 0xebfff80d; ret far; 
0x0000000012614c: and al, 0xe8; mov gs, [rcx-0x74b7000a]; add al, 0x24; add rsp, 0x28; ret; 
0x000000001536e3: and al, 0xe8; out 0x1d, eax; add al, [rax]; xor edi, edi; call qword ptr [rsp+0x20]; 
0x0000000015bac2: and al, 0xe8; pop rax; ret far; 
0x000000000a7f4f: and al, 0xe8; pop rbx; add al, 0xf8; jmp qword ptr [rsi+0xf]; 
0x0000000003f19f: and al, 0xe8; ret far; 
0x00000000041141: and al, 0xe8; ret; 
0x000000000532f4: and al, 0xe8; xchg [rax-0x3], dl; jmp qword ptr [rsi+0xf]; 
0x000000000cea58: and al, 0xe8; xchg edx, eax; ret; 
0x0000000008b977: and al, 0xe9; ret; 
0x0000000005fe09: and al, 0xe9; sar ebp, 0xff; call qword ptr [rax+0x55b60f41]; 
0x000000000b15e1: and al, 0xe; mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14f2: and al, 0xe; mov [rax+0x6], dl; ret; 
0x0000000012c3a4: and al, 0xeb; ret far; 
0x000000000b15c0: and al, 0xec; mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14d9: and al, 0xec; mov [rax+0x4], dx; ret; 
0x0000000007560b: and al, 0xf0; add [rax], al; add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000041b85: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000411ff: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000412ba: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000004113a: and al, 0xf0; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000d8f64: and al, 0xf0; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000b14ba: and al, 0xf0; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x00000000041180: and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000059bfc: and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000d8f6a: and al, 0xf0; movsd xmm0, [rsp-0x10]; ret; 
0x000000000d8f6f: and al, 0xf0; ret; 
0x000000000b15a8: and al, 0xf4; mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13f9: and al, 0xf4; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14c1: and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000776db: and al, 0xf8; add [rax], al; add al, ch; ret far; 
0x000000000b149b: and al, 0xf8; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x00000000096569: and al, 0xf8; ret; 
0x00000000041409: and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000096557: and al, 0xf8; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x000000000ab0e2: and al, 0xf; add [rax-0x73], cl; add eax, 0xf3d4; cmove rax, rdx; ret; 
0x000000001750f2: and al, 0xf; add [rbx+rcx+0x48], dh; mov edi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x0000000010086a: and al, 0xf; test [rip-0x17fffffa], bh; cli; jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x00000000087164: and al, 0xfa; jmp qword ptr [rsi+0xf]; 
0x000000000b157a: and al, 0xfa; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13db: and al, 0xfa; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a3: and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000000ffb62: and al, 0xfc; add [rax], eax; add [rcx], bh; ret; 
0x00000000041249: and al, 0xfc; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x00000000041800: and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000f40f5: and al, [rax-0x80]; call far fword ptr [rbx+0x74]; 
0x0000000004209d: and al, [rax]; add [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000041384: and al, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x00000000155020: and al, [rax]; add [rax], al; mov fs:[rdx], eax; pop rbx; ret; 
0x000000000ea661: and al, [rax]; add [rax], al; syscall; 
0x000000000b7fae: and al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000015f924: and al, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x00000000131965: and al, [rax]; add [rcx+rcx*4-0x11], al; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x0000000015d5e6: and al, [rax]; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000015d5f0: and al, [rax]; add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000125e85: and al, [rcx]; add [rax], al; syscall; 
0x00000000134612: and al, [rdi]; add [rax-0x73], cl; add eax, 0x722f4; cmove rax, rdx; ret; 
0x000000001662ca: and al, [rdi]; add [rax-0x77], cl; ret; 
0x000000001b3a0a: and al, [rdx]; add [rax], al; ret; 
0x000000000da4c7: and al, ch; add edi, [rsi-0x8]; call far fword ptr [rcx+0x5e]; 
0x000000001177b0: and al, ch; cmp ch, bh; cld; dec dword ptr [rax-0x77]; ret; 
0x000000000da3dc: and al, ch; out dx, al; jle short 0x00000000000da3d9; call far fword ptr [rdx+0x59]; 
0x0000000012ef9f: and al, ch; ret far; 
0x0000000005e2a7: and al, ch; ret; 
0x000000000f0a87: and al, ch; xchg ebx, eax; add al, [rax]; add [rcx-0x77], al; ret; 
0x0000000004117a: and ax, 0x8000; mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001279a5: and bh, [rax+0x2f]; syscall; 
0x00000000077c32: and bh, ah; jmp qword ptr [rsi+0x66]; 
0x0000000007a381: and bh, al; add ah, [rax]; add [rax], al; add cl, ch; ret; 
0x00000000078930: and bh, al; add ch, [rip-0x7d000000]; ret; 
0x0000000013555e: and bh, bh; call qword ptr [rax-0x18]; 
0x00000000144631: and bh, bh; jmp qword ptr [rsi+0x2e]; 
0x000000001aed72: and bh, ch; jmp qword ptr [edx-0x5d]; 
0x000000000a86cf: and bh, cl; jmp qword ptr [rsi+0xf]; 
0x00000000119598: and bl, al; nop [rax+rax]; mov qword ptr [rdi], 0x0; ret; 
0x000000001b57b8: and bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001ae728: and bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000000b50a7: and bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000000c0c47: and bl, al; nop [rax]; ret; 
0x000000001ae86f: and bl, al; xor eax, eax; ret; 
0x000000000c0c3b: and bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c0c3a: and bl, r14b; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000788ce: and byte ptr [rax+0x48000000], 0x85; ror byte ptr [rdi], 0x84; ret far; 
0x0000000015703e: and byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x000000000c5369: and byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000012242a: and byte ptr [rax], 0x3; add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x000000001224a2: and byte ptr [rax], 0x3; add [rax], al; ret; 
0x000000000a759f: and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x000000000a93a3: and byte ptr [rcx+rax+0x48080000], 0x8d; add eax, 0x1ae50; cmove rax, rdx; ret; 
0x000000001069e4: and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x000000001b612b: and byte ptr [rdx-0x5f], 0xc5; add bh, ch; jmp qword ptr [rsi+0x66]; 
0x000000000463f4: and byte ptr [rsi+0x48], 0xf; outsb dx, [rsi]; shl byte ptr [rsi+0xf], 0x6c; ret; 
0x00000000096a59: and byte ptr [rsi+0xf], 0x1f; add [rax], r8b; mov eax, 0xba; syscall; 
0x0000000004117d: and byte ptr [rsi-0x77], 0x44; and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000a8916: and ch, 0x2; lea rax, [rip+0xa780]; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x000000000c5a82: and ch, 0x4; lea rdx, [rip+0xdbbb4]; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000c54bb: and ch, 0x4; lea rdx, [rip+0xdc46b]; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56eb: and ch, 0x4; lea rdx, [rip+0xdc68b]; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581b: and ch, 0x4; lea rdx, [rip+0xdcd1b]; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543b: and ch, 0x4; lea rdx, [rip+0xdce7b]; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000b163b: and ch, 0x4; lea rdx, [rip+0xe823b]; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000ab052: and ch, 0x4; lea rdx, [rip+0xee6b4]; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000a94c2: and ch, 0x4; lea rdx, [rip+0xeff74]; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a95eb: and ch, 0x4; lea rdx, [rip+0xf0a4b]; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000ab0db: and ch, 0x4; lea rdx, [rip+0xf249b]; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2b: and ch, 0x4; lea rdx, [rip+0xf4d5b]; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876b: and ch, 0x4; lea rdx, [rip+0xf51eb]; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87eb: and ch, 0x4; lea rdx, [rip+0xf52eb]; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000892ea: and ch, 0x7f; cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x000000000d83a2: and ch, 0xf; je short 0x00000000000d83c0; add rax, 0x2; ret; 
0x00000000096f2a: and ch, [rdi]; cli; jmp qword ptr [rsi-0x70]; 
0x00000000199903: and ch, al; std; xlat [rbx]; ret; 
0x000000001646ff: and ch, bh; jmp qword ptr [rsi+0x66]; 
0x00000000176285: and ch, bl; inc dword ptr [rcx-0x80]; jl short 0x0000000000176290; jmp far fword ptr [rdi]; 
0x0000000013f369: and ch, dh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000d838d: and cl, 0xf; je short 0x00000000000d83b0; ret; 
0x00000000121f2a: and cl, [rax+0x39]; ret; 
0x0000000007f855: and cl, [rax-0x75]; mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x00000000082345: and cl, [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000012573a: and cl, [rbx+rsi*8-0x1]; mov byte ptr [rax], 0x0; mov rax, r12; pop r12; ret; 
0x00000000126ba8: and cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010fcd3: and cl, [rdi]; test [rsi], ch; add al, [rax]; add [rcx-0x80], al; jmp qword ptr [rdi]; 
0x000000000f2581: and cl, [rsi]; add [rdx+0x63], cl; add al, 0xb2; add rax, rdx; notrack jmp rax; 
0x0000000003020f: and cl, ch; ret far; 
0x0000000010cc44: and cl, ch; ret; 
0x000000000d75c9: and cl, ch; sar ebx, 0xff; call qword ptr [rax+0x166f0ff3]; 
0x000000000d7789: and cl, ch; sar esi, 0xff; call qword ptr [rax+0xf6f0ff3]; 
0x0000000005eff8: and cl, ch; shl ch, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000126ba7: and cl, gs:[rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000135b70: and dh, 0x10; lea rax, [rip+0x71586]; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x000000000c5bd0: and dh, 0x10; lea rax, [rip+0xe1536]; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000c5af3: and dh, 0x2; lea rax, [rip+0x10fe3]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x00000000134858: and dh, 0x2; lea rax, [rip+0x7293e]; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000000a9533: and dh, 0x2; lea rax, [rip+0xbcd3]; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bc8: and dh, 0x2; lea rax, [rip+0xbe2e]; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b28: and dh, 0x2; lea rax, [rip+0xbeae]; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a9c18: and dh, 0x2; lea rax, [rip+0xe02e]; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b78: and dh, 0x2; lea rax, [rip+0xe0ae]; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000a97e8: and dh, 0x2; lea rax, [rip+0xfd9ce]; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x00000000135b58: and dh, 0x4; lea rax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x000000000c5bb8: and dh, 0x4; lea rax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x00000000079d16: and dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000e609f: and dh, ah; jmp qword ptr [rsi+0xf]; 
0x0000000010611e: and dh, dl; jmp qword ptr [rsi+0xf]; 
0x0000000007a380: and dil, al; add ah, [rax]; add [rax], al; add cl, ch; ret; 
0x0000000007892f: and dil, al; add ch, [rip-0x7d000000]; ret; 
0x000000000a885a: and dl, [rax-0x72b80000]; adc eax, 0x1414b; cmovne rax, rdx; ret; 
0x0000000009683c: and dl, al; adc eax, [rax]; mov eax, 0xe; syscall; 
0x000000000c95e0: and dword ptr [rbp+0x1], 0x0; add [rax+0x29], cl; ret far; 
0x0000000012c399: and dword ptr [rbx-0x7cb70000], 0xffffffc4; add [rcx+rcx*4+0x24], ecx; and al, 0xeb; ret far; 
0x00000000084470: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000844cc: and dword ptr [rbx], 0xffffffef; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000182e3a: and dword ptr [rcx+0x4c000000], 0xffffff8d; sbb eax, 0x6098a; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181389: and dword ptr [rcx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000092780: and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x0000000009264d: and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x00000000180d89: and dword ptr [rdi], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000099dd8: and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x00000000099e30: and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x0000000008a004: and dword ptr [rdi], 0xffffffcf; ret; 
0x000000001b4c99: and dword ptr [rdx+0x4], 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x000000000968e9: and dword ptr [rsi+0xf], 0x1f; add [rax], r8b; mov eax, 0xba; syscall; 
0x00000000181089: and dword ptr [rsi+rax], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000012678b: and dword ptr [rsi], 0xc764000f; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000001b4cd7: and dword ptr [rsp+rax], 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x0000000013eb26: and eax, 0x0; add rcx, [rip+0xda2de]; call rbp; 
0x0000000010b1ef: and eax, 0x0; mov r8, rax; add r9, r13; call r15; 
0x0000000015510d: and eax, 0x0; mov rcx, r15; call rbp; 
0x0000000002a25f: and eax, 0x0; ret; 
0x0000000003a086: and eax, 0x1000; ret; 
0x000000000606a0: and eax, 0x100; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000003a066: and eax, 0x100; ret; 
0x00000000119d77: and eax, 0x100f; ret; 
0x00000000095cb6: and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x000000001758f1: and eax, 0x10; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000009655f: and eax, 0x10; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000090aed: and eax, 0x10; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b598: and eax, 0x10; ret; 
0x000000001a2681: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000902fa: and eax, 0x188bc9; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090192: and eax, 0x188d31; lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x00000000046c77: and eax, 0x18; test eax, eax; jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x000000000a03ca: and eax, 0x18; test eax, eax; jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a048a: and eax, 0x18; test eax, eax; jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000ea44a: and eax, 0x18; test eax, eax; jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea657: and eax, 0x18; test eax, eax; jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000001128ea: and eax, 0x18; test eax, eax; jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x0000000011299a: and eax, 0x18; test eax, eax; jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x00000000114856: and eax, 0x18; test eax, eax; jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x00000000114987: and eax, 0x18; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x00000000114a27: and eax, 0x18; test eax, eax; jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f0b: and eax, 0x18; test eax, eax; jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x00000000115107: and eax, 0x18; test eax, eax; jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x00000000115297: and eax, 0x18; test eax, eax; jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000118d37: and eax, 0x18; test eax, eax; jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x0000000011935a: and eax, 0x18; test eax, eax; jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x000000001198ba: and eax, 0x18; test eax, eax; jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x0000000011996a: and eax, 0x18; test eax, eax; jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x0000000011ab57: and eax, 0x18; test eax, eax; jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abf7: and eax, 0x18; test eax, eax; jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011ba27: and eax, 0x18; test eax, eax; jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011bae7: and eax, 0x18; test eax, eax; jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011ec87: and eax, 0x18; test eax, eax; jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x00000000125f8a: and eax, 0x18; test eax, eax; jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x0000000012603a: and eax, 0x18; test eax, eax; jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260ea: and eax, 0x18; test eax, eax; jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x0000000012619a: and eax, 0x18; test eax, eax; jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x00000000126267: and eax, 0x18; test eax, eax; jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x000000001275c7: and eax, 0x18; test eax, eax; jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x00000000127697: and eax, 0x18; test eax, eax; jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x000000001278ca: and eax, 0x18; test eax, eax; jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x0000000012799d: and eax, 0x18; test eax, eax; jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127b07: and eax, 0x18; test eax, eax; jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127baa: and eax, 0x18; test eax, eax; jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e8a: and eax, 0x18; test eax, eax; jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f3a: and eax, 0x18; test eax, eax; jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000127ffa: and eax, 0x18; test eax, eax; jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x0000000012825a: and eax, 0x18; test eax, eax; jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x0000000012830a: and eax, 0x18; test eax, eax; jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x000000000a6bb6: and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000090cc0: and eax, 0x1; mov [rip+0x18adcb], eax; ret; 
0x000000000922d7: and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000003a106: and eax, 0x1; ret; 
0x00000000045535: and eax, 0x1d04c6; cmp rbx, r12; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x00000000035da0: and eax, 0x1f0fffff; add [rax], r8b; ret; 
0x0000000003a046: and eax, 0x2000; ret; 
0x00000000039fc6: and eax, 0x200; ret; 
0x00000000113c9e: and eax, 0x28; jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x0000000011487b: and eax, 0x28; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114ef1: and eax, 0x28; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x00000000115032: and eax, 0x28; jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e30: and eax, 0x28; jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x00000000119612: and eax, 0x28; jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x00000000149fb6: and eax, 0x28; jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0c6: and eax, 0x28; jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a251: and eax, 0x28; jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000015dd9f: and eax, 0x28; jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x000000001642be: and eax, 0x28; jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x000000000420f0: and eax, 0x28; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x00000000042403: and eax, 0x28; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x000000000426b8: and eax, 0x28; jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000004293f: and eax, 0x28; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429c2: and eax, 0x28; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042acd: and eax, 0x28; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042d01: and eax, 0x28; jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x00000000043010: and eax, 0x28; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x000000000434a0: and eax, 0x28; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f1e: and eax, 0x28; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x0000000004600e: and eax, 0x28; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046283: and eax, 0x28; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x00000000046808: and eax, 0x28; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046855: and eax, 0x28; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x000000000468a7: and eax, 0x28; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f4: and eax, 0x28; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046947: and eax, 0x28; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046994: and eax, 0x28; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000050ce9: and eax, 0x28; jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x00000000051502: and eax, 0x28; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x00000000051890: and eax, 0x28; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dda: and eax, 0x28; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x000000000562e5: and eax, 0x28; jne short 0x0000000000056365; leave; ret; 
0x0000000005a24e: and eax, 0x28; jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a497: and eax, 0x28; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060753: and eax, 0x28; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060828: and eax, 0x28; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608df: and eax, 0x28; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609b1: and eax, 0x28; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a73: and eax, 0x28; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b33: and eax, 0x28; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c21: and eax, 0x28; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf8: and eax, 0x28; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x0000000006135e: and eax, 0x28; jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613e0: and eax, 0x28; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e92: and eax, 0x28; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621cb: and eax, 0x28; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a6: and eax, 0x28; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082c03: and eax, 0x28; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cbf: and eax, 0x28; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db8: and eax, 0x28; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e88: and eax, 0x28; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f41: and eax, 0x28; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000089fe1: and eax, 0x28; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090480: and eax, 0x28; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x00000000090649: and eax, 0x28; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090623: and eax, 0x28; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x00000000090788: and eax, 0x28; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x0000000009075e: and eax, 0x28; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x00000000090d6f: and eax, 0x28; jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x000000000975ad: and eax, 0x28; jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x0000000009bcb8: and eax, 0x28; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009cbde: and eax, 0x28; jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009dadd: and eax, 0x28; jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009dcfb: and eax, 0x28; jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x000000000a02de: and eax, 0x28; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000a0c9d: and eax, 0x28; jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x000000000d2c0e: and eax, 0x28; jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d364b: and eax, 0x28; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3726: and eax, 0x28; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8ebe: and eax, 0x28; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f38: and eax, 0x28; jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9c59: and eax, 0x28; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2ea7: and eax, 0x28; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5597: and eax, 0x28; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e610e: and eax, 0x28; jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e619a: and eax, 0x28; jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e774a: and eax, 0x28; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec17a: and eax, 0x28; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec20a: and eax, 0x28; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4ca: and eax, 0x28; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec56a: and eax, 0x28; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef7: and eax, 0x28; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a96: and eax, 0x28; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e10: and eax, 0x28; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000115bbb: and eax, 0x28; jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x0000000011610e: and eax, 0x28; jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000011971f: and eax, 0x28; jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x00000000119a96: and eax, 0x28; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b25: and eax, 0x28; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119bdd: and eax, 0x28; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c7b: and eax, 0x28; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a177: and eax, 0x28; jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011a1e8: and eax, 0x28; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011ab12: and eax, 0x28; jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011b10a: and eax, 0x28; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b19a: and eax, 0x28; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b241: and eax, 0x28; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b301: and eax, 0x28; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3e9: and eax, 0x28; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c06f: and eax, 0x28; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0e8: and eax, 0x28; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1ba: and eax, 0x28; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf82: and eax, 0x28; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d015: and eax, 0x28; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d099: and eax, 0x28; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d114: and eax, 0x28; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011e653: and eax, 0x28; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e72c: and eax, 0x28; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x0000000011f984: and eax, 0x28; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x000000001210b8: and eax, 0x28; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121178: and eax, 0x28; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121356: and eax, 0x28; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x0000000012157f: and eax, 0x28; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x0000000012179c: and eax, 0x28; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000121c34: and eax, 0x28; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000126542: and eax, 0x28; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b30: and eax, 0x28; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e69: and eax, 0x28; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000128230: and eax, 0x28; jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x000000001284e6: and eax, 0x28; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000130aaa: and eax, 0x28; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x00000000132593: and eax, 0x28; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000133d8f: and eax, 0x28; jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134bea: and eax, 0x28; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cee: and eax, 0x28; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e04: and eax, 0x28; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ecc: and eax, 0x28; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c5e: and eax, 0x28; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d74: and eax, 0x28; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e3c: and eax, 0x28; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136243: and eax, 0x28; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a3: and eax, 0x28; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x0000000013636c: and eax, 0x28; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x0000000013644c: and eax, 0x28; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x0000000013652c: and eax, 0x28; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d12a: and eax, 0x28; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c7: and eax, 0x28; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d234: and eax, 0x28; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000143236: and eax, 0x28; jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000147f84: and eax, 0x28; jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fd9: and eax, 0x28; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x0000000014802c: and eax, 0x28; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488db: and eax, 0x28; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x00000000149c75: and eax, 0x28; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000014a361: and eax, 0x28; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5aa: and eax, 0x28; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014e57d: and eax, 0x28; jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000015d306: and eax, 0x28; jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000015fbcc: and eax, 0x28; jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x0000000016014d: and eax, 0x28; jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601eb: and eax, 0x28; jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160ce1: and eax, 0x28; jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x0000000016733e: and eax, 0x28; jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x00000000167dcb: and eax, 0x28; jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x00000000169040: and eax, 0x28; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x000000001690b6: and eax, 0x28; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169126: and eax, 0x28; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169196: and eax, 0x28; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f7: and eax, 0x28; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x0000000016925b: and eax, 0x28; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c6: and eax, 0x28; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169349: and eax, 0x28; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698a7: and eax, 0x28; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698ec: and eax, 0x28; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3c1: and eax, 0x28; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000016b42c: and eax, 0x28; jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4bc: and eax, 0x28; jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b585: and eax, 0x28; jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9ec: and eax, 0x28; jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba7c: and eax, 0x28; jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bc2c: and eax, 0x28; jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcbc: and eax, 0x28; jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca1c: and eax, 0x28; jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016caac: and eax, 0x28; jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb3c: and eax, 0x28; jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbcc: and eax, 0x28; jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d292: and eax, 0x28; jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d306: and eax, 0x28; jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d367: and eax, 0x28; jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3d5: and eax, 0x28; jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d448: and eax, 0x28; jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x0000000017213d: and eax, 0x28; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172354: and eax, 0x28; jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e4: and eax, 0x28; jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001739c1: and eax, 0x28; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a29: and eax, 0x28; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000001750e1: and eax, 0x28; jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751d8: and eax, 0x28; jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x00000000175373: and eax, 0x28; jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x0000000017544a: and eax, 0x28; jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x00000000176129: and eax, 0x28; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000178286: and eax, 0x28; jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x0000000017830c: and eax, 0x28; jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x00000000050c68: and eax, 0x28; mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x00000000114c8e: and eax, 0x28; mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x000000001698f2: and eax, 0x28c48348; ret; 
0x00000000039f86: and eax, 0x2; ret; 
0x00000000054698: and eax, 0x2; sub eax, 0x1; ret; 
0x000000001b7b34: and eax, 0x2c2b7; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x0000000009af81: and eax, 0x2d0; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000975dd: and eax, 0x2d0; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000090b5f: and eax, 0x2f8; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x00000000090b15: and eax, 0x2f8; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x00000000090b6c: and eax, 0x2f8; ret; 
0x00000000090b22: and eax, 0x300; ret; 
0x00000000133c89: and eax, 0x30; call rax; 
0x0000000002a142: and eax, 0x30; jmp rax; 
0x00000000045d90: and eax, 0x30; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014366e: and eax, 0x30; mov qword ptr [rsp], 0x0; call rax; 
0x0000000002a1a0: and eax, 0x30; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002a1f1: and eax, 0x30; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000029cc6: and eax, 0x30; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x0000000007f7c3: and eax, 0x30; test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f8a3: and eax, 0x30; test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000454c7: and eax, 0x30; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x0000000009be9e: and eax, 0x38; cmp eax, 0x8; je short 0x000000000009bea7; ret; 
0x00000000098287: and eax, 0x39001810; ret; 
0x00000000099cb9: and eax, 0x3; mov [rsi], eax; xor eax, eax; ret; 
0x00000000126443: and eax, 0x3; ret; 
0x000000000467c4: and eax, 0x3ff; xor eax, edx; ret; 
0x0000000003a006: and eax, 0x4000; ret; 
0x00000000039f66: and eax, 0x400; ret; 
0x00000000164b67: and eax, 0x40c48348; pop rbx; pop rbp; pop r12; ret; 
0x00000000119c57: and eax, 0x410000; cmp eax, 0x410000; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x000000000e77fa: and eax, 0x482b8964; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000163687: and eax, 0x49000001; mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001802e7: and eax, 0x4900062e; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e7: and eax, 0x4900064d; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000bfbf7: and eax, 0x49001134; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000003a026: and eax, 0x4; ret; 
0x00000000136b27: and eax, 0x64000e23; add rax, [0x0]; ret; 
0x0000000014d174: and eax, 0x78; cmp al, 0x28; jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x0000000003a176: and eax, 0x7f; ret; 
0x000000000410c2: and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000056674: and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000041229: and eax, 0x7fffffff; or r8d, edi; je 0x0000000000041178; ret; 
0x00000000039fe6: and eax, 0x8000; ret; 
0x00000000039fa6: and eax, 0x800; ret; 
0x000000000891e6: and eax, 0x804; ret; 
0x00000000041718: and eax, 0x80; ret; 
0x0000000004117b: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000039f46: and eax, 0x8; ret; 
0x00000000090c17: and eax, 0x972; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000091297: and eax, 0x972; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x000000000ead69: and eax, 0xc; pop rbp; pop r12; ret; 
0x00000000155b6f: and eax, 0xccb5c; mov [rip+0xccb5d], rbp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b84: and eax, 0xcdb5f; call rbx; 
0x00000000155b1f: and eax, 0xcdbec; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155ac8: and eax, 0xcec83; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a71: and eax, 0xcfd1a; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000099dae: and eax, 0xcfffffff; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x00000000155a1a: and eax, 0xd0db1; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x000000000937f1: and eax, 0xd2314528; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001aee6f: and eax, 0xdeff1754; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000000328b2: and eax, 0xe8001a59; xchg ebp, eax; jne short 0x00000000000328ba; add [rbp-0x77], cl; ret; 
0x00000000099d06: and eax, 0xf000dff; mov [rsi], eax; xor eax, eax; ret; 
0x00000000099e6a: and eax, 0xf0fff000; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x000000001277e7: and eax, 0xf7000f16; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126ee7: and eax, 0xf7000f1f; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001222e7: and eax, 0xf7000f6b; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011bee7: and eax, 0xf7000fcf; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000108ce7: and eax, 0xf7001101; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ec3e7: and eax, 0xf70012ca; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000109344: and eax, 0xf; ret; 
0x00000000099c39: and eax, 0xfff; je short 0x0000000000099c48; mov [rsi], eax; xor eax, eax; ret; 
0x00000000119dbd: and eax, 0xffffeff0; or eax, esi; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000125618: and eax, 0xfffff000; or eax, edx; ret; 
0x000000001367ba: and eax, 0xffffff; ret; 
0x0000000011c111: and eax, 0xfffffff0; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000918e9: and eax, 0xfffffff7; jne short 0x00000000000918a2; pop rbx; ret; 
0x00000000141df7: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x0000000015ee8f: and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000000926a0: and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000094622: and eax, 0xfffffffd; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x0000000016c4c6: and eax, 0xffffffff; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015f64f: and eax, [rax]; add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x00000000187c75: and eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000015f66f: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000015f6c6: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x00000000075125: and eax, [rax]; add dh, dh; ret; 
0x000000000db0ca: and eax, [rbp+0x490f44db]; ret; 
0x00000000099e1c: and eax, [rcx+0xf]; xor eax, eax; ret; 
0x0000000011ab18: and eax, [rcx+rcx*4-0x40]; add rsp, 0x58; ret; 
0x00000000126cf5: and eax, [rcx]; add [rax], al; syscall; 
0x00000000175dee: and eax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x000000001344e2: and eax, [rdi]; add [rax-0x73], cl; add eax, 0x72424; cmove rax, rdx; ret; 
0x00000000042f5a: and eax, [rdi]; setne al; movzx eax, al; ret; 
0x0000000018d5e9: and eax, [rdx]; add [rax], al; ret; 
0x000000000430bd: and eax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000180fc7: and eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000417ff: and eax, [rsp-0x4]; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000041408: and eax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000001345eb: and eax, ebp; add al, 0x0; cmovne rax, rdx; ret; 
0x000000000ba722: and eax, ecx; je 0x00000000000ba8f0; bsr rax, rax; add rax, rdi; ret; 
0x000000001ae931: and eax, ecx; je short 0x00000000001ae941; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b59be: and eax, ecx; je short 0x00000000001b59ce; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6001: and eax, ecx; je short 0x00000000001b6011; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b64ce: and eax, ecx; je short 0x00000000001b64de; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000126402: and eax, ecx; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000059bf5: and eax, ecx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000125682: and eax, ecx; or rax, rdx; ret; 
0x00000000041033: and eax, ecx; ret; 
0x0000000012e4e5: and eax, edx; mov [rsp+0x20], r10b; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x000000000416be: and eax, edx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x000000000413c3: and eax, edx; ret; 
0x00000000041b89: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000011d31c: and eax, esi; inc dword ptr [rax]; ret; 
0x0000000003a351: and eax, esi; ret; 
0x0000000012e4e4: and eax, r10d; mov [rsp+0x20], r10b; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000126401: and eax, r9d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000151a49: and ebp, [rcx-0x13]; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000084471: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000844cd: and ebp, edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001645c4: and ebp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000f700f: and ebx, 0x8; je short 0x00000000000f6f97; pop rbx; ret; 
0x00000000082164: and ebx, [rbx+0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000151e8d: and ebx, [rbx+0x5d]; pop r12; ret; 
0x0000000019a3a9: and ebx, [rcx+0x634f0004]; or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000011ebde: and ebx, eax; mov rax, [rip+0xfa229]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000126b10: and ecx, 0x2; jne short 0x0000000000126b40; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000a8305: and ecx, 0x4; lea rax, [rip+0x11f81]; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000001618ff: and ecx, 0x7f; movzx edx, byte ptr [rdx+rcx]; mov [rdi+0x7], dl; ret; 
0x00000000041926: and ecx, 0x807fffff; shl eax, 0x17; or ecx, eax; movd xmm0, ecx; ret; 
0x000000000f6fae: and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000064365: and ecx, [rax-0x7d]; ret; 
0x0000000009c8ab: and ecx, [rax]; add [rbp+rcx*4+0x1d], cl; ret far; 
0x00000000119f8b: and ecx, [rcx+0x64110fd8]; and al, 0x11; syscall; 
0x000000000d8cfc: and ecx, [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000a11bd: and ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000a9f2d: and ecx, [rcx+rcx*4-0x30]; pop rbx; pop rbp; pop r12; ret; 
0x00000000126a0e: and ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126ad4: and ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000012a7e2: and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000019f557: and ecx, ebp; ret; 
0x000000001092ea: and ecx, esi; cmp ecx, [rax-0xc]; jne short 0x00000000001092e0; mov eax, [rdx+0x8]; ret; 
0x000000001baaa7: and edi, 0x20; je short 0x00000000001baabc; movss xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x0000000003a186: and edi, 0xffffff80; sete al; ret; 
0x0000000011d1be: and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000a2a41: and edi, [rbp+0x16e80013]; jrcxz 0x00000000000a2a48; jmp qword ptr [rsi+0xf]; 
0x0000000016434b: and edi, ebp; jmp qword ptr [rsi-0x70]; 
0x000000000d3cd4: and edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000035fdb: and edi, edi; jmp qword ptr [rsi-0x70]; 
0x00000000166ffb: and edi, esi; cld; call qword ptr [rax-0x5e1f00d]; 
0x000000000f6fab: and edx, 0x1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x0000000013470e: and edx, 0x2; lea rax, [rip+0x46658]; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344ae: and edx, 0x2; lea rax, [rip+0x468d8]; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345de: and edx, 0x2; lea rax, [rip+0x49188]; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x000000000a9d0e: and edx, 0x2; lea rax, [rip+0xd1088]; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98ce: and edx, 0x2; lea rax, [rip+0xd14a8]; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a969e: and edx, 0x2; lea rax, [rip+0xd40d8]; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x00000000090aa4: and edx, 0x38; cmp edx, 0x8; je short 0x0000000000090aad; ret; 
0x000000000f41d0: and edx, 0x4; je short 0x00000000000f416f; mov byte ptr [rax+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000466e7: and edx, 0x7fffffff; mov [rax], edx; mov [rsi], edx; mov eax, r8d; ret; 
0x000000000417dd: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x000000001367a3: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000136821: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000125612: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000015ee92: and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000011ba49: and edx, [rax-0x9]; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall; 
0x00000000150b29: and edx, [rbx-0x21170012]; idiv edi; jmp qword ptr [rsi+0x66]; 
0x000000000c0dfe: and edx, [rcx]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000004158b: and edx, ecx; or rdx, rax; movq xmm1, rdx; movapd xmm0, xmm1; ret; 
0x000000000a873a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a8750; ret; 
0x000000000a87ba: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a87d0; ret; 
0x000000000a89fa: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a8a10; ret; 
0x000000000a948a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a94a0; ret; 
0x000000000a95ba: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a95d0; ret; 
0x000000000ab01a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000ab030; ret; 
0x000000000ab0aa: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000ab0c0; ret; 
0x000000000b160a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b1620; ret; 
0x000000000c540a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5420; ret; 
0x000000000c548a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c54a0; ret; 
0x000000000c56ba: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c56d0; ret; 
0x000000000c57ea: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5800; ret; 
0x000000000c5a4a: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5a60; ret; 
0x000000000a9d78: and esi, 0x200; lea rdx, [rip+0x10512b]; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a9938: and esi, 0x200; lea rdx, [rip+0x10554b]; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a9708: and esi, 0x200; lea rdx, [rip+0x10579b]; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a9d58: and esi, 0x200; lea rdx, [rip+0x1ab8b]; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a9918: and esi, 0x200; lea rdx, [rip+0x1afab]; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96e8: and esi, 0x200; lea rdx, [rip+0x1b1fb]; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x00000000134798: and esi, 0x200; lea rdx, [rip+0x6c0db]; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x00000000134668: and esi, 0x200; lea rdx, [rip+0x6c22b]; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x00000000134538: and esi, 0x200; lea rdx, [rip+0x6c35b]; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x00000000134738: and esi, 0x200; lea rdx, [rip+0x7213b]; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x00000000134608: and esi, 0x200; lea rdx, [rip+0x7228b]; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344d8: and esi, 0x200; lea rdx, [rip+0x723bb]; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x000000001346d0: and esi, 0x200; lea rdx, [rip+0x73623]; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a0: and esi, 0x200; lea rdx, [rip+0x73773]; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134470: and esi, 0x200; lea rdx, [rip+0x738a3]; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000134778: and esi, 0x200; lea rdx, [rip+0x7a6fb]; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x00000000134648: and esi, 0x200; lea rdx, [rip+0x7a84b]; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x00000000134518: and esi, 0x200; lea rdx, [rip+0x7a97b]; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x000000000a9d98: and esi, 0x200; lea rdx, [rip+0xf6b0b]; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a9958: and esi, 0x200; lea rdx, [rip+0xf6f2b]; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a9728: and esi, 0x200; lea rdx, [rip+0xf717b]; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a9d38: and esi, 0x200; lea rdx, [rip+0xfcb6b]; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a98f8: and esi, 0x200; lea rdx, [rip+0xfcf8b]; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96c8: and esi, 0x200; lea rdx, [rip+0xfd1db]; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a9cd0: and esi, 0x200; lea rdx, [rip+0xfe053]; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a9890: and esi, 0x200; lea rdx, [rip+0xfe473]; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a9660: and esi, 0x200; lea rdx, [rip+0xfe6c3]; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000001344f8: and esi, 0x200; lea rdx, [rip-0x6fc25]; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x00000000134628: and esi, 0x200; lea rdx, [rip-0x6fd55]; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x00000000134758: and esi, 0x200; lea rdx, [rip-0x6fea5]; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x000000000c5b33: and esi, 0x400; lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000c6dae: and esi, 0x400; lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c561e: and esi, 0x400; lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000a9573: and esi, 0x400; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x00000000154d3d: and esi, 0x7; movsxd rax, [rdi+rsi*4]; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x00000000041878: and esi, 0x80000000; movss [rdi], xmm0; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000000df0dc: and esi, 0x80402000; call qword ptr [rax]; 
0x00000000096d6d: and esi, 0x80; syscall; 
0x00000000098399: and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000566e0: and esi, 0xd6097fff; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001367cc: and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000015ef8c: and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000009463d: and esi, 0xfffffffe; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x00000000039cd9: and esi, [rax+0x10]; lea rax, [rax+rsi*4]; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x0000000011a9a5: and esi, [rcx]; neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41]; 
0x0000000012a5f2: and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000000ba9b2: and esi, eax; je 0x00000000000ba8f0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000004151f: and esi, eax; movapd xmm0, xmm2; movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x000000000414c3: and esi, eax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x0000000004148f: and esi, eax; movsd [rdx], xmm1; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000ba7bc: and esi, ecx; je 0x00000000000ba8f0; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000001269f8: and esp, 0xfffffff0; mov rdi, r8; call rdx; 
0x000000000984b9: and esp, [rsi-0x72b3ffed]; jg short 0x00000000000984d1; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001b47d2: and gs:[rdi], ah; ret far; 
0x000000001b5b58: and gs:[rdi], ah; ret; 
0x00000000126ca7: and gs:[rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001b1b22: and gs:[rsi], ah; ret far; 
0x000000001aeacc: and gs:[rsi], ah; ret; 
0x00000000119597: and r11b, r8b; nop [rax+rax]; mov qword ptr [rdi], 0x0; ret; 
0x000000000c0c46: and r11b, r8b; nop [rax]; ret; 
0x0000000010611d: and r14b, r10b; jmp qword ptr [rsi+0xf]; 
0x00000000041228: and r8d, 0x7fffffff; or r8d, edi; je 0x0000000000041178; ret; 
0x00000000175ded: and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x00000000042f59: and rax, [rdi]; setne al; movzx eax, al; ret; 
0x000000000430bc: and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000041407: and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000ba721: and rax, rcx; je 0x00000000000ba8f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000059bf4: and rax, rcx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000125681: and rax, rcx; or rax, rdx; ret; 
0x000000000416bd: and rax, rdx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x00000000041b88: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000013470d: and rdx, 0x2; lea rax, [rip+0x46658]; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344ad: and rdx, 0x2; lea rax, [rip+0x468d8]; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345dd: and rdx, 0x2; lea rax, [rip+0x49188]; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x000000000a9d0d: and rdx, 0x2; lea rax, [rip+0xd1088]; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98cd: and rdx, 0x2; lea rax, [rip+0xd14a8]; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a969d: and rdx, 0x2; lea rax, [rip+0xd40d8]; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x0000000004158a: and rdx, rcx; or rdx, rax; movq xmm1, rdx; movapd xmm0, xmm1; ret; 
0x000000000ba9b1: and rsi, rax; je 0x00000000000ba8f0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000004151e: and rsi, rax; movapd xmm0, xmm2; movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x000000000414c2: and rsi, rax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x0000000004148e: and rsi, rax; movsd [rdx], xmm1; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000ba7bb: and rsi, rcx; je 0x00000000000ba8f0; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000001269f7: and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x0000000004181f: andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000041424: andpd xmm0, [rip+0x1a0c64]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x0000000004142c: andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x00000000041969: andps xmm0, [rip+0x1a0750]; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041944: andps xmm0, [rip+0x1a0775]; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x00000000041425: andps xmm0, [rip+0x1a0c64]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x0000000004181c: andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x0000000004142d: andps xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x0000000010f5ed: bnd call qword ptr [rax+0x48247c80]; 
0x000000000852da: bnd call qword ptr [rax+0x70]; 
0x0000000019886d: bnd call qword ptr [rax-0x5e1f00d]; 
0x0000000010f06d: bnd call qword ptr [rax-0x7af0a4c4]; 
0x0000000008ccb2: bnd call qword ptr [rbp+0x70]; 
0x00000000043938: bnd call rbp; 
0x0000000017c3fc: bnd jb short 0x000000000017c407; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c4ac: bnd jb short 0x000000000017c4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eddc: bnd jb short 0x000000000017ede7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ee8c: bnd jb short 0x000000000017ee97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000000d6be3: bnd jbe 0x00000000000d6ef0; add rax, rdi; add rax, rcx; ret; 
0x000000000d6e7a: bnd jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e9a: bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eba: bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6eda: bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b1239: bnd je short 0x00000000000b1230; ret; 
0x000000000c6de8: bnd je short 0x00000000000c6def; test edx, edx; jne short 0x00000000000c6de0; ret; 
0x000000000ea3b6: bnd je short 0x00000000000ea3c8; xor edx, edx; cmp rax, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000015692d: bnd jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000015650c: bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001568d6: bnd jmp qword ptr [rdi+rax*8+0x3]; 
0x0000000010eba4: bnd jmp qword ptr [rsi+0x2e]; 
0x000000000ff6bb: bnd jmp qword ptr [rsi+0x49]; 
0x0000000010d2c3: bnd jmp qword ptr [rsi+0x66]; 
0x000000000f9bc0: bnd jmp qword ptr [rsi+0xf]; 
0x000000000d374a: bnd jo short 0x00000000000d3746; jmp qword ptr [rsi-0x70]; 
0x000000001afcec: bsf eax, eax; add rax, rcx; ret; 
0x0000000019976a: bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000b4c9a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000001b14a8: bsf eax, eax; add rax, rdi; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000b4bb0: bsf eax, eax; add rax, rdi; ret; 
0x00000000199477: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001b1952: bsf eax, eax; add rax, rdx; ret; 
0x0000000019d77c: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000199501: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000199511: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000199521: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000019d731: bsf eax, eax; add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x000000001ae848: bsf eax, eax; cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b58e0: bsf eax, eax; cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5f0e: bsf eax, eax; cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b63cb: bsf eax, eax; cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43e1: bsf eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4561: bsf eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4536: bsf eax, eax; cmp esi, [rdi+rax*4+0x40]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43a1: bsf eax, eax; cmp esi, [rdi+rax*4+0x60]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b4551: bsf eax, eax; cmp esi, [rdi+rax*4]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x000000001b45aa: bsf eax, eax; cmp esi, [rdx+rax*4]; jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001b4134: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000019dda1: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000001b1501: bsf eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1691: bsf eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1669: bsf eax, eax; cmp sil, [rdi+rax+0x40]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14c1: bsf eax, eax; cmp sil, [rdi+rax+0x60]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b1681: bsf eax, eax; cmp sil, [rdi+rax]; jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b16e2: bsf eax, eax; cmp sil, [rdx+rax]; jne short 0x00000000001b1679; add rax, rdx; ret; 
0x000000001994f1: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000001a29f1: bsf eax, eax; lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29e1: bsf eax, eax; lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29d1: bsf eax, eax; lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29b1: bsf eax, eax; lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x000000001b5261: bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b5251: bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f11: bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3f01: bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3ef1: bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001b3ee1: bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b5271: bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000000b4bc0: bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b4bd0: bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b4ba0: bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000001b57b1: bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57c1: bsf eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57d1: bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57e1: bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6451: bsf eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b6461: bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b6427: bsf eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001b4388: bsf eax, eax; lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000001b5737: bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b5941: bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000001b4bc0: bsf eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x000000001ae721: bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8c1: bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000000b4aff: bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000001ae731: bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae899: bsf eax, eax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001ae741: bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae751: bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b5f81: bsf eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f91: bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x000000001b5f64: bsf eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x000000001afde7: bsf eax, eax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000001afe11: bsf eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001afe01: bsf eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000ba507: bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001a2d78: bsf eax, eax; movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x000000001aeb00: bsf eax, eax; movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x000000001a2d98: bsf eax, eax; movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000001b224c: bsf eax, eax; ret; 
0x000000001a276e: bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000019db71: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000019db61: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000019db51: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000019db41: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000001b2251: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b2261: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b2271: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b2281: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001b4ac1: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad1: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae1: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab1: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x00000000199849: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000019d719: bsf eax, eax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000199871: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000019d741: bsf eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000199861: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000019962d: bsf eax, eax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x00000000199681: bsf eax, eax; sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x000000001b40c1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40d1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5461: bsf eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5441: bsf eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000b4be0: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf0: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c00: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c10: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000019d98a: bsf eax, eax; vzeroupper; ret; 
0x000000001aaddb: bsf eax, eax; xtest; je short 0x00000000001aade7; vzeroall; ret; 
0x000000000a9999: bsf eax, edi; cmove eax, edx; add eax, 0x1; ret; 
0x000000000a99ba: bsf eax, edi; cmove rax, rdx; add eax, 0x1; ret; 
0x000000000baa0a: bsf eax, edx; ret; 
0x000000000d848a: bsf eax, edx; shr rax, 0x2; ret; 
0x000000001b1b94: bsf ecx, ecx; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x000000000b2f9a: bsf ecx, ecx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001aead8: bsf ecx, ecx; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x000000001a3541: bsf ecx, ecx; movzx eax, byte ptr [rdi+rcx]; movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x000000000b3060: bsf ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001b1b36: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000001b1b66: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x000000000b2e30: bsf edx, eax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001b19ab: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x000000001b19bc: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x000000001b19cd: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x000000001b199c: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000bab62: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000d85e2: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000c3891: bsf edx, edx; lea r11, [rip+0x10fbb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3859: bsf edx, edx; lea r11, [rip+0x10fbf1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3834: bsf edx, edx; lea r11, [rip+0x10fc16]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3817: bsf edx, edx; lea r11, [rip+0x10fc33]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f01: bsf edx, edx; lea r11, [rip+0x1104c9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ec9: bsf edx, edx; lea r11, [rip+0x110501]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea4: bsf edx, edx; lea r11, [rip+0x110526]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e87: bsf edx, edx; lea r11, [rip+0x110543]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c193d: bsf edx, edx; lea r11, [rip+0x111939]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1914: bsf edx, edx; lea r11, [rip+0x111962]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1231: bsf edx, edx; lea r11, [rip+0x111fb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11f9: bsf edx, edx; lea r11, [rip+0x111ff1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11d4: bsf edx, edx; lea r11, [rip+0x112016]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11b7: bsf edx, edx; lea r11, [rip+0x112033]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c026d: bsf edx, edx; lea r11, [rip+0x112e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0244: bsf edx, edx; lea r11, [rip+0x112e52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf1: bsf edx, edx; lea r11, [rip+0x113425]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbb9: bsf edx, edx; lea r11, [rip+0x11345d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb94: bsf edx, edx; lea r11, [rip+0x113482]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb77: bsf edx, edx; lea r11, [rip+0x11349f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000b2dc1: bsf edx, edx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001b2343: bsf rax, rax; add rax, rdi; ret; 
0x000000001b1668: bsf rax, rax; cmp sil, [rdi+rax+0x40]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b18e8: bsf rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae898: bsf rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001afde6: bsf rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000000ba620: bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000199848: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000019d718: bsf rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000019962c: bsf rax, rax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000000a99b9: bsf rax, rdi; cmove rax, rdx; add eax, 0x1; ret; 
0x000000000baa52: bsf rax, rdx; ret; 
0x000000000d84d6: bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000b2f99: bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001a3540: bsf rcx, rcx; movzx eax, byte ptr [rdi+rcx]; movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x000000000b305f: bsf rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000b2e2f: bsf rdx, rax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000bab61: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000d85e1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000c3890: bsf rdx, rdx; lea r11, [rip+0x10fbb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3858: bsf rdx, rdx; lea r11, [rip+0x10fbf1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3833: bsf rdx, rdx; lea r11, [rip+0x10fc16]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3816: bsf rdx, rdx; lea r11, [rip+0x10fc33]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f00: bsf rdx, rdx; lea r11, [rip+0x1104c9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ec8: bsf rdx, rdx; lea r11, [rip+0x110501]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea3: bsf rdx, rdx; lea r11, [rip+0x110526]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e86: bsf rdx, rdx; lea r11, [rip+0x110543]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c193c: bsf rdx, rdx; lea r11, [rip+0x111939]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1913: bsf rdx, rdx; lea r11, [rip+0x111962]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1230: bsf rdx, rdx; lea r11, [rip+0x111fb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11f8: bsf rdx, rdx; lea r11, [rip+0x111ff1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11d3: bsf rdx, rdx; lea r11, [rip+0x112016]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11b6: bsf rdx, rdx; lea r11, [rip+0x112033]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c026c: bsf rdx, rdx; lea r11, [rip+0x112e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0243: bsf rdx, rdx; lea r11, [rip+0x112e52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf0: bsf rdx, rdx; lea r11, [rip+0x113425]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbb8: bsf rdx, rdx; lea r11, [rip+0x11345d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb93: bsf rdx, rdx; lea r11, [rip+0x113482]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb76: bsf rdx, rdx; lea r11, [rip+0x11349f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000b2dc0: bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001af920: bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x00000000199aa0: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000001af930: bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000199ab0: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000199ac0: bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000001afa0d: bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x00000000199b9e: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x000000000b51b6: bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x000000000b4fe6: bsr eax, eax; add rax, rdi; ret; 
0x000000001999af: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000b5090: bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b50a0: bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50b0: bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000001b567d: bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b42ad: bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000019d8d1: bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000ba9bb: bsr eax, esi; add rax, rdi; ret; 
0x000000000ba8c9: bsr esi, esi; lea rax, [rcx+rsi]; ret; 
0x000000000ba7c5: bsr esi, esi; lea rax, [rdi+rsi]; ret; 
0x000000000ba72a: bsr rax, rax; add rax, rdi; ret; 
0x000000000ba9ba: bsr rax, rsi; add rax, rdi; ret; 
0x000000000ba8c6: bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000ba8c8: bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000ba7c4: bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x00000000165b46: bswap eax; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x00000000165b93: bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x00000000165b73: bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x00000000162d9e: bswap eax; mov [rdi+0xa8], eax; mov eax, 0x1; ret; 
0x00000000162dfb: bswap eax; mov [rdi+0xb4], eax; mov eax, 0x1; ret; 
0x00000000162dcb: bswap eax; mov [rdi+0xb8], eax; mov eax, 0x1; ret; 
0x0000000016649a: bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x0000000016639a: bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x0000000016645d: bswap eax; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000165b33: bswap eax; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x00000000136776: bswap eax; ret; 
0x00000000165c5c: bswap ebp; call qword ptr [rax+0x18]; 
0x00000000162ee4: bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x0000000016cce5: bswap edx; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000001604a8: bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbp+0x10]; 
0x0000000015fe7e: bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbx+0x10]; 
0x0000000016cd25: bswap edx; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000162d86: bswap edx; mov ecx, edx; mov [rax], rcx; mov eax, 0x1; ret; 
0x00000000165b31: bswap rax; mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x00000000165c5b: bswap rbp; call qword ptr [rax+0x18]; 
0x000000000413e4: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000413e3: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000056774: bts eax, 0x30; mov [rsi+0x8], rax; mov eax, 0x2; ret; 
0x000000001b3ed1: bts eax, esi; tzcnt eax, eax; ret; 
0x000000001a2994: bts eax, esi; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000019db31: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000056571: bts edx, 0x34; mov eax, 0x1; mov [rsi], rdx; ret; 
0x000000000bad23: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000056773: bts rax, 0x30; mov [rsi+0x8], rax; mov eax, 0x2; ret; 
0x000000001b3ed0: bts rax, rsi; tzcnt eax, eax; ret; 
0x000000001a2993: bts rax, rsi; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000019db30: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000056570: bts rdx, 0x34; mov eax, 0x1; mov [rsi], rdx; ret; 
0x000000000bad22: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000019a127: bzhi eax, eax, edx; vzeroupper; ret; 
0x000000001b152c: bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14ec: bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b43fc: bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43cc: bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afb97: bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x00000000199f03: bzhi edx, eax, edx; jne 0x0000000000199ce0; xor eax, eax; vzeroupper; ret; 
0x000000001a1567: bzhi edx, eax, edx; jne 0x00000000001a1320; xor eax, eax; vzeroupper; ret; 
0x000000001a7219: bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x00000000073faa: call far fword ptr [rax+0x44]; 
0x0000000007b327: call far fword ptr [rax+0x48]; 
0x0000000011f4cd: call far fword ptr [rax+0x4c]; 
0x00000000136889: call far fword ptr [rax+0x4c]; 
0x0000000004135b: call far fword ptr [rax+0x5a]; 
0x00000000106844: call far fword ptr [rax+0x5a]; 
0x0000000010d1e8: call far fword ptr [rax+0xa2840f]; 
0x0000000010c7d8: call far fword ptr [rax+rax]; 
0x0000000005216b: call far fword ptr [rax]; 
0x000000000a9c7d: call far fword ptr [rbp+0x31]; 
0x000000000451a2: call far fword ptr [rbp+0x41]; 
0x00000000040560: call far fword ptr [rbp+0x4c]; 
0x000000000f40fe: call far fword ptr [rbp+0x74]; 
0x000000000f0ffb: call far fword ptr [rbp+0xf]; 
0x000000000407f2: call far fword ptr [rbp-0x3d]; 
0x000000000f6bf8: call far fword ptr [rbx+0x31]; 
0x000000000f6bf9: call far fword ptr [rbx+0x31]; 
0x000000000fa7e1: call far fword ptr [rbx+0x31]; 
0x000000000eb8ff: call far fword ptr [rbx+0x41]; 
0x0000000008170e: call far fword ptr [rbx+0x44]; 
0x0000000006103f: call far fword ptr [rbx+0x48]; 
0x000000000f9bb0: call far fword ptr [rbx+0x4c]; 
0x0000000007f692: call far fword ptr [rbx+0x4c]; 
0x00000000035453: call far fword ptr [rbx+0x5d]; 
0x000000000f40f8: call far fword ptr [rbx+0x74]; 
0x000000000f1014: call far fword ptr [rbx+0xf]; 
0x00000000042d2e: call far fword ptr [rbx-0x17]; 
0x00000000083d28: call far fword ptr [rbx-0x3d]; 
0x0000000016087c: call far fword ptr [rbx-0x48]; 
0x0000000003e76d: call far fword ptr [rbx-0x74b20002]; 
0x00000000045e7b: call far fword ptr [rbx-0x7b]; 
0x0000000010d1d1: call far fword ptr [rbx-0x7c9d8c]; 
0x00000000058e55: call far fword ptr [rbx]; 
0x000000000e4477: call far fword ptr [rcx+0x25fcc149]; 
0x0000000005b705: call far fword ptr [rcx+0x5e]; 
0x0000000010d1df: call far fword ptr [rcx+0xa4840f]; 
0x000000000f1004: call far fword ptr [rcx+rax*2+0xf]; 
0x00000000069785: call far fword ptr [rcx-0x76b20001]; 
0x0000000014d68b: call far fword ptr [rdi+0x41]; 
0x0000000011d8d0: call far fword ptr [rdi+0x4c]; 
0x0000000010d1c8: call far fword ptr [rdi+rcx+0xad84]; 
0x0000000010fd3b: call far fword ptr [rdi+rcx-0x7c]; 
0x00000000044ab2: call far fword ptr [rdi]; 
0x000000000a8628: call far fword ptr [rdx+0x31]; 
0x000000000da3e1: call far fword ptr [rdx+0x59]; 
0x00000000075e4a: call far fword ptr [rdx+0x77]; 
0x0000000010d1d6: call far fword ptr [rdx+0xa6840f]; 
0x00000000075a6a: call far fword ptr [rdx+0xf]; 
0x00000000029f48: call far fword ptr [rdx]; 
0x0000000007ba5d: call far fword ptr [rsi+0x15]; 
0x000000000e3a5c: call far fword ptr [rsi+0x29]; 
0x0000000013c78f: call far fword ptr [rsi+0x5f]; 
0x0000000013c78e: call far fword ptr [rsi+0x5f]; 
0x0000000013c791: call far fword ptr [rsi+0x5f]; 
0x000000000f4104: call far fword ptr [rsi+0x75]; 
0x00000000135b7d: call far fword ptr [rsi+0xf480007]; 
0x00000000080c1d: call far fword ptr [rsi]; 
0x000000000f40f2: call far fword ptr [rsp+rsi*2+0x22]; 
0x00000000148e48: call far fword ptr [rsp+rsi*2+0x34]; 
0x000000000ef93f: call far fword ptr [rsp+rsi*2-0x13]; 
0x000000000ef5fb: call far fword ptr [rsp+rsi*2-0xf]; 
0x00000000072fea: call qword ptr [r10+rax*8]; 
0x0000000003557d: call qword ptr [r11]; 
0x0000000008f12d: call qword ptr [r12+0x18]; 
0x000000000ee52a: call qword ptr [r12+0x20]; 
0x000000000ee100: call qword ptr [r12+0x28]; 
0x000000000ee534: call qword ptr [r12+0x30]; 
0x000000000901a6: call qword ptr [r12+0x358]; 
0x000000000902a4: call qword ptr [r12+0x360]; 
0x00000000073798: call qword ptr [r12+0x38]; 
0x000000001074bc: call qword ptr [r12+0x40]; 
0x0000000008c971: call qword ptr [r12+0x48]; 
0x0000000008b5b0: call qword ptr [r12+0x80]; 
0x0000000008bf78: call qword ptr [r12+0x88]; 
0x00000000088354: call qword ptr [r13+0x10]; 
0x00000000072335: call qword ptr [r13+0x38]; 
0x000000000814b6: call qword ptr [r13+0x48]; 
0x000000000815d2: call qword ptr [r13+0x58]; 
0x0000000008779c: call qword ptr [r13+0x60]; 
0x00000000085c63: call qword ptr [r13+0x80]; 
0x0000000008ba34: call qword ptr [r13+0x90]; 
0x00000000076593: call qword ptr [r14+0x38]; 
0x00000000160284: call qword ptr [r14+0x40]; 
0x0000000008123b: call qword ptr [r14+0x48]; 
0x0000000008ca5d: call qword ptr [r14+0x78]; 
0x00000000085985: call qword ptr [r14+0x80]; 
0x0000000008589f: call qword ptr [r14+0x90]; 
0x00000000131971: call qword ptr [r15+0x28]; 
0x00000000080053: call qword ptr [r15+0x38]; 
0x0000000015ff33: call qword ptr [r15+0x40]; 
0x0000000008ac5f: call qword ptr [r15+0x80]; 
0x0000000008a7be: call qword ptr [r15+0x90]; 
0x00000000074bc0: call qword ptr [r8+rcx*8-0x40]; 
0x0000000015d64c: call qword ptr [rax+0x10]; 
0x0000000013c3fe: call qword ptr [rax+0x10bd41]; 
0x000000000a618e: call qword ptr [rax+0x10c48348]; 
0x0000000014695e: call qword ptr [rax+0x10ec8148]; 
0x000000000375ae: call qword ptr [rax+0x1428d41]; 
0x00000000148d0e: call qword ptr [rax+0x14d8d48]; 
0x000000000f353e: call qword ptr [rax+0x15db60f]; 
0x000000000d75ce: call qword ptr [rax+0x166f0ff3]; 
0x000000001a9e5e: call qword ptr [rax+0x166ffec5]; 
0x00000000098eae: call qword ptr [rax+0x16b8]; 
0x000000001aa82e: call qword ptr [rax+0x1789168b]; 
0x000000000943ae: call qword ptr [rax+0x1824748b]; 
0x0000000002b48e: call qword ptr [rax+0x18508b48]; 
0x00000000083a0c: call qword ptr [rax+0x18]; 
0x000000000ce63e: call qword ptr [rax+0x18b9]; 
0x0000000011bfee: call qword ptr [rax+0x19058b48]; 
0x0000000011132e: call qword ptr [rax+0x1b8]; 
0x0000000010e7ce: call qword ptr [rax+0x1b8ff31]; 
0x000000000feaae: call qword ptr [rax+0x1b9]; 
0x0000000007a99e: call qword ptr [rax+0x1ba]; 
0x000000000988ae: call qword ptr [rax+0x1bac031]; 
0x000000000f67ee: call qword ptr [rax+0x1c18348]; 
0x000000000f9b6e: call qword ptr [rax+0x1c38348]; 
0x0000000016f75e: call qword ptr [rax+0x1c3d8d48]; 
0x000000000672ce: call qword ptr [rax+0x20025]; 
0x000000000effee: call qword ptr [rax+0x20858948]; 
0x0000000005d4ae: call qword ptr [rax+0x2085c748]; 
0x000000000841cc: call qword ptr [rax+0x20]; 
0x000000001324ce: call qword ptr [rax+0x21058b48]; 
0x0000000005621e: call qword ptr [rax+0x24048b48]; 
0x0000000011bd2e: call qword ptr [rax+0x24446348]; 
0x0000000008ee3e: call qword ptr [rax+0x24448948]; 
0x0000000009661b: call qword ptr [rax+0x24448b48]; 
0x0000000005c74e: call qword ptr [rax+0x24448b49]; 
0x0000000014061e: call qword ptr [rax+0x24448d48]; 
0x00000000111ede: call qword ptr [rax+0x244c8b48]; 
0x0000000006030e: call qword ptr [rax+0x2454290f]; 
0x0000000009c46e: call qword ptr [rax+0x2454894c]; 
0x000000000acdee: call qword ptr [rax+0x245c894c]; 
0x00000000083bae: call qword ptr [rax+0x246c294c]; 
0x0000000011137e: call qword ptr [rax+0x246c8b48]; 
0x0000000010e2ae: call qword ptr [rax+0x246c8b4c]; 
0x000000000f17ee: call qword ptr [rax+0x24743b4c]; 
0x0000000007e9de: call qword ptr [rax+0x24748948]; 
0x0000000011708e: call qword ptr [rax+0x24748b4c]; 
0x000000000944fe: call qword ptr [rax+0x247c8b48]; 
0x000000001402ce: call qword ptr [rax+0x247c8d48]; 
0x0000000014046e: call qword ptr [rax+0x24b48d48]; 
0x000000000f35ae: call qword ptr [rax+0x27d80]; 
0x000000000f10ce: call qword ptr [rax+0x2824448b]; 
0x0000000009ebee: call qword ptr [rax+0x28508b48]; 
0x0000000015d55d: call qword ptr [rax+0x28]; 
0x000000000ab60e: call qword ptr [rax+0x28c48348]; 
0x0000000014d65e: call qword ptr [rax+0x29d06348]; 
0x000000001b9b3e: call qword ptr [rax+0x2bf41]; 
0x000000000900ce: call qword ptr [rax+0x2c74864]; 
0x000000001a217e: call qword ptr [rax+0x2c75c839]; 
0x0000000015da5e: call qword ptr [rax+0x2e66c35d]; 
0x0000000011e3ee: call qword ptr [rax+0x2fc53d80]; 
0x0000000011c80e: call qword ptr [rax+0x30037a80]; 
0x0000000016497e: call qword ptr [rax+0x3024448b]; 
0x0000000007a82e: call qword ptr [rax+0x308d8944]; 
0x0000000015ee9d: call qword ptr [rax+0x30]; 
0x000000000d9a92: call qword ptr [rax+0x340]; 
0x00000000174f8b: call qword ptr [rax+0x348]; 
0x00000000090a03: call qword ptr [rax+0x360]; 
0x00000000090403: call qword ptr [rax+0x368]; 
0x000000001bb8e8: call qword ptr [rax+0x370]; 
0x0000000015f16e: call qword ptr [rax+0x38738b48]; 
0x00000000072859: call qword ptr [rax+0x38]; 
0x000000001b815e: call qword ptr [rax+0x3ff88348]; 
0x0000000005c0be: call qword ptr [rax+0x4003d66]; 
0x000000000fd5ce: call qword ptr [rax+0x405e3941]; 
0x00000000083eee: call qword ptr [rax+0x40788b48]; 
0x0000000008b285: call qword ptr [rax+0x40]; 
0x0000000005d1fe: call qword ptr [rax+0x40bf41]; 
0x0000000010a17e: call qword ptr [rax+0x40bf]; 
0x0000000005f0ae: call qword ptr [rax+0x41058b48]; 
0x0000000018dace: call qword ptr [rax+0x416f0ff3]; 
0x000000001a9eae: call qword ptr [rax+0x420eb70f]; 
0x0000000018db4e: call qword ptr [rax+0x44318b48]; 
0x0000000014d55e: call qword ptr [rax+0x44904d8b]; 
0x0000000005e91e: call qword ptr [rax+0x45b60f41]; 
0x0000000007df3e: call qword ptr [rax+0x45f98949]; 
0x000000000551de: call qword ptr [rax+0x48068b48]; 
0x0000000003e37e: call qword ptr [rax+0x480ab60f]; 
0x0000000010f5ee: call qword ptr [rax+0x48247c80]; 
0x0000000005c3ae: call qword ptr [rax+0x48858b48]; 
0x0000000009989b: call qword ptr [rax+0x48]; 
0x0000000007a7ee: call qword ptr [rax+0x48bd8b48]; 
0x0000000009fb3e: call qword ptr [rax+0x48c78348]; 
0x000000001b86de: call qword ptr [rax+0x48d8894c]; 
0x00000000117dae: call qword ptr [rax+0x48df8948]; 
0x0000000004f99e: call qword ptr [rax+0x48e0894c]; 
0x000000000a60ee: call qword ptr [rax+0x48ed0148]; 
0x000000001b7a6e: call qword ptr [rax+0x49d38949]; 
0x0000000005869e: call qword ptr [rax+0x49f0894c]; 
0x0000000010fabe: call qword ptr [rax+0x49f2894d]; 
0x0000000002b33e: call qword ptr [rax+0x4c378b49]; 
0x0000000003c5fe: call qword ptr [rax+0x4cc03145]; 
0x00000000083a7e: call qword ptr [rax+0x4ce2894c]; 
0x00000000129bde: call qword ptr [rax+0x4ced3145]; 
0x00000000095fce: call qword ptr [rax+0x4cf2894c]; 
0x000000000ee2de: call qword ptr [rax+0x4dfc894d]; 
0x0000000008f16e: call qword ptr [rax+0x50738b48]; 
0x00000000175207: call qword ptr [rax+0x50]; 
0x000000000903be: call qword ptr [rax+0x50b78b48]; 
0x00000000156cce: call qword ptr [rax+0x513d8d48]; 
0x0000000009cc5e: call qword ptr [rax+0x54415541]; 
0x0000000005fe0e: call qword ptr [rax+0x55b60f41]; 
0x0000000004829e: call qword ptr [rax+0x56415741]; 
0x000000000815fc: call qword ptr [rax+0x58]; 
0x00000000152fbe: call qword ptr [rax+0x593d8d48]; 
0x000000000a341e: call qword ptr [rax+0x5f72158b]; 
0x0000000002e7be: call qword ptr [rax+0x5fa8341]; 
0x00000000094b3d: call qword ptr [rax+0x640]; 
0x000000001a97be: call qword ptr [rax+0x660eb70f]; 
0x0000000008d2ce: call qword ptr [rax+0x68538b48]; 
0x00000000083c1b: call qword ptr [rax+0x68]; 
0x00000000140ade: call qword ptr [rax+0x6d8b4d]; 
0x000000001abb6e: call qword ptr [rax+0x6f7ea1c4]; 
0x000000000852db: call qword ptr [rax+0x70]; 
0x00000000047d9e: call qword ptr [rax+0x71158b4c]; 
0x000000000a26ea: call qword ptr [rax+0x74c08548]; 
0x000000001a7fbe: call qword ptr [rax+0x74c98548]; 
0x0000000009b26e: call qword ptr [rax+0x74e48545]; 
0x00000000121ade: call qword ptr [rax+0x74f5394c]; 
0x00000000115f4e: call qword ptr [rax+0x7528b848]; 
0x0000000010d7fe: call qword ptr [rax+0x75f68548]; 
0x0000000015884e: call qword ptr [rax+0x77c13948]; 
0x00000000157fee: call qword ptr [rax+0x77e2394c]; 
0x0000000003cbbe: call qword ptr [rax+0x7880c931]; 
0x0000000008b84d: call qword ptr [rax+0x78]; 
0x00000000175aee: call qword ptr [rax+0x7e0f41f3]; 
0x0000000008ab87: call qword ptr [rax+0x80]; 
0x0000000007e83e: call qword ptr [rax+0x8244489]; 
0x0000000003139e: call qword ptr [rax+0x82444c7]; 
0x0000000016f63e: call qword ptr [rax+0x840c748]; 
0x00000000070cce: call qword ptr [rax+0x8418d4c]; 
0x000000000a78de: call qword ptr [rax+0x8468b49]; 
0x0000000007e2ae: call qword ptr [rax+0x84a8b44]; 
0x0000000016307e: call qword ptr [rax+0x87b8348]; 
0x00000000078bde: call qword ptr [rax+0x87e8b48]; 
0x000000001134f7: call qword ptr [rax+0x88]; 
0x0000000015d4fa: call qword ptr [rax+0x8]; 
0x0000000008aa19: call qword ptr [rax+0x90]; 
0x000000001158fe: call qword ptr [rax+0x91d8b48]; 
0x00000000037ade: call qword ptr [rax+0x9e3d48]; 
0x0000000009d08e: call qword ptr [rax+0xbbc41]; 
0x0000000005c0ae: call qword ptr [rax+0xc003d66]; 
0x000000000876be: call qword ptr [rax+0xc244489]; 
0x0000000019bcfe: call qword ptr [rax+0xea8149]; 
0x00000000038fae: call qword ptr [rax+0xf003880]; 
0x00000000078b8e: call qword ptr [rax+0xf08c5f6]; 
0x000000000bd05e: call qword ptr [rax+0xf11280f]; 
0x00000000055c1e: call qword ptr [rax+0xf66c031]; 
0x000000000d778e: call qword ptr [rax+0xf6f0ff3]; 
0x0000000010964e: call qword ptr [rax+0xff68440]; 
0x0000000016e45e: call qword ptr [rax+0xff6854d]; 
0x0000000005d8dc: call qword ptr [rax+r8*8]; 
0x0000000005d8dd: call qword ptr [rax+rax*8]; 
0x00000000070406: call qword ptr [rax+rax]; 
0x00000000074bc1: call qword ptr [rax+rcx*8-0x40]; 
0x0000000013884e: call qword ptr [rax-0x1037cbf]; 
0x0000000016ed2e: call qword ptr [rax-0x11b427d]; 
0x000000000398be: call qword ptr [rax-0x140176b7]; 
0x0000000016eb3e: call qword ptr [rax-0x140bf]; 
0x000000000aa5ae: call qword ptr [rax-0x141676b7]; 
0x000000001066be: call qword ptr [rax-0x142bf]; 
0x00000000165dae: call qword ptr [rax-0x14cfbc75]; 
0x000000001202ce: call qword ptr [rax-0x160b76b3]; 
0x000000000e5f3e: call qword ptr [rax-0x1612cebb]; 
0x000000000fd86e: call qword ptr [rax-0x161bcebb]; 
0x00000000097afe: call qword ptr [rax-0x162276bf]; 
0x000000000f206e: call qword ptr [rax-0x163dfeb4]; 
0x000000000da80e: call qword ptr [rax-0x16d272b4]; 
0x000000000f5c6e: call qword ptr [rax-0x171876b4]; 
0x00000000168fce: call qword ptr [rax-0x176f76b8]; 
0x0000000003746e: call qword ptr [rax-0x17c474b8]; 
0x00000000134c39: call qword ptr [rax-0x18]; 
0x00000000038f9e: call qword ptr [rax-0x1a77a39]; 
0x000000000522fe: call qword ptr [rax-0x1f7c74b7]; 
0x0000000008c05e: call qword ptr [rax-0x20f418]; 
0x0000000011b82e: call qword ptr [rax-0x26ea74b8]; 
0x0000000009bb2e: call qword ptr [rax-0x26fa74b8]; 
0x00000000105d5e: call qword ptr [rax-0x273a7eb7]; 
0x00000000085e1e: call qword ptr [rax-0x275074b7]; 
0x000000000e6eee: call qword ptr [rax-0x32fa38b8]; 
0x000000000a2ebe: call qword ptr [rax-0x36c272b8]; 
0x0000000003fede: call qword ptr [rax-0x36ce2dcf]; 
0x0000000004243e: call qword ptr [rax-0x36fa74b8]; 
0x0000000007cb2e: call qword ptr [rax-0x382708b8]; 
0x0000000013588e: call qword ptr [rax-0x3c0776b8]; 
0x00000000041562: call qword ptr [rax-0x3d]; 
0x000000001a74fe: call qword ptr [rax-0x3e28023b]; 
0x0000000005fece: call qword ptr [rax-0x3ea1f00e]; 
0x00000000128f9e: call qword ptr [rax-0x3ec274b8]; 
0x000000001a756e: call qword ptr [rax-0x3f43f00d]; 
0x00000000040d6e: call qword ptr [rax-0x3fce09cf]; 
0x0000000014473e: call qword ptr [rax-0x3fce2dcf]; 
0x0000000015faee: call qword ptr [rax-0x41]; 
0x0000000007f14e: call qword ptr [rax-0x41fb3380]; 
0x0000000010669e: call qword ptr [rax-0x42bf]; 
0x000000000e76fe: call qword ptr [rax-0x43bf]; 
0x000000001758de: call qword ptr [rax-0x452dcebb]; 
0x0000000009ec4e: call qword ptr [rax-0x46fa74b8]; 
0x0000000008382e: call qword ptr [rax-0x48]; 
0x000000001652fe: call qword ptr [rax-0x49163fcf]; 
0x000000000a70bd: call qword ptr [rax-0x4de276b8]; 
0x000000001230ee: call qword ptr [rax-0x4fa72b8]; 
0x0000000014515e: call qword ptr [rax-0x56fa74b8]; 
0x000000000615ae: call qword ptr [rax-0x59d272b4]; 
0x000000000eab2e: call qword ptr [rax-0x5b5a418]; 
0x000000000e4cae: call qword ptr [rax-0x5c8374be]; 
0x0000000002801e: call qword ptr [rax-0x5e1f00d]; 
0x0000000014c0ce: call qword ptr [rax-0x5efa74b8]; 
0x0000000006c70e: call qword ptr [rax-0x5f7a74b8]; 
0x0000000004326e: call qword ptr [rax-0x66ea74b8]; 
0x000000001525de: call qword ptr [rax-0x6da76b4]; 
0x000000000f338e: call qword ptr [rax-0x6dc272b8]; 
0x0000000011590e: call qword ptr [rax-0x6e274b8]; 
0x000000000ac8fe: call qword ptr [rax-0x72b32dcf]; 
0x000000001736ce: call qword ptr [rax-0x761976b4]; 
0x000000000f479e: call qword ptr [rax-0x76aaabbf]; 
0x000000000f5aee: call qword ptr [rax-0x76b6a8bf]; 
0x0000000002d61d: call qword ptr [rax-0x76befff0]; 
0x000000001335ee: call qword ptr [rax-0x777a74b8]; 
0x0000000016eabe: call qword ptr [rax-0x77a74b8]; 
0x000000001a9e8e: call qword ptr [rax-0x77e949f1]; 
0x0000000015b83e: call qword ptr [rax-0x7adbfb75]; 
0x0000000010f06e: call qword ptr [rax-0x7af0a4c4]; 
0x00000000083bbe: call qword ptr [rax-0x7af372b4]; 
0x00000000111f4e: call qword ptr [rax-0x7bf0247b]; 
0x0000000012ee5e: call qword ptr [rax-0x7cb7f978]; 
0x0000000007df0e: call qword ptr [rax-0x7cfbbd75]; 
0x000000000a70f5: call qword ptr [rax-0x7de276b8]; 
0x000000001a82ae: call qword ptr [rax-0x7e2d76b7]; 
0x0000000016fb1e: call qword ptr [rax-0x7f49fa39]; 
0x0000000003b15e: call qword ptr [rax-0x7f8274b8]; 
0x000000000a73fe: call qword ptr [rax-0x876b370]; 
0x0000000009f51e: call qword ptr [rax-0x8c374b5]; 
0x0000000007954e: call qword ptr [rax-0x8cf7a39]; 
0x000000000c933e: call qword ptr [rax-0x9037cbf]; 
0x000000001b80fe: call qword ptr [rax-0x9ce3877]; 
0x00000000063e77: call qword ptr [rax]; 
0x00000000088355: call qword ptr [rbp+0x10]; 
0x0000000008d7e2: call qword ptr [rbp+0x18]; 
0x000000000838f3: call qword ptr [rbp+0x20]; 
0x00000000084468: call qword ptr [rbp+0x30]; 
0x00000000072336: call qword ptr [rbp+0x38]; 
0x000000001168b2: call qword ptr [rbp+0x40]; 
0x000000000814b7: call qword ptr [rbp+0x48]; 
0x00000000053352: call qword ptr [rbp+0x4c]; 
0x000000000937aa: call qword ptr [rbp+0x53]; 
0x000000000815d3: call qword ptr [rbp+0x58]; 
0x0000000007f227: call qword ptr [rbp+0x60]; 
0x00000000081810: call qword ptr [rbp+0x68]; 
0x0000000008b412: call qword ptr [rbp+0x70]; 
0x0000000010754c: call qword ptr [rbp+0x77000000]; 
0x00000000085c64: call qword ptr [rbp+0x80]; 
0x0000000008ba35: call qword ptr [rbp+0x90]; 
0x000000001197b7: call qword ptr [rbp-0x42]; 
0x0000000009d438: call qword ptr [rbp]; 
0x0000000007ed5e: call qword ptr [rbx+0x10]; 
0x0000000008da29: call qword ptr [rbx+0x18]; 
0x0000000012ea79: call qword ptr [rbx+0x28]; 
0x00000000029ede: call qword ptr [rbx+0x330]; 
0x000000001750c1: call qword ptr [rbx+0x358]; 
0x00000000090074: call qword ptr [rbx+0x360]; 
0x00000000073c52: call qword ptr [rbx+0x38]; 
0x000000000ef40a: call qword ptr [rbx+0x40]; 
0x000000000e1c96: call qword ptr [rbx+0x48924924]; 
0x0000000008fb2a: call qword ptr [rbx+0x48]; 
0x0000000008a101: call qword ptr [rbx+0x60]; 
0x000000000949af: call qword ptr [rbx+0x640]; 
0x0000000007f09f: call qword ptr [rbx+0x80]; 
0x0000000008c0d4: call qword ptr [rbx+0x88]; 
0x0000000007ebed: call qword ptr [rbx+0x90]; 
0x0000000006aecc: call qword ptr [rbx+0xf]; 
0x000000000e93ed: call qword ptr [rbx+rdx]; 
0x00000000147054: call qword ptr [rbx-0x18]; 
0x0000000006170b: call qword ptr [rbx-0x59]; 
0x00000000142533: call qword ptr [rbx-0x77]; 
0x0000000003557e: call qword ptr [rbx]; 
0x000000000db565: call qword ptr [rcx+0x14]; 
0x00000000029efd: call qword ptr [rcx+0x330]; 
0x00000000072dc7: call qword ptr [rcx+0x38]; 
0x00000000029eb9: call qword ptr [rcx]; 
0x00000000131972: call qword ptr [rdi+0x28]; 
0x00000000080054: call qword ptr [rdi+0x38]; 
0x0000000015ff34: call qword ptr [rdi+0x40]; 
0x0000000010d1fd: call qword ptr [rdi+0x5ba1774]; 
0x0000000008ac60: call qword ptr [rdi+0x80]; 
0x0000000008a7bf: call qword ptr [rdi+0x90]; 
0x0000000005bfb3: call qword ptr [rdi+rcx]; 
0x000000000d40e6: call qword ptr [rdi-0xb]; 
0x0000000009bb76: call qword ptr [rdi]; 
0x000000001675b8: call qword ptr [rdx+0x20]; 
0x00000000072feb: call qword ptr [rdx+rax*8]; 
0x000000000cf372: call qword ptr [rdx-0x72b7fff0]; 
0x0000000012817b: call qword ptr [rdx]; 
0x00000000076594: call qword ptr [rsi+0x38]; 
0x00000000160285: call qword ptr [rsi+0x40]; 
0x0000000008123c: call qword ptr [rsi+0x48]; 
0x00000000132a95: call qword ptr [rsi+0x74]; 
0x0000000008ca5e: call qword ptr [rsi+0x78]; 
0x00000000085986: call qword ptr [rsi+0x80]; 
0x000000000858a0: call qword ptr [rsi+0x90]; 
0x000000000a3c32: call qword ptr [rsi+rsi*2]; 
0x000000000b8b22: call qword ptr [rsi]; 
0x0000000013e597: call qword ptr [rsp+0x10]; 
0x0000000008f12e: call qword ptr [rsp+0x18]; 
0x000000000ee52b: call qword ptr [rsp+0x20]; 
0x000000000ee101: call qword ptr [rsp+0x28]; 
0x000000000ee535: call qword ptr [rsp+0x30]; 
0x000000000901a7: call qword ptr [rsp+0x358]; 
0x000000000902a5: call qword ptr [rsp+0x360]; 
0x00000000073799: call qword ptr [rsp+0x38]; 
0x000000001074bd: call qword ptr [rsp+0x40]; 
0x0000000008c972: call qword ptr [rsp+0x48]; 
0x000000000e9a9c: call qword ptr [rsp+0x50]; 
0x000000000e8143: call qword ptr [rsp+0x58]; 
0x00000000138e1e: call qword ptr [rsp+0x60]; 
0x00000000153a37: call qword ptr [rsp+0x68]; 
0x00000000136e6b: call qword ptr [rsp+0x70]; 
0x0000000008b5b1: call qword ptr [rsp+0x80]; 
0x0000000008bf79: call qword ptr [rsp+0x88]; 
0x000000000298b8: call qword ptr [rsp]; 
0x0000000015382d: call r10; 
0x0000000010ad69: call r11; 
0x0000000002b78d: call r12; 
0x0000000002f4d3: call r13; 
0x0000000002b8b9: call r14; 
0x00000000029e19: call r15; 
0x0000000007e185: call r8; 
0x00000000029d8e: call rax; 
0x000000000c5d5d: call rbp; 
0x0000000002b9cc: call rbp; 
0x0000000002aa9d: call rbx; 
0x00000000029e66: call rcx; 
0x00000000029e1a: call rdi; 
0x00000000036c06: call rdx; 
0x0000000002b8ba: call rsi; 
0x0000000002b78e: call rsp; 
0x00000000179ab7: cdq; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000045e28: cdq; idiv rsi; ret; 
0x000000000a0bd3: cdq; ja short 0x00000000000a0bce; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x00000000128073: cdq; or eax, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000015f254: cdq; or eax, [rax]; jmp qword ptr [rdx+rax*8]; 
0x000000000961c7: cdq; sbb [rax], al; ret; 
0x000000000961c6: cdq; sbb [rax], al; ret; 
0x00000000160183: cdq; std; jmp qword ptr [rsi+0xf]; 
0x0000000015cd6b: cdq; std; jmp qword ptr [rsi-0x70]; 
0x000000001a19df: cdq; vzeroupper; ret; 
0x00000000175e4c: cdqe; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000000924a4: cdqe; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000016cda7: cdqe; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x00000000175e1a: cdqe; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000000af9fa: clc; adc al, [rbx-0x76befc17]; ret far; 
0x00000000163ade: clc; add [rax+0x1], edi; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000001411bc: clc; add [rax], al; add [rcx-0x77], al; ret; 
0x0000000011396d: clc; add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x000000000776dc: clc; add [rax], al; add al, ch; ret far; 
0x00000000130571: clc; add [rbp+0x19], eax; fild st, dword ptr [rcx-0x7d]; ret; 
0x00000000142d07: clc; add [rbp+rcx-0x7b], esi; shl byte ptr [rbp+0x19], 0x44; mov eax, eax; ret; 
0x0000000016b531: clc; add [rbp-0x10], esi; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000016c479: clc; add [rbp-0x2d], esi; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000009df8a: clc; add [rcx], ebx; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000eaf29: clc; add [rdi+0x13], edi; pop rbx; ret; 
0x000000001721a7: clc; add [rdi+0x15], edi; add rsp, 0x8; ret; 
0x00000000150d2a: clc; add [rdi+0x1a], edi; pop rbp; ret; 
0x000000000db58f: clc; add [rdi+0x1d], edi; add rsp, 0x8; ret; 
0x000000000460cf: clc; add [rdi+0x1d], edi; pop rbp; ret; 
0x000000001bb9cd: clc; add [rdi+0x1f], edi; pop rbx; ret; 
0x0000000004530e: clc; add [rdi+0x26], edi; xor eax, eax; pop rbx; ret; 
0x0000000012662f: clc; add [rdi+0x2d], esi; mov eax, 0x4; syscall; 
0x000000001266ef: clc; add [rdi+0x2d], esi; mov eax, 0x6; syscall; 
0x0000000012668e: clc; add [rdi+0x2e], esi; mov eax, 0x5; syscall; 
0x00000000155c29: clc; add [rdi+0x33], edi; add rsp, 0x8; ret; 
0x0000000008d09f: clc; add [rdi+0x3d], edi; add rsp, 0x8; ret; 
0x0000000011e93d: clc; add [rdi+0x3f], edi; pop rbp; ret; 
0x00000000125a70: clc; add [rdi+0x4], edi; ret; 
0x0000000013ea44: clc; add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x00000000080a57: clc; add [rdi+0x5], edi; ret; 
0x000000001571be: clc; add [rdi+0x6], edi; ret; 
0x000000000620f1: clc; add [rdi+0xb], edi; ret; 
0x000000000a10c2: clc; add [rdx+rcx+0x48], esi; add esp, 0x8; ret; 
0x00000000092338: clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x0000000005a0f5: clc; add cl, [rcx+0x39]; ret; 
0x0000000015575f: clc; add dh, [rbp+0x1d]; mov eax, r8d; ret; 
0x000000001467f6: clc; add dh, [rcx+rsi*4-0x75]; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000128646: clc; add dh, [rdi+0x1e]; mov eax, 0x1f; syscall; 
0x00000000141df9: clc; add eax, 0x10; ret; 
0x00000000183f47: clc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001bb1fe: clc; add eax, 0x3a1ae900; idiv bh; nop [rax+rax]; ret; 
0x0000000015f23e: clc; add esi, [rsi+0xe]; mov eax, 0x2; ret; 
0x000000001afa12: clc; add rax, r8; ret; 
0x00000000199ba3: clc; add rax, r8; vzeroupper; ret; 
0x000000000b4987: clc; add rax, rcx; ret; 
0x000000000b51bb: clc; add rax, rsi; ret; 
0x000000000974d3: clc; and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x000000000922f8: clc; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000003a175: clc; and eax, 0x7f; ret; 
0x000000001367b9: clc; and eax, 0xffffff; ret; 
0x00000000136775: clc; bswap eax; ret; 
0x000000000a803e: clc; call far fword ptr [rbx+0x44]; 
0x000000000a79d2: clc; call far fword ptr [rbx+0x5d]; 
0x000000000da4cb: clc; call far fword ptr [rcx+0x5e]; 
0x000000000da3e0: clc; call far fword ptr [rdx+0x59]; 
0x000000000e7177: clc; call rax; 
0x00000000099fbb: clc; clc; jmp qword ptr [rsi-0x70]; 
0x00000000141dd9: clc; cmc; je short 0x0000000000141dd0; pop rbx; ret; 
0x000000000a8090: clc; cmp [r8+0x8], rsi; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x0000000016d5f4: clc; cmp bh, ch; call far fword ptr [rbx+0x48]; 
0x000000001a6746: clc; cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000001217b5: clc; cmp rdi, rax; jne short 0x00000000001217e8; mov eax, 0x88; syscall; 
0x000000001b14ad: clc; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x00000000045e26: clc; cqo; idiv rsi; ret; 
0x00000000135b60: clc; dec dword ptr [rax-0x73]; adc eax, 0x6b4d7; cmove rax, rdx; ret; 
0x000000000a0bd5: clc; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x0000000009d01c: clc; dec dword ptr [rax-0x77]; ret; 
0x000000000c7cf3: clc; dec dword ptr [rax-0x7d]; ret; 
0x0000000009edc6: clc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000164fd6: clc; dec dword ptr [rcx-0x1437b]; jmp qword ptr [rsi-0x70]; 
0x0000000012b94e: clc; dec dword ptr [rdi]; test [rbp+rdi*8-0x1], edi; jmp qword ptr [rsi+0x2e]; 
0x00000000029fc6: clc; dec dword ptr [rdi]; test [rdx+0x48000000], ah; add esp, 0x98; ret; 
0x0000000013ff59: clc; emms; mov esp, 0xfffeb1e9; jmp qword ptr [rsi+0xf]; 
0x000000000da984: clc; fxtract; dec dword ptr [rax-0x77]; ret; 
0x00000000098876: clc; inc dword ptr [rcx+0x39]; ret far; 
0x00000000174496: clc; inc dword ptr [rcx-0x77]; ret; 
0x000000001994b1: clc; ja short 0x0000000000199477; xor eax, eax; ret; 
0x00000000199b13: clc; ja short 0x0000000000199ad9; nop [rax+rax]; xor eax, eax; ret; 
0x0000000019d372: clc; ja short 0x000000000019d338; xor eax, eax; vzeroupper; ret; 
0x0000000019d502: clc; ja short 0x000000000019d4c8; xor eax, eax; vzeroupper; ret; 
0x0000000019db1c: clc; ja short 0x000000000019dae2; xor eax, eax; ret; 
0x0000000019dcc1: clc; ja short 0x000000000019dc87; mov rax, r8; vzeroupper; ret; 
0x0000000019dd65: clc; ja short 0x000000000019dd2b; mov rax, r8; vzeroupper; ret; 
0x0000000019ee14: clc; ja short 0x000000000019edda; nop [rax+rax]; vzeroupper; ret; 
0x000000001a05bd: clc; ja short 0x00000000001a0583; mov [rdi], dl; vzeroupper; ret; 
0x000000001a16b4: clc; ja short 0x00000000001a167a; xor eax, eax; ret; 
0x000000001a2331: clc; ja short 0x00000000001a22f7; xor eax, eax; vzeroupper; ret; 
0x000000001a24d1: clc; ja short 0x00000000001a2497; xor eax, eax; vzeroupper; ret; 
0x000000001a2983: clc; ja short 0x00000000001a2949; xor eax, eax; ret; 
0x000000001a2b95: clc; ja short 0x00000000001a2b5b; mov rax, r8; vzeroupper; ret; 
0x000000001a2c49: clc; ja short 0x00000000001a2c0f; mov rax, r8; vzeroupper; ret; 
0x0000000011a9e7: clc; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000017bc1c: clc; jb short 0x000000000017bc27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bccc: clc; jb short 0x000000000017bcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e5fc: clc; jb short 0x000000000017e607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e6ac: clc; jb short 0x000000000017e6b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000008a5cd: clc; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000041231: clc; je 0x0000000000041178; ret; 
0x00000000061fcb: clc; je short 0x0000000000061ff6; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000114208: clc; je short 0x0000000000114210; mov eax, r9d; ret; 
0x000000000a8225: clc; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001a691b: clc; jmp qword ptr [rsi+0x66]; 
0x000000000a0f48: clc; jmp qword ptr [rsi+0xf]; 
0x00000000099fbc: clc; jmp qword ptr [rsi-0x70]; 
0x000000000b1758: clc; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001a6749: clc; jne 0x00000000001a6850; ret; 
0x000000000546fa: clc; jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x00000000180226: clc; lea r11, [rip+0x62ee2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180070: clc; lea r11, [rip+0x63098]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d752: clc; lea r11, [rip+0x657f6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d678: clc; lea r11, [rip+0x658d0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b098f: clc; lea rax, [rdi+r8]; ret; 
0x000000001a054f: clc; lea rax, [rdi+r8]; vzeroupper; ret; 
0x00000000133d99: clc; leave; ret; 
0x000000000b149c: clc; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x0000000017c817: clc; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017d16b: clc; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d36b: clc; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d56b: clc; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017c7fb: clc; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c833: clc; mov [rdi-0x8], rdx; ret; 
0x0000000017d187: clc; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182106: clc; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017d387: clc; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182076: clc; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017d587: clc; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000181fe6: clc; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000001b0987: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001b2cb7: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b17: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f817: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001a3f2f: clc; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000001b2cbf: clc; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec6f: clc; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000011d315: clc; mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000011d2a5: clc; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000009eb95: clc; mov r10d, 0x8; syscall; 
0x000000000c4a64: clc; mov rsi, [rsi]; mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x00000000045dd5: clc; neg eax; cmovs eax, edi; ret; 
0x00000000045de6: clc; neg rax; cmovs rax, rdi; ret; 
0x00000000096d6a: clc; not esi; and esi, 0x80; syscall; 
0x000000000dd99b: clc; notrack jmp rax; 
0x0000000005a34a: clc; or [rdi-0x2e], esi; mov rax, r8; ret; 
0x0000000009d5eb: clc; or al, 0x75; xor [rax+0x3], bh; add rsp, 0x8; ret; 
0x0000000009d579: clc; or al, 0x75; xor bh, [rax+0x3]; add rsp, 0x8; ret; 
0x000000001367d3: clc; or eax, esi; bswap eax; ret; 
0x00000000071e6d: clc; or ecx, [rdi]; test [rbp-0xa000000], edi; ret; 
0x00000000199f52: clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000061faf: clc; push qword ptr [rbp+rcx+0x44]; mov eax, eax; ret; 
0x0000000007f865: clc; push qword ptr [rdi+rcx+0x48]; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000012941e: clc; push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x000000000a2648: clc; push qword ptr [rsp+rcx+0x48]; add esp, 0x8; ret; 
0x000000000ecec6: clc; push rbx; pop rax; jne short 0x00000000000eced0; ret; 
0x000000000415ca: clc; ret far; 
0x00000000054def: clc; ret; 
0x00000000136785: clc; rol ax, 0x8; ret; 
0x0000000013669f: clc; sar rax, 0x6; ret; 
0x0000000005a164: clc; saveprevssp; mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x000000000f1dcc: clc; sbb [rcx], bh; ret; 
0x000000000d8cf9: clc; sbb [rdi+0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000054e69: clc; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x0000000012567c: clc; shl rax, 0x20; and rax, rcx; or rax, rdx; ret; 
0x00000000136839: clc; shr eax, 0x18; ret; 
0x000000001a2789: clc; shr eax, 0x2; vzeroupper; ret; 
0x000000000d85ea: clc; shr rax, 0x2; ret; 
0x000000001a28b0: clc; shr rax, 0x2; vzeroupper; ret; 
0x0000000007dcb4: clc; sub [rdi+0x10], esi; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000018d2c0: clc; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x0000000018d4b6: clc; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000018d4d8: clc; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x0000000018d4fe: clc; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x0000000018d516: clc; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x0000000018d53c: clc; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x0000000018d55e: clc; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x0000000018d57c: clc; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x0000000018d258: clc; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x0000000018d59e: clc; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x0000000018d5be: clc; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x0000000018d5de: clc; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x0000000018d5fe: clc; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x0000000018d620: clc; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x0000000018d640: clc; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x0000000018d660: clc; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x000000000562df: clc; sub rax, fs:[0x28]; jne short 0x0000000000056365; leave; ret; 
0x0000000004140b: clc; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000019a28f: clc; sub rcx, rdi; or rax, rcx; cmovne eax, edx; ret; 
0x00000000096ea9: clc; syscall; 
0x00000000036b06: clc; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x0000000019947c: clc; vzeroupper; ret; 
0x00000000096558: clc; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x000000001a73cb: clc; xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a85d8: clc; xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001ae00e: clc; xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x000000000c37a7: cld; adc [rax], al; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000057112: cld; add [rax+rax], cl; add [rdi+rax*4-0x17], dh; sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000d42c2: cld; add [rax+rax], cl; add [rdi+rax*4-0x17], dh; sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x000000000ecf9a: cld; add [rax], al; ret; 
0x000000000ffb63: cld; add [rax], eax; add [rcx], bh; ret; 
0x0000000015ee91: cld; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000015ef8e: cld; call qword ptr [rax+0x30]; 
0x0000000005c0bd: cld; call qword ptr [rax+0x4003d66]; 
0x00000000078bdd: cld; call qword ptr [rax+0x87e8b48]; 
0x0000000005d59d: cld; call qword ptr [rax-0x5e1f00d]; 
0x000000001168f8: cld; cld; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001a6761: cld; cmp eax, [rsi-0x4]; jne 0x00000000001a6850; ret; 
0x000000001a6841: cld; cmp eax, [rsi-0x4]; jne short 0x00000000001a6850; xor eax, eax; ret; 
0x000000001a6010: cld; cmp eax, ecx; jne 0x00000000001a6220; xor eax, eax; ret; 
0x000000001a358d: cld; cmp ecx, [rsi+rdx-0x4]; jne short 0x00000000001a35aa; ret; 
0x000000001177b4: cld; dec dword ptr [rax-0x77]; ret; 
0x0000000006bee6: cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000004124b: cld; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x000000001a73d2: cld; ja short 0x00000000001a7398; vzeroupper; ret; 
0x000000001a76f4: cld; ja short 0x00000000001a76ba; vzeroupper; ret; 
0x000000001a7b02: cld; ja short 0x00000000001a7ac8; vzeroupper; ret; 
0x000000001a7df1: cld; ja short 0x00000000001a7db7; vzeroupper; ret; 
0x000000001a85df: cld; ja short 0x00000000001a85a5; vzeroupper; ret; 
0x000000001a89b9: cld; ja short 0x00000000001a897f; vzeroupper; ret; 
0x000000001a8a96: cld; ja short 0x00000000001a8a5c; vzeroupper; ret; 
0x000000001a8e13: cld; ja short 0x00000000001a8dd9; vzeroupper; ret; 
0x000000001a8e6e: cld; ja short 0x00000000001a8e34; vzeroupper; ret; 
0x000000001a94a8: cld; ja short 0x00000000001a946e; vzeroupper; ret; 
0x000000001a9731: cld; ja short 0x00000000001a96f7; vzeroupper; ret; 
0x000000001a9bb4: cld; ja short 0x00000000001a9b7a; vzeroupper; ret; 
0x000000001aa78e: cld; ja short 0x00000000001aa754; vzeroupper; ret; 
0x000000001aab3e: cld; ja short 0x00000000001aab04; vzeroupper; ret; 
0x000000001aade4: cld; ja short 0x00000000001aadaa; vzeroupper; ret; 
0x000000001ab3fe: cld; ja short 0x00000000001ab3c4; vzeroupper; ret; 
0x000000001ab89a: cld; ja short 0x00000000001ab860; vzeroupper; ret; 
0x000000001ac0bc: cld; ja short 0x00000000001ac082; vzeroupper; ret; 
0x000000001ac9df: cld; ja short 0x00000000001ac9a5; vzeroupper; ret; 
0x000000001acb4f: cld; ja short 0x00000000001acb15; vzeroupper; ret; 
0x000000001ace62: cld; ja short 0x00000000001ace28; vzeroupper; ret; 
0x000000001acec7: cld; ja short 0x00000000001ace8d; vzeroupper; ret; 
0x000000001ad4a7: cld; ja short 0x00000000001ad46d; vzeroupper; ret; 
0x000000001ad534: cld; ja short 0x00000000001ad4fa; vzeroupper; ret; 
0x000000001add52: cld; ja short 0x00000000001add18; vzeroupper; ret; 
0x000000001aded4: cld; ja short 0x00000000001ade9a; vzeroupper; ret; 
0x000000001ae015: cld; ja short 0x00000000001adfdb; vzeroupper; ret; 
0x000000001ae359: cld; ja short 0x00000000001ae31f; vzeroupper; ret; 
0x0000000017b6dc: cld; jb short 0x000000000017b6e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b78c: cld; jb short 0x000000000017b797; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e0bc: cld; jb short 0x000000000017e0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e16c: cld; jb short 0x000000000017e177; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000167363: cld; jmp qword ptr [rsi+0x2e]; 
0x0000000005f72f: cld; jmp qword ptr [rsi+0x2e]; 
0x000000000726f3: cld; jmp qword ptr [rsi+0x66]; 
0x00000000073615: cld; jmp qword ptr [rsi+0xf]; 
0x0000000011ea9c: cld; jmp qword ptr [rsi-0x70]; 
0x000000001168f9: cld; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001a6764: cld; jne 0x00000000001a6850; ret; 
0x000000001a3591: cld; jne short 0x00000000001a35aa; ret; 
0x000000001a6844: cld; jne short 0x00000000001a6850; xor eax, eax; ret; 
0x0000000015ee94: cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000001b096d: cld; lea rax, [rdi+r8]; ret; 
0x000000001a052d: cld; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000016cce9: cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x0000000017c9da: cld; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbba: cld; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cd9a: cld; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf7a: cld; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cfa2: cld; mov [rdi-0x4], edx; ret; 
0x0000000017d1a4: cld; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d3a4: cld; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d5a4: cld; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017c9f6: cld; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182315: cld; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cbd6: cld; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182295: cld; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cdb6: cld; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182215: cld; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cf96: cld; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182195: cld; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x000000001b0966: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001b2c96: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b06: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f7f6: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001a3f41: cld; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000000c4a59: cld; mov [rdi], esi; ret; 
0x000000001b2c9d: cld; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec4d: cld; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019a256: cld; mov edi, [rsi+rdx-0x4]; sub ecx, edi; or eax, ecx; ret; 
0x000000000c4a53: cld; mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x00000000133c7c: cld; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000aaee6: cld; or [rax+0xf], cl; ret; 
0x00000000096ab6: cld; or [rax], eax; nop [rax+rax]; endbr64; ret; 
0x000000000c498f: cld; ret; 
0x000000001360fb: cld; std; call qword ptr [rax-0x18]; 
0x00000000041802: cld; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000019a25a: cld; sub ecx, edi; or eax, ecx; ret; 
0x000000001af491: cld; vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001a6ed6: cld; vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a40b1: cld; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e77: cld; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a459f: cld; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000019f7fd: cld; vzeroupper; ret; 
0x000000000c39e7: cli; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000033ea8: cli; add [rax], al; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x00000000155063: cli; add [rbp+0x21], esi; ret; 
0x00000000095e25: cli; add [rdi+0x17], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000012c702: cli; add [rdi+0x1a], edi; add rsp, 0x18; ret; 
0x000000000c5150: cli; add [rdi+0x1c], esi; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x0000000017227e: cli; add [rdi+0x1e], edi; add rsp, 0x10; pop rbp; ret; 
0x000000001afc56: cli; add [rdi+0x26], esi; jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x0000000016d093: cli; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x000000001721fe: cli; add [rdi+0x2e], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000017246a: cli; add [rdi+0x32], edi; add rsp, 0x10; pop rbp; ret; 
0x000000001a72e0: cli; add [rdi+0x3c], esi; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x00000000099a0b: cli; add [rdi+0x49], edi; nop; add rsp, 0x18; ret; 
0x00000000099b27: cli; add [rdi+0x55], edi; nop; add rsp, 0x18; ret; 
0x000000000ce80b: cli; add [rdi], ecx; mov gs, [rdi]; add eax, 0x89490000; ret far; 
0x000000001a462f: cli; add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000001a3f60: cli; add [rdx+0x4], esi; mov cl, [rsi]; mov [rdi], cl; ret; 
0x00000000113a47: cli; add al, 0x74; or [rax+0x1c], edi; syscall; 
0x000000001b8a81: cli; add al, 0x74; or ecx, [rcx-0x7d]; ret; 
0x00000000084609: cli; add ch, [rcx]; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x000000001a4622: cli; add dh, [rdx+0x8]; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x0000000016d083: cli; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000183dc7: cli; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000109a52: cli; add esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x0000000016b696: cli; and [rax-0x77], cl; push rsp; and al, 0x8; call qword ptr [rax+0x8]; 
0x000000000c50a4: cli; and [rdi+0x18], dh; movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x000000001a45eb: cli; and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000011d300: cli; and [rsp+rbp*8-0x3a], dh; inc dword ptr [rax]; ret; 
0x0000000008a003: cli; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000041423: cli; andpd xmm0, [rip+0x1a0c64]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x0000000007f691: cli; call far fword ptr [rbx+0x4c]; 
0x000000001b8b25: cli; cmp al, 0xf; mov ds, [rdi*8-0x72be0001]; ret; 
0x000000000a4f73: cli; cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x00000000090ca3: cli; cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x00000000092bb3: cli; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x000000000918f3: cli; cmp edi, 0x21; je short 0x0000000000091900; ret; 
0x00000000132a93: cli; cmp edi, 0x56; je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x000000000e55b3: cli; cmp esi, 0x1; je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e3: cli; cmp esi, 0x1; je short 0x00000000000e55f0; xor eax, eax; ret; 
0x00000000053ca1: cli; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000921c3: cli; cmp qword ptr [rdi+0x28], 0x0; je short 0x00000000000921d0; xor eax, eax; ret; 
0x0000000008dd13: cli; cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x000000000e5753: cli; cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x000000001354d3: cli; cmp rdx, rcx; ja short 0x0000000000135504; xor eax, eax; syscall; 
0x000000000dc008: cli; dec dword ptr [rax+0x39]; ret; 
0x00000000171ee7: cli; dec dword ptr [rax-0x77]; ret; 
0x0000000007f5cd: cli; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000ea691: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000ea68f: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000ea56b: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000ea56a: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000ea4b0: cli; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x00000000080ee6: cli; dec dword ptr [rbx+rcx*4+0x2d]; jg short 0x0000000000080f07; add [rax-0x77], cl; ret; 
0x000000001715ac: cli; dec dword ptr [rbx-0x17b7b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x000000000ea677: cli; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000045372: cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000001afad9: cli; ja 0x00000000001afbc9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001afb55: cli; ja short 0x00000000001afbc0; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x0000000017b97c: cli; jb short 0x000000000017b987; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ba2c: cli; jb short 0x000000000017ba37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e35c: cli; jb short 0x000000000017e367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e40c: cli; jb short 0x000000000017e417; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000001a45d8: cli; jb short 0x00000000001a45ea; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x00000000126329: cli; je short 0x0000000000126366; mov eax, r8d; ret; 
0x0000000019e3eb: cli; jg short 0x000000000019e405; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019ebcb: cli; jg short 0x000000000019ebe5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019f18b: cli; jg short 0x000000000019f1a5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019f83c: cli; jg short 0x000000000019f856; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000019f8e1: cli; jg short 0x000000000019f8eb; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001a0611: cli; jg short 0x00000000001a061b; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001a09ad: cli; jg short 0x00000000001a09b7; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a1203: cli; jg short 0x00000000001a1206; vmovdqu [rax+rdx-0x10], xmm0; vzeroupper; ret; 
0x000000001a1207: cli; jg short 0x00000000001a124e; adc al, dh; vzeroupper; ret; 
0x000000001a3f1b: cli; jg short 0x00000000001a3f25; vmovdqu [r9-0x10], xmm1; ret; 
0x000000001a45fa: cli; jg short 0x00000000001a4604; vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a69cb: cli; jg short 0x00000000001a69d5; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a7e3d: cli; jg short 0x00000000001a7e47; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001aefb1: cli; jg short 0x00000000001aefbb; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000000948f2: cli; jmp qword ptr [rbx+rcx*4+0x4]; 
0x0000000017333e: cli; jmp qword ptr [rcx+rax*2-0x39]; 
0x000000000e7e5a: cli; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000007eec4: cli; jmp qword ptr [rsi+0x2e]; 
0x00000000151903: cli; jmp qword ptr [rsi+0x2e]; 
0x00000000084a47: cli; jmp qword ptr [rsi+0x48]; 
0x000000000856cf: cli; jmp qword ptr [rsi+0x66]; 
0x000000000856d0: cli; jmp qword ptr [rsi+0x66]; 
0x000000000eaddd: cli; jmp qword ptr [rsi+0xf]; 
0x00000000087165: cli; jmp qword ptr [rsi+0xf]; 
0x0000000007fcac: cli; jmp qword ptr [rsi-0x70]; 
0x000000001699fd: cli; jmp qword ptr [rsi-0x7d]; 
0x00000000100872: cli; jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x00000000141df3: cli; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000029f33: cli; lea rax, [rip+0x1ae09b]; ret; 
0x00000000029f43: cli; lea rax, [rip+0x1aff5c]; ret; 
0x000000000951c1: cli; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000009be33: cli; lock dec dword ptr [rdi]; jne short 0x000000000009be40; xor eax, eax; ret; 
0x000000000b157c: cli; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13dc: cli; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a4: cli; mov [rax+0x2], dl; ret; 
0x00000000092673: cli; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000113003: cli; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x0000000017d3a8: cli; mov [rdi-0x4], ecx; ret; 
0x00000000092b83: cli; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be73: cli; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0bf3: cli; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a00c3: cli; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x00000000114633: cli; mov eax, 0x102; syscall; 
0x00000000116283: cli; mov eax, 0x107; syscall; 
0x000000001161c3: cli; mov eax, 0x10a; syscall; 
0x00000000126fc3: cli; mov eax, 0x110; syscall; 
0x00000000127023: cli; mov eax, 0x11b; syscall; 
0x00000000126473: cli; mov eax, 0x11f; syscall; 
0x00000000125e83: cli; mov eax, 0x122; syscall; 
0x00000000126cf3: cli; mov eax, 0x123; syscall; 
0x000000001151f3: cli; mov eax, 0x124; syscall; 
0x00000000115263: cli; mov eax, 0x125; syscall; 
0x00000000126e13: cli; mov eax, 0x126; syscall; 
0x00000000127053: cli; mov eax, 0x12c; syscall; 
0x000000001265f3: cli; mov eax, 0x131; syscall; 
0x0000000011bb73: cli; mov eax, 0x132; syscall; 
0x000000001270b3: cli; mov eax, 0x134; syscall; 
0x000000001270e3: cli; mov eax, 0x13f; syscall; 
0x00000000127113: cli; mov eax, 0x14a; syscall; 
0x00000000127143: cli; mov eax, 0x14b; syscall; 
0x00000000114af3: cli; mov eax, 0x15; syscall; 
0x00000000092733: cli; mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000092863: cli; mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000000928a3: cli; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x0000000009d543: cli; mov eax, 0x18; syscall; 
0x0000000015d233: cli; mov eax, 0x1; ret; 
0x00000000119d43: cli; mov eax, 0x1; syscall; 
0x000000000ed193: cli; mov eax, 0x1; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x00000000119803: cli; mov eax, 0x1b4; syscall; 
0x0000000011ed53: cli; mov eax, 0x1b; syscall; 
0x0000000011ed23: cli; mov eax, 0x1c; syscall; 
0x00000000128593: cli; mov eax, 0x1e; syscall; 
0x00000000115193: cli; mov eax, 0x20; syscall; 
0x000000001151c3: cli; mov eax, 0x21; syscall; 
0x000000000dcdb3: cli; mov eax, 0x24; syscall; 
0x000000000ea5b3: cli; mov eax, 0x25; syscall; 
0x000000000dcde3: cli; mov eax, 0x26; syscall; 
0x000000000ec0b3: cli; mov eax, 0x27; syscall; 
0x00000000127ce3: cli; mov eax, 0x29; syscall; 
0x0000000015f553: cli; mov eax, 0x2; ret; 
0x00000000127cb3: cli; mov eax, 0x30; syscall; 
0x00000000127663: cli; mov eax, 0x31; syscall; 
0x000000001277d3: cli; mov eax, 0x32; syscall; 
0x00000000127763: cli; mov eax, 0x33; syscall; 
0x00000000127733: cli; mov eax, 0x34; syscall; 
0x0000000009fdc3: cli; mov eax, 0x3; syscall; 
0x000000000eb0f3: cli; mov eax, 0x3b; syscall; 
0x00000000042753: cli; mov eax, 0x3e; syscall; 
0x000000000ea373: cli; mov eax, 0x3f; syscall; 
0x00000000128463: cli; mov eax, 0x40; syscall; 
0x000000001285c3: cli; mov eax, 0x43; syscall; 
0x000000001283c3: cli; mov eax, 0x44; syscall; 
0x00000000114fa3: cli; mov eax, 0x49; syscall; 
0x0000000011d133: cli; mov eax, 0x4c; syscall; 
0x0000000011d163: cli; mov eax, 0x4d; syscall; 
0x00000000115323: cli; mov eax, 0x50; syscall; 
0x00000000115353: cli; mov eax, 0x51; syscall; 
0x00000000061f23: cli; mov eax, 0x52; syscall; 
0x00000000114603: cli; mov eax, 0x53; syscall; 
0x000000001162b3: cli; mov eax, 0x54; syscall; 
0x00000000116133: cli; mov eax, 0x56; syscall; 
0x00000000116253: cli; mov eax, 0x57; syscall; 
0x00000000116193: cli; mov eax, 0x58; syscall; 
0x000000001161f3: cli; mov eax, 0x59; syscall; 
0x00000000114403: cli; mov eax, 0x5a; syscall; 
0x00000000114433: cli; mov eax, 0x5b; syscall; 
0x00000000115c13: cli; mov eax, 0x5c; syscall; 
0x00000000115c43: cli; mov eax, 0x5d; syscall; 
0x00000000115c73: cli; mov eax, 0x5e; syscall; 
0x000000001143f3: cli; mov eax, 0x5f; syscall; 
0x0000000011a503: cli; mov eax, 0x62; syscall; 
0x00000000126f93: cli; mov eax, 0x63; syscall; 
0x000000000ea3a3: cli; mov eax, 0x64; syscall; 
0x000000000ec0d3: cli; mov eax, 0x66; syscall; 
0x00000000126e73: cli; mov eax, 0x67; syscall; 
0x000000000ec0f3: cli; mov eax, 0x68; syscall; 
0x000000000ec0e3: cli; mov eax, 0x6b; syscall; 
0x000000000ec103: cli; mov eax, 0x6c; syscall; 
0x000000000ec373: cli; mov eax, 0x6d; syscall; 
0x000000000ec0c3: cli; mov eax, 0x6e; syscall; 
0x000000000ec3a3: cli; mov eax, 0x6f; syscall; 
0x000000000ec403: cli; mov eax, 0x70; syscall; 
0x000000000ec113: cli; mov eax, 0x73; syscall; 
0x000000000ec433: cli; mov eax, 0x76; syscall; 
0x000000000ec463: cli; mov eax, 0x78; syscall; 
0x000000000ec343: cli; mov eax, 0x79; syscall; 
0x00000000125c43: cli; mov eax, 0x7a; syscall; 
0x00000000125c73: cli; mov eax, 0x7b; syscall; 
0x000000000ec3d3: cli; mov eax, 0x7c; syscall; 
0x00000000126c03: cli; mov eax, 0x7d; syscall; 
0x00000000126c33: cli; mov eax, 0x7e; syscall; 
0x00000000042d43: cli; mov eax, 0x83; syscall; 
0x00000000126ff3: cli; mov eax, 0x86; syscall; 
0x00000000125f53: cli; mov eax, 0x87; syscall; 
0x000000001142b3: cli; mov eax, 0x89; syscall; 
0x00000000114ac3: cli; mov eax, 0x8; syscall; 
0x000000001142e3: cli; mov eax, 0x8a; syscall; 
0x0000000011a8f3: cli; mov eax, 0x8c; syscall; 
0x0000000011a933: cli; mov eax, 0x8d; syscall; 
0x00000000108be3: cli; mov eax, 0x8e; syscall; 
0x00000000108c13: cli; mov eax, 0x8f; syscall; 
0x00000000108c43: cli; mov eax, 0x90; syscall; 
0x00000000108c73: cli; mov eax, 0x91; syscall; 
0x00000000108cd3: cli; mov eax, 0x92; syscall; 
0x00000000108d03: cli; mov eax, 0x93; syscall; 
0x00000000108d33: cli; mov eax, 0x94; syscall; 
0x0000000011edb3: cli; mov eax, 0x95; syscall; 
0x0000000011ede3: cli; mov eax, 0x96; syscall; 
0x0000000011ee13: cli; mov eax, 0x97; syscall; 
0x0000000011ee43: cli; mov eax, 0x98; syscall; 
0x0000000011bea3: cli; mov eax, 0x99; syscall; 
0x00000000126bc3: cli; mov eax, 0x9a; syscall; 
0x00000000126f03: cli; mov eax, 0x9b; syscall; 
0x00000000126b93: cli; mov eax, 0x9e; syscall; 
0x0000000011b9f3: cli; mov eax, 0xa1; syscall; 
0x0000000011bab3: cli; mov eax, 0xa2; syscall; 
0x0000000011b9c3: cli; mov eax, 0xa3; syscall; 
0x00000000125be3: cli; mov eax, 0xa6; syscall; 
0x0000000011bed3: cli; mov eax, 0xa7; syscall; 
0x0000000011bf03: cli; mov eax, 0xa8; syscall; 
0x0000000011ec53: cli; mov eax, 0xa; syscall; 
0x0000000011b523: cli; mov eax, 0xaa; syscall; 
0x0000000011b663: cli; mov eax, 0xab; syscall; 
0x00000000125b33: cli; mov eax, 0xac; syscall; 
0x00000000125b03: cli; mov eax, 0xad; syscall; 
0x00000000126c63: cli; mov eax, 0xae; syscall; 
0x00000000126c93: cli; mov eax, 0xb0; syscall; 
0x00000000126d53: cli; mov eax, 0xb1; syscall; 
0x00000000126ed3: cli; mov eax, 0xb4; syscall; 
0x0000000011ec23: cli; mov eax, 0xb; syscall; 
0x00000000127173: cli; mov eax, 0xba; syscall; 
0x00000000125c13: cli; mov eax, 0xbb; syscall; 
0x00000000122273: cli; mov eax, 0xc2; syscall; 
0x000000001222d3: cli; mov eax, 0xc3; syscall; 
0x000000001221b3: cli; mov eax, 0xc4; syscall; 
0x00000000122363: cli; mov eax, 0xc5; syscall; 
0x00000000122303: cli; mov eax, 0xc6; syscall; 
0x000000001221e3: cli; mov eax, 0xc7; syscall; 
0x000000000d99e3: cli; mov eax, 0xc9; syscall; 
0x0000000011a9d3: cli; mov eax, 0xc; syscall; 
0x00000000108dd3: cli; mov eax, 0xcb; syscall; 
0x00000000126cc3: cli; mov eax, 0xd5; syscall; 
0x00000000126bf3: cli; mov eax, 0xe4; syscall; 
0x00000000127183: cli; mov eax, 0xea; syscall; 
0x000000000a0393: cli; mov eax, 0xf5; syscall; 
0x00000000126de3: cli; mov eax, 0xfd; syscall; 
0x00000000126db3: cli; mov eax, 0xfe; syscall; 
0x00000000126e43: cli; mov eax, 0xff; syscall; 
0x0000000008ddd3: cli; mov eax, 0xffffffff; ret; 
0x00000000113993: cli; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008f1e3: cli; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000113983: cli; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000152053: cli; mov eax, [rdi+0x20]; ret; 
0x0000000016d0a3: cli; mov eax, [rdi+0x28]; ret; 
0x00000000092323: cli; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000119d73: cli; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000089213: cli; mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000891e3: cli; mov eax, [rdi]; and eax, 0x804; ret; 
0x00000000092313: cli; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000e66e3: cli; mov eax, [rdi]; ret; 
0x0000000008a013: cli; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008a023: cli; mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x000000000961c3: cli; mov eax, [rip+0x189926]; ret; 
0x00000000043133: cli; mov eax, [rip+0x1d60aa]; ret; 
0x00000000043123: cli; mov eax, [rip+0x1d60be]; ret; 
0x0000000015da73: cli; mov eax, [rip+0xc9e46]; test eax, eax; je short 0x000000000015da80; ret; 
0x00000000113a33: cli; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x0000000003a173: cli; mov eax, edi; and eax, 0x7f; ret; 
0x00000000136773: cli; mov eax, edi; bswap eax; ret; 
0x00000000045dd3: cli; mov eax, edi; neg eax; cmovs eax, edi; ret; 
0x00000000136783: cli; mov eax, edi; rol ax, 0x8; ret; 
0x00000000114983: cli; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x0000000017d3a2: cli; mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000009b5a3: cli; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x00000000140ff3: cli; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000173583: cli; mov edi, [rip+0xa5fbe]; test edi, edi; jns short 0x0000000000173590; ret; 
0x0000000011bba5: cli; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000042783: cli; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000178373: cli; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000009b543: cli; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f593: cli; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000115ca3: cli; mov r10, rcx; mov eax, 0x104; syscall; 
0x00000000061f53: cli; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000116163: cli; mov r10, rcx; mov eax, 0x109; syscall; 
0x00000000116223: cli; mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000119d03: cli; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000001264a3: cli; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000125f13: cli; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000127083: cli; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000126573: cli; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000001265b3: cli; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000113c33: cli; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000119323: cli; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000127d13: cli; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000127c73: cli; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000127793: cli; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126ea3: cli; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d83: cli; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f33: cli; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000126f63: cli; mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000122393: cli; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000122333: cli; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000122213: cli; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000122243: cli; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001222a3: cli; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000122183: cli; mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000011ed83: cli; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000128553: cli; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126d23: cli; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000113ee3: cli; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000119423: cli; mov r10d, ecx; mov eax, 0x118; syscall; 
0x00000000126ab3: cli; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141e3: cli; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ee3: cli; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000125e43: cli; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000009bf23: cli; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008e823: cli; mov rax, 0xffffffffffffffff; ret; 
0x000000000922e3: cli; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x000000000923f3: cli; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cc33: cli; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b33: cli; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4e3: cli; mov rax, [rdi+0x68]; ret; 
0x0000000009f193: cli; mov rax, [rdi+0x78]; ret; 
0x00000000083bf3: cli; mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000a0cf3: cli; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000a0ec3: cli; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000a0d33: cli; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000097553: cli; mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000097543: cli; mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c93: cli; mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c83: cli; mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c73: cli; mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x00000000090c63: cli; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000009c0e3: cli; mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0d53: cli; mov rax, [rdi]; nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce3: cli; mov rax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x000000000a0cd3: cli; mov rax, [rdi]; nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd3: cli; mov rax, [rdi]; nop; mov [rip+0x17f51e], eax; ret; 
0x0000000008f4c3: cli; mov rax, [rip+0x18b1b5]; ret; 
0x00000000042f83: cli; mov rax, [rip+0x1d5e85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a3a3: cli; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a363: cli; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000003a383: cli; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x000000000355d3: cli; mov rax, [rip+0x1e54a5]; ret; 
0x0000000002a253: cli; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x0000000002b983: cli; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000002b973: cli; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000178343: cli; mov rax, [rip+0xa0ac5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178323: cli; mov rax, [rip+0xa0ae5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f3: cli; mov rax, [rip+0xa0c15]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb3: cli; mov rax, [rip+0xa0e55]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f93: cli; mov rax, [rip+0xa0e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f53: cli; mov rax, [rip+0xa0eb5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f33: cli; mov rax, [rip+0xa0ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f13: cli; mov rax, [rip+0xa0ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef3: cli; mov rax, [rip+0xa0f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000175ca3: cli; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000175043: cli; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x000000001720c3: cli; mov rax, [rip+0xa6d45]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000168963: cli; mov rax, [rip+0xb045d]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x0000000014a393: cli; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x000000001517d3: cli; mov rax, [rip+0xd0dad]; test rax, rax; jne short 0x00000000001517e8; ret; 
0x00000000136b23: cli; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x00000000129d03: cli; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x000000001271b3: cli; mov rax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000011be83: cli; mov rax, [rip+0xfcf85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a313: cli; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a323: cli; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000009b593: cli; mov rax, fs:[0x10]; ret; 
0x00000000045e23: cli; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000045de3: cli; mov rax, rdi; neg rax; cmovs rax, rdi; ret; 
0x0000000008f4f3: cli; mov rax, rdi; ret; 
0x00000000177e73: cli; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x000000000729ea: cli; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000011aecb: cli; mov rsi, r13; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02b: cli; mov rsi, r13; mov edi, ebp; mov eax, 0x148; syscall; 
0x0000000008b27b: cli; mov rsi, r14; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000013b5bc: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000075d1e: cli; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007658c: cli; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000011b73f: cli; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000007cb72: cli; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdad: cli; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x000000000d9cb3: cli; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x00000000041f83: cli; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000112fc3: cli; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x000000000b5309: cli; movzx edx, dl; sub eax, edx; ret; 
0x0000000009a673: cli; nop; xor eax, eax; ret; 
0x000000000b146f: cli; notrack jmp rdx; 
0x000000001a4604: cli; or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x00000000092893: cli; or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000041ba3: cli; pand xmm1, [rip+0x1a0554]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041713: cli; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000041a53: cli; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000eac33: cli; pop rdi; mov eax, 0x3a; syscall; 
0x000000000ed127: cli; push rsp; push rbx; setne al; ret; 
0x000000000c5046: cli; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001a10cd: cli; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x000000001bb2f2: cli; ret far; 
0x00000000029d03: cli; ret; 
0x000000000dce31: cli; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000dce40; ret; 
0x00000000090a63: cli; setae al; ret; 
0x00000000156c91: cli; std; jmp qword ptr [rsi+0x66]; 
0x000000000dce36: cli; sub [rdi+rcx*4+0x2], bl; jbe short 0x00000000000dce40; ret; 
0x0000000008d333: cli; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x00000000126303: cli; test edx, edx; je short 0x0000000000126338; mov eax, 0x145; syscall; 
0x0000000016d4b3: cli; test edx, edx; jne short 0x000000000016d4c0; mov eax, 0x1; ret; 
0x0000000016d4f3: cli; test edx, edx; jne short 0x000000000016d500; mov eax, 0x1; ret; 
0x000000000bac08: cli; test rdx, rdx; je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000baaa9: cli; test rdx, rdx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa4c: cli; test rdx, rdx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac78: cli; test rdx, rdx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000000c5033: cli; test rdx, rdx; jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000bab73: cli; test rsi, rsi; jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000d8633: cli; test rsi, rsi; jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d9af3: cli; test rsi, rsi; jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x000000001a4381: cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000003a183: cli; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x00000000095cf3: cli; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000008e7a3: cli; xor eax, eax; ret; 
0x00000000119cd3: cli; xor eax, eax; syscall; 
0x000000000891f3: cli; xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x00000000089203: cli; xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x0000000008c9b3: cli; xor eax, eax; test rdx, rdx; jne short 0x000000000008c9c0; ret; 
0x00000000115223: cli; xor esi, esi; mov eax, 0x125; syscall; 
0x000000001285f3: cli; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000035dfe: cmc; adc eax, [rax]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000184247: cmc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000d83a1: cmc; and ch, 0xf; je short 0x00000000000d83c0; add rax, 0x2; ret; 
0x0000000008db77: cmc; cmpsd [rsi], [rdi]; stc; jmp qword ptr [rsi+0xf]; 
0x0000000014b682: cmc; dec dword ptr [rax-0x77]; ret; 
0x0000000017c00c: cmc; jb short 0x000000000017c017; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c0bc: cmc; jb short 0x000000000017c0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e9ec: cmc; jb short 0x000000000017e9f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ea9c: cmc; jb short 0x000000000017eaa7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000141dda: cmc; je short 0x0000000000141dd0; pop rbx; ret; 
0x0000000013814a: cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000dcda1: cmc; jmp qword ptr [rsi+0x2e]; 
0x00000000120fe2: cmc; jmp qword ptr [rsi+0x66]; 
0x000000000ca6af: cmc; jmp qword ptr [rsi+0xf]; 
0x000000000ca6b0: cmc; jmp qword ptr [rsi+0xf]; 
0x000000000d42cc: cmc; jmp qword ptr [rsi-0x70]; 
0x00000000120f9e: cmc; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001b152f: cmc; leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14ef: cmc; leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b43ff: cmc; leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43cf: cmc; leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afb9a: cmc; leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a721c: cmc; leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000ed10c: cmc; lodsd [rsi]; add [rax], al; setne al; ret; 
0x000000001158b7: cmc; mov [0xca4163d8d48000c], eax; add al, ch; mov [rbp-0xe], eax; jmp qword ptr [rsi+0xf]; 
0x0000000018221a: cmc; mov [rdi-0x4], ecx; ret; 
0x0000000017cc2d: cmc; mov [rdi-0x4], edx; ret; 
0x00000000182213: cmc; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cdb2: cmc; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x000000001a5d52: cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000008a230: cmc; stc; jmp qword ptr [rsi+0x2e]; 
0x000000001a5d57: cmc; sub eax, edx; ret; 
0x000000000a0ee3: cmova eax, edx; mov [rip+0x17f613], rax; ret; 
0x0000000009b5bf: cmova eax, edx; ret; 
0x000000000e66ad: cmova edx, eax; mov eax, 0xd9; syscall; 
0x000000000a0ee2: cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x000000000e66ac: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000011c18f: cmovae edx, ecx; mov [rsp+0x20], rax; mov eax, 0x65; syscall; 
0x0000000011c18e: cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall; 
0x00000000084d57: cmovb eax, ecx; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000001281d0: cmovb eax, edx; ret; 
0x0000000008fb60: cmovb eax, edx; sub rax, [rdi+0x18]; ret; 
0x000000001b413a: cmovb eax, esi; ret; 
0x000000001a2c9a: cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019dda7: cmovb eax, esi; vzeroupper; ret; 
0x000000001b2c98: cmovb ecx, [rcx+0x42fc0754]; mov byte ptr [rdi+rax], 0x0; ret; 
0x0000000019ec48: cmovb ecx, [rcx+0x42fc0754]; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x000000001b0968: cmovb ecx, [rcx+0x4afc0754]; lea eax, [rdi+rax]; ret; 
0x000000001a0528: cmovb ecx, [rcx+0x4afc0754]; lea eax, [rdi+rax]; vzeroupper; ret; 
0x00000000059fb6: cmovb edx, eax; mov rax, r10; pop rbx; pop rbp; ret; 
0x00000000059fb5: cmovb r10, r8; mov rax, r10; pop rbx; pop rbp; ret; 
0x00000000084d56: cmovb rax, rcx; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000001281cf: cmovb rax, rdx; ret; 
0x0000000008fb5f: cmovb rax, rdx; sub rax, [rdi+0x18]; ret; 
0x00000000090a5c: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000095d6b: cmovbe esi, eax; syscall; 
0x00000000090a5b: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000095d6a: cmovbe rsi, r8; syscall; 
0x000000000e563c: cmove eax, eax; mov eax, r8d; ret; 
0x0000000011bf8e: cmove eax, ebx; pop rbx; ret; 
0x0000000009be64: cmove eax, ecx; ret; 
0x000000000a999c: cmove eax, edx; add eax, 0x1; ret; 
0x000000000d9ac0: cmove eax, edx; add rsp, 0x58; ret; 
0x00000000121c95: cmove eax, edx; add rsp, 0x8; ret; 
0x0000000003881e: cmove eax, edx; mov [rip+0x1e2476], al; lea rax, [rip+0x1e2412]; ret; 
0x000000001303eb: cmove eax, edx; pop r14; ret; 
0x00000000039b1f: cmove eax, edx; ret; 
0x000000000e563b: cmove r8d, eax; mov eax, r8d; ret; 
0x0000000011bf8d: cmove rax, rbx; pop rbx; ret; 
0x000000000a99bd: cmove rax, rdx; add eax, 0x1; ret; 
0x000000000d9abf: cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000039b1e: cmove rax, rdx; ret; 
0x0000000008357b: cmovg eax, ecx; test rdx, rdx; jne short 0x0000000000083570; ret; 
0x0000000008d573: cmovg eax, ecx; test rdx, rdx; jne short 0x000000000008d568; ret; 
0x000000000d7cba: cmovg eax, edx; ret; 
0x0000000007f589: cmovg edx, ecx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000008357a: cmovg rax, rcx; test rdx, rdx; jne short 0x0000000000083570; ret; 
0x0000000008d572: cmovg rax, rcx; test rdx, rdx; jne short 0x000000000008d568; ret; 
0x0000000007f588: cmovg rdx, rcx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000d7ca0: cmovl eax, edx; ret; 
0x000000001b01fa: cmovl ecx, [rcx+0x48f9174c]; lea eax, [rdi+rdx]; ret; 
0x0000000019fe7a: cmovl ecx, [rcx+0x48f9174c]; lea eax, [rdi+rdx]; vzeroupper; ret; 
0x000000001ae6ed: cmovle eax, ecx; ret; 
0x000000001994ad: cmovle eax, ecx; vzeroupper; ret; 
0x000000001ae6ec: cmovle rax, rcx; ret; 
0x000000001994ac: cmovle rax, rcx; vzeroupper; ret; 
0x00000000086e94: cmovne eax, ecx; ret; 
0x0000000019d56a: cmovne eax, ecx; vzeroupper; ret; 
0x000000001a8e0a: cmovne eax, ecx; xtest; je short 0x00000000001a8e16; vzeroall; ret; 
0x000000001ace59: cmovne eax, ecx; xtest; je short 0x00000000001ace65; vzeroall; ret; 
0x000000000ab437: cmovne eax, edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001367af: cmovne eax, edi; ret; 
0x000000000d861e: cmovne eax, edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f6fb4: cmovne eax, edx; pop rbx; ret; 
0x00000000091efb: cmovne eax, edx; ret; 
0x000000001a2d09: cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000ba8c1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000892f0: cmovne edx, ecx; mov [rdi], edx; ret; 
0x000000000911eb: cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000ba8c5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x00000000086e92: cmovne rax, rcx; ret; 
0x0000000019d569: cmovne rax, rcx; vzeroupper; ret; 
0x000000001a8e09: cmovne rax, rcx; xtest; je short 0x00000000001a8e16; vzeroall; ret; 
0x000000001ace58: cmovne rax, rcx; xtest; je short 0x00000000001ace65; vzeroall; ret; 
0x000000000ab436: cmovne rax, rdi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d861d: cmovne rax, rdx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009e66e: cmovne rax, rdx; ret; 
0x000000000ba8c0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000ba8c4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000ede5a: cmovns eax, [rbx+0x394810c1]; ret; 
0x000000000c0901: cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000c0929; jne 0x00000000000c0d90; ret; 
0x000000000c079f: cmovns eax, [rbx-0x72b7e818]; jg short 0x00000000000c07bf; jne 0x00000000000c0d90; ret; 
0x000000000c071d: cmovns eax, [rbx-0x72b7ec18]; jg short 0x00000000000c0739; jne 0x00000000000c0d90; ret; 
0x000000000c1ddb: cmovns eax, [rbx-0x72b7ef18]; jg short 0x00000000000c1df4; jne 0x00000000000c25e0; ret; 
0x000000000c05d8: cmovns eax, [rbx-0x72b7f618]; jg short 0x00000000000c05ea; jne 0x00000000000c0d90; ret; 
0x000000000c0556: cmovns eax, [rbx-0x72b7fa18]; jg short 0x00000000000c0564; jne 0x00000000000c0d90; ret; 
0x0000000011a90c: cmovns eax, edx; ret; 
0x00000000148867: cmovns edi, [rcx]; ret; 
0x000000000c079e: cmovns r8, [r11-0x72b7e818]; jg short 0x00000000000c07bf; jne 0x00000000000c0d90; ret; 
0x000000000c071c: cmovns r8, [r11-0x72b7ec18]; jg short 0x00000000000c0739; jne 0x00000000000c0d90; ret; 
0x000000000c1dda: cmovns r8d, [r11-0x72b7ef18]; jg short 0x00000000000c1df4; jne 0x00000000000c25e0; ret; 
0x000000001760c8: cmovo eax, [rax-0x11167f31]; xchg edi, eax; bnd jmp qword ptr [rsi+0xf]; 
0x000000001b2cba: cmovp ecx, [rcx+0x42f80754]; mov byte ptr [rdi+rax], 0x0; ret; 
0x0000000019ec6a: cmovp ecx, [rcx+0x42f80754]; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x000000001b098a: cmovp ecx, [rcx+0x4af80754]; lea eax, [rdi+rax]; ret; 
0x000000001a054a: cmovp ecx, [rcx+0x4af80754]; lea eax, [rdi+rax]; vzeroupper; ret; 
0x000000001ac3ea: cmovp ecx, [rcx-0x1607f8ac]; sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000168b10: cmovs eax, [rbx-0x3ca47f18]; nop [rax+rax]; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x0000000015e008: cmovs eax, [rbx-0x3fcef73c]; pop rbx; pop rbp; ret; 
0x000000000acffb: cmovs eax, [rbx-0x76b70f20]; ret; 
0x0000000009ede0: cmovs eax, [rcx+0x90c4]; add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x000000001748d9: cmovs eax, [rcx]; ror dword ptr [rax+0x39], 0x1; ret far; 
0x00000000168b90: cmovs eax, [rip+0xa0]; pop rbx; ret; 
0x00000000168c10: cmovs eax, [rip+0xa8]; pop rbx; ret; 
0x00000000143369: cmovs eax, eax; mov eax, r8d; ret; 
0x00000000045dd8: cmovs eax, edi; ret; 
0x0000000002d0c0: cmovs eax, edx; ret; 
0x000000001750aa: cmovs ecx, [rbp+0x48182474]; lea edi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x000000000c1db5: cmovs ecx, [rbp-0x7af0f081]; and [rax], cl; add [rax], al; ret; 
0x000000000c06a1: cmovs ecx, [rbp-0x7af0f081]; in al, 0x6; add [rax], al; ret; 
0x000000000430f8: cmovs ecx, [rbx+0x20b4806]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000430b8: cmovs ecx, [rbx+0x2234806]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000007f868: cmovs ecx, [rbx+0x48082444]; add esp, 0x18; ret; 
0x000000001a3f29: cmovs ecx, [rbx+0x498b4836]; clc; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000001162f8: cmovs ecx, [rbx+0x7394806]; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x000000000a2858: cmovs ecx, [rbx-0x173ef7be]; add al, 0x39; ret; 
0x0000000009e628: cmovs ecx, [rbx-0x7ab7e7c0]; shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x00000000135aa6: cmovs ecx, [rcx+0x44a89f0]; test ecx, ecx; jne short 0x0000000000135a60; mov rax, r8; ret; 
0x000000000c3eb9: cmovs ecx, [rcx-0x12cff8a9]; mov [rdi+0xf], ch; ret; 
0x000000000c3e99: cmovs ecx, [rcx-0x12cff9a9]; mov [rdi+0xe], ch; ret; 
0x000000000c3e79: cmovs ecx, [rcx-0x12cffaa9]; mov [rdi+0xd], ch; ret; 
0x000000000bfd59: cmovs ecx, [rcx-0x6f3cf8a9]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c1d79: cmovs ecx, [rcx-0x72b7f9a9]; or eax, 0xee88349; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x00000000133ba8: cmovs edi, [rcx]; js short 0x0000000000133bb5; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x00000000143368: cmovs r8d, eax; mov eax, r8d; ret; 
0x00000000045dea: cmovs rax, rdi; ret; 
0x0000000012e3e0: cmovs rax, rdx; ret; 
0x0000000008dd97: cmp [r11+0x5d], bl; pop r12; ret; 
0x000000001069c8: cmp [r11-0x377c0620], r8b; add cl, [rax+0x16893847]; movups [rsi+0x8], xmm0; ret; 
0x000000000d7b96: cmp [r11], r15b; cmp [rbp+0x13], r14b; ret; 
0x0000000015d642: cmp [r13+r9*4+0x6c], r9b; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000a759d: cmp [r8+0x48fe5063], al; movsxd edi, esi; mov [rbx], rdi; call rcx; 
0x000000000a8091: cmp [r8+0x8], rsi; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x0000000012ee01: cmp [r8-0x7d], cl; ret; 
0x00000000160900: cmp [r8], al; add [rax], al; add [rcx-0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x0000000008e5e4: cmp [r9-0x3b7cb7fd], cl; adc [rax+0x1], bh; pop rbx; ret; 
0x000000000c5a1b: cmp [r9], edx; jne short 0x00000000000c59b5; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x00000000152302: cmp [rax+0x10], edi; jne short 0x00000000001522f8; ret; 
0x00000000152301: cmp [rax+0x10], rdi; jne short 0x00000000001522f8; ret; 
0x0000000009c56b: cmp [rax+0x18], ecx; je short 0x000000000009c578; ret; 
0x0000000009c56a: cmp [rax+0x18], rcx; je short 0x000000000009c578; ret; 
0x000000000b4be7: cmp [rax+0x1], cl; clc; ret; 
0x000000000751cc: cmp [rax+0x39], cl; ret; 
0x000000000a759e: cmp [rax+0x48fe5063], al; movsxd edi, esi; mov [rbx], rdi; call rcx; 
0x00000000133baa: cmp [rax+0x8], edi; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x000000000a8092: cmp [rax+0x8], esi; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x00000000133ba9: cmp [rax+0x8], rdi; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x000000000a0896: cmp [rax+0xe2], bh; syscall; 
0x0000000017a917: cmp [rax+rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000193f57: cmp [rax+rax], ecx; add [rbp-0x77], cl; ret far; 
0x0000000011d1c6: cmp [rax-0x1], bh; ret; 
0x0000000012e2a0: cmp [rax-0x3c41f0e8], cl; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000073613: cmp [rax-0x4], ebp; jmp qword ptr [rsi+0xf]; 
0x0000000007bbf6: cmp [rax-0x73], cl; add al, 0x83; call far fword ptr [rdx+0xf]; 
0x000000000301c1: cmp [rax-0x75], cl; je short 0x00000000000301ea; push rax; mov rdi, [rsp+0x48]; call r14; 
0x0000000008b09a: cmp [rax-0x77], cl; jl short 0x000000000008b0c3; or al, ch; ret far; 
0x000000000c5162: cmp [rax-0x77], cl; jl short 0x00000000000c5177; clc; ret; 
0x000000001a1212: cmp [rax-0x77], cl; jl short 0x00000000001a1227; clc; vzeroupper; ret; 
0x000000001a7312: cmp [rax-0x77], cl; jl short 0x00000000001a7327; clc; ret; 
0x000000001afc72: cmp [rax-0x77], cl; jl short 0x00000000001afc87; clc; ret; 
0x00000000137ca0: cmp [rax-0x77], cl; out dx, al; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000132053: cmp [rax-0x77], cl; ret; 
0x0000000007ba42: cmp [rax-0x77], ecx; ret far; 
0x0000000015d2f1: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000015f2f3: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x00000000162c62: cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x00000000165a4f: cmp [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000165ac2; call rax; 
0x000000001664ef: cmp [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000166552; call rax; 
0x0000000011989d: cmp [rax-0x7d], cl; lock and [rax-0x77], cl; ret; 
0x0000000005e7e7: cmp [rax-0x7d], cl; ret; 
0x00000000075341: cmp [rax], ah; jmp rsi; 
0x00000000075e74: cmp [rax], ah; mov rbx, rcx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x000000001b1b3c: cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x00000000198ca3: cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000b4bd6: cmp [rax], ah; ret; 
0x000000000d59af: cmp [rax], al; add [rax], al; add [rbp+0x31], al; imul cl; ret far; 
0x00000000160901: cmp [rax], al; add [rax], al; add [rcx-0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x000000000eabc1: cmp [rax], al; add [rax], al; syscall; 
0x0000000008dd17: cmp [rax], al; je short 0x000000000008dd20; ret; 
0x000000000e772e: cmp [rax], al; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000ec15e: cmp [rax], al; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000ec1ee: cmp [rax], al; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec4ae: cmp [rax], al; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec54e: cmp [rax], al; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x0000000011b0ee: cmp [rax], al; je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x0000000011b17e: cmp [rax], al; je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x000000000ba2e4: cmp [rax], dh; cmovne rax, rdx; ret; 
0x000000000b50b6: cmp [rax], dh; ret; 
0x0000000011dae0: cmp [rax], dl; add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x0000000011dab0: cmp [rax], dl; add [rcx+rcx*4-0x40], cl; ret; 
0x000000000b4bc6: cmp [rax], dl; ret; 
0x000000001286ab: cmp [rax], eax; je short 0x00000000001286b0; ret; 
0x000000000910a2: cmp [rax], eax; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x000000000b4bc5: cmp [rax], r10b; ret; 
0x000000001b1b3b: cmp [rax], r12b; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x00000000198ca2: cmp [rax], r12b; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000b4bd5: cmp [rax], r12b; ret; 
0x000000000b50b5: cmp [rax], r14b; ret; 
0x000000000ba2e3: cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000d7b9a: cmp [rbp+0x13], dh; ret; 
0x000000000d7b99: cmp [rbp+0x13], r14b; ret; 
0x00000000099ee7: cmp [rbp+0x31], al; sar byte ptr [rsi+0x80], cl; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000015d643: cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x00000000120e98: cmp [rbp], ebx; jbe short 0x0000000000120ec8; mov rsi, r12; mov rdi, r14; call r13; 
0x00000000120e97: cmp [rbp], rbx; jbe short 0x0000000000120ec8; mov rsi, r12; mov rdi, r14; call r13; 
0x0000000009bea0: cmp [rbx+0x17408f8], al; ret; 
0x00000000090aa6: cmp [rbx+0x17408fa], al; ret; 
0x00000000089eb7: cmp [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000008dd98: cmp [rbx+0x5d], bl; pop r12; ret; 
0x0000000002a2de: cmp [rbx+0x5d], bl; ret; 
0x000000001213bf: cmp [rbx+0x5d], ebx; pop r12; ret; 
0x000000001069c9: cmp [rbx-0x377c0620], al; add cl, [rax+0x16893847]; movups [rsi+0x8], xmm0; ret; 
0x000000001754c5: cmp [rbx], al; add [rax], al; jmp rax; 
0x000000000d7b97: cmp [rbx], bh; cmp [rbp+0x13], r14b; ret; 
0x0000000015e6f8: cmp [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x000000001666dc: cmp [rcx+rcx*4-0x2], cl; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000117063: cmp [rcx+rcx*4-0x32], cl; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000082b46: cmp [rcx+rcx*4-0x38], al; ret; 
0x00000000167f49: cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20]; 
0x000000000964d7: cmp [rcx+rcx*4-0x40], cl; ret; 
0x0000000012632c: cmp [rcx+rcx*4-0x40], eax; ret; 
0x0000000008e5e5: cmp [rcx-0x3b7cb7fd], cl; adc [rax+0x1], bh; pop rbx; ret; 
0x000000000c516a: cmp [rcx-0x3c03ef84], cl; mov [rax], di; mov [rax+rdx-0x1], dil; ret; 
0x000000000f1c8a: cmp [rcx-0x77], cl; ret; 
0x000000001915f9: cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c1ca4: cmp [rcx], cl; add [rax], al; ret; 
0x00000000089f21: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000012e270: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000016b3a8: cmp [rcx], dh; ror byte ptr [rax-0x77], 0xe7; mov dword ptr [rsp], 0x2; call r8; 
0x0000000016d007: cmp [rcx], dh; sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, rbp; call r12; 
0x00000000113cc7: cmp [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; call rax; 
0x000000000a54cb: cmp [rcx], dh; shr al, cl; sar r15b, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000c1943: cmp [rcx], ebx; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c5a1c: cmp [rcx], edx; jne short 0x00000000000c59b5; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x0000000014e74a: cmp [rdi+0x14], eax; sete al; movzx eax, al; ret; 
0x00000000104c78: cmp [rdi+0x15], dh; movzx edx, byte ptr [r14+0x30]; movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x00000000104c77: cmp [rdi+0x15], r14b; movzx edx, byte ptr [r14+0x30]; movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x0000000011953d: cmp [rdi+0x28], eax; sete al; ret; 
0x0000000011953c: cmp [rdi+0x28], rax; sete al; ret; 
0x0000000014e724: cmp [rdi+0x2], cx; je short 0x000000000014e730; ret; 
0x0000000014e725: cmp [rdi+0x2], ecx; je short 0x000000000014e730; ret; 
0x0000000014e7b4: cmp [rdi+0x4], eax; sete al; movzx eax, al; ret; 
0x00000000108e2c: cmp [rdi+0x4], edx; ja short 0x0000000000108e37; setne al; movzx eax, al; ret; 
0x00000000095cde: cmp [rdi+0x628], edi; cmove eax, edx; ret; 
0x00000000095cdd: cmp [rdi+0x628], rdi; cmove eax, edx; ret; 
0x000000000d7a3b: cmp [rdi+0xc], ecx; jne 0x00000000000d7bb0; xor eax, eax; ret; 
0x0000000013447a: cmp [rdi], al; add [rax-0x73], cl; add eax, 0x7390c; cmove rax, rdx; ret; 
0x00000000116e52: cmp [rdi], cl; mov dh, 0xc0; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x0000000009c592: cmp [rdi], eax; je short 0x000000000009c5a0; sbb eax, eax; or eax, 0x1; ret; 
0x000000001162fd: cmp [rdi], eax; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x0000000009c591: cmp [rdi], rax; je short 0x000000000009c5a0; sbb eax, eax; or eax, 0x1; ret; 
0x000000001162fc: cmp [rdi], rax; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x0000000003887b: cmp [rdx+0x38], edi; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000086e91: cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x00000000086e8f: cmp [rdx+0x48], r8; cmovne eax, ecx; ret; 
0x00000000029cef: cmp [rdx+0xd8], eax; jne short 0x0000000000029cbb; ret; 
0x00000000029cee: cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x000000000964d3: cmp [rdx+rdi], ecx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x000000000964d2: cmp [rdx+rdi], rcx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x000000000c539a: cmp [rdx], al; add [rax], al; ret; 
0x00000000106934: cmp [rdx], bl; call far fword ptr [rax+0x5a]; 
0x00000000118bd3: cmp [rdx], eax; adc [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x000000001754ec: cmp [rdx], ecx; add [rax-0x75], cl; cmp al, 0x24; mov rax, [rax+0x338]; jmp rax; 
0x0000000009e615: cmp [rdx], ecx; jl short 0x000000000009e608; je short 0x000000000009e624; xor eax, eax; ret; 
0x0000000009e665: cmp [rdx], edi; jl short 0x000000000009e658; mov edx, 0x0; cmovne rax, rdx; ret; 
0x00000000152353: cmp [rip+0xd027f], eax; jne short 0x0000000000152376; mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000152352: cmp [rip+0xd027f], rax; jne short 0x0000000000152376; mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000119dbc: cmp [rip-0x1010], ah; or eax, esi; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000003887d: cmp [rsi+0x17], dh; mov rax, [rdx+rdi*8+0x40]; ret; 
0x000000001217d3: cmp [rsi+0xf], esi; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000004383d: cmp [rsi-0x70], ah; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000ed0b8: cmp [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ecf88: cmp [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000ed179: cmp [rsi], ah; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x000000000947db: cmp [rsi], al; add [rax], al; syscall; 
0x0000000009571e: cmp [rsi], al; add [rax], al; xor edi, edi; mov eax, 0x8f; syscall; 
0x000000000f6ffa: cmp [rsi], cl; je 0x00000000000f6f5d; ret; 
0x000000000f0e1f: cmp [rsi], ecx; add [rax+0x63], cl; add al, 0x86; add rax, rsi; notrack jmp rax; 
0x000000001354f4: cmp [rsi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000001444ca: cmp ah, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000001a1b3b: cmp ah, [rax]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47fb: cmp ah, [rax]; jne 0x00000000001b4610; ret; 
0x000000001b1b41: cmp ah, [rax]; sub eax, edx; ret; 
0x00000000198ca8: cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x000000001a0baa: cmp ah, al; vzeroupper; ret; 
0x00000000066ac0: cmp al, 0x0; add [rax-0x77], cl; ret; 
0x00000000125bb8: cmp al, 0x0; add [rax], al; syscall; 
0x000000001151a8: cmp al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001151a7: cmp al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000115164: cmp al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000007c64b: cmp al, 0x1; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000c5319: cmp al, 0x1; add [rax], al; ret; 
0x00000000061f9d: cmp al, 0x1; add [rax], al; syscall; 
0x0000000008d8e7: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000011fe47: cmp al, 0x24; call rbx; 
0x00000000090301: cmp al, 0x24; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000126135: cmp al, 0x24; mov eax, 0x116; syscall; 
0x00000000112936: cmp al, 0x24; mov eax, 0x11; syscall; 
0x000000001129e6: cmp al, 0x24; mov eax, 0x12; syscall; 
0x00000000127921: cmp al, 0x24; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000001152c7: cmp al, 0x24; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000001754c0: cmp al, 0x24; mov rax, [rax+0x338]; jmp rax; 
0x00000000044486: cmp al, 0x24; mov rdx, r14; mov rax, [rsp]; call rax; 
0x0000000015d655: cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000436d1: cmp al, 0x24; mov rsi, r15; call r14; 
0x0000000015d507: cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015d5ba: cmp al, 0x24; test r15d, r15d; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000090b21: cmp al, 0x25; add [rbx], al; add [rax], al; ret; 
0x0000000015558b: cmp al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000014d177: cmp al, 0x28; jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x000000000a858e: cmp al, 0x3; je short 0x00000000000a85a0; movsx edx, al; mov eax, edx; ret; 
0x000000000abcc3: cmp al, 0x3d; je short 0x00000000000abcdc; xor eax, eax; ret; 
0x000000000f0243: cmp al, 0x3f; jne short 0x00000000000f0229; mov eax, 0x1; ret; 
0x000000000f020f: cmp al, 0x3f; jne short 0x00000000000f0259; mov eax, 0x1; ret; 
0x0000000011c1c0: cmp al, 0x48; add esp, 0x68; ret; 
0x000000000e6acd: cmp al, 0x48; add esp, 0xa8; pop rbp; pop r12; ret; 
0x000000001687f9: cmp al, 0x4c; lea ecx, [rsp+0x2a]; call qword ptr [rax]; 
0x000000000c0850: cmp al, 0x5; add [rax], al; ret; 
0x000000000da7ee: cmp al, 0x8d; je short 0x00000000000da828; jmp far fword ptr [rcx-0x40]; 
0x0000000012e170: cmp al, 0xa2; out dx, eax; jmp qword ptr [rsi+0x48]; 
0x000000001a1b07: cmp al, 0xa; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1f9d: cmp al, 0xa; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b47b9: cmp al, 0xa; jne 0x00000000001b4610; ret; 
0x000000001b4e6f: cmp al, 0xa; jne 0x00000000001b4c81; ret; 
0x000000000b152b: cmp al, 0xb8; add rdi, r8; notrack jmp rdi; 
0x000000000b1396: cmp al, 0xb9; add rdi, r9; notrack jmp rdi; 
0x00000000045340: cmp al, 0xc0; add al, 0x0; xor eax, eax; pop rbx; ret; 
0x00000000173950: cmp al, 0xd; cli; jmp qword ptr [rsi+0x66]; 
0x0000000013ba5a: cmp al, 0xe1; out dx, al; jmp qword ptr [rsi-0x70]; 
0x000000001a1b04: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1f9a: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b47b6: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x00000000001b4610; ret; 
0x000000001b4e6c: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x00000000129970: cmp al, 0xea; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x000000001b8b26: cmp al, 0xf; mov ds, [rdi*8-0x72be0001]; ret; 
0x000000001b8af5: cmp al, 0xf; mov gs, [rax-0x72000003]; ret; 
0x00000000172a4b: cmp al, 0xfc; jmp qword ptr [rsi-0x70]; 
0x000000000e5621: cmp al, 0xfd; add al, [rax]; add [rax], al; syscall; 
0x0000000003881c: cmp al, 0xff; cmove eax, edx; mov [rip+0x1e2476], al; lea rax, [rip+0x1e2412]; ret; 
0x000000000a23bc: cmp al, 0xff; dec dword ptr [rax-0x77]; ret; 
0x00000000066d4b: cmp al, [rax]; add [rax-0x7d], cl; ret; 
0x000000000eac36: cmp al, [rax]; add [rax], al; syscall; 
0x0000000011c7b7: cmp al, [rax]; lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x000000001a72de: cmp al, [rbx+0x3c7701fa]; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000000e5649: cmp al, [rcx+rcx*4-0x40]; ret; 
0x00000000140571: cmp al, [rcx-0xa]; ret; 
0x0000000011f350: cmp al, [rcx]; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000037f32: cmp al, [rdi+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x000000001a0412: cmp al, [rdx]; add [rax], al; vzeroupper; ret; 
0x000000001a60be: cmp al, [rsi-0x1]; jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a6216: cmp al, [rsi-0x1]; jne short 0x00000000001a6235; xor eax, eax; ret; 
0x0000000008e950: cmp al, bl; nop [rax+rax]; sub rax, rcx; sub eax, 0x1; ret; 
0x000000000a754d: cmp al, ch; popfq; loopne 0x00000000000a754b; jmp qword ptr [rsi+0x66]; 
0x000000000b4ba6: cmp al, dh; ret; 
0x000000000b4ba5: cmp al, r14b; ret; 
0x0000000012941c: cmp ax, 0xffff; je short 0x0000000000129450; add eax, 0x1; mov [rdx], ax; ret; 
0x000000000f4131: cmp bh, 0x2d; jne short 0x00000000000f4125; mov byte ptr [rax+0x8], 0x16; mov eax, 0x1; ret; 
0x00000000076908: cmp bh, 0x5a; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x000000000f4103: cmp bh, 0x5e; jne short 0x00000000000f4130; mov byte ptr [rax+0x8], 0x19; mov eax, 0x1; ret; 
0x0000000011137b: cmp bh, 0xff; call qword ptr [rax+0x246c8b48]; 
0x0000000004109a: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x00000000091a12: cmp bh, [rbp-0x1]; jmp qword ptr [rsi+0x2e]; 
0x0000000009e666: cmp bh, [rdi+rbp*8-0x46]; add [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x00000000172c57: cmp bh, ah; jmp qword ptr [rsi+0xf]; 
0x00000000095d43: cmp bh, bh; jmp qword ptr [rsi+0x2e]; 
0x000000001a6c4e: cmp bh, bh; ret; 
0x0000000016d5f5: cmp bh, ch; call far fword ptr [rbx+0x48]; 
0x0000000006d911: cmp bl, 0xff; dec dword ptr [rcx-0x7d]; ret; 
0x0000000014637c: cmp bl, 0xff; jmp qword ptr [rcx+rcx*4+0x18]; 
0x00000000147095: cmp bl, 0xff; jmp qword ptr [rsi+0x41]; 
0x000000000c3998: cmp bl, bh; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000411bb: cmp bl, bl; insb [rdi], dx; and al, 0x8; fsubrp; ret; 
0x00000000041207: cmp bl, bl; insb [rdi], dx; and al, 0x8; ret; 
0x0000000004113e: cmp bl, bl; insb [rdi], dx; and al, 0xe8; ret; 
0x0000000012a652: cmp bl, dh; out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x00000000052fc4: cmp byte ptr [rax+0x1], 0x0; jne short 0x0000000000052fc0; pop rbx; ret; 
0x00000000052f99: cmp byte ptr [rax-0x1], 0x2f; jne short 0x0000000000052f90; pop rbx; ret; 
0x00000000090cb8: cmp byte ptr [rax-0x3f000000], 0xe8; or eax, [rbx+0x58901e0]; ret far; 
0x000000000e772d: cmp byte ptr [rax], 0x0; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000ec15d: cmp byte ptr [rax], 0x0; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000ec1ed: cmp byte ptr [rax], 0x0; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec4ad: cmp byte ptr [rax], 0x0; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec54d: cmp byte ptr [rax], 0x0; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x0000000011b0ed: cmp byte ptr [rax], 0x0; je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x0000000011b17d: cmp byte ptr [rax], 0x0; je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x000000001915f8: cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c5399: cmp byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000001754c4: cmp byte ptr [rax], 0x3; add [rax], al; jmp rax; 
0x0000000009499b: cmp byte ptr [rbx+0x970], 0x0; je 0x0000000000094b31; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x00000000144824: cmp byte ptr [rbx], 0x2e; je short 0x0000000000144830; pop rbx; ret; 
0x000000001286aa: cmp byte ptr [rcx], 0x0; je short 0x00000000001286b0; ret; 
0x000000001ae866: cmp byte ptr [rcx], 0xc2; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b5f26: cmp byte ptr [rcx], 0xc2; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x20]; ret; 
0x000000000417fd: cmp byte ptr [rdi+0x23], 0x44; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000a4f6c: cmp byte ptr [rdi+0xff3ffff], 0x1e; cli; cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x0000000003a884: cmp byte ptr [rdi], 0x0; jne short 0x000000000003a890; add rsp, 0x18; ret; 
0x0000000003a8c4: cmp byte ptr [rdi], 0x0; jne short 0x000000000003a8d0; add rsp, 0x18; ret; 
0x00000000045e4c: cmp byte ptr [rdi], 0x0; jne short 0x0000000000045e58; pop rbx; ret; 
0x000000000a0544: cmp byte ptr [rdi], 0x2f; jne short 0x00000000000a0590; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x0000000011c7b6: cmp byte ptr [rdx], 0x0; lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x000000000a4f74: cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x00000000175460: cmp byte ptr [rsp+0x17], 0x0; je short 0x0000000000175441; mov [rsp+0xc], eax; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x000000001751e8: cmp byte ptr [rsp+0x1f], 0x0; je short 0x00000000001751fa; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000175380: cmp byte ptr [rsp+0x1f], 0x0; je short 0x0000000000175392; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x000000001750f0: cmp byte ptr [rsp+0xf], 0x0; je short 0x0000000000175102; mov rdi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x0000000017b1fa: cmp ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001177b2: cmp ch, bh; cld; dec dword ptr [rax-0x77]; ret; 
0x00000000134b1b: cmp ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000abcd7: cmp cl, 0x3d; jne short 0x00000000000abc95; mov rax, r11; ret; 
0x0000000013b4e8: cmp cl, 0x5; jbe 0x000000000013b45c; xor eax, eax; pop rbx; ret; 
0x0000000019884d: cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x00000000148481: cmp cl, [rax-0x7d]; ret; 
0x000000000928fd: cmp cl, [rbx+0x31450c77]; rol byte ptr [rcx+rcx*4-0x40], cl; xor sil, 0x80; syscall; 
0x000000000b116a: cmp cl, [rcx+rcx*4-0x20]; pop r12; ret; 
0x00000000053114: cmp cl, [rdi]; xchg esp, eax; ret; 
0x000000001353d9: cmp cl, [rsi]; add [rbp+0x31], al; jmp qword ptr [rbx+rax*4+0x39]; 
0x000000001069e5: cmp cl, bh; mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x00000000101a47: cmp cl, ch; ret far; 
0x00000000172743: cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x00000000056605: cmp cx, 0x7fff; jne short 0x00000000000565ec; mov eax, 0x1; ret; 
0x00000000038f8c: cmp dh, 0x1d; add [rbp+0x31], al; jmp qword ptr [rdi+rax*8]; 
0x00000000141ffe: cmp dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001b14af: cmp dh, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000964d5: cmp dh, [rbp+0x38]; mov rax, r8; ret; 
0x000000001b1505: cmp dh, [rdi+rax+0x20]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1695: cmp dh, [rdi+rax+0x20]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b166d: cmp dh, [rdi+rax+0x40]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14c5: cmp dh, [rdi+rax+0x60]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x0000000019d347: cmp dh, [rdi+rax]; jne short 0x000000000019d375; add rax, rdi; vzeroupper; ret; 
0x0000000019d4e1: cmp dh, [rdi+rax]; jne short 0x000000000019d505; add rax, rdi; vzeroupper; ret; 
0x000000001b1685: cmp dh, [rdi+rax]; jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b16e6: cmp dh, [rdx+rax]; jne short 0x00000000001b1679; add rax, rdx; ret; 
0x0000000019d562: cmp dh, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000015222b: cmp dh, ah; jmp qword ptr [rsi-0x70]; 
0x000000000c4bfe: cmp dh, al; ret; 
0x0000000015e5d2: cmp dh, bh; jmp qword ptr [rsi+0xf]; 
0x000000001bb203: cmp dh, dh; jmp qword ptr [rsi+0x2e]; 
0x000000000ff5f4: cmp dh, dh; ret; 
0x000000000f4130: cmp dil, 0x2d; jne short 0x00000000000f4125; mov byte ptr [rax+0x8], 0x16; mov eax, 0x1; ret; 
0x00000000076907: cmp dil, 0x5a; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x000000000f4102: cmp dil, 0x5e; jne short 0x00000000000f4130; mov byte ptr [rax+0x8], 0x19; mov eax, 0x1; ret; 
0x000000001a3f5f: cmp dl, 0x1; jb short 0x00000000001a3f68; mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000001a462e: cmp dl, 0x1; jb short 0x00000000001a4635; mov [rdi], cl; ret; 
0x000000001a45ea: cmp dl, 0x20; jb short 0x00000000001a45f9; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000011d2ff: cmp dl, 0x20; je short 0x000000000011d2f0; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000001a4621: cmp dl, 0x2; jb short 0x00000000001a462e; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000001a45d7: cmp dl, 0x40; jb short 0x00000000001a45ea; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a4616: cmp dl, 0x4; jb short 0x00000000001a4621; mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x000000001a4603: cmp dl, 0x8; jb short 0x00000000001a4612; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x00000000115338: cmp dl, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ed4fa: cmp dword ptr [rax+0x1], 0xfb82ba48; jmp qword ptr [rbx+0x1ffde]; 
0x00000000083bfc: cmp dword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x0000000015f63e: cmp dword ptr [rax+0x31000023], 0xfffffff6; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000ed0b7: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ecf87: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000ed178: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x00000000079ef4: cmp dword ptr [rbp-0x5], 0x84e9ffff; in al, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000001a6d30: cmp dword ptr [rbx-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x000000000c5343: cmp dword ptr [rbx], 0x8b480015; adc byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000910a1: cmp dword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x0000000010932d: cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x000000000891ba: cmp dword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x000000000921c5: cmp dword ptr [rdi+0x28], 0x0; je short 0x00000000000921d0; xor eax, eax; ret; 
0x0000000008dd15: cmp dword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x000000000903f3: cmp dword ptr [rdi+0x460], 0x0; je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x00000000133c2c: cmp dword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x00000000090ca4: cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x0000000009e00f: cmp dword ptr [rdi], 0x2; punpcklqdq xmm0, xmm1; movups [rdx+0x8], xmm0; je short 0x000000000009e03b; ret; 
0x000000000e5755: cmp dword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x0000000017b2c9: cmp dword ptr [rsi+rax], 0x49; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000011f9c1: cmp dword ptr [rsi], 0x0; mov rbx, rsi; je short 0x000000000011f9d0; pop rbx; ret; 
0x000000000298ac: cmp dword ptr [rsp+0x10], 0x0; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000ed0b6: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ecf86: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000ed177: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x000000001092be: cmp dx, 0x2; je short 0x00000000001092c8; ret; 
0x0000000017272f: cmp dx, cx; sete al; ret; 
0x0000000011d7f6: cmp eax, 0x103b4d; test rdi, rdi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x0000000009967c: cmp eax, 0x10; je 0x0000000000099574; mov eax, 0x16; ret; 
0x000000000ecf11: cmp eax, 0x11954; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000b1462: cmp eax, 0x121971; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000ecf64: cmp eax, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x0000000007dd51: cmp eax, 0x154642; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000007ba5c: cmp eax, 0x155eff; movsxd rsi, [rdi+rcx*4]; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x000000000a4f75: cmp eax, 0x17b56d; add [rbp+0x3], dh; ret; 
0x0000000009e5e3: cmp eax, 0x1815e0; mov [rdi+0x18], rax; ret; 
0x0000000009b7e9: cmp eax, 0x184302; xor eax, eax; ret; 
0x000000000d8cf8: cmp eax, 0x19; jg short 0x00000000000d8d20; mov rax, r12; pop r12; ret; 
0x0000000019faf1: cmp eax, 0x1; ja 0x000000000019f7c0; je 0x000000000019f7b0; vzeroupper; ret; 
0x0000000019f9cd: cmp eax, 0x1; ja 0x000000000019f8a0; je 0x000000000019f890; vzeroupper; ret; 
0x000000001a06fd: cmp eax, 0x1; ja 0x00000000001a05d0; je 0x00000000001a05c0; vzeroupper; ret; 
0x000000001b0cd3: cmp eax, 0x1; ja 0x00000000001b0930; je 0x00000000001b0920; mov rax, rdi; ret; 
0x000000001b0b8d: cmp eax, 0x1; ja 0x00000000001b0a40; je 0x00000000001b0a30; ret; 
0x000000001b2e93: cmp eax, 0x1; ja 0x00000000001b2c60; je 0x00000000001b2c50; mov byte ptr [rdi], 0x0; ret; 
0x000000001b3e43: cmp eax, 0x1; ja 0x00000000001b3ad0; je 0x00000000001b3ac0; ret; 
0x000000001b3cfd: cmp eax, 0x1; ja 0x00000000001b3bb0; je 0x00000000001b3ba0; ret; 
0x0000000012662e: cmp eax, 0x1; ja short 0x0000000000126660; mov eax, 0x4; syscall; 
0x0000000012668d: cmp eax, 0x1; ja short 0x00000000001266c0; mov eax, 0x5; syscall; 
0x000000001266ee: cmp eax, 0x1; ja short 0x0000000000126720; mov eax, 0x6; syscall; 
0x00000000090c1c: cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x0000000009129c: cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x000000000a10c1: cmp eax, 0x1; je short 0x00000000000a10d0; add rsp, 0x8; ret; 
0x0000000015ed7b: cmp eax, 0x1; je short 0x000000000015eda0; mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x0000000004530d: cmp eax, 0x1; jg short 0x0000000000045338; xor eax, eax; pop rbx; ret; 
0x000000000460ce: cmp eax, 0x1; jg short 0x00000000000460f0; pop rbp; ret; 
0x000000000620f0: cmp eax, 0x1; jg short 0x0000000000062100; ret; 
0x00000000080a56: cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x0000000008d09e: cmp eax, 0x1; jg short 0x000000000008d0e0; add rsp, 0x8; ret; 
0x0000000008f576: cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x000000000db58e: cmp eax, 0x1; jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x000000000eaf28: cmp eax, 0x1; jg short 0x00000000000eaf40; pop rbx; ret; 
0x0000000011e93c: cmp eax, 0x1; jg short 0x000000000011e980; pop rbp; ret; 
0x00000000125a6f: cmp eax, 0x1; jg short 0x0000000000125a78; ret; 
0x0000000013ea43: cmp eax, 0x1; jg short 0x000000000013ea98; add rsp, 0x8; ret; 
0x00000000150d29: cmp eax, 0x1; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000155c28: cmp eax, 0x1; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x000000001571bd: cmp eax, 0x1; jg short 0x00000000001571c8; ret; 
0x000000001721a6: cmp eax, 0x1; jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x000000001722e6: cmp eax, 0x1; jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x000000001bb9cc: cmp eax, 0x1; jg short 0x00000000001bb9f0; pop rbx; ret; 
0x0000000016b530: cmp eax, 0x1; jne short 0x000000000016b525; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000016c478: cmp eax, 0x1; jne short 0x000000000016c450; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000163add: cmp eax, 0x1; mov eax, 0x1; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x00000000061ed4: cmp eax, 0x1; sbb eax, eax; add rsp, 0x18; ret; 
0x0000000009f180: cmp eax, 0x1; sbb eax, eax; add rsp, 0x8; ret; 
0x0000000016d4df: cmp eax, 0x1; sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x00000000029ef6: cmp eax, 0x1ae0a5; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed7: cmp eax, 0x1ae0de; xor eax, eax; call qword ptr [rbx+0x330]; 
0x0000000009963d: cmp eax, 0x21; je short 0x00000000000996a0; mov eax, 0x16; ret; 
0x000000000974d2: cmp eax, 0x21; jne short 0x00000000000974db; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x0000000015501c: cmp eax, 0x22b8000c; add [rax], al; add [rcx+rcx*4+0x2], ah; pop rbx; ret; 
0x000000000ecf3f: cmp eax, 0x2468; jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x00000000061fca: cmp eax, 0x26; je short 0x0000000000061ff6; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000114207: cmp eax, 0x26; je short 0x0000000000114210; mov eax, r9d; ret; 
0x00000000059b3b: cmp eax, 0x28c48348; pop rbx; pop rbp; ret; 
0x0000000007dcb3: cmp eax, 0x29; ja short 0x000000000007dcc8; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000128645: cmp eax, 0x2; ja short 0x0000000000128668; mov eax, 0x1f; syscall; 
0x0000000009e6f9: cmp eax, 0x2; je short 0x000000000009e71b; ret; 
0x0000000015575e: cmp eax, 0x2; jne short 0x0000000000155780; mov eax, r8d; ret; 
0x0000000016b525: cmp eax, 0x2; sete al; movzx eax, al; ret; 
0x0000000015f23d: cmp eax, 0x3; jbe short 0x000000000015f250; mov eax, 0x2; ret; 
0x000000000f9e42: cmp eax, 0x3; je short 0x00000000000f9ea0; xor eax, eax; pop rbp; ret; 
0x000000000a0cf8: cmp eax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x00000000119c5c: cmp eax, 0x410000; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x00000000090958: cmp eax, 0x48c48348; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000082282: cmp eax, 0x48ea894c; mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000012609f: cmp eax, 0x48fff6aa; mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000c3913: cmp eax, 0x490010fb; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000046d6a: cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x00000000099ffd: cmp eax, 0x4be80014; idiv esi; jmp qword ptr [rsi+0x66]; 
0x000000000ed061: cmp eax, 0x517b; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x000000000ed091: cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecf4e: cmp eax, 0x54190100; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecec5: cmp eax, 0x58465342; jne short 0x00000000000eced0; ret; 
0x000000000ed01d: cmp eax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000f0919: cmp eax, 0x634a000e; add al, 0xaa; add rax, rdx; notrack jmp rax; 
0x0000000003a3a7: cmp eax, 0x64001dea; add rax, [0x0]; ret; 
0x000000000d8dfb: cmp eax, 0x71; jg short 0x00000000000d8e20; mov rax, rbx; pop rbx; ret; 
0x000000000a0eda: cmp eax, 0x7; mov eax, 0x10; cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x00000000119562: cmp eax, 0x80003d; add [rsi+rcx+0x48], dh; mov dword ptr [rdi], 0xffffffff; ret; 
0x00000000119563: cmp eax, 0x8000; je short 0x0000000000119578; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000000abcfd: cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x00000000061faa: cmp eax, 0x83c08941; clc; push qword ptr [rbp+rcx+0x44]; mov eax, eax; ret; 
0x000000000d40e1: cmp eax, 0x850f0c00; call qword ptr [rdi-0xb]; 
0x000000000ccd91: cmp eax, 0x850f0c00; data64 ret far; 
0x0000000014d6ee: cmp eax, 0x88de5; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x0000000014d3b9: cmp eax, 0x890e2; movzx esi, al; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000009bea1: cmp eax, 0x8; je short 0x000000000009bea7; ret; 
0x000000000f6e7d: cmp eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000008d0a2: cmp eax, 0x8c48348; ret; 
0x0000000005a349: cmp eax, 0x9; ja short 0x000000000005a320; mov rax, r8; ret; 
0x000000000a0ec8: cmp eax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x00000000173585: cmp eax, 0xa5fbe; test edi, edi; jns short 0x0000000000173590; ret; 
0x000000000ed04b: cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecef7: cmp eax, 0xbd00bd0; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000abcc4: cmp eax, 0xc0311574; ret; 
0x00000000155074: cmp eax, 0xc764000c; add [rsi], dl; add [rax], al; add [rax+0x16], bh; ret; 
0x0000000009d578: cmp eax, 0xc; jne short 0x000000000009d5af; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d5ea: cmp eax, 0xc; jne short 0x000000000009d61f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d648: cmp eax, 0xc; jne short 0x000000000009d67f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d6a8: cmp eax, 0xc; jne short 0x000000000009d6df; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d708: cmp eax, 0xc; jne short 0x000000000009d73f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d838: cmp eax, 0xc; jne short 0x000000000009d86f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d898: cmp eax, 0xc; jne short 0x000000000009d8cf; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d8f8: cmp eax, 0xc; jne short 0x000000000009d92f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d958: cmp eax, 0xc; jne short 0x000000000009d98f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d9d5: cmp eax, 0xc; jne short 0x000000000009da07; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009da28: cmp eax, 0xc; jne short 0x000000000009da5f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009db38: cmp eax, 0xc; jne short 0x000000000009db6f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009dbb8: cmp eax, 0xc; jne short 0x000000000009dbef; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000015557f: cmp eax, 0xd227c; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000000f2aaa: cmp eax, 0xe1df9; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x0000000013ea63: cmp eax, 0xe34b8; call rax; 
0x0000000010086d: cmp eax, 0xe8000006; cli; jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x000000000ed071: cmp eax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000061b5a: cmp eax, 0xef894c05; call rax; 
0x000000000e0f96: cmp eax, 0xf2a19; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000debce: cmp eax, 0xf4c79; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000dd98d: cmp eax, 0xf5d62; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000cf807: cmp eax, 0xff; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x000000000a0d38: cmp eax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000042791: cmp eax, 0xfffff000; ja short 0x00000000000427a0; ret; 
0x000000000427dd: cmp eax, 0xfffff000; ja short 0x0000000000042830; ret; 
0x00000000046c88: cmp eax, 0xfffff000; ja short 0x0000000000046ce0; ret; 
0x00000000061f2c: cmp eax, 0xfffff000; ja short 0x0000000000061f38; ret; 
0x00000000061f5f: cmp eax, 0xfffff000; ja short 0x0000000000061f70; ret; 
0x00000000099fdf: cmp eax, 0xfffff000; ja short 0x0000000000099ff0; ret; 
0x0000000009c526: cmp eax, 0xfffff000; ja short 0x000000000009c530; xor eax, eax; ret; 
0x0000000009fdcc: cmp eax, 0xfffff000; ja short 0x000000000009fdd8; ret; 
0x000000000a039c: cmp eax, 0xfffff000; ja short 0x00000000000a03a8; ret; 
0x000000000a03db: cmp eax, 0xfffff000; ja short 0x00000000000a0450; ret; 
0x000000000a049b: cmp eax, 0xfffff000; ja short 0x00000000000a0508; ret; 
0x000000000a0557: cmp eax, 0xfffff000; ja short 0x00000000000a0568; mov eax, r8d; ret; 
0x000000000a09bd: cmp eax, 0xfffff000; ja short 0x00000000000a09c8; ret; 
0x000000000a0a1d: cmp eax, 0xfffff000; ja short 0x00000000000a0a28; ret; 
0x000000000a0a80: cmp eax, 0xfffff000; ja short 0x00000000000a0a90; ret; 
0x000000000d99ec: cmp eax, 0xfffff000; ja short 0x00000000000d99f8; ret; 
0x000000000d9b01: cmp eax, 0xfffff000; ja short 0x00000000000d9b10; ret; 
0x000000000d9cc1: cmp eax, 0xfffff000; ja short 0x00000000000d9cd0; ret; 
0x000000000dcdbc: cmp eax, 0xfffff000; ja short 0x00000000000dcdc8; ret; 
0x000000000dcdec: cmp eax, 0xfffff000; ja short 0x00000000000dcdf8; ret; 
0x000000000e5766: cmp eax, 0xfffff000; ja short 0x00000000000e5770; ret; 
0x000000000e66b8: cmp eax, 0xfffff000; ja short 0x00000000000e66c0; ret; 
0x000000000ea45b: cmp eax, 0xfffff000; ja short 0x00000000000ea4c0; ret; 
0x000000000ea50e: cmp eax, 0xfffff000; ja short 0x00000000000ea580; ret; 
0x000000000ea668: cmp eax, 0xfffff000; ja short 0x00000000000ea6a0; ret; 
0x000000000eac95: cmp eax, 0xfffff000; ja short 0x00000000000eacb8; hlt; mov eax, esi; syscall; 
0x00000000108d3c: cmp eax, 0xfffff000; ja short 0x0000000000108d48; ret; 
0x00000000108ddc: cmp eax, 0xfffff000; ja short 0x0000000000108de8; ret; 
0x000000001128fb: cmp eax, 0xfffff000; ja short 0x0000000000112960; ret; 
0x000000001129ab: cmp eax, 0xfffff000; ja short 0x0000000000112a10; ret; 
0x00000000113c3f: cmp eax, 0xfffff000; ja short 0x0000000000113c50; ret; 
0x00000000113eee: cmp eax, 0xfffff000; ja short 0x0000000000113f00; xor eax, eax; ret; 
0x00000000114276: cmp eax, 0xfffff000; ja short 0x0000000000114280; ret; 
0x000000001142bc: cmp eax, 0xfffff000; ja short 0x00000000001142c8; ret; 
0x000000001142ec: cmp eax, 0xfffff000; ja short 0x00000000001142f8; ret; 
0x00000000114993: cmp eax, 0xfffff000; ja short 0x00000000001149f0; ret; 
0x00000000114a38: cmp eax, 0xfffff000; ja short 0x0000000000114a90; ret; 
0x00000000114acc: cmp eax, 0xfffff000; ja short 0x0000000000114ad8; ret; 
0x00000000114afc: cmp eax, 0xfffff000; ja short 0x0000000000114b08; ret; 
0x00000000115118: cmp eax, 0xfffff000; ja short 0x0000000000115160; ret; 
0x0000000011522e: cmp eax, 0xfffff000; ja short 0x0000000000115240; ret; 
0x000000001152a8: cmp eax, 0xfffff000; ja short 0x00000000001152f0; ret; 
0x00000000118d48: cmp eax, 0xfffff000; ja short 0x0000000000118da0; ret; 
0x0000000011936b: cmp eax, 0xfffff000; ja short 0x00000000001193f0; ret; 
0x0000000011942f: cmp eax, 0xfffff000; ja short 0x0000000000119440; ret; 
0x00000000119474: cmp eax, 0xfffff000; ja short 0x0000000000119480; ret; 
0x000000001198cb: cmp eax, 0xfffff000; ja short 0x0000000000119930; ret; 
0x0000000011997b: cmp eax, 0xfffff000; ja short 0x00000000001199e0; ret; 
0x00000000119a1c: cmp eax, 0xfffff000; ja short 0x0000000000119a28; ret; 
0x00000000119cd9: cmp eax, 0xfffff000; ja short 0x0000000000119ce8; ret; 
0x00000000119d0f: cmp eax, 0xfffff000; ja short 0x0000000000119d20; ret; 
0x00000000119d4c: cmp eax, 0xfffff000; ja short 0x0000000000119d58; ret; 
0x0000000011a252: cmp eax, 0xfffff000; ja short 0x000000000011a2a8; ret; 
0x0000000011a495: cmp eax, 0xfffff000; ja short 0x000000000011a4a0; ret; 
0x0000000011a4d6: cmp eax, 0xfffff000; ja short 0x000000000011a4e0; ret; 
0x0000000011a50c: cmp eax, 0xfffff000; ja short 0x000000000011a518; ret; 
0x0000000011ab68: cmp eax, 0xfffff000; ja short 0x000000000011abc0; ret; 
0x0000000011ac08: cmp eax, 0xfffff000; ja short 0x000000000011ac60; ret; 
0x0000000011acae: cmp eax, 0xfffff000; ja short 0x000000000011ad18; ret; 
0x0000000011ad6e: cmp eax, 0xfffff000; ja short 0x000000000011add8; ret; 
0x0000000011ba38: cmp eax, 0xfffff000; ja short 0x000000000011ba80; ret; 
0x0000000011baf8: cmp eax, 0xfffff000; ja short 0x000000000011bb40; ret; 
0x0000000011bbb8: cmp eax, 0xfffff000; ja short 0x000000000011bbc0; ret; 
0x0000000011d13c: cmp eax, 0xfffff000; ja short 0x000000000011d148; ret; 
0x0000000011d16c: cmp eax, 0xfffff000; ja short 0x000000000011d178; ret; 
0x0000000011ebd8: cmp eax, 0xfffff000; ja short 0x000000000011ec00; ret; 
0x0000000011ec98: cmp eax, 0xfffff000; ja short 0x000000000011ecf0; ret; 
0x000000001217c3: cmp eax, 0xfffff000; ja short 0x00000000001217d0; ret; 
0x00000000125bec: cmp eax, 0xfffff000; ja short 0x0000000000125bf8; ret; 
0x00000000125c1c: cmp eax, 0xfffff000; ja short 0x0000000000125c28; ret; 
0x00000000125cc1: cmp eax, 0xfffff000; ja short 0x0000000000125d40; ret; 
0x00000000125d91: cmp eax, 0xfffff000; ja short 0x0000000000125e10; ret; 
0x00000000125e54: cmp eax, 0xfffff000; ja short 0x0000000000125e60; ret; 
0x00000000125f1f: cmp eax, 0xfffff000; ja short 0x0000000000125f30; ret; 
0x00000000125f9b: cmp eax, 0xfffff000; ja short 0x0000000000126000; ret; 
0x0000000012604b: cmp eax, 0xfffff000; ja short 0x00000000001260b0; ret; 
0x000000001260fb: cmp eax, 0xfffff000; ja short 0x0000000000126160; ret; 
0x000000001261ab: cmp eax, 0xfffff000; ja short 0x0000000000126230; ret; 
0x00000000126278: cmp eax, 0xfffff000; ja short 0x00000000001262d0; ret; 
0x00000000126340: cmp eax, 0xfffff000; ja short 0x0000000000126378; mov r8d, eax; mov eax, r8d; ret; 
0x000000001263a4: cmp eax, 0xfffff000; ja short 0x00000000001263b0; ret; 
0x0000000012647c: cmp eax, 0xfffff000; ja short 0x0000000000126488; ret; 
0x000000001264af: cmp eax, 0xfffff000; ja short 0x00000000001264c0; ret; 
0x0000000012657f: cmp eax, 0xfffff000; ja short 0x0000000000126590; ret; 
0x000000001265bf: cmp eax, 0xfffff000; ja short 0x00000000001265d0; ret; 
0x000000001265fc: cmp eax, 0xfffff000; ja short 0x0000000000126608; ret; 
0x0000000012663b: cmp eax, 0xfffff000; ja short 0x0000000000126648; ret; 
0x0000000012669a: cmp eax, 0xfffff000; ja short 0x00000000001266a8; ret; 
0x000000001266fb: cmp eax, 0xfffff000; ja short 0x0000000000126708; ret; 
0x00000000126760: cmp eax, 0xfffff000; ja short 0x0000000000126770; ret; 
0x00000000126abf: cmp eax, 0xfffff000; ja short 0x0000000000126ad0; ret; 
0x000000001275d8: cmp eax, 0xfffff000; ja short 0x0000000000127630; ret; 
0x000000001276a8: cmp eax, 0xfffff000; ja short 0x0000000000127700; ret; 
0x0000000012779f: cmp eax, 0xfffff000; ja short 0x00000000001277b0; ret; 
0x00000000127821: cmp eax, 0xfffff000; ja short 0x0000000000127890; ret; 
0x000000001278db: cmp eax, 0xfffff000; ja short 0x0000000000127958; ret; 
0x00000000127a61: cmp eax, 0xfffff000; ja short 0x0000000000127ad0; ret; 
0x00000000127b18: cmp eax, 0xfffff000; ja short 0x0000000000127b70; ret; 
0x00000000127bbb: cmp eax, 0xfffff000; ja short 0x0000000000127c40; ret; 
0x00000000127c7f: cmp eax, 0xfffff000; ja short 0x0000000000127c90; ret; 
0x00000000127e9b: cmp eax, 0xfffff000; ja short 0x0000000000127f00; ret; 
0x00000000127f4b: cmp eax, 0xfffff000; ja short 0x0000000000127fb8; ret; 
0x0000000012800b: cmp eax, 0xfffff000; ja short 0x0000000000128070; ret; 
0x0000000012826b: cmp eax, 0xfffff000; ja short 0x00000000001282d0; ret; 
0x0000000012831b: cmp eax, 0xfffff000; ja short 0x0000000000128390; ret; 
0x000000001283cc: cmp eax, 0xfffff000; ja short 0x00000000001283d8; ret; 
0x0000000012840c: cmp eax, 0xfffff000; ja short 0x0000000000128438; ret; 
0x0000000012846c: cmp eax, 0xfffff000; ja short 0x0000000000128478; ret; 
0x0000000012855f: cmp eax, 0xfffff000; ja short 0x0000000000128570; ret; 
0x0000000012859c: cmp eax, 0xfffff000; ja short 0x00000000001285a8; ret; 
0x000000001285cc: cmp eax, 0xfffff000; ja short 0x00000000001285d8; ret; 
0x000000001285ff: cmp eax, 0xfffff000; ja short 0x0000000000128610; ret; 
0x00000000128652: cmp eax, 0xfffff000; ja short 0x0000000000128688; ret; 
0x000000001354de: cmp eax, 0xfffff000; ja short 0x00000000001354f0; ret; 
0x00000000177e84: cmp eax, 0xfffff000; ja short 0x0000000000177e90; ret; 
0x00000000095d70: cmp eax, 0xfffff000; jbe short 0x0000000000095d80; neg eax; ret; 
0x00000000095dbc: cmp eax, 0xfffff000; jbe short 0x0000000000095dd0; neg eax; ret; 
0x0000000009b5b5: cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x0000000004275c: cmp eax, 0xfffff001; jae short 0x0000000000042764; ret; 
0x00000000042d4c: cmp eax, 0xfffff001; jae short 0x0000000000042d54; ret; 
0x00000000053a12: cmp eax, 0xfffff001; jae short 0x0000000000053a1c; xor eax, eax; ret; 
0x000000000ea37c: cmp eax, 0xfffff001; jae short 0x00000000000ea384; ret; 
0x000000000ea5bc: cmp eax, 0xfffff001; jae short 0x00000000000ea5c4; ret; 
0x000000000eb0fc: cmp eax, 0xfffff001; jae short 0x00000000000eb104; ret; 
0x000000000ec11c: cmp eax, 0xfffff001; jae short 0x00000000000ec124; ret; 
0x000000000ec34c: cmp eax, 0xfffff001; jae short 0x00000000000ec354; ret; 
0x000000000ec37c: cmp eax, 0xfffff001; jae short 0x00000000000ec384; ret; 
0x000000000ec3dc: cmp eax, 0xfffff001; jae short 0x00000000000ec3e4; ret; 
0x000000000ec40c: cmp eax, 0xfffff001; jae short 0x00000000000ec414; ret; 
0x000000000ec43c: cmp eax, 0xfffff001; jae short 0x00000000000ec444; ret; 
0x000000000ec46c: cmp eax, 0xfffff001; jae short 0x00000000000ec474; ret; 
0x00000000108bec: cmp eax, 0xfffff001; jae short 0x0000000000108bf4; ret; 
0x00000000108c1c: cmp eax, 0xfffff001; jae short 0x0000000000108c24; ret; 
0x00000000108c4c: cmp eax, 0xfffff001; jae short 0x0000000000108c54; ret; 
0x00000000108c7c: cmp eax, 0xfffff001; jae short 0x0000000000108c84; ret; 
0x00000000108cac: cmp eax, 0xfffff001; jae short 0x0000000000108cb4; ret; 
0x00000000108cdc: cmp eax, 0xfffff001; jae short 0x0000000000108ce4; ret; 
0x00000000108d0c: cmp eax, 0xfffff001; jae short 0x0000000000108d14; ret; 
0x0000000011440c: cmp eax, 0xfffff001; jae short 0x0000000000114414; ret; 
0x0000000011443c: cmp eax, 0xfffff001; jae short 0x0000000000114444; ret; 
0x0000000011460c: cmp eax, 0xfffff001; jae short 0x0000000000114614; ret; 
0x0000000011463c: cmp eax, 0xfffff001; jae short 0x0000000000114644; ret; 
0x00000000114fac: cmp eax, 0xfffff001; jae short 0x0000000000114fb4; ret; 
0x0000000011519c: cmp eax, 0xfffff001; jae short 0x00000000001151a4; ret; 
0x000000001151cc: cmp eax, 0xfffff001; jae short 0x00000000001151d4; ret; 
0x000000001151fc: cmp eax, 0xfffff001; jae short 0x0000000000115204; ret; 
0x0000000011526c: cmp eax, 0xfffff001; jae short 0x0000000000115274; ret; 
0x0000000011532c: cmp eax, 0xfffff001; jae short 0x0000000000115334; ret; 
0x0000000011535c: cmp eax, 0xfffff001; jae short 0x0000000000115364; ret; 
0x00000000115c1c: cmp eax, 0xfffff001; jae short 0x0000000000115c24; ret; 
0x00000000115c4c: cmp eax, 0xfffff001; jae short 0x0000000000115c54; ret; 
0x00000000115c7c: cmp eax, 0xfffff001; jae short 0x0000000000115c84; ret; 
0x00000000115caf: cmp eax, 0xfffff001; jae short 0x0000000000115cb7; ret; 
0x0000000011613c: cmp eax, 0xfffff001; jae short 0x0000000000116144; ret; 
0x0000000011616f: cmp eax, 0xfffff001; jae short 0x0000000000116177; ret; 
0x0000000011619c: cmp eax, 0xfffff001; jae short 0x00000000001161a4; ret; 
0x000000001161cc: cmp eax, 0xfffff001; jae short 0x00000000001161d4; ret; 
0x000000001161fc: cmp eax, 0xfffff001; jae short 0x0000000000116204; ret; 
0x0000000011622f: cmp eax, 0xfffff001; jae short 0x0000000000116237; ret; 
0x0000000011625c: cmp eax, 0xfffff001; jae short 0x0000000000116264; ret; 
0x0000000011628c: cmp eax, 0xfffff001; jae short 0x0000000000116294; ret; 
0x000000001162bc: cmp eax, 0xfffff001; jae short 0x00000000001162c4; ret; 
0x0000000011932f: cmp eax, 0xfffff001; jae short 0x0000000000119337; ret; 
0x0000000011980c: cmp eax, 0xfffff001; jae short 0x0000000000119814; ret; 
0x0000000011a93c: cmp eax, 0xfffff001; jae short 0x000000000011a944; ret; 
0x0000000011b52c: cmp eax, 0xfffff001; jae short 0x000000000011b534; ret; 
0x0000000011b66c: cmp eax, 0xfffff001; jae short 0x000000000011b674; ret; 
0x0000000011b9cc: cmp eax, 0xfffff001; jae short 0x000000000011b9d4; ret; 
0x0000000011b9fc: cmp eax, 0xfffff001; jae short 0x000000000011ba04; ret; 
0x0000000011babc: cmp eax, 0xfffff001; jae short 0x000000000011bac4; ret; 
0x0000000011bb7c: cmp eax, 0xfffff001; jae short 0x000000000011bb84; ret; 
0x0000000011beac: cmp eax, 0xfffff001; jae short 0x000000000011beb4; ret; 
0x0000000011bedc: cmp eax, 0xfffff001; jae short 0x000000000011bee4; ret; 
0x0000000011bf0c: cmp eax, 0xfffff001; jae short 0x000000000011bf14; ret; 
0x0000000011ea3e: cmp eax, 0xfffff001; jae short 0x000000000011ea46; ret; 
0x0000000011ec2c: cmp eax, 0xfffff001; jae short 0x000000000011ec34; ret; 
0x0000000011ec5c: cmp eax, 0xfffff001; jae short 0x000000000011ec64; ret; 
0x0000000011ed2c: cmp eax, 0xfffff001; jae short 0x000000000011ed34; ret; 
0x0000000011ed5c: cmp eax, 0xfffff001; jae short 0x000000000011ed64; ret; 
0x0000000011ed8f: cmp eax, 0xfffff001; jae short 0x000000000011ed97; ret; 
0x0000000011edbc: cmp eax, 0xfffff001; jae short 0x000000000011edc4; ret; 
0x0000000011edec: cmp eax, 0xfffff001; jae short 0x000000000011edf4; ret; 
0x0000000011ee1c: cmp eax, 0xfffff001; jae short 0x000000000011ee24; ret; 
0x0000000011ee4c: cmp eax, 0xfffff001; jae short 0x000000000011ee54; ret; 
0x0000000012218f: cmp eax, 0xfffff001; jae short 0x0000000000122197; ret; 
0x000000001221bc: cmp eax, 0xfffff001; jae short 0x00000000001221c4; ret; 
0x000000001221ec: cmp eax, 0xfffff001; jae short 0x00000000001221f4; ret; 
0x0000000012221f: cmp eax, 0xfffff001; jae short 0x0000000000122227; ret; 
0x0000000012224f: cmp eax, 0xfffff001; jae short 0x0000000000122257; ret; 
0x0000000012227c: cmp eax, 0xfffff001; jae short 0x0000000000122284; ret; 
0x000000001222af: cmp eax, 0xfffff001; jae short 0x00000000001222b7; ret; 
0x000000001222dc: cmp eax, 0xfffff001; jae short 0x00000000001222e4; ret; 
0x0000000012230c: cmp eax, 0xfffff001; jae short 0x0000000000122314; ret; 
0x0000000012233f: cmp eax, 0xfffff001; jae short 0x0000000000122347; ret; 
0x0000000012236c: cmp eax, 0xfffff001; jae short 0x0000000000122374; ret; 
0x0000000012239f: cmp eax, 0xfffff001; jae short 0x00000000001223a7; ret; 
0x00000000125b0c: cmp eax, 0xfffff001; jae short 0x0000000000125b14; ret; 
0x00000000125b3c: cmp eax, 0xfffff001; jae short 0x0000000000125b44; ret; 
0x00000000125c4c: cmp eax, 0xfffff001; jae short 0x0000000000125c54; ret; 
0x00000000125c7c: cmp eax, 0xfffff001; jae short 0x0000000000125c84; ret; 
0x00000000125e8c: cmp eax, 0xfffff001; jae short 0x0000000000125e94; ret; 
0x00000000125f5c: cmp eax, 0xfffff001; jae short 0x0000000000125f64; ret; 
0x00000000126b9c: cmp eax, 0xfffff001; jae short 0x0000000000126ba4; ret; 
0x00000000126bcc: cmp eax, 0xfffff001; jae short 0x0000000000126bd4; ret; 
0x00000000126c0c: cmp eax, 0xfffff001; jae short 0x0000000000126c14; ret; 
0x00000000126c3c: cmp eax, 0xfffff001; jae short 0x0000000000126c44; ret; 
0x00000000126c6c: cmp eax, 0xfffff001; jae short 0x0000000000126c74; ret; 
0x00000000126c9c: cmp eax, 0xfffff001; jae short 0x0000000000126ca4; ret; 
0x00000000126ccc: cmp eax, 0xfffff001; jae short 0x0000000000126cd4; ret; 
0x00000000126cfc: cmp eax, 0xfffff001; jae short 0x0000000000126d04; ret; 
0x00000000126d2f: cmp eax, 0xfffff001; jae short 0x0000000000126d37; ret; 
0x00000000126d5c: cmp eax, 0xfffff001; jae short 0x0000000000126d64; ret; 
0x00000000126d8f: cmp eax, 0xfffff001; jae short 0x0000000000126d97; ret; 
0x00000000126dbc: cmp eax, 0xfffff001; jae short 0x0000000000126dc4; ret; 
0x00000000126dec: cmp eax, 0xfffff001; jae short 0x0000000000126df4; ret; 
0x00000000126e1c: cmp eax, 0xfffff001; jae short 0x0000000000126e24; ret; 
0x00000000126e4c: cmp eax, 0xfffff001; jae short 0x0000000000126e54; ret; 
0x00000000126e7c: cmp eax, 0xfffff001; jae short 0x0000000000126e84; ret; 
0x00000000126eaf: cmp eax, 0xfffff001; jae short 0x0000000000126eb7; ret; 
0x00000000126edc: cmp eax, 0xfffff001; jae short 0x0000000000126ee4; ret; 
0x00000000126f0c: cmp eax, 0xfffff001; jae short 0x0000000000126f14; ret; 
0x00000000126f3f: cmp eax, 0xfffff001; jae short 0x0000000000126f47; ret; 
0x00000000126f6f: cmp eax, 0xfffff001; jae short 0x0000000000126f77; ret; 
0x00000000126f9c: cmp eax, 0xfffff001; jae short 0x0000000000126fa4; ret; 
0x00000000126fcc: cmp eax, 0xfffff001; jae short 0x0000000000126fd4; ret; 
0x00000000126ffc: cmp eax, 0xfffff001; jae short 0x0000000000127004; ret; 
0x0000000012702c: cmp eax, 0xfffff001; jae short 0x0000000000127034; ret; 
0x0000000012705c: cmp eax, 0xfffff001; jae short 0x0000000000127064; ret; 
0x0000000012708f: cmp eax, 0xfffff001; jae short 0x0000000000127097; ret; 
0x000000001270bc: cmp eax, 0xfffff001; jae short 0x00000000001270c4; ret; 
0x000000001270ec: cmp eax, 0xfffff001; jae short 0x00000000001270f4; ret; 
0x0000000012711c: cmp eax, 0xfffff001; jae short 0x0000000000127124; ret; 
0x0000000012714c: cmp eax, 0xfffff001; jae short 0x0000000000127154; ret; 
0x0000000012718c: cmp eax, 0xfffff001; jae short 0x0000000000127194; ret; 
0x0000000012766c: cmp eax, 0xfffff001; jae short 0x0000000000127674; ret; 
0x0000000012773c: cmp eax, 0xfffff001; jae short 0x0000000000127744; ret; 
0x0000000012776c: cmp eax, 0xfffff001; jae short 0x0000000000127774; ret; 
0x000000001277dc: cmp eax, 0xfffff001; jae short 0x00000000001277e4; ret; 
0x00000000127cbc: cmp eax, 0xfffff001; jae short 0x0000000000127cc4; ret; 
0x00000000127cec: cmp eax, 0xfffff001; jae short 0x0000000000127cf4; ret; 
0x00000000127d1f: cmp eax, 0xfffff001; jae short 0x0000000000127d27; ret; 
0x00000000133d4f: cmp eax, 0xffffff0c; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000001190ed: cmp eax, 0xffffffa1; je short 0x00000000001190f8; neg eax; ret; 
0x000000001192fd: cmp eax, 0xffffffa1; je short 0x0000000000119308; neg eax; ret; 
0x00000000091085: cmp eax, 0xffffffb5; jne short 0x0000000000091070; neg eax; ret; 
0x000000000e5633: cmp eax, 0xffffffea; mov eax, 0x3; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000141dd8: cmp eax, 0xfffffff5; je short 0x0000000000141dd0; pop rbx; ret; 
0x000000000b51ef: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000ea3bc: cmp eax, 0xffffffff; cmove rax, rdx; ret; 
0x00000000029fc5: cmp eax, 0xffffffff; je 0x000000000002a070; add rsp, 0x98; ret; 
0x00000000061fae: cmp eax, 0xffffffff; je short 0x0000000000061fc0; mov eax, r8d; ret; 
0x0000000007f864: cmp eax, 0xffffffff; je short 0x000000000007f878; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000a2647: cmp eax, 0xffffffff; je short 0x00000000000a2658; add rsp, 0x8; ret; 
0x0000000012941d: cmp eax, 0xffffffff; je short 0x0000000000129450; add eax, 0x1; mov [rdx], ax; ret; 
0x000000001293dc: cmp eax, 0xffffffff; je short 0x0000000000129450; add eax, 0x1; mov [rdx], eax; ret; 
0x00000000175ed2: cmp eax, 0xffffffff; sete dl; mov [rbx], edx; pop rbx; ret; 
0x0000000011d824: cmp eax, 0xffffffff; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x000000000eb0f5: cmp eax, [rax]; add [rax], al; syscall; 
0x00000000073786: cmp eax, [rbp-0x8d8]; jae 0x0000000000074300; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000078d13: cmp eax, [rbp-0x8e8]; jae 0x00000000000799f8; mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x0000000005d66c: cmp eax, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000001b2a51: cmp eax, [rcx]; add [rax], al; mov byte ptr [rdi], 0x0; ret; 
0x0000000019ea21: cmp eax, [rcx]; add [rax], al; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000000b1641: cmp eax, [rdx-0x72b7fff2]; add eax, 0x37f4; cmove rax, rdx; ret; 
0x00000000129089: cmp eax, [rip+0xf03e9]; mov [rdi+0x10], rax; jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x00000000129145: cmp eax, [rip+0xf84a5]; jae short 0x0000000000129159; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000000d7abe: cmp eax, [rsi+0x10]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ad3: cmp eax, [rsi+0x14]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ae8: cmp eax, [rsi+0x18]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b03: cmp eax, [rsi+0x1c]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b1e: cmp eax, [rsi+0x20]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b33: cmp eax, [rsi+0x24]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b48: cmp eax, [rsi+0x28]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b53: cmp eax, [rsi+0x2c]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b6e: cmp eax, [rsi+0x30]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b83: cmp eax, [rsi+0x34]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b98: cmp eax, [rsi+0x38]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7ba3: cmp eax, [rsi+0x3c]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7a73: cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a88: cmp eax, [rsi+0x8]; jne 0x00000000000d7bb0; ret; 
0x000000000d7aa3: cmp eax, [rsi+0xc]; jne 0x00000000000d7bb0; ret; 
0x000000001b5b6d: cmp eax, [rsi+rcx*4+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a13a5: cmp eax, [rsi+rcx+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a3da9: cmp eax, [rsi+rcx]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a671a: cmp eax, [rsi-0x10]; jne 0x00000000001a6850; ret; 
0x000000001a6763: cmp eax, [rsi-0x4]; jne 0x00000000001a6850; ret; 
0x000000001a6843: cmp eax, [rsi-0x4]; jne short 0x00000000001a6850; xor eax, eax; ret; 
0x000000001a6748: cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000001a6733: cmp eax, [rsi-0xc]; jne 0x00000000001a6850; ret; 
0x000000000d7a5d: cmp eax, [rsi]; jne 0x00000000000d7bb0; ret; 
0x000000000eced7: cmp eax, eax; jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x00000000153b66: cmp eax, ebp; sbb fs:[rdx], eax; add [rcx-0x75], al; notrack call qword ptr [rsp+0x70]; 
0x000000001b6194: cmp eax, ebp; sti; xchg ebx, eax; ret; 
0x0000000014c031: cmp eax, ebx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000008588f: cmp eax, ebx; jae 0x0000000000085f70; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x00000000084d54: cmp eax, ecx; cmovb rax, rcx; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x00000000083578: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne short 0x0000000000083570; ret; 
0x0000000008d570: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne short 0x000000000008d568; ret; 
0x000000000d7e67: cmp eax, ecx; ja short 0x00000000000d7e80; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000008478e: cmp eax, ecx; jae short 0x0000000000084795; mov r8d, [rax]; mov eax, r8d; ret; 
0x00000000077740: cmp eax, ecx; jbe 0x0000000000077828; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007d1fb: cmp eax, ecx; jbe 0x000000000007d2d8; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007ebdf: cmp eax, ecx; jbe 0x000000000007ece0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007ed51: cmp eax, ecx; jbe 0x000000000007ee90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000085f33: cmp eax, ecx; jbe 0x0000000000086058; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000867be: cmp eax, ecx; jbe 0x00000000000868a0; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000087791: cmp eax, ecx; jbe 0x0000000000087910; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000088fa1: cmp eax, ecx; jbe 0x0000000000089110; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008ae63: cmp eax, ecx; jbe 0x000000000008af10; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008bf6d: cmp eax, ecx; jbe 0x000000000008c060; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000008da19: cmp eax, ecx; jbe 0x000000000008daa8; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008dbf1: cmp eax, ecx; jbe 0x000000000008dc88; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008e466: cmp eax, ecx; jbe 0x000000000008e510; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007232b: cmp eax, ecx; jbe short 0x0000000000072388; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000000778b7: cmp eax, ecx; jbe short 0x0000000000077930; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000007f220: cmp eax, ecx; jbe short 0x000000000007f268; mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x00000000080f8e: cmp eax, ecx; jbe short 0x0000000000081010; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000081809: cmp eax, ecx; jbe short 0x000000000008184a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x000000000838ec: cmp eax, ecx; jbe short 0x0000000000083928; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084461: cmp eax, ecx; jbe short 0x0000000000084490; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x000000000844ff: cmp eax, ecx; jbe short 0x0000000000084510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008834b: cmp eax, ecx; jbe short 0x00000000000883a0; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x0000000008a0fd: cmp eax, ecx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000008a2fb: cmp eax, ecx; jbe short 0x000000000008a358; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000008a51c: cmp eax, ecx; jbe short 0x000000000008a580; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008c0cd: cmp eax, ecx; jbe short 0x000000000008c108; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000008d7d6: cmp eax, ecx; jbe short 0x000000000008d838; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000008dd56: cmp eax, ecx; jbe short 0x000000000008ddc0; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008de0c: cmp eax, ecx; jbe short 0x000000000008de38; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008e86c: cmp eax, ecx; jbe short 0x000000000008e8a0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008e8ff: cmp eax, ecx; jbe short 0x000000000008e920; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008f121: cmp eax, ecx; jbe short 0x000000000008f180; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r12+0x18]; 
0x000000000b12cb: cmp eax, ecx; je short 0x00000000000b12b0; mov rax, r8; ret; 
0x000000001a6012: cmp eax, ecx; jne 0x00000000001a6220; xor eax, eax; ret; 
0x000000001a617a: cmp eax, ecx; jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a6233: cmp eax, ecx; sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x0000000011a9e6: cmp eax, edi; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000008a5cc: cmp eax, edi; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008fb5d: cmp eax, edx; cmovb rax, rdx; sub rax, [rdi+0x18]; ret; 
0x000000000d7d9f: cmp eax, edx; ja 0x00000000000d7e80; add rax, rdi; add rax, rcx; ret; 
0x0000000008f5df: cmp eax, edx; jae short 0x000000000008f608; movzx eax, byte ptr [rax]; ret; 
0x0000000016cdc7: cmp eax, edx; jae short 0x000000000016cdd0; xor eax, eax; ret; 
0x00000000168a9d: cmp eax, edx; je short 0x0000000000168aa8; pop rbx; ret; 
0x00000000168b0d: cmp eax, edx; je short 0x0000000000168b20; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x00000000168b8d: cmp eax, edx; je short 0x0000000000168ba0; add rax, 0xa0; pop rbx; ret; 
0x00000000168c0d: cmp eax, edx; je short 0x0000000000168c20; add rax, 0xa8; pop rbx; ret; 
0x000000000b11d1: cmp eax, edx; jne short 0x00000000000b11c0; mov rax, r8; ret; 
0x000000000ecfe5: cmp eax, edx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000039b15: cmp eax, edx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000b1353: cmp eax, edx; setne dil; test r9b, dil; jne short 0x00000000000b1338; ret; 
0x00000000095d68: cmp eax, esi; cmovbe rsi, r8; syscall; 
0x0000000012df4d: cmp eax, esi; jb short 0x000000000012df60; mov eax, 0x1; ret; 
0x000000000a50f3: cmp eax, esi; jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x000000000b119d: cmp eax, esi; jne short 0x00000000000b1190; mov rax, r8; ret; 
0x0000000014235a: cmp eax, esi; jne short 0x0000000000142330; mov [r8], rdi; xor eax, eax; ret; 
0x000000000379c3: cmp ebp, 0xc; ja 0x0000000000037b10; movsxd rcx, [rdi+r9*4]; add rcx, rdi; notrack jmp rcx; 
0x000000001450e6: cmp ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000144825: cmp ebp, [rsi]; je short 0x0000000000144830; pop rbx; ret; 
0x0000000016755a: cmp ebp, ebx; ret; 
0x000000000841c1: cmp ebp, edx; jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x0000000008e150: cmp ebp, edx; jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000008e200: cmp ebp, edx; jbe 0x000000000008e410; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008efe9: cmp ebp, edx; jbe short 0x000000000008f050; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000183e89: cmp ebx, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000a8706: cmp ebx, 0xe0894cff; pop rbx; pop rbp; pop r12; ret; 
0x000000000a8707: cmp ebx, 0xe0894cff; pop rbx; pop rbp; pop r12; ret; 
0x00000000038f9b: cmp ebx, 0xffffffff; call qword ptr [rax-0x1a77a39]; 
0x00000000045c6b: cmp ebx, [rip-0x1609cf00]; imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000045368: cmp ebx, [rip-0x7aff7500]; shl byte ptr [rbp+0xf], 0xe9; cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000120e04: cmp ebx, eax; jae short 0x0000000000120e28; mov rsi, r12; mov rdi, r15; call r14; 
0x0000000008a7b0: cmp ebx, eax; jbe 0x000000000008a8e8; mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x0000000008ba26: cmp ebx, eax; jbe 0x000000000008bb58; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008bc52: cmp ebx, eax; jbe 0x000000000008be40; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x00000000112cec: cmp ebx, eax; pop rbx; setl al; ret; 
0x000000001bb8b3: cmp ebx, ebp; jae short 0x00000000001bb8cb; nop [rax+rax]; call qword ptr [rbx]; 
0x000000000839fe: cmp ebx, edx; jbe 0x0000000000083b90; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000008b053: cmp ebx, edx; jbe 0x000000000008b2c0; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008ea2f: cmp ebx, esi; jbe 0x000000000008eb68; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000004553b: cmp ebx, esp; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x00000000126753: cmp ecx, 0x1; ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x00000000172744: cmp ecx, 0x3; jbe short 0x0000000000172750; ret; 
0x00000000096776: cmp ecx, 0x400; jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x000000000aa99b: cmp ecx, 0x5; je short 0x00000000000aa9a4; xor byte ptr [rax+0x6], 0x2a; mov rax, r8; ret; 
0x00000000073056: cmp ecx, 0x7; ja 0x0000000000073560; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x00000000078586: cmp ecx, 0x7; ja 0x0000000000078b30; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x000000000df74f: cmp ecx, 0x850f0400; ret; 
0x00000000109352: cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x00000000056606: cmp ecx, 0xe0757fff; mov eax, 0x1; ret; 
0x0000000014965a: cmp ecx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149613: cmp ecx, 0xff; jg short 0x0000000000149620; ret; 
0x00000000126397: cmp ecx, 0xffffffff; je short 0x00000000001263c8; mov eax, 0x149; syscall; 
0x00000000174a26: cmp ecx, [rax+0x28]; jae short 0x0000000000174a10; mov eax, 0x1; ret; 
0x0000000015d8a3: cmp ecx, [rax-0x7b]; push qword ptr [rsi+rcx+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000002abd8: cmp ecx, [rax-0x7d]; ret; 
0x000000001092ec: cmp ecx, [rax-0xc]; jne short 0x00000000001092e0; mov eax, [rdx+0x8]; ret; 
0x000000001a1b39: cmp ecx, [rdx+rdi+0x20]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47f9: cmp ecx, [rdx+rdi+0x20]; jne 0x00000000001b4610; ret; 
0x000000001a1b68: cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1b66: cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4836: cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001b4610; ret; 
0x000000001b4838: cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001b4610; ret; 
0x000000001a1fdf: cmp ecx, [rdx+rdi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001a1fde: cmp ecx, [rdx+rdi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ebe: cmp ecx, [rdx+rdi]; jne 0x00000000001b4c81; ret; 
0x000000001b4ebf: cmp ecx, [rdx+rdi]; jne 0x00000000001b4c81; ret; 
0x000000000f4120: cmp ecx, [rsi+0x40]; jl short 0x00000000000f4190; mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x000000001b5b89: cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5b9e: cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d1d: cmp ecx, [rsi+rax*4-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d05: cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5a39: cmp ecx, [rsi+rax*4]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35d1: cmp ecx, [rsi+rax+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a134a: cmp ecx, [rsi+rax+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a136a: cmp ecx, [rsi+rax+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001b5cb9: cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a14f0: cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a360e: cmp ecx, [rsi+rax-0x10]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a152c: cmp ecx, [rsi+rax-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a150c: cmp ecx, [rsi+rax-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a35f0: cmp ecx, [rsi+rax]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a1329: cmp ecx, [rsi+rax]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001a199a: cmp ecx, [rsi+rdx+0x20]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4626: cmp ecx, [rsi+rdx+0x20]; jne short 0x00000000001b4610; ret; 
0x000000001a19b9: cmp ecx, [rsi+rdx+0x40]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4639: cmp ecx, [rsi+rdx+0x40]; jne short 0x00000000001b4610; ret; 
0x000000001a19da: cmp ecx, [rsi+rdx+0x60]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b464e: cmp ecx, [rsi+rdx+0x60]; jne short 0x00000000001b4610; ret; 
0x000000001a358e: cmp ecx, [rsi+rdx-0x4]; jne short 0x00000000001a35aa; ret; 
0x000000001a1cff: cmp ecx, [rsi+rdx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a2207: cmp ecx, [rsi+rdx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b49f2: cmp ecx, [rsi+rdx]; jne 0x00000000001b4610; ret; 
0x000000001b513a: cmp ecx, [rsi+rdx]; jne 0x00000000001b4c81; ret; 
0x000000001a1e26: cmp ecx, [rsi+rdx]; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ca3: cmp ecx, [rsi+rdx]; jne short 0x00000000001b4c81; ret; 
0x000000001a1626: cmp ecx, [rsi]; je short 0x00000000001a15d0; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35a6: cmp ecx, [rsi]; je short 0x00000000001a3597; setg al; lea eax, [rax+rax-0x1]; ret; 
0x000000001ae646: cmp ecx, [rsi]; je short 0x00000000001ae5f0; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a21e4: cmp ecx, [rsi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b5114: cmp ecx, [rsi]; jne 0x00000000001b4c81; ret; 
0x00000000114267: cmp ecx, eax; jne short 0x0000000000114298; mov r10d, ecx; mov eax, 0x103; syscall; 
0x00000000054694: cmp ecx, eax; sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x00000000142321: cmp ecx, edi; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x00000000149b4e: cmp ecx, edi; jg short 0x0000000000149b0d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000149669: cmp ecx, edx; jae short 0x0000000000149620; mov byte ptr [r9], 0x0; ret; 
0x000000000b1270: cmp ecx, edx; je short 0x00000000000b1268; cmp ecx, esi; je short 0x00000000000b1268; ret; 
0x000000000b1300: cmp ecx, edx; jne short 0x00000000000b12f0; ret; 
0x000000001281c8: cmp ecx, edx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x0000000008453a: cmp ecx, esi; ja short 0x0000000000084530; lea eax, [rdx+rdi]; ret; 
0x0000000008e94a: cmp ecx, esi; ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x0000000019dd8e: cmp ecx, esi; jb 0x000000000019db84; mov rax, r8; vzeroupper; ret; 
0x000000001a2c81: cmp ecx, esi; jb 0x00000000001a2a04; mov rax, r8; vzeroupper; ret; 
0x000000000b1274: cmp ecx, esi; je short 0x00000000000b1268; ret; 
0x00000000090ae4: cmp edi, 0x1; je short 0x0000000000090af9; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b7be: cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x00000000092bb4: cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x000000000918f4: cmp edi, 0x21; je short 0x0000000000091900; ret; 
0x00000000136695: cmp edi, 0x3ff; ja short 0x00000000001366a5; mov rax, rdi; sar rax, 0x6; ret; 
0x00000000132a94: cmp edi, 0x56; je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x000000001426cf: cmp edi, 0x5; mov edx, 0x0; mov eax, 0x102; cmovne eax, edx; ret; 
0x0000000007c295: cmp edi, 0x5a; jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x000000000dce45: cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x000000001426a5: cmp edi, 0xb; mov edx, 0x29; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000000fc67d: cmp edi, 0xfc084ff; test al, cl; add al, [rax]; add [rax-0x7d], cl; ret; 
0x000000000546f8: cmp edi, 0xfffffff8; jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x00000000091365: cmp edi, 0xffffffff; nop [rax+rax]; ret; 
0x000000001410b1: cmp edi, [rax+0x3]; syscall; 
0x000000001a1c8c: cmp edi, [rdx+rcx+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b49a2: cmp edi, [rdx+rcx+0x40]; jne 0x00000000001b4610; ret; 
0x000000001a1b06: cmp edi, [rdx+rcx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1f9c: cmp edi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b47b8: cmp edi, [rdx+rcx]; jne 0x00000000001b4610; ret; 
0x000000001b4e6e: cmp edi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x00000000142e8a: cmp edi, eax; ja short 0x0000000000142ee0; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000046d55: cmp edi, eax; jb short 0x0000000000046d35; xor eax, eax; ret; 
0x000000001217b7: cmp edi, eax; jne short 0x00000000001217e8; mov eax, 0x88; syscall; 
0x00000000134afb: cmp edi, ebp; jmp qword ptr [rsi-0x70]; 
0x0000000005d5f1: cmp edi, ecx; ja short 0x000000000005d5d8; mov eax, r8d; ret; 
0x000000001715ab: cmp edi, edx; dec dword ptr [rbx-0x17b7b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x000000000c497b: cmp edi, edx; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x00000000122476: cmp edi, edx; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x000000000d7c9e: cmp edi, esi; cmovl eax, edx; ret; 
0x00000000113afc: cmp edi, esi; jne short 0x0000000000113ad8; mov eax, r8d; ret; 
0x00000000095cf7: cmp edi, esi; sete al; ret; 
0x000000001b1316: cmp edx, 0x1; ja 0x00000000001b13b0; je short 0x00000000001b13a0; mov byte ptr [rdi], 0x0; ret; 
0x000000001b20c6: cmp edx, 0x1; ja 0x00000000001b2160; je short 0x00000000001b2150; mov byte ptr [rdi], 0x0; ret; 
0x000000001b2a46: cmp edx, 0x1; ja 0x00000000001b2ba0; je 0x00000000001b2b90; mov byte ptr [rdi], 0x0; ret; 
0x000000000c514f: cmp edx, 0x1; ja short 0x00000000000c5170; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x000000001a72df: cmp edx, 0x1; ja short 0x00000000001a7320; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000001afc55: cmp edx, 0x1; ja short 0x00000000001afc80; jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x00000000045434: cmp edx, 0x1; jg 0x0000000000045558; mov edi, ebp; call rax; 
0x000000000454cf: cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x00000000045485: cmp edx, 0x1; jg 0x00000000000455a0; mov esi, ebp; mov rdi, r13; call rax; 
0x00000000045a46: cmp edx, 0x1; jg 0x0000000000045bc8; xor esi, esi; mov rdi, r8; call rax; 
0x00000000045b39: cmp edx, 0x1; jg 0x0000000000045bf4; xor esi, esi; mov rdi, r8; call rax; 
0x00000000095e24: cmp edx, 0x1; jg short 0x0000000000095e40; add rsp, 0x10; pop rbp; ret; 
0x00000000099a0a: cmp edx, 0x1; jg short 0x0000000000099a58; nop; add rsp, 0x18; ret; 
0x00000000099b26: cmp edx, 0x1; jg short 0x0000000000099b80; nop; add rsp, 0x18; ret; 
0x0000000012c701: cmp edx, 0x1; jg short 0x000000000012c720; add rsp, 0x18; ret; 
0x000000001721fd: cmp edx, 0x1; jg short 0x0000000000172230; add rsp, 0x10; pop rbp; ret; 
0x0000000017227d: cmp edx, 0x1; jg short 0x00000000001722a0; add rsp, 0x10; pop rbp; ret; 
0x00000000172469: cmp edx, 0x1; jg short 0x00000000001724a0; add rsp, 0x10; pop rbp; ret; 
0x000000001724fd: cmp edx, 0x1; jg short 0x0000000000172530; add rsp, 0x10; pop rbp; ret; 
0x00000000155062: cmp edx, 0x1; jne short 0x0000000000155088; ret; 
0x00000000092ae4: cmp edx, 0x1; sbb eax, eax; ret; 
0x000000000ed13e: cmp edx, 0x1badface; setne al; ret; 
0x000000000ed159: cmp edx, 0x1cd1; setne al; ret; 
0x000000000c5003: cmp edx, 0x20; ja 0x00000000000c50c9; movups [rdi+rdx-0x10], xmm0; movups [rdi], xmm0; ret; 
0x000000000c50a3: cmp edx, 0x20; ja short 0x00000000000c50c0; movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x00000000126328: cmp edx, 0x26; je short 0x0000000000126366; mov eax, r8d; ret; 
0x000000000dce35: cmp edx, 0x28f5c28; jbe short 0x00000000000dce40; ret; 
0x000000001092bf: cmp edx, 0x2; je short 0x00000000001092c8; ret; 
0x0000000009286a: cmp edx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000001afad8: cmp edx, 0x40; ja 0x00000000001afbc9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001afb54: cmp edx, 0x40; ja short 0x00000000001afbc0; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x00000000118bc4: cmp edx, 0x4; ja short 0x0000000000118bd0; mov [rsi+0x66], dx; xor eax, eax; ret; 
0x00000000113a46: cmp edx, 0x4; je short 0x0000000000113a54; mov eax, 0x1c; syscall; 
0x000000000ed126: cmp edx, 0x5346544e; setne al; ret; 
0x000000001367a9: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000001a7158: cmp edx, 0x80; ja 0x00000000001a7249; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001a71d4: cmp edx, 0x80; ja short 0x00000000001a7240; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x00000000090aa7: cmp edx, 0x8; je short 0x0000000000090aad; ret; 
0x0000000012a0d5: cmp edx, 0x9; setbe al; ret; 
0x000000000ed10a: cmp edx, 0xadf5; setne al; ret; 
0x000000000ee296: cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000083d44: cmp edx, [rax+0x18]; jbe short 0x0000000000083d68; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000011d7f8: cmp edx, [rax]; add [rax-0x7b], cl; push qword ptr [rbp+0x10]; mov eax, 0x1; ret; 
0x00000000115278: cmp edx, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000115244: cmp edx, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000053b47: cmp edx, [rax]; mov eax, 0x0; jne short 0x0000000000053b53; push r10; ret; 
0x00000000054030: cmp edx, [rax]; mov eax, 0x0; jne short 0x000000000005403c; push r10; ret; 
0x0000000007b321: cmp edx, [rdx+0x15]; add [rcx-0x7d], al; call far fword ptr [rax+0x48]; 
0x000000000c4c0d: cmp edx, [rip+0x15b98d]; jae short 0x00000000000c4c20; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x000000000c5344: cmp edx, [rip-0x7f74b800]; adc [rdx], al; add [rax], al; ret; 
0x000000000c5324: cmp edx, [rip-0x7f74b800]; add [rdx], al; add [rax], al; ret; 
0x000000000c5364: cmp edx, [rip-0x7f74b800]; and [rdx], al; add [rax], al; ret; 
0x000000000c5394: cmp edx, [rip-0x7f74b800]; cmp [rdx], al; add [rax], al; ret; 
0x000000000c5334: cmp edx, [rip-0x7f74b800]; or [rdx], al; add [rax], al; ret; 
0x000000000c5354: cmp edx, [rip-0x7f74b800]; sbb [rdx], al; add [rax], al; ret; 
0x000000000c5374: cmp edx, [rip-0x7f74b800]; sub [rdx], al; add [rax], al; ret; 
0x000000000c5383: cmp edx, [rip-0x7f74b800]; xor [rdx], al; add [rax], al; ret; 
0x000000000e66aa: cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000001ae867: cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae84b: cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b58f7: cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b58e3: cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5f27: cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b5f11: cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b63e7: cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b63ce: cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5766: cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001ae6e6: cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x000000001994a6: cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x0000000014229a: cmp edx, eax; sbb eax, eax; ret; 
0x00000000092df1: cmp edx, ebp; jbe short 0x0000000000092e40; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000008ab7a: cmp edx, ebx; jae 0x000000000008ae90; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008aa09: cmp edx, ebx; jae 0x000000000008aec8; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x000000001354d5: cmp edx, ecx; ja short 0x0000000000135504; xor eax, eax; syscall; 
0x0000000005a2c6: cmp edx, ecx; jae short 0x000000000005a2ac; mov rax, r8; ret; 
0x00000000119506: cmp edx, ecx; je short 0x0000000000119510; ret; 
0x000000001989fc: cmp edx, ecx; jle 0x0000000000198aa0; ret; 
0x00000000198799: cmp edx, ecx; jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x0000000019879a: cmp edx, ecx; jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x00000000172730: cmp edx, ecx; sete al; ret; 
0x00000000084a46: cmp edx, edi; jmp qword ptr [rsi+0x48]; 
0x00000000090a62: cmp edx, edi; setae al; ret; 
0x000000000b1238: cmp edx, esi; je short 0x00000000000b1230; ret; 
0x000000000c6de7: cmp edx, esi; je short 0x00000000000c6def; test edx, edx; jne short 0x00000000000c6de0; ret; 
0x000000000a8740: cmp esi, 0x120; je short 0x00000000000a8750; ret; 
0x000000000a87c0: cmp esi, 0x120; je short 0x00000000000a87d0; ret; 
0x000000000a8a00: cmp esi, 0x120; je short 0x00000000000a8a10; ret; 
0x000000000a9490: cmp esi, 0x120; je short 0x00000000000a94a0; ret; 
0x000000000a95c0: cmp esi, 0x120; je short 0x00000000000a95d0; ret; 
0x000000000ab020: cmp esi, 0x120; je short 0x00000000000ab030; ret; 
0x000000000ab0b0: cmp esi, 0x120; je short 0x00000000000ab0c0; ret; 
0x000000000b1610: cmp esi, 0x120; je short 0x00000000000b1620; ret; 
0x000000000c5410: cmp esi, 0x120; je short 0x00000000000c5420; ret; 
0x000000000c5490: cmp esi, 0x120; je short 0x00000000000c54a0; ret; 
0x000000000c56c0: cmp esi, 0x120; je short 0x00000000000c56d0; ret; 
0x000000000c57f0: cmp esi, 0x120; je short 0x00000000000c5800; ret; 
0x000000000c5a50: cmp esi, 0x120; je short 0x00000000000c5a60; ret; 
0x0000000014268e: cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000092b94: cmp esi, 0x1; ja short 0x0000000000092ba0; mov [rdi], esi; xor eax, eax; ret; 
0x0000000009b574: cmp esi, 0x1; ja short 0x000000000009b580; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000099de8: cmp esi, 0x1; je short 0x0000000000099df8; mov eax, 0x16; ret; 
0x000000000e55b4: cmp esi, 0x1; je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e4: cmp esi, 0x1; je short 0x00000000000e55f0; xor eax, eax; ret; 
0x00000000099e18: cmp esi, 0x1; jne short 0x0000000000099e40; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000092768: cmp esi, 0x1; mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x000000000892ed: cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000009b554: cmp esi, 0x2; ja short 0x000000000009b560; mov [rdi], esi; xor eax, eax; ret; 
0x00000000113a19: cmp esi, 0x2; ja short 0x0000000000113a26; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x00000000092739: cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000053ca2: cmp esi, 0x2f; notrack jmp rdx; 
0x0000000017272a: cmp esi, 0x3; ja short 0x0000000000172740; cmp dx, cx; sete al; ret; 
0x00000000035dcc: cmp esi, 0x3; je short 0x0000000000035dd8; pop rbx; ret; 
0x000000000928aa: cmp esi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x00000000183b89: cmp esi, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000142f52: cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000320b2: cmp esi, 0x860f07ff; xchg esp, eax; add [rax], al; add [rcx+0x3948fc51], cl; ret; 
0x0000000014567e: cmp esi, 0x8b48ffff; add al, 0x24; mov rdi, r15; call rax; 
0x00000000119a79: cmp esi, 0x9; je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x00000000119b08: cmp esi, 0x9; je short 0x0000000000119b38; mov eax, 0x48; syscall; 
0x0000000002ef6e: cmp esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001a2387: cmp esi, [r15+rax]; jne short 0x00000000001a2334; add rax, rdi; vzeroupper; ret; 
0x00000000071dd1: cmp esi, [rax+0x1a]; add [rbx-0x51f4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x000000001b438f: cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000000bfbe1: cmp esi, [rcx+rdx]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000f0e18: cmp esi, [rdi+0x25]; lea rsi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000e575b: cmp esi, [rdi+0x2a]; mov eax, 0xe3; syscall; 
0x000000001b43e4: cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4564: cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4539: cmp esi, [rdi+rax*4+0x40]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43a4: cmp esi, [rdi+rax*4+0x60]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b4554: cmp esi, [rdi+rax*4]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x000000001a2306: cmp esi, [rdi+rax]; jne short 0x00000000001a2334; add rax, rdi; vzeroupper; ret; 
0x000000001a24a6: cmp esi, [rdi+rax]; jne short 0x00000000001a24d4; add rax, rdi; vzeroupper; ret; 
0x0000000015fd72: cmp esi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x000000001b45ad: cmp esi, [rdx+rax*4]; jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001a2531: cmp esi, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000001a1b95: cmp esi, [rdx+rcx+0x60]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4877: cmp esi, [rdx+rcx+0x60]; jne 0x00000000001b4610; ret; 
0x000000001a205b: cmp esi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4f5d: cmp esi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x000000001b4138: cmp esi, eax; cmovb eax, esi; ret; 
0x000000001a2c98: cmp esi, eax; cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019dda5: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x000000000d7cb8: cmp esi, eax; cmovg eax, edx; ret; 
0x000000001b4128: cmp esi, eax; ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54cb: cmp esi, eax; ja 0x00000000001b5287; mov eax, esi; ret; 
0x000000001b4060: cmp esi, eax; jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b402e: cmp esi, eax; jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40e6: cmp esi, eax; jb short 0x00000000001b40f4; sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40ac: cmp esi, eax; jb short 0x00000000001b40f4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000008b404: cmp esi, eax; jbe 0x000000000008b4e0; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000152d53: cmp esi, edi; jmp qword ptr [rsi+0x2e]; 
0x000000000d7c87: cmp esi, edi; jne short 0x00000000000d7c90; ret; 
0x000000000897d3: cmp esi, esi; sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d7cb7: cmp esi, r8d; cmovg eax, edx; ret; 
0x0000000008b742: cmp esp, edx; jbe 0x000000000008b900; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000ed4f9: cmp qword ptr [r8+0x1], 0xfffffffffb82ba48; jmp qword ptr [rbx+0x1ffde]; 
0x00000000083bfb: cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000910a0: cmp qword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x000000000891b9: cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x000000000921c4: cmp qword ptr [rdi+0x28], 0x0; je short 0x00000000000921d0; xor eax, eax; ret; 
0x0000000008dd14: cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x000000000903f2: cmp qword ptr [rdi+0x460], 0x0; je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x00000000133c2b: cmp qword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x000000000e5754: cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x0000000011f9c0: cmp qword ptr [rsi], 0x0; mov rbx, rsi; je short 0x000000000011f9d0; pop rbx; ret; 
0x0000000011d7f7: cmp r10, [r8]; add [rax-0x7b], cl; push qword ptr [rbp+0x10]; mov eax, 0x1; ret; 
0x00000000053b46: cmp r10, [rax]; mov eax, 0x0; jne short 0x0000000000053b53; push r10; ret; 
0x0000000005402f: cmp r10, [rax]; mov eax, 0x0; jne short 0x000000000005403c; push r10; ret; 
0x0000000008b741: cmp r12, rdx; jbe 0x000000000008b900; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008b740: cmp r12, rdx; jbe 0x000000000008b900; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000001a1b3a: cmp r12b, [rax]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47fa: cmp r12b, [rax]; jne 0x00000000001b4610; ret; 
0x000000001a0ba9: cmp r12b, al; vzeroupper; ret; 
0x000000000841c0: cmp r13, rdx; jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x000000000841bf: cmp r13, rdx; jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x0000000008e14f: cmp r13, rdx; jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000008e14e: cmp r13, rdx; jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000008e1ff: cmp r13, rdx; jbe 0x000000000008e410; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008e1fe: cmp r13, rdx; jbe 0x000000000008e410; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008b403: cmp r14, rax; jbe 0x000000000008b4e0; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000c4bfd: cmp r14b, al; ret; 
0x000000001a6c4d: cmp r15b, dil; ret; 
0x000000000ecf10: cmp r8, 0x11954; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecf63: cmp r8, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000ecf3e: cmp r8, 0x2468; jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x000000000ecf4d: cmp r8, 0x54190100; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecec4: cmp r8, 0x58465342; jne short 0x00000000000eced0; ret; 
0x000000000ecef6: cmp r8, 0xbd00bd0; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000eced6: cmp r8, rax; jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x00000000095d67: cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x0000000019faf0: cmp r8d, 0x1; ja 0x000000000019f7c0; je 0x000000000019f7b0; vzeroupper; ret; 
0x0000000019f9cc: cmp r8d, 0x1; ja 0x000000000019f8a0; je 0x000000000019f890; vzeroupper; ret; 
0x000000001a06fc: cmp r8d, 0x1; ja 0x00000000001a05d0; je 0x00000000001a05c0; vzeroupper; ret; 
0x000000001b0cd2: cmp r8d, 0x1; ja 0x00000000001b0930; je 0x00000000001b0920; mov rax, rdi; ret; 
0x000000001b0b8c: cmp r8d, 0x1; ja 0x00000000001b0a40; je 0x00000000001b0a30; ret; 
0x000000001b2e92: cmp r8d, 0x1; ja 0x00000000001b2c60; je 0x00000000001b2c50; mov byte ptr [rdi], 0x0; ret; 
0x000000001b3e42: cmp r8d, 0x1; ja 0x00000000001b3ad0; je 0x00000000001b3ac0; ret; 
0x000000001b3cfc: cmp r8d, 0x1; ja 0x00000000001b3bb0; je 0x00000000001b3ba0; ret; 
0x0000000012662d: cmp r8d, 0x1; ja short 0x0000000000126660; mov eax, 0x4; syscall; 
0x0000000012668c: cmp r8d, 0x1; ja short 0x00000000001266c0; mov eax, 0x5; syscall; 
0x000000001266ed: cmp r8d, 0x1; ja short 0x0000000000126720; mov eax, 0x6; syscall; 
0x000000000cf806: cmp r8d, 0xff; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x000000000b1352: cmp r8d, edx; setne dil; test r9b, dil; jne short 0x00000000000b1338; ret; 
0x00000000149668: cmp r9, r10; jae short 0x0000000000149620; mov byte ptr [r9], 0x0; ret; 
0x00000000101a46: cmp r9b, bpl; ret far; 
0x00000000126752: cmp r9d, 0x1; ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x00000000149b4d: cmp r9d, edi; jg short 0x0000000000149b0d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x000000000d8cf7: cmp rax, 0x19; jg short 0x00000000000d8d20; mov rax, r12; pop r12; ret; 
0x00000000061ed3: cmp rax, 0x1; sbb eax, eax; add rsp, 0x18; ret; 
0x0000000009f17f: cmp rax, 0x1; sbb eax, eax; add rsp, 0x8; ret; 
0x0000000016d4de: cmp rax, 0x1; sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000a0cf7: cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000ed060: cmp rax, 0x517b; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x000000000ed090: cmp rax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ed01b: cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000a0ed9: cmp rax, 0x7; mov eax, 0x10; cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x0000000005a348: cmp rax, 0x9; ja short 0x000000000005a320; mov rax, r8; ret; 
0x000000000a0ec7: cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000ed04a: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ed070: cmp rax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000a0d37: cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000042790: cmp rax, 0xfffffffffffff000; ja short 0x00000000000427a0; ret; 
0x000000000427dc: cmp rax, 0xfffffffffffff000; ja short 0x0000000000042830; ret; 
0x00000000046c87: cmp rax, 0xfffffffffffff000; ja short 0x0000000000046ce0; ret; 
0x00000000061f2b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000061f38; ret; 
0x00000000061f5e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000061f70; ret; 
0x00000000099fde: cmp rax, 0xfffffffffffff000; ja short 0x0000000000099ff0; ret; 
0x0000000009c525: cmp rax, 0xfffffffffffff000; ja short 0x000000000009c530; xor eax, eax; ret; 
0x0000000009fdcb: cmp rax, 0xfffffffffffff000; ja short 0x000000000009fdd8; ret; 
0x000000000a039b: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a03a8; ret; 
0x000000000a03da: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a0450; ret; 
0x000000000a049a: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a0508; ret; 
0x000000000a09bc: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a09c8; ret; 
0x000000000a0a1c: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a0a28; ret; 
0x000000000a0a7f: cmp rax, 0xfffffffffffff000; ja short 0x00000000000a0a90; ret; 
0x000000000d99eb: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d99f8; ret; 
0x000000000d9b00: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d9b10; ret; 
0x000000000d9cc0: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d9cd0; ret; 
0x000000000dcdbb: cmp rax, 0xfffffffffffff000; ja short 0x00000000000dcdc8; ret; 
0x000000000dcdeb: cmp rax, 0xfffffffffffff000; ja short 0x00000000000dcdf8; ret; 
0x000000000e5765: cmp rax, 0xfffffffffffff000; ja short 0x00000000000e5770; ret; 
0x000000000e66b7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000e66c0; ret; 
0x000000000ea45a: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ea4c0; ret; 
0x000000000ea50d: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ea580; ret; 
0x000000000ea667: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ea6a0; ret; 
0x000000000eac94: cmp rax, 0xfffffffffffff000; ja short 0x00000000000eacb8; hlt; mov eax, esi; syscall; 
0x00000000108d3b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000108d48; ret; 
0x00000000108ddb: cmp rax, 0xfffffffffffff000; ja short 0x0000000000108de8; ret; 
0x000000001128fa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000112960; ret; 
0x000000001129aa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000112a10; ret; 
0x00000000113c3e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000113c50; ret; 
0x00000000114275: cmp rax, 0xfffffffffffff000; ja short 0x0000000000114280; ret; 
0x000000001142bb: cmp rax, 0xfffffffffffff000; ja short 0x00000000001142c8; ret; 
0x000000001142eb: cmp rax, 0xfffffffffffff000; ja short 0x00000000001142f8; ret; 
0x00000000114992: cmp rax, 0xfffffffffffff000; ja short 0x00000000001149f0; ret; 
0x00000000114a37: cmp rax, 0xfffffffffffff000; ja short 0x0000000000114a90; ret; 
0x00000000114acb: cmp rax, 0xfffffffffffff000; ja short 0x0000000000114ad8; ret; 
0x00000000114afb: cmp rax, 0xfffffffffffff000; ja short 0x0000000000114b08; ret; 
0x00000000115117: cmp rax, 0xfffffffffffff000; ja short 0x0000000000115160; ret; 
0x0000000011522d: cmp rax, 0xfffffffffffff000; ja short 0x0000000000115240; ret; 
0x000000001152a7: cmp rax, 0xfffffffffffff000; ja short 0x00000000001152f0; ret; 
0x00000000118d47: cmp rax, 0xfffffffffffff000; ja short 0x0000000000118da0; ret; 
0x0000000011936a: cmp rax, 0xfffffffffffff000; ja short 0x00000000001193f0; ret; 
0x0000000011942e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119440; ret; 
0x00000000119473: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119480; ret; 
0x000000001198ca: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119930; ret; 
0x0000000011997a: cmp rax, 0xfffffffffffff000; ja short 0x00000000001199e0; ret; 
0x00000000119a1b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119a28; ret; 
0x00000000119cd8: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119ce8; ret; 
0x00000000119d0e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119d20; ret; 
0x00000000119d4b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000119d58; ret; 
0x0000000011a251: cmp rax, 0xfffffffffffff000; ja short 0x000000000011a2a8; ret; 
0x0000000011a494: cmp rax, 0xfffffffffffff000; ja short 0x000000000011a4a0; ret; 
0x0000000011a4d5: cmp rax, 0xfffffffffffff000; ja short 0x000000000011a4e0; ret; 
0x0000000011a50b: cmp rax, 0xfffffffffffff000; ja short 0x000000000011a518; ret; 
0x0000000011ab67: cmp rax, 0xfffffffffffff000; ja short 0x000000000011abc0; ret; 
0x0000000011ac07: cmp rax, 0xfffffffffffff000; ja short 0x000000000011ac60; ret; 
0x0000000011acad: cmp rax, 0xfffffffffffff000; ja short 0x000000000011ad18; ret; 
0x0000000011ad6d: cmp rax, 0xfffffffffffff000; ja short 0x000000000011add8; ret; 
0x0000000011ba37: cmp rax, 0xfffffffffffff000; ja short 0x000000000011ba80; ret; 
0x0000000011baf7: cmp rax, 0xfffffffffffff000; ja short 0x000000000011bb40; ret; 
0x0000000011bbb7: cmp rax, 0xfffffffffffff000; ja short 0x000000000011bbc0; ret; 
0x0000000011d13b: cmp rax, 0xfffffffffffff000; ja short 0x000000000011d148; ret; 
0x0000000011d16b: cmp rax, 0xfffffffffffff000; ja short 0x000000000011d178; ret; 
0x0000000011ebd7: cmp rax, 0xfffffffffffff000; ja short 0x000000000011ec00; ret; 
0x0000000011ec97: cmp rax, 0xfffffffffffff000; ja short 0x000000000011ecf0; ret; 
0x000000001217c2: cmp rax, 0xfffffffffffff000; ja short 0x00000000001217d0; ret; 
0x00000000125beb: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125bf8; ret; 
0x00000000125c1b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125c28; ret; 
0x00000000125cc0: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125d40; ret; 
0x00000000125d90: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125e10; ret; 
0x00000000125e53: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125e60; ret; 
0x00000000125f1e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000125f30; ret; 
0x00000000125f9a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126000; ret; 
0x0000000012604a: cmp rax, 0xfffffffffffff000; ja short 0x00000000001260b0; ret; 
0x000000001260fa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126160; ret; 
0x000000001261aa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126230; ret; 
0x00000000126277: cmp rax, 0xfffffffffffff000; ja short 0x00000000001262d0; ret; 
0x0000000012633f: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126378; mov r8d, eax; mov eax, r8d; ret; 
0x000000001263a3: cmp rax, 0xfffffffffffff000; ja short 0x00000000001263b0; ret; 
0x0000000012647b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126488; ret; 
0x000000001264ae: cmp rax, 0xfffffffffffff000; ja short 0x00000000001264c0; ret; 
0x0000000012657e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126590; ret; 
0x000000001265be: cmp rax, 0xfffffffffffff000; ja short 0x00000000001265d0; ret; 
0x000000001265fb: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126608; ret; 
0x0000000012663a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126648; ret; 
0x00000000126699: cmp rax, 0xfffffffffffff000; ja short 0x00000000001266a8; ret; 
0x000000001266fa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126708; ret; 
0x0000000012675f: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126770; ret; 
0x00000000126abe: cmp rax, 0xfffffffffffff000; ja short 0x0000000000126ad0; ret; 
0x000000001275d7: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127630; ret; 
0x000000001276a7: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127700; ret; 
0x0000000012779e: cmp rax, 0xfffffffffffff000; ja short 0x00000000001277b0; ret; 
0x00000000127820: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127890; ret; 
0x000000001278da: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127958; ret; 
0x00000000127a60: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127ad0; ret; 
0x00000000127b17: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127b70; ret; 
0x00000000127bba: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127c40; ret; 
0x00000000127c7e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127c90; ret; 
0x00000000127e9a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127f00; ret; 
0x00000000127f4a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000127fb8; ret; 
0x0000000012800a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128070; ret; 
0x0000000012826a: cmp rax, 0xfffffffffffff000; ja short 0x00000000001282d0; ret; 
0x0000000012831a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128390; ret; 
0x000000001283cb: cmp rax, 0xfffffffffffff000; ja short 0x00000000001283d8; ret; 
0x0000000012840b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128438; ret; 
0x0000000012846b: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128478; ret; 
0x0000000012855e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128570; ret; 
0x0000000012859b: cmp rax, 0xfffffffffffff000; ja short 0x00000000001285a8; ret; 
0x000000001285cb: cmp rax, 0xfffffffffffff000; ja short 0x00000000001285d8; ret; 
0x000000001285fe: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128610; ret; 
0x00000000128651: cmp rax, 0xfffffffffffff000; ja short 0x0000000000128688; ret; 
0x000000001354dd: cmp rax, 0xfffffffffffff000; ja short 0x00000000001354f0; ret; 
0x00000000177e83: cmp rax, 0xfffffffffffff000; ja short 0x0000000000177e90; ret; 
0x0000000004275b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000042764; ret; 
0x00000000042d4b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000042d54; ret; 
0x00000000053a11: cmp rax, 0xfffffffffffff001; jae short 0x0000000000053a1c; xor eax, eax; ret; 
0x000000000ea37b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ea384; ret; 
0x000000000ea5bb: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ea5c4; ret; 
0x000000000eb0fb: cmp rax, 0xfffffffffffff001; jae short 0x00000000000eb104; ret; 
0x000000000ec11b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec124; ret; 
0x000000000ec34b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec354; ret; 
0x000000000ec37b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec384; ret; 
0x000000000ec3db: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec3e4; ret; 
0x000000000ec40b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec414; ret; 
0x000000000ec43b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec444; ret; 
0x000000000ec46b: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ec474; ret; 
0x00000000108beb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108bf4; ret; 
0x00000000108c1b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108c24; ret; 
0x00000000108c4b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108c54; ret; 
0x00000000108c7b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108c84; ret; 
0x00000000108cab: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108cb4; ret; 
0x00000000108cdb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108ce4; ret; 
0x00000000108d0b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108d14; ret; 
0x0000000011440b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000114414; ret; 
0x0000000011443b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000114444; ret; 
0x0000000011460b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000114614; ret; 
0x0000000011463b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000114644; ret; 
0x00000000114fab: cmp rax, 0xfffffffffffff001; jae short 0x0000000000114fb4; ret; 
0x0000000011519b: cmp rax, 0xfffffffffffff001; jae short 0x00000000001151a4; ret; 
0x000000001151cb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001151d4; ret; 
0x000000001151fb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115204; ret; 
0x0000000011526b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115274; ret; 
0x0000000011532b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115334; ret; 
0x0000000011535b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115364; ret; 
0x00000000115c1b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115c24; ret; 
0x00000000115c4b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115c54; ret; 
0x00000000115c7b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115c84; ret; 
0x00000000115cae: cmp rax, 0xfffffffffffff001; jae short 0x0000000000115cb7; ret; 
0x0000000011613b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116144; ret; 
0x0000000011616e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116177; ret; 
0x0000000011619b: cmp rax, 0xfffffffffffff001; jae short 0x00000000001161a4; ret; 
0x000000001161cb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001161d4; ret; 
0x000000001161fb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116204; ret; 
0x0000000011622e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116237; ret; 
0x0000000011625b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116264; ret; 
0x0000000011628b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000116294; ret; 
0x000000001162bb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001162c4; ret; 
0x0000000011932e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000119337; ret; 
0x0000000011980b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000119814; ret; 
0x0000000011a93b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011a944; ret; 
0x0000000011b52b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011b534; ret; 
0x0000000011b66b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011b674; ret; 
0x0000000011b9cb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011b9d4; ret; 
0x0000000011b9fb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ba04; ret; 
0x0000000011babb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011bac4; ret; 
0x0000000011bb7b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011bb84; ret; 
0x0000000011beab: cmp rax, 0xfffffffffffff001; jae short 0x000000000011beb4; ret; 
0x0000000011bedb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011bee4; ret; 
0x0000000011bf0b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011bf14; ret; 
0x0000000011ea3d: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ea46; ret; 
0x0000000011ec2b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ec34; ret; 
0x0000000011ec5b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ec64; ret; 
0x0000000011ed2b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ed34; ret; 
0x0000000011ed5b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ed64; ret; 
0x0000000011ed8e: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ed97; ret; 
0x0000000011edbb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011edc4; ret; 
0x0000000011edeb: cmp rax, 0xfffffffffffff001; jae short 0x000000000011edf4; ret; 
0x0000000011ee1b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ee24; ret; 
0x0000000011ee4b: cmp rax, 0xfffffffffffff001; jae short 0x000000000011ee54; ret; 
0x0000000012218e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122197; ret; 
0x000000001221bb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001221c4; ret; 
0x000000001221eb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001221f4; ret; 
0x0000000012221e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122227; ret; 
0x0000000012224e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122257; ret; 
0x0000000012227b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122284; ret; 
0x000000001222ae: cmp rax, 0xfffffffffffff001; jae short 0x00000000001222b7; ret; 
0x000000001222db: cmp rax, 0xfffffffffffff001; jae short 0x00000000001222e4; ret; 
0x0000000012230b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122314; ret; 
0x0000000012233e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122347; ret; 
0x0000000012236b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000122374; ret; 
0x0000000012239e: cmp rax, 0xfffffffffffff001; jae short 0x00000000001223a7; ret; 
0x00000000125b0b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125b14; ret; 
0x00000000125b3b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125b44; ret; 
0x00000000125c4b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125c54; ret; 
0x00000000125c7b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125c84; ret; 
0x00000000125e8b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125e94; ret; 
0x00000000125f5b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000125f64; ret; 
0x00000000126b9b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126ba4; ret; 
0x00000000126bcb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126bd4; ret; 
0x00000000126c0b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126c14; ret; 
0x00000000126c3b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126c44; ret; 
0x00000000126c6b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126c74; ret; 
0x00000000126c9b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126ca4; ret; 
0x00000000126ccb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126cd4; ret; 
0x00000000126cfb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126d04; ret; 
0x00000000126d2e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126d37; ret; 
0x00000000126d5b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126d64; ret; 
0x00000000126d8e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126d97; ret; 
0x00000000126dbb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126dc4; ret; 
0x00000000126deb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126df4; ret; 
0x00000000126e1b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126e24; ret; 
0x00000000126e4b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126e54; ret; 
0x00000000126e7b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126e84; ret; 
0x00000000126eae: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126eb7; ret; 
0x00000000126edb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126ee4; ret; 
0x00000000126f0b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126f14; ret; 
0x00000000126f3e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126f47; ret; 
0x00000000126f6e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126f77; ret; 
0x00000000126f9b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126fa4; ret; 
0x00000000126fcb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000126fd4; ret; 
0x00000000126ffb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127004; ret; 
0x0000000012702b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127034; ret; 
0x0000000012705b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127064; ret; 
0x0000000012708e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127097; ret; 
0x000000001270bb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001270c4; ret; 
0x000000001270eb: cmp rax, 0xfffffffffffff001; jae short 0x00000000001270f4; ret; 
0x0000000012711b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127124; ret; 
0x0000000012714b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127154; ret; 
0x0000000012718b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127194; ret; 
0x0000000012766b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127674; ret; 
0x0000000012773b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127744; ret; 
0x0000000012776b: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127774; ret; 
0x000000001277db: cmp rax, 0xfffffffffffff001; jae short 0x00000000001277e4; ret; 
0x00000000127cbb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127cc4; ret; 
0x00000000127ceb: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127cf4; ret; 
0x00000000127d1e: cmp rax, 0xfffffffffffff001; jae short 0x0000000000127d27; ret; 
0x000000000ea3bb: cmp rax, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000a2646: cmp rax, 0xffffffffffffffff; je short 0x00000000000a2658; add rsp, 0x8; ret; 
0x00000000073785: cmp rax, [rbp-0x8d8]; jae 0x0000000000074300; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000078d12: cmp rax, [rbp-0x8e8]; jae 0x00000000000799f8; mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000129088: cmp rax, [rip+0xf03e9]; mov [rdi+0x10], rax; jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x00000000129144: cmp rax, [rip+0xf84a5]; jae short 0x0000000000129159; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000008588e: cmp rax, rbx; jae 0x0000000000085f70; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x00000000084d53: cmp rax, rcx; cmovb rax, rcx; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x00000000083577: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne short 0x0000000000083570; ret; 
0x0000000008d56f: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne short 0x000000000008d568; ret; 
0x000000000d7e66: cmp rax, rcx; ja short 0x00000000000d7e80; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000008478d: cmp rax, rcx; jae short 0x0000000000084795; mov r8d, [rax]; mov eax, r8d; ret; 
0x0000000007773f: cmp rax, rcx; jbe 0x0000000000077828; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007d1fa: cmp rax, rcx; jbe 0x000000000007d2d8; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007ebde: cmp rax, rcx; jbe 0x000000000007ece0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007ed50: cmp rax, rcx; jbe 0x000000000007ee90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000085f32: cmp rax, rcx; jbe 0x0000000000086058; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000867bd: cmp rax, rcx; jbe 0x00000000000868a0; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000087790: cmp rax, rcx; jbe 0x0000000000087910; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000088fa0: cmp rax, rcx; jbe 0x0000000000089110; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008ae62: cmp rax, rcx; jbe 0x000000000008af10; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008bf6c: cmp rax, rcx; jbe 0x000000000008c060; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000008da18: cmp rax, rcx; jbe 0x000000000008daa8; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008dbf0: cmp rax, rcx; jbe 0x000000000008dc88; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008e465: cmp rax, rcx; jbe 0x000000000008e510; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007232a: cmp rax, rcx; jbe short 0x0000000000072388; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000000778b6: cmp rax, rcx; jbe short 0x0000000000077930; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000007f21f: cmp rax, rcx; jbe short 0x000000000007f268; mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x00000000080f8d: cmp rax, rcx; jbe short 0x0000000000081010; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000081808: cmp rax, rcx; jbe short 0x000000000008184a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x000000000838eb: cmp rax, rcx; jbe short 0x0000000000083928; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084460: cmp rax, rcx; jbe short 0x0000000000084490; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x000000000844fe: cmp rax, rcx; jbe short 0x0000000000084510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008834a: cmp rax, rcx; jbe short 0x00000000000883a0; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x0000000008a0fc: cmp rax, rcx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000008a2fa: cmp rax, rcx; jbe short 0x000000000008a358; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000008a51b: cmp rax, rcx; jbe short 0x000000000008a580; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008c0cc: cmp rax, rcx; jbe short 0x000000000008c108; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000008d7d5: cmp rax, rcx; jbe short 0x000000000008d838; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000008dd55: cmp rax, rcx; jbe short 0x000000000008ddc0; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008de0b: cmp rax, rcx; jbe short 0x000000000008de38; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008e86b: cmp rax, rcx; jbe short 0x000000000008e8a0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008e8fe: cmp rax, rcx; jbe short 0x000000000008e920; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008f120: cmp rax, rcx; jbe short 0x000000000008f180; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r12+0x18]; 
0x0000000011a9e5: cmp rax, rdi; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000008a5cb: cmp rax, rdi; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008fb5c: cmp rax, rdx; cmovb rax, rdx; sub rax, [rdi+0x18]; ret; 
0x000000000d7d9e: cmp rax, rdx; ja 0x00000000000d7e80; add rax, rdi; add rax, rcx; ret; 
0x0000000008f5de: cmp rax, rdx; jae short 0x000000000008f608; movzx eax, byte ptr [rax]; ret; 
0x00000000168a9c: cmp rax, rdx; je short 0x0000000000168aa8; pop rbx; ret; 
0x00000000168b0c: cmp rax, rdx; je short 0x0000000000168b20; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x00000000168b8c: cmp rax, rdx; je short 0x0000000000168ba0; add rax, 0xa0; pop rbx; ret; 
0x00000000168c0c: cmp rax, rdx; je short 0x0000000000168c20; add rax, 0xa8; pop rbx; ret; 
0x000000000ecfe3: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecfe2: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000039b14: cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000012df4c: cmp rax, rsi; jb short 0x000000000012df60; mov eax, 0x1; ret; 
0x000000000a50f2: cmp rax, rsi; jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x0000000008efe8: cmp rbp, rdx; jbe short 0x000000000008f050; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000004553a: cmp rbx, r12; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x00000000120e03: cmp rbx, rax; jae short 0x0000000000120e28; mov rsi, r12; mov rdi, r15; call r14; 
0x0000000008a7af: cmp rbx, rax; jbe 0x000000000008a8e8; mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x0000000008ba25: cmp rbx, rax; jbe 0x000000000008bb58; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008bc51: cmp rbx, rax; jbe 0x000000000008be40; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x00000000112ceb: cmp rbx, rax; pop rbx; setl al; ret; 
0x000000001bb8b2: cmp rbx, rbp; jae short 0x00000000001bb8cb; nop [rax+rax]; call qword ptr [rbx]; 
0x000000000839fd: cmp rbx, rdx; jbe 0x0000000000083b90; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000008b052: cmp rbx, rdx; jbe 0x000000000008b2c0; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008ea2e: cmp rbx, rsi; jbe 0x000000000008eb68; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x00000000096775: cmp rcx, 0x400; jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x000000000aa99a: cmp rcx, 0x5; je short 0x00000000000aa9a4; xor byte ptr [rax+0x6], 0x2a; mov rax, r8; ret; 
0x00000000149659: cmp rcx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149612: cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x00000000174a25: cmp rcx, [rax+0x28]; jae short 0x0000000000174a10; mov eax, 0x1; ret; 
0x00000000114266: cmp rcx, rax; jne short 0x0000000000114298; mov r10d, ecx; mov eax, 0x103; syscall; 
0x00000000054693: cmp rcx, rax; sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x00000000142320: cmp rcx, rdi; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x000000001281c7: cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x00000000084539: cmp rcx, rsi; ja short 0x0000000000084530; lea eax, [rdx+rdi]; ret; 
0x0000000008e949: cmp rcx, rsi; ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x0000000019dd8d: cmp rcx, rsi; jb 0x000000000019db84; mov rax, r8; vzeroupper; ret; 
0x000000001a2c80: cmp rcx, rsi; jb 0x00000000001a2a04; mov rax, r8; vzeroupper; ret; 
0x00000000136694: cmp rdi, 0x3ff; ja short 0x00000000001366a5; mov rax, rdi; sar rax, 0x6; ret; 
0x000000001426a4: cmp rdi, 0xb; mov edx, 0x29; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000000546f7: cmp rdi, 0xfffffffffffffff8; jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x00000000046d54: cmp rdi, r8; jb short 0x0000000000046d35; xor eax, eax; ret; 
0x000000001217b6: cmp rdi, rax; jne short 0x00000000001217e8; mov eax, 0x88; syscall; 
0x000000000c497a: cmp rdi, rdx; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x00000000122475: cmp rdi, rdx; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x00000000113afb: cmp rdi, rsi; jne short 0x0000000000113ad8; mov eax, r8d; ret; 
0x00000000095cf6: cmp rdi, rsi; sete al; ret; 
0x000000000ed13d: cmp rdx, 0x1badface; setne al; ret; 
0x000000000ed158: cmp rdx, 0x1cd1; setne al; ret; 
0x000000000c5002: cmp rdx, 0x20; ja 0x00000000000c50c9; movups [rdi+rdx-0x10], xmm0; movups [rdi], xmm0; ret; 
0x000000000c50a2: cmp rdx, 0x20; ja short 0x00000000000c50c0; movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x00000000092869: cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000001afad7: cmp rdx, 0x40; ja 0x00000000001afbc9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001afb53: cmp rdx, 0x40; ja short 0x00000000001afbc0; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000000ed125: cmp rdx, 0x5346544e; setne al; ret; 
0x000000001a7157: cmp rdx, 0x80; ja 0x00000000001a7249; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001a71d3: cmp rdx, 0x80; ja short 0x00000000001a7240; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000000ed109: cmp rdx, 0xadf5; setne al; ret; 
0x00000000083d43: cmp rdx, [rax+0x18]; jbe short 0x0000000000083d68; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x000000000c4c0c: cmp rdx, [rip+0x15b98d]; jae short 0x00000000000c4c20; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x000000000e66a9: cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000142299: cmp rdx, rax; sbb eax, eax; ret; 
0x00000000092df0: cmp rdx, rbp; jbe short 0x0000000000092e40; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000008ab79: cmp rdx, rbx; jae 0x000000000008ae90; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008ab78: cmp rdx, rbx; jae 0x000000000008ae90; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008aa08: cmp rdx, rbx; jae 0x000000000008aec8; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008aa07: cmp rdx, rbx; jae 0x000000000008aec8; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x000000001354d4: cmp rdx, rcx; ja short 0x0000000000135504; xor eax, eax; syscall; 
0x0000000005a2c5: cmp rdx, rcx; jae short 0x000000000005a2ac; mov rax, r8; ret; 
0x00000000119505: cmp rdx, rcx; je short 0x0000000000119510; ret; 
0x00000000090a61: cmp rdx, rdi; setae al; ret; 
0x000000000928a9: cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x0000000015fd71: cmp rsi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x000000001b4137: cmp rsi, rax; cmovb eax, esi; ret; 
0x000000001a2c97: cmp rsi, rax; cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019dda4: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000001b4127: cmp rsi, rax; ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54ca: cmp rsi, rax; ja 0x00000000001b5287; mov eax, esi; ret; 
0x00000000172729: cmp si, 0x3; ja short 0x0000000000172740; cmp dx, cx; sete al; ret; 
0x000000001b14ae: cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000001b1504: cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1694: cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b166c: cmp sil, [rdi+rax+0x40]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14c4: cmp sil, [rdi+rax+0x60]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x0000000019d346: cmp sil, [rdi+rax]; jne short 0x000000000019d375; add rax, rdi; vzeroupper; ret; 
0x0000000019d4df: cmp sil, [rdi+rax]; jne short 0x000000000019d505; add rax, rdi; vzeroupper; ret; 
0x000000001b1684: cmp sil, [rdi+rax]; jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b16e5: cmp sil, [rdx+rax]; jne short 0x00000000001b1679; add rax, rdx; ret; 
0x0000000019d561: cmp sil, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000016c11c: cmpsb [rsi], [rdi]; cld; call qword ptr [rax-0x5e1f00d]; 
0x000000001526f6: cmpsb [rsi], [rdi]; ja short 0x00000000001526e7; jmp qword ptr [rsi+0xf]; 
0x000000000752b6: cmpsb [rsi], [rdi]; ret; 
0x000000000af2fc: cmpsb [rsi], [rdi]; sbb [rax], eax; add bh, dh; ret; 
0x000000001a1629: cmpsb [rsi], [rdi]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001486a6: cmpsb [rsi], [rdi]; std; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x0000000002adb6: cmpsd [rsi], [rdi]; adc al, 0x0; mov rdi, rbx; call r15; 
0x0000000007dda9: cmpsd [rsi], [rdi]; adc eax, 0x14634800; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x0000000011f03d: cmpsd [rsi], [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000007c27c: cmpsd [rsi], [rdi]; add [rax], al; add [rcx-0x7d], al; jmp qword ptr [rdi+rcx]; 
0x000000000a891d: cmpsd [rsi], [rdi]; add [rax], al; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x0000000019d3cd: cmpsd [rsi], [rdi]; add rax, rdi; vzeroupper; ret; 
0x000000000bd030: cmpsd [rsi], [rdi]; and al, 0x0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000016bf7c: cmpsd [rsi], [rdi]; cld; call qword ptr [rax-0x5e1f00d]; 
0x00000000191ee5: cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000016302e: cmpsd [rsi], [rdi]; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000134a89: cmpsd [rsi], [rdi]; mov rax, r9; ret; 
0x000000001062ca: cmpsd [rsi], [rdi]; nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000008db78: cmpsd [rsi], [rdi]; stc; jmp qword ptr [rsi+0xf]; 
0x0000000004e17f: cmpsd [rsi], [rdi]; std; jmp qword ptr [rsi+0xf]; 
0x000000000edc3b: cmpsd [rsi], [rdi]; sti; jmp qword ptr [rsi-0x70]; 
0x00000000091839: cmpxchg [r8+0x308], edx; jne short 0x0000000000091828; pop rbx; ret; 
0x0000000009183a: cmpxchg [rax+0x308], edx; jne short 0x0000000000091828; pop rbx; ret; 
0x0000000009cd5b: cmpxchg [rbp], edx; jne short 0x000000000009cd68; xor eax, eax; pop rbp; ret; 
0x0000000009cd5a: cmpxchg [rbp], rdx; jne short 0x000000000009cd68; xor eax, eax; pop rbp; ret; 
0x0000000009c060: cmpxchg [rdi], ecx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009be5c: cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000090de8: cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x0000000009cd91: cmpxchg [rdi], edx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x0000000009c05f: cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009cd90: cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x000000000967db: cmpxchg [rdx], ecx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x00000000090f7e: cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x000000000967da: cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x00000000096566: cmpxchg [rsp-0x8], edx; ret; 
0x00000000096565: cmpxchg [rsp-0x8], rdx; ret; 
0x00000000045e27: cqo; idiv rsi; ret; 
0x0000000015f253: cqo; or eax, [rax]; jmp qword ptr [rdx+rax*8]; 
0x00000000103321: cwde; add [rax], al; add [rax-0x77], cl; ret far; 
0x00000000042a46: cwde; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x00000000030824: cwde; add [rax], al; add al, ch; ret; 
0x00000000113f35: cwde; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi; 
0x000000001796ae: cwde; add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; notrack jmp r10; 
0x000000000f900c: cwde; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000175e4d: cwde; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x00000000075124: cwde; and eax, [rax]; add dh, dh; ret; 
0x000000001a26db: cwde; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001b99ac: cwde; idiv edi; dec dword ptr [rbp-0x76b23fb6]; ret far; 
0x000000000924a5: cwde; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000016cda8: cwde; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x00000000156f38: cwde; mov al, 0x0; add [rax], al; ret; 
0x000000000a3a1c: cwde; mov al, 0x13; add al, ch; ret far; 
0x0000000002b30a: cwde; mov rdi, r12; call rax; 
0x00000000175e1b: cwde; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000000c5c1b: cwde; pop rbx; pop rbp; pop r12; ret; 
0x00000000155b56: data16 ret far; 
0x0000000007d99c: data64 ret far; 
0x000000001a6cd1: dec byte ptr [rax+0x29]; stc; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x000000001a44d6: dec byte ptr [rax+0x6f]; pop rcx; jmp qword ptr [rdx-0x2f]; 
0x000000001a71e4: dec byte ptr [rax+0x7f]; adc dil, r15b; ret; 
0x000000001a71de: dec byte ptr [rax+0x7f]; add [rdx-0x1f], ah; dec byte ptr [rax+0x7f]; adc dil, r15b; ret; 
0x000000001a6c4a: dec byte ptr [rax+0x7f]; cmp r15b, dil; ret; 
0x000000001a6c3c: dec byte ptr [rax+0x7f]; ja short 0x00000000001a6c43; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a6ac1: dec byte ptr [rax+0x7f]; je short 0x00000000001a6add; std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001a6c43: dec byte ptr [rax+0x7f]; jg short 0x00000000001a6c4b; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a6ac9: dec byte ptr [rax+0x7f]; jl short 0x00000000001a6ae5; cld; ret; 
0x000000001a6b99: dec byte ptr [rax+0x7f]; jp short 0x00000000001a6b9f; vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001754bd: dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x338]; jmp rax; 
0x00000000077084: dec byte ptr [rax-0x77]; out dx, eax; call qword ptr [r13+0x38]; 
0x000000000756f9: dec byte ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x38]; 
0x00000000076043: dec byte ptr [rax-0x77]; out dx, eax; call qword ptr [rbx+0x38]; 
0x0000000012975c: dec byte ptr [rax-0x7d]; ret; 
0x000000001a7302: dec byte ptr [rax]; jg short 0x00000000001a7306; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001a7308: dec byte ptr [rax]; jg short 0x00000000001a7350; adc bh, bh; ret; 
0x000000001afc62: dec byte ptr [rax]; jg short 0x00000000001afc66; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001afc68: dec byte ptr [rax]; jg short 0x00000000001afcb0; adc bh, bh; ret; 
0x000000001b0223: dec byte ptr [rax]; jg short 0x00000000001b023e; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b09b0: dec byte ptr [rax]; jg short 0x00000000001b09cb; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b0a82: dec byte ptr [rax]; jg short 0x00000000001b0a8d; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b1413: dec byte ptr [rax]; jg short 0x00000000001b142e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b21c3: dec byte ptr [rax]; jg short 0x00000000001b21de; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b2c03: dec byte ptr [rax]; jg short 0x00000000001b2c1e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b2ce0: dec byte ptr [rax]; jg short 0x00000000001b2cfb; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b40: dec byte ptr [rax]; jg short 0x00000000001b3b5b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b3bf2: dec byte ptr [rax]; jg short 0x00000000001b3bfd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000054a14: dec byte ptr [rbp+rcx*4+0x4]; ret; 
0x00000000120092: dec byte ptr [rbp-0x75]; pop rdx; or [rcx-0xa], al; ret; 
0x00000000063de9: dec byte ptr [rbx-0x5ff7b]; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000007afe8: dec byte ptr [rcx+rcx*4-0x19]; call qword ptr [rbx+0x38]; 
0x0000000013ef22: dec byte ptr [rcx+rcx*4-0x19]; call rbp; 
0x00000000043932: dec byte ptr [rcx+rcx*4-0x19]; mov rdx, r14; call rbp; 
0x00000000073eef: dec byte ptr [rcx+rcx*4-0x9]; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x000000001200c0: dec byte ptr [rcx-0x76e3dba4]; ret far; 
0x00000000120a5b: dec byte ptr [rcx-0x77]; ret; 
0x00000000119a7a: dec byte ptr [rcx]; je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x00000000119b09: dec byte ptr [rcx]; je short 0x0000000000119b38; mov eax, 0x48; syscall; 
0x000000001b0951: dec byte ptr [rdx-0x73]; add al, 0x7; ret; 
0x000000001a0511: dec byte ptr [rdx-0x73]; add al, 0x7; vzeroupper; ret; 
0x000000000cc29b: dec dword ptr [r8+0x63]; ret far; 
0x0000000007e412: dec dword ptr [r9-0x74b6cfbd]; add [rcx+0x39], cl; ret; 
0x00000000075e6d: dec dword ptr [rax+0x1]; faddp st(6), st; and al, 0x38; and [rax-0x77], cl; ret far; 
0x0000000007b9c3: dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x75]; pop rsp; and al, 0x58; jmp rsi; 
0x00000000076329: dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x75]; pop rsp; and al, 0x70; jmp rsi; 
0x00000000075a97: dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x0000000007b7fb: dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; sar dword ptr [rdx+0x1], cl; jmp rsi; 
0x00000000170216: dec dword ptr [rax+0x1]; ret far; 
0x0000000005d184: dec dword ptr [rax+0x1]; ret; 
0x00000000059bf3: dec dword ptr [rax+0x21]; enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000003de7f: dec dword ptr [rax+0x29]; ret; 
0x0000000008478c: dec dword ptr [rax+0x39]; enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret; 
0x000000000512cf: dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x00000000054982: dec dword ptr [rax+0x39]; ret far; 
0x0000000003fddf: dec dword ptr [rax+0x39]; ret; 
0x000000000736a8: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdx; jmp rax; 
0x00000000063106: dec dword ptr [rax+0x63]; add al, 0x9a; add rax, rdx; notrack jmp rax; 
0x000000001075b1: dec dword ptr [rax+0x63]; add al, 0xba; add rax, rdx; notrack jmp rax; 
0x0000000014d6eb: dec dword ptr [rax+0x63]; cmp eax, 0x88de5; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x00000000128f44: dec dword ptr [rax+0x63]; fisttp dword ptr [rax-0x77], st; sbb eax, 0xf04f1; pop rbx; ret; 
0x00000000074894: dec dword ptr [rax+0x63]; fucomi st, st(1); fwait; in eax, 0xff; jmp far fword ptr [rax-0x2b7bf0f0]; 
0x000000000cc29c: dec dword ptr [rax+0x63]; ret far; 
0x000000000729fc: dec dword ptr [rax+0x63]; ret; 
0x000000000ba9b9: dec dword ptr [rax+0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000a83a2: dec dword ptr [rax+rax]; cmovne rax, rdx; ret; 
0x00000000042f0f: dec dword ptr [rax-0x2d]; ror byte ptr [rax+0x21], 0x7; xor eax, eax; ret; 
0x000000000ab3d7: dec dword ptr [rax-0x39]; add [r8], r8b; add [rax], al; add bl, ch; ret far; 
0x00000000048783: dec dword ptr [rax-0x39]; ret; 
0x00000000133d53: dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x000000000dfe7d: dec dword ptr [rax-0x41]; ret; 
0x00000000167cd9: dec dword ptr [rax-0x73]; adc eax, 0x36ff; call qword ptr [rax]; 
0x00000000135b61: dec dword ptr [rax-0x73]; adc eax, 0x6b4d7; cmove rax, rdx; ret; 
0x000000000c5bc1: dec dword ptr [rax-0x73]; adc eax, 0xdb487; cmove rax, rdx; ret; 
0x000000000ed623: dec dword ptr [rax-0x73]; adc eax, 0xe6f5d; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed622: dec dword ptr [rax-0x73]; adc eax, 0xe6f5d; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x00000000167d8a: dec dword ptr [rax-0x73]; adc eax, 0xffff9dce; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x000000001b0231: dec dword ptr [rax-0x73]; add al, 0x17; ret; 
0x000000000b182d: dec dword ptr [rax-0x73]; add eax, 0x16644b; mov rax, [rax+rdi*8]; ret; 
0x000000000b184d: dec dword ptr [rax-0x73]; add eax, 0x16664b; mov rax, [rax+rdi*8]; ret; 
0x0000000007d330: dec dword ptr [rax-0x73]; add eax, 0x19a508; mov rax, [rax+rdi*8]; ret; 
0x00000000128181: dec dword ptr [rax-0x73]; add eax, 0xae017; mov eax, [rax+rdi*4]; ret; 
0x0000000015d34a: dec dword ptr [rax-0x73]; add eax, 0xca50e; add rsp, 0x8; ret; 
0x0000000015d349: dec dword ptr [rax-0x73]; add eax, 0xca50e; add rsp, 0x8; ret; 
0x00000000134764: dec dword ptr [rax-0x73]; add eax, 0xfff90234; cmove rax, rdx; ret; 
0x00000000134634: dec dword ptr [rax-0x73]; add eax, 0xfff90384; cmove rax, rdx; ret; 
0x00000000134504: dec dword ptr [rax-0x73]; add eax, 0xfff904b4; cmove rax, rdx; ret; 
0x00000000134828: dec dword ptr [rax-0x73]; add eax, 0xfff907a0; cmovne rax, rdx; ret; 
0x0000000007dad3: dec dword ptr [rax-0x73]; lea rdx, [rbx+0x34]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000006b221: dec dword ptr [rax-0x73]; or eax, 0x165f3f; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000017b2f6: dec dword ptr [rax-0x73]; push rdx; sar byte ptr [rsi], 0x41; jmp rcx; 
0x0000000018d9ca: dec dword ptr [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x00000000127881: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x00000000112952: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000127947: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x30; pop r12; ret; 
0x00000000145681: dec dword ptr [rax-0x75]; add al, 0x24; mov rdi, r15; call rax; 
0x000000000a7a53: dec dword ptr [rax-0x75]; add eax, 0x1713b5; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000a78d0: dec dword ptr [rax-0x75]; add eax, 0x171508; call qword ptr [rax]; 
0x000000001bb8e0: dec dword ptr [rax-0x75]; add eax, 0x5d5e0; call qword ptr [rax+0x370]; 
0x0000000011f21c: dec dword ptr [rax-0x75]; add eax, 0xf9bec; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000166b49: dec dword ptr [rax-0x75]; and al, 0x48; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000164eae: dec dword ptr [rax-0x75]; and al, 0x48; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001722b0: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x10; pop rbp; ret; 
0x0000000003a89b: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x18; ret; 
0x000000001149e0: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x28; ret; 
0x000000001193d9: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x000000000a043f: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x38; ret; 
0x00000000094b30: dec dword ptr [rax-0x75]; and al, 0x8; mov rdi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x000000000788cb: dec dword ptr [rax-0x75]; and byte ptr [rax+0x48000000], 0x85; ror byte ptr [rdi], 0x84; ret far; 
0x00000000132050: dec dword ptr [rax-0x75]; cmp [rax-0x77], cl; ret; 
0x000000000980dc: dec dword ptr [rax-0x75]; jl short 0x0000000000098105; or bl, ch; ret far; 
0x0000000015b7c7: dec dword ptr [rax-0x75]; jl short 0x000000000015b7f0; sub al, ch; sahf; ret far; 
0x00000000165c54: dec dword ptr [rax-0x75]; jo short 0x0000000000165be3; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x0000000015efa9: dec dword ptr [rax-0x75]; or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000015e2ac: dec dword ptr [rax-0x75]; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015e2e3: dec dword ptr [rax-0x75]; or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000145a24: dec dword ptr [rax-0x75]; or al, 0x24; mov rdi, r14; call rcx; 
0x0000000009e79b: dec dword ptr [rax-0x77]; adc eax, 0x18141d; ret; 
0x0000000009e09b: dec dword ptr [rax-0x77]; adc eax, 0x181b1d; ret; 
0x0000000016c4c8: dec dword ptr [rax-0x77]; add al, 0x24; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000011db4c: dec dword ptr [rax-0x77]; add eax, 0x10381c; add rsp, 0x8; ret; 
0x0000000013f261: dec dword ptr [rax-0x77]; add eax, 0xdb777; add rsp, 0x8; ret; 
0x0000000015883f: dec dword ptr [rax-0x77]; add ecx, [rax-0x7d]; ret; 
0x0000000015364c: dec dword ptr [rax-0x77]; and al, 0x8; call rbp; 
0x000000001b0ce1: dec dword ptr [rax-0x77]; clc; ret; 
0x000000001a083f: dec dword ptr [rax-0x77]; clc; vzeroupper; ret; 
0x00000000079458: dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r12+0x38]; 
0x00000000079746: dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r13+0x38]; 
0x000000000cea51: dec dword ptr [rax-0x77]; fimul st, word ptr [rcx+rcx*4+0x1c]; and al, 0xe8; xchg edx, eax; ret; 
0x00000000078148: dec dword ptr [rax-0x77]; mov ch, 0xf0; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000008b74e: dec dword ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x18]; 
0x0000000008da25: dec dword ptr [rax-0x77]; out dx, eax; call qword ptr [rbx+0x18]; 
0x0000000009ff65: dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x0000000003af39: dec dword ptr [rax-0x77]; ret far; 
0x0000000002c672: dec dword ptr [rax-0x77]; ret; 
0x000000000ed215: dec dword ptr [rax-0x77]; ret; 
0x000000001156c8: dec dword ptr [rax-0x77]; ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x0000000006d0fb: dec dword ptr [rax-0x77]; sbb [rax+0x1], cl; ret far; 
0x000000000921e2: dec dword ptr [rax-0x77]; sub [r8-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x00000000072c13: dec dword ptr [rax-0x77]; test eax, edx; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000a6285: dec dword ptr [rax-0x77]; vpslldq xmm2, xmm5, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000007f5ce: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x00000000111c39: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x00000000191edf: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000191e99: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000121ee1: dec dword ptr [rax-0x7b]; shl byte ptr [rax+rdi+0x48], 0x39; ret; 
0x00000000045cb2: dec dword ptr [rax-0x7b]; shl byte ptr [rax+rsi*2+0x48], 0x89; sub [rax-0x77], cl; ret; 
0x00000000168a6a: dec dword ptr [rax-0x7b]; shl byte ptr [rbp+rax*8+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x00000000168ae2: dec dword ptr [rax-0x7b]; shl byte ptr [rcx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x000000001b7170: dec dword ptr [rax-0x7d]; mov dword ptr [rax+rcx*2], 0xe900d283; shl ch, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000168c87: dec dword ptr [rax-0x7d]; mov eax, 0xe0; add [rax-0x77], cl; ret; 
0x000000000677b1: dec dword ptr [rax-0x7d]; mov ebp, 0xfffff940; add [rdi], cl; test [rax], esi; ret far; 
0x0000000003c8ea: dec dword ptr [rax-0x7d]; ret; 
0x000000001ba7ea: dec dword ptr [rbp+0x39]; ret far; 
0x000000001ba5b2: dec dword ptr [rbp+0x39]; ret; 
0x000000000558ec: dec dword ptr [rbp+rcx*4+0x1c]; ret; 
0x000000000c1af3: dec dword ptr [rbp+rcx*4+0x1d]; add eax, 0x4b001118; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0413: dec dword ptr [rbp+rcx*4+0x1d]; add eax, 0x4b00112d; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000167d91: dec dword ptr [rbp+rcx*4+0x4c]; and al, 0x24; call qword ptr [rax]; 
0x00000000067348: dec dword ptr [rbp+rcx*4+0x51]; or [rbx-0x7af0fe01], al; ret; 
0x0000000016792b: dec dword ptr [rbp+rcx*4+0x5]; frstor [rax-0x12ce0001]; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016782b: dec dword ptr [rbp+rcx*4+0x5]; frstor [rcx-0x12ce0001]; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a47: dec dword ptr [rbp+rcx*4+0x5]; rcr dword ptr [rdi-0x12ce0001], 0x4c; lea ecx, [rsp+0x14]; call qword ptr [rax]; 
0x0000000009acaf: dec dword ptr [rbp+rcx*4+0x6d]; or [rbp+0x31], al; jmp qword ptr [rsi+0xf]; 
0x000000000e5a61: dec dword ptr [rbp+rcx*4+0x75]; and [rcx-0x7cb7bfbd], cl; ret; 
0x000000000fd51f: dec dword ptr [rbp-0x75]; push rsi; or [rbx-0x78f0fe08], al; ret far; 
0x000000001b99af: dec dword ptr [rbp-0x76b23fb6]; ret far; 
0x00000000063de6: dec dword ptr [rbp-0x77]; dec byte ptr [rbx-0x5ff7b]; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000000b586b: dec dword ptr [rbp-0x77]; fucompp; ret; 
0x00000000105342: dec dword ptr [rbp-0x77]; ret far; 
0x000000000e1dc7: dec dword ptr [rbp-0x7b]; test byte ptr [rdi], 0x84; ret; 
0x000000001699f6: dec dword ptr [rbx+0x1e8007d]; mov bh, 0xfa; jmp qword ptr [rsi-0x7d]; 
0x0000000011512c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x3; syscall; 
0x0000000011ba4c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000011bb0c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000125d2b: dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop r12; ret; 
0x00000000127fab: dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x0000000017223f: dec dword ptr [rbx+0x48082444]; add esp, 0x10; pop rbp; ret; 
0x000000001262be: dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret; 
0x00000000125dfa: dec dword ptr [rbx+0x48082444]; add esp, 0x20; pop r12; ret; 
0x0000000013ed87: dec dword ptr [rbx+0x48082444]; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000118d92: dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x00000000095e4f: dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x0000000013e917: dec dword ptr [rbx+0x480c2444]; add esp, 0x18; pop rbp; pop r12; ret; 
0x000000000ea692: dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000ea56c: dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000001152c0: dec dword ptr [rbx+0x480c2474]; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000000a04fb: dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x00000000119923: dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000c734c: dec dword ptr [rbx+0xeb8087b]; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000080ee7: dec dword ptr [rbx+rcx*4+0x2d]; jg short 0x0000000000080f07; add [rax-0x77], cl; ret; 
0x0000000012c72f: dec dword ptr [rbx-0x14f3dbbc]; shl byte ptr [rsi+0x2e], 0x1; nop [rax+rax]; ret; 
0x000000001715ad: dec dword ptr [rbx-0x17b7b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x00000000069e7a: dec dword ptr [rbx-0x2217d790]; ret; 
0x0000000006c63d: dec dword ptr [rbx-0x51f4b]; jmp qword ptr [rcx+rcx*4+0x30]; 
0x000000000c712f: dec dword ptr [rbx-0x7cb7fb85]; ret; 
0x0000000002b488: dec dword ptr [rbx-0x834b]; call qword ptr [rax+0x18508b48]; 
0x00000000079fa2: dec dword ptr [rbx-0x8a77b]; inc dword ptr [rbp-0x1677f040]; jrcxz 0x0000000000079faf; inc dword ptr [rcx]; ret; 
0x00000000072d76: dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000000e4af3: dec dword ptr [rbx-0xdf7b]; inc dword ptr [rcx+0xf]; ret; 
0x000000000e3afb: dec dword ptr [rbx-0xe773]; call far fword ptr [rax+0x5a]; 
0x000000001426a6: dec dword ptr [rbx]; mov edx, 0x29; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000000ea678: dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000032499: dec dword ptr [rcx+0x3948fc51]; ret; 
0x000000000f87a5: dec dword ptr [rcx+0x39]; ret far; 
0x0000000006b723: dec dword ptr [rcx+0x63]; ret; 
0x000000001136d5: dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x00000000113804: dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x000000001b412f: dec dword ptr [rcx+0xff3c3f0]; mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x00000000142c1a: dec dword ptr [rcx+r9*4+0x10]; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x00000000142c1b: dec dword ptr [rcx+rcx*4+0x10]; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x0000000002c4cf: dec dword ptr [rcx+rcx*4+0x55]; mov [rax-0x7d], cl; ret; 
0x0000000009edc7: dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000113888: dec dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000782ee: dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2b0: dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x0000000008ea3b: dec dword ptr [rcx+rcx*4-0x1]; call qword ptr [rax+0x18]; 
0x0000000016b15b: dec dword ptr [rcx+rcx*4-0x1]; xor eax, eax; add r13, rbx; call rbp; 
0x0000000016cee0: dec dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbx; call rcx; 
0x0000000011ef78: dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x00000000080eb2: dec dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x000000000a8709: dec dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000079619: dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x0000000017542b: dec dword ptr [rcx+rcx*4-0x31]; call qword ptr [rbx+0x358]; 
0x00000000128a7d: dec dword ptr [rcx+rcx*4-0x32]; mov edi, r12d; mov eax, r10d; syscall; 
0x00000000085645: dec dword ptr [rcx+rcx*4-0x39]; call qword ptr [rax+0x18]; 
0x00000000073c48: dec dword ptr [rcx+rcx*4-0x3e]; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000005bfed: dec dword ptr [rcx+rcx*4-0x3e]; mov rsi, r14; mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x0000000019dd95: dec dword ptr [rcx+rcx*4-0x40]; vzeroupper; ret; 
0x000000001ac9d5: dec dword ptr [rcx+rcx*4-0x40]; xtest; je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001add48: dec dword ptr [rcx+rcx*4-0x40]; xtest; je short 0x00000000001add55; vzeroall; ret; 
0x000000000a791d: dec dword ptr [rcx+rcx*4-0x9]; call rax; 
0x0000000016b2a2: dec dword ptr [rcx+rcx*4-0xa]; mov rdi, r12; call r13; 
0x0000000016d00e: dec dword ptr [rcx+rcx*4-0xa]; mov rdi, rbp; call r12; 
0x00000000164fd7: dec dword ptr [rcx-0x1437b]; jmp qword ptr [rsi-0x70]; 
0x000000001332bb: dec dword ptr [rcx-0x1577b]; jmp qword ptr [rsi+0xf]; 
0x000000000dd713: dec dword ptr [rcx-0x2776b73e]; test edx, edx; jne short 0x00000000000dd720; pop rbx; ret; 
0x0000000009376f: dec dword ptr [rcx-0x2dceba12]; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000003285a: dec dword ptr [rcx-0x73]; add cl, [rax+0x39]; ret far; 
0x000000000e1dc4: dec dword ptr [rcx-0x73]; dec dword ptr [rbp-0x7b]; test byte ptr [rdi], 0x84; ret; 
0x0000000007e413: dec dword ptr [rcx-0x74b6cfbd]; add [rcx+0x39], cl; ret; 
0x0000000015e6f3: dec dword ptr [rcx-0x75]; and al, 0x38; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000001bab1a: dec dword ptr [rcx-0x75]; jge short 0x00000000001bab2f; add rdi, rbp; call r12; 
0x0000000010aacd: dec dword ptr [rcx-0x75]; or al, 0x24; call rax; 
0x00000000040cbb: dec dword ptr [rcx-0x77]; fisttp word ptr [rax-0x7d], st; ret; 
0x000000000f336c: dec dword ptr [rcx-0x77]; fmul st, qword ptr [rdi]; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000032830: dec dword ptr [rcx-0x77]; ret far; 
0x00000000129a10: dec dword ptr [rcx-0x77]; shl byte ptr [rsi+0x49], 0xf; outsb dx, [rsi]; ret; 
0x0000000004f3dc: dec dword ptr [rcx-0x7d]; in al, dx; add [rcx+0xf], eax; mov esi, 0x89412404; ret; 
0x0000000006d914: dec dword ptr [rcx-0x7d]; ret; 
0x00000000078ff3: dec dword ptr [rcx-0x8a77b]; jmp qword ptr [rsi+0xf]; 
0x00000000199f50: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000131221: dec dword ptr [rcx]; ret; 
0x00000000077a2d: dec dword ptr [rcx]; sti; call far fword ptr [rbx+0x5d]; 
0x00000000074ddb: dec dword ptr [rdi]; adc esi, 0xe9fffff9; loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000125614: dec dword ptr [rdi]; add [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000011ebca: dec dword ptr [rdi]; add [rax], al; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x000000001ae352: dec dword ptr [rdi]; add esi, edx; je short 0x00000000001ae35c; vzeroall; ret; 
0x00000000079ef2: dec dword ptr [rdi]; cmp dword ptr [rbp-0x5], 0x84e9ffff; in al, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000009be35: dec dword ptr [rdi]; jne short 0x000000000009be40; xor eax, eax; ret; 
0x00000000041d94: dec dword ptr [rdi]; mov [rbp-0x7f000000], es; sti; push rax; ret; 
0x0000000003a19a: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a123; loopne 0x000000000003a1a3; ret; 
0x0000000003a1ba: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a143; loopne 0x000000000003a1ca; ret; 
0x0000000003a1fa: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a183; loopne 0x000000000003a204; ret; 
0x0000000003a29a: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a223; loopne 0x000000000003a2a6; ret; 
0x00000000051336: dec dword ptr [rdi]; mov bh, 0x5; ret; 
0x0000000008df19: dec dword ptr [rdi]; mov dh, 0x31; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x00000000076ed6: dec dword ptr [rdi]; mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x000000001320aa: dec dword ptr [rdi]; mov dh, 0x53; add [rax-0x73], ecx; add [r8-0x77], ecx; ret; 
0x0000000007732f: dec dword ptr [rdi]; mov dh, 0x76; add [rax-0x7d], ecx; ret; 
0x00000000076ebf: dec dword ptr [rdi]; mov dh, 0x79; add [rax-0x7d], ecx; ret; 
0x000000001038af: dec dword ptr [rdi]; mov dh, 0xd2; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001afa59: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x00000000199b9d: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000b51b5: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000a9998: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x000000000a85cc: dec dword ptr [rdi]; shr bl, 0x1; ret; 
0x0000000007378b: dec dword ptr [rdi]; sub dword ptr [rsi+0xb], 0x0; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x000000001a0839: dec dword ptr [rdi]; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000e1dbe: dec dword ptr [rdi]; test [rax+rdi*8-0x72b60001], ah; dec dword ptr [rbp-0x7b]; test byte ptr [rdi], 0x84; ret; 
0x0000000005d1f3: dec dword ptr [rdi]; test [rbp*8+0x4fe9ffff], ecx; in eax, 0xff; call qword ptr [rax+0x40bf41]; 
0x0000000011ff04: dec dword ptr [rdi]; test [rbp+0x49000000], edx; mov edi, [rbp]; call rbx; 
0x00000000120ce4: dec dword ptr [rdi]; test [rbp+0x49000000], esi; mov edi, [rbp]; call rbx; 
0x0000000012b94f: dec dword ptr [rdi]; test [rbp+rdi*8-0x1], edi; jmp qword ptr [rsi+0x2e]; 
0x000000000adaca: dec dword ptr [rdi]; test [rcx-0x8ffffd7], cl; ret; 
0x00000000029fc7: dec dword ptr [rdi]; test [rdx+0x48000000], ah; add esp, 0x98; ret; 
0x0000000011fecf: dec dword ptr [rdi]; test [rdx+0x49000000], ecx; mov edi, [rbp]; call rbx; 
0x0000000005d4a3: dec dword ptr [rdi]; test [rdx-0x16000027], ebp; stosd [rdi]; loop 0x000000000005d4ad; call qword ptr [rax+0x2085c748]; 
0x0000000011fe9c: dec dword ptr [rdi]; test [rip+0x49000001], ebx; mov edi, [rbp]; call rbx; 
0x000000001a60bf: dec dword ptr [rdi]; test [rsi+0x1], ebp; add [rax], al; xor eax, eax; ret; 
0x00000000076ff2: dec dword ptr [rdi]; test [rsi-0x16000014], edi; stosb [rdi]; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000065433: dec dword ptr [rdi]; test [rsi-0x76000020], ecx; ret; 
0x000000000af2f9: dec dword ptr [rdi]; test [rsi-0x8ffffe7], ah; ret; 
0x000000000af305: dec dword ptr [rdi]; test [rsi-0x8ffffe7], al; ret; 
0x0000000010fd32: dec dword ptr [rdi]; test [rsi], dh; or al, [rax]; add [rcx-0x80], al; call far fword ptr [rdi+rcx-0x7c]; 
0x000000000ee5e6: dec dword ptr [rdi]; test [rsp+rdx-0x76b80000], al; ret far; 
0x0000000013fe87: dec dword ptr [rdi]; test dl, bl; add [rax], al; add [rcx-0xa], al; ret; 
0x00000000071e0f: dec dword ptr [rdi]; test edi, ecx; ret far; 
0x0000000006bee7: dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000ee049: dec dword ptr [rdi]; xchg esi, eax; ret; 
0x000000000e57da: dec dword ptr [rdi]; xchg esp, eax; ret; 
0x0000000014402a: dec dword ptr [rdi]; xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f18b], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000074692: dec dword ptr [rdi]; xor esi, 0xe9ffffe6; scasb [rdi]; out 0xff, eax; jmp qword ptr [rsi-0x70]; 
0x0000000006aee8: dec dword ptr [rdx+0x63]; add al, 0xb9; add rax, rcx; notrack jmp rax; 
0x000000001b09bb: dec dword ptr [rdx-0x73]; add al, 0x7; ret; 
0x000000000fb8d3: dec dword ptr [rdx-0x77]; test [rax+rax*8], ah; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000099d07: dec dword ptr [rip+0x6890f00]; xor eax, eax; ret; 
0x000000000a94c9: dec dword ptr [rsi]; add [rax-0x73], cl; add eax, 0xb42d; cmove rax, rdx; ret; 
0x00000000099db1: dec edi; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x0000000016d005: div byte ptr [rax+rdi+0x31]; sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, rbp; call r12; 
0x00000000099dd5: div byte ptr [rbp+0x10]; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x0000000009264a: div byte ptr [rbp+0x13]; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x000000000565e9: div byte ptr [rbp+0x2c]; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000000d9af6: div byte ptr [rbp+0x2f]; mov eax, 0x60; syscall; 
0x000000000bab76: div byte ptr [rbp+0x4]; xor rax, rax; ret; 
0x00000000120ac5: div byte ptr [rbp+0x8]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000120b73: div byte ptr [rbp+0xa]; pop rbp; pop r12; pop r13; ret; 
0x00000000042199: div byte ptr [rbp+0xc]; mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000edc36: div byte ptr [rbp+rdx-0x17]; mov dl, 0xa7; sti; jmp qword ptr [rsi-0x70]; 
0x00000000106ba6: div byte ptr [rbp+rdx-0x17]; sbb dl, dil; jmp qword ptr [rsi-0x70]; 
0x000000000b103e: div byte ptr [rbp-0x11]; mov [rdx], rcx; ret; 
0x00000000056602: div byte ptr [rbp-0x13]; cmp cx, 0x7fff; jne short 0x00000000000565ec; mov eax, 0x1; ret; 
0x00000000119e16: div byte ptr [rbp-0x1f]; or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x0000000005433d: div byte ptr [rbp-0x78]; sub rdx, 0x1; jne short 0x0000000000054328; mov eax, 0x1; ret; 
0x000000000d7c82: div byte ptr [rbx+rcx+0x31]; sar byte ptr [rcx], 0xfe; jne short 0x00000000000d7c90; ret; 
0x00000000090b92: div byte ptr [rbx+rdx+0x4c]; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000168829: div byte ptr [rcx+rcx-0x75]; jl short 0x0000000000168853; sbb al, 0xe8; ret far; 
0x00000000153b64: div byte ptr [rcx+rdi-0x18]; sbb fs:[rdx], eax; add [rcx-0x75], al; notrack call qword ptr [rsp+0x70]; 
0x00000000042d2c: div byte ptr [rcx]; call far fword ptr [rbx-0x17]; 
0x0000000002bf45: div byte ptr [rcx]; jmp qword ptr [rsi+0xf]; 
0x00000000117b53: div byte ptr [rcx]; push qword ptr [rcx]; shr al, 0x33; ret far; 
0x00000000175e86: div byte ptr [rdi+rax-0x17]; mov sil, 0xed; jmp qword ptr [rsi-0x70]; 
0x000000000eac4d: div byte ptr [rdi+rax-0x7b]; shl byte ptr [rbp+0x3], 0x5f; jmp rdi; 
0x0000000017bebc: div byte ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000012863f: div byte ptr [rsi+rdi-0x73]; inc dword ptr [rbx+0x1e7702f8]; mov eax, 0x1f; syscall; 
0x00000000119469: div byte ptr [rsi-0x48]; sbb [rcx], al; add [rax], al; syscall; 
0x00000000035dc9: div byte ptr [rsp+rcx-0x7d]; inc byte ptr [rbx]; je short 0x0000000000035dd8; pop rbx; ret; 
0x00000000108e53: div cl; jmp qword ptr [rsi+0x2e]; 
0x0000000017b955: div dword ptr [rbp+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000113afd: div dword ptr [rbp-0x28]; mov eax, r8d; ret; 
0x000000000918eb: div dword ptr [rbp-0x4c]; pop rbx; ret; 
0x000000000bfb25: div dword ptr [rcx+rdx]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000017bd6d: div dword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000054fbd: div eax; sub rcx, 0x1; jae short 0x0000000000054fb8; mov rax, rdx; ret; 
0x000000001357ef: div ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000005d605: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000091653: div ecx; mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x0000000017bd6c: div qword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000054fbc: div r8; sub rcx, 0x1; jae short 0x0000000000054fb8; mov rax, rdx; ret; 
0x000000001357ee: div rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000091652: div rcx; mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x000000001baab5: divps xmm0, [rip+0x29368]; ret; 
0x000000001baab4: divss xmm0, [rip+0x29368]; ret; 
0x00000000079aba: emms; jrcxz 0x0000000000079a85; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000013ff5a: emms; mov esp, 0xfffeb1e9; jmp qword ptr [rsi+0xf]; 
0x0000000016d090: endbr64; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x0000000016d080: endbr64; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000008a000: endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000041420: endbr64; andpd xmm0, [rip+0x1a0c64]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x000000000a4f70: endbr64; cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x00000000090ca0: endbr64; cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x00000000092bb0: endbr64; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x000000000918f0: endbr64; cmp edi, 0x21; je short 0x0000000000091900; ret; 
0x00000000132a90: endbr64; cmp edi, 0x56; je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x000000000e55b0: endbr64; cmp esi, 0x1; je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e0: endbr64; cmp esi, 0x1; je short 0x00000000000e55f0; xor eax, eax; ret; 
0x000000000921c0: endbr64; cmp qword ptr [rdi+0x28], 0x0; je short 0x00000000000921d0; xor eax, eax; ret; 
0x0000000008dd10: endbr64; cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x000000000e5750: endbr64; cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x000000001354d0: endbr64; cmp rdx, rcx; ja short 0x0000000000135504; xor eax, eax; syscall; 
0x00000000141df0: endbr64; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000029f30: endbr64; lea rax, [rip+0x1ae09b]; ret; 
0x00000000029f40: endbr64; lea rax, [rip+0x1aff5c]; ret; 
0x0000000009be30: endbr64; lock dec dword ptr [rdi]; jne short 0x000000000009be40; xor eax, eax; ret; 
0x00000000092670: endbr64; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000113000: endbr64; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000092b80: endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be70: endbr64; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0bf0: endbr64; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a00c0: endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x00000000114630: endbr64; mov eax, 0x102; syscall; 
0x00000000116280: endbr64; mov eax, 0x107; syscall; 
0x000000001161c0: endbr64; mov eax, 0x10a; syscall; 
0x00000000126fc0: endbr64; mov eax, 0x110; syscall; 
0x00000000127020: endbr64; mov eax, 0x11b; syscall; 
0x00000000126470: endbr64; mov eax, 0x11f; syscall; 
0x00000000125e80: endbr64; mov eax, 0x122; syscall; 
0x00000000126cf0: endbr64; mov eax, 0x123; syscall; 
0x000000001151f0: endbr64; mov eax, 0x124; syscall; 
0x00000000115260: endbr64; mov eax, 0x125; syscall; 
0x00000000126e10: endbr64; mov eax, 0x126; syscall; 
0x00000000127050: endbr64; mov eax, 0x12c; syscall; 
0x000000001265f0: endbr64; mov eax, 0x131; syscall; 
0x0000000011bb70: endbr64; mov eax, 0x132; syscall; 
0x000000001270b0: endbr64; mov eax, 0x134; syscall; 
0x000000001270e0: endbr64; mov eax, 0x13f; syscall; 
0x00000000127110: endbr64; mov eax, 0x14a; syscall; 
0x00000000127140: endbr64; mov eax, 0x14b; syscall; 
0x00000000114af0: endbr64; mov eax, 0x15; syscall; 
0x00000000092730: endbr64; mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000092860: endbr64; mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000000928a0: endbr64; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x0000000009d540: endbr64; mov eax, 0x18; syscall; 
0x0000000015d230: endbr64; mov eax, 0x1; ret; 
0x00000000119d40: endbr64; mov eax, 0x1; syscall; 
0x000000000ed190: endbr64; mov eax, 0x1; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x00000000119800: endbr64; mov eax, 0x1b4; syscall; 
0x0000000011ed50: endbr64; mov eax, 0x1b; syscall; 
0x0000000011ed20: endbr64; mov eax, 0x1c; syscall; 
0x00000000128590: endbr64; mov eax, 0x1e; syscall; 
0x00000000115190: endbr64; mov eax, 0x20; syscall; 
0x000000001151c0: endbr64; mov eax, 0x21; syscall; 
0x000000000dcdb0: endbr64; mov eax, 0x24; syscall; 
0x000000000ea5b0: endbr64; mov eax, 0x25; syscall; 
0x000000000dcde0: endbr64; mov eax, 0x26; syscall; 
0x000000000ec0b0: endbr64; mov eax, 0x27; syscall; 
0x00000000127ce0: endbr64; mov eax, 0x29; syscall; 
0x0000000015f550: endbr64; mov eax, 0x2; ret; 
0x00000000127cb0: endbr64; mov eax, 0x30; syscall; 
0x00000000127660: endbr64; mov eax, 0x31; syscall; 
0x000000001277d0: endbr64; mov eax, 0x32; syscall; 
0x00000000127760: endbr64; mov eax, 0x33; syscall; 
0x00000000127730: endbr64; mov eax, 0x34; syscall; 
0x0000000009fdc0: endbr64; mov eax, 0x3; syscall; 
0x000000000eb0f0: endbr64; mov eax, 0x3b; syscall; 
0x00000000042750: endbr64; mov eax, 0x3e; syscall; 
0x000000000ea370: endbr64; mov eax, 0x3f; syscall; 
0x00000000128460: endbr64; mov eax, 0x40; syscall; 
0x000000001285c0: endbr64; mov eax, 0x43; syscall; 
0x000000001283c0: endbr64; mov eax, 0x44; syscall; 
0x00000000114fa0: endbr64; mov eax, 0x49; syscall; 
0x0000000011d130: endbr64; mov eax, 0x4c; syscall; 
0x0000000011d160: endbr64; mov eax, 0x4d; syscall; 
0x00000000115320: endbr64; mov eax, 0x50; syscall; 
0x00000000115350: endbr64; mov eax, 0x51; syscall; 
0x00000000061f20: endbr64; mov eax, 0x52; syscall; 
0x00000000114600: endbr64; mov eax, 0x53; syscall; 
0x000000001162b0: endbr64; mov eax, 0x54; syscall; 
0x00000000116130: endbr64; mov eax, 0x56; syscall; 
0x00000000116250: endbr64; mov eax, 0x57; syscall; 
0x00000000116190: endbr64; mov eax, 0x58; syscall; 
0x000000001161f0: endbr64; mov eax, 0x59; syscall; 
0x00000000114400: endbr64; mov eax, 0x5a; syscall; 
0x00000000114430: endbr64; mov eax, 0x5b; syscall; 
0x00000000115c10: endbr64; mov eax, 0x5c; syscall; 
0x00000000115c40: endbr64; mov eax, 0x5d; syscall; 
0x00000000115c70: endbr64; mov eax, 0x5e; syscall; 
0x000000001143f0: endbr64; mov eax, 0x5f; syscall; 
0x0000000011a500: endbr64; mov eax, 0x62; syscall; 
0x00000000126f90: endbr64; mov eax, 0x63; syscall; 
0x000000000ea3a0: endbr64; mov eax, 0x64; syscall; 
0x000000000ec0d0: endbr64; mov eax, 0x66; syscall; 
0x00000000126e70: endbr64; mov eax, 0x67; syscall; 
0x000000000ec0f0: endbr64; mov eax, 0x68; syscall; 
0x000000000ec0e0: endbr64; mov eax, 0x6b; syscall; 
0x000000000ec100: endbr64; mov eax, 0x6c; syscall; 
0x000000000ec370: endbr64; mov eax, 0x6d; syscall; 
0x000000000ec0c0: endbr64; mov eax, 0x6e; syscall; 
0x000000000ec3a0: endbr64; mov eax, 0x6f; syscall; 
0x000000000ec400: endbr64; mov eax, 0x70; syscall; 
0x000000000ec110: endbr64; mov eax, 0x73; syscall; 
0x000000000ec430: endbr64; mov eax, 0x76; syscall; 
0x000000000ec460: endbr64; mov eax, 0x78; syscall; 
0x000000000ec340: endbr64; mov eax, 0x79; syscall; 
0x00000000125c40: endbr64; mov eax, 0x7a; syscall; 
0x00000000125c70: endbr64; mov eax, 0x7b; syscall; 
0x000000000ec3d0: endbr64; mov eax, 0x7c; syscall; 
0x00000000126c00: endbr64; mov eax, 0x7d; syscall; 
0x00000000126c30: endbr64; mov eax, 0x7e; syscall; 
0x00000000042d40: endbr64; mov eax, 0x83; syscall; 
0x00000000126ff0: endbr64; mov eax, 0x86; syscall; 
0x00000000125f50: endbr64; mov eax, 0x87; syscall; 
0x000000001142b0: endbr64; mov eax, 0x89; syscall; 
0x00000000114ac0: endbr64; mov eax, 0x8; syscall; 
0x000000001142e0: endbr64; mov eax, 0x8a; syscall; 
0x0000000011a8f0: endbr64; mov eax, 0x8c; syscall; 
0x0000000011a930: endbr64; mov eax, 0x8d; syscall; 
0x00000000108be0: endbr64; mov eax, 0x8e; syscall; 
0x00000000108c10: endbr64; mov eax, 0x8f; syscall; 
0x00000000108c40: endbr64; mov eax, 0x90; syscall; 
0x00000000108c70: endbr64; mov eax, 0x91; syscall; 
0x00000000108cd0: endbr64; mov eax, 0x92; syscall; 
0x00000000108d00: endbr64; mov eax, 0x93; syscall; 
0x00000000108d30: endbr64; mov eax, 0x94; syscall; 
0x0000000011edb0: endbr64; mov eax, 0x95; syscall; 
0x0000000011ede0: endbr64; mov eax, 0x96; syscall; 
0x0000000011ee10: endbr64; mov eax, 0x97; syscall; 
0x0000000011ee40: endbr64; mov eax, 0x98; syscall; 
0x0000000011bea0: endbr64; mov eax, 0x99; syscall; 
0x00000000126bc0: endbr64; mov eax, 0x9a; syscall; 
0x00000000126f00: endbr64; mov eax, 0x9b; syscall; 
0x00000000126b90: endbr64; mov eax, 0x9e; syscall; 
0x0000000011b9f0: endbr64; mov eax, 0xa1; syscall; 
0x0000000011bab0: endbr64; mov eax, 0xa2; syscall; 
0x0000000011b9c0: endbr64; mov eax, 0xa3; syscall; 
0x00000000125be0: endbr64; mov eax, 0xa6; syscall; 
0x0000000011bed0: endbr64; mov eax, 0xa7; syscall; 
0x0000000011bf00: endbr64; mov eax, 0xa8; syscall; 
0x0000000011ec50: endbr64; mov eax, 0xa; syscall; 
0x0000000011b520: endbr64; mov eax, 0xaa; syscall; 
0x0000000011b660: endbr64; mov eax, 0xab; syscall; 
0x00000000125b30: endbr64; mov eax, 0xac; syscall; 
0x00000000125b00: endbr64; mov eax, 0xad; syscall; 
0x00000000126c60: endbr64; mov eax, 0xae; syscall; 
0x00000000126c90: endbr64; mov eax, 0xb0; syscall; 
0x00000000126d50: endbr64; mov eax, 0xb1; syscall; 
0x00000000126ed0: endbr64; mov eax, 0xb4; syscall; 
0x0000000011ec20: endbr64; mov eax, 0xb; syscall; 
0x00000000127170: endbr64; mov eax, 0xba; syscall; 
0x00000000125c10: endbr64; mov eax, 0xbb; syscall; 
0x00000000122270: endbr64; mov eax, 0xc2; syscall; 
0x000000001222d0: endbr64; mov eax, 0xc3; syscall; 
0x000000001221b0: endbr64; mov eax, 0xc4; syscall; 
0x00000000122360: endbr64; mov eax, 0xc5; syscall; 
0x00000000122300: endbr64; mov eax, 0xc6; syscall; 
0x000000001221e0: endbr64; mov eax, 0xc7; syscall; 
0x000000000d99e0: endbr64; mov eax, 0xc9; syscall; 
0x0000000011a9d0: endbr64; mov eax, 0xc; syscall; 
0x00000000108dd0: endbr64; mov eax, 0xcb; syscall; 
0x00000000126cc0: endbr64; mov eax, 0xd5; syscall; 
0x00000000126bf0: endbr64; mov eax, 0xe4; syscall; 
0x00000000127180: endbr64; mov eax, 0xea; syscall; 
0x000000000a0390: endbr64; mov eax, 0xf5; syscall; 
0x00000000126de0: endbr64; mov eax, 0xfd; syscall; 
0x00000000126db0: endbr64; mov eax, 0xfe; syscall; 
0x00000000126e40: endbr64; mov eax, 0xff; syscall; 
0x0000000008ddd0: endbr64; mov eax, 0xffffffff; ret; 
0x00000000113990: endbr64; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008f1e0: endbr64; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000113980: endbr64; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000152050: endbr64; mov eax, [rdi+0x20]; ret; 
0x0000000016d0a0: endbr64; mov eax, [rdi+0x28]; ret; 
0x00000000092320: endbr64; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000119d70: endbr64; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000089210: endbr64; mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000891e0: endbr64; mov eax, [rdi]; and eax, 0x804; ret; 
0x00000000092310: endbr64; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000e66e0: endbr64; mov eax, [rdi]; ret; 
0x0000000008a010: endbr64; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008a020: endbr64; mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x000000000961c0: endbr64; mov eax, [rip+0x189926]; ret; 
0x00000000043130: endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x00000000043120: endbr64; mov eax, [rip+0x1d60be]; ret; 
0x0000000015da70: endbr64; mov eax, [rip+0xc9e46]; test eax, eax; je short 0x000000000015da80; ret; 
0x00000000113a30: endbr64; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x0000000003a170: endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x00000000136770: endbr64; mov eax, edi; bswap eax; ret; 
0x00000000045dd0: endbr64; mov eax, edi; neg eax; cmovs eax, edi; ret; 
0x00000000136780: endbr64; mov eax, edi; rol ax, 0x8; ret; 
0x00000000114980: endbr64; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x0000000009b5a0: endbr64; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x00000000140ff0: endbr64; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000173580: endbr64; mov edi, [rip+0xa5fbe]; test edi, edi; jns short 0x0000000000173590; ret; 
0x00000000042780: endbr64; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000178370: endbr64; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000009b540: endbr64; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f590: endbr64; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000115ca0: endbr64; mov r10, rcx; mov eax, 0x104; syscall; 
0x00000000061f50: endbr64; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000116160: endbr64; mov r10, rcx; mov eax, 0x109; syscall; 
0x00000000116220: endbr64; mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000119d00: endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000001264a0: endbr64; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000125f10: endbr64; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000127080: endbr64; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000126570: endbr64; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000001265b0: endbr64; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000113c30: endbr64; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000119320: endbr64; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000127d10: endbr64; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000127c70: endbr64; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000127790: endbr64; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126ea0: endbr64; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d80: endbr64; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f30: endbr64; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000126f60: endbr64; mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000122390: endbr64; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000122330: endbr64; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000122210: endbr64; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000122240: endbr64; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001222a0: endbr64; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000122180: endbr64; mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000011ed80: endbr64; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000128550: endbr64; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126d20: endbr64; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000113ee0: endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000119420: endbr64; mov r10d, ecx; mov eax, 0x118; syscall; 
0x00000000126ab0: endbr64; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141e0: endbr64; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ee0: endbr64; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000125e40: endbr64; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000009bf20: endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008e820: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000922e0: endbr64; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x000000000923f0: endbr64; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cc30: endbr64; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b30: endbr64; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4e0: endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000009f190: endbr64; mov rax, [rdi+0x78]; ret; 
0x00000000083bf0: endbr64; mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000a0cf0: endbr64; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000a0ec0: endbr64; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000a0d30: endbr64; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000097550: endbr64; mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000097540: endbr64; mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c90: endbr64; mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c80: endbr64; mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c70: endbr64; mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x00000000090c60: endbr64; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000009c0e0: endbr64; mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0d50: endbr64; mov rax, [rdi]; nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce0: endbr64; mov rax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x000000000a0cd0: endbr64; mov rax, [rdi]; nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd0: endbr64; mov rax, [rdi]; nop; mov [rip+0x17f51e], eax; ret; 
0x0000000008f4c0: endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x00000000042f80: endbr64; mov rax, [rip+0x1d5e85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a3a0: endbr64; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a360: endbr64; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000003a380: endbr64; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x000000000355d0: endbr64; mov rax, [rip+0x1e54a5]; ret; 
0x0000000002a250: endbr64; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x0000000002b980: endbr64; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000002b970: endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000178340: endbr64; mov rax, [rip+0xa0ac5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178320: endbr64; mov rax, [rip+0xa0ae5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f0: endbr64; mov rax, [rip+0xa0c15]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb0: endbr64; mov rax, [rip+0xa0e55]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f90: endbr64; mov rax, [rip+0xa0e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f50: endbr64; mov rax, [rip+0xa0eb5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f30: endbr64; mov rax, [rip+0xa0ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f10: endbr64; mov rax, [rip+0xa0ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef0: endbr64; mov rax, [rip+0xa0f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000175ca0: endbr64; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000175040: endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x000000001720c0: endbr64; mov rax, [rip+0xa6d45]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000168960: endbr64; mov rax, [rip+0xb045d]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x0000000014a390: endbr64; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x000000001517d0: endbr64; mov rax, [rip+0xd0dad]; test rax, rax; jne short 0x00000000001517e8; ret; 
0x00000000136b20: endbr64; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x00000000129d00: endbr64; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x000000001271b0: endbr64; mov rax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000011be80: endbr64; mov rax, [rip+0xfcf85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a310: endbr64; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a320: endbr64; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000009b590: endbr64; mov rax, fs:[0x10]; ret; 
0x00000000045e20: endbr64; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000045de0: endbr64; mov rax, rdi; neg rax; cmovs rax, rdi; ret; 
0x0000000008f4f0: endbr64; mov rax, rdi; ret; 
0x00000000177e70: endbr64; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x000000000d9cb0: endbr64; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x00000000041f80: endbr64; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000112fc0: endbr64; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x0000000009a670: endbr64; nop; xor eax, eax; ret; 
0x00000000092890: endbr64; or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000041ba0: endbr64; pand xmm1, [rip+0x1a0554]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041710: endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000041a50: endbr64; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000eac30: endbr64; pop rdi; mov eax, 0x3a; syscall; 
0x00000000029d00: endbr64; ret; 
0x0000000008d330: endbr64; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x00000000126300: endbr64; test edx, edx; je short 0x0000000000126338; mov eax, 0x145; syscall; 
0x0000000016d4b0: endbr64; test edx, edx; jne short 0x000000000016d4c0; mov eax, 0x1; ret; 
0x0000000016d4f0: endbr64; test edx, edx; jne short 0x000000000016d500; mov eax, 0x1; ret; 
0x000000000c5030: endbr64; test rdx, rdx; jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000bab70: endbr64; test rsi, rsi; jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000d8630: endbr64; test rsi, rsi; jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d9af0: endbr64; test rsi, rsi; jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x0000000003a180: endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x00000000095cf0: endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000008e7a0: endbr64; xor eax, eax; ret; 
0x00000000119cd0: endbr64; xor eax, eax; syscall; 
0x000000000891f0: endbr64; xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x00000000089200: endbr64; xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x0000000008c9b0: endbr64; xor eax, eax; test rdx, rdx; jne short 0x000000000008c9c0; ret; 
0x00000000115220: endbr64; xor esi, esi; mov eax, 0x125; syscall; 
0x000000001285f0: endbr64; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000162c12: enter 0x0, 0x0; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x00000000162c6c: enter 0x0, 0x0; call rax; 
0x00000000162c1d: enter 0x0, 0x0; jmp rcx; 
0x000000000f7030: enter 0x0, 0x0; jne 0x00000000000f6f5d; ret; 
0x0000000016954c: enter 0x0, 0x0; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x00000000114562: enter 0x0, 0x0; mov eax, r12d; pop r12; pop r13; ret; 
0x000000001695de: enter 0x0, 0x0; mov rax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x000000001563c8: enter 0x0, 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x0000000015e748: enter 0x0, 0x0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000002d619: enter 0x0, 0xe8; call qword ptr [rax-0x76befff0]; 
0x00000000164a74: enter 0x1, 0x0; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000000a94f4: enter 0x10, 0x48; cmove eax, edx; ret; 
0x0000000008d8bd: enter 0x1076, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001a76ed: enter 0x10f, 0xd6; je short 0x00000000001a76f7; vzeroall; ret; 
0x000000001a8a8f: enter 0x10f, 0xd6; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000000ec54a: enter 0x12, 0x80; cmp [rax], al; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x0000000002b304: enter 0x14a1, 0x0; mov rax, [rbp-0x68]; mov rdi, r12; call rax; 
0x000000000d7e68: enter 0x1577, 0x48; sub edi, 0x10; add rax, rdi; ret; 
0x0000000009c54c: enter 0x17, 0x64; mov dword ptr [rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009d42b: enter 0x1f0f, 0x40; add [rbx+rcx*4+0x65], cl; sbb [rax-0x75], cl; jge short 0x000000000009d440; call qword ptr [rbp]; 
0x000000001b07f4: enter 0x2, 0x0; ret; 
0x0000000004148d: enter 0x2148, 0xc6; movsd [rdx], xmm1; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x00000000082343: enter 0x2276, 0x48; mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000001986f4: enter 0x25d, 0x0; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001a6230: enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x0000000008de0d: enter 0x2876, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000056636: enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret; 
0x000000001987d7: enter 0x2948, 0xf8; ret; 
0x00000000046d3c: enter 0x2948, 0xfe; syscall; 
0x00000000084462: enter 0x2b76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x0000000008e86d: enter 0x3076, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x00000000080814: enter 0x3176, 0x48; movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000000b2dcd: enter 0x31c3, 0xc0; ret; 
0x0000000008478f: enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret; 
0x0000000008c0ce: enter 0x3776, 0x48; mov edi, ebp; call qword ptr [rbx+0x88]; 
0x000000000838ed: enter 0x3876, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000114265: enter 0x3948, 0xc1; jne short 0x0000000000114298; mov r10d, ecx; mov eax, 0x103; syscall; 
0x000000001b4126: enter 0x3948, 0xc6; ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54c9: enter 0x3948, 0xc6; ja 0x00000000001b5287; mov eax, esi; ret; 
0x00000000053b45: enter 0x3b4c, 0x10; mov eax, 0x0; jne short 0x0000000000053b53; push r10; ret; 
0x0000000005402e: enter 0x3b4c, 0x10; mov eax, 0x0; jne short 0x000000000005403c; push r10; ret; 
0x0000000008180a: enter 0x3d76, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x00000000082280: enter 0x3d76, 0x4c; mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000077988: enter 0x415d, 0x5c; pop r13; pop r14; ret; 
0x0000000016649b: enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x0000000016639b: enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x0000000007f221: enter 0x4476, 0x48; mov edi, ebx; call qword ptr [rbp+0x60]; 
0x0000000007b445: enter 0x448b, 0x24; adc [rbp-0x77], al; ret far; 
0x0000000019a295: enter 0x450f, 0xc2; ret; 
0x000000001a2d08: enter 0x450f, 0xc2; sbb ecx, ecx; or eax, ecx; ret; 
0x0000000008a460: enter 0x4576, 0x48; mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000008c95f: enter 0x4676, 0x31; idiv byte ptr [rcx+0x3]; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000165b47: enter 0x4789, 0x48; mov eax, 0x1; ret; 
0x00000000165b94: enter 0x4789, 0x54; mov eax, 0x1; ret; 
0x00000000165b74: enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x0000000011d9b0: enter 0x4866, 0xf; outsb dx, [rsi]; ret; 
0x0000000019d716: enter 0x48f3, 0xf; mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x000000000c2014: enter 0x5, 0x0; ret; 
0x0000000008834c: enter 0x5176, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x0000000013616a: enter 0x577, 0xe9; out dx, al; add cl, bh; call qword ptr [rax-0x18]; 
0x0000000008a2fc: enter 0x5976, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000007232c: enter 0x5976, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000134816: enter 0x6, 0x48; cmove eax, edx; ret; 
0x0000000013480f: enter 0x6, 0x48; lea eax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x0000000008a51d: enter 0x6076, 0xba; add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000133c83: enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000002a13c: enter 0x6411, 0x48; xor eax, [0x30]; jmp rax; 
0x00000000045d8a: enter 0x6411, 0x48; xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000143668: enter 0x6411, 0x48; xor eax, [0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000008c187: enter 0x6676, 0x31; idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008dd57: enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x00000000108dc4: enter 0x66c3, 0x2e; nop [rax+rax]; endbr64; mov eax, 0xcb; syscall; 
0x000000001a2d5c: enter 0x66c3, 0x90; xor eax, eax; ret; 
0x000000000815c6: enter 0x6f76, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007fb0d: enter 0x7076, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000778b8: enter 0x7576, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000119500: enter 0x774, 0x31; ror byte ptr [rax+0x39], 0xca; je short 0x0000000000119510; ret; 
0x00000000080f8f: enter 0x7e76, 0x48; mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000107d7d: enter 0x8348, 0xc0; or [rax+0x39], cl; ret; 
0x00000000113da1: enter 0x8348, 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000113af6: enter 0x8348, 0xc6; or [rax+0x39], cl; div dword ptr [rbp-0x28]; mov eax, r8d; ret; 
0x000000000ba723: enter 0x840f, 0xc6; add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000085f34: enter 0x860f, 0x1d; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000007ed52: enter 0x860f, 0x37; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000008da1a: enter 0x860f, 0x87; add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008dbf2: enter 0x860f, 0x8f; add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x000000000867bf: enter 0x860f, 0xda; add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000162d9f: enter 0x8789, 0xa8; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000162dfc: enter 0x8789, 0xb4; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000162dcc: enter 0x8789, 0xb8; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000931a6: enter 0x8902, 0xc2; mov eax, ebp; syscall; 
0x00000000093707: enter 0x8902, 0xc2; mov eax, r12d; syscall; 
0x000000000606a6: enter 0x8907, 0x2; mov eax, 0x1; ret; 
0x000000000720dc: enter 0x8948, 0x85; push 0xffffffffe9fffffa; ret; 
0x00000000054e66: enter 0x894c, 0x47; clc; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054de6: enter 0x894c, 0x7; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000054f00: enter 0x894c, 0x7; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000000515ef: enter 0x894c, 0xc0; ret; 
0x0000000015d63f: enter 0x8b48, 0x47; cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000011ea35: enter 0x8b4c, 0x4c; and al, 0x8; syscall; 
0x00000000125b99: enter 0x8b4c, 0x54; and al, 0x8; mov eax, 0x38; syscall; 
0x00000000084672: enter 0x8d49, 0x14; nop; mov [rax], rdx; xor eax, eax; ret; 
0x0000000014855d: enter 0x8d49, 0x1c; or cl, [rcx-0x7d]; ret; 
0x00000000059bf6: enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000125683: enter 0x948, 0xd0; ret; 
0x0000000005fa10: enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x0000000016cda6: enter 0x9848, 0x48; mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x000000001269e5: enter 0xb3b8, 0x1; add [rax], al; syscall; 
0x000000001a6234: enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x0000000009274d: enter 0xc031, 0x66; punpckldq mm0, mm1; movq [rdi+0x4], xmm0; ret; 
0x00000000165b34: enter 0xc089, 0x48; mov [rcx], eax; mov eax, 0x1; ret; 
0x000000000d8382: enter 0xc148, 0xe8; add al, [rdx+rdx*8-0x2e77ea8c]; and cl, 0xf; je short 0x00000000000d83b0; ret; 
0x000000000967d5: enter 0xc183, 0x1; lock cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x000000001b1af3: enter 0xc1ff, 0xf; test [rdi+rdi*8-0x1], dh; jmp qword ptr [rdx-0x4e]; 
0x00000000113194: enter 0xc2d, 0x0; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000001b50fb: enter 0xc301, 0x66; nop; xor eax, eax; ret; 
0x000000001b59bf: enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001ae932: enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000155a14: enter 0xd1d, 0x0; mov [rip+0xd0db1], r12; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000056591: enter 0xd348, 0xe2; mov [rsi], rdx; mov [rdi], eax; mov eax, 0x1; ret; 
0x000000000417bc: enter 0xd8f7, 0x9; enter 0xf8c1, 0x1f; not eax; and eax, edx; ret; 
0x000000000b12cc: enter 0xe174, 0x4c; mov eax, eax; ret; 
0x0000000008e95a: enter 0xe883, 0x1; ret; 
0x00000000126403: enter 0xf009, 0xf; add edi, ebp; xor eax, eax; ret; 
0x000000000b1208: enter 0xf41, 0x95; rol dword ptr [rbp-0x7c], 0xca; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x00000000083579: enter 0xf48, 0x4f; ror dword ptr [rax-0x7b], 0xd2; jne short 0x0000000000083570; ret; 
0x0000000008d571: enter 0xf48, 0x4f; ror dword ptr [rax-0x7b], 0xd2; jne short 0x000000000008d568; ret; 
0x0000000004632b: enter 0xf4ec, 0xff; jmp far fword ptr [rcx-0x40]; 
0x0000000012eeef: enter 0xf66, 0x62; ret far; 
0x000000000854e8: enter 0xf66, 0x6c; ror dword ptr [rdi], 0x11; or r9b, bpl; sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000419bd: enter 0xf66, 0x6e; shl bl, 0xf; pop rcx; add eax, 0x1a13fe; ret; 
0x000000001a2e39: enter 0xf66, 0xd7; shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a2db3; ret; 
0x000000001a369c: enter 0xf66, 0xd7; shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a3603; ret; 
0x000000000ba339: enter 0xf66, 0xeb; ret; 
0x000000000417c0: enter 0xf8c1, 0x1f; not eax; and eax, edx; ret; 
0x00000000198e00: enter 0xf8c5, 0x77; ret; 
0x000000000b13e2: enter 0xfc3, 0x1f; add [rcx+rcx*4], al; add rax, rcx; ret; 
0x000000000414fe: enter 0xff2, 0x5c; shl edx, 0x1; movups [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x000000000b0d93: enter 0xffff, 0x89; ret; 
0x000000000c5213: fadd st(3), st; nop [rax]; xor eax, eax; ret; 
0x000000000c5a23: fadd st(3), st; ret; 
0x0000000015a340: fadd st(3), st; std; jmp qword ptr [rsi+0x2e]; 
0x000000000a96a4: fadd st, dword ptr [rax+0xd]; add [rax-0x73], cl; adc eax, 0xd9771; cmovne rax, rdx; ret; 
0x00000000072e30: fadd st, dword ptr [rax]; add [rax+0x39], cl; ret; 
0x00000000029cf1: fadd st, dword ptr [rax]; add [rax], al; jne short 0x0000000000029cbb; ret; 
0x00000000095330: fadd st, dword ptr [rax]; add [rax], al; mov edi, 0x1; mov eax, 0xe; syscall; 
0x0000000007f58f: fadd st, dword ptr [rax]; add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000005189a: fadd st, dword ptr [rax]; add [rax], al; ret; 
0x0000000011ed88: fadd st, dword ptr [rax]; add [rax], al; syscall; 
0x00000000116306: fadd st, dword ptr [rax]; ret; 
0x000000000dd718: fadd st, dword ptr [rbp+0x5b0375d2]; ret; 
0x0000000006ac9d: fadd st, dword ptr [rbp-0x73]; pop rdi; shl byte ptr [rsi+0xf], 0x1; insb [rdi], dx; ret; 
0x000000000612c8: fadd st, dword ptr [rbp-0x7b]; shl byte ptr [rbp+0x2], 0x5b; ret; 
0x0000000016e096: fadd st, dword ptr [rbx+0x14807e0]; ret; 
0x000000001b50f9: fadd st, dword ptr [rbx+0x66c301c8]; nop; xor eax, eax; ret; 
0x0000000016fce1: fadd st, dword ptr [rbx-0x76b7f820]; ret; 
0x00000000191884: fadd st, dword ptr [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000f444a: fadd st, dword ptr [rcx+0x5c]; pop r13; pop r14; pop r15; ret; 
0x00000000107c0a: fadd st, dword ptr [rcx+0xf]; popfq; ret; 
0x00000000113aff: fadd st, dword ptr [rcx+rcx*4-0x40]; ret; 
0x000000000d7cb6: fadd st, dword ptr [rcx+rdi-0x3a]; cmovg eax, edx; ret; 
0x000000000da031: fadd st, dword ptr [rcx-0x77]; ret; 
0x000000000eabf7: fadd st, dword ptr [rdx]; add [rax], al; mov eax, 0x111; syscall; 
0x00000000134857: fadd st, qword ptr [rax-0x72b7fd1a]; add eax, 0x7293e; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000000a97e7: fadd st, qword ptr [rax-0x72b7fd1a]; add eax, 0xfd9ce; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x00000000072afb: fadd st, qword ptr [rax]; add [rax+0x39], cl; ret; 
0x00000000128558: fadd st, qword ptr [rax]; add [rax], al; syscall; 
0x000000000a7fa0: fadd st, qword ptr [rbx]; clc; jmp qword ptr [rsi+0xf]; 
0x000000000b079b: fadd st, qword ptr [rcx-0x7d]; ret; 
0x00000000041348: fadd st, st(0); add rsp, 0x8; ret; 
0x000000000412f4: fadd st, st(0); ret; 
0x00000000091231: fadd st, st(3); nop [rax+rax]; mov eax, 0x16; ret; 
0x000000001a6858: fadd st, st(3); nop [rax+rax]; ret; 
0x000000000d7bb8: fadd st, st(3); nop [rax+rax]; xor rax, rax; ret; 
0x0000000009108b: fadd st, st(3); nop [rax]; mov eax, 0x16; ret; 
0x00000000075e70: faddp st(6), st; and al, 0x38; and [rax-0x77], cl; ret far; 
0x0000000008fc28: fbld st, tbyte ptr [rsi+0xf]; insb [rdi], dx; ret far; 
0x000000000b135d: fcmovb st, st(3); nop; ret; 
0x0000000008f572: fcmovb st, st(4); sbb [rax], al; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x0000000019d4cb: fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x000000000a96d1: fcmovnbe st, st(1); str [rax-0x73]; add eax, 0xfd264; cmove rax, rdx; ret; 
0x0000000019a276: fcmovnbe st, st(1); vpmovmskb eax, xmm2; not ax; ret; 
0x0000000019a17a: fcmovnbe st, st(1); vpmovmskb eax, ymm2; inc eax; vzeroupper; ret; 
0x000000001a3196: fcmovnu st, st(1); pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3510; ret; 
0x000000001a39f6: fcmovnu st, st(1); pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3d70; ret; 
0x00000000035dfd: fcomip st, st(5); adc eax, [rax]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x000000000ac06b: fcomp st, dword ptr [rbx+0x48]; cmovne eax, edx; ret; 
0x00000000113be2: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000d2ac0: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret; 
0x00000000089cd4: fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x000000001baaa5: fcomp st, dword ptr [rbx+0x7420e783]; adc bl, dh; movups xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x000000000517c7: fcomp st, dword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000e5589: fcos; call far fword ptr [rdx+0x59]; 
0x0000000007a99c: fcos; call qword ptr [rax+0x1ba]; 
0x0000000007a9cb: fcos; call qword ptr [rax-0x5e1f00d]; 
0x000000000a73eb: fcos; dec dword ptr [rax-0x77]; ret; 
0x0000000006d113: fcos; jmp qword ptr [rsi+0xf]; 
0x00000000059acb: fcos; jmp qword ptr [rsi-0x70]; 
0x0000000007a743: fdiv st(7), st; jmp qword ptr [rsi+0x2e]; 
0x000000000d6a01: fdiv st(7), st; jmp qword ptr [rsi+0x66]; 
0x00000000069462: fdiv st(7), st; jmp qword ptr [rsi+0xf]; 
0x0000000005069b: fdiv st(7), st; jmp qword ptr [rsi-0x70]; 
0x00000000120fe1: fdiv st, st(5); jmp qword ptr [rsi+0x66]; 
0x00000000120f9d: fdiv st, st(5); jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000dc3d0: fdivp st(2), st; dec dword ptr [rax+0x39]; ret; 
0x000000000d7cfc: fdivp st(6), st; call qword ptr [rax-0x5e1f00d]; 
0x000000000a2ebc: fdivp st(7), st; call qword ptr [rax-0x36c272b8]; 
0x000000000a7305: fdivp st(7), st; dec dword ptr [rax-0x77]; ret; 
0x00000000057039: fdivp st(7), st; dec dword ptr [rax-0x7d]; ret; 
0x00000000138861: fdivp st(7), st; jmp qword ptr [rsi+0x2e]; 
0x00000000159372: fdivp st(7), st; jmp qword ptr [rsi+0x66]; 
0x00000000074f8f: fdivp st(7), st; jmp qword ptr [rsi+0xf]; 
0x000000000ca11a: fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x000000000cc98a: fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x000000000aa7e8: fdivr st(7), st; dec dword ptr [rax-0x77]; ret; 
0x0000000014d17a: fdivr st, qword ptr [rax+0x1]; ret; 
0x00000000038893: fdivr st, st(3); sbb [rax], eax; ret; 
0x00000000163ae6: fdivr st, st(7); add rsp, 0x8; ret; 
0x000000000b0892: fdivr st, st(7); jmp qword ptr [rsi+0x2e]; 
0x000000000e0187: fdivr st, st(7); jmp qword ptr [rsi+0xf]; 
0x0000000004aefb: fdivr st, st(7); jmp qword ptr [rsi-0x70]; 
0x000000001915fd: fdivr st, st(7); ret; 
0x000000000bf42e: fdivr st, st(7); xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x000000000fa7e0: fdivrp st(2), st; call far fword ptr [rbx+0x31]; 
0x000000001b5247: ffreep st(3); nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x00000000198b81: ffreep st(5); std; xlat [rbx]; ret far; 
0x000000001af8b2: fiadd st, dword ptr [rax]; add [rax], al; add rax, rdi; ret; 
0x000000000867c2: fiadd st, dword ptr [rax]; add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000042472: fiadd st, dword ptr [rbp+rax]; test eax, eax; jne short 0x0000000000042480; pop rbp; ret; 
0x000000001b8a7b: fiadd st, dword ptr [rbx-0x7cb7f01e]; cli; add al, 0x74; or ecx, [rcx-0x7d]; ret; 
0x00000000032523: fiadd st, dword ptr [rbx-0x9bef81e]; ret; 
0x000000000c6dad: fiadd st, dword ptr [rcx+0x400e6]; add [rax-0x73], cl; add eax, 0xdbb85; jne short 0x00000000000c6d6f; ret; 
0x000000000c561d: fiadd st, dword ptr [rcx+0x400e6]; add [rax-0x73], cl; add eax, 0xdd115; jne short 0x00000000000c55df; ret; 
0x000000000ce7ab: fiadd st, dword ptr [rcx-0x7d]; call far fword ptr [rax]; 
0x000000001a0472: fiadd st, dword ptr [rcx]; add [rax], al; vzeroupper; ret; 
0x00000000093331: fiadd st, word ptr [rax-0x80]; test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x000000000a0605: fiadd st, word ptr [rax]; add [rax], al; syscall; 
0x000000000c83da: fiadd st, word ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x00000000043209: fiadd st, word ptr [rcx-0x77]; rol byte ptr [rcx-0x46], 0x8; add [rax], al; add [rax+0x80], bh; syscall; 
0x0000000019f73e: fiadd st, word ptr [rcx]; add [rax], al; vzeroupper; ret; 
0x00000000046b54: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046ba3: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x0000000017133e: ficom st, word ptr [rbx-0x4]; jmp qword ptr [rsi+0x66]; 
0x000000001bbb9e: ficom st, word ptr [rdi-0x13]; jmp qword ptr [rsi+0xf]; 
0x00000000140c42: ficomp st, dword ptr [rdx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x000000000a4fd5: ficomp st, word ptr [rbx+0x5d]; pop r12; ret; 
0x000000001721a2: ficomp st, word ptr [rdx+0xb]; add [rbx+0x157f01f8], al; add rsp, 0x8; ret; 
0x000000001b330f: fidiv st, dword ptr [rbx-0x32]; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000148cf0: fidiv st, dword ptr [rcx]; test byte ptr [rcx+rcx*4-0x11], 0xe8; jne short 0x0000000000148cf2; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000009b5b4: fidivr st, dword ptr [rip-0x1000]; mov eax, 0x0; cmova eax, edx; ret; 
0x0000000003ff4e: fidivr st, dword ptr [rsi]; jmp r10; 
0x0000000010f8f4: fidivr st, word ptr [r11*1-0x49f0e989]; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; notrack jmp rax; 
0x00000000092f70: fidivr st, word ptr [rax+0xca]; syscall; 
0x000000000a979e: fidivr st, word ptr [rax+0xf]; add [rax-0x73], cl; add eax, 0xf7957; cmove rax, rdx; ret; 
0x0000000010f8f5: fidivr st, word ptr [rbx*1-0x49f0e989]; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; notrack jmp rax; 
0x00000000130f90: fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000893df: fidivr st, word ptr [rdi+0x2]; mov eax, r9d; syscall; 
0x00000000092ef4: fidivr st, word ptr [rdx+0x7fffffff]; xor sil, 0x81; syscall; 
0x0000000005c88e: fidivr st, word ptr [rdx-0x6e160004]; out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x00000000053110: fild st, dword ptr [rax+0xf3a007d]; xchg esp, eax; ret; 
0x0000000007c432: fild st, dword ptr [rax]; add cl, ch; shl dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000ace40: fild st, dword ptr [rbp-0x77]; ret far; 
0x000000000afb2b: fild st, dword ptr [rcx-0x7d]; ret; 
0x000000000db0cc: fild st, dword ptr [rdi+rcx+0x49]; ret; 
0x00000000041bae: fild st, dword ptr [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041248: fild st, dword ptr [rsp-0x4]; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x00000000156f6d: fild st, qword ptr [rsi]; out dx, al; jmp qword ptr [rsi+0x2e]; 
0x000000000d8f62: fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000f0e14: fild st, word ptr [r11+0x25773bf8]; lea rsi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000009b40e: fild st, word ptr [rax-0x80]; test byte ptr [rcx+0xcab8], 0x0; syscall; 
0x000000000a0a79: fild st, word ptr [rax]; add [rax], al; syscall; 
0x00000000096613: fild st, word ptr [rbp+0x31]; in al, 0xe8; movsb [rdi], [rsi]; mov cl, 0xff; call qword ptr [rax+0x24448b48]; 
0x000000000f0e15: fild st, word ptr [rbx+0x25773bf8]; lea rsi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000031a4b: fild st, word ptr [rbx-0x7fbf0f19]; jmp rax; 
0x00000000152205: fild st, word ptr [rbx]; or eax, 0x43894800; or [rax-0x77], cl; ret far; 
0x000000000c2ef1: fild st, word ptr [rcx+rdx]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001498d0: fild st, word ptr [rcx]; ret; 
0x000000000bad25: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000d87f5: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000016833c: fimul st, dword ptr [rax-0x77]; out dx, al; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x000000000751c4: fimul st, dword ptr [rax-0x77]; out dx, eax; call qword ptr [r12+0x38]; 
0x00000000064d1a: fimul st, dword ptr [rax-0x77]; ret far; 
0x000000000a26a8: fimul st, dword ptr [rax-0x77]; ror dword ptr [rax+0x21], cl; ret; 
0x000000000e7354: fimul st, dword ptr [rbx+rcx*4+0x4c]; and al, 0x18; mov rax, [rsp+0x10]; call rax; 
0x00000000175466: fimul st, dword ptr [rcx+0x480c2444]; mov edi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x00000000160280: fimul st, dword ptr [rcx+rcx*4-0x12]; call qword ptr [r14+0x40]; 
0x00000000082348: fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000007ab01: fimul st, dword ptr [rcx+rcx*4-0x19]; call qword ptr [rbp+0x38]; 
0x00000000080f94: fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38]; 
0x0000000008a465: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007945b: fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r12+0x38]; 
0x00000000079749: fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r13+0x38]; 
0x00000000073794: fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x00000000133a0b: fimul st, dword ptr [rdi]; adc [rbp-0x78], edi; call rax; 
0x00000000107557: fimul st, word ptr [rax+rax]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x0000000007b9c6: fimul st, word ptr [rax-0x75]; pop rsp; and al, 0x58; jmp rsi; 
0x0000000007632c: fimul st, word ptr [rax-0x75]; pop rsp; and al, 0x70; jmp rsi; 
0x000000001644e6: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x00000000169441: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000013e593: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x10]; 
0x00000000075a9a: fimul st, word ptr [rax-0x77]; ret far; 
0x000000000c8cb5: fimul st, word ptr [rax-0x77]; ret; 
0x00000000075a42: fimul st, word ptr [rax-0x77]; sar dword ptr [rdx+0x1], cl; jmp rsi; 
0x000000000545fc: fimul st, word ptr [rbp+0x11]; ret far; 
0x000000000cea54: fimul st, word ptr [rcx+rcx*4+0x1c]; and al, 0xe8; xchg edx, eax; ret; 
0x000000000b1211: fimul st, word ptr [rcx+rcx*4-0x40]; ret; 
0x0000000002f3ce: fimul st, word ptr [rcx-0x77]; ret; 
0x000000000ab504: fistp dword ptr [rbx+0x5d], st; mov qword ptr [r12], 0x0; pop r12; ret; 
0x00000000133ced: fistp word ptr [rbx-0x48], st; add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x000000001b8715: fisttp dword ptr [rax+0x1], st; ror dword ptr [rdi], 0x92; ret; 
0x000000000a2b9f: fisttp dword ptr [rax+0x21], st; ret; 
0x00000000063a3c: fisttp dword ptr [rax+0x63], st; add al, 0x9a; add rax, rdx; notrack jmp rax; 
0x00000000155b86: fisttp dword ptr [rax+rax], st; call rbx; 
0x00000000155b21: fisttp dword ptr [rax+rax], st; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b28: fisttp dword ptr [rax+rax], st; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x000000001b4569: fisttp dword ptr [rax-0x73], st; xchg [rax], r12d; ret; 
0x000000000554e5: fisttp dword ptr [rax-0x77], st; ret; 
0x00000000128f47: fisttp dword ptr [rax-0x77], st; sbb eax, 0xf04f1; pop rbx; ret; 
0x00000000128f2d: fisttp dword ptr [rax-0x77], st; sbb eax, 0xf050b; pop rbx; ret; 
0x000000001b8d20: fisttp dword ptr [rax-0x7b], st; test byte ptr [rcx+0xf], 0x95; ret; 
0x00000000167640: fisttp dword ptr [rbp+rcx*4+0x4c], st; and al, 0x14; call qword ptr [rax]; 
0x000000001201e0: fisttp dword ptr [rdi], st; lahf; ret; 
0x000000000e9326: fisttp dword ptr [rdi], st; ret; 
0x00000000141ea1: fisttp dword ptr [rdi], st; test [rax], esp; add [rax], eax; add [rax+0x63], cl; ret; 
0x0000000010c403: fisttp dword ptr [rdi], st; test [rcx+rdi*8-0x1], dh; jmp qword ptr [rsi+0xf]; 
0x0000000002b249: fisttp dword ptr [rdi], st; test al, ch; add eax, [rax]; add [rax-0x77], cl; ret; 
0x0000000010e247: fisttp dword ptr [rdi], st; xchg ebp, eax; ret; 
0x000000000512d2: fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x00000000041ba6: fisttp dword ptr [rip+0x1a0554], st; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x0000000014b1a8: fisttp qword ptr [rax+rax], st; mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x000000001b43d2: fisttp qword ptr [rax-0x73], st; test [rdi+0x80], al; ret; 
0x00000000120414: fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x0000000010f595: fisttp qword ptr [rcx-0x7ca7db84], st; jmp far fword ptr [rdi]; 
0x0000000011b0ea: fisttp qword ptr [rdi], st; add [rax+0x2e740038], al; mov eax, 0x71; syscall; 
0x000000000592c9: fisttp qword ptr [rdi], st; test [rdx-0x7cfffffc], eax; ret; 
0x0000000005389f: fisttp qword ptr [rdx-0x3], st; jmp qword ptr [rsi+0xf]; 
0x00000000199687: fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x000000000852d7: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rax+0x70]; 
0x0000000008ccaf: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rbp+0x70]; 
0x0000000015eaaf: fisttp word ptr [rax-0x77], st; test [rax], ah; add [rax], eax; add al, ch; ret; 
0x0000000003e5ca: fisttp word ptr [rax-0x7d], st; ret; 
0x0000000005557e: fisttp word ptr [rax], st; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000017193d: fisttp word ptr [rbp-0x4], st; jmp qword ptr [rsi+0x66]; 
0x000000000fbd10: fisttp word ptr [rbp-0x77], st; ror dword ptr [rax-0x77], cl; ret far; 
0x00000000153829: fisttp word ptr [rcx+rcx*4-0x17], st; call r10; 
0x00000000153c43: fisttp word ptr [rcx+rcx*4-0x7], st; call r12; 
0x0000000014406d: fisttp word ptr [rip-0x16a2a500], st; or ebx, edx; hlt; jmp qword ptr [rsi+0xf]; 
0x0000000012d91a: fisub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret; 
0x00000000173a42: fisubr st, dword ptr [rsp+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x000000001a21a1: fisubr st, word ptr [rcx]; enter 0xf8c5, 0x77; ret; 
0x000000000d7da3: fld st, dword ptr [rax]; add [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000e66b1: fld st, dword ptr [rax]; add [rax], al; syscall; 
0x00000000085893: fld st, dword ptr [rsi]; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x000000000c54ba: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xdc46b; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56ea: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xdc68b; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581a: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xdcd1b; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543a: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xdce7b; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000b163a: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xe823b; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000a95ea: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xf0a4b; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000ab0da: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xf249b; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2a: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xf4d5b; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876a: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xf51eb; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87ea: fld st, qword ptr [rax-0x72b7fb1b]; adc eax, 0xf52eb; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x00000000118ee8: fld st, qword ptr [rax]; add [rax], al; syscall; 
0x000000001bb2a7: fld st, qword ptr [rax]; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x000000001528e9: fld st, qword ptr [rbp+0x31]; sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, r12d; syscall; 
0x000000000411b8: fld st, st(0); fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x000000000404ee: fld st, st(3); ret; 
0x000000000412f0: fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x0000000004124c: fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x000000000411bc: fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x000000000410cd: fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000041202: fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000004113f: fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000042833: fldenv [rbp+0x1d]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d6d79: fldenv [rsi+0xf]; jbe short 0x00000000000d6dcd; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b4ae9: fldenv [rsi+0xf]; je short 0x00000000000b4b3d; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b4dd7: fldenv [rsi+0xf]; je short 0x00000000000b4e2b; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b49e1: fldenv [rsi+0xf]; xlat [rbx]; ret; 
0x000000000f0cf1: fldpi; ret; 
0x00000000054664: fmul st, dword ptr [rax+0x11]; rcr byte ptr [rbp+0x5b], 0x1; ret; 
0x0000000006769b: fmul st, dword ptr [rax+0x1]; ret; 
0x0000000004e28a: fmul st, dword ptr [rax-0x39]; ret; 
0x000000001027aa: fmul st, dword ptr [rax-0x77]; ret far; 
0x0000000008950e: fmul st, dword ptr [rax-0x77]; ret; 
0x000000000f01b6: fmul st, dword ptr [rax-0x7d]; ret; 
0x0000000016e093: fmul st, dword ptr [rax-0x9]; fadd st, dword ptr [rbx+0x14807e0]; ret; 
0x0000000002d1ba: fmul st, dword ptr [rcx+0xf]; ret; 
0x00000000121f4c: fmul st, dword ptr [rcx+rcx*4-0x40]; pop rbx; ret; 
0x000000001605eb: fmul st, dword ptr [rcx-0x77]; shl byte ptr [rsi+0xf], 0x6c; ret; 
0x000000000417be: fmul st, dword ptr [rcx]; enter 0xf8c1, 0x1f; not eax; and eax, edx; ret; 
0x00000000119f8d: fmul st, dword ptr [rdi]; adc [rsp+0x11], esp; syscall; 
0x0000000011b538: fmul st, dword ptr [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000062d9d: fmul st, dword ptr [rdi]; mov dh, 0x47; add [rsi+0xf], esp; insb [rdi], dx; ret; 
0x000000000d9052: fmul st, dword ptr [rdi]; sub [rsp], ebx; call rbx; 
0x000000000f3d7d: fmul st, qword ptr [rax-0x77]; ret far; 
0x000000000e6b63: fmul st, qword ptr [rax-0x7d]; ret; 
0x0000000011b17a: fmul st, qword ptr [rdi]; add [rax+0x2e740038], al; mov eax, 0x72; syscall; 
0x000000000f336f: fmul st, qword ptr [rdi]; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000019a0f4: fnclex; vpmovmskb eax, ymm4; inc eax; vzeroupper; ret; 
0x0000000019a228: fninit; vpmovmskb eax, ymm4; inc eax; vzeroupper; ret; 
0x000000001754eb: fnstcw [rcx]; or al, [rax]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000041343: fnstcw [rdx+0xa]; jne short 0x0000000000041350; fadd st, st(0); add rsp, 0x8; ret; 
0x0000000017adc0: fnstcw [rsi]; jmp r9; 
0x000000001bbd3b: fnstsw [rdx+0x6]; add [rax], al; pop rbx; ret; 
0x0000000004130a: fnstsw ax; fstp st(0), st; and eax, 0x200; ret; 
0x00000000120f36: fprem1; jmp qword ptr [rsi+0xf]; 
0x0000000016792f: frstor [rax-0x12ce0001]; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x000000001aed71: frstor [rax]; out dx, eax; jmp qword ptr [edx-0x5d]; 
0x0000000016782f: frstor [rcx-0x12ce0001]; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000041250: fscale; fstp st(1), st; ret; 
0x0000000009b859: fst qword ptr [rbx], st; add [rax-0x77], cl; ret; 
0x000000000eb108: fst qword ptr [rdx], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010391f: fst qword ptr [rsi], st; or eax, 0xd0894800; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000d2a3e: fstp dword ptr [rbx+0x31], st; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000013b776: fstp dword ptr [rbx+0x31], st; rcr byte ptr [rbp-0x3a], 0x7; add [rcx+0x5c], al; ret; 
0x00000000151f3e: fstp dword ptr [rbx+0x5d], st; pop r12; pop r13; pop r14; ret; 
0x000000000ab676: fstp dword ptr [rbx+0x5d], st; pop r12; ret; 
0x00000000093873: fstp dword ptr [rsi-0x1], st; jmp qword ptr [rsi+0xf]; 
0x000000000d8f68: fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x0000000004130c: fstp st(0), st; and eax, 0x200; ret; 
0x00000000041252: fstp st(1), st; ret; 
0x000000000411ba: fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x00000000041206: fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000004113d: fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000019884c: fstp tbyte ptr [rdx], st; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000412b4: fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000b1bcf: fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x000000000968e7: fsub st(3), st; and dword ptr [rsi+0xf], 0x1f; add [rax], r8b; mov eax, 0xba; syscall; 
0x0000000004276c: fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000427a8: fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000046ce8: fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000004130d: fsub st, dword ptr [rip+0x200]; ret; 
0x0000000011cf61: fsub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret far; 
0x000000000a4273: fsub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret; 
0x000000000bb3d4: fsub st, dword ptr [rsi+0xf]; xlat [rbx]; ret; 
0x000000000ba45c: fsub st, qword ptr [rsi+0xf]; xlat [rbx]; ret; 
0x0000000012e16e: fsubp st(0), st; cmp al, 0xa2; out dx, eax; jmp qword ptr [rsi+0x48]; 
0x0000000012a653: fsubp st(7), st; dec dword ptr [rax-0x77]; ret; 
0x000000000d8f66: fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000001344b4: fsubr st, dword ptr [rax+0x4]; add [rax-0x73], cl; adc eax, 0x4be61; cmovne rax, rdx; ret; 
0x000000000da02f: fsubr st, dword ptr [rcx]; fadd st, dword ptr [rcx-0x77]; ret; 
0x0000000016572e: fsubr st, dword ptr [rip-0x4616fff9]; push rcx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000001992e3: fsubr st, qword ptr [rcx]; enter 0xf8c5, 0x77; ret; 
0x0000000014462e: fsubr st, st(0); in al, dx; and bh, bh; jmp qword ptr [rsi+0x2e]; 
0x00000000029ed8: fsubrp st(0), st; sbb al, [rax]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x000000000411c0: fsubrp; ret; 
0x000000001129ff: fucom st, st(0); idiv edi; mov rax, [rsp]; add rsp, 0x28; ret; 
0x00000000074897: fucomi st, st(1); fwait; in eax, 0xff; jmp far fword ptr [rax-0x2b7bf0f0]; 
0x0000000009c82b: fucomi st, st(1); ret; 
0x0000000013f1b6: fucomip st, st(0); adc al, 0x63; add eax, [rax]; mov rdi, r12; call rbx; 
0x000000000f0e09: fucomip st, st(0); and [rdi-0x76befffd], edx; ret; 
0x00000000173a40: fucomip st, st(0); fisubr st, dword ptr [rsp+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x00000000111329: fucomip st, st(0); jo short 0x000000000011131f; call qword ptr [rax+0x1b8]; 
0x000000001668e8: fucomip st, st(0); mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x000000000a5028: fucomip st, st(0); push rdx; ret; 
0x0000000008bfcf: fucomip st, st(0); ret far; 
0x000000000814f9: fucomip st, st(0); ret; 
0x0000000003d7bc: fucomip st, st(0); scasb [rdi]; ret far; 
0x000000000424a9: fucomip st, st(1); mov eax, [0x59058b4890000002]; imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x000000001b99fc: fucomip st, st(1); pushfq; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000096a57: fucomp st, st(3); and byte ptr [rsi+0xf], 0x1f; add [rax], r8b; mov eax, 0xba; syscall; 
0x000000000b586e: fucompp; ret; 
0x0000000002b9c6: fwait; adc al, 0x0; mov rdi, rbx; call rbp; 
0x000000000ab060: fwait; add [rax], al; cmove rax, rdx; ret; 
0x000000000c2e35: fwait; add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000016cb87: fwait; cld; jmp qword ptr [rsi+0xf]; 
0x0000000007f552: fwait; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000011b179: fwait; fmul st, qword ptr [rdi]; add [rax+0x2e740038], al; mov eax, 0x72; syscall; 
0x00000000074899: fwait; in eax, 0xff; jmp far fword ptr [rax-0x2b7bf0f0]; 
0x00000000081662: fwait; jl short 0x000000000008165f; jmp qword ptr [rsi+0x2e]; 
0x00000000150332: fwait; out dx, al; jmp qword ptr [rsi+0x66]; 
0x000000001b4ce5: fwait; ret; 
0x0000000008e802: fwait; stc; jmp qword ptr [rsi+0xf]; 
0x00000000041308: fxam; fnstsw ax; fstp st(0), st; and eax, 0x200; ret; 
0x000000000da985: fxtract; dec dword ptr [rax-0x77]; ret; 
0x0000000006ad61: hint-not-taken ja short 0x000000000006ad84; lea rcx, [rip+0x1661f1]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000007dd4c: hint-not-taken ja short 0x000000000007dd6b; lea rdi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000f416c: hint-not-taken je short 0x00000000000f41b0; mov byte ptr [rax+0x8], 0x1; mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x00000000144826: hint-not-taken je short 0x0000000000144830; pop rbx; ret; 
0x000000000c41dc: hlt; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000197409: hlt; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000a01d5: hlt; add [rax], al; add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x000000001843c7: hlt; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000198309: hlt; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000011f4cc: hlt; call far fword ptr [rax+0x4c]; 
0x0000000011bfed: hlt; call qword ptr [rax+0x19058b48]; 
0x0000000008b284: hlt; call qword ptr [rax+0x40]; 
0x00000000134c38: hlt; call qword ptr [rax-0x18]; 
0x0000000014473d: hlt; call qword ptr [rax-0x3fce2dcf]; 
0x0000000011bf6d: hlt; call qword ptr [rax-0x5e1f00d]; 
0x0000000016729c: hlt; cld; call qword ptr [rax-0x5e1f00d]; 
0x000000001a6731: hlt; cmp eax, [rsi-0xc]; jne 0x00000000001a6850; ret; 
0x000000000b1273: hlt; cmp ecx, esi; je short 0x00000000000b1268; ret; 
0x000000000da986: hlt; dec dword ptr [rax-0x77]; ret; 
0x0000000011ef77: hlt; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000007b848: hlt; idiv edi; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x0000000017c15c: hlt; jb short 0x000000000017c167; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c20c: hlt; jb short 0x000000000017c217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eb3c: hlt; jb short 0x000000000017eb47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ebec: hlt; jb short 0x000000000017ebf7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000000ed8e4: hlt; jmp qword ptr [rsi+0x2e]; 
0x000000000e60a0: hlt; jmp qword ptr [rsi+0xf]; 
0x0000000014adb4: hlt; jmp qword ptr [rsi+0xf]; 
0x0000000015222c: hlt; jmp qword ptr [rsi-0x70]; 
0x000000001a6734: hlt; jne 0x00000000001a6850; ret; 
0x000000001092ed: hlt; jne short 0x00000000001092e0; mov eax, [rdx+0x8]; ret; 
0x000000000b15aa: hlt; mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13fa: hlt; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14c2: hlt; mov [rax+0x4], dl; ret; 
0x0000000018219a: hlt; mov [rdi-0x4], ecx; ret; 
0x0000000017ce1d: hlt; mov [rdi-0x4], edx; ret; 
0x000000000eac9c: hlt; mov eax, esi; syscall; 
0x00000000182193: hlt; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cf92: hlt; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000198a8b: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000001a5d42: hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000005f728: hlt; outsd dx, [rsi]; or eax, 0x9235e900; cld; jmp qword ptr [rsi+0x2e]; 
0x000000000a4168: hlt; ret far; 
0x000000000b123b: hlt; ret; 
0x000000001a5d47: hlt; sub eax, edx; ret; 
0x0000000002bdd8: hlt; xchg esi, eax; adc al, 0x0; mov rdi, rbx; call r14; 
0x00000000127a00: idiv bh; add rsp, 0x10; mov rax, r12; pop r12; ret; 
0x000000000de14c: idiv bh; call qword ptr [rax+0x2454894c]; 
0x00000000078b8c: idiv bh; call qword ptr [rax+0xf08c5f6]; 
0x00000000075d6c: idiv bh; call qword ptr [rax-0x5e1f00d]; 
0x00000000076197: idiv bh; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x00000000078146: idiv bh; dec dword ptr [rax-0x77]; mov ch, 0xf0; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000079105: idiv bh; dec dword ptr [rax-0x77]; ret; 
0x00000000072c11: idiv bh; dec dword ptr [rax-0x77]; test eax, edx; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000dc2db: idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x000000000fd51d: idiv bh; dec dword ptr [rbp-0x75]; push rsi; or [rbx-0x78f0fe08], al; ret far; 
0x0000000015f664: idiv bh; inc dword ptr [rbp+0x481d74c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000098e09: idiv bh; jmp qword ptr [rax+rcx*2-0x39]; 
0x00000000072c18: idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000003be51: idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000150ce2: idiv bh; jmp qword ptr [rsi+0x66]; 
0x000000000524bf: idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000005f01b: idiv bh; jmp qword ptr [rsi-0x70]; 
0x0000000011c301: idiv bh; mov eax, 0x1; add rsp, 0x8; ret; 
0x00000000127ef2: idiv bh; mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000125d2a: idiv bh; mov eax, [rsp+0x4]; add rsp, 0x20; pop r12; ret; 
0x00000000127faa: idiv bh; mov eax, [rsp+0x4]; add rsp, 0x28; ret; 
0x000000001262bd: idiv bh; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000125df9: idiv bh; mov eax, [rsp+0x8]; add rsp, 0x20; pop r12; ret; 
0x00000000125ff0: idiv bh; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x000000001bb259: idiv bh; mov qword ptr [rip+0x5f822], 0x0; add rsp, 0x8; ret; 
0x0000000011d797: idiv bh; mov r8d, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x000000001260a1: idiv bh; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000126218: idiv bh; mov rax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x0000000012837e: idiv bh; mov rax, [rsp+0x8]; add rsp, 0x38; ret; 
0x00000000127880: idiv bh; mov rax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x00000000126150: idiv bh; mov rax, [rsp]; add rsp, 0x28; ret; 
0x00000000127946: idiv bh; mov rax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x000000001bb204: idiv bh; nop [rax+rax]; ret; 
0x00000000125a82: idiv bh; nop [rax]; mov dword ptr [rip+0xfba2e], 0x0; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x000000001bb6e3: idiv bh; pop rbx; mov qword ptr [rip+0x5f7cf], 0x0; ret; 
0x00000000115225: idiv byte ptr [rax+0x125]; syscall; 
0x000000000968d3: idiv byte ptr [rax+0xea]; syscall; 
0x0000000008c963: idiv byte ptr [rcx+0x3]; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000eabb3: idiv byte ptr [rdi+0x1200011]; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000012e5f7: idiv byte ptr [rdi+0x2000004]; call rax; 
0x000000000969f5: idiv byte ptr [rdi+0x2]; mov eax, 0xe; syscall; 
0x000000001283fa: idiv byte ptr [rdi+0x7]; mov edx, 0x0; jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x00000000085e48: idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008add8: idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000085c5a: idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f096: idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008c18b: idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000002d0ba: idiv byte ptr [rdx-0x1]; cmovs eax, edx; ret; 
0x00000000075d6b: idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x00000000093e75: idiv dword ptr [rax+0xca]; xor sil, 0x81; syscall; 
0x00000000095cc5: idiv dword ptr [rdx-0x3fce0001]; add rsp, 0x8; ret; 
0x000000000b1810: idiv edi; add rsp, 0x8; ret; 
0x00000000073fa8: idiv edi; call far fword ptr [rax+0x44]; 
0x000000000effec: idiv edi; call qword ptr [rax+0x20858948]; 
0x000000000de04c: idiv edi; call qword ptr [rax+0x2454894c]; 
0x000000000f35ac: idiv edi; call qword ptr [rax+0x27d80]; 
0x00000000156ccc: idiv edi; call qword ptr [rax+0x513d8d48]; 
0x0000000003cbbc: idiv edi; call qword ptr [rax+0x7880c931]; 
0x00000000073d1a: idiv edi; call qword ptr [rax]; 
0x0000000007b849: idiv edi; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x000000000e16e2: idiv edi; dec dword ptr [rax+0x1]; ret; 
0x000000000788c9: idiv edi; dec dword ptr [rax-0x75]; and byte ptr [rax+0x48000000], 0x85; ror byte ptr [rdi], 0x84; ret far; 
0x00000000079456: idiv edi; dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r12+0x38]; 
0x00000000079744: idiv edi; dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r13+0x38]; 
0x000000001b99ad: idiv edi; dec dword ptr [rbp-0x76b23fb6]; ret far; 
0x00000000072d74: idiv edi; dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000000782ec: idiv edi; dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2ae: idiv edi; dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000079617: idiv edi; dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x00000000073c46: idiv edi; dec dword ptr [rcx+rcx*4-0x3e]; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000074dd9: idiv edi; dec dword ptr [rdi]; adc esi, 0xe9fffff9; loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000079ef0: idiv edi; dec dword ptr [rdi]; cmp dword ptr [rbp-0x5], 0x84e9ffff; in al, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000079fa6: idiv edi; inc dword ptr [rbp-0x1677f040]; jrcxz 0x0000000000079faf; inc dword ptr [rcx]; ret; 
0x000000001289ab: idiv edi; inc dword ptr [rcx+rcx*4-0x30]; syscall; 
0x000000000c9b75: idiv edi; inc dword ptr [rcx-0x73]; ret far; 
0x00000000072d7a: idiv edi; jmp far fword ptr [rcx]; 
0x0000000010e843: idiv edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000073d96: idiv edi; jmp qword ptr [rax]; 
0x0000000012873d: idiv edi; jmp qword ptr [rdi+0x6d]; 
0x00000000045373: idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000d783e: idiv edi; jmp qword ptr [rsi+0x66]; 
0x00000000049baf: idiv edi; jmp qword ptr [rsi+0xf]; 
0x00000000076ffb: idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000074d44: idiv edi; jmp qword ptr [rsi-0x77]; 
0x00000000119922: idiv edi; mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000118d91: idiv edi; mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000011514d: idiv edi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000001152e4: idiv edi; mov eax, [rsp]; add rsp, 0x18; ret; 
0x0000000011512b: idiv edi; mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x3; syscall; 
0x0000000011ba4b: idiv edi; mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000011bb0b: idiv edi; mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4b; syscall; 
0x000000001149df: idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001193d8: idiv edi; mov rax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x00000000112951: idiv edi; mov rax, [rsp]; add rsp, 0x28; ret; 
0x00000000038ec2: idiv esi; dec dword ptr [rax-0x77]; ret; 
0x0000000009a002: idiv esi; jmp qword ptr [rsi+0x66]; 
0x00000000045e2a: idiv esi; ret; 
0x00000000166ffc: idiv esp; call qword ptr [rax-0x5e1f00d]; 
0x0000000009a001: idiv r14; jmp qword ptr [rsi+0x66]; 
0x00000000157a81: idiv r15; jmp qword ptr [rsi+0x66]; 
0x0000000011bb2c: idiv r15; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000011bb0a: idiv r15; mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4b; syscall; 
0x000000000c8a86: idiv r15b; jmp qword ptr [rsi+0xf]; 
0x0000000014fb6a: idiv r15d; jmp qword ptr [rsi-0x70]; 
0x000000000788c8: idiv rdi; dec dword ptr [rax-0x75]; and byte ptr [rax+0x48000000], 0x85; ror byte ptr [rdi], 0x84; ret far; 
0x00000000079455: idiv rdi; dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r12+0x38]; 
0x00000000079743: idiv rdi; dec dword ptr [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x2]; call qword ptr [r13+0x38]; 
0x000000000782eb: idiv rdi; dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2ad: idiv rdi; dec dword ptr [rcx+rcx*4-0x16]; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000079616: idiv rdi; dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x00000000072d79: idiv rdi; jmp far fword ptr [rcx]; 
0x000000001b81ba: idiv rdi; jmp qword ptr [rsi-0x70]; 
0x00000000045e29: idiv rsi; ret; 
0x000000000f034b: imul al; jmp qword ptr [rax-0x3]; 
0x000000000ea6e1: imul al; mov ecx, 0x85ffffb0; shl byte ptr [rbp+0x5], 0x48; add esp, 0x8; ret; 
0x0000000015690c: imul al; mov esi, 0x89fffc2d; ret; 
0x0000000011d08a: imul al; nop; ret; 
0x0000000002a47b: imul al; syscall; 
0x000000001600da: imul bl; shr eax, cl; std; jmp qword ptr [rsi+0x66]; 
0x00000000148e09: imul ch; dec dword ptr [rax-0x77]; ret; 
0x00000000045c6f: imul cl; imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000d59b6: imul cl; ret far; 
0x0000000009cda3: imul eax, 0xc7640017; add [rbx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000118da3: imul eax, [rax], 0xd8f70010; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000b4777: imul eax, [rcx], 0x894d0000; ret far; 
0x000000000b4177: imul eax, [rdi], 0x894d0000; ret far; 
0x000000000740e3: imul eax, [rdx], 0x83410000; in al, dx; add [rax-0x8cb43], eax; jmp qword ptr [rax]; 
0x000000001a421e: imul eax, [rip+0x487c5162], 0x62067111; push rcx; jl short 0x00000000001a4273; adc [rcx+0x7], edi; ret; 
0x0000000013ff01: imul eax, [rsi+rbp*8-0xf01601], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000017c3d6: imul eax, [rsi], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d8: imul eax, [rsi], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001bbc1f: imul eax, [rsi], 0xc749e800; out 0xff, al; mov qword ptr [rip+0x66956], 0x0; pop rbx; ret; 
0x0000000009165a: imul eax, ecx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000043800: imul eax, edi; lea r12, [rcx+rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000f4124: imul eax, esi, 0x40; or [rcx], al; mov eax, 0x1; ret; 
0x000000000c54c1: imul eax, esp, 0xd; add [rax-0x73], cl; add eax, 0x11a34; cmove rax, rdx; ret; 
0x000000000a23ba: imul eax; cmp al, 0xff; dec dword ptr [rax-0x77]; ret; 
0x000000000e90cd: imul eax; popfq; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000074eb7: imul eax; ret; 
0x0000000002b8b0: imul eax; sbb bl, [rsp+rdx-0x2076b800]; call r14; 
0x0000000013fd27: imul eax; shr dword ptr [rdi-0x1], cl; call far fword ptr [rdx+0x59]; 
0x0000000010baf5: imul eax; xchg ebp, eax; ret far; 
0x000000000ff393: imul eax; xchg edi, eax; jp short 0x00000000000ff397; jmp far fword ptr [rax+0x6850f01]; 
0x0000000016d121: imul ebp, [rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000089803: imul ebp, ebx, 0xc031fff9; pop rbp; ret; 
0x0000000011a4a3: imul ebp, ecx, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012e394: imul ebx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010fc51: imul ebx, [rdi+0xc], 0x0; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000042484: imul ebx, [rip+0x2896400], 0xffffffb8; call far fword ptr [rbp-0x3d]; 
0x000000000424b4: imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042444: imul ebx, [rip+0xc76400], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000ec4a9: imul ecx, 0x12; add [rax+0x2e740038], al; mov eax, 0x75; syscall; 
0x00000000165c5a: imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x0000000012e2f4: imul ecx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000003b10f: imul ecx, [rbx+0x1dfbd205], 0x3d8b4c00; ret; 
0x0000000011aa3e: imul ecx, [rbx+rcx*4+0x65], 0xe0894c00; pop rbx; pop rbp; pop r12; ret; 
0x0000000017a1e7: imul ecx, [rbx], 0x894d0000; ret far; 
0x00000000194227: imul ecx, [rcx], 0x894d0000; ret far; 
0x00000000113ea3: imul ecx, [rdi+0x10], 0xc76400; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000a9da9: imul ecx, [rdi], 0x0; cmove rax, rdx; ret; 
0x000000000a9da2: imul ecx, [rdi], 0x0; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x0000000012222b: imul ecx, [rdi], 0x0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000a8474: imul ecx, [rdi], 0xc6f700; add al, 0x0; add [rbp-0x4b], dh; ret; 
0x00000000122484: imul ecx, [rdi], 0xc76400; add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x000000000dbdfe: imul ecx, [rdi], 0xffff3e85; jmp qword ptr [rsi-0x7f]; 
0x000000000b3e77: imul ecx, [rdx], 0x894d0000; ret far; 
0x00000000162cb3: imul ecx, [rsi+0x7], 0x48f28900; movsxd edx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000a9d41: imul ecx, ebx, 0xf; add [rax-0x73], cl; add eax, 0xfcbf4; cmove rax, rdx; ret; 
0x0000000015a361: imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x000000000d0028: imul ecx; imul edi, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000099f63: imul edi, 0xffffffff; call rbx; 
0x000000000b1bd1: imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x0000000003ae33: imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000d002a: imul edi, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000075611: imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000ed1a3: imul edi, [rdx+rdx+0x38836400], 0xc0940f26; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x000000001a40b7: imul edi, ebp, 0x487c5162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e7d: imul edi, ebp, 0x487cd162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x00000000045c71: imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000436cc: imul edi, ebx; add r15, [rsp]; mov rsi, r15; call r14; 
0x000000000f7bf6: imul edi, esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000009fda3: imul edx, [rax-0x389bffe9], 0x1600; add [rax-0x1], bh; ret; 
0x0000000012e344: imul edx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000b3877: imul edx, [rax], 0x894d0000; ret far; 
0x000000000b3577: imul edx, [rbx], 0x894d0000; ret far; 
0x000000000b3277: imul edx, [rsi], 0x894d0000; ret far; 
0x00000000161691: imul esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000db853: imul esi, eax, 0x14e80013; ret far; 
0x000000000738fb: imul esi, ebp, 0xffffffff; inc dword ptr [rcx]; ret; 
0x0000000019db16: imul esi, ebx, 0xc5c0bc0f; clc; ja short 0x000000000019dae2; xor eax, eax; ret; 
0x0000000014a667: imul esi; jmp qword ptr [rsi+0xf]; 
0x0000000008f0e9: imul esp, [rax+0x5b], 0x5d; pop r12; ret; 
0x00000000187c74: imul esp, [rbx], 0x894d0000; ret far; 
0x000000000427a3: imul esp, [rsi+0x1d], 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005d596: imul esp, edi, 0xc2e9ffff; mov bl, 0xfc; call qword ptr [rax-0x5e1f00d]; 
0x000000000ea6a3: imul esp, edi, 0xd8f70012; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000436cb: imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x00000000091659: imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x000000000437ff: imul rax, rdi; lea r12, [rcx+rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000001a6768: in al, 0x0; add [rax], al; ret; 
0x000000000e56f1: in al, 0x0; add [rax], al; syscall; 
0x00000000155c24: in al, 0x1b; or eax, 0x1f88300; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x00000000161f18: in al, 0x31; sti; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000149abf: in al, 0x44; mov eax, edx; ret; 
0x0000000015fc86: in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000012841f: in al, 0x48; mov eax, [rip+0xf09e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090e28: in al, 0x4; add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x000000000f7abc: in al, 0x4a; movsxd eax, [rcx]; add rax, rcx; notrack jmp rax; 
0x000000000f7a08: in al, 0x4a; movsxd eax, [rdx]; add rax, rdx; notrack jmp rax; 
0x0000000017ce16: in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x000000000d8d42: in al, 0x4c; mov eax, esp; pop r12; ret; 
0x00000000072331: in al, 0x4c; mov edx, esp; call qword ptr [r13+0x38]; 
0x0000000003aa15: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000d8d29: in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000090101: in al, 0x66; nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x360]; 
0x000000000c06a8: in al, 0x6; add [rax], al; ret; 
0x000000000e6c25: in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x0000000016c017: in al, 0x74; mov [0xe80c244489e7894c], al; ret; 
0x00000000120c39: in al, 0x75; and al, 0x48; mov edi, [rbp]; call rbx; 
0x000000001213bd: in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret; 
0x0000000011fe10: in al, 0x75; mov rdi, [rbp]; call rbx; 
0x000000001357c2: in al, 0x75; or ebx, [rbx+0x5d]; pop r12; ret; 
0x000000000d8116: in al, 0x75; test al, 0xf0; jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x0000000011c928: in al, 0xba; lock dec dword ptr [rax+0x1]; ret; 
0x00000000167731: in al, 0xbe; or [rax], eax; add [rax], al; call qword ptr [rax]; 
0x000000000f65b8: in al, 0xe3; or eax, 0x4634a00; xchg edx, eax; add rax, rdx; notrack jmp rax; 
0x00000000096616: in al, 0xe8; movsb [rdi], [rsi]; mov cl, 0xff; call qword ptr [rax+0x24448b48]; 
0x0000000008fdb6: in al, 0xe9; ret far; 
0x000000001269f9: in al, 0xf0; mov rdi, r8; call rdx; 
0x00000000182179: in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x000000000a989a: in al, 0xf; add [rax-0x73], cl; add eax, 0xfe4dc; cmove rax, rdx; ret; 
0x0000000011a948: in al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011a914: in al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d80cd: in al, 0xf; test [rax+rax-0xf580000], ebp; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x0000000017831b: in al, 0xfb; jmp qword ptr [rsi-0x70]; 
0x0000000006c70c: in al, 0xff; call qword ptr [rax-0x5f7a74b8]; 
0x00000000076ebd: in al, 0xff; dec dword ptr [rdi]; mov dh, 0x79; add [rax-0x7d], ecx; ret; 
0x00000000079efb: in al, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000000740e9: in al, dx; add [rax-0x8cb43], eax; jmp qword ptr [rax]; 
0x000000000792fe: in al, dx; add [rax-0x8eb43], eax; jmp qword ptr [rax]; 
0x000000001b0100: in al, dx; add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x0000000004f9ce: in al, dx; add [rcx+0x29], ecx; ret far; 
0x0000000004f3df: in al, dx; add [rcx+0xf], eax; mov esi, 0x89412404; ret; 
0x000000000388f2: in al, dx; add al, [rax]; add [rcx-0x1a743], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000a0130: in al, dx; add byte ptr [rcx+rcx*4-0x20], 0x5d; pop r12; pop r13; ret; 
0x00000000144630: in al, dx; and bh, bh; jmp qword ptr [rsi+0x2e]; 
0x0000000015da5d: in al, dx; call qword ptr [rax+0x2e66c35d]; 
0x00000000164eab: in al, dx; dec dword ptr [rax-0x75]; and al, 0x48; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015efa8: in al, dx; dec dword ptr [rax-0x75]; or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000015cde5: in al, dx; dec dword ptr [rax-0x77]; ret; 
0x00000000046ba2: in al, dx; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x00000000155b20: in al, dx; fisttp dword ptr [rax+rax], st; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x0000000003be50: in al, dx; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000165074: in al, dx; inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret; 
0x00000000071720: in al, dx; jbe short 0x000000000007173d; add [rbx-0x51f4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x00000000176ec4: in al, dx; jmp qword ptr [rsi+0x2e]; 
0x000000001606f2: in al, dx; jmp qword ptr [rsi+0x66]; 
0x000000001623c8: in al, dx; jmp qword ptr [rsi+0xf]; 
0x0000000018256f: in al, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001b4558: in al, dx; lea rax, [rdi+rax*4]; ret; 
0x000000000b15c2: in al, dx; mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14da: in al, dx; mov [rax+0x4], dx; ret; 
0x0000000017ce1a: in al, dx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000011d303: in al, dx; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000127ef0: in al, dx; mov esi, esi; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x00000000182579: in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000000906b4: in al, dx; or [rcx+0x4c], dl; mov ecx, edx; call rax; 
0x00000000155aca: in al, dx; or al, 0x0; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155ad1: in al, dx; or al, 0x0; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x0000000014a397: in al, dx; or al, 0x0; mov rax, fs:[rax]; ret; 
0x0000000008a422: in al, dx; or al, ch; addr32 loopne 0x000000000008a421; dec dword ptr [rax-0x77]; ret; 
0x00000000095cc2: in al, dx; or al, ch; idiv dword ptr [rdx-0x3fce0001]; add rsp, 0x8; ret; 
0x0000000010d2be: in al, dx; or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x000000001359eb: in al, dx; or al, ch; mov esi, 0x66fffff6; nop [rax+rax]; ret; 
0x000000001358ba: in al, dx; or al, ch; out dx, eax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000726ee: in al, dx; or al, ch; pop rbx; ja short 0x00000000000726f0; jmp qword ptr [rsi+0x66]; 
0x0000000004224e: in al, dx; or al, ch; ret far; 
0x00000000046766: in al, dx; or al, ch; ret; 
0x00000000077c2e: in al, dx; or al, ch; sbb esp, [rdx]; cld; jmp qword ptr [rsi+0x66]; 
0x0000000016c930: in al, dx; popfq; cld; jmp qword ptr [rsi+0x66]; 
0x000000000b1303: in al, dx; ret; 
0x00000000061125: in al, dx; sbb [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000353ac: in al, dx; sub [rbx+rcx*4+0x35], cl; ret far; 
0x0000000010f5e6: in al, dx; test eax, 0x61e8000c; test al, 0xf2; call qword ptr [rax+0x48247c80]; 
0x000000000a2a76: in ax, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000151c9a: in ax, dx; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000055c85: in eax, 0x0; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000e56a6: in eax, 0x0; add [rax], al; syscall; 
0x000000001a7160: in eax, 0x0; add [rax], al; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000000e561a: in eax, 0x0; add [rax], al; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000002a907: in eax, 0x1e; add [rbp+rcx*4+0x7b], cl; jmp qword ptr [rbp+rax*2-0x75]; 
0x000000000a8917: in eax, 0x2; lea rax, [rip+0xa780]; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x000000000b12ca: in eax, 0x39; enter 0xe174, 0x4c; mov eax, eax; ret; 
0x000000000a8334: in eax, 0x48; lea eax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000c5a83: in eax, 0x4; lea rdx, [rip+0xdbbb4]; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000c54bc: in eax, 0x4; lea rdx, [rip+0xdc46b]; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56ec: in eax, 0x4; lea rdx, [rip+0xdc68b]; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581c: in eax, 0x4; lea rdx, [rip+0xdcd1b]; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543c: in eax, 0x4; lea rdx, [rip+0xdce7b]; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000b163c: in eax, 0x4; lea rdx, [rip+0xe823b]; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000ab053: in eax, 0x4; lea rdx, [rip+0xee6b4]; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000a94c3: in eax, 0x4; lea rdx, [rip+0xeff74]; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a95ec: in eax, 0x4; lea rdx, [rip+0xf0a4b]; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000ab0dc: in eax, 0x4; lea rdx, [rip+0xf249b]; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2c: in eax, 0x4; lea rdx, [rip+0xf4d5b]; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876c: in eax, 0x4; lea rdx, [rip+0xf51eb]; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87ec: in eax, 0x4; lea rdx, [rip+0xf52eb]; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x0000000017cc26: in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x000000000a25c8: in eax, 0x5b; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000091842: in eax, 0x5b; ret; 
0x00000000089bf5: in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000198b7f: in eax, 0x74; ffreep st(5); std; xlat [rbx]; ret far; 
0x000000001a1a00: in eax, 0x76; ffreep st(5); std; xlat [rbx]; ret far; 
0x000000000892eb: in eax, 0x7f; cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000014d6ef: in eax, 0x8d; or [rax], al; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x00000000178327: in eax, 0xa; or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000174a2a: in eax, 0xb8; add [rax], eax; add [rax], al; ret; 
0x00000000111622: in eax, 0xc; add al, ch; mov dl, dh; jmp qword ptr [rsi+0xf]; 
0x00000000041309: in eax, 0xdf; loopne 0x00000000000412ea; fsub st, dword ptr [rip+0x200]; ret; 
0x0000000011d40a: in eax, 0xeb; ret; 
0x000000000f9dc8: in eax, 0xf2; jmp qword ptr [rsi+0xf]; 
0x000000001821f9: in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x0000000008a22f: in eax, 0xf5; stc; jmp qword ptr [rsi+0x2e]; 
0x000000000d83a3: in eax, 0xf; je short 0x00000000000d83c0; add rax, 0x2; ret; 
0x000000001781c1: in eax, 0xfb; jmp qword ptr [rsi+0x2e]; 
0x0000000005d1fb: in eax, 0xff; call qword ptr [rax+0x40bf41]; 
0x000000000773a6: in eax, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x0000000003b6d3: in eax, 0xff; inc dword ptr [rax-0x76b7bcc8]; ret; 
0x0000000007489a: in eax, 0xff; jmp far fword ptr [rax-0x2b7bf0f0]; 
0x00000000079e03: in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000a2a77: in eax, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000142bcf: in eax, dx; add [rax], al; add [rcx-0x77], al; ret far; 
0x000000000c83d6: in eax, dx; add [rcx-0x77], ecx; fiadd st, word ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x00000000184a25: in eax, dx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000011f913: in eax, dx; add ecx, ebx; ret; 
0x000000001269f6: in eax, dx; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x00000000162ee7: in eax, dx; call qword ptr [rax+0x18]; 
0x0000000016575d: in eax, dx; call qword ptr [rax-0x5e1f00d]; 
0x00000000056604: in eax, dx; cmp cx, 0x7fff; jne short 0x00000000000565ec; mov eax, 0x1; ret; 
0x0000000014b0ce: in eax, dx; dec dword ptr [rax+0x39]; ret; 
0x000000001bb8df: in eax, dx; dec dword ptr [rax-0x75]; add eax, 0x5d5e0; call qword ptr [rax+0x370]; 
0x000000001486a8: in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x00000000152752: in eax, dx; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000072e2f: in eax, dx; fadd st, dword ptr [rax]; add [rax+0x39], cl; ret; 
0x00000000155b27: in eax, dx; fisttp dword ptr [rax+rax], st; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000191e9f: in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000191fcf: in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x000000000acb2e: in eax, dx; idiv edi; jmp qword ptr [rsi+0xf]; 
0x00000000151a4b: in eax, dx; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000151f32: in eax, dx; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000148cf9: in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000175e8c: in eax, dx; jmp qword ptr [rsi-0x70]; 
0x00000000151e88: in eax, dx; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000151e87: in eax, dx; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000a78ca: in eax, dx; jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x0000000011fe42: in eax, dx; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe72: in eax, dx; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c9e: in eax, dx; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x0000000011df0f: in eax, dx; jno short 0x000000000011df11; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001825ef: in eax, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000167834: in eax, dx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167e94: in eax, dx; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000c4512: in eax, dx; lea rax, [rcx-0x1]; ret; 
0x00000000175604: in eax, dx; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000000c3ed9: in eax, dx; mov [rdi+0x10], ch; ret; 
0x000000000c3eef: in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000c3f11: in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000c3f2f: in eax, dx; mov [rdi+0x13], ch; ret; 
0x000000000c3f4f: in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000c3f75: in eax, dx; mov [rdi+0x15], ch; ret; 
0x000000000c3f91: in eax, dx; mov [rdi+0x16], ch; ret; 
0x000000000c3fb1: in eax, dx; mov [rdi+0x17], ch; ret; 
0x000000000c3fd1: in eax, dx; mov [rdi+0x18], ch; ret; 
0x000000000c3ff7: in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000c3d55: in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000c4019: in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000c4037: in eax, dx; mov [rdi+0x1b], ch; ret; 
0x000000000c4057: in eax, dx; mov [rdi+0x1c], ch; ret; 
0x000000000c4073: in eax, dx; mov [rdi+0x1d], ch; ret; 
0x000000000c4093: in eax, dx; mov [rdi+0x1e], ch; ret; 
0x000000000c40b3: in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000c40d3: in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000c40f9: in eax, dx; mov [rdi+0x21], ch; ret; 
0x000000000c3d67: in eax, dx; mov [rdi+0x2], ch; ret; 
0x000000000c3d7d: in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000c4149: in eax, dx; mov [rdi+0x40], ch; ret; 
0x000000000c3d95: in eax, dx; mov [rdi+0x4], ch; ret; 
0x000000000c3dab: in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000c3dbd: in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000c3ddb: in eax, dx; mov [rdi+0x7], ch; ret; 
0x000000000c3de7: in eax, dx; mov [rdi+0x8], ch; ret; 
0x000000000c3dfd: in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000c3e1f: in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000c3e3d: in eax, dx; mov [rdi+0xb], ch; ret; 
0x000000000c3e5d: in eax, dx; mov [rdi+0xc], ch; ret; 
0x000000000c3e7f: in eax, dx; mov [rdi+0xd], ch; ret; 
0x000000000c3e9f: in eax, dx; mov [rdi+0xe], ch; ret; 
0x000000000c3ebf: in eax, dx; mov [rdi+0xf], ch; ret; 
0x0000000017cc2a: in eax, dx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x000000000c3d41: in eax, dx; mov [rdi], ch; ret; 
0x000000001825f9: in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000000a6a97: in eax, dx; or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx]; 
0x00000000125baf: in eax, dx; pop rax; pop rdi; call rax; 
0x0000000005d37f: in eax, dx; ret far; 
0x00000000083582: in eax, dx; ret; 
0x000000001a35a9: in eax, dx; setg al; lea eax, [rax+rax-0x1]; ret; 
0x0000000015795b: in eax, dx; std; jmp qword ptr [rsi-0x70]; 
0x000000000c4662: in eax, dx; sub rax, 0x1; ret; 
0x000000000a7952: in eax, dx; xor eax, eax; ret; 
0x00000000109354: inc al; add [rax], al; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000001a2e3e: inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a319c: inc ax; jne 0x00000000001a3510; ret; 
0x000000001a36a1: inc ax; jne 0x00000000001a3603; ret; 
0x000000001a39fc: inc ax; jne 0x00000000001a3d70; ret; 
0x000000001a462b: inc bl; cmp dl, 0x1; jb short 0x00000000001a4635; mov [rdi], cl; ret; 
0x000000001b0a58: inc bl; nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x0000000011b219: inc byte ptr [rax+0x31740038]; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x0000000011b2d9: inc byte ptr [rax+0x31740038]; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x0000000015f83d: inc byte ptr [rax]; add [rax], al; mov rdi, r12; call qword ptr [rbx]; 
0x00000000126db5: inc byte ptr [rax]; add [rax], al; syscall; 
0x00000000093883: inc byte ptr [rbp+0x31]; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001201d8: inc byte ptr [rbp-0x60f0bf37]; vpand ymm1, ymm15, [rdi]; lahf; ret; 
0x000000000540e9: inc byte ptr [rbx+0x87401e1]; mov rdx, [r8+rax*8]; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x00000000054310: inc byte ptr [rbx+0x87401e7]; mov rcx, [rcx+rdx*8]; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x00000000049308: inc byte ptr [rbx-0x7bf0fe06]; ret; 
0x0000000017272b: inc byte ptr [rbx]; ja short 0x0000000000172740; cmp dx, cx; sete al; ret; 
0x00000000035dcd: inc byte ptr [rbx]; je short 0x0000000000035dd8; pop rbx; ret; 
0x000000001b3a2e: inc byte ptr [rcx]; add [rax], al; ret; 
0x00000000092b95: inc byte ptr [rcx]; ja short 0x0000000000092ba0; mov [rdi], esi; xor eax, eax; ret; 
0x0000000009b575: inc byte ptr [rcx]; ja short 0x000000000009b580; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000099de9: inc byte ptr [rcx]; je short 0x0000000000099df8; mov eax, 0x16; ret; 
0x000000000e55b5: inc byte ptr [rcx]; je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e5: inc byte ptr [rcx]; je short 0x00000000000e55f0; xor eax, eax; ret; 
0x00000000099e19: inc byte ptr [rcx]; jne short 0x0000000000099e40; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000092769: inc byte ptr [rcx]; mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x000000000892ee: inc byte ptr [rdx]; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000009b555: inc byte ptr [rdx]; ja short 0x000000000009b560; mov [rdi], esi; xor eax, eax; ret; 
0x00000000113a1a: inc byte ptr [rdx]; ja short 0x0000000000113a26; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x0000000009273a: inc byte ptr [rdx]; jbe short 0x0000000000092740; ret; 
0x00000000183947: inc byte ptr [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000b1049: inc dword ptr [r8]; mov [rdx], rcx; ret; 
0x0000000010593c: inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000192eaa: inc dword ptr [rax+rax]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000005d0be: inc dword ptr [rax-0x13b43]; jmp qword ptr [rdi+0x75]; 
0x0000000005cd58: inc dword ptr [rax-0x13b43]; jmp qword ptr [rdi-0x75]; 
0x0000000011c7b5: inc dword ptr [rax-0x72b7ffc6]; jb short 0x000000000011c7be; jne short 0x000000000011c78d; ret; 
0x0000000003b6d5: inc dword ptr [rax-0x76b7bcc8]; ret; 
0x000000000f05d0: inc dword ptr [rax-0x76b7ffc8]; ret; 
0x0000000007625f: inc dword ptr [rax-0x80]; call far fword ptr [rdx+0xf]; 
0x000000000773cb: inc dword ptr [rax-0x80]; jmp qword ptr [rdi+rcx]; 
0x00000000093a23: inc dword ptr [rax-0x80]; test byte ptr [rcx+0xcab8], 0x0; syscall; 
0x00000000099972: inc dword ptr [rax-0x80]; test byte ptr [rdi+0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000066909: inc dword ptr [rax]; add [rax], al; add cl, ch; stosd [rdi]; ret; 
0x00000000143a62: inc dword ptr [rax]; add [rax], al; add dh, al; ret; 
0x000000000cf809: inc dword ptr [rax]; add [rax], al; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x0000000014965c: inc dword ptr [rax]; add [rax], al; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149615: inc dword ptr [rax]; add [rax], al; jg short 0x0000000000149620; ret; 
0x000000000ed0c9: inc dword ptr [rax]; add [rax], al; ret; 
0x00000000126e45: inc dword ptr [rax]; add [rax], al; syscall; 
0x0000000005db80: inc dword ptr [rax]; add [rcx+0x21], cl; ret; 
0x000000000a0d3a: inc dword ptr [rax]; add [rsi+0x1], dh; ret; 
0x000000000b104a: inc dword ptr [rax]; mov [rdx], rcx; ret; 
0x00000000128b9d: inc dword ptr [rax]; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x000000001367d0: inc dword ptr [rax]; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000011d2a7: inc dword ptr [rax]; ret; 
0x0000000013489b: inc dword ptr [rbp+0x158d48c0]; or esi, [rdx-0x72b7fff9]; add eax, 0x7b264; cmove rax, rdx; ret; 
0x00000000049d22: inc dword ptr [rbp+0x1]; dec dword ptr [rax-0x7d]; ret; 
0x0000000014ed76: inc dword ptr [rbp+0x311275c0]; test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x0000000016772e: inc dword ptr [rbp+0x31]; in al, 0xbe; or [rax], eax; add [rax], al; call qword ptr [rax]; 
0x0000000010b4e9: inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x77], cl; ret; 
0x000000000910f5: inc dword ptr [rbp+0x31]; ror byte ptr [rcx-0x77], 0xca; mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000009efe4: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000011bf46: inc dword ptr [rbp+0x410579c0]; mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x000000000ea6e6: inc dword ptr [rbp+0x480575c0]; add esp, 0x8; ret; 
0x00000000127dd8: inc dword ptr [rbp+0x480b78c0]; add esp, 0x8; ret; 
0x00000000172095: inc dword ptr [rbp+0x480e78c0]; add esp, 0x8; pop rbp; pop r12; ret; 
0x00000000121c6c: inc dword ptr [rbp+0x480f74c0]; add esp, 0x8; ret; 
0x0000000015f666: inc dword ptr [rbp+0x481d74c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000016a225: inc dword ptr [rbp+0x483674c0]; mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000167152: inc dword ptr [rbp+0x487974c0]; mov eax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015e73f: inc dword ptr [rbp+0x48a374c0]; mov eax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000166ea2: inc dword ptr [rbp+0x497974c0]; mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000154e49: inc dword ptr [rbp+0x4c1078c0]; mov eax, esp; pop r12; ret; 
0x00000000154e4a: inc dword ptr [rbp+0x4c1078c0]; mov eax, esp; pop r12; ret; 
0x00000000154e4b: inc dword ptr [rbp+0x4c1078c0]; mov eax, esp; pop r12; ret; 
0x0000000007b683: inc dword ptr [rbp+0x54840fed]; or eax, [rax]; add [rbx-0x78f0d008], al; ret; 
0x00000000168fb4: inc dword ptr [rbp+0x5b0775db]; pop rbp; pop r12; ret; 
0x0000000010d5c1: inc dword ptr [rbp+0x5ba774c0]; mov eax, 0x5; pop rbp; pop r12; ret; 
0x0000000011bf85: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x00000000079fa8: inc dword ptr [rbp-0x1677f040]; jrcxz 0x0000000000079faf; inc dword ptr [rcx]; ret; 
0x00000000050d7f: inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; movzx eax, al; ret; 
0x000000001727a4: inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; ret; 
0x000000001474c1: inc dword ptr [rbp-0x507bf040]; add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x00000000075d61: inc dword ptr [rbp-0x6976f040]; add al, [rax]; add cl, ch; idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x00000000112d67: inc dword ptr [rbp-0x74f38a40]; add al, 0xeb; ret; 
0x000000000b0798: inc dword ptr [rbp-0x77]; fadd st, qword ptr [rcx-0x7d]; ret; 
0x000000001213ba: inc dword ptr [rbp-0x7b]; in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret; 
0x0000000011ddfc: inc dword ptr [rbp-0x7cc08b40]; ret; 
0x00000000128643: inc dword ptr [rbx+0x1e7702f8]; mov eax, 0x1f; syscall; 
0x000000000936ff: inc dword ptr [rbx+0x3145fce0]; rol byte ptr [rbx-0x3d76fd38], cl; mov eax, r12d; syscall; 
0x0000000011a370: inc dword ptr [rbx+0xf66fee2]; outsb dx, [rsi]; ror byte ptr [rbx-0x1e7ef7b9], 0xb4; jg short 0x000000000011a37f; jmp qword ptr [rsi+0xf]; 
0x000000000a0a71: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a0e: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09ae: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x000000000918e5: inc dword ptr [rbx-0x1f7ce940]; div dword ptr [rbp-0x4c]; pop rbx; ret; 
0x0000000009988f: inc dword ptr [rbx-0x1f7ce940]; test dword ptr [rdi], 0xfffd7384; call qword ptr [rax+0x48]; 
0x000000001136cf: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000001137fe: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x000000001136d2: inc dword ptr [rbx-0x39760031]; mov eax, 0x75; syscall; 
0x00000000113801: inc dword ptr [rbx-0x39760031]; mov eax, 0x77; syscall; 
0x00000000066595: inc dword ptr [rbx-0x78f0d006]; ret; 
0x0000000007c294: inc dword ptr [rbx-0x79f0a501]; xor al, [rip-0x76b80000]; ret far; 
0x000000000793fc: inc dword ptr [rbx-0x7a76fd40]; pop rax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000071e6b: inc dword ptr [rbx-0x7af0f408]; mov ebp, 0xf6000000; ret; 
0x000000000376db: inc dword ptr [rbx-0x80]; jl short 0x0000000000037717; jmp far fword ptr [rsi]; 
0x0000000005c994: inc dword ptr [rbx-0x9b43]; jmp qword ptr [rsi+0xf]; 
0x00000000141dd7: inc dword ptr [rbx-0xc8b0a08]; pop rbx; ret; 
0x000000000467c5: inc dword ptr [rbx]; add [rax], al; xor eax, edx; ret; 
0x00000000098877: inc dword ptr [rcx+0x39]; ret far; 
0x0000000006b63f: inc dword ptr [rcx+0x39]; ret; 
0x000000001367a2: inc dword ptr [rcx+0xe2]; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000006b649: inc dword ptr [rcx+0xf]; ret; 
0x00000000165076: inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret; 
0x00000000176023: inc dword ptr [rcx+rcx*4-0x1e]; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x0000000017605d: inc dword ptr [rcx+rcx*4-0x1e]; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000a08f9: inc dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x0000000007eda6: inc dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000001289ad: inc dword ptr [rcx+rcx*4-0x30]; syscall; 
0x00000000091bf9: inc dword ptr [rcx+rcx*4-0x38]; syscall; 
0x00000000081d11: inc dword ptr [rcx+rcx*4-0x40]; pop rbp; pop r12; ret; 
0x000000000cf8b2: inc dword ptr [rcx+rcx*4-0x40]; pop rbx; ret; 
0x00000000061fd4: inc dword ptr [rcx+rcx*4-0x40]; ret; 
0x0000000007621f: inc dword ptr [rcx-0x45]; add [rax], eax; add [rax], al; jmp rsi; 
0x00000000053a03: inc dword ptr [rcx-0x46]; or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x0000000004d5b3: inc dword ptr [rcx-0x73]; ret far; 
0x000000001b7ecc: inc dword ptr [rcx-0x73]; ret; 
0x00000000174497: inc dword ptr [rcx-0x77]; ret; 
0x000000001b8e34: inc dword ptr [rcx-0x77]; ror dword ptr [rcx-0x77], 0x1; ret; 
0x0000000006d467: inc dword ptr [rcx-0x7d]; cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000006b8a3: inc dword ptr [rcx-0x7d]; jmp qword ptr [rdi+0x77]; 
0x0000000006ad2c: inc dword ptr [rcx-0x7d]; jmp qword ptr [rdi+rcx]; 
0x0000000009991b: inc dword ptr [rcx-0x7d]; push 0xffffffffab740104; mov eax, 0x83; ret; 
0x000000000512ea: inc dword ptr [rcx-0x80]; jl short 0x0000000000051313; jmp far fword ptr [rdi]; 
0x00000000051411: inc dword ptr [rcx-0x80]; jl short 0x000000000005143a; jmp far fword ptr [rdi]; 
0x000000000ee617: inc dword ptr [rcx-0x80]; jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x000000000ee616: inc dword ptr [rcx-0x80]; jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x00000000176287: inc dword ptr [rcx-0x80]; jl short 0x0000000000176290; jmp far fword ptr [rdi]; 
0x000000001a6e7a: inc dword ptr [rcx-0xff3e]; jmp qword ptr [rdx-0x1f]; 
0x0000000016fc97: inc dword ptr [rcx]; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000e306a: inc dword ptr [rcx]; add [rax], al; add bl, ch; ret far; 
0x00000000101a44: inc dword ptr [rcx]; cmp r9b, bpl; ret far; 
0x00000000090ae5: inc dword ptr [rcx]; je short 0x0000000000090af9; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b7bf: inc dword ptr [rcx]; je short 0x000000000009b7c8; ret; 
0x000000000738fe: inc dword ptr [rcx]; ret; 
0x0000000012c6fa: inc dword ptr [rdi+0xf519715]; add [rbx+0x1a7f01fa], al; add rsp, 0x18; ret; 
0x0000000017241d: inc dword ptr [rdx-0x4]; jmp qword ptr [rsi+0x2e]; 
0x000000001b4ac7: inc dword ptr [rdx]; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad7: inc dword ptr [rdx]; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae7: inc dword ptr [rdx]; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab7: inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x000000001b53a5: inc dword ptr [rdx]; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5490: inc dword ptr [rdx]; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5435: inc dword ptr [rdx]; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e6: inc dword ptr [rdx]; lea rax, [rdi+rax+0x8]; ret; 
0x000000001426d0: inc dword ptr [rip+0xba]; add [rax+0x102], bh; cmovne eax, edx; ret; 
0x000000001a2b8b: inc eax; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dcbb: inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000c473a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000019a125: inc eax; bzhi eax, eax, edx; vzeroupper; ret; 
0x000000001149dd: inc eax; idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000c4737: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000001a2e3f: inc eax; jne 0x00000000001a2db3; ret; 
0x000000001a319d: inc eax; jne 0x00000000001a3510; ret; 
0x000000001a36a2: inc eax; jne 0x00000000001a3603; ret; 
0x000000001a39fd: inc eax; jne 0x00000000001a3d70; ret; 
0x00000000199e3f: inc eax; jne short 0x0000000000199e84; vzeroupper; ret; 
0x00000000199e74: inc eax; jne short 0x0000000000199ec0; vzeroupper; ret; 
0x000000001a149f: inc eax; jne short 0x00000000001a14e4; vzeroupper; ret; 
0x000000001a14d4: inc eax; jne short 0x00000000001a1520; vzeroupper; ret; 
0x0000000004109d: inc eax; shr eax, 0x1f; ret; 
0x0000000019a0fa: inc eax; vzeroupper; ret; 
0x000000001a7afa: inc eax; xtest; je short 0x00000000001a7b05; vzeroall; ret; 
0x00000000119490: inc ebx; mov rax, [rip+0xff977]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001270a6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x134; syscall; 
0x000000000dcdd8: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x26; syscall; 
0x0000000011d158: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x4d; syscall; 
0x00000000116246: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x57; syscall; 
0x00000000116186: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x58; syscall; 
0x00000000126f86: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x63; syscall; 
0x000000001142d8: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x8a; syscall; 
0x0000000011eda6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x95; syscall; 
0x0000000011be96: inc ebx; nop [rax+rax]; endbr64; mov eax, 0x99; syscall; 
0x00000000126d46: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xb1; syscall; 
0x00000000126ec6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xb4; syscall; 
0x00000000125c08: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xbb; syscall; 
0x00000000122266: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xc2; syscall; 
0x000000001222c6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xc3; syscall; 
0x000000001221a6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xc4; syscall; 
0x00000000122356: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xc5; syscall; 
0x00000000126da6: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xfe; syscall; 
0x000000000a74b8: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000178356: inc ebx; nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008f478: inc ebx; nop [rax+rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f4a8: inc ebx; nop [rax+rax]; endbr64; ret; 
0x000000000b1584: inc ebx; nop [rax+rax]; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1554: inc ebx; nop [rax+rax]; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x000000000c0cc3: inc ebx; nop [rax+rax]; mov [rdi], rdx; ret; 
0x00000000142cb4: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000c0d44: inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x00000000199faf: inc ebx; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000c0c82: inc ebx; nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x00000000191ab6: inc ebx; nop [rax+rax]; ret; 
0x000000000f6fe8: inc ebx; nop [rax+rax]; ret; 
0x000000001a71e9: inc ebx; nop [rax+rax]; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001afb66: inc ebx; nop [rax+rax]; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001b3e51: inc ebx; nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x000000001a6239: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x000000000e5710: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x000000001a15c4: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x00000000114aea: inc ebx; nop [rax]; endbr64; mov eax, 0x15; syscall; 
0x000000001285ba: inc ebx; nop [rax]; endbr64; mov eax, 0x43; syscall; 
0x00000000125c3a: inc ebx; nop [rax]; endbr64; mov eax, 0x7a; syscall; 
0x000000001142aa: inc ebx; nop [rax]; endbr64; mov eax, 0x89; syscall; 
0x0000000008f46a: inc ebx; nop [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000004311a: inc ebx; nop [rax]; endbr64; mov eax, [rip+0x1d60be]; ret; 
0x0000000008f48a: inc ebx; nop [rax]; endbr64; xor eax, eax; ret; 
0x000000001b3eea: inc ebx; nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001a730d: inc ebx; nop; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000001a72fd: inc ebx; nop; vmovdqu64 [rax], xmm16; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000000f703a: inc ebx; xor eax, eax; pop rbx; ret; 
0x00000000099617: inc ecx; call qword ptr [rbx]; 
0x00000000199e11: inc ecx; jne 0x0000000000199d40; vzeroupper; ret; 
0x000000001a1465: inc ecx; jne 0x00000000001a1380; vzeroupper; ret; 
0x00000000199ccb: inc ecx; jne short 0x0000000000199d43; vzeroupper; ret; 
0x000000001a130f: inc ecx; jne short 0x00000000001a1383; vzeroupper; ret; 
0x000000001a2786: inc edi; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000019d9a6: inc edi; add eax, edi; vzeroupper; ret; 
0x000000001994f5: inc edi; add rax, rdi; vzeroupper; ret; 
0x0000000013d48f: inc edi; and al, 0x40; add byte ptr [rax], 0x0; add al, ch; ret; 
0x0000000005c423: inc edi; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rsi]; 
0x0000000012573d: inc esi; add [rax], al; mov rax, r12; pop r12; ret; 
0x0000000012573b: inc esi; add [rax], al; mov rax, r12; pop r12; ret; 
0x000000001156ce: inc esi; jmp far fword ptr [r15]; 
0x000000001af22b: inc esi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c7d: inc esi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x000000001441f1: inc esi; ret; 
0x000000000c0d43: inc r11d; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000c4739: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000c4736: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000001994f4: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000001af22a: inc rsi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c7c: inc rsi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000015d646: insb [rdi], dx; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000412f1: insb [rdi], dx; and al, 0x8; fadd st, st(0); ret; 
0x0000000004124d: insb [rdi], dx; and al, 0x8; fscale; fstp st(1), st; ret; 
0x000000000411bd: insb [rdi], dx; and al, 0x8; fsubrp; ret; 
0x000000000410ce: insb [rdi], dx; and al, 0x8; ret; 
0x00000000041203: insb [rdi], dx; and al, 0xe8; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000041140: insb [rdi], dx; and al, 0xe8; ret; 
0x00000000082853: insb [rdi], dx; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000013a729: insb [rdi], dx; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000014b680: insb [rdi], dx; iretd; cmc; dec dword ptr [rax-0x77]; ret; 
0x0000000015afb0: insb [rdi], dx; mov bh, 0xfd; jmp qword ptr [rsi+0x66]; 
0x00000000162d40: insb [rdi], dx; mov eax, 0x1; ret; 
0x000000000d63a0: insb [rdi], dx; mov esi, 0x7be90010; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000089a4f: insb [rdi], dx; ret far; 
0x00000000044926: insb [rdi], dx; ret; 
0x00000000046736: insb [rdi], dx; rol dword ptr [rcx+rcx*4-0x40], 0xf; adc [rdi], eax; ret; 
0x0000000008dd93: insb [rdi], dx; ror dword ptr [rdi], 0x11; cmp [r11+0x5d], bl; pop r12; ret; 
0x0000000009e6f3: insb [rdi], dx; ror dword ptr [rdi], 0x11; or [rbx+0x1d7402f8], al; ret; 
0x000000000854eb: insb [rdi], dx; ror dword ptr [rdi], 0x11; or r9b, bpl; sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000083c58: insb [rdi], dx; ror dword ptr [rdi], 0x11; xor [rcx+0x5d5b7453], cl; pop r12; ret; 
0x0000000015fcca: insb [rdi], dx; ror dword ptr [rdi], 0x29; add al, 0x24; call qword ptr [rax+0x8]; 
0x000000000921f4: insb [rdi], dx; sbb [rax], al; pop rbx; mov eax, fs:[rax]; ret; 
0x00000000174cb0: insb [rdi], dx; sbb bh, ah; jmp qword ptr [rsi+0x66]; 
0x0000000016b8b0: insb [rdi], dx; scasb [rdi]; cld; jmp qword ptr [rsi+0x66]; 
0x0000000011e938: insb [rdi], dx; sub dl, [rax]; add [rbx+0x3f7f01f8], al; pop rbp; ret; 
0x0000000003a9ef: insd [rdi], dx; adc eax, 0x63480019; add al, 0x91; add rax, rcx; notrack jmp rax; 
0x00000000082760: insd [rdi], dx; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000dc3cf: insd [rdi], dx; fdivp st(2), st; dec dword ptr [rax+0x39]; ret; 
0x000000001515bf: insd [rdi], dx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000000a4f76: insd [rdi], dx; mov ch, 0x17; add [rax], al; jne short 0x00000000000a4f80; ret; 
0x0000000009acb2: insd [rdi], dx; or [rbp+0x31], al; jmp qword ptr [rsi+0xf]; 
0x000000001720c7: insd [rdi], dx; or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000165eaf: insd [rdi], dx; or ch, bh; jmp qword ptr [rsi+0x66]; 
0x0000000008d791: insd [rdi], dx; ror byte ptr [rax-0x77], 0x57; sbb [rax-0x77], cl; movups [rdi+0x8], xmm0; ret; 
0x00000000085ded: insd [rdi], dx; sbb [rax-0x77], cl; ret far; 
0x0000000015f980: insd [rdi], dx; std; jmp qword ptr [rsi+0x66]; 
0x000000001b78e5: iretd; add rax, rcx; notrack jmp rax; 
0x0000000017542e: iretd; call qword ptr [rbx+0x358]; 
0x000000000acf37: iretd; clc; jmp qword ptr [rsi+0xf]; 
0x0000000014b681: iretd; cmc; dec dword ptr [rax-0x77]; ret; 
0x000000000ba8c2: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x0000000008a5ca: iretd; cmp rax, rdi; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000001136d4: iretd; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x00000000113803: iretd; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x00000000199cca: iretd; inc ecx; jne short 0x0000000000199d43; vzeroupper; ret; 
0x000000001a130e: iretd; inc ecx; jne short 0x00000000001a1383; vzeroupper; ret; 
0x0000000005d5f2: iretd; ja short 0x000000000005d5d8; mov eax, r8d; ret; 
0x00000000150190: iretd; jmp qword ptr [rcx+rcx*4+0x10]; 
0x000000000710b5: iretd; jmp qword ptr [rdi+rax*8]; 
0x00000000049b8d: iretd; mov cl, 0x0; add [rbp-0x76b3d7b5], cl; loopne 0x0000000000049b1b; ret; 
0x00000000092f6e: iretd; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000b1393: iretd; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x000000000b3062: iretd; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000b139a: iretd; notrack jmp rdi; 
0x000000000931a4: iretd; or eax, 0x2; mov edx, eax; mov eax, ebp; syscall; 
0x00000000099db2: iretd; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x0000000012b3a8: iretd; out dx, eax; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000071e12: iretd; ret far; 
0x0000000008a006: iretd; ret; 
0x0000000005d8d6: iretd; sbb eax, [rax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000010b650: iretd; stc; dec dword ptr [rax-0x77]; ret; 
0x000000000eada6: iretd; sti; jmp qword ptr [rsi+0xf]; 
0x000000000a9902: iretd; str [rax-0x73]; add eax, 0xfcff4; cmove rax, rdx; ret; 
0x000000001760cb: iretd; sub cl, 0xee; xchg edi, eax; bnd jmp qword ptr [rsi+0xf]; 
0x000000001256a5: iretd; sub rsp, 0x8; call rsi; 
0x0000000011be88: iretd; verr [rdi+rax*8]; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000156d7d: iretd; xor dh, ch; jmp qword ptr [rsi+0x66]; 
0x000000000ed61e: ja 0x0000000000029a10; lea rdx, [rip+0xe6f5d]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed61d: ja 0x0000000000029a10; lea rdx, [rip+0xe6f5d]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x0000000010539e: ja 0x0000000000029a1a; movzx esi, byte ptr [rdx+0x8]; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x000000000379c6: ja 0x0000000000037b10; movsxd rcx, [rdi+r9*4]; add rcx, rdi; notrack jmp rcx; 
0x000000000519b7: ja 0x0000000000051b18; movzx esi, sil; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x0000000006256b: ja 0x0000000000062630; lea rcx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000073059: ja 0x0000000000073560; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x00000000078589: ja 0x0000000000078b30; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x0000000007d4df: ja 0x000000000007d780; lea rdx, [rip+0x154d24]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000007dda0: ja 0x000000000007e000; lea rcx, [rip+0x1546a7]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000c4908: ja 0x00000000000c4a9d; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000c5006: ja 0x00000000000c50c9; movups [rdi+rdx-0x10], xmm0; movups [rdi], xmm0; ret; 
0x000000000c52cd: ja 0x00000000000c53b0; lea rdx, [rip+0x10e2a6]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000d7da1: ja 0x00000000000d7e80; add rax, rdi; add rax, rcx; ret; 
0x000000000ed548: ja 0x00000000000ed670; lea rdx, [rip+0xe6f06]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed41e: ja 0x00000000000ed670; lea rdx, [rip+0xe6f79]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000f090f: ja 0x00000000000f0b91; lea rdx, [rip+0xe3d9c]; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000f2577: ja 0x00000000000f27da; lea rdx, [rip+0xe22a4]; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x0000000019e2f9: ja 0x000000000019e390; je short 0x000000000019e380; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019ea19: ja 0x000000000019eb70; je 0x000000000019eb60; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019ee04: ja 0x000000000019ec10; je 0x000000000019ec00; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019f099: ja 0x000000000019f130; je short 0x000000000019f120; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019faf4: ja 0x000000000019f7c0; je 0x000000000019f7b0; vzeroupper; ret; 
0x0000000019f9d0: ja 0x000000000019f8a0; je 0x000000000019f890; vzeroupper; ret; 
0x000000001a0834: ja 0x00000000001a04f0; je 0x00000000001a04e0; mov rax, rdi; vzeroupper; ret; 
0x000000001a0700: ja 0x00000000001a05d0; je 0x00000000001a05c0; vzeroupper; ret; 
0x000000001a109d: ja 0x00000000001a1149; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x000000001a695a: ja 0x00000000001a6a40; vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a68ce: ja 0x00000000001a6a4d; vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a715e: ja 0x00000000001a7249; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001aef56: ja 0x00000000001af000; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aeeca: ja 0x00000000001af00d; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001afada: ja 0x00000000001afbc9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001b0119: ja 0x00000000001b01b0; je short 0x00000000001b01a0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x000000001b0cd6: ja 0x00000000001b0930; je 0x00000000001b0920; mov rax, rdi; ret; 
0x000000001b0b90: ja 0x00000000001b0a40; je 0x00000000001b0a30; ret; 
0x000000001b1319: ja 0x00000000001b13b0; je short 0x00000000001b13a0; mov byte ptr [rdi], 0x0; ret; 
0x000000001b20c9: ja 0x00000000001b2160; je short 0x00000000001b2150; mov byte ptr [rdi], 0x0; ret; 
0x000000001b2a49: ja 0x00000000001b2ba0; je 0x00000000001b2b90; mov byte ptr [rdi], 0x0; ret; 
0x000000001b2e96: ja 0x00000000001b2c60; je 0x00000000001b2c50; mov byte ptr [rdi], 0x0; ret; 
0x000000001b3e46: ja 0x00000000001b3ad0; je 0x00000000001b3ac0; ret; 
0x000000001b3d00: ja 0x00000000001b3bb0; je 0x00000000001b3ba0; ret; 
0x000000001b412a: ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54cd: ja 0x00000000001b5287; mov eax, esi; ret; 
0x000000001b798f: ja 0x00000000001b7c00; lea r10, [rip+0x2c3e8]; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x000000001b7b2c: ja 0x00000000001b7cd6; lea r12, [rip+0x2c2b7]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x00000000032725: ja short 0x0000000000032727; add [rcx-0x77], cl; ret far; 
0x0000000003a9ea: ja short 0x000000000003aa13; lea rcx, [rip+0x19156d]; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x00000000042796: ja short 0x00000000000427a0; ret; 
0x000000000427e2: ja short 0x0000000000042830; ret; 
0x00000000046c8d: ja short 0x0000000000046ce0; ret; 
0x0000000005a34c: ja short 0x000000000005a320; mov rax, r8; ret; 
0x0000000005d5f3: ja short 0x000000000005d5d8; mov eax, r8d; ret; 
0x00000000061f31: ja short 0x0000000000061f38; ret; 
0x00000000061f64: ja short 0x0000000000061f70; ret; 
0x0000000006263f: ja short 0x000000000006266b; lea rcx, [rip+0x16e040]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006ad62: ja short 0x000000000006ad84; lea rcx, [rip+0x1661f1]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006b8b7: ja short 0x000000000006b8f9; lea rsi, [rip+0x165957]; movsxd rax, [rsi+r15*4]; add rax, rsi; notrack jmp rax; 
0x000000000726f2: ja short 0x00000000000726f0; jmp qword ptr [rsi+0x66]; 
0x0000000007d32c: ja short 0x000000000007d33c; movsxd rdi, edi; lea rax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x0000000007d3de: ja short 0x000000000007d410; movzx edx, dl; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000007dcb6: ja short 0x000000000007dcc8; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000007dd4d: ja short 0x000000000007dd6b; lea rdi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000008453c: ja short 0x0000000000084530; lea eax, [rdx+rdi]; ret; 
0x00000000087795: ja short 0x0000000000087798; add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008e94c: ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x00000000092676: ja short 0x0000000000092688; xor eax, eax; ret; 
0x00000000092870: ja short 0x0000000000092878; ret; 
0x00000000092887: ja short 0x00000000000928a1; ret; 
0x0000000009289c: ja short 0x00000000000928b6; ret; 
0x000000000928b0: ja short 0x00000000000928b8; ret; 
0x000000000928ba: ja short 0x00000000000928dc; xor eax, eax; ret; 
0x000000000928ff: ja short 0x000000000009290d; xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000092b97: ja short 0x0000000000092ba0; mov [rdi], esi; xor eax, eax; ret; 
0x00000000098ef9: ja short 0x0000000000098f10; lea rdx, [rip+0x139ced]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000099fe4: ja short 0x0000000000099ff0; ret; 
0x0000000009b557: ja short 0x000000000009b560; mov [rdi], esi; xor eax, eax; ret; 
0x0000000009b577: ja short 0x000000000009b580; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x0000000009b57a: ja short 0x000000000009b580; xor eax, eax; ret; 
0x0000000009c52b: ja short 0x000000000009c530; xor eax, eax; ret; 
0x0000000009fdd1: ja short 0x000000000009fdd8; ret; 
0x000000000a03a1: ja short 0x00000000000a03a8; ret; 
0x000000000a03e0: ja short 0x00000000000a0450; ret; 
0x000000000a04a0: ja short 0x00000000000a0508; ret; 
0x000000000a055c: ja short 0x00000000000a0568; mov eax, r8d; ret; 
0x000000000a09c2: ja short 0x00000000000a09c8; ret; 
0x000000000a0a22: ja short 0x00000000000a0a28; ret; 
0x000000000a0a85: ja short 0x00000000000a0a90; ret; 
0x000000000a0bd4: ja short 0x00000000000a0bce; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x000000000a0f47: ja short 0x00000000000a0f41; jmp qword ptr [rsi+0xf]; 
0x000000000a6fc7: ja short 0x00000000000a7020; lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9805: ja short 0x00000000000a97f7; str [rax-0x73]; add eax, 0xff0f0; cmove rax, rdx; ret; 
0x000000000ab675: ja short 0x00000000000ab650; pop rbx; pop rbp; pop r12; ret; 
0x000000000b1828: ja short 0x00000000000b1839; movsxd rdi, edi; lea rax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b1848: ja short 0x00000000000b1859; movsxd rdi, edi; lea rax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x000000000bfc97: ja short 0x00000000000bfc9b; ret; 
0x000000000bfcb3: ja short 0x00000000000bfcb9; mov [rdi], ecx; ret; 
0x000000000bfcf4: ja short 0x00000000000bfcfe; mov [rdi], rcx; ret; 
0x000000000bfd79: ja short 0x00000000000bfd8b; ret; 
0x000000000bfdcf: ja short 0x00000000000bfde5; ret; 
0x000000000bfe51: ja short 0x00000000000bfe6b; ret; 
0x000000000c0517: ja short 0x00000000000c051b; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c06d9: ja short 0x00000000000c06eb; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x000000000c075f: ja short 0x00000000000c0775; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c07e1: ja short 0x00000000000c07fb; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x000000000c0e87: ja short 0x00000000000c0ea9; sub r8, 0x10; jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x000000000c12d7: ja short 0x00000000000c12db; lea rax, [rdi+0x2]; ret; 
0x000000000c12f3: ja short 0x00000000000c12f9; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000c1344: ja short 0x00000000000c134e; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000c1429: ja short 0x00000000000c143b; lea rax, [rdi+0x10]; ret; 
0x000000000c149f: ja short 0x00000000000c14b5; lea rax, [rdi+0x14]; ret; 
0x000000000c1521: ja short 0x00000000000c153b; lea rax, [rdi+0x18]; ret; 
0x000000000c2fa7: ja short 0x00000000000c2fab; ret; 
0x000000000c2fc3: ja short 0x00000000000c2fc9; mov [rdi], ecx; ret; 
0x000000000c3004: ja short 0x00000000000c300e; mov [rdi], rcx; ret; 
0x000000000c3089: ja short 0x00000000000c309b; ret; 
0x000000000c30df: ja short 0x00000000000c30f5; ret; 
0x000000000c3161: ja short 0x00000000000c317b; ret; 
0x000000000c3a97: ja short 0x00000000000c3a9b; ret; 
0x000000000c3ab3: ja short 0x00000000000c3ab9; mov [rdi], ecx; ret; 
0x000000000c3af4: ja short 0x00000000000c3afe; mov [rdi], rcx; ret; 
0x000000000c3b79: ja short 0x00000000000c3b8b; ret; 
0x000000000c3bcf: ja short 0x00000000000c3be5; ret; 
0x000000000c3c51: ja short 0x00000000000c3c6b; ret; 
0x000000000c4a14: ja short 0x00000000000c4a90; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000c4bf4: ja short 0x00000000000c4c16; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000c50a6: ja short 0x00000000000c50c0; movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x000000000c5152: ja short 0x00000000000c5170; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x000000000d7e69: ja short 0x00000000000d7e80; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000d99f1: ja short 0x00000000000d99f8; ret; 
0x000000000d9b06: ja short 0x00000000000d9b10; ret; 
0x000000000d9cc6: ja short 0x00000000000d9cd0; ret; 
0x000000000d9de9: ja short 0x00000000000d9e33; add esp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x000000000dcdc1: ja short 0x00000000000dcdc8; ret; 
0x000000000dcdf1: ja short 0x00000000000dcdf8; ret; 
0x000000000e56b5: ja short 0x00000000000e5687; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000e576b: ja short 0x00000000000e5770; ret; 
0x000000000e575c: ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x000000000e66bd: ja short 0x00000000000e66c0; ret; 
0x000000000ea460: ja short 0x00000000000ea4c0; ret; 
0x000000000ea513: ja short 0x00000000000ea580; ret; 
0x000000000ea66d: ja short 0x00000000000ea6a0; ret; 
0x000000000eac9a: ja short 0x00000000000eacb8; hlt; mov eax, esi; syscall; 
0x000000000eada5: ja short 0x00000000000ead76; sti; jmp qword ptr [rsi+0xf]; 
0x000000000ec553: ja short 0x00000000000ec555; add [rax], al; syscall; 
0x000000000f0e19: ja short 0x00000000000f0e40; lea rsi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000f65b3: ja short 0x00000000000f6608; lea rdx, [rip+0xde3e4]; movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x00000000104c79: ja short 0x0000000000104c90; movzx edx, byte ptr [r14+0x30]; movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x00000000107551: ja short 0x000000000010756c; lea rdx, [rip+0xcde86]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x00000000108d41: ja short 0x0000000000108d48; ret; 
0x00000000108de1: ja short 0x0000000000108de8; ret; 
0x00000000108e2f: ja short 0x0000000000108e37; setne al; movzx eax, al; ret; 
0x0000000010f8f8: ja short 0x000000000010f910; movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x0000000010ffb9: ja short 0x000000000010ffcc; lea rcx, [rip+0xc5c72]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000001111f5: ja short 0x0000000000111210; movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x00000000112900: ja short 0x0000000000112960; ret; 
0x000000001129b0: ja short 0x0000000000112a10; ret; 
0x00000000112f5e: ja short 0x0000000000112fc8; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x00000000113005: ja short 0x000000000011300b; xor eax, eax; ret; 
0x00000000112fb2: ja short 0x000000000011301c; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x00000000113431: ja short 0x00000000001134ac; mov eax, [rcx]; movsxd rax, [r13+rax*4]; add rax, r13; notrack jmp rax; 
0x00000000113808: ja short 0x000000000011380a; add [rax], al; syscall; 
0x00000000113a1c: ja short 0x0000000000113a26; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x00000000113c44: ja short 0x0000000000113c50; ret; 
0x00000000113da0: ja short 0x0000000000113d6a; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000113ef3: ja short 0x0000000000113f00; xor eax, eax; ret; 
0x0000000011427b: ja short 0x0000000000114280; ret; 
0x000000001142c1: ja short 0x00000000001142c8; ret; 
0x000000001142f1: ja short 0x00000000001142f8; ret; 
0x00000000114998: ja short 0x00000000001149f0; ret; 
0x00000000114a3d: ja short 0x0000000000114a90; ret; 
0x00000000114ad1: ja short 0x0000000000114ad8; ret; 
0x00000000114b01: ja short 0x0000000000114b08; ret; 
0x0000000011511d: ja short 0x0000000000115160; ret; 
0x00000000115233: ja short 0x0000000000115240; ret; 
0x000000001152ad: ja short 0x00000000001152f0; ret; 
0x00000000118bc7: ja short 0x0000000000118bd0; mov [rsi+0x66], dx; xor eax, eax; ret; 
0x00000000118d4d: ja short 0x0000000000118da0; ret; 
0x00000000119370: ja short 0x00000000001193f0; ret; 
0x00000000119434: ja short 0x0000000000119440; ret; 
0x00000000119479: ja short 0x0000000000119480; ret; 
0x000000001198d0: ja short 0x0000000000119930; ret; 
0x00000000119980: ja short 0x00000000001199e0; ret; 
0x00000000119a21: ja short 0x0000000000119a28; ret; 
0x00000000119cde: ja short 0x0000000000119ce8; ret; 
0x00000000119d14: ja short 0x0000000000119d20; ret; 
0x00000000119d51: ja short 0x0000000000119d58; ret; 
0x0000000011a257: ja short 0x000000000011a2a8; ret; 
0x0000000011a49a: ja short 0x000000000011a4a0; ret; 
0x0000000011a4db: ja short 0x000000000011a4e0; ret; 
0x0000000011a511: ja short 0x000000000011a518; ret; 
0x0000000011ab6d: ja short 0x000000000011abc0; ret; 
0x0000000011ac0d: ja short 0x000000000011ac60; ret; 
0x0000000011acb3: ja short 0x000000000011ad18; ret; 
0x0000000011ad73: ja short 0x000000000011add8; ret; 
0x0000000011b2ea: ja short 0x000000000011b2ec; add [rax], al; syscall; 
0x0000000011ba3d: ja short 0x000000000011ba80; ret; 
0x0000000011bafd: ja short 0x000000000011bb40; ret; 
0x0000000011bbbd: ja short 0x000000000011bbc0; ret; 
0x0000000011d141: ja short 0x000000000011d148; ret; 
0x0000000011d171: ja short 0x000000000011d178; ret; 
0x0000000011d1ef: ja short 0x000000000011d1f9; ret; 
0x0000000011ebdd: ja short 0x000000000011ec00; ret; 
0x0000000011ec9d: ja short 0x000000000011ecf0; ret; 
0x000000001217c8: ja short 0x00000000001217d0; ret; 
0x00000000125bf1: ja short 0x0000000000125bf8; ret; 
0x00000000125c21: ja short 0x0000000000125c28; ret; 
0x00000000125cc6: ja short 0x0000000000125d40; ret; 
0x00000000125d96: ja short 0x0000000000125e10; ret; 
0x00000000125e59: ja short 0x0000000000125e60; ret; 
0x00000000125f24: ja short 0x0000000000125f30; ret; 
0x00000000125fa0: ja short 0x0000000000126000; ret; 
0x00000000126050: ja short 0x00000000001260b0; ret; 
0x00000000126100: ja short 0x0000000000126160; ret; 
0x000000001261b0: ja short 0x0000000000126230; ret; 
0x0000000012627d: ja short 0x00000000001262d0; ret; 
0x00000000126345: ja short 0x0000000000126378; mov r8d, eax; mov eax, r8d; ret; 
0x000000001263a9: ja short 0x00000000001263b0; ret; 
0x00000000126481: ja short 0x0000000000126488; ret; 
0x000000001264b4: ja short 0x00000000001264c0; ret; 
0x00000000126584: ja short 0x0000000000126590; ret; 
0x000000001265c4: ja short 0x00000000001265d0; ret; 
0x00000000126601: ja short 0x0000000000126608; ret; 
0x00000000126640: ja short 0x0000000000126648; ret; 
0x00000000126631: ja short 0x0000000000126660; mov eax, 0x4; syscall; 
0x0000000012669f: ja short 0x00000000001266a8; ret; 
0x00000000126690: ja short 0x00000000001266c0; mov eax, 0x5; syscall; 
0x00000000126700: ja short 0x0000000000126708; ret; 
0x000000001266f1: ja short 0x0000000000126720; mov eax, 0x6; syscall; 
0x00000000126765: ja short 0x0000000000126770; ret; 
0x00000000126756: ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x00000000126ac4: ja short 0x0000000000126ad0; ret; 
0x000000001275dd: ja short 0x0000000000127630; ret; 
0x000000001276ad: ja short 0x0000000000127700; ret; 
0x000000001277a4: ja short 0x00000000001277b0; ret; 
0x00000000127826: ja short 0x0000000000127890; ret; 
0x000000001278e0: ja short 0x0000000000127958; ret; 
0x00000000127a66: ja short 0x0000000000127ad0; ret; 
0x00000000127b1d: ja short 0x0000000000127b70; ret; 
0x00000000127bc0: ja short 0x0000000000127c40; ret; 
0x00000000127c84: ja short 0x0000000000127c90; ret; 
0x00000000127ea0: ja short 0x0000000000127f00; ret; 
0x00000000127f50: ja short 0x0000000000127fb8; ret; 
0x00000000128010: ja short 0x0000000000128070; ret; 
0x0000000012817d: ja short 0x000000000012818c; movzx edi, di; lea rax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x00000000128270: ja short 0x00000000001282d0; ret; 
0x00000000128320: ja short 0x0000000000128390; ret; 
0x000000001283d1: ja short 0x00000000001283d8; ret; 
0x00000000128411: ja short 0x0000000000128438; ret; 
0x00000000128471: ja short 0x0000000000128478; ret; 
0x00000000128564: ja short 0x0000000000128570; ret; 
0x000000001285a1: ja short 0x00000000001285a8; ret; 
0x000000001285d1: ja short 0x00000000001285d8; ret; 
0x00000000128604: ja short 0x0000000000128610; ret; 
0x00000000128648: ja short 0x0000000000128668; mov eax, 0x1f; syscall; 
0x00000000128657: ja short 0x0000000000128688; ret; 
0x000000001354e3: ja short 0x00000000001354f0; ret; 
0x000000001354d7: ja short 0x0000000000135504; xor eax, eax; syscall; 
0x0000000013669b: ja short 0x00000000001366a5; mov rax, rdi; sar rax, 0x6; ret; 
0x00000000142b56: ja short 0x0000000000142b59; ret; 
0x00000000142e8c: ja short 0x0000000000142ee0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000001526f7: ja short 0x00000000001526e7; jmp qword ptr [rsi+0xf]; 
0x0000000015df0b: ja short 0x000000000015df0d; add [rsi-0x70], ah; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015df3f: ja short 0x000000000015df89; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000015fd75: ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x0000000015fd4c: ja short 0x000000000015fd60; sub rcx, rsi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x0000000016cc76: ja short 0x000000000016cc90; mov eax, r8d; ret; 
0x0000000016ccae: ja short 0x000000000016ccc8; mov rax, r8; ret; 
0x0000000016d543: ja short 0x000000000016d55d; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000017272d: ja short 0x0000000000172740; cmp dx, cx; sete al; ret; 
0x00000000177e89: ja short 0x0000000000177e90; ret; 
0x0000000017b768: ja short 0x000000000017b770; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b805: ja short 0x000000000017b80e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001992e8: ja short 0x00000000001992ad; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000001994b2: ja short 0x0000000000199477; xor eax, eax; ret; 
0x00000000199653: ja short 0x0000000000199618; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000199b04: ja short 0x0000000000199ac9; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000199b14: ja short 0x0000000000199ad9; nop [rax+rax]; xor eax, eax; ret; 
0x0000000019d373: ja short 0x000000000019d338; xor eax, eax; vzeroupper; ret; 
0x0000000019d503: ja short 0x000000000019d4c8; xor eax, eax; vzeroupper; ret; 
0x0000000019db1d: ja short 0x000000000019dae2; xor eax, eax; ret; 
0x0000000019dcc2: ja short 0x000000000019dc87; mov rax, r8; vzeroupper; ret; 
0x0000000019dd66: ja short 0x000000000019dd2b; mov rax, r8; vzeroupper; ret; 
0x0000000019ee15: ja short 0x000000000019edda; nop [rax+rax]; vzeroupper; ret; 
0x0000000019f88a: ja short 0x000000000019f84f; nop [rax]; mov [rdi], dl; vzeroupper; ret; 
0x0000000019f894: ja short 0x000000000019f859; nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x000000001a05be: ja short 0x00000000001a0583; mov [rdi], dl; vzeroupper; ret; 
0x000000001a05c4: ja short 0x00000000001a0589; nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x000000001a0845: ja short 0x00000000001a080a; nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x000000001a0b9f: ja short 0x00000000001a0be1; vmovdqu [rdi+0x60], ymm7; vmovdqu [rdx+rdi-0x20], ymm8; vzeroupper; ret; 
0x000000001a111d: ja short 0x00000000001a1140; vmovdqu [rax], ymm0; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001a1200: ja short 0x00000000001a11c5; vmovdqu [rax], xmm0; vmovdqu [rax+rdx-0x10], xmm0; vzeroupper; ret; 
0x000000001a120e: ja short 0x00000000001a11d3; mov [rax], rdi; mov [rax+rdx-0x8], rdi; vzeroupper; ret; 
0x000000001a11f7: ja short 0x00000000001a1230; jb short 0x00000000001a11b3; mov [rax], sil; vzeroupper; ret; 
0x000000001a16b5: ja short 0x00000000001a167a; xor eax, eax; ret; 
0x000000001a1873: ja short 0x00000000001a1838; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a2332: ja short 0x00000000001a22f7; xor eax, eax; vzeroupper; ret; 
0x000000001a24d2: ja short 0x00000000001a2497; xor eax, eax; vzeroupper; ret; 
0x000000001a271b: ja short 0x00000000001a26e0; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a2984: ja short 0x00000000001a2949; xor eax, eax; ret; 
0x000000001a2b96: ja short 0x00000000001a2b5b; mov rax, r8; vzeroupper; ret; 
0x000000001a2c4a: ja short 0x00000000001a2c0f; mov rax, r8; vzeroupper; ret; 
0x000000001a4387: ja short 0x00000000001a4382; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a6c3f: ja short 0x00000000001a6c43; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a71da: ja short 0x00000000001a7240; vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a72e2: ja short 0x00000000001a7320; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000001a73d3: ja short 0x00000000001a7398; vzeroupper; ret; 
0x000000001a76f5: ja short 0x00000000001a76ba; vzeroupper; ret; 
0x000000001a7b03: ja short 0x00000000001a7ac8; vzeroupper; ret; 
0x000000001a7df2: ja short 0x00000000001a7db7; vzeroupper; ret; 
0x000000001a85e0: ja short 0x00000000001a85a5; vzeroupper; ret; 
0x000000001a89ba: ja short 0x00000000001a897f; vzeroupper; ret; 
0x000000001a8a97: ja short 0x00000000001a8a5c; vzeroupper; ret; 
0x000000001a8e14: ja short 0x00000000001a8dd9; vzeroupper; ret; 
0x000000001a8e6f: ja short 0x00000000001a8e34; vzeroupper; ret; 
0x000000001a94a9: ja short 0x00000000001a946e; vzeroupper; ret; 
0x000000001a9732: ja short 0x00000000001a96f7; vzeroupper; ret; 
0x000000001a9bb5: ja short 0x00000000001a9b7a; vzeroupper; ret; 
0x000000001aa78f: ja short 0x00000000001aa754; vzeroupper; ret; 
0x000000001aab3f: ja short 0x00000000001aab04; vzeroupper; ret; 
0x000000001aade5: ja short 0x00000000001aadaa; vzeroupper; ret; 
0x000000001ab3ff: ja short 0x00000000001ab3c4; vzeroupper; ret; 
0x000000001ab89b: ja short 0x00000000001ab860; vzeroupper; ret; 
0x000000001ac0bd: ja short 0x00000000001ac082; vzeroupper; ret; 
0x000000001ac9e0: ja short 0x00000000001ac9a5; vzeroupper; ret; 
0x000000001acb50: ja short 0x00000000001acb15; vzeroupper; ret; 
0x000000001ace63: ja short 0x00000000001ace28; vzeroupper; ret; 
0x000000001acec8: ja short 0x00000000001ace8d; vzeroupper; ret; 
0x000000001ad4a8: ja short 0x00000000001ad46d; vzeroupper; ret; 
0x000000001ad535: ja short 0x00000000001ad4fa; vzeroupper; ret; 
0x000000001add53: ja short 0x00000000001add18; vzeroupper; ret; 
0x000000001aded5: ja short 0x00000000001ade9a; vzeroupper; ret; 
0x000000001ae016: ja short 0x00000000001adfdb; vzeroupper; ret; 
0x000000001ae35a: ja short 0x00000000001ae31f; vzeroupper; ret; 
0x000000001af1f5: ja short 0x00000000001af1f9; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001afb56: ja short 0x00000000001afbc0; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001afc58: ja short 0x00000000001afc80; jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x000000001b3d50: ja short 0x00000000001b3d54; sub r8, 0x20; jb 0x00000000001b3935; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000001bb1fd: ja short 0x00000000001bb1f7; add eax, 0x3a1ae900; idiv bh; nop [rax+rax]; ret; 
0x0000000007378c: jae 0x0000000000074300; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000078d19: jae 0x00000000000799f8; mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000085b80: jae 0x0000000000085e70; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000085975: jae 0x0000000000085f50; mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000085891: jae 0x0000000000085f70; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000008ac50: jae 0x000000000008ae80; mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000008ab7c: jae 0x000000000008ae90; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008aa0b: jae 0x000000000008aec8; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008ca4e: jae 0x000000000008cb00; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000008cca3: jae 0x000000000008cdc8; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x00000000182e39: jae 0x0000000000182ee0; lea r11, [rip+0x6098a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b0b86: jae 0x00000000001b0a50; cmp r8d, 0x1; ja 0x00000000001b0a40; je 0x00000000001b0a30; ret; 
0x000000001b2f15: jae 0x00000000001b32e0; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001b3e3c: jae 0x00000000001b3ae0; cmp r8d, 0x1; ja 0x00000000001b3ad0; je 0x00000000001b3ac0; ret; 
0x000000001b3cf6: jae 0x00000000001b3bc0; cmp r8d, 0x1; ja 0x00000000001b3bb0; je 0x00000000001b3ba0; ret; 
0x00000000087469: jae 0x0000000041877668; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000087539: jae 0x0000000041877738; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000041779: jae short 0x0000000000041790; mov rax, [rip+0x1d768e]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000041aaf: jae short 0x0000000000041ac8; mov rax, [rip+0x1d7358]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004219d: jae short 0x00000000000421df; xor eax, eax; pop rbx; ret; 
0x000000000421c0: jae short 0x0000000000042202; pop rbx; ret; 
0x00000000042761: jae short 0x0000000000042764; ret; 
0x00000000042d51: jae short 0x0000000000042d54; ret; 
0x0000000004553d: jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x00000000053a17: jae short 0x0000000000053a1c; xor eax, eax; ret; 
0x00000000054ed2: jae short 0x0000000000054f1d; shr ecx, cl; mov [rdi], r9; ret; 
0x00000000054fc3: jae short 0x0000000000054fb8; mov rax, rdx; ret; 
0x0000000005a2c8: jae short 0x000000000005a2ac; mov rax, r8; ret; 
0x00000000081e37: jae short 0x0000000000081e48; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000081f81: jae short 0x0000000000081f90; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000082102: jae short 0x00000000000820ff; jmp qword ptr [rsi+0x2e]; 
0x0000000008287d: jae short 0x0000000000082890; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000829e4: jae short 0x00000000000829f8; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000084790: jae short 0x0000000000084795; mov r8d, [rax]; mov eax, r8d; ret; 
0x000000000852cf: jae short 0x00000000000852e1; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000087f92: jae short 0x0000000000087fab; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000008a07c: jae short 0x000000000008a090; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000008a0b6: jae short 0x000000000008a0c8; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000008f5e1: jae short 0x000000000008f608; movzx eax, byte ptr [rax]; ret; 
0x00000000091d27: jae short 0x0000000000091d39; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x000000000a9899: jae short 0x00000000000a987f; str [rax-0x73]; add eax, 0xfe4dc; cmove rax, rdx; ret; 
0x000000000c4c13: jae short 0x00000000000c4c20; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x000000000c6d79: jae short 0x00000000000c6d93; add [rax], eax; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000d6e7c: jae short 0x00000000000d6ec6; add eax, edi; ret; 
0x000000000ea381: jae short 0x00000000000ea384; ret; 
0x000000000ea5c1: jae short 0x00000000000ea5c4; ret; 
0x000000000ea569: jae short 0x00000000000ea5d0; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000eb101: jae short 0x00000000000eb104; ret; 
0x000000000ec115: jae short 0x00000000000ec117; add [rax], al; syscall; 
0x000000000ec121: jae short 0x00000000000ec124; ret; 
0x000000000ec351: jae short 0x00000000000ec354; ret; 
0x000000000ec381: jae short 0x00000000000ec384; ret; 
0x000000000ec3e1: jae short 0x00000000000ec3e4; ret; 
0x000000000ec411: jae short 0x00000000000ec414; ret; 
0x000000000ec441: jae short 0x00000000000ec444; ret; 
0x000000000ec471: jae short 0x00000000000ec474; ret; 
0x00000000100f98: jae short 0x0000000000100f8c; jmp qword ptr [rsi+0xf]; 
0x00000000101050: jae short 0x0000000000101044; jmp qword ptr [rsi+0xf]; 
0x00000000108bf1: jae short 0x0000000000108bf4; ret; 
0x00000000108c21: jae short 0x0000000000108c24; ret; 
0x00000000108c51: jae short 0x0000000000108c54; ret; 
0x00000000108c81: jae short 0x0000000000108c84; ret; 
0x00000000108cb1: jae short 0x0000000000108cb4; ret; 
0x00000000108ce1: jae short 0x0000000000108ce4; ret; 
0x00000000108d11: jae short 0x0000000000108d14; ret; 
0x00000000114411: jae short 0x0000000000114414; ret; 
0x00000000114441: jae short 0x0000000000114444; ret; 
0x00000000114611: jae short 0x0000000000114614; ret; 
0x00000000114641: jae short 0x0000000000114644; ret; 
0x00000000114fb1: jae short 0x0000000000114fb4; ret; 
0x000000001151a1: jae short 0x00000000001151a4; ret; 
0x000000001151d1: jae short 0x00000000001151d4; ret; 
0x00000000115201: jae short 0x0000000000115204; ret; 
0x00000000115271: jae short 0x0000000000115274; ret; 
0x00000000115331: jae short 0x0000000000115334; ret; 
0x00000000115361: jae short 0x0000000000115364; ret; 
0x00000000115c21: jae short 0x0000000000115c24; ret; 
0x00000000115c51: jae short 0x0000000000115c54; ret; 
0x00000000115c81: jae short 0x0000000000115c84; ret; 
0x00000000115cb4: jae short 0x0000000000115cb7; ret; 
0x00000000116141: jae short 0x0000000000116144; ret; 
0x00000000116174: jae short 0x0000000000116177; ret; 
0x000000001161a1: jae short 0x00000000001161a4; ret; 
0x000000001161d1: jae short 0x00000000001161d4; ret; 
0x00000000116201: jae short 0x0000000000116204; ret; 
0x00000000116234: jae short 0x0000000000116237; ret; 
0x00000000116261: jae short 0x0000000000116264; ret; 
0x00000000116291: jae short 0x0000000000116294; ret; 
0x000000001162c1: jae short 0x00000000001162c4; ret; 
0x00000000119334: jae short 0x0000000000119337; ret; 
0x00000000119811: jae short 0x0000000000119814; ret; 
0x0000000011a941: jae short 0x000000000011a944; ret; 
0x0000000011b531: jae short 0x000000000011b534; ret; 
0x0000000011b671: jae short 0x000000000011b674; ret; 
0x0000000011b9d1: jae short 0x000000000011b9d4; ret; 
0x0000000011ba01: jae short 0x000000000011ba04; ret; 
0x0000000011bac1: jae short 0x000000000011bac4; ret; 
0x0000000011bb81: jae short 0x000000000011bb84; ret; 
0x0000000011beb1: jae short 0x000000000011beb4; ret; 
0x0000000011bee1: jae short 0x000000000011bee4; ret; 
0x0000000011bf11: jae short 0x000000000011bf14; ret; 
0x0000000011ea43: jae short 0x000000000011ea46; ret; 
0x0000000011ec31: jae short 0x000000000011ec34; ret; 
0x0000000011ec61: jae short 0x000000000011ec64; ret; 
0x0000000011ed31: jae short 0x000000000011ed34; ret; 
0x0000000011ed61: jae short 0x000000000011ed64; ret; 
0x0000000011ed94: jae short 0x000000000011ed97; ret; 
0x0000000011edc1: jae short 0x000000000011edc4; ret; 
0x0000000011edf1: jae short 0x000000000011edf4; ret; 
0x0000000011ee21: jae short 0x000000000011ee24; ret; 
0x0000000011ee51: jae short 0x000000000011ee54; ret; 
0x00000000120e06: jae short 0x0000000000120e28; mov rsi, r12; mov rdi, r15; call r14; 
0x00000000122194: jae short 0x0000000000122197; ret; 
0x000000001221c1: jae short 0x00000000001221c4; ret; 
0x000000001221f1: jae short 0x00000000001221f4; ret; 
0x00000000122224: jae short 0x0000000000122227; ret; 
0x00000000122254: jae short 0x0000000000122257; ret; 
0x00000000122281: jae short 0x0000000000122284; ret; 
0x000000001222b4: jae short 0x00000000001222b7; ret; 
0x000000001222e1: jae short 0x00000000001222e4; ret; 
0x00000000122311: jae short 0x0000000000122314; ret; 
0x00000000122344: jae short 0x0000000000122347; ret; 
0x00000000122371: jae short 0x0000000000122374; ret; 
0x000000001223a4: jae short 0x00000000001223a7; ret; 
0x00000000125b11: jae short 0x0000000000125b14; ret; 
0x00000000125b41: jae short 0x0000000000125b44; ret; 
0x00000000125c51: jae short 0x0000000000125c54; ret; 
0x00000000125c81: jae short 0x0000000000125c84; ret; 
0x00000000125e91: jae short 0x0000000000125e94; ret; 
0x00000000125f61: jae short 0x0000000000125f64; ret; 
0x00000000126ba1: jae short 0x0000000000126ba4; ret; 
0x00000000126bd1: jae short 0x0000000000126bd4; ret; 
0x00000000126c11: jae short 0x0000000000126c14; ret; 
0x00000000126c41: jae short 0x0000000000126c44; ret; 
0x00000000126c71: jae short 0x0000000000126c74; ret; 
0x00000000126ca1: jae short 0x0000000000126ca4; ret; 
0x00000000126cd1: jae short 0x0000000000126cd4; ret; 
0x00000000126d01: jae short 0x0000000000126d04; ret; 
0x00000000126d34: jae short 0x0000000000126d37; ret; 
0x00000000126d61: jae short 0x0000000000126d64; ret; 
0x00000000126d94: jae short 0x0000000000126d97; ret; 
0x00000000126dc1: jae short 0x0000000000126dc4; ret; 
0x00000000126df1: jae short 0x0000000000126df4; ret; 
0x00000000126e21: jae short 0x0000000000126e24; ret; 
0x00000000126e51: jae short 0x0000000000126e54; ret; 
0x00000000126e81: jae short 0x0000000000126e84; ret; 
0x00000000126eb4: jae short 0x0000000000126eb7; ret; 
0x00000000126ee1: jae short 0x0000000000126ee4; ret; 
0x00000000126f11: jae short 0x0000000000126f14; ret; 
0x00000000126f44: jae short 0x0000000000126f47; ret; 
0x00000000126f74: jae short 0x0000000000126f77; ret; 
0x00000000126fa1: jae short 0x0000000000126fa4; ret; 
0x00000000126fd1: jae short 0x0000000000126fd4; ret; 
0x00000000127001: jae short 0x0000000000127004; ret; 
0x00000000127031: jae short 0x0000000000127034; ret; 
0x00000000127061: jae short 0x0000000000127064; ret; 
0x00000000127094: jae short 0x0000000000127097; ret; 
0x000000001270c1: jae short 0x00000000001270c4; ret; 
0x000000001270f1: jae short 0x00000000001270f4; ret; 
0x00000000127121: jae short 0x0000000000127124; ret; 
0x00000000127151: jae short 0x0000000000127154; ret; 
0x00000000127191: jae short 0x0000000000127194; ret; 
0x00000000127671: jae short 0x0000000000127674; ret; 
0x00000000127741: jae short 0x0000000000127744; ret; 
0x00000000127771: jae short 0x0000000000127774; ret; 
0x000000001277e1: jae short 0x00000000001277e4; ret; 
0x00000000127cc1: jae short 0x0000000000127cc4; ret; 
0x00000000127cf1: jae short 0x0000000000127cf4; ret; 
0x00000000127d24: jae short 0x0000000000127d27; ret; 
0x0000000012914b: jae short 0x0000000000129159; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x00000000133655: jae short 0x00000000001336cf; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm6; call rax; 
0x00000000133ba7: jae short 0x0000000000133bb8; cmp [rax+0x8], rdi; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x00000000142323: jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x00000000143110: jae short 0x000000000014311b; shl rsi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x0000000014966b: jae short 0x0000000000149620; mov byte ptr [r9], 0x0; ret; 
0x0000000015e1d6: jae short 0x000000000015e1e8; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000015e298: jae short 0x000000000015e2ba; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000015f82e: jae short 0x000000000015f840; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86c: jae short 0x000000000015f87e; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001608e9: jae short 0x000000000016090b; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000164596: jae short 0x00000000001645b0; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016cdc9: jae short 0x000000000016cdd0; xor eax, eax; ret; 
0x00000000174a29: jae short 0x0000000000174a10; mov eax, 0x1; ret; 
0x0000000017bb58: jae short 0x000000000017bb60; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbf6: jae short 0x000000000017bbfe; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000198a8a: jae short 0x0000000000198a80; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000001b3310: jae short 0x00000000001b32e0; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001bb8b5: jae short 0x00000000001bb8cb; nop [rax+rax]; call qword ptr [rbx]; 
0x0000000006b21c: jb 0x000000000006adaa; lea rcx, [rip+0x165f3f]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000c0f23: jb 0x00000000000c0370; lea r11, [rip+0x1121f0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c040e: jb 0x00000000000c0370; lea r11, [rip+0x112d05]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03ef: jb 0x00000000000c0370; lea r11, [rip+0x112d24]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e8d: jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x000000000c2773: jb 0x00000000000c1a50; lea r11, [rip+0x110b80]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1aee: jb 0x00000000000c1a50; lea r11, [rip+0x111805]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1acf: jb 0x00000000000c1a50; lea r11, [rip+0x111824]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c26dd: jb 0x00000000000c1b19; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x000000000c41d3: jb 0x00000000000c3910; lea r11, [rip+0x10f2f4]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39ae: jb 0x00000000000c3910; lea r11, [rip+0x10fb19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c398f: jb 0x00000000000c3910; lea r11, [rip+0x10fb38]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c413d: jb 0x00000000000c39d9; movdqu [rdi+0x30], xmm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x00000000128a78: jb 0x00000000001289f0; mov rsi, r9; mov edi, r12d; mov eax, r10d; syscall; 
0x0000000019dd90: jb 0x000000000019db84; mov rax, r8; vzeroupper; ret; 
0x0000000019ed20: jb 0x000000000019eb05; vmovdqu [rdi+0x60], ymm7; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x0000000019fa20: jb 0x000000000019f635; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x000000001a0750: jb 0x00000000001a0365; vmovdqu [rdi+0x60], ymm7; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x000000001a2c83: jb 0x00000000001a2a04; mov rax, r8; vzeroupper; ret; 
0x000000001b0be6: jb 0x00000000001b0785; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x000000001b2da6: jb 0x00000000001b2b35; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001b3d56: jb 0x00000000001b3935; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x00000000046d57: jb short 0x0000000000046d35; xor eax, eax; ret; 
0x00000000082885: jb short 0x00000000000828a7; mov [rcx], eax; ret; 
0x000000000829ec: jb short 0x0000000000082a0e; mov [rcx], eax; ret; 
0x0000000008979c: jb short 0x00000000000897d0; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000089bbc: jb short 0x0000000000089c00; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000090c18: jb short 0x0000000000090c23; add [rax], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000091298: jb short 0x00000000000912a3; add [rax], al; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x0000000009d42a: jb short 0x000000000009d3f4; nop [rax]; mov r12, [rbp+0x18]; mov rdi, [rbp+0x8]; call qword ptr [rbp]; 
0x000000000a8095: jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x000000000a844b: jb short 0x00000000000a844e; add [rax-0x73], cl; adc eax, 0xe1bbb; cmovne rax, rdx; ret; 
0x000000000c03d1: jb short 0x00000000000c0370; lea r11, [rip+0x112d46]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03a1: jb short 0x00000000000c0370; lea r11, [rip+0x112d76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab1: jb short 0x00000000000c1a50; lea r11, [rip+0x111846]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a81: jb short 0x00000000000c1a50; lea r11, [rip+0x111876]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1c6a: jb short 0x00000000000c1c75; add [rax], al; ret; 
0x000000000c3971: jb short 0x00000000000c3910; lea r11, [rip+0x10fb5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3941: jb short 0x00000000000c3910; lea r11, [rip+0x10fb8a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c497d: jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x000000000c4b81: jb short 0x00000000000c4ba3; movups [rdx+0x10], xmm7; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x000000000c5154: jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x000000000cf8ab: jb short 0x00000000000cf850; mov r8d, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x000000000e97e4: jb short 0x00000000000e97f9; add al, ch; xchg esp, eax; jnp short 0x00000000000e97e5; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000eced5: jb short 0x00000000000ecf20; cmp eax, eax; jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x000000001053a6: jb short 0x00000000001053b0; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x00000000108e0f: jb short 0x0000000000108e19; setne al; movzx eax, al; neg eax; ret; 
0x0000000010ffbe: jb short 0x000000000011001c; or al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000011a9e8: jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000011b183: jb short 0x000000000011b185; add [rax], al; syscall; 
0x0000000011c7bb: jb short 0x000000000011c7be; jne short 0x000000000011c78d; ret; 
0x00000000129093: jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000001294c7: jb short 0x00000000001294d1; seta al; movzx eax, al; neg eax; ret; 
0x0000000012a5f3: jb short 0x000000000012a605; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000012ae3b: jb short 0x000000000012ae4d; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000012ae9b: jb short 0x000000000012aead; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000012df4f: jb short 0x000000000012df60; mov eax, 0x1; ret; 
0x0000000015fd79: jb short 0x000000000015fd9b; ret; 
0x0000000015fd73: jb short 0x000000000015fd9d; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x000000001685d1: jb short 0x00000000001685db; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000016c5e5: jb short 0x000000000016c62f; mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c6d5: jb short 0x000000000016c71f; mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c7c5: jb short 0x000000000016c80f; mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c8b5: jb short 0x000000000016c8ff; mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000017b2ee: jb short 0x000000000017b2f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b34d: jb short 0x000000000017b35d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b39e: jb short 0x000000000017b3a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b3fb: jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b43e: jb short 0x000000000017b447; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b49d: jb short 0x000000000017b4ad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b4ee: jb short 0x000000000017b4f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b54b: jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b58e: jb short 0x000000000017b597; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b5ed: jb short 0x000000000017b5fd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b63e: jb short 0x000000000017b647; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b69b: jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b6de: jb short 0x000000000017b6e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b73d: jb short 0x000000000017b74d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b78e: jb short 0x000000000017b797; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b7eb: jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b82e: jb short 0x000000000017b837; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b88d: jb short 0x000000000017b89d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b8de: jb short 0x000000000017b8e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b93b: jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b97e: jb short 0x000000000017b987; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b9dd: jb short 0x000000000017b9ed; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ba2e: jb short 0x000000000017ba37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ba8b: jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bace: jb short 0x000000000017bad7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bb2d: jb short 0x000000000017bb3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bb7e: jb short 0x000000000017bb87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bbdb: jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bc1e: jb short 0x000000000017bc27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bc7b: jb short 0x000000000017bc90; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bcab: jb short 0x000000000017bcb3; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bcce: jb short 0x000000000017bcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bd2b: jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd46: jb short 0x000000000017bd4e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd6e: jb short 0x000000000017bd77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bdcd: jb short 0x000000000017bddd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017be1e: jb short 0x000000000017be27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017be7b: jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bebe: jb short 0x000000000017bec7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bf1d: jb short 0x000000000017bf2d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bf6e: jb short 0x000000000017bf77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bfcb: jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c00e: jb short 0x000000000017c017; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c06d: jb short 0x000000000017c07d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c0be: jb short 0x000000000017c0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c11b: jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c15e: jb short 0x000000000017c167; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c1bd: jb short 0x000000000017c1cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c20e: jb short 0x000000000017c217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c26b: jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c2ac: jb short 0x000000000017c2b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c2ae: jb short 0x000000000017c2b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c30d: jb short 0x000000000017c31d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c35c: jb short 0x000000000017c367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c35e: jb short 0x000000000017c367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c3bb: jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3fe: jb short 0x000000000017c407; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c45d: jb short 0x000000000017c46d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c4ae: jb short 0x000000000017c4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c50b: jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c54e: jb short 0x000000000017c557; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c5ad: jb short 0x000000000017c5bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c5fe: jb short 0x000000000017c607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c65b: jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017dcce: jb short 0x000000000017dcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dd2d: jb short 0x000000000017dd3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dd7e: jb short 0x000000000017dd87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dddb: jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017de1e: jb short 0x000000000017de27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017de7d: jb short 0x000000000017de8d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dece: jb short 0x000000000017ded7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017df2b: jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df6e: jb short 0x000000000017df77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dfcd: jb short 0x000000000017dfdd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e01e: jb short 0x000000000017e027; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e07b: jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e0be: jb short 0x000000000017e0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e11d: jb short 0x000000000017e12d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e16e: jb short 0x000000000017e177; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e1cb: jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e20e: jb short 0x000000000017e217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e26d: jb short 0x000000000017e27d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e2be: jb short 0x000000000017e2c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e31b: jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e35e: jb short 0x000000000017e367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e3bd: jb short 0x000000000017e3cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e40e: jb short 0x000000000017e417; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e46b: jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e4ae: jb short 0x000000000017e4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e50d: jb short 0x000000000017e51d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e55e: jb short 0x000000000017e567; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e5bb: jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5fe: jb short 0x000000000017e607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e65b: jb short 0x000000000017e670; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e6ae: jb short 0x000000000017e6b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e70b: jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e74e: jb short 0x000000000017e757; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e7ad: jb short 0x000000000017e7bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e7fe: jb short 0x000000000017e807; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e85b: jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e89e: jb short 0x000000000017e8a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e8fd: jb short 0x000000000017e90d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e94e: jb short 0x000000000017e957; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e9ab: jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9ee: jb short 0x000000000017e9f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ea4d: jb short 0x000000000017ea5d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ea9e: jb short 0x000000000017eaa7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eafb: jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eb3e: jb short 0x000000000017eb47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eb9d: jb short 0x000000000017ebad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ebee: jb short 0x000000000017ebf7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ec4b: jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec8e: jb short 0x000000000017ec97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ec8c: jb short 0x000000000017ec97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eced: jb short 0x000000000017ecfd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ed3c: jb short 0x000000000017ed47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ed3e: jb short 0x000000000017ed47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ed9b: jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017edde: jb short 0x000000000017ede7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ee3d: jb short 0x000000000017ee4d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ee8e: jb short 0x000000000017ee97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eeeb: jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ef2e: jb short 0x000000000017ef37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ef8d: jb short 0x000000000017ef9d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017efde: jb short 0x000000000017efe7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017f03b: jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x000000001919ea: jb short 0x00000000001919ee; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000199762: jb short 0x000000000019975b; rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000199f60: jb short 0x0000000000199fc0; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000019a130: jb short 0x000000000019a13b; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001a11f9: jb short 0x00000000001a11b3; mov [rax], sil; vzeroupper; ret; 
0x000000001a2d63: jb short 0x00000000001a2d60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000001a3f62: jb short 0x00000000001a3f68; mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000001a45d9: jb short 0x00000000001a45ea; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45ed: jb short 0x00000000001a45f9; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x000000001a4606: jb short 0x00000000001a4612; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x000000001a4619: jb short 0x00000000001a4621; mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x000000001a4624: jb short 0x00000000001a462e; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000001a4631: jb short 0x00000000001a4635; mov [rdi], cl; ret; 
0x000000001a6b95: jb short 0x00000000001a6b99; vmovdqu64 [rdx+0x40], zmm23; vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001a72e4: jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000001a7960: jb short 0x00000000001a79c0; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001a7b50: jb short 0x00000000001a7b5b; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001af14f: jb short 0x00000000001af153; vmovdqu64 [rdx+0x20], ymm23; vmovdqu64 [rdx], ymm24; vmovdqu64 [rcx], ymm16; ret; 
0x000000001afc5a: jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x000000001afc59: jb short 0x00000000001afc3f; mov [rax], sil; ret; 
0x000000001b4062: jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b4030: jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40e9: jb short 0x00000000001b40f4; sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40ae: jb short 0x00000000001b40f4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b539e: jb short 0x00000000001b53ad; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b53df: jb short 0x00000000001b53ad; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000001b5489: jb short 0x00000000001b5498; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b542e: jb short 0x00000000001b5498; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x00000000072db8: jbe 0x0000000000074d28; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000739cb: jbe 0x0000000000074d4f; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000074986: jbe 0x0000000000074ef0; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000076038: jbe 0x00000000000767f0; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000751b7: jbe 0x0000000000076a50; mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000761bd: jbe 0x0000000000076ba8; lea rsi, [rip-0x9da]; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007690b: jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x00000000076584: jbe 0x000000000007723d; mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000075d16: jbe 0x0000000000077251; mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756ee: jbe 0x00000000000772d1; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000075993: jbe 0x000000000007731c; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000077079: jbe 0x00000000000774d9; mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000077742: jbe 0x0000000000077828; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007944c: jbe 0x000000000007a445; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007973a: jbe 0x000000000007a44f; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000000782e2: jbe 0x000000000007a780; mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2a4: jbe 0x000000000007a960; mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x0000000007afdd: jbe 0x000000000007c0d8; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000007aaf4: jbe 0x000000000007c430; mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x0000000007bc3b: jbe 0x000000000007c710; lea rsi, [rip-0xc08]; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007c298: jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x0000000007bda5: jbe 0x000000000007cd11; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000007c4a6: jbe 0x000000000007ce37; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000007cb6a: jbe 0x000000000007d004; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007d1fd: jbe 0x000000000007d2d8; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007ebe1: jbe 0x000000000007ece0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007ed53: jbe 0x000000000007ee90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x0000000007f08f: jbe 0x000000000007f19b; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000080044: jbe 0x0000000000080100; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081752: jbe 0x0000000000081830; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000083a00: jbe 0x0000000000083b90; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x000000000841c3: jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x00000000085c53: jbe 0x0000000000086032; xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000085e41: jbe 0x000000000008603c; xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000085f35: jbe 0x0000000000086058; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000867c0: jbe 0x00000000000868a0; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000087793: jbe 0x0000000000087910; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000088fa3: jbe 0x0000000000089110; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008a7b2: jbe 0x000000000008a8e8; mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x0000000008ad05: jbe 0x000000000008aefc; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008add1: jbe 0x000000000008af06; xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008ae65: jbe 0x000000000008af10; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008b055: jbe 0x000000000008b2c0; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008b406: jbe 0x000000000008b4e0; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000008b5a2: jbe 0x000000000008b650; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000008b744: jbe 0x000000000008b900; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008ba28: jbe 0x000000000008bb58; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008bc54: jbe 0x000000000008be40; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008bf6f: jbe 0x000000000008c060; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000008ca11: jbe 0x000000000008cb10; mov edx, 0x1; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x0000000008da1b: jbe 0x000000000008daa8; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008dbf3: jbe 0x000000000008dc88; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008e152: jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000008e202: jbe 0x000000000008e410; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008e468: jbe 0x000000000008e510; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008ea31: jbe 0x000000000008eb68; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008ea30: jbe 0x000000000008eb68; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008ed12: jbe 0x000000000008ee40; xor edx, edx; xor esi, esi; mov rdi, r15; call qword ptr [rax+0x58]; 
0x000000000b497f: jbe 0x00000000000b4c20; add rax, rdi; add rax, rcx; ret; 
0x000000000d6be4: jbe 0x00000000000d6ef0; add rax, rdi; add rax, rcx; ret; 
0x00000000128a2f: jbe 0x0000000000128c89; mov rsi, r9; mov edi, r12d; mov eax, r10d; syscall; 
0x0000000013b4eb: jbe 0x000000000013b45c; xor eax, eax; pop rbx; ret; 
0x000000001b30c5: jbe 0x00000000001b32e0; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001b310a: jbe 0x00000000001b32e0; movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000003887e: jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000071721: jbe short 0x000000000007173d; add [rbx-0x51f4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000007232d: jbe short 0x0000000000072388; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000000778b9: jbe short 0x0000000000077930; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000007f222: jbe short 0x000000000007f268; mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x0000000007fb0e: jbe short 0x000000000007fb80; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000080815: jbe short 0x0000000000080848; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000080f90: jbe short 0x0000000000081010; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x000000000815c7: jbe short 0x0000000000081638; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000008180b: jbe short 0x000000000008184a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000081ca3: jbe short 0x0000000000081c9f; jmp qword ptr [rsi+0x2e]; 
0x00000000082281: jbe short 0x00000000000822c0; mov rdx, r13; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000082344: jbe short 0x0000000000082368; mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000082655: jbe short 0x0000000000082688; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000000838ee: jbe short 0x0000000000083928; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000083d47: jbe short 0x0000000000083d68; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000084463: jbe short 0x0000000000084490; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000084501: jbe short 0x0000000000084510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008563a: jbe short 0x0000000000085687; mov rax, [rsp+0x8]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000008834d: jbe short 0x00000000000883a0; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x0000000008a0ff: jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000008a2fd: jbe short 0x000000000008a358; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000008a461: jbe short 0x000000000008a4a8; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000008a51e: jbe short 0x000000000008a580; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008a5ce: jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008c0cf: jbe short 0x000000000008c108; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000008c188: jbe short 0x000000000008c1f0; xor esi, esi; mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008cdac: jbe short 0x000000000008cde0; mov rax, [rsp+0x8]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000008d7d8: jbe short 0x000000000008d838; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000008d8be: jbe short 0x000000000008d8d0; mov rax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000008dd58: jbe short 0x000000000008ddc0; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008de0e: jbe short 0x000000000008de38; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008dea5: jbe short 0x000000000008df00; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000008e07a: jbe short 0x000000000008e090; mov rax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000008e86e: jbe short 0x000000000008e8a0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008e901: jbe short 0x000000000008e920; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008efeb: jbe short 0x000000000008f050; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008f123: jbe short 0x000000000008f180; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r12+0x18]; 
0x000000000923a2: jbe short 0x0000000000092404; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x0000000009273c: jbe short 0x0000000000092740; ret; 
0x00000000092df3: jbe short 0x0000000000092e40; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x00000000095d75: jbe short 0x0000000000095d80; neg eax; ret; 
0x00000000095dc1: jbe short 0x0000000000095dd0; neg eax; ret; 
0x000000000a0cfd: jbe short 0x00000000000a0d00; ret; 
0x000000000a0d3d: jbe short 0x00000000000a0d40; ret; 
0x000000000a0ecd: jbe short 0x00000000000a0ed0; ret; 
0x000000000ab41d: jbe short 0x00000000000ab441; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000b48d7: jbe short 0x00000000000b48e4; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000000b4be6: jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf6: jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c06: jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c16: jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c03a6: jbe short 0x00000000000c03d5; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a86: jbe short 0x00000000000c1aa0; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000d6d7c: jbe short 0x00000000000d6dcd; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000d6e1e: jbe short 0x00000000000d6e6f; adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000d6e7b: jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e9b: jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6ebb: jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6edb: jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x000000000dce3b: jbe short 0x00000000000dce40; ret; 
0x000000000dd016: jbe short 0x00000000000dcfcc; hlt; dec dword ptr [rax-0x77]; ret; 
0x000000000ec435: jbe short 0x00000000000ec437; add [rax], al; syscall; 
0x00000000112f62: jbe short 0x0000000000112fc4; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x00000000112fae: jbe short 0x0000000000113010; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x00000000113967: jbe short 0x00000000001139c9; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000001139f0: jbe short 0x0000000000113a52; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000001190eb: jbe short 0x0000000000119108; cmp eax, 0xffffffa1; je short 0x00000000001190f8; neg eax; ret; 
0x000000001192fb: jbe short 0x0000000000119318; cmp eax, 0xffffffa1; je short 0x0000000000119308; neg eax; ret; 
0x0000000011d2fd: jbe short 0x000000000011d2f0; cmp dl, 0x20; je short 0x000000000011d2f0; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000011fe44: jbe short 0x000000000011fe8f; mov edi, [rsp]; call rbx; 
0x00000000120e9b: jbe short 0x0000000000120ec8; mov rsi, r12; mov rdi, r14; call r13; 
0x000000001217d4: jbe short 0x00000000001217e5; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000012841e: jbe short 0x0000000000128404; mov rax, [rip+0xf09e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000128666: jbe short 0x000000000012864a; mov rax, [rip+0xf07a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001522d6: jbe short 0x0000000000152353; out dx, al; jmp qword ptr [rsi+0xf]; 
0x0000000015235e: jbe short 0x0000000000152362; or eax, 0xc0894400; ret; 
0x0000000015f240: jbe short 0x000000000015f250; mov eax, 0x2; ret; 
0x0000000016f2a6: jbe short 0x000000000016f31c; cld; jmp qword ptr [rsi+0xf]; 
0x00000000172747: jbe short 0x0000000000172750; ret; 
0x000000001760a6: jbe short 0x00000000001760ae; cld; jmp qword ptr [rsi+0xf]; 
0x0000000017ad47: jbe short 0x000000000017ad54; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x0000000017b8b8: jbe short 0x000000000017b8c0; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000194b87: jbe short 0x0000000000194b94; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x00000000199601: jbe short 0x0000000000199660; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000199649: jbe short 0x0000000000199660; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000001a04d6: jbe short 0x00000000001a04d9; add [rax], al; vzeroupper; ret; 
0x000000001a15b4: jbe short 0x00000000001a1587; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001a1609: jbe short 0x00000000001a1622; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001a1814: jbe short 0x00000000001a1880; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001a1869: jbe short 0x00000000001a1880; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000001a369b: jbe short 0x00000000001a3665; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a36d7: jbe short 0x00000000001a36a1; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a37fe: jbe short 0x00000000001a37c8; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a3924: jbe short 0x00000000001a38ee; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a3b47: jbe short 0x00000000001a3b11; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a3c74: jbe short 0x00000000001a3c3e; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001ae5d4: jbe short 0x00000000001ae5a7; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000001ae629: jbe short 0x00000000001ae642; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000001ae869: jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae84d: jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b328c: jbe short 0x00000000001b32e0; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001b3eb3: jbe short 0x00000000001b3ed0; test eax, eax; je short 0x00000000001b3f20; tzcnt eax, eax; ret; 
0x000000001b5213: jbe short 0x00000000001b5230; test eax, eax; je short 0x00000000001b5280; tzcnt eax, eax; ret; 
0x000000001b58f9: jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b58e5: jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5f29: jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b5f13: jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b63e9: jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b63d0: jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000164ea9: je 0x0000000000029bf3; mov rax, [rsp+0x48]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000029fc8: je 0x000000000002a070; add rsp, 0x98; ret; 
0x00000000041232: je 0x0000000000041178; ret; 
0x000000000949a2: je 0x0000000000094b31; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x0000000009967f: je 0x0000000000099574; mov eax, 0x16; ret; 
0x00000000099673: je 0x00000000000995b8; xor eax, eax; ret; 
0x00000000099637: je 0x00000000000997d0; cmp eax, 0x21; je short 0x00000000000996a0; mov eax, 0x16; ret; 
0x000000000a7746: je 0x00000000000a78c0; mov rdi, [rdi+0x48]; mov rsi, r12; call rax; 
0x000000000b51b0: je 0x00000000000b5130; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x000000000ba724: je 0x00000000000ba8f0; bsr rax, rax; add rax, rdi; ret; 
0x000000000ba9b4: je 0x00000000000ba8f0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000ba7be: je 0x00000000000ba8f0; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000000bac0c: je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000d8086: je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x000000000d80a4: je 0x00000000000d7fe5; test al, 0xf0; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d86e1: je 0x00000000000d8780; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000f6fe3: je 0x00000000000f6f5d; ret; 
0x00000000101bfe: je 0x0000000000103050; lea rsi, [rip+0xd3109]; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x000000001153fe: je 0x0000000000115a74; mov [rsp+0x10], rdi; mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x0000000012162b: je 0x00000000001216d0; call rax; 
0x0000000012e5eb: je 0x000000000012e6b3; mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x0000000013b50c: je 0x000000000013b486; mov [rax+0x5], dl; pop rbx; ret; 
0x0000000015d52e: je 0x000000000015d602; mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000015d4ff: je 0x000000000015d602; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015e2de: je 0x000000000015e21f; mov rax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000015e2a7: je 0x000000000015e21f; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e9ec: je 0x000000000015e85e; mov rdi, rbx; call rax; 
0x0000000015f83b: je 0x000000000015f93f; mov rdi, r12; call qword ptr [rbx]; 
0x00000000162eed: je 0x00000000001630a0; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000163685: je 0x00000000001637b0; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001645a0: je 0x0000000000164508; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000165c63: je 0x0000000000165e00; mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000016615d: je 0x0000000000166260; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000166b44: je 0x000000000016661c; mov rax, [rsp+0x48]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000166702: je 0x0000000000166c66; mov rax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x00000000167496: je 0x00000000001673e1; mov rax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x000000001673bd: je 0x0000000000167490; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000016751a: je 0x00000000001675b0; mov rax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000016b6a2: je 0x000000000016b623; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016b792: je 0x000000000016b713; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016b882: je 0x000000000016b803; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016b972: je 0x000000000016b8f3; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000018d9c5: je 0x000000000018d570; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x00000000199470: je 0x0000000000199530; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199735: je 0x00000000001997c0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000019d775: je 0x000000000019d624; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000019dac4: je 0x000000000019d9e4; tzcnt eax, eax; vzeroupper; ret; 
0x0000000019ea1f: je 0x000000000019eb60; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019ee0a: je 0x000000000019ec00; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019fafa: je 0x000000000019f7b0; vzeroupper; ret; 
0x0000000019f9d6: je 0x000000000019f890; vzeroupper; ret; 
0x000000001a083a: je 0x00000000001a04e0; mov rax, rdi; vzeroupper; ret; 
0x000000001a0706: je 0x00000000001a05c0; vzeroupper; ret; 
0x000000001a1670: je 0x00000000001a1740; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001a2767: je 0x00000000001a2800; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001a2914: je 0x00000000001a2804; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001a2975: je 0x00000000001a2a00; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001ae6b0: je 0x00000000001ae760; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001afa54: je 0x00000000001af990; bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x000000001b0cdc: je 0x00000000001b0920; mov rax, rdi; ret; 
0x000000001b0b96: je 0x00000000001b0a30; ret; 
0x000000001b194b: je 0x00000000001b17c4; tzcnt eax, eax; add rax, rdx; ret; 
0x000000001b2389: je 0x00000000001b22a7; tzcnt eax, eax; ret; 
0x000000001b2a4f: je 0x00000000001b2b90; mov byte ptr [rdi], 0x0; ret; 
0x000000001b2e9c: je 0x00000000001b2c50; mov byte ptr [rdi], 0x0; ret; 
0x000000001b3e4c: je 0x00000000001b3ac0; ret; 
0x000000001b3d06: je 0x00000000001b3ba0; ret; 
0x000000001b4bf1: je 0x00000000001b4b07; tzcnt eax, eax; ret; 
0x000000001b5730: je 0x00000000001b5800; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b5d70: je 0x00000000001b5e20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6210: je 0x00000000001b62e0; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000000298b1: je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000029d83: je short 0x0000000000029da9; sbb [rax-0x75], cl; adc [rax-0x75], cl; and al, 0x8; call rax; 
0x00000000029e12: je short 0x0000000000029e40; mov rsi, r12; mov edi, ebp; call r15; 
0x0000000002d279: je short 0x000000000002d29f; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d839: je short 0x000000000002d85f; push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000002e043: je short 0x000000000002e069; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002e615: je short 0x000000000002e63b; push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000002ee55: je short 0x000000000002ee7b; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002f4cb: je short 0x000000000002f4f1; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x000000000301c4: je short 0x00000000000301ea; push rax; mov rdi, [rsp+0x48]; call r14; 
0x000000000311b3: je short 0x00000000000311d9; push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x000000000321c5: je short 0x00000000000321eb; push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x00000000032b7b: je short 0x0000000000032ba1; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x0000000003396e: je short 0x0000000000033994; push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x0000000003433b: je short 0x0000000000034361; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x00000000035192: je short 0x00000000000351b8; mov rdi, [rsp+0x38]; call r15; 
0x000000000352ee: je short 0x0000000000035314; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x00000000035dca: je short 0x0000000000035dd8; cmp esi, 0x3; je short 0x0000000000035dd8; pop rbx; ret; 
0x00000000035dcf: je short 0x0000000000035dd8; pop rbx; ret; 
0x00000000036b0a: je short 0x0000000000036b0e; call rax; 
0x00000000036c04: je short 0x0000000000036c08; call rdx; 
0x00000000037eff: je short 0x0000000000037f03; call rax; 
0x0000000003a882: je short 0x000000000003a889; cmp byte ptr [rdi], 0x0; jne short 0x000000000003a890; add rsp, 0x18; ret; 
0x0000000003a8c2: je short 0x000000000003a8c9; cmp byte ptr [rdi], 0x0; jne short 0x000000000003a8d0; add rsp, 0x18; ret; 
0x0000000003f340: je short 0x000000000003f34b; mov dword ptr [rax], 0x0; mov [rax+0x4], ebx; pop rbx; ret; 
0x000000000414e1: je short 0x00000000000414b4; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000042e47: je short 0x0000000000042e53; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000042e77: je short 0x0000000000042e89; mov rax, 0xfffffffe7fffffff; mov [rdi], rax; xor eax, eax; ret; 
0x0000000004315b: je short 0x0000000000043180; lea edx, [rax+0x1]; mov [rip+0x1d6082], edx; ret; 
0x00000000045f44: je short 0x0000000000045f4c; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x00000000046d6d: je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x00000000052f97: je short 0x0000000000052f9f; cmp byte ptr [rax-0x1], 0x2f; jne short 0x0000000000052f90; pop rbx; ret; 
0x000000000540ed: je short 0x00000000000540f7; mov rdx, [r8+rax*8]; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x00000000054314: je short 0x000000000005431e; mov rcx, [rcx+rdx*8]; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000000573b5: je short 0x00000000000573db; or [rbp+0x31], al; ror byte ptr [rax-0x39], cl; ret; 
0x0000000005a1b8: je short 0x000000000005a233; mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x00000000061fb1: je short 0x0000000000061fc0; mov eax, r8d; ret; 
0x00000000061f9a: je short 0x0000000000061fe0; mov eax, 0x13c; syscall; 
0x00000000061fcc: je short 0x0000000000061ff6; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000061fcd: je short 0x0000000000061ff6; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000751bf: je short 0x00000000000751e5; or [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; out dx, eax; call qword ptr [r12+0x38]; 
0x0000000007aafc: je short 0x000000000007ab22; or [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x19]; call qword ptr [rbp+0x38]; 
0x0000000007d361: je short 0x000000000007d370; lea rdx, [rip+0x1547d6]; add rax, rdx; ret; 
0x0000000007f7cb: je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f804: je short 0x000000000007f817; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000007f867: je short 0x000000000007f878; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000007f854: je short 0x000000000007f878; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000007f8ab: je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007fe60: je short 0x000000000007feb5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000081f53: je short 0x0000000000081f4f; jmp qword ptr [rsi+0x2e]; 
0x00000000083656: je short 0x00000000000836a1; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000083c00: je short 0x0000000000083c08; ret; 
0x00000000083c13: je short 0x0000000000083c5d; mov eax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000083c60: je short 0x0000000000083cbd; pop rbp; pop r12; ret; 
0x00000000083cef: je short 0x0000000000083d3a; add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000084537: je short 0x0000000000084548; cmp rcx, rsi; ja short 0x0000000000084530; lea eax, [rdx+rdi]; ret; 
0x00000000085899: je short 0x00000000000858bf; xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x00000000086d08: je short 0x0000000000086d2e; sbb [rcx+rcx*4-0x11], cl; lea r9, [rsp+0x28]; call rbp; 
0x00000000086e07: je short 0x0000000000086e2d; sbb [rcx+rcx*4-0x11], cl; lea r9, [rsp+0x28]; call rbp; 
0x000000000875aa: je short 0x00000000000875b8; mov eax, [rdi+0x70]; test eax, eax; js short 0x00000000000875b8; ret; 
0x00000000088e70: je short 0x0000000000088ec5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000089785: je short 0x0000000000089790; ret; 
0x0000000008977c: je short 0x00000000000897b0; mov eax, 0xffffffff; test edx, edx; je short 0x0000000000089790; ret; 
0x00000000089ba5: je short 0x0000000000089bb0; ret; 
0x00000000089b9c: je short 0x0000000000089bd0; mov eax, 0xffffffff; test edx, edx; je short 0x0000000000089bb0; ret; 
0x0000000008a683: je short 0x000000000008a690; pop rbx; ret; 
0x0000000008aa13: je short 0x000000000008aa39; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000008b05d: je short 0x000000000008b083; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000008dd19: je short 0x000000000008dd20; ret; 
0x0000000008e6b6: je short 0x000000000008e6c7; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x0000000008e947: je short 0x000000000008e958; cmp rcx, rsi; ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x00000000090305: je short 0x000000000009032b; or [rax-0x75], cl; jge short 0x000000000009031c; call qword ptr [r12+0x360]; 
0x00000000090329: je short 0x0000000000090336; mov rdi, r14; call qword ptr [r12+0x360]; 
0x000000000903fa: je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x000000000906b0: je short 0x00000000000906c8; sub rsp, 0x8; push rcx; mov rcx, r10; call rax; 
0x00000000090aaa: je short 0x0000000000090aad; ret; 
0x00000000090ae7: je short 0x0000000000090af9; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x00000000090b93: je short 0x0000000000090ba8; mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000090c1f: je short 0x0000000000090c28; ret; 
0x00000000090c39: je short 0x0000000000090c50; mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000090ca7: je short 0x0000000000090cb0; ret; 
0x00000000091083: je short 0x000000000009108a; cmp eax, 0xffffffb5; jne short 0x0000000000091070; neg eax; ret; 
0x0000000009129f: je short 0x00000000000912a8; ret; 
0x0000000009170d: je short 0x00000000000916e0; call rdx; 
0x000000000918f7: je short 0x0000000000091900; ret; 
0x000000000919d2: je short 0x00000000000919e0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000921c9: je short 0x00000000000921d0; xor eax, eax; ret; 
0x000000000921ea: je short 0x00000000000921f0; xor eax, eax; pop rbx; ret; 
0x00000000092693: je short 0x00000000000926a0; or eax, 0x2; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000092bb7: je short 0x0000000000092bc0; ret; 
0x00000000093011: je short 0x0000000000093029; xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000093218: je short 0x0000000000093250; xor r10d, r10d; mov rdi, r8; mov eax, r9d; syscall; 
0x00000000093291: je short 0x0000000000093296; mov [rdi+0x24], edx; nop; xor eax, eax; ret; 
0x00000000093441: je short 0x0000000000093459; xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000099640: je short 0x00000000000996a0; mov eax, 0x16; ret; 
0x00000000099921: je short 0x00000000000998ce; mov eax, 0x83; ret; 
0x00000000099b77: je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x00000000099c3e: je short 0x0000000000099c48; mov [rsi], eax; xor eax, eax; ret; 
0x00000000099deb: je short 0x0000000000099df8; mov eax, 0x16; ret; 
0x0000000009a019: je short 0x000000000009a030; push rbx; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x0000000009a048: je short 0x000000000009a050; xor eax, eax; ret; 
0x0000000009af7c: je short 0x000000000009afa0; mov eax, fs:[0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000009b7c1: je short 0x000000000009b7c8; ret; 
0x0000000009bea4: je short 0x000000000009bea7; ret; 
0x0000000009c09f: je short 0x000000000009c0b0; xor eax, eax; add rsp, 0x8; ret; 
0x0000000009c56e: je short 0x000000000009c578; ret; 
0x0000000009c594: je short 0x000000000009c5a0; sbb eax, eax; or eax, 0x1; ret; 
0x0000000009e01a: je short 0x000000000009e03b; ret; 
0x0000000009e619: je short 0x000000000009e624; xor eax, eax; ret; 
0x0000000009e627: je short 0x000000000009e638; mov rax, [rax+0x18]; test rax, rax; jne short 0x000000000009e620; ret; 
0x0000000009e6fc: je short 0x000000000009e71b; ret; 
0x000000000a00fc: je short 0x00000000000a0140; mov rsi, rbp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x000000000a041d: je short 0x00000000000a0443; adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x000000000a0e91: je short 0x00000000000a0e9a; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a10c4: je short 0x00000000000a10d0; add rsp, 0x8; ret; 
0x000000000a264a: je short 0x00000000000a2658; add rsp, 0x8; ret; 
0x000000000a3768: je short 0x00000000000a378e; adc [rax-0x77], cl; jl short 0x00000000000a3793; or al, ch; ret far; 
0x000000000a7748: je short 0x00000000000a774b; add [rax], al; mov rdi, [rdi+0x48]; mov rsi, r12; call rax; 
0x000000000a78ed: je short 0x00000000000a791e; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x000000000a7a92: je short 0x00000000000a7ac8; add rsp, 0x10; pop r12; ret; 
0x000000000a8354: je short 0x00000000000a8329; ret; 
0x000000000a8590: je short 0x00000000000a85a0; movsx edx, al; mov eax, edx; ret; 
0x000000000a8746: je short 0x00000000000a8750; ret; 
0x000000000a8794: je short 0x00000000000a875f; ret; 
0x000000000a87c6: je short 0x00000000000a87d0; ret; 
0x000000000a8814: je short 0x00000000000a87df; ret; 
0x000000000a87f8: je short 0x00000000000a881d; add [rax], eax; cmove rax, rdx; ret; 
0x000000000a8a06: je short 0x00000000000a8a10; ret; 
0x000000000a8a54: je short 0x00000000000a8a1f; ret; 
0x000000000a9496: je short 0x00000000000a94a0; ret; 
0x000000000a95c6: je short 0x00000000000a95d0; ret; 
0x000000000a9614: je short 0x00000000000a95df; ret; 
0x000000000aa99e: je short 0x00000000000aa9a4; xor byte ptr [rax+0x6], 0x2a; mov rax, r8; ret; 
0x000000000ab026: je short 0x00000000000ab030; ret; 
0x000000000ab0b6: je short 0x00000000000ab0c0; ret; 
0x000000000ab104: je short 0x00000000000ab0cf; ret; 
0x000000000ab496: je short 0x00000000000ab4a8; pop rbx; pop rbp; pop r12; ret; 
0x000000000abcc1: je short 0x00000000000abcdc; cmp al, 0x3d; je short 0x00000000000abcdc; xor eax, eax; ret; 
0x000000000abcd5: je short 0x00000000000abcdc; cmp cl, 0x3d; jne short 0x00000000000abc95; mov rax, r11; ret; 
0x000000000abcc5: je short 0x00000000000abcdc; xor eax, eax; ret; 
0x000000000acb2a: je short 0x00000000000acb50; xor cl, ch; in eax, dx; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000000b119b: je short 0x00000000000b11a1; cmp eax, esi; jne short 0x00000000000b1190; mov rax, r8; ret; 
0x000000000b11cf: je short 0x00000000000b11d5; cmp eax, edx; jne short 0x00000000000b11c0; mov rax, r8; ret; 
0x000000000b123a: je short 0x00000000000b1230; ret; 
0x000000000b1272: je short 0x00000000000b1268; cmp ecx, esi; je short 0x00000000000b1268; ret; 
0x000000000b1276: je short 0x00000000000b1268; ret; 
0x000000000b12cd: je short 0x00000000000b12b0; mov rax, r8; ret; 
0x000000000b12fe: je short 0x00000000000b1308; cmp ecx, edx; jne short 0x00000000000b12f0; ret; 
0x000000000b1616: je short 0x00000000000b1620; ret; 
0x000000000b1664: je short 0x00000000000b162f; ret; 
0x000000000b4aec: je short 0x00000000000b4b3d; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b4b8e: je short 0x00000000000b4bdf; adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000b4c98: je short 0x00000000000b4cb0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000b4dda: je short 0x00000000000b4e2b; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b5070: je short 0x00000000000b50c1; and [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000000b515c: je short 0x00000000000b5130; bsr eax, eax; add rax, rdi; ret; 
0x000000000b56b9: je short 0x00000000000b5683; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x000000000ba505: je short 0x00000000000ba510; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000000baa08: je short 0x00000000000baa0e; bsf eax, edx; ret; 
0x000000000baaad: je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa50: je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac7c: je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000000c4a41: je short 0x00000000000c4a4d; movzx esi, word ptr [rsi+rdx-0x2]; mov [rdi+rdx-0x2], si; mov [rdi], cl; ret; 
0x000000000c4ae7: je short 0x00000000000c4b00; ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x40], edi; ret; 
0x000000000c51b4: je short 0x00000000000c5198; ret; 
0x000000000c5212: je short 0x00000000000c51f0; ret; 
0x000000000c52b2: je short 0x00000000000c52bb; or dword ptr [rip+0x15b2dd], 0x1; xor eax, eax; ret; 
0x000000000c5416: je short 0x00000000000c5420; ret; 
0x000000000c5464: je short 0x00000000000c542f; ret; 
0x000000000c5496: je short 0x00000000000c54a0; ret; 
0x000000000c54e4: je short 0x00000000000c54af; ret; 
0x000000000c563c: je short 0x00000000000c5612; ret; 
0x000000000c56c6: je short 0x00000000000c56d0; ret; 
0x000000000c5714: je short 0x00000000000c56df; ret; 
0x000000000c57f6: je short 0x00000000000c5800; ret; 
0x000000000c5844: je short 0x00000000000c580f; ret; 
0x000000000c5a56: je short 0x00000000000c5a60; ret; 
0x000000000c6dcc: je short 0x00000000000c6da2; ret; 
0x000000000c6de9: je short 0x00000000000c6def; test edx, edx; jne short 0x00000000000c6de0; ret; 
0x000000000cf80d: je short 0x00000000000cf813; mov eax, r8d; ret; 
0x000000000d34a1: je short 0x00000000000d34c7; sbb [rbp+0x31], al; ror byte ptr [rax-0x77], 0xef; call rbx; 
0x000000000d4565: je short 0x00000000000d458b; or [rbp+0x31], al; ror byte ptr [rax-0x39], cl; ret; 
0x000000000d7a59: je short 0x00000000000d7a70; mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a83: je short 0x00000000000d7aa0; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ab9: je short 0x00000000000d7ad0; mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ae3: je short 0x00000000000d7b00; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b19: je short 0x00000000000d7b30; mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b43: je short 0x00000000000d7b50; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b69: je short 0x00000000000d7b80; mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b93: je short 0x00000000000d7ba0; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7c83: je short 0x00000000000d7c90; xor eax, eax; cmp esi, edi; jne short 0x00000000000d7c90; ret; 
0x000000000d8136: je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x000000000d8144: je short 0x00000000000d81a0; test al, 0xf0; jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d8389: je short 0x00000000000d83a0; mov cl, dl; and cl, 0xf; je short 0x00000000000d83b0; ret; 
0x000000000d8390: je short 0x00000000000d83b0; ret; 
0x000000000d83a5: je short 0x00000000000d83c0; add rax, 0x2; ret; 
0x000000000d8488: je short 0x00000000000d8492; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000d852d: je short 0x00000000000d8540; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d84d4: je short 0x00000000000d8550; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d874c: je short 0x00000000000d8770; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d9116: je short 0x00000000000d9140; mov [rsp+0x50], r15; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000da7f0: je short 0x00000000000da828; jmp far fword ptr [rcx-0x40]; 
0x000000000dd8bd: je short 0x00000000000dd8e3; or al, ch; ret far; 
0x000000000e55b7: je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e7: je short 0x00000000000e55f0; xor eax, eax; ret; 
0x000000000e5671: je short 0x00000000000e56a0; call rax; 
0x000000000e56d5: je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x000000000e5d17: je short 0x00000000000e5d44; pop rbx; pop rbp; pop r12; ret; 
0x000000000e6c26: je short 0x00000000000e6c3d; mov rbx, r13; mov rdi, rbp; call r12; 
0x000000000e7733: je short 0x00000000000e7735; add [rax], al; syscall; 
0x000000000e7730: je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000ea3b7: je short 0x00000000000ea3c8; xor edx, edx; cmp rax, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000eac4e: je short 0x00000000000eac57; test eax, eax; jne short 0x00000000000eac57; pop rdi; jmp rdi; 
0x000000000eafb4: je short 0x00000000000eafb8; call rax; 
0x000000000eb02d: je short 0x00000000000eb031; call rax; 
0x000000000eb075: je short 0x00000000000eb079; call rax; 
0x000000000ec160: je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000ec1f0: je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec4b0: je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec550: je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x000000000ecf3c: je short 0x00000000000ececd; cmp r8, 0x2468; jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x000000000ed139: je short 0x00000000000ed16a; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x000000000ed154: je short 0x00000000000ed16a; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000ed105: je short 0x00000000000ed16a; xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x000000000ee4e9: je short 0x00000000000ee4f4; mov rdi, r15; call rbx; 
0x000000000ee4e4: je short 0x00000000000ee4fd; test rbx, rbx; je short 0x00000000000ee4f4; mov rdi, r15; call rbx; 
0x000000000f0241: je short 0x00000000000f0213; cmp al, 0x3f; jne short 0x00000000000f0229; mov eax, 0x1; ret; 
0x000000000f020d: je short 0x00000000000f0213; cmp al, 0x3f; jne short 0x00000000000f0259; mov eax, 0x1; ret; 
0x000000000f0553: je short 0x00000000000f0591; sub [rdi], ecx; test [rax+rax-0x76b80000], dh; ret far; 
0x000000000f41d3: je short 0x00000000000f416f; mov byte ptr [rax+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000f416d: je short 0x00000000000f41b0; mov byte ptr [rax+0x8], 0x1; mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x000000000f6b38: je short 0x00000000000f6b5e; or [rcx], ch; ret far; 
0x000000000f6e7c: je short 0x00000000000f6ebb; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f7012: je short 0x00000000000f6f97; pop rbx; ret; 
0x000000000f700d: je short 0x00000000000f6fb7; and ebx, 0x8; je short 0x00000000000f6f97; pop rbx; ret; 
0x000000000f9e45: je short 0x00000000000f9ea0; xor eax, eax; pop rbp; ret; 
0x0000000010279a: je short 0x0000000000102721; ror byte ptr [rdi], 0x8e; ret; 
0x00000000107459: je short 0x0000000000107464; mov rdi, r15; call rbx; 
0x00000000107454: je short 0x000000000010746d; test rbx, rbx; je short 0x0000000000107464; mov rdi, r15; call rbx; 
0x000000001092c2: je short 0x00000000001092c8; ret; 
0x000000001092b7: je short 0x00000000001092f8; mov eax, 0xf; cmp dx, 0x2; je short 0x00000000001092c8; ret; 
0x0000000010f25a: je short 0x000000000010f280; adc [rax-0x77], cl; ret; 
0x00000000113a49: je short 0x0000000000113a54; mov eax, 0x1c; syscall; 
0x00000000113cc6: je short 0x0000000000113d00; xor edx, edx; xor esi, esi; mov rdi, rbp; call rax; 
0x00000000113d52: je short 0x0000000000113d88; xor edx, edx; call rax; 
0x00000000114209: je short 0x0000000000114210; mov eax, r9d; ret; 
0x0000000011420a: je short 0x0000000000114210; mov eax, r9d; ret; 
0x000000001148e5: je short 0x000000000011490b; adc [rbx-0x47e7db84], cl; add [rcx], eax; add [rax], al; syscall; 
0x000000001149be: je short 0x00000000001149e4; adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x000000001168a6: je short 0x00000000001168cc; sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x00000000116b96: je short 0x0000000000116bbc; sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x00000000116bfe: je short 0x0000000000116c24; sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x000000001190f0: je short 0x00000000001190f8; neg eax; ret; 
0x00000000119300: je short 0x0000000000119308; neg eax; ret; 
0x0000000011946a: je short 0x0000000000119492; mov eax, 0x118; syscall; 
0x00000000119501: je short 0x000000000011950a; xor eax, eax; cmp rdx, rcx; je short 0x0000000000119510; ret; 
0x00000000119508: je short 0x0000000000119510; ret; 
0x00000000119568: je short 0x0000000000119578; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000119561: je short 0x00000000001195a0; cmp eax, 0x8000; je short 0x0000000000119578; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000001199b1: je short 0x00000000001199d7; or al, 0x8b; jl short 0x00000000001199db; or [rax+0x11d], bh; syscall; 
0x00000000119a7c: je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x00000000119b0b: je short 0x0000000000119b38; mov eax, 0x48; syscall; 
0x00000000119c61: je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x0000000011acee: je short 0x000000000011ad14; or [rax+0x127], bh; syscall; 
0x0000000011adae: je short 0x000000000011add4; or [rax+0x128], bh; syscall; 
0x0000000011b0f0: je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x0000000011b180: je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x0000000011b21d: je short 0x000000000011b250; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x0000000011b2dd: je short 0x000000000011b310; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x0000000011b382: je short 0x000000000011b385; ret; 
0x0000000011b954: je short 0x000000000011b97a; and [rax+0x10e], bh; mov edi, [rsp+0x1c]; syscall; 
0x0000000011c34e: je short 0x000000000011c368; mov [rip+0x104ec9], rax; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000011d1e4: je short 0x000000000011d1ea; mov [rax+0x8], rdi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x0000000011d217: je short 0x000000000011d21c; mov [rax], rdx; ret; 
0x0000000011d302: je short 0x000000000011d2f0; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000011daa6: je short 0x000000000011dab3; add rax, 0x8; mov [rip+0x1038bd], rax; mov rax, r8; ret; 
0x0000000011f9c7: je short 0x000000000011f9d0; pop rbx; ret; 
0x0000000011f9c6: je short 0x000000000011f9d0; pop rbx; ret; 
0x0000000011fcf2: je short 0x000000000011fd25; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000011fd82: je short 0x000000000011fdb5; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000012040d: je short 0x0000000000120430; mov rsi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x00000000120ae9: je short 0x0000000000120b1a; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120b9a: je short 0x0000000000120bcd; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000121471: je short 0x00000000001214b0; call rax; 
0x00000000121c6f: je short 0x0000000000121c80; add rsp, 0x8; ret; 
0x00000000122473: je short 0x0000000000122480; cmp rdi, rdx; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x000000001256d9: je short 0x00000000001256e9; mov rsi, r8; mov rdi, rbp; call r12; 
0x00000000125bab: je short 0x0000000000125bae; ret; 
0x00000000125d0a: je short 0x0000000000125d30; or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x00000000126080: je short 0x00000000001260a6; sbb [rbx-0x47f7db84], cl; adc al, 0x1; add [rax], al; syscall; 
0x00000000126306: je short 0x0000000000126338; mov eax, 0x145; syscall; 
0x0000000012632a: je short 0x0000000000126366; mov eax, r8d; ret; 
0x0000000012632b: je short 0x0000000000126366; mov eax, r8d; ret; 
0x0000000012639a: je short 0x00000000001263c8; mov eax, 0x149; syscall; 
0x000000001269f2: je short 0x00000000001269f5; ret; 
0x000000001269e1: je short 0x0000000000126a0a; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x00000000127ed2: je short 0x0000000000127ef8; or [rbx-0x47e7db84], cl; and [rcx], al; add [rax], al; syscall; 
0x00000000127f8a: je short 0x0000000000127fb0; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x00000000128040: je short 0x0000000000128066; adc [rbx-0x47f3db84], cl; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000012835d: je short 0x0000000000128383; adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x000000001286ad: je short 0x00000000001286b0; ret; 
0x000000001288f1: je short 0x00000000001288fc; add edx, edx; mov eax, 0x14; syscall; 
0x00000000128f29: je short 0x0000000000128f40; movsxd rbx, ebx; mov [rip+0xf050b], rbx; pop rbx; ret; 
0x00000000129420: je short 0x0000000000129450; add eax, 0x1; mov [rdx], ax; ret; 
0x000000001293df: je short 0x0000000000129450; add eax, 0x1; mov [rdx], eax; ret; 
0x0000000012c434: je short 0x000000000012c448; pop rbx; pop rbp; pop r12; ret; 
0x00000000132a97: je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x00000000132ac2: je short 0x0000000000132ad0; pop rbx; ret; 
0x00000000132ab1: je short 0x0000000000132ae0; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x00000000133c2f: je short 0x0000000000133c40; ret; 
0x000000001355f0: je short 0x0000000000135600; add rsp, 0x8; ret; 
0x000000001385c3: je short 0x00000000001385e9; mov rdi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000013e66f: je short 0x000000000013e676; mov rdi, rbx; call rax; 
0x0000000013e9af: je short 0x000000000013e9b6; mov rdi, rbx; call rax; 
0x0000000013ea5f: je short 0x000000000013ea6a; lea rdi, [rip+0xe34b8]; call rax; 
0x00000000141ddb: je short 0x0000000000141dd0; pop rbx; ret; 
0x00000000142d09: je short 0x0000000000142d18; test eax, eax; jne short 0x0000000000142d28; mov eax, r8d; ret; 
0x00000000144827: je short 0x0000000000144830; pop rbx; ret; 
0x000000001496e3: je short 0x00000000001496a9; add rdx, 0x2; xor eax, eax; mov [rdi], rdx; ret; 
0x000000001496a7: je short 0x00000000001496e0; mov rax, [rip+0xcf760]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000014a635: je short 0x000000000014a640; ret; 
0x0000000014e728: je short 0x000000000014e730; ret; 
0x00000000150ffa: je short 0x0000000000150fd9; add [rax-0x7d], cl; ret; 
0x000000001522ff: je short 0x0000000000152307; cmp [rax+0x10], rdi; jne short 0x00000000001522f8; ret; 
0x00000000153a2f: je short 0x0000000000153a55; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x0000000015505e: je short 0x0000000000155070; xor eax, eax; cmp edx, 0x1; jne short 0x0000000000155088; ret; 
0x0000000015557b: je short 0x0000000000155593; mov rdi, [rip+0xd227c]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000156f43: je short 0x0000000000156f50; mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x0000000015d1fd: je short 0x000000000015d210; mov edx, [rax+0x5c]; lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000015d2f6: je short 0x000000000015d2fd; mov rdi, rbp; call rax; 
0x0000000015d51f: je short 0x000000000015d545; adc [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call rcx; 
0x0000000015d5bf: je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000015d651: je short 0x000000000015d69b; mov rdi, [r12]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d74d: je short 0x000000000015d754; mov rdi, rbp; call rax; 
0x0000000015d730: je short 0x000000000015d7a0; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d8a7: je short 0x000000000015d8b7; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015da4d: je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015da7c: je short 0x000000000015da80; ret; 
0x0000000015e28a: je short 0x000000000015e21f; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e266: je short 0x000000000015e21f; mov rax, [rbp+0x8]; mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x0000000015e742: je short 0x000000000015e6e7; mov rax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000015e764: je short 0x000000000015e76b; mov rdi, rbx; call rax; 
0x0000000015eada: je short 0x000000000015eae1; mov rdi, rbx; call rax; 
0x0000000015ecf7: je short 0x000000000015ed00; xor eax, eax; ret; 
0x0000000015ed7e: je short 0x000000000015eda0; mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x0000000015edaa: je short 0x000000000015edc0; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000015ef86: je short 0x000000000015efac; add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000015effb: je short 0x000000000015f021; add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000015f2f8: je short 0x000000000015f2ff; mov rdi, r13; call rax; 
0x0000000015f669: je short 0x000000000015f688; mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000015fcd5: je short 0x000000000015fc59; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000015fc90: je short 0x000000000015fca2; mov rax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x0000000015fcdd: je short 0x000000000015fd03; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000161a32: je short 0x0000000000161a40; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000161af2: je short 0x0000000000161b00; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000161bf2: je short 0x0000000000161c00; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000162c67: je short 0x0000000000162c72; lea rdi, [rbp+0xc8]; call rax; 
0x00000000162efc: je short 0x0000000000162f22; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x00000000162f2b: je short 0x0000000000162f51; xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x0000000016302d: je short 0x0000000000162fd6; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000163146: je short 0x000000000016316c; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x000000001636ad: je short 0x00000000001636b4; mov rdi, rbp; call rax; 
0x00000000163892: je short 0x000000000016389b; lea rdi, [r12+0x10]; call rax; 
0x000000001644ef: je short 0x0000000000164508; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001644f7: je short 0x000000000016451d; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001645ac: je short 0x00000000001645d2; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x00000000164b51: je short 0x0000000000164b58; mov rdi, rbp; call rax; 
0x00000000164d26: je short 0x0000000000164d2d; mov rdi, r13; call rax; 
0x00000000165a54: je short 0x0000000000165a5c; lea rdi, [rbp+0x68]; call rax; 
0x00000000165c4f: je short 0x0000000000165c75; or [rbp-0x74b70098], cl; jo short 0x0000000000165be3; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x00000000165c6f: je short 0x0000000000165c95; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x00000000165c9e: je short 0x0000000000165cc4; xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x00000000165d96: je short 0x0000000000165d43; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000165e8e: je short 0x0000000000165eb4; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x0000000016617c: je short 0x0000000000166183; mov rdi, rbp; call rax; 
0x000000001664f4: je short 0x00000000001664fc; lea rdi, [rbp+0x58]; call rax; 
0x000000001666f3: je short 0x0000000000166719; push rax; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x00000000166ea5: je short 0x0000000000166f20; mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000167155: je short 0x00000000001671d0; mov rax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000167f45: je short 0x0000000000167f55; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000168a6e: je short 0x0000000000168a35; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000168a33: je short 0x0000000000168a40; pop rbx; ret; 
0x00000000168ae6: je short 0x0000000000168aa1; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000168a9f: je short 0x0000000000168aa8; pop rbx; ret; 
0x00000000168b0f: je short 0x0000000000168b20; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x00000000168b8f: je short 0x0000000000168ba0; add rax, 0xa0; pop rbx; ret; 
0x00000000168c0f: je short 0x0000000000168c20; add rax, 0xa8; pop rbx; ret; 
0x00000000168dd1: je short 0x0000000000168de0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000169a12: je short 0x0000000000169a1b; lea rdi, [r12+0x10]; call rax; 
0x0000000016a1ab: je short 0x000000000016a1b4; lea rdi, [r12+0x10]; call rax; 
0x0000000016a228: je short 0x000000000016a260; mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000016b523: je short 0x000000000016b540; cmp eax, 0x2; sete al; movzx eax, al; ret; 
0x0000000016b655: je short 0x000000000016b67b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b64d: je short 0x000000000016b6c8; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b6ae: je short 0x000000000016b6d4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b745: je short 0x000000000016b76b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b73d: je short 0x000000000016b7b8; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b79e: je short 0x000000000016b7c4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b835: je short 0x000000000016b85b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b82d: je short 0x000000000016b8a8; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b88e: je short 0x000000000016b8b4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b925: je short 0x000000000016b94b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b91d: je short 0x000000000016b998; mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b97e: je short 0x000000000016b9a4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016be44: je short 0x000000000016be6a; adc [rax-0x77], cl; and al, 0x10; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016bfe4: je short 0x000000000016c00a; adc [rax-0x77], cl; and al, 0x10; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016c635: je short 0x000000000016c5b7; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016c5ec: je short 0x000000000016c612; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c5e4: je short 0x000000000016c658; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c63d: je short 0x000000000016c663; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c725: je short 0x000000000016c6a7; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016c6dc: je short 0x000000000016c702; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c6d4: je short 0x000000000016c748; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c72d: je short 0x000000000016c753; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c815: je short 0x000000000016c797; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016c7cc: je short 0x000000000016c7f2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c7c4: je short 0x000000000016c838; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c81d: je short 0x000000000016c843; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c905: je short 0x000000000016c887; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016c8bc: je short 0x000000000016c8e2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c8b4: je short 0x000000000016c928; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c90d: je short 0x000000000016c933; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c955: je short 0x000000000016c980; mov eax, r8d; ret; 
0x0000000016c9a5: je short 0x000000000016c9d0; mov eax, r8d; ret; 
0x0000000016ca55: je short 0x000000000016ca7b; add al, 0x89; and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016cae5: je short 0x000000000016cb0b; add al, 0x89; and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016cb75: je short 0x000000000016cb9b; add al, 0x89; and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016cc05: je short 0x000000000016cc2b; add al, 0x89; and al, 0x4; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016f2a7: je short 0x000000000016f2a5; jmp qword ptr [rsi+0xf]; 
0x000000001730cc: je short 0x00000000001730c5; jmp qword ptr [rsi+0xf]; 
0x00000000174ea8: je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000001750f5: je short 0x0000000000175102; mov rdi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x000000001751ed: je short 0x00000000001751fa; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000175385: je short 0x0000000000175392; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000175465: je short 0x0000000000175441; mov [rsp+0xc], eax; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x00000000175422: je short 0x0000000000175448; and [rax-0x73], cl; or eax, 0xfffffc14; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x000000001754e6: je short 0x0000000000175500; mov rax, [rip+0xa39d9]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x0000000017baa6: je short 0x000000000017baae; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000192eb3: je short 0x0000000000192e76; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000193b85: je short 0x0000000000193b88; xchg edx, eax; sub eax, edx; ret; 
0x00000000193c83: je short 0x0000000000193c46; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000194b6a: je short 0x0000000000194b6d; xchg edx, eax; sub eax, edx; ret; 
0x00000000194cc3: je short 0x0000000000194c86; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000196893: je short 0x0000000000196856; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001987d0: je short 0x00000000001987a8; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000001988fe: je short 0x00000000001988e0; movsxd rcx, ecx; lea rax, [rdi+rcx]; ret; 
0x000000001994e3: je short 0x0000000000199530; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199767: je short 0x00000000001997c4; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x00000000199901: je short 0x0000000000199962; and ch, al; std; xlat [rbx]; ret; 
0x000000001999ef: je short 0x0000000000199a50; and ch, al; std; xlat [rbx]; ret; 
0x00000000199b4a: je short 0x0000000000199b10; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199f9f: je short 0x0000000000199f72; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x00000000199ff9: je short 0x000000000019a012; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x0000000019a035: je short 0x000000000019a03c; sbb eax, eax; or eax, 0x1; ret; 
0x0000000019a3b3: je short 0x000000000019a376; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019ba53: je short 0x000000000019ba16; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019d5bc: je short 0x000000000019d620; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000019d90f: je short 0x000000000019d8c4; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x0000000019d934: je short 0x000000000019d950; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x0000000019d987: je short 0x000000000019d9e0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000019db15: je short 0x000000000019db80; tzcnt eax, eax; vzeroupper; ret; 
0x0000000019e2ff: je short 0x000000000019e380; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019f09f: je short 0x000000000019f120; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000019fd8f: je short 0x000000000019fe10; mov byte ptr [rdi], 0x0; lea rax, [rdi]; vzeroupper; ret; 
0x000000001a0986: je short 0x00000000001a0992; movzx esi, word ptr [rsi+rdx-0x2]; mov [rdi+rdx-0x2], si; mov [rdi], cl; ret; 
0x000000001a1628: je short 0x00000000001a15d0; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a16e6: je short 0x00000000001a1740; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001a26da: je short 0x00000000001a2674; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001a270f: je short 0x00000000001a2720; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001a2e38: je short 0x00000000001a2e02; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a2e77: je short 0x00000000001a2e41; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a2f9e: je short 0x00000000001a2f68; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a30c4: je short 0x00000000001a308e; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a32e7: je short 0x00000000001a32b1; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a3414: je short 0x00000000001a33de; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a35a8: je short 0x00000000001a3597; setg al; lea eax, [rax+rax-0x1]; ret; 
0x000000001a6715: je short 0x00000000001a6730; mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x00000000001a6850; ret; 
0x000000001a6743: je short 0x00000000001a6760; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000001a69ac: je short 0x00000000001a69b8; movzx esi, word ptr [rsi+rdx+0x2]; mov [rdi+rdx+0x2], si; mov [rdi], cl; ret; 
0x000000001a6ac4: je short 0x00000000001a6add; std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001a73cf: je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a76f1: je short 0x00000000001a76f7; vzeroall; ret; 
0x000000001a799f: je short 0x00000000001a7972; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x000000001a79f9: je short 0x00000000001a7a12; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x000000001a7a35: je short 0x00000000001a7a3c; sbb eax, eax; or eax, 0x1; ret; 
0x000000001a7aff: je short 0x00000000001a7b05; vzeroall; ret; 
0x000000001a7dee: je short 0x00000000001a7df4; vzeroall; ret; 
0x000000001a7e16: je short 0x00000000001a7e22; movzx esi, word ptr [rsi+rdx-0x2]; mov [rdi+rdx-0x2], si; mov [rdi], cl; ret; 
0x000000001a8521: je short 0x00000000001a8582; and ch, al; std; xlat [rbx]; ret; 
0x000000001a85dc: je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001a861f: je short 0x00000000001a8680; and ch, al; std; xlat [rbx]; ret; 
0x000000001a89b6: je short 0x00000000001a89bc; vzeroall; ret; 
0x000000001a8a93: je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001a8e10: je short 0x00000000001a8e16; vzeroall; ret; 
0x000000001a8e6b: je short 0x00000000001a8e71; vzeroall; ret; 
0x000000001a94a5: je short 0x00000000001a94ab; vzeroall; ret; 
0x000000001a972e: je short 0x00000000001a9734; vzeroall; ret; 
0x000000001a9bb1: je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001aa78b: je short 0x00000000001aa791; vzeroall; ret; 
0x000000001aab3b: je short 0x00000000001aab41; vzeroall; ret; 
0x000000001aade1: je short 0x00000000001aade7; vzeroall; ret; 
0x000000001ab3fb: je short 0x00000000001ab401; vzeroall; ret; 
0x000000001ab897: je short 0x00000000001ab89d; vzeroall; ret; 
0x000000001ac0b9: je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001ac9dc: je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001acb4c: je short 0x00000000001acb52; vzeroall; ret; 
0x000000001ace5f: je short 0x00000000001ace65; vzeroall; ret; 
0x000000001acec4: je short 0x00000000001aceca; vzeroall; ret; 
0x000000001ad4a4: je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000001ad531: je short 0x00000000001ad537; vzeroall; ret; 
0x000000001add4f: je short 0x00000000001add55; vzeroall; ret; 
0x000000001aded1: je short 0x00000000001aded7; vzeroall; ret; 
0x000000001ae012: je short 0x00000000001ae018; vzeroall; ret; 
0x000000001ae356: je short 0x00000000001ae35c; vzeroall; ret; 
0x000000001ae648: je short 0x00000000001ae5f0; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001ae716: je short 0x00000000001ae760; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001ae933: je short 0x00000000001ae941; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001aef97: je short 0x00000000001aefa3; movzx esi, word ptr [rsi+rdx+0x2]; mov [rdi+rdx+0x2], si; mov [rdi], cl; ret; 
0x000000001af084: je short 0x00000000001af09d; std; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001afa0b: je short 0x00000000001af990; bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x000000001af9bd: je short 0x00000000001af990; bsr eax, eax; add rax, rdi; ret; 
0x000000001afcc5: je short 0x00000000001afd40; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001afce9: je short 0x00000000001afd44; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001b011f: je short 0x00000000001b01a0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x000000001b131f: je short 0x00000000001b13a0; mov byte ptr [rdi], 0x0; ret; 
0x000000001b1506: je short 0x00000000001b150f; and [rbp-0x3a], dh; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b166e: je short 0x00000000001b1677; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1696: je short 0x00000000001b169f; and [rbp-0x22], dh; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1741: je short 0x00000000001b17c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b20cf: je short 0x00000000001b2150; mov byte ptr [rdi], 0x0; ret; 
0x000000001b2249: je short 0x00000000001b22a0; tzcnt eax, eax; ret; 
0x000000001b3eb7: je short 0x00000000001b3f20; tzcnt eax, eax; ret; 
0x000000001b42ef: je short 0x00000000001b42a4; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x000000001b4314: je short 0x00000000001b4320; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x000000001b43e5: je short 0x00000000001b436e; and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b453a: je short 0x00000000001b44c3; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b4565: je short 0x00000000001b44ee; and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b460e: je short 0x00000000001b4618; setl al; neg eax; or eax, 0x1; ret; 
0x000000001b4aa9: je short 0x00000000001b4b00; tzcnt eax, eax; ret; 
0x000000001b4c7f: je short 0x00000000001b4c89; setl al; neg eax; or eax, 0x1; ret; 
0x000000001b5217: je short 0x00000000001b5280; tzcnt eax, eax; ret; 
0x000000001b56bf: je short 0x00000000001b5674; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b56e4: je short 0x00000000001b56f0; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b579c: je short 0x00000000001b5800; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b59c0: je short 0x00000000001b59ce; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b5dd6: je short 0x00000000001b5e20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6003: je short 0x00000000001b6011; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b6065: je short 0x00000000001b60e0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6089: je short 0x00000000001b60e4; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001b627c: je short 0x00000000001b62e0; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b64d0: je short 0x00000000001b64de; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001baaaa: je short 0x00000000001baabc; movss xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x000000001bb2ac: je short 0x00000000001bb2b0; call rax; 
0x000000001bb3db: je short 0x00000000001bb3e4; call rax; 
0x000000001bb3d2: je short 0x00000000001bb3e9; mov rax, [rdi+0x20]; test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x00000000045437: jg 0x0000000000045558; mov edi, ebp; call rax; 
0x000000000454d2: jg 0x0000000000045580; call rax; 
0x00000000045488: jg 0x00000000000455a0; mov esi, ebp; mov rdi, r13; call rax; 
0x00000000045a49: jg 0x0000000000045bc8; xor esi, esi; mov rdi, r8; call rax; 
0x00000000045b3c: jg 0x0000000000045bf4; xor esi, esi; mov rdi, r8; call rax; 
0x0000000004122e: jg short 0x0000000000041271; or eax, edi; je 0x0000000000041178; ret; 
0x000000000417fe: jg short 0x0000000000041823; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000004192a: jg short 0x00000000000418ac; shl eax, 0x17; or ecx, eax; movd xmm0, ecx; ret; 
0x0000000004278a: jg short 0x000000000004278c; add [rax], al; syscall; 
0x00000000045310: jg short 0x0000000000045338; xor eax, eax; pop rbx; ret; 
0x000000000460d1: jg short 0x00000000000460f0; pop rbp; ret; 
0x000000000461ed: jg short 0x0000000000046210; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000466ec: jg short 0x0000000000046677; adc [rcx-0x3f76bbea], cl; ret; 
0x00000000056677: jg short 0x0000000000056679; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000056609: jg short 0x0000000000056680; loopne 0x00000000000565c5; add [rax], eax; add [rax], al; ret; 
0x000000000620f3: jg short 0x0000000000062100; ret; 
0x0000000007e81e: jg short 0x000000000007e840; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000080a59: jg short 0x0000000000080a60; ret; 
0x00000000080eeb: jg short 0x0000000000080f07; add [rax-0x77], cl; ret; 
0x00000000081363: jg short 0x000000000008135f; jmp qword ptr [rsi+0x2e]; 
0x00000000081dd1: jg short 0x0000000000081df0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008746d: jg short 0x00000000000874b0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008753d: jg short 0x0000000000087580; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000088024: jg short 0x0000000000088030; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000892ec: jg short 0x0000000000089271; inc byte ptr [rdx]; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000008a1ec: jg short 0x000000000008a210; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008d0a1: jg short 0x000000000008d0e0; add rsp, 0x8; ret; 
0x0000000008f579: jg short 0x000000000008f580; ret; 
0x00000000090a01: jg short 0x0000000000090a13; call qword ptr [rax+0x360]; 
0x000000000915d0: jg short 0x0000000000091608; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000092628: jg short 0x000000000009269a; pop rbx; pop rbp; pop r12; ret; 
0x00000000092ef9: jg short 0x0000000000092f3b; xor dh, 0x81; syscall; 
0x00000000093b21: jg short 0x0000000000093b6f; mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093b90: jg short 0x0000000000093bde; mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093f7b: jg short 0x0000000000093fc9; mov edi, ebp; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000093ff9: jg short 0x0000000000094047; mov edi, ebp; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000943bb: jg short 0x0000000000094409; mov edi, esi; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000944d3: jg short 0x0000000000094521; mov edi, esi; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000095e27: jg short 0x0000000000095e40; add rsp, 0x10; pop rbp; ret; 
0x000000000984bf: jg short 0x00000000000984d1; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000099a0d: jg short 0x0000000000099a58; nop; add rsp, 0x18; ret; 
0x00000000099b29: jg short 0x0000000000099b80; nop; add rsp, 0x18; ret; 
0x00000000099c93: jg short 0x0000000000099ca0; mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x0000000009a021: jg short 0x000000000009a02b; call qword ptr [rbx]; 
0x0000000009a561: jg short 0x000000000009a5ab; mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009ad9f: jg short 0x000000000009ade9; mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009b030: jg short 0x000000000009b07e; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009b40b: jg short 0x000000000009b455; mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000a504b: jg short 0x00000000000a5058; pop rbx; pop rbp; pop r12; ret; 
0x000000000a774e: jg short 0x00000000000a7798; mov rsi, r12; call rax; 
0x000000000af2ed: jg short 0x00000000000af2fe; mov gs, [rsi]; add al, [rax]; add bh, dh; ret; 
0x000000000bfd66: jg short 0x00000000000bfd6f; ret; 
0x000000000bfd76: jg short 0x00000000000bfd7f; mov [rdi+0x10], dh; ret; 
0x000000000bfd8a: jg short 0x00000000000bfd93; mov [rdi+0x10], cx; ret; 
0x000000000bfda9: jg short 0x00000000000bfdb2; mov [rdi+0xf], ecx; ret; 
0x000000000bfdb9: jg short 0x00000000000bfdc2; mov [rdi+0x10], ecx; ret; 
0x000000000bfdc9: jg short 0x00000000000bfdd2; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000bfdea: jg short 0x00000000000bfdf3; mov [rdi+0xe], rcx; ret; 
0x000000000bfe0a: jg short 0x00000000000bfe13; mov [rdi+0xf], rcx; ret; 
0x000000000bfe2a: jg short 0x00000000000bfe33; mov [rdi+0x10], rcx; ret; 
0x000000000bfe4a: jg short 0x00000000000bfe53; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe6e: jg short 0x00000000000bfe77; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000bfe8d: jg short 0x00000000000bfe96; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000bfead: jg short 0x00000000000bfeb6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000bfecb: jg short 0x00000000000bfed4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000bfeeb: jg short 0x00000000000bfef4; movdqu [rdi+0xe], xmm2; ret; 
0x000000000bff0b: jg short 0x00000000000bff14; movdqu [rdi+0xf], xmm2; ret; 
0x000000000bff2b: jg short 0x00000000000bff34; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c04d8: jg short 0x00000000000c04db; jne 0x00000000000c0d90; ret; 
0x000000000c04fc: jg short 0x00000000000c0500; jne 0x00000000000c0d90; ret; 
0x000000000c051f: jg short 0x00000000000c0524; jne 0x00000000000c0d90; ret; 
0x000000000c053a: jg short 0x00000000000c0540; jne 0x00000000000c0d90; ret; 
0x000000000c055d: jg short 0x00000000000c0564; jne 0x00000000000c0d90; ret; 
0x000000000c0582: jg short 0x00000000000c058a; jne 0x00000000000c0d90; ret; 
0x000000000c05a0: jg short 0x00000000000c05a9; jne 0x00000000000c0d90; ret; 
0x000000000c05bc: jg short 0x00000000000c05c6; jne 0x00000000000c0d90; ret; 
0x000000000c05df: jg short 0x00000000000c05ea; jne 0x00000000000c0d90; ret; 
0x000000000c0604: jg short 0x00000000000c0610; jne 0x00000000000c0d90; ret; 
0x000000000c0622: jg short 0x00000000000c062f; jne 0x00000000000c0d90; ret; 
0x000000000c0642: jg short 0x00000000000c0650; jne 0x00000000000c0d90; ret; 
0x000000000c0664: jg short 0x00000000000c0673; jne 0x00000000000c0d90; ret; 
0x000000000c0684: jg short 0x00000000000c0694; jne 0x00000000000c0d90; ret; 
0x000000000c06a4: jg short 0x00000000000c06b5; jne 0x00000000000c0d90; ret; 
0x000000000c06b6: jg short 0x00000000000c06bf; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c06be: jg short 0x00000000000c06d0; jne 0x00000000000c0d90; ret; 
0x000000000c06e1: jg short 0x00000000000c06f4; jne 0x00000000000c0d90; ret; 
0x000000000c0706: jg short 0x00000000000c071a; jne 0x00000000000c0d90; ret; 
0x000000000c0724: jg short 0x00000000000c0739; jne 0x00000000000c0d90; ret; 
0x000000000c0744: jg short 0x00000000000c075a; jne 0x00000000000c0d90; ret; 
0x000000000c0767: jg short 0x00000000000c077e; jne 0x00000000000c0d90; ret; 
0x000000000c0786: jg short 0x00000000000c079e; jne 0x00000000000c0d90; ret; 
0x000000000c07a6: jg short 0x00000000000c07bf; jne 0x00000000000c0d90; ret; 
0x000000000c07c6: jg short 0x00000000000c07e0; jne 0x00000000000c0d90; ret; 
0x000000000c07e9: jg short 0x00000000000c0804; jne 0x00000000000c0d90; ret; 
0x000000000c081e: jg short 0x00000000000c083a; jne 0x00000000000c0d90; ret; 
0x000000000c084c: jg short 0x00000000000c0869; jne 0x00000000000c0d90; ret; 
0x000000000c087c: jg short 0x00000000000c089a; jne 0x00000000000c0d90; ret; 
0x000000000c08a8: jg short 0x00000000000c08c7; jne 0x00000000000c0d90; ret; 
0x000000000c08d8: jg short 0x00000000000c08f8; jne 0x00000000000c0d90; ret; 
0x000000000c089f: jg short 0x00000000000c08f8; or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c0908: jg short 0x00000000000c0929; jne 0x00000000000c0d90; ret; 
0x000000000c08ff: jg short 0x00000000000c0958; cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000c0929; jne 0x00000000000c0d90; ret; 
0x000000000c0938: jg short 0x00000000000c095a; jne 0x00000000000c0d90; ret; 
0x000000000c0a56: jg short 0x00000000000c0a5f; ret; 
0x000000000c0a69: jg short 0x00000000000c0a72; mov [rdi+0x10], cl; ret; 
0x000000000c0a7a: jg short 0x00000000000c0a83; mov [rdi+0x10], cx; ret; 
0x000000000c0a99: jg short 0x00000000000c0aa2; mov [rdi+0xf], ecx; ret; 
0x000000000c0aa9: jg short 0x00000000000c0ab2; mov [rdi+0x10], ecx; ret; 
0x000000000c0abc: jg short 0x00000000000c0ac5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000c0ada: jg short 0x00000000000c0ae3; mov [rdi+0xe], rcx; ret; 
0x000000000c0afa: jg short 0x00000000000c0b03; mov [rdi+0xf], rcx; ret; 
0x000000000c0b1a: jg short 0x00000000000c0b23; mov [rdi+0x10], rcx; ret; 
0x000000000c0b3d: jg short 0x00000000000c0b46; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c0b5e: jg short 0x00000000000c0b67; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c0b7d: jg short 0x00000000000c0b86; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c0b9d: jg short 0x00000000000c0ba6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c0bbb: jg short 0x00000000000c0bc4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c0bdb: jg short 0x00000000000c0be4; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c0bfb: jg short 0x00000000000c0c04; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c0c1b: jg short 0x00000000000c0c24; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c0c3e: jg short 0x00000000000c0c47; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c0d52: jg short 0x00000000000c0d5b; ret; 
0x000000000c0d42: jg short 0x00000000000c0d8b; inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000c0e96: jg short 0x00000000000c0ec8; ret; 
0x000000000c1416: jg short 0x00000000000c141f; lea rax, [rdi+0xf]; ret; 
0x000000000c1426: jg short 0x00000000000c142f; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000c143a: jg short 0x00000000000c1443; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c1459: jg short 0x00000000000c1462; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c1479: jg short 0x00000000000c1482; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c1499: jg short 0x00000000000c14a2; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000c14ba: jg short 0x00000000000c14c3; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c14da: jg short 0x00000000000c14e3; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c14fa: jg short 0x00000000000c1503; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c151a: jg short 0x00000000000c1523; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000c153e: jg short 0x00000000000c1547; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c155d: jg short 0x00000000000c1566; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c157d: jg short 0x00000000000c1586; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c159b: jg short 0x00000000000c15a4; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c15bb: jg short 0x00000000000c15c4; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c15db: jg short 0x00000000000c15e4; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c159f: jg short 0x00000000000c15f8; or eax, 0x1c478d48; ret; 
0x000000000c15fb: jg short 0x00000000000c1604; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c1bbb: jg short 0x00000000000c1bbe; jne 0x00000000000c25e0; ret; 
0x000000000c1be0: jg short 0x00000000000c1be4; jne 0x00000000000c25e0; ret; 
0x000000000c1c03: jg short 0x00000000000c1c08; jne 0x00000000000c25e0; ret; 
0x000000000c1c1e: jg short 0x00000000000c1c24; jne 0x00000000000c25e0; ret; 
0x000000000c1c41: jg short 0x00000000000c1c48; jne 0x00000000000c25e0; ret; 
0x000000000c1c66: jg short 0x00000000000c1c6e; jne 0x00000000000c25e0; ret; 
0x000000000c1c84: jg short 0x00000000000c1c8d; jne 0x00000000000c25e0; ret; 
0x000000000c1ca0: jg short 0x00000000000c1caa; jne 0x00000000000c25e0; ret; 
0x000000000c1cc3: jg short 0x00000000000c1cce; jne 0x00000000000c25e0; ret; 
0x000000000c1ce8: jg short 0x00000000000c1cf4; jne 0x00000000000c25e0; ret; 
0x000000000c1d16: jg short 0x00000000000c1d23; jne 0x00000000000c25e0; ret; 
0x000000000c1d36: jg short 0x00000000000c1d44; jne 0x00000000000c25e0; ret; 
0x000000000c1d58: jg short 0x00000000000c1d67; jne 0x00000000000c25e0; ret; 
0x000000000c1d88: jg short 0x00000000000c1d98; jne 0x00000000000c25e0; ret; 
0x000000000c1db8: jg short 0x00000000000c1dc9; jne 0x00000000000c25e0; ret; 
0x000000000c1de2: jg short 0x00000000000c1df4; jne 0x00000000000c25e0; ret; 
0x000000000c1e05: jg short 0x00000000000c1e18; jne 0x00000000000c25e0; ret; 
0x000000000c1e2a: jg short 0x00000000000c1e3e; jne 0x00000000000c25e0; ret; 
0x000000000c1e58: jg short 0x00000000000c1e6d; jne 0x00000000000c25e0; ret; 
0x000000000c1e88: jg short 0x00000000000c1e9e; jne 0x00000000000c25e0; ret; 
0x000000000c1ebb: jg short 0x00000000000c1ed2; jne 0x00000000000c25e0; ret; 
0x000000000c1eea: jg short 0x00000000000c1f02; jne 0x00000000000c25e0; ret; 
0x000000000c1f1a: jg short 0x00000000000c1f33; jne 0x00000000000c25e0; ret; 
0x000000000c1f4a: jg short 0x00000000000c1f64; jne 0x00000000000c25e0; ret; 
0x000000000c1f7d: jg short 0x00000000000c1f98; jne 0x00000000000c25e0; ret; 
0x000000000c1fb2: jg short 0x00000000000c1fce; jne 0x00000000000c25e0; ret; 
0x000000000c1fe0: jg short 0x00000000000c1ffd; jne 0x00000000000c25e0; ret; 
0x000000000c2010: jg short 0x00000000000c202e; jne 0x00000000000c25e0; ret; 
0x000000000c203c: jg short 0x00000000000c205b; jne 0x00000000000c25e0; ret; 
0x000000000c206c: jg short 0x00000000000c208c; jne 0x00000000000c25e0; ret; 
0x000000000c209c: jg short 0x00000000000c20bd; jne 0x00000000000c25e0; ret; 
0x000000000c20cc: jg short 0x00000000000c20ee; jne 0x00000000000c25e0; ret; 
0x000000000c2276: jg short 0x00000000000c227f; lea rax, [rdi+0x10]; ret; 
0x000000000c2289: jg short 0x00000000000c2292; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c22aa: jg short 0x00000000000c22b3; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000c22c9: jg short 0x00000000000c22d2; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e9: jg short 0x00000000000c22f2; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000c230c: jg short 0x00000000000c2315; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000c232a: jg short 0x00000000000c2333; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c234a: jg short 0x00000000000c2353; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c236a: jg short 0x00000000000c2373; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000c238d: jg short 0x00000000000c2396; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c23ae: jg short 0x00000000000c23b7; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23cd: jg short 0x00000000000c23d6; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23ed: jg short 0x00000000000c23f6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000c240b: jg short 0x00000000000c2414; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c242b: jg short 0x00000000000c2434; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c244b: jg short 0x00000000000c2454; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c240f: jg short 0x00000000000c2468; or eax, 0x1d478d48; ret; 
0x000000000c246b: jg short 0x00000000000c2474; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000c248e: jg short 0x00000000000c2497; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c25a2: jg short 0x00000000000c25ab; ret; 
0x000000000c2592: jg short 0x00000000000c25db; inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000c26e6: jg short 0x00000000000c2718; lea rax, [rdi+0x40]; ret; 
0x000000000c26e5: jg short 0x00000000000c2766; xor [rax-0x73], cl; ret; 
0x000000000c3076: jg short 0x00000000000c307f; ret; 
0x000000000c3086: jg short 0x00000000000c308f; mov [rdi+0x10], dh; ret; 
0x000000000c309a: jg short 0x00000000000c30a3; mov [rdi+0x10], cx; ret; 
0x000000000c30b9: jg short 0x00000000000c30c2; mov [rdi+0xf], ecx; ret; 
0x000000000c30c9: jg short 0x00000000000c30d2; mov [rdi+0x10], ecx; ret; 
0x000000000c30d9: jg short 0x00000000000c30e2; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000c30fa: jg short 0x00000000000c3103; mov [rdi+0xe], rcx; ret; 
0x000000000c311a: jg short 0x00000000000c3123; mov [rdi+0xf], rcx; ret; 
0x000000000c313a: jg short 0x00000000000c3143; mov [rdi+0x10], rcx; ret; 
0x000000000c315a: jg short 0x00000000000c3163; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000c317e: jg short 0x00000000000c3187; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c319d: jg short 0x00000000000c31a6; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c31bd: jg short 0x00000000000c31c6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c31db: jg short 0x00000000000c31e4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c31fb: jg short 0x00000000000c3204; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c321b: jg short 0x00000000000c3224; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c323b: jg short 0x00000000000c3244; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c3b66: jg short 0x00000000000c3b6f; ret; 
0x000000000c3b76: jg short 0x00000000000c3b7f; mov [rdi+0x10], dh; ret; 
0x000000000c3b8a: jg short 0x00000000000c3b93; mov [rdi+0x10], cx; ret; 
0x000000000c3ba9: jg short 0x00000000000c3bb2; mov [rdi+0xf], ecx; ret; 
0x000000000c3bb9: jg short 0x00000000000c3bc2; mov [rdi+0x10], ecx; ret; 
0x000000000c3bc9: jg short 0x00000000000c3bd2; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000c3bea: jg short 0x00000000000c3bf3; mov [rdi+0xe], rcx; ret; 
0x000000000c3c0a: jg short 0x00000000000c3c13; mov [rdi+0xf], rcx; ret; 
0x000000000c3c2a: jg short 0x00000000000c3c33; mov [rdi+0x10], rcx; ret; 
0x000000000c3c4a: jg short 0x00000000000c3c53; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000c3c6e: jg short 0x00000000000c3c77; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c3c8d: jg short 0x00000000000c3c96; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c3cad: jg short 0x00000000000c3cb6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c3ccb: jg short 0x00000000000c3cd4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c3ceb: jg short 0x00000000000c3cf4; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c3d0b: jg short 0x00000000000c3d14; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c3d2b: jg short 0x00000000000c3d34; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c3ed6: jg short 0x00000000000c3edf; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000c3ee9: jg short 0x00000000000c3ef2; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000c3f0a: jg short 0x00000000000c3f13; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c3f29: jg short 0x00000000000c3f32; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000c3f49: jg short 0x00000000000c3f52; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000c3f8a: jg short 0x00000000000c3f93; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c3faa: jg short 0x00000000000c3fb3; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000c3fca: jg short 0x00000000000c3fd3; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c406b: jg short 0x00000000000c4074; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000c408b: jg short 0x00000000000c4094; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000c40ab: jg short 0x00000000000c40b4; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000c40cb: jg short 0x00000000000c40d4; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000c40af: jg short 0x00000000000c4108; wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000c40cf: jg short 0x00000000000c4128; adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000c40f2: jg short 0x00000000000c414b; adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000c4146: jg short 0x00000000000c4178; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000c4145: jg short 0x00000000000c41c6; xor [rax], dh; in eax, dx; mov [rdi+0x40], ch; ret; 
0x000000000c4bf8: jg short 0x00000000000c4c2a; movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000cce9a: jg short 0x00000000000cce94; dec dword ptr [rax-0x7d]; ret; 
0x000000000d7bb5: jg short 0x00000000000d7bb9; neg eax; ret; 
0x000000000d8cfb: jg short 0x00000000000d8d20; mov rax, r12; pop r12; ret; 
0x000000000d8dfe: jg short 0x00000000000d8e20; mov rax, rbx; pop rbx; ret; 
0x000000000db591: jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x000000000e6599: jg short 0x00000000000e65b8; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000e6611: jg short 0x00000000000e6630; pop rbx; pop rbp; pop r12; ret; 
0x000000000e66a8: jg short 0x00000000000e66f2; cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000eaf2b: jg short 0x00000000000eaf40; pop rbx; ret; 
0x000000000ecf03: jg short 0x00000000000ecf05; add [rax], al; cmove rax, rdx; ret; 
0x000000000ecec3: jg short 0x00000000000ecf0e; cmp eax, 0x58465342; jne short 0x00000000000eced0; ret; 
0x000000000ecf1d: jg short 0x00000000000ecf1f; add [rax], al; cmove rax, rdx; ret; 
0x000000000ecf5a: jg short 0x00000000000ecf5c; add [rax], al; cmove rax, rdx; ret; 
0x000000000ecf6b: jg short 0x00000000000ecf6d; add [rax], al; cmovne rax, rdx; ret; 
0x000000000ecf66: jg short 0x00000000000ecf7b; add [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000ecf8b: jg short 0x00000000000ecf8d; add [rax], al; cmovne rax, rdx; ret; 
0x000000000f067d: jg short 0x00000000000f0672; jmp qword ptr [rsi+0xf]; 
0x00000000109a4d: jg short 0x0000000000109aae; or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x00000000112f67: jg short 0x0000000000112fe1; movups [rsi+0x70], xmm7; ret; 
0x00000000112fbb: jg short 0x0000000000113035; ret; 
0x0000000011a37e: jg short 0x000000000011a37f; jmp qword ptr [rsi+0xf]; 
0x0000000011ddfa: jg short 0x000000000011ddfb; inc dword ptr [rbp-0x7cc08b40]; ret; 
0x0000000011e93f: jg short 0x000000000011e980; pop rbp; ret; 
0x00000000125a72: jg short 0x0000000000125a78; ret; 
0x000000001283fb: jg short 0x0000000000128404; mov edx, 0x0; jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x0000000012c704: jg short 0x000000000012c720; add rsp, 0x18; ret; 
0x0000000013e8e8: jg short 0x000000000013e908; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000013ea46: jg short 0x000000000013ea98; add rsp, 0x8; ret; 
0x0000000013ed38: jg short 0x000000000013ed78; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000001430d7: jg short 0x000000000014309c; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000143364: jg short 0x00000000001433a7; mov eax, edx; cmovs r8d, eax; mov eax, r8d; ret; 
0x00000000143385: jg short 0x00000000001433cb; mov eax, eax; ret; 
0x00000000149660: jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149619: jg short 0x0000000000149620; ret; 
0x00000000149b50: jg short 0x0000000000149b0d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000150d2c: jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000151ed4: jg short 0x0000000000151ec4; jmp qword ptr [rsi+0xf]; 
0x00000000152355: jg short 0x0000000000152359; or eax, 0x481b7500; mov [rip+0xd0276], ecx; mov eax, r8d; ret; 
0x0000000015517b: jg short 0x00000000001551df; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000155c2b: jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x000000001571c0: jg short 0x00000000001571c8; ret; 
0x0000000015d5c0: jg short 0x000000000015d60a; mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000163ac6: jg short 0x0000000000163b08; mov eax, [rdi]; test eax, eax; jne short 0x0000000000163ad0; ret; 
0x0000000016839d: jg short 0x0000000000168382; cld; jmp qword ptr [rsi+0x66]; 
0x00000000169c26: jg short 0x0000000000169c68; mov eax, [rdi]; test eax, eax; jne short 0x0000000000169c30; ret; 
0x000000001721a9: jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x00000000172200: jg short 0x0000000000172230; add rsp, 0x10; pop rbp; ret; 
0x00000000172280: jg short 0x00000000001722a0; add rsp, 0x10; pop rbp; ret; 
0x000000001722e9: jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x0000000017246c: jg short 0x00000000001724a0; add rsp, 0x10; pop rbp; ret; 
0x00000000172500: jg short 0x0000000000172530; add rsp, 0x10; pop rbp; ret; 
0x000000001725d7: jg short 0x00000000001725d0; jmp qword ptr [rsi+0xf]; 
0x00000000174fc6: jg short 0x0000000000174fd0; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x00000000175017: jg short 0x0000000000175021; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x0000000017afb1: jg short 0x000000000017afb9; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b3f5: jg short 0x000000000017b3b7; movaps [rdi+0x10], xmm3; jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b410: jg short 0x000000000017b412; lea r11, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b545: jg short 0x000000000017b507; movaps [rdi+0x10], xmm3; jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b560: jg short 0x000000000017b562; lea r11, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b695: jg short 0x000000000017b657; movaps [rdi+0x10], xmm3; jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b6b0: jg short 0x000000000017b6b2; lea r11, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b7e5: jg short 0x000000000017b7a7; movaps [rdi+0x10], xmm3; jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b800: jg short 0x000000000017b802; lea r11, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b935: jg short 0x000000000017b8f7; movaps [rdi+0x10], xmm3; jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b950: jg short 0x000000000017b952; lea r11, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba85: jg short 0x000000000017ba47; movaps [rdi+0x10], xmm3; jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017baa0: jg short 0x000000000017baa2; lea r11, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbd5: jg short 0x000000000017bb97; movaps [rdi+0x10], xmm3; jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bbf0: jg short 0x000000000017bbf2; lea r11, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca5: jg short 0x000000000017bca7; lea r11, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd25: jg short 0x000000000017bce7; movaps [rdi+0x10], xmm3; jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd40: jg short 0x000000000017bd42; lea r11, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be75: jg short 0x000000000017be37; movaps [rdi+0x10], xmm3; jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017be90: jg short 0x000000000017be92; lea r11, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfc5: jg short 0x000000000017bf87; movaps [rdi+0x10], xmm3; jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bfe0: jg short 0x000000000017bfe2; lea r11, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c115: jg short 0x000000000017c0d7; movaps [rdi+0x10], xmm3; jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c130: jg short 0x000000000017c132; lea r11, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c265: jg short 0x000000000017c227; movaps [rdi+0x10], xmm3; jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c280: jg short 0x000000000017c282; lea r11, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3b5: jg short 0x000000000017c377; movaps [rdi+0x10], xmm3; jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3d0: jg short 0x000000000017c3d2; lea r11, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c505: jg short 0x000000000017c4c7; movaps [rdi+0x10], xmm3; jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c520: jg short 0x000000000017c522; lea r11, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c655: jg short 0x000000000017c617; movaps [rdi+0x10], xmm3; jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c670: jg short 0x000000000017c672; lea r11, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017cfd9: jg short 0x000000000017d02a; ret; 
0x0000000017d020: jg short 0x000000000017d069; mov ebx, 0x4f7f0ff3; ret far; 
0x0000000017d025: jg short 0x000000000017d076; ret far; 
0x0000000017d05f: jg short 0x000000000017d0a8; ret; 
0x0000000017d09f: jg short 0x000000000017d0e8; ret far; 
0x0000000017ddd5: jg short 0x000000000017dd97; movaps [rdi+0x10], xmm3; jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ddf0: jg short 0x000000000017ddf2; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df25: jg short 0x000000000017dee7; movaps [rdi+0x10], xmm3; jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df40: jg short 0x000000000017df42; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e075: jg short 0x000000000017e037; movaps [rdi+0x10], xmm3; jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e090: jg short 0x000000000017e092; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1c5: jg short 0x000000000017e187; movaps [rdi+0x10], xmm3; jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e1e0: jg short 0x000000000017e1e2; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e315: jg short 0x000000000017e2d7; movaps [rdi+0x10], xmm3; jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e330: jg short 0x000000000017e332; lea r11, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e465: jg short 0x000000000017e427; movaps [rdi+0x10], xmm3; jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e480: jg short 0x000000000017e482; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5b5: jg short 0x000000000017e577; movaps [rdi+0x10], xmm3; jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5d0: jg short 0x000000000017e5d2; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e685: jg short 0x000000000017e687; lea r11, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e705: jg short 0x000000000017e6c7; movaps [rdi+0x10], xmm3; jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e720: jg short 0x000000000017e722; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e855: jg short 0x000000000017e817; movaps [rdi+0x10], xmm3; jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e870: jg short 0x000000000017e872; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9a5: jg short 0x000000000017e967; movaps [rdi+0x10], xmm3; jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9c0: jg short 0x000000000017e9c2; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eaf5: jg short 0x000000000017eab7; movaps [rdi+0x10], xmm3; jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eb10: jg short 0x000000000017eb12; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec45: jg short 0x000000000017ec07; movaps [rdi+0x10], xmm3; jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec60: jg short 0x000000000017ec62; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed95: jg short 0x000000000017ed57; movaps [rdi+0x10], xmm3; jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017edb0: jg short 0x000000000017edb2; lea r11, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eee5: jg short 0x000000000017eea7; movaps [rdi+0x10], xmm3; jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ef00: jg short 0x000000000017ef02; lea r11, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017f035: jg short 0x000000000017eff7; movaps [rdi+0x10], xmm3; jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017f050: jg short 0x000000000017f052; lea r11, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017f9b9: jg short 0x000000000017fa0a; ret; 
0x0000000017fa00: jg short 0x000000000017fa49; mov ebx, 0x4f7f0ff3; ret far; 
0x0000000017fa05: jg short 0x000000000017fa56; ret far; 
0x0000000017fa3f: jg short 0x000000000017fa88; ret; 
0x0000000017fa7f: jg short 0x000000000017fac8; ret far; 
0x00000000181fc8: jg short 0x0000000000182011; loope 0x0000000000181fbf; movq [rdi-0x10], mm1; ret; 
0x00000000182058: jg short 0x00000000001820a1; loop 0x000000000018204f; movq [rdi-0x10], mm1; ret; 
0x000000001820cf: jg short 0x0000000000182118; ret; 
0x000000001820e8: jg short 0x0000000000182131; jrcxz 0x00000000001820df; movq [rdi-0x10], mm1; ret; 
0x00000000182178: jg short 0x00000000001821c1; in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x000000001821f8: jg short 0x0000000000182241; in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000182278: jg short 0x00000000001822c1; out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x000000001822f8: jg short 0x0000000000182341; out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x000000001824d5: jg short 0x000000000018251e; mov ebx, 0x46f00ff2; ret far; 
0x000000001824df: jg short 0x0000000000182528; ret far; 
0x00000000182578: jg short 0x00000000001825c1; in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000001825f8: jg short 0x0000000000182641; in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182688: jg short 0x00000000001826d1; out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182708: jg short 0x0000000000182751; out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018277c: jg short 0x0000000000182785; ret; 
0x000000001827d6: jg short 0x00000000001827e7; ret; 
0x000000001827d1: jg short 0x000000000018281a; psllq mm1, [rdi]; jg short 0x00000000001827e7; ret; 
0x00000000182846: jg short 0x0000000000182857; ret; 
0x000000001828b6: jg short 0x00000000001828c7; ret; 
0x000000001828b1: jg short 0x00000000001828fa; or eax, 0xf7f0ff3; ret; 
0x00000000182926: jg short 0x0000000000182937; ret; 
0x00000000182921: jg short 0x000000000018296a; or al, 0xf3; movq [rdi], mm1; ret; 
0x00000000182996: jg short 0x00000000001829a7; ret; 
0x00000000182991: jg short 0x00000000001829da; or esi, ebx; movq [rdi], mm1; ret; 
0x00000000182a06: jg short 0x0000000000182a17; ret; 
0x00000000182a01: jg short 0x0000000000182a4a; or dh, bl; movq [rdi], mm1; ret; 
0x00000000182a76: jg short 0x0000000000182a87; ret; 
0x00000000182a71: jg short 0x0000000000182aba; or ebx, esi; movq [rdi], mm1; ret; 
0x00000000182ae6: jg short 0x0000000000182af7; ret; 
0x00000000182ae1: jg short 0x0000000000182b2a; or bl, dh; movq [rdi], mm1; ret; 
0x00000000182b56: jg short 0x0000000000182b67; ret; 
0x00000000182bc6: jg short 0x0000000000182bd7; ret; 
0x00000000182c36: jg short 0x0000000000182c47; ret; 
0x00000000182c31: jg short 0x0000000000182c7a; add eax, 0xf7f0ff3; ret; 
0x00000000182ca6: jg short 0x0000000000182cb7; ret; 
0x00000000182ca1: jg short 0x0000000000182cea; add al, 0xf3; movq [rdi], mm1; ret; 
0x00000000182d16: jg short 0x0000000000182d27; ret; 
0x00000000182d11: jg short 0x0000000000182d5a; add esi, ebx; movq [rdi], mm1; ret; 
0x00000000182d86: jg short 0x0000000000182d97; ret; 
0x00000000182d81: jg short 0x0000000000182dca; add dh, bl; movq [rdi], mm1; ret; 
0x00000000182df6: jg short 0x0000000000182e07; ret; 
0x00000000182df1: jg short 0x0000000000182e3a; add ebx, esi; movq [rdi], mm1; ret; 
0x00000000184af8: jg short 0x0000000000184b41; loope 0x0000000000184aef; movq [rdi-0x10], mm1; ret; 
0x00000000184b88: jg short 0x0000000000184bd1; loop 0x0000000000184b7f; movq [rdi-0x10], mm1; ret; 
0x00000000184bff: jg short 0x0000000000184c48; ret; 
0x00000000184c18: jg short 0x0000000000184c61; jrcxz 0x0000000000184c0f; movq [rdi-0x10], mm1; ret; 
0x00000000184ca8: jg short 0x0000000000184cf1; in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000184d28: jg short 0x0000000000184d71; in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000184da8: jg short 0x0000000000184df1; out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x00000000184e28: jg short 0x0000000000184e71; out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x00000000185005: jg short 0x000000000018504e; mov ebx, 0x46f00ff2; ret far; 
0x0000000018500f: jg short 0x0000000000185058; ret far; 
0x000000001850a8: jg short 0x00000000001850f1; in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x00000000185128: jg short 0x0000000000185171; in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000001851b8: jg short 0x0000000000185201; out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x00000000185238: jg short 0x0000000000185281; out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x000000001852ac: jg short 0x00000000001852b5; ret; 
0x00000000185306: jg short 0x0000000000185317; ret; 
0x00000000185301: jg short 0x000000000018534a; psllq mm1, [rdi]; jg short 0x0000000000185317; ret; 
0x00000000185376: jg short 0x0000000000185387; ret; 
0x000000001853e6: jg short 0x00000000001853f7; ret; 
0x000000001853e1: jg short 0x000000000018542a; or eax, 0xf7f0ff3; ret; 
0x00000000185456: jg short 0x0000000000185467; ret; 
0x00000000185451: jg short 0x000000000018549a; or al, 0xf3; movq [rdi], mm1; ret; 
0x000000001854c6: jg short 0x00000000001854d7; ret; 
0x000000001854c1: jg short 0x000000000018550a; or esi, ebx; movq [rdi], mm1; ret; 
0x00000000185536: jg short 0x0000000000185547; ret; 
0x00000000185531: jg short 0x000000000018557a; or dh, bl; movq [rdi], mm1; ret; 
0x000000001855a6: jg short 0x00000000001855b7; ret; 
0x000000001855a1: jg short 0x00000000001855ea; or ebx, esi; movq [rdi], mm1; ret; 
0x00000000185616: jg short 0x0000000000185627; ret; 
0x00000000185611: jg short 0x000000000018565a; or bl, dh; movq [rdi], mm1; ret; 
0x00000000185686: jg short 0x0000000000185697; ret; 
0x000000001856f6: jg short 0x0000000000185707; ret; 
0x00000000185766: jg short 0x0000000000185777; ret; 
0x00000000185761: jg short 0x00000000001857aa; add eax, 0xf7f0ff3; ret; 
0x000000001857d6: jg short 0x00000000001857e7; ret; 
0x000000001857d1: jg short 0x000000000018581a; add al, 0xf3; movq [rdi], mm1; ret; 
0x00000000185846: jg short 0x0000000000185857; ret; 
0x00000000185841: jg short 0x000000000018588a; add esi, ebx; movq [rdi], mm1; ret; 
0x000000001858b6: jg short 0x00000000001858c7; ret; 
0x000000001858b1: jg short 0x00000000001858fa; add dh, bl; movq [rdi], mm1; ret; 
0x00000000185926: jg short 0x0000000000185937; ret; 
0x00000000185921: jg short 0x000000000018596a; add ebx, esi; movq [rdi], mm1; ret; 
0x000000001989f4: jg short 0x0000000000198a04; pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x0000000000198aa0; ret; 
0x00000000199867: jg short 0x00000000001998b1; add eax, edi; vzeroupper; ret; 
0x0000000019da97: jg short 0x000000000019dae1; add eax, edi; vzeroupper; ret; 
0x0000000019dc97: jg short 0x000000000019dce1; add eax, edi; vzeroupper; ret; 
0x0000000019e192: jg short 0x000000000019e1a8; pextrw edi, mm5, 0x74; ret far; 
0x0000000019e3ec: jg short 0x000000000019e405; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019e40c: jg short 0x000000000019e425; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000019e86d: jg short 0x000000000019e883; pextrw edi, mm5, 0x74; ret far; 
0x0000000019ebcc: jg short 0x000000000019ebe5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019ebec: jg short 0x000000000019ec05; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000019ec8d: jg short 0x000000000019eca6; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019ecad: jg short 0x000000000019ecc6; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019ed29: jg short 0x000000000019ed8b; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x0000000019ef32: jg short 0x000000000019ef48; pextrw edi, mm5, 0x74; ret far; 
0x0000000019f18c: jg short 0x000000000019f1a5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000019f1ac: jg short 0x000000000019f1c5; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000019f32d: jg short 0x000000000019f343; pextrw edi, mm5, 0x74; ret far; 
0x0000000019f4ee: jg short 0x000000000019f4f1; jne 0x000000000019f920; vzeroupper; ret; 
0x0000000019f69c: jg short 0x000000000019f6a0; jne 0x000000000019f920; vzeroupper; ret; 
0x0000000019f6c0: jg short 0x000000000019f6c5; jne 0x000000000019f920; vzeroupper; ret; 
0x0000000019f6da: jg short 0x000000000019f6e0; jne 0x000000000019f920; vzeroupper; ret; 
0x0000000019f83d: jg short 0x000000000019f856; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000019f85d: jg short 0x000000000019f876; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x0000000019f87e: jg short 0x000000000019f897; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x0000000019f8e2: jg short 0x000000000019f8eb; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x0000000019fa29: jg short 0x000000000019fa8b; vzeroupper; ret; 
0x0000000019fc22: jg short 0x000000000019fc38; pextrw edi, mm5, 0x74; ret far; 
0x0000000019fe9c: jg short 0x000000000019feb5; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000019febc: jg short 0x000000000019fed5; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001a003d: jg short 0x00000000001a0053; pextrw edi, mm5, 0x74; ret far; 
0x000000001a0206: jg short 0x00000000001a0209; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001a03d0: jg short 0x00000000001a03d4; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001a03f4: jg short 0x00000000001a03f9; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001a040e: jg short 0x00000000001a0414; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001a056d: jg short 0x00000000001a0586; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001a058d: jg short 0x00000000001a05a6; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001a0612: jg short 0x00000000001a061b; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001a0759: jg short 0x00000000001a07bb; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x000000001a08d7: jg short 0x00000000001a08e0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001a0963: jg short 0x00000000001a096c; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001a09ae: jg short 0x00000000001a09b7; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a0b24: jg short 0x00000000001a0b28; vmovdqu [rcx], ymm0; vzeroupper; ret; 
0x000000001a0b28: jg short 0x00000000001a0b2b; vzeroupper; ret; 
0x000000001a0be9: jg short 0x00000000001a0beb; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001a0ba8: jg short 0x00000000001a0bee; cmp ah, al; vzeroupper; ret; 
0x000000001a0ba4: jg short 0x00000000001a0c06; vmovdqu [rdx+rdi-0x20], ymm8; vzeroupper; ret; 
0x000000001a0c4f: jg short 0x00000000001a0c51; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001a10ac: jg short 0x00000000001a10b5; vzeroupper; ret; 
0x000000001a1122: jg short 0x00000000001a1124; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001a1126: jg short 0x00000000001a116c; adc al, ah; vzeroupper; ret; 
0x000000001a1204: jg short 0x00000000001a1206; vmovdqu [rax+rdx-0x10], xmm0; vzeroupper; ret; 
0x000000001a1208: jg short 0x00000000001a124e; adc al, dh; vzeroupper; ret; 
0x000000001a28c7: jg short 0x00000000001a2911; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x000000001a2b47: jg short 0x00000000001a2b91; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x000000001a3ee4: jg short 0x00000000001a3eed; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x000000001a3f08: jg short 0x00000000001a3f11; vmovdqu [r9-0x20], ymm1; ret; 
0x000000001a3f1c: jg short 0x00000000001a3f25; vmovdqu [r9-0x10], xmm1; ret; 
0x000000001a438e: jg short 0x00000000001a4388; ret; 
0x000000001a45fb: jg short 0x00000000001a4604; vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a45f1: jg short 0x00000000001a460a; vmovdqu [rsi-0x20], ymm2; ret; 
0x000000001a45f5: jg short 0x00000000001a464d; loopne 0x00000000001a45bc; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a6855: jg short 0x00000000001a6860; neg eax; ret; 
0x000000001a68df: jg short 0x00000000001a68e9; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a696b: jg short 0x00000000001a6975; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a69cc: jg short 0x00000000001a69d5; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a69e7: jg short 0x00000000001a69f0; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001a6a16: jg short 0x00000000001a6a20; vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x000000001a6ba1: jg short 0x00000000001a6ba6; vmovdqu64 [rcx], zmm16; ret; 
0x000000001a6ba7: jg short 0x00000000001a6bab; ret; 
0x000000001a6c46: jg short 0x00000000001a6c4b; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a6c84: jg short 0x00000000001a6c87; ret; 
0x000000001a6c4b: jg short 0x00000000001a6c92; cmp bh, bh; ret; 
0x000000001a6c44: jg short 0x00000000001a6cc6; add esp, [rdx+0x61]; dec byte ptr [rax+0x7f]; cmp r15b, dil; ret; 
0x000000001a6cda: jg short 0x00000000001a6cdd; ret; 
0x000000001a716f: jg short 0x00000000001a7179; ret; 
0x000000001a71df: jg short 0x00000000001a71e2; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a7226: jg short 0x00000000001a7229; ret; 
0x000000001a71e5: jg short 0x00000000001a722c; adc bh, bh; ret; 
0x000000001a7225: jg short 0x00000000001a7270; jg short 0x00000000001a7229; ret; 
0x000000001a72f4: jg short 0x00000000001a72f6; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a7304: jg short 0x00000000001a7306; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001a72fa: jg short 0x00000000001a7340; adc bh, bh; ret; 
0x000000001a730a: jg short 0x00000000001a7350; adc bh, bh; ret; 
0x000000001a7e3e: jg short 0x00000000001a7e47; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a95b2: jg short 0x00000000001a95c8; pextrw edi, mm5, 0x74; ret far; 
0x000000001a99dd: jg short 0x00000000001a99f3; pextrw edi, mm5, 0x74; ret far; 
0x000000001aa612: jg short 0x00000000001aa628; pextrw edi, mm5, 0x74; ret far; 
0x000000001aa9c2: jg short 0x00000000001aa9d8; pextrw edi, mm5, 0x74; ret far; 
0x000000001ab23d: jg short 0x00000000001ab253; pextrw edi, mm5, 0x74; ret far; 
0x000000001abeed: jg short 0x00000000001abf03; pextrw edi, mm5, 0x74; ret far; 
0x000000001aeedd: jg short 0x00000000001aeee6; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aef69: jg short 0x00000000001aef72; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aefb2: jg short 0x00000000001aefbb; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001aefe5: jg short 0x00000000001aefee; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001af15c: jg short 0x00000000001af160; vmovdqu64 [rcx], ymm16; ret; 
0x000000001af162: jg short 0x00000000001af165; ret; 
0x000000001af1fc: jg short 0x00000000001af201; vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001af233: jg short 0x00000000001af235; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001af202: jg short 0x00000000001af248; cmp bh, bh; ret; 
0x000000001af292: jg short 0x00000000001af294; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001afaed: jg short 0x00000000001afaf6; ret; 
0x000000001afb5d: jg short 0x00000000001afb5f; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001afba4: jg short 0x00000000001afba6; ret; 
0x000000001afb63: jg short 0x00000000001afba9; adc bh, bh; ret; 
0x000000001afba2: jg short 0x00000000001afbcd; jg short 0x00000000001afba6; ret; 
0x000000001afc28: jg short 0x00000000001afc2b; vmovdqu64 [rcx+0x20], ymm16; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001afc64: jg short 0x00000000001afc66; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001afc6a: jg short 0x00000000001afcb0; adc bh, bh; ret; 
0x000000001b000b: jg short 0x00000000001b008c; jmp qword ptr [rdx-0x1f]; 
0x000000001b0225: jg short 0x00000000001b023e; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b0255: jg short 0x00000000001b026e; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b04e5: jg short 0x00000000001b0566; jmp qword ptr [rdx-0x1f]; 
0x000000001b062e: jg short 0x00000000001b0631; jne 0x00000000001b0ac0; ret; 
0x000000001b07f0: jg short 0x00000000001b07f4; jne 0x00000000001b0ac0; ret; 
0x000000001b0814: jg short 0x00000000001b0819; jne 0x00000000001b0ac0; ret; 
0x000000001b082e: jg short 0x00000000001b0834; jne 0x00000000001b0ac0; ret; 
0x000000001b09b2: jg short 0x00000000001b09cb; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b09e2: jg short 0x00000000001b09fb; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b0a14: jg short 0x00000000001b0a2d; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x000000001b0a1a: jg short 0x00000000001b0a7b; add [rax-0x72b7bfb1], ecx; ret; 
0x000000001b0a84: jg short 0x00000000001b0a8d; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b0bf1: jg short 0x00000000001b0bf6; lea rax, [rdi+0x80]; ret; 
0x000000001b120b: jg short 0x00000000001b128c; jmp qword ptr [rdx-0x1f]; 
0x000000001b1415: jg short 0x00000000001b142e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b1445: jg short 0x00000000001b145e; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b1fbb: jg short 0x00000000001b203c; jmp qword ptr [rdx-0x1f]; 
0x000000001b21c5: jg short 0x00000000001b21de; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b21f5: jg short 0x00000000001b220e; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b2925: jg short 0x00000000001b29a6; jmp qword ptr [rdx-0x1f]; 
0x000000001b2c05: jg short 0x00000000001b2c1e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b2c35: jg short 0x00000000001b2c4e; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b2ce2: jg short 0x00000000001b2cfb; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b2d12: jg short 0x00000000001b2d2b; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b2d44: jg short 0x00000000001b2d5d; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x000000001b2db1: jg short 0x00000000001b2db6; mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001b2db0: jg short 0x00000000001b2e31; add eax, esi; xchg [rax], eax; ret; 
0x000000001b36a5: jg short 0x00000000001b3726; jmp qword ptr [rdx-0x1f]; 
0x000000001b37e6: jg short 0x00000000001b37e9; jne 0x00000000001b3c30; ret; 
0x000000001b399c: jg short 0x00000000001b39a0; jne 0x00000000001b3c30; ret; 
0x000000001b39c0: jg short 0x00000000001b39c5; jne 0x00000000001b3c30; ret; 
0x000000001b39da: jg short 0x00000000001b39e0; jne 0x00000000001b3c30; ret; 
0x000000001b3b42: jg short 0x00000000001b3b5b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b3b62: jg short 0x00000000001b3b7b; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b3b84: jg short 0x00000000001b3b9d; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001b3bf4: jg short 0x00000000001b3bfd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b3d61: jg short 0x00000000001b3d66; ret; 
0x000000001b81b4: jg short 0x00000000001b81b6; add [rcx], dh; shr cl, 0x48; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000001bb9cf: jg short 0x00000000001bb9f0; pop rbx; ret; 
0x000000001bbded: jg short 0x00000000001bbdb4; out 0xff, al; nop [rax]; ret; 
0x00000000045d9b: jge short 0x0000000000045da5; call rax; 
0x00000000053112: jge short 0x0000000000053114; cmp cl, [rdi]; xchg esp, eax; ret; 
0x00000000054db8: jge short 0x0000000000054e03; shl ecx, cl; mov [rdi], r9; ret; 
0x000000000710b0: jge short 0x00000000000710cc; add [rcx-0x7d], al; iretd; jmp qword ptr [rdi+rax*8]; 
0x0000000008153b: jge short 0x0000000000081537; jmp qword ptr [rsi-0x70]; 
0x0000000008c994: jge short 0x000000000008c996; sbb eax, 0xe9ebe374; nop [rax+rax]; xor eax, eax; ret; 
0x00000000090072: jge short 0x0000000000090084; call qword ptr [rbx+0x360]; 
0x000000000902a2: jge short 0x00000000000902b4; call qword ptr [r12+0x360]; 
0x0000000009030a: jge short 0x000000000009031c; call qword ptr [r12+0x360]; 
0x00000000091a13: jge short 0x0000000000091a14; jmp qword ptr [rsi+0x2e]; 
0x0000000009d436: jge short 0x000000000009d440; call qword ptr [rbp]; 
0x000000000c5d59: jge short 0x00000000000c5d5b; movzx esi, bl; call rbp; 
0x000000000c5e01: jge short 0x00000000000c5e03; push 0x0; lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x000000000ecf19: jge short 0x00000000000ecf1b; add [rax+0x7f], bh; cmove rax, rdx; ret; 
0x000000000ecf56: jge short 0x00000000000ecf58; add [rax+0x7f], bh; cmove rax, rdx; ret; 
0x000000000ee792: jge short 0x00000000000ee809; ret far; 
0x000000001168a2: jge short 0x00000000001168bc; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116b92: jge short 0x0000000000116bac; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000116bfa: jge short 0x0000000000116c14; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000118d8f: jge short 0x0000000000118d89; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x0000000011fe15: jge short 0x000000000011fe17; call rbx; 
0x0000000011fea5: jge short 0x000000000011fea7; call rbx; 
0x0000000011fe98: jge short 0x000000000011feaa; test rdi, rdi; jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x0000000011fed8: jge short 0x000000000011feda; call rbx; 
0x0000000011fecb: jge short 0x000000000011fedd; test rdi, rdi; jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011ff0d: jge short 0x000000000011ff0f; call rbx; 
0x0000000011ff00: jge short 0x000000000011ff12; test rdi, rdi; jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011ff35: jge short 0x000000000011ff37; call rbx; 
0x0000000011ff2c: jge short 0x000000000011ff3e; test rdi, rdi; jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120c3e: jge short 0x0000000000120c40; call rbx; 
0x00000000120ced: jge short 0x0000000000120cef; call rbx; 
0x00000000120ce0: jge short 0x0000000000120cf2; test rdi, rdi; jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x00000000120d19: jge short 0x0000000000120d1b; call rbx; 
0x00000000120d10: jge short 0x0000000000120d22; test rdi, rdi; jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x00000000120d45: jge short 0x0000000000120d47; call rbx; 
0x00000000120d3c: jge short 0x0000000000120d4e; test rdi, rdi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000122447: jge short 0x00000000001224b3; str [rax-0x7d]; call qword ptr [rax]; 
0x00000000126c05: jge short 0x0000000000126c07; add [rax], al; syscall; 
0x0000000013333a: jge short 0x00000000001332c4; call rax; 
0x0000000013332c: jge short 0x0000000000133316; mov rdx, r12; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x00000000133731: jge short 0x00000000001336bb; call rax; 
0x000000001338ea: jge short 0x0000000000133874; call rax; 
0x00000000133a0e: jge short 0x0000000000133998; call rax; 
0x00000000133a04: jge short 0x0000000000133a7e; mov [rbp-0x80], edx; mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x00000000139638: jge short 0x0000000000139630; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000014128b: jge short 0x000000000014122d; syscall; 
0x00000000142050: jge short 0x0000000000142041; jmp qword ptr [rsi+0x66]; 
0x00000000153683: jge short 0x0000000000153685; call qword ptr [rsp+0x20]; 
0x0000000015899f: jge short 0x000000000015897e; std; jmp qword ptr [rsi+0x66]; 
0x0000000015da48: jge short 0x000000000015da4a; test rdi, rdi; je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000160733: jge short 0x0000000000160735; add rbx, rax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x00000000160803: jge short 0x0000000000160805; add rbx, rax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x00000000165a58: jge short 0x0000000000165ac2; call rax; 
0x000000001664f8: jge short 0x0000000000166552; call rax; 
0x00000000167f53: jge short 0x0000000000167f55; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000168bbf: jge short 0x0000000000168bd5; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000171ee6: jge short 0x0000000000171ee2; dec dword ptr [rax-0x77]; ret; 
0x00000000175047: jge short 0x0000000000175087; or al, [rax]; jmp qword ptr [rax+0x350]; 
0x00000000176402: jge short 0x0000000000176479; ret far; 
0x0000000017b1d9: jge short 0x000000000017b1e1; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b1742: jge short 0x00000000001b1737; bsf eax, eax; add rax, rdi; ret; 
0x000000001bab1d: jge short 0x00000000001bab2f; add rdi, rbp; call r12; 
0x00000000199a75: jl 0x0000000000199b10; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000199a24: jl 0x0000000000199b10; add rax, rdi; vzeroupper; ret; 
0x000000001af8fb: jl 0x00000000001af990; add eax, 0x40; add rax, rdi; ret; 
0x000000001af8b0: jl 0x00000000001af990; add rax, rdi; ret; 
0x000000000298ad: jl short 0x00000000000298d3; adc [rax], al; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000002d27e: jl short 0x000000000002d2a4; push rax; mov rax, [rsp+0x28]; call rax; 
0x0000000002d38e: jl short 0x000000000002d3b4; sbb [rax-0x7d], cl; ret; 
0x0000000002d83e: jl short 0x000000000002d864; pop rax; mov rax, [rsp+0x18]; call rax; 
0x0000000002e048: jl short 0x000000000002e06e; push rax; mov rax, [rsp+0x28]; call rax; 
0x0000000002e61a: jl short 0x000000000002e640; pop rax; mov rax, [rsp+0x18]; call rax; 
0x0000000002ee5a: jl short 0x000000000002ee80; push rax; mov rax, [rsp+0x18]; call rax; 
0x0000000002f4d0: jl short 0x000000000002f4f6; push rax; call r13; 
0x000000000301c9: jl short 0x00000000000301ef; call r14; 
0x000000000311b8: jl short 0x00000000000311de; mov rax, [rsp+0x28]; call rax; 
0x000000000321ca: jl short 0x00000000000321f0; mov rax, [rsp+0x18]; call rax; 
0x00000000032b80: jl short 0x0000000000032ba6; push rax; call r13; 
0x00000000033973: jl short 0x0000000000033999; mov rax, [rsp+0x10]; call rax; 
0x00000000034340: jl short 0x0000000000034366; push rax; call r13; 
0x000000000376de: jl short 0x0000000000037717; jmp far fword ptr [rsi]; 
0x000000000427f8: jl short 0x000000000004281e; or [rsi+0x8], bh; mov r8d, eax; mov eax, 0x82; syscall; 
0x00000000046cb5: jl short 0x0000000000046cdb; or [rax+0x13e], bh; syscall; 
0x00000000050fb1: jl short 0x0000000000050fd7; jmp far fword ptr [rdi]; 
0x00000000050fd7: jl short 0x0000000000050ffd; jmp far fword ptr [rdi]; 
0x000000000512ed: jl short 0x0000000000051313; jmp far fword ptr [rdi]; 
0x00000000051414: jl short 0x000000000005143a; jmp far fword ptr [rdi]; 
0x00000000051d0b: jl short 0x0000000000051d31; adc [rcx-0x75], cl; ret; 
0x000000000614b2: jl short 0x00000000000614c9; jmp far fword ptr [rdi]; 
0x0000000007d792: jl short 0x000000000007d7b8; or [rbp+0x7a850fc9], al; add [rax], eax; add [rax-0x73], cl; jmp qword ptr [r14+0x48]; 
0x0000000007d90b: jl short 0x000000000007d931; or [rbx-0x7bf00002], al; ret; 
0x00000000081663: jl short 0x000000000008165f; jmp qword ptr [rsi+0x2e]; 
0x0000000008b09d: jl short 0x000000000008b0c3; or al, ch; ret far; 
0x00000000092f8e: jl short 0x0000000000092f30; sub [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x000000000980df: jl short 0x0000000000098105; or bl, ch; ret far; 
0x0000000009e617: jl short 0x000000000009e608; je short 0x000000000009e624; xor eax, eax; ret; 
0x0000000009e667: jl short 0x000000000009e658; mov edx, 0x0; cmovne rax, rdx; ret; 
0x000000000a376d: jl short 0x00000000000a3793; or al, ch; ret far; 
0x000000000b50ca: jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000000b50da: jl short 0x00000000000b5130; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b50fa: jl short 0x00000000000b5130; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b511a: jl short 0x00000000000b5130; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c5165: jl short 0x00000000000c5177; clc; ret; 
0x000000000c516c: jl short 0x00000000000c517e; cld; ret; 
0x000000000d911a: jl short 0x00000000000d9140; push rax; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000e813d: jl short 0x00000000000e8163; xor [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x58]; 
0x000000000e853e: jl short 0x00000000000e8564; or [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x58]; 
0x000000000ea495: jl short 0x00000000000ea4bb; adc [rax+0x3d], bh; syscall; 
0x000000000ec3d5: jl short 0x00000000000ec3d7; add [rax], al; syscall; 
0x000000000ee61a: jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x000000000f4121: jl short 0x00000000000f4190; mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000fbe9d: jl short 0x00000000000fbea4; add al, ch; ret far; 
0x00000000112553: jl short 0x0000000000112579; xor [rax-0x7d], cl; ret; 
0x000000001148e9: jl short 0x000000000011490f; sbb [rax+0x101], bh; syscall; 
0x00000000114a65: jl short 0x0000000000114a8b; or [rax+0x1], bh; syscall; 
0x00000000114f5d: jl short 0x0000000000114f83; or [rax+0x48], bh; syscall; 
0x0000000011512e: jl short 0x0000000000115154; or al, 0x41; mov eax, eax; mov eax, 0x3; syscall; 
0x00000000115406: jl short 0x000000000011542c; adc [rax-0x75], cl; jl short 0x0000000000115431; adc [rax+0x4f], bh; syscall; 
0x0000000011540b: jl short 0x0000000000115431; adc [rax+0x4f], bh; syscall; 
0x000000001175dc: jl short 0x00000000001175e4; jmp far fword ptr [rdi]; 
0x00000000118874: jl short 0x0000000000118887; jmp far fword ptr [rdi]; 
0x00000000118d75: jl short 0x0000000000118d9b; or [rax+0x7], bh; syscall; 
0x00000000118e71: jl short 0x0000000000118e97; or [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x00000000119906: jl short 0x000000000011992c; sbb [rax+0x115], bh; syscall; 
0x000000001199b5: jl short 0x00000000001199db; or [rax+0x11d], bh; syscall; 
0x0000000011ab93: jl short 0x000000000011abb9; or [rax+0x13], bh; syscall; 
0x0000000011ac33: jl short 0x000000000011ac59; or [rax+0x14], bh; syscall; 
0x0000000011ba4e: jl short 0x000000000011ba74; or al, 0x41; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000011bb0e: jl short 0x000000000011bb34; or al, 0x41; mov eax, eax; mov eax, 0x4b; syscall; 
0x0000000011ecc5: jl short 0x000000000011eceb; or [rax+0x1a], bh; syscall; 
0x00000000120c6d: jl short 0x0000000000120c93; adc [rax-0x7b], cl; push qword ptr [rbp+0x4b]; mov rdi, [r12]; call rbx; 
0x00000000125ba9: jl short 0x0000000000125bbe; je short 0x0000000000125bae; ret; 
0x00000000126084: jl short 0x00000000001260aa; or [rax+0x114], bh; syscall; 
0x000000001262a1: jl short 0x00000000001262c7; or [rax+0x130], bh; syscall; 
0x000000001269f0: jl short 0x0000000000126a0a; je short 0x00000000001269f5; ret; 
0x00000000127605: jl short 0x000000000012762b; or al, 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x000000001276d1: jl short 0x00000000001276f7; or [rax+0x2a], bh; syscall; 
0x000000001279e5: jl short 0x0000000000127a0b; or [rax+0x2f], bh; syscall; 
0x00000000127b43: jl short 0x0000000000127b69; or [rax+0x2e], bh; syscall; 
0x00000000127ed6: jl short 0x0000000000127efc; sbb [rax+0x120], bh; syscall; 
0x00000000128044: jl short 0x000000000012806a; or al, 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x000000001282a6: jl short 0x00000000001282cc; sbb [rax+0x45], bh; syscall; 
0x0000000013eeca: jl short 0x000000000013eef0; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x000000001421ee: jl short 0x00000000001421df; jmp qword ptr [rsi+0x66]; 
0x000000001433d0: jl short 0x000000000014343c; out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000014bfd8: jl short 0x000000000014bffe; or [rbp+rax-0x18], dh; mov es, bx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000153c39: jl short 0x0000000000153c5f; push 0xffffffff894cd231; test byte ptr [rax-0x77], 0xdf; mov rcx, r15; call r12; 
0x0000000015b7ca: jl short 0x000000000015b7f0; sub al, ch; sahf; ret far; 
0x0000000015d53d: jl short 0x000000000015d563; push rax; call qword ptr [rax+0x20]; 
0x0000000015e401: jl short 0x000000000015e427; sbb [rdi], cl; adc [rsp], edx; call qword ptr [rax]; 
0x0000000015ede9: jl short 0x000000000015edf2; add [rcx+0x146348c2], cl; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x000000001606f1: jl short 0x00000000001606df; jmp qword ptr [rsi+0x66]; 
0x000000001606f0: jl short 0x000000000016076e; in al, dx; jmp qword ptr [rsi+0x66]; 
0x000000001624e5: jl short 0x00000000001624f6; ret far; 
0x000000001666d7: jl short 0x00000000001666fd; push 0x4c388b48; mov esi, edi; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000016882d: jl short 0x0000000000168853; sbb al, 0xe8; ret far; 
0x0000000016b9a0: jl short 0x000000000016b94f; cld; jmp qword ptr [rsi+0x66]; 
0x00000000171ca0: jl short 0x0000000000171cec; cld; jmp qword ptr [rsi+0x66]; 
0x00000000173c30: jl short 0x0000000000173c46; cld; jmp qword ptr [rsi+0x2e]; 
0x00000000174c18: jl short 0x0000000000174c1a; add [rax], al; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x000000001750b2: jl short 0x00000000001750d8; adc [rbp+rcx*4+0x44], cl; and al, 0x20; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x00000000175187: jl short 0x00000000001751ad; and [rbp+rcx*4+0x44], cl; and al, 0x30; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017628a: jl short 0x0000000000176290; jmp far fword ptr [rdi]; 
0x0000000017b2ca: jl short 0x000000000017b2d2; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000199ada: jl short 0x0000000000199b10; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000199afa: jl short 0x0000000000199b10; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000019a258: jl short 0x000000000019a270; cld; sub ecx, edi; or eax, ecx; ret; 
0x0000000019f555: jl short 0x000000000019f56e; and ecx, ebp; ret; 
0x0000000019f6a0: jl short 0x000000000019f6a4; add [rax], al; vzeroupper; ret; 
0x000000001a1215: jl short 0x00000000001a1227; clc; vzeroupper; ret; 
0x000000001a1223: jl short 0x00000000001a1235; cld; vzeroupper; ret; 
0x000000001a1c8a: jl short 0x00000000001a1c9a; cmp edi, [rdx+rcx+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1c8e: jl short 0x00000000001a1c9a; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a3e7a: jl short 0x00000000001a3ec4; adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a3e81: jl short 0x00000000001a3ecb; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x000000001a3e88: jl short 0x00000000001a3ed2; adc [rcx-0x1], edi; ret; 
0x000000001a3eb6: jl short 0x00000000001a3f00; adc [rdi+0x1], ecx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a3ebd: jl short 0x00000000001a3f07; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x000000001a3ec4: jl short 0x00000000001a3f0e; adc [rcx-0x1], ebx; ret; 
0x000000001a40b4: jl short 0x00000000001a40fe; adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a40bb: jl short 0x00000000001a4105; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x000000001a40c2: jl short 0x00000000001a410c; adc [rcx-0x1], edi; ret; 
0x000000001a421b: jl short 0x00000000001a4265; adc [rcx+0x5], ebp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4222: jl short 0x00000000001a426c; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4229: jl short 0x00000000001a4273; adc [rcx+0x7], edi; ret; 
0x000000001a437d: jl short 0x00000000001a43c7; adc [rdi-0x6], ebp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4384: jl short 0x00000000001a43ce; adc [rdi-0x7], esi; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a438b: jl short 0x00000000001a43d5; adc [rdi-0x8], edi; ret; 
0x000000001a45a2: jl short 0x00000000001a45ec; adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45a9: jl short 0x00000000001a45f3; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45b0: jl short 0x00000000001a45fa; adc [rsi-0x1], edx; ret; 
0x000000001a45c3: jl short 0x00000000001a460d; adc [rdi+0x1], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45ca: jl short 0x00000000001a4614; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45d1: jl short 0x00000000001a461b; adc [rsi-0x1], edx; ret; 
0x000000001a45de: jl short 0x00000000001a4628; adc [rdi], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45e4: jl short 0x00000000001a462e; adc [rsi-0x1], edx; ret; 
0x000000001a46ab: jl short 0x00000000001a46f5; adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a46b2: jl short 0x00000000001a46fc; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a46b9: jl short 0x00000000001a4703; adc [rsi-0x1], edx; ret; 
0x000000001a4703: jl short 0x00000000001a474d; adc [rsi+0x1], edx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a470a: jl short 0x00000000001a4754; adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a4711: jl short 0x00000000001a475b; adc [rsi+0x3], edx; ret; 
0x000000001a47a0: jl short 0x00000000001a47ea; adc [rsi+0x5], edx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47a7: jl short 0x00000000001a47f1; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47ae: jl short 0x00000000001a47f8; adc [rsi+0x7], edx; ret; 
0x000000001a6acc: jl short 0x00000000001a6ae5; cld; ret; 
0x000000001a7315: jl short 0x00000000001a7327; clc; ret; 
0x000000001a731c: jl short 0x00000000001a732e; cld; ret; 
0x000000001a7c78: jl short 0x00000000001a7c90; cld; sub ecx, edi; or eax, ecx; ret; 
0x000000001ac125: jl short 0x00000000001ac13e; and ecx, ebp; ret; 
0x000000001af08c: jl short 0x00000000001af0a5; cld; ret; 
0x000000001af95a: jl short 0x00000000001af990; add eax, 0x20; add rax, rdi; ret; 
0x000000001af97a: jl short 0x00000000001af990; add eax, 0x60; add rax, rdi; ret; 
0x000000001afc75: jl short 0x00000000001afc87; clc; ret; 
0x000000001afc7c: jl short 0x00000000001afc8e; cld; ret; 
0x000000001b0859: jl short 0x00000000001b0872; add [rdi], ecx; test [rsi+0x2], ebx; add [rax], al; ret; 
0x000000001b3ab0: jl short 0x00000000001b3ab3; add [rax], al; ret; 
0x000000001b49a0: jl short 0x00000000001b49b0; cmp edi, [rdx+rcx+0x40]; jne 0x00000000001b4610; ret; 
0x000000001b49a4: jl short 0x00000000001b49b0; jne 0x00000000001b4610; ret; 
0x000000001989fe: jle 0x0000000000198aa0; ret; 
0x00000000035e12: jle short 0x0000000000035e1c; sub eax, 0x1; mov [rdx+0x8], eax; pop rbx; ret; 
0x0000000004055e: jle short 0x000000000004055e; call far fword ptr [rbp+0x4c]; 
0x000000000405f2: jle short 0x00000000000405f2; jmp qword ptr [rsi+0xf]; 
0x000000000413e1: jle short 0x00000000000413a5; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000045e18: jle short 0x0000000000045dda; ret; 
0x00000000080f91: jle short 0x0000000000080fdb; mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x000000000918ab: jle short 0x00000000000918ac; jmp qword ptr [rsi-0x70]; 
0x000000000923b0: jle short 0x0000000000092422; ret; 
0x00000000099c5b: jle short 0x0000000000099c40; mov eax, [rip+0x17f651]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a9a9b: jle short 0x00000000000a9a9d; add [rax-0x73], cl; adc eax, 0xe60ab; cmovne rax, rdx; ret; 
0x000000000baa51: jle short 0x00000000000baa9b; bsf eax, edx; ret; 
0x000000000d9051: jle short 0x00000000000d902b; movaps [rsp], xmm3; call rbx; 
0x000000000da3df: jle short 0x00000000000da3d9; call far fword ptr [rdx+0x59]; 
0x000000000da4ca: jle short 0x00000000000da4c4; call far fword ptr [rcx+0x5e]; 
0x000000000ecebd: jle short 0x00000000000ecee8; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne short 0x00000000000eced0; ret; 
0x000000000ecfa1: jle short 0x00000000000ecfa3; add [rax], al; ret; 
0x000000000ed120: jle short 0x00000000000ed130; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000112f6b: jle short 0x0000000000112fdd; ret; 
0x00000000112fb7: jle short 0x0000000000113029; movups [rdi+0x78], xmm7; ret; 
0x00000000113973: jle short 0x00000000001139e5; ret; 
0x000000001139fc: jle short 0x0000000000113a6e; movups [rdi+0xf8], xmm7; ret; 
0x00000000126c35: jle short 0x0000000000126c37; add [rax], al; syscall; 
0x00000000127b5e: jle short 0x0000000000127aef; idiv bh; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000012805e: jle short 0x0000000000127fea; idiv bh; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x00000000133727: jle short 0x0000000000133759; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x000000001338e0: jle short 0x0000000000133912; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x00000000144822: jle short 0x0000000000144829; cmp byte ptr [rbx], 0x2e; je short 0x0000000000144830; pop rbx; ret; 
0x00000000166ea0: jle short 0x0000000000166ea1; inc dword ptr [rbp+0x497974c0]; mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000017b0b0: jle short 0x000000000017b0b8; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b11a: jle short 0x000000000017b122; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000019879c: jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x000000001a0ba7: jle short 0x00000000001a0c28; cmp r12b, al; vzeroupper; ret; 
0x000000001156d1: jmp far fword ptr [r15]; 
0x000000000bf3e6: jmp far fword ptr [rax+0x16850f10]; 
0x000000000bf3d4: jmp far fword ptr [rax+0x18850f08]; 
0x00000000144e87: jmp far fword ptr [rax+0x20840f01]; 
0x000000000ff40c: jmp far fword ptr [rax+0x21850f10]; 
0x000000000bf3f8: jmp far fword ptr [rax+0x24850f20]; 
0x000000000956f0: jmp far fword ptr [rax+0x311e7540]; 
0x000000000bf40a: jmp far fword ptr [rax+0x32850f40]; 
0x000000000f8283: jmp far fword ptr [rax+0x410a7508]; 
0x000000000f8249: jmp far fword ptr [rax+0x48607408]; 
0x000000000ffc41: jmp far fword ptr [rax+0x4d7a7401]; 
0x000000000fce5e: jmp far fword ptr [rax+0x62840f01]; 
0x000000000ff398: jmp far fword ptr [rax+0x6850f01]; 
0x00000000141a7c: jmp far fword ptr [rax+0x850f02]; 
0x000000000bf3c2: jmp far fword ptr [rax+0xa850f04]; 
0x000000000bf3b0: jmp far fword ptr [rax+0xc850f02]; 
0x0000000006b2c4: jmp far fword ptr [rax+0xf]; 
0x000000000ffb52: jmp far fword ptr [rax-0x17bf0ff]; 
0x0000000007489c: jmp far fword ptr [rax-0x2b7bf0f0]; 
0x0000000005ac68: jmp far fword ptr [rax-0x337af0f0]; 
0x0000000009b316: jmp far fword ptr [rax-0x3a7bf0ff]; 
0x000000000f81c4: jmp far fword ptr [rax-0x3d7bf0f8]; 
0x000000000fbb4b: jmp far fword ptr [rax-0x407bf0f8]; 
0x000000000d80a9: jmp far fword ptr [rax-0x417af010]; 
0x00000000131c24: jmp far fword ptr [rax-0x4d7bf0fe]; 
0x000000000feb69: jmp far fword ptr [rax-0x5b7bf0ff]; 
0x0000000009a469: jmp far fword ptr [rax-0x687bf0ff]; 
0x000000000f8202: jmp far fword ptr [rax-0x6b7bf0f8]; 
0x0000000009aca7: jmp far fword ptr [rax-0x6e7bf0ff]; 
0x000000000943fe: jmp far fword ptr [rax-0x72f58aff]; 
0x0000000010a129: jmp far fword ptr [rax-0x737af080]; 
0x0000000009b42c: jmp far fword ptr [rax-0x766c8bff]; 
0x0000000009a582: jmp far fword ptr [rax-0x766d8bff]; 
0x0000000016ea0d: jmp far fword ptr [rax-0x7cc98aff]; 
0x000000000daf77: jmp far fword ptr [rax-0xf7af0fd]; 
0x000000000d9f3e: jmp far fword ptr [rax]; 
0x0000000005bcf0: jmp far fword ptr [rbp+0x7f]; 
0x0000000013a67d: jmp far fword ptr [rbp+rsi*8-0x1]; 
0x00000000123da5: jmp far fword ptr [rbx+0xb]; 
0x00000000077a9d: jmp far fword ptr [rbx+rcx]; 
0x000000000475d0: jmp far fword ptr [rbx]; 
0x0000000008cf03: jmp far fword ptr [rcx+0x202]; 
0x000000001255de: jmp far fword ptr [rcx+0x400000]; 
0x000000000dd380: jmp far fword ptr [rcx+0x528]; 
0x000000001096ad: jmp far fword ptr [rcx+0x63490003]; 
0x0000000006d0ad: jmp far fword ptr [rcx+rax]; 
0x000000000daf7f: jmp far fword ptr [rcx-0x30]; 
0x0000000004632f: jmp far fword ptr [rcx-0x40]; 
0x000000000da7f1: jmp far fword ptr [rcx-0x40]; 
0x00000000056634: jmp far fword ptr [rcx]; 
0x000000000a41e8: jmp far fword ptr [rdi+0x32760000]; 
0x00000000073536: jmp far fword ptr [rdi+0xf000000]; 
0x0000000006b2a6: jmp far fword ptr [rdi+rcx-0x7c]; 
0x000000000da649: jmp far fword ptr [rdi-0x1]; 
0x000000000a6aac: jmp far fword ptr [rdi-0x78f10000]; 
0x0000000002c08d: jmp far fword ptr [rdi]; 
0x00000000167630: jmp far fword ptr [rdx+0x1e]; 
0x0000000010aaae: jmp far fword ptr [rdx]; 
0x0000000006afa4: jmp far fword ptr [rdx]; 
0x000000000376e0: jmp far fword ptr [rsi]; 
0x00000000053106: jmp far fword ptr [rsp+rsi*2]; 
0x000000001aed74: jmp qword ptr [edx-0x5d]; 
0x000000001a435d: jmp qword ptr [r10+0x71]; 
0x000000001a4315: jmp qword ptr [r10-0x2f]; 
0x000000001a42a4: jmp qword ptr [r10-0xf]; 
0x000000000f57f9: jmp qword ptr [r14+0x41]; 
0x0000000007d79f: jmp qword ptr [r14+0x48]; 
0x000000000bd203: jmp qword ptr [r14+0x66]; 
0x000000000bb508: jmp qword ptr [r14+0xf]; 
0x00000000042398: jmp qword ptr [r8+r9*2-0x75]; 
0x000000000524a6: jmp qword ptr [r8]; 
0x0000000015d20a: jmp qword ptr [rax+0x18]; 
0x0000000008fe57: jmp qword ptr [rax+0x28]; 
0x0000000008fea7: jmp qword ptr [rax+0x30]; 
0x0000000017504b: jmp qword ptr [rax+0x350]; 
0x00000000175cab: jmp qword ptr [rax+0x378]; 
0x0000000016c974: jmp qword ptr [rax+0x40]; 
0x0000000016c984: jmp qword ptr [rax+0x48]; 
0x00000000199dcb: jmp qword ptr [rax+0x73]; 
0x0000000016b544: jmp qword ptr [rax+0x8]; 
0x0000000006357f: jmp qword ptr [rax+rax]; 
0x0000000008e784: jmp qword ptr [rax+rcx*2+0x33]; 
0x0000000010aa77: jmp qword ptr [rax+rcx*2+0x3]; 
0x00000000091782: jmp qword ptr [rax+rcx*2-0x39]; 
0x00000000037f7c: jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000168a51: jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000009d4a0: jmp qword ptr [rax+rcx*2-0x77]; 
0x000000000f034d: jmp qword ptr [rax-0x3]; 
0x00000000164b1d: jmp qword ptr [rax-0x3f7a0001]; 
0x00000000161c0d: jmp qword ptr [rax-0x3f7b0000]; 
0x00000000051ac5: jmp qword ptr [rax]; 
0x00000000067263: jmp qword ptr [rbp+0x31]; 
0x0000000006698d: jmp qword ptr [rbp+0x48]; 
0x0000000002a90d: jmp qword ptr [rbp+rax*2-0x75]; 
0x000000000e90d2: jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000e90d0: jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000006e834: jmp qword ptr [rbp]; 
0x000000000ed504: jmp qword ptr [rbx+0x1ffde]; 
0x00000000170e65: jmp qword ptr [rbx+0x6b]; 
0x000000000ecf85: jmp qword ptr [rbx+rax*4+0x38]; 
0x000000001353de: jmp qword ptr [rbx+rax*4+0x39]; 
0x0000000015b904: jmp qword ptr [rbx+rax*4+0x3a]; 
0x000000000a2387: jmp qword ptr [rbx+rax*4+0x3c]; 
0x0000000010ad8d: jmp qword ptr [rbx+rax*4+0x3f]; 
0x0000000007fd84: jmp qword ptr [rbx+rcx*4+0x10]; 
0x0000000011af64: jmp qword ptr [rbx+rcx*4+0x11]; 
0x000000001157f9: jmp qword ptr [rbx+rcx*4+0x13]; 
0x0000000009741f: jmp qword ptr [rbx+rcx*4+0x14]; 
0x000000000652b1: jmp qword ptr [rbx+rcx*4+0x18]; 
0x0000000006adb7: jmp qword ptr [rbx+rcx*4+0x30]; 
0x0000000014ee33: jmp qword ptr [rbx+rcx*4+0x3]; 
0x000000000948f3: jmp qword ptr [rbx+rcx*4+0x4]; 
0x0000000007f3a4: jmp qword ptr [rbx+rcx*4+0x8]; 
0x0000000007fec2: jmp qword ptr [rbx+rcx*4+0xa]; 
0x00000000064bd7: jmp qword ptr [rbx+rcx*4]; 
0x00000000068d85: jmp qword ptr [rbx-0x76bb0001]; 
0x000000000df889: jmp qword ptr [rbx]; 
0x000000000ebd80: jmp qword ptr [rcx+rax*2-0x39]; 
0x00000000044872: jmp qword ptr [rcx+rax*2-0x75]; 
0x00000000044889: jmp qword ptr [rcx+rax*2-0x77]; 
0x000000000a47bc: jmp qword ptr [rcx+rcx*2-0x75]; 
0x000000001402be: jmp qword ptr [rcx+rcx*4+0x10]; 
0x00000000161ffc: jmp qword ptr [rcx+rcx*4+0x13]; 
0x00000000062d3a: jmp qword ptr [rcx+rcx*4+0x18]; 
0x0000000011422e: jmp qword ptr [rcx+rcx*4+0x1]; 
0x000000000426fe: jmp qword ptr [rcx+rcx*4+0x2]; 
0x000000000a54d2: jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000006c643: jmp qword ptr [rcx+rcx*4+0x30]; 
0x00000000114dfe: jmp qword ptr [rcx+rcx*4+0x3]; 
0x0000000003b919: jmp qword ptr [rcx+rcx*4+0x8]; 
0x000000000eb0ad: jmp qword ptr [rcx-0x6]; 
0x000000000918f5: jmp qword ptr [rcx]; 
0x0000000012873f: jmp qword ptr [rdi+0x6d]; 
0x0000000005d0c4: jmp qword ptr [rdi+0x75]; 
0x0000000006b8a6: jmp qword ptr [rdi+0x77]; 
0x0000000009ff1d: jmp qword ptr [rdi+0x9]; 
0x000000000ebd20: jmp qword ptr [rdi+rax*8+0x1]; 
0x00000000114e6f: jmp qword ptr [rdi+rax*8+0x3]; 
0x00000000118944: jmp qword ptr [rdi+rax*8+0x45]; 
0x00000000038f92: jmp qword ptr [rdi+rax*8]; 
0x00000000047578: jmp qword ptr [rdi+rcx]; 
0x00000000068720: jmp qword ptr [rdi+rdi*2]; 
0x0000000010142d: jmp qword ptr [rdi+rdi*8-0x1]; 
0x0000000005cd5e: jmp qword ptr [rdi-0x75]; 
0x0000000006b06f: jmp qword ptr [rdi]; 
0x0000000016762d: jmp qword ptr [rdx+0x1e6affff]; 
0x000000001a41f6: jmp qword ptr [rdx+0x51]; 
0x000000001a4357: jmp qword ptr [rdx+0x71]; 
0x0000000015f257: jmp qword ptr [rdx+rax*8]; 
0x000000001aee6a: jmp qword ptr [rdx-0x1d]; 
0x000000001a68db: jmp qword ptr [rdx-0x1f]; 
0x000000001a430f: jmp qword ptr [rdx-0x2f]; 
0x000000001b0c1e: jmp qword ptr [rdx-0x4d]; 
0x000000001aeabb: jmp qword ptr [rdx-0x4e]; 
0x000000001aed75: jmp qword ptr [rdx-0x5d]; 
0x000000001aec47: jmp qword ptr [rdx-0xd]; 
0x000000001a3e55: jmp qword ptr [rdx-0xf]; 
0x0000000010fcd2: jmp qword ptr [rdx]; 
0x0000000005ba87: jmp qword ptr [rsi+0x25]; 
0x0000000002a485: jmp qword ptr [rsi+0x2e]; 
0x00000000109a54: jmp qword ptr [rsi+0x2e]; 
0x0000000005f128: jmp qword ptr [rsi+0x3d]; 
0x0000000002ca8c: jmp qword ptr [rsi+0x41]; 
0x0000000005ce7b: jmp qword ptr [rsi+0x44]; 
0x00000000118831: jmp qword ptr [rsi+0x45]; 
0x0000000002b6c1: jmp qword ptr [rsi+0x48]; 
0x0000000002b6b1: jmp qword ptr [rsi+0x49]; 
0x000000000f5c26: jmp qword ptr [rsi+0x49]; 
0x0000000002eca0: jmp qword ptr [rsi+0x66]; 
0x0000000002a4a9: jmp qword ptr [rsi+0xf]; 
0x000000000eae1e: jmp qword ptr [rsi+0xf]; 
0x0000000006b8ac: jmp qword ptr [rsi+rsi*2]; 
0x00000000141d84: jmp qword ptr [rsi-0x39]; 
0x0000000014cf07: jmp qword ptr [rsi-0x3f]; 
0x0000000017333d: jmp qword ptr [rsi-0x6]; 
0x0000000003114d: jmp qword ptr [rsi-0x70]; 
0x00000000074d46: jmp qword ptr [rsi-0x77]; 
0x000000000df0e9: jmp qword ptr [rsi-0x7b]; 
0x0000000010976a: jmp qword ptr [rsi-0x7d]; 
0x0000000007d3a1: jmp qword ptr [rsi-0x7f]; 
0x0000000005b442: jmp qword ptr [rsi]; 
0x0000000006ae3d: jmp qword ptr [rsp+rax*2-0x75]; 
0x0000000014c063: jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000a563f: jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000006b1da: jmp qword ptr [rsp+rsi*2]; 
0x0000000003ff50: jmp r10; 
0x0000000017adc2: jmp r9; 
0x0000000002a147: jmp rax; 
0x0000000012d0f1: jmp rbp; 
0x000000000379d4: jmp rcx; 
0x000000000b139c: jmp rdi; 
0x0000000003fc7a: jmp rdx; 
0x0000000003d3cf: jmp rsi; 
0x0000000008821d: jmp rsp; 
0x000000000a79ce: jne 0x00000000000298d5; pop rbx; pop rbp; pop r12; ret; 
0x00000000041222: jne 0x0000000000041170; and r8d, 0x7fffffff; or r8d, edi; je 0x0000000000041178; ret; 
0x00000000086180: jne 0x000000000008621a; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000086b3b: jne 0x0000000000086c32; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000092c78: jne 0x0000000000092d9d; add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x00000000095715: jne 0x0000000000095185; lea rsi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x00000000099669: jne 0x0000000000099593; sub dword ptr [rdi+0x4], 0x1; je 0x00000000000995b8; xor eax, eax; ret; 
0x00000000099916: jne 0x000000000009972c; sub dword ptr [r8+0x4], 0x1; je short 0x00000000000998ce; mov eax, 0x83; ret; 
0x0000000009958d: jne 0x00000000000998c0; mov eax, 0x1; ret; 
0x000000000a78cb: jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x000000000b4af5: jne 0x00000000000b4bd0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b4b67: jne 0x00000000000b4c10; xor eax, eax; ret; 
0x000000000b4fdc: jne 0x00000000000b5090; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000bc76b: jne 0x00000000000bc875; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bf13b: jne 0x00000000000bf245; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000c04af: jne 0x00000000000c0407; lea r11, [rip+0x112c64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c04da: jne 0x00000000000c0d90; ret; 
0x000000000c1b8f: jne 0x00000000000c1ae7; lea r11, [rip+0x111764]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1bbd: jne 0x00000000000c25e0; ret; 
0x000000000c3a4f: jne 0x00000000000c39a7; lea r11, [rip+0x10fa78]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000d6d85: jne 0x00000000000d6e60; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000d6df7: jne 0x00000000000d6ed0; xor eax, eax; ret; 
0x000000000d7a5f: jne 0x00000000000d7bb0; ret; 
0x000000000d7a3e: jne 0x00000000000d7bb0; xor eax, eax; ret; 
0x000000000d8007: jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d7fff: jne 0x00000000000d8180; test al, 0xf0; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000ec939: jne 0x00000000000ece54; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000f7034: jne 0x00000000000f6f5d; ret; 
0x0000000010758e: jne 0x0000000000107b4d; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000113ca3: jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x00000000113f70: jne 0x00000000001141d1; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x00000000114705: jne 0x00000000001147b3; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000114880: jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114ef6: jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x00000000115037: jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e35: jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x00000000119617: jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x0000000011a5a1: jne 0x000000000011a668; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000011b90e: jne 0x000000000011b9b3; add rsp, 0x68; pop r12; pop r14; ret; 
0x0000000011fed0: jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011ff05: jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011fe9d: jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x00000000120ce5: jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x00000000122036: jne 0x0000000000122158; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000147cef: jne 0x0000000000147d84; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000149fbb: jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0cb: jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a256: jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000014d6e6: jne 0x000000000014d3ec; movsxd rdi, [rip+0x88de5]; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x0000000015dda4: jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x0000000015eeeb: jne 0x000000000015f030; mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000001642c3: jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x00000000167545: jne 0x00000000001675d7; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000169571: jne 0x0000000000169432; nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000169435: jne 0x000000000016958a; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b631: jne 0x000000000016b6cf; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000016b721: jne 0x000000000016b7bf; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000016b811: jne 0x000000000016b8af; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000016b901: jne 0x000000000016b99f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000016c5c5: jne 0x000000000016c65f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016c6b5: jne 0x000000000016c74f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016c7a5: jne 0x000000000016c83f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016c895: jne 0x000000000016c92f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000173aaa: jne 0x0000000000173b36; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000174c16: jne 0x0000000000174c98; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x0000000018d261: jne 0x000000000018d810; ret; 
0x000000001915f2: jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000198ef3: jne 0x0000000000198de0; sub eax, ecx; vzeroupper; ret; 
0x0000000019941c: jne 0x00000000001992c0; sub eax, ecx; vzeroupper; ret; 
0x00000000199faa: jne 0x0000000000199ce0; ret; 
0x00000000199f08: jne 0x0000000000199ce0; xor eax, eax; vzeroupper; ret; 
0x00000000199e13: jne 0x0000000000199d40; vzeroupper; ret; 
0x0000000019f4f0: jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0208: jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001a15bf: jne 0x00000000001a1320; ret; 
0x000000001a156c: jne 0x00000000001a1320; xor eax, eax; vzeroupper; ret; 
0x000000001a1467: jne 0x00000000001a1380; vzeroupper; ret; 
0x000000001a1b09: jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1d6c: jne 0x00000000001a1ca0; sub eax, ecx; vzeroupper; ret; 
0x000000001a1f9f: jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001a2297: jne 0x00000000001a2180; sub eax, ecx; vzeroupper; ret; 
0x000000001a2e41: jne 0x00000000001a2db3; ret; 
0x000000001a319f: jne 0x00000000001a3510; ret; 
0x000000001a36a4: jne 0x00000000001a3603; ret; 
0x000000001a39ff: jne 0x00000000001a3d70; ret; 
0x000000001a4950: jne 0x00000000001a4840; lea rax, [rdi+0xb]; ret; 
0x000000001a4909: jne 0x00000000001a4840; lea rax, [rdi+0xf]; ret; 
0x000000001a48ac: jne 0x00000000001a4a20; test dl, 0x4; jne short 0x00000000001a4840; lea rax, [rdi+0x3]; ret; 
0x000000001a498e: jne 0x00000000001a4a50; test al, 0x40; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000001a4995: jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000001a487d: jne 0x00000000001a4a60; test dl, 0x40; jne short 0x00000000001a4840; lea rax, [rdi+0x7]; ret; 
0x000000001a4947: jne 0x00000000001a4a90; test dh, 0x4; jne 0x00000000001a4840; lea rax, [rdi+0xb]; ret; 
0x000000001a49e0: jne 0x00000000001a4ac0; test ah, 0x40; jne 0x00000000001a4ad0; lea rax, [rdi+0xf]; ret; 
0x000000001a49e8: jne 0x00000000001a4ad0; lea rax, [rdi+0xf]; ret; 
0x000000001a4900: jne 0x00000000001a4ad0; test dh, 0x40; jne 0x00000000001a4840; lea rax, [rdi+0xf]; ret; 
0x000000001a6014: jne 0x00000000001a6220; xor eax, eax; ret; 
0x000000001a6174: jne 0x00000000001a6235; cmp eax, ecx; jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a60c1: jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a671d: jne 0x00000000001a6850; ret; 
0x000000001a79aa: jne 0x00000000001a76e0; ret; 
0x000000001a9ba8: jne 0x00000000001aa010; xtest; je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001ac0b0: jne 0x00000000001ac4f0; xtest; je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001ae5df: jne 0x00000000001ae340; ret; 
0x000000001aebd8: jne 0x00000000001aeaa4; ret; 
0x000000001af82e: jne 0x00000000001af920; kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x000000001b0630: jne 0x00000000001b0ac0; ret; 
0x000000001b1dc3: jne 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b341c: jne 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b37e8: jne 0x00000000001b3c30; ret; 
0x000000001b47bb: jne 0x00000000001b4610; ret; 
0x000000001b4a65: jne 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b4e71: jne 0x00000000001b4c81; ret; 
0x000000001b51d4: jne 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001b5c78: jne 0x00000000001b5b30; ret; 
0x000000001ba31d: jne 0x00000000001ba24c; add rsp, 0x38; ret; 
0x000000001ba8b9: jne 0x00000000001ba98d; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000092648: jne 0xffffffff831c9c44; or dh, bh; xor eax, eax; ret; 
0x00000000029ce5: jne short 0x0000000000029cbb; mov rdx, [rip+0x1ef19a]; cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x00000000029cf5: jne short 0x0000000000029cbb; ret; 
0x0000000002a2d9: jne short 0x000000000002a310; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000328b8: jne short 0x00000000000328ba; add [rbp-0x77], cl; ret; 
0x0000000003293f: jne short 0x0000000000032941; add [rcx-0x77], al; ret; 
0x00000000039c84: jne short 0x0000000000039c90; mov eax, r8d; ret; 
0x0000000003a887: jne short 0x000000000003a890; add rsp, 0x18; ret; 
0x0000000003a8c7: jne short 0x000000000003a8d0; add rsp, 0x18; ret; 
0x000000000404ed: jne short 0x00000000000404c8; ret; 
0x00000000040767: jne short 0x0000000000040750; mov r10d, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x00000000041378: jne short 0x000000000004134a; mov rax, [rip+0x1d7a8f]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000041346: jne short 0x0000000000041350; fadd st, st(0); add rsp, 0x8; ret; 
0x0000000004174c: jne short 0x0000000000041758; addsd xmm0, xmm0; ret; 
0x00000000041947: jne short 0x0000000000041950; sbb al, [rax]; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x00000000041a88: jne short 0x0000000000041a90; addss xmm0, xmm0; ret; 
0x000000000420f5: jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x0000000004219a: jne short 0x00000000000421a8; mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000042408: jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x00000000042478: jne short 0x0000000000042480; pop rbp; ret; 
0x000000000426bd: jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000004271f: jne short 0x0000000000042730; add rsp, 0x8; ret; 
0x000000000427ce: jne short 0x00000000000427e8; mov esi, 0x8; mov eax, 0x82; syscall; 
0x00000000042944: jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429c7: jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042a41: jne short 0x0000000000042a78; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000042ad2: jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042b4d: jne short 0x0000000000042b67; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000042c69: jne short 0x0000000000042c7f; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x00000000042d06: jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x00000000043015: jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x00000000043040: jne short 0x0000000000043060; mov rax, [rip+0x1d5dc7]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000431a9: jne short 0x00000000000431f0; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x000000000433a9: jne short 0x00000000000433c7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000004342c: jne short 0x0000000000043447; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000434a5: jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000044482: jne short 0x0000000000044484; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x00000000045dbb: jne short 0x0000000000045d80; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000045e4f: jne short 0x0000000000045e58; pop rbx; ret; 
0x00000000045f23: jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x00000000046013: jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046288: jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x0000000004680d: jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x0000000004685a: jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x000000000468ac: jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f9: jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x0000000004694c: jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046999: jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000046c7e: jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x0000000005070a: jne short 0x000000000005073c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000507ba: jne short 0x0000000000050818; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000050888: jne short 0x00000000000508e2; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000050cee: jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x00000000051507: jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x00000000051895: jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052ddf: jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x00000000052f9d: jne short 0x0000000000052f90; pop rbx; ret; 
0x00000000052fc8: jne short 0x0000000000052fc0; pop rbx; ret; 
0x00000000053b4e: jne short 0x0000000000053b53; push r10; ret; 
0x00000000054037: jne short 0x000000000005403c; push r10; ret; 
0x00000000054116: jne short 0x000000000005409c; sub rdx, 0x1; jne short 0x0000000000054100; mov eax, 0x1; ret; 
0x0000000005411c: jne short 0x0000000000054100; mov eax, 0x1; ret; 
0x0000000005433e: jne short 0x00000000000542c8; sub rdx, 0x1; jne short 0x0000000000054328; mov eax, 0x1; ret; 
0x00000000054344: jne short 0x0000000000054328; mov eax, 0x1; ret; 
0x000000000546fb: jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x000000000562ea: jne short 0x0000000000056365; leave; ret; 
0x0000000005655f: jne short 0x0000000000056580; mov dword ptr [rdi], 0x0; mov eax, 0x1; ret; 
0x0000000005660a: jne short 0x00000000000565ec; mov eax, 0x1; ret; 
0x00000000056603: jne short 0x00000000000565f2; cmp cx, 0x7fff; jne short 0x00000000000565ec; mov eax, 0x1; ret; 
0x000000000565ea: jne short 0x0000000000056618; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x0000000005675b: jne short 0x00000000000567d0; mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x00000000059b3a: jne short 0x0000000000059b79; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000005a253: jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a49c: jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060758: jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x0000000006082d: jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608e4: jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609b6: jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a78: jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b38: jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c26: jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cfd: jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x000000000612cc: jne short 0x00000000000612d0; pop rbx; ret; 
0x00000000061363: jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613e5: jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e97: jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621d0: jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622ab: jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x000000000778ba: jne short 0x0000000000077904; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000007e998: jne short 0x000000000007e9f4; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000007eb26: jne short 0x000000000007eb84; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000080ee5: jne short 0x0000000000080ee1; dec dword ptr [rbx+rcx*4+0x2d]; jg short 0x0000000000080f07; add [rax-0x77], cl; ret; 
0x00000000081e13: jne short 0x0000000000081e0f; jmp qword ptr [rsi+0x2e]; 
0x00000000082c08: jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cc4: jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082dbd: jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e8d: jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f46: jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000083581: jne short 0x0000000000083570; ret; 
0x00000000083c12: jne short 0x0000000000083c88; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000086e8c: jne short 0x0000000000086ea0; mov eax, [rdx+0x4c]; cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x00000000089fe6: jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x0000000008c9b9: jne short 0x000000000008c9c0; ret; 
0x0000000008d337: jne short 0x000000000008d340; ret; 
0x0000000008d579: jne short 0x000000000008d568; ret; 
0x0000000008e656: jne short 0x000000000008e648; ret; 
0x0000000008e7fa: jne short 0x000000000008e810; pop rbp; ret; 
0x0000000008e911: jne short 0x000000000008e8d3; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008f1ce: jne short 0x000000000008f1c0; ret; 
0x0000000008f207: jne short 0x000000000008f218; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000008f526: jne short 0x000000000008f540; mov [rip+0x18c529], rbx; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x00000000090485: jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x0000000009049e: jne short 0x00000000000904b1; mov rax, [rax+0x388]; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x0000000009064e: jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090628: jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x0000000009078d: jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000090763: jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x0000000009087e: jne short 0x0000000000090889; add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x00000000090aa2: jne short 0x0000000000090aac; and edx, 0x38; cmp edx, 0x8; je short 0x0000000000090aad; ret; 
0x00000000090d74: jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x00000000090deb: jne short 0x0000000000090e23; xor eax, eax; ret; 
0x00000000090fd8: jne short 0x0000000000090fe0; xend; xor eax, eax; ret; 
0x00000000091088: jne short 0x0000000000091070; neg eax; ret; 
0x00000000091704: jne short 0x00000000000916e0; mov rdx, [rbp]; test rdx, rdx; je short 0x00000000000916e0; call rdx; 
0x00000000091841: jne short 0x0000000000091828; pop rbx; ret; 
0x000000000918ec: jne short 0x00000000000918a2; pop rbx; ret; 
0x0000000009264b: jne short 0x0000000000092660; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x000000000956f2: jne short 0x0000000000095713; xor edi, edi; mov eax, 0x91; syscall; 
0x00000000095cb9: jne short 0x0000000000095cc0; ret; 
0x00000000095cae: jne short 0x0000000000095cd6; mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x000000000964d6: jne short 0x0000000000096510; mov rax, r8; ret; 
0x0000000009677c: jne short 0x0000000000096760; mov eax, 0xb; ret; 
0x000000000967de: jne short 0x00000000000967e8; xor eax, eax; ret; 
0x000000000974d5: jne short 0x00000000000974db; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x000000000975b2: jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x000000000975d8: jne short 0x00000000000975e7; mov eax, fs:[0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000097606: jne short 0x0000000000097611; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x00000000099589: jne short 0x0000000000099593; test eax, eax; jne 0x00000000000998c0; mov eax, 0x1; ret; 
0x000000000996fb: jne short 0x00000000000996de; mov qword ptr fs:[0x2f0], 0x0; nop; xor eax, eax; ret; 
0x00000000099a4f: jne short 0x0000000000099a50; jmp qword ptr [rsi+0xf]; 
0x00000000099dd6: jne short 0x0000000000099de8; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x00000000099e1b: jne short 0x0000000000099e40; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x0000000009aed2: jne short 0x000000000009aea6; test al, 0x1; jne short 0x000000000009aee0; xor eax, eax; ret; 
0x0000000009aed6: jne short 0x000000000009aee0; xor eax, eax; ret; 
0x0000000009af92: jne short 0x000000000009af68; mov eax, 0x10; ret; 
0x0000000009bcbd: jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009be37: jne short 0x000000000009be40; xor eax, eax; ret; 
0x0000000009be9c: jne short 0x000000000009bea6; and eax, 0x38; cmp eax, 0x8; je short 0x000000000009bea7; ret; 
0x0000000009c063: jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009cbe3: jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009cd5f: jne short 0x000000000009cd68; xor eax, eax; pop rbp; ret; 
0x0000000009cd94: jne short 0x000000000009cd87; xor eax, eax; ret; 
0x0000000009d57b: jne short 0x000000000009d5af; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d5ed: jne short 0x000000000009d61f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d64b: jne short 0x000000000009d67f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d6ab: jne short 0x000000000009d6df; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d70b: jne short 0x000000000009d73f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d83b: jne short 0x000000000009d86f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d89b: jne short 0x000000000009d8cf; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d8fb: jne short 0x000000000009d92f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d95b: jne short 0x000000000009d98f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d9d8: jne short 0x000000000009da07; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009da2b: jne short 0x000000000009da5f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009dae2: jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009db3b: jne short 0x000000000009db6f; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009dbbb: jne short 0x000000000009dbef; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009dd00: jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x0000000009e630: jne short 0x000000000009e620; ret; 
0x0000000009e6a0: jne short 0x000000000009e6a6; mov rax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x0000000009e747: jne short 0x000000000009e738; ret; 
0x000000000a02bf: jne short 0x00000000000a02f0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000000a02e3: jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000a03d1: jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a0491: jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000a0547: jne short 0x00000000000a0590; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x000000000a083f: jne short 0x00000000000a086b; add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x000000000a0ca2: jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x000000000a1c30: jne short 0x00000000000a1c39; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000a2473: jne short 0x00000000000a24c0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000a4f7b: jne short 0x00000000000a4f80; ret; 
0x000000000a4fd4: jne short 0x00000000000a4fb4; pop rbx; pop rbp; pop r12; ret; 
0x000000000a50f5: jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x000000000a6d5c: jne short 0x00000000000a6d68; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000a7951: jne short 0x00000000000a7940; xor eax, eax; ret; 
0x000000000a79bb: jne short 0x00000000000a7990; mov rdi, rsi; call rax; 
0x000000000a7a2b: jne short 0x00000000000a7a20; ret; 
0x000000000a82bd: jne short 0x00000000000a8274; ret; 
0x000000000a82ae: jne short 0x00000000000a8299; lea rax, [rip+0xf5af9]; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a833f: jne short 0x00000000000a8305; ret; 
0x000000000a8333: jne short 0x00000000000a831a; lea rax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000a83cd: jne short 0x00000000000a8384; ret; 
0x000000000a83be: jne short 0x00000000000a83a9; lea rax, [rip+0xf06f9]; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000a847d: jne short 0x00000000000a8434; ret; 
0x000000000a846e: jne short 0x00000000000a8459; lea rax, [rip+0xf69b9]; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000a888d: jne short 0x00000000000a8844; ret; 
0x000000000a887e: jne short 0x00000000000a8869; lea rax, [rip+0xf5b99]; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a89bd: jne short 0x00000000000a8974; ret; 
0x000000000a89ae: jne short 0x00000000000a8999; lea rax, [rip+0xf6809]; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a9580: jne short 0x00000000000a9524; ret; 
0x000000000a9571: jne short 0x00000000000a9548; and esi, 0x400; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x000000000a9a3d: jne short 0x00000000000a99f4; ret; 
0x000000000a9a2e: jne short 0x00000000000a9a19; lea rax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9acd: jne short 0x00000000000a9a84; ret; 
0x000000000a9abe: jne short 0x00000000000a9aa9; lea rax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000aa7a4: jne short 0x00000000000aa790; ret; 
0x000000000abcda: jne short 0x00000000000abc95; mov rax, r11; ret; 
0x000000000b103f: jne short 0x00000000000b1030; mov [rdx], rcx; ret; 
0x000000000b1105: jne short 0x00000000000b10f0; mov byte ptr [r8], 0x0; mov [rdi], rax; mov rax, r9; ret; 
0x000000000b119f: jne short 0x00000000000b1190; mov rax, r8; ret; 
0x000000000b11d3: jne short 0x00000000000b11c0; mov rax, r8; ret; 
0x000000000b1210: jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x000000000b12c9: jne short 0x00000000000b12b0; cmp eax, ecx; je short 0x00000000000b12b0; mov rax, r8; ret; 
0x000000000b1302: jne short 0x00000000000b12f0; ret; 
0x000000000b135c: jne short 0x00000000000b1338; ret; 
0x000000000b308c: jne short 0x00000000000b3070; xor eax, eax; sub eax, ecx; ret; 
0x000000000b4b97: jne short 0x00000000000b4bf0; xor eax, eax; ret; 
0x000000000b4de3: jne short 0x00000000000b4e30; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b504a: jne short 0x00000000000b50c0; xor eax, eax; ret; 
0x000000000b5079: jne short 0x00000000000b50f0; xor eax, eax; ret; 
0x000000000bab77: jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000c42f1: jne short 0x00000000000c42e0; ret; 
0x000000000c42e8: jne short 0x00000000000c4300; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c42e0; ret; 
0x000000000c43a1: jne short 0x00000000000c4390; ret; 
0x000000000c4398: jne short 0x00000000000c43b0; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c4390; ret; 
0x000000000c4511: jne short 0x00000000000c4500; lea rax, [rcx-0x1]; ret; 
0x000000000c4661: jne short 0x00000000000c4650; sub rax, 0x1; ret; 
0x000000000c5037: jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000c562b: jne short 0x00000000000c55df; ret; 
0x000000000c561c: jne short 0x00000000000c55f8; and esi, 0x400; lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000c5891: jne short 0x00000000000c5868; mov rax, r8; ret; 
0x000000000c5988: jne short 0x00000000000c5978; xor eax, eax; ret; 
0x000000000c5a1e: jne short 0x00000000000c59b5; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x000000000c5a22: jne short 0x00000000000c5a00; ret; 
0x000000000c5b40: jne short 0x00000000000c5ae4; ret; 
0x000000000c5b31: jne short 0x00000000000c5b08; and esi, 0x400; lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000c6dbb: jne short 0x00000000000c6d6f; ret; 
0x000000000c6dac: jne short 0x00000000000c6d88; and esi, 0x400; lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c6ded: jne short 0x00000000000c6de0; ret; 
0x000000000cf58b: jne short 0x00000000000cf5e9; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000cf659: jne short 0x00000000000cf6b3; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000cf72b: jne short 0x00000000000cf75d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000d2c13: jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d3085: jne short 0x00000000000d30de; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d3650: jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d372b: jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d6a9b: jne short 0x00000000000d6ada; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000d6e27: jne short 0x00000000000d6e90; xor eax, eax; ret; 
0x000000000d7b36: jne short 0x00000000000d7bb0; ret; 
0x000000000d7c89: jne short 0x00000000000d7c90; ret; 
0x000000000d811b: jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d8117: jne short 0x00000000000d8180; test al, 0xf0; jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d8637: jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d8ec3: jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f3d: jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9af7: jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x000000000d9c5e: jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000d9de8: jne short 0x00000000000d9e61; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x000000000dcee6: jne short 0x00000000000dcef0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000dd71b: jne short 0x00000000000dd720; pop rbx; ret; 
0x000000000e2eac: jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e559c: jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e56df: jne short 0x00000000000e5738; xor eax, eax; add rsp, 0x8; ret; 
0x000000000e5d97: jne short 0x00000000000e5d80; pop rbx; pop rbp; pop r12; ret; 
0x000000000e6113: jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e619f: jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e6acc: jne short 0x00000000000e6b0a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x000000000e774f: jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000e9339: jne short 0x00000000000e9383; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e9338: jne short 0x00000000000e93af; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000ea451: jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea501: jne short 0x00000000000ea520; xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000ea635: jne short 0x00000000000ea645; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000ea65e: jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000000ea6e9: jne short 0x00000000000ea6f0; add rsp, 0x8; ret; 
0x000000000eac52: jne short 0x00000000000eac57; pop rdi; jmp rdi; 
0x000000000eaf94: jne short 0x00000000000eafc4; pop rbx; pop rbp; pop r12; ret; 
0x000000000ec17f: jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec20f: jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4b3: jne short 0x00000000000ec4b5; add [rax], al; syscall; 
0x000000000ec4cf: jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec56f: jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x000000000ececb: jne short 0x00000000000eced0; ret; 
0x000000000eced9: jne short 0x00000000000ecf4d; mov eax, 0x7d00; ret; 
0x000000000ecf45: jne short 0x00000000000ecf63; mov eax, 0xfffa; ret; 
0x000000000ed066: jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x000000000f0263: jne short 0x00000000000f0201; xor eax, eax; ret; 
0x000000000f0245: jne short 0x00000000000f0229; mov eax, 0x1; ret; 
0x000000000f0211: jne short 0x00000000000f0259; mov eax, 0x1; ret; 
0x000000000f4134: jne short 0x00000000000f4125; mov byte ptr [rax+0x8], 0x16; mov eax, 0x1; ret; 
0x000000000f4106: jne short 0x00000000000f4130; mov byte ptr [rax+0x8], 0x19; mov eax, 0x1; ret; 
0x000000000f900b: jne short 0x00000000000f8fa5; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001038d1: jne short 0x00000000001038fa; lea rcx, [rip+0xd1606]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000108efc: jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x0000000010932b: jne short 0x00000000001092c4; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x000000001092ef: jne short 0x00000000001092e0; mov eax, [rdx+0x8]; ret; 
0x0000000010d143: jne short 0x000000000010d128; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001128f1: jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x000000001129a1: jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x00000000112fde: jne short 0x0000000000112fe5; mov [rdi], si; xor eax, eax; ret; 
0x000000001136d9: jne short 0x00000000001136db; add [rax], al; syscall; 
0x00000000113a9b: jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113afe: jne short 0x0000000000113ad8; mov eax, r8d; ret; 
0x00000000113e15: jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000114269: jne short 0x0000000000114298; mov r10d, ecx; mov eax, 0x103; syscall; 
0x0000000011435b: jne short 0x0000000000114377; add rsp, 0x88; pop rbp; pop r12; ret; 
0x000000001143cb: jne short 0x00000000001143e7; add rsp, 0x88; pop rbp; pop r12; ret; 
0x0000000011485d: jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x0000000011498e: jne short 0x00000000001149a0; syscall; 
0x00000000114a2e: jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f12: jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x0000000011510e: jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x0000000011529e: jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000115bc0: jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x00000000115d28: jne short 0x0000000000115d6f; add rsp, 0x50; mov rax, r8; pop rbp; ret; 
0x00000000116113: jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x00000000118d3e: jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x00000000118e0d: jne short 0x0000000000118e48; mov r8d, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000119361: jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x00000000119536: jne short 0x000000000011950a; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x00000000119724: jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x000000001197ce: jne short 0x00000000001197d8; pop rbp; ret; 
0x000000001198c1: jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x00000000119971: jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x00000000119a9b: jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b2a: jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119be2: jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c80: jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x00000000119e17: jne short 0x0000000000119dfa; or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x0000000011a17c: jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011a1ed: jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011a23e: jne short 0x000000000011a260; mov edx, 0x1; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000011ab17: jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011ab5e: jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abfe: jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011aca1: jne short 0x000000000011acc0; xor r8d, r8d; mov eax, 0x127; syscall; 
0x0000000011ad61: jne short 0x000000000011ad80; xor r8d, r8d; mov eax, 0x128; syscall; 
0x0000000011b10f: jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b19f: jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b22a: jne short 0x000000000011b22c; add [rax], al; syscall; 
0x0000000011b246: jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b306: jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3ee: jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011b8e8: jne short 0x000000000011b920; mov rdx, r14; mov eax, 0x10e; syscall; 
0x0000000011ba2e: jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011baee: jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011be29: jne short 0x000000000011be75; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000011c074: jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0ed: jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1bf: jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011c762: jne short 0x000000000011c724; xor eax, eax; pop rbp; ret; 
0x0000000011c7bd: jne short 0x000000000011c78d; ret; 
0x0000000011cf87: jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d01a: jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d09e: jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d119: jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011d7fe: jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x0000000011e658: jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e731: jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x0000000011ebce: jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x0000000011ec8e: jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x0000000011f989: jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x0000000011fd04: jne short 0x000000000011fd38; mov rdi, rbp; mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000011fd94: jne short 0x000000000011fdc8; mov rdi, rbp; mov rdx, r13; mov esi, 0x1; call r12; 
0x0000000011fe11: jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x0000000011fe43: jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe73: jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x0000000011ff31: jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120ac6: jne short 0x0000000000120ad0; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000120afb: jne short 0x0000000000120b50; mov rdi, rbp; xor edx, edx; mov esi, 0x1; call r12; 
0x00000000120b74: jne short 0x0000000000120b80; pop rbp; pop r12; pop r13; ret; 
0x00000000120bac: jne short 0x0000000000120bf8; mov rdi, rbp; mov rdx, r13; mov esi, 0x1; call r12; 
0x00000000120c3a: jne short 0x0000000000120c60; mov rdi, [rbp]; call rbx; 
0x00000000120c73: jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x00000000120c9f: jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x00000000120d41: jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d15: jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x000000001210bd: jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x0000000012117d: jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x0000000012135b: jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x000000001213be: jne short 0x00000000001213f9; pop rbx; pop rbp; pop r12; ret; 
0x00000000121584: jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x000000001217a1: jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x000000001217b9: jne short 0x00000000001217e8; mov eax, 0x88; syscall; 
0x00000000121c39: jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000121e1a: jne short 0x0000000000121e26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000121eaa: jne short 0x0000000000121eb6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000001223f8: jne short 0x00000000001223e8; mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000122478: jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x00000000125cb1: jne short 0x0000000000125cd0; mov r9d, 0x8; mov eax, 0x119; syscall; 
0x00000000125d81: jne short 0x0000000000125da0; mov r9d, 0x8; mov eax, 0x1b9; syscall; 
0x00000000125f91: jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x00000000126041: jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260f1: jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x000000001261a1: jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x0000000012626e: jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x00000000126547: jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b13: jne short 0x0000000000126b40; xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000126b35: jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x000000001275ce: jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x0000000012769e: jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x00000000127811: jne short 0x0000000000127830; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000001278d1: jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x000000001279a4: jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127a51: jne short 0x0000000000127a70; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127b0e: jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127bb1: jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e6e: jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000127e91: jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f41: jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000128001: jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x00000000128235: jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x00000000128261: jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x00000000128311: jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x00000000128402: jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x000000001284eb: jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x0000000012a580: jne short 0x000000000012a590; mov eax, r8d; ret; 
0x0000000012a5ea: jne short 0x000000000012a5f0; ret; 
0x0000000012a7d3: jne short 0x000000000012a7e0; ret; 
0x0000000012ae31: jne short 0x000000000012ae38; ret; 
0x0000000012ae8e: jne short 0x000000000012ae98; ret; 
0x0000000012b063: jne short 0x000000000012b070; ret; 
0x0000000012e22e: jne short 0x000000000012e238; pop rbx; pop rbp; pop r12; ret; 
0x00000000130aaf: jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x000000001323a0: jne short 0x00000000001323d0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000132598: jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000132642: jne short 0x000000000013262a; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013365f: jne short 0x00000000001335e9; call rax; 
0x00000000133bad: jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x00000000133c29: jne short 0x0000000000133c38; cmp qword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x00000000133d4b: jne short 0x0000000000133d0d; lea rdi, [rip-0xf4]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000133d94: jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134a88: jne short 0x0000000000134a31; mov rax, r9; ret; 
0x00000000134bef: jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cf3: jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e09: jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ed1: jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x000000001357c3: jne short 0x00000000001357d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000135aaf: jne short 0x0000000000135a60; mov rax, r8; ret; 
0x00000000135c63: jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d79: jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e41: jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136248: jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a8: jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136371: jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136451: jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136531: jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d12f: jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1cc: jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d239: jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x0000000013e993: jne short 0x000000000013e980; pop rbx; ret; 
0x0000000014109d: jne short 0x00000000001410c7; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000014127f: jne short 0x0000000000141270; mov fs:[rbx], r13d; mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x0000000014235c: jne short 0x0000000000142330; mov [r8], rdi; xor eax, eax; ret; 
0x00000000142d0d: jne short 0x0000000000142d28; mov eax, r8d; ret; 
0x0000000014319a: jne short 0x00000000001431dd; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000014323b: jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000143699: jne short 0x00000000001436f1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000144030: jne short 0x0000000000144040; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000147f89: jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fde: jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x00000000148031: jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488e0: jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x00000000148cf7: jne short 0x0000000000148cf2; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000149abe: jne short 0x0000000000149aa4; mov eax, r10d; ret; 
0x00000000149c7a: jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x00000000149cae: jne short 0x0000000000149cb8; pop rbx; pop rbp; pop r12; ret; 
0x0000000014a366: jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5af: jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014a628: jne short 0x000000000014a640; mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x000000000014a640; ret; 
0x0000000014adaf: jne short 0x000000000014adbe; add cl, ch; mov edx, esi; hlt; jmp qword ptr [rsi+0xf]; 
0x0000000014b1b0: jne short 0x000000000014b1b8; ret; 
0x0000000014b1f4: jne short 0x000000000014b1e0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000014d179: jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x0000000014e582: jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x000000001517de: jne short 0x00000000001517e8; ret; 
0x00000000152305: jne short 0x00000000001522f8; ret; 
0x00000000152359: jne short 0x0000000000152376; mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000152937: jne short 0x00000000001528cc; pop rbx; pop rbp; pop r12; ret; 
0x00000000154dd4: jne short 0x0000000000154d58; ret; 
0x00000000155065: jne short 0x0000000000155088; ret; 
0x00000000155761: jne short 0x0000000000155780; mov eax, r8d; ret; 
0x0000000015d30b: jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000015dcf3: jne short 0x000000000015dd10; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015df3e: jne short 0x000000000015dfb7; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000015dfa6: jne short 0x000000000015dfbc; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e1ad: jne short 0x000000000015e1e5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000015ed95: jne short 0x000000000015ede0; mov dword ptr [rsi], 0x0; ret; 
0x0000000015fbd1: jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x00000000160152: jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601f0: jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160ce6: jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x00000000163acc: jne short 0x0000000000163ad0; ret; 
0x00000000167343: jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x00000000167676: jne short 0x00000000001676b7; add rsp, 0x18; pop rbx; pop r12; ret; 
0x00000000167875: jne short 0x00000000001678b7; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000167975: jne short 0x00000000001679b7; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000167a91: jne short 0x0000000000167af7; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000167bd1: jne short 0x0000000000167c37; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000167d0c: jne short 0x0000000000167d1c; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000167dd0: jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x00000000168815: jne short 0x000000000016881f; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168ac7: jne short 0x0000000000168ade; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000168fb7: jne short 0x0000000000168fc0; pop rbx; pop rbp; pop r12; ret; 
0x00000000169045: jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x000000001690bb: jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x0000000016912b: jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x0000000016919b: jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691fc: jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169260: jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692cb: jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x0000000016934e: jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698ac: jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698f1: jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x00000000169c2c: jne short 0x0000000000169c30; ret; 
0x0000000016b3c6: jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000016b431: jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4c1: jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b533: jne short 0x000000000016b525; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000016b58a: jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9f1: jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba81: jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bb10: jne short 0x000000000016bb5b; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016bba0: jne short 0x000000000016bbeb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000016bc31: jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcc1: jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016c2fb: jne short 0x000000000016c2d0; mov rax, [rbp+0x8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c47b: jne short 0x000000000016c450; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000016ca21: jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016cab1: jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb41: jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbd1: jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d297: jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d30b: jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d36c: jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3da: jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d44d: jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x0000000016d4b6: jne short 0x000000000016d4c0; mov eax, 0x1; ret; 
0x0000000016d4f6: jne short 0x000000000016d500; mov eax, 0x1; ret; 
0x00000000171c7a: jne short 0x0000000000171c9f; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x00000000172142: jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172359: jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e9: jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001726d0: jne short 0x0000000000172705; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000001739c6: jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a2e: jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x00000000174c5c: jne short 0x0000000000174caf; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000001750e6: jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751dd: jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x00000000175378: jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x0000000017544f: jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x00000000175ec2: jne short 0x0000000000175ed0; pop rbx; ret; 
0x0000000017612e: jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000177f97: jne short 0x0000000000177fa7; or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000017828b: jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x00000000178311: jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x0000000017b956: jne short 0x000000000017b95e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba07: jne short 0x000000000017ba10; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000192d9c: jne short 0x0000000000192dd0; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x00000000198dfd: jne short 0x0000000000198de0; sub eax, ecx; vzeroupper; ret; 
0x000000001992e2: jne short 0x00000000001992c0; sub eax, ecx; vzeroupper; ret; 
0x00000000199ccd: jne short 0x0000000000199d43; vzeroupper; ret; 
0x00000000199e41: jne short 0x0000000000199e84; vzeroupper; ret; 
0x00000000199e76: jne short 0x0000000000199ec0; vzeroupper; ret; 
0x0000000019d34a: jne short 0x000000000019d375; add rax, rdi; vzeroupper; ret; 
0x0000000019d4e4: jne short 0x000000000019d505; add rax, rdi; vzeroupper; ret; 
0x000000001a1311: jne short 0x00000000001a1383; vzeroupper; ret; 
0x000000001a14a1: jne short 0x00000000001a14e4; vzeroupper; ret; 
0x000000001a14d6: jne short 0x00000000001a1520; vzeroupper; ret; 
0x000000001a199e: jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1ab2: jne short 0x00000000001a1aef; ret far; 
0x000000001a1be2: jne short 0x00000000001a1c1f; ret far; 
0x000000001a1cbb: jne short 0x00000000001a1ca0; sub eax, ecx; vzeroupper; ret; 
0x000000001a1e29: jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001a1f3f: jne short 0x00000000001a1f7c; ret far; 
0x000000001a20a2: jne short 0x00000000001a20df; ret far; 
0x000000001a21a0: jne short 0x00000000001a2180; sub eax, ecx; vzeroupper; ret; 
0x000000001a2309: jne short 0x00000000001a2334; add rax, rdi; vzeroupper; ret; 
0x000000001a24aa: jne short 0x00000000001a24d4; add rax, rdi; vzeroupper; ret; 
0x000000001a3588: jne short 0x00000000001a35aa; mov ecx, [rdi+rdx-0x4]; cmp ecx, [rsi+rdx-0x4]; jne short 0x00000000001a35aa; ret; 
0x000000001a3592: jne short 0x00000000001a35aa; ret; 
0x000000001a48b5: jne short 0x00000000001a4840; lea rax, [rdi+0x3]; ret; 
0x000000001a4886: jne short 0x00000000001a4840; lea rax, [rdi+0x7]; ret; 
0x000000001a4836: jne short 0x00000000001a4844; nop [rax+rax]; xor rax, rax; ret; 
0x000000001a5ce4: jne short 0x00000000001a5d60; movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x000000001a6231: jne short 0x00000000001a6235; cmp eax, ecx; sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x000000001a6219: jne short 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a6846: jne short 0x00000000001a6850; xor eax, eax; ret; 
0x000000001acff2: jne short 0x00000000001ad02f; ret far; 
0x000000001ad122: jne short 0x00000000001ad15f; ret far; 
0x000000001ad66f: jne short 0x00000000001ad6ac; ret far; 
0x000000001ad7d2: jne short 0x00000000001ad80f; ret far; 
0x000000001ae9ab: jne short 0x00000000001ae9b0; ret; 
0x000000001aeaa1: jne short 0x00000000001aeaaa; ret; 
0x000000001aec06: jne short 0x00000000001aec0d; ret; 
0x000000001aec57: jne short 0x00000000001aec6c; ret; 
0x000000001aee6d: jne short 0x00000000001aee8f; and eax, 0xdeff1754; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000001b1509: jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1531: jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14c9: jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b14f1: jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b14b1: jne short 0x00000000001b14d1; ret; 
0x000000001b16e9: jne short 0x00000000001b1679; add rax, rdx; ret; 
0x000000001b1699: jne short 0x00000000001b1679; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1670: jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1688: jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b1cbd: jne short 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b32d2: jne short 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b43e8: jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4401: jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43a8: jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b43d1: jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b4391: jne short 0x00000000001b43b0; ret; 
0x000000001b4568: jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b453c: jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b4557: jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x000000001b45b0: jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001b462a: jne short 0x00000000001b4610; ret; 
0x000000001b49cb: jne short 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b4ca6: jne short 0x00000000001b4c81; ret; 
0x000000001b50e0: jne short 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001b5a2b: jne short 0x00000000001b5a30; ret; 
0x000000001b5b2b: jne short 0x00000000001b5b36; ret; 
0x000000001b5ca6: jne short 0x00000000001b5cad; ret; 
0x000000001b5cf7: jne short 0x00000000001b5d11; ret; 
0x000000001b5f5d: jne short 0x00000000001b5f90; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x000000001b6193: jne short 0x00000000001b61d0; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b6420: jne short 0x00000000001b6460; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001bb45e: jne short 0x00000000001bb440; pop rbx; pop rbp; pop r12; ret; 
0x000000001bb536: jne short 0x00000000001bb520; pop rbx; pop rbp; pop r12; ret; 
0x000000001bb589: jne short 0x00000000001bb560; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001bb76b: jne short 0x00000000001bb755; pop rbx; ret; 
0x000000001bb80d: jne short 0x00000000001bb7f0; pop rbx; ret; 
0x000000001bb91f: jne short 0x00000000001bb910; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001bbb6b: jne short 0x00000000001bbb70; pop rbp; ret; 
0x000000001bbd36: jne short 0x00000000001bbd28; mov qword ptr [rip+0x6badd], 0x0; pop rbx; ret; 
0x000000000512cd: jno short 0x00000000000512cc; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x000000000516f9: jno short 0x00000000000516f9; dec dword ptr [rax-0x77]; ret; 
0x00000000078bdb: jno short 0x0000000000078bef; cld; call qword ptr [rax+0x87e8b48]; 
0x000000000822d0: jno short 0x00000000000822cc; jmp qword ptr [rsi+0x2e]; 
0x00000000082881: jno short 0x0000000000082887; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000829e8: jno short 0x00000000000829ee; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000903bb: jno short 0x000000000009033f; stc; call qword ptr [rax+0x50b78b48]; 
0x00000000091b50: jno short 0x0000000000091b62; syscall; 
0x00000000091bb0: jno short 0x0000000000091bc2; syscall; 
0x0000000009b788: jno short 0x000000000009b793; add [rax], al; xor eax, eax; ret; 
0x000000000a880b: jno short 0x00000000000a87c3; adc [rax], al; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a960b: jno short 0x00000000000a9663; adc [rax], al; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000a9732: jno short 0x00000000000a9743; add [rax-0x73], cl; add eax, 0xf7204; cmove rax, rdx; ret; 
0x000000000c5353: jno short 0x00000000000c5390; adc eax, 0x808b4800; sbb [rdx], al; add [rax], al; ret; 
0x000000000d367b: jno short 0x00000000000d3676; jmp qword ptr [rsi-0x70]; 
0x000000000ffc3f: jno short 0x00000000000ffc40; jmp far fword ptr [rax+0x4d7a7401]; 
0x0000000010cea5: jno short 0x000000000010ceab; add cl, ch; ret far; 
0x0000000011429b: jno short 0x00000000001142e8; adc [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119921: jno short 0x000000000011991a; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000001199d0: jno short 0x00000000001199c9; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x0000000011b0f3: jno short 0x000000000011b0f5; add [rax], al; syscall; 
0x0000000011ba6b: jno short 0x000000000011babd; idiv edi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000011c7b4: jno short 0x000000000011c7b5; cmp byte ptr [rdx], 0x0; lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x0000000011df10: jno short 0x000000000011df11; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000013acf4: jno short 0x000000000013ad04; add al, ch; test [rsi-0xb], ah; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000164fd5: jno short 0x0000000000164fcf; dec dword ptr [rcx-0x1437b]; jmp qword ptr [rsi-0x70]; 
0x0000000017bdf8: jno short 0x000000000017be00; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a3e84: jno short 0x00000000001a3e84; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40be: jno short 0x00000000001a40be; vmovups [r9-0x40], zmm15; ret; 
0x000000001a4225: jno short 0x00000000001a422d; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a437c: jno short 0x00000000001a43fa; adc [rdi-0x6], rbp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4383: jno short 0x00000000001a4401; adc [rdi-0x7], rsi; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a438a: jno short 0x00000000001a4408; adc [rdi-0x8], rdi; ret; 
0x00000000040911: jnp short 0x0000000000040911; dec dword ptr [rax-0x77]; ret; 
0x00000000091c23: jnp short 0x0000000000091c24; jmp qword ptr [rsi+0x2e]; 
0x00000000091d2b: jnp short 0x0000000000091d35; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000092df7: jnp short 0x0000000000092e01; call qword ptr [rbx]; 
0x000000000a78f3: jnp short 0x00000000000a793d; mov rsi, r14; call rax; 
0x000000000a7992: jnp short 0x00000000000a79dc; call rax; 
0x000000000a9731: jnp short 0x00000000000a97a4; str [rax-0x73]; add eax, 0xf7204; cmove rax, rdx; ret; 
0x000000000d29d4: jnp short 0x00000000000d29db; add [rbp+0x29dd75db], al; ret; 
0x000000000e97e9: jnp short 0x00000000000e97e5; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000ed062: jnp short 0x00000000000ed0b5; add [rax], al; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x000000000f054f: jnp short 0x00000000000f0553; sub [rsp+rsi*2+0x3c], dh; sub [rdi], ecx; test [rax+rax-0x76b80000], dh; ret far; 
0x000000001163e1: jnp short 0x00000000001163fb; lea rcx, [rbx+0x28]; mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000011fe74: jnp short 0x000000000011febf; mov edi, [rsp]; call rbx; 
0x00000000125c75: jnp short 0x0000000000125c77; add [rax], al; syscall; 
0x0000000013e98e: jnp short 0x000000000013e9d8; test rdi, rdi; jne short 0x000000000013e980; pop rbx; ret; 
0x000000001522d7: jnp short 0x00000000001522c7; jmp qword ptr [rsi+0xf]; 
0x0000000015518a: jnp short 0x0000000000155194; call rsi; 
0x00000000167150: jnp short 0x0000000000167151; inc dword ptr [rbp+0x487974c0]; mov eax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000017b378: jnp short 0x000000000017b380; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b416: jnp short 0x000000000017b41e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000112a66: jns 0x00000000439a7297; or [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000099d0a: jns 0xffffffffc3c9ce16; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000c3dd6: jns 0xffffffffed3c4133; mov [rdi+0x7], ch; ret; 
0x000000000c3e38: jns 0xffffffffed3c4595; mov [rdi+0xb], ch; ret; 
0x000000000c3e58: jns 0xffffffffed3c46b5; mov [rdi+0xc], ch; ret; 
0x00000000045a4b: jns short 0x0000000000045a4e; add [rax], al; xor esi, esi; mov rdi, r8; call rax; 
0x000000000463d1: jns short 0x0000000000046391; xor eax, eax; ret; 
0x000000000562eb: jns short 0x00000000000562b6; ret; 
0x0000000005a1b9: jns short 0x000000000005a181; or [r8], r8b; mov [rdi], rax; mov rax, rdi; ret; 
0x0000000009036b: jns short 0x0000000000090391; adc al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000909e6: jns short 0x00000000000909e1; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000910a4: jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x000000000a088f: jns short 0x00000000000a0897; lea rax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x000000000c0e33: jns short 0x00000000000c0e58; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c5d53: jns short 0x00000000000c5d4c; or al, [rax]; mov rdi, [r13]; movzx esi, bl; call rbp; 
0x000000000ec345: jns short 0x00000000000ec347; add [rax], al; syscall; 
0x000000000eca2e: jns short 0x00000000000eca3e; add [rcx+0x46348f6], cl; mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000000ed213: jns short 0x00000000000ed1c7; dec dword ptr [rax-0x77]; ret; 
0x00000000113432: jns short 0x00000000001133bf; add [rcx+0x63], ecx; test [rax], r8d; add rax, r13; notrack jmp rax; 
0x00000000113481: jns short 0x000000000011348b; xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x00000000119725: jns short 0x000000000011976f; add esp, 0xa0; pop rbx; ret; 
0x0000000011bf49: jns short 0x000000000011bf50; mov byte ptr [r12], 0x0; mov rax, r12; pop r12; ret; 
0x00000000151ed3: jns short 0x0000000000151f54; out dx, al; jmp qword ptr [rsi+0xf]; 
0x00000000166ea6: jns short 0x0000000000166ef1; mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000167156: jns short 0x00000000001671a0; mov eax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001691a3: jns short 0x000000000016917a; cld; jmp qword ptr [rsi+0xf]; 
0x0000000016b64e: jns short 0x000000000016b698; mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b73e: jns short 0x000000000016b788; mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b82e: jns short 0x000000000016b878; mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016b91e: jns short 0x000000000016b968; mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016d2a3: jns short 0x000000000016d239; cld; jmp qword ptr [rsi+0xf]; 
0x0000000017358c: jns short 0x0000000000173590; ret; 
0x000000001754a3: jns short 0x00000000001754b7; cld; jmp qword ptr [rsi+0xf]; 
0x00000000175e93: jns short 0x0000000000175ec4; or al, [rax]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000017b566: jns short 0x000000000017b56e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b618: jns short 0x000000000017b620; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a3e8b: jns short 0x00000000001a3e8c; ret; 
0x000000001a40c5: jns short 0x00000000001a40c6; ret; 
0x000000001a422c: jns short 0x00000000001a4235; ret; 
0x000000001afcc6: jns short 0x00000000001afcbb; bsf eax, eax; add rax, rdi; ret; 
0x000000001b6066: jns short 0x00000000001b605b; bsf eax, eax; add rax, rdi; ret; 
0x00000000039cda: jo short 0x0000000000039cec; lea rax, [rax+rsi*4]; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x0000000003a316: jo short 0x000000000003a361; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000005176f: jo short 0x000000000005176f; dec dword ptr [rax-0x77]; ret; 
0x0000000005b830: jo short 0x000000000005b81b; out dx, eax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000071dd2: jo short 0x0000000000071dee; add [rbx-0x51f4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000007fb0f: jo short 0x000000000007fb5d; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x0000000009192c: jo short 0x000000000009193e; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000923b1: jo short 0x0000000000092376; nop [rax+rax]; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000092629: jo short 0x0000000000092686; pop rbp; pop r12; ret; 
0x00000000092b1d: jo short 0x0000000000092b2b; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000094788: jo short 0x0000000000094792; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000000a8093: jo short 0x00000000000a809d; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x000000000aa9a1: jo short 0x00000000000aa9a9; sub cl, [rcx+rcx*4-0x40]; ret; 
0x000000000c5ecd: jo short 0x00000000000c5f2a; pop rbp; pop r12; ret; 
0x000000000c636d: jo short 0x00000000000c63ca; pop rbp; pop r12; ret; 
0x000000000d374b: jo short 0x00000000000d3746; jmp qword ptr [rsi-0x70]; 
0x000000000daa5d: jo short 0x00000000000daa67; add rsp, 0x10; pop rbp; ret; 
0x000000000ec405: jo short 0x00000000000ec407; add [rax], al; syscall; 
0x000000000f702b: jo short 0x00000000000f705e; shl dh, 0x82; enter 0x0, 0x0; jne 0x00000000000f6f5d; ret; 
0x000000000ff5f0: jo short 0x00000000000ff601; mov dh, 0x58; cmp dh, dh; ret; 
0x00000000108efd: jo short 0x0000000000108f47; add esp, 0x38; ret; 
0x0000000011132b: jo short 0x000000000011131f; call qword ptr [rax+0x1b8]; 
0x00000000112fb8: jo short 0x0000000000112fc9; adc [rdi+0x78], edi; ret; 
0x000000001139fd: jo short 0x0000000000113a0e; adc [rdi+0xf8], edi; ret; 
0x0000000011c18c: jo short 0x000000000011c196; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall; 
0x00000000122bf6: jo short 0x0000000000122bfa; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013f71b: jo short 0x000000000013f71c; jmp qword ptr [rsi-0x70]; 
0x0000000014557d: jo short 0x00000000001455b8; ret; 
0x0000000015d204: jo short 0x000000000015d24e; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x00000000164a70: jo short 0x0000000000164ab2; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000165c57: jo short 0x0000000000165be3; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x00000000165c6b: jo short 0x0000000000165cb6; mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000166165: jo short 0x00000000001661b0; mov edi, ebp; call qword ptr [rax+0x20]; 
0x0000000016d25d: jo short 0x000000000016d2c5; pxor mm0, mm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000017537d: jo short 0x00000000001753da; ret; 
0x000000001753be: jo short 0x000000000017541b; jmp rax; 
0x0000000017be96: jo short 0x000000000017be9e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf48: jo short 0x000000000017bf50; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000003887c: jp short 0x00000000000388b6; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000041344: jp short 0x0000000000041350; jne short 0x0000000000041350; fadd st, st(0); add rsp, 0x8; ret; 
0x0000000004174a: jp short 0x0000000000041758; jne short 0x0000000000041758; addsd xmm0, xmm0; ret; 
0x00000000041a86: jp short 0x0000000000041a90; jne short 0x0000000000041a90; addss xmm0, xmm0; ret; 
0x000000000460ca: jp short 0x0000000000046122; sbb eax, 0x1f88300; jg short 0x00000000000460f0; pop rbp; ret; 
0x0000000009141f: jp short 0x0000000000091429; mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x000000000c4a15: jp short 0x00000000000c4a26; adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000c4b85: jp short 0x00000000000c4b97; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x000000000d84d5: jp short 0x00000000000d851f; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000ff396: jp short 0x00000000000ff397; jmp far fword ptr [rax+0x6850f01]; 
0x00000000100873: jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x00000000125c45: jp short 0x0000000000125c47; add [rax], al; syscall; 
0x00000000132ab5: jp short 0x0000000000132b07; mov rsi, rdx; call rax; 
0x000000001408ea: jp short 0x00000000001408da; dec dword ptr [rax-0x7d]; ret; 
0x0000000014090b: jp short 0x00000000001408fb; jmp qword ptr [rsi-0x70]; 
0x0000000014adae: jp short 0x000000000014ae25; or eax, 0xf289e900; hlt; jmp qword ptr [rsi+0xf]; 
0x000000001509ec: jp short 0x00000000001509db; dec dword ptr [rax-0x77]; ret; 
0x00000000151902: jp short 0x00000000001518fe; jmp qword ptr [rsi+0x2e]; 
0x0000000015fd53: jp short 0x000000000015fdad; mov [rdx+0x68], rcx; ret; 
0x0000000017b4c8: jp short 0x000000000017b4d0; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000196a30: jp short 0x0000000000196a34; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000019f7a2: jp short 0x000000000019f7a5; add [rax], al; vzeroupper; ret; 
0x000000001a0b20: jp short 0x00000000001a0b42; vmovdqu [rdx], ymm8; vmovdqu [rcx], ymm0; vzeroupper; ret; 
0x000000001a6b9c: jp short 0x00000000001a6b9f; vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001af156: jp short 0x00000000001af159; vmovdqu64 [rdx], ymm24; vmovdqu64 [rcx], ymm16; ret; 
0x000000001afce4: jp short 0x00000000001afcdd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000001b6084: jp short 0x00000000001b607d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000004553c: jrcxz 0x00000000000455b1; or al, 0x90; call qword ptr [rbx]; 
0x0000000005d5f4: jrcxz 0x000000000005d63a; mov eax, eax; ret; 
0x00000000074aa7: jrcxz 0x0000000000074aa8; jmp qword ptr [rsi+0xf]; 
0x0000000007828f: jrcxz 0x00000000000782ba; ret; 
0x00000000079abc: jrcxz 0x0000000000079a85; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x00000000079fae: jrcxz 0x0000000000079faf; inc dword ptr [rcx]; ret; 
0x00000000099c5c: jrcxz 0x0000000000099be9; add eax, 0x17f651; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a2a47: jrcxz 0x00000000000a2a48; jmp qword ptr [rsi+0xf]; 
0x000000000c5af9: jrcxz 0x00000000000c5b0a; add [rax], eax; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000cbd96: jrcxz 0x00000000000cbda7; sbb dword ptr [rip+0x48000001], 0x29; ret far; 
0x000000000cce99: jrcxz 0x00000000000ccf1a; clc; dec dword ptr [rax-0x7d]; ret; 
0x000000000d299c: jrcxz 0x00000000000d299d; call qword ptr [rax-0x5e1f00d]; 
0x000000000e575f: jrcxz 0x00000000000e5761; add [rax], al; syscall; 
0x000000000e5d96: jrcxz 0x00000000000e5e0d; out 0x5b, eax; pop rbp; pop r12; ret; 
0x000000000e7172: jrcxz 0x00000000000e717c; add [rcx+rcx*4-0x8], cl; call rax; 
0x000000000f65b9: jrcxz 0x00000000000f65c8; add [rdx+0x63], cl; add al, 0x92; add rax, rdx; notrack jmp rax; 
0x000000000f7010: jrcxz 0x00000000000f701a; je short 0x00000000000f6f97; pop rbx; ret; 
0x000000001046a4: jrcxz 0x000000000010462f; sub [rcx+0x63], cl; ret far; 
0x0000000010d144: jrcxz 0x000000000010d18e; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000016839e: jrcxz 0x000000000016839c; jmp qword ptr [rsi+0x66]; 
0x0000000016acd5: jrcxz 0x000000000016ace1; add [rax+rcx*2-0x75], ah; or [rbx+0x798db90c], ecx; mov edi, 0x8337e983; call far fword ptr [rdx]; 
0x0000000017cfe7: jrcxz 0x000000000017d035; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d02f: jrcxz 0x000000000017d07d; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d06d: jrcxz 0x000000000017d0bb; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d0a9: jrcxz 0x000000000017d0f7; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d0e3: jrcxz 0x000000000017d131; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d11b: jrcxz 0x000000000017d169; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d143: jrcxz 0x000000000017d191; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017f9c7: jrcxz 0x000000000017fa15; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fa0f: jrcxz 0x000000000017fa5d; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fa4d: jrcxz 0x000000000017fa9b; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fa89: jrcxz 0x000000000017fad7; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fac3: jrcxz 0x000000000017fb11; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fafb: jrcxz 0x000000000017fb49; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fb23: jrcxz 0x000000000017fb71; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001820e9: jrcxz 0x00000000001820df; movq [rdi-0x10], mm1; ret; 
0x00000000184c19: jrcxz 0x0000000000184c0f; movq [rdi-0x10], mm1; ret; 
0x000000001a1cbc: jrcxz 0x00000000001a1ce7; enter 0xf8c5, 0x77; ret; 
0x000000001aee6c: jrcxz 0x00000000001aeee3; and [rip-0x2100e8ac], ah; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000001afc5b: jrcxz 0x00000000001afc9d; mov [rax], dh; ret; 
0x00000000043811: js 0x00000000000440c6; mov rdi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000014567c: js 0x0000000000145503; mov rax, [rsp]; mov rdi, r15; call rax; 
0x00000000145a1f: js 0x0000000000145503; mov rcx, [rsp]; mov rdi, r14; call rcx; 
0x000000001453f5: js 0x0000000000145600; mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r15; call rax; 
0x000000000bfc95: js 0x0000000066ceff12; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000c2fa5: js 0x0000000066cf3222; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000c3a95: js 0x0000000066cf3d12; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000c3d78: js 0xffffffffed3c3fd5; mov [rdi+0x3], ch; ret; 
0x000000000c3da6: js 0xffffffffed3c4203; mov [rdi+0x5], ch; ret; 
0x000000000c3df8: js 0xffffffffed3c4655; mov [rdi+0x9], ch; ret; 
0x00000000039f45: js short 0x0000000000039eca; loopne 0x0000000000039f51; ret; 
0x00000000039f85: js short 0x0000000000039f0a; loopne 0x0000000000039f8b; ret; 
0x0000000003a025: js short 0x0000000000039faa; loopne 0x000000000003a02d; ret; 
0x00000000039fa5: js short 0x0000000000039fcc; add [rax], cl; add [rax], al; ret; 
0x00000000039fc5: js short 0x0000000000039fec; add [rdx], al; add [rax], al; ret; 
0x0000000003a045: js short 0x000000000003a06c; add [rax], ah; add [rax], al; ret; 
0x0000000003a105: js short 0x000000000003a08a; loopne 0x000000000003a10a; ret; 
0x0000000003a065: js short 0x000000000003a08c; add [rcx], al; add [rax], al; ret; 
0x0000000003a085: js short 0x000000000003a0ac; add [rax], dl; add [rax], al; ret; 
0x0000000003a19e: js short 0x000000000003a123; loopne 0x000000000003a1a3; ret; 
0x0000000003a1be: js short 0x000000000003a143; loopne 0x000000000003a1ca; ret; 
0x0000000003a1fe: js short 0x000000000003a183; loopne 0x000000000003a204; ret; 
0x0000000003a29e: js short 0x000000000003a223; loopne 0x000000000003a2a6; ret; 
0x0000000003a21e: js short 0x000000000003a245; add [rax], cl; add [rax], al; ret; 
0x0000000003a23e: js short 0x000000000003a265; add [rdx], al; add [rax], al; ret; 
0x0000000003a2be: js short 0x000000000003a2e5; add [rax], ah; add [rax], al; ret; 
0x0000000003a2de: js short 0x000000000003a305; add [rcx], al; add [rax], al; ret; 
0x0000000003a2fe: js short 0x000000000003a325; add [rax], dl; add [rax], al; ret; 
0x0000000003a326: js short 0x000000000003a371; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003c39c: js short 0x000000000003c39f; add [rcx+0xf], cl; ret far; 
0x000000000425dd: js short 0x00000000000425ee; adc [rsp+0x88], edi; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000052fc5: js short 0x0000000000052fc8; add [rbp-0xa], dh; pop rbx; ret; 
0x000000000846b3: js short 0x00000000000846c5; movups [rax], xmm0; mov [rax], rdx; xor eax, eax; ret; 
0x000000000875b1: js short 0x00000000000875b8; ret; 
0x00000000091930: js short 0x000000000009193a; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000919f1: js short 0x0000000000091a13; mov eax, 0xca; syscall; 
0x0000000009b7e6: js short 0x000000000009b7f8; mov [rip+0x184302], edi; xor eax, eax; ret; 
0x0000000009bcbe: js short 0x000000000009bd08; add esp, 0x98; ret; 
0x0000000009d39a: js short 0x000000000009d3a4; call qword ptr [rax]; 
0x000000000a979f: js short 0x00000000000a97b0; add [rax-0x73], cl; add eax, 0xf7957; cmove rax, rdx; ret; 
0x000000000ace3e: js short 0x00000000000ace71; fild st, dword ptr [rbp-0x77]; ret far; 
0x000000000c3a58: js short 0x00000000000c3a54; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c5d77: js short 0x00000000000c5dd4; pop rbp; pop r12; pop r13; ret; 
0x000000000ec465: js short 0x00000000000ec467; add [rax], al; syscall; 
0x000000000ed19b: js short 0x00000000000ed1a0; ret; 
0x000000000ee614: js short 0x00000000000ee5b4; inc dword ptr [rcx-0x80]; jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x00000000112ce9: js short 0x0000000000112d00; cmp rbx, rax; pop rbx; setl al; ret; 
0x00000000112f68: js short 0x0000000000112f79; adc [rsi+0x70], edi; ret; 
0x00000000119d8a: js short 0x0000000000119d94; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000011d1e8: js short 0x000000000011d1f2; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000127ddb: js short 0x0000000000127de8; add rsp, 0x8; ret; 
0x0000000013319e: js short 0x0000000000133129; push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esp; call rax; 
0x00000000133656: js short 0x00000000001335e1; push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esi; call rax; 
0x00000000133a05: js short 0x0000000000133990; push rbp; or byte ptr [rax-0x77], 0xda; movups [rbp-0x78], xmm7; call rax; 
0x00000000133bab: js short 0x0000000000133bb5; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x000000001432e3: js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x0000000014d176: js short 0x000000000014d1b4; sub [rbp-0x24], dh; mov eax, 0x1; ret; 
0x00000000152303: js short 0x0000000000152315; jne short 0x00000000001522f8; ret; 
0x00000000154e4e: js short 0x0000000000154e60; mov rax, r12; pop r12; ret; 
0x00000000171ccb: js short 0x0000000000171ce0; mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x00000000172098: js short 0x00000000001720a8; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000172d03: js short 0x0000000000172cfc; jmp qword ptr [rsi+0xf]; 
0x000000001758f8: js short 0x0000000000175916; mov eax, 0xca; syscall; 
0x00000000175a4c: js short 0x0000000000175aab; pop r12; pop r13; pop r14; ret; 
0x00000000175c28: js short 0x0000000000175c46; mov eax, 0xca; syscall; 
0x0000000017b6b6: js short 0x000000000017b6be; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a03d4: js short 0x00000000001a03d8; add [rax], al; vzeroupper; ret; 
0x000000001b14ee: js short 0x00000000001b14e5; leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b152e: js short 0x00000000001b1525; leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b43ce: js short 0x00000000001b43c5; leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b43fe: js short 0x00000000001b43f5; leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5677: js short 0x00000000001b5602; ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x000000001b2243: kmovd eax, k0; test eax, eax; je short 0x00000000001b22a0; tzcnt eax, eax; ret; 
0x000000001b4aa3: kmovd eax, k0; test eax, eax; je short 0x00000000001b4b00; tzcnt eax, eax; ret; 
0x000000001b4bbb: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b17a5: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1775: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001af834: kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x000000001aeca5: kmovd eax, k1; ret; 
0x000000001ae9a5: kmovd eax, k1; test eax, eax; jne short 0x00000000001ae9b0; ret; 
0x000000001aec00: kmovd eax, k1; test eax, eax; jne short 0x00000000001aec0d; ret; 
0x000000001aec51: kmovd eax, k1; test eax, eax; jne short 0x00000000001aec6c; ret; 
0x000000001b5a25: kmovd eax, k1; test eax, eax; jne short 0x00000000001b5a30; ret; 
0x000000001b5ca0: kmovd eax, k1; test eax, eax; jne short 0x00000000001b5cad; ret; 
0x000000001b5cf1: kmovd eax, k1; test eax, eax; jne short 0x00000000001b5d11; ret; 
0x000000001b6421: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001b6422: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001b6195: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b5f5f: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x000000001b1528: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14e8: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b43f8: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43c8: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001aebd2: kmovd ecx, k1; test ecx, ecx; jne 0x00000000001aeaa4; ret; 
0x000000001b5c72: kmovd ecx, k1; test ecx, ecx; jne 0x00000000001b5b30; ret; 
0x000000001aea9b: kmovd ecx, k1; test ecx, ecx; jne short 0x00000000001aeaaa; ret; 
0x000000001b5b25: kmovd ecx, k1; test ecx, ecx; jne short 0x00000000001b5b36; ret; 
0x000000001afb9c: kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001aec94: kmovd k2, ecx; vmovdqu8 ymm18{k2}, [rsi]; vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; ret; 
0x000000001a721e: kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000001b235c: kmovq rax, k0; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b17a0: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1770: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b4bb7: kunpckbw k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b2357: kunpckdq k0, k1, k0; kmovq rax, k0; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000000a4bbd: lahf; add [rax], al; add [rax+0x9], cl; ret; 
0x0000000013555d: lahf; and bh, bh; call qword ptr [rax-0x18]; 
0x00000000136888: lahf; call far fword ptr [rax+0x4c]; 
0x0000000016c751: lahf; cld; jmp qword ptr [rsi+0x66]; 
0x0000000007cb2b: lahf; out 0xff, al; call qword ptr [rax-0x382708b8]; 
0x000000001201e2: lahf; ret; 
0x000000000d7c9a: lahf; shl bh, 0xd8; cmp edi, esi; cmovl eax, edx; ret; 
0x000000001a29d7: lahf; shr eax, 0x2; vzeroupper; ret; 
0x000000001201dd: lahf; vpand ymm1, ymm15, [rdi]; lahf; ret; 
0x0000000018276c: lddqu xmm0, [rsi+0x10]; movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x00000000182de6: lddqu xmm0, [rsi+0x1]; lddqu xmm1, [rsi]; movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182d76: lddqu xmm0, [rsi+0x2]; lddqu xmm1, [rsi]; movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182d06: lddqu xmm0, [rsi+0x3]; lddqu xmm1, [rsi]; movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c96: lddqu xmm0, [rsi+0x4]; lddqu xmm1, [rsi]; movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c26: lddqu xmm0, [rsi+0x5]; lddqu xmm1, [rsi]; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182bb6: lddqu xmm0, [rsi+0x6]; lddqu xmm1, [rsi]; movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182b46: lddqu xmm0, [rsi+0x7]; lddqu xmm1, [rsi]; movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182ad6: lddqu xmm0, [rsi+0x8]; lddqu xmm1, [rsi]; movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182a66: lddqu xmm0, [rsi+0x9]; lddqu xmm1, [rsi]; movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001829f6: lddqu xmm0, [rsi+0xa]; lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182986: lddqu xmm0, [rsi+0xb]; lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182916: lddqu xmm0, [rsi+0xc]; lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001828a6: lddqu xmm0, [rsi+0xd]; lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182836: lddqu xmm0, [rsi+0xe]; lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001827c6: lddqu xmm0, [rsi+0xf]; lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000181f56: lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000001826fc: lddqu xmm0, [rsi-0x11]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018267c: lddqu xmm0, [rsi-0x12]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001825ec: lddqu xmm0, [rsi-0x13]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018256c: lddqu xmm0, [rsi-0x14]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001824ec: lddqu xmm0, [rsi-0x15]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018246c: lddqu xmm0, [rsi-0x16]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001823ec: lddqu xmm0, [rsi-0x17]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018236c: lddqu xmm0, [rsi-0x18]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001822ec: lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018226c: lddqu xmm0, [rsi-0x1a]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001821ec: lddqu xmm0, [rsi-0x1b]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018216c: lddqu xmm0, [rsi-0x1c]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001820dc: lddqu xmm0, [rsi-0x1d]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018204c: lddqu xmm0, [rsi-0x1e]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181fbc: lddqu xmm0, [rsi-0x1f]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181f4c: lddqu xmm0, [rsi-0x20]; movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x00000000182776: lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x00000000182701: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182681: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001825f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182571: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001824f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182471: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001823f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182371: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001822f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182271: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001821f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182171: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001820e1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182051: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181fc1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182deb: lddqu xmm1, [rsi]; movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182d7b: lddqu xmm1, [rsi]; movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182d0b: lddqu xmm1, [rsi]; movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c9b: lddqu xmm1, [rsi]; movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c2b: lddqu xmm1, [rsi]; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182bbb: lddqu xmm1, [rsi]; movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182b4b: lddqu xmm1, [rsi]; movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182adb: lddqu xmm1, [rsi]; movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182a6b: lddqu xmm1, [rsi]; movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001829fb: lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000018298b: lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000018291b: lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001828ab: lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000018283b: lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001827cb: lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000961e5: lea eax, [rax*8+0x6]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000010935b: lea eax, [rax+rax*8+0x5]; ret; 
0x0000000009d59d: lea eax, [rax+rax+0x2]; ret; 
0x000000000d6b56: lea eax, [rax+rax-0x1]; ret; 
0x000000000c5c19: lea eax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x000000001a29f4: lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29e4: lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29d4: lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29b4: lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x0000000004667f: lea eax, [rax+rcx*4]; mov [rcx+0x10], r8; mov [rcx+0x28], rax; xor eax, eax; ret; 
0x000000000b4bc4: lea eax, [rax+rdi+0x10]; ret; 
0x000000000b4bd4: lea eax, [rax+rdi+0x20]; ret; 
0x000000000b50b4: lea eax, [rax+rdi+0x30]; ret; 
0x000000000b4ba4: lea eax, [rax+rdi-0x10]; ret; 
0x000000000e5cc0: lea eax, [rax+rdx*8]; ret; 
0x0000000009165e: lea eax, [rax+rdx+0x4000]; ret; 
0x00000000175dbf: lea eax, [rax+rdx+0x4]; ret; 
0x000000000b153c: lea eax, [rax+rdx-0x1]; ret; 
0x00000000039cdd: lea eax, [rax+rsi*4]; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x00000000084272: lea eax, [rax]; add [rax], al; add [rax+0x29], cl; ret far; 
0x0000000011a935: lea eax, [rax]; add [rax], al; syscall; 
0x00000000142dd4: lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x000000001b5264: lea eax, [rcx+rax-0x11]; ret; 
0x000000001b5254: lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f14: lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3f04: lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3ef4: lea eax, [rcx+rax-0x61]; ret; 
0x000000001b3ee4: lea eax, [rcx+rax-0x81]; ret; 
0x000000001b5274: lea eax, [rcx+rax-0x9]; ret; 
0x000000000ba8cd: lea eax, [rcx+rsi]; ret; 
0x000000000c4514: lea eax, [rcx-0x1]; ret; 
0x000000000c142c: lea eax, [rdi+0x10]; ret; 
0x000000000c1dfc: lea eax, [rdi+0x10]; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000c1441: lea eax, [rdi+0x11]; ret; 
0x000000000c1e21: lea eax, [rdi+0x11]; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c145f: lea eax, [rdi+0x12]; ret; 
0x000000000c1e4f: lea eax, [rdi+0x12]; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c147f: lea eax, [rdi+0x13]; ret; 
0x000000000c1e7f: lea eax, [rdi+0x13]; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c14a2: lea eax, [rdi+0x14]; ret; 
0x000000000c1eb2: lea eax, [rdi+0x14]; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c14c1: lea eax, [rdi+0x15]; ret; 
0x000000000c1ee1: lea eax, [rdi+0x15]; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c14e1: lea eax, [rdi+0x16]; ret; 
0x000000000c1f11: lea eax, [rdi+0x16]; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c1501: lea eax, [rdi+0x17]; ret; 
0x000000000c1f41: lea eax, [rdi+0x17]; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c1524: lea eax, [rdi+0x18]; ret; 
0x000000000c1f74: lea eax, [rdi+0x18]; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x000000000c1549: lea eax, [rdi+0x19]; ret; 
0x000000000c1fa9: lea eax, [rdi+0x19]; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c12c7: lea eax, [rdi+0x1]; ret; 
0x000000000c1bd7: lea eax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x000000001b07e7: lea eax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe17: lea eax, [rdi+0x1]; vzeroupper; ret; 
0x000000000c1567: lea eax, [rdi+0x1a]; ret; 
0x000000000c1fd7: lea eax, [rdi+0x1a]; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c1587: lea eax, [rdi+0x1b]; ret; 
0x000000000c2007: lea eax, [rdi+0x1b]; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c15a3: lea eax, [rdi+0x1c]; ret; 
0x000000000c2033: lea eax, [rdi+0x1c]; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c15c3: lea eax, [rdi+0x1d]; ret; 
0x000000000c2063: lea eax, [rdi+0x1d]; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c15e3: lea eax, [rdi+0x1e]; ret; 
0x000000000c2093: lea eax, [rdi+0x1e]; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x000000000c1603: lea eax, [rdi+0x1f]; ret; 
0x000000000c20c3: lea eax, [rdi+0x1f]; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x000000000c2473: lea eax, [rdi+0x20]; ret; 
0x000000000c12da: lea eax, [rdi+0x2]; ret; 
0x000000000c1bfa: lea eax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x000000001b080b: lea eax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe2b: lea eax, [rdi+0x2]; vzeroupper; ret; 
0x000000000c12e5: lea eax, [rdi+0x3]; ret; 
0x000000000c1c15: lea eax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x000000001b0825: lea eax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe45: lea eax, [rdi+0x3]; vzeroupper; ret; 
0x000000000c26e9: lea eax, [rdi+0x40]; ret; 
0x000000001b0a21: lea eax, [rdi+0x41]; ret; 
0x000000001a05b9: lea eax, [rdi+0x41]; vzeroupper; ret; 
0x000000000c12f8: lea eax, [rdi+0x4]; ret; 
0x00000000175db7: lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x000000000c1c38: lea eax, [rdi+0x4]; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x000000000c130d: lea eax, [rdi+0x5]; ret; 
0x000000000c1c5d: lea eax, [rdi+0x5]; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x000000000c132b: lea eax, [rdi+0x6]; ret; 
0x000000000c1c7b: lea eax, [rdi+0x6]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x000000000c1337: lea eax, [rdi+0x7]; ret; 
0x000000000c1c97: lea eax, [rdi+0x7]; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x000000001b0bf4: lea eax, [rdi+0x80]; ret; 
0x000000001a075c: lea eax, [rdi+0x80]; vzeroupper; ret; 
0x000000000c134a: lea eax, [rdi+0x8]; ret; 
0x000000000c1cba: lea eax, [rdi+0x8]; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x00000000141df4: lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000c135f: lea eax, [rdi+0x9]; ret; 
0x000000000c1cdf: lea eax, [rdi+0x9]; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x000000000c137d: lea eax, [rdi+0xa]; ret; 
0x000000000c1d0d: lea eax, [rdi+0xa]; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x000000000c139d: lea eax, [rdi+0xb]; ret; 
0x000000000c1d2d: lea eax, [rdi+0xb]; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x000000000c13bf: lea eax, [rdi+0xc]; ret; 
0x000000000c1d4f: lea eax, [rdi+0xc]; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000000c13df: lea eax, [rdi+0xd]; ret; 
0x000000000c1d7f: lea eax, [rdi+0xd]; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x000000000c13ff: lea eax, [rdi+0xe]; ret; 
0x000000000c1daf: lea eax, [rdi+0xe]; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x000000000c1419: lea eax, [rdi+0xf]; ret; 
0x000000000c1dd9: lea eax, [rdi+0xf]; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x000000001b43eb: lea eax, [rdi+rax*4+0x20]; ret; 
0x000000001b4404: lea eax, [rdi+rax*4+0x40]; ret; 
0x000000001b43ab: lea eax, [rdi+rax*4+0x60]; ret; 
0x000000001b43d4: lea eax, [rdi+rax*4+0x80]; ret; 
0x000000001b6455: lea eax, [rdi+rax*4+0xa0]; ret; 
0x000000001b6465: lea eax, [rdi+rax*4+0xc0]; ret; 
0x000000001b642b: lea eax, [rdi+rax*4+0xe0]; ret; 
0x000000001b5681: lea eax, [rdi+rax*4-0x20]; ret; 
0x000000001b5769: lea eax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001b438c: lea eax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000001b455a: lea eax, [rdi+rax*4]; ret; 
0x000000001b5945: lea eax, [rdi+rax*4]; vzeroupper; ret; 
0x000000000b4bf9: lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad9: lea eax, [rdi+rax+0x18]; ret; 
0x000000000b4c09: lea eax, [rdi+rax+0x20]; ret; 
0x000000001ae8c5: lea eax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000142295: lea eax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000b4b03: lea eax, [rdi+rax+0x30]; ret; 
0x000000001ae735: lea eax, [rdi+rax+0x40]; ret; 
0x000000001ae89d: lea eax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001ae745: lea eax, [rdi+rax+0x60]; ret; 
0x000000001ae755: lea eax, [rdi+rax+0x80]; ret; 
0x000000001b4ab9: lea eax, [rdi+rax+0x8]; ret; 
0x000000001b5f85: lea eax, [rdi+rax+0xa0]; ret; 
0x000000001b5f95: lea eax, [rdi+rax+0xc0]; ret; 
0x000000001b5f68: lea eax, [rdi+rax+0xe0]; ret; 
0x000000001b42b1: lea eax, [rdi+rax-0x20]; ret; 
0x0000000019d8d5: lea eax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001acb45: lea eax, [rdi+rax-0x20]; xtest; je short 0x00000000001acb52; vzeroall; ret; 
0x000000001adeca: lea eax, [rdi+rax-0x20]; xtest; je short 0x00000000001aded7; vzeroall; ret; 
0x000000001afdeb: lea eax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000001afe15: lea eax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001afe05: lea eax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000001ae6e9: lea eax, [rdi+rax]; cmovle rax, rcx; ret; 
0x000000001994a9: lea eax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000ba2e0: lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000ba50b: lea eax, [rdi+rax]; ret; 
0x000000001a0513: lea eax, [rdi+rax]; vzeroupper; ret; 
0x00000000198904: lea eax, [rdi+rcx]; ret; 
0x000000000a0892: lea eax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x000000001b01dd: lea eax, [rdi+rdx]; ret; 
0x0000000019fe5d: lea eax, [rdi+rdx]; vzeroupper; ret; 
0x0000000014a645: lea eax, [rdi+rsi+0x14]; ret; 
0x00000000143117: lea eax, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000ba7c9: lea eax, [rdi+rsi]; ret; 
0x000000000d800e: lea eax, [rdi-0x10]; ret; 
0x000000000d8191: lea eax, [rdi-0x4]; ret; 
0x000000000d8181: lea eax, [rdi-0x8]; ret; 
0x000000000d8171: lea eax, [rdi-0xc]; ret; 
0x000000000c12b3: lea eax, [rdi]; ret; 
0x000000000c1bb3: lea eax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x000000001b0626: lea eax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x0000000019fd95: lea eax, [rdi]; vzeroupper; ret; 
0x000000001a9729: lea eax, [rdi]; xtest; je short 0x00000000001a9734; vzeroall; ret; 
0x0000000018f9f7: lea eax, [rdx+0x1]; ret; 
0x0000000018fa0d: lea eax, [rdx+0x2]; ret; 
0x0000000018fa25: lea eax, [rdx+0x3]; ret; 
0x0000000018fa3b: lea eax, [rdx+0x4]; ret; 
0x0000000018fa4d: lea eax, [rdx+0x5]; ret; 
0x0000000018fa6b: lea eax, [rdx+0x6]; ret; 
0x00000000191e32: lea eax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018f977: lea eax, [rdx+0x7]; ret; 
0x0000000018fa7d: lea eax, [rdx+0x8]; ret; 
0x0000000018fa9d: lea eax, [rdx+0x9]; ret; 
0x0000000018fabd: lea eax, [rdx+0xa]; ret; 
0x0000000018fadd: lea eax, [rdx+0xb]; ret; 
0x0000000018faff: lea eax, [rdx+0xc]; ret; 
0x0000000018fb1f: lea eax, [rdx+0xd]; ret; 
0x00000000191d87: lea eax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018fb3f: lea eax, [rdx+0xe]; ret; 
0x0000000018f9cf: lea eax, [rdx+0xf]; ret; 
0x000000001b45b3: lea eax, [rdx+rax*4]; ret; 
0x0000000019d566: lea eax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000015fe0d: lea eax, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000008453e: lea eax, [rdx+rdi]; ret; 
0x0000000008453d: lea eax, [rdx+rdi]; ret; 
0x000000001a162d: lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a132f: lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001ae34f: lea eax, [rdx+rdx-0x1]; xtest; je short 0x00000000001ae35c; vzeroall; ret; 
0x00000000043180: lea eax, [rdx-0x1]; mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x0000000018f9e5: lea eax, [rdx]; ret; 
0x0000000011f443: lea eax, [rip+0x101ff7]; pop r12; pop r13; ret; 
0x0000000011eee0: lea eax, [rip+0x1024fa]; pop rbp; pop r12; pop r13; ret; 
0x0000000011c40a: lea eax, [rip+0x104e48]; pop rbx; pop rbp; ret; 
0x000000000a9d86: lea eax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a9946: lea eax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a9609: lea eax, [rip+0x105671]; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000a9716: lea eax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a9836: lea eax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000ab0f9: lea eax, [rip+0x106601]; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a8349: lea eax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a8789: lea eax, [rip+0x109a91]; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000ab082: lea eax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a8809: lea eax, [rip+0x10b671]; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a49: lea eax, [rip+0x10b6f1]; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a94f2: lea eax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000c5af7: lea eax, [rip+0x10fe3]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000c5a8d: lea eax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000c6d77: lea eax, [rip+0x11873]; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c54c6: lea eax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000a8a36: lea eax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a8309: lea eax, [rip+0x11f81]; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000b1521: lea eax, [rip+0x1218d5]; mov edi, edx; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x000000000a8776: lea eax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87f6: lea eax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000c56f6: lea eax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c5826: lea eax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c550a: lea eax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000c5446: lea eax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000c55e7: lea eax, [rip+0x12bc3]; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x00000000078c24: lea eax, [rip+0x158b36]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x000000000a9a08: lea eax, [rip+0x15e12]; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000b182f: lea eax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b184f: lea eax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x000000000a8448: lea eax, [rip+0x172e2]; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x0000000015ded0: lea eax, [rip+0x17a]; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000007d332: lea eax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x00000000038891: lea eax, [rip+0x19fbd8]; ret; 
0x00000000038875: lea eax, [rip+0x19fbf4]; cmp [rdx+0x38], edi; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x000000000a8288: lea eax, [rip+0x1a512]; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a9d66: lea eax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x00000000029f35: lea eax, [rip+0x1ae09b]; ret; 
0x000000000a93aa: lea eax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x00000000029f45: lea eax, [rip+0x1aff5c]; ret; 
0x000000000a9926: lea eax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96f6: lea eax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x000000000a97ba: lea eax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x000000000a8b9a: lea eax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a7a: lea eax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84ba: lea eax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x00000000051699: lea eax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000469d5: lea eax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x00000000038828: lea eax, [rip+0x1e2412]; ret; 
0x000000000b1646: lea eax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000001576b7: lea eax, [rip+0x3c03]; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000134712: lea eax, [rip+0x46658]; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b2: lea eax, [rip+0x468d8]; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345e2: lea eax, [rip+0x49188]; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x00000000029cbc: lea eax, [rip+0x602ae]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x000000001347a6: lea eax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x00000000134676: lea eax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x00000000134546: lea eax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x00000000134813: lea eax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000135b74: lea eax, [rip+0x71586]; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x00000000134746: lea eax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x00000000134616: lea eax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344e6: lea eax, [rip+0x72424]; cmove rax, rdx; ret; 
0x0000000013485c: lea eax, [rip+0x7293e]; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000001346de: lea eax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345ae: lea eax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x0000000013447e: lea eax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x0000000013487a: lea eax, [rip+0x74060]; cmove rax, rdx; ret; 
0x00000000134786: lea eax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x00000000134656: lea eax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x00000000134526: lea eax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x000000001348a6: lea eax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x000000000a9a98: lea eax, [rip+0x7e32]; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x0000000014d6f4: lea eax, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x000000000a8988: lea eax, [rip+0x8fb2]; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8858: lea eax, [rip+0x9022]; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8398: lea eax, [rip+0x9602]; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000ab05d: lea eax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000a891a: lea eax, [rip+0xa780]; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x00000000128183: lea eax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x000000000a94cd: lea eax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a9537: lea eax, [rip+0xbcd3]; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bcc: lea eax, [rip+0xbe2e]; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x0000000015df8c: lea eax, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000a9b2c: lea eax, [rip+0xbeae]; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a95f6: lea eax, [rip+0xc014]; cmove rax, rdx; ret; 
0x0000000015d34c: lea eax, [rip+0xca50e]; add rsp, 0x8; ret; 
0x000000000a9d12: lea eax, [rip+0xd1088]; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d2: lea eax, [rip+0xd14a8]; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a96a2: lea eax, [rip+0xd40d8]; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000c5b3a: lea eax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db5: lea eax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c5625: lea eax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x0000000015de15: lea eax, [rip+0xddd5]; push qword ptr [rip+0x84727]; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000a9c1c: lea eax, [rip+0xe02e]; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b7c: lea eax, [rip+0xe0ae]; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000c5bd4: lea eax, [rip+0xe1536]; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000c6dc1: lea eax, [rip+0xee419]; test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x000000000c5459: lea eax, [rip+0xeeee1]; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54d9: lea eax, [rip+0xef0e1]; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c5631: lea eax, [rip+0xef449]; test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x000000000c5709: lea eax, [rip+0xef4f1]; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c5839: lea eax, [rip+0xefcb1]; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x000000000a957a: lea eax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x000000000a83c1: lea eax, [rip+0xf06f9]; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000c5ab2: lea eax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000ab0e6: lea eax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8336: lea eax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000a82b1: lea eax, [rip+0xf5af9]; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a8881: lea eax, [rip+0xf5b99]; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a9a31: lea eax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac1: lea eax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000a89b1: lea eax, [rip+0xf6809]; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a8471: lea eax, [rip+0xf69b9]; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000a9da6: lea eax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a9966: lea eax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a9736: lea eax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a97a3: lea eax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x000000000a9d46: lea eax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a9906: lea eax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96d6: lea eax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a97ec: lea eax, [rip+0xfd9ce]; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x000000000b1659: lea eax, [rip+0xfe0a1]; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000000a9cde: lea eax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a989e: lea eax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a966e: lea eax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000000a980a: lea eax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x000000000d9bf9: lea eax, [rip-0x10f]; add rsp, 0x58; ret; 
0x000000000d9ae9: lea eax, [rip-0x10f]; ret; 
0x000000000d9c09: lea eax, [rip-0x11f]; ret; 
0x00000000167729: lea eax, [rip-0x5b5f]; xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x00000000167634: lea eax, [rip-0x5d2a]; mov esi, 0x1; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016782d: lea eax, [rip-0x5e23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016792d: lea eax, [rip-0x5f23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a49: lea eax, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167b89: lea eax, [rip-0x617f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167d85: lea eax, [rip-0x647b]; lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000167e88: lea eax, [rip-0x647e]; mov esi, 0xa; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000013482a: lea eax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x00000000134506: lea eax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x00000000134636: lea eax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x00000000134766: lea eax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x00000000135b5c: lea eax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x00000000167cd4: lea eax, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x000000000c5bbc: lea eax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000d9ad9: lea eax, [rip-0xff]; add rsp, 0x58; ret; 
0x00000000142c1f: lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x00000000142c20: lea eax, [rsi+rax+0x2]; pop rbx; ret; 
0x00000000128642: lea eax, [rsi-0x1]; cmp eax, 0x2; ja short 0x0000000000128668; mov eax, 0x1f; syscall; 
0x00000000128641: lea eax, [rsi-0x1]; cmp eax, 0x2; ja short 0x0000000000128668; mov eax, 0x1f; syscall; 
0x0000000017560d: lea eax, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000001750b6: lea eax, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x0000000011aaef: lea eax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x0000000012850f: lea eax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x00000000126521: lea eax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x0000000017518b: lea eax, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017531d: lea eax, [rsp+0x30]; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000000d9a8f: lea eax, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000000352f7: lea eax, [rsp+0xa0]; call r15; 
0x00000000165c52: lea ebp, [rax-0x1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x0000000016a203: lea ebp, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000016a58f: lea ebp, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x000000000c048f: lea ebp, [rcx+rdx]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000166cc5: lea ebp, [rsp+0x148]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d645: lea ebp, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000001630ed: lea ebp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000008df1e: lea ebx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000008deab: lea ebx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000005b806: lea ebx, [rdi+rdi*8-0x1]; jmp qword ptr [rsi+0xf]; 
0x000000000c1263: lea ebx, [rdi]; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c41da: lea ebx, [rip+0x10f2f4]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a56: lea ebx, [rip+0x10fa78]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a2d: lea ebx, [rip+0x10faa1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a0d: lea ebx, [rip+0x10fac1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39e4: lea ebx, [rip+0x10faea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39b5: lea ebx, [rip+0x10fb19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3996: lea ebx, [rip+0x10fb38]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3911: lea ebx, [rip+0x10fb3d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38f6: lea ebx, [rip+0x10fb58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3974: lea ebx, [rip+0x10fb5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3944: lea ebx, [rip+0x10fb8a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38c1: lea ebx, [rip+0x10fb8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3895: lea ebx, [rip+0x10fbb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c387f: lea ebx, [rip+0x10fbcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c385d: lea ebx, [rip+0x10fbf1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3838: lea ebx, [rip+0x10fc16]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c381b: lea ebx, [rip+0x10fc33]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c37a4: lea ebx, [rip+0x10fcaa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f66: lea ebx, [rip+0x110468]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f31: lea ebx, [rip+0x11049d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f05: lea ebx, [rip+0x1104c9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2eef: lea ebx, [rip+0x1104df]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ecd: lea ebx, [rip+0x110501]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea8: lea ebx, [rip+0x110526]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e8b: lea ebx, [rip+0x110543]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e33: lea ebx, [rip+0x11059b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c277a: lea ebx, [rip+0x110b80]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2681: lea ebx, [rip+0x110d09]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c266b: lea ebx, [rip+0x110d1f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c264b: lea ebx, [rip+0x110d3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b96: lea ebx, [rip+0x111764]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b6d: lea ebx, [rip+0x11178d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b4d: lea ebx, [rip+0x1117ad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b24: lea ebx, [rip+0x1117d6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1af5: lea ebx, [rip+0x111805]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ad6: lea ebx, [rip+0x111824]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a51: lea ebx, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab4: lea ebx, [rip+0x111846]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a84: lea ebx, [rip+0x111876]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c196f: lea ebx, [rip+0x11190b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1941: lea ebx, [rip+0x111939]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1918: lea ebx, [rip+0x111962]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1296: lea ebx, [rip+0x111f58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1261: lea ebx, [rip+0x111f8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1235: lea ebx, [rip+0x111fb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c121f: lea ebx, [rip+0x111fcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11fd: lea ebx, [rip+0x111ff1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11d8: lea ebx, [rip+0x112016]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11bb: lea ebx, [rip+0x112033]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1163: lea ebx, [rip+0x11208b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0f2a: lea ebx, [rip+0x1121f0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e31: lea ebx, [rip+0x112379]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e1b: lea ebx, [rip+0x11238f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0dfb: lea ebx, [rip+0x1123af]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c04b6: lea ebx, [rip+0x112c64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c048d: lea ebx, [rip+0x112c8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c046d: lea ebx, [rip+0x112cad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0444: lea ebx, [rip+0x112cd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0415: lea ebx, [rip+0x112d05]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03f6: lea ebx, [rip+0x112d24]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0371: lea ebx, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03d4: lea ebx, [rip+0x112d46]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03a4: lea ebx, [rip+0x112d76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c029f: lea ebx, [rip+0x112dfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0271: lea ebx, [rip+0x112e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0248: lea ebx, [rip+0x112e52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc56: lea ebx, [rip+0x1133c4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc21: lea ebx, [rip+0x1133f9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf5: lea ebx, [rip+0x113425]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbdf: lea ebx, [rip+0x11343b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbbd: lea ebx, [rip+0x11345d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb98: lea ebx, [rip+0x113482]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb7b: lea ebx, [rip+0x11349f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb23: lea ebx, [rip+0x1134f7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000003ff3e: lea ebx, [rip+0x18c534]; movzx r10d, r10b; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x0000000007ad8a: lea ebx, [rip+0x2b0]; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000184a22: lea ebx, [rip+0x5eda8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001846c4: lea ebx, [rip+0x5f106]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018486f: lea ebx, [rip+0x5f19b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184544: lea ebx, [rip+0x5f286]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184607: lea ebx, [rip+0x5f403]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001843c4: lea ebx, [rip+0x5f406]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184487: lea ebx, [rip+0x5f583]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184244: lea ebx, [rip+0x5f586]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184307: lea ebx, [rip+0x5f703]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001840c4: lea ebx, [rip+0x5f706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184188: lea ebx, [rip+0x5f882]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183f44: lea ebx, [rip+0x5f886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184007: lea ebx, [rip+0x5fa03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183dc4: lea ebx, [rip+0x5fa06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183e87: lea ebx, [rip+0x5fb83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183c44: lea ebx, [rip+0x5fb86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183d07: lea ebx, [rip+0x5fd03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183ac4: lea ebx, [rip+0x5fd06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183b87: lea ebx, [rip+0x5fe83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183944: lea ebx, [rip+0x5fe86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183a07: lea ebx, [rip+0x60003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001837c4: lea ebx, [rip+0x60006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183887: lea ebx, [rip+0x60183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183644: lea ebx, [rip+0x60186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183707: lea ebx, [rip+0x60303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001834c4: lea ebx, [rip+0x60306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183587: lea ebx, [rip+0x60483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183344: lea ebx, [rip+0x60486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183407: lea ebx, [rip+0x60603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001831c4: lea ebx, [rip+0x60606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018304b: lea ebx, [rip+0x6077f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183287: lea ebx, [rip+0x60783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183107: lea ebx, [rip+0x60903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e40: lea ebx, [rip+0x6098a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fca: lea ebx, [rip+0x60a40]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e63: lea ebx, [rip+0x60ba7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182f20: lea ebx, [rip+0x60d6a]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000182eb9: lea ebx, [rip+0x60d91]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000181eee: lea ebx, [rip+0x613dc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181bc4: lea ebx, [rip+0x61706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d5b: lea ebx, [rip+0x617af]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181a44: lea ebx, [rip+0x61886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181b07: lea ebx, [rip+0x61a03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001818c4: lea ebx, [rip+0x61a06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181987: lea ebx, [rip+0x61b83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181744: lea ebx, [rip+0x61b86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181807: lea ebx, [rip+0x61d03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001815c4: lea ebx, [rip+0x61d06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181688: lea ebx, [rip+0x61e82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181444: lea ebx, [rip+0x61e86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181507: lea ebx, [rip+0x62003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001812c4: lea ebx, [rip+0x62006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181387: lea ebx, [rip+0x62183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181144: lea ebx, [rip+0x62186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181207: lea ebx, [rip+0x62303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180fc4: lea ebx, [rip+0x62306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181087: lea ebx, [rip+0x62483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180e44: lea ebx, [rip+0x62486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180f07: lea ebx, [rip+0x62603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180cc4: lea ebx, [rip+0x62606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180d87: lea ebx, [rip+0x62783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180b44: lea ebx, [rip+0x62786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180c07: lea ebx, [rip+0x62903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001809c4: lea ebx, [rip+0x62906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180a87: lea ebx, [rip+0x62a83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180844: lea ebx, [rip+0x62a86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180907: lea ebx, [rip+0x62c03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001806c4: lea ebx, [rip+0x62c06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018054b: lea ebx, [rip+0x62d7f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180787: lea ebx, [rip+0x62d83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001802e5: lea ebx, [rip+0x62e25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180228: lea ebx, [rip+0x62ee2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180607: lea ebx, [rip+0x62f03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180360: lea ebx, [rip+0x62f6a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018013d: lea ebx, [rip+0x62fcd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804ca: lea ebx, [rip+0x63040]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180072: lea ebx, [rip+0x63098]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018034c: lea ebx, [rip+0x631be]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180420: lea ebx, [rip+0x6336a]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000001803be: lea ebx, [rip+0x6338c]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x0000000017f053: lea ebx, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017efb5: lea ebx, [rip+0x64155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ef03: lea ebx, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ee65: lea ebx, [rip+0x642a5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edb3: lea ebx, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed15: lea ebx, [rip+0x643f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec63: lea ebx, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ebc5: lea ebx, [rip+0x64545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb13: lea ebx, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ea75: lea ebx, [rip+0x64695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9c3: lea ebx, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e925: lea ebx, [rip+0x647e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e873: lea ebx, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e7d5: lea ebx, [rip+0x64935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e723: lea ebx, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e688: lea ebx, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5d3: lea ebx, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e535: lea ebx, [rip+0x64bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e483: lea ebx, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e5: lea ebx, [rip+0x64d25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e333: lea ebx, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e295: lea ebx, [rip+0x64e75]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1e3: lea ebx, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e145: lea ebx, [rip+0x64fc5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e093: lea ebx, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dff5: lea ebx, [rip+0x65115]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df43: lea ebx, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dea5: lea ebx, [rip+0x65265]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddf3: lea ebx, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dd55: lea ebx, [rip+0x653b5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dca7: lea ebx, [rip+0x65463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dbb6: lea ebx, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf7: lea ebx, [rip+0x65613]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017da8d: lea ebx, [rip+0x6567d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98e: lea ebx, [rip+0x6577c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d754: lea ebx, [rip+0x657f6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8c9: lea ebx, [rip+0x65841]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d67a: lea ebx, [rip+0x658d0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d856: lea ebx, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7fc: lea ebx, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017c673: lea ebx, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d5: lea ebx, [rip+0x66975]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c523: lea ebx, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c485: lea ebx, [rip+0x66ac5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3d3: lea ebx, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c335: lea ebx, [rip+0x66c15]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c283: lea ebx, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c1e5: lea ebx, [rip+0x66d65]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c133: lea ebx, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c095: lea ebx, [rip+0x66eb5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfe3: lea ebx, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf45: lea ebx, [rip+0x67005]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be93: lea ebx, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bdf5: lea ebx, [rip+0x67155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd43: lea ebx, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca8: lea ebx, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbf3: lea ebx, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bb55: lea ebx, [rip+0x673f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017baa3: lea ebx, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba05: lea ebx, [rip+0x67545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b953: lea ebx, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b8b5: lea ebx, [rip+0x67695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b803: lea ebx, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b765: lea ebx, [rip+0x677e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6b3: lea ebx, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b615: lea ebx, [rip+0x67935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b563: lea ebx, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b4c5: lea ebx, [rip+0x67a85]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b413: lea ebx, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b375: lea ebx, [rip+0x67bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b2c7: lea ebx, [rip+0x67c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d6: lea ebx, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b117: lea ebx, [rip+0x67e33]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b0ad: lea ebx, [rip+0x67e9d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afae: lea ebx, [rip+0x67f9c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aee9: lea ebx, [rip+0x68061]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ae76: lea ebx, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae15: lea ebx, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x00000000076bca: lea ebx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d6a: lea ebx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c728: lea ebx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7e0: lea ebx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a92: lea ebx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dc3: lea ebx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e1c: lea ebx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b7f6: lea ebx, [rip-0x7bc]; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x0000000007b846: lea ebx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b890: lea ebx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d8: lea ebx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b928: lea ebx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b9be: lea ebx, [rip-0x984]; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076194: lea ebx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076284: lea ebx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb16: lea ebx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb6a: lea ebx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076324: lea ebx, [rip-0xb3a]; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000007bbb8: lea ebx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007637a: lea ebx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc14: lea ebx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076444: lea ebx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x000000000c5e06: lea ecx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x000000000c5f6c: lea ecx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c63a6: lea ecx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x0000000009c05b: lea ecx, [rax-0x1]; lock cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000014d6f7: lea ecx, [rax]; add [rcx+rax-0x39], cl; notrack jmp rdi; 
0x000000001168aa: lea ecx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116c02: lea ecx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b9a: lea ecx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x000000001163e4: lea ecx, [rbx+0x28]; mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000007dad5: lea ecx, [rbx+0x40]; lea rdx, [rbx+0x34]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000007e17a: lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x0000000017ae20: lea ecx, [rbx+rcx]; notrack jmp r9; 
0x000000000bfb2e: lea ecx, [rbx+rcx]; notrack jmp rcx; 
0x00000000072fe4: lea ecx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078517: lea ecx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000017b2f1: lea ecx, [rcx-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000012643e: lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x0000000018d2c6: lea ecx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x00000000191657: lea ecx, [rdx+0x10]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d4bc: lea ecx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000019185c: lea ecx, [rdx+0x1]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d4de: lea ecx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x0000000019187f: lea ecx, [rdx+0x2]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d504: lea ecx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x000000001918a5: lea ecx, [rdx+0x3]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000175606: lea ecx, [rdx+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000018d51c: lea ecx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x000000001918cd: lea ecx, [rdx+0x4]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000081e3a: lea ecx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x0000000018d542: lea ecx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x000000001918f3: lea ecx, [rdx+0x5]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d564: lea ecx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x00000000191925: lea ecx, [rdx+0x6]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d582: lea ecx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x00000000191953: lea ecx, [rdx+0x7]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d25e: lea ecx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x000000001915ef: lea ecx, [rdx+0x8]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5a4: lea ecx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x00000000191985: lea ecx, [rdx+0x9]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5c4: lea ecx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x000000001919b5: lea ecx, [rdx+0xa]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5e4: lea ecx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x000000001919e5: lea ecx, [rdx+0xb]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d604: lea ecx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x00000000191a15: lea ecx, [rdx+0xc]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d626: lea ecx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x00000000191a47: lea ecx, [rdx+0xd]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d646: lea ecx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x00000000191a77: lea ecx, [rdx+0xe]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d666: lea ecx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x00000000191aa7: lea ecx, [rdx+0xf]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000012a5e2: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae29: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae86: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x00000000192f37: lea ecx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000000b138c: lea ecx, [rip+0x121a22]; mov edi, ecx; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x0000000007dda7: lea ecx, [rip+0x1546a7]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000006b223: lea ecx, [rip+0x165f3f]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006ad65: lea ecx, [rip+0x1661f1]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062642: lea ecx, [rip+0x16e040]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062572: lea ecx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000008a6a6: lea ecx, [rip+0x18b954]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000003d47a: lea ecx, [rip+0x18eea8]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4af: lea ecx, [rip+0x18eec7]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4da: lea ecx, [rip+0x18eef0]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d269: lea ecx, [rip+0x18efbd]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d29e: lea ecx, [rip+0x18efdc]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d2c9: lea ecx, [rip+0x18f005]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003caec: lea ecx, [rip+0x18f596]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cc35: lea ecx, [rip+0x18f59d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cbde: lea ecx, [rip+0x18f5a0]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb35: lea ecx, [rip+0x18f5a1]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003ca6a: lea ecx, [rip+0x18f5c4]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb64: lea ecx, [rip+0x18f5c6]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c9cf: lea ecx, [rip+0x18f60b]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c472: lea ecx, [rip+0x18fb14]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003a9ed: lea ecx, [rip+0x19156d]; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x0000000019d27e: lea ecx, [rip+0x2123c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019bb9d: lea ecx, [rip+0x2291d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000019b8c9: lea ecx, [rip+0x22bf1]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019a4b4: lea ecx, [rip+0x24006]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001986be: lea ecx, [rip+0x25dfc]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000196a2d: lea ecx, [rip+0x27a8d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001966f9: lea ecx, [rip+0x27dc1]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000194e24: lea ecx, [rip+0x29696]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000162cb1: lea ecx, [rip+0x74e69]; mov edx, esi; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000015ede6: lea ecx, [rip+0x77cf8]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000014d51d: lea ecx, [rip+0x88fa1]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000010ffbc: lea ecx, [rip+0xc5c72]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000103871: lea ecx, [rip+0xd14b1]; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038d4: lea ecx, [rip+0xd1606]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038fb: lea ecx, [rip+0xd166f]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000010391d: lea ecx, [rip+0xd16dd]; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000f7ab3: lea ecx, [rip+0xdcfdf]; movzx r12d, r12b; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000001750bb: lea ecx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x00000000175190: lea ecx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017532b: lea ecx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000175426: lea ecx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x00000000075f8d: lea ecx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x0000000007ba66: lea ecx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x0000000017501c: lea ecx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fcb: lea ecx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x0000000012a7e6: lea ecx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000012a7cb: lea ecx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b05b: lea ecx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012b070; ret; 
0x00000000167642: lea ecx, [rsp+0x14]; call qword ptr [rax]; 
0x000000000c6118: lea ecx, [rsp+0x18]; call r13; 
0x000000000c5f70: lea ecx, [rsp+0x18]; call rbx; 
0x00000000167e96: lea ecx, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000015dedf: lea ecx, [rsp+0x20]; call qword ptr [rax]; 
0x000000000c632e: lea ecx, [rsp+0x20]; call rbx; 
0x00000000167d93: lea ecx, [rsp+0x24]; call qword ptr [rax]; 
0x00000000086d0f: lea ecx, [rsp+0x28]; call rbp; 
0x000000000c6869: lea ecx, [rsp+0x28]; call rbx; 
0x000000001687fb: lea ecx, [rsp+0x2a]; call qword ptr [rax]; 
0x0000000015dce9: lea ecx, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000c6568: lea ecx, [rsp+0x30]; call rbx; 
0x000000000c5e0a: lea ecx, [rsp+0x38]; call rbx; 
0x00000000117060: lea ecx, [rsp+0x38]; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000116e4f: lea ecx, [rsp+0x38]; movzx eax, al; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x000000001685b3: lea ecx, [rsp+0x3a]; call qword ptr [rax]; 
0x0000000015e3fb: lea ecx, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000012e75b: lea edi, [r13+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000001758f7: lea edi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000000919f0: lea edi, [rax+0x20]; mov eax, 0xca; syscall; 
0x00000000092f8d: lea edi, [rax+0x28]; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000009492a: lea edi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x00000000091c95: lea edi, [rax+0x35c]; syscall; 
0x00000000094afb: lea edi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x0000000014231c: lea edi, [rax+rdx+0x2]; cmp rcx, rdi; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x0000000011dadf: lea edi, [rax]; adc [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x0000000012e75c: lea edi, [rbp+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000001664f7: lea edi, [rbp+0x58]; call rax; 
0x00000000165a57: lea edi, [rbp+0x68]; call rax; 
0x00000000162c6a: lea edi, [rbp+0xc8]; call rax; 
0x0000000008153a: lea edi, [rbp-0x6]; jmp qword ptr [rsi-0x70]; 
0x0000000002c66f: lea edi, [rbp-0x76b70001]; ret; 
0x00000000155189: lea edi, [rbx+0x8]; call rsi; 
0x0000000016714f: lea edi, [rbx-0x1]; inc dword ptr [rbp+0x487974c0]; mov eax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000c4c0f: lea edi, [rcx+0xb730015]; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x000000000e5620: lea edi, [rdi*8+0x2]; syscall; 
0x000000000c06bd: lea edi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c1de1: lea edi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x000000000984be: lea edi, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c06e0: lea edi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x000000000c1e04: lea edi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000c0705: lea edi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c1e29: lea edi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c0723: lea edi, [rdi+0x13]; jne 0x00000000000c0d90; ret; 
0x000000000c1e57: lea edi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c0743: lea edi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c1e87: lea edi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c0766: lea edi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c1eba: lea edi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c0785: lea edi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c1ee9: lea edi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c07a5: lea edi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c1f19: lea edi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c07c5: lea edi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c1f49: lea edi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c07e8: lea edi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x000000000c1f7c: lea edi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x000000000c04d7: lea edi, [rdi+0x1]; jne 0x00000000000c0d90; ret; 
0x000000000c1bba: lea edi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x0000000019f4ed: lea edi, [rdi+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0205: lea edi, [rdi+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b062d: lea edi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b37e5: lea edi, [rdi+0x1]; jne 0x00000000001b3c30; ret; 
0x000000000c081d: lea edi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c1fb1: lea edi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c084b: lea edi, [rdi+0x1b]; jne 0x00000000000c0d90; ret; 
0x000000000c1fdf: lea edi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c087b: lea edi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c200f: lea edi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c08a7: lea edi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c203b: lea edi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c08d7: lea edi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c206b: lea edi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c0907: lea edi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c209b: lea edi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x000000000c0937: lea edi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c20cb: lea edi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x000000000c04fb: lea edi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000000c1bdf: lea edi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x0000000019f69b: lea edi, [rdi+0x2]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03cf: lea edi, [rdi+0x2]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b07ef: lea edi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x000000001b399b: lea edi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x000000000c051e: lea edi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c1c02: lea edi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x0000000019f6bf: lea edi, [rdi+0x3]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03f3: lea edi, [rdi+0x3]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0813: lea edi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x000000001b39bf: lea edi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x000000000c0539: lea edi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000000c1c1d: lea edi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x0000000019f6d9: lea edi, [rdi+0x4]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a040d: lea edi, [rdi+0x4]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b082d: lea edi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x000000001b39d9: lea edi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x000000000c055c: lea edi, [rdi+0x5]; jne 0x00000000000c0d90; ret; 
0x000000000c1c40: lea edi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x000000000c0581: lea edi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c1c65: lea edi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x000000000c059f: lea edi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c1c83: lea edi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x000000000c05bb: lea edi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x000000000c1c9f: lea edi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x000000000c05de: lea edi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000000c1cc2: lea edi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x000000000c0603: lea edi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c1ce7: lea edi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x000000000c0621: lea edi, [rdi+0xb]; jne 0x00000000000c0d90; ret; 
0x000000000c1d15: lea edi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x000000000c0641: lea edi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c1d35: lea edi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x000000000c0663: lea edi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c1d57: lea edi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000000c0683: lea edi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c1d87: lea edi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x000000000c06a3: lea edi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c1db7: lea edi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x0000000019f704: lea edi, [rdi+rdx+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0438: lea edi, [rdi+rdx+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0858: lea edi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b3a04: lea edi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000017b3f4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b544: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b694: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b7e4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b934: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ba84: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bbd4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd24: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017be74: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bfc4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c114: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c264: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3b4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c504: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c654: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ddd4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df24: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e074: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e1c4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e314: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e464: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5b4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e704: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e854: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9a4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eaf4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec44: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ed94: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eee4: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017f034: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x00000000196a2f: lea edi, [rdx+0x2]; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x000000000b1461: lea edi, [rip+0x121971]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x0000000007dd50: lea edi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000007ba5b: lea edi, [rip+0x155eff]; movsxd rsi, [rdi+rcx*4]; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x00000000029ef5: lea edi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed6: lea edi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x0000000014d3b8: lea edi, [rip+0x890e2]; movzx esi, al; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000f2aa9: lea edi, [rip+0xe1df9]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x0000000013ea62: lea edi, [rip+0xe34b8]; call rax; 
0x000000000e0f95: lea edi, [rip+0xf2a19]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000debcd: lea edi, [rip+0xf4c79]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000dd98c: lea edi, [rip+0xf5d62]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000133d4e: lea edi, [rip-0xf4]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000163895: lea edi, [rsp+0x10]; call rax; 
0x000000001750b1: lea edi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x000000000901a2: lea edi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x00000000175186: lea edi, [rsp+0x20]; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x00000000175318: lea edi, [rsp+0x20]; lea r8, [rsp+0x30]; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x0000000015d53c: lea edi, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x000000000d9563: lea edi, [rsp+0xd0]; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x00000000082b3d: lea edx, [rax+0x1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000008a07f: lea edx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000a0d24: lea edx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x0000000004315d: lea edx, [rax+0x1]; mov [rip+0x1d6082], edx; ret; 
0x0000000008a046: lea edx, [rax+0x1]; mov [rsi+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x000000000eabba: lea edx, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x00000000084674: lea edx, [rax+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000009cd8c: lea edx, [rax-0x1]; lock cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x000000001038ad: lea edx, [rax-0x1]; movzx edx, dl; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000006a10f: lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x0000000007e176: lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x0000000007dad9: lea edx, [rbx+0x34]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x000000000947d9: lea edx, [rbx+0x638]; syscall; 
0x0000000017aef4: lea edx, [rbx+rdx]; notrack jmp rdx; 
0x00000000149ab9: lea edx, [rcx+0x1]; test al, al; jne short 0x0000000000149aa4; mov eax, r10d; ret; 
0x00000000041a30: lea edx, [rcx+rdx-0x7e]; or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret; 
0x000000000e5cba: lea edx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x000000000c1b6f: lea edx, [rdi]; adc [rax], eax; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000b1a36: lea edx, [rdx+rcx]; notrack jmp r10; 
0x0000000012a5f6: lea edx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000017b2f8: lea edx, [rdx-0x40]; notrack jmp r9; 
0x000000000ba277: lea edx, [rip+0x104243]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ba252: lea edx, [rip+0x104268]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ab07b: lea edx, [rip+0x104c1f]; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a9d7f: lea edx, [rip+0x10512b]; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a94eb: lea edx, [rip+0x10518f]; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000a993f: lea edx, [rip+0x10554b]; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a970f: lea edx, [rip+0x10579b]; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a982f: lea edx, [rip+0x10628b]; lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000b7c17: lea edx, [rip+0x1068a3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000b7bfd: lea edx, [rip+0x1068bd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000c52d4: lea edx, [rip+0x10e2a6]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000c6d7e: lea edx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000b7d6b: lea edx, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5afb: lea edx, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b314b: lea edx, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a2b: lea edx, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000a828f: lea edx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a6fca: lea edx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c55ee: lea edx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x00000000098efd: lea edx, [rip+0x139ced]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000984b7: lea edx, [rip+0x13a623]; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a885f: lea edx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x00000000090369: lea edx, [rip+0x142479]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000008c2bc: lea edx, [rip+0x1462fe]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c303: lea edx, [rip+0x146313]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c358: lea edx, [rip+0x14631a]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3a8: lea edx, [rip+0x146326]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3f8: lea edx, [rip+0x146332]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c448: lea edx, [rip+0x14633e]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000007d364: lea edx, [rip+0x1547d6]; add rax, rdx; ret; 
0x0000000007d4e6: lea edx, [rip+0x154d24]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000063a34: lea edx, [rip+0x16d416]; movzx ebx, bl; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000633d5: lea edx, [rip+0x16d9c5]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000062f7b: lea edx, [rip+0x16dc13]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000002a3a9: lea edx, [rip+0x192c51]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d5f: lea edx, [rip+0x1ab8b]; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a991f: lea edx, [rip+0x1afab]; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96ef: lea edx, [rip+0x1b1fb]; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x000000000a97b3: lea edx, [rip+0x1b8c7]; lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x0000000019d2d7: lea edx, [rip+0x211e3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019d2b2: lea edx, [rip+0x21208]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b917: lea edx, [rip+0x22ba3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b8fd: lea edx, [rip+0x22bbd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000198717: lea edx, [rip+0x25da3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001986f2: lea edx, [rip+0x25dc8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000196747: lea edx, [rip+0x27d73]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019672d: lea edx, [rip+0x27d8d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001b7996: lea edx, [rip+0x2c3e8]; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x00000000189ff7: lea edx, [rip+0x344c3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000189fd2: lea edx, [rip+0x344e8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000187a87: lea edx, [rip+0x36a33]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000187a6d: lea edx, [rip+0x36a4d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000167cdb: lea edx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000019ba47: lea edx, [rip+0x482c3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3a7: lea edx, [rip+0x49923]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bdb: lea edx, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000134719: lea edx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b9: lea edx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x00000000196887: lea edx, [rip+0x4c683]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a5b: lea edx, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000194cb7: lea edx, [rip+0x4e213]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001345e9: lea edx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x00000000193c77: lea edx, [rip+0x4f213]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192ea7: lea edx, [rip+0x4ffa3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796ab: lea edx, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000017841b: lea edx, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000135b63: lea edx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x0000000013479f: lea edx, [rip+0x6c0db]; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x0000000013466f: lea edx, [rip+0x6c22b]; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x0000000013453f: lea edx, [rip+0x6c35b]; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x0000000013480c: lea edx, [rip+0x6c85e]; lea rax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000166375: lea edx, [rip+0x71ba9]; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000013473f: lea edx, [rip+0x7213b]; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x0000000013460f: lea edx, [rip+0x7228b]; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344df: lea edx, [rip+0x723bb]; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x00000000165aa1: lea edx, [rip+0x7243d]; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000134863: lea edx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000001346d7: lea edx, [rip+0x73623]; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a7: lea edx, [rip+0x73773]; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134477: lea edx, [rip+0x738a3]; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000134873: lea edx, [rip+0x73ff7]; lea rax, [rip+0x74060]; cmove rax, rdx; ret; 
0x00000000135b7b: lea edx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x0000000013477f: lea edx, [rip+0x7a6fb]; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x0000000013464f: lea edx, [rip+0x7a84b]; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x0000000013451f: lea edx, [rip+0x7a97b]; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x0000000013489f: lea edx, [rip+0x7b20b]; lea rax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x0000000015f251: lea edx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x00000000168a96: lea edx, [rip+0xbf004]; cmp rax, rdx; je short 0x0000000000168aa8; pop rbx; ret; 
0x0000000016896c: lea edx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x00000000111830: lea edx, [rip+0xc4606]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001106cb: lea edx, [rip+0xc5623]; mov r10, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000010fc4f: lea edx, [rip+0xc5f6b]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c54fc: lea edx, [rip+0xcd29e]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x00000000107554: lea edx, [rip+0xcde86]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000001075aa: lea edx, [rip+0xce088]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000a839f: lea edx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000a8921: lea edx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x0000000015df95: lea edx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000a9d19: lea edx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d9: lea edx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a96a9: lea edx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000c5bc3: lea edx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000c5a86: lea edx, [rip+0xdbbb4]; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000a9bd3: lea edx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b33: lea edx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000c54bf: lea edx, [rip+0xdc46b]; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56ef: lea edx, [rip+0xdc68b]; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581f: lea edx, [rip+0xdcd1b]; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543f: lea edx, [rip+0xdce7b]; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000f79ff: lea edx, [rip+0xdcfbb]; movzx r12d, r12b; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b3d: lea edx, [rip+0xdcfe1]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9c23: lea edx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b83: lea edx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000f65b6: lea edx, [rip+0xde3e4]; movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x000000000c5afe: lea edx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000a844f: lea edx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000f257e: lea edx, [rip+0xe22a4]; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a898f: lea edx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000f0916: lea edx, [rip+0xe3d9c]; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9a0f: lea edx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a9a9f: lea edx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000ed9b2: lea edx, [rip+0xe6cac]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed550: lea edx, [rip+0xe6f06]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed625: lea edx, [rip+0xe6f5d]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed425: lea edx, [rip+0xe6f79]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000eca2b: lea edx, [rip+0xe791f]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000b163f: lea edx, [rip+0xe823b]; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000c5bdb: lea edx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000ab056: lea edx, [rip+0xee6b4]; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000c5aab: lea edx, [rip+0xefc4f]; lea rax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000a8b8c: lea edx, [rip+0xefdfe]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a6c: lea edx, [rip+0xefdfe]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a94c6: lea edx, [rip+0xeff74]; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a84ac: lea edx, [rip+0xf027e]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x000000000a95ef: lea edx, [rip+0xf0a4b]; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000e30ad: lea edx, [rip+0xf0cd9]; mov eax, ecx; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ab0df: lea edx, [rip+0xf249b]; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2f: lea edx, [rip+0xf4d5b]; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876f: lea edx, [rip+0xf51eb]; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87ef: lea edx, [rip+0xf52eb]; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000a9d9f: lea edx, [rip+0xf6b0b]; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a995f: lea edx, [rip+0xf6f2b]; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a972f: lea edx, [rip+0xf717b]; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a979c: lea edx, [rip+0xf78de]; lea rax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x000000000a953e: lea edx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a8310: lea edx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000a9d3f: lea edx, [rip+0xfcb6b]; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a98ff: lea edx, [rip+0xfcf8b]; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96cf: lea edx, [rip+0xfd1db]; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a97f3: lea edx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x000000000a9cd7: lea edx, [rip+0xfe053]; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a9897: lea edx, [rip+0xfe473]; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a9667: lea edx, [rip+0xfe6c3]; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000000a9803: lea edx, [rip+0xff077]; lea rax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x000000000a939c: lea edx, [rip-0x362]; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x000000000736a3: lea edx, [rip-0x43c]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x00000000078c2f: lea edx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000167826: lea edx, [rip-0x5ebc]; lea r8, [rip-0x5e23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167926: lea edx, [rip-0x5fbc]; lea r8, [rip-0x5f23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a42: lea edx, [rip-0x6098]; lea r8, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167b82: lea edx, [rip-0x61d8]; lea r8, [rip-0x617f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167d8c: lea edx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000134823: lea edx, [rip-0x6f7d9]; lea rax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x000000001344ff: lea edx, [rip-0x6fc25]; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x0000000013462f: lea edx, [rip-0x6fd55]; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x0000000013475f: lea edx, [rip-0x6fea5]; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x000000000d9ab9: lea edx, [rip-0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9bd9: lea edx, [rip-0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c4977: lea edx, [rsi+rcx]; cmp rdi, rdx; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x0000000017541c: lea edx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x00000000090198: lea edx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x000000001674a1: lea edx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167468: lea edx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000000a05fb: lea edx, [rsp+0x1c]; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x0000000016744b: lea edx, [rsp+0x20]; mov esi, 0x4; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000119f06: lea edx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x00000000119aa9: lea edx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000167525: lea edx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000015ef84: lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000015d203: lea esi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000015ee95: lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000009571c: lea esi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x00000000168814: lea esi, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000133d4a: lea esi, [rbp-0x40]; lea rdi, [rip-0xf4]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000164595: lea esi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000094a21: lea esi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x00000000094992: lea esi, [rbx+0x8f0]; syscall; 
0x00000000082880: lea esi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000005a12b: lea esi, [rdi+0x3b0]; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x0000000011c7ba: lea esi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x000000001685d0: lea esi, [rdx+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x000000000a0bbc: lea esi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x000000000969ad: lea esi, [rip+0x13c0ad]; syscall; 
0x0000000009683a: lea esi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x000000000951c3: lea esi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000007d48d: lea esi, [rip+0x154cc1]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000006b8bb: lea esi, [rip+0x165957]; movsxd rax, [rsi+r15*4]; add rax, rsi; notrack jmp rax; 
0x0000000003fc6a: lea esi, [rip+0x18c7d0]; mov edx, edx; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000175f91: lea esi, [rip+0x5cac9]; syscall; 
0x0000000014d4cf: lea esi, [rip+0x88fdf]; movzx ecx, al; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x00000000113192: lea esi, [rip+0xc2dc8]; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000101c05: lea esi, [rip+0xd3109]; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x000000000f0e1c: lea esi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000eb16b: lea esi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000e30d1: lea esi, [rip+0xf0ea1]; mov eax, edx; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000e3147: lea esi, [rip+0xf1017]; mov ecx, edx; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000000e1013: lea esi, [rip+0xf2b87]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000ded8c: lea esi, [rip+0xf4b9a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000076901: lea esi, [rip-0x1117]; cmp dil, 0x5a; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x0000000007c28f: lea esi, [rip-0x1255]; cmp edi, 0x5a; jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x000000000761c4: lea esi, [rip-0x9da]; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007bc42: lea esi, [rip-0xc08]; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000053ec9: lea esi, [rsi+0x128]; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000c4988: lea esi, [rsi+rcx-0x1]; std; rep movsb [rdi], [rsi]; cld; ret; 
0x000000001653ee: lea esi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x0000000016be9d: lea esi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016be43: lea esi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000167aa6: lea esi, [rsp+0x10]; mov edi, eax; call rbp; 
0x0000000016b6ad: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008aa12: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000016b654: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x000000001750ac: lea esi, [rsp+0x18]; lea rdi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x00000000175421: lea esi, [rsp+0x20]; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x0000000009019d: lea esi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x00000000175181: lea esi, [rsp+0x28]; lea rdi, [rsp+0x20]; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x00000000085898: lea esi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000015ef85: lea esi, [rsp+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000016ca35: lea esi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000016ca54: lea esi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016c5eb: lea esi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c63c: lea esi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fc88: lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000007f85e: lea esi, [rsp+0x8]; call rax; 
0x0000000015fcdc: lea esi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001666b4: lea esi, [rsp+0x98]; mov rdi, r15; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x000000001644f6: lea esi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001365f4: lea esi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000000e91d4: lea esp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000015f646: lea esp, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000043804: lea esp, [rcx+rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000045534: lea esp, [rip+0x1d04c6]; cmp rbx, r12; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x000000001b7b33: lea esp, [rip+0x2c2b7]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x0000000005a127: lea esp, [rsi+0x8]; lea rsi, [rdi+0x3b0]; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x000000000b1a35: lea r10, [r10+r9]; notrack jmp r10; 
0x000000000eabb9: lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000b7d6a: lea r10, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5afa: lea r10, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b314a: lea r10, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a2a: lea r10, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000008c2bb: lea r10, [rip+0x1462fe]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c302: lea r10, [rip+0x146313]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c301: lea r10, [rip+0x146313]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c357: lea r10, [rip+0x14631a]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3a7: lea r10, [rip+0x146326]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3f7: lea r10, [rip+0x146332]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c447: lea r10, [rip+0x14633e]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x000000001b7995: lea r10, [rip+0x2c3e8]; movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x0000000019ba46: lea r10, [rip+0x482c3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3a6: lea r10, [rip+0x49923]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bda: lea r10, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000196886: lea r10, [rip+0x4c683]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a5a: lea r10, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000194cb6: lea r10, [rip+0x4e213]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000193c76: lea r10, [rip+0x4f213]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192ea6: lea r10, [rip+0x4ffa3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796aa: lea r10, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000017841a: lea r10, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000c41d9: lea r11, [rip+0x10f2f4]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a55: lea r11, [rip+0x10fa78]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a2c: lea r11, [rip+0x10faa1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a0c: lea r11, [rip+0x10fac1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39e3: lea r11, [rip+0x10faea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39b4: lea r11, [rip+0x10fb19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3995: lea r11, [rip+0x10fb38]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3910: lea r11, [rip+0x10fb3d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38f5: lea r11, [rip+0x10fb58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3973: lea r11, [rip+0x10fb5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3943: lea r11, [rip+0x10fb8a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38c0: lea r11, [rip+0x10fb8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3894: lea r11, [rip+0x10fbb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c387e: lea r11, [rip+0x10fbcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c385c: lea r11, [rip+0x10fbf1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3837: lea r11, [rip+0x10fc16]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c381a: lea r11, [rip+0x10fc33]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c37a3: lea r11, [rip+0x10fcaa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f65: lea r11, [rip+0x110468]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f30: lea r11, [rip+0x11049d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f04: lea r11, [rip+0x1104c9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2eee: lea r11, [rip+0x1104df]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ecc: lea r11, [rip+0x110501]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea7: lea r11, [rip+0x110526]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e8a: lea r11, [rip+0x110543]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e32: lea r11, [rip+0x11059b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2779: lea r11, [rip+0x110b80]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2680: lea r11, [rip+0x110d09]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c266a: lea r11, [rip+0x110d1f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c264a: lea r11, [rip+0x110d3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b95: lea r11, [rip+0x111764]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b6c: lea r11, [rip+0x11178d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b4c: lea r11, [rip+0x1117ad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b23: lea r11, [rip+0x1117d6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1af4: lea r11, [rip+0x111805]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ad5: lea r11, [rip+0x111824]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a50: lea r11, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab3: lea r11, [rip+0x111846]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a83: lea r11, [rip+0x111876]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c196e: lea r11, [rip+0x11190b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1940: lea r11, [rip+0x111939]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1917: lea r11, [rip+0x111962]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1295: lea r11, [rip+0x111f58]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1260: lea r11, [rip+0x111f8d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1234: lea r11, [rip+0x111fb9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c121e: lea r11, [rip+0x111fcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11fc: lea r11, [rip+0x111ff1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11d7: lea r11, [rip+0x112016]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11ba: lea r11, [rip+0x112033]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1162: lea r11, [rip+0x11208b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0f29: lea r11, [rip+0x1121f0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e30: lea r11, [rip+0x112379]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e1a: lea r11, [rip+0x11238f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0dfa: lea r11, [rip+0x1123af]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c04b5: lea r11, [rip+0x112c64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c048c: lea r11, [rip+0x112c8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c046c: lea r11, [rip+0x112cad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0443: lea r11, [rip+0x112cd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0414: lea r11, [rip+0x112d05]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03f5: lea r11, [rip+0x112d24]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0370: lea r11, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03d3: lea r11, [rip+0x112d46]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03a3: lea r11, [rip+0x112d76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c029e: lea r11, [rip+0x112dfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0270: lea r11, [rip+0x112e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0247: lea r11, [rip+0x112e52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc55: lea r11, [rip+0x1133c4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc20: lea r11, [rip+0x1133f9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf4: lea r11, [rip+0x113425]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbde: lea r11, [rip+0x11343b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbbc: lea r11, [rip+0x11345d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb97: lea r11, [rip+0x113482]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb7a: lea r11, [rip+0x11349f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb22: lea r11, [rip+0x1134f7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000003ff3d: lea r11, [rip+0x18c534]; movzx r10d, r10b; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x00000000184a21: lea r11, [rip+0x5eda8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001846c3: lea r11, [rip+0x5f106]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018486e: lea r11, [rip+0x5f19b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184543: lea r11, [rip+0x5f286]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184606: lea r11, [rip+0x5f403]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001843c3: lea r11, [rip+0x5f406]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184486: lea r11, [rip+0x5f583]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184243: lea r11, [rip+0x5f586]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184306: lea r11, [rip+0x5f703]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001840c3: lea r11, [rip+0x5f706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184187: lea r11, [rip+0x5f882]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183f43: lea r11, [rip+0x5f886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184006: lea r11, [rip+0x5fa03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183dc3: lea r11, [rip+0x5fa06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183e86: lea r11, [rip+0x5fb83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183c43: lea r11, [rip+0x5fb86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183d06: lea r11, [rip+0x5fd03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183ac3: lea r11, [rip+0x5fd06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183b86: lea r11, [rip+0x5fe83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183943: lea r11, [rip+0x5fe86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183a06: lea r11, [rip+0x60003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001837c3: lea r11, [rip+0x60006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183886: lea r11, [rip+0x60183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183643: lea r11, [rip+0x60186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183706: lea r11, [rip+0x60303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001834c3: lea r11, [rip+0x60306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183586: lea r11, [rip+0x60483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183343: lea r11, [rip+0x60486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183406: lea r11, [rip+0x60603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001831c3: lea r11, [rip+0x60606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018304a: lea r11, [rip+0x6077f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183286: lea r11, [rip+0x60783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183106: lea r11, [rip+0x60903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e3f: lea r11, [rip+0x6098a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fc9: lea r11, [rip+0x60a40]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e62: lea r11, [rip+0x60ba7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182f1f: lea r11, [rip+0x60d6a]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000182eb8: lea r11, [rip+0x60d91]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000181eed: lea r11, [rip+0x613dc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181bc3: lea r11, [rip+0x61706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d5a: lea r11, [rip+0x617af]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181a43: lea r11, [rip+0x61886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181b06: lea r11, [rip+0x61a03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001818c3: lea r11, [rip+0x61a06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181986: lea r11, [rip+0x61b83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181743: lea r11, [rip+0x61b86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181806: lea r11, [rip+0x61d03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001815c3: lea r11, [rip+0x61d06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181687: lea r11, [rip+0x61e82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181443: lea r11, [rip+0x61e86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181506: lea r11, [rip+0x62003]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001812c3: lea r11, [rip+0x62006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181386: lea r11, [rip+0x62183]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181143: lea r11, [rip+0x62186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181206: lea r11, [rip+0x62303]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180fc3: lea r11, [rip+0x62306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181086: lea r11, [rip+0x62483]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180e43: lea r11, [rip+0x62486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180f06: lea r11, [rip+0x62603]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180cc3: lea r11, [rip+0x62606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180d86: lea r11, [rip+0x62783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180b43: lea r11, [rip+0x62786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180c06: lea r11, [rip+0x62903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001809c3: lea r11, [rip+0x62906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180a86: lea r11, [rip+0x62a83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180843: lea r11, [rip+0x62a86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180906: lea r11, [rip+0x62c03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001806c3: lea r11, [rip+0x62c06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018054a: lea r11, [rip+0x62d7f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180786: lea r11, [rip+0x62d83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001802e3: lea r11, [rip+0x62e25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180227: lea r11, [rip+0x62ee2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180606: lea r11, [rip+0x62f03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018035f: lea r11, [rip+0x62f6a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018013c: lea r11, [rip+0x62fcd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804c9: lea r11, [rip+0x63040]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180071: lea r11, [rip+0x63098]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018034b: lea r11, [rip+0x631be]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018041f: lea r11, [rip+0x6336a]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000001803bd: lea r11, [rip+0x6338c]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x0000000017f052: lea r11, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017efb4: lea r11, [rip+0x64155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ef02: lea r11, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ee64: lea r11, [rip+0x642a5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edb2: lea r11, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed14: lea r11, [rip+0x643f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec62: lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ebc4: lea r11, [rip+0x64545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb12: lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ea74: lea r11, [rip+0x64695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9c2: lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e924: lea r11, [rip+0x647e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e872: lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e7d4: lea r11, [rip+0x64935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e722: lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e687: lea r11, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5d2: lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e534: lea r11, [rip+0x64bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e482: lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e4: lea r11, [rip+0x64d25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e332: lea r11, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e294: lea r11, [rip+0x64e75]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1e2: lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e144: lea r11, [rip+0x64fc5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e092: lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dff4: lea r11, [rip+0x65115]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df42: lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dea4: lea r11, [rip+0x65265]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddf2: lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dd54: lea r11, [rip+0x653b5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dca6: lea r11, [rip+0x65463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dbb4: lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf5: lea r11, [rip+0x65613]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017da8c: lea r11, [rip+0x6567d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98d: lea r11, [rip+0x6577c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d753: lea r11, [rip+0x657f6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8c8: lea r11, [rip+0x65841]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d679: lea r11, [rip+0x658d0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d855: lea r11, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7fb: lea r11, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017c672: lea r11, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d4: lea r11, [rip+0x66975]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c522: lea r11, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c484: lea r11, [rip+0x66ac5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3d2: lea r11, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c334: lea r11, [rip+0x66c15]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c282: lea r11, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c1e4: lea r11, [rip+0x66d65]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c132: lea r11, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c094: lea r11, [rip+0x66eb5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfe2: lea r11, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf44: lea r11, [rip+0x67005]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be92: lea r11, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bdf4: lea r11, [rip+0x67155]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd42: lea r11, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca7: lea r11, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbf2: lea r11, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bb54: lea r11, [rip+0x673f5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017baa2: lea r11, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba04: lea r11, [rip+0x67545]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b952: lea r11, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b8b4: lea r11, [rip+0x67695]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b802: lea r11, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b764: lea r11, [rip+0x677e5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6b2: lea r11, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b614: lea r11, [rip+0x67935]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b562: lea r11, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b4c4: lea r11, [rip+0x67a85]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b412: lea r11, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b374: lea r11, [rip+0x67bd5]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b2c6: lea r11, [rip+0x67c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d4: lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b115: lea r11, [rip+0x67e33]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b0ac: lea r11, [rip+0x67e9d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afad: lea r11, [rip+0x67f9c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aee8: lea r11, [rip+0x68061]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ae75: lea r11, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae14: lea r11, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000015f645: lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000043803: lea r12, [rcx+rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000045533: lea r12, [rip+0x1d04c6]; cmp rbx, r12; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x000000001b7b32: lea r12, [rip+0x2c2b7]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x0000000016a202: lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000016a58e: lea r13, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000015d644: lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000984bd: lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000015d53b: lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000143116: lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000b1520: lea r8, [rip+0x1218d5]; mov edi, edx; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x0000000015decf: lea r8, [rip+0x17a]; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000014d6f3: lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x0000000015df8b: lea r8, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000015de14: lea r8, [rip+0xddd5]; push qword ptr [rip+0x84727]; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x00000000167728: lea r8, [rip-0x5b5f]; xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x00000000167633: lea r8, [rip-0x5d2a]; mov esi, 0x1; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016782c: lea r8, [rip-0x5e23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000016792c: lea r8, [rip-0x5f23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a48: lea r8, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167b88: lea r8, [rip-0x617f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167d84: lea r8, [rip-0x647b]; lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000167e87: lea r8, [rip-0x647e]; mov esi, 0xa; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000167cd3: lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000017560c: lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000001750b5: lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x0000000017518a: lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017531c: lea r8, [rsp+0x30]; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000000d9a8e: lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000000352f6: lea r8, [rsp+0xa0]; call r15; 
0x0000000015fe0c: lea r8d, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000017ae1f: lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017b2f0: lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000000b138b: lea r9, [rip+0x121a22]; mov edi, ecx; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x00000000167641: lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x000000000c6117: lea r9, [rsp+0x18]; call r13; 
0x000000000c5f6f: lea r9, [rsp+0x18]; call rbx; 
0x00000000167e95: lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000015dede: lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000c632d: lea r9, [rsp+0x20]; call rbx; 
0x00000000167d92: lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000086d0e: lea r9, [rsp+0x28]; call rbp; 
0x000000000c6868: lea r9, [rsp+0x28]; call rbx; 
0x000000001687fa: lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x0000000015dce8: lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000c6567: lea r9, [rsp+0x30]; call rbx; 
0x000000000c5e09: lea r9, [rsp+0x38]; call rbx; 
0x000000001685b2: lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x0000000015e3fa: lea r9, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000004667e: lea rax, [r8+r9*4]; mov [rcx+0x10], r8; mov [rcx+0x28], rax; xor eax, eax; ret; 
0x000000000ed181: lea rax, [rax+rax-0x1]; ret; 
0x000000000c5c18: lea rax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x000000000b4bc3: lea rax, [rax+rdi+0x10]; ret; 
0x000000000b4bd3: lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50b3: lea rax, [rax+rdi+0x30]; ret; 
0x000000000b4ba3: lea rax, [rax+rdi-0x10]; ret; 
0x000000000e5cbf: lea rax, [rax+rdx*8]; ret; 
0x0000000009165d: lea rax, [rax+rdx+0x4000]; ret; 
0x00000000175dbe: lea rax, [rax+rdx+0x4]; ret; 
0x000000000b153b: lea rax, [rax+rdx-0x1]; ret; 
0x00000000039cdc: lea rax, [rax+rsi*4]; mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x000000000ba8cc: lea rax, [rcx+rsi]; ret; 
0x000000000c4513: lea rax, [rcx-0x1]; ret; 
0x000000000c142b: lea rax, [rdi+0x10]; ret; 
0x000000000c1dfb: lea rax, [rdi+0x10]; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000c1440: lea rax, [rdi+0x11]; ret; 
0x000000000c1e20: lea rax, [rdi+0x11]; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c145e: lea rax, [rdi+0x12]; ret; 
0x000000000c1e4e: lea rax, [rdi+0x12]; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c147e: lea rax, [rdi+0x13]; ret; 
0x000000000c1e7e: lea rax, [rdi+0x13]; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c14a1: lea rax, [rdi+0x14]; ret; 
0x000000000c1eb1: lea rax, [rdi+0x14]; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c14c0: lea rax, [rdi+0x15]; ret; 
0x000000000c1ee0: lea rax, [rdi+0x15]; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c14e0: lea rax, [rdi+0x16]; ret; 
0x000000000c1f10: lea rax, [rdi+0x16]; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c1500: lea rax, [rdi+0x17]; ret; 
0x000000000c1f40: lea rax, [rdi+0x17]; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c1523: lea rax, [rdi+0x18]; ret; 
0x000000000c1f73: lea rax, [rdi+0x18]; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x000000000c1548: lea rax, [rdi+0x19]; ret; 
0x000000000c1fa8: lea rax, [rdi+0x19]; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c12c6: lea rax, [rdi+0x1]; ret; 
0x000000000c1bd6: lea rax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x000000001b07e6: lea rax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe16: lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000c1566: lea rax, [rdi+0x1a]; ret; 
0x000000000c1fd6: lea rax, [rdi+0x1a]; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c1586: lea rax, [rdi+0x1b]; ret; 
0x000000000c2006: lea rax, [rdi+0x1b]; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c15a2: lea rax, [rdi+0x1c]; ret; 
0x000000000c2032: lea rax, [rdi+0x1c]; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c15c2: lea rax, [rdi+0x1d]; ret; 
0x000000000c2062: lea rax, [rdi+0x1d]; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c15e2: lea rax, [rdi+0x1e]; ret; 
0x000000000c2092: lea rax, [rdi+0x1e]; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x000000000c1602: lea rax, [rdi+0x1f]; ret; 
0x000000000c20c2: lea rax, [rdi+0x1f]; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x000000000c2472: lea rax, [rdi+0x20]; ret; 
0x000000000c12d9: lea rax, [rdi+0x2]; ret; 
0x000000000c1bf9: lea rax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x000000001b080a: lea rax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe2a: lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000000c12e4: lea rax, [rdi+0x3]; ret; 
0x000000000c1c14: lea rax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x000000001b0824: lea rax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x0000000019fe44: lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000c26e8: lea rax, [rdi+0x40]; ret; 
0x000000001b0a1e: lea rax, [rdi+0x41]; ret; 
0x000000001a05b6: lea rax, [rdi+0x41]; vzeroupper; ret; 
0x000000000c12f7: lea rax, [rdi+0x4]; ret; 
0x000000000c1c37: lea rax, [rdi+0x4]; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x000000000c130c: lea rax, [rdi+0x5]; ret; 
0x000000000c1c5c: lea rax, [rdi+0x5]; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x000000000c132a: lea rax, [rdi+0x6]; ret; 
0x000000000c1c7a: lea rax, [rdi+0x6]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x000000000c1336: lea rax, [rdi+0x7]; ret; 
0x000000000c1c96: lea rax, [rdi+0x7]; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x000000001b0bf3: lea rax, [rdi+0x80]; ret; 
0x000000001a075b: lea rax, [rdi+0x80]; vzeroupper; ret; 
0x000000000c1349: lea rax, [rdi+0x8]; ret; 
0x000000000c1cb9: lea rax, [rdi+0x8]; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x000000000c135e: lea rax, [rdi+0x9]; ret; 
0x000000000c1cde: lea rax, [rdi+0x9]; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x000000000c137c: lea rax, [rdi+0xa]; ret; 
0x000000000c1d0c: lea rax, [rdi+0xa]; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x000000000c139c: lea rax, [rdi+0xb]; ret; 
0x000000000c1d2c: lea rax, [rdi+0xb]; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x000000000c13be: lea rax, [rdi+0xc]; ret; 
0x000000000c1d4e: lea rax, [rdi+0xc]; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000000c13de: lea rax, [rdi+0xd]; ret; 
0x000000000c1d7e: lea rax, [rdi+0xd]; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x000000000c13fe: lea rax, [rdi+0xe]; ret; 
0x000000000c1dae: lea rax, [rdi+0xe]; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x000000000c1418: lea rax, [rdi+0xf]; ret; 
0x000000000c1dd8: lea rax, [rdi+0xf]; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x000000001b0952: lea rax, [rdi+r8]; ret; 
0x000000001a0512: lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b43ea: lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4403: lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43aa: lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b43d3: lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6454: lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b6464: lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b642a: lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001b5680: lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b5768: lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001b438b: lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000001b4559: lea rax, [rdi+rax*4]; ret; 
0x000000001b5944: lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000000b4bf8: lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5492: lea rax, [rdi+rax+0x18]; ret; 
0x000000000b4c08: lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8c4: lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000142294: lea rax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000b4b02: lea rax, [rdi+rax+0x30]; ret; 
0x000000001ae734: lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae89c: lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001ae744: lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae754: lea rax, [rdi+rax+0x80]; ret; 
0x000000001b53e8: lea rax, [rdi+rax+0x8]; ret; 
0x000000001b5f84: lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f94: lea rax, [rdi+rax+0xc0]; ret; 
0x000000001b5f67: lea rax, [rdi+rax+0xe0]; ret; 
0x000000001b42b0: lea rax, [rdi+rax-0x20]; ret; 
0x0000000019d8d4: lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001acb44: lea rax, [rdi+rax-0x20]; xtest; je short 0x00000000001acb52; vzeroall; ret; 
0x000000001adec9: lea rax, [rdi+rax-0x20]; xtest; je short 0x00000000001aded7; vzeroall; ret; 
0x000000001afdea: lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000001afe14: lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001afe04: lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000001ae6e8: lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x000000001994a8: lea rax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000ba2df: lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000ba50a: lea rax, [rdi+rax]; ret; 
0x00000000198903: lea rax, [rdi+rcx]; ret; 
0x000000000a0891: lea rax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x000000001b01dc: lea rax, [rdi+rdx]; ret; 
0x0000000019fe5c: lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000014a644: lea rax, [rdi+rsi+0x14]; ret; 
0x000000000ba7c8: lea rax, [rdi+rsi]; ret; 
0x000000000d800d: lea rax, [rdi-0x10]; ret; 
0x000000000d8149: lea rax, [rdi-0x10]; ret; 
0x000000000d8190: lea rax, [rdi-0x4]; ret; 
0x000000000d8180: lea rax, [rdi-0x8]; ret; 
0x000000000d8170: lea rax, [rdi-0xc]; ret; 
0x000000000c12b2: lea rax, [rdi]; ret; 
0x000000000c1bb2: lea rax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x000000001b0625: lea rax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x0000000019fd94: lea rax, [rdi]; vzeroupper; ret; 
0x000000001a9728: lea rax, [rdi]; xtest; je short 0x00000000001a9734; vzeroall; ret; 
0x0000000018f9f6: lea rax, [rdx+0x1]; ret; 
0x0000000018fa0c: lea rax, [rdx+0x2]; ret; 
0x0000000018fa24: lea rax, [rdx+0x3]; ret; 
0x0000000018fa3a: lea rax, [rdx+0x4]; ret; 
0x0000000018fa4c: lea rax, [rdx+0x5]; ret; 
0x0000000018fa6a: lea rax, [rdx+0x6]; ret; 
0x00000000191e31: lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018f976: lea rax, [rdx+0x7]; ret; 
0x0000000018fa7c: lea rax, [rdx+0x8]; ret; 
0x0000000018fa9c: lea rax, [rdx+0x9]; ret; 
0x0000000018fabc: lea rax, [rdx+0xa]; ret; 
0x0000000018fadc: lea rax, [rdx+0xb]; ret; 
0x0000000018fafe: lea rax, [rdx+0xc]; ret; 
0x0000000018fb1e: lea rax, [rdx+0xd]; ret; 
0x00000000191d86: lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018fb3e: lea rax, [rdx+0xe]; ret; 
0x0000000018f9ce: lea rax, [rdx+0xf]; ret; 
0x000000001b45b2: lea rax, [rdx+rax*4]; ret; 
0x0000000019d565: lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000018f9e4: lea rax, [rdx]; ret; 
0x0000000011f442: lea rax, [rip+0x101ff7]; pop r12; pop r13; ret; 
0x0000000011eedf: lea rax, [rip+0x1024fa]; pop rbp; pop r12; pop r13; ret; 
0x0000000011c409: lea rax, [rip+0x104e48]; pop rbx; pop rbp; ret; 
0x000000000a9d85: lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a9945: lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a9608: lea rax, [rip+0x105671]; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000a9715: lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a9835: lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000ab0f8: lea rax, [rip+0x106601]; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a8348: lea rax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a8788: lea rax, [rip+0x109a91]; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000ab081: lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a8808: lea rax, [rip+0x10b671]; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a48: lea rax, [rip+0x10b6f1]; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a94f1: lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000c5af6: lea rax, [rip+0x10fe3]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000c5a8c: lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000c6d76: lea rax, [rip+0x11873]; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c54c5: lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000a8a35: lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a8308: lea rax, [rip+0x11f81]; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000a8775: lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87f5: lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000c56f5: lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c5825: lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c5509: lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000c5445: lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000c55e6: lea rax, [rip+0x12bc3]; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x00000000078c23: lea rax, [rip+0x158b36]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x000000000a9a07: lea rax, [rip+0x15e12]; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000b182e: lea rax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b184e: lea rax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x000000000a8447: lea rax, [rip+0x172e2]; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x0000000007d331: lea rax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x00000000038890: lea rax, [rip+0x19fbd8]; ret; 
0x00000000038874: lea rax, [rip+0x19fbf4]; cmp [rdx+0x38], edi; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x000000000a8287: lea rax, [rip+0x1a512]; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a9d65: lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x00000000029f34: lea rax, [rip+0x1ae09b]; ret; 
0x000000000a93a9: lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x00000000029f44: lea rax, [rip+0x1aff5c]; ret; 
0x000000000a9925: lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96f5: lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x000000000a97b9: lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x000000000a8b99: lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a79: lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b9: lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x00000000051698: lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000469d4: lea rax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x00000000038827: lea rax, [rip+0x1e2412]; ret; 
0x000000000b1645: lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000001576b6: lea rax, [rip+0x3c03]; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000134711: lea rax, [rip+0x46658]; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b1: lea rax, [rip+0x468d8]; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345e1: lea rax, [rip+0x49188]; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x00000000029cbb: lea rax, [rip+0x602ae]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x000000001347a5: lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x00000000134675: lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x00000000134545: lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x00000000134812: lea rax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000135b73: lea rax, [rip+0x71586]; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x00000000134745: lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x00000000134615: lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344e5: lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x0000000013485b: lea rax, [rip+0x7293e]; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000001346dd: lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345ad: lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x0000000013447d: lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000134879: lea rax, [rip+0x74060]; cmove rax, rdx; ret; 
0x00000000134785: lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x00000000134655: lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x00000000134525: lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x000000001348a5: lea rax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x000000000a9a97: lea rax, [rip+0x7e32]; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000a8987: lea rax, [rip+0x8fb2]; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8857: lea rax, [rip+0x9022]; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8397: lea rax, [rip+0x9602]; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000ab05c: lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000a8919: lea rax, [rip+0xa780]; lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x00000000128182: lea rax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x000000000a94cc: lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a9536: lea rax, [rip+0xbcd3]; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bcb: lea rax, [rip+0xbe2e]; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b2b: lea rax, [rip+0xbeae]; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a95f5: lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x0000000015d34b: lea rax, [rip+0xca50e]; add rsp, 0x8; ret; 
0x000000000a9d11: lea rax, [rip+0xd1088]; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d1: lea rax, [rip+0xd14a8]; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a96a1: lea rax, [rip+0xd40d8]; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000c5b39: lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000c6db4: lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c5624: lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000a9c1b: lea rax, [rip+0xe02e]; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b7b: lea rax, [rip+0xe0ae]; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000c5bd3: lea rax, [rip+0xe1536]; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000c6dc0: lea rax, [rip+0xee419]; test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x000000000c5458: lea rax, [rip+0xeeee1]; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54d8: lea rax, [rip+0xef0e1]; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c5630: lea rax, [rip+0xef449]; test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x000000000c5708: lea rax, [rip+0xef4f1]; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c5838: lea rax, [rip+0xefcb1]; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x000000000a9579: lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x000000000a83c0: lea rax, [rip+0xf06f9]; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000c5ab1: lea rax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000ab0e5: lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8335: lea rax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x000000000a82b0: lea rax, [rip+0xf5af9]; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a8880: lea rax, [rip+0xf5b99]; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a9a30: lea rax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac0: lea rax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000a89b0: lea rax, [rip+0xf6809]; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a8470: lea rax, [rip+0xf69b9]; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000a9da5: lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a9965: lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a9735: lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a97a2: lea rax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x000000000a9d45: lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a9905: lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96d5: lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a97eb: lea rax, [rip+0xfd9ce]; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x000000000b1658: lea rax, [rip+0xfe0a1]; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000000a9cdd: lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a989d: lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a966d: lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000000a9809: lea rax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x000000000d9bf8: lea rax, [rip-0x10f]; add rsp, 0x58; ret; 
0x000000000d9ae8: lea rax, [rip-0x10f]; ret; 
0x000000000d9c08: lea rax, [rip-0x11f]; ret; 
0x00000000134829: lea rax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x00000000134505: lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x00000000134635: lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x00000000134765: lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x00000000135b5b: lea rax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x000000000c5bbb: lea rax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000d9ad8: lea rax, [rip-0xff]; add rsp, 0x58; ret; 
0x0000000011aaee: lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x0000000012850e: lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x00000000126520: lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x00000000166cc3: lea rbp, [rsp+0x148]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000001630ec: lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000008df1d: lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000008deaa: lea rbx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x0000000007ad89: lea rbx, [rip+0x2b0]; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000076bc9: lea rbx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d69: lea rbx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c727: lea rbx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7df: lea rbx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a91: lea rbx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dc2: lea rbx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e1b: lea rbx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b7f5: lea rbx, [rip-0x7bc]; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x0000000007b845: lea rbx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b88f: lea rbx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d7: lea rbx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b927: lea rbx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b9bd: lea rbx, [rip-0x984]; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076193: lea rbx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076283: lea rbx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb15: lea rbx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb69: lea rbx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076323: lea rbx, [rip-0xb3a]; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000007bbb7: lea rbx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076379: lea rbx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc13: lea rbx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076443: lea rbx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000175605: lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000000bfb2d: lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c5e05: lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x000000000c5f6b: lea rcx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c63a5: lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x0000000009c059: lea rcx, [rax-0x1]; lock cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009c05a: lea rcx, [rax-0x1]; lock cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x000000001168a9: lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116c01: lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b99: lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x000000001163e3: lea rcx, [rbx+0x28]; mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000007dad4: lea rcx, [rbx+0x40]; lea rdx, [rbx+0x34]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000007e179: lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000072fe3: lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078516: lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000018d2c5: lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x00000000191656: lea rcx, [rdx+0x10]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d4bb: lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000019185b: lea rcx, [rdx+0x1]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d4dd: lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x0000000019187e: lea rcx, [rdx+0x2]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d503: lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x000000001918a4: lea rcx, [rdx+0x3]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d51b: lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x000000001918cc: lea rcx, [rdx+0x4]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000081e39: lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x0000000018d541: lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x000000001918f2: lea rcx, [rdx+0x5]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d563: lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x00000000191924: lea rcx, [rdx+0x6]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d581: lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x00000000191952: lea rcx, [rdx+0x7]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d25d: lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x000000001915ee: lea rcx, [rdx+0x8]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5a3: lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x00000000191984: lea rcx, [rdx+0x9]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5c3: lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x000000001919b4: lea rcx, [rdx+0xa]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d5e3: lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x000000001919e4: lea rcx, [rdx+0xb]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d603: lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x00000000191a14: lea rcx, [rdx+0xc]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d625: lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x00000000191a46: lea rcx, [rdx+0xd]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d645: lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x00000000191a76: lea rcx, [rdx+0xe]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018d665: lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x00000000191aa6: lea rcx, [rdx+0xf]; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000012a5e1: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae28: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae85: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x00000000192f36: lea rcx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x0000000007dda6: lea rcx, [rip+0x1546a7]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000006b222: lea rcx, [rip+0x165f3f]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006ad64: lea rcx, [rip+0x1661f1]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062641: lea rcx, [rip+0x16e040]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062571: lea rcx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000008a6a5: lea rcx, [rip+0x18b954]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000003d479: lea rcx, [rip+0x18eea8]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4ae: lea rcx, [rip+0x18eec7]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4d9: lea rcx, [rip+0x18eef0]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d268: lea rcx, [rip+0x18efbd]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d29d: lea rcx, [rip+0x18efdc]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d2c8: lea rcx, [rip+0x18f005]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003caeb: lea rcx, [rip+0x18f596]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cc34: lea rcx, [rip+0x18f59d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cbdd: lea rcx, [rip+0x18f5a0]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb34: lea rcx, [rip+0x18f5a1]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003ca69: lea rcx, [rip+0x18f5c4]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb63: lea rcx, [rip+0x18f5c6]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c9ce: lea rcx, [rip+0x18f60b]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c471: lea rcx, [rip+0x18fb14]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003a9ec: lea rcx, [rip+0x19156d]; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x0000000019d27d: lea rcx, [rip+0x2123c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019bb9c: lea rcx, [rip+0x2291d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000019b8c8: lea rcx, [rip+0x22bf1]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019a4b3: lea rcx, [rip+0x24006]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001986bd: lea rcx, [rip+0x25dfc]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000196a2c: lea rcx, [rip+0x27a8d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001966f8: lea rcx, [rip+0x27dc1]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000194e23: lea rcx, [rip+0x29696]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000162cb0: lea rcx, [rip+0x74e69]; mov edx, esi; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000015ede5: lea rcx, [rip+0x77cf8]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000014d51c: lea rcx, [rip+0x88fa1]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000010ffbb: lea rcx, [rip+0xc5c72]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000103870: lea rcx, [rip+0xd14b1]; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038d3: lea rcx, [rip+0xd1606]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038fa: lea rcx, [rip+0xd166f]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000010391c: lea rcx, [rip+0xd16dd]; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000f7ab2: lea rcx, [rip+0xdcfdf]; movzx r12d, r12b; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000001750ba: lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x0000000017518f: lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x0000000017532a: lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000175425: lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x00000000075f8c: lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x0000000007ba65: lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x0000000017501b: lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fca: lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x0000000012a7e5: lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000012a7ca: lea rcx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b05a: lea rcx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012b070; ret; 
0x0000000011705f: lea rcx, [rsp+0x38]; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000116e4e: lea rcx, [rsp+0x38]; movzx eax, al; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x00000000163894: lea rdi, [r12+0x10]; call rax; 
0x00000000091c94: lea rdi, [r8+0x35c]; syscall; 
0x00000000092f8c: lea rdi, [r8+r12*4+0x28]; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x000000001758f6: lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000000919ef: lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x00000000094929: lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x00000000094afa: lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x0000000014231b: lea rdi, [rax+rdx+0x2]; cmp rcx, rdi; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x000000001664f6: lea rdi, [rbp+0x58]; call rax; 
0x00000000165a56: lea rdi, [rbp+0x68]; call rax; 
0x00000000162c69: lea rdi, [rbp+0xc8]; call rax; 
0x00000000155188: lea rdi, [rbx+0x8]; call rsi; 
0x000000000c06bc: lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c1de0: lea rdi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x000000000c06df: lea rdi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x000000000c1e03: lea rdi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000c0704: lea rdi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c1e28: lea rdi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c0722: lea rdi, [rdi+0x13]; jne 0x00000000000c0d90; ret; 
0x000000000c1e56: lea rdi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c0742: lea rdi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c1e86: lea rdi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c0765: lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c1eb9: lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c0784: lea rdi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c1ee8: lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c07a4: lea rdi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c1f18: lea rdi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c07c4: lea rdi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c1f48: lea rdi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c07e7: lea rdi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x000000000c1f7b: lea rdi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x000000000c04d6: lea rdi, [rdi+0x1]; jne 0x00000000000c0d90; ret; 
0x000000000c1bb9: lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x0000000019f4ec: lea rdi, [rdi+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0204: lea rdi, [rdi+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b062c: lea rdi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b37e4: lea rdi, [rdi+0x1]; jne 0x00000000001b3c30; ret; 
0x000000000c081c: lea rdi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c1fb0: lea rdi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c084a: lea rdi, [rdi+0x1b]; jne 0x00000000000c0d90; ret; 
0x000000000c1fde: lea rdi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c087a: lea rdi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c200e: lea rdi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c08a6: lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c203a: lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c08d6: lea rdi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c206a: lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c0906: lea rdi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c209a: lea rdi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x000000000c0936: lea rdi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c20ca: lea rdi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x000000000c04fa: lea rdi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000000c1bde: lea rdi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x0000000019f69a: lea rdi, [rdi+0x2]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03ce: lea rdi, [rdi+0x2]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b07ee: lea rdi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x000000001b399a: lea rdi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x000000000c051d: lea rdi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c1c01: lea rdi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x0000000019f6be: lea rdi, [rdi+0x3]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03f2: lea rdi, [rdi+0x3]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0812: lea rdi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x000000001b39be: lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x000000000c0538: lea rdi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000000c1c1c: lea rdi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x0000000019f6d8: lea rdi, [rdi+0x4]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a040c: lea rdi, [rdi+0x4]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b082c: lea rdi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x000000001b39d8: lea rdi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x000000000c055b: lea rdi, [rdi+0x5]; jne 0x00000000000c0d90; ret; 
0x000000000c1c3f: lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x000000000c0580: lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c1c64: lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x000000000c059e: lea rdi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c1c82: lea rdi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x000000000c05ba: lea rdi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x000000000c1c9e: lea rdi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x000000000c05dd: lea rdi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000000c1cc1: lea rdi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x000000000c0602: lea rdi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c1ce6: lea rdi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x000000000c0620: lea rdi, [rdi+0xb]; jne 0x00000000000c0d90; ret; 
0x000000000c1d14: lea rdi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x000000000c0640: lea rdi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c1d34: lea rdi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x000000000c0662: lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c1d56: lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000000c0682: lea rdi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c1d86: lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x000000000c06a2: lea rdi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c1db6: lea rdi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x0000000019f703: lea rdi, [rdi+rdx+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0437: lea rdi, [rdi+rdx+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0857: lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b3a03: lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000017b3f3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b543: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b693: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b7e3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b933: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ba83: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bbd3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd23: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017be73: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bfc3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c113: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c263: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3b3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c503: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c653: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ddd3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df23: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e073: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e1c3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e313: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e463: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5b3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e703: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e853: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9a3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eaf3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec43: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ed93: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eee3: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017f033: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x000000000b1460: lea rdi, [rip+0x121971]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x0000000007dd4f: lea rdi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000007ba5a: lea rdi, [rip+0x155eff]; movsxd rsi, [rdi+rcx*4]; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x00000000029ef4: lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed5: lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x0000000014d3b7: lea rdi, [rip+0x890e2]; movzx esi, al; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000f2aa8: lea rdi, [rip+0xe1df9]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x0000000013ea61: lea rdi, [rip+0xe34b8]; call rax; 
0x000000000e0f94: lea rdi, [rip+0xf2a19]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000debcc: lea rdi, [rip+0xf4c79]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000dd98b: lea rdi, [rip+0xf5d62]; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000133d4d: lea rdi, [rip-0xf4]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000001750b0: lea rdi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x000000000901a1: lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x00000000175185: lea rdi, [rsp+0x20]; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x00000000175317: lea rdi, [rsp+0x20]; lea r8, [rsp+0x30]; mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000000d9562: lea rdi, [rsp+0xd0]; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x0000000017aef3: lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000084673: lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x00000000082b3c: lea rdx, [rax+0x1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000008a07e: lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000a0d23: lea rdx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x0000000008a045: lea rdx, [rax+0x1]; mov [rsi+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000009cd8b: lea rdx, [rax-0x1]; lock cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x0000000007e175: lea rdx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x0000000007dad6: lea rdx, [rbx+0x34]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x000000000947d8: lea rdx, [rbx+0x638]; syscall; 
0x00000000149ab8: lea rdx, [rcx+0x1]; test al, al; jne short 0x0000000000149aa4; mov eax, r10d; ret; 
0x000000000e5cb9: lea rdx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x0000000012a5f5: lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000017b2f7: lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000000ba276: lea rdx, [rip+0x104243]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ba251: lea rdx, [rip+0x104268]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ab07a: lea rdx, [rip+0x104c1f]; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a9d7e: lea rdx, [rip+0x10512b]; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a94ea: lea rdx, [rip+0x10518f]; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000a993e: lea rdx, [rip+0x10554b]; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000000a970e: lea rdx, [rip+0x10579b]; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000a982e: lea rdx, [rip+0x10628b]; lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000b7c16: lea rdx, [rip+0x1068a3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000b7bfc: lea rdx, [rip+0x1068bd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000c52d3: lea rdx, [rip+0x10e2a6]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000c6d7d: lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000a828e: lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a6fc9: lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c55ed: lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x00000000098efc: lea rdx, [rip+0x139ced]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000984b6: lea rdx, [rip+0x13a623]; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a885e: lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x00000000090368: lea rdx, [rip+0x142479]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000007d363: lea rdx, [rip+0x1547d6]; add rax, rdx; ret; 
0x0000000007d4e5: lea rdx, [rip+0x154d24]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000063a33: lea rdx, [rip+0x16d416]; movzx ebx, bl; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000633d4: lea rdx, [rip+0x16d9c5]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000062f7a: lea rdx, [rip+0x16dc13]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000002a3a8: lea rdx, [rip+0x192c51]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9d5e: lea rdx, [rip+0x1ab8b]; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x000000000a991e: lea rdx, [rip+0x1afab]; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000000a96ee: lea rdx, [rip+0x1b1fb]; lea rax, [rip+0x1b304]; cmove rax, rdx; ret; 
0x000000000a97b2: lea rdx, [rip+0x1b8c7]; lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x0000000019d2d6: lea rdx, [rip+0x211e3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019d2b1: lea rdx, [rip+0x21208]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b916: lea rdx, [rip+0x22ba3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019b8fc: lea rdx, [rip+0x22bbd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000198716: lea rdx, [rip+0x25da3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001986f1: lea rdx, [rip+0x25dc8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000196746: lea rdx, [rip+0x27d73]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000019672c: lea rdx, [rip+0x27d8d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000189ff6: lea rdx, [rip+0x344c3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000189fd1: lea rdx, [rip+0x344e8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000187a86: lea rdx, [rip+0x36a33]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000187a6c: lea rdx, [rip+0x36a4d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000167cda: lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x00000000134718: lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001344b8: lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345e8: lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x00000000135b62: lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x0000000013479e: lea rdx, [rip+0x6c0db]; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x0000000013466e: lea rdx, [rip+0x6c22b]; lea rax, [rip+0x6c294]; cmove rax, rdx; ret; 
0x0000000013453e: lea rdx, [rip+0x6c35b]; lea rax, [rip+0x6c3c4]; cmove rax, rdx; ret; 
0x0000000013480b: lea rdx, [rip+0x6c85e]; lea rax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000166374: lea rdx, [rip+0x71ba9]; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000013473e: lea rdx, [rip+0x7213b]; lea rax, [rip+0x721a4]; cmove rax, rdx; ret; 
0x0000000013460e: lea rdx, [rip+0x7228b]; lea rax, [rip+0x722f4]; cmove rax, rdx; ret; 
0x000000001344de: lea rdx, [rip+0x723bb]; lea rax, [rip+0x72424]; cmove rax, rdx; ret; 
0x00000000165aa0: lea rdx, [rip+0x7243d]; mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000134862: lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000001346d6: lea rdx, [rip+0x73623]; lea rax, [rip+0x7368c]; cmove rax, rdx; ret; 
0x000000001345a6: lea rdx, [rip+0x73773]; lea rax, [rip+0x737dc]; cmove rax, rdx; ret; 
0x00000000134476: lea rdx, [rip+0x738a3]; lea rax, [rip+0x7390c]; cmove rax, rdx; ret; 
0x00000000134872: lea rdx, [rip+0x73ff7]; lea rax, [rip+0x74060]; cmove rax, rdx; ret; 
0x00000000135b7a: lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x0000000013477e: lea rdx, [rip+0x7a6fb]; lea rax, [rip+0x7a764]; cmove rax, rdx; ret; 
0x0000000013464e: lea rdx, [rip+0x7a84b]; lea rax, [rip+0x7a8b4]; cmove rax, rdx; ret; 
0x0000000013451e: lea rdx, [rip+0x7a97b]; lea rax, [rip+0x7a9e4]; cmove rax, rdx; ret; 
0x0000000013489e: lea rdx, [rip+0x7b20b]; lea rax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x0000000015f250: lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x00000000168a95: lea rdx, [rip+0xbf004]; cmp rax, rdx; je short 0x0000000000168aa8; pop rbx; ret; 
0x0000000016896b: lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x0000000011182f: lea rdx, [rip+0xc4606]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001106ca: lea rdx, [rip+0xc5623]; mov r10, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000010fc4e: lea rdx, [rip+0xc5f6b]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c54fb: lea rdx, [rip+0xcd29e]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x00000000107553: lea rdx, [rip+0xcde86]; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000001075a9: lea rdx, [rip+0xce088]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000a839e: lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000a8920: lea rdx, [rip+0xd0cd9]; cmovne rax, rdx; ret; 
0x0000000015df94: lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000a9d18: lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000a98d8: lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a96a8: lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000c5bc2: lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000c5a85: lea rdx, [rip+0xdbbb4]; lea rax, [rip+0x110cd]; cmove rax, rdx; ret; 
0x000000000a9bd2: lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b32: lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000c54be: lea rdx, [rip+0xdc46b]; lea rax, [rip+0x11a34]; cmove rax, rdx; ret; 
0x000000000c56ee: lea rdx, [rip+0xdc68b]; lea rax, [rip+0x124d4]; cmove rax, rdx; ret; 
0x000000000c581e: lea rdx, [rip+0xdcd1b]; lea rax, [rip+0x12664]; cmove rax, rdx; ret; 
0x000000000c543e: lea rdx, [rip+0xdce7b]; lea rax, [rip+0x128b4]; cmove rax, rdx; ret; 
0x000000000f79fe: lea rdx, [rip+0xdcfbb]; movzx r12d, r12b; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b3b: lea rdx, [rip+0xdcfe1]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b3c: lea rdx, [rip+0xdcfe1]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9c22: lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b82: lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000f65b5: lea rdx, [rip+0xde3e4]; movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x000000000c5afd: lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x000000000a844e: lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000f257d: lea rdx, [rip+0xe22a4]; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000a898e: lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000f0915: lea rdx, [rip+0xe3d9c]; movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000a9a0e: lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a9a9e: lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000ed9b1: lea rdx, [rip+0xe6cac]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed54f: lea rdx, [rip+0xe6f06]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed624: lea rdx, [rip+0xe6f5d]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed424: lea rdx, [rip+0xe6f79]; movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x000000000eca2a: lea rdx, [rip+0xe791f]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x000000000b163e: lea rdx, [rip+0xe823b]; lea rax, [rip+0x37f4]; cmove rax, rdx; ret; 
0x000000000c5bda: lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000000ab055: lea rdx, [rip+0xee6b4]; lea rax, [rip+0x9bcd]; cmove rax, rdx; ret; 
0x000000000c5aaa: lea rdx, [rip+0xefc4f]; lea rax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000a8b8b: lea rdx, [rip+0xefdfe]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a6b: lea rdx, [rip+0xefdfe]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a94c5: lea rdx, [rip+0xeff74]; lea rax, [rip+0xb42d]; cmove rax, rdx; ret; 
0x000000000a84ab: lea rdx, [rip+0xf027e]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x000000000a95ee: lea rdx, [rip+0xf0a4b]; lea rax, [rip+0xc014]; cmove rax, rdx; ret; 
0x000000000e30ac: lea rdx, [rip+0xf0cd9]; mov eax, ecx; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ab0de: lea rdx, [rip+0xf249b]; lea rax, [rip+0xf3d4]; cmove rax, rdx; ret; 
0x000000000a8a2e: lea rdx, [rip+0xf4d5b]; lea rax, [rip+0x11c94]; cmove rax, rdx; ret; 
0x000000000a876e: lea rdx, [rip+0xf51eb]; lea rax, [rip+0x12254]; cmove rax, rdx; ret; 
0x000000000a87ee: lea rdx, [rip+0xf52eb]; lea rax, [rip+0x12374]; cmove rax, rdx; ret; 
0x000000000a9d9e: lea rdx, [rip+0xf6b0b]; lea rax, [rip+0xf6b94]; cmove rax, rdx; ret; 
0x000000000a995e: lea rdx, [rip+0xf6f2b]; lea rax, [rip+0xf6f94]; cmove rax, rdx; ret; 
0x000000000a972e: lea rdx, [rip+0xf717b]; lea rax, [rip+0xf7204]; cmove rax, rdx; ret; 
0x000000000a979b: lea rdx, [rip+0xf78de]; lea rax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x000000000a953d: lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a830f: lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000a9d3e: lea rdx, [rip+0xfcb6b]; lea rax, [rip+0xfcbf4]; cmove rax, rdx; ret; 
0x000000000a98fe: lea rdx, [rip+0xfcf8b]; lea rax, [rip+0xfcff4]; cmove rax, rdx; ret; 
0x000000000a96ce: lea rdx, [rip+0xfd1db]; lea rax, [rip+0xfd264]; cmove rax, rdx; ret; 
0x000000000a97f2: lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x000000000a9cd6: lea rdx, [rip+0xfe053]; lea rax, [rip+0xfe0dc]; cmove rax, rdx; ret; 
0x000000000a9896: lea rdx, [rip+0xfe473]; lea rax, [rip+0xfe4dc]; cmove rax, rdx; ret; 
0x000000000a9666: lea rdx, [rip+0xfe6c3]; lea rax, [rip+0xfe74c]; cmove rax, rdx; ret; 
0x000000000a9802: lea rdx, [rip+0xff077]; lea rax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x000000000a939b: lea rdx, [rip-0x362]; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x000000000736a2: lea rdx, [rip-0x43c]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x00000000078c2e: lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000167825: lea rdx, [rip-0x5ebc]; lea r8, [rip-0x5e23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167925: lea rdx, [rip-0x5fbc]; lea r8, [rip-0x5f23]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167a41: lea rdx, [rip-0x6098]; lea r8, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167b81: lea rdx, [rip-0x61d8]; lea r8, [rip-0x617f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167d8b: lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x00000000134822: lea rdx, [rip-0x6f7d9]; lea rax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x000000001344fe: lea rdx, [rip-0x6fc25]; lea rax, [rip-0x6fb4c]; cmove rax, rdx; ret; 
0x0000000013462e: lea rdx, [rip-0x6fd55]; lea rax, [rip-0x6fc7c]; cmove rax, rdx; ret; 
0x0000000013475e: lea rdx, [rip-0x6fea5]; lea rax, [rip-0x6fdcc]; cmove rax, rdx; ret; 
0x000000000d9ab8: lea rdx, [rip-0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9bd8: lea rdx, [rip-0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c4976: lea rdx, [rsi+rcx]; cmp rdi, rdx; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x0000000017541b: lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x00000000090197: lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x000000001674a0: lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167467: lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000000a05fa: lea rdx, [rsp+0x1c]; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x0000000016744a: lea rdx, [rsp+0x20]; mov esi, 0x4; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000119f05: lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x00000000119aa8: lea rdx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000167524: lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000001685cf: lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168813: lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000015d202: lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000009571b: lea rsi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x00000000133d49: lea rsi, [rbp-0x40]; lea rdi, [rip-0xf4]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000164594: lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000094a20: lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x00000000094991: lea rsi, [rbx+0x8f0]; syscall; 
0x0000000008287f: lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000005a12a: lea rsi, [rdi+0x3b0]; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x0000000011c7b9: lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x000000000a0bbb: lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x000000000969ac: lea rsi, [rip+0x13c0ad]; syscall; 
0x000000000969ab: lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000096839: lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x000000000951c2: lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000007d48c: lea rsi, [rip+0x154cc1]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000006b8ba: lea rsi, [rip+0x165957]; movsxd rax, [rsi+r15*4]; add rax, rsi; notrack jmp rax; 
0x0000000003fc69: lea rsi, [rip+0x18c7d0]; mov edx, edx; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000175f8f: lea rsi, [rip+0x5cac9]; syscall; 
0x00000000175f90: lea rsi, [rip+0x5cac9]; syscall; 
0x0000000014d4ce: lea rsi, [rip+0x88fdf]; movzx ecx, al; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x00000000113190: lea rsi, [rip+0xc2dc8]; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000113191: lea rsi, [rip+0xc2dc8]; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000101c04: lea rsi, [rip+0xd3109]; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x000000000f0e1b: lea rsi, [rip+0xe3916]; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000eb16a: lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000e30d0: lea rsi, [rip+0xf0ea1]; mov eax, edx; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000e3146: lea rsi, [rip+0xf1017]; mov ecx, edx; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000000e1012: lea rsi, [rip+0xf2b87]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000ded8b: lea rsi, [rip+0xf4b9a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000076900: lea rsi, [rip-0x1117]; cmp dil, 0x5a; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x0000000007c28e: lea rsi, [rip-0x1255]; cmp edi, 0x5a; jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x000000000761c3: lea rsi, [rip-0x9da]; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007bc41: lea rsi, [rip-0xc08]; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000053ec8: lea rsi, [rsi+0x128]; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000c4987: lea rsi, [rsi+rcx-0x1]; std; rep movsb [rdi], [rsi]; cld; ret; 
0x000000001653ed: lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x0000000016be9c: lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016be42: lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000167aa5: lea rsi, [rsp+0x10]; mov edi, eax; call rbp; 
0x0000000016b6ac: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008aa11: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000016b653: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x000000001750ab: lea rsi, [rsp+0x18]; lea rdi, [rsp+0x10]; lea r8, [rsp+0x20]; lea rcx, [rip-0x171]; call qword ptr [rbx+0x358]; 
0x00000000175420: lea rsi, [rsp+0x20]; lea rcx, [rip-0x3ec]; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x0000000009019c: lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x00000000175180: lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; lea r8, [rsp+0x30]; lea rcx, [rip-0x1f6]; call qword ptr [rbx+0x358]; 
0x00000000085897: lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000016ca34: lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000016ca53: lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016c5ea: lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c63b: lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fc87: lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000007f85d: lea rsi, [rsp+0x8]; call rax; 
0x0000000015fcdb: lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001666b3: lea rsi, [rsp+0x98]; mov rdi, r15; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x000000001644f5: lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001365f3: lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000000e91d3: lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000005a126: lea rsp, [rsi+0x8]; lea rsi, [rdi+0x3b0]; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x0000000011c353: leave; adc [rax], r8b; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000017aa87: leave; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000ee28f: leave; add cl, [rax-0x7d]; mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001947c7: leave; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001987d4: leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000416d9: leave; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000001b152b: leave; bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14eb: leave; bzhi ecx, ecx, eax; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b43fb: leave; bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43cb: leave; bzhi ecx, ecx, eax; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000000d8e43: leave; call qword ptr [rbx]; 
0x00000000169dde: leave; cld; jmp qword ptr [rsi+0x66]; 
0x000000000ccf37: leave; cmc; jmp qword ptr [rsi+0xf]; 
0x000000000c47f6: leave; cmove rax, rdx; ret; 
0x000000001b5765: leave; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001ae6e5: leave; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000149658: leave; cmp rcx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149611: leave; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x00000000042443: leave; imul ebx, [rip+0xc76400], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000b12fd: leave; je short 0x00000000000b1308; cmp ecx, edx; jne short 0x00000000000b12f0; ret; 
0x000000001aebd7: leave; jne 0x00000000001aeaa4; ret; 
0x000000001b5c77: leave; jne 0x00000000001b5b30; ret; 
0x000000000c42f0: leave; jne short 0x00000000000c42e0; ret; 
0x000000000c43a0: leave; jne short 0x00000000000c4390; ret; 
0x000000000c4660: leave; jne short 0x00000000000c4650; sub rax, 0x1; ret; 
0x000000000c5890: leave; jne short 0x00000000000c5868; mov rax, r8; ret; 
0x0000000012a5e9: leave; jne short 0x000000000012a5f0; ret; 
0x0000000012ae30: leave; jne short 0x000000000012ae38; ret; 
0x0000000012ae8d: leave; jne short 0x000000000012ae98; ret; 
0x00000000135aae: leave; jne short 0x0000000000135a60; mov rax, r8; ret; 
0x000000001aeaa0: leave; jne short 0x00000000001aeaaa; ret; 
0x000000001b1530: leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b14f0: leave; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b4400: leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43d0: leave; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b5b2a: leave; jne short 0x00000000001b5b36; ret; 
0x000000001afb9b: leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a721d: leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000b7d69: leave; lea r10, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5af9: leave; lea r10, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b3149: leave; lea r10, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a29: leave; lea r10, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bd9: leave; lea r10, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a59: leave; lea r10, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796a9: leave; lea r10, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000178419: leave; lea r10, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000198902: leave; lea rax, [rdi+rcx]; ret; 
0x0000000015df93: leave; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000009be5a: leave; lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x000000000bf431: leave; mov [rax], cl; mov rax, rdi; ret; 
0x000000000a50f6: leave; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x000000000352eb: leave; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x00000000175ada: leave; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000017579e: leave; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000001b1b96: leave; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x000000000b2f9c: leave; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001aeada: leave; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x000000001a3543: leave; movzx eax, byte ptr [rdi+rcx]; movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x000000001a2d0d: leave; or eax, ecx; ret; 
0x000000001bba4f: leave; out 0xff, al; mov qword ptr [rip+0x656eb], 0x0; add rsp, 0x8; ret; 
0x000000000ec243: leave; ret far; 
0x000000000562ec: leave; ret; 
0x000000000e6a23: leave; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000909fb: leave; test [rax], bl; add [rax-0x75], cl; jg short 0x0000000000090a13; call qword ptr [rax+0x360]; 
0x000000001aebd5: leave; test ecx, ecx; jne 0x00000000001aeaa4; ret; 
0x000000001b5c75: leave; test ecx, ecx; jne 0x00000000001b5b30; ret; 
0x000000001aea9e: leave; test ecx, ecx; jne short 0x00000000001aeaaa; ret; 
0x000000001b5b28: leave; test ecx, ecx; jne short 0x00000000001b5b36; ret; 
0x000000001afb9f: leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a7222: leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000002ab0c: leave; xor edx, edx; push rax; call rbx; 
0x00000000127a55: leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127815: leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000007560c: lock add [rax], al; add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000009bf2e: lock add [rdi], rax; ret; 
0x000000001198a0: lock and [rax-0x77], cl; ret; 
0x000000000c0f2c: lock and [rcx], edx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000091837: lock cmpxchg [r8+0x308], edx; jne short 0x0000000000091828; pop rbx; ret; 
0x0000000009cd59: lock cmpxchg [rbp], rdx; jne short 0x000000000009cd68; xor eax, eax; pop rbp; ret; 
0x0000000009be5b: lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000090de7: lock cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x0000000009c05e: lock cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009cd8f: lock cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x00000000090f7d: lock cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x000000000967d9: lock cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x00000000096564: lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000015b67b: lock dec dword ptr [eax-0x77]; ret; 
0x00000000121edf: lock dec dword ptr [eax-0x7b]; shl byte ptr [rax+rdi+0x48], 0x39; ret; 
0x0000000011c92a: lock dec dword ptr [rax+0x1]; ret; 
0x000000001183b0: lock dec dword ptr [rax-0x77]; ret; 
0x00000000121ee0: lock dec dword ptr [rax-0x7b]; shl byte ptr [rax+rdi+0x48], 0x39; ret; 
0x0000000009be34: lock dec dword ptr [rdi]; jne short 0x000000000009be40; xor eax, eax; ret; 
0x0000000015b7a3: lock dec word ptr [rax-0x77]; ret; 
0x00000000094a23: lock or [rax], al; add [rax+0xe], bh; syscall; 
0x0000000003d2cc: lock sbb [rax], al; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000a9d69: lodsb [rsi]; add [rax], eax; cmove rax, rdx; ret; 
0x00000000103c6c: lodsb [rsi]; and al, 0xa0; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000015d7d6: lodsb [rsi]; in al, dx; dec dword ptr [rax-0x77]; ret; 
0x0000000015d7d7: lodsb [rsi]; in al, dx; dec dword ptr [rax-0x77]; ret; 
0x00000000158070: lodsb [rsi]; out 0xfd, al; jmp qword ptr [rsi+0x66]; 
0x00000000167259: lodsd [rsi]; adc al, [rdi]; add [rax-0x77], cl; ret; 
0x000000000ed10d: lodsd [rsi]; add [rax], al; setne al; ret; 
0x0000000015040f: lodsd [rsi]; add al, 0x0; add [rax-0x75], cl; or [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x0000000010f06c: lodsd [rsi]; bnd call qword ptr [rax-0x7af0a4c4]; 
0x0000000016b9a1: lodsd [rsi]; cld; jmp qword ptr [rsi+0x66]; 
0x000000000e65c3: lodsd [rsi]; cli; jmp qword ptr [rsi+0x2e]; 
0x00000000054eff: lodsd [rsi]; enter 0x894c, 0x7; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000001b4402: lodsd [rsi]; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000011e59e: lodsd [rsi]; mov ah, 0xf0; jmp qword ptr [rsi+0x66]; 
0x0000000016b5ce: lodsd [rsi]; nop; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000969af: lodsd [rsi]; rcl byte ptr [rbx], 0x0; syscall; 
0x00000000054f32: lodsd [rsi]; ret; 
0x00000000090cc6: lodsd [rsi]; sbb [rax], al; ret; 
0x000000000dcd9f: lodsd [rsi]; shl ch, 0x1; jmp qword ptr [rsi+0x2e]; 
0x0000000004281b: loop 0x0000000000042821; add [rbx+0x48082444], cl; add esp, 0x18; ret; 
0x000000000467c2: loop 0x00000000000467ce; and eax, 0x3ff; xor eax, edx; ret; 
0x0000000005411d: loop 0x00000000000540d7; add [rax], eax; add [rax], al; ret; 
0x00000000054345: loop 0x00000000000542ff; add [rax], eax; add [rax], al; ret; 
0x00000000056594: loop 0x00000000000565de; mov [rsi], edx; mov [rdi], eax; mov eax, 0x1; ret; 
0x0000000005a2c9: loop 0x000000000005a317; mov eax, eax; ret; 
0x0000000005d4ac: loop 0x000000000005d4ad; call qword ptr [rax+0x2085c748]; 
0x0000000006103d: loop 0x0000000000061070; call far fword ptr [rbx+0x48]; 
0x00000000070ccc: loop 0x0000000000070ccd; call qword ptr [rax+0x8418d4c]; 
0x00000000072334: loop 0x0000000000072377; call qword ptr [rbp+0x38]; 
0x00000000072dc0: loop 0x0000000000072e0e; mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000072fe1: loop 0x0000000000072fe5; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000072fe9: loop 0x000000000007302c; call qword ptr [rdx+rax*8]; 
0x000000000743b4: loop 0x000000000007439e; ret; 
0x00000000078514: loop 0x0000000000078518; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000007fb12: loop 0x000000000007fb5c; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x0000000008004c: loop 0x000000000008009a; mov esi, esi; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081100: loop 0x000000000008115d; pop r12; pop r13; jmp rax; 
0x00000000081234: loop 0x000000000008127e; mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000815cb: loop 0x0000000000081615; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x000000000815f5: loop 0x000000000008163f; mov esi, ebp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000008175a: loop 0x00000000000817a4; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000085b88: loop 0x0000000000085bd2; mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008a301: loop 0x000000000008a34f; mov esi, ebp; call qword ptr [r14+0x38]; 
0x00000000090aa5: loop 0x0000000000090adf; cmp edx, 0x8; je short 0x0000000000090aad; ret; 
0x0000000009677d: loop 0x0000000000096737; or eax, [rax]; add [rax], al; ret; 
0x00000000096900: loop 0x000000000009688b; out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000096a70: loop 0x00000000000969fb; out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000009b45f: loop 0x000000000009b45f; jmp qword ptr [rsi+0xf]; 
0x0000000009d01a: loop 0x000000000009cfcf; clc; dec dword ptr [rax-0x77]; ret; 
0x000000000a0898: loop 0x00000000000a089a; add [rax], al; syscall; 
0x000000000a814a: loop 0x00000000000a818d; pop rsp; pop r13; ret; 
0x000000000a815f: loop 0x00000000000a81a2; pop rsp; pop r13; ret; 
0x000000000a844a: loop 0x00000000000a84be; add [rax], eax; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a969f: loop 0x00000000000a96a3; lea rax, [rip+0xd40d8]; lea rdx, [rip+0xd9771]; cmovne rax, rdx; ret; 
0x000000000a98cf: loop 0x00000000000a98d3; lea rax, [rip+0xd14a8]; lea rdx, [rip+0xd6a31]; cmovne rax, rdx; ret; 
0x000000000a9d0f: loop 0x00000000000a9d13; lea rax, [rip+0xd1088]; lea rdx, [rip+0xd6611]; cmovne rax, rdx; ret; 
0x000000000b308d: loop 0x00000000000b30c0; shr byte ptr [rcx], 0xc8; ret; 
0x000000000ba61b: loop 0x00000000000ba64d; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x000000000c07aa: loop 0x00000000000c07b1; add [rax], al; ret; 
0x000000000c51b5: loop 0x00000000000c517a; nop [rax+rax]; xor eax, eax; ret; 
0x000000000c52d7: loop 0x00000000000c52e9; add [rax+0x63], cl; add al, 0xba; add rax, rdx; notrack jmp rax; 
0x000000000dc007: loop 0x00000000000dc003; dec dword ptr [rax+0x39]; ret; 
0x000000000dc006: loop 0x00000000000dc003; dec dword ptr [rax+0x39]; ret; 
0x000000000e57ef: loop 0x00000000000e5835; mov esi, ebp; mov eax, 0xe6; syscall; 
0x000000000e585a: loop 0x00000000000e589d; mov eax, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x000000000e58af: loop 0x00000000000e58f5; mov esi, ebp; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000eb169: loop 0x00000000000eb1b3; lea esi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000f0246: loop 0x00000000000f0200; add [rax], eax; add [rax], al; ret; 
0x000000000f41d1: loop 0x00000000000f41d7; je short 0x00000000000f416f; mov byte ptr [rax+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000f6fac: loop 0x00000000000f6faf; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x0000000010303c: loop 0x000000000010303d; call qword ptr [rax+0x24448b48]; 
0x000000001146db: loop 0x0000000000114725; mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000119b3a: loop 0x0000000000119afa; adc [rax], al; add [rax], al; mov eax, 0x48; syscall; 
0x0000000011a0f2: loop 0x000000000011a0ac; adc [rax], al; add [rax], al; syscall; 
0x0000000011abc3: loop 0x000000000011abd5; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000125613: loop 0x0000000000125614; sldt [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000128667: loop 0x00000000001286b1; mov eax, [rip+0xf07a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000132f2c: loop 0x0000000000132f3d; adc [rbp-0x78], ebx; call rax; 
0x000000001331a4: loop 0x00000000001331b5; adc [rbp-0x78], esp; call rax; 
0x00000000133330: loop 0x00000000001332f9; add byte ptr [r8], 0x0; add [rax], al; movups [rbp-0x78], xmm7; call rax; 
0x0000000013365c: loop 0x000000000013366d; adc [rbp-0x78], esi; call rax; 
0x0000000013372e: loop 0x000000000013373f; adc [rbp-0x78], edi; call rax; 
0x000000001338e7: loop 0x00000000001338f8; adc [rbp-0x78], edi; call rax; 
0x000000001344af: loop 0x00000000001344b3; lea rax, [rip+0x468d8]; lea rdx, [rip+0x4be61]; cmovne rax, rdx; ret; 
0x000000001345df: loop 0x00000000001345e3; lea rax, [rip+0x49188]; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x0000000013470f: loop 0x0000000000134713; lea rax, [rip+0x46658]; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x000000001367a4: loop 0x00000000001367a6; add [rax], al; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000013849b: loop 0x000000000013849c; jmp qword ptr [rsi-0x70]; 
0x00000000139e99: loop 0x0000000000139ee3; mov ecx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000013a391: loop 0x000000000013a3db; mov ecx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000142f4d: loop 0x0000000000142f53; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000153b3c: loop 0x0000000000153b3d; call qword ptr [rax+0x24448b48]; 
0x0000000015650a: loop 0x0000000000156493; bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001584eb: loop 0x00000000001584ea; jmp qword ptr [rsi-0x70]; 
0x0000000015ee93: loop 0x000000000015ee91; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000015f832: loop 0x000000000015f880; mov edi, ebp; call qword ptr [rax+0x10]; 
0x0000000015f870: loop 0x000000000015f8be; mov edi, ebp; call qword ptr [rax+0x20]; 
0x000000001609a2: loop 0x00000000001609ec; mov esi, ebp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000160a7f: loop 0x0000000000160ac9; mov esi, ebp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000176060: loop 0x0000000000175feb; out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000017d1e7: loop 0x000000000017d235; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d22f: loop 0x000000000017d27d; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d26d: loop 0x000000000017d2bb; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d2a5: loop 0x000000000017d2f3; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d2e3: loop 0x000000000017d331; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d31b: loop 0x000000000017d369; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d343: loop 0x000000000017d391; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fbc7: loop 0x000000000017fc15; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fc0f: loop 0x000000000017fc5d; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fc4d: loop 0x000000000017fc9b; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fc85: loop 0x000000000017fcd3; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fcc3: loop 0x000000000017fd11; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fcfb: loop 0x000000000017fd49; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fd23: loop 0x000000000017fd71; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182059: loop 0x000000000018204f; movq [rdi-0x10], mm1; ret; 
0x00000000184b89: loop 0x0000000000184b7f; movq [rdi-0x10], mm1; ret; 
0x000000001aed7b: loop 0x00000000001aed7b; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001b7b3f: loop 0x00000000001b7b7f; jmp r10; 
0x0000000002ca5d: loope 0x000000000002ca5e; jmp qword ptr [rsi+0xf]; 
0x00000000054dbb: loope 0x0000000000054e09; mov [rdi], ecx; ret; 
0x00000000054dec: loope 0x0000000000054e3a; mov [rdi-0x8], ecx; ret; 
0x00000000054e6d: loope 0x0000000000054ebb; mov [rdi-0x10], ecx; ret; 
0x000000000814ad: loope 0x00000000000814e0; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x00000000098873: loope 0x0000000000098875; add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x000000000996fc: loope 0x0000000000099762; mov qword ptr [0x2f0], 0x0; nop; xor eax, eax; ret; 
0x000000000a09b6: loope 0x00000000000a09b8; add [rax], al; syscall; 
0x000000000a8306: loope 0x00000000000a830c; lea rax, [rip+0x11f81]; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x000000000b12ce: loope 0x00000000000b131c; mov eax, eax; ret; 
0x000000000bfc66: loope 0x00000000000bfcce; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000c12a6: loope 0x00000000000c130e; nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000c2f76: loope 0x00000000000c2fde; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000c3a66: loope 0x00000000000c3ace; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000c6931: loope 0x00000000000c697b; mov edx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000d838e: loope 0x00000000000d839f; je short 0x00000000000d83b0; ret; 
0x000000000df74b: loope 0x00000000000df751; add al, 0x66; cmp ecx, 0x850f0400; ret; 
0x000000000e8138: loope 0x00000000000e8186; mov edx, ebp; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000e8538: loope 0x00000000000e8586; mov edx, ebp; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000eac5c: loope 0x00000000000eac70; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000f6f82: loope 0x00000000000f6f83; add esi, esi; ret; 
0x0000000010f06b: loope 0x000000000010f01a; bnd call qword ptr [rax-0x7af0a4c4]; 
0x00000000112950: loope 0x0000000000112949; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000119e18: loope 0x0000000000119e27; add [rax], al; add [rax-0x3fcef877], al; ret; 
0x0000000011a37c: loope 0x000000000011a332; jg short 0x000000000011a37f; jmp qword ptr [rsi+0xf]; 
0x0000000011ac64: loope 0x000000000011ac75; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000011bbae: loope 0x000000000011bbae; mov eax, 0xa9; syscall; 
0x0000000011ef35: loope 0x000000000011ef1f; add eax, 0x4c000003; mov eax, esp; pop r12; ret; 
0x00000000126b11: loope 0x0000000000126b15; jne short 0x0000000000126b40; xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000129433: loope 0x00000000001293b6; str [rax-0x75]; sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x0000000013471b: loope 0x00000000001346d8; add al, 0x0; cmovne rax, rdx; ret; 
0x00000000137c9b: loope 0x0000000000137ce5; mov edx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000138e0e: loope 0x0000000000138e58; mov edx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x0000000013ba5b: loope 0x000000000013ba4b; jmp qword ptr [rsi-0x70]; 
0x0000000015d372: loope 0x000000000015d374; add [rbp+0x310f75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000160f9b: loope 0x0000000000160fa1; xor rcx, rax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x00000000161900: loope 0x0000000000161981; movzx edx, byte ptr [rdx+rcx]; mov [rdi+0x7], dl; ret; 
0x00000000162c22: loope 0x0000000000162c8a; nop [rax+rax]; xchg ax, ax; endbr64; ret; 
0x0000000016a1d1: loope 0x000000000016a1be; jmp qword ptr [rsi+0x66]; 
0x0000000017d3e7: loope 0x000000000017d435; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d42f: loope 0x000000000017d47d; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d46d: loope 0x000000000017d4bb; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d4a5: loope 0x000000000017d4f3; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d4e3: loope 0x000000000017d531; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d51b: loope 0x000000000017d569; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d543: loope 0x000000000017d591; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fdc7: loope 0x000000000017fe15; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fe0f: loope 0x000000000017fe5d; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fe4d: loope 0x000000000017fe9b; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fe85: loope 0x000000000017fed3; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fec3: loope 0x000000000017ff11; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017fefb: loope 0x000000000017ff49; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017ff23: loope 0x000000000017ff71; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000181fc9: loope 0x0000000000181fbf; movq [rdi-0x10], mm1; ret; 
0x00000000184af9: loope 0x0000000000184aef; movq [rdi-0x10], mm1; ret; 
0x0000000018d62b: loope 0x000000000018d62e; add [rax], al; ret; 
0x00000000198dfe: loope 0x0000000000198e29; enter 0xf8c5, 0x77; ret; 
0x0000000019fec3: loope 0x000000000019ff0d; lea eax, [rdi+rdx]; vzeroupper; ret; 
0x000000001a49eb: loope 0x00000000001a49ed; add [rax], al; lea rax, [rdi+0xf]; ret; 
0x000000001a68dd: loope 0x00000000001a68dd; jg short 0x00000000001a68e9; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a6969: loope 0x00000000001a6969; jg short 0x00000000001a6975; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a69e4: loope 0x00000000001a69e4; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001a6ba5: loope 0x00000000001a6ba5; jg short 0x00000000001a6bab; ret; 
0x000000001a716d: loope 0x00000000001a716d; jg short 0x00000000001a7179; ret; 
0x000000001a71dd: loope 0x00000000001a71dd; jg short 0x00000000001a71e2; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a71e3: loope 0x00000000001a71e3; jg short 0x00000000001a722c; adc bh, bh; ret; 
0x000000001a721f: loope 0x00000000001a721c; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000001a7224: loope 0x00000000001a72a5; jg short 0x00000000001a7229; ret; 
0x000000001a72f1: loope 0x00000000001a72f1; sub [rdi], bh; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a72f7: loope 0x00000000001a72f7; sub [rdi+0x44], bh; adc bh, bh; ret; 
0x000000001a7301: loope 0x00000000001a7301; or [rdi], bh; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001a7307: loope 0x00000000001a7307; or [rdi+0x44], bh; adc bh, bh; ret; 
0x000000001aec99: loope 0x00000000001aed1a; sub ch, [rdi+0x16]; vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; ret; 
0x000000001aed70: loope 0x00000000001aed4f; and bh, ch; jmp qword ptr [edx-0x5d]; 
0x000000001aee46: loope 0x00000000001aee46; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001aeeda: loope 0x00000000001aeeda; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aef66: loope 0x00000000001aef66; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001af15f: loope 0x00000000001af15f; sub [rdi+0x1], bh; ret; 
0x000000001afaea: loope 0x00000000001afaea; sub [rdi+0x7], bh; ret; 
0x000000001afb5a: loope 0x00000000001afb5a; sub [rdi], bh; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001afb60: loope 0x00000000001afb60; sub [rdi+0x44], bh; adc bh, bh; ret; 
0x000000001afba1: loope 0x00000000001afc22; sub [rdi], edi; ret; 
0x000000001afc61: loope 0x00000000001afc61; or [rdi], bh; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001afc67: loope 0x00000000001afc67; or [rdi+0x44], bh; adc bh, bh; ret; 
0x000000001b0008: loope 0x00000000001b0008; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b0222: loope 0x00000000001b0222; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b0252: loope 0x00000000001b0252; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b04e2: loope 0x00000000001b04e2; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b09af: loope 0x00000000001b09af; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b09df: loope 0x00000000001b09df; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b0a17: loope 0x00000000001b0a17; sub [rdi+0x5f], bh; add [rax-0x72b7bfb1], ecx; ret; 
0x000000001b0a81: loope 0x00000000001b0a81; or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b1208: loope 0x00000000001b1208; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b1412: loope 0x00000000001b1412; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b1442: loope 0x00000000001b1442; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b18e2: loope 0x00000000001b1904; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1fb8: loope 0x00000000001b1fb8; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b21c2: loope 0x00000000001b21c2; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b21f2: loope 0x00000000001b21f2; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b2922: loope 0x00000000001b2922; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b2c02: loope 0x00000000001b2c02; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b2c32: loope 0x00000000001b2c32; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b2cdf: loope 0x00000000001b2cdf; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b2d0f: loope 0x00000000001b2d0f; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b2dad: loope 0x00000000001b2dad; sub [rdi+0x7f], bh; add eax, esi; xchg [rax], eax; ret; 
0x000000001b36a2: loope 0x00000000001b36a2; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001b3b3f: loope 0x00000000001b3b3f; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b3b5f: loope 0x00000000001b3b5f; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b3b81: loope 0x00000000001b3b81; sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001b3bf1: loope 0x00000000001b3bf1; or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b5ce1: loope 0x00000000001b5ce1; sub [rdi+0x4c], ch; xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x000000001bb80e: loope 0x00000000001bb86b; ret; 
0x00000000036c00: loopne 0x0000000000036c4a; test edx, edx; je short 0x0000000000036c08; call rdx; 
0x00000000039f47: loopne 0x0000000000039f51; ret; 
0x00000000039f87: loopne 0x0000000000039f8b; ret; 
0x0000000003a027: loopne 0x000000000003a02d; ret; 
0x0000000003a107: loopne 0x000000000003a10a; ret; 
0x0000000003a1a0: loopne 0x000000000003a1a3; ret; 
0x0000000003a1c0: loopne 0x000000000003a1ca; ret; 
0x0000000003a177: loopne 0x000000000003a1f8; ret; 
0x0000000003a200: loopne 0x000000000003a204; ret; 
0x0000000003a2a0: loopne 0x000000000003a2a6; ret; 
0x0000000003a97c: loopne 0x000000000003a9d9; pop rbp; pop r12; ret; 
0x0000000003aa1a: loopne 0x000000000003aa5d; pop rsp; ret; 
0x0000000003dd0f: loopne 0x000000000003dd6e; pop r12; pop r13; pop r14; ret; 
0x0000000004130b: loopne 0x00000000000412ea; fsub st, dword ptr [rip+0x200]; ret; 
0x000000000416c8: loopne 0x0000000000041709; or rax, rdx; movq xmm0, rax; ret; 
0x0000000004192d: loopne 0x0000000000041946; or ecx, eax; movd xmm0, ecx; ret; 
0x000000000419ba: loopne 0x00000000000419d3; or eax, ecx; movd xmm0, eax; mulss xmm0, [rip+0x1a13fe]; ret; 
0x00000000041a59: loopne 0x0000000000041a63; ret; 
0x00000000041f88: loopne 0x0000000000041f92; ret; 
0x00000000042ec0: loopne 0x0000000000042f0a; or [rdi], eax; xor eax, eax; ret; 
0x00000000042f58: loopne 0x0000000000042fa2; and eax, [rdi]; setne al; movzx eax, al; ret; 
0x000000000431e7: loopne 0x0000000000043244; pop rbp; pop r12; ret; 
0x0000000004324d: loopne 0x00000000000432aa; pop rbp; pop r12; ret; 
0x00000000045254: loopne 0x00000000000452b1; pop rbp; pop r12; pop r13; ret; 
0x0000000004567b: loopne 0x00000000000456d8; pop rbp; pop r12; ret; 
0x00000000045866: loopne 0x00000000000458c3; pop rbp; pop r12; ret; 
0x00000000045947: loopne 0x00000000000459a4; pop rbp; pop r12; ret; 
0x00000000046157: loopne 0x000000000004619a; pop rsp; ret; 
0x00000000049b96: loopne 0x0000000000049b1b; ret; 
0x0000000004c9d6: loopne 0x000000000004c95b; ret; 
0x000000000515e8: loopne 0x0000000000051608; mov r8d, eax; or r8d, ecx; mov rax, r8; ret; 
0x00000000053862: loopne 0x00000000000538bf; pop r12; ret; 
0x00000000054699: loopne 0x000000000005469d; sub eax, 0x1; ret; 
0x0000000005660b: loopne 0x00000000000565c5; add [rax], eax; add [rax], al; ret; 
0x0000000005a586: loopne 0x000000000005a5e3; pop r12; ret; 
0x0000000005a61e: loopne 0x000000000005a67b; pop r12; ret; 
0x0000000005a645: loopne 0x000000000005a6a2; pop r12; ret; 
0x0000000005a662: loopne 0x000000000005a6bf; pop r12; ret; 
0x0000000005d66f: loopne 0x000000000005d6cc; pop rbp; pop r12; ret; 
0x0000000005d75f: loopne 0x000000000005d7bc; pop rbp; pop r12; ret; 
0x0000000005f78c: loopne 0x000000000005f7e9; pop rbp; pop r12; pop r13; ret; 
0x0000000005f849: loopne 0x000000000005f8a6; pop rbp; pop r12; pop r13; ret; 
0x0000000005fac9: loopne 0x000000000005fb26; pop r12; ret; 
0x0000000005fb0a: loopne 0x000000000005fb67; pop r12; ret; 
0x00000000061179: loopne 0x00000000000611d8; pop r12; ret; 
0x00000000061250: loopne 0x00000000000612ad; pop r12; ret; 
0x00000000062575: loopne 0x000000000006258d; add [rax+0x63], cl; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x00000000062644: loopne 0x000000000006265d; add [rax+0x63], cl; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x00000000068cd7: loopne 0x0000000000068cd8; jmp qword ptr [rsi+0xf]; 
0x00000000073cd7: loopne 0x0000000000073ce8; sub byte ptr [rsi-0xf], 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000074d7f: loopne 0x0000000000074d80; jmp qword ptr [rsi+0xf]; 
0x00000000074de4: loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000074de3: loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000074e44: loopne 0x0000000000074e45; jmp qword ptr [rsi+0xf]; 
0x00000000077744: loopne 0x0000000000077746; add [rax], al; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007b826: loopne 0x000000000007b7ab; call far fword ptr [rdx+0xf]; 
0x0000000007b86e: loopne 0x000000000007b7f3; call far fword ptr [rdx+0xf]; 
0x0000000007b8b6: loopne 0x000000000007b83b; call far fword ptr [rdx+0xf]; 
0x0000000007b906: loopne 0x000000000007b88b; call far fword ptr [rdx+0xf]; 
0x0000000007b9e6: loopne 0x000000000007b96b; call far fword ptr [rdx+0x77]; 
0x0000000007baf6: loopne 0x000000000007ba7b; call far fword ptr [rdx+0xf]; 
0x0000000007bb4a: loopne 0x000000000007bacf; call far fword ptr [rdx+0xf]; 
0x0000000007bb96: loopne 0x000000000007bb1b; call far fword ptr [rdx+0xf]; 
0x0000000007d92f: loopne 0x000000000007d98c; pop rbp; pop r12; pop r13; ret; 
0x0000000007e224: loopne 0x000000000007e281; pop rbp; pop r12; ret; 
0x0000000007eda9: loopne 0x000000000007ee06; pop rbp; pop r12; ret; 
0x0000000007f25a: loopne 0x000000000007f2b7; pop rbp; pop r12; ret; 
0x0000000007f38c: loopne 0x000000000007f3e9; pop rbp; pop r12; ret; 
0x0000000007f59d: loopne 0x000000000007f59f; add [rax], al; ret; 
0x0000000007f773: loopne 0x000000000007f7d0; pop rbp; pop r12; pop r13; ret; 
0x0000000007f7d0: loopne 0x000000000007f7d2; add [rax], al; jmp rax; 
0x0000000007f799: loopne 0x000000000007f7f6; pop rbp; pop r12; pop r13; ret; 
0x0000000007f80c: loopne 0x000000000007f80e; add [rax], al; call rax; 
0x0000000007f7d5: loopne 0x000000000007f81f; mov eax, 0xffffffff; ret; 
0x0000000007f859: loopne 0x000000000007f85b; add [rax], al; lea rsi, [rsp+0x8]; call rax; 
0x0000000007f8b0: loopne 0x000000000007f8b2; add [rax], al; jmp rax; 
0x0000000007f8b5: loopne 0x000000000007f91d; nop [rax+rax]; xor eax, eax; ret; 
0x0000000007f9e6: loopne 0x000000000007fa45; pop r12; pop r13; ret; 
0x0000000007fa4e: loopne 0x000000000007faad; pop r12; pop r13; ret; 
0x0000000007fd4a: loopne 0x000000000007fda7; pop rbp; pop r12; ret; 
0x00000000080e96: loopne 0x0000000000080ef5; pop r12; pop r13; ret; 
0x00000000080eb5: loopne 0x0000000000080f14; pop r12; pop r13; ret; 
0x00000000081712: loopne 0x0000000000081771; pop r12; pop r13; pop r14; ret; 
0x0000000008224e: loopne 0x00000000000822ad; pop r12; pop r13; pop r14; ret; 
0x00000000082316: loopne 0x0000000000082359; pop rsp; pop r13; pop r14; ret; 
0x0000000008235b: loopne 0x00000000000823ba; pop r12; pop r13; pop r14; ret; 
0x00000000082ff6: loopne 0x0000000000083053; pop r12; ret; 
0x00000000083c17: loopne 0x0000000000083c19; add [rax], al; call qword ptr [rax+0x68]; 
0x00000000083d4c: loopne 0x0000000000083d4e; add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000086090: loopne 0x0000000000086092; add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x00000000086099: loopne 0x0000000000086101; nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000086515: loopne 0x0000000000086574; pop r12; ret; 
0x00000000086531: loopne 0x0000000000086590; pop r12; ret; 
0x0000000008655f: loopne 0x00000000000865be; pop r12; ret; 
0x0000000008732a: loopne 0x0000000000087389; pop r12; ret; 
0x00000000087486: loopne 0x0000000000087489; ret; 
0x00000000087556: loopne 0x0000000000087559; ret; 
0x0000000008787e: loopne 0x00000000000878db; pop rbp; pop r12; pop r13; ret; 
0x00000000087e2a: loopne 0x0000000000087e89; pop r12; ret; 
0x00000000088460: loopne 0x00000000000884bd; pop r12; ret; 
0x0000000008863f: loopne 0x000000000008869e; pop r12; pop r13; pop r14; ret; 
0x000000000886a3: loopne 0x0000000000088700; pop rbp; pop r12; ret; 
0x0000000008909f: loopne 0x00000000000890fc; pop rbp; pop r12; pop r13; ret; 
0x0000000008997a: loopne 0x00000000000899d7; pop rbp; pop r12; ret; 
0x0000000008a01a: loopne 0x000000000008a01d; ret; 
0x0000000008a02a: loopne 0x000000000008a02d; ret; 
0x0000000008a256: loopne 0x000000000008a2b3; pop rbp; pop r12; ret; 
0x0000000008a285: loopne 0x000000000008a2c8; pop rsp; ret; 
0x0000000008a297: loopne 0x000000000008a2da; pop rsp; ret; 
0x0000000008a33f: loopne 0x000000000008a39e; pop r12; pop r13; pop r14; ret; 
0x0000000008a426: loopne 0x000000000008a421; dec dword ptr [rax-0x77]; ret; 
0x0000000008a6af: loopne 0x000000000008a6b1; add [rax], al; pop rbx; ret; 
0x0000000008c00e: loopne 0x000000000008c06b; pop rbp; pop r12; ret; 
0x0000000009085a: loopne 0x00000000000908b9; pop r12; ret; 
0x0000000009095f: loopne 0x00000000000909be; pop r12; ret; 
0x00000000090c46: loopne 0x0000000000090cae; nop [rax+rax]; ret; 
0x00000000090cc1: loopne 0x0000000000090cc4; mov [rip+0x18adcb], eax; ret; 
0x000000000918ea: loopne 0x00000000000918e3; jne short 0x00000000000918a2; pop rbx; ret; 
0x0000000009211c: loopne 0x0000000000092179; pop rbp; pop r12; pop r13; ret; 
0x000000000922d8: loopne 0x00000000000922db; mov [rsi], eax; xor eax, eax; ret; 
0x000000000922fa: loopne 0x00000000000922fd; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009233b: loopne 0x000000000009233e; mov [rsi], eax; xor eax, eax; ret; 
0x00000000092599: loopne 0x00000000000925f6; pop rbp; pop r12; ret; 
0x000000000926a1: loopne 0x00000000000926a0; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000092970: loopne 0x0000000000092979; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000945e9: loopne 0x00000000000945ec; mov [rsi], eax; xor eax, eax; ret; 
0x000000000945f7: loopne 0x00000000000945fa; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094623: loopne 0x0000000000094622; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x0000000009492c: loopne 0x0000000000094930; add [rax], al; mov eax, 0x111; syscall; 
0x00000000095cb7: loopne 0x0000000000095cc9; jne short 0x0000000000095cc0; ret; 
0x000000000962e5: loopne 0x0000000000096342; pop rbp; pop r12; pop r13; ret; 
0x000000000963c3: loopne 0x0000000000096420; pop rbp; pop r12; pop r13; ret; 
0x00000000096465: loopne 0x00000000000964c4; pop r12; pop r13; ret; 
0x00000000096798: loopne 0x000000000009679e; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x00000000099cba: loopne 0x0000000000099cbf; mov [rsi], eax; xor eax, eax; ret; 
0x00000000099cea: loopne 0x0000000000099ced; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009b638: loopne 0x000000000009b695; pop rbp; pop r12; pop r13; ret; 
0x0000000009b8de: loopne 0x000000000009b93b; pop rbp; pop r12; pop r13; ret; 
0x0000000009b9e5: loopne 0x000000000009ba42; pop rbp; pop r12; pop r13; ret; 
0x0000000009be9f: loopne 0x000000000009bed9; cmp eax, 0x8; je short 0x000000000009bea7; ret; 
0x0000000009c105: loopne 0x000000000009c10e; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000009c990: loopne 0x000000000009c9ef; pop r12; ret; 
0x0000000009d254: loopne 0x000000000009d2b1; pop rbp; pop r12; ret; 
0x0000000009d2ab: loopne 0x000000000009d2ee; pop rsp; ret; 
0x0000000009d392: loopne 0x000000000009d3e1; mov esp, [rsp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009df3a: loopne 0x000000000009df7d; pop rsp; ret; 
0x0000000009e5e4: loopne 0x000000000009e5fb; sbb [rax], al; mov [rdi+0x18], rax; ret; 
0x0000000009f26c: loopne 0x000000000009f2c9; pop rbp; pop r12; pop r13; ret; 
0x0000000009f2d7: loopne 0x000000000009f334; pop rbp; pop r12; pop r13; ret; 
0x000000000a0134: loopne 0x00000000000a0193; pop r12; pop r13; ret; 
0x000000000a08b8: loopne 0x00000000000a0917; pop r12; pop r13; ret; 
0x000000000a08fc: loopne 0x00000000000a095b; pop r12; pop r13; ret; 
0x000000000a0934: loopne 0x00000000000a0993; pop r12; pop r13; ret; 
0x000000000a0a16: loopne 0x00000000000a0a18; add [rax], al; syscall; 
0x000000000a0ca7: loopne 0x00000000000a0ca9; add [rax], al; pop rbp; ret; 
0x000000000a11d7: loopne 0x00000000000a121a; pop rsp; ret; 
0x000000000a11c0: loopne 0x00000000000a121d; pop rbp; pop r12; ret; 
0x000000000a1f01: loopne 0x00000000000a1f60; pop r12; pop r13; pop r14; ret; 
0x000000000a207e: loopne 0x00000000000a20dd; pop r12; pop r13; pop r14; ret; 
0x000000000a6bb7: loopne 0x00000000000a6bba; cmovne rax, rdx; ret; 
0x000000000a6d64: loopne 0x00000000000a6da7; pop rsp; ret; 
0x000000000a7550: loopne 0x00000000000a754b; jmp qword ptr [rsi+0x66]; 
0x000000000a8043: loopne 0x00000000000a80a2; pop r12; pop r13; pop r14; ret; 
0x000000000a84bc: loopne 0x00000000000a847f; add [rax], eax; cmovne rax, rdx; ret; 
0x000000000a870c: loopne 0x00000000000a8769; pop rbp; pop r12; ret; 
0x000000000a942c: loopne 0x00000000000a9489; pop rbp; pop r12; pop r13; ret; 
0x000000000a9b7f: loopne 0x00000000000a9b81; add [rax-0x73], cl; adc eax, 0xddf17; cmovne rax, rdx; ret; 
0x000000000a9c1f: loopne 0x00000000000a9c21; add [rax-0x73], cl; adc eax, 0xdde97; cmovne rax, rdx; ret; 
0x000000000a9c1e: loopne 0x00000000000a9c21; add [rax-0x73], cl; adc eax, 0xdde97; cmovne rax, rdx; ret; 
0x000000000a9cda: loopne 0x00000000000a9ceb; add [rax-0x73], cl; add eax, 0xfe0dc; cmove rax, rdx; ret; 
0x000000000a9df6: loopne 0x00000000000a9e53; pop r12; ret; 
0x000000000a9e0d: loopne 0x00000000000a9e6a; pop r12; ret; 
0x000000000ab257: loopne 0x00000000000ab29a; pop rsp; ret; 
0x000000000ab242: loopne 0x00000000000ab29f; pop rbp; pop r12; ret; 
0x000000000af9f8: loopne 0x00000000000af9bb; clc; adc al, [rbx-0x76befc17]; ret far; 
0x000000000b10a7: loopne 0x00000000000b1104; pop r12; ret; 
0x000000000b10bd: loopne 0x00000000000b111a; pop r12; ret; 
0x000000000b116d: loopne 0x00000000000b11b0; pop rsp; ret; 
0x000000000b18c5: loopne 0x00000000000b1924; pop r12; pop r13; pop r14; ret; 
0x000000000c08ac: loopne 0x00000000000c08b2; add [rax], al; ret; 
0x000000000c4ae4: loopne 0x00000000000c4af5; adc [rdi+rdx-0x30], esi; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4da3: loopne 0x00000000000c4db4; adc [rdi+rdx-0x10], ebx; ret; 
0x000000000c4f4b: loopne 0x00000000000c4f5c; adc [rdi+rdx-0x10], ebx; ret; 
0x000000000c50b3: loopne 0x00000000000c50c5; adc [rdi-0x10], eax; ret; 
0x000000000c53e8: loopne 0x00000000000c5447; pop r12; ret; 
0x000000000c555b: loopne 0x00000000000c55b8; pop rbp; pop r12; ret; 
0x000000000c5688: loopne 0x00000000000c56e7; pop r12; pop r13; pop r14; ret; 
0x000000000d8cff: loopne 0x00000000000d8d42; pop rsp; ret; 
0x000000000d8d33: loopne 0x00000000000d8d76; pop rsp; ret; 
0x000000000d8d45: loopne 0x00000000000d8d88; pop rsp; ret; 
0x000000000d9ded: loopne 0x00000000000d9def; add [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000da977: loopne 0x00000000000da9ba; pop rsp; pop r13; pop r14; ret; 
0x000000000da960: loopne 0x00000000000da9bf; pop r12; pop r13; pop r14; ret; 
0x000000000e5e08: loopne 0x00000000000e5e65; pop rbp; pop r12; pop r13; ret; 
0x000000000e5e2a: loopne 0x00000000000e5e89; pop r12; pop r13; ret; 
0x000000000e6118: loopne 0x00000000000e611a; add [rax], al; pop rbx; ret; 
0x000000000e61a4: loopne 0x00000000000e61a6; add [rax], al; pop rbx; ret; 
0x000000000e628f: loopne 0x00000000000e62ec; pop rbp; pop r12; ret; 
0x000000000e63cf: loopne 0x00000000000e642c; pop rbp; pop r12; ret; 
0x000000000e64c8: loopne 0x00000000000e6525; pop rbp; pop r12; ret; 
0x000000000e666d: loopne 0x00000000000e66ca; pop rbp; pop r12; ret; 
0x000000000e6692: loopne 0x00000000000e66ef; pop rbp; pop r12; ret; 
0x000000000e76e6: loopne 0x00000000000e7743; pop rbp; pop r12; ret; 
0x000000000ea7d6: loopne 0x00000000000ea833; pop rbp; pop r12; pop r13; ret; 
0x000000000ead6a: loopne 0x00000000000ead78; pop rbp; pop r12; ret; 
0x000000000f04a8: loopne 0x00000000000f0505; pop rbp; pop r12; pop r13; ret; 
0x000000000f05b9: loopne 0x00000000000f0616; pop rbp; pop r12; pop r13; ret; 
0x000000000f067c: loopne 0x00000000000f06fd; jmp qword ptr [rsi+0xf]; 
0x00000000105f8d: loopne 0x0000000000105fec; pop r12; pop r13; pop r14; ret; 
0x00000000105fe2: loopne 0x0000000000106025; pop rsp; pop r13; pop r14; ret; 
0x00000000106060: loopne 0x00000000001060bd; pop rbp; pop r12; pop r13; ret; 
0x000000001075ad: loopne 0x00000000001075bb; add [rcx+0x46348ff], cl; mov edx, 0x3ed00148; jmp rax; 
0x00000000109345: loopne 0x0000000000109356; ret; 
0x0000000010f903: loopne 0x000000000010f943; jmp rax; 
0x00000000111200: loopne 0x0000000000111240; jmp rax; 
0x00000000112a00: loopne 0x00000000001129f9; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000114568: loopne 0x00000000001145ab; pop rsp; pop r13; ret; 
0x00000000115b16: loopne 0x0000000000115b75; pop r12; pop r13; ret; 
0x00000000116e58: loopne 0x0000000000116e5c; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x0000000011a5ad: loopne 0x000000000011a5f0; pop rsp; ret; 
0x0000000011a8d5: loopne 0x000000000011a932; pop rbp; pop r12; ret; 
0x0000000011aa45: loopne 0x000000000011aaa2; pop rbp; pop r12; ret; 
0x0000000011aa8a: loopne 0x000000000011aae7; pop rbp; pop r12; ret; 
0x0000000011aab3: loopne 0x000000000011aaf6; pop rsp; ret; 
0x0000000011ad1c: loopne 0x000000000011ad2d; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000011addc: loopne 0x000000000011aded; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000011b4ac: loopne 0x000000000011b509; pop rbp; pop r12; pop r13; ret; 
0x0000000011bf52: loopne 0x000000000011bf95; pop rsp; ret; 
0x0000000011c112: loopne 0x000000000011c104; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011c132: loopne 0x000000000011c124; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011d1a2: loopne 0x000000000011d194; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011d6db: loopne 0x000000000011d738; pop rbp; pop r12; pop r13; ret; 
0x0000000011de26: loopne 0x000000000011de83; pop r12; pop r13; pop rbp; ret; 
0x0000000011e9e2: loopne 0x000000000011ea3f; pop r12; ret; 
0x0000000011ea12: loopne 0x000000000011ea6f; pop r12; ret; 
0x0000000011eada: loopne 0x000000000011eb37; pop rbp; pop r12; ret; 
0x0000000011ef3d: loopne 0x000000000011ef80; pop rsp; ret; 
0x0000000011ef7b: loopne 0x000000000011efbe; pop rsp; ret; 
0x0000000011f496: loopne 0x000000000011f4f2; pop r12; ret; 
0x0000000011f4d1: loopne 0x000000000011f52d; pop r12; ret; 
0x0000000011fd2a: loopne 0x000000000011fd89; pop r12; pop r13; jmp rax; 
0x0000000011fdba: loopne 0x000000000011fe19; pop r12; pop r13; jmp rax; 
0x00000000120b23: loopne 0x0000000000120b82; pop r12; jmp rax; 
0x00000000120bd2: loopne 0x0000000000120c31; pop r12; pop r13; jmp rax; 
0x00000000120bd9: loopne 0x0000000000120c41; nop [rax+rax]; ret; 
0x00000000121d63: loopne 0x0000000000121dc0; pop rbp; pop r12; pop r13; ret; 
0x0000000012567f: loopne 0x00000000001256a1; and rax, rcx; or rax, rdx; ret; 
0x00000000125743: loopne 0x0000000000125786; pop rsp; ret; 
0x00000000126444: loopne 0x0000000000126449; ret; 
0x000000001279b7: loopne 0x0000000000127a01; add esp, 0x10; mov rax, r12; pop r12; ret; 
0x000000001279be: loopne 0x0000000000127a01; pop rsp; ret; 
0x00000000127a08: loopne 0x0000000000127a4b; pop rsp; ret; 
0x00000000129e44: loopne 0x0000000000129e47; ret; 
0x00000000129e60: loopne 0x0000000000129e6a; ret; 
0x00000000129ee4: loopne 0x0000000000129ee7; ret; 
0x00000000129f84: loopne 0x0000000000129f87; ret; 
0x00000000129fa0: loopne 0x0000000000129fa3; ret; 
0x0000000012a024: loopne 0x000000000012a027; ret; 
0x0000000012a040: loopne 0x000000000012a044; ret; 
0x0000000012a0c4: loopne 0x000000000012a0c7; ret; 
0x0000000012a154: loopne 0x000000000012a157; ret; 
0x0000000012a1f4: loopne 0x000000000012a1f7; ret; 
0x0000000012a294: loopne 0x000000000012a297; ret; 
0x0000000012a334: loopne 0x000000000012a337; ret; 
0x0000000012a350: loopne 0x000000000012a356; ret; 
0x0000000012a3d4: loopne 0x000000000012a3d7; ret; 
0x0000000012a46f: loopne 0x000000000012a472; ret; 
0x0000000012a504: loopne 0x000000000012a507; ret; 
0x0000000012a703: loopne 0x000000000012a706; ret; 
0x0000000012a856: loopne 0x000000000012a859; ret; 
0x0000000012a869: loopne 0x000000000012a873; ret; 
0x0000000012a8d6: loopne 0x000000000012a8d9; ret; 
0x0000000012a956: loopne 0x000000000012a959; ret; 
0x0000000012a969: loopne 0x000000000012a96c; ret; 
0x0000000012a9d6: loopne 0x000000000012a9d9; ret; 
0x0000000012a9e9: loopne 0x000000000012a9ed; ret; 
0x0000000012aa56: loopne 0x000000000012aa59; ret; 
0x0000000012aad6: loopne 0x000000000012aad9; ret; 
0x0000000012ab56: loopne 0x000000000012ab59; ret; 
0x0000000012abd6: loopne 0x000000000012abd9; ret; 
0x0000000012ac56: loopne 0x000000000012ac59; ret; 
0x0000000012ac69: loopne 0x000000000012ac6f; ret; 
0x0000000012acd6: loopne 0x000000000012acd9; ret; 
0x0000000012ad53: loopne 0x000000000012ad56; ret; 
0x0000000012add6: loopne 0x000000000012add9; ret; 
0x0000000012afa3: loopne 0x000000000012afa6; ret; 
0x0000000012c59a: loopne 0x000000000012c597; jmp qword ptr [rsi+0xf]; 
0x0000000012c622: loopne 0x000000000012c681; pop r12; pop r13; ret; 
0x0000000012d92b: loopne 0x000000000012d988; pop rbp; pop r12; ret; 
0x00000000133c0f: loopne 0x0000000000133c12; ret; 
0x0000000013688e: loopne 0x00000000001368ea; pop r12; ret; 
0x0000000013b818: loopne 0x000000000013b874; pop r12; ret; 
0x0000000013b9c6: loopne 0x000000000013ba23; pop rbp; pop r12; pop r13; ret; 
0x00000000141df8: loopne 0x0000000000141df2; add eax, 0x10; ret; 
0x000000001430cf: loopne 0x00000000001430d4; shr rax, 0x4; and eax, 0x7f; ret; 
0x000000001430d6: loopne 0x0000000000143157; ret; 
0x000000001434c0: loopne 0x000000000014351d; pop rbp; pop r12; pop r13; ret; 
0x000000001434e9: loopne 0x0000000000143546; pop rbp; pop r12; pop r13; ret; 
0x00000000149771: loopne 0x00000000001497d0; pop r12; pop r13; pop r14; ret; 
0x0000000014c593: loopne 0x000000000014c5f0; pop rbp; pop r12; pop r13; ret; 
0x0000000014c5b2: loopne 0x000000000014c60f; pop rbp; pop r12; pop r13; ret; 
0x0000000014d175: loopne 0x000000000014d1ef; cmp al, 0x28; jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x00000000150248: loopne 0x00000000001502a7; pop r12; pop r13; pop r14; ret; 
0x000000001502d9: loopne 0x0000000000150338; pop r12; pop r13; pop r14; ret; 
0x000000001509d7: loopne 0x0000000000150a34; pop rbp; pop r12; pop r13; ret; 
0x00000000151e29: loopne 0x0000000000151e88; pop r12; ret; 
0x00000000152043: loopne 0x00000000001520a2; pop r12; pop r13; ret; 
0x00000000153a29: loopne 0x0000000000153a2b; add [rax], al; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000001546a7: loopne 0x0000000000154706; pop r12; pop r13; pop r14; ret; 
0x00000000154e52: loopne 0x0000000000154e95; pop rsp; ret; 
0x00000000155715: loopne 0x0000000000155772; pop rbp; pop r12; pop r13; ret; 
0x0000000015572f: loopne 0x000000000015578c; pop rbp; pop r12; pop r13; ret; 
0x0000000015dbcb: loopne 0x000000000015dc28; pop r12; ret; 
0x0000000015e2c4: loopne 0x000000000015e30e; mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000015ee90: loopne 0x000000000015ee8e; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000015f769: loopne 0x000000000015f7ac; pop rsp; ret; 
0x00000000161d13: loopne 0x0000000000161d70; pop rbp; pop r12; pop r13; ret; 
0x0000000016332e: loopne 0x000000000016338b; pop rbp; pop r12; pop r13; ret; 
0x00000000163aaf: loopne 0x0000000000163b0e; pop r12; ret; 
0x00000000163f68: loopne 0x0000000000163fc5; pop rbp; pop r12; pop r13; ret; 
0x00000000164111: loopne 0x0000000000164170; pop r12; pop r13; pop r14; ret; 
0x00000000167776: loopne 0x00000000001677d5; pop r12; ret; 
0x0000000016849e: loopne 0x00000000001684fd; pop r12; ret; 
0x00000000168710: loopne 0x000000000016870e; jmp qword ptr [rsi+0x66]; 
0x00000000168c8b: loopne 0x0000000000168c8d; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000169c0f: loopne 0x0000000000169c6e; pop r12; ret; 
0x00000000169d16: loopne 0x0000000000169d73; pop rbp; pop r12; pop r13; ret; 
0x00000000169f23: loopne 0x0000000000169f80; pop rbp; pop r12; pop r13; ret; 
0x0000000016a0d1: loopne 0x000000000016a130; pop r12; pop r13; pop r14; ret; 
0x0000000016bd9d: loopne 0x000000000016be05; nop; mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016c4c7: loopne 0x000000000016c4c8; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000016f1e3: loopne 0x000000000016f240; pop rbp; pop r12; ret; 
0x00000000171083: loopne 0x00000000001710c6; pop rsp; pop r13; pop r14; ret; 
0x000000001710ac: loopne 0x000000000017110b; pop r12; pop r13; pop r14; ret; 
0x00000000171c85: loopne 0x0000000000171cc8; pop rsp; ret; 
0x000000001737af: loopne 0x000000000017380c; pop rbp; pop r12; pop r13; ret; 
0x000000001737ea: loopne 0x0000000000173847; pop rbp; pop r12; pop r13; ret; 
0x00000000173f2c: loopne 0x0000000000173f8b; pop r12; ret; 
0x00000000173f45: loopne 0x0000000000173fa4; pop r12; ret; 
0x00000000174071: loopne 0x00000000001740d0; pop r12; ret; 
0x00000000174554: loopne 0x00000000001745b1; pop r12; ret; 
0x00000000174c67: loopne 0x0000000000174caa; pop rsp; ret; 
0x000000001754a1: loopne 0x000000000017548b; jns short 0x00000000001754b7; cld; jmp qword ptr [rsi+0xf]; 
0x00000000175dbc: loopne 0x0000000000175dc3; lea rax, [rax+rdx+0x4]; ret; 
0x0000000017b352: loopne 0x000000000017b363; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b4a2: loopne 0x000000000017b4b3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b5f2: loopne 0x000000000017b603; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b742: loopne 0x000000000017b753; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b892: loopne 0x000000000017b8a3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017b9e2: loopne 0x000000000017b9f3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bb32: loopne 0x000000000017bb43; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bc80: loopne 0x000000000017bc91; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bdd2: loopne 0x000000000017bde3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017bf22: loopne 0x000000000017bf33; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c072: loopne 0x000000000017c083; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c1c2: loopne 0x000000000017c1d3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c312: loopne 0x000000000017c323; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c462: loopne 0x000000000017c473; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c5b2: loopne 0x000000000017c5c3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017c6be: loopne 0x000000000017c70d; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c6fc: loopne 0x000000000017c74b; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c734: loopne 0x000000000017c783; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c772: loopne 0x000000000017c7c1; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c7aa: loopne 0x000000000017c7f9; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c7d2: loopne 0x000000000017c821; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017dd32: loopne 0x000000000017dd43; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017de82: loopne 0x000000000017de93; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017dfd2: loopne 0x000000000017dfe3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e122: loopne 0x000000000017e133; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e272: loopne 0x000000000017e283; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e3c2: loopne 0x000000000017e3d3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e512: loopne 0x000000000017e523; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e660: loopne 0x000000000017e671; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e7b2: loopne 0x000000000017e7c3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017e902: loopne 0x000000000017e913; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ea52: loopne 0x000000000017ea63; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017eba2: loopne 0x000000000017ebb3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ecf2: loopne 0x000000000017ed03; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ee42: loopne 0x000000000017ee53; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017ef92: loopne 0x000000000017efa3; sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000017f09e: loopne 0x000000000017f0ed; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017f0dc: loopne 0x000000000017f12b; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017f114: loopne 0x000000000017f163; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017f152: loopne 0x000000000017f1a1; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017f18a: loopne 0x000000000017f1d9; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017f1b2: loopne 0x000000000017f201; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000181f4f: loopne 0x0000000000181f45; movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x00000000184a7f: loopne 0x0000000000184a75; movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x00000000191a7c: loopne 0x0000000000191a7f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001988ff: loopne 0x0000000000198949; movsxd ecx, ecx; lea rax, [rdi+rcx]; ret; 
0x00000000199ecf: loopne 0x0000000000199efa; enter 0xf8c5, 0x77; ret; 
0x0000000019ecb5: loopne 0x000000000019ecf9; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x000000001a0595: loopne 0x00000000001a05e1; lea eax, [rdi+rax]; vzeroupper; ret; 
0x000000001a45f7: loopne 0x00000000001a45bc; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a7dea: loopne 0x00000000001a7dfb; add esi, edx; je short 0x00000000001a7df4; vzeroall; ret; 
0x000000001acb48: loopne 0x00000000001acb59; add esi, edx; je short 0x00000000001acb52; vzeroall; ret; 
0x000000001adecd: loopne 0x00000000001adede; add esi, edx; je short 0x00000000001aded7; vzeroall; ret; 
0x000000001b233d: loopne 0x00000000001b235f; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000001b3fe6: loopne 0x00000000001b4008; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000001b431d: loopne 0x00000000001b42e2; nop; xor eax, eax; ret; 
0x000000001b4ba0: loopne 0x00000000001b4baa; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b5356: loopne 0x00000000001b5360; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b56ed: loopne 0x00000000001b56b2; nop; xor eax, eax; ret; 
0x000000001b5f6b: loopne 0x00000000001b5f6d; add [rax], al; ret; 
0x000000001b642e: loopne 0x00000000001b6430; add [rax], al; ret; 
0x000000001ba8c5: loopne 0x00000000001ba908; pop rsp; ret; 
0x000000001ba99b: loopne 0x00000000001ba9de; pop rsp; ret; 
0x000000001bb45f: loopne 0x00000000001bb4bc; pop rbp; pop r12; ret; 
0x0000000011f40e: ltr [rcx+0x5d]; pop r12; pop r13; ret; 
0x0000000011c10d: ltr [rcx]; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011f440: minps xmm1, [rax-0x73]; add eax, 0x101ff7; pop r12; pop r13; ret; 
0x00000000149fbd: mov [0x110c48148000000], al; add [rax], al; pop rbx; ret; 
0x00000000090b6a: mov [0x2f8], edi; ret; 
0x00000000090b69: mov [0x2f8], rdi; ret; 
0x00000000090b3a: mov [0x300], eax; ret; 
0x00000000090b20: mov [0x300], edi; ret; 
0x00000000090b39: mov [0x300], rax; ret; 
0x00000000090b1f: mov [0x300], rdi; ret; 
0x00000000167637: mov [0x3100000001beffff], al; fisttp dword ptr [rbp+rcx*4+0x4c], st; and al, 0x14; call qword ptr [rax]; 
0x0000000011ea4a: mov [0x48018964d8f7000f], eax; or eax, 0xffffffff; ret; 
0x0000000011ec04: mov [0x48028964d8f7000f], al; mov eax, 0xffffffff; ret; 
0x0000000007850a: mov [0x4848c68349001a23], al; shl edx, 0x2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x0000000016191a: mov [0x48c0950fc0850000], eax; add esp, 0x8; movzx eax, al; ret; 
0x0000000006b21a: mov [0x48fffffb88820fc1], eax; lea ecx, [rip+0x165f3f]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000017bcaa: mov [0x4993146349000672], al; lea edx, [rbx+rdx]; notrack jmp rdx; 
0x000000000a9c7a: mov [0x5c41c0315dfff7e9], al; pop r13; ret; 
0x0000000016a0ca: mov [0x5de0894c5bffffeb], al; pop r12; pop r13; pop r14; ret; 
0x00000000192ea9: mov [0x668a0c634f0004ff], eax; pcmpeqb mm0, mm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000091215: mov [0x73d8d48501772d1], eax; ret far; 
0x000000000f054a: mov [0x7428027b800672d5], eax; je short 0x00000000000f0591; sub [rdi], ecx; test [rax+rax-0x76b80000], dh; ret far; 
0x000000001919ba: mov [0x8348013880000002], al; fdivr st, st(7); ret; 
0x00000000179aae: mov [0x840fc9854d000012], al; cdq; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000014cf17: mov [0x841f0f], eax; mov eax, 0xffffffff; ret; 
0x0000000009d2a2: mov [0x89445d5b00000638], eax; loopne 0x000000000009d2ee; pop rsp; ret; 
0x000000000cf8ac: mov [0x8944ffffffffb841], eax; rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x00000000090c15: mov [0x972], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000091295: mov [0x972], al; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x00000000029fca: mov [0x98c48148000000], al; add [rax], al; ret; 
0x000000000665c5: mov [0xb7e9fe894dffffd1], eax; ret far; 
0x000000000516ea: mov [0xbffd894855001c], al; add [rip+0x34e85300], al; jno short 0x00000000000516f9; dec dword ptr [rax-0x77]; ret; 
0x0000000012e26a: mov [0xc031385d0148ffef], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000007ff82: mov [0xc483480000441f0f], eax; or [rax-0x1], bh; pop rbx; pop rbp; ret; 
0x0000000015e743: mov [0xc824848b48], eax; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000001158b8: mov [0xca4163d8d48000c], eax; add al, ch; mov [rbp-0xe], eax; jmp qword ptr [rsi+0xf]; 
0x0000000016762e: mov [0xd6058d4c1e6affff], al; mov [0x3100000001beffff], al; fisttp dword ptr [rbp+rcx*4+0x4c], st; and al, 0x14; call qword ptr [rax]; 
0x0000000016c019: mov [0xe80c244489e7894c], al; ret; 
0x000000001bb8a9: mov [0xffed331ee8000004], eax; cmp rbx, rbp; jae short 0x00000000001bb8cb; nop [rax+rax]; call qword ptr [rbx]; 
0x0000000013553a: mov [0xfffb6ce850fffdd3], al; jmp qword ptr [rsi+0x2e]; 
0x0000000017191d: mov [0xffff4fe924048b49], al; jmp qword ptr [rsi+0xf]; 
0x00000000091879: mov [0xfffffffebad23145], eax; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000142c18: mov [r10-0x1], r8b; mov [rax], r10; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x000000000b1168: mov [r10], rdi; mov rax, r12; pop r12; ret; 
0x0000000016446d: mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x000000000ab3b1: mov [r12], r14; pop r12; pop r13; pop r14; ret; 
0x00000000036afe: mov [r13+r15*8], rbx; mov rax, [rax+r15*8]; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x000000001bb2a4: mov [r13+rbx*8], rdx; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x00000000061b57: mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x00000000036bf9: mov [r13-0x80], rdx; mov rdx, [rax+r12*8]; test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x00000000142fb5: mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000082b40: mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x00000000160fa3: mov [r8+0x8], rcx; ret; 
0x0000000009679a: mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x00000000142e40: mov [r8], ecx; mov [r9], rdx; ret; 
0x00000000142f08: mov [r8], r11d; pop rbx; mov [r9], rdx; ret; 
0x0000000005664a: mov [r8], rax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000001290ec: mov [r8], rax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x0000000012906c: mov [r8], rax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x0000000014235e: mov [r8], rdi; xor eax, eax; ret; 
0x00000000160fa0: mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x000000000923e7: mov [r8], rdx; ret; 
0x000000000a8097: mov [r8], rsi; ret; 
0x0000000005a169: mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x000000001a3f59: mov [r9-0x2], cx; ret; 
0x000000001a3f5a: mov [r9-0x2], ecx; ret; 
0x000000001a3f45: mov [r9-0x4], ecx; ret; 
0x000000001a3f34: mov [r9-0x8], rcx; ret; 
0x00000000142efc: mov [r9], r10; ret; 
0x00000000142e43: mov [r9], rdx; ret; 
0x000000000835fb: mov [rax+0x10], ecx; mov [rax+0x40], rdx; movups [rax], xmm0; ret; 
0x000000000846b2: mov [rax+0x10], edi; movups [rax], xmm0; mov [rax], rdx; xor eax, eax; ret; 
0x000000000835fa: mov [rax+0x10], rcx; mov [rax+0x40], rdx; movups [rax], xmm0; ret; 
0x000000000846b1: mov [rax+0x10], rdi; movups [rax], xmm0; mov [rax], rdx; xor eax, eax; ret; 
0x00000000083d8c: mov [rax+0x18], edx; xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x00000000083d8b: mov [rax+0x18], rdx; xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x00000000075a3f: mov [rax+0x1], cl; fimul st, word ptr [rax-0x77]; sar dword ptr [rdx+0x1], cl; jmp rsi; 
0x00000000142fb6: mov [rax+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x000000000a1818: mov [rax+0x20], edx; add rsp, 0x8; ret; 
0x00000000089250: mov [rax+0x20], edx; pop rbx; ret; 
0x000000000a1817: mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000008924f: mov [rax+0x20], rdx; pop rbx; ret; 
0x00000000082b41: mov [rax+0x28], edx; mov [rax], dil; mov eax, r9d; ret; 
0x000000000b157d: mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13dd: mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a5: mov [rax+0x2], dl; ret; 
0x000000000835ff: mov [rax+0x40], edx; movups [rax], xmm0; ret; 
0x000000000835c4: mov [rax+0x40], edx; movups [rax], xmm1; ret; 
0x000000000835fe: mov [rax+0x40], rdx; movups [rax], xmm0; ret; 
0x000000000835c3: mov [rax+0x40], rdx; movups [rax], xmm1; ret; 
0x000000000b15ab: mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15c3: mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15db: mov [rax+0x4], cx; movzx ecx, byte ptr [rsp+0xe]; mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13fb: mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14c3: mov [rax+0x4], dl; ret; 
0x000000000b1413: mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000000b142b: mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rax+0x6], dl; add rax, rcx; ret; 
0x000000000b14eb: mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000b14db: mov [rax+0x4], dx; ret; 
0x0000000003f348: mov [rax+0x4], ebx; pop rbx; ret; 
0x000000000b15c4: mov [rax+0x4], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15dc: mov [rax+0x4], ecx; movzx ecx, byte ptr [rsp+0xe]; mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1414: mov [rax+0x4], edx; add rax, rcx; ret; 
0x000000000b142c: mov [rax+0x4], edx; movzx edx, byte ptr [rsp+0x16]; mov [rax+0x6], dl; add rax, rcx; ret; 
0x000000000b14ec: mov [rax+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000b14dc: mov [rax+0x4], edx; ret; 
0x0000000013b512: mov [rax+0x5], dl; pop rbx; ret; 
0x00000000162d33: mov [rax+0x68], edx; movzx edx, word ptr [rdi+0x88]; mov [rax+0x6c], dx; mov eax, 0x1; ret; 
0x000000000b15e4: mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1434: mov [rax+0x6], dl; add rax, rcx; ret; 
0x000000000b14f4: mov [rax+0x6], dl; ret; 
0x00000000162d3d: mov [rax+0x6c], dx; mov eax, 0x1; ret; 
0x00000000162d3e: mov [rax+0x6c], edx; mov eax, 0x1; ret; 
0x000000000910a5: mov [rax+0x6e], edi; ret; 
0x0000000006209f: mov [rax+0x8], ecx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000160fa4: mov [rax+0x8], ecx; ret; 
0x0000000011d1e7: mov [rax+0x8], edi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000089248: mov [rax+0x8], edx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x000000000daa5c: mov [rax+0x8], esi; add rsp, 0x10; pop rbp; ret; 
0x0000000006209e: mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x0000000011d1e6: mov [rax+0x8], rdi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000089247: mov [rax+0x8], rdx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x000000000daa5b: mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000009679b: mov [rax+rax+0x8], esi; xor eax, eax; mov [rdi], ecx; ret; 
0x0000000009e8b6: mov [rax+rax], al; add [rbx-0x76b3ffab], cl; ret; 
0x00000000030822: mov [rax+rbx*4], fs; add [rax], al; add al, ch; ret; 
0x0000000002f816: mov [rax+rcx*4], fs; add [rax], al; add [rcx-0x77], al; ret; 
0x0000000005431b: mov [rax+rdx*8], ecx; xor eax, eax; ret; 
0x0000000005431a: mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000000c5174: mov [rax+rdx-0x1], bh; ret; 
0x000000001a1234: mov [rax+rdx-0x1], bh; vzeroupper; ret; 
0x000000000c5173: mov [rax+rdx-0x1], dil; ret; 
0x000000001a1233: mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000000c516b: mov [rax+rdx-0x4], edi; ret; 
0x000000001a1222: mov [rax+rdx-0x4], edi; vzeroupper; ret; 
0x000000000c5164: mov [rax+rdx-0x8], edi; ret; 
0x000000001a1214: mov [rax+rdx-0x8], edi; vzeroupper; ret; 
0x000000000c5163: mov [rax+rdx-0x8], rdi; ret; 
0x000000001a1213: mov [rax+rdx-0x8], rdi; vzeroupper; ret; 
0x0000000016cce7: mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x0000000002c4d3: mov [rax-0x7d], cl; ret; 
0x00000000062a39: mov [rax], ah; pop rbx; pop rbp; pop r12; ret; 
0x00000000162d39: mov [rax], al; add [rax], al; mov [rax+0x6c], dx; mov eax, 0x1; ret; 
0x000000000d9802: mov [rax], al; add [rax], al; mov [rsp+0x38], rdx; call r12; 
0x000000000425e2: mov [rax], al; add [rax], al; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000001666a2: mov [rax], al; add [rax], al; mov rdi, r15; call qword ptr [rax+0x28]; 
0x00000000114360: mov [rax], al; add [rax], al; pop rbp; pop r12; ret; 
0x00000000121e1f: mov [rax], al; add [rax], al; pop rbx; pop rbp; ret; 
0x000000001217bc: mov [rax], al; add [rax], al; syscall; 
0x00000000053b78: mov [rax], al; add [rax], al; xor eax, eax; ret; 
0x00000000082b45: mov [rax], bh; mov eax, r9d; ret; 
0x000000000bf432: mov [rax], cl; mov rax, rdi; ret; 
0x000000000c0500: mov [rax], cs; add [rax], al; ret; 
0x000000000b1575: mov [rax], cx; movzx ecx, byte ptr [rsp-0x6]; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b13a1: mov [rax], dh; add rax, rcx; ret; 
0x000000000c5157: mov [rax], dh; ret; 
0x000000001a11fc: mov [rax], dh; vzeroupper; ret; 
0x000000000c5170: mov [rax], di; mov [rax+rdx-0x1], dil; ret; 
0x000000001a1230: mov [rax], di; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x00000000082b44: mov [rax], dil; mov eax, r9d; ret; 
0x000000000f419f: mov [rax], dl; mov eax, 0x1; ret; 
0x000000000b13c0: mov [rax], dx; add rax, rcx; ret; 
0x000000000b13d5: mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b149d: mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000d7b23: mov [rax], eax; add [rax], al; ret; 
0x000000001142b5: mov [rax], eax; add [rax], al; syscall; 
0x000000000b13e9: mov [rax], eax; add rax, rcx; ret; 
0x0000000005664b: mov [rax], eax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000001290ed: mov [rax], eax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x0000000012906d: mov [rax], eax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x00000000142f09: mov [rax], ebx; pop rbx; mov [r9], rdx; ret; 
0x000000000b154e: mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000142e41: mov [rax], ecx; mov [r9], rdx; ret; 
0x00000000162d8b: mov [rax], ecx; mov eax, 0x1; ret; 
0x00000000081e3e: mov [rax], ecx; mov eax, [rdx]; ret; 
0x000000000b1576: mov [rax], ecx; movzx ecx, byte ptr [rsp-0x6]; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15a4: mov [rax], ecx; movzx ecx, byte ptr [rsp-0xc]; mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15bc: mov [rax], ecx; movzx ecx, word ptr [rsp-0x14]; mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b14b0: mov [rax], ecx; ret; 
0x000000000c5171: mov [rax], edi; mov [rax+rdx-0x1], dil; ret; 
0x000000001a1231: mov [rax], edi; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000000c5169: mov [rax], edi; mov [rax+rdx-0x4], edi; ret; 
0x000000001a1220: mov [rax], edi; mov [rax+rdx-0x4], edi; vzeroupper; ret; 
0x000000000c5161: mov [rax], edi; mov [rax+rdx-0x8], rdi; ret; 
0x000000001a1211: mov [rax], edi; mov [rax+rdx-0x8], rdi; vzeroupper; ret; 
0x0000000011d1c5: mov [rax], edi; mov eax, 0xffffffff; ret; 
0x0000000010588f: mov [rax], edi; mov rax, r8; ret; 
0x00000000090395: mov [rax], edi; pop rbx; ret; 
0x0000000014235f: mov [rax], edi; xor eax, eax; ret; 
0x000000000b13b6: mov [rax], edx; add rax, rcx; ret; 
0x00000000125ae7: mov [rax], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000142c1d: mov [rax], edx; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x00000000160fa1: mov [rax], edx; mov [r8+0x8], rcx; ret; 
0x000000000daa59: mov [rax], edx; mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000466ed: mov [rax], edx; mov [rsi], edx; mov eax, r8d; ret; 
0x00000000162d52: mov [rax], edx; mov eax, 0x1; ret; 
0x000000000b13d6: mov [rax], edx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b149e: mov [rax], edx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000b13f4: mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14bc: mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000b140c: mov [rax], edx; movzx edx, word ptr [rsp+0xc]; mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000000b14d4: mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x00000000090389: mov [rax], edx; pop rbx; ret; 
0x00000000039bf8: mov [rax], edx; ret; 
0x000000000dd727: mov [rax], edx; xor eax, eax; pop rbx; ret; 
0x00000000084678: mov [rax], edx; xor eax, eax; ret; 
0x0000000011a8f5: mov [rax], es; add [rax], al; syscall; 
0x000000000b1561: mov [rax], esi; lea rax, [rax+rdx-0x1]; ret; 
0x000000001290b4: mov [rax], esi; mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x000000000a8098: mov [rax], esi; ret; 
0x0000000006a810: mov [rax], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000f2d10: mov [rax], fs; add [rax], al; add [rcx-0x77], cl; ret; 
0x00000000142c1c: mov [rax], r10; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x00000000062a38: mov [rax], r12b; pop rbx; pop rbp; pop r12; ret; 
0x0000000006a80f: mov [rax], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000b13e8: mov [rax], r8d; add rax, rcx; ret; 
0x000000000b154d: mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000162d8a: mov [rax], rcx; mov eax, 0x1; ret; 
0x00000000081e3d: mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000000c5160: mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000001a1210: mov [rax], rdi; mov [rax+rdx-0x8], rdi; vzeroupper; ret; 
0x0000000010588e: mov [rax], rdi; mov rax, r8; ret; 
0x00000000090394: mov [rax], rdi; pop rbx; ret; 
0x000000000b13b5: mov [rax], rdx; add rax, rcx; ret; 
0x00000000125ae6: mov [rax], rdx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000daa58: mov [rax], rdx; mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000090388: mov [rax], rdx; pop rbx; ret; 
0x00000000039bf7: mov [rax], rdx; ret; 
0x00000000084677: mov [rax], rdx; xor eax, eax; ret; 
0x000000001290b3: mov [rax], rsi; mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x000000000b1560: mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1490: mov [rax], si; ret; 
0x000000000b13a0: mov [rax], sil; add rax, rcx; ret; 
0x000000000c5156: mov [rax], sil; ret; 
0x000000001a11fb: mov [rax], sil; vzeroupper; ret; 
0x000000001bb2a5: mov [rbp+rbx*8], edx; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x00000000036aff: mov [rbp+rdi*8], ebx; mov rax, [rax+r15*8]; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x00000000061b58: mov [rbp+rdi+0x5], dl; mov rdi, r13; call rax; 
0x00000000079dfc: mov [rbp-0x16000010], edi; xchg esp, eax; in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000199a76: mov [rbp-0x7d000000], ss; rol byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x00000000041d96: mov [rbp-0x7f000000], es; sti; push rax; ret; 
0x000000001330bd: mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x00000000133259: mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x00000000036bfa: mov [rbp-0x80], edx; mov rdx, [rax+r12*8]; test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x00000000132f27: mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm3; call rax; 
0x0000000013319f: mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm4; call rax; 
0x00000000133657: mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm6; call rax; 
0x00000000133729: mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x0000000013313d: mov [rbp-0x80], edx; mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x00000000133a06: mov [rbp-0x80], edx; mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x000000001289a8: mov [rbp-0x830], eax; mov eax, r10d; syscall; 
0x000000001289a7: mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x00000000073c43: mov [rbp-0x8a0], eax; mov rdx, r8; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000074bba: mov [rbp-0x8a0], esi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000073c42: mov [rbp-0x8a0], r8; mov rdx, r8; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000074bb9: mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074bb3: mov [rbp-0x8a8], eax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074bb2: mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007a68e: mov [rbp-0x8b0], esi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007a68d: mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007a687: mov [rbp-0x8c8], eax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007a686: mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000079621: mov [rbp-0x8f0], al; call rax; 
0x00000000079620: mov [rbp-0x8f0], r8b; call rax; 
0x00000000073efb: mov [rbp-0x8f8], al; call rax; 
0x00000000073efa: mov [rbp-0x8f8], r8b; call rax; 
0x00000000073ef4: mov [rbp-0x900], cl; mov [rbp-0x8f8], r8b; call rax; 
0x00000000073ef3: mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x0000000005bff8: mov [rbp-0xe8], eax; call rax; 
0x0000000005bff7: mov [rbp-0xe8], r8; call rax; 
0x000000001158c3: mov [rbp-0xe], eax; jmp qword ptr [rsi+0xf]; 
0x000000000e8b35: mov [rbp], ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000140c82: mov [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000140c81: mov [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000e8b34: mov [rbp], rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000147cd4: mov [rbx+0x10], eax; mov eax, 0x14; add edx, 0x1; syscall; 
0x00000000089261: mov [rbx+0x10], eax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x000000000906bd: mov [rbx+0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000924a7: mov [rbx+0x10], eax; xor eax, eax; pop rbx; ret; 
0x0000000012e343: mov [rbx+0x10], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000114283: mov [rbx+0x10], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000147cd3: mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x00000000089260: mov [rbx+0x10], rax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x000000000906bc: mov [rbx+0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000924a6: mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000012e342: mov [rbx+0x10], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000015e2c6: mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000090525: mov [rbx+0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000907b9: mov [rbx+0x18], eax; pop rbx; ret; 
0x0000000012e393: mov [rbx+0x18], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000015e2c5: mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000090524: mov [rbx+0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000907b8: mov [rbx+0x18], rax; pop rbx; ret; 
0x0000000012e392: mov [rbx+0x18], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000908ad: mov [rbx+0x20], eax; pop rbx; ret; 
0x000000001608e8: mov [rbx+0x20], esi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000908ac: mov [rbx+0x20], rax; pop rbx; ret; 
0x000000001608e7: mov [rbx+0x20], rsi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000089269: mov [rbx+0x28], eax; pop rbx; ret; 
0x00000000089268: mov [rbx+0x28], rax; pop rbx; ret; 
0x000000000421bf: mov [rbx+0x40], esi; pop rbx; ret; 
0x0000000004219c: mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000165c59: mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x00000000112d4e: mov [rbx+0x4], ecx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000112b63: mov [rbx+0x4], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000112c95: mov [rbx+0x4], edx; pop rbx; pop rbp; pop r14; ret; 
0x0000000008459e: mov [rbx+0x60], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008f0e8: mov [rbx+0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000008459d: mov [rbx+0x60], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008f0e7: mov [rbx+0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000083cee: mov [rbx+0x74], eax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000083655: mov [rbx+0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000083c5e: mov [rbx+0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000012e2f3: mov [rbx+0x8], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012e2f2: mov [rbx+0x8], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000094a1a: mov [rbx+0x8f0], eax; lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x00000000094a19: mov [rbx+0x8f0], rax; lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x0000000008a5df: mov [rbx+0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008a5de: mov [rbx+0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000162ede: mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x000000001674e4: mov [rbx+0xc], eax; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000008a69f: mov [rbx+0xd8], ecx; lea rcx, [rip+0x18b954]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000008a69e: mov [rbx+0xd8], rcx; lea rcx, [rip+0x18b954]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000039c7e: mov [rbx-0x2d7aeeec], cl; jne short 0x0000000000039c90; mov eax, r8d; ret; 
0x0000000012a57a: mov [rbx-0x2d7aeeec], cl; jne short 0x000000000012a590; mov eax, r8d; ret; 
0x00000000175113: mov [rbx], al; add [rax], al; call qword ptr [rax+0x48]; 
0x00000000175203: mov [rbx], al; add [rax], al; call qword ptr [rax+0x50]; 
0x0000000008fe53: mov [rbx], al; add [rax], al; jmp qword ptr [rax+0x28]; 
0x0000000008fea3: mov [rbx], al; add [rax], al; jmp qword ptr [rax+0x30]; 
0x000000000904a3: mov [rbx], al; add [rax], al; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x0000000008feeb: mov [rbx], al; add [rax], al; mov rax, [rax+0x8]; jmp rax; 
0x0000000008e5e6: mov [rbx], eax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x0000000008dcdd: mov [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000175545: mov [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000007f9a5: mov [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000168a72: mov [rbx], eax; pop rbx; ret; 
0x0000000011fa3c: mov [rbx], eax; pop rbx; setne al; movzx eax, al; ret; 
0x0000000015e1dc: mov [rbx], eax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000a54d4: mov [rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e7e34: mov [rbx], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000141283: mov [rbx], ebp; mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x00000000083d91: mov [rbx], ecx; pop rbx; ret; 
0x000000000a75a7: mov [rbx], edi; call rcx; 
0x00000000045d97: mov [rbx], edx; mov rdi, [rbp+0x8]; call rax; 
0x00000000175ed8: mov [rbx], edx; pop rbx; ret; 
0x000000000a7681: mov [rbx], esi; call rax; 
0x00000000151e8c: mov [rbx], esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000151e8b: mov [rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000141282: mov [rbx], r13d; mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x00000000175544: mov [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000168a71: mov [rbx], rax; pop rbx; ret; 
0x0000000011fa3b: mov [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x0000000015e1db: mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000a75a6: mov [rbx], rdi; call rcx; 
0x00000000045d96: mov [rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x000000000a7680: mov [rbx], rsi; call rax; 
0x00000000046683: mov [rcx+0x10], eax; mov [rcx+0x28], rax; xor eax, eax; ret; 
0x00000000046682: mov [rcx+0x10], r8; mov [rcx+0x28], rax; xor eax, eax; ret; 
0x00000000042483: mov [rcx+0x1d], ebp; add [rcx+rcx*4+0x2], ah; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000046687: mov [rcx+0x28], eax; xor eax, eax; ret; 
0x00000000046686: mov [rcx+0x28], rax; xor eax, eax; ret; 
0x0000000018d6a3: mov [rcx+0x2], dl; ret; 
0x0000000018d6e2: mov [rcx+0x3], edx; ret; 
0x0000000005a16a: mov [rcx+0x3a8], edi; mov rsp, rdx; ret; 
0x0000000014567d: mov [rcx+0x48fffffe], al; mov eax, [rsp]; mov rdi, r15; call rax; 
0x0000000018d6c2: mov [rcx+0x4], dl; ret; 
0x0000000018d6d2: mov [rcx+0x4], dx; ret; 
0x0000000018d6d3: mov [rcx+0x4], edx; ret; 
0x0000000018d744: mov [rcx+0x5], edx; ret; 
0x0000000018d743: mov [rcx+0x5], rdx; ret; 
0x0000000018d754: mov [rcx+0x6], edx; ret; 
0x0000000018d753: mov [rcx+0x6], rdx; ret; 
0x0000000018d723: mov [rcx+0x7], edx; ret; 
0x0000000018d763: mov [rcx+0x7], rdx; ret; 
0x0000000018d703: mov [rcx+0x8], dl; ret; 
0x0000000018d713: mov [rcx+0x8], dx; ret; 
0x000000000913da: mov [rcx+0x8], edx; mov [rdx], rcx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000018d714: mov [rcx+0x8], edx; ret; 
0x000000000913d9: mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000018d773: mov [rcx+0x8], rdx; ret; 
0x00000000091050: mov [rcx+rsi-0x3a], eax; xor r8d, r8d; syscall; 
0x0000000011c7b3: mov [rcx-0x1], dh; cmp byte ptr [rdx], 0x0; lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x0000000011c7b2: mov [rcx-0x1], sil; cmp byte ptr [rdx], 0x0; lea rsi, [rdx+0x1]; jne short 0x000000000011c78d; ret; 
0x000000001a3f5b: mov [rcx-0x2], ecx; ret; 
0x000000001a3f46: mov [rcx-0x4], ecx; ret; 
0x000000001345e4: mov [rcx-0x72b7fffc], dl; adc eax, 0x4e821; cmovne rax, rdx; ret; 
0x000000000ac4c9: mov [rcx-0x7d], cl; ret; 
0x000000001a3f35: mov [rcx-0x8], ecx; ret; 
0x0000000018d680: mov [rcx], dl; ret; 
0x0000000018d6a0: mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d690: mov [rcx], dx; ret; 
0x000000000949a4: mov [rcx], eax; add [rax], al; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x00000000165b02: mov [rcx], eax; mov eax, 0x1; ret; 
0x0000000004276e: mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000082887: mov [rcx], eax; ret; 
0x00000000160906: mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x000000000871aa: mov [rcx], eax; xor eax, eax; pop rbx; ret; 
0x000000001433cc: mov [rcx], ecx; add al, ch; jl short 0x000000000014343c; out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000018d6a1: mov [rcx], edx; mov [rcx+0x2], dl; ret; 
0x0000000018d6e0: mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6c0: mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x0000000018d6d0: mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d741: mov [rcx], edx; mov [rcx+0x5], rdx; ret; 
0x0000000018d751: mov [rcx], edx; mov [rcx+0x6], rdx; ret; 
0x0000000018d721: mov [rcx], edx; mov [rcx+0x7], edx; ret; 
0x0000000018d761: mov [rcx], edx; mov [rcx+0x7], rdx; ret; 
0x0000000018d701: mov [rcx], edx; mov [rcx+0x8], dl; ret; 
0x0000000018d711: mov [rcx], edx; mov [rcx+0x8], dx; ret; 
0x0000000018d731: mov [rcx], edx; mov [rcx+0x8], edx; ret; 
0x0000000018d771: mov [rcx], edx; mov [rcx+0x8], rdx; ret; 
0x000000001604aa: mov [rcx], edx; mov edx, eax; call qword ptr [rbp+0x10]; 
0x0000000015fe80: mov [rcx], edx; mov edx, eax; call qword ptr [rbx+0x10]; 
0x00000000142e44: mov [rcx], edx; ret; 
0x00000000039b12: mov [rcx], esi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000165b37: mov [rcx], rax; mov eax, 0x1; ret; 
0x000000000871a9: mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000018d740: mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d750: mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x0000000018d720: mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x0000000018d760: mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000018d700: mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x0000000018d710: mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x0000000018d730: mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d770: mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000018d6f0: mov [rcx], rdx; ret; 
0x00000000039b11: mov [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000113a36: mov [rdi+0x108], eax; xor eax, eax; ret; 
0x000000000c3eda: mov [rdi+0x10], ch; ret; 
0x000000000c228b: mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a6b: mov [rdi+0x10], cl; ret; 
0x000000000c3eeb: mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000c143c: mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22ac: mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd8c: mov [rdi+0x10], cx; ret; 
0x000000000c06fc: mov [rdi+0x10], cx; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c3f0c: mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c1428: mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000bfd78: mov [rdi+0x10], dh; ret; 
0x000000000c06d8: mov [rdi+0x10], dh; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x00000000129090: mov [rdi+0x10], eax; jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x0000000009125e: mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x000000000c143d: mov [rdi+0x10], ecx; lea rax, [rdi+0x11]; ret; 
0x000000000c22ad: mov [rdi+0x10], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c147b: mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22eb: mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000c14fd: mov [rdi+0x10], ecx; lea rax, [rdi+0x17]; ret; 
0x000000000c236d: mov [rdi+0x10], ecx; lea rax, [rdi+0x18]; ret; 
0x000000000c149b: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000bfdcb: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000c230e: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000c0abe: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000c3f6e: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000c151d: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000bfe4d: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; ret; 
0x00000000054f7f: mov [rdi+0x10], ecx; ret; 
0x000000000c06fd: mov [rdi+0x10], ecx; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c073b: mov [rdi+0x10], ecx; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c07bd: mov [rdi+0x10], ecx; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c3f0d: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c3f4b: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000c3fcd: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c1560: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23d0: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000bfe90: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; ret; 
0x000000000c4030: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000c2390: mov [rdi+0x10], edx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c0b40: mov [rdi+0x10], edx; mov [rdi+0x18], cl; ret; 
0x000000000c3ff0: mov [rdi+0x10], edx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000c1541: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c23b1: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000bfe71: mov [rdi+0x10], edx; mov [rdi+0x18], cx; ret; 
0x000000000c4011: mov [rdi+0x10], edx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000c1580: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23f0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000bfeb0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; ret; 
0x000000000c4050: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000ea3e0: mov [rdi+0x10], edx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x00000000092675: mov [rdi+0x10], esi; xor eax, eax; ret; 
0x00000000054f7e: mov [rdi+0x10], r9; ret; 
0x0000000012908f: mov [rdi+0x10], rax; jb short 0x00000000001290a8; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000000c14fc: mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c236c: mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000c151c: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000bfe4c: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe2c: mov [rdi+0x10], rcx; ret; 
0x000000000c07bc: mov [rdi+0x10], rcx; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c3fcc: mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c155f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23cf: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000bfe8f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c402f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000c238f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c0b3f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c3fef: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000c1540: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c23b0: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000bfe70: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c4010: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000c157f: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23ef: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000bfeaf: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c404f: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000ea3df: mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x00000000092674: mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000113a1e: mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000c3ef0: mov [rdi+0x11], ch; ret; 
0x000000000c3f12: mov [rdi+0x12], ch; ret; 
0x000000000c3f30: mov [rdi+0x13], ch; ret; 
0x000000000c3f50: mov [rdi+0x14], ch; ret; 
0x000000000c149e: mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000bfdce: mov [rdi+0x14], dh; ret; 
0x000000000c075e: mov [rdi+0x14], dh; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c2311: mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000c0ac1: mov [rdi+0x14], dl; ret; 
0x000000000c3f71: mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000c3f76: mov [rdi+0x15], ch; ret; 
0x0000000011a3a2: mov [rdi+0x16], ax; punpcklqdq xmm0, xmm1; movups [rdi], xmm0; ret; 
0x000000000c3f92: mov [rdi+0x16], ch; ret; 
0x0000000011a3a3: mov [rdi+0x16], eax; punpcklqdq xmm0, xmm1; movups [rdi], xmm0; ret; 
0x000000000c3fb2: mov [rdi+0x17], ch; ret; 
0x000000000c1563: mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23d3: mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000bfe93: mov [rdi+0x17], ecx; ret; 
0x000000000c0843: mov [rdi+0x17], ecx; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c0d90; ret; 
0x000000000c4033: mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000c3fd2: mov [rdi+0x18], ch; ret; 
0x000000000c2393: mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c0b43: mov [rdi+0x18], cl; ret; 
0x000000000c3ff3: mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000c1544: mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c23b4: mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000bfe74: mov [rdi+0x18], cx; ret; 
0x000000000c0814: mov [rdi+0x18], cx; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c4014: mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000c1520: mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000bfe50: mov [rdi+0x18], dh; ret; 
0x000000000c07e0: mov [rdi+0x18], dh; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x0000000008979f: mov [rdi+0x18], eax; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cceb: mov [rdi+0x18], eax; mov eax, r8d; ret; 
0x00000000090b65: mov [rdi+0x18], eax; mov fs:[0x2f8], rdi; ret; 
0x0000000009e5e9: mov [rdi+0x18], eax; ret; 
0x0000000009af86: mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000c1545: mov [rdi+0x18], ecx; lea rax, [rdi+0x19]; ret; 
0x000000000c23b5: mov [rdi+0x18], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c1583: mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23f3: mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000bfe75: mov [rdi+0x18], ecx; ret; 
0x000000000c0815: mov [rdi+0x18], ecx; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c0873: mov [rdi+0x18], ecx; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c4015: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000c4053: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x0000000008d794: mov [rdi+0x18], edx; mov [rdi+0x48], rax; movups [rdi+0x8], xmm0; ret; 
0x0000000016cdad: mov [rdi+0x18], edx; mov eax, r8d; ret; 
0x000000000ea3e8: mov [rdi+0x18], edx; ret; 
0x0000000016d542: mov [rdi+0x18], esi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000016cc75: mov [rdi+0x18], esi; mov eax, r8d; ret; 
0x0000000016ccad: mov [rdi+0x18], esi; mov rax, r8; ret; 
0x00000000092886: mov [rdi+0x18], esi; ret; 
0x0000000008979e: mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016ccea: mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000090b64: mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x0000000009e5e8: mov [rdi+0x18], rax; ret; 
0x0000000008d793: mov [rdi+0x18], rdx; mov [rdi+0x48], rax; movups [rdi+0x8], xmm0; ret; 
0x0000000016cdac: mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x000000000ea3e7: mov [rdi+0x18], rdx; ret; 
0x0000000016d541: mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000016cc74: mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x0000000016ccac: mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x00000000092885: mov [rdi+0x18], rsi; ret; 
0x000000000c3ff8: mov [rdi+0x19], ch; ret; 
0x000000000c3d56: mov [rdi+0x1], ch; ret; 
0x00000000142b55: mov [rdi+0x1], dh; ret; 
0x00000000182d27: mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x00000000182d28: mov [rdi+0x1], edx; mov [rdi], cx; ret; 
0x00000000182c45: mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000182a88: mov [rdi+0x1], edx; mov [rdi], rcx; ret; 
0x00000000182a87: mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000142b54: mov [rdi+0x1], sil; ret; 
0x000000000c401a: mov [rdi+0x1a], ch; ret; 
0x000000000c4038: mov [rdi+0x1b], ch; ret; 
0x000000000c4058: mov [rdi+0x1c], ch; ret; 
0x0000000009a6b8: mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x000000000c4074: mov [rdi+0x1d], ch; ret; 
0x000000000c4094: mov [rdi+0x1e], ch; ret; 
0x000000001576d4: mov [rdi+0x1f8], eax; ret; 
0x000000001576d3: mov [rdi+0x1f8], rax; ret; 
0x000000000c40b4: mov [rdi+0x1f], ch; ret; 
0x000000000c40d4: mov [rdi+0x20], ch; ret; 
0x000000000c0c45: mov [rdi+0x20], cl; ret; 
0x000000000c40f5: mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x00000000092882: mov [rdi+0x20], edx; mov [rdi+0x18], rsi; ret; 
0x000000000928b9: mov [rdi+0x20], esi; xor eax, eax; ret; 
0x00000000092881: mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x000000000928b8: mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x000000000c40fa: mov [rdi+0x21], ch; ret; 
0x00000000093293: mov [rdi+0x24], edx; nop; xor eax, eax; ret; 
0x0000000016cca6: mov [rdi+0x28], eax; add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x0000000016cc71: mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x0000000016ce6a: mov [rdi+0x28], edx; movups [rdi+0x18], xmm0; ret; 
0x000000000c3d68: mov [rdi+0x2], ch; ret; 
0x000000000c12d6: mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000bfc96: mov [rdi+0x2], dh; ret; 
0x000000000c0516: mov [rdi+0x2], dh; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c2119: mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000c0989: mov [rdi+0x2], dl; ret; 
0x000000000c3d79: mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x00000000182bd5: mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x00000000182a18: mov [rdi+0x2], edx; mov [rdi], rcx; ret; 
0x00000000182a17: mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000001069d0: mov [rdi+0x38], al; mov [rsi], edx; movups [rsi+0x8], xmm0; ret; 
0x0000000011989b: mov [rdi+0x38], edx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000011989a: mov [rdi+0x38], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x000000000c3d7e: mov [rdi+0x3], ch; ret; 
0x00000000142ffc: mov [rdi+0x3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000c1327: mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000c2177: mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x00000000182b65: mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000001829a8: mov [rdi+0x3], edx; mov [rdi], rcx; ret; 
0x000000000bfcd7: mov [rdi+0x3], edx; ret; 
0x000000000c0597: mov [rdi+0x3], edx; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c3dd7: mov [rdi+0x3], edx; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x000000001829a7: mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000c414a: mov [rdi+0x40], ch; ret; 
0x000000001b0a1d: mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x000000001a05b5: mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret; 
0x000000001b2d4d: mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000019ecd5: mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x000000001b3b8d: mov [rdi+0x40], cl; ret; 
0x0000000019f885: mov [rdi+0x40], cl; vzeroupper; ret; 
0x00000000043812: mov [rdi+0x48000008], ch; mov edi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000165b48: mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x00000000090b0e: mov [rdi+0x48], eax; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000008d798: mov [rdi+0x48], eax; movups [rdi+0x8], xmm0; ret; 
0x0000000008d75d: mov [rdi+0x48], eax; movups [rdi+0x8], xmm1; ret; 
0x000000001198a3: mov [rdi+0x48], eax; ret; 
0x00000000090b0d: mov [rdi+0x48], rax; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000008d797: mov [rdi+0x48], rax; movups [rdi+0x8], xmm0; ret; 
0x0000000008d75c: mov [rdi+0x48], rax; movups [rdi+0x8], xmm1; ret; 
0x000000001198a2: mov [rdi+0x48], rax; ret; 
0x000000000c3d96: mov [rdi+0x4], ch; ret; 
0x000000000c12f2: mov [rdi+0x4], dh; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000bfcb2: mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000c2147: mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000c09a7: mov [rdi+0x4], dl; ret; 
0x000000000c3da7: mov [rdi+0x4], dl; xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000c1308: mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000c2158: mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000bfcc8: mov [rdi+0x4], dx; ret; 
0x000000000c0578: mov [rdi+0x4], dx; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c3db8: mov [rdi+0x4], dx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x000000000c1309: mov [rdi+0x4], edx; lea rax, [rdi+0x5]; ret; 
0x000000000c2159: mov [rdi+0x4], edx; lea rax, [rdi+0x6]; ret; 
0x00000000182938: mov [rdi+0x4], edx; mov [rdi], rcx; ret; 
0x000000000bfcc9: mov [rdi+0x4], edx; ret; 
0x000000000c0579: mov [rdi+0x4], edx; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c3db9: mov [rdi+0x4], edx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x0000000009b579: mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000182937: mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x00000000090b1b: mov [rdi+0x50], eax; mov fs:[0x300], rdi; ret; 
0x00000000090b1a: mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x00000000165b95: mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x00000000090bdb: mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x00000000165b75: mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x000000000c3dac: mov [rdi+0x5], ch; ret; 
0x000000000c13bb: mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000c221b: mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x000000001828c8: mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000bfd3b: mov [rdi+0x5], edx; ret; 
0x000000000c065b: mov [rdi+0x5], edx; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c3e7b: mov [rdi+0x5], edx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000c13ba: mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000c221a: mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000001828c7: mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000bfd3a: mov [rdi+0x5], rdx; ret; 
0x000000000c065a: mov [rdi+0x5], rdx; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c3e7a: mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000c3dbe: mov [rdi+0x6], ch; ret; 
0x000000000c13db: mov [rdi+0x6], edx; lea rax, [rdi+0xd]; ret; 
0x000000000c223b: mov [rdi+0x6], edx; lea rax, [rdi+0xe]; ret; 
0x00000000182858: mov [rdi+0x6], edx; mov [rdi], rcx; ret; 
0x000000000bfd4b: mov [rdi+0x6], edx; ret; 
0x000000000c067b: mov [rdi+0x6], edx; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c3e9b: mov [rdi+0x6], edx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000c13da: mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000c223a: mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x00000000182857: mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000bfd4a: mov [rdi+0x6], rdx; ret; 
0x000000000c067a: mov [rdi+0x6], rdx; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c3e9a: mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000c3ddc: mov [rdi+0x7], ch; ret; 
0x00000000161906: mov [rdi+0x7], dl; ret; 
0x000000000c1379: mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000c21d9: mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000c13fb: mov [rdi+0x7], edx; lea rax, [rdi+0xe]; ret; 
0x000000000c225b: mov [rdi+0x7], edx; lea rax, [rdi+0xf]; ret; 
0x000000001827e8: mov [rdi+0x7], edx; mov [rdi], rcx; ret; 
0x000000000bfd19: mov [rdi+0x7], edx; ret; 
0x000000000c0619: mov [rdi+0x7], edx; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c0d90; ret; 
0x000000000c069b: mov [rdi+0x7], edx; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c3e39: mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000c3ebb: mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000c13fa: mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000c225a: mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000001827e7: mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000bfd5a: mov [rdi+0x7], rdx; ret; 
0x000000000c069a: mov [rdi+0x7], rdx; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c3eba: mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000c3de8: mov [rdi+0x8], ch; ret; 
0x000000000c1343: mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000bfcf3: mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000c2199: mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000c09e9: mov [rdi+0x8], dl; ret; 
0x000000000c3df9: mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000c135a: mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000c21ba: mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000bfd0a: mov [rdi+0x8], dx; ret; 
0x000000000c05fa: mov [rdi+0x8], dx; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c3e1a: mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x0000000016d53e: mov [rdi+0x8], eax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000016ce67: mov [rdi+0x8], eax; mov [rdi+0x28], edx; movups [rdi+0x18], xmm0; ret; 
0x00000000054f78: mov [rdi+0x8], eax; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000092698: mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000054f08: mov [rdi+0x8], ecx; ret; 
0x000000000c135b: mov [rdi+0x8], edx; lea rax, [rdi+0x9]; ret; 
0x000000000c21bb: mov [rdi+0x8], edx; lea rax, [rdi+0xa]; ret; 
0x000000000c1399: mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000c21f9: mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x00000000054528: mov [rdi+0x8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000090b58: mov [rdi+0x8], edx; mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x0000000008a083: mov [rdi+0x8], edx; movzx eax, byte ptr [rax]; ret; 
0x000000000bfd0b: mov [rdi+0x8], edx; ret; 
0x000000000c05fb: mov [rdi+0x8], edx; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c0639: mov [rdi+0x8], edx; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c3e1b: mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000c3e59: mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x0000000011d1ee: mov [rdi+0x8], esi; ret; 
0x00000000054527: mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000054f77: mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000054f07: mov [rdi+0x8], r9; ret; 
0x0000000016d53d: mov [rdi+0x8], rax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000016ce66: mov [rdi+0x8], rax; mov [rdi+0x28], edx; movups [rdi+0x18], xmm0; ret; 
0x00000000090b57: mov [rdi+0x8], rdx; mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x0000000008a082: mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000011d1ed: mov [rdi+0x8], rsi; ret; 
0x000000000c3dfe: mov [rdi+0x9], ch; ret; 
0x00000000162da0: mov [rdi+0xa8], eax; mov eax, 0x1; ret; 
0x000000000c3e20: mov [rdi+0xa], ch; ret; 
0x0000000014cef6: mov [rdi+0xa], dx; ret; 
0x0000000014cef7: mov [rdi+0xa], edx; ret; 
0x00000000162dfd: mov [rdi+0xb4], eax; mov eax, 0x1; ret; 
0x00000000162dcd: mov [rdi+0xb8], eax; mov eax, 0x1; ret; 
0x000000000c3e3e: mov [rdi+0xb], ch; ret; 
0x000000000c3e5e: mov [rdi+0xc], ch; ret; 
0x00000000092972: mov [rdi+0xc], eax; xor eax, eax; ret; 
0x00000000141e1e: mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x0000000007f58d: mov [rdi+0xd8], edx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000007f58c: mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000c3e80: mov [rdi+0xd], ch; ret; 
0x000000000c3ea0: mov [rdi+0xe], ch; ret; 
0x000000000c14bd: mov [rdi+0xe], ecx; lea rax, [rdi+0x15]; ret; 
0x000000000c232d: mov [rdi+0xe], ecx; lea rax, [rdi+0x16]; ret; 
0x000000000bfded: mov [rdi+0xe], ecx; ret; 
0x000000000c077d: mov [rdi+0xe], ecx; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c3f8d: mov [rdi+0xe], ecx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c14bc: mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c232c: mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000bfdec: mov [rdi+0xe], rcx; ret; 
0x000000000c077c: mov [rdi+0xe], rcx; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c3f8c: mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c3ec0: mov [rdi+0xf], ch; ret; 
0x000000000c145b: mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c22cb: mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c14dd: mov [rdi+0xf], ecx; lea rax, [rdi+0x16]; ret; 
0x000000000c234d: mov [rdi+0xf], ecx; lea rax, [rdi+0x17]; ret; 
0x000000000bfdab: mov [rdi+0xf], ecx; ret; 
0x000000000c071b: mov [rdi+0xf], ecx; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c0d90; ret; 
0x000000000c079d: mov [rdi+0xf], ecx; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c3f2b: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000c3fad: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000c14dc: mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c234c: mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000bfe0c: mov [rdi+0xf], rcx; ret; 
0x000000000c079c: mov [rdi+0xf], rcx; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c3fac: mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x0000000005557c: mov [rdi+r11*8+0x8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000001b094c: mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x000000001a050c: mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c7c: mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec2c: mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a53: mov [rdi+r8-0x2], dx; ret; 
0x0000000019f7dc: mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001b094d: mov [rdi+r8-0x2], edx; lea rax, [rdi+r8]; ret; 
0x000000001a050d: mov [rdi+r8-0x2], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c7d: mov [rdi+r8-0x2], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec2d: mov [rdi+r8-0x2], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a54: mov [rdi+r8-0x2], edx; ret; 
0x0000000019f7dd: mov [rdi+r8-0x2], edx; vzeroupper; ret; 
0x000000001b0969: mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001a0529: mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c99: mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec49: mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a62: mov [rdi+r8-0x4], edx; ret; 
0x0000000019f7f9: mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001b098b: mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001a054b: mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2cbb: mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec6b: mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a73: mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f81b: mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001b094e: mov [rdi+rax-0x2], edx; lea rax, [rdi+r8]; ret; 
0x000000001a050e: mov [rdi+rax-0x2], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c7e: mov [rdi+rax-0x2], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec2e: mov [rdi+rax-0x2], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a55: mov [rdi+rax-0x2], edx; ret; 
0x0000000019f7de: mov [rdi+rax-0x2], edx; vzeroupper; ret; 
0x000000001b096a: mov [rdi+rax-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001a052a: mov [rdi+rax-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c9a: mov [rdi+rax-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec4a: mov [rdi+rax-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a63: mov [rdi+rax-0x4], edx; ret; 
0x0000000019f7fa: mov [rdi+rax-0x4], edx; vzeroupper; ret; 
0x000000001b098c: mov [rdi+rax-0x8], edx; lea rax, [rdi+r8]; ret; 
0x000000001a054c: mov [rdi+rax-0x8], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2cbc: mov [rdi+rax-0x8], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec6c: mov [rdi+rax-0x8], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b0a74: mov [rdi+rax-0x8], edx; ret; 
0x0000000019f81c: mov [rdi+rax-0x8], edx; vzeroupper; ret; 
0x0000000005557d: mov [rdi+rbx*8+0x8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000001a69b4: mov [rdi+rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000001a69b3: mov [rdi+rdx+0x2], si; mov [rdi], cl; ret; 
0x000000000c4a49: mov [rdi+rdx-0x2], esi; mov [rdi], cl; ret; 
0x000000000c4a48: mov [rdi+rdx-0x2], si; mov [rdi], cl; ret; 
0x000000001b01d8: mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x0000000019fe58: mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13d8: mov [rdi+rdx-0x3], ecx; ret; 
0x0000000019e3b8: mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000000c4a56: mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000000c4a55: mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000001b01fc: mov [rdi+rdx-0x7], ecx; lea rax, [rdi+rdx]; ret; 
0x0000000019fe7c: mov [rdi+rdx-0x7], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13ec: mov [rdi+rdx-0x7], ecx; ret; 
0x0000000019e3cc: mov [rdi+rdx-0x7], ecx; vzeroupper; ret; 
0x000000001b01fb: mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x0000000019fe7b: mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13eb: mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3cb: mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000c4a6c: mov [rdi+rdx-0x8], ecx; ret; 
0x000000000c4a6b: mov [rdi+rdx-0x8], rcx; ret; 
0x000000001a697e: mov [rdi+rdx], esi; ret; 
0x0000000017c6c5: mov [rdi-0x10], ebx; mov [rdi-0x8], rcx; ret; 
0x0000000017c703: mov [rdi-0x10], ebx; mov [rdi-0x8], rdx; ret; 
0x00000000054e6f: mov [rdi-0x10], ecx; ret; 
0x0000000017c6c4: mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c702: mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000054e6e: mov [rdi-0x10], r9; ret; 
0x0000000017c878: mov [rdi-0x11], ebx; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c974: mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8c0: mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017c877: mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c973: mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8bf: mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ca48: mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ca47: mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000151473: mov [rdi-0x13], ebp; dec dword ptr [rax-0x77]; ret; 
0x0000000017cc28: mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cc27: mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ce18: mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ce17: mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cfe9: mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017cfe8: mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d1e9: mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d1e8: mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d3e9: mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d3e8: mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017c6c1: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c6ff: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c6c0: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c6fe: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c874: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c970: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8bc: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017c873: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c96f: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8bb: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017c97b: mov [rdi-0x1], dl; ret; 
0x000000000c0c80: mov [rdi-0x1], edx; ret; 
0x000000000c0cc0: mov [rdi-0x1], rdx; ret; 
0x0000000017ca44: mov [rdi-0x1a], edx; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ca43: mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cc24: mov [rdi-0x1b], edx; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cc23: mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ce14: mov [rdi-0x1c], edx; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017ce13: mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cfe5: mov [rdi-0x1d], edx; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017cfe4: mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d1e5: mov [rdi-0x1e], edx; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d1e4: mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d3e5: mov [rdi-0x1f], edx; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d3e4: mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017c6bd: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c6fb: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c6bc: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x0000000017c6fa: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017cdcc: mov [rdi-0x2], cx; ret; 
0x0000000017cbe4: mov [rdi-0x2], dx; ret; 
0x0000000017cdcd: mov [rdi-0x2], ecx; ret; 
0x0000000017cbe5: mov [rdi-0x2], edx; ret; 
0x0000000017cdc8: mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x0000000017cdc9: mov [rdi-0x3], edx; mov [rdi-0x2], cx; ret; 
0x0000000017d1a9: mov [rdi-0x4], ecx; ret; 
0x0000000017c87f: mov [rdi-0x4], edx; ret; 
0x0000000017d1a6: mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d3a6: mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d5a6: mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x000000001af8fc: mov [rdi-0x7d000000], cs; rol byte ptr [rax+0x48], 0x1; clc; ret; 
0x00000000054e68: mov [rdi-0x8], eax; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054dee: mov [rdi-0x8], ecx; ret; 
0x0000000017c707: mov [rdi-0x8], edx; ret; 
0x00000000054e67: mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054ded: mov [rdi-0x8], r9; ret; 
0x0000000018207b: mov [rdi-0x8], rcx; ret; 
0x0000000017c6c8: mov [rdi-0x8], rcx; ret; 
0x0000000017d1ee: mov [rdi-0x8], rdx; ret; 
0x0000000017c706: mov [rdi-0x8], rdx; ret; 
0x0000000017c87c: mov [rdi-0x9], eax; mov [rdi-0x4], edx; ret; 
0x0000000017c978: mov [rdi-0x9], ecx; mov [rdi-0x1], dl; ret; 
0x0000000017c8c4: mov [rdi-0x9], ecx; mov [rdi-0x4], edx; ret; 
0x00000000182318: mov [rdi-0x9], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017c87b: mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c977: mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8c3: mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182317: mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017ca4c: mov [rdi-0xa], ecx; mov [rdi-0x4], edx; ret; 
0x00000000182298: mov [rdi-0xa], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017ca4b: mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182297: mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cc2c: mov [rdi-0xb], ecx; mov [rdi-0x4], edx; ret; 
0x00000000182218: mov [rdi-0xb], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017cc2b: mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182217: mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017ce1c: mov [rdi-0xc], ecx; mov [rdi-0x4], edx; ret; 
0x00000000182198: mov [rdi-0xc], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017ce1b: mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000182197: mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000017cfed: mov [rdi-0xd], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000182109: mov [rdi-0xd], edx; mov [rdi-0x8], rcx; ret; 
0x0000000017cfec: mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182108: mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017d1ed: mov [rdi-0xe], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000182079: mov [rdi-0xe], edx; mov [rdi-0x8], rcx; ret; 
0x0000000017d1ec: mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182078: mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017d3ed: mov [rdi-0xf], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000181fe9: mov [rdi-0xf], edx; mov [rdi-0x8], rcx; ret; 
0x0000000017d3ec: mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000181fe8: mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000f5c24: mov [rdi], ah; jmp qword ptr [rsi+0x49]; 
0x000000000c3d42: mov [rdi], ch; ret; 
0x000000000c4a4d: mov [rdi], cl; ret; 
0x000000000c12d3: mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000bfc93: mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000c2116: mov [rdi], cx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000c0986: mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000c3d76: mov [rdi], cx; mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x000000001b0949: mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x000000001a0509: mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c79: mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec29: mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b3ae9: mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f7d9: mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001a4626: mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000001b01b3: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x0000000019fe23: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b13b3: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019e393: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000182d2b: mov [rdi], cx; ret; 
0x000000000c12b0: mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000bfc70: mov [rdi], dh; ret; 
0x000000000c04d0: mov [rdi], dh; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c0d90; ret; 
0x000000000c20f2: mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001a04e3: mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000001b2c53: mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000019ec03: mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000000c0962: mov [rdi], dl; ret; 
0x0000000019f7b3: mov [rdi], dl; vzeroupper; ret; 
0x000000000c3d52: mov [rdi], dl; xor ch, ch; mov [rdi+0x1], ch; ret; 
0x000000000c12c3: mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x0000000019fe13: mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000c2103: mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001a04f3: mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b0a50: mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f8b0: mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001b2c63: mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019ec13: mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000000bfc83: mov [rdi], dx; ret; 
0x000000000c04f3: mov [rdi], dx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000001b3993: mov [rdi], dx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x0000000019e383: mov [rdi], dx; vzeroupper; ret; 
0x000000000c3d63: mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x0000000011d1eb: mov [rdi], eax; mov [rdi+0x8], rsi; ret; 
0x00000000056598: mov [rdi], eax; mov eax, 0x1; ret; 
0x000000000567c2: mov [rdi], eax; mov eax, 0x2; ret; 
0x000000000b110c: mov [rdi], eax; mov rax, r9; ret; 
0x0000000005a1bf: mov [rdi], eax; mov rax, rdi; ret; 
0x00000000054de8: mov [rdi], eax; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000054f02: mov [rdi], eax; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000042e84: mov [rdi], eax; xor eax, eax; ret; 
0x000000000412b2: mov [rdi], ecx; fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000c12f5: mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000c1347: mov [rdi], ecx; lea rax, [rdi+0x8]; ret; 
0x000000000c12d4: mov [rdi], ecx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000bfc94: mov [rdi], ecx; mov [rdi+0x2], dh; ret; 
0x000000000c2117: mov [rdi], ecx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000c0987: mov [rdi], ecx; mov [rdi+0x2], dl; ret; 
0x000000000c3d77: mov [rdi], ecx; mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x000000000c1325: mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000c2175: mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000bfcd5: mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x000000000c3dd5: mov [rdi], ecx; mov [rdi+0x3], edx; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x000000000c2145: mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000c09a5: mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000c3da5: mov [rdi], ecx; mov [rdi+0x4], dl; xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000c1306: mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000c2156: mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000bfcc6: mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000c3db6: mov [rdi], ecx; mov [rdi+0x4], dx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x000000000c13b8: mov [rdi], ecx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000c2218: mov [rdi], ecx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd38: mov [rdi], ecx; mov [rdi+0x5], rdx; ret; 
0x000000000c3e78: mov [rdi], ecx; mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000c13d8: mov [rdi], ecx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000c2238: mov [rdi], ecx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000bfd48: mov [rdi], ecx; mov [rdi+0x6], rdx; ret; 
0x000000000c3e98: mov [rdi], ecx; mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000c1377: mov [rdi], ecx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000c21d7: mov [rdi], ecx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000bfd17: mov [rdi], ecx; mov [rdi+0x7], edx; ret; 
0x000000000c3e37: mov [rdi], ecx; mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000c13f8: mov [rdi], ecx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000c2258: mov [rdi], ecx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000bfd58: mov [rdi], ecx; mov [rdi+0x7], rdx; ret; 
0x000000000c3eb8: mov [rdi], ecx; mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000c2197: mov [rdi], ecx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000c09e7: mov [rdi], ecx; mov [rdi+0x8], dl; ret; 
0x000000000c3df7: mov [rdi], ecx; mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000c1358: mov [rdi], ecx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000c21b8: mov [rdi], ecx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000bfd08: mov [rdi], ecx; mov [rdi+0x8], dx; ret; 
0x000000000c3e18: mov [rdi], ecx; mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000c1397: mov [rdi], ecx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000c21f7: mov [rdi], ecx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000bfd27: mov [rdi], ecx; mov [rdi+0x8], edx; ret; 
0x000000000c3e57: mov [rdi], ecx; mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x000000001b094a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x000000001a050a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c7a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec2a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b3aea: mov [rdi], ecx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f7da: mov [rdi], ecx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001b0967: mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001a0527: mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2c97: mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec47: mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b3b07: mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f7f7: mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001b0989: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001a0549: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2cb9: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec69: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b3b19: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f819: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001b01f9: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x0000000019fe79: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13e9: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3c9: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000001a697c: mov [rdi], ecx; mov [rdi+rdx], esi; ret; 
0x000000001a4627: mov [rdi], ecx; mov [rsi-0x2], cx; ret; 
0x000000001a461b: mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x000000001b01b4: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x0000000019fe24: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b13b4: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019e394: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000001b01d2: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x000000001b13d2: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x0000000019e3b2: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000000416de: mov [rdi], ecx; ret; 
0x000000000c0555: mov [rdi], ecx; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c0d90; ret; 
0x000000000c05d7: mov [rdi], ecx; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000001496f1: mov [rdi], ecx; xor eax, eax; ret; 
0x000000000a050c: mov [rdi], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000a0454: mov [rdi], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000873d3: mov [rdi], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000c12c4: mov [rdi], edx; lea rax, [rdi+0x1]; ret; 
0x0000000019fe14: mov [rdi], edx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000c2104: mov [rdi], edx; lea rax, [rdi+0x2]; ret; 
0x000000001a04f4: mov [rdi], edx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000000c12e2: mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x0000000019fe42: mov [rdi], edx; lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000c2132: mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000c1334: mov [rdi], edx; lea rax, [rdi+0x7]; ret; 
0x000000000c2184: mov [rdi], edx; lea rax, [rdi+0x8]; ret; 
0x000000000c0ca0: mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000c0cb0: mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000c0d21: mov [rdi], edx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d31: mov [rdi], edx; mov [rdi+0x6], rdx; ret; 
0x000000000c0d01: mov [rdi], edx; mov [rdi+0x7], edx; ret; 
0x000000000c0ce1: mov [rdi], edx; mov [rdi+0x8], dl; ret; 
0x000000000c0cf1: mov [rdi], edx; mov [rdi+0x8], dx; ret; 
0x000000000c0d11: mov [rdi], edx; mov [rdi+0x8], edx; ret; 
0x000000001b0a51: mov [rdi], edx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f8b1: mov [rdi], edx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001b0a60: mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f8c0: mov [rdi], edx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001b0a71: mov [rdi], edx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f8d1: mov [rdi], edx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001b2c64: mov [rdi], edx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019ec14: mov [rdi], edx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000041a39: mov [rdi], edx; movd xmm0, eax; ret; 
0x000000000892f3: mov [rdi], edx; ret; 
0x000000000c04f4: mov [rdi], edx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000001b3994: mov [rdi], edx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x000000000c0532: mov [rdi], edx; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000001b39d2: mov [rdi], edx; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x000000000c05b4: mov [rdi], edx; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x0000000019e384: mov [rdi], edx; vzeroupper; ret; 
0x000000000c3d64: mov [rdi], edx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000c3d92: mov [rdi], edx; xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000c3de4: mov [rdi], edx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000001a3f57: mov [rdi], esi; mov [r9-0x2], cx; ret; 
0x000000001a3f43: mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000001a3f32: mov [rdi], esi; mov [r9-0x8], rcx; ret; 
0x000000000c4a69: mov [rdi], esi; mov [rdi+rdx-0x8], rcx; ret; 
0x00000000094644: mov [rdi], esi; ret; 
0x00000000092b99: mov [rdi], esi; xor eax, eax; ret; 
0x00000000054de7: mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000054f01: mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000054dbc: mov [rdi], r9; ret; 
0x0000000011d1ea: mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x000000000b110b: mov [rdi], rax; mov rax, r9; ret; 
0x0000000005a1be: mov [rdi], rax; mov rax, rdi; ret; 
0x00000000042e83: mov [rdi], rax; xor eax, eax; ret; 
0x000000000c1346: mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000c13b7: mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000c2217: mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd37: mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000c3e77: mov [rdi], rcx; mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000c13d7: mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000c2237: mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000bfd47: mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000c3e97: mov [rdi], rcx; mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000c1376: mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000c21d6: mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000bfd16: mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000c3e36: mov [rdi], rcx; mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000c13f7: mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000c2257: mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000bfd57: mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000000c3eb7: mov [rdi], rcx; mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000c2196: mov [rdi], rcx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000c09e6: mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000c3df6: mov [rdi], rcx; mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000c1357: mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000c21b7: mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000bfd07: mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000c3e17: mov [rdi], rcx; mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000c1396: mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000c21f6: mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000bfd26: mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x000000000c3e56: mov [rdi], rcx; mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x000000001b0988: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001a0548: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000001b2cb8: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec68: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b3b18: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f818: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001b01f8: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x0000000019fe78: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13e8: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3c8: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000bfcf6: mov [rdi], rcx; ret; 
0x000000000c05d6: mov [rdi], rcx; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000001496f0: mov [rdi], rcx; xor eax, eax; ret; 
0x000000000c1333: mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000c2183: mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000c0d20: mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d30: mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000c0d00: mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000c0ce0: mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000c0cf0: mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000c0d10: mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000001b0a70: mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f8d0: mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000bfce3: mov [rdi], rdx; ret; 
0x000000000c05b3: mov [rdi], rdx; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x000000000c3de3: mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000001a3f31: mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000000c4a68: mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x000000000c4a67: mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x000000001a3f56: mov [rdi], si; mov [r9-0x2], cx; ret; 
0x00000000112fe0: mov [rdi], si; xor eax, eax; ret; 
0x000000000bf5ba: mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x0000000016649c: mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x000000001290e9: mov [rdx+0x10], ecx; mov [r8], rax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x00000000129069: mov [rdx+0x10], ecx; mov [r8], rax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x000000001290e8: mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x00000000129068: mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x000000000bc7e2: mov [rdx+0x1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x0000000009e085: mov [rdx+0x20], eax; ret; 
0x00000000082884: mov [rdx+0x20], esi; mov [rcx], eax; ret; 
0x0000000015fd78: mov [rdx+0x20], esi; ret; 
0x0000000009e084: mov [rdx+0x20], rax; ret; 
0x00000000082883: mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000015fd77: mov [rdx+0x20], rsi; ret; 
0x000000000a1810: mov [rdx+0x28], ecx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x000000000a180f: mov [rdx+0x28], rcx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x000000000bc7f2: mov [rdx+0x2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x0000000018fa09: mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000bc80e: mov [rdx+0x2], al; mov rax, rdi; ret; 
0x0000000018fa67: mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000bc87c: mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x000000000bc822: mov [rdx+0x4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x0000000018fa37: mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000bc83c: mov [rdx+0x4], al; mov rax, rdi; ret; 
0x0000000018fa48: mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000bc85d: mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x00000000046c3b: mov [rdx+0x4], ax; xor eax, eax; ret; 
0x0000000018fa49: mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000d3c46: mov [rdx+0x4], eax; mov [rdx], eax; xor eax, eax; ret; 
0x000000000bc85e: mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x00000000046c3c: mov [rdx+0x4], eax; xor eax, eax; ret; 
0x00000000135aaa: mov [rdx+0x4], ecx; test ecx, ecx; jne short 0x0000000000135a60; mov rax, r8; ret; 
0x000000000d3c45: mov [rdx+0x4], r8d; mov [rdx], eax; xor eax, eax; ret; 
0x0000000015fd52: mov [rdx+0x58], edi; mov [rdx+0x68], rcx; ret; 
0x0000000015fd51: mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x0000000018fa79: mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x0000000018fafb: mov [rdx+0x5], eax; lea rax, [rdx+0xc]; ret; 
0x0000000018b729: mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x0000000018fafa: mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x0000000018b76a: mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000015fd56: mov [rdx+0x68], ecx; ret; 
0x0000000015fd55: mov [rdx+0x68], rcx; ret; 
0x0000000018fa99: mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x0000000018fb1b: mov [rdx+0x6], eax; lea rax, [rdx+0xd]; ret; 
0x0000000018b739: mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x0000000018fb1a: mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000018b78a: mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000018fab9: mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x00000000191d83: mov [rdx+0x7], eax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018fb3b: mov [rdx+0x7], eax; lea rax, [rdx+0xe]; ret; 
0x000000000bc900: mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x00000000191d82: mov [rdx+0x7], rax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018fb3a: mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000018b7aa: mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x000000000bf550: mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000bc892: mov [rdx+0x8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc8c0: mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000bc8e1: mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x0000000018fad9: mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x0000000018f9cb: mov [rdx+0x8], eax; lea rax, [rdx+0xf]; ret; 
0x000000000bc8e2: mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x00000000035e17: mov [rdx+0x8], eax; pop rbx; ret; 
0x0000000009c579: mov [rdx+0x8], eax; ret; 
0x0000000011d211: mov [rdx+0x8], eax; test rax, rax; je short 0x000000000011d21c; mov [rax], rdx; ret; 
0x0000000009141e: mov [rdx+0x8], edi; mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000018f9ca: mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x0000000018b69a: mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x0000000009c578: mov [rdx+0x8], rax; ret; 
0x0000000011d210: mov [rdx+0x8], rax; test rax, rax; je short 0x000000000011d21c; mov [rax], rdx; ret; 
0x0000000009141d: mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000009b786: mov [rdx+0x971], bh; xor eax, eax; ret; 
0x0000000009b785: mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000009b7b6: mov [rdx+0x972], bh; xor eax, eax; cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x0000000009b7b5: mov [rdx+0x972], dil; xor eax, eax; cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x0000000016639c: mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x0000000008a6ad: mov [rdx+0xe0], ecx; pop rbx; ret; 
0x0000000007f59b: mov [rdx+0xe0], ecx; ret; 
0x0000000008a6ac: mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000007f59a: mov [rdx+0xe0], rcx; ret; 
0x00000000142c19: mov [rdx-0x1], al; mov [rax], r10; lea eax, [rsi+r8+0x2]; pop rbx; ret; 
0x0000000018f9e2: mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000bc7e7: mov [rdx], al; mov rax, rdi; ret; 
0x0000000018f9f3: mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x0000000018fa03: mov [rdx], ax; mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000bc808: mov [rdx], ax; mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x000000000bc7f8: mov [rdx], ax; mov rax, rdi; ret; 
0x00000000129425: mov [rdx], ax; ret; 
0x0000000011a9e3: mov [rdx], eax; cmp rax, rdi; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x0000000018f9f4: mov [rdx], eax; lea rax, [rdx+0x1]; ret; 
0x0000000018fa22: mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x00000000191e2f: mov [rdx], eax; lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018f974: mov [rdx], eax; lea rax, [rdx+0x7]; ret; 
0x0000000018fa04: mov [rdx], eax; mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000bc809: mov [rdx], eax; mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x0000000018fa32: mov [rdx], eax; mov al, [rcx+0x4]; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000bc837: mov [rdx], eax; mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x0000000018fa42: mov [rdx], eax; mov ax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000bc857: mov [rdx], eax; mov ax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x00000000056637: mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000042488: mov [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000427aa: mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000018fa62: mov [rdx], eax; mov eax, [rcx+0x3]; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000bc877: mov [rdx], eax; mov eax, [rcx+0x3]; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x0000000018fa74: mov [rdx], eax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x0000000018b724: mov [rdx], eax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x0000000018fa94: mov [rdx], eax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x0000000018b734: mov [rdx], eax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x0000000018fab4: mov [rdx], eax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x0000000018b744: mov [rdx], eax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x0000000018fad4: mov [rdx], eax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x0000000018b754: mov [rdx], eax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000eac20: mov [rdx], eax; mov eax, r8d; ret; 
0x00000000108dc0: mov [rdx], eax; mov eax, r9d; ret; 
0x00000000046cea: mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000018faf4: mov [rdx], eax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x0000000018b764: mov [rdx], eax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000018fb14: mov [rdx], eax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000018b784: mov [rdx], eax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000018fb34: mov [rdx], eax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000018b7a4: mov [rdx], eax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x0000000018f9c4: mov [rdx], eax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x0000000018b694: mov [rdx], eax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x000000000bc7f9: mov [rdx], eax; mov rax, rdi; ret; 
0x0000000009040e: mov [rdx], eax; pop rbx; ret; 
0x0000000003a411: mov [rdx], eax; ret; 
0x00000000046c35: mov [rdx], eax; shr rax, 0x20; mov [rdx+0x4], ax; xor eax, eax; ret; 
0x000000000d3c49: mov [rdx], eax; xor eax, eax; ret; 
0x000000000e6a43: mov [rdx], ebx; cld; jmp qword ptr [rsi+0xf]; 
0x0000000008390c: mov [rdx], ecx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000913de: mov [rdx], ecx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x00000000039be7: mov [rdx], ecx; mov rdx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x00000000108b11: mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x000000000b1042: mov [rdx], ecx; ret; 
0x000000000e5648: mov [rdx], edi; mov eax, r8d; ret; 
0x000000000b1169: mov [rdx], edi; mov rax, r12; pop r12; ret; 
0x000000001b39a0: mov [rdx], es; add [rax], al; ret; 
0x00000000081cf7: mov [rdx], esp; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000081cf6: mov [rdx], r12d; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000011a9e2: mov [rdx], rax; cmp rax, rdi; jb short 0x000000000011a9f0; xor eax, eax; ret; 
0x00000000191e2e: mov [rdx], rax; lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018f973: mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x000000001286b3: mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000018fa73: mov [rdx], rax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x0000000018b723: mov [rdx], rax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x0000000018fa93: mov [rdx], rax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x0000000018b733: mov [rdx], rax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x0000000018fab3: mov [rdx], rax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x0000000018b743: mov [rdx], rax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x0000000018fad3: mov [rdx], rax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x0000000018b753: mov [rdx], rax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x0000000018faf3: mov [rdx], rax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x0000000018b763: mov [rdx], rax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000018fb13: mov [rdx], rax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000018b783: mov [rdx], rax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000018fb33: mov [rdx], rax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000018b7a3: mov [rdx], rax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x0000000018f9c3: mov [rdx], rax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x0000000018b693: mov [rdx], rax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x0000000018b643: mov [rdx], rax; mov rax, rdi; ret; 
0x0000000009040d: mov [rdx], rax; pop rbx; ret; 
0x0000000003a410: mov [rdx], rax; ret; 
0x0000000008390b: mov [rdx], rcx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000913dd: mov [rdx], rcx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x00000000039be6: mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x000000000b1041: mov [rdx], rcx; ret; 
0x0000000011db4e: mov [rip+0x10381c], eax; add rsp, 0x8; ret; 
0x0000000011db4d: mov [rip+0x10381c], rax; add rsp, 0x8; ret; 
0x0000000011dadd: mov [rip+0x10388d], eax; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011dadc: mov [rip+0x10388d], rax; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daad: mov [rip+0x1038bd], eax; mov rax, r8; ret; 
0x0000000011daac: mov [rip+0x1038bd], rax; mov rax, r8; ret; 
0x0000000011c351: mov [rip+0x104ec9], eax; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000011c350: mov [rip+0x104ec9], rax; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000a0fa3: mov [rip+0x1783c7], eax; ret; 
0x000000000a0fa2: mov [rip+0x1783c7], rax; ret; 
0x000000000a0fc2: mov [rip+0x1783d8], eax; ret; 
0x000000000a0f83: mov [rip+0x1783df], eax; ret; 
0x000000000a0f82: mov [rip+0x1783df], rax; ret; 
0x000000000a0f63: mov [rip+0x1783f7], eax; ret; 
0x000000000a0f62: mov [rip+0x1783f7], rax; ret; 
0x000000000a0d59: mov [rip+0x178681], eax; ret; 
0x000000000a0d58: mov [rip+0x178681], rax; ret; 
0x000000000a0ce9: mov [rip+0x178689], eax; ret; 
0x000000000a0ce8: mov [rip+0x178689], rax; ret; 
0x000000000a0d42: mov [rip+0x178690], eax; ret; 
0x000000000a0d41: mov [rip+0x178690], rax; ret; 
0x000000000a0d28: mov [rip+0x17869a], edx; ret; 
0x000000000a0d27: mov [rip+0x17869a], rdx; ret; 
0x000000000a0cd9: mov [rip+0x1786a1], eax; ret; 
0x000000000a0cd8: mov [rip+0x1786a1], rax; ret; 
0x0000000009cde2: mov [rip+0x17c4cc], eax; add rsp, 0x8; ret; 
0x000000000a0fd8: mov [rip+0x17f51e], eax; ret; 
0x000000000a0ee7: mov [rip+0x17f613], eax; ret; 
0x000000000a0ee6: mov [rip+0x17f613], rax; ret; 
0x0000000009e79d: mov [rip+0x18141d], edx; ret; 
0x0000000009e79c: mov [rip+0x18141d], rdx; ret; 
0x0000000009e5e2: mov [rip+0x1815e0], edi; mov [rdi+0x18], rax; ret; 
0x0000000009e5e1: mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x0000000009e09d: mov [rip+0x181b1d], edx; ret; 
0x0000000009e09c: mov [rip+0x181b1d], rdx; ret; 
0x00000000097558: mov [rip+0x181d42], eax; ret; 
0x00000000097557: mov [rip+0x181d42], rax; ret; 
0x00000000097547: mov [rip+0x181d5f], eax; ret; 
0x0000000009b7e8: mov [rip+0x184302], edi; xor eax, eax; ret; 
0x00000000090c97: mov [rip+0x1885ff], eax; ret; 
0x00000000090c87: mov [rip+0x18860b], eax; ret; 
0x00000000090c77: mov [rip+0x188617], eax; ret; 
0x00000000090c67: mov [rip+0x188623], eax; ret; 
0x00000000090cc3: mov [rip+0x18adcb], eax; ret; 
0x0000000008f529: mov [rip+0x18c529], ebx; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000008f528: mov [rip+0x18c529], rbx; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x00000000051692: mov [rip+0x1ca24d], al; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000043183: mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x00000000043160: mov [rip+0x1d6082], edx; ret; 
0x00000000038821: mov [rip+0x1e2476], al; lea rax, [rip+0x1e2412]; ret; 
0x00000000029cd0: mov [rip+0x1f1d52], eax; ret; 
0x00000000029ccf: mov [rip+0x1f1d52], rax; ret; 
0x000000001bb804: mov [rip+0x60226], ebx; test rbx, rbx; jne short 0x00000000001bb7f0; pop rbx; ret; 
0x000000001bb803: mov [rip+0x60226], rbx; test rbx, rbx; jne short 0x00000000001bb7f0; pop rbx; ret; 
0x0000000015da89: mov [rip+0xc9e31], eax; add rsp, 0x8; ret; 
0x00000000155b6e: mov [rip+0xccb5c], esp; mov [rip+0xccb5d], rbp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b6d: mov [rip+0xccb5c], r12; mov [rip+0xccb5d], rbp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b75: mov [rip+0xccb5d], ebp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b74: mov [rip+0xccb5d], rbp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b1e: mov [rip+0xcdbec], esp; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b1d: mov [rip+0xcdbec], r12; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b25: mov [rip+0xcdbed], ebp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b24: mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b17: mov [rip+0xcec03], ebp; mov [rip+0xcdbec], r12; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b16: mov [rip+0xcec03], r13; mov [rip+0xcdbec], r12; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155ac7: mov [rip+0xcec83], esp; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155ac6: mov [rip+0xcec83], r12; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155ace: mov [rip+0xcec84], ebp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155acd: mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155ac0: mov [rip+0xcfc9a], ebp; mov [rip+0xcec83], r12; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155abf: mov [rip+0xcfc9a], r13; mov [rip+0xcec83], r12; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a70: mov [rip+0xcfd1a], esp; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a6f: mov [rip+0xcfd1a], r12; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a77: mov [rip+0xcfd1b], ebp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a76: mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x0000000015235c: mov [rip+0xd0276], ecx; mov eax, r8d; ret; 
0x0000000015235b: mov [rip+0xd0276], rcx; mov eax, r8d; ret; 
0x00000000155a69: mov [rip+0xd0d31], ebp; mov [rip+0xcfd1a], r12; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a68: mov [rip+0xd0d31], r13; mov [rip+0xcfd1a], r12; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a19: mov [rip+0xd0db1], esp; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a18: mov [rip+0xd0db1], r12; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a20: mov [rip+0xd0db2], ebp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a1f: mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a12: mov [rip+0xd1dc8], ebp; mov [rip+0xd0db1], r12; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a11: mov [rip+0xd1dc8], r13; mov [rip+0xd0db1], r12; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x0000000013f263: mov [rip+0xdb777], eax; add rsp, 0x8; ret; 
0x0000000013f262: mov [rip+0xdb777], rax; add rsp, 0x8; ret; 
0x00000000128f49: mov [rip+0xf04f1], ebx; pop rbx; ret; 
0x00000000128f48: mov [rip+0xf04f1], rbx; pop rbx; ret; 
0x00000000128f2f: mov [rip+0xf050b], ebx; pop rbx; ret; 
0x00000000128f2e: mov [rip+0xf050b], rbx; pop rbx; ret; 
0x0000000003381d: mov [rip-0x72b70000], al; add r9b, [r8+0x39]; ret; 
0x000000001453f6: mov [rip-0x76fffffe], al; and al, 0x8; mov rax, [rsp]; mov rdi, r15; call rax; 
0x0000000015edbb: mov [rsi+0x10], eax; ret; 
0x00000000046b5a: mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046ba9: mov [rsi+0x10], eax; xor eax, eax; ret; 
0x0000000015edba: mov [rsi+0x10], rax; ret; 
0x00000000046b59: mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046ba8: mov [rsi+0x10], rax; xor eax, eax; ret; 
0x00000000134a83: mov [rsi+0x1], al; test al, al; jne short 0x0000000000134a31; mov rax, r9; ret; 
0x0000000008a04a: mov [rsi+0x28], edx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000008a049: mov [rsi+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x000000001430af: mov [rsi+0x3], al; xor eax, eax; ret; 
0x000000001430ae: mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x00000000118bc9: mov [rsi+0x66], dx; xor eax, eax; ret; 
0x00000000118bca: mov [rsi+0x66], edx; xor eax, eax; ret; 
0x00000000056779: mov [rsi+0x8], eax; mov eax, 0x2; ret; 
0x0000000015ed87: mov [rsi+0x8], eax; ret; 
0x00000000056778: mov [rsi+0x8], rax; mov eax, 0x2; ret; 
0x0000000015ed86: mov [rsi+0x8], rax; ret; 
0x00000000046be1: mov [rsi+0xc], ax; mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x00000000046be2: mov [rsi+0xc], eax; mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x00000000046bea: mov [rsi+0xe], ax; xor eax, eax; ret; 
0x00000000046beb: mov [rsi+0xe], eax; xor eax, eax; ret; 
0x000000000540f4: mov [rsi+rax*8], edx; xor eax, eax; ret; 
0x000000000540f3: mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x000000000aa7a0: mov [rsi+rdx+0x1], al; jne short 0x00000000000aa790; ret; 
0x000000000aa79d: mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x00000000000aa790; ret; 
0x00000000075d65: mov [rsi-0x16fffffe], edx; idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x000000001a4629: mov [rsi-0x2], cx; ret; 
0x000000001a462a: mov [rsi-0x2], ecx; ret; 
0x00000000040783: mov [rsi-0x389bffe3], eax; add [rdx], ch; add [rax], al; add [rcx+rcx*4-0x30], cl; ret; 
0x000000001a461d: mov [rsi-0x4], ecx; ret; 
0x000000001a7f18: mov [rsi-0x78f0fff9], es; ret far; 
0x0000000013741b: mov [rsi-0x7af0fff2], esp; ret far; 
0x00000000046b9b: mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x00000000112fc7: mov [rsi], ax; xor eax, eax; ret; 
0x0000000016cdaa: mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x0000000009b783: mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x000000001223ff: mov [rsi], eax; mov eax, 0x1; ret; 
0x00000000046b9c: mov [rsi], eax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x00000000099c95: mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x000000000923e3: mov [rsi], eax; xor eax, eax; mov [r8], rdx; ret; 
0x000000000897a3: mov [rsi], eax; xor eax, eax; ret; 
0x00000000092413: mov [rsi], ebp; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000091422: mov [rsi], edi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x00000000141e22: mov [rsi], edi; ret; 
0x0000000016cd27: mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000056596: mov [rsi], edx; mov [rdi], eax; mov eax, 0x1; ret; 
0x000000000466ef: mov [rsi], edx; mov eax, r8d; ret; 
0x000000001069d3: mov [rsi], edx; movups [rsi+0x8], xmm0; ret; 
0x0000000005657b: mov [rsi], edx; ret; 
0x0000000017394c: mov [rsi], es; add cl, ch; cmp al, 0xd; cli; jmp qword ptr [rsi+0x66]; 
0x0000000016cda9: mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x000000001223fe: mov [rsi], rax; mov eax, 0x1; ret; 
0x000000000923e2: mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x000000000897a2: mov [rsi], rax; xor eax, eax; ret; 
0x00000000092412: mov [rsi], rbp; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000091421: mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x00000000141e21: mov [rsi], rdi; ret; 
0x00000000056595: mov [rsi], rdx; mov [rdi], eax; mov eax, 0x1; ret; 
0x0000000005657a: mov [rsi], rdx; ret; 
0x00000000121c05: mov [rsp+0x1008], eax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000121c04: mov [rsp+0x1008], rax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x000000000410c9: mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000011aaf4: mov [rsp+0x10], eax; mov eax, 0x10; syscall; 
0x00000000128514: mov [rsp+0x10], eax; mov eax, 0x42; syscall; 
0x00000000126526: mov [rsp+0x10], eax; mov eax, 0x9d; syscall; 
0x0000000016be48: mov [rsp+0x10], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016b68c: mov [rsp+0x10], eax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016b77c: mov [rsp+0x10], eax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x00000000164d6c: mov [rsp+0x10], eax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000007b5ad: mov [rsp+0x10], eax; mov rdx, r8; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000012e766: mov [rsp+0x10], eax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000008597c: mov [rsp+0x10], ecx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000115405: mov [rsp+0x10], edi; mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x0000000007b5ac: mov [rsp+0x10], r8; mov rdx, r8; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000011aaf3: mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x00000000128513: mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x00000000126525: mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x0000000016be47: mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016b68b: mov [rsp+0x10], rax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016b77b: mov [rsp+0x10], rax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x00000000164d6b: mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000012e765: mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000008597b: mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000115404: mov [rsp+0x10], rdi; mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x000000001131a0: mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000432fd: mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009bdc0: mov [rsp+0x14], eax; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000009bdbf: mov [rsp+0x14], eax; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000009f1f4: mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x0000000015e400: mov [rsp+0x18], edi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000015e3fe: mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000015ea7f: mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x0000000015ea80: mov [rsp+0x192], eax; mov rax, [rsp+0x28]; call rax; 
0x0000000012e4ec: mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x0000000012e4e8: mov [rsp+0x20], dl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000119a75: mov [rsp+0x20], eax; cmp esi, 0x9; je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x0000000011c193: mov [rsp+0x20], eax; mov eax, 0x65; syscall; 
0x0000000012e4e7: mov [rsp+0x20], r10b; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000119a74: mov [rsp+0x20], rax; cmp esi, 0x9; je short 0x0000000000119aa8; mov eax, 0x48; syscall; 
0x0000000011c192: mov [rsp+0x20], rax; mov eax, 0x65; syscall; 
0x00000000119f88: mov [rsp+0x23], al; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x000000001692a5: mov [rsp+0x28], eax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169095: mov [rsp+0x28], eax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169105: mov [rsp+0x28], eax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169175: mov [rsp+0x28], eax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000011a0ea: mov [rsp+0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000001692a4: mov [rsp+0x28], rax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169094: mov [rsp+0x28], rax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169104: mov [rsp+0x28], rax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169174: mov [rsp+0x28], rax; mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000011a0e9: mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000a073d: mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x000000000a01d0: mov [rsp+0x30], eax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000000a01cf: mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000016b3a5: mov [rsp+0x38], eax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 0x2; call r8; 
0x000000000d9807: mov [rsp+0x38], edx; call r12; 
0x000000000a01da: mov [rsp+0x38], esp; syscall; 
0x000000000a01d9: mov [rsp+0x38], r12d; syscall; 
0x0000000016b3a4: mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 0x2; call r8; 
0x000000000d9806: mov [rsp+0x38], rdx; call r12; 
0x000000001653e0: mov [rsp+0x438], eax; xor eax, eax; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000001653df: mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x0000000016ca58: mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016c621: mov [rsp+0x4], eax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016c801: mov [rsp+0x4], eax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x000000000d9119: mov [rsp+0x50], edi; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000d9118: mov [rsp+0x50], r15; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000119eff: mov [rsp+0x58], eax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x0000000015e3f6: mov [rsp+0x58], ebp; lea r9, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000015e3f5: mov [rsp+0x58], r13; lea r9, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x00000000119efe: mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x00000000043f16: mov [rsp+0x68], eax; mov rsi, [rsp+0x8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000043f15: mov [rsp+0x68], r8; mov rsi, [rsp+0x8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000016446e: mov [rsp+0x70], edx; call qword ptr [rax+0x30]; 
0x000000000d97ff: mov [rsp+0x88], edx; mov [rsp+0x38], rdx; call r12; 
0x000000000d97fe: mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x0000000011aaea: mov [rsp+0x8], eax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x0000000012850a: mov [rsp+0x8], eax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x0000000012651c: mov [rsp+0x8], eax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x000000000d955e: mov [rsp+0x8], eax; lea rdi, [rsp+0xd0]; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x00000000050c6e: mov [rsp+0x8], eax; xor eax, eax; mov eax, 0x3e; syscall; 
0x0000000015364e: mov [rsp+0x8], ecx; call rbp; 
0x000000001453fb: mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r15; call rax; 
0x000000000859d7: mov [rsp+0x8], ecx; mov rdi, r15; call rax; 
0x0000000008abd0: mov [rsp+0x8], ecx; mov rdi, rbp; call rax; 
0x0000000016b699: mov [rsp+0x8], edx; call qword ptr [rax+0x8]; 
0x00000000090304: mov [rsp+0x8], esi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000011aae9: mov [rsp+0x8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x00000000128509: mov [rsp+0x8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x0000000012651b: mov [rsp+0x8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x000000000d955d: mov [rsp+0x8], rax; lea rdi, [rsp+0xd0]; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x00000000050c6d: mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x0000000015364d: mov [rsp+0x8], rcx; call rbp; 
0x000000000859d5: mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x000000000859d6: mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000008abce: mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x0000000008abcf: mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x0000000016b698: mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x00000000090303: mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000114c94: mov [rsp+0x98], eax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x00000000114c93: mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x000000001695db: mov [rsp+0xc8], eax; mov rax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x00000000169549: mov [rsp+0xc8], edx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x000000001695da: mov [rsp+0xc8], rax; mov rax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x00000000169548: mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x00000000175467: mov [rsp+0xc], eax; mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x000000000d956e: mov [rsp+0xd0], eax; call r12; 
0x000000000d956d: mov [rsp+0xd0], rax; call r12; 
0x000000000411fd: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000412b8: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000041138: mov [rsp-0x10], ax; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000004117e: mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000411fe: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000412b9: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000041139: mov [rsp-0x10], eax; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000004117f: mov [rsp-0x10], eax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000059bfb: mov [rsp-0x10], eax; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000566ec: mov [rsp-0x10], esi; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000059bfa: mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000566eb: mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000566e7: mov [rsp-0x18], eax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000566e6: mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000096555: mov [rsp-0x8], edi; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000096554: mov [rsp-0x8], rdi; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x000000001675b5: mov [rsp], eax; call qword ptr [rdx+0x20]; 
0x0000000008b804: mov [rsp], eax; mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000016c331: mov [rsp], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015fc07: mov [rsp], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000008b841: mov [rsp], eax; mov rdx, r8; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x00000000090300: mov [rsp], edi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000016c62d: mov [rsp], edx; call qword ptr [rax+0x48]; 
0x00000000029eb1: mov [rsp], edx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000000ab3b2: mov [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x0000000008b803: mov [rsp], r8; mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008b840: mov [rsp], r8; mov rdx, r8; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x000000001675b4: mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x0000000016c330: mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015fc06: mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000902ff: mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000029eb0: mov [rsp], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000162dff: mov ah, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x00000000126ed5: mov ah, 0x0; add [rax], al; syscall; 
0x0000000011348b: mov ah, 0x1; add [rax], al; syscall; 
0x000000000c5448: mov ah, 0x28; add [rax], eax; cmove rax, rdx; ret; 
0x000000000a9d88: mov ah, 0x51; adc [rax], al; cmove rax, rdx; ret; 
0x000000000a9948: mov ah, 0x55; adc [rax], al; cmove rax, rdx; ret; 
0x000000000918ed: mov ah, 0x5b; ret; 
0x0000000013f218: mov ah, 0x62; add eax, [rax]; mov rax, [rsp]; mov rdi, r12; call rax; 
0x00000000150b25: mov ah, 0x8; add al, ch; and edx, [rbx-0x21170012]; idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000011e59f: mov ah, 0xf0; jmp qword ptr [rsi+0x66]; 
0x000000000dd017: mov ah, 0xf4; dec dword ptr [rax-0x77]; ret; 
0x000000001668ea: mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x0000000015b2bb: mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x000000000a59ef: mov ah, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000175607: mov ah, [rax+0x4c000003]; lea eax, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000192eb0: mov ah, [rsi+0xf]; je short 0x0000000000192e76; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000193c80: mov ah, [rsi+0xf]; je short 0x0000000000193c46; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000194cc0: mov ah, [rsi+0xf]; je short 0x0000000000194c86; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000196890: mov ah, [rsi+0xf]; je short 0x0000000000196856; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000015b7a2: mov ah, [rsi-0x10]; dec dword ptr [rax-0x77]; ret; 
0x0000000016df04: mov ah, bh; jmp qword ptr [rsi+0xf]; 
0x00000000113892: mov al, 0x0; add [rax], al; call qword ptr [rax+0x88]; 
0x00000000156f28: mov al, 0x0; add [rax], al; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000001134e5: mov al, 0x0; add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000156f39: mov al, 0x0; add [rax], al; ret; 
0x00000000126c95: mov al, 0x0; add [rax], al; syscall; 
0x00000000106119: mov al, 0x11; add al, ch; and r14b, r10b; jmp qword ptr [rsi+0xf]; 
0x0000000009e57d: mov al, 0x13; add al, ch; ret far; 
0x00000000041818: mov al, 0x18; add [rdi], cl; push rsp; ret; 
0x00000000041819: mov al, 0x18; add [rdi], cl; push rsp; ret; 
0x00000000191aac: mov al, 0x1; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000015f648: mov al, 0x23; add [rax], al; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000015f601: mov al, 0x23; add [rax], al; pop rbp; jmp rcx; 
0x0000000005a12d: mov al, 0x3; add [rax], al; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x00000000039cdf: mov al, 0x44; mov eax, [rax+rdx]; mov eax, r8d; ret; 
0x000000000c08dc: mov al, 0x4; add [rax], al; ret; 
0x000000000519c4: mov al, 0x4c; add esi, eax; notrack jmp rsi; 
0x000000000c04dc: mov al, 0x8; add [rax], al; ret; 
0x00000000088dc2: mov al, 0x9; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000a6fcc: mov al, 0xbd; adc al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000016b6d0: mov al, 0xfc; jmp qword ptr [rsi+0x66]; 
0x000000000ea6e4: mov al, 0xff; inc dword ptr [rbp+0x480575c0]; add esp, 0x8; ret; 
0x0000000013b640: mov al, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000a5ec4: mov al, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000014cf05: mov al, 0xff; jmp qword ptr [rsi-0x3f]; 
0x000000000b0201: mov al, [0x1480000008e870f]; ret; 
0x00000000094afd: mov al, [0x14eb8000009]; syscall; 
0x00000000175608: mov al, [0x2024448d4c000003]; call qword ptr [rax+0x340]; 
0x00000000083bf7: mov al, [0x30788348000000]; je short 0x0000000000083c08; ret; 
0x0000000008bc1b: mov al, [0x415c415d5b000000]; pop rbp; pop r14; ret; 
0x000000000961b5: mov al, [0x441f0f000a0565e8]; add [rax], al; endbr64; mov eax, [rip+0x189926]; ret; 
0x0000000011ed38: mov al, [0x48018964d8f7000f]; or eax, 0xffffffff; ret; 
0x0000000005a122: mov al, [0x4808668d48000000]; lea esi, [rdi+0x3b0]; mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x000000000892a1: mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000089171: mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000086085: mov al, [0x485def8948000000]; mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000008440a: mov al, [0x48c0ef0f66000000]; mov dword ptr [rax+0x50], 0x0; movups [rax+0x40], xmm0; pop rbx; ret; 
0x00000000168140: mov al, [0x5d5bc08944000000]; pop r12; pop r13; pop r14; ret; 
0x0000000011a8cf: mov al, [0x5d5be08944000000]; pop r12; ret; 
0x000000000e6289: mov al, [0x5d5be0894c000000]; pop r12; ret; 
0x0000000008bd77: mov al, [0x5d5bef8948000000]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000003cbe0: mov al, [0x6348c0b60f0018f5]; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x000000001134ec: mov al, [0x80bb8b48000000]; add [rax], al; call qword ptr [rax+0x88]; 
0x000000000919e4: mov al, [0x81bed231450018]; add [rax], al; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000a043c: mov al, [0x824448b48ffff06]; add rsp, 0x38; ret; 
0x000000000788cf: mov al, [0x840fc08548000000]; ret far; 
0x0000000013930d: mov al, [0x850c24448b440001]; ror byte ptr [rdi], 0x85; ret; 
0x000000000778e0: mov al, [0x852c8d4c000000]; add [rax], al; add [rax+0x29], cl; ret; 
0x0000000006b63c: mov al, [0x8944c33941fffffa]; popfq; sar dl, 0xff; inc dword ptr [rcx+0xf]; ret; 
0x0000000006d0de: mov al, [0x8948c08548fffffa]; ret; 
0x0000000008426b: mov al, [0x8d148d48000000]; add [rax], al; add [rax+0x29], cl; ret far; 
0x00000000103319: mov al, [0x9824a48944000000]; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000008a67c: mov al, [0xb74c08548ffffff]; pop rbx; ret; 
0x0000000015703f: mov al, [0xc700000000000000]; sub byte ptr [rax], 0x0; add [rax], al; add rsp, 0x8; ret; 
0x0000000007f596: mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x0000000014bb48: mov al, [0xe9c11c8948000000]; ret; 
0x000000001759c9: mov al, [0xef894c006a000003]; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x000000001b6458: mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b5f88: mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x00000000167928: mov al, [0xffa0dd058d4cffff]; push qword ptr [rcx]; in eax, dx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000006c63a: mov al, [0xfffae0b58bfffffa]; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000014704b: mov al, [0xfffb70b5fffffffb]; call qword ptr [rbx-0x18]; 
0x000000001af266: mov al, [0xfffe56870fc0f983]; jmp qword ptr [rdx-0x1f]; 
0x000000000a0949: mov al, [0xffff63e9ffcc8341]; jmp qword ptr [rsi+0x66]; 
0x00000000091a7e: mov al, [0xffffff2443c70018]; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001471d0: mov al, [0xffffffb841fffffb]; jmp qword ptr [rbx+rcx*4]; 
0x0000000011fed2: mov al, [rax]; add [rax], al; mov rdi, [r13]; call rbx; 
0x000000001142e5: mov al, [rax]; add [rax], al; syscall; 
0x000000001918d2: mov al, [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018fa06: mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000bc80b: mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x0000000018fa34: mov al, [rcx+0x4]; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000bc839: mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000000bc8bd: mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x00000000083a02: mov al, [rcx]; add [rax], al; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000018f9e0: mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000bc7e5: mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x000000000c6d3a: mov al, [rdi+0xde80011]; xor edi, esi; jmp qword ptr [rsi+0x2e]; 
0x000000001b0832: mov al, [rdx]; add [rax], al; ret; 
0x00000000173ce2: mov al, [rsi-0x15]; call far fword ptr [rbx+0x44]; 
0x0000000019a3b0: mov al, ch; stc; je short 0x000000000019a376; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019ba50: mov al, ch; stc; je short 0x000000000019ba16; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000018fa44: mov ax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000bc859: mov ax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x000000000bc8dd: mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x0000000018f9f0: mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x000000000bc7f5: mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x000000000dd724: mov bh, 0x13; add [rcx+0x5bc03110], cl; ret; 
0x000000001b01a1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x0000000019fe11: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000001b0931: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001a04f1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b2c61: mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019ec11: mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000182d91: mov bh, 0x16; mov [rdi], dx; ret; 
0x0000000019e381: mov bh, 0x16; mov [rdi], dx; vzeroupper; ret; 
0x0000000008ef03: mov bh, 0x18; add [rbp+0x15890150], cl; ret far; 
0x00000000114c9e: mov bh, 0x1; add [rax], al; syscall; 
0x0000000007dd59: mov bh, 0x48; add esi, edi; notrack jmp rsi; 
0x000000001a4888: mov bh, 0x48; lea eax, [rdi+0x7]; ret; 
0x0000000015e267: mov bh, 0x48; mov eax, [rbp+0x8]; mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000154d43: mov bh, 0x48; shr ecx, 0x3; add rax, rdi; notrack jmp rax; 
0x0000000008aa0d: mov bh, 0x4; add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000012e0b9: mov bh, 0x4; and al, 0x10; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000039f43: mov bh, 0x4; js short 0x0000000000039eca; loopne 0x0000000000039f51; ret; 
0x00000000039f83: mov bh, 0x4; js short 0x0000000000039f0a; loopne 0x0000000000039f8b; ret; 
0x0000000003a023: mov bh, 0x4; js short 0x0000000000039faa; loopne 0x000000000003a02d; ret; 
0x00000000039fa3: mov bh, 0x4; js short 0x0000000000039fcc; add [rax], cl; add [rax], al; ret; 
0x00000000039fc3: mov bh, 0x4; js short 0x0000000000039fec; add [rdx], al; add [rax], al; ret; 
0x0000000003a043: mov bh, 0x4; js short 0x000000000003a06c; add [rax], ah; add [rax], al; ret; 
0x0000000003a103: mov bh, 0x4; js short 0x000000000003a08a; loopne 0x000000000003a10a; ret; 
0x0000000003a063: mov bh, 0x4; js short 0x000000000003a08c; add [rcx], al; add [rax], al; ret; 
0x0000000003a083: mov bh, 0x4; js short 0x000000000003a0ac; add [rax], dl; add [rax], al; ret; 
0x0000000003a19c: mov bh, 0x4; js short 0x000000000003a123; loopne 0x000000000003a1a3; ret; 
0x0000000003a1bc: mov bh, 0x4; js short 0x000000000003a143; loopne 0x000000000003a1ca; ret; 
0x0000000003a1fc: mov bh, 0x4; js short 0x000000000003a183; loopne 0x000000000003a204; ret; 
0x0000000003a29c: mov bh, 0x4; js short 0x000000000003a223; loopne 0x000000000003a2a6; ret; 
0x0000000003a21c: mov bh, 0x4; js short 0x000000000003a245; add [rax], cl; add [rax], al; ret; 
0x0000000003a23c: mov bh, 0x4; js short 0x000000000003a265; add [rdx], al; add [rax], al; ret; 
0x0000000003a2bc: mov bh, 0x4; js short 0x000000000003a2e5; add [rax], ah; add [rax], al; ret; 
0x0000000003a2dc: mov bh, 0x4; js short 0x000000000003a305; add [rcx], al; add [rax], al; ret; 
0x0000000003a2fc: mov bh, 0x4; js short 0x000000000003a325; add [rax], dl; add [rax], al; ret; 
0x0000000012a51c: mov bh, 0x4; push rax; and eax, 0x1000; ret; 
0x0000000012a484: mov bh, 0x4; push rax; and eax, 0x100; ret; 
0x00000000129f9c: mov bh, 0x4; push rax; and eax, 0x1; ret; 
0x0000000012a3ec: mov bh, 0x4; push rax; and eax, 0x2000; ret; 
0x0000000012a16c: mov bh, 0x4; push rax; and eax, 0x200; ret; 
0x0000000012a03c: mov bh, 0x4; push rax; and eax, 0x2; ret; 
0x0000000012a2ac: mov bh, 0x4; push rax; and eax, 0x4000; ret; 
0x00000000129efc: mov bh, 0x4; push rax; and eax, 0x400; ret; 
0x0000000012a34c: mov bh, 0x4; push rax; and eax, 0x4; ret; 
0x0000000012a20c: mov bh, 0x4; push rax; and eax, 0x8000; ret; 
0x00000000129e5c: mov bh, 0x4; push rax; and eax, 0x8; ret; 
0x00000000133c07: mov bh, 0x4; push rax; shr ax, 0xe; and eax, 0x1; ret; 
0x000000000b15bf: mov bh, 0x4c; and al, 0xec; mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b140f: mov bh, 0x54; and al, 0xc; mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000000b14d7: mov bh, 0x54; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000da06c: mov bh, 0x59; adc [rcx+0x29], al; ret; 
0x00000000051338: mov bh, 0x5; ret; 
0x0000000016cae1: mov bh, 0x6; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016bab1: mov bh, 0x6; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000112fc5: mov bh, 0x7; mov [rsi], ax; xor eax, eax; ret; 
0x000000000d22ce: mov bh, 0x83; ret; 
0x0000000007a751: mov bh, 0x9d; pop rax; idiv edi; jmp qword ptr [rsi-0x77]; 
0x0000000005a12c: mov bh, 0xb0; add eax, [rax]; add [rdi+0x3004], bh; mov eax, 0x9e; syscall; 
0x0000000014e585: mov bh, 0xc0; add rsp, 0x28; ret; 
0x000000001b7b35: mov bh, 0xc2; add al, [rax]; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x000000001367ec: mov bh, 0xc6; or eax, edi; bswap eax; ret; 
0x000000000c5b3d: mov bh, 0xd; add [rbp-0x5e], dh; ret; 
0x000000001b01b1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001b13b1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019e391: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000001b3ae1: mov bh, 0xe; movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x0000000010eb9d: mov bh, 0xf; or eax, 0xb2aae800; bnd jmp qword ptr [rsi+0x2e]; 
0x000000001699fc: mov bh, 0xfa; jmp qword ptr [rsi-0x7d]; 
0x0000000015afb1: mov bh, 0xfd; jmp qword ptr [rsi+0x66]; 
0x0000000006f4bb: mov bh, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000128180: mov bh, 0xff; lea rax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x0000000006a6e3: mov bh, bh; jmp qword ptr [rsi+0x2e]; 
0x0000000009857b: mov bh, bh; jmp qword ptr [rsi-0x70]; 
0x000000000c3946: mov bh, bl; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001a29f6: mov bh, bl; shr eax, 0x2; vzeroupper; ret; 
0x000000001136cd: mov bh, ch; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x00000000126f68: mov bl, 0x0; add [rax], al; syscall; 
0x000000001a617e: mov bl, 0x0; add [rax], al; xor eax, eax; ret; 
0x000000001269e7: mov bl, 0x1; add [rax], al; syscall; 
0x0000000014966c: mov bl, 0x41; mov byte ptr [rcx], 0x0; ret; 
0x00000000076bc8: mov bl, 0x48; lea ebx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d68: mov bl, 0x48; lea ebx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c726: mov bl, 0x48; lea ebx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7de: mov bl, 0x48; lea ebx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a90: mov bl, 0x48; lea ebx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dc1: mov bl, 0x48; lea ebx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e1a: mov bl, 0x48; lea ebx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b844: mov bl, 0x48; lea ebx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b88e: mov bl, 0x48; lea ebx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d6: mov bl, 0x48; lea ebx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b926: mov bl, 0x48; lea ebx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076192: mov bl, 0x48; lea ebx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076282: mov bl, 0x48; lea ebx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb14: mov bl, 0x48; lea ebx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb68: mov bl, 0x48; lea ebx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bbb6: mov bl, 0x48; lea ebx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076378: mov bl, 0x48; lea ebx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc12: mov bl, 0x48; lea ebx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076442: mov bl, 0x48; lea ebx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000187bde: mov bl, 0x4; add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000007a67e: mov bl, 0x4c; mov eax, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074baa: mov bl, 0x4c; mov eax, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000001afec7: mov bl, 0x7d; and [rdi], bh; ret; 
0x000000001b4bb1: mov bl, 0x7d; and [rdi], bl; ret; 
0x000000001666a1: mov bl, 0x88; add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [rax+0x28]; 
0x000000001134eb: mov bl, 0xa0; add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x00000000090571: mov bl, 0xa4; sbb [rax], al; push r10; call rax; 
0x00000000094a22: mov bl, 0xf0; or [rax], al; add [rax+0xe], bh; syscall; 
0x0000000009d01b: mov bl, 0xf8; dec dword ptr [rax-0x77]; ret; 
0x000000001b56c0: mov bl, 0xf; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x0000000005d59c: mov bl, 0xfc; call qword ptr [rax-0x5e1f00d]; 
0x0000000016b3ce: mov bl, 0xfc; jmp qword ptr [rsi+0x66]; 
0x0000000013b404: mov bl, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000016fbf9: mov bl, ch; dec dword ptr [rax-0x77]; ret; 
0x00000000091262: mov byte ptr [0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000090bdf: mov byte ptr [0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000000b1164: mov byte ptr [r11], 0x0; mov [r10], rdi; mov rax, r12; pop r12; ret; 
0x0000000011bf4b: mov byte ptr [r12], 0x0; mov rax, r12; pop r12; ret; 
0x00000000142fbc: mov byte ptr [r8+0x2], 0x0; ret; 
0x000000000f416e: mov byte ptr [r8+0x8], 0x1; mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x000000000b1107: mov byte ptr [r8], 0x0; mov [rdi], rax; mov rax, r9; ret; 
0x00000000149b52: mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000149b66: mov byte ptr [r8], 0x0; ret; 
0x0000000014966d: mov byte ptr [r9], 0x0; ret; 
0x00000000142fbd: mov byte ptr [rax+0x2], 0x0; ret; 
0x000000000a02be: mov byte ptr [rax+0x75], 0x2e; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000001a5d97: mov byte ptr [rax+0x75], 0xc5; movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x000000000f4180: mov byte ptr [rax+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000f4136: mov byte ptr [rax+0x8], 0x16; mov eax, 0x1; ret; 
0x000000000f4108: mov byte ptr [rax+0x8], 0x19; mov eax, 0x1; ret; 
0x000000000f419b: mov byte ptr [rax+0x8], 0x1; mov [rax], dl; mov eax, 0x1; ret; 
0x000000000f416f: mov byte ptr [rax+0x8], 0x1; mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x000000000f4125: mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000f41b0: mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000f41c0: mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000f41d5: mov byte ptr [rax+0x8], 0x1e; mov eax, 0x2; ret; 
0x00000000090af2: mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000019688a: mov byte ptr [rax+rax], 0x4f; movsxd ecx, [rdx+rcx*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000005169f: mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000002d0b7: mov byte ptr [rax-0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000b1538: mov byte ptr [rax], 0x0; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1108: mov byte ptr [rax], 0x0; mov [rdi], rax; mov rax, r9; ret; 
0x00000000149b53: mov byte ptr [rax], 0x0; mov rax, r10; ret; 
0x0000000012573e: mov byte ptr [rax], 0x0; mov rax, r12; pop r12; ret; 
0x000000000b1488: mov byte ptr [rax], 0x0; ret; 
0x000000000a82b8: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8274; ret; 
0x000000000a83c8: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8384; ret; 
0x000000000a8478: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8434; ret; 
0x000000000a8888: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8844; ret; 
0x000000000a89b8: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8974; ret; 
0x000000000a9a38: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac8: mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a9a84; ret; 
0x000000000f4173: mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x00000000112fdb: mov byte ptr [rax], 0xff; jne short 0x0000000000112fe5; mov [rdi], si; xor eax, eax; ret; 
0x00000000091053: mov byte ptr [rbp+0x31], 0xc0; syscall; 
0x0000000009132c: mov byte ptr [rbp+0x31], 0xd2; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000009a1c1: mov byte ptr [rbp+0x31], 0xd2; shl esi, 0x7; xor sil, 0x81; syscall; 
0x00000000128b9f: mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x00000000128b98: mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x00000000045536: mov byte ptr [rbx*1-0x1cc6b400], 0x73; or al, 0x90; call qword ptr [rbx]; 
0x00000000122de9: mov byte ptr [rbx+0x148], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000122bf5: mov byte ptr [rbx+0x70], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000122b19: mov byte ptr [rbx+0x88], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000092746: mov byte ptr [rbx+0xf6640c8], 0x6e; enter 0xc031, 0x66; punpckldq mm0, mm1; movq [rdi+0x4], xmm0; ret; 
0x000000001504f6: mov byte ptr [rbx], 0x0; add [rax-0x75], cl; adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x000000000b1165: mov byte ptr [rbx], 0x0; mov [r10], rdi; mov rax, r12; pop r12; ret; 
0x00000000144830: mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x0000000004e7db: mov byte ptr [rcx+0xf], 0x95; ret; 
0x0000000011aec8: mov byte ptr [rcx+rcx*4-0x6], 0x4c; mov esi, ebp; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b028: mov byte ptr [rcx+rcx*4-0x6], 0x4c; mov esi, ebp; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000000b1048: mov byte ptr [rcx-0x1], 0x0; mov [rdx], rcx; ret; 
0x000000000ba726: mov byte ptr [rcx], 0x0; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000014966e: mov byte ptr [rcx], 0x0; ret; 
0x000000000ee293: mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000142e0e: mov byte ptr [rcx], 0xeb; out 0x66, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001b2c55: mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000019ec05: mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000001b01b6: mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x0000000019fe26: mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b13b6: mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b39b6: mov byte ptr [rdi+0x2], 0x0; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x0000000019e396: mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000001b2d4e: mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000019ecd6: mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x000000001b2db3: mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000019ed2b: mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x0000000005a1ba: mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000f4140: mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x00000000156da7: mov byte ptr [rdi+0xbc], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x000000001b2c82: mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000019ec32: mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001b2c83: mov byte ptr [rdi+rax], 0x0; ret; 
0x0000000019ec33: mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x00000000142d1e: mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000001b0121: mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x0000000019fd91: mov byte ptr [rdi], 0x0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000011d310: mov byte ptr [rdi], 0x0; mov rax, rdi; mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000013b77b: mov byte ptr [rdi], 0x0; pop r12; ret; 
0x000000001b1321: mov byte ptr [rdi], 0x0; ret; 
0x000000001b37dd: mov byte ptr [rdi], 0x0; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000019e301: mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001aa785: mov byte ptr [rdi], 0x0; xtest; je short 0x00000000001aa791; vzeroall; ret; 
0x000000001aab35: mov byte ptr [rdi], 0x0; xtest; je short 0x00000000001aab41; vzeroall; ret; 
0x000000001ab3f5: mov byte ptr [rdi], 0x0; xtest; je short 0x00000000001ab401; vzeroall; ret; 
0x0000000009284b: mov byte ptr [rdx+0x90], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000121f47: mov byte ptr [rdx], 0x0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x0000000012e9f2: mov byte ptr [rdx], 0x20; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012e9a8: mov byte ptr [rdx], 0xa; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000011d316: mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000155b7b: mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b2b: mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155ad4: mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a7d: mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a26: mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x0000000011d2a6: mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000003e40e: mov byte ptr [rsi], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000007533e: mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000075e71: mov byte ptr [rsp+0x38], 0x20; mov rbx, rcx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x000000000951b7: mov byte ptr [rsp+0x8e], 0x0; mov rdx, r15; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000951c9: mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000011bf4c: mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x00000000091261: mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000090bde: mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x00000000043743: mov ch, 0x0; add [rax], al; add [rax-0x77], cl; ret far; 
0x00000000120ce7: mov ch, 0x0; add [rax], al; mov rdi, [r13]; call rbx; 
0x000000000a4f77: mov ch, 0x17; add [rax], al; jne short 0x00000000000a4f80; ret; 
0x000000001bb257: mov ch, 0x59; idiv bh; mov qword ptr [rip+0x5f822], 0x0; add rsp, 0x8; ret; 
0x00000000042d57: mov ch, 0x60; sbb eax, 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000074d42: mov ch, 0x68; idiv edi; jmp qword ptr [rsi-0x77]; 
0x0000000019d4c9: mov ch, 0x74; fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x000000001a2490: mov ch, 0x76; fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x00000000136887: mov ch, 0x9f; call far fword ptr [rax+0x4c]; 
0x0000000008f4c7: mov ch, 0xb1; sbb [rax], al; ret; 
0x00000000177f57: mov ch, 0xe; or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000007814b: mov ch, 0xf0; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000011f40d: mov ch, 0xf; add [rcx+0x5d], bl; pop r12; pop r13; ret; 
0x00000000095e4d: mov ch, 0xff; dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x0000000013b144: mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000176ec2: mov ch, [rdi]; in al, dx; jmp qword ptr [rsi+0x2e]; 
0x00000000171390: mov ch, ah; jmp qword ptr [rsi+0x66]; 
0x000000001137fc: mov ch, bh; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x000000000d83a0: mov ch, dh; and ch, 0xf; je short 0x00000000000d83c0; add rax, 0x2; ret; 
0x00000000138b69: mov ch, dh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000115039: mov cl, 0x0; add [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000126d55: mov cl, 0x0; add [rax], al; syscall; 
0x00000000049b8e: mov cl, 0x0; add [rbp-0x76b3d7b5], cl; loopne 0x0000000000049b1b; ret; 
0x00000000103873: mov cl, 0x14; or eax, 0xd0894800; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000137419: mov cl, 0x15; mov [rsi-0x7af0fff2], esp; ret far; 
0x0000000008eee6: mov cl, 0x15; ret far; 
0x00000000044dff: mov cl, 0x15; ret; 
0x00000000090de9: mov cl, 0x17; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x0000000009cd92: mov cl, 0x17; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x000000000a96f2: mov cl, 0x1; add [rax-0x73], cl; add eax, 0x1b304; cmove rax, rdx; ret; 
0x00000000168c23: mov cl, 0x1; or eax, [rax]; pop rbx; ret; 
0x0000000011bb2b: mov cl, 0x4f; idiv edi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000096567: mov cl, 0x54; and al, 0xf8; ret; 
0x0000000009cd5c: mov cl, 0x55; add [rbp+0x7], dh; xor eax, eax; pop rbp; ret; 
0x000000001467f9: mov cl, 0x8b; test [rdi+rdi*8-0x1], esp; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000004e17e: mov cl, 0xa7; std; jmp qword ptr [rsi+0xf]; 
0x000000000967dc: mov cl, 0xa; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x00000000090f7f: mov cl, 0xa; setne al; movzx eax, al; ret; 
0x0000000016ab6b: mov cl, 0xbb; cld; call qword ptr [rax-0x5e1f00d]; 
0x0000000016986b: mov cl, 0xce; cld; call qword ptr [rax-0x5e1f00d]; 
0x00000000174654: mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x00000000147f32: mov cl, 0xeb; sub eax, 0xffffffe6; out 0xfe, eax; jmp qword ptr [rsi+0xf]; 
0x000000000d6e74: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e94: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb4: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed4: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x0000000009c061: mov cl, 0xf; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009be5d: mov cl, 0xf; mov eax, 0x10; cmove eax, ecx; ret; 
0x0000000015b5da: mov cl, 0xfd; jmp qword ptr [rsi-0x70]; 
0x00000000096619: mov cl, 0xff; call qword ptr [rax+0x24448b48]; 
0x00000000073062: mov cl, [rax+0x1]; sar dword ptr [rsi], 0x1; jmp rcx; 
0x000000001bb962: mov cl, [rbp+0x6]; add al, ch; add eax, 0x5bffe6ca; mov qword ptr [rip+0x64d79], 0x0; ret; 
0x0000000012a5e4: mov cl, [rbx-0x367acef4]; jne short 0x000000000012a5f0; ret; 
0x0000000012ae2b: mov cl, [rbx-0x367acef4]; jne short 0x000000000012ae38; ret; 
0x0000000012ae88: mov cl, [rbx-0x367acef4]; jne short 0x000000000012ae98; ret; 
0x000000000b7c05: mov cl, [rbx-0x37d67dfc]; ret; 
0x000000000b1a34: mov cl, [rdi-0x73]; adc al, 0xa; notrack jmp r10; 
0x000000000c2284: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a64: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000c0b38: mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c0c39: mov cl, [rsi+0x20]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000001b3b7d: mov cl, [rsi+0x40]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001a3f64: mov cl, [rsi]; mov [rdi], cl; ret; 
0x00000000079fac: mov cl, ch; jrcxz 0x0000000000079faf; inc dword ptr [rcx]; ret; 
0x000000000d838b: mov cl, dl; and cl, 0xf; je short 0x00000000000d83b0; ret; 
0x000000001a3f52: mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000001a3f51: mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000000c1434: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a4: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd84: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000bfe68: mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x0000000017cdc4: mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x00000000182d24: mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x000000000c12d0: mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000bfc90: mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000c0980: mov cx, [rsi]; mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x0000000008d9e1: mov dh, 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008a087: mov dh, 0x0; ret; 
0x000000000404e9: mov dh, 0x11; test dl, dl; jne short 0x00000000000404c8; ret; 
0x000000001b0921: mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001a04e1: mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000001b2c51: mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000019ec01: mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x00000000182e01: mov dh, 0x16; mov [rdi], dl; ret; 
0x0000000019f7b1: mov dh, 0x16; mov [rdi], dl; vzeroupper; ret; 
0x000000000b52e5: mov dh, 0x16; sub eax, edx; ret; 
0x0000000008b746: mov dh, 0x1; add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000154dcc: mov dh, 0x2; add eax, esi; sub rcx, 0x1; jne short 0x0000000000154d58; ret; 
0x0000000008df1b: mov dh, 0x31; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000008dea8: mov dh, 0x31; lea rbx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x000000000b103a: mov dh, 0x31; test sil, sil; jne short 0x00000000000b1030; mov [rdx], rcx; ret; 
0x0000000005a434: mov dh, 0x42; add [rax-0x72b7febf], ecx; add cl, [rcx+0x39]; ret; 
0x0000000014d171: mov dh, 0x42; add al, [rbx+0x283c78e0]; jne short 0x000000000014d157; mov eax, 0x1; ret; 
0x0000000005a444: mov dh, 0x42; add cl, [rax-0x72b7fdbf]; add ecx, [rcx+0x39]; ret; 
0x00000000040401: mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000001b1b3a: mov dh, 0x44; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000000ee28b: mov dh, 0x46; add al, [rbx-0x7cb7fd37]; mov byte ptr [rcx], 0xe9; cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000788fa: mov dh, 0x46; or al, 0x83; ret; 
0x000000000f025a: mov dh, 0x47; add [rax-0x7d], ecx; mov dword ptr [rcx], 0x9c75c084; xor eax, eax; ret; 
0x00000000062d9f: mov dh, 0x47; add [rsi+0xf], esp; insb [rdi], dx; ret; 
0x000000001a5d51: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001069c7: mov dh, 0x47; cmp [rbx-0x377c0620], al; add cl, [rax+0x16893847]; movups [rsi+0x8], xmm0; ret; 
0x000000001a5d41: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d31: mov dh, 0x47; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d21: mov dh, 0x47; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x00000000073373: mov dh, 0x47; or al, 0x83; ret; 
0x00000000076ed8: mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x000000000b15e0: mov dh, 0x4c; and al, 0xe; mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15a7: mov dh, 0x4c; and al, 0xf4; mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1579: mov dh, 0x4c; and al, 0xfa; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000001320ac: mov dh, 0x53; add [rax-0x73], ecx; add [r8-0x77], ecx; ret; 
0x000000001313f1: mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x000000000b1430: mov dh, 0x54; and al, 0x16; mov [rax+0x6], dl; add rax, rcx; ret; 
0x000000000b14f0: mov dh, 0x54; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000b13f7: mov dh, 0x54; and al, 0xf4; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14bf: mov dh, 0x54; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000b13d9: mov dh, 0x54; and al, 0xfa; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a1: mov dh, 0x54; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000001b1b3f: mov dh, 0x54; cmp ah, [rax]; sub eax, edx; ret; 
0x00000000198ca6: mov dh, 0x54; cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x000000001756ea: mov dh, 0x56; add eax, 0x840fd284; ret far; 
0x000000001a5d55: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000001a5d45: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000001a5d25: mov dh, 0x56; sub eax, edx; ret; 
0x000000001a5d35: mov dh, 0x56; sub eax, edx; ret; 
0x00000000104c7d: mov dh, 0x56; xor [rcx+0x63], cl; adc al, 0x97; add rdx, r15; notrack jmp rdx; 
0x000000000ff5f2: mov dh, 0x58; cmp dh, dh; ret; 
0x000000000ae4f2: mov dh, 0x5c; add [rdx+0x38], eax; pop rsp; syscall; 
0x000000001623c6: mov dh, 0x5f; in al, dx; jmp qword ptr [rsi+0xf]; 
0x0000000016cc01: mov dh, 0x6; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000001053a5: mov dh, 0x72; or [rcx+0x63], cl; xor al, 0xb0; add rsi, r8; notrack jmp rsi; 
0x00000000077349: mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x00000000077331: mov dh, 0x76; add [rax-0x7d], ecx; ret; 
0x000000000f3181: mov dh, 0x78; add [rbp+rcx*4+0x68], ecx; add [rax-0x80], eax; jmp far fword ptr [rsi]; 
0x00000000076ec1: mov dh, 0x79; add [rax-0x7d], ecx; ret; 
0x000000001a2d66: mov dh, 0x7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000b52e2: mov dh, 0x7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000b2de4: mov dh, 0x7; sub eax, ecx; ret; 
0x00000000199304: mov dh, 0x7; sub eax, ecx; vzeroupper; ret; 
0x0000000004775a: mov dh, 0x7b; add [rax-0x7d], ecx; ret; 
0x0000000016ca66: mov dh, 0x9c; cld; jmp qword ptr [rsi+0xf]; 
0x0000000016d30e: mov dh, 0xc0; add rsp, 0x18; ret; 
0x00000000116116: mov dh, 0xc0; add rsp, 0x58; ret; 
0x00000000160ba5: mov dh, 0xc0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009d59b: mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x000000000d6b54: mov dh, 0xc0; lea eax, [rax+rax-0x1]; ret; 
0x000000000ed17f: mov dh, 0xc0; lea rax, [rax+rax-0x1]; ret; 
0x0000000009125c: mov dh, 0xc0; mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000090bd9: mov dh, 0xc0; mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x0000000008c2c3: mov dh, 0xc0; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000010f8fb: mov dh, 0xc0; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x0000000003c479: mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000dd993: mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000062f82: mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ded93: mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000108e15: mov dh, 0xc0; neg eax; ret; 
0x00000000160895: mov dh, 0xc0; pop r12; ret; 
0x00000000106a76: mov dh, 0xc0; pop rbp; pop r12; pop r13; ret; 
0x0000000015f6e4: mov dh, 0xc0; pop rbp; pop r12; ret; 
0x0000000011ce7e: mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000042f60: mov dh, 0xc0; ret; 
0x000000000b5305: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000116303: mov dh, 0xc0; sbb eax, 0x0; ret; 
0x00000000116e54: mov dh, 0xc0; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x0000000009d532: mov dh, 0xc0; sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000008cea4: mov dh, 0xc3; pop rbx; pop rbp; pop r12; ret; 
0x0000000016bbb2: mov dh, 0xc5; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000c5042: mov dh, 0xc6; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x00000000136809: mov dh, 0xc6; or eax, edi; bswap eax; ret; 
0x0000000002d0b6: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000014d4d6: mov dh, 0xc8; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000001b78e4: mov dh, 0xcf; add rax, rcx; notrack jmp rax; 
0x000000000e0f9c: mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000e101a: mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000003ff46: mov dh, 0xd2; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x0000000007d3e1: mov dh, 0xd2; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000007d494: mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000b530b: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000125629: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000630fe: mov dh, 0xdb; mov r10, [rbp-0x610]; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x00000000063a3b: mov dh, 0xdb; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7abb: mov dh, 0xe4; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000000f7a07: mov dh, 0xe4; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x00000000165ead: mov dh, 0xe8; insd [rdi], dx; or ch, bh; jmp qword ptr [rsi+0x66]; 
0x000000000b2de1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000199301: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2d69: mov dh, 0xe; sub eax, ecx; ret; 
0x00000000175e8b: mov dh, 0xed; jmp qword ptr [rsi-0x70]; 
0x0000000012ccb0: mov dh, 0xef; jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000014d3bf: mov dh, 0xf0; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000c5d5c: mov dh, 0xf3; call rbp; 
0x000000000f7b45: mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000519bf: mov dh, 0xf6; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x000000001367a1: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000016d567: mov dh, 0xff; dec dword ptr [rax-0x75]; cmp [rax-0x77], cl; ret; 
0x0000000016d5a3: mov dh, 0xff; dec dword ptr [rax-0x77]; ret; 
0x0000000014e6fb: mov dh, 0xff; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000012805f: mov dh, dh; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000001282c1: mov dh, dh; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000001a29f5: mov dil, r11b; shr eax, 0x2; vzeroupper; ret; 
0x00000000126f38: mov dl, 0x0; add [rax], al; syscall; 
0x00000000045b3e: mov dl, 0x0; add [rax], al; xor esi, esi; mov rdi, r8; call rax; 
0x000000000b7d6e: mov dl, 0x11; add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000c52b7: mov dl, 0x15; add [rcx], al; xor eax, eax; ret; 
0x0000000011b51b: mov dl, 0x1; add [rsi-0x70], ah; endbr64; mov eax, 0xaa; syscall; 
0x000000001918aa: mov dl, 0x3; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000012a5f8: mov dl, 0x3; add al, 0xa; ret; 
0x000000000eca36: mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000001b47d1: mov dl, 0x65; and [rdi], ah; ret far; 
0x000000001b5b57: mov dl, 0x65; and [rdi], ah; ret; 
0x000000001b1b21: mov dl, 0x65; and [rsi], ah; ret far; 
0x000000001aeacb: mov dl, 0x65; and [rsi], ah; ret; 
0x0000000015b67a: mov dl, 0x67; lock dec dword ptr [rax-0x77]; ret; 
0x0000000006d688: mov dl, 0x78; add [rax], eax; add [rcx-0x7d], cl; ret; 
0x000000001348a2: mov dl, 0x7; add [rax-0x73], cl; add eax, 0x7b264; cmove rax, rdx; ret; 
0x00000000167459: mov dl, 0x7; add [rdi], cl; sub [rsp+0x20], eax; call qword ptr [rax+0x28]; 
0x000000000a898a: mov dl, 0x8f; add [rax], al; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x0000000015cd6a: mov dl, 0x99; std; jmp qword ptr [rsi-0x70]; 
0x000000000edc3a: mov dl, 0xa7; sti; jmp qword ptr [rsi-0x70]; 
0x0000000015a66a: mov dl, 0xc0; std; jmp qword ptr [rsi-0x70]; 
0x0000000010eba3: mov dl, 0xf2; jmp qword ptr [rsi+0x2e]; 
0x000000000ed214: mov dl, 0xf3; dec dword ptr [rax-0x77]; ret; 
0x0000000016b504: mov dl, 0xfc; jmp qword ptr [rsi+0xf]; 
0x0000000015b441: mov dl, 0xfd; jmp qword ptr [rsi+0x66]; 
0x000000000a5cd7: mov dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000e7e54: mov dl, [rbx]; add al, ch; and al, 0x95; cli; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000a03ac: mov dl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000053b82: mov dl, [rdx+0x1c]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000c0ab7: mov dl, [rsi+0x14]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000c2113: mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000c0983: mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000c2142: mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000c09a2: mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000c2193: mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000c09e3: mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x0000000017ca00: mov dl, [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000000c20f0: mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000000c0960: mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000c3d50: mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+0x1], ch; ret; 
0x0000000014b102: mov dl, bl; in eax, dx; dec dword ptr [rax+0x39]; ret; 
0x00000000111627: mov dl, dh; jmp qword ptr [rsi+0xf]; 
0x00000000111626: mov dl, dh; jmp qword ptr [rsi+0xf]; 
0x00000000107294: mov dl, dh; std; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000164b8e: mov ds, [rbx]; std; jmp qword ptr [rsi+0x66]; 
0x000000001b8b28: mov ds, [rdi*8-0x72be0001]; ret; 
0x0000000011ac4e: mov ds, [rsi-0x9]; dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x28; ret; 
0x0000000004cd27: mov ds, [rsi]; or [rax], al; add [rcx-0x77], cl; ret far; 
0x00000000102277: mov ds, bx; or eax, [rax]; add [rbx-0x7bf0fe08], al; ret; 
0x000000000996ff: mov dword ptr [0x2f0], 0x0; nop; xor eax, eax; ret; 
0x000000001685c8: mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000016880b: mov dword ptr [r13], 0xe; lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000092b13: mov dword ptr [r8+0x10], 0x0; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000091c89: mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x000000000918c3: mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001563b9: mov dword ptr [r8+0xc0], 0x0; movups [r8+0xc8], xmm0; mov rax, r8; add rsp, 0x8; ret; 
0x00000000092eea: mov dword ptr [r8+rdx*4+0x8], 0x0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x00000000092b23: mov dword ptr [r8], 0x0; syscall; 
0x00000000092b14: mov dword ptr [rax+0x10], 0x0; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x000000001290bf: mov dword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x000000000913e1: mov dword ptr [rax+0x10c0], 0x0; ret; 
0x0000000015f6b8: mov dword ptr [rax+0x23b0], 0x1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000091c8a: mov dword ptr [rax+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x0000000019d386: mov dword ptr [rax+0x3a], 0xe8750734; add rax, rdi; vzeroupper; ret; 
0x000000000620a2: mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000084413: mov dword ptr [rax+0x50], 0x0; movups [rax+0x40], xmm0; pop rbx; ret; 
0x000000000918c4: mov dword ptr [rax+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000019d4f6: mov dword ptr [rax+0x7343a40], 0x1480775; clc; vzeroupper; ret; 
0x000000001a24c6: mov dword ptr [rax+0x7507343b], 0xf8014807; vzeroupper; ret; 
0x00000000149d41: mov dword ptr [rax+0x8], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000008e6c0: mov dword ptr [rax+0x8], 0x0; ret; 
0x000000000a80a3: mov dword ptr [rax+0x8], 0x0; xor eax, eax; mov [r8], rsi; ret; 
0x000000001290b7: mov dword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x000000000b12c5: mov dword ptr [rax+0x8], 0x39e575fe; enter 0xe174, 0x4c; mov eax, eax; ret; 
0x00000000157032: mov dword ptr [rax+0x98], 0x0; mov qword ptr [rax+0xa0], 0x0; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x0000000015703d: mov dword ptr [rax+0xa0], 0x0; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x00000000157047: mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x000000001563ba: mov dword ptr [rax+0xc0], 0x0; movups [r8+0xc8], xmm0; mov rax, r8; add rsp, 0x8; ret; 
0x00000000156f2c: mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000001b7173: mov dword ptr [rax+rcx*2], 0xe900d283; shl ch, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000092eeb: mov dword ptr [rax+rdx*4+0x8], 0x0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000001b1396: mov dword ptr [rax-0x17], 0xffffff4c; nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000003f342: mov dword ptr [rax], 0x0; mov [rax+0x4], ebx; pop rbx; ret; 
0x0000000008e6b9: mov dword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000000903dd: mov dword ptr [rax], 0x0; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x0000000016d581: mov dword ptr [rax], 0x0; pop rbx; ret; 
0x00000000092b24: mov dword ptr [rax], 0x0; syscall; 
0x00000000155078: mov dword ptr [rax], 0x16; mov eax, 0x16; ret; 
0x00000000118bd8: mov dword ptr [rax], 0x16; mov eax, 0x1; ret; 
0x000000001724bc: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000000424b8: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042448: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000011faa8: mov dword ptr [rax], 0x16; ret; 
0x000000000d8e48: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000004209b: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000041382: mov dword ptr [rax], 0x22; add rsp, 0x8; ret; 
0x00000000042f8c: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001271bc: mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000122488: mov dword ptr [rax], 0x2; xor eax, eax; ret; 
0x00000000040788: mov dword ptr [rax], 0x2a; mov rax, r10; ret; 
0x0000000009c550: mov dword ptr [rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000d8d2b: mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000d8e28: mov dword ptr [rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x000000001221e5: mov dword ptr [rax], 0x50f0000; cmp rax, 0xfffffffffffff001; jae short 0x00000000001221f4; ret; 
0x00000000046d98: mov dword ptr [rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000149628: mov dword ptr [rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000007f5d4: mov dword ptr [rax], 0x89480000; ret; 
0x000000000407e8: mov dword ptr [rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002a538: mov dword ptr [rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000009cda8: mov dword ptr [rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000011a9f8: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000011fa61: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000a4118: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000016a206: mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000149de6: mov dword ptr [rbp+0x210], 0xffffffff; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008e7ef: mov dword ptr [rbp+0x48], 0x0; test byte ptr [rbp], 0x80; jne short 0x000000000008e810; pop rbp; ret; 
0x000000000f01d4: mov dword ptr [rbp+0x8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a0983: mov dword ptr [rbp+rbx*8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000128b8e: mov dword ptr [rbp-0x7d0], 0x0; mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x00000000133331: mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x00000000163b21: mov dword ptr [rbp], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x00000000099f7f: mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000016880c: mov dword ptr [rbp], 0xe; lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000035e02: mov dword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x0000000016a594: mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x000000000c5144: mov dword ptr [rbx+0x167308fa], 0x7304fa83; sbb al, [rbx+0x1c7701fa]; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x0000000015d5d5: mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000016d0f6: mov dword ptr [rbx+0x18], 0x0; pop rbx; ret; 
0x0000000015d556: mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000015f64c: mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000015b96f: mov dword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001060bf: mov dword ptr [rbx+0x28], 0x0; pop rbx; ret; 
0x0000000015b977: mov dword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001a72d4: mov dword ptr [rbx+0x367308fa], 0x7304fa83; cmp al, [rbx+0x3c7701fa]; jb short 0x00000000001a72c4; mov [rax], sil; ret; 
0x000000001608ff: mov dword ptr [rbx+0x38], 0x0; mov [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x00000000166699: mov dword ptr [rbx+0x58], 0x0; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x0000000008d85e: mov dword ptr [rbx+0x58], 0x0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000008f2de: mov dword ptr [rbx+0x58], 0x0; pxor xmm0, xmm0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x00000000163b4e: mov dword ptr [rbx+0x58], 0x28; pop rbx; pop rbp; pop r12; ret; 
0x0000000008beae: mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret; 
0x0000000002b9d7: mov dword ptr [rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000909d2: mov dword ptr [rbx], 0x0; pop rbx; ret; 
0x000000001a27c7: mov dword ptr [rcx+0x1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000019d9c7: mov dword ptr [rcx+0x1], 0x77f8c5f8; ret; 
0x000000001a2386: mov dword ptr [rcx+0x3b], 0xa7750734; add rax, rdi; vzeroupper; ret; 
0x0000000019d3c6: mov dword ptr [rcx+0x40], 0x7507343a; cmpsd [rsi], [rdi]; add rax, rdi; vzeroupper; ret; 
0x00000000099580: mov dword ptr [rcx-0x19], 0x75cf393f; or [rbp+0x2d850fc0], al; add eax, [rax]; add [rax+0x1], bh; ret; 
0x000000000b1358: mov dword ptr [rcx-0x7c], 0xc3da75f9; nop; ret; 
0x00000000178375: mov dword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x000000001a2787: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000019d9a7: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x000000000f025f: mov dword ptr [rcx], 0x9c75c084; xor eax, eax; ret; 
0x000000000a9f47: mov dword ptr [rcx], 0xffff20e9; jmp qword ptr [rsi-0x70]; 
0x00000000163850: mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x00000000097608: mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x000000001576be: mov dword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000165ac6: mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x000000001576c9: mov dword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x0000000016d54d: mov dword ptr [rdi+0x20], 0x0; ret; 
0x0000000016d545: mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000162d70: mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x00000000162d60: mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000166340: mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000165a10: mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x000000000620e7: mov dword ptr [rdi+0x8], 0x0; xchg [rdi], eax; cmp eax, 0x1; jg short 0x0000000000062100; ret; 
0x00000000141e17: mov dword ptr [rdi+0x8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x00000000162c10: mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x0000000009e5db: mov dword ptr [rdi], 0x0; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x00000000056561: mov dword ptr [rdi], 0x0; mov eax, 0x1; ret; 
0x0000000005675d: mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x00000000045f46: mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x000000001195a1: mov dword ptr [rdi], 0x0; ret; 
0x00000000042e4a: mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be74: mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x0000000015f5b0: mov dword ptr [rdi], 0x2; add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000011956b: mov dword ptr [rdi], 0xffffffff; ret; 
0x000000000565ec: mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000001724c8: mov dword ptr [rdx], 0x0; ret; 
0x000000001685c9: mov dword ptr [rdx], 0xe; lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000056652: mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000011db1c: mov dword ptr [rip+0x10383a], 0x0; mov qword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000011db27: mov dword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000011c6ca: mov dword ptr [rip+0x104b4c], 0x0; add rsp, 0x8; ret; 
0x000000000a0fb8: mov dword ptr [rip+0x1783e6], 0x1; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f98: mov dword ptr [rip+0x178406], 0x1; mov [rip+0x1783c7], rax; ret; 
0x000000000a0f78: mov dword ptr [rip+0x178426], 0x1; mov [rip+0x1783df], rax; ret; 
0x000000000a0f58: mov dword ptr [rip+0x178446], 0x1; mov [rip+0x1783f7], rax; ret; 
0x000000000a50f7: mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x000000000a0bfe: mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a0bf4: mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a00c4: mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x0000000008f5a0: mov dword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f595: mov dword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f566: mov dword ptr [rip+0x18c4e8], 0x0; xchg [rip+0x18c4da], eax; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x00000000080a46: mov dword ptr [rip+0x19afc8], 0x0; xchg [rip+0x19afba], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x0000000004605d: mov dword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000045f88: mov dword ptr [rip+0x1d57a6], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000045ea0: mov dword ptr [rip+0x1d5886], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x000000001bb6e7: mov dword ptr [rip+0x5f7cf], 0x0; ret; 
0x000000001bb25c: mov dword ptr [rip+0x5f822], 0x0; add rsp, 0x8; ret; 
0x000000001bb96d: mov dword ptr [rip+0x64d79], 0x0; ret; 
0x000000001bba53: mov dword ptr [rip+0x656eb], 0x0; add rsp, 0x8; ret; 
0x000000001bbb2a: mov dword ptr [rip+0x65994], 0x0; add rsp, 0x8; ret; 
0x000000001bbc28: mov dword ptr [rip+0x66956], 0x0; pop rbx; ret; 
0x000000001bbd65: mov dword ptr [rip+0x6bab9], 0x0; add rsp, 0x8; ret; 
0x000000001bbd39: mov dword ptr [rip+0x6badd], 0x0; pop rbx; ret; 
0x000000001bbcf1: mov dword ptr [rip+0x6bb15], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000173599: mov dword ptr [rip+0xa5fa5], 0xffffffff; add rsp, 0x8; ret; 
0x00000000172866: mov dword ptr [rip+0xb55b0], 0x0; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000156f46: mov dword ptr [rip+0xd08d8], 0x0; ret; 
0x000000001290f0: mov dword ptr [rip+0xf0346], 0x0; ret; 
0x000000001290c7: mov dword ptr [rip+0xf036f], 0x0; ret; 
0x00000000129096: mov dword ptr [rip+0xf03a0], 0x2; ret; 
0x00000000129070: mov dword ptr [rip+0xf03c6], 0x0; ret; 
0x00000000128cf9: mov dword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x00000000128cc4: mov dword ptr [rip+0xf0772], 0x3; add rsp, 0x8; ret; 
0x00000000125a93: mov dword ptr [rip+0xfba2b], 0x0; ret; 
0x00000000125a88: mov dword ptr [rip+0xfba2e], 0x0; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x0000000015ecee: mov dword ptr [rsi+0x10], 0x2; test eax, eax; je short 0x000000000015ed00; xor eax, eax; ret; 
0x0000000015ee4e: mov dword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000015edb3: mov dword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x00000000046b5f: mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x000000000923b9: mov dword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x000000001069e8: mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x0000000015ed97: mov dword ptr [rsi], 0x0; ret; 
0x0000000015ed80: mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x0000000015ee47: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000015edac: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000015edd5: mov dword ptr [rsi], 0x6; movups [rsi+0x8], xmm1; ret; 
0x0000000015edc3: mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x0000000015ee40: mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee05: mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x0000000015ee30: mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee20: mov dword ptr [rsi], 0xb; ret; 
0x0000000015ee10: mov dword ptr [rsi], 0xc; ret; 
0x0000000016901f: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169323: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x2; movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x0000000007ac35: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x000000001691db: mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000169237: mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x0000000007ba05: mov dword ptr [rsp+0x10], 0x1; mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x000000001691e3: mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000016923f: mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000169247: mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000175322: mov dword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x00000000075326: mov dword ptr [rsp+0x28], 0x0; mov dword ptr [rsp+0x58], 0x0; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000075e79: mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x0000000007c6d0: mov dword ptr [rsp+0x28], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000169027: mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001692ad: mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016932b: mov dword ptr [rsp+0x30], 0x2; movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x0000000016909d: mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016910d: mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016917d: mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000007ac4d: mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007ac45: mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c648: mov dword ptr [rsp+0x3c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000164d63: mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x000000000d9a82: mov dword ptr [rsp+0x40], 0x0; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x00000000076c38: mov dword ptr [rsp+0x40], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007c700: mov dword ptr [rsp+0x48], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000977a8: mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x00000000075336: mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x00000000076c18: mov dword ptr [rsp+0x4c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c08: mov dword ptr [rsp+0x50], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007532e: mov dword ptr [rsp+0x58], 0x0; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x38], 0x20; jmp rsi; 
0x000000000761ca: mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076b18: mov dword ptr [rsp+0x5c], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007ac3d: mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x3c], 0x0; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007bc48: mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000169017: mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x0; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001691d3: mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000016922f: mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x000000001693f9: mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016953d: mov dword ptr [rsp+0xb0], 0x0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x00000000169404: mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016940f: mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000016449e: mov dword ptr [rsp+0xc], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000001695e6: mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x00000000169550: mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm2; call rax; 
0x00000000041184: mov dword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000041130: mov dword ptr [rsp-0x18], 0x0; mov [rsp-0x10], ax; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000015e270: mov dword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000143674: mov dword ptr [rsp], 0x0; call rax; 
0x00000000174c72: mov dword ptr [rsp], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x000000000ab508: mov dword ptr [rsp], 0x0; pop r12; ret; 
0x000000000ab4b2: mov dword ptr [rsp], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000014358c: mov dword ptr [rsp], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000016b3ae: mov dword ptr [rsp], 0x2; call r8; 
0x00000000155077: mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000118bd7: mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x000000001724bb: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000000424b7: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042447: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000011faa7: mov dword ptr fs:[rax], 0x16; ret; 
0x000000000d8e47: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000004209a: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000041381: mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000042f8b: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001271bb: mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000122487: mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x00000000040787: mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000009c54f: mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000d8d2a: mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000d8e27: mov dword ptr fs:[rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x00000000046d97: mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000149627: mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000000407e7: mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002a537: mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000009cda7: mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000011a9f7: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000011fa60: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000a4117: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000182d20: mov dx, [rsi+0x1]; mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x000000000c1302: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000c2152: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000bfcc2: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000c1353: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000c21b3: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000bfd03: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x0000000017cbe0: mov dx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000017cdc0: mov dx, [rsi-0x3]; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000000c12c0: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c2100: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000bfc80: mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000c3d60: mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000001ba8fc: mov eax, 0x0; add [rax-0x7ab70000], al; ret; 
0x0000000009b5ba: mov eax, 0x0; cmova eax, edx; ret; 
0x0000000011bf88: mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x00000000053b49: mov eax, 0x0; jne short 0x0000000000053b53; push r10; ret; 
0x00000000054032: mov eax, 0x0; jne short 0x000000000005403c; push r10; ret; 
0x000000001b49d0: mov eax, 0x0; setl al; neg eax; or eax, 0x1; ret; 
0x000000000eb162: mov eax, 0x1000; mov r10, r12; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x0000000015f9de: mov eax, 0x100; add [rax-0x77], cl; ret; 
0x000000001426e0: mov eax, 0x100; ret; 
0x000000001426e9: mov eax, 0x101; ret; 
0x000000001146e4: mov eax, 0x101; syscall; 
0x000000001426d7: mov eax, 0x102; cmovne eax, edx; ret; 
0x00000000114634: mov eax, 0x102; syscall; 
0x0000000011426e: mov eax, 0x103; syscall; 
0x000000001426ad: mov eax, 0x104; cmovne eax, edx; ret; 
0x00000000115ca7: mov eax, 0x104; syscall; 
0x00000000113ee7: mov eax, 0x106; syscall; 
0x00000000116284: mov eax, 0x107; syscall; 
0x00000000061f57: mov eax, 0x108; syscall; 
0x00000000116167: mov eax, 0x109; syscall; 
0x000000000a0edd: mov eax, 0x10; cmova rax, rdx; mov [rip+0x17f613], rax; ret; 
0x0000000009be5f: mov eax, 0x10; cmove eax, ecx; ret; 
0x0000000015d474: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x000000000620c0: mov eax, 0x10; ret; 
0x00000000119f0a: mov eax, 0x10; syscall; 
0x000000001161c4: mov eax, 0x10a; syscall; 
0x00000000116227: mov eax, 0x10b; syscall; 
0x00000000114570: mov eax, 0x10c; syscall; 
0x00000000114ddb: mov eax, 0x10d; syscall; 
0x0000000011b957: mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x0000000011b746: mov eax, 0x10e; syscall; 
0x0000000011b8ec: mov eax, 0x10e; syscall; 
0x00000000118e18: mov eax, 0x10f; syscall; 
0x00000000126fc4: mov eax, 0x110; syscall; 
0x00000000094930: mov eax, 0x111; syscall; 
0x000000001261f5: mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001261a3: mov eax, 0x113; syscall; 
0x00000000126043: mov eax, 0x114; syscall; 
0x000000001198c3: mov eax, 0x115; syscall; 
0x000000001260f3: mov eax, 0x116; syscall; 
0x0000000011946b: mov eax, 0x118; syscall; 
0x00000000119427: mov eax, 0x118; syscall; 
0x00000000125d0d: mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x00000000125cb9: mov eax, 0x119; syscall; 
0x000000001128f3: mov eax, 0x11; syscall; 
0x00000000127024: mov eax, 0x11b; syscall; 
0x000000001190da: mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000119973: mov eax, 0x11d; syscall; 
0x000000001264a7: mov eax, 0x11e; syscall; 
0x00000000126474: mov eax, 0x11f; syscall; 
0x00000000127e93: mov eax, 0x120; syscall; 
0x00000000125e47: mov eax, 0x121; mov edx, 0x8; syscall; 
0x00000000125e84: mov eax, 0x122; syscall; 
0x00000000126cf4: mov eax, 0x123; syscall; 
0x000000001151f4: mov eax, 0x124; syscall; 
0x00000000115226: mov eax, 0x125; syscall; 
0x00000000126e14: mov eax, 0x126; syscall; 
0x0000000011aca6: mov eax, 0x127; syscall; 
0x0000000011ad66: mov eax, 0x128; syscall; 
0x0000000009bdc9: mov eax, 0x129; syscall; 
0x000000001129a3: mov eax, 0x12; syscall; 
0x00000000127f8d: mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x00000000127f43: mov eax, 0x12b; syscall; 
0x00000000127054: mov eax, 0x12c; syscall; 
0x00000000126ab7: mov eax, 0x12d; syscall; 
0x00000000125f17: mov eax, 0x12e; syscall; 
0x0000000011a48b: mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000127087: mov eax, 0x12f; syscall; 
0x00000000126270: mov eax, 0x130; syscall; 
0x000000001265f4: mov eax, 0x131; syscall; 
0x0000000011bb74: mov eax, 0x132; syscall; 
0x00000000128003: mov eax, 0x133; syscall; 
0x000000001270b4: mov eax, 0x134; syscall; 
0x00000000113d07: mov eax, 0x135; syscall; 
0x00000000126577: mov eax, 0x136; syscall; 
0x000000001265b7: mov eax, 0x137; syscall; 
0x0000000011ab60: mov eax, 0x13; syscall; 
0x00000000061f9b: mov eax, 0x13c; syscall; 
0x00000000046c80: mov eax, 0x13e; syscall; 
0x000000001270e4: mov eax, 0x13f; syscall; 
0x000000000eb171: mov eax, 0x142; syscall; 
0x00000000126308: mov eax, 0x145; syscall; 
0x000000001193b5: mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000119363: mov eax, 0x146; syscall; 
0x0000000011ae45: mov eax, 0x147; syscall; 
0x0000000011afa5: mov eax, 0x148; syscall; 
0x0000000012639c: mov eax, 0x149; syscall; 
0x00000000147cd7: mov eax, 0x14; add edx, 0x1; syscall; 
0x00000000128b89: mov eax, 0x14; mov dword ptr [rbp-0x7d0], 0x0; mov byte ptr [rbp-0x7ca], 0x0; mov byte ptr [rbp-0x7c9], 0x73; syscall; 
0x0000000011ac00: mov eax, 0x14; syscall; 
0x00000000127114: mov eax, 0x14a; syscall; 
0x00000000127144: mov eax, 0x14b; syscall; 
0x000000001141e7: mov eax, 0x14c; syscall; 
0x00000000094b01: mov eax, 0x14e; syscall; 
0x00000000114af4: mov eax, 0x15; syscall; 
0x00000000092770: mov eax, 0x16; cmove eax, edx; ret; 
0x00000000092734: mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000092864: mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000000928a4: mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x00000000091154: mov eax, 0x16; pop rbx; pop r12; pop r13; ret; 
0x00000000099d93: mov eax, 0x16; pop rbx; pop rbp; ret; 
0x00000000091090: mov eax, 0x16; ret; 
0x0000000009d544: mov eax, 0x18; syscall; 
0x00000000126b18: mov eax, 0x19; syscall; 
0x0000000012dfcc: mov eax, 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000e55ce: mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000d7bb0: mov eax, 0x1; jg short 0x00000000000d7bb9; neg eax; ret; 
0x000000001a6850: mov eax, 0x1; jg short 0x00000000001a6860; neg eax; ret; 
0x0000000007c6f4: mov eax, 0x1; jmp rsi; 
0x0000000016cc6c: mov eax, 0x1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x00000000046be5: mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x00000000056575: mov eax, 0x1; mov [rsi], rdx; ret; 
0x0000000005664d: mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000011d79a: mov eax, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x000000000891d1: mov eax, 0x1; mov eax, r8d; ret; 
0x0000000015b969: mov eax, 0x1; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x00000000165add: mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165af5: mov eax, 0x1; movups [rcx], xmm2; ret; 
0x000000001663f5: mov eax, 0x1; movups [rcx], xmm3; ret; 
0x000000001663d5: mov eax, 0x1; movups [rcx], xmm4; ret; 
0x000000001663e4: mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x0000000011d7d3: mov eax, 0x1; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000005f979: mov eax, 0x1; pop rbp; pop r12; pop r13; ret; 
0x000000001572e5: mov eax, 0x1; pop rbp; pop r12; ret; 
0x000000000a7c78: mov eax, 0x1; pop rbx; pop rbp; pop r12; ret; 
0x0000000007ff6a: mov eax, 0x1; pop rbx; pop rbp; ret; 
0x00000000083cf5: mov eax, 0x1; pop rbx; ret; 
0x0000000005411e: mov eax, 0x1; ret; 
0x000000000d83e1: mov eax, 0x1; ret; 
0x00000000163ae0: mov eax, 0x1; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x00000000042eb9: mov eax, 0x1; shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x00000000114a30: mov eax, 0x1; syscall; 
0x000000000ed194: mov eax, 0x1; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x0000000011ec90: mov eax, 0x1a; syscall; 
0x000000001269e6: mov eax, 0x1b3; syscall; 
0x0000000011348a: mov eax, 0x1b4; syscall; 
0x00000000114c9d: mov eax, 0x1b7; syscall; 
0x00000000125ddc: mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x00000000125d89: mov eax, 0x1b9; syscall; 
0x0000000011ed54: mov eax, 0x1b; syscall; 
0x00000000113a4b: mov eax, 0x1c; syscall; 
0x00000000155037: mov eax, 0x1d; or dword ptr [rbx], 0x20; mov fs:[rdx], eax; pop rbx; ret; 
0x000000001285f7: mov eax, 0x1d; syscall; 
0x00000000128594: mov eax, 0x1e; syscall; 
0x0000000012864a: mov eax, 0x1f; syscall; 
0x0000000003a12b: mov eax, 0x200; ret; 
0x000000000ecfec: mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ed0b9: mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ed0ba: mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000115194: mov eax, 0x20; syscall; 
0x000000001151c4: mov eax, 0x21; syscall; 
0x0000000015501f: mov eax, 0x22; mov fs:[rdx], eax; pop rbx; ret; 
0x000000000ea660: mov eax, 0x22; syscall; 
0x000000000dcdb4: mov eax, 0x24; syscall; 
0x000000000ea5b4: mov eax, 0x25; syscall; 
0x000000000dcde4: mov eax, 0x26; syscall; 
0x000000000ec0b4: mov eax, 0x27; syscall; 
0x00000000119327: mov eax, 0x28; syscall; 
0x000000001426ef: mov eax, 0x29; ret; 
0x00000000127ce4: mov eax, 0x29; syscall; 
0x000000000d83f1: mov eax, 0x2; ret; 
0x00000000056763: mov eax, 0x2; ret; 
0x00000000142b4c: mov eax, 0x2; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000001276a0: mov eax, 0x2a; syscall; 
0x000000001275d0: mov eax, 0x2b; syscall; 
0x00000000127c06: mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000127a59: mov eax, 0x2c; syscall; 
0x00000000127923: mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x00000000127819: mov eax, 0x2d; syscall; 
0x0000000009492b: mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x00000000127b10: mov eax, 0x2e; syscall; 
0x000000001279a6: mov eax, 0x2f; syscall; 
0x00000000127cb4: mov eax, 0x30; syscall; 
0x00000000127664: mov eax, 0x31; syscall; 
0x000000001277d4: mov eax, 0x32; syscall; 
0x00000000127764: mov eax, 0x33; syscall; 
0x00000000127734: mov eax, 0x34; syscall; 
0x00000000127d17: mov eax, 0x35; syscall; 
0x00000000091c96: mov eax, 0x35c; syscall; 
0x00000000127c77: mov eax, 0x36; syscall; 
0x00000000127797: mov eax, 0x37; syscall; 
0x000000000eabc0: mov eax, 0x38; syscall; 
0x0000000009d57d: mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000e5636: mov eax, 0x3; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000141285: mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x000000000d8401: mov eax, 0x3; ret; 
0x00000000095cd0: mov eax, 0x3; ret; 
0x0000000009fdc4: mov eax, 0x3; syscall; 
0x000000000eac35: mov eax, 0x3a; syscall; 
0x000000000eb0f4: mov eax, 0x3b; syscall; 
0x00000000125bb7: mov eax, 0x3c; syscall; 
0x000000000ea453: mov eax, 0x3d; syscall; 
0x00000000042754: mov eax, 0x3e; syscall; 
0x000000000b152c: mov eax, 0x3ec7014c; jmp rdi; 
0x000000000ea374: mov eax, 0x3f; syscall; 
0x000000000ed068: mov eax, 0x40; ret; 
0x00000000128464: mov eax, 0x40; syscall; 
0x00000000128518: mov eax, 0x42; syscall; 
0x000000001285c4: mov eax, 0x43; syscall; 
0x00000000035729: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000011bb6a: mov eax, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x132; syscall; 
0x0000000011518a: mov eax, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x20; syscall; 
0x0000000012772a: mov eax, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x34; syscall; 
0x0000000011baaa: mov eax, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0xa2; syscall; 
0x000000001283c4: mov eax, 0x44; syscall; 
0x00000000128263: mov eax, 0x45; syscall; 
0x00000000128360: mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000128313: mov eax, 0x46; syscall; 
0x00000000128404: mov eax, 0x47; syscall; 
0x000000000907b4: mov eax, 0x48000e51; mov [rbx+0x18], eax; pop rbx; ret; 
0x000000000ab084: mov eax, 0x480010af; cmove eax, edx; ret; 
0x00000000114f14: mov eax, 0x48; syscall; 
0x00000000114fa4: mov eax, 0x49; syscall; 
0x00000000122a19: mov eax, 0x4; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d8411: mov eax, 0x4; ret; 
0x00000000126633: mov eax, 0x4; syscall; 
0x0000000011ba30: mov eax, 0x4a; syscall; 
0x0000000011baf0: mov eax, 0x4b; syscall; 
0x0000000015f66e: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x20]; 
0x0000000015f6c5: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x28]; 
0x0000000011d134: mov eax, 0x4c; syscall; 
0x0000000011d164: mov eax, 0x4d; syscall; 
0x0000000011540e: mov eax, 0x4f; syscall; 
0x00000000115324: mov eax, 0x50; syscall; 
0x00000000115354: mov eax, 0x51; syscall; 
0x00000000061f24: mov eax, 0x52; syscall; 
0x00000000114604: mov eax, 0x53; syscall; 
0x000000001162b4: mov eax, 0x54; syscall; 
0x000000001152a0: mov eax, 0x55; syscall; 
0x00000000116134: mov eax, 0x56; syscall; 
0x00000000116254: mov eax, 0x57; syscall; 
0x00000000116194: mov eax, 0x58; syscall; 
0x000000001161f4: mov eax, 0x59; syscall; 
0x00000000133cef: mov eax, 0x5; pop r12; pop rbp; ret; 
0x0000000010d5c7: mov eax, 0x5; pop rbp; pop r12; ret; 
0x000000000d8421: mov eax, 0x5; ret; 
0x00000000126692: mov eax, 0x5; syscall; 
0x00000000126691: mov eax, 0x5; syscall; 
0x00000000114404: mov eax, 0x5a; syscall; 
0x000000000ec942: mov eax, 0x5b000000; pop r12; ret; 
0x0000000016754e: mov eax, 0x5b000000; pop rbp; ret; 
0x00000000114434: mov eax, 0x5b; syscall; 
0x000000000fa054: mov eax, 0x5bffffa9; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000115c14: mov eax, 0x5c; syscall; 
0x00000000115c44: mov eax, 0x5d; syscall; 
0x00000000115c74: mov eax, 0x5e; syscall; 
0x000000001143f4: mov eax, 0x5f; syscall; 
0x000000000d9af9: mov eax, 0x60; syscall; 
0x0000000011a504: mov eax, 0x62; syscall; 
0x00000000126f94: mov eax, 0x63; syscall; 
0x00000000094b38: mov eax, 0x648; call qword ptr [rax+0x640]; 
0x000000000ea3a4: mov eax, 0x64; syscall; 
0x0000000011c197: mov eax, 0x65; syscall; 
0x000000000ec0d4: mov eax, 0x66; syscall; 
0x00000000126e74: mov eax, 0x67; syscall; 
0x000000000ec0f4: mov eax, 0x68; syscall; 
0x000000000ec162: mov eax, 0x69; syscall; 
0x000000000ec161: mov eax, 0x69; syscall; 
0x000000000d8431: mov eax, 0x6; ret; 
0x000000001266f3: mov eax, 0x6; syscall; 
0x000000000ec1f1: mov eax, 0x6a; syscall; 
0x000000000ec1f2: mov eax, 0x6a; syscall; 
0x000000000ec0e4: mov eax, 0x6b; syscall; 
0x000000000ec104: mov eax, 0x6c; syscall; 
0x000000000ec374: mov eax, 0x6d; syscall; 
0x000000000910a6: mov eax, 0x6e; ret; 
0x000000000ec0c4: mov eax, 0x6e; syscall; 
0x000000000ec3a4: mov eax, 0x6f; syscall; 
0x000000000ec404: mov eax, 0x70; syscall; 
0x0000000011b0f2: mov eax, 0x71; syscall; 
0x0000000011b0f1: mov eax, 0x71; syscall; 
0x0000000011b181: mov eax, 0x72; syscall; 
0x0000000011b182: mov eax, 0x72; syscall; 
0x000000000ec114: mov eax, 0x73; syscall; 
0x000000000e7731: mov eax, 0x74; syscall; 
0x000000000e7732: mov eax, 0x74; syscall; 
0x000000000ec4b1: mov eax, 0x75; syscall; 
0x000000000ec4b2: mov eax, 0x75; syscall; 
0x000000000ec434: mov eax, 0x76; syscall; 
0x000000000ec551: mov eax, 0x77; syscall; 
0x000000000ec552: mov eax, 0x77; syscall; 
0x000000000ec464: mov eax, 0x78; syscall; 
0x000000000ec344: mov eax, 0x79; syscall; 
0x00000000132a99: mov eax, 0x7; ret; 
0x000000000d8441: mov eax, 0x7; ret; 
0x00000000118d40: mov eax, 0x7; syscall; 
0x00000000125c44: mov eax, 0x7a; syscall; 
0x00000000125c74: mov eax, 0x7b; syscall; 
0x000000000ec3d4: mov eax, 0x7c; syscall; 
0x000000000ecedb: mov eax, 0x7d00; ret; 
0x00000000126c04: mov eax, 0x7d; syscall; 
0x000000000ecfa0: mov eax, 0x7e; ret; 
0x00000000126c34: mov eax, 0x7e; syscall; 
0x000000000417fa: mov eax, 0x7f800000; and eax, [rsp-0x4]; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000417d8: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x000000000ecf02: mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecf8a: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000ecf89: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000042789: mov eax, 0x7f; syscall; 
0x000000000ecebf: mov eax, 0x7fffffff; cmp r8, 0x58465342; jne short 0x00000000000eced0; ret; 
0x000000000e66a4: mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000143381: mov eax, 0x7fffffff; mov eax, r8d; ret; 
0x00000000143360: mov eax, 0x7fffffff; mov r8d, edx; cmovs r8d, eax; mov eax, r8d; ret; 
0x000000000431b1: mov eax, 0x80; syscall; 
0x000000000923a7: mov eax, 0x80; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000043304: mov eax, 0x81; syscall; 
0x000000000427d5: mov eax, 0x82; syscall; 
0x00000000099923: mov eax, 0x83; ret; 
0x00000000042d44: mov eax, 0x83; syscall; 
0x00000000126ff4: mov eax, 0x86; syscall; 
0x00000000125f54: mov eax, 0x87; syscall; 
0x000000001217bb: mov eax, 0x88; syscall; 
0x0000000015cde4: mov eax, 0x8948ffec; ret; 
0x000000001142b4: mov eax, 0x89; syscall; 
0x00000000118e10: mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000114ac4: mov eax, 0x8; syscall; 
0x000000001142e4: mov eax, 0x8a; syscall; 
0x0000000011a8f4: mov eax, 0x8c; syscall; 
0x000000000a97b6: mov eax, 0x8d480001; add eax, 0x1b820; cmovne rax, rdx; ret; 
0x0000000011a934: mov eax, 0x8d; syscall; 
0x00000000108be4: mov eax, 0x8e; syscall; 
0x00000000095724: mov eax, 0x8f; syscall; 
0x000000000947d3: mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x00000000108c44: mov eax, 0x90; syscall; 
0x000000000956f7: mov eax, 0x91; syscall; 
0x00000000108cd4: mov eax, 0x92; syscall; 
0x00000000108d04: mov eax, 0x93; syscall; 
0x00000000108d34: mov eax, 0x94; syscall; 
0x0000000011edb4: mov eax, 0x95; syscall; 
0x0000000011ede4: mov eax, 0x96; syscall; 
0x0000000011ee14: mov eax, 0x97; syscall; 
0x0000000011ee44: mov eax, 0x98; syscall; 
0x0000000011bea4: mov eax, 0x99; syscall; 
0x00000000112ca1: mov eax, 0x9; pop rbp; pop r14; ret; 
0x0000000011ebd0: mov eax, 0x9; syscall; 
0x00000000094afc: mov eax, 0x9a0; mov eax, 0x14e; syscall; 
0x00000000126bc4: mov eax, 0x9a; syscall; 
0x00000000126f04: mov eax, 0x9b; syscall; 
0x0000000012652a: mov eax, 0x9d; syscall; 
0x0000000005399e: mov eax, 0x9e; syscall; 
0x0000000011b9f4: mov eax, 0xa1; syscall; 
0x000000000a2eb7: mov eax, 0xa1e80013; fdivp st(7), st; call qword ptr [rax-0x36c272b8]; 
0x000000000a2eb6: mov eax, 0xa1e80013; fdivp st(7), st; call qword ptr [rax-0x36c272b8]; 
0x0000000011bab4: mov eax, 0xa2; syscall; 
0x0000000011b9c4: mov eax, 0xa3; syscall; 
0x000000000d9cb7: mov eax, 0xa4; xor edi, edi; syscall; 
0x00000000126ea7: mov eax, 0xa5; syscall; 
0x00000000125be4: mov eax, 0xa6; syscall; 
0x0000000011bed4: mov eax, 0xa7; syscall; 
0x0000000011bf04: mov eax, 0xa8; syscall; 
0x0000000011bbb0: mov eax, 0xa9; syscall; 
0x0000000013d962: mov eax, 0xa; pop rbx; pop rbp; ret; 
0x0000000011ec54: mov eax, 0xa; syscall; 
0x0000000011b524: mov eax, 0xaa; syscall; 
0x0000000011b664: mov eax, 0xab; syscall; 
0x00000000125b34: mov eax, 0xac; syscall; 
0x00000000125b04: mov eax, 0xad; syscall; 
0x00000000126c64: mov eax, 0xae; syscall; 
0x00000000126d87: mov eax, 0xaf; syscall; 
0x00000000126c94: mov eax, 0xb0; syscall; 
0x00000000126d54: mov eax, 0xb1; syscall; 
0x00000000126f37: mov eax, 0xb2; syscall; 
0x00000000126f67: mov eax, 0xb3; syscall; 
0x00000000126ed4: mov eax, 0xb4; syscall; 
0x00000000162dcf: mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret; 
0x0000000009677e: mov eax, 0xb; ret; 
0x0000000011ec24: mov eax, 0xb; syscall; 
0x000000000968f0: mov eax, 0xba; syscall; 
0x00000000125c14: mov eax, 0xbb; syscall; 
0x00000000122397: mov eax, 0xbc; syscall; 
0x00000000122337: mov eax, 0xbd; syscall; 
0x00000000122217: mov eax, 0xbe; syscall; 
0x00000000122247: mov eax, 0xbf; syscall; 
0x000000001222a7: mov eax, 0xc0; syscall; 
0x00000000122187: mov eax, 0xc1; syscall; 
0x00000000122274: mov eax, 0xc2; syscall; 
0x000000001222d4: mov eax, 0xc3; syscall; 
0x000000001221b4: mov eax, 0xc4; syscall; 
0x00000000122364: mov eax, 0xc5; syscall; 
0x00000000122304: mov eax, 0xc6; syscall; 
0x000000001221e4: mov eax, 0xc7; syscall; 
0x000000000d99e4: mov eax, 0xc9; syscall; 
0x0000000009205f: mov eax, 0xc; pop rbp; pop r12; ret; 
0x00000000091fd7: mov eax, 0xc; pop rbx; pop rbp; pop r12; ret; 
0x00000000091ea6: mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000011a9d4: mov eax, 0xc; syscall; 
0x00000000098394: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000094468: mov eax, 0xca; mov esi, [rsp+0x18]; xor sil, 0x81; syscall; 
0x00000000094039: mov eax, 0xca; mov esi, [rsp+0x8]; xor sil, 0x81; syscall; 
0x00000000093bd1: mov eax, 0xca; mov esi, ebx; xor sil, 0x81; syscall; 
0x000000000910ff: mov eax, 0xca; syscall; 
0x00000000091335: mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000092a59: mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000177e76: mov eax, 0xcb; mov esi, 0x80; syscall; 
0x00000000177e77: mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000009478d: mov eax, 0xcb; syscall; 
0x00000000095d62: mov eax, 0xcc; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000177e09: mov eax, 0xcc; mov esi, 0x80; syscall; 
0x00000000177e0a: mov eax, 0xcc; mov esi, 0x80; syscall; 
0x00000000095db5: mov eax, 0xcc; syscall; 
0x00000000126cc4: mov eax, 0xd5; syscall; 
0x0000000011ed87: mov eax, 0xd8; syscall; 
0x000000000e66b0: mov eax, 0xd9; syscall; 
0x000000000425ec: mov eax, 0xd; syscall; 
0x00000000128557: mov eax, 0xdc; syscall; 
0x00000000118ee7: mov eax, 0xdd; syscall; 
0x000000000a0604: mov eax, 0xde; syscall; 
0x00000000046b9f: mov eax, 0xdeece66d; add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x000000000a0a78: mov eax, 0xdf; syscall; 
0x00000000168c8a: mov eax, 0xe0; add [rax-0x77], cl; ret; 
0x000000000a0a15: mov eax, 0xe0; syscall; 
0x000000000a09b5: mov eax, 0xe1; syscall; 
0x000000000a0897: mov eax, 0xe2; syscall; 
0x000000000e575e: mov eax, 0xe3; syscall; 
0x000000000e56f0: mov eax, 0xe4; syscall; 
0x000000000e56a5: mov eax, 0xe5; syscall; 
0x000000000e5618: mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x000000000e5619: mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x000000000e57f3: mov eax, 0xe6; syscall; 
0x00000000125f93: mov eax, 0xe8; syscall; 
0x00000000126d27: mov eax, 0xe9; syscall; 
0x0000000009498c: mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a0bb6: mov eax, 0xe; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x000000000969a4: mov eax, 0xe; mov rdx, r14; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f88: mov eax, 0xe; mov rdx, r14; lea rsi, [rip+0x5cac9]; syscall; 
0x00000000053a0a: mov eax, 0xe; syscall; 
0x00000000091b49: mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x000000000968d4: mov eax, 0xea; syscall; 
0x000000000a02c6: mov eax, 0xf0; syscall; 
0x000000000a054d: mov eax, 0xf1; syscall; 
0x000000000a04dd: mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000000a0493: mov eax, 0xf2; syscall; 
0x000000000a0420: mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000a03d3: mov eax, 0xf3; syscall; 
0x000000000a01d4: mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000000a0104: mov eax, 0xf4; syscall; 
0x000000000a0394: mov eax, 0xf5; syscall; 
0x000000000ea506: mov eax, 0xf7; syscall; 
0x000000001092b9: mov eax, 0xf; cmp dx, 0x2; je short 0x00000000001092c8; ret; 
0x00000000042521: mov eax, 0xf; syscall; 
0x000000000dce2d: mov eax, 0xfa89051e; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000dce40; ret; 
0x000000000ecf98: mov eax, 0xfc17; ret; 
0x00000000164b8c: mov eax, 0xfd1b8ee8; jmp qword ptr [rsi+0x66]; 
0x0000000015dd3c: mov eax, 0xfd89dee8; jmp qword ptr [rsi+0x66]; 
0x00000000126de4: mov eax, 0xfd; syscall; 
0x0000000015c52e: mov eax, 0xfda1ece8; jmp qword ptr [rsi+0x66]; 
0x0000000015b43e: mov eax, 0xfdb2dce8; jmp qword ptr [rsi+0x66]; 
0x0000000015afae: mov eax, 0xfdb76ce8; jmp qword ptr [rsi+0x66]; 
0x0000000015a96e: mov eax, 0xfdbdace8; jmp qword ptr [rsi+0x66]; 
0x0000000015a4ce: mov eax, 0xfdc24ce8; jmp qword ptr [rsi+0x66]; 
0x00000000126db4: mov eax, 0xfe; syscall; 
0x0000000016955f: mov eax, 0xff000000; ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000000ed0c8: mov eax, 0xff; ret; 
0x00000000126e44: mov eax, 0xff; syscall; 
0x000000000ecf47: mov eax, 0xfffa; ret; 
0x00000000056630: mov eax, 0xffffc002; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000da644: mov eax, 0xfffffffe; jmp far fword ptr [rdi-0x1]; 
0x00000000042f0a: mov eax, 0xfffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000000e5693: mov eax, 0xffffffff; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000142696: mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000081d0d: mov eax, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000cf8ae: mov eax, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x00000000061fd0: mov eax, 0xffffffff; mov eax, r8d; ret; 
0x000000000eac1a: mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x000000001724c2: mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000001432f1: mov eax, 0xffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000004519e: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x0000000011a9c6: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000407ee: mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007ff8c: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000083d24: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000002a53e: mov eax, 0xffffffff; ret; 
0x0000000004244f: mov eax, 0xffffffff; ret; 
0x0000000008977e: mov eax, 0xffffffff; test edx, edx; je short 0x0000000000089790; ret; 
0x00000000089b9e: mov eax, 0xffffffff; test edx, edx; je short 0x0000000000089bb0; ret; 
0x000000001758ef: mov eax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000009655d: mov eax, [0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000090aeb: mov eax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b596: mov eax, [0x10]; ret; 
0x0000000012866b: mov eax, [0x1600c764000f07]; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000042f6b: mov eax, [0x1600c764001d5e]; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000005406b: mov eax, [0x18964d8f7001c4d]; or rax, 0xffffffffffffffff; ret; 
0x00000000046c75: mov eax, [0x18]; test eax, eax; jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x000000000a03c8: mov eax, [0x18]; test eax, eax; jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a0488: mov eax, [0x18]; test eax, eax; jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000ea448: mov eax, [0x18]; test eax, eax; jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea655: mov eax, [0x18]; test eax, eax; jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000001128e8: mov eax, [0x18]; test eax, eax; jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x00000000112998: mov eax, [0x18]; test eax, eax; jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x00000000114854: mov eax, [0x18]; test eax, eax; jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x00000000114985: mov eax, [0x18]; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x00000000114a25: mov eax, [0x18]; test eax, eax; jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f09: mov eax, [0x18]; test eax, eax; jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x00000000115105: mov eax, [0x18]; test eax, eax; jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x00000000115295: mov eax, [0x18]; test eax, eax; jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000118d35: mov eax, [0x18]; test eax, eax; jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x00000000119358: mov eax, [0x18]; test eax, eax; jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x000000001198b8: mov eax, [0x18]; test eax, eax; jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x00000000119968: mov eax, [0x18]; test eax, eax; jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x0000000011ab55: mov eax, [0x18]; test eax, eax; jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abf5: mov eax, [0x18]; test eax, eax; jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011ba25: mov eax, [0x18]; test eax, eax; jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011bae5: mov eax, [0x18]; test eax, eax; jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011ec85: mov eax, [0x18]; test eax, eax; jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x00000000125f88: mov eax, [0x18]; test eax, eax; jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x00000000126038: mov eax, [0x18]; test eax, eax; jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260e8: mov eax, [0x18]; test eax, eax; jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x00000000126198: mov eax, [0x18]; test eax, eax; jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x00000000126265: mov eax, [0x18]; test eax, eax; jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x000000001275c5: mov eax, [0x18]; test eax, eax; jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x00000000127695: mov eax, [0x18]; test eax, eax; jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x000000001278c8: mov eax, [0x18]; test eax, eax; jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x0000000012799b: mov eax, [0x18]; test eax, eax; jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127b05: mov eax, [0x18]; test eax, eax; jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127ba8: mov eax, [0x18]; test eax, eax; jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e88: mov eax, [0x18]; test eax, eax; jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f38: mov eax, [0x18]; test eax, eax; jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000127ff8: mov eax, [0x18]; test eax, eax; jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x00000000128258: mov eax, [0x18]; test eax, eax; jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x00000000128308: mov eax, [0x18]; test eax, eax; jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x000000000c5323: mov eax, [0x200808b4800153b]; add [rax], al; ret; 
0x00000000050c66: mov eax, [0x28]; mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x00000000114c8c: mov eax, [0x28]; mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x0000000009af7f: mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000975db: mov eax, [0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000018d66b: mov eax, [0x2e6666c3c3000001]; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x00000000090b5d: mov eax, [0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x00000000090b13: mov eax, [0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000001bb233: mov eax, [0x31e95def8948fffb]; shl esi, 0x1; call qword ptr [rax-0x5e1f00d]; 
0x0000000011ec38: mov eax, [0x48018964d8f7000f]; or eax, 0xffffffff; ret; 
0x0000000007858b: mov eax, [0x488a0c6348000005]; add ecx, edx; notrack jmp rcx; 
0x000000001b78de: mov eax, [0x48cfb60f44ef3144]; add eax, ecx; notrack jmp rax; 
0x000000000c3a2f: mov eax, [0x49830c634b0010fa]; lea ecx, [rbx+rcx]; notrack jmp rcx; 
0x000000000424ab: mov eax, [0x59058b4890000002]; imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014d51f: mov eax, [0x6348c0b60f00088f]; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x0000000003cb37: mov eax, [0x6348c0b60f0018f5]; add al, 0x81; add rax, rcx; notrack jmp rax; 
0x0000000019f860: mov eax, [0x77f8c5e0075c7f7e]; ret; 
0x0000000019f8e5: mov eax, [0x77f8c5f007447f7a]; ret; 
0x0000000019f840: mov eax, [0x77f8c5f0075c7f7a]; ret; 
0x00000000151ec8: mov eax, [0x8a1ad3d8d480008]; add al, ch; jns short 0x0000000000151f54; out dx, al; jmp qword ptr [rsi+0xf]; 
0x00000000091927: mov eax, [0x8b4810708b480018]; js short 0x000000000009193a; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000001b09b5: mov eax, [0x8d4aff075c7f08fe]; add al, 0x7; ret; 
0x000000001b09e5: mov eax, [0x8d4aff075c7f28fe]; add al, 0x7; ret; 
0x000000000b165b: mov eax, [0xc2f7000fe0]; je short 0x00000000000b162f; ret; 
0x00000000175ebb: mov eax, [0xc75db8548ffeecb]; pop rbx; ret; 
0x000000001b3b37: mov eax, [0xe162ff065c6f08fe]; dec byte ptr [rax]; jg short 0x00000000001b3b5b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000129e53: mov eax, [0xf008b4864000eef]; mov bh, 0x4; push rax; and eax, 0x8; ret; 
0x0000000016d07b: mov eax, [0xfa1e0ff390fffc96]; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x000000000a0cdb: mov eax, [0xfa1e0ff3c3001786]; mov rax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x00000000167828: mov eax, [0xffa1dd058d4cffff]; push qword ptr [rcx]; in eax, dx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000012c449: mov eax, [r12]; pop rbx; pop rbp; pop r12; ret; 
0x0000000016b382: mov eax, [rax+0x10]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000046058: mov eax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000133ca3: mov eax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000eb027: mov eax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x00000000129448: mov eax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000016b342: mov eax, [rax+0x18]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000129438: mov eax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000133c7e: mov eax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000014b1ab: mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x0000000011b37c: mov eax, [rax+0x18]; test rax, rax; je short 0x000000000011b385; ret; 
0x0000000009e62a: mov eax, [rax+0x18]; test rax, rax; jne short 0x000000000009e620; ret; 
0x000000000c5308: mov eax, [rax+0x1f0]; ret; 
0x000000000c5318: mov eax, [rax+0x1f8]; ret; 
0x000000000c5328: mov eax, [rax+0x200]; ret; 
0x000000000c5338: mov eax, [rax+0x208]; ret; 
0x00000000086095: mov eax, [rax+0x20]; jmp rax; 
0x0000000009e741: mov eax, [rax+0x20]; test rax, rax; jne short 0x000000000009e738; ret; 
0x000000000c5348: mov eax, [rax+0x210]; ret; 
0x000000000c5358: mov eax, [rax+0x218]; ret; 
0x000000000c5368: mov eax, [rax+0x220]; ret; 
0x000000000c5378: mov eax, [rax+0x228]; ret; 
0x000000000c5388: mov eax, [rax+0x230]; ret; 
0x000000000c5398: mov eax, [rax+0x238]; ret; 
0x0000000015f6c3: mov eax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000c53a8: mov eax, [rax+0x240]; ret; 
0x000000000c52f0: mov eax, [rax+0x248]; ret; 
0x000000000e56cc: mov eax, [rax+0x2f8]; test rax, rax; je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x00000000133bb0: mov eax, [rax+0x30]; ret; 
0x00000000113d49: mov eax, [rax+0x310]; test rax, rax; je short 0x0000000000113d88; xor edx, edx; call rax; 
0x000000000e5668: mov eax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x00000000122429: mov eax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x000000001224a1: mov eax, [rax+0x320]; ret; 
0x000000001754c3: mov eax, [rax+0x338]; jmp rax; 
0x00000000090568: mov eax, [rax+0x348]; mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x00000000090516: mov eax, [rax+0x348]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000008fe51: mov eax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x0000000008fea1: mov eax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x000000000904a1: mov eax, [rax+0x388]; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x0000000008fee9: mov eax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x000000000904a8: mov eax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x00000000167f48: mov eax, [rax+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x0000000015e9e6: mov eax, [rax+0x38]; test rax, rax; je 0x000000000015e85e; mov rdi, rbx; call rax; 
0x0000000015d2f0: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000015d2fd; mov rdi, rbp; call rax; 
0x0000000015d747: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000015d754; mov rdi, rbp; call rax; 
0x0000000015e75e: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000015e76b; mov rdi, rbx; call rax; 
0x0000000015ead4: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000015eae1; mov rdi, rbx; call rax; 
0x0000000015f2f2: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000015f2ff; mov rdi, r13; call rax; 
0x00000000162c61: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000162c72; lea rdi, [rbp+0xc8]; call rax; 
0x000000001636a7: mov eax, [rax+0x38]; test rax, rax; je short 0x00000000001636b4; mov rdi, rbp; call rax; 
0x0000000016388c: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000016389b; lea rdi, [r12+0x10]; call rax; 
0x00000000164b4b: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000164b58; mov rdi, rbp; call rax; 
0x00000000164d20: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000164d2d; mov rdi, r13; call rax; 
0x00000000165a4e: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000165a5c; lea rdi, [rbp+0x68]; call rax; 
0x00000000166176: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000166183; mov rdi, rbp; call rax; 
0x000000001664ee: mov eax, [rax+0x38]; test rax, rax; je short 0x00000000001664fc; lea rdi, [rbp+0x58]; call rax; 
0x00000000169a0c: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000169a1b; lea rdi, [r12+0x10]; call rax; 
0x0000000016a1a5: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000016a1b4; lea rdi, [r12+0x10]; call rax; 
0x000000001659f1: mov eax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000003a346: mov eax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x00000000129d0b: mov eax, [rax+0x40]; ret; 
0x00000000122170: mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x0000000003a156: mov eax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e6: mov eax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x00000000166321: mov eax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x000000001753b8: mov eax, [rax+0x58]; add rsp, 0x70; pop rbx; jmp rax; 
0x0000000003a126: mov eax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b6: mov eax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a3ff: mov eax, [rax+0x58]; mov rdx, [rip+0x1de9df]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000045eae: mov eax, [rax+0x58]; ret; 
0x00000000175498: mov eax, [rax+0x60]; add rsp, 0x30; pop rbx; jmp rax; 
0x00000000122419: mov eax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000122499: mov eax, [rax+0x60]; ret; 
0x0000000008e650: mov eax, [rax+0x68]; test rax, rax; jne short 0x000000000008e648; ret; 
0x000000000a50ec: mov eax, [rax+0x870]; cmp rax, rsi; jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x0000000016b5b7: mov eax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x0000000008fef0: mov eax, [rax+0x8]; jmp rax; 
0x000000001223fb: mov eax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000012247b: mov eax, [rax+0x8]; ret; 
0x000000000eb06f: mov eax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000a794b: mov eax, [rax+0x8]; test rax, rax; jne short 0x00000000000a7940; xor eax, eax; ret; 
0x00000000162bf4: mov eax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x000000000388c2: mov eax, [rax+0xa8]; ret; 
0x00000000090cb7: mov eax, [rax+0xb8]; shr eax, 0xb; and eax, 0x1; mov [rip+0x18adcb], eax; ret; 
0x00000000083c15: mov eax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000083d4a: mov eax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000008608e: mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x000000000815ed: mov eax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000001bb2a1: mov eax, [rax+rbx*8]; mov [r13+rbx*8], rdx; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x0000000012a6fb: mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x00000000129e3c: mov eax, [rax+rcx]; mov ecx, edx; shr eax, cl; and eax, 0x1; ret; 
0x0000000003a129: mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a31b: mov eax, [rax+rdi*4]; ret; 
0x00000000039c43: mov eax, [rax+rdi*8+0x80]; ret; 
0x0000000007d339: mov eax, [rax+rdi*8]; ret; 
0x00000000036b04: mov eax, [rax+rdi*8]; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x0000000003a0b9: mov eax, [rax+rdx*4]; ret; 
0x00000000039ce1: mov eax, [rax+rdx]; mov eax, r8d; ret; 
0x00000000162df9: mov eax, [rax]; bswap eax; mov [rdi+0xb4], eax; mov eax, 0x1; ret; 
0x00000000162dc9: mov eax, [rax]; bswap eax; mov [rdi+0xb8], eax; mov eax, 0x1; ret; 
0x00000000114205: mov eax, [rax]; cmp eax, 0x26; je short 0x0000000000114210; mov eax, r9d; ret; 
0x00000000046d68: mov eax, [rax]; cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x0000000010588c: mov eax, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000388c0: mov eax, [rax]; mov eax, [rax+0xa8]; ret; 
0x00000000084793: mov eax, [rax]; mov eax, r8d; ret; 
0x0000000003a343: mov eax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a153: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e3: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a123: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b3: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x00000000039c40: mov eax, [rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388bd: mov eax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a150: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e0: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a120: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b0: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a080: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a060: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a100: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a040: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fc0: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f80: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a000: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f60: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a020: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fe0: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039fa0: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f40: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012a519: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a481: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x00000000129f99: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012a3e9: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a169: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a039: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012a2a9: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x00000000129ef9: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012a349: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a209: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x00000000129e59: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000133c04: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000045eab: mov eax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x000000000921f9: mov eax, [rax]; ret; 
0x00000000091936: mov eax, [rax]; syscall; 
0x00000000121626: mov eax, [rax]; test rax, rax; je 0x00000000001216d0; call rax; 
0x000000000eafaf: mov eax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x0000000012146c: mov eax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x0000000008f1c9: mov eax, [rax]; test rax, rax; jne short 0x000000000008f1c0; ret; 
0x0000000016a1ff: mov eax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000016a22b: mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000f6ed0: mov eax, [rbp+0x4c]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000167158: mov eax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015e2ca: mov eax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000016c335: mov eax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015ef81: mov eax, [rbp+0x8]; lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000164591: mov eax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016b6a9: mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016b650: mov eax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c5e7: mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c638: mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fcd8: mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001644f2: mov eax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001685c5: mov eax, [rbp+0x8]; mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168808: mov eax, [rbp+0x8]; mov dword ptr [r13], 0xe; lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000016449b: mov eax, [rbp+0x8]; mov dword ptr [rsp+0xc], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000001695e3: mov eax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x0000000015eef2: mov eax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000015efab: mov eax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164462: mov eax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015e2e5: mov eax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000015dcf6: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000169581: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000169421: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000015e269: mov eax, [rbp+0x8]; mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x0000000015f829: mov eax, [rbp+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f867: mov eax, [rbp+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015fc93: mov eax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x000000001644e1: mov eax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016943c: mov eax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c2fe: mov eax, [rbp+0x8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x00000000167cea: mov eax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x0000000016368c: mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000113883: mov eax, [rbp-0x168]; mov rsi, r13; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000010aac8: mov eax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x000000001204df: mov eax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000002b309: mov eax, [rbp-0x68]; mov rdi, r12; call rax; 
0x000000000562de: mov eax, [rbp-0x8]; sub rax, fs:[0x28]; jne short 0x0000000000056365; leave; ret; 
0x0000000017553b: mov eax, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x00000000090391: mov eax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x00000000090381: mov eax, [rbx+0x10]; mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x0000000008d8c1: mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001330b5: mov eax, [rbx+0x18]; movdqu xmm1, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x00000000133251: mov eax, [rbx+0x18]; movdqu xmm2, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x00000000089265: mov eax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x0000000015d733: mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d535: mov eax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000015d4f1: mov eax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000015d5cd: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d54e: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000015f66c: mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000175111: mov eax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000175201: mov eax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x000000001753b1: mov eax, [rbx+0x388]; mov rax, [rax+0x58]; add rsp, 0x70; pop rbx; jmp rax; 
0x00000000175491: mov eax, [rbx+0x388]; mov rax, [rax+0x60]; add rsp, 0x30; pop rbx; jmp rax; 
0x0000000008e07d: mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000a78ec: mov eax, [rbx+0x40]; je short 0x00000000000a791e; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x000000000a79b4: mov eax, [rbx+0x40]; test byte ptr [rbx+0x50], 0x1; jne short 0x00000000000a7990; mov rdi, rsi; call rax; 
0x0000000008e55f: mov eax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000001666c2: mov eax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000166696: mov eax, [rbx+0x60]; mov dword ptr [rbx+0x58], 0x0; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x00000000166709: mov eax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x00000000165c56: mov eax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x00000000165c6a: mov eax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000090365: mov eax, [rbx+0x8]; lea rdx, [rip+0x142479]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000133c9f: mov eax, [rbx+0x8]; mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000162ed8: mov eax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000162ef4: mov eax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000175f0d: mov eax, [rbx]; add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x000000001673c4: mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000091d31: mov eax, [rbx]; syscall; 
0x00000000168a2e: mov eax, [rbx]; test rax, rax; je short 0x0000000000168a40; pop rbx; ret; 
0x0000000018fa64: mov eax, [rcx+0x3]; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000bc879: mov eax, [rcx+0x3]; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x0000000018fa45: mov eax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000bc85a: mov eax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x0000000018fa76: mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x0000000018b726: mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x0000000018faf7: mov eax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x0000000018b767: mov eax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000018fa96: mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x0000000018b736: mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x0000000018fb17: mov eax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000018b787: mov eax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000018fab6: mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x000000000bc8fd: mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x0000000018fb37: mov eax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000018b7a7: mov eax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x000000000bc8de: mov eax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x0000000018fad6: mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x000000000bc91d: mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x0000000018f9c7: mov eax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x0000000018b697: mov eax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x00000000194e2a: mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000000c51ad: mov eax, [rcx+rax*4]; sub eax, [rcx+r8*4]; je short 0x00000000000c5198; ret; 
0x00000000196702: mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000165b91: mov eax, [rcx]; bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x00000000165b71: mov eax, [rcx]; bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x0000000018f9f1: mov eax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x000000000bc7f6: mov eax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x0000000018fa20: mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x000000000bc825: mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x0000000018f971: mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x0000000018b641: mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x00000000113433: mov eax, [rcx]; movsxd rax, [r13+rax*4]; add rax, r13; notrack jmp rax; 
0x00000000113994: mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000d7abb: mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000d7bb0; ret; 
0x000000000922e5: mov eax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000091291: mov eax, [rdi+0x10]; mov fs:[0x972], al; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x0000000008f1e4: mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x0000000008f20c: mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x000000000845ee: mov eax, [rdi+0x10]; sub rdx, [rcx+0x10]; sar rdx, 0x2; sub eax, edx; ret; 
0x00000000084600: mov eax, [rdi+0x10]; sub rdx, [rcx+0x8]; sar rdx, 0x2; sub eax, edx; ret; 
0x00000000113984: mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000d7ad0: mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ae5: mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000d7bb0; ret; 
0x000000000923f5: mov eax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cc35: mov eax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x000000000d7b00: mov eax, [rdi+0x1c]; cmp eax, [rsi+0x1c]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b1b: mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000d7bb0; ret; 
0x0000000009e081: mov eax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000015edc0: mov eax, [rdi+0x20]; mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x00000000037ef6: mov eax, [rdi+0x20]; mov rbp, rdi; test rax, rax; je short 0x0000000000037f03; call rax; 
0x00000000152054: mov eax, [rdi+0x20]; ret; 
0x000000001bb3d5: mov eax, [rdi+0x20]; test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x000000000d7b30: mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b45: mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000d7bb0; ret; 
0x0000000016cdc4: mov eax, [rdi+0x28]; cmp eax, edx; jae short 0x000000000016cdd0; xor eax, eax; ret; 
0x000000000a1814: mov eax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000016d0a4: mov eax, [rdi+0x28]; ret; 
0x000000000892b9: mov eax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x000000000d7b50: mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000d7bb0; ret; 
0x00000000095cb0: mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x00000000095caf: mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x000000000d7b6b: mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000d7bb0; ret; 
0x0000000015ed90: mov eax, [rdi+0x30]; test eax, eax; jne short 0x000000000015ede0; mov dword ptr [rsi], 0x0; ret; 
0x000000000d7b80: mov eax, [rdi+0x34]; cmp eax, [rsi+0x34]; jne short 0x00000000000d7bb0; ret; 
0x0000000015d65b: mov eax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d5c2: mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001673ca: mov eax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000015d50d: mov eax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000d7b95: mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000d7bb0; ret; 
0x0000000015d641: mov eax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000d7ba0: mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000d7bb0; ret; 
0x00000000089189: mov eax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x00000000090b35: mov eax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000000d7a70: mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x00000000092324: mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000090c11: mov eax, [rdi+0x58]; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000166ea8: mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000008f4e5: mov eax, [rdi+0x68]; ret; 
0x000000000875ac: mov eax, [rdi+0x70]; test eax, eax; js short 0x00000000000875b8; ret; 
0x0000000009f195: mov eax, [rdi+0x78]; ret; 
0x00000000062098: mov eax, [rdi+0x88]; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000119d74: mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000922d4: mov eax, [rdi+0x8]; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000016b361: mov eax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016b321: mov eax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000015d8aa: mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000167472: mov eax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000015ee9a: mov eax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000016ca5d: mov eax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000015fc0b: mov eax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000d7a85: mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000d7bb0; ret; 
0x0000000008f5db: mov eax, [rdi+0x8]; cmp rax, rdx; jae short 0x000000000008f608; movzx eax, byte ptr [rax]; ret; 
0x0000000015d207: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000016c971: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016c981: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016b541: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000016b536: mov eax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000016749d: mov eax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167521: mov eax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000001653ea: mov eax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x0000000016be99: mov eax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016ca31: mov eax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000016b641: mov eax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x000000001692aa: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016909a: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016910a: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016917a: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000015fc81: mov eax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016b5b3: mov eax, [rdi+0x8]; mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x00000000090b96: mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000164a6b: mov eax, [rdi+0x8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000016c5d9: mov eax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000015fbe1: mov eax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000015fcc5: mov eax, [rdi+0x8]; punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x0000000016b691: mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c626: mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016b781: mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c806: mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x00000000083bf5: mov eax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000d7aa0: mov eax, [rdi+0xc]; cmp eax, [rsi+0xc]; jne 0x00000000000d7bb0; ret; 
0x000000000c520b: mov eax, [rdi+rax*4]; sub eax, [rdi+r8*4]; je short 0x00000000000c51f0; ret; 
0x000000000a6bae: mov eax, [rdi+rax+0x8]; sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x0000000014a62b: mov eax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x000000000014a640; ret; 
0x000000001a6717: mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x00000000001a6850; ret; 
0x000000001a6760: mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne 0x00000000001a6850; ret; 
0x000000001a6840: mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne short 0x00000000001a6850; xor eax, eax; ret; 
0x000000001a6745: mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000001a6730: mov eax, [rdi-0xc]; cmp eax, [rsi-0xc]; jne 0x00000000001a6850; ret; 
0x000000000945f4: mov eax, [rdi]; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x00000000089214: mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000891e4: mov eax, [rdi]; and eax, 0x804; ret; 
0x00000000099d04: mov eax, [rdi]; and eax, 0xf000dff; mov [rsi], eax; xor eax, eax; ret; 
0x000000000d7a5b: mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000d7bb0; ret; 
0x000000000a0cf5: mov eax, [rdi]; cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000a0ec5: mov eax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000a0d35: mov eax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000165b00: mov eax, [rdi]; mov [rcx], eax; mov eax, 0x1; ret; 
0x000000001286b1: mov eax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000008f1d6: mov eax, [rdi]; mov [rdx], rax; ret; 
0x00000000097555: mov eax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000097545: mov eax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c95: mov eax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c85: mov eax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c75: mov eax, [rdi]; mov [rip+0x188617], eax; ret; 
0x00000000090c65: mov eax, [rdi]; mov [rip+0x188623], eax; ret; 
0x00000000092314: mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0a73: mov eax, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a10: mov eax, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09b0: mov eax, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x0000000009c565: mov eax, [rdi]; mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x000000000009c578; ret; 
0x00000000090b9a: mov eax, [rdi]; mov rdi, r8; jmp rax; 
0x000000000a0d55: mov eax, [rdi]; nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce5: mov eax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x000000000a0cd5: mov eax, [rdi]; nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd5: mov eax, [rdi]; nop; mov [rip+0x17f51e], eax; ret; 
0x000000000a0fb5: mov eax, [rdi]; nop; mov dword ptr [rip+0x1783e6], 0x1; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f95: mov eax, [rdi]; nop; mov dword ptr [rip+0x178406], 0x1; mov [rip+0x1783c7], rax; ret; 
0x000000000a0f75: mov eax, [rdi]; nop; mov dword ptr [rip+0x178426], 0x1; mov [rip+0x1783df], rax; ret; 
0x000000000a0f55: mov eax, [rdi]; nop; mov dword ptr [rip+0x178446], 0x1; mov [rip+0x1783f7], rax; ret; 
0x000000000e66e4: mov eax, [rdi]; ret; 
0x0000000009762b: mov eax, [rdi]; shr eax, 0x13; mov [rsi], eax; xor eax, eax; ret; 
0x00000000099cd4: mov eax, [rdi]; shr eax, 0x1f; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008a014: mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008a024: mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x0000000009a044: mov eax, [rdi]; test al, 0x2; je short 0x000000000009a050; xor eax, eax; ret; 
0x00000000163ac7: mov eax, [rdi]; test eax, eax; jne short 0x0000000000163ad0; ret; 
0x00000000169c27: mov eax, [rdi]; test eax, eax; jne short 0x0000000000169c30; ret; 
0x000000000892a6: mov eax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000053b6e: mov eax, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x00000000089176: mov eax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000086e8e: mov eax, [rdx+0x4c]; cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x000000001092f1: mov eax, [rdx+0x8]; ret; 
0x000000000b7c06: mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000013d9a1: mov eax, [rdx+rax*8+0x4]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000038881: mov eax, [rdx+rdi*8+0x40]; ret; 
0x00000000083eaf: mov eax, [rdx]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000016be40: mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000081e40: mov eax, [rdx]; ret; 
0x00000000118d09: mov eax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000118bd1: mov eax, [rip+0x100239]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000117181: mov eax, [rip+0x101c89]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000114299: mov eax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000113ea1: mov eax, [rip+0x104f69]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000105885: mov eax, [rip+0x11359d]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000ec547: mov eax, [rip+0x12c8cb]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x000000000ec4a7: mov eax, [rip+0x12c96b]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec1e7: mov eax, [rip+0x12cc2b]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec157: mov eax, [rip+0x12ccbb]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000e7727: mov eax, [rip+0x1316eb]; cmp byte ptr [rax], 0x0; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000e653a: mov eax, [rip+0x1328d0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5789: mov eax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5721: mov eax, [rip+0x1336e9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000e5661: mov eax, [rip+0x133861]; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000dd721: mov eax, [rip+0x13b731]; mov [rax], edx; xor eax, eax; pop rbx; ret; 
0x000000000d8e41: mov eax, [rip+0x13ffc9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000d8e21: mov eax, [rip+0x13ffe9]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x000000000c53a1: mov eax, [rip+0x153b21]; mov rax, [rax+0x240]; ret; 
0x000000000c5391: mov eax, [rip+0x153b31]; mov rax, [rax+0x238]; ret; 
0x000000000c5381: mov eax, [rip+0x153b41]; mov rax, [rax+0x230]; ret; 
0x000000000c5371: mov eax, [rip+0x153b51]; mov rax, [rax+0x228]; ret; 
0x000000000c5361: mov eax, [rip+0x153b61]; mov rax, [rax+0x220]; ret; 
0x000000000c5351: mov eax, [rip+0x153b71]; mov rax, [rax+0x218]; ret; 
0x000000000c5341: mov eax, [rip+0x153b81]; mov rax, [rax+0x210]; ret; 
0x000000000c5331: mov eax, [rip+0x153b91]; mov rax, [rax+0x208]; ret; 
0x000000000c5321: mov eax, [rip+0x153ba1]; mov rax, [rax+0x200]; ret; 
0x000000000c5311: mov eax, [rip+0x153bb1]; mov rax, [rax+0x1f8]; ret; 
0x000000000c5301: mov eax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000c52e9: mov eax, [rip+0x153bd9]; mov rax, [rax+0x248]; ret; 
0x000000000a7a55: mov eax, [rip+0x1713b5]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000a78d2: mov eax, [rip+0x171508]; call qword ptr [rax]; 
0x000000000a76e9: mov eax, [rip+0x1716f1]; call qword ptr [rax]; 
0x000000000a7621: mov eax, [rip+0x1717b9]; call qword ptr [rax]; 
0x000000000a4111: mov eax, [rip+0x174cf9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009fda1: mov eax, [rip+0x179069]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009dfb1: mov eax, [rip+0x17ae59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cda1: mov eax, [rip+0x17c069]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009cb61: mov eax, [rip+0x17c2a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c549: mov eax, [rip+0x17c8c1]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009c111: mov eax, [rip+0x17ccf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c071: mov eax, [rip+0x17cd99]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000099c5d: mov eax, [rip+0x17f651]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0732: mov eax, [rip+0x17fd08]; movaps [rsp+0x50], xmm0; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x0000000009e5d5: mov eax, [rip+0x1815ed]; mov dword ptr [rdi], 0x0; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x000000000921f1: mov eax, [rip+0x186c19]; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000909f9: mov eax, [rip+0x1884c9]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x000000000903fd: mov eax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x000000000961c4: mov eax, [rip+0x189926]; ret; 
0x0000000009056f: mov eax, [rip+0x18a4b3]; push r10; call rax; 
0x0000000008f4c5: mov eax, [rip+0x18b1b5]; ret; 
0x000000000897d1: mov eax, [rip+0x18f639]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000875b9: mov eax, [rip+0x191851]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000081189: mov eax, [rip+0x197c81]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000007a680: mov eax, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074bac: mov eax, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000005d8d3: mov eax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000046d91: mov eax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000000466a9: mov eax, [rip+0x1d2761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043109: mov eax, [rip+0x1d5d01]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000430c9: mov eax, [rip+0x1d5d41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043089: mov eax, [rip+0x1d5d81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043043: mov eax, [rip+0x1d5dc7]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000042f85: mov eax, [rip+0x1d5e85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000042f69: mov eax, [rip+0x1d5ea1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f21: mov eax, [rip+0x1d5ee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ed1: mov eax, [rip+0x1d5f39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e8a: mov eax, [rip+0x1d5f80]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e54: mov eax, [rip+0x1d5fb6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043134: mov eax, [rip+0x1d60aa]; ret; 
0x00000000043124: mov eax, [rip+0x1d60be]; ret; 
0x000000000424f1: mov eax, [rip+0x1d6919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424b1: mov eax, [rip+0x1d6959]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042441: mov eax, [rip+0x1d69c9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041ab2: mov eax, [rip+0x1d7358]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004177c: mov eax, [rip+0x1d768e]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004137b: mov eax, [rip+0x1d7a8f]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000407e1: mov eax, [rip+0x1d8629]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000040781: mov eax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a3a5: mov eax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a365: mov eax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000003a385: mov eax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x00000000039bf1: mov eax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x00000000039c35: mov eax, [rip+0x1df335]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388b5: mov eax, [rip+0x1e06b5]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x000000000355d5: mov eax, [rip+0x1e54a5]; ret; 
0x0000000002a531: mov eax, [rip+0x1ee8d9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002a255: mov eax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x0000000002b985: mov eax, [rip+0x1ef0b5]; ret; 
0x0000000002b975: mov eax, [rip+0x1ef0bd]; ret; 
0x000000001bb8e2: mov eax, [rip+0x5d5e0]; call qword ptr [rax+0x370]; 
0x00000000178345: mov eax, [rip+0xa0ac5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178325: mov eax, [rip+0xa0ae5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f5: mov eax, [rip+0xa0c15]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb5: mov eax, [rip+0xa0e55]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f95: mov eax, [rip+0xa0e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f55: mov eax, [rip+0xa0eb5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f35: mov eax, [rip+0xa0ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f15: mov eax, [rip+0xa0ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef5: mov eax, [rip+0xa0f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001760d9: mov eax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000175e91: mov eax, [rip+0xa2f79]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000175ca5: mov eax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000175534: mov eax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x000000001754e9: mov eax, [rip+0xa39d9]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x000000001754b5: mov eax, [rip+0xa3a0d]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000175045: mov eax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x00000000174f82: mov eax, [rip+0xa3f40]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000174eab: mov eax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000001724b5: mov eax, [rip+0xa6955]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000001720c5: mov eax, [rip+0xa6d45]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000168c21: mov eax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b21: mov eax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168ba1: mov eax, [rip+0xb0421]; pop rbx; ret; 
0x00000000168965: mov eax, [rip+0xb045d]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x00000000168aa9: mov eax, [rip+0xb0499]; pop rbx; ret; 
0x00000000155071: mov eax, [rip+0xc3d99]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x0000000015da74: mov eax, [rip+0xc9e46]; test eax, eax; je short 0x000000000015da80; ret; 
0x0000000014b1a5: mov eax, [rip+0xcdde5]; mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x0000000014a395: mov eax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x000000001496aa: mov eax, [rip+0xcf760]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000149621: mov eax, [rip+0xcf7e9]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001517d5: mov eax, [rip+0xd0dad]; test rax, rax; jne short 0x00000000001517e8; ret; 
0x00000000136b25: mov eax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x000000001360c1: mov eax, [rip+0xe2d49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012a511: mov eax, [rip+0xee8e1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a479: mov eax, [rip+0xee979]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a3e1: mov eax, [rip+0xeea11]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a341: mov eax, [rip+0xeeab1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a2a1: mov eax, [rip+0xeeb51]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a201: mov eax, [rip+0xeebf1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a161: mov eax, [rip+0xeec91]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a031: mov eax, [rip+0xeedc1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x00000000129f91: mov eax, [rip+0xeee61]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x00000000129ef1: mov eax, [rip+0xeef01]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x00000000129e51: mov eax, [rip+0xeefa1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000129d05: mov eax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x00000000128669: mov eax, [rip+0xf07a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000128421: mov eax, [rip+0xf09e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001271b5: mov eax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000001267f1: mov eax, [rip+0xf2619]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267b9: mov eax, [rip+0xf2651]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126789: mov eax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126721: mov eax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266c1: mov eax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126661: mov eax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126451: mov eax, [rip+0xf29b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126411: mov eax, [rip+0xf29f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000122481: mov eax, [rip+0xf6989]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000001217e9: mov eax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012161f: mov eax, [rip+0xf787b]; mov rax, [rax]; test rax, rax; je 0x00000000001216d0; call rax; 
0x00000000121465: mov eax, [rip+0xf7a35]; mov rax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x00000000129441: mov eax, [rip+0xf81d1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x00000000129431: mov eax, [rip+0xf81e1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000011faa1: mov eax, [rip+0xf9369]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000011fa6c: mov eax, [rip+0xf939e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000011fa5a: mov eax, [rip+0xf93b0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000011f21e: mov eax, [rip+0xf9bec]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011ebe1: mov eax, [rip+0xfa229]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000011bff1: mov eax, [rip+0xfce19]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011bfc9: mov eax, [rip+0xfce41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011be85: mov eax, [rip+0xfcf85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000011b375: mov eax, [rip+0xfdb4d]; mov rax, [rax+0x18]; test rax, rax; je short 0x000000000011b385; ret; 
0x0000000011b177: mov eax, [rip+0xfdc9b]; cmp byte ptr [rax], 0x0; je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x0000000011b0e7: mov eax, [rip+0xfdd2b]; cmp byte ptr [rax], 0x0; je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x0000000011a9f1: mov eax, [rip+0xfe419]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000119e24: mov eax, [rip+0xfefe6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119dcb: mov eax, [rip+0xff03f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001194c9: mov eax, [rip+0xff941]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000119493: mov eax, [rip+0xff977]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009e6a3: mov eax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x0000000009e781: mov eax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x00000000119539: mov eax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x0000000014e747: mov eax, [rsi+0x4]; cmp [rdi+0x14], eax; sete al; movzx eax, al; ret; 
0x0000000014e7b1: mov eax, [rsi+0x4]; cmp [rdi+0x4], eax; sete al; movzx eax, al; ret; 
0x00000000119897: mov eax, [rsi+0x50]; mov [rdi+0x38], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000003a2f5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a2d5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a195: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a2b5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a235: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a1f5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a275: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a1d5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a295: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a255: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a215: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a1b5: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012ade1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012ad61: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a961: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012ace1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012aae1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a9e1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012abe1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a8e1: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012ac61: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012ab61: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a861: mov eax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000166164: mov eax, [rsi+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000003a315: mov eax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a325: mov eax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x000000000388a1: mov eax, [rsi+rax*8+0x80]; ret; 
0x000000000430ba: mov eax, [rsi]; and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000016bfe0: mov eax, [rsi]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000113a34: mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x00000000091ef2: mov eax, [rsi]; mov edx, 0x16; test eax, eax; cmovne eax, edx; ret; 
0x0000000016b4f0: mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000430fa: mov eax, [rsi]; or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000a04fc: mov eax, [rsp+0x10]; add rsp, 0x28; ret; 
0x00000000033977: mov eax, [rsp+0x10]; call rax; 
0x00000000174ec2: mov eax, [rsp+0x10]; mov esi, 0x40; mov rdi, r12; call rax; 
0x00000000163030: mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000174c7a: mov eax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000120034: mov eax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000162f0e: mov eax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000041094: mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000119924: mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x0000000002d842: mov eax, [rsp+0x18]; call rax; 
0x0000000011e64b: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e724: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210b0: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121170: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121577: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x00000000121794: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa2: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x0000000013258b: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x0000000016989f: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698e4: mov eax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x00000000149c6a: mov eax, [rsp+0x208]; sub rax, fs:[0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x00000000136e5e: mov eax, [rsp+0x20]; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x0000000002d282: mov eax, [rsp+0x28]; call rax; 
0x0000000015d95b: mov eax, [rsp+0x28]; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000090641: mov eax, [rsp+0x28]; sub r8, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x0000000015e6f5: mov eax, [rsp+0x38]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000089fd9: mov eax, [rsp+0x38]; sub rax, fs:[0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x0000000016b3b9: mov eax, [rsp+0x38]; sub rax, fs:[0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000012134b: mov eax, [rsp+0x408]; sub rax, fs:[0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x00000000164d71: mov eax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000035187: mov eax, [rsp+0x48]; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x00000000166b4b: mov eax, [rsp+0x48]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000164eb0: mov eax, [rsp+0x48]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000125d2c: mov eax, [rsp+0x4]; add rsp, 0x20; pop r12; ret; 
0x00000000127fac: mov eax, [rsp+0x4]; add rsp, 0x28; ret; 
0x000000001690ae: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x0000000016911e: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x0000000016918e: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691ef: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169253: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692be: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169341: mov eax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x00000000172240: mov eax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000046222: mov eax, [rsp+0x8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003a89d: mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000125dfb: mov eax, [rsp+0x8]; add rsp, 0x20; pop r12; ret; 
0x0000000013ed88: mov eax, [rsp+0x8]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000046cd5: mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001193db: mov eax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x000000000a0441: mov eax, [rsp+0x8]; add rsp, 0x38; ret; 
0x00000000029d8a: mov eax, [rsp+0x8]; call rax; 
0x00000000094920: mov eax, [rsp+0x8]; mov esi, 0x18; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x0000000008563d: mov eax, [rsp+0x8]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000015f2b9: mov eax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000094b32: mov eax, [rsp+0x8]; mov rdi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x0000000015d2da: mov eax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000014485f: mov eax, [rsp+0x8]; sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x000000000420e8: mov eax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x00000000046800: mov eax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x0000000004684d: mov eax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x0000000015e745: mov eax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000095e50: mov eax, [rsp+0xc]; add rsp, 0x10; pop rbp; ret; 
0x0000000013e918: mov eax, [rsp+0xc]; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000009b7d5: mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000ea56d: mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x00000000041b84: mov eax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000017253f: mov eax, [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000001152e6: mov eax, [rsp]; add rsp, 0x18; ret; 
0x00000000127883: mov eax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x00000000112954: mov eax, [rsp]; add rsp, 0x28; ret; 
0x00000000127949: mov eax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x00000000129d67: mov eax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc8: mov eax, [rsp]; add rsp, 0x40; ret; 
0x0000000004448c: mov eax, [rsp]; call rax; 
0x00000000083b9a: mov eax, [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000044611: mov eax, [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000013f21d: mov eax, [rsp]; mov rdi, r12; call rax; 
0x00000000145400: mov eax, [rsp]; mov rdi, r15; call rax; 
0x0000000008df14: mov eax, [rsp]; mov rdi, r15; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000013e5e8: mov eax, [rsp]; mov rdi, rbx; call rax; 
0x00000000044401: mov eax, [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000445ad: mov eax, [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000012c44a: mov eax, [rsp]; pop rbx; pop rbp; pop r12; ret; 
0x0000000010b1f5: mov eax, eax; add r9, r13; call r15; 
0x0000000011ab1a: mov eax, eax; add rsp, 0x58; ret; 
0x0000000011d7a0: mov eax, eax; add rsp, 0x8; ret; 
0x000000000a0555: mov eax, eax; cmp eax, 0xfffff000; ja short 0x00000000000a0568; mov eax, r8d; ret; 
0x00000000061fac: mov eax, eax; cmp eax, 0xffffffff; je short 0x0000000000061fc0; mov eax, r8d; ret; 
0x00000000165b35: mov eax, eax; mov [rcx], rax; mov eax, 0x1; ret; 
0x0000000016c32e: mov eax, eax; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x00000000142fba: mov eax, eax; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000142d1c: mov eax, eax; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000011a27c: mov eax, eax; mov eax, 0x10; syscall; 
0x00000000115132: mov eax, eax; mov eax, 0x3; syscall; 
0x0000000011ba52: mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000011bb12: mov eax, eax; mov eax, 0x4b; syscall; 
0x000000001152ca: mov eax, eax; mov eax, 0x55; syscall; 
0x00000000042801: mov eax, eax; mov eax, 0x82; syscall; 
0x00000000126348: mov eax, eax; mov eax, r8d; ret; 
0x000000000e5945: mov eax, eax; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x00000000114756: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000012629e: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000011ab90: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x0000000011ac30: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a62: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x000000001276ce: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x00000000127b40: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001279e2: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x00000000114f5a: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000001149c2: mov eax, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x00000000127602: mov eax, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x0000000012607d: mov eax, eax; mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000001199ae: mov eax, eax; mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000e585c: mov eax, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x0000000004320b: mov eax, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000046cb1: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecc1: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d71: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000001148e1: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000012803c: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fcc: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000ea48d: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000001198fe: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ece: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000012829e: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000012612d: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x0000000011292e: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129de: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000002a3af: mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000046739: mov eax, eax; movups [rdi], xmm0; ret; 
0x000000000515eb: mov eax, eax; or r8d, ecx; mov rax, r8; ret; 
0x00000000092719: mov eax, eax; pop r12; pop r13; pop r14; ret; 
0x00000000142141: mov eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000003572e: mov eax, eax; pop rbp; pop r12; ret; 
0x00000000115d2f: mov eax, eax; pop rbp; ret; 
0x000000000457d8: mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000042c73: mov eax, eax; pop rbx; ret; 
0x00000000039c87: mov eax, eax; ret; 
0x0000000015e2c0: mov eax, eax; sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000099ef4: mov eax, eax; syscall; 
0x0000000019dcc5: mov eax, eax; vzeroupper; ret; 
0x00000000092905: mov eax, eax; xor sil, 0x80; syscall; 
0x000000001ac9d7: mov eax, eax; xtest; je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001add4a: mov eax, eax; xtest; je short 0x00000000001add55; vzeroall; ret; 
0x00000000091c87: mov eax, ebp; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x00000000153527: mov eax, ebp; mov rcx, r14; mov rdi, r13; call r12; 
0x000000000a8146: mov eax, ebp; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000151c01: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x00000000092259: mov eax, ebp; pop r12; pop r13; ret; 
0x000000000a8b3a: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000012e208: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000093019: mov eax, ebp; syscall; 
0x000000000929f5: mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000054663: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000089d8f: mov eax, ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000119fb5: mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x00000000121f4b: mov eax, ebx; mov rax, r8; pop rbx; ret; 
0x000000001134e0: mov eax, ebx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000119f8c: mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x000000000ac06a: mov eax, ebx; pop rbx; cmovne rax, rdx; ret; 
0x00000000089cd3: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000d8e01: mov eax, ebx; pop rbx; ret; 
0x000000000abcdd: mov eax, ebx; ret; 
0x000000000dd717: mov eax, ebx; test edx, edx; jne short 0x00000000000dd720; pop rbx; ret; 
0x000000000612c7: mov eax, ebx; test r8d, r8d; jne short 0x00000000000612d0; pop rbx; ret; 
0x0000000005452b: mov eax, ecx; adc eax, eax; ret; 
0x000000000426c0: mov eax, ecx; add rsp, 0x148; ret; 
0x0000000011a17f: mov eax, ecx; add rsp, 0x38; ret; 
0x00000000084671: mov eax, ecx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x000000001269e4: mov eax, ecx; mov eax, 0x1b3; syscall; 
0x00000000125b98: mov eax, ecx; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000011ea34: mov eax, ecx; mov r9, [rsp+0x8]; syscall; 
0x000000000e30b3: mov eax, ecx; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000077a3b: mov eax, ecx; pop r14; ret; 
0x00000000119ff3: mov eax, ecx; pop rbx; pop rbp; ret; 
0x00000000082b48: mov eax, ecx; ret; 
0x00000000046d3b: mov eax, ecx; sub rsi, rdi; syscall; 
0x000000000893e6: mov eax, ecx; syscall; 
0x0000000003a174: mov eax, edi; and eax, 0x7f; ret; 
0x000000001367b8: mov eax, edi; and eax, 0xffffff; ret; 
0x00000000136774: mov eax, edi; bswap eax; ret; 
0x000000000e7176: mov eax, edi; call rax; 
0x000000000a808f: mov eax, edi; cmp [r8+0x8], rsi; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x000000001217b4: mov eax, edi; cmp rdi, rax; jne short 0x00000000001217e8; mov eax, 0x88; syscall; 
0x00000000045e25: mov eax, edi; cqo; idiv rsi; ret; 
0x0000000011d314: mov eax, edi; mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000011d2a4: mov eax, edi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000009eb94: mov eax, edi; mov r10d, 0x8; syscall; 
0x00000000045dd4: mov eax, edi; neg eax; cmovs eax, edi; ret; 
0x00000000045de5: mov eax, edi; neg rax; cmovs rax, rdi; ret; 
0x00000000096d69: mov eax, edi; not esi; and esi, 0x80; syscall; 
0x000000001367d2: mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000005a1c2: mov eax, edi; ret; 
0x00000000136784: mov eax, edi; rol ax, 0x8; ret; 
0x0000000013669e: mov eax, edi; sar rax, 0x6; ret; 
0x0000000012567b: mov eax, edi; shl rax, 0x20; and rax, rcx; or rax, rdx; ret; 
0x00000000136838: mov eax, edi; shr eax, 0x18; ret; 
0x0000000018d2bf: mov eax, edi; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x0000000018d4b5: mov eax, edi; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000018d4d7: mov eax, edi; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x0000000018d4fd: mov eax, edi; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x0000000018d515: mov eax, edi; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x0000000018d53b: mov eax, edi; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x0000000018d55d: mov eax, edi; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x0000000018d57b: mov eax, edi; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x0000000018d257: mov eax, edi; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x0000000018d59d: mov eax, edi; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x0000000018d5bd: mov eax, edi; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x0000000018d5dd: mov eax, edi; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x0000000018d5fd: mov eax, edi; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x0000000018d61f: mov eax, edi; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x0000000018d63f: mov eax, edi; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x0000000018d65f: mov eax, edi; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x00000000096ea8: mov eax, edi; syscall; 
0x0000000019fb11: mov eax, edi; vzeroupper; ret; 
0x00000000087483: mov eax, edx; and eax, 0x1; ret; 
0x00000000041405: mov eax, edx; and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000056771: mov eax, edx; bts rax, 0x30; mov [rsi+0x8], rax; mov eax, 0x2; ret; 
0x00000000143366: mov eax, edx; cmovs r8d, eax; mov eax, r8d; ret; 
0x00000000149b64: mov eax, edx; mov byte ptr [r8], 0x0; ret; 
0x00000000149b61: mov eax, edx; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x000000001b5678: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b42a8: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x000000000e30d7: mov eax, edx; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000101286: mov eax, edx; movsxd rdx, [r13+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x00000000103878: mov eax, edx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000a9f2f: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000059fba: mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000055585: mov eax, edx; pop rbx; ret; 
0x00000000040773: mov eax, edx; ret; 
0x00000000029db2: mov eax, edx; syscall; 
0x000000001a10d1: mov eax, edx; vzeroupper; ret; 
0x00000000125a67: mov eax, edx; xchg [rip+0xfba51], eax; cmp eax, 0x1; jg short 0x0000000000125a78; ret; 
0x00000000165ac4: mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x0000000009bc89: mov eax, esi; mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000177e05: mov eax, esi; mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x00000000042315: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000165aa7: mov eax, esi; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001663ac: mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x00000000162cd4: mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x0000000007f516: mov eax, esi; pop r12; pop r13; pop r14; ret; 
0x0000000005a109: mov eax, esi; ret; 
0x000000000eac9d: mov eax, esi; syscall; 
0x0000000009d391: mov eax, esp; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x00000000082315: mov eax, esp; pop r12; pop r13; pop r14; ret; 
0x00000000114567: mov eax, esp; pop r12; pop r13; ret; 
0x0000000003aa19: mov eax, esp; pop r12; ret; 
0x00000000120b22: mov eax, esp; pop rbp; pop r12; jmp rax; 
0x0000000011fd29: mov eax, esp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000007f9e5: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x00000000061178: mov eax, esp; pop rbp; pop r12; ret; 
0x00000000053861: mov eax, esp; pop rbx; pop r12; ret; 
0x0000000003a97b: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000011f495: mov eax, esp; pop rdx; pop r12; ret; 
0x0000000009370c: mov eax, esp; syscall; 
0x00000000046c74: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x000000000a03c7: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a0487: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000ea447: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea654: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000001128e7: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x00000000112997: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x00000000114853: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x00000000114984: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x00000000114a24: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f08: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x00000000115104: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x00000000115294: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000118d34: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x00000000119357: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x000000001198b7: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x00000000119967: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x0000000011ab54: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abf4: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011ba24: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011bae4: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011ec84: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x00000000125f87: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x00000000126037: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260e7: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x00000000126197: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x00000000126264: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x000000001275c4: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x00000000127694: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x000000001278c7: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x0000000012799a: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127b04: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127ba7: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e87: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f37: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000127ff7: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x00000000128257: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x00000000128307: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x0000000009af7e: mov eax, fs:[0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000975da: mov eax, fs:[0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000012c448: mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x00000000114204: mov eax, fs:[rax]; cmp eax, 0x26; je short 0x0000000000114210; mov eax, r9d; ret; 
0x00000000046d67: mov eax, fs:[rax]; cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x000000000921f8: mov eax, fs:[rax]; ret; 
0x00000000149ac0: mov eax, r10d; ret; 
0x000000001289ae: mov eax, r10d; syscall; 
0x00000000082314: mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x00000000114566: mov eax, r12d; pop r12; pop r13; ret; 
0x0000000009d2a9: mov eax, r12d; pop r12; ret; 
0x00000000096463: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x00000000086513: mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000053860: mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000431e5: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000009370b: mov eax, r12d; syscall; 
0x00000000091c86: mov eax, r13d; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x00000000092258: mov eax, r13d; pop r12; pop r13; ret; 
0x00000000093018: mov eax, r13d; syscall; 
0x0000000009eb93: mov eax, r15d; mov r10d, 0x8; syscall; 
0x00000000096d68: mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x00000000096ea7: mov eax, r15d; syscall; 
0x0000000011ab19: mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011d79f: mov eax, r8d; add rsp, 0x8; ret; 
0x00000000142d1b: mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x00000000046738: mov eax, r8d; movups [rdi], xmm0; ret; 
0x00000000092718: mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x00000000153400: mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x0000000003572d: mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000f8093: mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000042c72: mov eax, r8d; pop rbx; ret; 
0x00000000039c86: mov eax, r8d; ret; 
0x00000000099ef3: mov eax, r8d; syscall; 
0x00000000092904: mov eax, r8d; xor sil, 0x80; syscall; 
0x000000000426be: mov eax, r9d; add rsp, 0x148; ret; 
0x0000000011a17e: mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011a17d: mov eax, r9d; add rsp, 0x38; ret; 
0x00000000119ff2: mov eax, r9d; pop rbx; pop rbp; ret; 
0x00000000082b47: mov eax, r9d; ret; 
0x00000000046d3a: mov eax, r9d; sub rsi, rdi; syscall; 
0x000000000893e5: mov eax, r9d; syscall; 
0x000000000a2a42: mov ebp, 0x16e80013; jrcxz 0x00000000000a2a48; jmp qword ptr [rsi+0xf]; 
0x0000000007c673: mov ebp, 0x1; xor r8d, r8d; jmp rsi; 
0x0000000012e75d: mov ebp, 0x2000001; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000001af921: mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x00000000199aa1: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x000000001af931: mov ebp, 0x40c083c0; add rax, rdi; ret; 
0x00000000199ab1: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x000000000b50a1: mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b50b1: mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000b5091: mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000001b567e: mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x00000000114882: mov ebp, 0x48000000; add esp, 0x78; ret; 
0x0000000011daaf: mov ebp, 0x4c001038; mov eax, eax; ret; 
0x00000000199ac1: mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x000000000a6fcd: mov ebp, 0x63480012; add al, 0x82; add rax, rdx; notrack jmp rax; 
0x0000000019dd06: mov ebp, 0x83d72948; shl byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x0000000002c670: mov ebp, 0x8948ffff; ret; 
0x0000000019b8ff: mov ebp, 0x8b00022b; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000129d07: mov ebp, 0x8b000ef1; ret; 
0x000000000b7bff: mov ebp, 0x8b001068; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000012761f: mov ebp, 0x8bfff694; and al, 0xc; add rsp, 0x28; ret; 
0x0000000002b977: mov ebp, 0xc3001ef0; nop [rax]; endbr64; mov rax, [rip+0x1ef0b5]; ret; 
0x00000000162c6b: mov ebp, 0xc8; call rax; 
0x00000000079dfd: mov ebp, 0xe9fffff0; xchg esp, eax; in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000b50c1: mov ebp, 0xea8348c0; add rdx, rax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000000c5008: mov ebp, 0xf000000; adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x0000000003d26b: mov ebp, 0xf0018ef; mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000071e71: mov ebp, 0xf6000000; ret; 
0x000000001afa0e: mov ebp, 0xf80148c0; add rax, r8; ret; 
0x00000000199b9f: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000b51b7: mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000b4fe7: mov ebp, 0xf80148c0; ret; 
0x000000001999b0: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000001a85d4: mov ebp, 0xf80148c0; xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000000ba9bc: mov ebp, 0xf80148c6; ret; 
0x00000000160224: mov ebp, 0xfd64f6e8; jmp qword ptr [rsi+0xf]; 
0x00000000079615: mov ebp, 0xfffff748; mov rdx, r10; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000782ea: mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2ac: mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000078d21: mov ebp, 0xfffff748; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000079454: mov ebp, 0xfffff748; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x00000000079742: mov ebp, 0xfffff748; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000000677b4: mov ebp, 0xfffff940; add [rdi], cl; test [rax], esi; ret far; 
0x00000000119fb8: mov ebp, [r10]; syscall; 
0x0000000014c061: mov ebp, [rbx+rsi*8]; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000a9d61: mov ebp, [rbx-0x72b7ffff]; add eax, 0x1ac94; cmove rax, rdx; ret; 
0x00000000119fb9: mov ebp, [rdx]; syscall; 
0x0000000010b1e5: mov ebp, [rip+0x10dc65]; add rax, fs:[0x0]; mov r8, rax; add r9, r13; call r15; 
0x0000000011fe3c: mov ebp, [rsp+0x10]; test r13, r13; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe6c: mov ebp, [rsp+0x10]; test r13, r13; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c98: mov ebp, [rsp+0x10]; test r13, r13; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x0000000016c4c4: mov ebp, eax; and eax, 0xffffffff; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015fe7c: mov ebp, eax; bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbx+0x10]; 
0x00000000043808: mov ebp, eax; mov rdi, r12; call rbx; 
0x000000000a78c6: mov ebp, eax; test r13, r13; jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x00000000162ee6: mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000120413: mov ebp, ebx; mov rdi, rbp; call r12; 
0x0000000004231b: mov ebp, ecx; nop; jmp rdx; 
0x00000000044615: mov ebp, edi; add r15, r14; call rax; 
0x0000000015dd3f: mov ebp, edi; jmp qword ptr [rsi+0x66]; 
0x00000000037efa: mov ebp, edi; test rax, rax; je short 0x0000000000037f03; call rax; 
0x0000000016090c: mov ebp, edx; call qword ptr [rbx+0x10]; 
0x0000000007f807: mov ebp, edx; mov rdi, [rdi+0xe0]; call rax; 
0x00000000119fb7: mov ebp, fs:[r10]; syscall; 
0x00000000076221: mov ebx, 0x1; jmp rsi; 
0x000000000947ce: mov ebx, 0x2d0; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x00000000094781: mov ebx, 0x2d0; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000136832: mov ebx, 0x401f0f; mov eax, edi; shr eax, 0x18; ret; 
0x000000001367b1: mov ebx, 0x441f0f; add [rcx-0xda08], cl; inc dword ptr [rax]; ret; 
0x000000000f7a01: mov ebx, 0x45000dcf; movzx esp, ah; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000001824d7: mov ebx, 0x46f00ff2; ret far; 
0x000000001824d1: mov ebx, 0x477f0ff3; mov ebx, 0x46f00ff2; ret far; 
0x000000001344e1: mov ebx, 0x48000723; lea eax, [rip+0x72424]; cmove rax, rdx; ret; 
0x000000000a8451: mov ebx, 0x48000e1b; cmovne eax, edx; ret; 
0x0000000017d003: mov ebx, 0x4e6f0ff3; ret far; 
0x0000000017d022: mov ebx, 0x4f7f0ff3; ret far; 
0x0000000009df33: mov ebx, 0x5d5bffff; mov eax, r12d; pop r12; ret; 
0x000000000949aa: mov ebx, 0x648; call qword ptr [rbx+0x640]; 
0x00000000169573: mov ebx, 0x66fffffe; nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x000000000ec159: mov ebx, 0x800012cc; cmp [rax], al; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000001134f2: mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000003c8e8: mov ebx, 0x8348fffe; ret; 
0x000000000c5a89: mov ebx, 0x8d48000d; add eax, 0x110cd; cmove rax, rdx; ret; 
0x0000000017d852: mov ebx, 0x8d4c0009; sbb eax, 0x65a34; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000009499c: mov ebx, 0x970; add [rdi], cl; test [rcx+0x48000001], cl; mov edi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000000c6db8: mov ebx, 0xb275000d; ret; 
0x00000000149b51: mov ebx, 0xc641; mov rax, r10; ret; 
0x0000000009e57c: mov ebx, 0xe80013b0; ret far; 
0x0000000010ad63: mov ebx, [rbp-0x1f0]; call r11; 
0x0000000006aedc: mov ebx, [rbp-0x5c8]; mov r10d, [rbp-0x5c0]; movsxd rax, [rcx+r15*4]; add rax, rcx; notrack jmp rax; 
0x00000000133d97: mov ebx, [rbp-0x8]; leave; ret; 
0x00000000029ecb: mov ebx, [rip+0x1eeff7]; mov rsi, [r12]; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x0000000017c811: mov ebx, [rsi-0x10]; mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000007b9c8: mov ebx, [rsp+0x58]; jmp rsi; 
0x0000000007632e: mov ebx, [rsp+0x70]; jmp rsi; 
0x0000000004392d: mov ebx, [rsp]; mov rsi, r15; mov rdi, r12; mov rdx, r14; call rbp; 
0x000000001604a6: mov ebx, eax; bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbp+0x10]; 
0x0000000009ebc2: mov ebx, eax; mov edi, 0x2; mov eax, r15d; syscall; 
0x00000000167ce6: mov ebx, eax; pop rax; mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x000000000e6c29: mov ebx, ebp; mov rdi, rbp; call r12; 
0x00000000075a9c: mov ebx, ecx; jmp rsi; 
0x00000000075e77: mov ebx, ecx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x0000000007ba0e: mov ebx, ecx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c671: mov ebx, ecx; mov ebp, 0x1; xor r8d, r8d; jmp rsi; 
0x00000000076c29: mov ebx, ecx; mov r10d, 0x1; jmp rsi; 
0x00000000076c61: mov ebx, ecx; mov r15d, 0x1; jmp rsi; 
0x0000000007c6f1: mov ebx, ecx; mov r8d, 0x1; jmp rsi; 
0x0000000007c6e1: mov ebx, ecx; mov r9d, 0x1; jmp rsi; 
0x0000000007621b: mov ebx, ecx; xor r15d, r15d; mov r11d, 0x1; jmp rsi; 
0x0000000009a01d: mov ebx, edi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000001256a1: mov ebx, edi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x00000000083c0d: mov ebx, edi; test byte ptr [rdi], 0x2; jne short 0x0000000000083c88; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000075a44: mov ebx, edx; mov edx, 0x1; jmp rsi; 
0x00000000076be1: mov ebx, edx; mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x00000000075621: mov ebx, edx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x00000000075478: mov ebx, edx; xor edx, edx; jmp rsi; 
0x0000000011f9c5: mov ebx, esi; je short 0x000000000011f9d0; pop rbx; ret; 
0x000000001365ef: mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000000ecb07: mov ecx, 0x11d8b48; ret; 
0x0000000007c6e4: mov ecx, 0x1; jmp rsi; 
0x00000000090f78: mov ecx, 0x1; lock cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x00000000168ae7: mov ecx, 0x3894864; pop rbx; ret; 
0x0000000008c964: mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000005a16b: mov ecx, 0x3a8; mov rsp, rdx; ret; 
0x0000000006aeec: mov ecx, 0x3ec80148; jmp rax; 
0x000000000b1397: mov ecx, 0x3ecf014c; jmp rdi; 
0x0000000013b5b5: mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x0000000011514c: mov ecx, 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x00000000107590: mov ecx, 0x48000005; add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000c3897: mov ecx, 0x490010fb; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1237: mov ecx, 0x4900111f; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000126453: mov ecx, 0x64000f29; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011512a: mov ecx, 0x7c8bfff7; and al, 0xc; mov r8d, eax; mov eax, 0x3; syscall; 
0x00000000199dc6: mov ecx, 0x83d72948; jmp qword ptr [rax+0x73]; 
0x000000000ea6e3: mov ecx, 0x85ffffb0; shl byte ptr [rbp+0x5], 0x48; add esp, 0x8; ret; 
0x00000000125cb4: mov ecx, 0x8; mov eax, 0x119; syscall; 
0x00000000125d84: mov ecx, 0x8; mov eax, 0x1b9; syscall; 
0x000000000c4c10: mov ecx, 0xb730015; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000012cff3: mov ecx, 0xe8000f49; test [rbx-0xa], al; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000e97e3: mov ecx, 0xe8001372; xchg esp, eax; jnp short 0x00000000000e97e5; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000a8473: mov ecx, 0xf7000f69; mov byte ptr [rax], 0x4; add [rax], al; jne short 0x00000000000a8434; ret; 
0x00000000113c53: mov ecx, 0xf7001051; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000a0453: mov ecx, 0xf7001789; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000001afb92: mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a7213: mov ecx, 0xffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000009118b: mov ecx, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000108dba: mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000013eb24: mov ecx, [0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x00000000076322: mov ecx, [rax-0x73]; sbb eax, 0xfffff4c6; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000007b9bc: mov ecx, [rax-0x73]; sbb eax, 0xfffff67c; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x000000001290e6: mov ecx, [rax]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x00000000129066: mov ecx, [rax]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x000000001803ce: mov ecx, [rbp+0x1]; fnstcw [rsi]; jmp r9; 
0x0000000010ad5c: mov ecx, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x00000000029e5b: mov ecx, [rcx+0x8]; mov rsi, r12; mov edi, ebp; add rcx, [r14]; call rcx; 
0x00000000054317: mov ecx, [rcx+rdx*8]; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x0000000012a5e5: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae2c: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae89: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x000000001a3f53: mov ecx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000001a3f40: mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000001a3f3f: mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000001a3f2e: mov ecx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000001286a5: mov ecx, [rdi+0x8]; xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x00000000001286b0; ret; 
0x000000000c588b: mov ecx, [rdi+r8*4]; test ecx, ecx; jne short 0x00000000000c5868; mov rax, r8; ret; 
0x000000000c588c: mov ecx, [rdi+rax*4]; test ecx, ecx; jne short 0x00000000000c5868; mov rax, r8; ret; 
0x000000001a1996: mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4622: mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x00000000001b4610; ret; 
0x000000001a19b6: mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4636: mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x00000000001b4610; ret; 
0x000000001a19d6: mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x00000000001a1979; vzeroupper; ret; 
0x000000001b464a: mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x00000000001b4610; ret; 
0x000000001a358a: mov ecx, [rdi+rdx-0x4]; cmp ecx, [rsi+rdx-0x4]; jne short 0x00000000001a35aa; ret; 
0x0000000019a253: mov ecx, [rdi+rdx-0x4]; mov edi, [rsi+rdx-0x4]; sub ecx, edi; or eax, ecx; ret; 
0x000000001a1cfc: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a2204: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b49ef: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001b4610; ret; 
0x000000001b5137: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001b4c81; ret; 
0x000000001a1e23: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ca0: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x00000000001b4c81; ret; 
0x0000000017ae1e: mov ecx, [rdi-0x73]; or al, 0xb; notrack jmp r9; 
0x000000001a21e2: mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b5112: mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x00000000001b4c81; ret; 
0x00000000053b72: mov ecx, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000b7c03: mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000009c568: mov ecx, [rdx]; cmp [rax+0x18], rcx; je short 0x000000000009c578; ret; 
0x000000001162c5: mov ecx, [rip+0x102b45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116295: mov ecx, [rip+0x102b75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116265: mov ecx, [rip+0x102ba5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116238: mov ecx, [rip+0x102bd2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116205: mov ecx, [rip+0x102c05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161d5: mov ecx, [rip+0x102c35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161a5: mov ecx, [rip+0x102c65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116178: mov ecx, [rip+0x102c92]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116145: mov ecx, [rip+0x102cc5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115cb8: mov ecx, [rip+0x103152]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c85: mov ecx, [rip+0x103185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c55: mov ecx, [rip+0x1031b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c25: mov ecx, [rip+0x1031e5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115365: mov ecx, [rip+0x103aa5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115335: mov ecx, [rip+0x103ad5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115275: mov ecx, [rip+0x103b95]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115205: mov ecx, [rip+0x103c05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151d5: mov ecx, [rip+0x103c35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151a5: mov ecx, [rip+0x103c65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114fb5: mov ecx, [rip+0x103e55]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114645: mov ecx, [rip+0x1047c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114615: mov ecx, [rip+0x1047f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114445: mov ecx, [rip+0x1049c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114415: mov ecx, [rip+0x1049f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108d15: mov ecx, [rip+0x1100f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108ce5: mov ecx, [rip+0x110125]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108cb5: mov ecx, [rip+0x110155]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c85: mov ecx, [rip+0x110185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c55: mov ecx, [rip+0x1101b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c25: mov ecx, [rip+0x1101e5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108bf5: mov ecx, [rip+0x110215]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec475: mov ecx, [rip+0x12c995]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec445: mov ecx, [rip+0x12c9c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec415: mov ecx, [rip+0x12c9f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec3e5: mov ecx, [rip+0x12ca25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec385: mov ecx, [rip+0x12ca85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec355: mov ecx, [rip+0x12cab5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec125: mov ecx, [rip+0x12cce5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eb105: mov ecx, [rip+0x12dd05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eac59: mov ecx, [rip+0x12e1b1]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea5c5: mov ecx, [rip+0x12e845]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea385: mov ecx, [rip+0x12ea85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000054069: mov ecx, [rip+0x1c4da1]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053b80: mov ecx, [rip+0x1c528a]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053a1d: mov ecx, [rip+0x1c53ed]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042d55: mov ecx, [rip+0x1d60b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042765: mov ecx, [rip+0x1d66a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000029eea: mov ecx, [rip+0x1eefd8]; mov rsi, [r12]; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x0000000017d84f: mov ecx, [rip+0x9bbc3]; lea r11, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7f5: mov ecx, [rip+0x9bc1d]; lea r11, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae6f: mov ecx, [rip+0x9e5a3]; lea r11, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae0e: mov ecx, [rip+0x9e604]; lea r11, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x00000000127d28: mov ecx, [rip+0xf10e2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cf5: mov ecx, [rip+0xf1115]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cc5: mov ecx, [rip+0xf1145]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001277e5: mov ecx, [rip+0xf1625]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127775: mov ecx, [rip+0xf1695]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127745: mov ecx, [rip+0xf16c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127675: mov ecx, [rip+0xf1795]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127195: mov ecx, [rip+0xf1c75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127155: mov ecx, [rip+0xf1cb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127125: mov ecx, [rip+0xf1ce5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270f5: mov ecx, [rip+0xf1d15]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270c5: mov ecx, [rip+0xf1d45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127098: mov ecx, [rip+0xf1d72]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127065: mov ecx, [rip+0xf1da5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127035: mov ecx, [rip+0xf1dd5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127005: mov ecx, [rip+0xf1e05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fd5: mov ecx, [rip+0xf1e35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fa5: mov ecx, [rip+0xf1e65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f78: mov ecx, [rip+0xf1e92]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f48: mov ecx, [rip+0xf1ec2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f15: mov ecx, [rip+0xf1ef5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ee5: mov ecx, [rip+0xf1f25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126eb8: mov ecx, [rip+0xf1f52]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e85: mov ecx, [rip+0xf1f85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e55: mov ecx, [rip+0xf1fb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e25: mov ecx, [rip+0xf1fe5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126df5: mov ecx, [rip+0xf2015]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126dc5: mov ecx, [rip+0xf2045]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d98: mov ecx, [rip+0xf2072]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d65: mov ecx, [rip+0xf20a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d38: mov ecx, [rip+0xf20d2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d05: mov ecx, [rip+0xf2105]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126cd5: mov ecx, [rip+0xf2135]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ca5: mov ecx, [rip+0xf2165]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c75: mov ecx, [rip+0xf2195]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c45: mov ecx, [rip+0xf21c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c15: mov ecx, [rip+0xf21f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126bd5: mov ecx, [rip+0xf2235]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ba5: mov ecx, [rip+0xf2265]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126a0b: mov ecx, [rip+0xf23ff]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125f65: mov ecx, [rip+0xf2ea5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125e95: mov ecx, [rip+0xf2f75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c85: mov ecx, [rip+0xf3185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c55: mov ecx, [rip+0xf31b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125bbf: mov ecx, [rip+0xf324b]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b45: mov ecx, [rip+0xf32c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b15: mov ecx, [rip+0xf32f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001223a8: mov ecx, [rip+0xf6a62]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122375: mov ecx, [rip+0xf6a95]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122348: mov ecx, [rip+0xf6ac2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122315: mov ecx, [rip+0xf6af5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222e5: mov ecx, [rip+0xf6b25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222b8: mov ecx, [rip+0xf6b52]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122285: mov ecx, [rip+0xf6b85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122258: mov ecx, [rip+0xf6bb2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122228: mov ecx, [rip+0xf6be2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221f5: mov ecx, [rip+0xf6c15]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221c5: mov ecx, [rip+0xf6c45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122198: mov ecx, [rip+0xf6c72]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ee55: mov ecx, [rip+0xf9fb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ee25: mov ecx, [rip+0xf9fe5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edf5: mov ecx, [rip+0xfa015]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edc5: mov ecx, [rip+0xfa045]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed98: mov ecx, [rip+0xfa072]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed65: mov ecx, [rip+0xfa0a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed35: mov ecx, [rip+0xfa0d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec65: mov ecx, [rip+0xfa1a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec35: mov ecx, [rip+0xfa1d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ea47: mov ecx, [rip+0xfa3c3]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bf15: mov ecx, [rip+0xfcef5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bee5: mov ecx, [rip+0xfcf25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011beb5: mov ecx, [rip+0xfcf55]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bb85: mov ecx, [rip+0xfd285]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bac5: mov ecx, [rip+0xfd345]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ba05: mov ecx, [rip+0xfd405]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b9d5: mov ecx, [rip+0xfd435]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b675: mov ecx, [rip+0xfd795]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b535: mov ecx, [rip+0xfd8d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011a945: mov ecx, [rip+0xfe4c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119815: mov ecx, [rip+0xff5f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119338: mov ecx, [rip+0xffad2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000c1435: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd85: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000c1474: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000bfdc4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000bfdb4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000c14f5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2365: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000bfe45: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe25: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000bfe88: mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000bfe69: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000bfea8: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000d7a38: mov ecx, [rsi+0xc]; cmp [rdi+0xc], ecx; jne 0x00000000000d7bb0; xor eax, eax; ret; 
0x000000000c14b5: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c2325: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000bfde5: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000c1454: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c22c4: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000bfda4: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000c14d5: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c2345: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000bfe05: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000001a1b35: mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47f5: mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x00000000001b4610; ret; 
0x000000001a1b65: mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4835: mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001b4610; ret; 
0x000000001a1fdc: mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ebc: mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x00000000001b4c81; ret; 
0x000000001b01d4: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x0000000019fe54: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13d4: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x0000000019e3b4: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000000c4a50: mov ecx, [rsi+rdx-0x4]; mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000001b01f4: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x000000001b13e4: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3c4: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000c4a61: mov ecx, [rsi+rdx-0x8]; mov rsi, [rsi]; mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x000000001b4a60: mov ecx, [rsi+rdx]; test eax, eax; jne 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b51cf: mov ecx, [rsi+rdx]; test eax, eax; jne 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001b49c6: mov ecx, [rsi+rdx]; test eax, eax; jne short 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b50db: mov ecx, [rsi+rdx]; test eax, eax; jne short 0x00000000001b50c0; sub eax, ecx; ret; 
0x0000000017cdc5: mov ecx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000001a600f: mov ecx, [rsi-0x4]; cmp eax, ecx; jne 0x00000000001a6220; xor eax, eax; ret; 
0x0000000017d1a3: mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d3a3: mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d5a3: mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x00000000182314: mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182294: mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182214: mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182194: mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182105: mov ecx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182075: mov ecx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000181fe5: mov ecx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017c9f1: mov ecx, [rsi-0x9]; mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbd1: mov ecx, [rsi-0xa]; mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cdb1: mov ecx, [rsi-0xb]; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf91: mov ecx, [rsi-0xc]; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017d181: mov ecx, [rsi-0xd]; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d381: mov ecx, [rsi-0xe]; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d581: mov ecx, [rsi-0xf]; mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182d25: mov ecx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x00000000182c43: mov ecx, [rsi]; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000182a85: mov ecx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000182bd3: mov ecx, [rsi]; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x00000000182a15: mov ecx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x00000000182b63: mov ecx, [rsi]; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000001829a5: mov ecx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000c12f0: mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000bfcb0: mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x00000000182935: mov ecx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000001828c5: mov ecx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x00000000182855: mov ecx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000001827e5: mov ecx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000c1341: mov ecx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000bfcf1: mov ecx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000c12d1: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000bfc91: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000001b13d0: mov ecx, [rsi]; mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x000000000c0981: mov ecx, [rsi]; mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000c09a0: mov ecx, [rsi]; mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000c09e1: mov ecx, [rsi]; mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000bfcc0: mov ecx, [rsi]; mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000bfd01: mov ecx, [rsi]; mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000bfcd0: mov ecx, [rsi]; mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x000000000bfd11: mov ecx, [rsi]; mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000bfd21: mov ecx, [rsi]; mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x000000001b3b00: mov ecx, [rsi]; mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x000000001a6977: mov ecx, [rsi]; mov esi, [rsi+rdx]; mov [rdi], ecx; mov [rdi+rdx], esi; ret; 
0x000000001b13e1: mov ecx, [rsi]; mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x000000000bfd31: mov ecx, [rsi]; mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000bfd41: mov ecx, [rsi]; mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000bfd51: mov ecx, [rsi]; mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001b3b11: mov ecx, [rsi]; mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000000d3a4a: mov ecx, [rsp+0x10]; call r13; 
0x000000000b1549: mov ecx, [rsp+0x10]; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000174c1d: mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x000000000c66ab: mov ecx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000168336: mov ecx, [rsp+0x10]; mov rdx, rbx; mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x000000000e7356: mov ecx, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000001666f7: mov ecx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x0000000013a393: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e9b: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000003518c: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x0000000002e03d: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002f4c0: mov ecx, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x0000000016314a: mov ecx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000162f2f: mov ecx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x000000001385b9: mov ecx, [rsp+0x28]; mov rdx, [rsp+0x18]; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000002ee4f: mov ecx, [rsp+0x28]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x00000000033968: mov ecx, [rsp+0x28]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321bf: mov ecx, [rsp+0x28]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x00000000090780: mov ecx, [rsp+0x28]; sub rcx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x0000000002f4c5: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x000000000301be: mov ecx, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x000000000311ad: mov ecx, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x00000000153a21: mov ecx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000001377ab: mov ecx, [rsp+0x58]; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x00000000129d62: mov ecx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc3: mov ecx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000015d523: mov ecx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000e7089: mov ecx, [rsp+0x8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000160a79: mov ecx, [rsp+0x8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x0000000011ea37: mov ecx, [rsp+0x8]; syscall; 
0x0000000010aacf: mov ecx, [rsp]; call rax; 
0x00000000145a26: mov ecx, [rsp]; mov rdi, r14; call rcx; 
0x0000000015eabe: mov ecx, [rsp]; mov rsi, r15; mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000015e9d3: mov ecx, [rsp]; xor eax, eax; mov rdi, rbx; call rcx; 
0x0000000012a7e0: mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x000000000c51ab: mov ecx, eax; mov eax, [rcx+rax*4]; sub eax, [rcx+r8*4]; je short 0x00000000000c5198; ret; 
0x000000000c5209: mov ecx, eax; mov eax, [rdi+rax*4]; sub eax, [rdi+r8*4]; je short 0x00000000000c51f0; ret; 
0x0000000011ace6: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011ada6: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x0000000011ae3d: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011af9d: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000ea546: mov ecx, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000118e6d: mov ecx, eax; mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000b1059: mov ecx, eax; xor eax, eax; mov [rdx], rcx; ret; 
0x0000000015382b: mov ecx, ebp; call r10; 
0x00000000167726: mov ecx, ebp; lea r8, [rip-0x5b5f]; xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x0000000013ef19: mov ecx, ebp; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x00000000081230: mov ecx, ebp; mov edx, r12d; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000e9dfd: mov ecx, ebp; mov rsi, r12; mov rdx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e9a8d: mov ecx, ebp; mov rsi, r12; mov rdx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x0000000010d2c1: mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x000000001377a8: mov ecx, ebx; mov rcx, [rsp+0x58]; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x0000000008a0f7: mov ecx, ebx; sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000015d464: mov ecx, ebx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x00000000153c45: mov ecx, edi; call r12; 
0x00000000155113: mov ecx, edi; call rbp; 
0x0000000012a6fe: mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x000000000a9901: mov ecx, edi; str [rax-0x73]; add eax, 0xfcff4; cmove rax, rdx; ret; 
0x000000000906b8: mov ecx, edx; call rax; 
0x00000000162d88: mov ecx, edx; mov [rax], rcx; mov eax, 0x1; ret; 
0x000000000c5135: mov ecx, edx; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000000e314d: mov ecx, edx; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000000c4c16: mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x00000000129e3f: mov ecx, edx; shr eax, cl; and eax, 0x1; ret; 
0x0000000005d8da: mov ecx, esi; call qword ptr [rax+r8*8]; 
0x0000000015352a: mov ecx, esi; mov rdi, r13; call r12; 
0x0000000002aa93: mov ecx, esi; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000d330e: mov ecx, esi; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x00000000086f77: mov ecx, esi; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000163829: mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000d3319: mov ecx, esp; call rbx; 
0x000000000c6930: mov ecx, esp; mov rdx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000138e0d: mov ecx, esp; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000137c9a: mov ecx, esp; mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x000000000e8137: mov ecx, esp; mov rdx, r13; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000e8537: mov ecx, esp; mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000814ac: mov ecx, esp; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x000000000814ab: mov ecx, r12d; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x0000000008122f: mov ecx, r13d; mov edx, r12d; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000eabb4: mov edi, 0x1200011; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x00000000076c64: mov edi, 0x1; jmp rsi; 
0x000000000e58b3: mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000a0bb1: mov edi, 0x1; mov eax, 0xe; lea rsi, [rip+0x13213e]; sub rsp, 0x8; syscall; 
0x00000000095334: mov edi, 0x1; mov eax, 0xe; syscall; 
0x0000000012f755: mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000012e5f8: mov edi, 0x2000004; call rax; 
0x00000000130f91: mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000012ea71: mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000094987: mov edi, 0x2; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x0000000009528d: mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000009eb8e: mov edi, 0x2; mov eax, r15d; mov r10d, 0x8; syscall; 
0x0000000009ebc4: mov edi, 0x2; mov eax, r15d; syscall; 
0x000000000893e0: mov edi, 0x2; mov eax, r9d; syscall; 
0x00000000053a3e: mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000009b5a5: mov edi, 0x2d0; mov eax, 0xcb; syscall; 
0x00000000095d5d: mov edi, 0x2d0; mov eax, 0xcc; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000095dab: mov edi, 0x2d0; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000053999: mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000005a131: mov edi, 0x3004; mov eax, 0x9e; syscall; 
0x000000000903f4: mov edi, 0x460; add [rbp+rcx+0x48], dh; mov eax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x0000000006256d: mov edi, 0x48000000; lea ecx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000001bb8dd: mov edi, 0x48ffed50; mov eax, [rip+0x5d5e0]; call qword ptr [rax+0x370]; 
0x000000001994e0: mov edi, 0x4b74c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000841c5: mov edi, 0x4c000001; mov edi, edi; call qword ptr [rax+0x20]; 
0x00000000095cdf: mov edi, 0x628; cmove eax, edx; ret; 
0x0000000016ca51: mov edi, 0x748d4806; and al, 0x4; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000000a10bd: mov edi, 0x83000861; clc; add [rdx+rcx+0x48], esi; add esp, 0x8; ret; 
0x0000000016ace1: mov edi, 0x8337e983; call far fword ptr [rdx]; 
0x0000000007f80b: mov edi, 0xe0; call rax; 
0x0000000007f7cf: mov edi, 0xe0; jmp rax; 
0x0000000007f858: mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x0000000016ba22: mov edi, 0xe6894806; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000011396c: mov edi, 0xf8; movups [rsi+0x70], xmm7; ret; 
0x00000000113a00: mov edi, 0xf8; ret; 
0x0000000017241b: mov edi, 0xfc42ffe8; jmp qword ptr [rsi+0x2e]; 
0x0000000017238b: mov edi, 0xfc438fe8; jmp qword ptr [rsi+0x2e]; 
0x0000000011bbab: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000013d0a9: mov edi, 0xff9671e8; call qword ptr [rax-0x5e1f00d]; 
0x0000000013cfb9: mov edi, 0xff9761e8; call qword ptr [rax-0x5e1f00d]; 
0x0000000013b928: mov edi, 0xffadf2e8; jmp qword ptr [rsi-0x70]; 
0x000000000ea9d0: mov edi, 0xfffeb8e9; jmp qword ptr [rsi+0x2e]; 
0x0000000016fc91: mov edi, 0xffff1885; inc dword ptr [rcx]; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000001146df: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000011b224: mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x0000000011b2e4: mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x00000000153681: mov edi, [r13]; call qword ptr [rsp+0x20]; 
0x00000000153b6c: mov edi, [r14]; call qword ptr [rsp+0x70]; 
0x00000000094b37: mov edi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x0000000009d399: mov edi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009192f: mov edi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000a0895: mov edi, [rax]; mov eax, 0xe2; syscall; 
0x000000001630f5: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000163035: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001673c7: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000162f16: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001666db: mov edi, [rax]; mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001bab1c: mov edi, [rbp+0x10]; add rdi, rbp; call r12; 
0x000000000902a1: mov edi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090071: mov edi, [rbp+0x10]; call qword ptr [rbx+0x360]; 
0x0000000011feca: mov edi, [rbp+0x10]; test rdi, rdi; jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011feff: mov edi, [rbp+0x10]; test rdi, rdi; jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011fe97: mov edi, [rbp+0x10]; test rdi, rdi; jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x00000000120cdf: mov edi, [rbp+0x10]; test rdi, rdi; jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x0000000011ff2b: mov edi, [rbp+0x10]; test rdi, rdi; jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120d3b: mov edi, [rbp+0x10]; test rdi, rdi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d0f: mov edi, [rbp+0x10]; test rdi, rdi; jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x000000001168a1: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116bf9: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b91: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000009d435: mov edi, [rbp+0x8]; call qword ptr [rbp]; 
0x00000000045d9a: mov edi, [rbp+0x8]; call rax; 
0x0000000014128a: mov edi, [rbp-0x60]; syscall; 
0x00000000079614: mov edi, [rbp-0x8b8]; mov rdx, r10; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000782e9: mov edi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2ab: mov edi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000078d20: mov edi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000079453: mov edi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x00000000079741: mov edi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x00000000160732: mov edi, [rbp]; add rbx, rax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x00000000153682: mov edi, [rbp]; call qword ptr [rsp+0x20]; 
0x0000000011fe14: mov edi, [rbp]; call rbx; 
0x00000000167f52: mov edi, [rbp]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000c5d58: mov edi, [rbp]; movzx esi, bl; call rbp; 
0x000000000c5e00: mov edi, [rbp]; push 0x0; lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x0000000015da47: mov edi, [rbp]; test rdi, rdi; je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001163e0: mov edi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000947cd: mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x00000000094780: mov edi, [rbx+0x2d0]; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000000a7991: mov edi, [rbx+0x48]; call rax; 
0x000000000a78f2: mov edi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000013e98d: mov edi, [rbx+0x48]; test rdi, rdi; jne short 0x000000000013e980; pop rbx; ret; 
0x000000000949a9: mov edi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000001134f1: mov edi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000092df6: mov edi, [rbx+0x8]; call qword ptr [rbx]; 
0x00000000091d2a: mov edi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000167465: mov edi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000001410b0: mov edi, [rbx]; mov eax, 0x3; syscall; 
0x000000001673d1: mov edi, [rbx]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015d8a2: mov edi, [rbx]; test rdi, rdi; je short 0x000000000015d8b7; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000113480: mov edi, [rcx+0x8]; xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x00000000090a00: mov edi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x0000000009b5a4: mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x00000000095d5c: mov edi, [rdi+0x2d0]; mov eax, 0xcc; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x00000000095da9: mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000095daa: mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000163ac5: mov edi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x0000000000163ad0; ret; 
0x00000000169c25: mov edi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x0000000000169c30; ret; 
0x000000000a774d: mov edi, [rdi+0x48]; mov rsi, r12; call rax; 
0x0000000009a020: mov edi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000175016: mov edi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fc5: mov edi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x0000000007f80a: mov edi, [rdi+0xe0]; call rax; 
0x0000000007f7ce: mov edi, [rdi+0xe0]; jmp rax; 
0x0000000007f857: mov edi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000016000d: mov edi, [rdi]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [r15+0x40]; 
0x0000000015ff29: mov edi, [rdi]; add r13, rcx; sub edx, ecx; mov rsi, r13; call qword ptr [r15+0x40]; 
0x00000000174f89: mov edi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000140ff4: mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000132ab4: mov edi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x0000000011d7f5: mov edi, [rip+0x103b4d]; test rdi, rdi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x00000000173584: mov edi, [rip+0xa5fbe]; test edi, edi; jns short 0x0000000000173590; ret; 
0x0000000015557e: mov edi, [rip+0xd227c]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000001a1c89: mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b499f: mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x00000000001b4610; ret; 
0x000000001a1b03: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1f99: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b47b5: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001b4610; ret; 
0x000000001b4e6b: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x0000000019a257: mov edi, [rsi+rdx-0x4]; sub ecx, edi; or eax, ecx; ret; 
0x0000000019a28c: mov edi, [rsi+rdx-0x8]; sub rcx, rdi; or rax, rcx; cmovne eax, edx; ret; 
0x0000000016027a: mov edi, [rsi]; add r13, rbx; sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x00000000153b6d: mov edi, [rsi]; call qword ptr [rsp+0x70]; 
0x000000000e9a98: mov edi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000138e1a: mov edi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x000000000ea494: mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x0000000011540a: mov edi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x00000000091186: mov edi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000043818: mov edi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000a04e2: mov edi, [rsp+0x10]; syscall; 
0x00000000120c6c: mov edi, [rsp+0x10]; test rdi, rdi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x00000000029d7d: mov edi, [rsp+0x14]; mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000001750f8: mov edi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x00000000136e67: mov edi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x00000000174c7f: mov edi, [rsp+0x18]; call rax; 
0x00000000174c22: mov edi, [rsp+0x18]; call rcx; 
0x000000001148e8: mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x00000000119905: mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ed5: mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x000000001282a5: mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000011b95c: mov edi, [rsp+0x1c]; syscall; 
0x0000000017546c: mov edi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x0000000013eec9: mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000001385c6: mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x000000001751f0: mov edi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x0000000011705b: mov edi, [rsp+0x28]; lea rcx, [rsp+0x38]; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000000e9e07: mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e813c: mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x00000000153a33: mov edi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000035196: mov edi, [rsp+0x38]; call r15; 
0x000000000352f2: mov edi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x000000000301c8: mov edi, [rsp+0x48]; call r14; 
0x00000000033972: mov edi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c9: mov edi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b7: mov edi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x00000000125d12: mov edi, [rsp+0x4]; syscall; 
0x0000000002f4cf: mov edi, [rsp+0x50]; call r13; 
0x0000000002ee59: mov edi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002d27d: mov edi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d83d: mov edi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x000000001666d6: mov edi, [rsp+0x68]; mov rdi, [rax]; mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000008e0b3: mov edi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000139ea5: mov edi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x000000000298b4: mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000126083: mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000001199b4: mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000001262a0: mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000011ab92: mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x00000000046cb4: mov edi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ac32: mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a64: mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000011ecc4: mov edi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000001276d0: mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x00000000127b42: mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001279e4: mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x00000000114f5c: mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000118d74: mov edi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000427f7: mov edi, [rsp+0x8]; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000015e40d: mov edi, [rsp+0x8]; mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000118e70: mov edi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000e853d: mov edi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000a0425: mov edi, [rsp+0x8]; syscall; 
0x000000001149c4: mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x00000000128043: mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000127604: mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000125fd3: mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x0000000011512d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x3; syscall; 
0x0000000011ba4d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000011bb0d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4b; syscall; 
0x0000000008d8e6: mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000011fe46: mov edi, [rsp]; call rbx; 
0x00000000126134: mov edi, [rsp]; mov eax, 0x116; syscall; 
0x00000000112935: mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129e5: mov edi, [rsp]; mov eax, 0x12; syscall; 
0x00000000127920: mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000001152c6: mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000001754bf: mov edi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000044485: mov edi, [rsp]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x0000000015d654: mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d506: mov edi, [rsp]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015d5b9: mov edi, [rsp]; test r15d, r15d; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000085647: mov edi, eax; call qword ptr [rax+0x18]; 
0x00000000167f4c: mov edi, eax; call qword ptr [rax+0x20]; 
0x00000000090109: mov edi, eax; call qword ptr [rbx+0x360]; 
0x00000000045a52: mov edi, eax; call rax; 
0x00000000167aaa: mov edi, eax; call rbp; 
0x000000001269fc: mov edi, eax; call rdx; 
0x0000000005a2c3: mov edi, eax; cmp rdx, rcx; jae short 0x000000000005a2ac; mov rax, r8; ret; 
0x00000000090b9d: mov edi, eax; jmp rax; 
0x000000000ea679: mov edi, eax; mov eax, 0x22; syscall; 
0x00000000125bb5: mov edi, eax; mov eax, 0x3c; syscall; 
0x000000000995f0: mov edi, eax; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009994d: mov edi, eax; mov eax, 0xca; syscall; 
0x000000000a0a76: mov edi, eax; mov eax, 0xdf; syscall; 
0x000000000a0a13: mov edi, eax; mov eax, 0xe0; syscall; 
0x000000000a09b3: mov edi, eax; mov eax, 0xe1; syscall; 
0x00000000091b47: mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x00000000096903: mov edi, eax; mov eax, 0xea; syscall; 
0x000000000929f3: mov edi, eax; mov eax, ebp; xor sil, 0x80; syscall; 
0x0000000009321e: mov edi, eax; mov eax, r9d; syscall; 
0x00000000096a3f: mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000968cf: mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000001b7aeb: mov edi, eax; movsxd rax, [rcx+r12*4]; xor edi, r13d; add rax, rcx; notrack jmp rax; 
0x0000000009b032: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000029e61: mov edi, ebp; add rcx, [r14]; call rcx; 
0x0000000015ef8a: mov edi, ebp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000000751c6: mov edi, ebp; call qword ptr [r12+0x38]; 
0x00000000088352: mov edi, ebp; call qword ptr [r13+0x10]; 
0x00000000075d23: mov edi, ebp; call qword ptr [r13+0x38]; 
0x0000000008ba32: mov edi, ebp; call qword ptr [r13+0x90]; 
0x00000000076591: mov edi, ebp; call qword ptr [r14+0x38]; 
0x0000000008ac5d: mov edi, ebp; call qword ptr [r15+0x80]; 
0x0000000008a7bc: mov edi, ebp; call qword ptr [r15+0x90]; 
0x0000000015f834: mov edi, ebp; call qword ptr [rax+0x10]; 
0x0000000008b750: mov edi, ebp; call qword ptr [rax+0x18]; 
0x0000000015d2df: mov edi, ebp; call qword ptr [rax+0x20]; 
0x0000000015e2ec: mov edi, ebp; call qword ptr [rax+0x28]; 
0x0000000015eefb: mov edi, ebp; call qword ptr [rax+0x30]; 
0x00000000072857: mov edi, ebp; call qword ptr [rax+0x38]; 
0x0000000016c5f0: mov edi, ebp; call qword ptr [rax+0x40]; 
0x000000001644e8: mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000008b84b: mov edi, ebp; call qword ptr [rax+0x78]; 
0x0000000008ab85: mov edi, ebp; call qword ptr [rax+0x80]; 
0x0000000015d4f8: mov edi, ebp; call qword ptr [rax+0x8]; 
0x0000000008aa17: mov edi, ebp; call qword ptr [rax+0x90]; 
0x0000000015fc9a: mov edi, ebp; call qword ptr [rax]; 
0x0000000007ed5c: mov edi, ebp; call qword ptr [rbx+0x10]; 
0x0000000008da27: mov edi, ebp; call qword ptr [rbx+0x18]; 
0x00000000076045: mov edi, ebp; call qword ptr [rbx+0x38]; 
0x0000000007f09d: mov edi, ebp; call qword ptr [rbx+0x80]; 
0x0000000008c0d2: mov edi, ebp; call qword ptr [rbx+0x88]; 
0x0000000007ebeb: mov edi, ebp; call qword ptr [rbx+0x90]; 
0x00000000029eb7: mov edi, ebp; call qword ptr [rcx]; 
0x0000000013e595: mov edi, ebp; call qword ptr [rsp+0x10]; 
0x00000000137ca5: mov edi, ebp; call qword ptr [rsp+0x50]; 
0x000000001377b3: mov edi, ebp; call qword ptr [rsp+0x70]; 
0x0000000009edc9: mov edi, ebp; call r12; 
0x00000000029e17: mov edi, ebp; call r15; 
0x0000000004543d: mov edi, ebp; call rax; 
0x00000000043847: mov edi, ebp; call rbx; 
0x0000000015d528: mov edi, ebp; call rcx; 
0x0000000015d539: mov edi, ebp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000167cd1: mov edi, ebp; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015dedc: mov edi, ebp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000086d0c: mov edi, ebp; lea r9, [rsp+0x28]; call rbp; 
0x000000000c6565: mov edi, ebp; lea r9, [rsp+0x30]; call rbx; 
0x0000000016446b: mov edi, ebp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015e1d9: mov edi, ebp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000a01cd: mov edi, ebp; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000015d5d3: mov edi, ebp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d554: mov edi, ebp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000164d61: mov edi, ebp; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x000000001693f7: mov edi, ebp; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000113d05: mov edi, ebp; mov eax, 0x135; syscall; 
0x0000000011aecf: mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02f: mov edi, ebp; mov eax, 0x148; syscall; 
0x00000000098392: mov edi, ebp; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009904e: mov edi, ebp; mov eax, 0xca; syscall; 
0x00000000093f7d: mov edi, ebp; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000a0602: mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000e56a3: mov edi, ebp; mov eax, 0xe5; syscall; 
0x000000000a0102: mov edi, ebp; mov eax, 0xf4; syscall; 
0x00000000097be5: mov edi, ebp; mov eax, r13d; syscall; 
0x00000000096d66: mov edi, ebp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x00000000096ea5: mov edi, ebp; mov eax, r15d; syscall; 
0x00000000099ef1: mov edi, ebp; mov eax, r8d; syscall; 
0x0000000011fd07: mov edi, ebp; mov edx, r13d; mov esi, 0x1; call r12; 
0x000000000970f6: mov edi, ebp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000015e26d: mov edi, ebp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000143589: mov edi, ebp; mov qword ptr [rsp], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000015e29b: mov edi, ebp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000004460e: mov edi, ebp; mov rax, [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000120b1f: mov edi, ebp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000011fd97: mov edi, ebp; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000c66b0: mov edi, ebp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000131969: mov edi, ebp; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x0000000008608a: mov edi, ebp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x00000000083974: mov edi, ebp; pop rbp; pop r12; jmp rax; 
0x0000000002a137: mov edi, ebp; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000083e7b: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x0000000015ec0d: mov edi, ebp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x000000001759d0: mov edi, ebp; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x00000000143664: mov edi, ebp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000008b280: mov edi, ebp; sub r12, r14; call qword ptr [rax+0x40]; 
0x00000000120afe: mov edi, ebp; xor edx, edx; mov esi, 0x1; call r12; 
0x0000000011fcf5: mov edi, ebp; xor esi, esi; call r12; 
0x000000000c6863: mov edi, ebp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x00000000175ad6: mov edi, ebp; xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000009a53c: mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f12b: mov edi, ebx; call qword ptr [r12+0x18]; 
0x0000000008c96f: mov edi, ebx; call qword ptr [r12+0x48]; 
0x0000000008b5ae: mov edi, ebx; call qword ptr [r12+0x80]; 
0x0000000008bf76: mov edi, ebx; call qword ptr [r12+0x88]; 
0x0000000007fb17: mov edi, ebx; call qword ptr [r13+0x38]; 
0x000000000814b4: mov edi, ebx; call qword ptr [r13+0x48]; 
0x000000000815d0: mov edi, ebx; call qword ptr [r13+0x58]; 
0x0000000008779a: mov edi, ebx; call qword ptr [r13+0x60]; 
0x0000000007774c: mov edi, ebx; call qword ptr [r14+0x38]; 
0x00000000081239: mov edi, ebx; call qword ptr [r14+0x48]; 
0x0000000008ca5b: mov edi, ebx; call qword ptr [r14+0x78]; 
0x0000000008ca20: mov edi, ebx; call qword ptr [r14+0x80]; 
0x00000000080051: mov edi, ebx; call qword ptr [r15+0x38]; 
0x0000000008e20e: mov edi, ebx; call qword ptr [rax+0x18]; 
0x0000000008e159: mov edi, ebx; call qword ptr [rax+0x20]; 
0x000000000815fa: mov edi, ebx; call qword ptr [rax+0x58]; 
0x0000000008d7e0: mov edi, ebx; call qword ptr [rbp+0x18]; 
0x000000000838f1: mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000084466: mov edi, ebx; call qword ptr [rbp+0x30]; 
0x0000000007f225: mov edi, ebx; call qword ptr [rbp+0x60]; 
0x0000000008180e: mov edi, ebx; call qword ptr [rbp+0x68]; 
0x0000000008b410: mov edi, ebx; call qword ptr [rbp+0x70]; 
0x000000000867cc: mov edi, ebx; call qword ptr [rbp+0x80]; 
0x000000001609a7: mov edi, ebx; call qword ptr [rsp+0x20]; 
0x0000000013b5c1: mov edi, ebx; call qword ptr [rsp+0x28]; 
0x0000000002b78b: mov edi, ebx; call r12; 
0x0000000002b8b7: mov edi, ebx; call r14; 
0x0000000002adba: mov edi, ebx; call r15; 
0x0000000007e183: mov edi, ebx; call r8; 
0x0000000007dae2: mov edi, ebx; call rax; 
0x0000000002b9ca: mov edi, ebx; call rbp; 
0x0000000015e9d9: mov edi, ebx; call rcx; 
0x00000000153828: mov edi, ebx; mov rcx, r13; call r10; 
0x00000000153c42: mov edi, ebx; mov rcx, r15; call r12; 
0x000000000852d6: mov edi, ebx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008ccae: mov edi, ebx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x0000000015eac5: mov edi, ebx; xor eax, eax; call rcx; 
0x0000000009b40d: mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000017542d: mov edi, ecx; call qword ptr [rbx+0x358]; 
0x0000000008f856: mov edi, ecx; jmp qword ptr [rsi+0x48]; 
0x00000000092f6d: mov edi, ecx; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000b1392: mov edi, ecx; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x000000000931a3: mov edi, ecx; or eax, 0x2; mov edx, eax; mov eax, ebp; syscall; 
0x000000001256a4: mov edi, ecx; sub rsp, 0x8; call rsi; 
0x000000001666bc: mov edi, edi; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000085c61: mov edi, edi; call qword ptr [r13+0x80]; 
0x000000000807b9: mov edi, edi; call qword ptr [r14+0x38]; 
0x00000000085983: mov edi, edi; call qword ptr [r14+0x80]; 
0x0000000008589d: mov edi, edi; call qword ptr [r14+0x90]; 
0x0000000008deaf: mov edi, edi; call qword ptr [rax+0x18]; 
0x000000000841ca: mov edi, edi; call qword ptr [rax+0x20]; 
0x000000001666a7: mov edi, edi; call qword ptr [rax+0x28]; 
0x0000000008ed1d: mov edi, edi; call qword ptr [rax+0x58]; 
0x0000000008081e: mov edi, edi; call qword ptr [rbp+0x38]; 
0x00000000085e4f: mov edi, edi; call qword ptr [rbp+0x80]; 
0x00000000085f3e: mov edi, edi; call qword ptr [rbx+0x80]; 
0x00000000120e0c: mov edi, edi; call r14; 
0x000000000859dc: mov edi, edi; call rax; 
0x00000000086f7d: mov edi, edi; call rbx; 
0x000000001666fc: mov edi, edi; call rcx; 
0x00000000072024: mov edi, edi; jmp qword ptr [rsi+0xf]; 
0x0000000015ea7d: mov edi, edi; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x0000000015364b: mov edi, edi; mov [rsp+0x8], rcx; call rbp; 
0x0000000009441a: mov edi, edi; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091bf8: mov edi, edi; mov eax, r9d; syscall; 
0x0000000013eb20: mov edi, edi; mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x000000000e7093: mov edi, edi; mov rsi, [rsp+0x60]; call r12; 
0x000000001075b0: mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x0000000008df18: mov edi, edi; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000016b15d: mov edi, edi; xor eax, eax; add r13, rbx; call rbp; 
0x00000000093a22: mov edi, edi; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000005a346: mov edi, edx; cmp rax, 0x9; ja short 0x000000000005a320; mov rax, r8; ret; 
0x00000000199e0f: mov edi, edx; inc ecx; jne 0x0000000000199d40; vzeroupper; ret; 
0x000000001a1463: mov edi, edx; inc ecx; jne 0x00000000001a1380; vzeroupper; ret; 
0x000000000b1527: mov edi, edx; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x00000000155107: mov edi, esi; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x000000001b567b: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b42ab: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000019d8cf: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x0000000009032c: mov edi, esi; call qword ptr [r12+0x360]; 
0x00000000073796: mov edi, esi; call qword ptr [r12+0x38]; 
0x00000000083a0a: mov edi, esi; call qword ptr [rax+0x18]; 
0x00000000073c50: mov edi, esi; call qword ptr [rbx+0x38]; 
0x00000000072dc5: mov edi, esi; call qword ptr [rcx+0x38]; 
0x00000000120ea1: mov edi, esi; call r13; 
0x000000000a791f: mov edi, esi; call rax; 
0x00000000145a2a: mov edi, esi; call rcx; 
0x00000000073ef1: mov edi, esi; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x00000000093e74: mov edi, esi; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001204dc: mov edi, esi; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000011388d: mov edi, esi; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000007b5b8: mov edi, esp; call qword ptr [r14+0x38]; 
0x0000000015e6fa: mov edi, esp; call qword ptr [rax+0x20]; 
0x0000000015f657: mov edi, esp; call qword ptr [rax+0x28]; 
0x0000000007bdb2: mov edi, esp; call qword ptr [rax+0x38]; 
0x00000000162f00: mov edi, esp; call qword ptr [rax+0x8]; 
0x0000000007ab03: mov edi, esp; call qword ptr [rbp+0x38]; 
0x0000000007afea: mov edi, esp; call qword ptr [rbx+0x38]; 
0x0000000015f842: mov edi, esp; call qword ptr [rbx]; 
0x00000000168341: mov edi, esp; call qword ptr [rsp+0x30]; 
0x0000000016b2a7: mov edi, esp; call r13; 
0x0000000002b30d: mov edi, esp; call rax; 
0x0000000013ee85: mov edi, esp; call rbp; 
0x0000000004380b: mov edi, esp; call rbx; 
0x00000000162f34: mov edi, esp; call rcx; 
0x000000001289a5: mov edi, esp; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x0000000005bff5: mov edi, esp; mov [rbp-0xe8], r8; call rax; 
0x0000000016b3ac: mov edi, esp; mov dword ptr [rsp], 0x2; call r8; 
0x0000000011b744: mov edi, esp; mov eax, 0x10e; syscall; 
0x0000000009bdc7: mov edi, esp; mov eax, 0x129; syscall; 
0x00000000043302: mov edi, esp; mov eax, 0x81; syscall; 
0x00000000128a39: mov edi, esp; mov eax, r10d; syscall; 
0x00000000043934: mov edi, esp; mov rdx, r14; call rbp; 
0x00000000169609: mov edi, esp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x0000000005d8cd: mov edi, esp; sub rsi, rax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000175600: mov edi, esp; xor r13d, r13d; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000017579a: mov edi, esp; xor r9d, r9d; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000093b23: mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000001289a4: mov edi, r12d; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x0000000011b743: mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000009bdc6: mov edi, r12d; mov eax, 0x129; syscall; 
0x00000000043301: mov edi, r12d; mov eax, 0x81; syscall; 
0x00000000128a38: mov edi, r12d; mov eax, r10d; syscall; 
0x000000000a01cc: mov edi, r13d; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000000a0101: mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000131968: mov edi, r13d; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x000000000a0a75: mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a12: mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09b2: mov edi, r8d; mov eax, 0xe1; syscall; 
0x000000001281ca: mov edx, 0x0; cmovb rax, rdx; ret; 
0x000000000abd06: mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000009e669: mov edx, 0x0; cmovne rax, rdx; ret; 
0x000000001283fd: mov edx, 0x0; jne short 0x0000000000128420; mov eax, 0x47; syscall; 
0x000000000ba2da: mov edx, 0x0; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000001426d2: mov edx, 0x0; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000ecfe7: mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000142691: mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000807b0: mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000011c929: mov edx, 0x148fff0; ret; 
0x0000000011c9a8: mov edx, 0x148fff0; ret; 
0x0000000011a903: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000095cd8: mov edx, 0x16; cmp [rdi+0x628], rdi; cmove eax, edx; ret; 
0x00000000091ef4: mov edx, 0x16; test eax, eax; cmovne eax, edx; ret; 
0x000000001168ad: mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000075a46: mov edx, 0x1; jmp rsi; 
0x00000000090de2: mov edx, 0x1; lock cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x000000000918be: mov edx, 0x1; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000913ab: mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000093678: mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000076be4: mov edx, 0x1; mov edx, 0x1; jmp rsi; 
0x00000000099942: mov edx, 0x1; mov esi, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000011a240: mov edx, 0x1; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000011a271: mov edx, 0x1; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000091387: mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528ed: mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x0000000009ad74: mov edx, 0x1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009a536: mov edx, 0x1; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093e6e: mov edx, 0x1; mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000085e49: mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000094414: mov edx, 0x1; mov rdi, r15; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000093a1c: mov edx, 0x1; mov rdi, r15; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000092f67: mov edx, 0x1; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000008b807: mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008add9: mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000009b110: mov edx, 0x1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008c969: mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000867c6: mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000893d8: mov edx, 0x1; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x0000000008ca17: mov edx, 0x1; sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000075624: mov edx, 0x1; xor edx, edx; jmp rsi; 
0x000000001138c7: mov edx, 0x1b8; add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000091b42: mov edx, 0x21; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x000000001426a8: mov edx, 0x29; mov eax, 0x104; cmovne eax, edx; ret; 
0x00000000116c05: mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000109334: mov edx, 0x2; cmove eax, edx; ret; 
0x00000000091330: mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000912ca: mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000085c5b: mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f097: mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008c18c: mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000121c8e: mov edx, 0x2; test eax, eax; cmove eax, edx; add rsp, 0x8; ret; 
0x00000000094ad4: mov edx, 0x3c; nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000029daa: mov edx, 0x3c; nop; xor edi, edi; mov eax, edx; syscall; 
0x000000000c52dd: mov edx, 0x3ed00148; jmp rax; 
0x0000000013ef1b: mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x00000000128ac0: mov edx, 0x40; mov eax, 0x14; syscall; 
0x000000000ed022: mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000116b9d: mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000009df32: mov edx, 0x5bffffbb; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000009276b: mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x0000000012216b: mov edx, 0x64; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x0000000002b962: mov edx, 0x660010ad; nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x000000001bbd68: mov edx, 0x6; add [rax], al; add rsp, 0x8; ret; 
0x000000001bbd3c: mov edx, 0x6; add [rax], al; pop rbx; ret; 
0x0000000005168d: mov edx, 0x6; mov [rip+0x1ca24d], al; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000ecf17: mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000ecf6a: mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000094463: mov edx, 0x7fffffff; mov eax, 0xca; mov esi, [rsp+0x18]; xor sil, 0x81; syscall; 
0x00000000094034: mov edx, 0x7fffffff; mov eax, 0xca; mov esi, [rsp+0x8]; xor sil, 0x81; syscall; 
0x00000000093bcc: mov edx, 0x7fffffff; mov eax, 0xca; mov esi, ebx; xor sil, 0x81; syscall; 
0x00000000092f94: mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000092a54: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000099fcd: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000093b1d: mov edx, 0x7fffffff; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093f77: mov edx, 0x7fffffff; mov rdi, r13; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000943b7: mov edx, 0x7fffffff; mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000009b02c: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009a55d: mov edx, 0x7fffffff; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009b407: mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000092ef5: mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000009282e: mov edx, 0x80; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000080a52: mov edx, 0x830019af; clc; add [rdi+0x5], edi; ret; 
0x00000000056775: mov edx, 0x894830e8; or [rax+0x2], r15b; ret; 
0x000000000431ac: mov edx, 0x8; mov eax, 0x80; syscall; 
0x000000000425e7: mov edx, 0x8; mov eax, 0xd; syscall; 
0x00000000053a05: mov edx, 0x8; mov eax, 0xe; syscall; 
0x00000000096831: mov edx, 0x8; mov rdx, rbp; lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x0000000009bc8c: mov edx, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000009eb97: mov edx, 0x8; syscall; 
0x0000000005c88f: mov edx, 0x91e9fffc; out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x0000000009b787: mov edx, 0x971; xor eax, eax; ret; 
0x0000000009b7b7: mov edx, 0x972; xor eax, eax; cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x00000000095cc6: mov edx, 0xc031ffff; add rsp, 0x8; ret; 
0x0000000003cbb7: mov edx, 0xe4e90019; idiv edi; call qword ptr [rax+0x7880c931]; 
0x00000000168ac2: mov edx, 0xe8000bef; jne short 0x0000000000168ade; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000169912: mov edx, 0xebfff80d; ret far; 
0x000000000415e2: mov edx, 0xf2001a0a; mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000199472: mov edx, 0xf3000000; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000114abc: mov edx, 0xf3001f0f; nop edx, edi; mov eax, 0x8; syscall; 
0x00000000125a6c: mov edx, 0xf883000f; add [rdi+0x4], edi; ret; 
0x00000000125a8a: mov edx, 0xf; add [rax], al; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x00000000125a8b: mov edx, 0xf; add [rax], al; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x00000000125a96: mov edx, 0xf; add [rax], al; ret; 
0x00000000172704: mov edx, 0xfc4016e8; jmp qword ptr [rsi+0xf]; 
0x0000000015e1e4: mov edx, 0xfd8536e8; jmp qword ptr [rsi+0xf]; 
0x000000000ecefd: mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000013b63d: mov edx, 0xffb0dde8; jmp qword ptr [rsi+0x2e]; 
0x0000000009187d: mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000a9994: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 0x1; ret; 
0x000000000a99b4: mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 0x1; ret; 
0x00000000039b18: mov edx, 0xffffffff; cmove rax, rdx; ret; 
0x0000000002d0bb: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000ed0b0: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ecf80: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000011b21f: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x0000000011b2df: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x0000000016b157: mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp; 
0x0000000016cedc: mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx; 
0x0000000016b29e: mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13; 
0x0000000016d00a: mov edx, 0xffffffff; mov rsi, r14; mov rdi, rbp; call r12; 
0x00000000045e77: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000001432f8: mov edx, 0xffffffff; ret; 
0x00000000117067: mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000008924c: mov edx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x00000000091933: mov edx, [rax+0x18]; mov eax, [rax]; syscall; 
0x0000000015d1ff: mov edx, [rax+0x5c]; lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x00000000113890: mov edx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000039bea: mov edx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x000000000540f0: mov edx, [rax+rax*8]; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x00000000126326: mov edx, [rax]; cmp edx, 0x26; je short 0x0000000000126366; mov eax, r8d; ret; 
0x0000000009478b: mov edx, [rax]; mov eax, 0xcb; syscall; 
0x00000000029d87: mov edx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x00000000036bfe: mov edx, [rax]; test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x0000000008abc9: mov edx, [rbp+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x0000000006aee3: mov edx, [rbp-0x5c0]; movsxd rax, [rcx+r15*4]; add rax, rcx; notrack jmp rax; 
0x00000000063101: mov edx, [rbp-0x610]; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x00000000091707: mov edx, [rbp]; test rdx, rdx; je short 0x00000000000916e0; call rdx; 
0x0000000009040a: mov edx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000091d2e: mov edx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x0000000009051d: mov edx, [rbx+0x20]; push r10; call rax; 
0x0000000015d5e3: mov edx, [rbx+0x22c0]; mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000927ac: mov edx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x000000000852d2: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008ccaa: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000001134e3: mov edx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x0000000010ad52: mov edx, [rbx]; mov rsi, [rbp-0x1d8]; mov r9, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x0000000004076a: mov edx, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x000000001966ff: mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000194e2d: mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000039c7f: mov edx, [rcx+rdx]; test edx, edx; jne short 0x0000000000039c90; mov eax, r8d; ret; 
0x0000000012a57b: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012a590; mov eax, r8d; ret; 
0x0000000012a7ce: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b05e: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012b070; ret; 
0x000000000ea3dc: mov edx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000ea3e4: mov edx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x0000000008fb59: mov edx, [rdi+0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, [rdi+0x18]; ret; 
0x00000000133c47: mov edx, [rdi+0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000090385: mov edx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x000000000859d0: mov edx, [rdi+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x000000000903e4: mov edx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x000000000f7029: mov edx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000f6f5d; ret; 
0x000000000f6fd7: mov edx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000f6f5d; ret; 
0x000000000913d6: mov edx, [rdi+0x8]; mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x000000001675b1: mov edx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000166494: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000166394: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x0000000007f594: mov edx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000008929f: mov edx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000008916f: mov edx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000162d50: mov edx, [rdi]; mov [rax], edx; mov eax, 0x1; ret; 
0x00000000153524: mov edx, [rdi]; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000043079: mov edx, [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000153586: mov edx, [rdi]; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000053b76: mov edx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000a7a25: mov edx, [rdx+0x8]; test rdx, rdx; jne short 0x00000000000a7a20; ret; 
0x00000000116e5a: mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x000000001163ea: mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000090513: mov edx, [rdx]; mov rax, [rax+0x348]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000118da1: mov edx, [rip+0x100069]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001152f1: mov edx, [rip+0x103b19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115241: mov edx, [rip+0x103bc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115161: mov edx, [rip+0x103ca9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114b09: mov edx, [rip+0x104301]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114ad9: mov edx, [rip+0x104331]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000114a91: mov edx, [rip+0x104379]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001149f1: mov edx, [rip+0x104419]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001142f9: mov edx, [rip+0x104b11]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001142c9: mov edx, [rip+0x104b41]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114281: mov edx, [rip+0x104b89]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000113f01: mov edx, [rip+0x104f09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000113c51: mov edx, [rip+0x1051b9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000112a11: mov edx, [rip+0x1063f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000112961: mov edx, [rip+0x1064a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000108de9: mov edx, [rip+0x110021]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000108d49: mov edx, [rip+0x1100c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea6a1: mov edx, [rip+0x12e769]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea581: mov edx, [rip+0x12e889]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea4c1: mov edx, [rip+0x12e949]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e66c1: mov edx, [rip+0x132749]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000e5771: mov edx, [rip+0x133699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e5701: mov edx, [rip+0x133709]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000dcdf9: mov edx, [rip+0x13c011]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000dcdc9: mov edx, [rip+0x13c041]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9cd1: mov edx, [rip+0x13f139]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9b11: mov edx, [rip+0x13f2f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d99f9: mov edx, [rip+0x13f411]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a0a91: mov edx, [rip+0x178379]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0a29: mov edx, [rip+0x1783e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a09c9: mov edx, [rip+0x178441]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0509: mov edx, [rip+0x178901]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0451: mov edx, [rip+0x1789b9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a03a9: mov edx, [rip+0x178a61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009fdd9: mov edx, [rip+0x179031]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000061f71: mov edx, [rip+0x1b6e99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000061f39: mov edx, [rip+0x1b6ed1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000046ce1: mov edx, [rip+0x1d2129]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000042831: mov edx, [rip+0x1d65d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000427a1: mov edx, [rip+0x1d6669]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000042481: mov edx, [rip+0x1d6989]; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003a403: mov edx, [rip+0x1de9df]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000029ce8: mov edx, [rip+0x1ef19a]; cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x00000000078c26: mov edx, [rip+0x4634800]; nop; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000078c27: mov edx, [rip+0x4634800]; nop; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000177e91: mov edx, [rip+0xa0f79]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000175db1: mov edx, [rip+0xa3111]; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x00000000155019: mov edx, [rip+0xc3df1]; mov eax, 0x22; mov fs:[rdx], eax; pop rbx; ret; 
0x000000001354f1: mov edx, [rip+0xe3919]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000128689: mov edx, [rip+0xf0781]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128611: mov edx, [rip+0xf07f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285d9: mov edx, [rip+0xf0831]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285a9: mov edx, [rip+0xf0861]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000128571: mov edx, [rip+0xf0899]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128479: mov edx, [rip+0xf0991]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128439: mov edx, [rip+0xf09d1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001283d9: mov edx, [rip+0xf0a31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128391: mov edx, [rip+0xf0a79]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001282d1: mov edx, [rip+0xf0b39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128071: mov edx, [rip+0xf0d99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127fb9: mov edx, [rip+0xf0e51]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127f01: mov edx, [rip+0xf0f09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c91: mov edx, [rip+0xf1179]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c41: mov edx, [rip+0xf11c9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127b71: mov edx, [rip+0xf1299]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127ad1: mov edx, [rip+0xf1339]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127959: mov edx, [rip+0xf14b1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127891: mov edx, [rip+0xf1579]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001277b1: mov edx, [rip+0xf1659]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127701: mov edx, [rip+0xf1709]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127631: mov edx, [rip+0xf17d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126ad1: mov edx, [rip+0xf2339]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126771: mov edx, [rip+0xf2699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126709: mov edx, [rip+0xf2701]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001266a9: mov edx, [rip+0xf2761]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126649: mov edx, [rip+0xf27c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126609: mov edx, [rip+0xf2801]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001265d1: mov edx, [rip+0xf2839]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126591: mov edx, [rip+0xf2879]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001264c1: mov edx, [rip+0xf2949]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126489: mov edx, [rip+0xf2981]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001263b1: mov edx, [rip+0xf2a59]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001262d1: mov edx, [rip+0xf2b39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126231: mov edx, [rip+0xf2bd9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126161: mov edx, [rip+0xf2ca9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001260b1: mov edx, [rip+0xf2d59]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126001: mov edx, [rip+0xf2e09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125f31: mov edx, [rip+0xf2ed9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e61: mov edx, [rip+0xf2fa9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e11: mov edx, [rip+0xf2ff9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125d41: mov edx, [rip+0xf30c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125c29: mov edx, [rip+0xf31e1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000125bf9: mov edx, [rip+0xf3211]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001217d1: mov edx, [rip+0xf7639]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012914e: mov edx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000011ecf1: mov edx, [rip+0xfa119]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011ec01: mov edx, [rip+0xfa209]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011d179: mov edx, [rip+0xfbc91]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011d149: mov edx, [rip+0xfbcc1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011bbc1: mov edx, [rip+0xfd249]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011bb41: mov edx, [rip+0xfd2c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011ba81: mov edx, [rip+0xfd389]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011add9: mov edx, [rip+0xfe031]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011ad19: mov edx, [rip+0xfe0f1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011ac61: mov edx, [rip+0xfe1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011abc1: mov edx, [rip+0xfe249]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011a911: mov edx, [rip+0xfe4f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a519: mov edx, [rip+0xfe8f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4e1: mov edx, [rip+0xfe929]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4a1: mov edx, [rip+0xfe969]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a2a9: mov edx, [rip+0xfeb61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119faa: mov edx, [rip+0xfee60]; mov esi, 0x5401; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x00000000119d59: mov edx, [rip+0xff0b1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119d21: mov edx, [rip+0xff0e9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119ce9: mov edx, [rip+0xff121]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119a29: mov edx, [rip+0xff3e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001199e1: mov edx, [rip+0xff429]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119931: mov edx, [rip+0xff4d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119481: mov edx, [rip+0xff989]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119441: mov edx, [rip+0xff9c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001193f1: mov edx, [rip+0xffa19]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000091656: mov edx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000182d21: mov edx, [rsi+0x1]; mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x00000000182c40: mov edx, [rsi+0x1]; mov ecx, [rsi]; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000182a81: mov edx, [rsi+0x1]; mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000164a71: mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000182bd0: mov edx, [rsi+0x2]; mov ecx, [rsi]; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x00000000182a11: mov edx, [rsi+0x2]; mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000000c1322: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000c2172: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000bfcd2: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x00000000182b60: mov edx, [rsi+0x3]; mov ecx, [rsi]; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000001829a1: mov edx, [rsi+0x3]; mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000c1303: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000c2153: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000bfcc3: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x00000000182931: mov edx, [rsi+0x4]; mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000000c13b4: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000c2214: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd34: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000001828c1: mov edx, [rsi+0x5]; mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000c13d4: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000c2234: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000bfd44: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x00000000182851: mov edx, [rsi+0x6]; mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000c1373: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000c21d3: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000bfd13: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000c13f4: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000c2254: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000bfd54: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001827e1: mov edx, [rsi+0x7]; mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000c1354: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000c21b4: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000bfd04: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000c1393: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000c21f3: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000bfd23: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x000000001b0962: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001b2c92: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b02: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f7f2: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001b0963: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x000000001b2c93: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b03: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x0000000019f7f3: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000001b0984: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001b2cb4: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b14: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f814: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x0000000017cbe1: mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000017cdc1: mov edx, [rsi-0x3]; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x0000000017c9d8: mov edx, [rsi-0x4]; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbb8: mov edx, [rsi-0x4]; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cd98: mov edx, [rsi-0x4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf78: mov edx, [rsi-0x4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cfa0: mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x0000000017c9f4: mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbd4: mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cdb4: mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf94: mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017d1a0: mov edx, [rsi-0x5]; mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d3a0: mov edx, [rsi-0x6]; mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017d5a0: mov edx, [rsi-0x7]; mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017c815: mov edx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017d169: mov edx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d369: mov edx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d569: mov edx, [rsi-0x8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017c7f9: mov edx, [rsi-0x8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c831: mov edx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x0000000017d185: mov edx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d385: mov edx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d585: mov edx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182311: mov edx, [rsi-0x9]; mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182291: mov edx, [rsi-0xa]; mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182211: mov edx, [rsi-0xb]; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182191: mov edx, [rsi-0xc]; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182101: mov edx, [rsi-0xd]; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182071: mov edx, [rsi-0xe]; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000181fe1: mov edx, [rsi-0xf]; mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000c12c1: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c2101: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000bfc81: mov edx, [rsi]; mov [rdi], dx; ret; 
0x000000000c3d61: mov edx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000c12e0: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x0000000019fe40: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000c2130: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000bfca0: mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000019e3a0: mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x000000000c3d90: mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000c1331: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000c2181: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000bfce1: mov edx, [rsi]; mov [rdi], rdx; ret; 
0x000000000c3de1: mov edx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x00000000121c29: mov edx, [rsp+0x1008]; sub rdx, fs:[0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000042934: mov edx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429b7: mov edx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x0000000014a356: mov edx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x000000000b1479: mov edx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000ea54e: mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000129d5d: mov edx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dbe: mov edx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x000000000c6933: mov edx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000125d04: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x00000000127f84: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x00000000127929: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x00000000127a9b: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000012785b: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000012e5f2: mov edx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000423f8: mov edx, [rsp+0x138]; sub rdx, fs:[0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x00000000043005: mov edx, [rsp+0x138]; sub rdx, fs:[0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x0000000011ace8: mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011ada8: mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000b13b1: mov edx, [rsp+0x18]; mov [rax], rdx; add rax, rcx; ret; 
0x00000000127c02: mov edx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000e9e03: mov edx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001385be: mov edx, [rsp+0x18]; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x00000000174ebd: mov edx, [rsp+0x18]; mov rax, [rsp+0x10]; mov esi, 0x40; mov rdi, r12; call rax; 
0x000000000e9a93: mov edx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000128357: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x000000000a0417: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x00000000138e10: mov edx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000045f16: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x00000000046006: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000051888: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd2: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000006074b: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060820: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608d7: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609a9: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a6b: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b2b: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c19: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf0: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x000000000621c3: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x0000000006229e: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082bfb: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cb7: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db0: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e80: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f39: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000090478: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x000000000a02d6: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d3643: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d371e: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8eb6: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d9c51: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x00000000113a8e: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000119bd5: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c73: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011b3e1: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c0e0: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000012653a: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b28: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x000000001284de: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000134be2: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134ce6: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134dfc: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ec4: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c56: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d6c: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e34: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x0000000013623b: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x0000000013629b: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136364: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136444: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136524: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d22c: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000148024: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x00000000176121: mov edx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x000000000ea549: mov edx, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x0000000015d960: mov edx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000001106d2: mov edx, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001261f1: mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001193b1: mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000011b94e: mov edx, [rsp+0x28]; mov rsi, [rsp+0x20]; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x00000000114ee9: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x0000000005a48f: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x0000000009061b: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x00000000090756: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x000000000e7742: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec172: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec202: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c2: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec562: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108eef: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113e08: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000119a8e: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x0000000011b102: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b192: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b239: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2f9: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011c1b2: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf7a: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d00d: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d091: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d10c: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000013d122: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1bf: mov edx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x00000000137c9d: mov edx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000114873: mov edx, [rsp+0x38]; sub rdx, fs:[0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x000000000514f7: mov edx, [rsp+0x418]; sub rdx, fs:[0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x00000000136e62: mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x0000000011c067: mov edx, [rsp+0x48]; sub rdx, fs:[0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000002d833: mov edx, [rsp+0x60]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x000000000e708e: mov edx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000169038: mov edx, [rsp+0x68]; sub rdx, fs:[0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x00000000042ac2: mov edx, [rsp+0x88]; sub rdx, fs:[0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x0000000009bcad: mov edx, [rsp+0x88]; sub rdx, fs:[0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x00000000125b9b: mov edx, [rsp+0x8]; mov eax, 0x38; syscall; 
0x000000000445a8: mov edx, [rsp+0x8]; mov rax, [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000a04d5: mov edx, [rsp+0x8]; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000008b4eb: mov edx, [rsp+0x8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000011b7dc: mov edx, [rsp+0x8]; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000004627b: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x0000000004689f: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468ec: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x0000000004693f: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x0000000004698c: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000061e8a: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000e2e9f: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e558f: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x00000000119b1d: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x0000000011a1e0: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011f97c: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000127e61: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000147fd1: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x000000001488d3: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a5a2: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x00000000172135: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x000000001739b9: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a21: mov edx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x00000000043495: mov edx, [rsp+0x98]; sub rdx, fs:[0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x000000000613d5: mov edx, [rsp+0x98]; sub rdx, fs:[0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000125dd4: mov edx, [rsp+0xc]; mov rsi, [rsp]; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x00000000153a26: mov edx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000000b14b8: mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000b14d0: mov edx, [rsp-0x18]; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x000000001af8b1: mov edx, ds; add [rax], al; add [rax+0x1], cl; clc; ret; 
0x0000000012e76b: mov edx, eax; call qword ptr [r12+0x28]; 
0x0000000013196f: mov edx, eax; call qword ptr [r15+0x28]; 
0x000000001604ac: mov edx, eax; call qword ptr [rbp+0x10]; 
0x0000000015fe82: mov edx, eax; call qword ptr [rbx+0x10]; 
0x0000000012ea77: mov edx, eax; call qword ptr [rbx+0x28]; 
0x000000000931a8: mov edx, eax; mov eax, ebp; syscall; 
0x00000000093709: mov edx, eax; mov eax, r12d; syscall; 
0x0000000009eb8c: mov edx, eax; mov edi, 0x2; mov eax, r15d; mov r10d, 0x8; syscall; 
0x00000000125b95: mov edx, eax; mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000011ea31: mov edx, eax; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x0000000009e73e: mov edx, eax; mov rax, [rax+0x20]; test rax, rax; jne short 0x000000000009e738; ret; 
0x0000000008f1c6: mov edx, eax; mov rax, [rax]; test rax, rax; jne short 0x000000000008f1c0; ret; 
0x00000000073c4a: mov edx, eax; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000008b845: mov edx, eax; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000005bfef: mov edx, eax; mov rsi, r14; mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x00000000119bbb: mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000007b5b2: mov edx, eax; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000015edec: mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000053c99: mov edx, eax; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b56d3: mov edx, eax; shr rax, 0x20; or eax, edx; ret; 
0x00000000096837: mov edx, ebp; lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x00000000118e16: mov edx, ebp; mov eax, 0x10f; syscall; 
0x000000000910fd: mov edx, ebp; mov eax, 0xca; syscall; 
0x000000000e813a: mov edx, ebp; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000011fd0a: mov edx, ebp; mov esi, 0x1; call r12; 
0x000000000c66a8: mov edx, ebp; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000e853a: mov edx, ebp; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x00000000043f20: mov edx, ebp; mov rdi, r12; call rbx; 
0x000000001377b0: mov edx, ebp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x000000000c6860: mov edx, ebp; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000d349d: mov edx, ebp; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000782f0: mov edx, ebp; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2b2: mov edx, ebp; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x0000000004381d: mov edx, ebp; mov rsi, r12; call rbx; 
0x00000000043841: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000007498d: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739d2: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000008ac57: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000008ca55: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000004385c: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000082284: mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000133141: mov edx, ebp; movups [rbp-0x78], xmm5; call rax; 
0x000000000c655f: mov edx, ebp; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x00000000078d27: mov edx, ebx; call qword ptr [r12+0x38]; 
0x000000000778bf: mov edx, ebx; call qword ptr [r13+0x38]; 
0x000000000e7353: mov edx, ebx; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x0000000007ab00: mov edx, ebx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x00000000073793: mov edx, ebx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000751c3: mov edx, ebx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000080f93: mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x0000000008a464: mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000082347: mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000007945a: mov edx, ebx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x00000000079748: mov edx, ebx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x0000000016833b: mov edx, ebx; mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000133a0a: mov edx, ebx; movups [rbp-0x78], xmm7; call rax; 
0x000000000c7cf1: mov edx, ecx; clc; dec dword ptr [rax-0x7d]; ret; 
0x00000000126395: mov edx, ecx; cmp ecx, 0xffffffff; je short 0x00000000001263c8; mov eax, 0x149; syscall; 
0x00000000126750: mov edx, ecx; cmp r9d, 0x1; ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x0000000011426c: mov edx, ecx; mov eax, 0x103; syscall; 
0x00000000115ca5: mov edx, ecx; mov eax, 0x104; syscall; 
0x00000000113ee5: mov edx, ecx; mov eax, 0x106; syscall; 
0x00000000061f55: mov edx, ecx; mov eax, 0x108; syscall; 
0x00000000116165: mov edx, ecx; mov eax, 0x109; syscall; 
0x00000000116225: mov edx, ecx; mov eax, 0x10b; syscall; 
0x00000000119425: mov edx, ecx; mov eax, 0x118; syscall; 
0x00000000119d05: mov edx, ecx; mov eax, 0x11; syscall; 
0x000000001264a5: mov edx, ecx; mov eax, 0x11e; syscall; 
0x00000000126ab5: mov edx, ecx; mov eax, 0x12d; syscall; 
0x00000000125f15: mov edx, ecx; mov eax, 0x12e; syscall; 
0x00000000127085: mov edx, ecx; mov eax, 0x12f; syscall; 
0x00000000126575: mov edx, ecx; mov eax, 0x136; syscall; 
0x000000001265b5: mov edx, ecx; mov eax, 0x137; syscall; 
0x00000000113c35: mov edx, ecx; mov eax, 0x142; syscall; 
0x000000001141e5: mov edx, ecx; mov eax, 0x14c; syscall; 
0x00000000119325: mov edx, ecx; mov eax, 0x28; syscall; 
0x00000000127d15: mov edx, ecx; mov eax, 0x35; syscall; 
0x00000000127c75: mov edx, ecx; mov eax, 0x36; syscall; 
0x00000000127795: mov edx, ecx; mov eax, 0x37; syscall; 
0x00000000126ea5: mov edx, ecx; mov eax, 0xa5; syscall; 
0x00000000126d85: mov edx, ecx; mov eax, 0xaf; syscall; 
0x00000000126f35: mov edx, ecx; mov eax, 0xb2; syscall; 
0x00000000126f65: mov edx, ecx; mov eax, 0xb3; syscall; 
0x00000000122395: mov edx, ecx; mov eax, 0xbc; syscall; 
0x00000000122335: mov edx, ecx; mov eax, 0xbd; syscall; 
0x00000000122215: mov edx, ecx; mov eax, 0xbe; syscall; 
0x00000000122245: mov edx, ecx; mov eax, 0xbf; syscall; 
0x000000001222a5: mov edx, ecx; mov eax, 0xc0; syscall; 
0x00000000122185: mov edx, ecx; mov eax, 0xc1; syscall; 
0x0000000011ed85: mov edx, ecx; mov eax, 0xd8; syscall; 
0x00000000128555: mov edx, ecx; mov eax, 0xdc; syscall; 
0x00000000118ee5: mov edx, ecx; mov eax, 0xdd; syscall; 
0x00000000126d25: mov edx, ecx; mov eax, 0xe9; syscall; 
0x00000000093016: mov edx, ecx; mov eax, r13d; syscall; 
0x000000000910fa: mov edx, ecx; mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000011ea2e: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x000000000929f0: mov edx, ecx; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000061f95: mov edx, ecx; test r8d, r8d; je short 0x0000000000061fe0; mov eax, 0x13c; syscall; 
0x0000000011ebc5: mov edx, ecx; test r9d, 0xfff; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x00000000119465: mov edx, ecx; test rsi, rsi; je short 0x0000000000119492; mov eax, 0x118; syscall; 
0x0000000011ae40: mov edx, ecx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011afa0: mov edx, ecx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000951c0: mov edx, edi; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000011bba4: mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000729e9: mov edx, edi; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000011aeca: mov edx, edi; mov rsi, r13; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02a: mov edx, edi; mov rsi, r13; mov edi, ebp; mov eax, 0x148; syscall; 
0x0000000008b27a: mov edx, edi; mov rsi, r14; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000013b5bb: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000075d1d: mov edx, edi; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007658b: mov edx, edi; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000011b73e: mov edx, edi; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000007cb71: mov edx, edi; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdac: mov edx, edi; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x000000000c5045: mov edx, edi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001a10cc: mov edx, edi; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x000000000dce30: mov edx, edi; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000dce40; ret; 
0x000000001190d8: mov edx, edx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000125e45: mov edx, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000007961b: mov edx, edx; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000b1467: mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x0000000003fc70: mov edx, edx; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000043937: mov edx, esi; call rbp; 
0x0000000014adb3: mov edx, esi; hlt; jmp qword ptr [rsi+0xf]; 
0x000000000969aa: mov edx, esi; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f8e: mov edx, esi; lea rsi, [rip+0x5cac9]; syscall; 
0x0000000011b8eb: mov edx, esi; mov eax, 0x10e; syscall; 
0x00000000177e75: mov edx, esi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x00000000177e08: mov edx, esi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000e5617: mov edx, esi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x00000000095da8: mov edx, esi; mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x000000000c6c40: mov edx, esi; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000044489: mov edx, esi; mov rax, [rsp]; call rax; 
0x0000000013eb1d: mov edx, esi; mov rdi, r15; mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x000000000e57eb: mov edx, esi; mov rdx, r12; mov esi, r13d; mov eax, 0xe6; syscall; 
0x00000000072851: mov edx, esi; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000044405: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000007afe4: mov edx, esi; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x00000000077080: mov edx, esi; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f5: mov edx, esi; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007603f: mov edx, esi; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000162cb7: mov edx, esi; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001190e0: mov edx, esi; xor esi, esi; syscall; 
0x000000000c6b50: mov edx, esi; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x00000000072333: mov edx, esp; call qword ptr [r13+0x38]; 
0x000000000eb168: mov edx, esp; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x0000000013332f: mov edx, esp; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x0000000011a0f1: mov edx, esp; mov eax, 0x10; syscall; 
0x00000000114dd9: mov edx, esp; mov eax, 0x10d; syscall; 
0x0000000009f1f9: mov edx, esp; mov eax, 0x81; syscall; 
0x00000000121c0f: mov edx, esp; mov eax, 0xcc; syscall; 
0x00000000092a90: mov edx, esp; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000096a3d: mov edx, esp; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000968cd: mov edx, esp; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x00000000119b39: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000968ff: mov edx, esp; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000e57ee: mov edx, esp; mov esi, r13d; mov eax, 0xe6; syscall; 
0x000000000e58ae: mov edx, esp; mov esi, r13d; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000e5859: mov edx, esp; mov r8d, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x0000000013a390: mov edx, esp; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e98: mov edx, esp; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000015f831: mov edx, esp; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86f: mov edx, esp; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000008a300: mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000072dbf: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000008004b: mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x000000001146da: mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000085b87: mov edx, esp; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007fb11: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000815ca: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000081233: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000815f4: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000001609a1: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000132f2b: mov edx, esp; movups [rbp-0x78], xmm3; call rax; 
0x000000001331a3: mov edx, esp; movups [rbp-0x78], xmm4; call rax; 
0x0000000013365b: mov edx, esp; movups [rbp-0x78], xmm6; call rax; 
0x0000000013372d: mov edx, esp; movups [rbp-0x78], xmm7; call rax; 
0x000000000a8149: mov edx, esp; pop r12; pop r13; ret; 
0x000000000810ff: mov edx, esp; pop rbx; pop r12; pop r13; jmp rax; 
0x00000000126325: mov edx, fs:[rax]; cmp edx, 0x26; je short 0x0000000000126366; mov eax, r8d; ret; 
0x00000000114dd8: mov edx, r12d; mov eax, 0x10d; syscall; 
0x00000000092a8f: mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000096a3c: mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000968cc: mov edx, r12d; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000968fe: mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000001146d8: mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000085b86: mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000081232: mov edx, r12d; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000810fe: mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax; 
0x000000000910fc: mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000011fd09: mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000008ac56: mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000011aec9: mov edx, r15d; mov rsi, r13; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b029: mov edx, r15d; mov rsi, r13; mov edi, ebp; mov eax, 0x148; syscall; 
0x00000000119bb9: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000119bba: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000929ef: mov edx, r9d; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000108be5: mov es, [rax]; add [rax], al; syscall; 
0x0000000012a7e8: mov es, [rbx]; add al, 0x11; ret; 
0x0000000004194e: mov es, [rdi]; sbb al, [rax]; mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000c1f4e: mov es, [rsi]; add [rax], al; ret; 
0x0000000014bfde: mov es, bx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000119aad: mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000094924: mov esi, 0x18; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x0000000011fd0c: mov esi, 0x1; call r12; 
0x00000000099947: mov esi, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000007e17b: mov esi, 0x1; mov rdi, rbx; call r8; 
0x0000000007dadc: mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000015dcd7: mov esi, 0x1; push qword ptr [rip+0x84866]; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000016763a: mov esi, 0x1; xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000007630c: mov esi, 0x1d8d48cd; ret far; 
0x00000000094af5: mov esi, 0x20; lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x0000000015eef5: mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000011bba6: mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000010aac1: mov esi, 0x2; push rax; mov rax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x0000000015df8e: mov esi, 0x31000000; leave; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000011fced: mov esi, 0x3; je short 0x000000000011fd25; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000011fd7d: mov esi, 0x3; je short 0x000000000011fdb5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120ae4: mov esi, 0x3; je short 0x0000000000120b1a; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000120b95: mov esi, 0x3; je short 0x0000000000120bcd; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000006b8c4: mov esi, 0x3ef00148; jmp rax; 
0x00000000174ec6: mov esi, 0x40; mov rdi, r12; call rax; 
0x000000000d80ae: mov esi, 0x48000000; lea eax, [rdi-0x10]; ret; 
0x0000000013ceae: mov esi, 0x48fffff5; add esp, 0x18; ret; 
0x0000000018034e: mov esi, 0x49000631; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000167ccb: mov esi, 0x4; mov rdi, rbp; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015ded6: mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000016744f: mov esi, 0x4; movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000119fb0: mov esi, 0x5401; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x0000000011a245: mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000011a276: mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000001359ee: mov esi, 0x66fffff6; nop [rax+rax]; ret; 
0x0000000008cdfe: mov esi, 0x66fffffd; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001674a5: mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000016746c: mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000016cb71: mov esi, 0x748d4806; and al, 0x4; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000005d5ef: mov esi, 0x77cf390e; jrcxz 0x000000000005d63a; mov eax, eax; ret; 
0x000000000970f8: mov esi, 0x7; mov eax, 0xca; syscall; 
0x000000000d63a1: mov esi, 0x7be90010; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000108d67: mov esi, 0x7fffffff; mov eax, 0xcc; cmp r8, rsi; cmovbe rsi, r8; syscall; 
0x000000000912cf: mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000095db0: mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000091882: mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000091bf2: mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x00000000099eeb: mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000177e0f: mov esi, 0x80; syscall; 
0x000000000919ea: mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x00000000099f7a: mov esi, 0x81; mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000009138c: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528f2: mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000091c81: mov esi, 0x81; mov eax, r13d; mov dword ptr [r8+0x35c], 0x1; lea rdi, [r8+0x35c]; syscall; 
0x000000001758e8: mov esi, 0x81; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x000000000475a2: mov esi, 0x83480143; ret; 
0x000000000e897a: mov esi, 0x83480153; ret; 
0x000000000977a3: mov esi, 0x87; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x0000000004f3e3: mov esi, 0x89412404; ret; 
0x0000000015690e: mov esi, 0x89fffc2d; ret; 
0x00000000042784: mov esi, 0x8; mov eax, 0x7f; syscall; 
0x000000000427d0: mov esi, 0x8; mov eax, 0x82; syscall; 
0x000000000427fb: mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000015efae: mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164465: mov esi, 0x8; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x00000000099048: mov esi, 0x8; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000a9bce: mov esi, 0x8d480000; adc eax, 0xdbd87; cmovne rax, rdx; ret; 
0x000000000a9bcf: mov esi, 0x8d480000; adc eax, 0xdbd87; cmovne rax, rdx; ret; 
0x000000000a9b2f: mov esi, 0x8d480000; adc eax, 0xdbe07; cmovne rax, rdx; ret; 
0x00000000067346: mov esi, 0x8d4cffff; push rcx; or [rbx-0x7af0fe01], al; ret; 
0x00000000167732: mov esi, 0x9; call qword ptr [rax]; 
0x0000000010abc7: mov esi, 0xa; push rax; mov rax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x00000000167e8e: mov esi, 0xa; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000d0966: mov esi, 0xba0010ec; ret; 
0x00000000043126: mov esi, 0xc3001d60; nop [rax+rax]; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000012e2a4: mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret; 
0x000000000b126d: mov esi, 0xd139070c; je short 0x00000000000b1268; cmp ecx, esi; je short 0x00000000000b1268; ret; 
0x00000000167529: mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000016bb22: mov esi, 0xe68948c5; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000076ff5: mov esi, 0xe9ffffec; stosb [rdi]; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000b1235: mov esi, 0xf2390714; je short 0x00000000000b1230; ret; 
0x00000000083d50: mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000113485: mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x0000000008ea37: mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x00000000085641: mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000008b74a: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000008da21: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x0000000008f125: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r12+0x18]; 
0x0000000008e208: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008d7da: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x00000000084503: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000092b1b: mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000091b4e: mov esi, [r9+0x10]; syscall; 
0x0000000009192b: mov esi, [rax+0x10]; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000164a6f: mov esi, [rax+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000011c18b: mov esi, [rax+0x8]; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall; 
0x00000000094787: mov esi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000092b1c: mov esi, [rax+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x000000001204d9: mov esi, [rax]; mov rdi, r14; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000010ad55: mov esi, [rbp-0x1d8]; mov r9, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x00000000044481: mov esi, [rbp]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x00000000091d26: mov esi, [rbx+0x10]; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x0000000015e1d5: mov esi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000852ce: mov esi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000015f82d: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86b: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015e297: mov esi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000947c7: mov esi, [rbx+0x63c]; mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000001666a0: mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x000000001134ea: mov esi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000120410: mov esi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x00000000091b4f: mov esi, [rcx+0x10]; syscall; 
0x000000000928fe: mov esi, [rdi+0xc]; xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x000000001a1b91: mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b4873: mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x00000000001b4610; ret; 
0x000000001a2058: mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4f5a: mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x000000001a6979: mov esi, [rsi+rdx]; mov [rdi], ecx; mov [rdi+rdx], esi; ret; 
0x000000000c4a54: mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000000c4a66: mov esi, [rsi]; mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x000000001a3f50: mov esi, [rsi]; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000001a3f3e: mov esi, [rsi]; mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x00000000120031: mov esi, [rsi]; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x000000001a3f2b: mov esi, [rsi]; mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x0000000012835c: mov esi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x000000000a041c: mov esi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000001148e4: mov esi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000013a398: mov esi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001193bb: mov esi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000012803f: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fcf: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x0000000011ab8b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x0000000011ac2b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a5d: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x00000000127b3b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001149bd: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x000000001275fd: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000046cac: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecbc: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d6c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x0000000015d51e: mov esi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x0000000008e0ae: mov esi, [rsp+0x10]; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000139ea0: mov esi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000015d965: mov esi, [rsp+0x18]; call qword ptr [rax]; 
0x000000000c66b3: mov esi, [rsp+0x18]; call rbx; 
0x0000000012607f: mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x00000000162efb: mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000086d07: mov esi, [rsp+0x18]; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000029d82: mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000002aa96: mov esi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000d3311: mov esi, [rsp+0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000d34a0: mov esi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000009446d: mov esi, [rsp+0x18]; xor sil, 0x81; syscall; 
0x0000000011b953: mov esi, [rsp+0x20]; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x000000001168a5: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116bfd: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b95: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000162f2a: mov esi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000163145: mov esi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000153a2e: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000035191: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x000000000352ed: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x000000001385c2: mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000002ee54: mov esi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002d278: mov esi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x000000001666f2: mov esi, [rsp+0x50]; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000301c3: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x0000000003396d: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c4: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b2: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d838: mov esi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000002f4ca: mov esi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x000000000e7096: mov esi, [rsp+0x60]; call r12; 
0x00000000090989: mov esi, [rsp+0x8]; add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x00000000125d09: mov esi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x0000000011aced: mov esi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011adad: mov esi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x00000000127f89: mov esi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000000ea490: mov esi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x00000000119901: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ed1: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x000000001282a1: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000126130: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x00000000112931: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129e1: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000015e9ce: mov esi, [rsp+0x8]; mov rcx, [rsp]; xor eax, eax; mov rdi, rbx; call rcx; 
0x00000000138e15: mov esi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000043f1b: mov esi, [rsp+0x8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000007aafb: mov esi, [rsp+0x8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x000000000751be: mov esi, [rsp+0x8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x0000000012792e: mov esi, [rsp+0x8]; syscall; 
0x00000000127aa0: mov esi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127860: mov esi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000009403e: mov esi, [rsp+0x8]; xor sil, 0x81; syscall; 
0x000000001199b0: mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x00000000114f55: mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000091181: mov esi, [rsp+0xc]; mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000008d8e1: mov esi, [rsp+0xc]; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001152c1: mov esi, [rsp+0xc]; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x00000000029ef1: mov esi, [rsp]; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed2: mov esi, [rsp]; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000125dd9: mov esi, [rsp]; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x000000000a04da: mov esi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000012629a: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000001276ca: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x000000001279de: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x0000000012a5f0: mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000001136d6: mov esi, eax; mov eax, 0x75; syscall; 
0x00000000113805: mov esi, eax; mov eax, 0x77; syscall; 
0x0000000009bc92: mov esi, eax; mov eax, 0xe; syscall; 
0x000000001256dc: mov esi, eax; mov rdi, rbp; call r12; 
0x00000000174653: mov esi, eax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000046d36: mov esi, eax; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x0000000008a303: mov esi, ebp; call qword ptr [r14+0x38]; 
0x00000000160282: mov esi, ebp; call qword ptr [r14+0x40]; 
0x0000000015ff31: mov esi, ebp; call qword ptr [r15+0x40]; 
0x0000000015d64a: mov esi, ebp; call qword ptr [rax+0x10]; 
0x0000000016960c: mov esi, ebp; call qword ptr [rax+0x18]; 
0x000000000e8141: mov esi, ebp; call qword ptr [rsp+0x58]; 
0x000000001757a0: mov esi, ebp; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000012e763: mov esi, ebp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000432fb: mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009f1f2: mov esi, ebp; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x000000000d956b: mov esi, ebp; mov [rsp+0xd0], rax; call r12; 
0x000000000e57f1: mov esi, ebp; mov eax, 0xe6; syscall; 
0x00000000096a42: mov esi, ebp; mov eax, 0xea; syscall; 
0x000000000e58b1: mov esi, ebp; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x0000000012f753: mov esi, ebp; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000096887: mov esi, ebp; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000001146dd: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000096901: mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000011aecd: mov esi, ebp; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02d: mov esi, ebp; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000001289a2: mov esi, ebp; mov edi, r12d; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x0000000011b741: mov esi, ebp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000009bdc4: mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x000000000a00ff: mov esi, ebp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000136e5b: mov esi, ebp; mov r8, [rsp+0x20]; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x000000000e5942: mov esi, ebp; mov r8d, eax; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x00000000114753: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000015d658: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d50a: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001630f2: mov esi, ebp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000007b5b5: mov esi, ebp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdaf: mov esi, ebp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000016833e: mov esi, ebp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000044408: mov esi, ebp; mov rdi, r12; call rax; 
0x00000000137ca2: mov esi, ebp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x0000000004548e: mov esi, ebp; mov rdi, r13; call rax; 
0x00000000073c4d: mov esi, ebp; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000072dc2: mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000011388a: mov esi, ebp; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000807b6: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000085b8a: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008081b: mov esi, ebp; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000086f7a: mov esi, ebp; mov rdi, r15; call rbx; 
0x0000000008234a: mov esi, ebp; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000008b848: mov esi, ebp; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000015d4f5: mov esi, ebp; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000000d911e: mov esi, ebp; mov rdi, rbp; call rbx; 
0x0000000008b5ab: mov esi, ebp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000007fb14: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000814b1: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x000000000815cd: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000082287: mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000081236: mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000815f7: mov esi, ebp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000008b40d: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000001609a4: mov esi, ebp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x0000000016073b: mov esi, ebx; call qword ptr [rbp+0x40]; 
0x00000000092f6f: mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000130f8f: mov esi, ebx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000893de: mov esi, ebx; mov edi, 0x2; mov eax, r9d; syscall; 
0x00000000092ef3: mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x00000000043208: mov esi, ebx; mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x000000001644e5: mov esi, ebx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000169440: mov esi, ebx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013e592: mov esi, ebx; mov rdi, rbp; call qword ptr [rsp+0x10]; 
0x00000000093bd6: mov esi, ebx; xor sil, 0x81; syscall; 
0x00000000119bbe: mov esi, ecx; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000128a36: mov esi, ecx; mov edi, r12d; mov eax, r10d; syscall; 
0x00000000117065: mov esi, ecx; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000011d2a1: mov esi, ecx; mov rax, rdi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000075d20: mov esi, ecx; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007658e: mov esi, ecx; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000007945d: mov esi, edi; call qword ptr [r12+0x38]; 
0x0000000007974b: mov esi, edi; call qword ptr [r13+0x38]; 
0x000000000436d4: mov esi, edi; call r14; 
0x0000000011a489: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000d9cb5: mov esi, edi; mov eax, 0xa4; xor edi, edi; syscall; 
0x0000000012ea6f: mov esi, edi; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000009528b: mov esi, edi; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000001666de: mov esi, edi; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001754bc: mov esi, edi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x0000000007afe7: mov esi, edi; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000013ef21: mov esi, edi; mov rdi, r12; call rbp; 
0x00000000043931: mov esi, edi; mov rdi, r12; mov rdx, r14; call rbp; 
0x00000000073eee: mov esi, edi; mov rdi, r14; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x00000000077083: mov esi, edi; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f8: mov esi, edi; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000076042: mov esi, edi; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000015eac2: mov esi, edi; mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000016382e: mov esi, edx; add rdi, 0x10; jmp rcx; 
0x000000000a8738: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a8750; ret; 
0x000000000a87b8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a87d0; ret; 
0x000000000a89f8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a8a10; ret; 
0x000000000a9488: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a94a0; ret; 
0x000000000a95b8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a95d0; ret; 
0x000000000ab018: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000ab030; ret; 
0x000000000ab0a8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000ab0c0; ret; 
0x000000000b1608: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b1620; ret; 
0x000000000c5408: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5420; ret; 
0x000000000c5488: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c54a0; ret; 
0x000000000c56b8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c56d0; ret; 
0x000000000c57e8: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5800; ret; 
0x000000000c5a48: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000c5a60; ret; 
0x000000000782f3: mov esi, edx; call qword ptr [r12+0x38]; 
0x0000000007a2b5: mov esi, edx; call qword ptr [rbx+0x38]; 
0x00000000132ab8: mov esi, edx; call rax; 
0x0000000012662b: mov esi, edx; cmp r8d, 0x1; ja short 0x0000000000126660; mov eax, 0x4; syscall; 
0x0000000012668a: mov esi, edx; cmp r8d, 0x1; ja short 0x00000000001266c0; mov eax, 0x5; syscall; 
0x000000001266eb: mov esi, edx; cmp r8d, 0x1; ja short 0x0000000000126720; mov eax, 0x6; syscall; 
0x0000000016384e: mov esi, edx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x0000000016633e: mov esi, edx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000165a0e: mov esi, edx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x00000000162c0e: mov esi, edx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x0000000015d5ea: mov esi, esi; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000a78f6: mov esi, esi; call rax; 
0x00000000127fa9: mov esi, esi; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x00000000127ef1: mov esi, esi; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x0000000007961e: mov esi, esi; mov [rbp-0x8f0], r8b; call rax; 
0x000000000968d2: mov esi, esi; mov eax, 0xea; syscall; 
0x000000000969f4: mov esi, esi; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000016b2a4: mov esi, esi; mov rdi, r12; call r13; 
0x0000000004385f: mov esi, esi; mov rdi, r12; call rbx; 
0x0000000005bff2: mov esi, esi; mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x0000000015f2be: mov esi, esi; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000153648: mov esi, esi; mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x0000000015e2e9: mov esi, esi; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000016d010: mov esi, esi; mov rdi, rbp; call r12; 
0x0000000008b27d: mov esi, esi; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000008004e: mov esi, esi; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000013b5be: mov esi, esi; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000153c3f: mov esi, esi; mov rdi, rbx; mov rcx, r15; call r12; 
0x0000000013196c: mov esi, esi; mov rdx, rax; call qword ptr [r15+0x28]; 
0x000000000eca31: mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x00000000080f96: mov esi, esp; call qword ptr [r14+0x38]; 
0x00000000175adc: mov esi, esp; call qword ptr [rax+0x340]; 
0x0000000016c5dd: mov esi, esp; call qword ptr [rax+0x40]; 
0x0000000015fbe5: mov esi, esp; call qword ptr [rax]; 
0x0000000013eece: mov esi, esp; call qword ptr [rsp+0x58]; 
0x000000000a7751: mov esi, esp; call rax; 
0x00000000043820: mov esi, esp; call rbx; 
0x0000000015fc04: mov esi, esp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000001691d1: mov esi, esp; mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000009edaa: mov esi, esp; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000053997: mov esi, esp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000029e5f: mov esi, esp; mov edi, ebp; add rcx, [r14]; call rcx; 
0x00000000029eb5: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x00000000029e15: mov esi, esp; mov edi, ebp; call r15; 
0x000000000a0600: mov esi, esp; mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000e56a1: mov esi, esp; mov edi, ebp; mov eax, 0xe5; syscall; 
0x000000001163e8: mov esi, esp; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000162f13: mov esi, esp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000043844: mov esi, esp; mov rdi, r13; call rbx; 
0x00000000155104: mov esi, esp; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x00000000083a07: mov esi, esp; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000074990: mov esi, esp; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739d5: mov esi, esp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000120e9e: mov esi, esp; mov rdi, r14; call r13; 
0x00000000120e09: mov esi, esp; mov rdi, r15; call r14; 
0x0000000008a467: mov esi, esp; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000008ba2f: mov esi, esp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008ac5a: mov esi, esp; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000008a7b9: mov esi, esp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x00000000072854: mov esi, esp; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000015fc97: mov esi, esp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000007ebe8: mov esi, esp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x00000000113d8b: mov esi, esp; mov rdi, rbp; mov eax, 0x135; syscall; 
0x0000000008ca58: mov esi, esp; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000016cee2: mov esi, esp; mov rdi, rbx; call rcx; 
0x00000000153825: mov esi, esp; mov rdi, rbx; mov rcx, r13; call r10; 
0x000000000e9e00: mov esi, esp; mov rdx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e9a90: mov esi, esp; mov rdx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x000000000947c6: mov esi, gs:[rbx+0x63c]; mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x00000000083a06: mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x000000000e57f0: mov esi, r13d; mov eax, 0xe6; syscall; 
0x00000000096a41: mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000e58b0: mov esi, r13d; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000e5941: mov esi, r13d; mov r8d, eax; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000968d1: mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000015f2bd: mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000015e2e8: mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000156da9: mov esp, 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000003c1d4: mov esp, 0x10024; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x000000001b3ef2: mov esp, 0x1448dc0; lahf; ret; 
0x000000001b5262: mov esp, 0x1448dc0; out dx, eax; ret; 
0x000000000c2eca: mov esp, 0x1d8d4cd2; add [rip+0x63490011], eax; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e88: mov esp, 0x1d8d4cd2; add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea5: mov esp, 0x1d8d4cd2; add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf2: mov esp, 0x1d8d4cd2; and eax, 0x49001134; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3892: mov esp, 0x1d8d4cd2; mov ecx, 0x490010fb; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1232: mov esp, 0x1d8d4cd2; mov ecx, 0x4900111f; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000019db72: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000ffd7e: mov esp, 0x25824; add al, ch; out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x000000001ac73d: mov esp, 0x295e9c0; add [rax], al; xor eax, eax; ret; 
0x000000001a276f: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x000000001ad49c: mov esp, 0x2e8c1c0; xtest; je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000001b16e3: mov esp, 0x343a40c0; add dh, [rbp-0x72]; add rax, rdx; ret; 
0x0000000019db62: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000011ed1a: mov esp, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x1c; syscall; 
0x0000000012765a: mov esp, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x31; syscall; 
0x00000000119a0a: mov esp, 0x441f0f; add bl, dh; nop edx, edi; mov eax, 0x3; syscall; 
0x000000000b4bd1: mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000b4bc1: mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000b4ba1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000001b57b2: mov esp, 0x448d48c0; xchg [rax], esp; ret; 
0x000000001b1b37: mov esp, 0x44b60ff9; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000001b4389: mov esp, 0x48d48c0; xchg [rbx], edi; xor [rbp+0x1d], dh; ret; 
0x000000001b5738: mov esp, 0x48d48c0; xchg ebx, eax; xor eax, eax; ret; 
0x000000001a16e3: mov esp, 0x5874c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000019db52: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x000000001b402c: mov esp, 0x72c639c0; or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b539a: mov esp, 0x72c639c0; or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b542a: mov esp, 0x72c639c0; push 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40aa: mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b405e: mov esp, 0x72c639c0; xlat [rbx]; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001a2304: mov esp, 0x7343bc0; jne short 0x00000000001a2334; add rax, rdi; vzeroupper; ret; 
0x000000001b5f0f: mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x0000000019d98b: mov esp, 0x77f8c5c0; ret; 
0x000000001ae862: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b5f22: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x20]; ret; 
0x0000000019db42: mov esp, 0x81e981c0; add [rax], al; add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x000000001b45ab: mov esp, 0x82343bc0; jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001a27c2: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000019d9c2: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x77f8c5f8; ret; 
0x000000001b59c4: mov esp, 0x848d48c0; xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b4552: mov esp, 0x87343bc0; jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x000000001b4562: mov esp, 0x87743bc0; and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b43e2: mov esp, 0x87743bc0; and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4537: mov esp, 0x87743bc0; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001a29d2: mov esp, 0x88448dc0; lahf; shr eax, 0x2; vzeroupper; ret; 
0x00000000119920: mov esp, 0x8bfff771; and al, 0x18; add rsp, 0x28; ret; 
0x000000000a953a: mov esp, 0x8d480000; adc eax, 0xfb59c; cmovne rax, rdx; ret; 
0x0000000017d7f8: mov esp, 0x8d4c0009; sbb eax, 0x65a4e; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x000000001a4990: mov esp, 0xa8000000; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000001b3ebb: mov esp, 0xc031c3c0; ret; 
0x000000001b4ac2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x000000000b497a: mov esp, 0xc22948c0; jbe 0x00000000000b4c20; add rax, rdi; add rax, rcx; ret; 
0x000000000b4be1: mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf1: mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c01: mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c11: mov esp, 0xc22948c0; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a999a: mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x000000001b4135: mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x0000000019dda2: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x00000000199512: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x00000000199502: mov esp, 0xc78348c0; and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x0000000019d732: mov esp, 0xc78348c0; or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x000000001994f2: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000001afced: mov esp, 0xc80148c0; ret; 
0x0000000019976b: mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000001a8a8b: mov esp, 0xc80148c0; xtest; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000000d7e64: mov esp, 0xc83948ca; ja short 0x00000000000d7e80; sub rdi, 0x10; add rax, rdi; ret; 
0x000000001aec0e: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001b1953: mov esp, 0xd00148c0; ret; 
0x0000000019d77d: mov esp, 0xd00148c0; vzeroupper; ret; 
0x000000001a949d: mov esp, 0xd00148c0; xtest; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000000bab63: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000d85e3: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000d9564: mov esp, 0xd024; add [rcx+rcx*4-0x12], cl; mov [rsp+0xd0], rax; call r12; 
0x000000000d7d9c: mov esp, 0xd03948d2; ja 0x00000000000d7e80; add rax, rdi; add rax, rcx; ret; 
0x000000001aaddc: mov esp, 0xd6010fc0; je short 0x00000000001aade7; vzeroall; ret; 
0x0000000019dd32: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000019dd22: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000001b40c2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40d2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5462: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5442: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000011d14c: mov esp, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001b58f2: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b63e2: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000000fc0cd: mov esp, 0xe9fffff9; ret; 
0x0000000019d71a: mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x00000000199682: mov esp, 0xef8348c0; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x00000000199862: mov esp, 0xef8348c0; jg short 0x00000000001998b1; add eax, edi; vzeroupper; ret; 
0x0000000019da92: mov esp, 0xef8348c0; jg short 0x000000000019dae1; add eax, edi; vzeroupper; ret; 
0x0000000019dc92: mov esp, 0xef8348c0; jg short 0x000000000019dce1; add eax, edi; vzeroupper; ret; 
0x00000000199872: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000007560a: mov esp, 0xf024; add al, ch; imul edi, [rcx+rax-0x2451700], 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000b4c9b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000001b14a9: mov esp, 0xf80148c0; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000b4bb1: mov esp, 0xf80148c0; ret; 
0x00000000199478: mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000001a73c7: mov esp, 0xf80148c0; xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001ae00a: mov esp, 0xf80148c0; xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x0000000017511b: mov esp, 0xfc15ffe8; jmp qword ptr [rsi+0x66]; 
0x000000001b4aad: mov esp, 0xff3c3c0; mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x000000001a2782: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000019d9a2: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x0000000013ff5c: mov esp, 0xfffeb1e9; jmp qword ptr [rsi+0xf]; 
0x000000000c1165: mov esp, [rax]; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000011fe0b: mov esp, [rbp+0x10]; test r12, r12; jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x00000000120c34: mov esp, [rbp+0x10]; test r12, r12; jne short 0x0000000000120c60; mov rdi, [rbp]; call rbx; 
0x0000000009d431: mov esp, [rbp+0x18]; mov rdi, [rbp+0x8]; call qword ptr [rbp]; 
0x000000000a9831: mov esp, [rdx+0x10]; add [rax-0x73], cl; add eax, 0x106304; cmove rax, rdx; ret; 
0x000000000902f9: mov esp, [rip+0x188bc9]; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090191: mov esp, [rip+0x188d31]; lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x0000000009d394: mov esp, [rsp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000016c32c: mov esp, eax; mov eax, eax; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015e412: mov esp, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000008a281: mov esp, eax; mov rax, r12; pop r12; ret; 
0x00000000042318: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000015e29e: mov esp, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000ad1c3: mov esp, ecx; clc; jmp qword ptr [rsi+0xf]; 
0x00000000133c7b: mov esp, edi; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000005a171: mov esp, edx; ret; 
0x0000000015fc85: mov esp, esp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000049ee2: mov fs, [rcx]; or [rax], al; add [rcx-0x77], cl; ret far; 
0x00000000090b68: mov fs:[0x2f8], rdi; ret; 
0x00000000090b36: mov fs:[0x300], rax; ret; 
0x00000000090b1e: mov fs:[0x300], rdi; ret; 
0x00000000090c14: mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000091294: mov fs:[0x972], al; cmp eax, 0x1; je short 0x00000000000912a8; ret; 
0x0000000011d1c3: mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000168972: mov fs:[rax], rdx; ret; 
0x00000000140c80: mov fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000a54d3: mov fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e7e33: mov fs:[rbx], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000151e8a: mov fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000141281: mov fs:[rbx], r13d; mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x00000000168a70: mov fs:[rbx], rax; pop rbx; ret; 
0x00000000045d95: mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000004276d: mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000039b10: mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000042487: mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000427a9: mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000eac1f: mov fs:[rdx], eax; mov eax, r8d; ret; 
0x00000000108dbf: mov fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000046ce9: mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000155024: mov fs:[rdx], eax; pop rbx; ret; 
0x0000000003a40f: mov fs:[rdx], rax; ret; 
0x000000000e7643: mov gs, [rax-0x48000000]; add [rax], al; add [rax+0x39], cl; ret; 
0x000000001b8af7: mov gs, [rax-0x72000003]; ret; 
0x0000000012614e: mov gs, [rcx-0x74b7000a]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000ce80e: mov gs, [rdi]; add eax, 0x89490000; ret far; 
0x000000000af2ef: mov gs, [rsi]; add al, [rax]; add bh, dh; ret; 
0x000000000996fe: mov qword ptr [0x2f0], 0x0; nop; xor eax, eax; ret; 
0x00000000174c71: mov qword ptr [r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x000000000ab507: mov qword ptr [r12], 0x0; pop r12; ret; 
0x000000000ab4b1: mov qword ptr [r12], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000015ed96: mov qword ptr [r14], 0x0; ret; 
0x000000000a80a2: mov qword ptr [r8+0x8], 0x0; xor eax, eax; mov [r8], rsi; ret; 
0x000000001290be: mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x00000000091423: mov qword ptr [rax+0x10c0], 0x0; ret; 
0x000000000913e0: mov qword ptr [rax+0x10c0], 0x0; ret; 
0x00000000084412: mov qword ptr [rax+0x50], 0x0; movups [rax+0x40], xmm0; pop rbx; ret; 
0x00000000149d40: mov qword ptr [rax+0x8], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000008e6bf: mov qword ptr [rax+0x8], 0x0; ret; 
0x000000001290b6: mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xf036f], 0x0; ret; 
0x0000000015703c: mov qword ptr [rax+0xa0], 0x0; mov dword ptr [rax+0xa8], 0x0; add rsp, 0x8; ret; 
0x0000000008e6b8: mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000000903dc: mov qword ptr [rax], 0x0; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x0000000008e7ee: mov qword ptr [rbp+0x48], 0x0; test byte ptr [rbp], 0x80; jne short 0x000000000008e810; pop rbp; ret; 
0x000000000f01d3: mov qword ptr [rbp+0x8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a0982: mov qword ptr [rbp+rbx*8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000035e01: mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x0000000016d0f5: mov qword ptr [rbx+0x18], 0x0; pop rbx; ret; 
0x0000000015b96e: mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001060be: mov qword ptr [rbx+0x28], 0x0; pop rbx; ret; 
0x0000000015b976: mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x0000000008d85d: mov qword ptr [rbx+0x58], 0x0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000008f2dd: mov qword ptr [rbx+0x58], 0x0; pxor xmm0, xmm0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000002b9d6: mov qword ptr [rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000909d1: mov qword ptr [rbx], 0x0; pop rbx; ret; 
0x00000000178374: mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x000000001576bd: mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001576c8: mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x0000000016d54c: mov qword ptr [rdi+0x20], 0x0; ret; 
0x000000000620e6: mov qword ptr [rdi+0x8], 0x0; xchg [rdi], eax; cmp eax, 0x1; jg short 0x0000000000062100; ret; 
0x000000001195a0: mov qword ptr [rdi], 0x0; ret; 
0x00000000042e49: mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000011956a: mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000001724c7: mov qword ptr [rdx], 0x0; ret; 
0x0000000011db1b: mov qword ptr [rip+0x10383a], 0x0; mov qword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000011db26: mov qword ptr [rip+0x10383f], 0x0; add rsp, 0x8; ret; 
0x0000000011c6c9: mov qword ptr [rip+0x104b4c], 0x0; add rsp, 0x8; ret; 
0x0000000008f59f: mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f594: mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f565: mov qword ptr [rip+0x18c4e8], 0x0; xchg [rip+0x18c4da], eax; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x00000000080a45: mov qword ptr [rip+0x19afc8], 0x0; xchg [rip+0x19afba], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x0000000004605c: mov qword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000045f87: mov qword ptr [rip+0x1d57a6], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000045e9f: mov qword ptr [rip+0x1d5886], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x000000001bb6e6: mov qword ptr [rip+0x5f7cf], 0x0; ret; 
0x000000001bb25b: mov qword ptr [rip+0x5f822], 0x0; add rsp, 0x8; ret; 
0x000000001bb96c: mov qword ptr [rip+0x64d79], 0x0; ret; 
0x000000001bba52: mov qword ptr [rip+0x656eb], 0x0; add rsp, 0x8; ret; 
0x000000001bbb29: mov qword ptr [rip+0x65994], 0x0; add rsp, 0x8; ret; 
0x000000001bbc27: mov qword ptr [rip+0x66956], 0x0; pop rbx; ret; 
0x000000001bbd64: mov qword ptr [rip+0x6bab9], 0x0; add rsp, 0x8; ret; 
0x000000001bbd38: mov qword ptr [rip+0x6badd], 0x0; pop rbx; ret; 
0x000000001bbcf0: mov qword ptr [rip+0x6bb15], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000172865: mov qword ptr [rip+0xb55b0], 0x0; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000156f45: mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x000000001290ef: mov qword ptr [rip+0xf0346], 0x0; ret; 
0x000000001290c6: mov qword ptr [rip+0xf036f], 0x0; ret; 
0x00000000129095: mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x0000000012906f: mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x00000000128cf8: mov qword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x00000000128cc3: mov qword ptr [rip+0xf0772], 0x3; add rsp, 0x8; ret; 
0x00000000125a92: mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x0000000015eced: mov qword ptr [rsi+0x10], 0x2; test eax, eax; je short 0x000000000015ed00; xor eax, eax; ret; 
0x0000000015ee4d: mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000015edb2: mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x000000000923b8: mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000175321: mov qword ptr [rsp+0x28], 0x0; lea rcx, [rip-0x341]; call qword ptr [rbx+0x358]; 
0x000000000d9a81: mov qword ptr [rsp+0x40], 0x0; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x00000000041183: mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000004112f: mov qword ptr [rsp-0x18], 0x0; mov [rsp-0x10], ax; fstp tbyte ptr [rdx], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000015e26f: mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000143673: mov qword ptr [rsp], 0x0; call rax; 
0x0000000014358b: mov qword ptr [rsp], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000996fd: mov qword ptr fs:[0x2f0], 0x0; nop; xor eax, eax; ret; 
0x00000000174c70: mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000168a11: mov qword ptr fs:[rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000909d0: mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x00000000063100: mov r10, [rbp-0x610]; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x00000000090512: mov r10, [rdx]; mov rax, [rax+0x348]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000119fa9: mov r10, [rip+0xfee60]; mov esi, 0x5401; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x000000001106d1: mov r10, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000011b94d: mov r10, [rsp+0x28]; mov rsi, [rsp+0x20]; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x00000000125b9a: mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000011b7db: mov r10, [rsp+0x8]; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000eb167: mov r10, r12; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000e57ea: mov r10, r14; mov rdx, r12; mov esi, r13d; mov eax, 0xe6; syscall; 
0x0000000011ea30: mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x00000000115ca4: mov r10, rcx; mov eax, 0x104; syscall; 
0x00000000061f54: mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000116164: mov r10, rcx; mov eax, 0x109; syscall; 
0x00000000116224: mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000119d04: mov r10, rcx; mov eax, 0x11; syscall; 
0x000000001264a4: mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000125f14: mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000127084: mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000126574: mov r10, rcx; mov eax, 0x136; syscall; 
0x000000001265b4: mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000113c34: mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000119324: mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000127d14: mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000127c74: mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000127794: mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126ea4: mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d84: mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f34: mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000126f64: mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000122394: mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000122334: mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000122214: mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000122244: mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001222a4: mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000122184: mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000011ed84: mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000128554: mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126d24: mov r10, rcx; mov eax, 0xe9; syscall; 
0x000000000910f9: mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x00000000061f94: mov r10, rcx; test r8d, r8d; je short 0x0000000000061fe0; mov eax, 0x13c; syscall; 
0x0000000011ae3f: mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011af9f: mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000001190d7: mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000076c2b: mov r10d, 0x1; jmp rsi; 
0x00000000076be3: mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x00000000075623: mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x000000000431aa: mov r10d, 0x8; mov eax, 0x80; syscall; 
0x000000000425e6: mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000053a04: mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000096830: mov r10d, 0x8; mov rdx, rbp; lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x0000000009bc8b: mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000009eb96: mov r10d, 0x8; syscall; 
0x0000000006aee2: mov r10d, [rbp-0x5c0]; movsxd rax, [rcx+r15*4]; add rax, rcx; notrack jmp rax; 
0x00000000040769: mov r10d, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x000000000ea548: mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000126394: mov r10d, ecx; cmp ecx, 0xffffffff; je short 0x00000000001263c8; mov eax, 0x149; syscall; 
0x0000000011426b: mov r10d, ecx; mov eax, 0x103; syscall; 
0x00000000113ee4: mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000119424: mov r10d, ecx; mov eax, 0x118; syscall; 
0x00000000126ab4: mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141e4: mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ee4: mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000011ebc4: mov r10d, ecx; test r9d, 0xfff; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x00000000119464: mov r10d, ecx; test rsi, rsi; je short 0x0000000000119492; mov eax, 0x118; syscall; 
0x00000000125e44: mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000010ad62: mov r11, [rbp-0x1f0]; call r11; 
0x0000000017c810: mov r11, [rsi-0x10]; mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000076220: mov r11d, 0x1; jmp rsi; 
0x00000000136831: mov r11d, 0x401f0f; mov eax, edi; shr eax, 0x18; ret; 
0x000000001367b0: mov r11d, 0x441f0f; add [rcx-0xda08], cl; inc dword ptr [rax]; ret; 
0x000000001824d6: mov r11d, 0x46f00ff2; ret far; 
0x0000000017d021: mov r11d, 0x4f7f0ff3; ret far; 
0x0000000006aedb: mov r11d, [rbp-0x5c8]; mov r10d, [rbp-0x5c0]; movsxd rax, [rcx+r15*4]; add rax, rcx; notrack jmp rax; 
0x0000000009d393: mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000011fe09: mov r12, [rbp+0x10]; test r12, r12; jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x0000000011fe0a: mov r12, [rbp+0x10]; test r12, r12; jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x00000000120c33: mov r12, [rbp+0x10]; test r12, r12; jne short 0x0000000000120c60; mov rdi, [rbp]; call rbx; 
0x0000000009d430: mov r12, [rbp+0x18]; mov rdi, [rbp+0x8]; call qword ptr [rbp]; 
0x000000000902f8: mov r12, [rip+0x188bc9]; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090190: mov r12, [rip+0x188d31]; lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x0000000008a280: mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000133c7a: mov r12, rdi; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000015fc84: mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016c32b: mov r12d, eax; mov eax, eax; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015e411: mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015e29d: mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000011fe3a: mov r13, [r12+0x10]; test r13, r13; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe6b: mov r13, [r12+0x10]; test r13, r13; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c97: mov r13, [r12+0x10]; test r13, r13; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x0000000010b1e4: mov r13, [rip+0x10dc65]; add rax, fs:[0x0]; mov r8, rax; add r9, r13; call r15; 
0x00000000044614: mov r13, r15; add r15, r14; call rax; 
0x00000000043807: mov r13, rax; mov rdi, r12; call rbx; 
0x000000000a78c5: mov r13, rax; test r13, r13; jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x00000000120412: mov r13, rbx; mov rdi, rbp; call r12; 
0x0000000016c4c3: mov r13d, eax; and eax, 0xffffffff; mov [rsp], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x000000001666d4: mov r15, [rsp+0x68]; mov rdi, [rax]; mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000076c63: mov r15d, 0x1; jmp rsi; 
0x000000001204e2: mov r15d, r13d; call rax; 
0x0000000010588b: mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x0000000017553a: mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x00000000090b95: mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000053b6d: mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x0000000007a67f: mov r8, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074bab: mov r8, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000136e5d: mov r8, [rsp+0x20]; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x0000000015d95a: mov r8, [rsp+0x28]; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x0000000009063e: mov r8, [rsp+0x28]; sub r8, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000035186: mov r8, [rsp+0x48]; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x00000000149b60: mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x00000000125b97: mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000011ea33: mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x0000000010b1f4: mov r8, rax; add r9, r13; call r15; 
0x00000000153526: mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000121f4a: mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x00000000084670: mov r8, rcx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x000000001269e3: mov r8, rcx; mov eax, 0x1b3; syscall; 
0x0000000009bc87: mov r8, rsi; mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000177e04: mov r8, rsi; mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000eb161: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x000000000eb160: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xed2fe]; mov eax, 0x142; syscall; 
0x0000000007c6f3: mov r8d, 0x1; jmp rsi; 
0x0000000016cc6b: mov r8d, 0x1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x0000000011d799: mov r8d, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x000000000891d0: mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000011d7d2: mov r8d, 0x1; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x00000000143380: mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x00000000118e0f: mov r8d, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000081d0c: mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000cf8ad: mov r8d, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x00000000061fcf: mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000eac19: mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x00000000039ce0: mov r8d, [rax+rdx]; mov eax, r8d; ret; 
0x00000000084792: mov r8d, [rax]; mov eax, r8d; ret; 
0x000000000a0a72: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x000000000a0a0f: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x000000000a09af: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x0000000009056e: mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x000000000a0554: mov r8d, eax; cmp eax, 0xfffff000; ja short 0x00000000000a0568; mov eax, r8d; ret; 
0x00000000061fab: mov r8d, eax; cmp eax, 0xffffffff; je short 0x0000000000061fc0; mov eax, r8d; ret; 
0x0000000011a27b: mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000115131: mov r8d, eax; mov eax, 0x3; syscall; 
0x0000000011ba51: mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000011bb11: mov r8d, eax; mov eax, 0x4b; syscall; 
0x000000001152c9: mov r8d, eax; mov eax, 0x55; syscall; 
0x00000000042800: mov r8d, eax; mov eax, 0x82; syscall; 
0x00000000126347: mov r8d, eax; mov eax, r8d; ret; 
0x000000000e5944: mov r8d, eax; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x00000000114755: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000012629d: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000011ab8f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x0000000011ac2f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a61: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x000000001276cd: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x00000000127b3f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001279e1: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x00000000114f59: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000001149c1: mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x00000000127601: mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x0000000012607c: mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000001199ad: mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000e585b: mov r8d, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x0000000004320a: mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000046cb0: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecc0: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d70: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000001148e0: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000012803b: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fcb: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000ea48c: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000001198fd: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ecd: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000012829d: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000012612c: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x0000000011292d: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129dd: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x000000000515ea: mov r8d, eax; or r8d, ecx; mov rax, r8; ret; 
0x00000000143365: mov r8d, edx; cmovs r8d, eax; mov eax, r8d; ret; 
0x0000000010ad5b: mov r9, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x00000000053b71: mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000001b01f3: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x000000001b13e3: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3c3: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000d3a49: mov r9, [rsp+0x10]; call r13; 
0x000000000c66aa: mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000c6c41: mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000e7355: mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x0000000002e03c: mov r9, [rsp+0x18]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002f4bf: mov r9, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x000000000301bd: mov r9, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x000000000311ac: mov r9, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000011ea36: mov r9, [rsp+0x8]; syscall; 
0x0000000002aa92: mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000d330d: mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000c51aa: mov r9, rax; mov eax, [rcx+rax*4]; sub eax, [rcx+r8*4]; je short 0x00000000000c5198; ret; 
0x000000000c5208: mov r9, rax; mov eax, [rdi+rax*4]; sub eax, [rdi+r8*4]; je short 0x00000000000c51f0; ret; 
0x00000000167725: mov r9, rbp; lea r8, [rip-0x5b5f]; xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x000000001377a7: mov r9, rbx; mov rcx, [rsp+0x58]; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x0000000007c6e3: mov r9d, 0x1; jmp rsi; 
0x00000000115129: mov r9d, 0x7c8bfff7; and al, 0xc; mov r8d, eax; mov eax, 0x3; syscall; 
0x00000000125cb3: mov r9d, 0x8; mov eax, 0x119; syscall; 
0x00000000125d83: mov r9d, 0x8; mov eax, 0x1b9; syscall; 
0x0000000009118a: mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000108db9: mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000011ace5: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011ada5: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000ea545: mov r9d, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000118e6c: mov r9d, eax; mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000011ae3c: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011af9c: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000d83e0: mov rax, 0x1; ret; 
0x000000000d83f0: mov rax, 0x2; ret; 
0x000000000d8400: mov rax, 0x3; ret; 
0x000000000d8410: mov rax, 0x4; ret; 
0x000000000d8420: mov rax, 0x5; ret; 
0x00000000164bda: mov rax, 0x5c415d5b00000001; pop r13; ret; 
0x00000000046b4f: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000046b9e: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x000000000d8430: mov rax, 0x6; ret; 
0x0000000005a1b0: mov rax, 0x7974742f7665642f; mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000d8440: mov rax, 0x7; ret; 
0x00000000056640: mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000042520: mov rax, 0xf; syscall; 
0x00000000042e79: mov rax, 0xfffffffe7fffffff; mov [rdi], rax; xor eax, eax; ret; 
0x00000000094a0f: mov rax, 0xfffffffeffffffff; mov [rbx+0x8f0], rax; lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x0000000009bf24: mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x00000000042f09: mov rax, 0xfffffffffffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000001432f0: mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000004244e: mov rax, 0xffffffffffffffff; ret; 
0x000000001758ee: mov rax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000009655c: mov rax, [0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000090aea: mov rax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b595: mov rax, [0x10]; ret; 
0x00000000050c65: mov rax, [0x28]; mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x00000000114c8b: mov rax, [0x28]; mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x00000000090b5c: mov rax, [0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x00000000090b12: mov rax, [0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000015e6f4: mov rax, [r12+0x38]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000015f828: mov rax, [r13+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f866: mov rax, [r13+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000016368b: mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000166163: mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000166ea7: mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000167f47: mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x0000000016b381: mov rax, [rax+0x10]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000046057: mov rax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000133ca2: mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000eb026: mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000eb031; call rax; 
0x00000000129447: mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000016b341: mov rax, [rax+0x18]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000129437: mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000133c7d: mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000011b37b: mov rax, [rax+0x18]; test rax, rax; je short 0x000000000011b385; ret; 
0x0000000009e629: mov rax, [rax+0x18]; test rax, rax; jne short 0x000000000009e620; ret; 
0x000000000c5307: mov rax, [rax+0x1f0]; ret; 
0x000000000c5317: mov rax, [rax+0x1f8]; ret; 
0x000000000c5327: mov rax, [rax+0x200]; ret; 
0x000000000c5337: mov rax, [rax+0x208]; ret; 
0x00000000086094: mov rax, [rax+0x20]; jmp rax; 
0x0000000009e740: mov rax, [rax+0x20]; test rax, rax; jne short 0x000000000009e738; ret; 
0x000000000c5347: mov rax, [rax+0x210]; ret; 
0x000000000c5357: mov rax, [rax+0x218]; ret; 
0x000000000c5367: mov rax, [rax+0x220]; ret; 
0x000000000c5377: mov rax, [rax+0x228]; ret; 
0x000000000c5387: mov rax, [rax+0x230]; ret; 
0x000000000c5397: mov rax, [rax+0x238]; ret; 
0x0000000015f6c2: mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000c53a7: mov rax, [rax+0x240]; ret; 
0x000000000c52ef: mov rax, [rax+0x248]; ret; 
0x000000000e56cb: mov rax, [rax+0x2f8]; test rax, rax; je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x00000000133baf: mov rax, [rax+0x30]; ret; 
0x00000000113d48: mov rax, [rax+0x310]; test rax, rax; je short 0x0000000000113d88; xor edx, edx; call rax; 
0x000000000e5667: mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x00000000122428: mov rax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x000000001224a0: mov rax, [rax+0x320]; ret; 
0x000000001754c2: mov rax, [rax+0x338]; jmp rax; 
0x00000000090567: mov rax, [rax+0x348]; mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x00000000090515: mov rax, [rax+0x348]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000008fe50: mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x0000000008fea0: mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x000000000904a0: mov rax, [rax+0x388]; mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x0000000008fee8: mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x000000000904a7: mov rax, [rax+0x38]; add rsp, 0x28; jmp rax; 
0x0000000015e9e5: mov rax, [rax+0x38]; test rax, rax; je 0x000000000015e85e; mov rdi, rbx; call rax; 
0x0000000015d2ef: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000015d2fd; mov rdi, rbp; call rax; 
0x0000000015d746: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000015d754; mov rdi, rbp; call rax; 
0x0000000015e75d: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000015e76b; mov rdi, rbx; call rax; 
0x0000000015ead3: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000015eae1; mov rdi, rbx; call rax; 
0x0000000015f2f1: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000015f2ff; mov rdi, r13; call rax; 
0x00000000162c60: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000162c72; lea rdi, [rbp+0xc8]; call rax; 
0x000000001636a6: mov rax, [rax+0x38]; test rax, rax; je short 0x00000000001636b4; mov rdi, rbp; call rax; 
0x0000000016388b: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000016389b; lea rdi, [r12+0x10]; call rax; 
0x00000000164b4a: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000164b58; mov rdi, rbp; call rax; 
0x00000000164d1e: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000164d2d; mov rdi, r13; call rax; 
0x00000000165a4d: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000165a5c; lea rdi, [rbp+0x68]; call rax; 
0x00000000166175: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000166183; mov rdi, rbp; call rax; 
0x000000001664ed: mov rax, [rax+0x38]; test rax, rax; je short 0x00000000001664fc; lea rdi, [rbp+0x58]; call rax; 
0x00000000169a0b: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000169a1b; lea rdi, [r12+0x10]; call rax; 
0x0000000016a1a4: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000016a1b4; lea rdi, [r12+0x10]; call rax; 
0x000000001659f0: mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000003a345: mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a155: mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e5: mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x00000000166320: mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x000000001753b7: mov rax, [rax+0x58]; add rsp, 0x70; pop rbx; jmp rax; 
0x0000000003a125: mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b5: mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a3fe: mov rax, [rax+0x58]; mov rdx, [rip+0x1de9df]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000175497: mov rax, [rax+0x60]; add rsp, 0x30; pop rbx; jmp rax; 
0x00000000122418: mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000122498: mov rax, [rax+0x60]; ret; 
0x0000000008e64f: mov rax, [rax+0x68]; test rax, rax; jne short 0x000000000008e648; ret; 
0x000000000a50eb: mov rax, [rax+0x870]; cmp rax, rsi; jne short 0x00000000000a50c0; mov dword ptr [rip+0x17b3eb], 0x0; ret; 
0x0000000016b5b6: mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x0000000008feef: mov rax, [rax+0x8]; jmp rax; 
0x000000001223fa: mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000012247a: mov rax, [rax+0x8]; ret; 
0x000000000eb06e: mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000eb079; call rax; 
0x000000000a794a: mov rax, [rax+0x8]; test rax, rax; jne short 0x00000000000a7940; xor eax, eax; ret; 
0x00000000162bf3: mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000083c14: mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000083d49: mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000008608d: mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x000000000815ec: mov rax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000036b03: mov rax, [rax+r15*8]; test rax, rax; je short 0x0000000000036b0e; call rax; 
0x000000001bb2a0: mov rax, [rax+rbx*8]; mov [r13+rbx*8], rdx; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x0000000003a157: mov rax, [rax+rdi*4+0x200]; ret; 
0x00000000039c42: mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000007d338: mov rax, [rax+rdi*8]; ret; 
0x0000000003a0e7: mov rax, [rax+rdx*4]; ret; 
0x00000000162df8: mov rax, [rax]; bswap eax; mov [rdi+0xb4], eax; mov eax, 0x1; ret; 
0x00000000162dc8: mov rax, [rax]; bswap eax; mov [rdi+0xb8], eax; mov eax, 0x1; ret; 
0x000000000388bf: mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a342: mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a152: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0e2: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a122: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b2: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x00000000039c3f: mov rax, [rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388bc: mov rax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a14f: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0df: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a11f: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0af: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a07f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a05f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a0ff: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a03f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fbf: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f7f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x00000000039fff: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f5f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a01f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fdf: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039f9f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f3f: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012a518: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a480: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x00000000129f98: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012a3e8: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a168: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a038: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012a2a8: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x00000000129ef8: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012a348: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a208: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x00000000129e58: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000133c03: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000045eaa: mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x0000000014a39c: mov rax, [rax]; ret; 
0x00000000121625: mov rax, [rax]; test rax, rax; je 0x00000000001216d0; call rax; 
0x000000000eafae: mov rax, [rax]; test rax, rax; je short 0x00000000000eafb8; call rax; 
0x0000000012146b: mov rax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x0000000008f1c8: mov rax, [rax]; test rax, rax; jne short 0x000000000008f1c0; ret; 
0x0000000016a1fd: mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000016a22a: mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000016a229: mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000167157: mov rax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015e2c9: mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000016c334: mov rax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000015ef80: mov rax, [rbp+0x8]; lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000164590: mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016b6a8: mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000016b64f: mov rax, [rbp+0x8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c5e6: mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000016c637: mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fcd7: mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001644f1: mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001685c4: mov rax, [rbp+0x8]; mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x00000000168807: mov rax, [rbp+0x8]; mov dword ptr [r13], 0xe; lea rsi, [r13+0x8]; mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000016449a: mov rax, [rbp+0x8]; mov dword ptr [rsp+0xc], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000001695e2: mov rax, [rbp+0x8]; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x0000000015eef1: mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000015efaa: mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164461: mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015e2e4: mov rax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000015dcf5: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000169580: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000169420: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000015e268: mov rax, [rbp+0x8]; mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x0000000015fc92: mov rax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x000000001644e0: mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016943b: mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000016c2fd: mov rax, [rbp+0x8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x00000000167ce9: mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x00000000113882: mov rax, [rbp-0x168]; mov rsi, r13; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000010aac7: mov rax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x000000001204de: mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000002b308: mov rax, [rbp-0x68]; mov rdi, r12; call rax; 
0x000000000562dd: mov rax, [rbp-0x8]; sub rax, fs:[0x28]; jne short 0x0000000000056365; leave; ret; 
0x00000000090390: mov rax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x00000000090380: mov rax, [rbx+0x10]; mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x0000000008d8c0: mov rax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000089264: mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x0000000015d732: mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d534: mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000015d4f0: mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000015d5cc: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d54d: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000015f66b: mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000175110: mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000175200: mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x000000001753b0: mov rax, [rbx+0x388]; mov rax, [rax+0x58]; add rsp, 0x70; pop rbx; jmp rax; 
0x00000000175490: mov rax, [rbx+0x388]; mov rax, [rax+0x60]; add rsp, 0x30; pop rbx; jmp rax; 
0x0000000008e07c: mov rax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000a78eb: mov rax, [rbx+0x40]; je short 0x00000000000a791e; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x000000000a79b3: mov rax, [rbx+0x40]; test byte ptr [rbx+0x50], 0x1; jne short 0x00000000000a7990; mov rdi, rsi; call rax; 
0x0000000008e55e: mov rax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000001666c1: mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000166695: mov rax, [rbx+0x60]; mov dword ptr [rbx+0x58], 0x0; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x00000000166708: mov rax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x00000000165c55: mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x00000000165c69: mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000133c9e: mov rax, [rbx+0x8]; mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000162ed7: mov rax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000162ef3: mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000175f0c: mov rax, [rbx]; add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x000000001673c3: mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000168a2d: mov rax, [rbx]; test rax, rax; je short 0x0000000000168a40; pop rbx; ret; 
0x0000000018faf6: mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x0000000018b766: mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000018fb16: mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000018b786: mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000018fb36: mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000018b7a6: mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x0000000018f9c6: mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x0000000018b696: mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x00000000165b90: mov rax, [rcx]; bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x00000000165b70: mov rax, [rcx]; bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x0000000018f970: mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x0000000018b640: mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x000000000922e4: mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x000000000923f4: mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cc34: mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x0000000009e080: mov rax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x00000000037ef5: mov rax, [rdi+0x20]; mov rbp, rdi; test rax, rax; je short 0x0000000000037f03; call rax; 
0x000000001bb3d4: mov rax, [rdi+0x20]; test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x000000000a1813: mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x000000000892b8: mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x0000000015d65a: mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d5c1: mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001673c9: mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000015d50c: mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015d640: mov rax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x00000000089188: mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x00000000090b34: mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4e4: mov rax, [rdi+0x68]; ret; 
0x0000000009f194: mov rax, [rdi+0x78]; ret; 
0x00000000062097: mov rax, [rdi+0x88]; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x0000000016b360: mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016b320: mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000015d8a9: mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000167471: mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000015ee99: mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000016ca5c: mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000015fc0a: mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000008f5da: mov rax, [rdi+0x8]; cmp rax, rdx; jae short 0x000000000008f608; movzx eax, byte ptr [rax]; ret; 
0x0000000015d205: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000016c970: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016c980: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016b540: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000016b535: mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000016749c: mov rax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167520: mov rax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000001653e9: mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x0000000016be98: mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016ca30: mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000016b640: mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x000000001692a9: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169099: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169109: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000169179: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000015fc80: mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016b5b2: mov rax, [rdi+0x8]; mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x00000000164a6a: mov rax, [rdi+0x8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000016c5d8: mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000015fbe0: mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000015fcc4: mov rax, [rdi+0x8]; punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x0000000016b690: mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c625: mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x0000000016b780: mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c805: mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x00000000083bf4: mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000a6bad: mov rax, [rdi+rax+0x8]; sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x0000000014a62a: mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x000000000014a640; ret; 
0x000000000a0cf4: mov rax, [rdi]; cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000a0ec4: mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000a0d34: mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x000000001286b0: mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000008f1d5: mov rax, [rdi]; mov [rdx], rax; ret; 
0x00000000097554: mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000097544: mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c94: mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c84: mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c74: mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x00000000090c64: mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000009c0e4: mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009c564: mov rax, [rdi]; mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x000000000009c578; ret; 
0x00000000090b99: mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x000000000a0d54: mov rax, [rdi]; nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce4: mov rax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x000000000a0cd4: mov rax, [rdi]; nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd4: mov rax, [rdi]; nop; mov [rip+0x17f51e], eax; ret; 
0x000000000a0fb4: mov rax, [rdi]; nop; mov dword ptr [rip+0x1783e6], 0x1; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f94: mov rax, [rdi]; nop; mov dword ptr [rip+0x178406], 0x1; mov [rip+0x1783c7], rax; ret; 
0x000000000a0f74: mov rax, [rdi]; nop; mov dword ptr [rip+0x178426], 0x1; mov [rip+0x1783df], rax; ret; 
0x000000000a0f54: mov rax, [rdi]; nop; mov dword ptr [rip+0x178446], 0x1; mov [rip+0x1783f7], rax; ret; 
0x000000000892a5: mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000089175: mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000038880: mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000118d08: mov rax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000118bd0: mov rax, [rip+0x100239]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000117180: mov rax, [rip+0x101c89]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000114298: mov rax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000113ea0: mov rax, [rip+0x104f69]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000105884: mov rax, [rip+0x11359d]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000ec546: mov rax, [rip+0x12c8cb]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec580; mov eax, 0x77; syscall; 
0x000000000ec4a6: mov rax, [rip+0x12c96b]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec4e0; mov eax, 0x75; syscall; 
0x000000000ec1e6: mov rax, [rip+0x12cc2b]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec220; mov eax, 0x6a; syscall; 
0x000000000ec156: mov rax, [rip+0x12ccbb]; cmp byte ptr [rax], 0x0; je short 0x00000000000ec190; mov eax, 0x69; syscall; 
0x000000000e7726: mov rax, [rip+0x1316eb]; cmp byte ptr [rax], 0x0; je short 0x00000000000e7760; mov eax, 0x74; syscall; 
0x000000000e6539: mov rax, [rip+0x1328d0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5788: mov rax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5720: mov rax, [rip+0x1336e9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000e5660: mov rax, [rip+0x133861]; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000dd720: mov rax, [rip+0x13b731]; mov [rax], edx; xor eax, eax; pop rbx; ret; 
0x000000000d8e40: mov rax, [rip+0x13ffc9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000d8e20: mov rax, [rip+0x13ffe9]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; pop rbx; ret; 
0x000000000c53a0: mov rax, [rip+0x153b21]; mov rax, [rax+0x240]; ret; 
0x000000000c5390: mov rax, [rip+0x153b31]; mov rax, [rax+0x238]; ret; 
0x000000000c5380: mov rax, [rip+0x153b41]; mov rax, [rax+0x230]; ret; 
0x000000000c5370: mov rax, [rip+0x153b51]; mov rax, [rax+0x228]; ret; 
0x000000000c5360: mov rax, [rip+0x153b61]; mov rax, [rax+0x220]; ret; 
0x000000000c5350: mov rax, [rip+0x153b71]; mov rax, [rax+0x218]; ret; 
0x000000000c5340: mov rax, [rip+0x153b81]; mov rax, [rax+0x210]; ret; 
0x000000000c5330: mov rax, [rip+0x153b91]; mov rax, [rax+0x208]; ret; 
0x000000000c5320: mov rax, [rip+0x153ba1]; mov rax, [rax+0x200]; ret; 
0x000000000c5310: mov rax, [rip+0x153bb1]; mov rax, [rax+0x1f8]; ret; 
0x000000000c5300: mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000c52e8: mov rax, [rip+0x153bd9]; mov rax, [rax+0x248]; ret; 
0x000000000a7a54: mov rax, [rip+0x1713b5]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000a78d1: mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x000000000a76e8: mov rax, [rip+0x1716f1]; call qword ptr [rax]; 
0x000000000a7620: mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x000000000a4110: mov rax, [rip+0x174cf9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009fda0: mov rax, [rip+0x179069]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009dfb0: mov rax, [rip+0x17ae59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cda0: mov rax, [rip+0x17c069]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009cb60: mov rax, [rip+0x17c2a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c548: mov rax, [rip+0x17c8c1]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009c110: mov rax, [rip+0x17ccf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c070: mov rax, [rip+0x17cd99]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009e5d4: mov rax, [rip+0x1815ed]; mov dword ptr [rdi], 0x0; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x000000000921f0: mov rax, [rip+0x186c19]; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000909f8: mov rax, [rip+0x1884c9]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x000000000903fc: mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x0000000008f4c4: mov rax, [rip+0x18b1b5]; ret; 
0x000000000897d0: mov rax, [rip+0x18f639]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000875b8: mov rax, [rip+0x191851]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000081188: mov rax, [rip+0x197c81]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000005d8d2: mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000046d90: mov rax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000000466a8: mov rax, [rip+0x1d2761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043108: mov rax, [rip+0x1d5d01]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000430c8: mov rax, [rip+0x1d5d41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043088: mov rax, [rip+0x1d5d81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043042: mov rax, [rip+0x1d5dc7]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000042f84: mov rax, [rip+0x1d5e85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000042f68: mov rax, [rip+0x1d5ea1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f20: mov rax, [rip+0x1d5ee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ed0: mov rax, [rip+0x1d5f39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e89: mov rax, [rip+0x1d5f80]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e53: mov rax, [rip+0x1d5fb6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424f0: mov rax, [rip+0x1d6919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424b0: mov rax, [rip+0x1d6959]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042440: mov rax, [rip+0x1d69c9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041ab1: mov rax, [rip+0x1d7358]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004177b: mov rax, [rip+0x1d768e]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004137a: mov rax, [rip+0x1d7a8f]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000407e0: mov rax, [rip+0x1d8629]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000040780: mov rax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a3a4: mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a364: mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000003a384: mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x00000000039bf0: mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x00000000039c34: mov rax, [rip+0x1df335]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388b4: mov rax, [rip+0x1e06b5]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x000000000355d4: mov rax, [rip+0x1e54a5]; ret; 
0x0000000002a530: mov rax, [rip+0x1ee8d9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002a254: mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x0000000002b984: mov rax, [rip+0x1ef0b5]; ret; 
0x0000000002b974: mov rax, [rip+0x1ef0bd]; ret; 
0x000000001bb8e1: mov rax, [rip+0x5d5e0]; call qword ptr [rax+0x370]; 
0x00000000178344: mov rax, [rip+0xa0ac5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178324: mov rax, [rip+0xa0ae5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f4: mov rax, [rip+0xa0c15]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb4: mov rax, [rip+0xa0e55]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f94: mov rax, [rip+0xa0e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f54: mov rax, [rip+0xa0eb5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f34: mov rax, [rip+0xa0ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f14: mov rax, [rip+0xa0ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef4: mov rax, [rip+0xa0f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001760d8: mov rax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000175e90: mov rax, [rip+0xa2f79]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000175ca4: mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000175533: mov rax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x000000001754e8: mov rax, [rip+0xa39d9]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x000000001754b4: mov rax, [rip+0xa3a0d]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000175044: mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x00000000174f81: mov rax, [rip+0xa3f40]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000174eaa: mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000001724b4: mov rax, [rip+0xa6955]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000001720c4: mov rax, [rip+0xa6d45]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000168c20: mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b20: mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168ba0: mov rax, [rip+0xb0421]; pop rbx; ret; 
0x00000000168964: mov rax, [rip+0xb045d]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x00000000168aa8: mov rax, [rip+0xb0499]; pop rbx; ret; 
0x00000000155070: mov rax, [rip+0xc3d99]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x0000000014b1a4: mov rax, [rip+0xcdde5]; mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x0000000014a394: mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x000000001496a9: mov rax, [rip+0xcf760]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000149620: mov rax, [rip+0xcf7e9]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001517d4: mov rax, [rip+0xd0dad]; test rax, rax; jne short 0x00000000001517e8; ret; 
0x00000000136b24: mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x000000001360c0: mov rax, [rip+0xe2d49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012a510: mov rax, [rip+0xee8e1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a478: mov rax, [rip+0xee979]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a3e0: mov rax, [rip+0xeea11]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a340: mov rax, [rip+0xeeab1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a2a0: mov rax, [rip+0xeeb51]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a200: mov rax, [rip+0xeebf1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a160: mov rax, [rip+0xeec91]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a030: mov rax, [rip+0xeedc1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x00000000129f90: mov rax, [rip+0xeee61]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x00000000129ef0: mov rax, [rip+0xeef01]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x00000000129e50: mov rax, [rip+0xeefa1]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000129d04: mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x00000000128668: mov rax, [rip+0xf07a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000128420: mov rax, [rip+0xf09e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001271b4: mov rax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000001267f0: mov rax, [rip+0xf2619]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267b8: mov rax, [rip+0xf2651]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126788: mov rax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126720: mov rax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266c0: mov rax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126660: mov rax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126450: mov rax, [rip+0xf29b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126410: mov rax, [rip+0xf29f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000122480: mov rax, [rip+0xf6989]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000001217e8: mov rax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012161e: mov rax, [rip+0xf787b]; mov rax, [rax]; test rax, rax; je 0x00000000001216d0; call rax; 
0x00000000121464: mov rax, [rip+0xf7a35]; mov rax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x00000000129440: mov rax, [rip+0xf81d1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x00000000129430: mov rax, [rip+0xf81e1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000011faa0: mov rax, [rip+0xf9369]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000011fa6b: mov rax, [rip+0xf939e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000011fa59: mov rax, [rip+0xf93b0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000011f21d: mov rax, [rip+0xf9bec]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011ebe0: mov rax, [rip+0xfa229]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000011bff0: mov rax, [rip+0xfce19]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011bfc8: mov rax, [rip+0xfce41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011be84: mov rax, [rip+0xfcf85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000011b374: mov rax, [rip+0xfdb4d]; mov rax, [rax+0x18]; test rax, rax; je short 0x000000000011b385; ret; 
0x0000000011b176: mov rax, [rip+0xfdc9b]; cmp byte ptr [rax], 0x0; je short 0x000000000011b1b0; mov eax, 0x72; syscall; 
0x0000000011b0e6: mov rax, [rip+0xfdd2b]; cmp byte ptr [rax], 0x0; je short 0x000000000011b120; mov eax, 0x71; syscall; 
0x0000000011a9f0: mov rax, [rip+0xfe419]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000119e23: mov rax, [rip+0xfefe6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119dca: mov rax, [rip+0xff03f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001194c8: mov rax, [rip+0xff941]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000119492: mov rax, [rip+0xff977]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009e6a2: mov rax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x0000000009e780: mov rax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x00000000119538: mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x00000000119896: mov rax, [rsi+0x50]; mov [rdi+0x38], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000003a2f4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a2d4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a194: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a2b4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a234: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a1f4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a274: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a1d4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a294: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a254: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a214: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a1b4: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012ade0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012ad60: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012a960: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012ace0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012aae0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a9e0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012abe0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a8e0: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012ac60: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012ab60: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a860: mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x0000000003a314: mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a324: mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x000000000388a0: mov rax, [rsi+rax*8+0x80]; ret; 
0x000000000430b9: mov rax, [rsi]; and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000430f9: mov rax, [rsi]; or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000033975: mov rax, [rsp+0x10]; call rax; 
0x00000000174ec1: mov rax, [rsp+0x10]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000016302f: mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000174c79: mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000120032: mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000120033: mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000162f0d: mov rax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000002d841: mov rax, [rsp+0x18]; call rax; 
0x0000000011e64a: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e723: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210af: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x0000000012116f: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121576: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x00000000121793: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa1: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x0000000013258a: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x0000000016989e: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698e3: mov rax, [rsp+0x18]; sub rax, fs:[0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x00000000149c69: mov rax, [rsp+0x208]; sub rax, fs:[0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000002d281: mov rax, [rsp+0x28]; call rax; 
0x00000000089fd8: mov rax, [rsp+0x38]; sub rax, fs:[0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x0000000016b3b8: mov rax, [rsp+0x38]; sub rax, fs:[0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000012134a: mov rax, [rsp+0x408]; sub rax, fs:[0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x00000000164d70: mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000166b4a: mov rax, [rsp+0x48]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000164eaf: mov rax, [rsp+0x48]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001690ad: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x0000000016911d: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x0000000016918d: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691ee: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169252: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692bd: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169340: mov rax, [rsp+0x68]; sub rax, fs:[0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001722b1: mov rax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000046221: mov rax, [rsp+0x8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003a89c: mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000046cd4: mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001193da: mov rax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x000000000a0440: mov rax, [rsp+0x8]; add rsp, 0x38; ret; 
0x00000000029d89: mov rax, [rsp+0x8]; call rax; 
0x0000000009491f: mov rax, [rsp+0x8]; mov esi, 0x18; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x0000000008563b: mov rax, [rsp+0x8]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000015f2b8: mov rax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000094b31: mov rax, [rsp+0x8]; mov rdi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x0000000015d2d9: mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000420e7: mov rax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x000000000467ff: mov rax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x0000000004684c: mov rax, [rsp+0x8]; sub rax, fs:[0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x0000000015e744: mov rax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000041b83: mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000127882: mov rax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x00000000112953: mov rax, [rsp]; add rsp, 0x28; ret; 
0x00000000127948: mov rax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x00000000129d66: mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc7: mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000004448b: mov rax, [rsp]; call rax; 
0x0000000004448a: mov rax, [rsp]; call rax; 
0x00000000083b99: mov rax, [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000044610: mov rax, [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000013f21c: mov rax, [rsp]; mov rdi, r12; call rax; 
0x000000001453ff: mov rax, [rsp]; mov rdi, r15; call rax; 
0x0000000008df13: mov rax, [rsp]; mov rdi, r15; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000013e5e7: mov rax, [rsp]; mov rdi, rbx; call rax; 
0x00000000044400: mov rax, [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000445ac: mov rax, [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000001758ed: mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000009655b: mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000090ae9: mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000009b594: mov rax, fs:[0x10]; ret; 
0x00000000050c64: mov rax, fs:[0x28]; mov [rsp+0x8], rax; xor eax, eax; mov eax, 0x3e; syscall; 
0x00000000114c8a: mov rax, fs:[0x28]; mov [rsp+0x98], rax; xor eax, eax; mov eax, 0x1b7; syscall; 
0x00000000090b5b: mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x00000000090b0f: mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x00000000039c3e: mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x000000000388bb: mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a14e: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0de: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a11e: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0ae: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a07e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a05e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a0fe: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a03e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fbe: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f7e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x00000000039ffe: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f5e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a01e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fde: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039f9e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f3e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012a517: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a47f: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x00000000129f97: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012a3e7: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a167: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a037: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012a2a7: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x00000000129ef7: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012a347: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a207: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x00000000129e57: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000133c02: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x0000000014a39b: mov rax, fs:[rax]; ret; 
0x00000000168a2c: mov rax, fs:[rbx]; test rax, rax; je short 0x0000000000168a40; pop rbx; ret; 
0x00000000149b63: mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x000000000a9f2e: mov rax, r10; pop rbx; pop rbp; pop r12; ret; 
0x00000000059fb9: mov rax, r10; pop rbx; pop rbp; ret; 
0x00000000040772: mov rax, r10; ret; 
0x000000000abcdc: mov rax, r11; ret; 
0x0000000009d390: mov rax, r12; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000da975: mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x0000000003aa18: mov rax, r12; pop r12; ret; 
0x00000000120b21: mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000011fd28: mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000007f9e4: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000061177: mov rax, r12; pop rbp; pop r12; ret; 
0x0000000006124e: mov rax, r12; pop rbx; pop r12; ret; 
0x0000000003a97a: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000011f494: mov rax, r12; pop rdx; pop r12; ret; 
0x000000000a8145: mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000151c00: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000c5950: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000007f515: mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x000000000e7175: mov rax, r15; call rax; 
0x0000000011dae3: mov rax, r8; add rsp, 0x8; ret; 
0x00000000142fb9: mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000142140: mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x00000000082166: mov rax, r8; pop rbp; pop r12; ret; 
0x00000000115d2e: mov rax, r8; pop rbp; ret; 
0x000000000457d7: mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000121f4d: mov rax, r8; pop rbx; ret; 
0x000000000515f0: mov rax, r8; ret; 
0x0000000019dcc4: mov rax, r8; vzeroupper; ret; 
0x000000001ac9d6: mov rax, r8; xtest; je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001add49: mov rax, r8; xtest; je short 0x00000000001add55; vzeroall; ret; 
0x00000000077a3a: mov rax, r9; pop r14; ret; 
0x000000000b110e: mov rax, r9; ret; 
0x000000000a8b39: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000012e207: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000089d8e: mov rax, rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001134df: mov rax, rbx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000ac069: mov rax, rbx; pop rbx; cmovne rax, rdx; ret; 
0x00000000089cd2: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000d8e00: mov rax, rbx; pop rbx; ret; 
0x000000000dd716: mov rax, rbx; test edx, edx; jne short 0x00000000000dd720; pop rbx; ret; 
0x000000000612c6: mov rax, rbx; test r8d, r8d; jne short 0x00000000000612d0; pop rbx; ret; 
0x000000000a808e: mov rax, rdi; cmp [r8+0x8], rsi; jb short 0x00000000000a80a0; mov [r8], rsi; ret; 
0x00000000045e24: mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000011d313: mov rax, rdi; mov byte ptr [rip+0x104033], 0x23; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000011d2a3: mov rax, rdi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000045de4: mov rax, rdi; neg rax; cmovs rax, rdi; ret; 
0x0000000005a1c1: mov rax, rdi; ret; 
0x0000000013669d: mov rax, rdi; sar rax, 0x6; ret; 
0x0000000012567a: mov rax, rdi; shl rax, 0x20; and rax, rcx; or rax, rdx; ret; 
0x0000000018d2be: mov rax, rdi; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x0000000018d4b4: mov rax, rdi; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x0000000018d4d6: mov rax, rdi; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x0000000018d4fc: mov rax, rdi; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x0000000018d514: mov rax, rdi; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x0000000018d53a: mov rax, rdi; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x0000000018d55c: mov rax, rdi; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x0000000018d57a: mov rax, rdi; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x0000000018d256: mov rax, rdi; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x0000000018d59c: mov rax, rdi; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x0000000018d5bc: mov rax, rdi; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x0000000018d5dc: mov rax, rdi; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x0000000018d5fc: mov rax, rdi; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x0000000018d61e: mov rax, rdi; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x0000000018d63e: mov rax, rdi; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x0000000018d65e: mov rax, rdi; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x0000000019fb10: mov rax, rdi; vzeroupper; ret; 
0x00000000041404: mov rax, rdx; and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000056770: mov rax, rdx; bts rax, 0x30; mov [rsi+0x8], rax; mov eax, 0x2; ret; 
0x00000000101285: mov rax, rdx; movsxd rdx, [r13+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x00000000103877: mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000055584: mov rax, rdx; pop rbx; ret; 
0x00000000054fc4: mov rax, rdx; ret; 
0x000000000546fd: mov rax, rdx; ret; 
0x000000001a10d0: mov rax, rdx; vzeroupper; ret; 
0x0000000005a108: mov rax, rsi; ret; 
0x0000000004231a: mov rbp, r9; nop; jmp rdx; 
0x0000000015fe7b: mov rbp, rax; bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbx+0x10]; 
0x00000000037ef9: mov rbp, rdi; test rax, rax; je short 0x0000000000037f03; call rax; 
0x0000000016090a: mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x0000000016090b: mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x0000000007f806: mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x00000000133d96: mov rbx, [rbp-0x8]; leave; ret; 
0x00000000029eca: mov rbx, [rip+0x1eeff7]; mov rsi, [r12]; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x0000000007b9c7: mov rbx, [rsp+0x58]; jmp rsi; 
0x0000000007632d: mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000004392c: mov rbx, [rsp]; mov rsi, r15; mov rdi, r12; mov rdx, r14; call rbp; 
0x000000000e6c28: mov rbx, r13; mov rdi, rbp; call r12; 
0x000000001604a5: mov rbx, rax; bswap edx; mov [rcx], edx; mov edx, eax; call qword ptr [rbp+0x10]; 
0x00000000075a9b: mov rbx, rcx; jmp rsi; 
0x00000000075e76: mov rbx, rcx; mov dword ptr [rsp+0x28], 0x1; jmp rsi; 
0x0000000007ba0d: mov rbx, rcx; mov dword ptr [rsp+0x38], 0x20; jmp rsi; 
0x0000000007c670: mov rbx, rcx; mov ebp, 0x1; xor r8d, r8d; jmp rsi; 
0x00000000076c28: mov rbx, rcx; mov r10d, 0x1; jmp rsi; 
0x00000000076c60: mov rbx, rcx; mov r15d, 0x1; jmp rsi; 
0x0000000007c6f0: mov rbx, rcx; mov r8d, 0x1; jmp rsi; 
0x0000000007c6e0: mov rbx, rcx; mov r9d, 0x1; jmp rsi; 
0x0000000007621a: mov rbx, rcx; xor r15d, r15d; mov r11d, 0x1; jmp rsi; 
0x0000000009a01c: mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000001256a0: mov rbx, rdi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x00000000083c0c: mov rbx, rdi; test byte ptr [rdi], 0x2; jne short 0x0000000000083c88; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x00000000075a43: mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000076be0: mov rbx, rdx; mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x00000000075620: mov rbx, rdx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x00000000075477: mov rbx, rdx; xor edx, edx; jmp rsi; 
0x0000000011f9c4: mov rbx, rsi; je short 0x000000000011f9d0; pop rbx; ret; 
0x000000000927a1: mov rcx, 0xfffffffe7fffffff; mov rdx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x000000001a7212: mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000013eb23: mov rcx, [0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x0000000010aace: mov rcx, [r12]; call rax; 
0x000000001290e5: mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf0346], 0x0; ret; 
0x00000000129065: mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xf03c6], 0x0; ret; 
0x00000000029e5a: mov rcx, [rcx+0x8]; mov rsi, r12; mov edi, ebp; add rcx, [r14]; call rcx; 
0x00000000054316: mov rcx, [rcx+rdx*8]; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000001a3f2c: mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000001a3f2d: mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000001286a4: mov rcx, [rdi+0x8]; xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x00000000001286b0; ret; 
0x0000000009c567: mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x000000000009c578; ret; 
0x000000001162c4: mov rcx, [rip+0x102b45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116294: mov rcx, [rip+0x102b75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116264: mov rcx, [rip+0x102ba5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116237: mov rcx, [rip+0x102bd2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116204: mov rcx, [rip+0x102c05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161d4: mov rcx, [rip+0x102c35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161a4: mov rcx, [rip+0x102c65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116177: mov rcx, [rip+0x102c92]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116144: mov rcx, [rip+0x102cc5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115cb7: mov rcx, [rip+0x103152]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c84: mov rcx, [rip+0x103185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c54: mov rcx, [rip+0x1031b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c24: mov rcx, [rip+0x1031e5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115364: mov rcx, [rip+0x103aa5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115334: mov rcx, [rip+0x103ad5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115274: mov rcx, [rip+0x103b95]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115204: mov rcx, [rip+0x103c05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151d4: mov rcx, [rip+0x103c35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151a4: mov rcx, [rip+0x103c65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114fb4: mov rcx, [rip+0x103e55]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114644: mov rcx, [rip+0x1047c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114614: mov rcx, [rip+0x1047f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114444: mov rcx, [rip+0x1049c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114414: mov rcx, [rip+0x1049f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108d14: mov rcx, [rip+0x1100f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108ce4: mov rcx, [rip+0x110125]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108cb4: mov rcx, [rip+0x110155]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c84: mov rcx, [rip+0x110185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c54: mov rcx, [rip+0x1101b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c24: mov rcx, [rip+0x1101e5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108bf4: mov rcx, [rip+0x110215]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec474: mov rcx, [rip+0x12c995]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec444: mov rcx, [rip+0x12c9c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec414: mov rcx, [rip+0x12c9f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec3e4: mov rcx, [rip+0x12ca25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec384: mov rcx, [rip+0x12ca85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec354: mov rcx, [rip+0x12cab5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec124: mov rcx, [rip+0x12cce5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eb104: mov rcx, [rip+0x12dd05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eac58: mov rcx, [rip+0x12e1b1]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea5c4: mov rcx, [rip+0x12e845]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea384: mov rcx, [rip+0x12ea85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000054068: mov rcx, [rip+0x1c4da1]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053b7f: mov rcx, [rip+0x1c528a]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053a1c: mov rcx, [rip+0x1c53ed]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042d54: mov rcx, [rip+0x1d60b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042764: mov rcx, [rip+0x1d66a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000029ee9: mov rcx, [rip+0x1eefd8]; mov rsi, [r12]; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x0000000017d84e: mov rcx, [rip+0x9bbc3]; lea r11, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7f4: mov rcx, [rip+0x9bc1d]; lea r11, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae6e: mov rcx, [rip+0x9e5a3]; lea r11, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae0d: mov rcx, [rip+0x9e604]; lea r11, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x00000000127d27: mov rcx, [rip+0xf10e2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cf4: mov rcx, [rip+0xf1115]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cc4: mov rcx, [rip+0xf1145]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001277e4: mov rcx, [rip+0xf1625]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127774: mov rcx, [rip+0xf1695]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127744: mov rcx, [rip+0xf16c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127674: mov rcx, [rip+0xf1795]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127194: mov rcx, [rip+0xf1c75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127154: mov rcx, [rip+0xf1cb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127124: mov rcx, [rip+0xf1ce5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270f4: mov rcx, [rip+0xf1d15]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270c4: mov rcx, [rip+0xf1d45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127097: mov rcx, [rip+0xf1d72]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127064: mov rcx, [rip+0xf1da5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127034: mov rcx, [rip+0xf1dd5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127004: mov rcx, [rip+0xf1e05]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fd4: mov rcx, [rip+0xf1e35]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fa4: mov rcx, [rip+0xf1e65]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f77: mov rcx, [rip+0xf1e92]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f47: mov rcx, [rip+0xf1ec2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f14: mov rcx, [rip+0xf1ef5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ee4: mov rcx, [rip+0xf1f25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126eb7: mov rcx, [rip+0xf1f52]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e84: mov rcx, [rip+0xf1f85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e54: mov rcx, [rip+0xf1fb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e24: mov rcx, [rip+0xf1fe5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126df4: mov rcx, [rip+0xf2015]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126dc4: mov rcx, [rip+0xf2045]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d97: mov rcx, [rip+0xf2072]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d64: mov rcx, [rip+0xf20a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d37: mov rcx, [rip+0xf20d2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d04: mov rcx, [rip+0xf2105]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126cd4: mov rcx, [rip+0xf2135]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ca4: mov rcx, [rip+0xf2165]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c74: mov rcx, [rip+0xf2195]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c44: mov rcx, [rip+0xf21c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c14: mov rcx, [rip+0xf21f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126bd4: mov rcx, [rip+0xf2235]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ba4: mov rcx, [rip+0xf2265]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126a0a: mov rcx, [rip+0xf23ff]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125f64: mov rcx, [rip+0xf2ea5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125e94: mov rcx, [rip+0xf2f75]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c84: mov rcx, [rip+0xf3185]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c54: mov rcx, [rip+0xf31b5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125bbe: mov rcx, [rip+0xf324b]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b44: mov rcx, [rip+0xf32c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b14: mov rcx, [rip+0xf32f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001223a7: mov rcx, [rip+0xf6a62]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122374: mov rcx, [rip+0xf6a95]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122347: mov rcx, [rip+0xf6ac2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122314: mov rcx, [rip+0xf6af5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222e4: mov rcx, [rip+0xf6b25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222b7: mov rcx, [rip+0xf6b52]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122284: mov rcx, [rip+0xf6b85]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122257: mov rcx, [rip+0xf6bb2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122227: mov rcx, [rip+0xf6be2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221f4: mov rcx, [rip+0xf6c15]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221c4: mov rcx, [rip+0xf6c45]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122197: mov rcx, [rip+0xf6c72]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ee54: mov rcx, [rip+0xf9fb5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ee24: mov rcx, [rip+0xf9fe5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edf4: mov rcx, [rip+0xfa015]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edc4: mov rcx, [rip+0xfa045]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed97: mov rcx, [rip+0xfa072]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed64: mov rcx, [rip+0xfa0a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed34: mov rcx, [rip+0xfa0d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec64: mov rcx, [rip+0xfa1a5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec34: mov rcx, [rip+0xfa1d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ea46: mov rcx, [rip+0xfa3c3]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bf14: mov rcx, [rip+0xfcef5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bee4: mov rcx, [rip+0xfcf25]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011beb4: mov rcx, [rip+0xfcf55]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bb84: mov rcx, [rip+0xfd285]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bac4: mov rcx, [rip+0xfd345]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ba04: mov rcx, [rip+0xfd405]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b9d4: mov rcx, [rip+0xfd435]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b674: mov rcx, [rip+0xfd795]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b534: mov rcx, [rip+0xfd8d5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011a944: mov rcx, [rip+0xfe4c5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119814: mov rcx, [rip+0xff5f5]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119337: mov rcx, [rip+0xffad2]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000c14f4: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2364: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000bfe44: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe24: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000c14b4: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c2324: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000bfde4: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000c14d4: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c2344: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000bfe04: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000c4a60: mov rcx, [rsi+rdx-0x8]; mov rsi, [rsi]; mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x00000000182104: mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182103: mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182074: mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182073: mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000181fe4: mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000017c9f0: mov rcx, [rsi-0x9]; mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbd0: mov rcx, [rsi-0xa]; mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cdb0: mov rcx, [rsi-0xb]; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf90: mov rcx, [rsi-0xc]; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017d180: mov rcx, [rsi-0xd]; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d380: mov rcx, [rsi-0xe]; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d580: mov rcx, [rsi-0xf]; mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182a84: mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000182a14: mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000001829a4: mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x00000000182934: mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000001828c4: mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x00000000182854: mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000001827e4: mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000c1340: mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000bfcf0: mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000c09e0: mov rcx, [rsi]; mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000bfd00: mov rcx, [rsi]; mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000bfd10: mov rcx, [rsi]; mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000bfd20: mov rcx, [rsi]; mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x000000001b13e0: mov rcx, [rsi]; mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x000000000bfd30: mov rcx, [rsi]; mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000bfd40: mov rcx, [rsi]; mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000bfd50: mov rcx, [rsi]; mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001b3b10: mov rcx, [rsi]; mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000000b1548: mov rcx, [rsp+0x10]; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x00000000174c1c: mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x00000000168335: mov rcx, [rsp+0x10]; mov rdx, rbx; mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x000000001666f6: mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x0000000013a392: mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e9a: mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000003518a: mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x00000000163148: mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000162f2e: mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x000000001385b8: mov rcx, [rsp+0x28]; mov rdx, [rsp+0x18]; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x0000000002ee4e: mov rcx, [rsp+0x28]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x00000000033967: mov rcx, [rsp+0x28]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321be: mov rcx, [rsp+0x28]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x0000000009077f: mov rcx, [rsp+0x28]; sub rcx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x0000000002f4c4: mov rcx, [rsp+0x30]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x00000000153a1f: mov rcx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000001377aa: mov rcx, [rsp+0x58]; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x00000000129d61: mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dc2: mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000015d522: mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000e7088: mov rcx, [rsp+0x8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000160a78: mov rcx, [rsp+0x8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000145a25: mov rcx, [rsp]; mov rdi, r14; call rcx; 
0x0000000015eabd: mov rcx, [rsp]; mov rsi, r15; mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000015e9d2: mov rcx, [rsp]; xor eax, eax; mov rdi, rbx; call rcx; 
0x0000000013eb22: mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x000000000906b7: mov rcx, r10; call rax; 
0x000000000d3318: mov rcx, r12; call rbx; 
0x000000000c692f: mov rcx, r12; mov rdx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000138e0c: mov rcx, r12; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000137c99: mov rcx, r12; mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x000000000e8136: mov rcx, r12; mov rdx, r13; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000e8536: mov rcx, r12; mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000015382a: mov rcx, r13; call r10; 
0x0000000013ef18: mov rcx, r13; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x0000000005d8d9: mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000153529: mov rcx, r14; mov rdi, r13; call r12; 
0x00000000086f76: mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000153c44: mov rcx, r15; call r12; 
0x00000000155112: mov rcx, r15; call rbp; 
0x000000000b1058: mov rcx, rax; xor eax, eax; mov [rdx], rcx; ret; 
0x000000000e9dfc: mov rcx, rbp; mov rsi, r12; mov rdx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e9a8c: mov rcx, rbp; mov rsi, r12; mov rdx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x0000000008a0f6: mov rcx, rbx; sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000015d463: mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x000000000c5134: mov rcx, rdx; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000000c4c15: mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000163827: mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x0000000016ad16: mov rdi, 0xf98304e0c137e883; sbb al, [rcx+0xf]; ret; 
0x00000000120c6b: mov rdi, [r12+0x10]; test rdi, rdi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x0000000011fe45: mov rdi, [r12]; call rbx; 
0x00000000044484: mov rdi, [r12]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x0000000015d652: mov rdi, [r12]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d505: mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000015d5b8: mov rdi, [r12]; test r15d, r15d; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001bab1b: mov rdi, [r13+0x10]; add rdi, rbp; call r12; 
0x0000000011fec9: mov rdi, [r13+0x10]; test rdi, rdi; jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011fefe: mov rdi, [r13+0x10]; test rdi, rdi; jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011fe96: mov rdi, [r13+0x10]; test rdi, rdi; jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x00000000120cde: mov rdi, [r13+0x10]; test rdi, rdi; jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x0000000011ff29: mov rdi, [r13+0x10]; test rdi, rdi; jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120d39: mov rdi, [r13+0x10]; test rdi, rdi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d3a: mov rdi, [r13+0x10]; test rdi, rdi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d0e: mov rdi, [r13+0x10]; test rdi, rdi; jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x0000000011fea3: mov rdi, [r13]; call rbx; 
0x000000000c5d57: mov rdi, [r13]; movzx esi, bl; call rbp; 
0x000000000c5dff: mov rdi, [r13]; push 0x0; lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x00000000160278: mov rdi, [r14]; add r13, rbx; sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x0000000016000b: mov rdi, [r15]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [r15+0x40]; 
0x0000000015ff27: mov rdi, [r15]; add r13, rcx; sub edx, ecx; mov rsi, r13; call qword ptr [r15+0x40]; 
0x00000000094b36: mov rdi, [rax+0x648]; call qword ptr [rax+0x640]; 
0x0000000009d398: mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009192e: mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000001630f4: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000163034: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001673c6: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000162f15: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001666da: mov rdi, [rax]; mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000902a0: mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090070: mov rdi, [rbp+0x10]; call qword ptr [rbx+0x360]; 
0x000000001168a0: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116bf8: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b90: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000009d434: mov rdi, [rbp+0x8]; call qword ptr [rbp]; 
0x00000000045d99: mov rdi, [rbp+0x8]; call rax; 
0x00000000079613: mov rdi, [rbp-0x8b8]; mov rdx, r10; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000782e8: mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2aa: mov rdi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000078d1f: mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000079452: mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x00000000079740: mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x00000000160730: mov rdi, [rbp]; add rbx, rax; sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x0000000011fe12: mov rdi, [rbp]; call rbx; 
0x00000000167f51: mov rdi, [rbp]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015da46: mov rdi, [rbp]; test rdi, rdi; je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001163df: mov rdi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000a7990: mov rdi, [rbx+0x48]; call rax; 
0x000000000a78f1: mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000013e98c: mov rdi, [rbx+0x48]; test rdi, rdi; jne short 0x000000000013e980; pop rbx; ret; 
0x000000000949a8: mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000001134f0: mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000092df4: mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x00000000091d29: mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000167464: mov rdi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000001673d0: mov rdi, [rbx]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015d8a1: mov rdi, [rbx]; test rdi, rdi; je short 0x000000000015d8b7; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000909ff: mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x00000000163ac4: mov rdi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x0000000000163ad0; ret; 
0x00000000169c24: mov rdi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x0000000000169c30; ret; 
0x000000000a774c: mov rdi, [rdi+0x48]; mov rsi, r12; call rax; 
0x0000000009a01f: mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000175015: mov rdi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fc4: mov rdi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x0000000007f809: mov rdi, [rdi+0xe0]; call rax; 
0x0000000007f7cd: mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f856: mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x00000000174f88: mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000132ab3: mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x0000000011d7f4: mov rdi, [rip+0x103b4d]; test rdi, rdi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x0000000015557d: mov rdi, [rip+0xd227c]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x0000000019a28b: mov rdi, [rsi+rdx-0x8]; sub rcx, rdi; or rax, rcx; cmovne eax, edx; ret; 
0x000000000e9a97: mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000138e19: mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000115409: mov rdi, [rsp+0x10]; mov eax, 0x4f; syscall; 
0x00000000091185: mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000043817: mov rdi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000001750f7: mov rdi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x00000000136e65: mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x00000000174c7e: mov rdi, [rsp+0x18]; call rax; 
0x00000000174c21: mov rdi, [rsp+0x18]; call rcx; 
0x0000000017546b: mov rdi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x0000000013eec8: mov rdi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000001385c5: mov rdi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x000000001751ef: mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000117059: mov rdi, [rsp+0x28]; lea rcx, [rsp+0x38]; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000153a31: mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000035194: mov rdi, [rsp+0x38]; call r15; 
0x000000000352f0: mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x000000000301c7: mov rdi, [rsp+0x48]; call r14; 
0x00000000033971: mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c8: mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b6: mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000002f4ce: mov rdi, [rsp+0x50]; call r13; 
0x0000000002ee57: mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002d27b: mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d83c: mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000008e0b2: mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000139ea4: mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x000000000298b3: mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000046cb3: mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecc3: mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d73: mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000427f6: mov rdi, [rsp+0x8]; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000015e40c: mov rdi, [rsp+0x8]; mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000118e6f: mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000e853c: mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000008d8e5: mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001152c5: mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000001754be: mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000120c6a: mov rdi, gs:[r12+0x10]; test rdi, rdi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x0000000007b5b7: mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000015e6f9: mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000015f656: mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000007bdb1: mov rdi, r12; call qword ptr [rax+0x38]; 
0x00000000162eff: mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000007ab02: mov rdi, r12; call qword ptr [rbp+0x38]; 
0x0000000007afe9: mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000015f841: mov rdi, r12; call qword ptr [rbx]; 
0x00000000168340: mov rdi, r12; call qword ptr [rsp+0x30]; 
0x0000000016b2a6: mov rdi, r12; call r13; 
0x0000000002b30c: mov rdi, r12; call rax; 
0x0000000013ee84: mov rdi, r12; call rbp; 
0x0000000004380a: mov rdi, r12; call rbx; 
0x00000000162f33: mov rdi, r12; call rcx; 
0x0000000005bff4: mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x00000000043933: mov rdi, r12; mov rdx, r14; call rbp; 
0x0000000005d8cc: mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000001755ff: mov rdi, r12; xor r13d, r13d; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000175799: mov rdi, r12; xor r9d, r9d; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000093b22: mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000015f833: mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f871: mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000016a20d: mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000015f2c0: mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000137ca4: mov rdi, r13; call qword ptr [rsp+0x50]; 
0x000000001377b2: mov rdi, r13; call qword ptr [rsp+0x70]; 
0x0000000009edc8: mov rdi, r13; call r12; 
0x00000000045490: mov rdi, r13; call rax; 
0x00000000043846: mov rdi, r13; call rbx; 
0x00000000086d0b: mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000164d60: mov rdi, r13; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000093f7c: mov rdi, r13; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001759cf: mov rdi, r13; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x00000000175ad5: mov rdi, r13; xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000009a53b: mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000155106: mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000009032b: mov rdi, r14; call qword ptr [r12+0x360]; 
0x00000000073795: mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000083a09: mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000073c4f: mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000072dc4: mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000120ea0: mov rdi, r14; call r13; 
0x000000000a791e: mov rdi, r14; call rax; 
0x00000000145a29: mov rdi, r14; call rcx; 
0x00000000073ef0: mov rdi, r14; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x00000000093e73: mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000001204db: mov rdi, r14; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000011388c: mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000001666bb: mov rdi, r15; add dword ptr [rax], 0x1; mov rax, [rbx+0x60]; call qword ptr [rax+0x8]; 
0x00000000085c60: mov rdi, r15; call qword ptr [r13+0x80]; 
0x000000000807b8: mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000085982: mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008589c: mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000008deae: mov rdi, r15; call qword ptr [rax+0x18]; 
0x000000000841c9: mov rdi, r15; call qword ptr [rax+0x20]; 
0x000000001666a6: mov rdi, r15; call qword ptr [rax+0x28]; 
0x0000000008ed1c: mov rdi, r15; call qword ptr [rax+0x58]; 
0x0000000008081d: mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000085e4e: mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000085f3d: mov rdi, r15; call qword ptr [rbx+0x80]; 
0x00000000120e0b: mov rdi, r15; call r14; 
0x000000000859db: mov rdi, r15; call rax; 
0x00000000086f7c: mov rdi, r15; call rbx; 
0x000000001666fb: mov rdi, r15; call rcx; 
0x0000000015ea7c: mov rdi, r15; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x0000000015364a: mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x00000000094419: mov rdi, r15; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091bf7: mov rdi, r15; mov eax, r9d; syscall; 
0x0000000013eb1f: mov rdi, r15; mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x0000000013eb1e: mov rdi, r15; mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x000000000e7092: mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x0000000008df17: mov rdi, r15; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000016b15c: mov rdi, r15; xor eax, eax; add r13, rbx; call rbp; 
0x00000000093a21: mov rdi, r15; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000085646: mov rdi, r8; call qword ptr [rax+0x18]; 
0x00000000167f4b: mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000045a51: mov rdi, r8; call rax; 
0x000000001269fb: mov rdi, r8; call rdx; 
0x00000000090b9c: mov rdi, r8; jmp rax; 
0x000000000995ef: mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009994c: mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000929f2: mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x0000000009321d: mov rdi, r8; mov eax, r9d; syscall; 
0x0000000009b031: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000017542c: mov rdi, r9; call qword ptr [rbx+0x358]; 
0x00000000092f6c: mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000931a2: mov rdi, r9; or eax, 0x2; mov edx, eax; mov eax, ebp; syscall; 
0x00000000090108: mov rdi, rax; call qword ptr [rbx+0x360]; 
0x0000000005a2c2: mov rdi, rax; cmp rdx, rcx; jae short 0x000000000005a2ac; mov rax, r8; ret; 
0x00000000125bb4: mov rdi, rax; mov eax, 0x3c; syscall; 
0x0000000015ef89: mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000000751c5: mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000088351: mov rdi, rbp; call qword ptr [r13+0x10]; 
0x00000000075d22: mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000008ba31: mov rdi, rbp; call qword ptr [r13+0x90]; 
0x00000000076590: mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000008ac5c: mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000008a7bb: mov rdi, rbp; call qword ptr [r15+0x90]; 
0x000000001685d3: mov rdi, rbp; call qword ptr [rax+0x10]; 
0x0000000008b74f: mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000015d2de: mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e2eb: mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000015eefa: mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000072856: mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000016c5ef: mov rdi, rbp; call qword ptr [rax+0x40]; 
0x000000001644e7: mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000008b84a: mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000008ab84: mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000015d4f7: mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008aa16: mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000015fc99: mov rdi, rbp; call qword ptr [rax]; 
0x0000000007ed5b: mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x0000000008da26: mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x00000000076044: mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000007f09c: mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008c0d1: mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000007ebea: mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000013e594: mov rdi, rbp; call qword ptr [rsp+0x10]; 
0x000000000e6c2b: mov rdi, rbp; call r12; 
0x0000000008abd4: mov rdi, rbp; call rax; 
0x0000000009ff66: mov rdi, rbp; call rbx; 
0x0000000015d527: mov rdi, rbp; call rcx; 
0x0000000015d538: mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000167cd0: mov rdi, rbp; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015dedb: mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x000000000c6564: mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x0000000016446a: mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015e1d8: mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000015d5d2: mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d553: mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000001693f6: mov rdi, rbp; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000113d04: mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000098391: mov rdi, rbp; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009904d: mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000097be4: mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000096d65: mov rdi, rbp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x00000000096ea4: mov rdi, rbp; mov eax, r15d; syscall; 
0x00000000099ef0: mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000011fd06: mov rdi, rbp; mov edx, r13d; mov esi, 0x1; call r12; 
0x000000000970f5: mov rdi, rbp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000015e26c: mov rdi, rbp; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000143588: mov rdi, rbp; mov qword ptr [rsp], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000015e29a: mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000004460d: mov rdi, rbp; mov rax, [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000120b1e: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000011fd96: mov rdi, rbp; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000c66af: mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000086089: mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x00000000083973: mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x0000000002a136: mov rdi, rbp; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000083e7a: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000015ec0c: mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000143663: mov rdi, rbp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000008b27f: mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x00000000120afd: mov rdi, rbp; xor edx, edx; mov esi, 0x1; call r12; 
0x0000000011fcf4: mov rdi, rbp; xor esi, esi; call r12; 
0x000000000c6862: mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x0000000009a562: mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f12a: mov rdi, rbx; call qword ptr [r12+0x18]; 
0x0000000008c96e: mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000008b5ad: mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000008bf75: mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000007fb16: mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000814b3: mov rdi, rbx; call qword ptr [r13+0x48]; 
0x000000000815cf: mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000087799: mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007774b: mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000081238: mov rdi, rbx; call qword ptr [r14+0x48]; 
0x0000000008ca5a: mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000008ca1f: mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000080050: mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000008e20d: mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008e158: mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000815f9: mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000008d7df: mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x000000000838f0: mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084465: mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007f223: mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x0000000008180d: mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008b40f: mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000867cb: mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000001609a6: mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x0000000013b5c0: mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x0000000002b78a: mov rdi, rbx; call r12; 
0x0000000002b8b6: mov rdi, rbx; call r14; 
0x0000000002adb9: mov rdi, rbx; call r15; 
0x0000000007e182: mov rdi, rbx; call r8; 
0x0000000007dae1: mov rdi, rbx; call rax; 
0x0000000002b9c9: mov rdi, rbx; call rbp; 
0x0000000015e9d8: mov rdi, rbx; call rcx; 
0x00000000153827: mov rdi, rbx; mov rcx, r13; call r10; 
0x00000000153c41: mov rdi, rbx; mov rcx, r15; call r12; 
0x000000000852d4: mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008ccac: mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x0000000015eac4: mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000009b40c: mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000001256a3: mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x0000000005a345: mov rdi, rdx; cmp rax, 0x9; ja short 0x000000000005a320; mov rax, r8; ret; 
0x00000000199e0e: mov rdi, rdx; inc ecx; jne 0x0000000000199d40; vzeroupper; ret; 
0x000000001a1462: mov rdi, rdx; inc ecx; jne 0x00000000001a1380; vzeroupper; ret; 
0x000000001b567a: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b42aa: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000019d8ce: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000a79bd: mov rdi, rsi; call rax; 
0x0000000016b3ab: mov rdi, rsp; mov dword ptr [rsp], 0x2; call r8; 
0x00000000169608: mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000000416c0: mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x00000000039b17: mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000ed0af: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000ecf7f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000001432f7: mov rdx, 0xffffffffffffffff; ret; 
0x000000000859cf: mov rdx, [r15+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x00000000153523: mov rdx, [r15]; mov r8, rbp; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000153585: mov rdx, [r15]; xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12; 
0x000000000540ef: mov rdx, [r8+rax*8]; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x0000000008924b: mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x00000000091932: mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x0000000011388f: mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000039be9: mov rdx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x00000000036bfd: mov rdx, [rax+r12*8]; test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x0000000009478a: mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000029d86: mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000008abc8: mov rdx, [rbp+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x00000000091706: mov rdx, [rbp]; test rdx, rdx; je short 0x00000000000916e0; call rdx; 
0x00000000090409: mov rdx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000091d2d: mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x0000000009051c: mov rdx, [rbx+0x20]; push r10; call rax; 
0x000000000927ab: mov rdx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x000000000852d1: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008cca9: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000001134e2: mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x0000000010ad51: mov rdx, [rbx]; mov rsi, [rbp-0x1d8]; mov r9, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x000000000ea3db: mov rdx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000ea3e3: mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x0000000008fb58: mov rdx, [rdi+0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, [rdi+0x18]; ret; 
0x00000000090384: mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x000000000903e3: mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x000000000f7028: mov rdx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000f6f5d; ret; 
0x000000000f6fd6: mov rdx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000f6f5d; ret; 
0x000000000913d5: mov rdx, [rdi+0x8]; mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x000000001675b0: mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000166493: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000166393: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x0000000007f593: mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000008929e: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000008916e: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000053b75: mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000a7a24: mov rdx, [rdx+0x8]; test rdx, rdx; jne short 0x00000000000a7a20; ret; 
0x00000000118da0: mov rdx, [rip+0x100069]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001152f0: mov rdx, [rip+0x103b19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115240: mov rdx, [rip+0x103bc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000115160: mov rdx, [rip+0x103ca9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114b08: mov rdx, [rip+0x104301]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114ad8: mov rdx, [rip+0x104331]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000114a90: mov rdx, [rip+0x104379]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001149f0: mov rdx, [rip+0x104419]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001142f8: mov rdx, [rip+0x104b11]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001142c8: mov rdx, [rip+0x104b41]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000114280: mov rdx, [rip+0x104b89]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000113f00: mov rdx, [rip+0x104f09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000113c50: mov rdx, [rip+0x1051b9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000112a10: mov rdx, [rip+0x1063f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000112960: mov rdx, [rip+0x1064a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000108de8: mov rdx, [rip+0x110021]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000108d48: mov rdx, [rip+0x1100c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea6a0: mov rdx, [rip+0x12e769]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea580: mov rdx, [rip+0x12e889]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ea4c0: mov rdx, [rip+0x12e949]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e66c0: mov rdx, [rip+0x132749]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000e5770: mov rdx, [rip+0x133699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000e5700: mov rdx, [rip+0x133709]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000dcdf8: mov rdx, [rip+0x13c011]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000dcdc8: mov rdx, [rip+0x13c041]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9cd0: mov rdx, [rip+0x13f139]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d9b10: mov rdx, [rip+0x13f2f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d99f8: mov rdx, [rip+0x13f411]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a0a90: mov rdx, [rip+0x178379]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0a28: mov rdx, [rip+0x1783e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a09c8: mov rdx, [rip+0x178441]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0508: mov rdx, [rip+0x178901]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a0450: mov rdx, [rip+0x1789b9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a03a8: mov rdx, [rip+0x178a61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009fdd8: mov rdx, [rip+0x179031]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000061f70: mov rdx, [rip+0x1b6e99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000061f38: mov rdx, [rip+0x1b6ed1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000046ce0: mov rdx, [rip+0x1d2129]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000042830: mov rdx, [rip+0x1d65d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000427a0: mov rdx, [rip+0x1d6669]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000042480: mov rdx, [rip+0x1d6989]; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003a402: mov rdx, [rip+0x1de9df]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000029ce7: mov rdx, [rip+0x1ef19a]; cmp [rdx+0xd8], rax; jne short 0x0000000000029cbb; ret; 
0x00000000177e90: mov rdx, [rip+0xa0f79]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000175db0: mov rdx, [rip+0xa3111]; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x00000000155018: mov rdx, [rip+0xc3df1]; mov eax, 0x22; mov fs:[rdx], eax; pop rbx; ret; 
0x000000001354f0: mov rdx, [rip+0xe3919]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000128688: mov rdx, [rip+0xf0781]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128610: mov rdx, [rip+0xf07f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285d8: mov rdx, [rip+0xf0831]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001285a8: mov rdx, [rip+0xf0861]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000128570: mov rdx, [rip+0xf0899]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128478: mov rdx, [rip+0xf0991]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128438: mov rdx, [rip+0xf09d1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001283d8: mov rdx, [rip+0xf0a31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128390: mov rdx, [rip+0xf0a79]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001282d0: mov rdx, [rip+0xf0b39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000128070: mov rdx, [rip+0xf0d99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127fb8: mov rdx, [rip+0xf0e51]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127f00: mov rdx, [rip+0xf0f09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c90: mov rdx, [rip+0xf1179]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127c40: mov rdx, [rip+0xf11c9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127b70: mov rdx, [rip+0xf1299]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127ad0: mov rdx, [rip+0xf1339]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127958: mov rdx, [rip+0xf14b1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000127890: mov rdx, [rip+0xf1579]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001277b0: mov rdx, [rip+0xf1659]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127700: mov rdx, [rip+0xf1709]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000127630: mov rdx, [rip+0xf17d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126ad0: mov rdx, [rip+0xf2339]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126770: mov rdx, [rip+0xf2699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126708: mov rdx, [rip+0xf2701]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001266a8: mov rdx, [rip+0xf2761]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126648: mov rdx, [rip+0xf27c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126608: mov rdx, [rip+0xf2801]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001265d0: mov rdx, [rip+0xf2839]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126590: mov rdx, [rip+0xf2879]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001264c0: mov rdx, [rip+0xf2949]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126488: mov rdx, [rip+0xf2981]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001263b0: mov rdx, [rip+0xf2a59]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001262d0: mov rdx, [rip+0xf2b39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000126230: mov rdx, [rip+0xf2bd9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126160: mov rdx, [rip+0xf2ca9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001260b0: mov rdx, [rip+0xf2d59]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000126000: mov rdx, [rip+0xf2e09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125f30: mov rdx, [rip+0xf2ed9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e60: mov rdx, [rip+0xf2fa9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125e10: mov rdx, [rip+0xf2ff9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125d40: mov rdx, [rip+0xf30c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000125c28: mov rdx, [rip+0xf31e1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000125bf8: mov rdx, [rip+0xf3211]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001217d0: mov rdx, [rip+0xf7639]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012914d: mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000011ecf0: mov rdx, [rip+0xfa119]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011ec00: mov rdx, [rip+0xfa209]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011d178: mov rdx, [rip+0xfbc91]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011d148: mov rdx, [rip+0xfbcc1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011bbc0: mov rdx, [rip+0xfd249]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011bb40: mov rdx, [rip+0xfd2c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011ba80: mov rdx, [rip+0xfd389]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011add8: mov rdx, [rip+0xfe031]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011ad18: mov rdx, [rip+0xfe0f1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011ac60: mov rdx, [rip+0xfe1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011abc0: mov rdx, [rip+0xfe249]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000011a910: mov rdx, [rip+0xfe4f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a518: mov rdx, [rip+0xfe8f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4e0: mov rdx, [rip+0xfe929]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a4a0: mov rdx, [rip+0xfe969]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011a2a8: mov rdx, [rip+0xfeb61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119d58: mov rdx, [rip+0xff0b1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119d20: mov rdx, [rip+0xff0e9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119ce8: mov rdx, [rip+0xff121]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000119a28: mov rdx, [rip+0xff3e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001199e0: mov rdx, [rip+0xff429]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119930: mov rdx, [rip+0xff4d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119480: mov rdx, [rip+0xff989]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000119440: mov rdx, [rip+0xff9c9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001193f0: mov rdx, [rip+0xffa19]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000091655: mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000182a80: mov rdx, [rsi+0x1]; mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000182a10: mov rdx, [rsi+0x2]; mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000001829a0: mov rdx, [rsi+0x3]; mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x00000000182930: mov rdx, [rsi+0x4]; mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000000c13b3: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000c2213: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd33: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000001828c0: mov rdx, [rsi+0x5]; mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000c13d3: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000c2233: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000bfd43: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x00000000182850: mov rdx, [rsi+0x6]; mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000c13f3: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000c2253: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000bfd53: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001827e0: mov rdx, [rsi+0x7]; mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000001b0983: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x000000001b2cb3: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b13: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f813: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x0000000017c814: mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017d166: mov rdx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d168: mov rdx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d368: mov rdx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d366: mov rdx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d568: mov rdx, [rsi-0x8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017c7f8: mov rdx, [rsi-0x8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c830: mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x0000000017d184: mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d182: mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d384: mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d382: mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d584: mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000182310: mov rdx, [rsi-0x9]; mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182290: mov rdx, [rsi-0xa]; mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182210: mov rdx, [rsi-0xb]; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182190: mov rdx, [rsi-0xc]; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000182100: mov rdx, [rsi-0xd]; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182070: mov rdx, [rsi-0xe]; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000181fe0: mov rdx, [rsi-0xf]; mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000c1330: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000c2180: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000bfce0: mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000c3de0: mov rdx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x00000000121c28: mov rdx, [rsp+0x1008]; sub rdx, fs:[0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000042933: mov rdx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429b6: mov rdx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x0000000014a355: mov rdx, [rsp+0x108]; sub rdx, fs:[0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x000000000b1478: mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000ea54d: mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000129d5c: mov rdx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x00000000129dbd: mov rdx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x000000000c6932: mov rdx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000127928: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x00000000127a9a: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000012785a: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000012e5f1: mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000423f7: mov rdx, [rsp+0x138]; sub rdx, fs:[0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x00000000043004: mov rdx, [rsp+0x138]; sub rdx, fs:[0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x000000000b13b0: mov rdx, [rsp+0x18]; mov [rax], rdx; add rax, rcx; ret; 
0x00000000127c01: mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000e9e02: mov rdx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001385bd: mov rdx, [rsp+0x18]; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x00000000174ebc: mov rdx, [rsp+0x18]; mov rax, [rsp+0x10]; mov esi, 0x40; mov rdi, r12; call rax; 
0x000000000e9a92: mov rdx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000128356: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x000000000a0416: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x00000000138e0f: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000045f15: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x00000000046005: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000051887: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd1: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000006074a: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x0000000006081f: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608d6: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609a8: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a6a: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b2a: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c18: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cef: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x000000000621c2: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x0000000006229d: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082bfa: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cb6: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082daf: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e7f: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f38: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000090477: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x000000000a02d4: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d3642: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d371d: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8eb5: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d9c50: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x00000000113a8d: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000119bd3: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c71: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011b3e0: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c0df: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x00000000126539: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b26: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x000000001284dd: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000134be1: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134ce5: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134dfb: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ec3: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c55: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d6b: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e33: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x0000000013623a: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x0000000013629a: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136363: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136443: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136523: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d22b: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000148023: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x00000000176120: mov rdx, [rsp+0x18]; sub rdx, fs:[0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x0000000015d95f: mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000114ee8: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x0000000005a48e: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x0000000009061a: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x00000000090755: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x000000000e7740: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec171: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec201: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c0: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec560: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108eee: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113e07: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000119a8c: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x0000000011b100: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b190: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b237: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2f7: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011c1b1: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf79: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d00c: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d090: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d10b: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000013d121: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1be: mov rdx, [rsp+0x28]; sub rdx, fs:[0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x00000000137c9c: mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000114872: mov rdx, [rsp+0x38]; sub rdx, fs:[0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x000000000514f6: mov rdx, [rsp+0x418]; sub rdx, fs:[0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x0000000011c066: mov rdx, [rsp+0x48]; sub rdx, fs:[0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000002d832: mov rdx, [rsp+0x60]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x000000000e708d: mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000169037: mov rdx, [rsp+0x68]; sub rdx, fs:[0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x00000000042ac1: mov rdx, [rsp+0x88]; sub rdx, fs:[0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x0000000009bcac: mov rdx, [rsp+0x88]; sub rdx, fs:[0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x000000000445a7: mov rdx, [rsp+0x8]; mov rax, [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000a04d4: mov rdx, [rsp+0x8]; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000008b4ea: mov rdx, [rsp+0x8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000004627a: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x0000000004689e: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468eb: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x0000000004693e: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x0000000004698b: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000061e89: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000e2e9e: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e558e: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x00000000119b1b: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x0000000011a1df: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011f97b: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000127e60: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x00000000147fd0: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x000000001488d2: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a5a1: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x00000000172134: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x000000001739b8: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a20: mov rdx, [rsp+0x8]; sub rdx, fs:[0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x00000000043494: mov rdx, [rsp+0x98]; sub rdx, fs:[0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x000000000613d4: mov rdx, [rsp+0x98]; sub rdx, fs:[0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000153a25: mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x0000000007961a: mov rdx, r10; mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000e7352: mov rdx, r11; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x00000000072332: mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000013332e: mov rdx, r12; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x0000000009f1f8: mov rdx, r12; mov eax, 0x81; syscall; 
0x000000000e57ed: mov rdx, r12; mov esi, r13d; mov eax, 0xe6; syscall; 
0x000000000e57ec: mov rdx, r12; mov esi, r13d; mov eax, 0xe6; syscall; 
0x000000000e58ad: mov rdx, r12; mov esi, r13d; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000e58ac: mov rdx, r12; mov esi, r13d; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x000000000e5857: mov rdx, r12; mov r8d, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x000000000e5858: mov rdx, r12; mov r8d, eax; mov esi, r13d; mov eax, 0xe6; syscall; 
0x0000000013a38f: mov rdx, r12; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x00000000139e97: mov rdx, r12; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000015f830: mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86e: mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000008a2ff: mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000072dbe: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000008004a: mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000007fb10: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000815c9: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x000000000815f3: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000001609a0: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000132f2a: mov rdx, r12; movups [rbp-0x78], xmm3; call rax; 
0x000000001331a2: mov rdx, r12; movups [rbp-0x78], xmm4; call rax; 
0x0000000013365a: mov rdx, r12; movups [rbp-0x78], xmm6; call rax; 
0x0000000013372c: mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x000000000a8148: mov rdx, r12; pop r12; pop r13; ret; 
0x00000000118e15: mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000e8139: mov rdx, r13; mov edi, [rsp+0x30]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000011fd99: mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000c66a7: mov rdx, r13; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000e8539: mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x000000000c685f: mov rdx, r13; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000d349c: mov rdx, r13; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000782ef: mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2b1: mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x0000000007498c: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739d1: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000082283: mov rdx, r13; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000133140: mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x000000000c655e: mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x00000000043936: mov rdx, r14; call rbp; 
0x000000000969a9: mov rdx, r14; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f8d: mov rdx, r14; lea rsi, [rip+0x5cac9]; syscall; 
0x0000000011b8ea: mov rdx, r14; mov eax, 0x10e; syscall; 
0x0000000011b8e9: mov rdx, r14; mov eax, 0x10e; syscall; 
0x000000000c6c3f: mov rdx, r14; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000044488: mov rdx, r14; mov rax, [rsp]; call rax; 
0x0000000013eb1c: mov rdx, r14; mov rdi, r15; mov rcx, fs:[0x0]; add rcx, [rip+0xda2de]; call rbp; 
0x00000000072850: mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000044404: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000007afe3: mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000007707f: mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f4: mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007603e: mov rdx, r14; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000c6b4f: mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x000000000951bf: mov rdx, r15; lea rsi, [rip+0x13d817]; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x000000000729e8: mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000008b279: mov rdx, r15; mov rsi, r14; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000013b5ba: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000075d1c: mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007658a: mov rdx, r15; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000011b73d: mov rdx, r15; mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000007cb70: mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdab: mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000009eb8b: mov rdx, r8; mov edi, 0x2; mov eax, r15d; mov r10d, 0x8; syscall; 
0x00000000125b94: mov rdx, r8; mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x00000000073c49: mov rdx, r8; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000008b844: mov rdx, r8; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000005bfee: mov rdx, r8; mov rsi, r14; mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x0000000007b5b1: mov rdx, r8; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000012e76a: mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000013196e: mov rdx, rax; call qword ptr [r15+0x28]; 
0x0000000012ea76: mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000009e73c: mov rdx, rax; mov rax, [rax+0x20]; test rax, rax; jne short 0x000000000009e738; ret; 
0x0000000008f1c5: mov rdx, rax; mov rax, [rax]; test rax, rax; jne short 0x000000000008f1c0; ret; 
0x00000000096836: mov rdx, rbp; lea rsi, [rip+0x13c220]; mov eax, 0xe; syscall; 
0x00000000043f1f: mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000001377af: mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x0000000004381c: mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000043840: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000008ca54: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000004385b: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000078d26: mov rdx, rbx; call qword ptr [r12+0x38]; 
0x000000000778be: mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000007aaff: mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x00000000073792: mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000751c2: mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000080f92: mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x0000000008a462: mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000082346: mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000079459: mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x00000000079747: mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x0000000016833a: mov rdx, rbx; mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000133a09: mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x0000000012674f: mov rdx, rcx; cmp r9d, 0x1; ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x0000000011ea2d: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x000000000c5044: mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001a10cb: mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x00000000177e74: mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x00000000177e07: mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000e5616: mov rdx, rsi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x00000000095da7: mov rdx, rsi; mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x000000001190df: mov rdx, rsi; xor esi, esi; syscall; 
0x0000000011a0f0: mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000121c0e: mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000119b38: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000029ef0: mov rsi, [r12]; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed1: mov rsi, [r12]; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000044480: mov rsi, [r13]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x00000000120030: mov rsi, [r14]; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x00000000164a6e: mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000009192a: mov rsi, [rax+0x10]; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000094786: mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000001204d8: mov rsi, [rax]; mov rdi, r14; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000010ad54: mov rsi, [rbp-0x1d8]; mov r9, [rbp-0x1d0]; mov r11, [rbp-0x1f0]; call r11; 
0x00000000091d25: mov rsi, [rbx+0x10]; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x0000000015e1d4: mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000852cd: mov rsi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000015f82c: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f86a: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000015e296: mov rsi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000001134e9: mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x0000000012040f: mov rsi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x000000000c4a65: mov rsi, [rsi]; mov [rdi], rsi; mov [rdi+rdx-0x8], rcx; ret; 
0x000000001a3f2a: mov rsi, [rsi]; mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x0000000012835b: mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x000000000a041b: mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000001148e3: mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000013a397: mov rsi, [rsp+0x10]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001193ba: mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000012803e: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fce: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x0000000011ab8a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x0000000011ac2a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x00000000114a5c: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x00000000127b3a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x000000001149bc: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x000000001275fc: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000046cab: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x0000000011ecbb: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x00000000118d6b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x0000000015d51d: mov rsi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x0000000008e0ad: mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000139e9f: mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; call qword ptr [rsp+0x50]; 
0x0000000015d964: mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000000c66b2: mov rsi, [rsp+0x18]; call rbx; 
0x00000000162efa: mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000086d06: mov rsi, [rsp+0x18]; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000029d81: mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x0000000002aa95: mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000d3310: mov rsi, [rsp+0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000d349f: mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000011b952: mov rsi, [rsp+0x20]; mov eax, 0x10e; mov edi, [rsp+0x1c]; syscall; 
0x000000001168a4: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x00000000116bfc: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000116b94: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000162f29: mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000163144: mov rsi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000153a2d: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x00000000035190: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15; 
0x000000000352ec: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x0000000002ee53: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000002d277: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x000000001666f1: mov rsi, [rsp+0x50]; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000301c2: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x0000000003396c: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c3: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b1: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d837: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x0000000002f4c9: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r13; 
0x000000000e7095: mov rsi, [rsp+0x60]; call r12; 
0x00000000090988: mov rsi, [rsp+0x8]; add rsp, 0x48; pop rbp; pop r12; jmp rax; 
0x00000000125d08: mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x0000000011acec: mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011adac: mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x00000000127f88: mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000000ea48f: mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x00000000119900: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ed0: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x000000001282a0: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000012612f: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x00000000112930: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129e0: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000015e9cd: mov rsi, [rsp+0x8]; mov rcx, [rsp]; xor eax, eax; mov rdi, rbx; call rcx; 
0x00000000138e14: mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x00000000043f1a: mov rsi, [rsp+0x8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000007aafa: mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp+0x38]; 
0x000000000751bd: mov rsi, [rsp+0x8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x0000000012792d: mov rsi, [rsp+0x8]; syscall; 
0x00000000127a9f: mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000012785f: mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000125dd8: mov rsi, [rsp]; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x000000000a04d9: mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x00000000126299: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000001276c9: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x000000001279dd: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000782f2: mov rsi, r10; call qword ptr [r12+0x38]; 
0x0000000007a2b4: mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000080f95: mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000175adb: mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000013eecd: mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000000a774f: mov rsi, r12; call rax; 
0x0000000004381f: mov rsi, r12; call rbx; 
0x0000000009eda9: mov rsi, r12; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000029e5e: mov rsi, r12; mov edi, ebp; add rcx, [r14]; call rcx; 
0x00000000029eb4: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000029e14: mov rsi, r12; mov edi, ebp; call r15; 
0x000000000a05ff: mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000e56a0: mov rsi, r12; mov edi, ebp; mov eax, 0xe5; syscall; 
0x000000001163e7: mov rsi, r12; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000162f12: mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000043843: mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000155102: mov rsi, r12; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x00000000155103: mov rsi, r12; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000007498f: mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000739d4: mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000120e9d: mov rsi, r12; mov rdi, r14; call r13; 
0x00000000120e08: mov rsi, r12; mov rdi, r15; call r14; 
0x0000000008a466: mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000008ac59: mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x00000000072853: mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000072852: mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000015fc96: mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x00000000113d8a: mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall; 
0x0000000008ca57: mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x0000000016cee1: mov rsi, r12; mov rdi, rbx; call rcx; 
0x00000000153824: mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10; 
0x000000000e9dff: mov rsi, r12; mov rdx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e9a8f: mov rsi, r12; mov rdx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x0000000008a302: mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000160281: mov rsi, r13; call qword ptr [r14+0x40]; 
0x0000000015ff30: mov rsi, r13; call qword ptr [r15+0x40]; 
0x0000000015d649: mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000017579f: mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x000000000d956a: mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x0000000012f752: mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000011aecc: mov rsi, r13; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02c: mov rsi, r13; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000001289a1: mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x0000000015d657: mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000044407: mov rsi, r13; mov rdi, r12; call rax; 
0x00000000044406: mov rsi, r13; mov rdi, r12; call rax; 
0x00000000073c4c: mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000072dc1: mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000113889: mov rsi, r13; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000807b5: mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008081a: mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000086f79: mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000082349: mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000008b847: mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000015d4f4: mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000000d911d: mov rsi, r13; mov rdi, rbp; call rbx; 
0x0000000008b40c: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000015d5e9: mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000a78f4: mov rsi, r14; call rax; 
0x0000000007961d: mov rsi, r14; mov [rbp-0x8f0], r8b; call rax; 
0x000000000969f3: mov rsi, r14; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000016b2a3: mov rsi, r14; mov rdi, r12; call r13; 
0x0000000004385e: mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000005bff1: mov rsi, r14; mov rdi, r12; mov [rbp-0xe8], r8; call rax; 
0x00000000153647: mov rsi, r14; mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x0000000016d00f: mov rsi, r14; mov rdi, rbp; call r12; 
0x0000000008b27c: mov rsi, r14; mov rdi, rbp; sub r12, r14; call qword ptr [rax+0x40]; 
0x0000000008004d: mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000013b5bd: mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x00000000153c3e: mov rsi, r14; mov rdi, rbx; mov rcx, r15; call r12; 
0x0000000013196b: mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x0000000007945c: mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007974a: mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000000436d3: mov rsi, r15; call r14; 
0x0000000012ea6e: mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000009528a: mov rsi, r15; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000001666dd: mov rsi, r15; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000007afe6: mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000007afe5: mov rsi, r15; mov rdi, r12; call qword ptr [rbx+0x38]; 
0x0000000013ef20: mov rsi, r15; mov rdi, r12; call rbp; 
0x00000000043930: mov rsi, r15; mov rdi, r12; mov rdx, r14; call rbp; 
0x00000000073eed: mov rsi, r15; mov rdi, r14; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x00000000077082: mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000077081: mov rsi, r15; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000000756f7: mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x000000000756f6: mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000076041: mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000076040: mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000015eac1: mov rsi, r15; mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000009bc91: mov rsi, r8; mov eax, 0xe; syscall; 
0x000000001256db: mov rsi, r8; mov rdi, rbp; call r12; 
0x00000000046d35: mov rsi, r8; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x00000000119bbd: mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000128a35: mov rsi, r9; mov edi, r12d; mov eax, r10d; syscall; 
0x00000000117064: mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000075d1f: mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007658d: mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000174652: mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x0000000016960b: mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000000e8140: mov rsi, rbp; call qword ptr [rsp+0x58]; 
0x0000000012e762: mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000096886: mov rsi, rbp; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000001146dc: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000011b740: mov rsi, rbp; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000a00fd: mov rsi, rbp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000114752: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000015d509: mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001630f1: mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000007b5b4: mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdae: mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000016833d: mov rsi, rbp; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000137ca1: mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000085b89: mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008b5aa: mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000007fb13: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000814b0: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x000000000815cc: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000082286: mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000081235: mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000815f6: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000001609a3: mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x0000000016073a: mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x00000000130f8e: mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000893dd: mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x00000000043207: mov rsi, rbx; mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x000000001644e4: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000016943f: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013e591: mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x10]; 
0x0000000011d2a0: mov rsi, rcx; mov rax, rdi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000d9cb4: mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x000000001754bb: mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x0000000016382d: mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000132ab7: mov rsi, rdx; call rax; 
0x0000000012662a: mov rsi, rdx; cmp r8d, 0x1; ja short 0x0000000000126660; mov eax, 0x4; syscall; 
0x00000000126689: mov rsi, rdx; cmp r8d, 0x1; ja short 0x00000000001266c0; mov eax, 0x5; syscall; 
0x000000001266ea: mov rsi, rdx; cmp r8d, 0x1; ja short 0x0000000000126720; mov eax, 0x6; syscall; 
0x0000000016384d: mov rsi, rdx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x0000000016633d: mov rsi, rdx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000165a0d: mov rsi, rdx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x00000000162c0d: mov rsi, rdx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x0000000016c5dc: mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000015fbe4: mov rsi, rsp; call qword ptr [rax]; 
0x0000000015fc03: mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000001691d0: mov rsi, rsp; mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000053996: mov rsi, rsp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000008ba2e: mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x0000000008a7b8: mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x0000000016c301: mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000007ebe7: mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x00000000042317: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000005a170: mov rsp, rdx; ret; 
0x000000001a3f4f: mov si, [rsi]; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x00000000175e8a: mov sil, 0xed; jmp qword ptr [rsi-0x70]; 
0x0000000016d5a2: mov sil, 0xff; dec dword ptr [rax-0x77]; ret; 
0x00000000041595: movapd xmm0, xmm1; ret; 
0x00000000041521: movapd xmm0, xmm2; movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x0000000004149a: movapd xmm0, xmm2; ret; 
0x0000000017b3f7: movaps [rdi+0x10], xmm3; jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b547: movaps [rdi+0x10], xmm3; jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b697: movaps [rdi+0x10], xmm3; jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b7e7: movaps [rdi+0x10], xmm3; jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b937: movaps [rdi+0x10], xmm3; jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ba87: movaps [rdi+0x10], xmm3; jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bbd7: movaps [rdi+0x10], xmm3; jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd27: movaps [rdi+0x10], xmm3; jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017be77: movaps [rdi+0x10], xmm3; jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bfc7: movaps [rdi+0x10], xmm3; jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c117: movaps [rdi+0x10], xmm3; jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c267: movaps [rdi+0x10], xmm3; jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3b7: movaps [rdi+0x10], xmm3; jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c507: movaps [rdi+0x10], xmm3; jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c657: movaps [rdi+0x10], xmm3; jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ddd7: movaps [rdi+0x10], xmm3; jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df27: movaps [rdi+0x10], xmm3; jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e077: movaps [rdi+0x10], xmm3; jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e1c7: movaps [rdi+0x10], xmm3; jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e317: movaps [rdi+0x10], xmm3; jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e467: movaps [rdi+0x10], xmm3; jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5b7: movaps [rdi+0x10], xmm3; jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e707: movaps [rdi+0x10], xmm3; jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e857: movaps [rdi+0x10], xmm3; jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9a7: movaps [rdi+0x10], xmm3; jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eaf7: movaps [rdi+0x10], xmm3; jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec47: movaps [rdi+0x10], xmm3; jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ed97: movaps [rdi+0x10], xmm3; jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eee7: movaps [rdi+0x10], xmm3; jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017f037: movaps [rdi+0x10], xmm3; jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b353: movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b34f: movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b349: movaps [rdi-0x30], xmm3; jb short 0x000000000017b35d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b499: movaps [rdi-0x30], xmm3; jb short 0x000000000017b4ad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b5e9: movaps [rdi-0x30], xmm3; jb short 0x000000000017b5fd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b739: movaps [rdi-0x30], xmm3; jb short 0x000000000017b74d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b889: movaps [rdi-0x30], xmm3; jb short 0x000000000017b89d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b9d9: movaps [rdi-0x30], xmm3; jb short 0x000000000017b9ed; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bb29: movaps [rdi-0x30], xmm3; jb short 0x000000000017bb3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bc77: movaps [rdi-0x30], xmm3; jb short 0x000000000017bc90; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bdc9: movaps [rdi-0x30], xmm3; jb short 0x000000000017bddd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bf19: movaps [rdi-0x30], xmm3; jb short 0x000000000017bf2d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c069: movaps [rdi-0x30], xmm3; jb short 0x000000000017c07d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c1b9: movaps [rdi-0x30], xmm3; jb short 0x000000000017c1cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c309: movaps [rdi-0x30], xmm3; jb short 0x000000000017c31d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c459: movaps [rdi-0x30], xmm3; jb short 0x000000000017c46d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c5a9: movaps [rdi-0x30], xmm3; jb short 0x000000000017c5bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dd29: movaps [rdi-0x30], xmm3; jb short 0x000000000017dd3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017de79: movaps [rdi-0x30], xmm3; jb short 0x000000000017de8d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dfc9: movaps [rdi-0x30], xmm3; jb short 0x000000000017dfdd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e119: movaps [rdi-0x30], xmm3; jb short 0x000000000017e12d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e269: movaps [rdi-0x30], xmm3; jb short 0x000000000017e27d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e3b9: movaps [rdi-0x30], xmm3; jb short 0x000000000017e3cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e509: movaps [rdi-0x30], xmm3; jb short 0x000000000017e51d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e657: movaps [rdi-0x30], xmm3; jb short 0x000000000017e670; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e7a9: movaps [rdi-0x30], xmm3; jb short 0x000000000017e7bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e8f9: movaps [rdi-0x30], xmm3; jb short 0x000000000017e90d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ea49: movaps [rdi-0x30], xmm3; jb short 0x000000000017ea5d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017eb99: movaps [rdi-0x30], xmm3; jb short 0x000000000017ebad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ece9: movaps [rdi-0x30], xmm3; jb short 0x000000000017ecfd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ee39: movaps [rdi-0x30], xmm3; jb short 0x000000000017ee4d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ef89: movaps [rdi-0x30], xmm3; jb short 0x000000000017ef9d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b3fd: movaps [rdi], xmm4; notrack jmp r9; 
0x000000000d9046: movaps [rsp+0x10], xmm4; movd xmm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x0000000016745c: movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x000000001687f1: movaps [rsp+0x20], xmm2; push 0x0; push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x000000001685a9: movaps [rsp+0x30], xmm2; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000174ea0: movaps [rsp+0x40], xmm0; test rax, rax; je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000000a0738: movaps [rsp+0x50], xmm0; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x0000000016d262: movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000016d259: movaps [rsp+0x70], xmm0; pxor xmm0, xmm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000015fccc: movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x00000000119f84: movaps [rsp], xmm0; mov [rsp+0x23], al; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x000000000d9053: movaps [rsp], xmm3; call rbx; 
0x00000000041596: movaps xmm0, xmm1; ret; 
0x00000000041522: movaps xmm0, xmm2; movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x0000000004149b: movaps xmm0, xmm2; ret; 
0x0000000017b2ea: movaps xmm1, [rsi-0x1]; jb short 0x000000000017b2f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b39a: movaps xmm1, [rsi-0x1]; jb short 0x000000000017b3a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dcca: movaps xmm1, [rsi-0x1]; jb short 0x000000000017dcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dd7a: movaps xmm1, [rsi-0x1]; jb short 0x000000000017dd87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b43a: movaps xmm1, [rsi-0x2]; jb short 0x000000000017b447; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b4ea: movaps xmm1, [rsi-0x2]; jb short 0x000000000017b4f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017de1a: movaps xmm1, [rsi-0x2]; jb short 0x000000000017de27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017deca: movaps xmm1, [rsi-0x2]; jb short 0x000000000017ded7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b58a: movaps xmm1, [rsi-0x3]; jb short 0x000000000017b597; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b63a: movaps xmm1, [rsi-0x3]; jb short 0x000000000017b647; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017df6a: movaps xmm1, [rsi-0x3]; jb short 0x000000000017df77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e01a: movaps xmm1, [rsi-0x3]; jb short 0x000000000017e027; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b6da: movaps xmm1, [rsi-0x4]; jb short 0x000000000017b6e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b78a: movaps xmm1, [rsi-0x4]; jb short 0x000000000017b797; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e0ba: movaps xmm1, [rsi-0x4]; jb short 0x000000000017e0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e16a: movaps xmm1, [rsi-0x4]; jb short 0x000000000017e177; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b82a: movaps xmm1, [rsi-0x5]; jb short 0x000000000017b837; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b8da: movaps xmm1, [rsi-0x5]; jb short 0x000000000017b8e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e20a: movaps xmm1, [rsi-0x5]; jb short 0x000000000017e217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e2ba: movaps xmm1, [rsi-0x5]; jb short 0x000000000017e2c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b97a: movaps xmm1, [rsi-0x6]; jb short 0x000000000017b987; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ba2a: movaps xmm1, [rsi-0x6]; jb short 0x000000000017ba37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e35a: movaps xmm1, [rsi-0x6]; jb short 0x000000000017e367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e40a: movaps xmm1, [rsi-0x6]; jb short 0x000000000017e417; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017baca: movaps xmm1, [rsi-0x7]; jb short 0x000000000017bad7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bb7a: movaps xmm1, [rsi-0x7]; jb short 0x000000000017bb87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e4aa: movaps xmm1, [rsi-0x7]; jb short 0x000000000017e4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e55a: movaps xmm1, [rsi-0x7]; jb short 0x000000000017e567; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bc1a: movaps xmm1, [rsi-0x8]; jb short 0x000000000017bc27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bcca: movaps xmm1, [rsi-0x8]; jb short 0x000000000017bcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e5fa: movaps xmm1, [rsi-0x8]; jb short 0x000000000017e607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e6aa: movaps xmm1, [rsi-0x8]; jb short 0x000000000017e6b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bd6a: movaps xmm1, [rsi-0x9]; jb short 0x000000000017bd77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017be1a: movaps xmm1, [rsi-0x9]; jb short 0x000000000017be27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e74a: movaps xmm1, [rsi-0x9]; jb short 0x000000000017e757; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e7fa: movaps xmm1, [rsi-0x9]; jb short 0x000000000017e807; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017beba: movaps xmm1, [rsi-0xa]; jb short 0x000000000017bec7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bf6a: movaps xmm1, [rsi-0xa]; jb short 0x000000000017bf77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e89a: movaps xmm1, [rsi-0xa]; jb short 0x000000000017e8a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e94a: movaps xmm1, [rsi-0xa]; jb short 0x000000000017e957; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c00a: movaps xmm1, [rsi-0xb]; jb short 0x000000000017c017; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c0ba: movaps xmm1, [rsi-0xb]; jb short 0x000000000017c0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e9ea: movaps xmm1, [rsi-0xb]; jb short 0x000000000017e9f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ea9a: movaps xmm1, [rsi-0xb]; jb short 0x000000000017eaa7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c15a: movaps xmm1, [rsi-0xc]; jb short 0x000000000017c167; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c20a: movaps xmm1, [rsi-0xc]; jb short 0x000000000017c217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eb3a: movaps xmm1, [rsi-0xc]; jb short 0x000000000017eb47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ebea: movaps xmm1, [rsi-0xc]; jb short 0x000000000017ebf7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c2aa: movaps xmm1, [rsi-0xd]; jb short 0x000000000017c2b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c35a: movaps xmm1, [rsi-0xd]; jb short 0x000000000017c367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ec8a: movaps xmm1, [rsi-0xd]; jb short 0x000000000017ec97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ed3a: movaps xmm1, [rsi-0xd]; jb short 0x000000000017ed47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c3fa: movaps xmm1, [rsi-0xe]; jb short 0x000000000017c407; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c4aa: movaps xmm1, [rsi-0xe]; jb short 0x000000000017c4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017edda: movaps xmm1, [rsi-0xe]; jb short 0x000000000017ede7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ee8a: movaps xmm1, [rsi-0xe]; jb short 0x000000000017ee97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c54a: movaps xmm1, [rsi-0xf]; jb short 0x000000000017c557; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c5fa: movaps xmm1, [rsi-0xf]; jb short 0x000000000017c607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ef2a: movaps xmm1, [rsi-0xf]; jb short 0x000000000017ef37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017efda: movaps xmm1, [rsi-0xf]; jb short 0x000000000017efe7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000045e17: movd eax, mm0; ret; 
0x000000000d9050: movd eax, mm3; movaps [rsp], xmm3; call rbx; 
0x000000000413e0: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000004055d: movd esi, mm7; call far fword ptr [rbp+0x4c]; 
0x00000000045e0a: movd mm0, eax; movd xmm1, edx; punpckldq xmm0, xmm1; movq rax, xmm0; ret; 
0x000000000d904c: movd mm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x000000000419bf: movd mm0, eax; mulss xmm0, [rip+0x1a13fe]; ret; 
0x000000000416cf: movd mm0, eax; ret; 
0x00000000041866: movd mm0, eax; subss xmm1, xmm0; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000041932: movd mm0, ecx; ret; 
0x000000000eabed: movd mm0, edi; punpcklqdq xmm0, xmm0; movups [rax+0x2d8], xmm0; mov eax, 0x111; syscall; 
0x00000000041966: movd mm0, edx; andps xmm0, [rip+0x1a0750]; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041941: movd mm0, edx; andps xmm0, [rip+0x1a0775]; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x0000000004189b: movd mm0, esi; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x0000000005667e: movd mm0, esi; ret; 
0x0000000015fcc1: movd mm1, eax; mov rax, [rdi+0x8]; punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x000000000414fc: movd mm1, eax; subsd xmm2, xmm1; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x0000000009274b: movd mm1, eax; xor eax, eax; punpckldq xmm0, xmm1; movq [rdi+0x4], xmm0; ret; 
0x00000000041592: movd mm1, edx; movapd xmm0, xmm1; ret; 
0x00000000041897: movd mm1, edx; movd xmm0, esi; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000045e0e: movd mm1, edx; punpckldq xmm0, xmm1; movq rax, xmm0; ret; 
0x00000000041883: movd mm1, esi; movaps xmm0, xmm1; ret; 
0x00000000041527: movd mm1, esi; movsd [rdx], xmm1; ret; 
0x00000000041497: movd mm2, esi; movapd xmm0, xmm2; ret; 
0x00000000045e09: movd xmm0, eax; movd xmm1, edx; punpckldq xmm0, xmm1; movq rax, xmm0; ret; 
0x000000000d904b: movd xmm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x000000000419be: movd xmm0, eax; mulss xmm0, [rip+0x1a13fe]; ret; 
0x00000000041a3b: movd xmm0, eax; ret; 
0x00000000041865: movd xmm0, eax; subss xmm1, xmm0; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000041931: movd xmm0, ecx; ret; 
0x00000000041964: movd xmm0, edx; andps xmm0, [rip+0x1a0750]; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041940: movd xmm0, edx; andps xmm0, [rip+0x1a0775]; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x0000000004189a: movd xmm0, esi; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x0000000005667d: movd xmm0, esi; ret; 
0x00000000092749: movd xmm1, eax; xor eax, eax; punpckldq xmm0, xmm1; movq [rdi+0x4], xmm0; ret; 
0x00000000041896: movd xmm1, edx; movd xmm0, esi; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000045e0d: movd xmm1, edx; punpckldq xmm0, xmm1; movq rax, xmm0; ret; 
0x00000000041882: movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x00000000167454: movdqa xmm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000059bff: movdqa xmm0, [rsp-0x18]; ret; 
0x00000000041f50: movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000042096: movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000042014: movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000004200c: movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000017f04c: movdqu [r8], xmm0; lea r11, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eefc: movdqu [r8], xmm0; lea r11, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edac: movdqu [r8], xmm0; lea r11, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec5c: movdqu [r8], xmm0; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb0c: movdqu [r8], xmm0; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9bc: movdqu [r8], xmm0; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e86c: movdqu [r8], xmm0; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e71c: movdqu [r8], xmm0; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e682: movdqu [r8], xmm0; lea r11, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5cc: movdqu [r8], xmm0; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e47c: movdqu [r8], xmm0; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e32c: movdqu [r8], xmm0; lea r11, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1dc: movdqu [r8], xmm0; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e08c: movdqu [r8], xmm0; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df3c: movdqu [r8], xmm0; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddec: movdqu [r8], xmm0; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c66c: movdqu [r8], xmm0; lea r11, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c51c: movdqu [r8], xmm0; lea r11, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3cc: movdqu [r8], xmm0; lea r11, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c27c: movdqu [r8], xmm0; lea r11, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c12c: movdqu [r8], xmm0; lea r11, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfdc: movdqu [r8], xmm0; lea r11, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be8c: movdqu [r8], xmm0; lea r11, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd3c: movdqu [r8], xmm0; lea r11, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca2: movdqu [r8], xmm0; lea r11, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbec: movdqu [r8], xmm0; lea r11, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba9c: movdqu [r8], xmm0; lea r11, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b94c: movdqu [r8], xmm0; lea r11, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b7fc: movdqu [r8], xmm0; lea r11, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6ac: movdqu [r8], xmm0; lea r11, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b55c: movdqu [r8], xmm0; lea r11, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b40c: movdqu [r8], xmm0; lea r11, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182771: movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c15fd: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c246d: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000c0c40: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000c40f0: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000bff2d: movdqu [rdi+0x10], xmm2; ret; 
0x000000000c092d: movdqu [rdi+0x10], xmm2; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c40cd: movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x00000000182def: movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c0e84: movdqu [rdi+0x20], xmm6; sub r8, 0x10; jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x00000000182d7f: movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c26e3: movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x000000000c0e93: movdqu [rdi+0x30], xmm7; ret; 
0x000000000c4143: movdqu [rdi+0x30], xmm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x00000000182d0f: movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c9f: movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182c2f: movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182bbf: movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182b4f: movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182adf: movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000182a6f: movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001829ff: movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000018298f: movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000018291f: movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001828af: movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c159d: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c240d: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfecd: movdqu [rdi+0xd], xmm2; ret; 
0x000000000c089d: movdqu [rdi+0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c406d: movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x0000000018283f: movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c15bd: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c242d: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfeed: movdqu [rdi+0xe], xmm2; ret; 
0x000000000c08cd: movdqu [rdi+0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c408d: movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000001827cf: movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000c15dd: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c244d: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff0d: movdqu [rdi+0xf], xmm2; ret; 
0x000000000c08fd: movdqu [rdi+0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c40ad: movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x00000000181f5b: movdqu [rdi-0x10], xmm0; ret; 
0x00000000181fcb: movdqu [rdi-0x10], xmm1; ret; 
0x00000000182706: movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182686: movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001825f6: movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182576: movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001824f6: movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182476: movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001823f6: movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182376: movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001822f6: movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000000c0d40: movdqu [rdi-0x1], xmm0; ret; 
0x00000000182276: movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001821f6: movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182176: movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001820e6: movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182056: movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181fc6: movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181f51: movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000000c2274: movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c1414: movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000c2287: movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a67: movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000c3ee7: movdqu [rdi], xmm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000c1438: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a8: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd88: movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000c3f08: movdqu [rdi], xmm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c1424: movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000bfd74: movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000c1477: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000c1497: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000bfdc7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000c230a: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000c0aba: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000bfdb7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000c3f47: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000c14f8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2368: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000c1518: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000bfe48: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe28: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000c3fc8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c155b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23cb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000bfe8b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c238b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c0b3b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c153c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c23ac: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000bfe6c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c157b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23eb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000bfeab: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c14b8: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c2328: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000bfde8: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000c3f88: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c1457: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c22c7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000bfda7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000c3f27: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000c14d8: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c2348: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000bfe08: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000c3fa8: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000c15f9: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c2469: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000c0c3c: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000bff29: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c40c9: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000c1599: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c2409: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfec9: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c4069: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000c15b9: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c2429: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfee9: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c4089: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000c15d9: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c2449: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff09: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c40a9: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000bfd64: movdqu [rdi], xmm0; ret; 
0x000000000c06b4: movdqu [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c3ed4: movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000001827d4: movdqu [rdi], xmm1; ret; 
0x000000001659e8: movdqu xmm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000166318: movdqu xmm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x00000000162be8: movdqu xmm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000162cd0: movdqu xmm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x00000000165ac0: movdqu xmm0, [rcx]; mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x000000001663a8: movdqu xmm0, [rcx]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x0000000015ee00: movdqu xmm0, [rdi+0x38]; mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x000000000b56b2: movdqu xmm0, [rdi+rsi]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x00000000119587: movdqu xmm0, [rsi+0x58]; movdqu xmm1, [rsi+0x68]; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x000000000c0a60: movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000bfd80: movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000bfdb0: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000bfda0: movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000bfe20: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000bfde0: movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000bfe00: movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000c2270: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c1410: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000c1420: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000bfd70: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000bfd60: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c3ed0: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000bff20: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000bfec0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000bfee0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000bff00: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x00000000142fff: movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x000000001330b8: movdqu xmm1, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x0000000015edd0: movdqu xmm1, [rdi+0x20]; mov dword ptr [rsi], 0x6; movups [rsi+0x8], xmm1; ret; 
0x000000001663b8: movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad8: movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162ce0: movdqu xmm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x0000000011958c: movdqu xmm1, [rsi+0x68]; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x00000000133254: movdqu xmm2, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x000000001430a1: movdqu xmm2, [rcx+r9+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000001663e0: movdqu xmm2, [rcx]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x00000000165af0: movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x000000000c15f4: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c2464: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000bff24: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c1594: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c2404: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfec4: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c15b4: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c2424: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfee4: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c15d4: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c2444: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff04: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x00000000132f22: movdqu xmm3, [rbx-0x18]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm3; call rax; 
0x000000001663f0: movdqu xmm3, [rdi+0x20]; mov eax, 0x1; movups [rcx], xmm3; ret; 
0x00000000156f24: movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x0000000013319a: movdqu xmm4, [rbx+0x78]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm4; call rax; 
0x000000001663d0: movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x00000000133136: movdqu xmm5, [r12-0x18]; mov [rbp-0x80], edx; mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x00000000133652: movdqu xmm6, [rbx+0x78]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm6; call rax; 
0x00000000112f5b: movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x0000000011395d: movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x00000000112fab: movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000001139ed: movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000133a00: movdqu xmm7, [r13+0x78]; mov [rbp-0x80], edx; mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x00000000133328: movdqu xmm7, [r13-0x18]; mov rdx, r12; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x00000000133723: movdqu xmm7, [r14+0x30]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x000000000923a4: movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000112f64: movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x00000000113969: movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x00000000112fb4: movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000001139f9: movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000835bf: movhps [rax+0x10], xmm0; mov [rax+0x40], rdx; movups [rax], xmm1; ret; 
0x0000000008d758: movhps [rdi+0x18], xmm0; mov [rdi+0x48], rax; movups [rdi+0x8], xmm1; ret; 
0x000000000bc942: movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc962: movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc982: movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bc7cc: movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf5b3: movlpd [rdx+0x8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000bc8b9: movlpd [rdx], xmm0; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000bc8d9: movlpd [rdx], xmm0; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000bc8f9: movlpd [rdx], xmm0; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000bc919: movlpd [rdx], xmm0; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000bc776: movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc7c8: movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc939: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc959: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc979: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4c9: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf54a: movlpd [rdx], xmm0; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000bc772: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc93d: movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95d: movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97d: movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4cd: movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc7c3: movlpd xmm1, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc943: movlps [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc963: movlps [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc983: movlps [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bc7cd: movlps [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf5b4: movlps [rdx+0x8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000bc8ba: movlps [rdx], xmm0; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000bc8da: movlps [rdx], xmm0; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000bc8fa: movlps [rdx], xmm0; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000bc91a: movlps [rdx], xmm0; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000bc777: movlps [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc7c9: movlps [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc93a: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95a: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97a: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4ca: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf54b: movlps [rdx], xmm0; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000bc773: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc93e: movlps xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000bc95e: movlps xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000bc97e: movlps xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000bf4ce: movlps xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bc7c4: movlps xmm1, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x00000000041f84: movmskps eax, xmm0; and eax, 0x8; ret; 
0x000000001a49f1: movnti [r14+0x66], r12d; nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x000000000bfdac: movnti [r8+0x66f0ff3], r10; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000bfdad: movnti [rax+0x66f0ff3], edx; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000c4a4e: movnti [rbx-0x7403e9b4], ecx; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000001a49f2: movnti [rsi+0x66], esp; nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x0000000008f208: movntps [rax+0x18], xmm2; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000017f04e: movq [r8], mm0; lea r11, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eefe: movq [r8], mm0; lea r11, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edae: movq [r8], mm0; lea r11, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec5e: movq [r8], mm0; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb0e: movq [r8], mm0; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9be: movq [r8], mm0; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e86e: movq [r8], mm0; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e71e: movq [r8], mm0; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e683: movq [r8], mm0; lea r11, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5ce: movq [r8], mm0; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e47e: movq [r8], mm0; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e32e: movq [r8], mm0; lea r11, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1de: movq [r8], mm0; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e08e: movq [r8], mm0; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df3e: movq [r8], mm0; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddee: movq [r8], mm0; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c66e: movq [r8], mm0; lea r11, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c51e: movq [r8], mm0; lea r11, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3ce: movq [r8], mm0; lea r11, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c27e: movq [r8], mm0; lea r11, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c12e: movq [r8], mm0; lea r11, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfde: movq [r8], mm0; lea r11, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be8e: movq [r8], mm0; lea r11, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd3e: movq [r8], mm0; lea r11, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca3: movq [r8], mm0; lea r11, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbee: movq [r8], mm0; lea r11, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba9e: movq [r8], mm0; lea r11, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b94e: movq [r8], mm0; lea r11, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b7fe: movq [r8], mm0; lea r11, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6ae: movq [r8], mm0; lea r11, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b55e: movq [r8], mm0; lea r11, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b40e: movq [r8], mm0; lea r11, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017f04f: movq [rax], mm0; lea r11, [rip+0x640b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eeff: movq [rax], mm0; lea r11, [rip+0x64207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edaf: movq [rax], mm0; lea r11, [rip+0x64357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec5f: movq [rax], mm0; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb0f: movq [rax], mm0; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9bf: movq [rax], mm0; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e86f: movq [rax], mm0; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e71f: movq [rax], mm0; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e684: movq [rax], mm0; lea r11, [rip+0x64a82]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5cf: movq [rax], mm0; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e47f: movq [rax], mm0; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e32f: movq [rax], mm0; lea r11, [rip+0x64dd7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1df: movq [rax], mm0; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e08f: movq [rax], mm0; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df3f: movq [rax], mm0; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddef: movq [rax], mm0; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c66f: movq [rax], mm0; lea r11, [rip+0x668d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c51f: movq [rax], mm0; lea r11, [rip+0x66a27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3cf: movq [rax], mm0; lea r11, [rip+0x66b77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c27f: movq [rax], mm0; lea r11, [rip+0x66cc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c12f: movq [rax], mm0; lea r11, [rip+0x66e17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfdf: movq [rax], mm0; lea r11, [rip+0x66f67]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be8f: movq [rax], mm0; lea r11, [rip+0x670b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd3f: movq [rax], mm0; lea r11, [rip+0x67207]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca4: movq [rax], mm0; lea r11, [rip+0x672a2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbef: movq [rax], mm0; lea r11, [rip+0x67357]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba9f: movq [rax], mm0; lea r11, [rip+0x674a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b94f: movq [rax], mm0; lea r11, [rip+0x675f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b7ff: movq [rax], mm0; lea r11, [rip+0x67747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6af: movq [rax], mm0; lea r11, [rip+0x67897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b55f: movq [rax], mm0; lea r11, [rip+0x679e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b40f: movq [rax], mm0; lea r11, [rip+0x67b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000fa00e: movq [rbp+0x2c], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000182772: movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c15fe: movq [rdi+0x10], mm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c246e: movq [rdi+0x10], mm2; lea rax, [rdi+0x20]; ret; 
0x000000000c0c41: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; ret; 
0x000000000c40f1: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000bff2e: movq [rdi+0x10], mm2; ret; 
0x000000000c092e: movq [rdi+0x10], mm2; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c40ce: movq [rdi+0x10], mm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x00000000182df0: movq [rdi+0x1], mm0; movdqu [rdi], xmm1; ret; 
0x000000000c0e85: movq [rdi+0x20], mm6; sub r8, 0x10; jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x00000000182d80: movq [rdi+0x2], mm0; movdqu [rdi], xmm1; ret; 
0x000000000c26e4: movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret; 
0x000000000c0e94: movq [rdi+0x30], mm7; ret; 
0x000000000c4144: movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x00000000182d10: movq [rdi+0x3], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182ca0: movq [rdi+0x4], mm0; movdqu [rdi], xmm1; ret; 
0x00000000092754: movq [rdi+0x4], xmm0; ret; 
0x00000000182c30: movq [rdi+0x5], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182bc0: movq [rdi+0x6], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182b50: movq [rdi+0x7], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182ae0: movq [rdi+0x8], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182a70: movq [rdi+0x9], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182a00: movq [rdi+0xa], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182990: movq [rdi+0xb], mm0; movdqu [rdi], xmm1; ret; 
0x00000000182920: movq [rdi+0xc], mm0; movdqu [rdi], xmm1; ret; 
0x000000001828b0: movq [rdi+0xd], mm0; movdqu [rdi], xmm1; ret; 
0x000000000c159e: movq [rdi+0xd], mm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c240e: movq [rdi+0xd], mm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfece: movq [rdi+0xd], mm2; ret; 
0x000000000c089e: movq [rdi+0xd], mm2; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c406e: movq [rdi+0xd], mm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x00000000182840: movq [rdi+0xe], mm0; movdqu [rdi], xmm1; ret; 
0x000000000c15be: movq [rdi+0xe], mm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c242e: movq [rdi+0xe], mm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfeee: movq [rdi+0xe], mm2; ret; 
0x000000000c08ce: movq [rdi+0xe], mm2; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c408e: movq [rdi+0xe], mm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000001827d0: movq [rdi+0xf], mm0; movdqu [rdi], xmm1; ret; 
0x000000000c15de: movq [rdi+0xf], mm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c244e: movq [rdi+0xf], mm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff0e: movq [rdi+0xf], mm2; ret; 
0x000000000c08fe: movq [rdi+0xf], mm2; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c40ae: movq [rdi+0xf], mm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x00000000181f5c: movq [rdi-0x10], mm0; ret; 
0x00000000181fcc: movq [rdi-0x10], mm1; ret; 
0x00000000182707: movq [rdi-0x11], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182687: movq [rdi-0x12], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001825f7: movq [rdi-0x13], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182577: movq [rdi-0x14], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001824f7: movq [rdi-0x15], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182477: movq [rdi-0x16], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001823f7: movq [rdi-0x17], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182377: movq [rdi-0x18], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001822f7: movq [rdi-0x19], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000000c0d41: movq [rdi-0x1], mm0; ret; 
0x00000000182277: movq [rdi-0x1a], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001821f7: movq [rdi-0x1b], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182177: movq [rdi-0x1c], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001820e7: movq [rdi-0x1d], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000182057: movq [rdi-0x1e], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181fc7: movq [rdi-0x1f], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000181f52: movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000000c2275: movq [rdi], mm0; lea rax, [rdi+0x10]; ret; 
0x000000000c1415: movq [rdi], mm0; lea rax, [rdi+0xf]; ret; 
0x000000000c2288: movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000c0a68: movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000c3ee8: movq [rdi], mm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000c1439: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000c22a9: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000bfd89: movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000c3f09: movq [rdi], mm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c1425: movq [rdi], mm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000bfd75: movq [rdi], mm0; mov [rdi+0x10], dh; ret; 
0x000000000c1478: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c22e8: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000c1498: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000bfdc8: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000c230b: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000c0abb: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000bfdb8: movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000c3f48: movq [rdi], mm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000c14f9: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2369: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000c1519: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000bfe49: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000bfe29: movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x000000000c3fc9: movq [rdi], mm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c155c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000c23cc: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000bfe8c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000c238c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000c0b3c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000c153d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000c23ad: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000bfe6d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000c157c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000c23ec: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000bfeac: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c14b9: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000c2329: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000bfde9: movq [rdi], mm0; mov [rdi+0xe], rcx; ret; 
0x000000000c3f89: movq [rdi], mm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c1458: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c22c8: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000bfda8: movq [rdi], mm0; mov [rdi+0xf], ecx; ret; 
0x000000000c3f28: movq [rdi], mm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000c14d9: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c2349: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000bfe09: movq [rdi], mm0; mov [rdi+0xf], rcx; ret; 
0x000000000c3fa9: movq [rdi], mm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000c15fa: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c246a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000c0c3d: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000bff2a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c40ca: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000c159a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c240a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfeca: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c406a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000c15ba: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c242a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfeea: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c408a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000c15da: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c244a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff0a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c40aa: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000bfd65: movq [rdi], mm0; ret; 
0x000000000c06b5: movq [rdi], mm0; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c3ed5: movq [rdi], mm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000001827d5: movq [rdi], mm1; ret; 
0x000000001659e9: movq mm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000166319: movq mm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x00000000162be9: movq mm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000162cd1: movq mm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x00000000165ac1: movq mm0, [rcx]; mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x000000001663a9: movq mm0, [rcx]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x0000000015ee01: movq mm0, [rdi+0x38]; mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x000000000b56b3: movq mm0, [rdi+rsi]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x00000000167455: movq mm0, [rip+0x7b224]; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x00000000119588: movq mm0, [rsi+0x58]; movdqu xmm1, [rsi+0x68]; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x000000000c0a61: movq mm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000bfd81: movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000bfdb1: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000bfda1: movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000bfe21: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000bfde1: movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000bfe01: movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000c2271: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c1411: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000c1421: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000bfd71: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000bfd61: movq mm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000c3ed1: movq mm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000bff21: movq mm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000bfec1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000bfee1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000bff01: movq mm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x00000000143000: movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x00000000059c00: movq mm0, [rsp-0x18]; ret; 
0x00000000041f51: movq mm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000042097: movq mm0, mm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000042015: movq mm0, mm2; pop rbp; ret; 
0x000000000416ce: movq mm0, rax; ret; 
0x000000000eabec: movq mm0, rdi; punpcklqdq xmm0, xmm0; movups [rax+0x2d8], xmm0; mov eax, 0x111; syscall; 
0x000000001330b9: movq mm1, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x0000000015edd1: movq mm1, [rdi+0x20]; mov dword ptr [rsi], 0x6; movups [rsi+0x8], xmm1; ret; 
0x000000001663b9: movq mm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad9: movq mm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162ce1: movq mm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x0000000011958d: movq mm1, [rsi+0x68]; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x0000000015fcc0: movq mm1, rax; mov rax, [rdi+0x8]; punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x000000000414fb: movq mm1, rax; subsd xmm2, xmm1; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000041591: movq mm1, rdx; movapd xmm0, xmm1; ret; 
0x00000000041526: movq mm1, rsi; movsd [rdx], xmm1; ret; 
0x00000000133255: movq mm2, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x000000001430a2: movq mm2, [rcx+r9+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000001430a3: movq mm2, [rcx+rcx+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000001663e1: movq mm2, [rcx]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x00000000165af1: movq mm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x000000000c15f5: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c2465: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000bff25: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000c1595: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c2405: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfec5: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c15b5: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000c2425: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000bfee5: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000c15d5: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c2445: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000bff05: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x0000000004200d: movq mm2, mm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000041496: movq mm2, rsi; movapd xmm0, xmm2; ret; 
0x00000000132f23: movq mm3, [rbx-0x18]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm3; call rax; 
0x000000001663f1: movq mm3, [rdi+0x20]; mov eax, 0x1; movups [rcx], xmm3; ret; 
0x00000000156f25: movq mm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x0000000013319b: movq mm4, [rbx+0x78]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm4; call rax; 
0x000000001663d1: movq mm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x00000000133137: movq mm5, [r12-0x18]; mov [rbp-0x80], edx; mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x00000000133138: movq mm5, [rsp-0x18]; mov [rbp-0x80], edx; mov rdx, r13; movups [rbp-0x78], xmm5; call rax; 
0x00000000133653: movq mm6, [rbx+0x78]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm6; call rax; 
0x00000000112f5c: movq mm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x0000000011395e: movq mm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x00000000112fac: movq mm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000001139ee: movq mm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000133a01: movq mm7, [r13+0x78]; mov [rbp-0x80], edx; mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x00000000133329: movq mm7, [r13-0x18]; mov rdx, r12; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x00000000133724: movq mm7, [r14+0x30]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x000000000923a5: movq mm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000133a02: movq mm7, [rbp+0x78]; mov [rbp-0x80], edx; mov rdx, rbx; movups [rbp-0x78], xmm7; call rax; 
0x0000000013332a: movq mm7, [rbp-0x18]; mov rdx, r12; mov dword ptr [rbp-0x80], 0x0; movups [rbp-0x78], xmm7; call rax; 
0x00000000112f65: movq mm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x0000000011396a: movq mm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x00000000133725: movq mm7, [rsi+0x30]; mov [rbp-0x80], edx; mov rdx, r12; movups [rbp-0x78], xmm7; call rax; 
0x00000000112fb5: movq mm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000001139fa: movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000045e16: movq rax, mm0; ret; 
0x00000000045e15: movq rax, xmm0; ret; 
0x000000000413df: movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000413de: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000416cd: movq xmm0, rax; ret; 
0x000000000eabeb: movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups [rax+0x2d8], xmm0; mov eax, 0x111; syscall; 
0x0000000015fcbf: movq xmm1, rax; mov rax, [rdi+0x8]; punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x000000000414fa: movq xmm1, rax; subsd xmm2, xmm1; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000041590: movq xmm1, rdx; movapd xmm0, xmm1; ret; 
0x00000000041525: movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x00000000041495: movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000d904f: movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x0000000010331f: movsb [rdi], [rsi]; and al, 0x98; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000016c241: movsb [rdi], [rsi]; cld; jmp qword ptr [rsi+0x66]; 
0x000000000c498e: movsb [rdi], [rsi]; cld; ret; 
0x00000000154e48: movsb [rdi], [rsi]; inc dword ptr [rbp+0x4c1078c0]; mov eax, esp; pop r12; ret; 
0x00000000096618: movsb [rdi], [rsi]; mov cl, 0xff; call qword ptr [rax+0x24448b48]; 
0x0000000011c968: movsb [rdi], [rsi]; mov edx, 0x148fff0; ret; 
0x000000000c4980: movsb [rdi], [rsi]; ret; 
0x00000000090572: movsb [rdi], [rsi]; sbb [rax], al; push r10; call rax; 
0x0000000015c2de: movsb [rdi], [rsi]; std; jmp qword ptr [rsi+0x66]; 
0x0000000015c2df: movsb [rdi], [rsi]; std; jmp qword ptr [rsi+0x66]; 
0x000000001a0be5: movsb [rdi], [rsi]; vmovdqu [r8], ymm0; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001af22e: movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c80: movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x000000000a7599: movsd [rbx+0x38], xmm0; and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x00000000046a56: movsd [rbx], xmm0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a828b: movsd [rdi], [rsi]; add [rax], eax; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x00000000054de5: movsd [rdi], [rsi]; enter 0x894c, 0x7; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x000000000aa7e7: movsd [rdi], [rsi]; fdivr st(7), st; dec dword ptr [rax-0x77]; ret; 
0x000000000f9dc7: movsd [rdi], [rsi]; in eax, 0xf2; jmp qword ptr [rsi+0xf]; 
0x00000000156e6f: movsd [rdi], [rsi]; jmp qword ptr [rsi+0xf]; 
0x0000000011ed67: movsd [rdi], [rsi]; mov al, [0x48018964d8f7000f]; or eax, 0xffffffff; ret; 
0x0000000011ec67: movsd [rdi], [rsi]; mov eax, [0x48018964d8f7000f]; or eax, 0xffffffff; ret; 
0x0000000003c8e7: movsd [rdi], [rsi]; mov ebx, 0x8348fffe; ret; 
0x0000000015d34f: movsd [rdi], [rsi]; or al, 0x0; add rsp, 0x8; ret; 
0x00000000074dd7: movsd [rdi], [rsi]; push 0xffffff7; adc esi, 0xe9fffff9; loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x00000000054e22: movsd [rdi], [rsi]; ret; 
0x0000000007d335: movsd [rdi], [rsi]; sbb [rax], eax; mov rax, [rax+rdi*8]; ret; 
0x00000000042767: movsd [rdi], [rsi]; sbb ax, 0xf700; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000127067: movsd [rdi], [rsi]; sbb eax, 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000014b0e7: movsd [rdi], [rsi]; shr ebp, cl; dec dword ptr [rax+0x39]; ret; 
0x0000000009f88e: movsd [rdi], [rsi]; stc; jmp qword ptr [rsi+0x2e]; 
0x0000000004e347: movsd [rdi], [rsi]; std; jmp qword ptr [rsi+0xf]; 
0x000000000414be: movsd [rdx], xmm1; and rsi, rax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000414e3: movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000041491: movsd [rdx], xmm1; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x0000000004152a: movsd [rdx], xmm1; ret; 
0x000000000d8f6c: movsd xmm0, [rsp-0x10]; ret; 
0x000000000415d6: movsd xmm1, [rip+0x1a0ac2]; orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415a8: movsd xmm1, [rip+0x1a0b00]; orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000174659: movsq [rdi], [rsi]; ret; 
0x0000000004186d: movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x0000000004187e: movss [rdi], xmm0; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000001baaac: movss xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x00000000041814: movss xmm3, [rip+0x18b064]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x0000000012e2a3: movsx eax, bl; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000016cb70: movsx eax, byte ptr [rsi]; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016bb21: movsx eax, ch; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016ca50: movsx eax, word ptr [rsi]; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016ba21: movsx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000005d5ee: movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja short 0x000000000005d5d8; mov eax, r8d; ret; 
0x000000000a8592: movsx edx, al; mov eax, edx; ret; 
0x000000000b1234: movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000b1230; ret; 
0x0000000016bb20: movsx rax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000016ba20: movsx rax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000078c2b: movsxd eax, [rax+rdx*4]; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x00000000126f95: movsxd eax, [rax]; add [rax], al; syscall; 
0x00000000113436: movsxd eax, [rbp+rax*4]; add rax, r13; notrack jmp rax; 
0x0000000013f1b9: movsxd eax, [rbx]; add [rcx+rcx*4-0x19], cl; call rbx; 
0x0000000003c47c: movsxd eax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006aeea: movsxd eax, [rcx+rdi*4]; add rax, rcx; notrack jmp rax; 
0x0000000003a9f4: movsxd eax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x000000000d8009: movsxd eax, [rcx]; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x000000000f7abe: movsxd eax, [rcx]; add rax, rcx; notrack jmp rax; 
0x000000001b7aee: movsxd eax, [rcx]; xor edi, r13d; add rax, rcx; notrack jmp rax; 
0x000000001b78dc: movsxd eax, [rcx]; xor edi, r13d; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x0000000015f23a: movsxd eax, [rdi+0x18]; cmp eax, 0x3; jbe short 0x000000000015f250; mov eax, 0x2; ret; 
0x000000000dd996: movsxd eax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000154d41: movsxd eax, [rdi+rsi*4]; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x0000000008c2c6: movsxd eax, [rdx+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000002a3b2: movsxd eax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed42c: movsxd eax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x00000000063108: movsxd eax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000c52db: movsxd eax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000f65bd: movsxd eax, [rdx+rdx*4]; add rax, rdx; notrack jmp rax; 
0x000000000eca34: movsxd eax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x0000000018d5a9: movsxd eax, [rdx]; add [rax], al; ret; 
0x000000000f7a0a: movsxd eax, [rdx]; add rax, rdx; notrack jmp rax; 
0x000000000736aa: movsxd eax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000007dcb9: movsxd eax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000101c0c: movsxd eax, [rsi+rbx*4]; add rax, rsi; notrack jmp rax; 
0x0000000006b8c2: movsxd eax, [rsi+rdi*4]; add rax, rsi; notrack jmp rax; 
0x0000000015fc01: movsxd eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000010f8fe: movsxd eax, [rsp+rax*4]; add rax, r12; notrack jmp rax; 
0x0000000019879f: movsxd eax, ecx; ret; 
0x000000000ca619: movsxd ebp, [rax-0x7cb70008]; ret; 
0x00000000128f46: movsxd ebx, ebx; mov [rip+0xf04f1], rbx; pop rbx; ret; 
0x00000000128f2c: movsxd ebx, ebx; mov [rip+0xf050b], rbx; pop rbx; ret; 
0x000000000778bc: movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x000000000c03ab: movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001803cc: movsxd ecx, [rbx+rcx*4]; add r9, r11; notrack jmp r9; 
0x0000000017ae1c: movsxd ecx, [rbx+rcx*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017adb5: movsxd ecx, [rbx+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x000000000bfb2a: movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000007a67c: movsxd ecx, [rbx+rsi*4]; mov r8, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074ba8: movsxd ecx, [rbx+rsi*4]; mov r8, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000000379cd: movsxd ecx, [rdi+rcx*4]; add rcx, rdi; notrack jmp rcx; 
0x0000000011bb09: movsxd ecx, [rdi-0x9]; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000073060: movsxd ecx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x000000000b1a32: movsxd ecx, [rdx+rcx*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192eae: movsxd ecx, [rdx+rcx*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3ae: movsxd ecx, [rdx+rcx*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001b799d: movsxd ecx, [rdx]; add r9, r10; notrack jmp r9; 
0x000000000e3150: movsxd ecx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000001987d3: movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000198901: movsxd ecx, ecx; lea rax, [rdi+rcx]; ret; 
0x000000000b152a: movsxd edi, [rax+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x0000000013319d: movsxd edi, [rax-0x77]; push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esp; call rax; 
0x000000000b1395: movsxd edi, [rcx+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x0000000014d6ed: movsxd edi, [rip+0x88de5]; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x0000000008efec: movsxd edi, [rsi-0x1]; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000160333: movsxd edi, ebp; jmp qword ptr [rsi+0x2e]; 
0x000000000b182c: movsxd edi, edi; lea rax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b184c: movsxd edi, edi; lea rax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x0000000007d32f: movsxd edi, edi; lea rax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x0000000003a319: movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000039c3c: movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000003a07c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a05c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a0fc: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a03c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fbc: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f7c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x00000000039ffc: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f5c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a01c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fdc: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039f9c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f3c: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a2f9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a2d9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a199: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a2b9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a239: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a1f9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a279: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a1d9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a299: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a259: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a219: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a1b9: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000000ea676: movsxd edi, edx; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x000000000a75a4: movsxd edi, esi; mov [rbx], rdi; call rcx; 
0x0000000008c44a: movsxd edx, [rax+rax]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c306: movsxd edx, [rax+rax]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000008c3aa: movsxd edx, [rax+rax]; movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x000000000a75a0: movsxd edx, [rax-0x2]; movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x00000000112a14: movsxd edx, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000101289: movsxd edx, [rbp+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x0000000003ff49: movsxd edx, [rbx+rdx*4]; add r10, r11; notrack jmp r10; 
0x0000000017aef0: movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000007d3e4: movsxd edx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000104c81: movsxd edx, [rdi+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x00000000053c9c: movsxd edx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b146a: movsxd edx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x0000000017dca9: movsxd edx, [rsi+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000003fc73: movsxd edx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000001b7b3a: movsxd edx, [rsp+rdx*4]; add r10, r12; notrack jmp r10; 
0x00000000142ef7: movsxd edx, eax; add r10, rdx; mov [r9], r10; ret; 
0x00000000077749: movsxd edx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000080818: movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000001432e6: movsxd edx, ecx; ret; 
0x00000000142d19: movsxd edx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x00000000075a3d: movsxd esi, [rax+rcx*4]; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075471: movsxd esi, [rax+rcx*4]; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x000000000519c2: movsxd esi, [rax+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x0000000007b9ba: movsxd esi, [rbx+rcx*4]; lea rbx, [rip-0x984]; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076320: movsxd esi, [rbx+rcx*4]; lea rbx, [rip-0xb3a]; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000076bc6: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d66: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c724: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7dc: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a8e: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dbf: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e18: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b842: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b88c: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d4: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b924: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076190: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076280: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb12: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb66: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bbb4: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076376: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc10: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076440: movsxd esi, [rbx+rsi*4]; lea rbx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007ba62: movsxd esi, [rdi+rcx*4]; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x0000000007dd57: movsxd esi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x00000000075f89: movsxd esi, [rsi+rcx*4]; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x00000000175deb: movsxd esi, esi; and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x000000000a767a: movsxd esi, esi; movups [rbx+0x38], xmm0; mov [rbx], rsi; call rax; 
0x00000000161919: movsxd esp, [rbx-0x3f7b0000]; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001279b6: movsxd esp, eax; add rsp, 0x10; mov rax, r12; pop r12; ret; 
0x00000000072330: movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000003ff48: movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x000000001b7b39: movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x000000001279b5: movsxd r12, eax; add rsp, 0x10; mov rax, r12; pop r12; ret; 
0x0000000007232f: movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000001b799c: movsxd r9, [r10+r12*4]; add r9, r10; notrack jmp r9; 
0x000000000b1a31: movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000192ead: movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3ad: movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001803cb: movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x0000000017ae1b: movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017adb4: movsxd r9, [r11+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x0000000008c2c5: movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000010f8fd: movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x00000000113435: movsxd rax, [r13+rax*4]; add rax, r13; notrack jmp rax; 
0x00000000078c2a: movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x000000000f7abd: movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000001b7aed: movsxd rax, [rcx+r12*4]; xor edi, r13d; add rax, rcx; notrack jmp rax; 
0x000000001b78db: movsxd rax, [rcx+r12*4]; xor edi, r13d; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x0000000006aee9: movsxd rax, [rcx+r15*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c47b: movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003a9f3: movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x0000000015f239: movsxd rax, [rdi+0x18]; cmp eax, 0x3; jbe short 0x000000000015f250; mov eax, 0x2; ret; 
0x000000000dd995: movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000154d40: movsxd rax, [rdi+rsi*4]; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x000000000f65bc: movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7a09: movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f091c: movsxd rax, [rdx+r13*4]; add rax, rdx; notrack jmp rax; 
0x000000000f2584: movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x0000000002a3b1: movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ed42b: movsxd rax, [rdx+rbp*4]; add rax, rdx; notrack jmp rax; 
0x00000000063107: movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x000000000c52da: movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000eca33: movsxd rax, [rdx+rsi*4]; add rax, rdx; notrack jmp rax; 
0x00000000101c0b: movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x0000000006b8c1: movsxd rax, [rsi+r15*4]; add rax, rsi; notrack jmp rax; 
0x000000000736a9: movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000007dcb8: movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000015fc00: movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000019879e: movsxd rax, ecx; ret; 
0x00000000128f45: movsxd rbx, ebx; mov [rip+0xf04f1], rbx; pop rbx; ret; 
0x00000000128f2b: movsxd rbx, ebx; mov [rip+0xf050b], rbx; pop rbx; ret; 
0x000000000778bb: movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x000000000c03aa: movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb29: movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000007a67b: movsxd rcx, [rbx+r14*4]; mov r8, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074ba7: movsxd rcx, [rbx+r14*4]; mov r8, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000000379cc: movsxd rcx, [rdi+r9*4]; add rcx, rdi; notrack jmp rcx; 
0x0000000007305f: movsxd rcx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x000000000e314f: movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000001987d2: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000198900: movsxd rcx, ecx; lea rax, [rdi+rcx]; ret; 
0x000000000b1529: movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x000000000b1394: movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x0000000014d6ec: movsxd rdi, [rip+0x88de5]; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x000000000b182b: movsxd rdi, edi; lea rax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b184b: movsxd rdi, edi; lea rax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x0000000007d32e: movsxd rdi, edi; lea rax, [rip+0x19a508]; mov rax, [rax+rdi*8]; ret; 
0x0000000003a318: movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000039c3b: movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000003a07b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a05b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a0fb: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a03b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fbb: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f7b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x00000000039ffb: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f5b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a01b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fdb: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039f9b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f3b: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a2f8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a2d8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a198: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a2b8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a238: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a1f8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a278: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a1d8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a298: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a258: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a218: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a1b8: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000000a75a3: movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x0000000017aeef: movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000101288: movsxd rdx, [r13+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x00000000104c80: movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x0000000007d3e3: movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000162cb8: movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000053c9b: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b1469: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x0000000003fc72: movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000142ef6: movsxd rdx, eax; add r10, rdx; mov [r9], r10; ret; 
0x0000000007d203: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000080817: movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000001432e5: movsxd rdx, ecx; ret; 
0x00000000142d18: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x00000000077748: movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000075a3c: movsxd rsi, [r8+rcx*4]; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075470: movsxd rsi, [r8+rcx*4]; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x000000000519c1: movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x0000000007b9b9: movsxd rsi, [rbx+rcx*4]; lea rbx, [rip-0x984]; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x0000000007631f: movsxd rsi, [rbx+rcx*4]; lea rbx, [rip-0xb3a]; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000076bc5: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d65: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c723: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7db: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a8d: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dbe: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e17: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b841: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b88b: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d3: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b923: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007618f: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007627f: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb11: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb65: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bbb3: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076375: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc0f: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007643f: movsxd rsi, [rbx+rsi*4]; lea rbx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007ba61: movsxd rsi, [rdi+rcx*4]; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x0000000007dd56: movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x00000000075f88: movsxd rsi, [rsi+rcx*4]; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x00000000175dea: movsxd rsi, esi; and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x000000000a7679: movsxd rsi, esi; movups [rbx+0x38], xmm0; mov [rbx], rsi; call rax; 
0x000000001563c4: movups [r8+0xc8], xmm0; mov rax, r8; add rsp, 0x8; ret; 
0x000000000eabf4: movups [rax+0x2d8], xmm0; mov eax, 0x111; syscall; 
0x0000000008441a: movups [rax+0x40], xmm0; pop rbx; ret; 
0x00000000156f1d: movups [rax+0xa0], xmm2; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000156f36: movups [rax+0xb0], xmm3; ret; 
0x000000001563c5: movups [rax+0xc8], xmm0; mov rax, r8; add rsp, 0x8; ret; 
0x000000000c50ab: movups [rax+rdx-0x10], xmm0; ret; 
0x000000000846b5: movups [rax], xmm0; mov [rax], rdx; xor eax, eax; ret; 
0x000000000c50a8: movups [rax], xmm0; movups [rax+rdx-0x10], xmm0; ret; 
0x00000000083601: movups [rax], xmm0; ret; 
0x00000000162ce5: movups [rax], xmm1; mov eax, 0x1; ret; 
0x000000000835c6: movups [rax], xmm1; ret; 
0x000000001330c0: movups [rbp-0x78], xmm1; call rcx; 
0x0000000013325c: movups [rbp-0x78], xmm2; call r8; 
0x00000000132f2d: movups [rbp-0x78], xmm3; call rax; 
0x000000001331a5: movups [rbp-0x78], xmm4; call rax; 
0x00000000133143: movups [rbp-0x78], xmm5; call rax; 
0x0000000013365d: movups [rbp-0x78], xmm6; call rax; 
0x00000000133338: movups [rbp-0x78], xmm7; call rax; 
0x0000000008a642: movups [rbx+0x18], xmm0; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x000000000a7a00: movups [rbx+0x18], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000008a646: movups [rbx+0x28], xmm0; pop rbx; ret; 
0x000000000a759b: movups [rbx+0x38], xmm0; and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx], rdi; call rcx; 
0x000000000a767c: movups [rbx+0x38], xmm0; mov [rbx], rsi; call rax; 
0x0000000008dd95: movups [rbx+0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000002d03b: movups [rbx+0x48], xmm0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008d865: movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000008a63e: movups [rbx+0x8], xmm0; movups [rbx+0x18], xmm0; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x0000000008a745: movups [rbx+0x8], xmm0; pop rbx; ret; 
0x0000000008b5f3: movups [rbx+0x8], xmm1; pop rbx; pop rbp; pop r12; ret; 
0x00000000046a57: movups [rbx], xmm0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000c4b8b: movups [rcx], xmm0; ret; 
0x00000000165ae2: movups [rcx], xmm1; ret; 
0x00000000165afa: movups [rcx], xmm2; ret; 
0x000000001663fa: movups [rcx], xmm3; ret; 
0x000000001663da: movups [rcx], xmm4; ret; 
0x00000000112a8d: movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c511b: movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; ret; 
0x00000000119591: movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x000000000c4a7e: movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4bee: movups [rdi+0x10], xmm5; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x0000000016ce6d: movups [rdi+0x18], xmm0; ret; 
0x00000000112a91: movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c511f: movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; ret; 
0x00000000119595: movups [rdi+0x20], xmm1; ret; 
0x000000001663e9: movups [rdi+0x20], xmm2; ret; 
0x000000000c4bf2: movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x00000000112a95: movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000c5123: movups [rdi+0x30], xmm0; ret; 
0x000000000c4bf6: movups [rdi+0x30], xmm7; movups [rdx+rdi-0x10], xmm8; ret; 
0x00000000112a99: movups [rdi+0x40], xmm0; ret; 
0x00000000112fb0: movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x00000000092626: movups [rdi+0x70], xmm7; pop rbx; pop rbp; pop r12; ret; 
0x00000000112fb9: movups [rdi+0x78], xmm7; ret; 
0x0000000008d799: movups [rdi+0x8], xmm0; ret; 
0x0000000008d75e: movups [rdi+0x8], xmm1; ret; 
0x000000001139f2: movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000001139fe: movups [rdi+0xf8], xmm7; ret; 
0x00000000143003: movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000c500c: movups [rdi+rdx-0x10], xmm0; movups [rdi], xmm0; ret; 
0x000000000c4916: movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000c4a82: movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4da4: movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4adb: movups [rdi+rdx-0x10], xmm4; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4d9f: movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4a87: movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4ae0: movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4d9a: movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4ae5: movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c4d95: movups [rdi+rdx-0x40], xmm0; movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4aea: movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000c50b5: movups [rdi-0x10], xmm0; ret; 
0x000000000c50b1: movups [rdi-0x20], xmm0; movups [rdi-0x10], xmm0; ret; 
0x0000000009141a: movups [rdi], xmm0; mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000004186e: movups [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x0000000004187f: movups [rdi], xmm0; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000000c5118: movups [rdi], xmm0; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; ret; 
0x000000000c4a7b: movups [rdi], xmm0; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000c4913: movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x0000000004673b: movups [rdi], xmm0; ret; 
0x000000000c4b83: movups [rdx+0x10], xmm7; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x000000000c4b7f: movups [rdx+0x20], xmm6; movups [rdx+0x10], xmm7; movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x0000000009282c: movups [rdx+0x80], xmm7; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009e6f5: movups [rdx+0x8], xmm0; cmp eax, 0x2; je short 0x000000000009e71b; ret; 
0x0000000009e016: movups [rdx+0x8], xmm0; je short 0x000000000009e03b; ret; 
0x000000000c4bfb: movups [rdx+rdi-0x10], xmm0; ret; 
0x000000000c4bfa: movups [rdx+rdi-0x10], xmm8; ret; 
0x000000000c4b88: movups [rdx], xmm0; movups [rcx], xmm0; ret; 
0x000000000414bf: movups [rdx], xmm1; and rsi, rax; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x000000000414e4: movups [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000041492: movups [rdx], xmm1; movq xmm2, rsi; movapd xmm0, xmm2; ret; 
0x0000000004152b: movups [rdx], xmm1; ret; 
0x000000000c4b87: movups [rdx], xmm8; movups [rcx], xmm0; ret; 
0x00000000155b82: movups [rip+0xcdb5f], xmm4; call rbx; 
0x000000000923a0: movups [rsi+0x60], xmm6; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000112f60: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x00000000113965: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000923ae: movups [rsi+0x70], xmm7; ret; 
0x000000001069d5: movups [rsi+0x8], xmm0; ret; 
0x0000000015eddb: movups [rsi+0x8], xmm1; ret; 
0x000000001430a8: movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000001430a9: movups [rsi+rcx+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000567bf: movups [rsi], xmm0; mov [rdi], eax; mov eax, 0x2; ret; 
0x000000001659ed: movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000016631b: movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x00000000162bf0: movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x000000000463cb: movups [rsi], xmm0; sub edi, 0x1; jns short 0x0000000000046391; xor eax, eax; ret; 
0x00000000119f8e: movups [rsp+0x11], xmm4; syscall; 
0x00000000113198: movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x0000000016902f: movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000016d267: movups [rsp+0x18], xmm0; call r8; 
0x00000000169333: movups [rsp+0x18], xmm1; movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x00000000169338: movups [rsp+0x38], xmm0; call qword ptr [rax+0x18]; 
0x000000000425d9: movups [rsp+0x78], xmm6; movups [rsp+0x88], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000000425de: movups [rsp+0x88], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x0000000016955b: movups [rsp+0xb8], xmm2; call rax; 
0x000000001695f1: movups [rsp+0xb8], xmm3; call qword ptr [rax+0x18]; 
0x0000000015e404: movups [rsp], xmm2; call qword ptr [rax]; 
0x000000001baaad: movups xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x000000000d8f6d: movups xmm0, [rsp-0x10]; ret; 
0x000000000415d7: movups xmm1, [rip+0x1a0ac2]; orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415a9: movups xmm1, [rip+0x1a0b00]; orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000c490e: movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x00000000041815: movups xmm3, [rip+0x18b064]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x0000000016d30d: movzx eax, al; add rsp, 0x18; ret; 
0x00000000116115: movzx eax, al; add rsp, 0x58; ret; 
0x00000000160ba4: movzx eax, al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009d59a: movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x000000000d6b53: movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x000000000ed17e: movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000009125b: movzx eax, al; mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000090bd8: movzx eax, al; mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x0000000008c2c2: movzx eax, al; movsxd rax, [r10+rax*4]; add rax, r10; notrack jmp rax; 
0x0000000010f8fa: movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x0000000003c478: movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000dd992: movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x00000000062f81: movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ded92: movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x00000000108e14: movzx eax, al; neg eax; ret; 
0x00000000160894: movzx eax, al; pop r12; ret; 
0x00000000106a75: movzx eax, al; pop rbp; pop r12; pop r13; ret; 
0x0000000015f6e3: movzx eax, al; pop rbp; pop r12; ret; 
0x0000000011ce7d: movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000042f5f: movzx eax, al; ret; 
0x000000000b5304: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000116302: movzx eax, al; sbb eax, 0x0; ret; 
0x00000000116e53: movzx eax, al; shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x0000000009d531: movzx eax, al; sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000014e584: movzx eax, ax; add rsp, 0x28; ret; 
0x0000000008cea3: movzx eax, bl; pop rbx; pop rbp; pop r12; ret; 
0x0000000016bbb0: movzx eax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000001aec18: movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000199e90: movzx eax, byte ptr [rax+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000001b1c89: movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x00000000198dc2: movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b97: movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x00000000198cdc: movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000b2f9d: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000198c77: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b39: movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x00000000198ca0: movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b69: movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x00000000198cc0: movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b3110: movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x00000000199127: movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000cf802: movzx eax, byte ptr [rax+rdx]; cmp r8d, 0xff; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x0000000008d9e0: movzx eax, byte ptr [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008a086: movzx eax, byte ptr [rax]; ret; 
0x00000000142290: movzx eax, byte ptr [rdi+0x1]; lea rax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000001430ca: movzx eax, byte ptr [rdi+0x1]; shl eax, 0x3; shr rax, 0x4; and eax, 0x7f; ret; 
0x00000000109340: movzx eax, byte ptr [rdi+0x9]; and eax, 0xf; ret; 
0x000000001a2d80: movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000199d09: movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000001aeb07: movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x00000000199d28: movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2dbd: movzx eax, byte ptr [rdi+rax-0x10]; sub eax, ecx; ret; 
0x000000001aec77: movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000199ecb: movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000001aec64: movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000199eab: movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2d9f: movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000199ce8: movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x000000001aeadb: movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x00000000199d5f: movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000001a3544: movzx eax, byte ptr [rdi+rcx]; movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x00000000192f3b: movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000001b19ae: movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x00000000198b14: movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000001b19bf: movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x00000000198b34: movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b19d0: movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x00000000198b54: movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000aa799: movzx eax, byte ptr [rdi+rdx]; mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x00000000000aa790; ret; 
0x000000000b2e33: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000198afa: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000b2dc8: movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001a5d00: movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x000000001a60ba: movzx eax, byte ptr [rdi-0x1]; cmp al, [rsi-0x1]; jne 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a6212: movzx eax, byte ptr [rdi-0x1]; cmp al, [rsi-0x1]; jne short 0x00000000001a6235; xor eax, eax; ret; 
0x000000001a5ce7: movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x000000001a5d60: movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x000000001a5d50: movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001a5d40: movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d30: movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d20: movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d10: movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x000000001a2d65: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000b52e1: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000b2de3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000199303: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000009b77c: movzx eax, byte ptr [rdx+0x971]; mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000007369e: movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x43c]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x00000000154dcb: movzx eax, byte ptr [rdx]; add eax, esi; sub rcx, 0x1; jne short 0x0000000000154d58; ret; 
0x0000000016cc00: movzx eax, byte ptr [rsi]; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016bbb1: movzx eax, ch; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000c5041: movzx eax, dh; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x00000000136808: movzx eax, dh; or eax, edi; bswap eax; ret; 
0x0000000002d0b5: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000001367eb: movzx eax, si; or eax, edi; bswap eax; ret; 
0x000000000c5040: movzx eax, sil; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x00000000136807: movzx eax, sil; or eax, edi; bswap eax; ret; 
0x0000000002d0b4: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000003a347: movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a082: movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a062: movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a102: movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a042: movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fc2: movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f82: movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a002: movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f62: movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a022: movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fe2: movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039fa2: movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f42: movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000012a51b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a483: movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x00000000129f9b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012a3eb: movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012a16b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a03b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012a2ab: movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x00000000129efb: movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012a34b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012a20b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x00000000129e5b: movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000133c06: movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000112fc4: movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x0000000016cae0: movzx eax, word ptr [rsi]; lea rsi, [rsp+0x4]; mov [rsp+0x4], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000016bab0: movzx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000630fd: movzx ebx, bl; mov r10, [rbp-0x610]; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x00000000063a3a: movzx ebx, bl; movsxd rax, [rdx+rbx*4]; add rax, rdx; notrack jmp rax; 
0x0000000014d4d5: movzx ecx, al; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000001b78e3: movzx ecx, bh; add rax, rcx; notrack jmp rax; 
0x00000000075f84: movzx ecx, byte ptr [rax+rcx]; movsxd rsi, [rsi+rcx*4]; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x000000001618fb: movzx ecx, byte ptr [rdi+0x7]; and ecx, 0x7f; movzx edx, byte ptr [rdx+rcx]; mov [rdi+0x7], dl; ret; 
0x0000000019a2a2: movzx ecx, byte ptr [rdi+rdx-0x1]; sub cl, [rsi+rdx-0x1]; or eax, ecx; ret; 
0x00000000142e38: movzx ecx, byte ptr [rdx+0x1]; add rdx, 0x2; mov [r8], ecx; mov [r9], rdx; ret; 
0x000000001a2d7b: movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000199d04: movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000001aeb03: movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x00000000199d24: movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001aec13: movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000199e8b: movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2db8: movzx ecx, byte ptr [rsi+rax-0x10]; movzx eax, byte ptr [rdi+rax-0x10]; sub eax, ecx; ret; 
0x000000001aec72: movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000199ec6: movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000001aec5f: movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000199ea6: movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2d9b: movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000199ce4: movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x000000001aeae0: movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x00000000199d64: movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000001a3548: movzx ecx, byte ptr [rsi+rcx]; sub eax, ecx; ret; 
0x000000000c42ea: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c42e0; ret; 
0x000000000c439a: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c4390; ret; 
0x000000000c465a: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000c4650; sub rax, 0x1; ret; 
0x000000000b2dc4: movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001b1dbd: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b3416: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b1cb7: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne short 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b32cc: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne short 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000000b2de0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000199300: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000001a2d68: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000b15df: movzx ecx, byte ptr [rsp+0xe]; mov [rax+0x6], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1578: movzx ecx, byte ptr [rsp-0x6]; mov [rax+0x2], cl; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b15a6: movzx ecx, byte ptr [rsp-0xc]; mov [rax+0x4], cl; lea rax, [rax+rdx-0x1]; ret; 
0x0000000014e71e: movzx ecx, word ptr [rsi+0x2]; xor eax, eax; cmp [rdi+0x2], cx; je short 0x000000000014e730; ret; 
0x000000001b01b0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001b13b0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019e390: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000001b3ae0: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x000000000b15be: movzx ecx, word ptr [rsp-0x14]; mov [rax+0x4], cx; lea rax, [rax+rdx-0x1]; ret; 
0x000000001367a0: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000012817f: movzx edi, di; lea rax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x0000000013679f: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000125628: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000104c7b: movzx edx, byte ptr [r14+0x30]; movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x00000000061b52: movzx edx, byte ptr [r14+rcx]; mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x00000000101280: movzx edx, byte ptr [r15+0x8]; mov rax, rdx; movsxd rdx, [r13+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x000000000f4196: movzx edx, byte ptr [r9+rcx]; mov byte ptr [rax+0x8], 0x1; mov [rax], dl; mov eax, 0x1; ret; 
0x000000000f4197: movzx edx, byte ptr [rcx+rcx]; mov byte ptr [rax+0x8], 0x1; mov [rax], dl; mov eax, 0x1; ret; 
0x000000000404e8: movzx edx, byte ptr [rcx]; test dl, dl; jne short 0x00000000000404c8; ret; 
0x00000000101281: movzx edx, byte ptr [rdi+0x8]; mov rax, rdx; movsxd rdx, [r13+rdx*4]; add rdx, r13; notrack jmp rdx; 
0x000000001b1c8d: movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x00000000198dc6: movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b9c: movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x00000000198ce1: movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000161902: movzx edx, byte ptr [rdx+rcx]; mov [rdi+0x7], dl; ret; 
0x000000000b2fa1: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000198c7b: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b3e: movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x00000000198ca5: movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000001b1b6d: movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x00000000198cc4: movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b3114: movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000019912b: movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x00000000104c7c: movzx edx, byte ptr [rsi+0x30]; movsxd rdx, [r15+rdx*4]; add rdx, r15; notrack jmp rdx; 
0x000000000c450a: movzx edx, byte ptr [rsi+rax+0x3]; test dl, dl; jne short 0x00000000000c4500; lea rax, [rcx-0x1]; ret; 
0x00000000061b53: movzx edx, byte ptr [rsi+rcx]; mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x00000000192f3f: movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000001b19b3: movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x00000000198b19: movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000001b19c3: movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x00000000198b38: movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret; 
0x000000001b19d5: movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x00000000198b59: movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000b2e37: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000198afe: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x000000001a5d04: movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x00000000182720: movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000001a5ceb: movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x000000001a5d64: movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x000000001a5d54: movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001a5d44: movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d34: movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d32: movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d22: movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d24: movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d14: movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x000000001b0920: movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001a04e0: movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000001b2c50: movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000019ec00: movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x00000000182e00: movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000019f7b0: movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x000000000b52e4: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000b142f: movzx edx, byte ptr [rsp+0x16]; mov [rax+0x6], dl; add rax, rcx; ret; 
0x000000000b14ef: movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000b13d8: movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a0: movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000b13f6: movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14be: movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000e0f9b: movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000e1019: movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x00000000125627: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x0000000003ff45: movzx edx, dl; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x0000000007d3e0: movzx edx, dl; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000007d493: movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000b530a: movzx edx, dl; sub eax, edx; ret; 
0x00000000162d36: movzx edx, word ptr [rdi+0x88]; mov [rax+0x6c], dx; mov eax, 0x1; ret; 
0x000000001b0943: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x000000001b2c73: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3ae3: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f7d3: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001b0944: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x000000001b2c74: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3ae4: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x0000000019f7d4: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x000000001826a0: movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001b01a0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x0000000019fe10: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000001b0930: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001a04f0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b2c60: movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000019ec10: movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000182d90: movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000019e380: movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x000000000b140e: movzx edx, word ptr [rsp+0xc]; mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000000b14e6: movzx edx, word ptr [rsp+0xc]; mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000b14d6: movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x000000000b1498: movzx edx, word ptr [rsp-0x8]; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x0000000014d3be: movzx esi, al; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000c5d5b: movzx esi, bl; call rbp; 
0x0000000008df1a: movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; call qword ptr [rax+0x18]; 
0x0000000008dea7: movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x000000000b1039: movzx esi, byte ptr [rcx]; test sil, sil; jne short 0x00000000000b1030; mov [rdx], rcx; ret; 
0x000000001053a4: movzx esi, byte ptr [rdx+0x8]; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x00000000199f4c: movzx esi, byte ptr [rsi+rdx-0x1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000f7b44: movzx esi, dh; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000519be: movzx esi, dh; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x000000000519bd: movzx esi, sil; movsxd rsi, [r8+rsi*4]; add rsi, r8; notrack jmp rsi; 
0x000000001a69ae: movzx esi, word ptr [rsi+rdx+0x2]; mov [rdi+rdx+0x2], si; mov [rdi], cl; ret; 
0x000000000c4a43: movzx esi, word ptr [rsi+rdx-0x2]; mov [rdi+rdx-0x2], si; mov [rdi], cl; ret; 
0x000000000f7aba: movzx esp, ah; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000000f7a06: movzx esp, ah; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x0000000003ff44: movzx r10d, r10b; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x000000000f7ab9: movzx r12d, r12b; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x000000000f7a05: movzx r12d, r12b; movsxd rax, [rdx+r12*4]; add rax, rdx; notrack jmp rax; 
0x000000000f7b43: movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; notrack jmp rax; 
0x000000000cf801: movzx r8d, byte ptr [rax+rdx]; cmp r8d, 0xff; je short 0x00000000000cf813; mov eax, r8d; ret; 
0x000000001b78e2: movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x000000000ea675: mul dword ptr [rbx-0x6]; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000078365: mul dword ptr [rcx+0x39480000]; ret; 
0x000000001a2680: mul dword ptr [rip+0x11111111]; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000041978: mulps xmm0, [rip+0x1a0751]; ret; 
0x00000000041953: mulps xmm0, [rip+0x1a0786]; ret; 
0x000000000419c3: mulps xmm0, [rip+0x1a13fe]; ret; 
0x000000000415b9: mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415b8: mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041977: mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041952: mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000419c2: mulss xmm0, [rip+0x1a13fe]; ret; 
0x0000000011a9a7: neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41]; 
0x00000000174d26: neg byte ptr [rcx]; cld; jmp qword ptr [rsi+0xf]; 
0x0000000004dafd: neg dword ptr [rax]; add al, ch; ret; 
0x0000000011f445: neg dword ptr [rdi]; adc [rax], al; pop r12; pop r13; ret; 
0x00000000045dd6: neg eax; cmovs eax, edi; ret; 
0x00000000045de8: neg eax; cmovs rax, rdi; ret; 
0x000000000d7c9c: neg eax; cmp edi, esi; cmovl eax, edx; ret; 
0x000000000d7cb5: neg eax; cmp esi, r8d; cmovg eax, edx; ret; 
0x0000000004276b: neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000427a7: neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000046ce7: neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000eac17: neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x00000000108db7: neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x000000001b4613: neg eax; or eax, 0x1; ret; 
0x000000001a197c: neg eax; or eax, 0x1; vzeroupper; ret; 
0x0000000009108a: neg eax; ret; 
0x0000000008a104: neg eax; sbb eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000002a523: neg eax; sbb eax, eax; add rsp, 0x8; ret; 
0x00000000061f06: neg eax; sbb eax, eax; pop rbp; ret; 
0x0000000009b5b3: neg edx; cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x00000000045de7: neg rax; cmovs rax, rdi; ret; 
0x000000000d83b8: nop [rax+rax]; add rax, 0x3; ret; 
0x000000000d83b5: nop [rax+rax]; add rax, 0x3; ret; 
0x000000000d83b7: nop [rax+rax]; add rax, 0x3; ret; 
0x00000000083d1b: nop [rax+rax]; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000083d1a: nop [rax+rax]; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000abd46: nop [rax+rax]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000abd47: nop [rax+rax]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000abd48: nop [rax+rax]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000002ac53: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000092c28: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000092c27: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002ac52: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000419cb: nop [rax+rax]; addss xmm0, xmm0; ret; 
0x00000000099e27: nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000099e26: nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000099e28: nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x000000000b4bb8: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b4bb7: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000001af918: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x000000001af917: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x000000001af92a: nop [rax+rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x000000001af92b: nop [rax+rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x000000001af93a: nop [rax+rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000001af93b: nop [rax+rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000001af908: nop [rax+rax]; bsr eax, eax; add rax, rdi; ret; 
0x00000000199a87: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199a85: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199a88: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000b5087: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b5088: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000001bb8b7: nop [rax+rax]; call qword ptr [rbx]; 
0x000000001bb8b8: nop [rax+rax]; call qword ptr [rbx]; 
0x00000000091096: nop [rax+rax]; cmp qword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x00000000091097: nop [rax+rax]; cmp qword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x00000000091098: nop [rax+rax]; cmp qword ptr [rcx], 0x0; jns short 0x000000000009102f; mov eax, 0x6e; ret; 
0x00000000092ba6: nop [rax+rax]; endbr64; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x00000000092ba7: nop [rax+rax]; endbr64; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x00000000092ba8: nop [rax+rax]; endbr64; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x00000000029f2a: nop [rax+rax]; endbr64; lea rax, [rip+0x1ae09b]; ret; 
0x00000000029f2b: nop [rax+rax]; endbr64; lea rax, [rip+0x1ae09b]; ret; 
0x00000000092666: nop [rax+rax]; endbr64; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000092668: nop [rax+rax]; endbr64; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000092667: nop [rax+rax]; endbr64; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000092b7b: nop [rax+rax]; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be68: nop [rax+rax]; endbr64; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0be7: nop [rax+rax]; endbr64; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a0be8: nop [rax+rax]; endbr64; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a0be5: nop [rax+rax]; endbr64; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x0000000011bb6b: nop [rax+rax]; endbr64; mov eax, 0x132; syscall; 
0x000000001270a8: nop [rax+rax]; endbr64; mov eax, 0x134; syscall; 
0x0000000015d225: nop [rax+rax]; endbr64; mov eax, 0x1; ret; 
0x0000000015d228: nop [rax+rax]; endbr64; mov eax, 0x1; ret; 
0x0000000015d227: nop [rax+rax]; endbr64; mov eax, 0x1; ret; 
0x0000000011ed1b: nop [rax+rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000011518b: nop [rax+rax]; endbr64; mov eax, 0x20; syscall; 
0x000000000ea5ab: nop [rax+rax]; endbr64; mov eax, 0x25; syscall; 
0x000000000dcddb: nop [rax+rax]; endbr64; mov eax, 0x26; syscall; 
0x000000000dcdda: nop [rax+rax]; endbr64; mov eax, 0x26; syscall; 
0x000000000ec0aa: nop [rax+rax]; endbr64; mov eax, 0x27; syscall; 
0x000000000ec0ab: nop [rax+rax]; endbr64; mov eax, 0x27; syscall; 
0x0000000015f54b: nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x0000000015f55a: nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x0000000012765b: nop [rax+rax]; endbr64; mov eax, 0x31; syscall; 
0x0000000012772b: nop [rax+rax]; endbr64; mov eax, 0x34; syscall; 
0x00000000119a0b: nop [rax+rax]; endbr64; mov eax, 0x3; syscall; 
0x0000000004274b: nop [rax+rax]; endbr64; mov eax, 0x3e; syscall; 
0x0000000012845b: nop [rax+rax]; endbr64; mov eax, 0x40; syscall; 
0x0000000011d15b: nop [rax+rax]; endbr64; mov eax, 0x4d; syscall; 
0x0000000011d15a: nop [rax+rax]; endbr64; mov eax, 0x4d; syscall; 
0x0000000011531b: nop [rax+rax]; endbr64; mov eax, 0x50; syscall; 
0x00000000061f18: nop [rax+rax]; endbr64; mov eax, 0x52; syscall; 
0x00000000061f17: nop [rax+rax]; endbr64; mov eax, 0x52; syscall; 
0x00000000116248: nop [rax+rax]; endbr64; mov eax, 0x57; syscall; 
0x00000000116188: nop [rax+rax]; endbr64; mov eax, 0x58; syscall; 
0x00000000126f88: nop [rax+rax]; endbr64; mov eax, 0x63; syscall; 
0x00000000042d3b: nop [rax+rax]; endbr64; mov eax, 0x83; syscall; 
0x00000000042d3a: nop [rax+rax]; endbr64; mov eax, 0x83; syscall; 
0x000000001142da: nop [rax+rax]; endbr64; mov eax, 0x8a; syscall; 
0x000000001142db: nop [rax+rax]; endbr64; mov eax, 0x8a; syscall; 
0x0000000011a8e8: nop [rax+rax]; endbr64; mov eax, 0x8c; syscall; 
0x0000000011eda8: nop [rax+rax]; endbr64; mov eax, 0x95; syscall; 
0x0000000011be98: nop [rax+rax]; endbr64; mov eax, 0x99; syscall; 
0x0000000011baab: nop [rax+rax]; endbr64; mov eax, 0xa2; syscall; 
0x0000000011b9b8: nop [rax+rax]; endbr64; mov eax, 0xa3; syscall; 
0x00000000125bdb: nop [rax+rax]; endbr64; mov eax, 0xa6; syscall; 
0x00000000125afb: nop [rax+rax]; endbr64; mov eax, 0xad; syscall; 
0x00000000126d48: nop [rax+rax]; endbr64; mov eax, 0xb1; syscall; 
0x00000000126ec8: nop [rax+rax]; endbr64; mov eax, 0xb4; syscall; 
0x00000000125c0b: nop [rax+rax]; endbr64; mov eax, 0xbb; syscall; 
0x00000000125c0a: nop [rax+rax]; endbr64; mov eax, 0xbb; syscall; 
0x00000000122268: nop [rax+rax]; endbr64; mov eax, 0xc2; syscall; 
0x000000001222c8: nop [rax+rax]; endbr64; mov eax, 0xc3; syscall; 
0x000000001221a8: nop [rax+rax]; endbr64; mov eax, 0xc4; syscall; 
0x00000000122358: nop [rax+rax]; endbr64; mov eax, 0xc5; syscall; 
0x00000000108dc7: nop [rax+rax]; endbr64; mov eax, 0xcb; syscall; 
0x00000000108dc8: nop [rax+rax]; endbr64; mov eax, 0xcb; syscall; 
0x00000000108dc6: nop [rax+rax]; endbr64; mov eax, 0xcb; syscall; 
0x00000000126da8: nop [rax+rax]; endbr64; mov eax, 0xfe; syscall; 
0x000000000a74ba: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000a74a5: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008ddc7: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000a74a7: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008ddc8: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000a74bb: nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000015204a: nop [rax+rax]; endbr64; mov eax, [rdi+0x20]; ret; 
0x0000000015204b: nop [rax+rax]; endbr64; mov eax, [rdi+0x20]; ret; 
0x000000000891da: nop [rax+rax]; endbr64; mov eax, [rdi]; and eax, 0x804; ret; 
0x000000000891db: nop [rax+rax]; endbr64; mov eax, [rdi]; and eax, 0x804; ret; 
0x000000000961bb: nop [rax+rax]; endbr64; mov eax, [rip+0x189926]; ret; 
0x0000000004312b: nop [rax+rax]; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000017836a: nop [rax+rax]; endbr64; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000017836b: nop [rax+rax]; endbr64; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x00000000061f4b: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000061f4a: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000012649a: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x11e; syscall; 
0x0000000012649b: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000126568: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x136; syscall; 
0x0000000011931b: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000126f58: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000122238: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0xbf; syscall; 
0x0000000012854a: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000012854b: nop [rax+rax]; endbr64; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126aab: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x00000000126aaa: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141d8: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x000000001141d7: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x000000001141d6: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ed8: nop [rax+rax]; endbr64; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000009c9fb: nop [rax+rax]; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000009cc2a: nop [rax+rax]; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000009bf18: nop [rax+rax]; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000009bf17: nop [rax+rax]; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000009bf16: nop [rax+rax]; endbr64; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008f47b: nop [rax+rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f457: nop [rax+rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f458: nop [rax+rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000008f47a: nop [rax+rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000016cc28: nop [rax+rax]; endbr64; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x0000000016cc25: nop [rax+rax]; endbr64; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x0000000016cc27: nop [rax+rax]; endbr64; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b28: nop [rax+rax]; endbr64; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4d7: nop [rax+rax]; endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000008f4d8: nop [rax+rax]; endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000009f18a: nop [rax+rax]; endbr64; mov rax, [rdi+0x78]; ret; 
0x0000000009f18b: nop [rax+rax]; endbr64; mov rax, [rdi+0x78]; ret; 
0x00000000090c5b: nop [rax+rax]; endbr64; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000008f4b8: nop [rax+rax]; endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x0000000008f4b7: nop [rax+rax]; endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x0000000008f4b5: nop [rax+rax]; endbr64; mov rax, [rip+0x18b1b5]; ret; 
0x0000000003a398: nop [rax+rax]; endbr64; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a395: nop [rax+rax]; endbr64; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a397: nop [rax+rax]; endbr64; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a377: nop [rax+rax]; endbr64; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x0000000003a378: nop [rax+rax]; endbr64; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x0000000003a375: nop [rax+rax]; endbr64; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x0000000002b967: nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x0000000002b966: nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x0000000002b968: nop [rax+rax]; endbr64; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000175c98: nop [rax+rax]; endbr64; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000129cf8: nop [rax+rax]; endbr64; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x0000000009b587: nop [rax+rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000009b586: nop [rax+rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000009b588: nop [rax+rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000009a668: nop [rax+rax]; endbr64; nop; xor eax, eax; ret; 
0x000000000eac28: nop [rax+rax]; endbr64; pop rdi; mov eax, 0x3a; syscall; 
0x000000000eac27: nop [rax+rax]; endbr64; pop rdi; mov eax, 0x3a; syscall; 
0x000000000eac26: nop [rax+rax]; endbr64; pop rdi; mov eax, 0x3a; syscall; 
0x00000000134417: nop [rax+rax]; endbr64; ret; 
0x0000000008f4ab: nop [rax+rax]; endbr64; ret; 
0x00000000091007: nop [rax+rax]; endbr64; ret; 
0x00000000091005: nop [rax+rax]; endbr64; ret; 
0x00000000029cf8: nop [rax+rax]; endbr64; ret; 
0x0000000008f4aa: nop [rax+rax]; endbr64; ret; 
0x0000000008d328: nop [rax+rax]; endbr64; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x0000000008d327: nop [rax+rax]; endbr64; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x0000000008d326: nop [rax+rax]; endbr64; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x000000000945c8: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000016d0b7: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000015d405: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000015d407: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000015d23a: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000015d23b: nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x000000001285eb: nop [rax+rax]; endbr64; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000001285ea: nop [rax+rax]; endbr64; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000000412eb: nop [rax+rax]; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x00000000043176: nop [rax+rax]; lea eax, [rdx-0x1]; mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x00000000043177: nop [rax+rax]; lea eax, [rdx-0x1]; mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x00000000043178: nop [rax+rax]; lea eax, [rdx-0x1]; mov [rip+0x1d605b], eax; mov eax, edx; ret; 
0x000000000c3907: nop [rax+rax]; lea r11, [rip+0x10fb3d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3908: nop [rax+rax]; lea r11, [rip+0x10fb3d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a4b: nop [rax+rax]; lea r11, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a4a: nop [rax+rax]; lea r11, [rip+0x111829]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c036b: nop [rax+rax]; lea r11, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c036a: nop [rax+rax]; lea r11, [rip+0x112d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001a4a15: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x000000001a4a18: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x000000001a4a17: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x000000001a4a25: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x000000001a4a28: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x000000001a4a27: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x000000001a4a35: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000001a4a37: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000001a4a38: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000001a4a47: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x000000001a4a48: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x000000001a4a45: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x000000001a4a55: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000001a4a57: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000001a4a58: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000001a4a67: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x000000001a4a68: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x000000001a4a65: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x000000001a4a78: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x000000001a4a75: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x000000001a4a77: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x000000001a4a85: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x000000001a4a88: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x000000001a4a87: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x000000001a4a95: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000001a4a97: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000001a4a98: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000001a4aa7: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000001a4aa5: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000001a4aa8: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000001a4ab7: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x000000001a4ab5: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x000000001a4ab8: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x000000001a4ac5: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x000000001a4ac7: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x000000001a4ac8: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x000000000d8188: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000d8185: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000d8187: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000d8177: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000d8175: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000d8178: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000d8168: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x000000000d8167: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x000000000d8165: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x000000000a8343: nop [rax+rax]; lea rax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a8342: nop [rax+rax]; lea rax, [rip+0x109111]; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x00000000038887: nop [rax+rax]; lea rax, [rip+0x19fbd8]; ret; 
0x00000000038888: nop [rax+rax]; lea rax, [rip+0x19fbd8]; ret; 
0x00000000038886: nop [rax+rax]; lea rax, [rip+0x19fbd8]; ret; 
0x0000000015f248: nop [rax+rax]; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x00000000119aa3: nop [rax+rax]; lea rdx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000119aa2: nop [rax+rax]; lea rdx, [rsp+0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000001a122a: nop [rax+rax]; mov [rax], di; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000001a122b: nop [rax+rax]; mov [rax], di; mov [rax+rdx-0x1], dil; vzeroupper; ret; 
0x000000000b1588: nop [rax+rax]; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1587: nop [rax+rax]; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1586: nop [rax+rax]; mov [rax], ecx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000c515b: nop [rax+rax]; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000000c515a: nop [rax+rax]; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000000b1558: nop [rax+rax]; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1557: nop [rax+rax]; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1556: nop [rax+rax]; mov [rax], si; lea rax, [rax+rdx-0x1]; ret; 
0x0000000018d6d8: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6d7: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000018d6c8: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d6c7: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d6c6: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000018d6a8: nop [rax+rax]; mov [rcx], edx; ret; 
0x0000000018d6a7: nop [rax+rax]; mov [rcx], edx; ret; 
0x0000000018d738: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d737: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d748: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x0000000018d718: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x0000000018d758: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000018d707: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x0000000018d708: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x0000000018d727: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d728: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x0000000018d768: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000018d6e6: nop [rax+rax]; mov [rcx], rdx; ret; 
0x0000000018d6e7: nop [rax+rax]; mov [rcx], rdx; ret; 
0x0000000018d6e8: nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000000928b3: nop [rax+rax]; mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x000000000c0cb8: nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000c0cb7: nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000c12a7: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000c12a8: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000bfc67: nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000bfc68: nop [rax+rax]; mov [rdi], dh; ret; 
0x000000001b0a27: nop [rax+rax]; mov [rdi], dl; ret; 
0x000000001b0a25: nop [rax+rax]; mov [rdi], dl; ret; 
0x000000001b0a28: nop [rax+rax]; mov [rdi], dl; ret; 
0x0000000019f8a8: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000019f8a7: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000019f896: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x0000000019f897: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x0000000019f898: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x000000000c0ca8: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000c0ca6: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000c0ca7: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000001b0a5a: nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000001b0a5b: nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000000c0d17: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d18: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0d28: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000c0cf8: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000c0ce7: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000c0ce8: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000c0d07: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000000c0d08: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000001b0a68: nop [rax+rax]; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000019f8cb: nop [rax+rax]; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000c0cc7: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000c0cc8: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000c0cc5: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000e5643: nop [rax+rax]; mov [rdx], edi; mov eax, r8d; ret; 
0x0000000018f9e8: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x0000000018b6b8: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x000000000f41a7: nop [rax+rax]; mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000f41a8: nop [rax+rax]; mov byte ptr [rax+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000f41bb: nop [rax+rax]; mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000f41ba: nop [rax+rax]; mov byte ptr [rax+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000b1533: nop [rax+rax]; mov byte ptr [rax], 0x0; lea rax, [rax+rdx-0x1]; ret; 
0x0000000014482b: nop [rax+rax]; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x000000000bfc88: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000bfc87: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x00000000162d5b: nop [rax+rax]; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000162d5a: nop [rax+rax]; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000015ee38: nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee37: nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee28: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee27: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee18: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000015ee17: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000007c643: nop [rax+rax]; mov dword ptr [rsp+0x3c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c33: nop [rax+rax]; mov dword ptr [rsp+0x40], 0x1; mov rbx, rcx; jmp rsi; 
0x0000000007c6fb: nop [rax+rax]; mov dword ptr [rsp+0x48], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000c12b8: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c12b6: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c12b7: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000c0965: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000c0968: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000c0967: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000009bf0b: nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000620b8: nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000009bf0a: nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000620b7: nop [rax+rax]; mov eax, 0x10; ret; 
0x00000000091233: nop [rax+rax]; mov eax, 0x16; ret; 
0x00000000094647: nop [rax+rax]; mov eax, 0x16; ret; 
0x00000000099dba: nop [rax+rax]; mov eax, 0x16; ret; 
0x00000000092978: nop [rax+rax]; mov eax, 0x16; ret; 
0x000000001a684b: nop [rax+rax]; mov eax, 0x1; jg short 0x00000000001a6860; neg eax; ret; 
0x000000000edc43: nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000a7958: nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000a7956: nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000a7957: nop [rax+rax]; mov eax, 0x1; ret; 
0x000000001062cb: nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000009af38: nop [rax+rax]; mov eax, 0xb; ret; 
0x0000000009af36: nop [rax+rax]; mov eax, 0xb; ret; 
0x0000000009af37: nop [rax+rax]; mov eax, 0xb; ret; 
0x000000000968ea: nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000000968eb: nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000000e56e8: nop [rax+rax]; mov eax, 0xe4; syscall; 
0x0000000008609b: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000008609a: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000142cb7: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000142cb8: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000142cb6: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000084c13: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000089bf6: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000043168: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000089bf7: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000008ce02: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000043167: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000192dc7: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x00000000192dc8: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x000000000d7ac8: nop [rax+rax]; mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b28: nop [rax+rax]; mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7a66: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a67: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a68: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000d7bb0; ret; 
0x000000001367b3: nop [rax+rax]; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000eac88: nop [rax+rax]; mov eax, edx; syscall; 
0x000000000eac87: nop [rax+rax]; mov eax, edx; syscall; 
0x000000000bfca5: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000bfca8: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000bfca7: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000001410a6: nop [rax+rax]; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x000000001410a8: nop [rax+rax]; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x000000001410a7: nop [rax+rax]; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x00000000162d47: nop [rax+rax]; mov edx, [rdi]; mov [rax], edx; mov eax, 0x1; ret; 
0x00000000162d48: nop [rax+rax]; mov edx, [rdi]; mov [rax], edx; mov eax, 0x1; ret; 
0x000000000bfc9b: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000bfc9a: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000011959b: nop [rax+rax]; mov qword ptr [rdi], 0x0; ret; 
0x0000000011959a: nop [rax+rax]; mov qword ptr [rdi], 0x0; ret; 
0x000000000923b3: nop [rax+rax]; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000174c6b: nop [rax+rax]; mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x00000000149b5b: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x00000000149b5a: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x00000000155767: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000891c8: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000015237b: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000891c7: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000891c6: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000015237a: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000143377: nop [rax+rax]; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x00000000143378: nop [rax+rax]; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x00000000152366: nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000152368: nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000152367: nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000d83e8: nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000d83f8: nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000d8408: nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000d8418: nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000d8428: nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000d8438: nop [rax+rax]; mov rax, 0x7; ret; 
0x0000000008fe98: nop [rax+rax]; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x0000000008fe97: nop [rax+rax]; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x00000000122413: nop [rax+rax]; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000164588: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000164587: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000164586: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000169578: nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000169577: nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000175107: nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000175108: nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000175106: nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000192dd8: nop [rax+rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x000000000892b2: nop [rax+rax]; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x000000000892b3: nop [rax+rax]; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x00000000089183: nop [rax+rax]; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x00000000089182: nop [rax+rax]; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x0000000016b31b: nop [rax+rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000016b31a: nop [rax+rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000016c96a: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016c96b: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x0000000016c976: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016c978: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000016b53b: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000016be93: nop [rax+rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000015fc77: nop [rax+rax]; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000015fc78: nop [rax+rax]; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000015fc76: nop [rax+rax]; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016c5d3: nop [rax+rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000016c5d2: nop [rax+rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax+0x40]; 
0x0000000016c21b: nop [rax+rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000118d03: nop [rax+rax]; mov rax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000118d02: nop [rax+rax]; mov rax, [rip+0x100101]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000114293: nop [rax+rax]; mov rax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000114292: nop [rax+rax]; mov rax, [rip+0x104b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5783: nop [rax+rax]; mov rax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e5782: nop [rax+rax]; mov rax, [rip+0x133681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000e571b: nop [rax+rax]; mov rax, [rip+0x1336e9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000c52f7: nop [rax+rax]; mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000c52f8: nop [rax+rax]; mov rax, [rip+0x153bc1]; mov rax, [rax+0x1f0]; ret; 
0x000000000a7618: nop [rax+rax]; mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x000000000a7617: nop [rax+rax]; mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x000000000a410b: nop [rax+rax]; mov rax, [rip+0x174cf9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009dfa8: nop [rax+rax]; mov rax, [rip+0x17ae59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c068: nop [rax+rax]; mov rax, [rip+0x17cd99]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000046d86: nop [rax+rax]; mov rax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000046d87: nop [rax+rax]; mov rax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000046d88: nop [rax+rax]; mov rax, [rip+0x1d2079]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000043083: nop [rax+rax]; mov rax, [rip+0x1d5d81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f63: nop [rax+rax]; mov rax, [rip+0x1d5ea1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ec8: nop [rax+rax]; mov rax, [rip+0x1d5f39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042ec7: nop [rax+rax]; mov rax, [rip+0x1d5f39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000040778: nop [rax+rax]; mov rax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000040776: nop [rax+rax]; mov rax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000040777: nop [rax+rax]; mov rax, [rip+0x1d8689]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x000000001760d2: nop [rax+rax]; mov rax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001760d3: nop [rax+rax]; mov rax, [rip+0xa2d31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000168b18: nop [rax+rax]; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168b17: nop [rax+rax]; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000168aa3: nop [rax+rax]; mov rax, [rip+0xb0499]; pop rbx; ret; 
0x00000000155068: nop [rax+rax]; mov rax, [rip+0xc3d99]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x000000001267eb: nop [rax+rax]; mov rax, [rip+0xf2619]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126782: nop [rax+rax]; mov rax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126783: nop [rax+rax]; mov rax, [rip+0xf2681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012671b: nop [rax+rax]; mov rax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012671a: nop [rax+rax]; mov rax, [rip+0xf26e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266ba: nop [rax+rax]; mov rax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001266bb: nop [rax+rax]; mov rax, [rip+0xf2749]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012665a: nop [rax+rax]; mov rax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012665b: nop [rax+rax]; mov rax, [rip+0xf27a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126447: nop [rax+rax]; mov rax, [rip+0xf29b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000126448: nop [rax+rax]; mov rax, [rip+0xf29b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001217e2: nop [rax+rax]; mov rax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001217e3: nop [rax+rax]; mov rax, [rip+0xf7621]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012ad57: nop [rax+rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012ad56: nop [rax+rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x0000000012ad58: nop [rax+rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x100; ret; 
0x00000000038898: nop [rax+rax]; mov rax, [rsi+rax*8+0x80]; ret; 
0x0000000009d388: nop [rax+rax]; mov rax, r12; mov r12, [r12+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x00000000121f53: nop [rax+rax]; mov rax, r8; ret; 
0x00000000121f52: nop [rax+rax]; mov rax, r8; ret; 
0x000000000c20d8: nop [rax+rax]; mov rax, rdi; ret; 
0x000000000c20d5: nop [rax+rax]; mov rax, rdi; ret; 
0x000000000c0f3b: nop [rax+rax]; mov rax, rdi; ret; 
0x000000000c20d7: nop [rax+rax]; mov rax, rdi; ret; 
0x000000001a0847: nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x000000001a0848: nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x0000000007c6eb: nop [rax+rax]; mov rbx, rcx; mov r8d, 0x1; jmp rsi; 
0x00000000076bd8: nop [rax+rax]; mov rbx, rdx; mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x0000000007561b: nop [rax+rax]; mov rbx, rdx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x0000000007561a: nop [rax+rax]; mov rbx, rdx; mov r10d, 0x1; xor edx, edx; jmp rsi; 
0x000000000bfce7: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000bfce8: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x00000000090298: nop [rax+rax]; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x00000000090297: nop [rax+rax]; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000009006b: nop [rax+rax]; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x360]; 
0x00000000090103: nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x360]; 
0x00000000090102: nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x360]; 
0x000000001675a8: nop [rax+rax]; mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x000000000bfcdb: nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b1473: nop [rax+rax]; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000b13a7: nop [rax+rax]; mov rdx, [rsp+0x18]; mov [rax], rdx; add rax, rcx; ret; 
0x000000000b13a8: nop [rax+rax]; mov rdx, [rsp+0x18]; mov [rax], rdx; add rax, rcx; ret; 
0x00000000077d83: nop [rax+rax]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000072847: nop [rax+rax]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000072848: nop [rax+rax]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000072846: nop [rax+rax]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000089647: nop [rax+rax]; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x00000000089648: nop [rax+rax]; mov rsi, rbx; mov edi, 0x2; mov eax, r9d; syscall; 
0x0000000011d298: nop [rax+rax]; mov rsi, rcx; mov rax, rdi; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000c0d38: nop [rax+rax]; movdqu [rdi-0x1], xmm0; ret; 
0x000000000c0d46: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000c0d48: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000c0d47: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x00000000162ccb: nop [rax+rax]; movdqu xmm0, [rax]; mov eax, esi; movups [rdi+0x8], xmm0; ret; 
0x0000000015edf8: nop [rax+rax]; movdqu xmm0, [rdi+0x38]; mov dword ptr [rsi], 0x9; movups [rsi+0x8], xmm0; ret; 
0x000000001663b3: nop [rax+rax]; movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad3: nop [rax+rax]; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000165ad2: nop [rax+rax]; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm1; ret; 
0x00000000162cdb: nop [rax+rax]; movdqu xmm1, [rdi+0x8]; movups [rax], xmm1; mov eax, 0x1; ret; 
0x00000000165ae7: nop [rax+rax]; movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x00000000165ae8: nop [rax+rax]; movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x00000000165ae6: nop [rax+rax]; movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [rcx], xmm2; ret; 
0x000000001663c7: nop [rax+rax]; movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x000000001663c8: nop [rax+rax]; movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x000000001663c6: nop [rax+rax]; movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [rcx], xmm4; ret; 
0x00000000142d13: nop [rax+rax]; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000001a5d5b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x000000001a5d4b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x000000001a5d3b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000001a5d2b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x000000001a5d1b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x000000001a5d0b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x000000000b48e7: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000b48e8: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001b13a8: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b13a7: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b3ab8: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x000000001b3ab7: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x000000001b3ab5: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000019f7ab: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x0000000019f7aa: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x000000001b092b: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001b092a: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000001b2c5a: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b2c5b: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001b2b86: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000001b2b88: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000001b2b87: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000019eb56: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x0000000019eb57: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x0000000019eb58: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x00000000091227: nop [rax+rax]; neg eax; ret; 
0x00000000091226: nop [rax+rax]; neg eax; ret; 
0x00000000091228: nop [rax+rax]; neg eax; ret; 
0x0000000016a123: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x0000000016a121: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x0000000016a122: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x2; ret; 
0x00000000042741: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x3e; syscall; 
0x00000000042743: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x3e; syscall; 
0x00000000042742: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0x3e; syscall; 
0x00000000125af3: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0xad; syscall; 
0x00000000125af1: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0xad; syscall; 
0x00000000125af2: nop [rax+rax]; nop [rax+rax]; endbr64; mov eax, 0xad; syscall; 
0x000000001b174b: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b174d: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b174e: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000000b4df4: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000b4df2: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000b4df5: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000001b3ec4: nop [rax+rax]; nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000001b3ec3: nop [rax+rax]; nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000001b3ec1: nop [rax+rax]; nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x00000000125e73: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x122; syscall; 
0x00000000125e74: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x122; syscall; 
0x00000000125e72: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x122; syscall; 
0x00000000115254: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x125; syscall; 
0x00000000115252: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x125; syscall; 
0x00000000115253: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x125; syscall; 
0x0000000016b3d2: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1; ret; 
0x0000000016b3d4: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1; ret; 
0x0000000016b3d5: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1; ret; 
0x00000000128583: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1e; syscall; 
0x00000000128584: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1e; syscall; 
0x00000000128582: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x1e; syscall; 
0x000000000dcda3: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x24; syscall; 
0x000000000dcda5: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x24; syscall; 
0x000000000dcda4: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x24; syscall; 
0x00000000127ca3: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x30; syscall; 
0x00000000127ca4: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x30; syscall; 
0x00000000127ca2: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x30; syscall; 
0x000000001277c2: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x32; syscall; 
0x000000001277c3: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x32; syscall; 
0x000000001277c4: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x32; syscall; 
0x00000000116124: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x56; syscall; 
0x00000000116122: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x56; syscall; 
0x00000000116123: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x56; syscall; 
0x0000000011a4f2: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x62; syscall; 
0x0000000011a4f3: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x62; syscall; 
0x0000000011a4f4: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x62; syscall; 
0x00000000125f44: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x87; syscall; 
0x00000000125f43: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x87; syscall; 
0x00000000125f42: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x87; syscall; 
0x0000000011a924: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x8d; syscall; 
0x0000000011a923: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x8d; syscall; 
0x0000000011a922: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x8d; syscall; 
0x00000000126b84: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x9e; syscall; 
0x00000000126b82: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x9e; syscall; 
0x00000000126b83: nop [rax+rax]; nop [rax]; endbr64; mov eax, 0x9e; syscall; 
0x00000000175034: nop [rax+rax]; nop [rax]; endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x00000000175035: nop [rax+rax]; nop [rax]; endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x00000000175032: nop [rax+rax]; nop [rax]; endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x0000000009d4e4: nop [rax+rax]; nop [rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000009d4e5: nop [rax+rax]; nop [rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000009d4e3: nop [rax+rax]; nop [rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x00000000099c14: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000099c12: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000092b55: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000092b54: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000092b53: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000099c13: nop [rax+rax]; nop [rax]; endbr64; xor eax, eax; ret; 
0x0000000018d671: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x0000000018d674: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x0000000018d673: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x000000000c0c51: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000c0c54: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000c0c53: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000c0954: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000c0953: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000c0951: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x00000000182584: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000182583: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000182581: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000042513: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x00000000042514: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x00000000042511: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x000000000bf5c4: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x000000000bf5c1: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x000000000bf5c3: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x0000000017c821: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x0000000017c824: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x0000000017c823: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000182711: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x00000000182713: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x00000000182714: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x00000000182693: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000182691: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000182694: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000000c0943: nop [rax+rax]; nop [rax]; ret; 
0x000000000c0944: nop [rax+rax]; nop [rax]; ret; 
0x000000000c0941: nop [rax+rax]; nop [rax]; ret; 
0x000000001b18f2: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001b18f4: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001b18f5: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x00000000199fb1: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000b5122: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000b5124: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000199fb3: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000199fb4: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000b5125: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000001a21c1: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000019d944: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a21c3: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000019d945: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a21c4: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000019d942: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000114625: nop [rax+rax]; nop; endbr64; mov eax, 0x102; syscall; 
0x00000000114627: nop [rax+rax]; nop; endbr64; mov eax, 0x102; syscall; 
0x00000000114626: nop [rax+rax]; nop; endbr64; mov eax, 0x102; syscall; 
0x00000000116276: nop [rax+rax]; nop; endbr64; mov eax, 0x107; syscall; 
0x00000000116277: nop [rax+rax]; nop; endbr64; mov eax, 0x107; syscall; 
0x00000000116275: nop [rax+rax]; nop; endbr64; mov eax, 0x107; syscall; 
0x000000001161b5: nop [rax+rax]; nop; endbr64; mov eax, 0x10a; syscall; 
0x000000001161b6: nop [rax+rax]; nop; endbr64; mov eax, 0x10a; syscall; 
0x000000001161b7: nop [rax+rax]; nop; endbr64; mov eax, 0x10a; syscall; 
0x00000000126fb5: nop [rax+rax]; nop; endbr64; mov eax, 0x110; syscall; 
0x00000000126fb7: nop [rax+rax]; nop; endbr64; mov eax, 0x110; syscall; 
0x00000000126fb6: nop [rax+rax]; nop; endbr64; mov eax, 0x110; syscall; 
0x00000000127017: nop [rax+rax]; nop; endbr64; mov eax, 0x11b; syscall; 
0x00000000127015: nop [rax+rax]; nop; endbr64; mov eax, 0x11b; syscall; 
0x00000000127016: nop [rax+rax]; nop; endbr64; mov eax, 0x11b; syscall; 
0x00000000126ce7: nop [rax+rax]; nop; endbr64; mov eax, 0x123; syscall; 
0x00000000126ce6: nop [rax+rax]; nop; endbr64; mov eax, 0x123; syscall; 
0x00000000126ce5: nop [rax+rax]; nop; endbr64; mov eax, 0x123; syscall; 
0x000000001151e7: nop [rax+rax]; nop; endbr64; mov eax, 0x124; syscall; 
0x000000001151e5: nop [rax+rax]; nop; endbr64; mov eax, 0x124; syscall; 
0x000000001151e6: nop [rax+rax]; nop; endbr64; mov eax, 0x124; syscall; 
0x00000000126e07: nop [rax+rax]; nop; endbr64; mov eax, 0x126; syscall; 
0x00000000126e05: nop [rax+rax]; nop; endbr64; mov eax, 0x126; syscall; 
0x00000000126e06: nop [rax+rax]; nop; endbr64; mov eax, 0x126; syscall; 
0x00000000127046: nop [rax+rax]; nop; endbr64; mov eax, 0x12c; syscall; 
0x00000000127045: nop [rax+rax]; nop; endbr64; mov eax, 0x12c; syscall; 
0x00000000127047: nop [rax+rax]; nop; endbr64; mov eax, 0x12c; syscall; 
0x000000001270d5: nop [rax+rax]; nop; endbr64; mov eax, 0x13f; syscall; 
0x000000001270d6: nop [rax+rax]; nop; endbr64; mov eax, 0x13f; syscall; 
0x000000001270d7: nop [rax+rax]; nop; endbr64; mov eax, 0x13f; syscall; 
0x00000000127106: nop [rax+rax]; nop; endbr64; mov eax, 0x14a; syscall; 
0x00000000127107: nop [rax+rax]; nop; endbr64; mov eax, 0x14a; syscall; 
0x00000000127105: nop [rax+rax]; nop; endbr64; mov eax, 0x14a; syscall; 
0x00000000127135: nop [rax+rax]; nop; endbr64; mov eax, 0x14b; syscall; 
0x00000000127136: nop [rax+rax]; nop; endbr64; mov eax, 0x14b; syscall; 
0x00000000127137: nop [rax+rax]; nop; endbr64; mov eax, 0x14b; syscall; 
0x00000000108c96: nop [rax+rax]; nop; endbr64; mov eax, 0x18; syscall; 
0x00000000108c97: nop [rax+rax]; nop; endbr64; mov eax, 0x18; syscall; 
0x00000000108c95: nop [rax+rax]; nop; endbr64; mov eax, 0x18; syscall; 
0x0000000011ed47: nop [rax+rax]; nop; endbr64; mov eax, 0x1b; syscall; 
0x0000000011ed45: nop [rax+rax]; nop; endbr64; mov eax, 0x1b; syscall; 
0x0000000011ed46: nop [rax+rax]; nop; endbr64; mov eax, 0x1b; syscall; 
0x000000001151b6: nop [rax+rax]; nop; endbr64; mov eax, 0x21; syscall; 
0x000000001151b7: nop [rax+rax]; nop; endbr64; mov eax, 0x21; syscall; 
0x000000001151b5: nop [rax+rax]; nop; endbr64; mov eax, 0x21; syscall; 
0x00000000127cd5: nop [rax+rax]; nop; endbr64; mov eax, 0x29; syscall; 
0x00000000127cd7: nop [rax+rax]; nop; endbr64; mov eax, 0x29; syscall; 
0x00000000127cd6: nop [rax+rax]; nop; endbr64; mov eax, 0x29; syscall; 
0x00000000127757: nop [rax+rax]; nop; endbr64; mov eax, 0x33; syscall; 
0x00000000127755: nop [rax+rax]; nop; endbr64; mov eax, 0x33; syscall; 
0x00000000127756: nop [rax+rax]; nop; endbr64; mov eax, 0x33; syscall; 
0x0000000011d127: nop [rax+rax]; nop; endbr64; mov eax, 0x4c; syscall; 
0x0000000011d125: nop [rax+rax]; nop; endbr64; mov eax, 0x4c; syscall; 
0x0000000011d126: nop [rax+rax]; nop; endbr64; mov eax, 0x4c; syscall; 
0x00000000115347: nop [rax+rax]; nop; endbr64; mov eax, 0x51; syscall; 
0x00000000115345: nop [rax+rax]; nop; endbr64; mov eax, 0x51; syscall; 
0x00000000115346: nop [rax+rax]; nop; endbr64; mov eax, 0x51; syscall; 
0x000000001162a7: nop [rax+rax]; nop; endbr64; mov eax, 0x54; syscall; 
0x000000001162a5: nop [rax+rax]; nop; endbr64; mov eax, 0x54; syscall; 
0x000000001162a6: nop [rax+rax]; nop; endbr64; mov eax, 0x54; syscall; 
0x000000001161e7: nop [rax+rax]; nop; endbr64; mov eax, 0x59; syscall; 
0x000000001161e5: nop [rax+rax]; nop; endbr64; mov eax, 0x59; syscall; 
0x000000001161e6: nop [rax+rax]; nop; endbr64; mov eax, 0x59; syscall; 
0x00000000114426: nop [rax+rax]; nop; endbr64; mov eax, 0x5b; syscall; 
0x00000000114425: nop [rax+rax]; nop; endbr64; mov eax, 0x5b; syscall; 
0x00000000114427: nop [rax+rax]; nop; endbr64; mov eax, 0x5b; syscall; 
0x00000000115c36: nop [rax+rax]; nop; endbr64; mov eax, 0x5d; syscall; 
0x00000000115c35: nop [rax+rax]; nop; endbr64; mov eax, 0x5d; syscall; 
0x00000000115c37: nop [rax+rax]; nop; endbr64; mov eax, 0x5d; syscall; 
0x00000000115c67: nop [rax+rax]; nop; endbr64; mov eax, 0x5e; syscall; 
0x00000000115c66: nop [rax+rax]; nop; endbr64; mov eax, 0x5e; syscall; 
0x00000000115c65: nop [rax+rax]; nop; endbr64; mov eax, 0x5e; syscall; 
0x000000000ea396: nop [rax+rax]; nop; endbr64; mov eax, 0x64; syscall; 
0x000000000ea397: nop [rax+rax]; nop; endbr64; mov eax, 0x64; syscall; 
0x000000000ea395: nop [rax+rax]; nop; endbr64; mov eax, 0x64; syscall; 
0x00000000126e67: nop [rax+rax]; nop; endbr64; mov eax, 0x67; syscall; 
0x00000000126e65: nop [rax+rax]; nop; endbr64; mov eax, 0x67; syscall; 
0x00000000126e66: nop [rax+rax]; nop; endbr64; mov eax, 0x67; syscall; 
0x000000000ec367: nop [rax+rax]; nop; endbr64; mov eax, 0x6d; syscall; 
0x000000000ec365: nop [rax+rax]; nop; endbr64; mov eax, 0x6d; syscall; 
0x000000000ec366: nop [rax+rax]; nop; endbr64; mov eax, 0x6d; syscall; 
0x000000000ec396: nop [rax+rax]; nop; endbr64; mov eax, 0x6f; syscall; 
0x000000000ec395: nop [rax+rax]; nop; endbr64; mov eax, 0x6f; syscall; 
0x000000000ec397: nop [rax+rax]; nop; endbr64; mov eax, 0x6f; syscall; 
0x000000000ec3f5: nop [rax+rax]; nop; endbr64; mov eax, 0x70; syscall; 
0x000000000ec3f7: nop [rax+rax]; nop; endbr64; mov eax, 0x70; syscall; 
0x000000000ec3f6: nop [rax+rax]; nop; endbr64; mov eax, 0x70; syscall; 
0x000000000ec426: nop [rax+rax]; nop; endbr64; mov eax, 0x76; syscall; 
0x000000000ec425: nop [rax+rax]; nop; endbr64; mov eax, 0x76; syscall; 
0x000000000ec427: nop [rax+rax]; nop; endbr64; mov eax, 0x76; syscall; 
0x000000000ec457: nop [rax+rax]; nop; endbr64; mov eax, 0x78; syscall; 
0x000000000ec456: nop [rax+rax]; nop; endbr64; mov eax, 0x78; syscall; 
0x000000000ec455: nop [rax+rax]; nop; endbr64; mov eax, 0x78; syscall; 
0x00000000125c65: nop [rax+rax]; nop; endbr64; mov eax, 0x7b; syscall; 
0x00000000125c67: nop [rax+rax]; nop; endbr64; mov eax, 0x7b; syscall; 
0x00000000125c66: nop [rax+rax]; nop; endbr64; mov eax, 0x7b; syscall; 
0x00000000126c27: nop [rax+rax]; nop; endbr64; mov eax, 0x7e; syscall; 
0x00000000126c25: nop [rax+rax]; nop; endbr64; mov eax, 0x7e; syscall; 
0x00000000126c26: nop [rax+rax]; nop; endbr64; mov eax, 0x7e; syscall; 
0x00000000126fe5: nop [rax+rax]; nop; endbr64; mov eax, 0x86; syscall; 
0x00000000126fe7: nop [rax+rax]; nop; endbr64; mov eax, 0x86; syscall; 
0x00000000126fe6: nop [rax+rax]; nop; endbr64; mov eax, 0x86; syscall; 
0x00000000108c05: nop [rax+rax]; nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000108c06: nop [rax+rax]; nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000108c07: nop [rax+rax]; nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000108c37: nop [rax+rax]; nop; endbr64; mov eax, 0x90; syscall; 
0x00000000108c35: nop [rax+rax]; nop; endbr64; mov eax, 0x90; syscall; 
0x00000000108c36: nop [rax+rax]; nop; endbr64; mov eax, 0x90; syscall; 
0x00000000108c66: nop [rax+rax]; nop; endbr64; mov eax, 0x91; syscall; 
0x00000000108c65: nop [rax+rax]; nop; endbr64; mov eax, 0x91; syscall; 
0x00000000108c67: nop [rax+rax]; nop; endbr64; mov eax, 0x91; syscall; 
0x00000000108cc5: nop [rax+rax]; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000108cc6: nop [rax+rax]; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000108cc7: nop [rax+rax]; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000108cf7: nop [rax+rax]; nop; endbr64; mov eax, 0x93; syscall; 
0x00000000108cf6: nop [rax+rax]; nop; endbr64; mov eax, 0x93; syscall; 
0x00000000108cf5: nop [rax+rax]; nop; endbr64; mov eax, 0x93; syscall; 
0x00000000108d25: nop [rax+rax]; nop; endbr64; mov eax, 0x94; syscall; 
0x00000000108d26: nop [rax+rax]; nop; endbr64; mov eax, 0x94; syscall; 
0x00000000108d27: nop [rax+rax]; nop; endbr64; mov eax, 0x94; syscall; 
0x0000000011edd7: nop [rax+rax]; nop; endbr64; mov eax, 0x96; syscall; 
0x0000000011edd6: nop [rax+rax]; nop; endbr64; mov eax, 0x96; syscall; 
0x0000000011edd5: nop [rax+rax]; nop; endbr64; mov eax, 0x96; syscall; 
0x0000000011ee06: nop [rax+rax]; nop; endbr64; mov eax, 0x97; syscall; 
0x0000000011ee07: nop [rax+rax]; nop; endbr64; mov eax, 0x97; syscall; 
0x0000000011ee05: nop [rax+rax]; nop; endbr64; mov eax, 0x97; syscall; 
0x0000000011ee36: nop [rax+rax]; nop; endbr64; mov eax, 0x98; syscall; 
0x0000000011ee35: nop [rax+rax]; nop; endbr64; mov eax, 0x98; syscall; 
0x0000000011ee37: nop [rax+rax]; nop; endbr64; mov eax, 0x98; syscall; 
0x00000000126bb7: nop [rax+rax]; nop; endbr64; mov eax, 0x9a; syscall; 
0x00000000126bb5: nop [rax+rax]; nop; endbr64; mov eax, 0x9a; syscall; 
0x00000000126bb6: nop [rax+rax]; nop; endbr64; mov eax, 0x9a; syscall; 
0x00000000126ef7: nop [rax+rax]; nop; endbr64; mov eax, 0x9b; syscall; 
0x00000000126ef5: nop [rax+rax]; nop; endbr64; mov eax, 0x9b; syscall; 
0x00000000126ef6: nop [rax+rax]; nop; endbr64; mov eax, 0x9b; syscall; 
0x0000000011b9e7: nop [rax+rax]; nop; endbr64; mov eax, 0xa1; syscall; 
0x0000000011b9e5: nop [rax+rax]; nop; endbr64; mov eax, 0xa1; syscall; 
0x0000000011b9e6: nop [rax+rax]; nop; endbr64; mov eax, 0xa1; syscall; 
0x0000000011bec5: nop [rax+rax]; nop; endbr64; mov eax, 0xa7; syscall; 
0x0000000011bec7: nop [rax+rax]; nop; endbr64; mov eax, 0xa7; syscall; 
0x0000000011bec6: nop [rax+rax]; nop; endbr64; mov eax, 0xa7; syscall; 
0x0000000011bef5: nop [rax+rax]; nop; endbr64; mov eax, 0xa8; syscall; 
0x0000000011bef6: nop [rax+rax]; nop; endbr64; mov eax, 0xa8; syscall; 
0x0000000011bef7: nop [rax+rax]; nop; endbr64; mov eax, 0xa8; syscall; 
0x0000000011ec45: nop [rax+rax]; nop; endbr64; mov eax, 0xa; syscall; 
0x0000000011ec47: nop [rax+rax]; nop; endbr64; mov eax, 0xa; syscall; 
0x0000000011ec46: nop [rax+rax]; nop; endbr64; mov eax, 0xa; syscall; 
0x00000000125b25: nop [rax+rax]; nop; endbr64; mov eax, 0xac; syscall; 
0x00000000125b27: nop [rax+rax]; nop; endbr64; mov eax, 0xac; syscall; 
0x00000000125b26: nop [rax+rax]; nop; endbr64; mov eax, 0xac; syscall; 
0x00000000126c57: nop [rax+rax]; nop; endbr64; mov eax, 0xae; syscall; 
0x00000000126c56: nop [rax+rax]; nop; endbr64; mov eax, 0xae; syscall; 
0x00000000126c55: nop [rax+rax]; nop; endbr64; mov eax, 0xae; syscall; 
0x00000000126c86: nop [rax+rax]; nop; endbr64; mov eax, 0xb0; syscall; 
0x00000000126c85: nop [rax+rax]; nop; endbr64; mov eax, 0xb0; syscall; 
0x00000000126c87: nop [rax+rax]; nop; endbr64; mov eax, 0xb0; syscall; 
0x00000000127165: nop [rax+rax]; nop; endbr64; mov eax, 0xba; syscall; 
0x00000000127166: nop [rax+rax]; nop; endbr64; mov eax, 0xba; syscall; 
0x00000000127167: nop [rax+rax]; nop; endbr64; mov eax, 0xba; syscall; 
0x000000001222f6: nop [rax+rax]; nop; endbr64; mov eax, 0xc6; syscall; 
0x000000001222f5: nop [rax+rax]; nop; endbr64; mov eax, 0xc6; syscall; 
0x000000001222f7: nop [rax+rax]; nop; endbr64; mov eax, 0xc6; syscall; 
0x000000001221d6: nop [rax+rax]; nop; endbr64; mov eax, 0xc7; syscall; 
0x000000001221d7: nop [rax+rax]; nop; endbr64; mov eax, 0xc7; syscall; 
0x000000001221d5: nop [rax+rax]; nop; endbr64; mov eax, 0xc7; syscall; 
0x00000000126cb5: nop [rax+rax]; nop; endbr64; mov eax, 0xd5; syscall; 
0x00000000126cb6: nop [rax+rax]; nop; endbr64; mov eax, 0xd5; syscall; 
0x00000000126cb7: nop [rax+rax]; nop; endbr64; mov eax, 0xd5; syscall; 
0x00000000126be6: nop [rax+rax]; nop; endbr64; mov eax, 0xe4; syscall; 
0x00000000126be5: nop [rax+rax]; nop; endbr64; mov eax, 0xe4; syscall; 
0x00000000126be7: nop [rax+rax]; nop; endbr64; mov eax, 0xe4; syscall; 
0x00000000126dd7: nop [rax+rax]; nop; endbr64; mov eax, 0xfd; syscall; 
0x00000000126dd6: nop [rax+rax]; nop; endbr64; mov eax, 0xfd; syscall; 
0x00000000126dd5: nop [rax+rax]; nop; endbr64; mov eax, 0xfd; syscall; 
0x00000000126e35: nop [rax+rax]; nop; endbr64; mov eax, 0xff; syscall; 
0x00000000126e36: nop [rax+rax]; nop; endbr64; mov eax, 0xff; syscall; 
0x00000000126e37: nop [rax+rax]; nop; endbr64; mov eax, 0xff; syscall; 
0x0000000009c0c5: nop [rax+rax]; nop; endbr64; xor eax, eax; ret; 
0x0000000009c0c7: nop [rax+rax]; nop; endbr64; xor eax, eax; ret; 
0x0000000009c0c6: nop [rax+rax]; nop; endbr64; xor eax, eax; ret; 
0x000000001a4a04: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x000000001a4a07: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x000000001a4a06: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x000000001a49f6: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x000000001a49f4: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x000000001a49f7: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x0000000018d697: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d696: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d694: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d6f7: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x0000000018d6f4: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x0000000018d6f6: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000000c0c77: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x000000000c0c74: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x000000000c0c76: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x000000001b0a44: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000001b0a46: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000001b0a47: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000c0c87: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000c0c86: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000c0c84: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000c0cd4: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000c0cd7: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000c0cd6: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000d83d7: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000d83d4: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000d83d6: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x0000000019fb06: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x0000000019fb07: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x0000000019fb04: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x0000000008a74b: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000099df3: nop [rax+rax]; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x000000000e60a2: nop [rax+rax]; pop rbp; ret; 
0x000000000e60a3: nop [rax+rax]; pop rbp; ret; 
0x000000000f7017: nop [rax+rax]; ret; 
0x0000000003e9d8: nop [rax+rax]; ret; 
0x0000000006a817: nop [rax+rax]; ret; 
0x00000000035da3: nop [rax+rax]; ret; 
0x000000000f6fea: nop [rax+rax]; ret; 
0x000000000f7016: nop [rax+rax]; ret; 
0x0000000014a638: nop [rax+rax]; shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000087478: nop [rax+rax]; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x00000000087477: nop [rax+rax]; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x00000000087476: nop [rax+rax]; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x00000000087547: nop [rax+rax]; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x00000000087548: nop [rax+rax]; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x00000000087546: nop [rax+rax]; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x00000000172736: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x00000000172738: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x00000000172737: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x0000000008f212: nop [rax+rax]; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000008f213: nop [rax+rax]; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x00000000084542: nop [rax+rax]; sub rax, rcx; sar rax, 0x2; sub eax, 0x1; ret; 
0x00000000084543: nop [rax+rax]; sub rax, rcx; sar rax, 0x2; sub eax, 0x1; ret; 
0x0000000008e953: nop [rax+rax]; sub rax, rcx; sub eax, 0x1; ret; 
0x0000000008e952: nop [rax+rax]; sub rax, rcx; sub eax, 0x1; ret; 
0x000000001ae8a8: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001ae8a5: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001ae8a7: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001b57a7: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57a8: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57bb: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57ba: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57ca: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57cb: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57db: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b57da: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b1788: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1786: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1787: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8bb: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae72b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae72a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b1757: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae73b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae73a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b1756: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b1758: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae74b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001ae74a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b225b: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b226b: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b227b: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001a72eb: nop [rax+rax]; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a72ea: nop [rax+rax]; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a71eb: nop [rax+rax]; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001afb68: nop [rax+rax]; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x0000000019ee17: nop [rax+rax]; vzeroupper; ret; 
0x0000000019ee18: nop [rax+rax]; vzeroupper; ret; 
0x00000000126465: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x11f; syscall; 
0x00000000126464: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x11f; syscall; 
0x00000000126466: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x11f; syscall; 
0x000000001265e4: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x131; syscall; 
0x000000001265e5: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x131; syscall; 
0x000000001265e6: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x131; syscall; 
0x00000000119d35: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1; syscall; 
0x00000000119d34: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1; syscall; 
0x00000000119d36: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1; syscall; 
0x000000001197f5: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1b4; syscall; 
0x000000001197f4: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1b4; syscall; 
0x000000001197f6: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x1b4; syscall; 
0x0000000009fdb6: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x3; syscall; 
0x0000000009fdb5: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x3; syscall; 
0x0000000009fdb4: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x3; syscall; 
0x000000000ec334: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x79; syscall; 
0x000000000ec336: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x79; syscall; 
0x000000000ec335: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0x79; syscall; 
0x0000000011ec15: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xb; syscall; 
0x0000000011ec16: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xb; syscall; 
0x0000000011ec14: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xb; syscall; 
0x000000000d99d6: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xc9; syscall; 
0x000000000d99d5: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xc9; syscall; 
0x000000000d99d4: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, 0xc9; syscall; 
0x000000000e66d4: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, [rdi]; ret; 
0x000000000e66d6: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, [rdi]; ret; 
0x000000000e66d5: nop [rax+rax]; xchg ax, ax; endbr64; mov eax, [rdi]; ret; 
0x0000000015d216: nop [rax+rax]; xchg ax, ax; endbr64; ret; 
0x0000000015d215: nop [rax+rax]; xchg ax, ax; endbr64; ret; 
0x0000000015d213: nop [rax+rax]; xchg ax, ax; endbr64; ret; 
0x0000000009be14: nop [rax+rax]; xchg ax, ax; endbr64; xor eax, eax; ret; 
0x0000000009be15: nop [rax+rax]; xchg ax, ax; endbr64; xor eax, eax; ret; 
0x0000000009be16: nop [rax+rax]; xchg ax, ax; endbr64; xor eax, eax; ret; 
0x0000000018d685: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000018d686: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000018d683: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000018d6b5: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x0000000018d6b6: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x0000000018d6b3: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000c0c66: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000c0c63: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000c0c65: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000c0c93: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000c0c95: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000c0c96: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000bfc73: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000bfc75: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000bfc76: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000001b3e53: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x000000001b3e56: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x000000001b3e55: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x000000001b61a3: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b61a5: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b61a6: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6433: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6436: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6435: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcf3: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001afcf6: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001afcf5: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c3d33: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c3d35: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c3d36: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000d6ee3: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000d6ee5: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000d6ee6: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000d7e76: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x000000000d7e75: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x000000000d7e73: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x0000000011d76b: nop [rax+rax]; xor eax, eax; add rsp, 0x8; ret; 
0x0000000011d76a: nop [rax+rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000001740a2: nop [rax+rax]; xor eax, eax; pop rbp; ret; 
0x000000001740a3: nop [rax+rax]; xor eax, eax; pop rbp; ret; 
0x00000000093248: nop [rax+rax]; xor eax, eax; pop rbx; ret; 
0x000000000d8e33: nop [rax+rax]; xor eax, eax; pop rbx; ret; 
0x00000000093247: nop [rax+rax]; xor eax, eax; pop rbx; ret; 
0x000000000d8e32: nop [rax+rax]; xor eax, eax; pop rbx; ret; 
0x00000000086a4b: nop [rax+rax]; xor eax, eax; ret; 
0x000000000c51b7: nop [rax+rax]; xor eax, eax; ret; 
0x00000000086a4a: nop [rax+rax]; xor eax, eax; ret; 
0x00000000045376: nop [rax+rax]; xor eax, eax; ret; 
0x00000000045377: nop [rax+rax]; xor eax, eax; ret; 
0x00000000045378: nop [rax+rax]; xor eax, eax; ret; 
0x000000001992eb: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000199658: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000001992ea: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000199655: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000199657: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000000416d3: nop [rax+rax]; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000a85d3: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x000000000a85d2: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x000000000d8d38: nop [rax+rax]; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000d8d37: nop [rax+rax]; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000d8197: nop [rax+rax]; xor rax, rax; ret; 
0x000000000d7bbb: nop [rax+rax]; xor rax, rax; ret; 
0x000000000d8195: nop [rax+rax]; xor rax, rax; ret; 
0x000000000d7bba: nop [rax+rax]; xor rax, rax; ret; 
0x000000000d8198: nop [rax+rax]; xor rax, rax; ret; 
0x000000000620ac: nop [rax]; add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x000000000d83ac: nop [rax]; add rax, 0x1; ret; 
0x000000001bbad9: nop [rax]; add rsp, 0x8; ret; 
0x00000000092779: nop [rax]; and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x000000000b4ba9: nop [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000b4bc9: nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b4b9c: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000b4dfd: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x00000000199abd: nop [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000b51fd: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000b5099: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000b50a9: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000001b3ecc: nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x0000000019db2d: nop [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000005656d: nop [rax]; bts rdx, 0x34; mov eax, 0x1; mov [rsi], rdx; ret; 
0x00000000175844: nop [rax]; call rax; 
0x000000001751e5: nop [rax]; cmp byte ptr [rsp+0x1f], 0x0; je short 0x00000000001751fa; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x360]; 
0x00000000099de1: nop [rax]; cmp esi, 0x1; je short 0x0000000000099df8; mov eax, 0x16; ret; 
0x0000000016d17c: nop [rax]; endbr64; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000008dd0d: nop [rax]; endbr64; cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x00000000029f3c: nop [rax]; endbr64; lea rax, [rip+0x1aff5c]; ret; 
0x00000000112ffc: nop [rax]; endbr64; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000125e7c: nop [rax]; endbr64; mov eax, 0x122; syscall; 
0x0000000011525c: nop [rax]; endbr64; mov eax, 0x125; syscall; 
0x00000000114aec: nop [rax]; endbr64; mov eax, 0x15; syscall; 
0x0000000009d53c: nop [rax]; endbr64; mov eax, 0x18; syscall; 
0x0000000016b3dd: nop [rax]; endbr64; mov eax, 0x1; ret; 
0x0000000012858c: nop [rax]; endbr64; mov eax, 0x1e; syscall; 
0x000000000dcdad: nop [rax]; endbr64; mov eax, 0x24; syscall; 
0x0000000016998c: nop [rax]; endbr64; mov eax, 0x2; ret; 
0x00000000127cac: nop [rax]; endbr64; mov eax, 0x30; syscall; 
0x000000001277cc: nop [rax]; endbr64; mov eax, 0x32; syscall; 
0x000000000eb0e9: nop [rax]; endbr64; mov eax, 0x3b; syscall; 
0x000000001285bc: nop [rax]; endbr64; mov eax, 0x43; syscall; 
0x000000001283bd: nop [rax]; endbr64; mov eax, 0x44; syscall; 
0x0000000011612c: nop [rax]; endbr64; mov eax, 0x56; syscall; 
0x000000001143fc: nop [rax]; endbr64; mov eax, 0x5a; syscall; 
0x000000001143ec: nop [rax]; endbr64; mov eax, 0x5f; syscall; 
0x0000000011a4fc: nop [rax]; endbr64; mov eax, 0x62; syscall; 
0x000000000ec0cc: nop [rax]; endbr64; mov eax, 0x66; syscall; 
0x000000000ec0ec: nop [rax]; endbr64; mov eax, 0x68; syscall; 
0x000000000ec0dc: nop [rax]; endbr64; mov eax, 0x6b; syscall; 
0x000000000ec0fc: nop [rax]; endbr64; mov eax, 0x6c; syscall; 
0x000000000ec0bc: nop [rax]; endbr64; mov eax, 0x6e; syscall; 
0x000000000ec10c: nop [rax]; endbr64; mov eax, 0x73; syscall; 
0x00000000125c3c: nop [rax]; endbr64; mov eax, 0x7a; syscall; 
0x000000000ec3cd: nop [rax]; endbr64; mov eax, 0x7c; syscall; 
0x00000000126bfc: nop [rax]; endbr64; mov eax, 0x7d; syscall; 
0x00000000125f4c: nop [rax]; endbr64; mov eax, 0x87; syscall; 
0x000000001142ac: nop [rax]; endbr64; mov eax, 0x89; syscall; 
0x00000000114abd: nop [rax]; endbr64; mov eax, 0x8; syscall; 
0x0000000011a92c: nop [rax]; endbr64; mov eax, 0x8d; syscall; 
0x00000000108bdc: nop [rax]; endbr64; mov eax, 0x8e; syscall; 
0x00000000126b8c: nop [rax]; endbr64; mov eax, 0x9e; syscall; 
0x0000000011b65c: nop [rax]; endbr64; mov eax, 0xab; syscall; 
0x0000000012717c: nop [rax]; endbr64; mov eax, 0xea; syscall; 
0x000000000a038c: nop [rax]; endbr64; mov eax, 0xf5; syscall; 
0x0000000008f46c: nop [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008f1dc: nop [rax]; endbr64; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x0000000016d09d: nop [rax]; endbr64; mov eax, [rdi+0x28]; ret; 
0x00000000119d6c: nop [rax]; endbr64; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000008920d: nop [rax]; endbr64; mov eax, [rdi]; and eax, 0x200; ret; 
0x0000000004311c: nop [rax]; endbr64; mov eax, [rip+0x1d60be]; ret; 
0x0000000003a16c: nop [rax]; endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x0000000013676c: nop [rax]; endbr64; mov eax, edi; bswap eax; ret; 
0x00000000136779: nop [rax]; endbr64; mov eax, edi; rol ax, 0x8; ret; 
0x0000000009b53c: nop [rax]; endbr64; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f58c: nop [rax]; endbr64; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000119cfc: nop [rax]; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000125f0d: nop [rax]; endbr64; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000127c6d: nop [rax]; endbr64; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000122179: nop [rax]; endbr64; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000113ed9: nop [rax]; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000011941d: nop [rax]; endbr64; mov r10d, ecx; mov eax, 0x118; syscall; 
0x0000000008e819: nop [rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000009753d: nop [rax]; endbr64; mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x0000000002b97c: nop [rax]; endbr64; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000017503d: nop [rax]; endbr64; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x0000000014a389: nop [rax]; endbr64; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x00000000136b19: nop [rax]; endbr64; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x0000000009d4ed: nop [rax]; endbr64; mov rax, fs:[0x10]; ret; 
0x0000000008f4e9: nop [rax]; endbr64; mov rax, rdi; ret; 
0x0000000004170c: nop [rax]; endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000090ff9: nop [rax]; endbr64; ret; 
0x00000000165a1d: nop [rax]; endbr64; ret; 
0x0000000008f48c: nop [rax]; endbr64; xor eax, eax; ret; 
0x00000000092b5d: nop [rax]; endbr64; xor eax, eax; ret; 
0x000000000a9601: nop [rax]; lea rax, [rip+0x105671]; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000ab0f1: nop [rax]; lea rax, [rip+0x106601]; test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000a8781: nop [rax]; lea rax, [rip+0x109a91]; test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000a8801: nop [rax]; lea rax, [rip+0x10b671]; test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a41: nop [rax]; lea rax, [rip+0x10b6f1]; test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000c5451: nop [rax]; lea rax, [rip+0xeeee1]; test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54d1: nop [rax]; lea rax, [rip+0xef0e1]; test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c5701: nop [rax]; lea rax, [rip+0xef4f1]; test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c5831: nop [rax]; lea rax, [rip+0xefcb1]; test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x000000000b1651: nop [rax]; lea rax, [rip+0xfe0a1]; test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000000d9bf4: nop [rax]; lea rax, [rip-0x10f]; add rsp, 0x58; ret; 
0x000000000d9ae4: nop [rax]; lea rax, [rip-0x10f]; ret; 
0x000000000d9c04: nop [rax]; lea rax, [rip-0x11f]; ret; 
0x000000000d9ad4: nop [rax]; lea rax, [rip-0xff]; add rsp, 0x58; ret; 
0x000000000b13bc: nop [rax]; mov [rax], dx; add rax, rcx; ret; 
0x000000000b14a9: nop [rax]; mov [rax], ecx; ret; 
0x000000001a121c: nop [rax]; mov [rax], edi; mov [rax+rdx-0x4], edi; vzeroupper; ret; 
0x000000000b13e4: nop [rax]; mov [rax], r8d; add rax, rcx; ret; 
0x000000000b148c: nop [rax]; mov [rax], si; ret; 
0x0000000018d67c: nop [rax]; mov [rcx], dl; ret; 
0x000000000c0c5c: nop [rax]; mov [rdi], dl; ret; 
0x0000000019f88c: nop [rax]; mov [rdi], dl; vzeroupper; ret; 
0x0000000019f8bd: nop [rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x0000000009c571: nop [rax]; mov [rdx+0x8], rax; ret; 
0x0000000018b6ad: nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x000000000f417c: nop [rax]; mov byte ptr [rax+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000b1481: nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x000000000b1045: nop [rax]; mov byte ptr [rcx-0x1], 0x0; mov [rdx], rcx; ret; 
0x000000000c095c: nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x00000000162d6d: nop [rax]; mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x00000000125a84: nop [rax]; mov dword ptr [rip+0xfba2e], 0x0; mov qword ptr [rip+0xfba2b], 0x0; ret; 
0x0000000007c6c9: nop [rax]; mov dword ptr [rsp+0x28], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c15: nop [rax]; mov dword ptr [rsp+0x4c], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076c01: nop [rax]; mov dword ptr [rsp+0x50], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000076b11: nop [rax]; mov dword ptr [rsp+0x5c], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000c20f9: nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x00000000092e64: nop [rax]; mov eax, 0x16; ret; 
0x00000000099e39: nop [rax]; mov eax, 0x16; ret; 
0x0000000009108d: nop [rax]; mov eax, 0x16; ret; 
0x000000000d7ba9: nop [rax]; mov eax, 0x1; jg short 0x00000000000d7bb9; neg eax; ret; 
0x00000000112cfc: nop [rax]; mov eax, 0x1; pop rbx; ret; 
0x0000000011ccfc: nop [rax]; mov eax, 0x1; ret; 
0x00000000142b59: nop [rax]; mov eax, 0x2; ret; 
0x000000000961f1: nop [rax]; mov eax, 0x3; ret; 
0x00000000126331: nop [rax]; mov eax, 0x95; syscall; 
0x0000000017604c: nop [rax]; mov eax, 0xba; syscall; 
0x000000000ecf94: nop [rax]; mov eax, 0xfc17; ret; 
0x000000000ed0c4: nop [rax]; mov eax, 0xff; ret; 
0x00000000061f0c: nop [rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000141e25: nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000014d15c: nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000143009: nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000018fa1c: nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x000000000d7afd: nop [rax]; mov eax, [rdi+0x1c]; cmp eax, [rsi+0x1c]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a9d: nop [rax]; mov eax, [rdi+0xc]; cmp eax, [rsi+0xc]; jne 0x00000000000d7bb0; ret; 
0x000000001a675d: nop [rax]; mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne 0x00000000001a6850; ret; 
0x00000000136834: nop [rax]; mov eax, edi; shr eax, 0x18; ret; 
0x000000000825e1: nop [rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000807ac: nop [rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000018258c: nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x000000000c212c: nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000c098d: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000182ca9: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000114dd5: nop [rax]; mov edx, r12d; mov eax, 0x10d; syscall; 
0x000000000909cc: nop [rax]; mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x0000000009d42c: nop [rax]; mov r12, [rbp+0x18]; mov rdi, [rbp+0x8]; call qword ptr [rbp]; 
0x0000000004251c: nop [rax]; mov rax, 0xf; syscall; 
0x000000001432e9: nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x00000000122425: nop [rax]; mov rax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000012249d: nop [rax]; mov rax, [rax+0x320]; ret; 
0x0000000008fee1: nop [rax]; mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x00000000122491: nop [rax]; mov rax, [rax+0x60]; ret; 
0x0000000016941d: nop [rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000009038d: nop [rax]; mov rax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x0000000018f96d: nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x0000000018b63d: nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000009e079: nop [rax]; mov rax, [rdi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000016b35d: nop [rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016bd6d: nop [rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000016c034: nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000016ca29: nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x4]; call qword ptr [rax+0x40]; 
0x0000000015fbd9: nop [rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000113e9c: nop [rax]; mov rax, [rip+0x104f69]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000d8e3c: nop [rax]; mov rax, [rip+0x13ffc9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000c52e4: nop [rax]; mov rax, [rip+0x153bd9]; mov rax, [rax+0x248]; ret; 
0x000000000a76e4: nop [rax]; mov rax, [rip+0x1716f1]; call qword ptr [rax]; 
0x0000000009cd99: nop [rax]; mov rax, [rip+0x17c069]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009c545: nop [rax]; mov rax, [rip+0x17c8c1]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000009c10d: nop [rax]; mov rax, [rip+0x17ccf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000909f4: nop [rax]; mov rax, [rip+0x1884c9]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x000000000897c9: nop [rax]; mov rax, [rip+0x18f639]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000875b4: nop [rax]; mov rax, [rip+0x191851]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000081185: nop [rax]; mov rax, [rip+0x197c81]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000466a5: nop [rax]; mov rax, [rip+0x1d2761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000043105: nop [rax]; mov rax, [rip+0x1d5d01]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000430c5: nop [rax]; mov rax, [rip+0x1d5d41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042f19: nop [rax]; mov rax, [rip+0x1d5ee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424e9: nop [rax]; mov rax, [rip+0x1d6919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000002a52c: nop [rax]; mov rax, [rip+0x1ee8d9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000168c19: nop [rax]; mov rax, [rip+0xb01b1]; pop rbx; ret; 
0x00000000168b99: nop [rax]; mov rax, [rip+0xb0421]; pop rbx; ret; 
0x0000000014961c: nop [rax]; mov rax, [rip+0xcf7e9]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001360b9: nop [rax]; mov rax, [rip+0xe2d49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001267b5: nop [rax]; mov rax, [rip+0xf2651]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012640c: nop [rax]; mov rax, [rip+0xf29f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000129429: nop [rax]; mov rax, [rip+0xf81e1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000011bfc1: nop [rax]; mov rax, [rip+0xfce41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011a9ed: nop [rax]; mov rax, [rip+0xfe419]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000001194c4: nop [rax]; mov rax, [rip+0xff941]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000009e779: nop [rax]; mov rax, [rsi+0x20]; mov [rdx+0x20], rax; ret; 
0x0000000012add9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1000; ret; 
0x0000000012a959: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x1; ret; 
0x0000000012acd9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2000; ret; 
0x0000000012aad9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x200; ret; 
0x0000000012a9d9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x2; ret; 
0x0000000012abd9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4000; ret; 
0x0000000012a8d9: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x400; ret; 
0x0000000012ac59: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x4; ret; 
0x0000000012ab59: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8000; ret; 
0x0000000012a859: nop [rax]; mov rax, [rsi+0x68]; movzx eax, word ptr [rax+rdx*2]; and eax, 0x8; ret; 
0x00000000164b71: nop [rax]; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000bf5cc: nop [rax]; mov rax, rdi; ret; 
0x0000000007c7a1: nop [rax]; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076ce1: nop [rax]; mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000007c669: nop [rax]; mov rbx, rcx; mov ebp, 0x1; xor r8d, r8d; jmp rsi; 
0x00000000076c25: nop [rax]; mov rbx, rcx; mov r10d, 0x1; jmp rsi; 
0x00000000076c59: nop [rax]; mov rbx, rcx; mov r15d, 0x1; jmp rsi; 
0x0000000007c6dd: nop [rax]; mov rbx, rcx; mov r9d, 0x1; jmp rsi; 
0x0000000007c774: nop [rax]; mov rbx, rdx; mov r10d, 0x1; mov edx, 0x1; jmp rsi; 
0x000000000b1541: nop [rax]; mov rcx, [rsp+0x10]; mov [rax], rcx; lea rax, [rax+rdx-0x1]; ret; 
0x000000000b1055: nop [rax]; mov rcx, rax; xor eax, eax; mov [rdx], rcx; ret; 
0x000000000a7988: nop [rax]; mov rdi, [rbx+0x48]; call rax; 
0x000000000a78b9: nop [rax]; mov rdi, r12; call rax; 
0x00000000169601: nop [rax]; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x0000000017c82c: nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000182ae9: nop [rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x0000000016099d: nop [rax]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x000000000729e1: nop [rax]; mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000119b31: nop [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000120029: nop [rax]; mov rsi, [r14]; mov rax, [rsp+0x10]; mov rdi, rbp; call rax; 
0x000000001663a5: nop [rax]; movdqu xmm0, [rcx]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x000000000bfd69: nop [rax]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x0000000015edcd: nop [rax]; movdqu xmm1, [rdi+0x20]; mov dword ptr [rsi], 0x6; movups [rsi+0x8], xmm1; ret; 
0x0000000010933d: nop [rax]; movzx eax, byte ptr [rdi+0x9]; and eax, 0xf; ret; 
0x000000001a5cfd: nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x000000000b2ddd: nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000018271c: nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000001b0919: nop [rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000182df9: nop [rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000018269c: nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001b019d: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000001b139d: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000182d89: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000019e379: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x00000000092654: nop [rax]; or dword ptr [rdi+0x8], 0x1; xor eax, eax; ret; 
0x000000000d2bb1: nop [rax]; pop rbp; ret; 
0x00000000167f65: nop [rax]; pop rbp; ret; 
0x000000001bb19c: nop [rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000a5524: nop [rax]; ret; 
0x000000000917fd: nop [rax]; ret; 
0x00000000052fa1: nop [rax]; ret; 
0x000000000d6b49: nop [rax]; setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x0000000009af8c: nop [rax]; test al, 0x1; jne short 0x000000000009af68; mov eax, 0x10; ret; 
0x000000000d812d: nop [rax]; test rax, 0x1; je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x000000001b5259: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b5249: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f09: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3ef9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3eec: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001b3ed9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b5269: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b59d9: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b644d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b645d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b593c: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000001b1909: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b594c: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae94c: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b5f7d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f8d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x000000001afe0d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001b18fd: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001b40bc: nop [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40cd: nop [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000019f8dc: nop [rax]; vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001b0a79: nop [rax]; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000010586c: nop [rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000000a2651: nop [rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000000f6ff1: nop [rax]; xor eax, eax; cmp [rsi], cl; je 0x00000000000f6f5d; ret; 
0x000000000612d4: nop [rax]; xor eax, eax; ret; 
0x000000000b1305: nop [rax]; xor eax, eax; ret; 
0x000000000404f1: nop [rax]; xor eax, eax; ret; 
0x0000000019d94d: nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000001a21cc: nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000094ad9: nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000149ac4: nop [rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x0000000016cc7c: nop [rax]; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000016d091: nop edx, edi; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x0000000016d081: nop edx, edi; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000008a001: nop edx, edi; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000041421: nop edx, edi; andpd xmm0, [rip+0x1a0c64]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x000000000a4f71: nop edx, edi; cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x00000000090ca1: nop edx, edi; cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x00000000092bb1: nop edx, edi; cmp edi, 0x20; je short 0x0000000000092bc0; ret; 
0x000000000918f1: nop edx, edi; cmp edi, 0x21; je short 0x0000000000091900; ret; 
0x00000000132a91: nop edx, edi; cmp edi, 0x56; je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x000000000e55b1: nop edx, edi; cmp esi, 0x1; je short 0x00000000000e55c0; xor eax, eax; ret; 
0x000000000e55e1: nop edx, edi; cmp esi, 0x1; je short 0x00000000000e55f0; xor eax, eax; ret; 
0x000000000921c1: nop edx, edi; cmp qword ptr [rdi+0x28], 0x0; je short 0x00000000000921d0; xor eax, eax; ret; 
0x0000000008dd11: nop edx, edi; cmp qword ptr [rdi+0x38], 0x0; je short 0x000000000008dd20; ret; 
0x000000000e5751: nop edx, edi; cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000e5788; mov eax, 0xe3; syscall; 
0x000000001354d1: nop edx, edi; cmp rdx, rcx; ja short 0x0000000000135504; xor eax, eax; syscall; 
0x00000000141df1: nop edx, edi; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000029f31: nop edx, edi; lea rax, [rip+0x1ae09b]; ret; 
0x00000000029f41: nop edx, edi; lea rax, [rip+0x1aff5c]; ret; 
0x0000000009be31: nop edx, edi; lock dec dword ptr [rdi]; jne short 0x000000000009be40; xor eax, eax; ret; 
0x00000000092671: nop edx, edi; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x00000000113001: nop edx, edi; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000092b81: nop edx, edi; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000009be71: nop edx, edi; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000a0bf1: nop edx, edi; mov dword ptr [rip+0x17f846], 0x0; mov dword ptr [rip+0x17f838], 0x0; ret; 
0x000000000a00c1: nop edx, edi; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x00000000114631: nop edx, edi; mov eax, 0x102; syscall; 
0x00000000116281: nop edx, edi; mov eax, 0x107; syscall; 
0x000000001161c1: nop edx, edi; mov eax, 0x10a; syscall; 
0x00000000126fc1: nop edx, edi; mov eax, 0x110; syscall; 
0x00000000127021: nop edx, edi; mov eax, 0x11b; syscall; 
0x00000000126471: nop edx, edi; mov eax, 0x11f; syscall; 
0x00000000125e81: nop edx, edi; mov eax, 0x122; syscall; 
0x00000000126cf1: nop edx, edi; mov eax, 0x123; syscall; 
0x000000001151f1: nop edx, edi; mov eax, 0x124; syscall; 
0x00000000115261: nop edx, edi; mov eax, 0x125; syscall; 
0x00000000126e11: nop edx, edi; mov eax, 0x126; syscall; 
0x00000000127051: nop edx, edi; mov eax, 0x12c; syscall; 
0x000000001265f1: nop edx, edi; mov eax, 0x131; syscall; 
0x0000000011bb71: nop edx, edi; mov eax, 0x132; syscall; 
0x000000001270b1: nop edx, edi; mov eax, 0x134; syscall; 
0x000000001270e1: nop edx, edi; mov eax, 0x13f; syscall; 
0x00000000127111: nop edx, edi; mov eax, 0x14a; syscall; 
0x00000000127141: nop edx, edi; mov eax, 0x14b; syscall; 
0x00000000114af1: nop edx, edi; mov eax, 0x15; syscall; 
0x00000000092731: nop edx, edi; mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000092740; ret; 
0x00000000092861: nop edx, edi; mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000092878; ret; 
0x000000000928a1: nop edx, edi; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x00000000000928b8; ret; 
0x0000000009d541: nop edx, edi; mov eax, 0x18; syscall; 
0x0000000015d231: nop edx, edi; mov eax, 0x1; ret; 
0x00000000119d41: nop edx, edi; mov eax, 0x1; syscall; 
0x000000000ed191: nop edx, edi; mov eax, 0x1; test edi, edi; js short 0x00000000000ed1a0; ret; 
0x00000000119801: nop edx, edi; mov eax, 0x1b4; syscall; 
0x0000000011ed51: nop edx, edi; mov eax, 0x1b; syscall; 
0x0000000011ed21: nop edx, edi; mov eax, 0x1c; syscall; 
0x00000000128591: nop edx, edi; mov eax, 0x1e; syscall; 
0x00000000115191: nop edx, edi; mov eax, 0x20; syscall; 
0x000000001151c1: nop edx, edi; mov eax, 0x21; syscall; 
0x000000000dcdb1: nop edx, edi; mov eax, 0x24; syscall; 
0x000000000ea5b1: nop edx, edi; mov eax, 0x25; syscall; 
0x000000000dcde1: nop edx, edi; mov eax, 0x26; syscall; 
0x000000000ec0b1: nop edx, edi; mov eax, 0x27; syscall; 
0x00000000127ce1: nop edx, edi; mov eax, 0x29; syscall; 
0x0000000015f551: nop edx, edi; mov eax, 0x2; ret; 
0x00000000127cb1: nop edx, edi; mov eax, 0x30; syscall; 
0x00000000127661: nop edx, edi; mov eax, 0x31; syscall; 
0x000000001277d1: nop edx, edi; mov eax, 0x32; syscall; 
0x00000000127761: nop edx, edi; mov eax, 0x33; syscall; 
0x00000000127731: nop edx, edi; mov eax, 0x34; syscall; 
0x0000000009fdc1: nop edx, edi; mov eax, 0x3; syscall; 
0x000000000eb0f1: nop edx, edi; mov eax, 0x3b; syscall; 
0x00000000042751: nop edx, edi; mov eax, 0x3e; syscall; 
0x000000000ea371: nop edx, edi; mov eax, 0x3f; syscall; 
0x00000000128461: nop edx, edi; mov eax, 0x40; syscall; 
0x000000001285c1: nop edx, edi; mov eax, 0x43; syscall; 
0x000000001283c1: nop edx, edi; mov eax, 0x44; syscall; 
0x00000000114fa1: nop edx, edi; mov eax, 0x49; syscall; 
0x0000000011d131: nop edx, edi; mov eax, 0x4c; syscall; 
0x0000000011d161: nop edx, edi; mov eax, 0x4d; syscall; 
0x00000000115321: nop edx, edi; mov eax, 0x50; syscall; 
0x00000000115351: nop edx, edi; mov eax, 0x51; syscall; 
0x00000000061f21: nop edx, edi; mov eax, 0x52; syscall; 
0x00000000114601: nop edx, edi; mov eax, 0x53; syscall; 
0x000000001162b1: nop edx, edi; mov eax, 0x54; syscall; 
0x00000000116131: nop edx, edi; mov eax, 0x56; syscall; 
0x00000000116251: nop edx, edi; mov eax, 0x57; syscall; 
0x00000000116191: nop edx, edi; mov eax, 0x58; syscall; 
0x000000001161f1: nop edx, edi; mov eax, 0x59; syscall; 
0x00000000114401: nop edx, edi; mov eax, 0x5a; syscall; 
0x00000000114431: nop edx, edi; mov eax, 0x5b; syscall; 
0x00000000115c11: nop edx, edi; mov eax, 0x5c; syscall; 
0x00000000115c41: nop edx, edi; mov eax, 0x5d; syscall; 
0x00000000115c71: nop edx, edi; mov eax, 0x5e; syscall; 
0x000000001143f1: nop edx, edi; mov eax, 0x5f; syscall; 
0x0000000011a501: nop edx, edi; mov eax, 0x62; syscall; 
0x00000000126f91: nop edx, edi; mov eax, 0x63; syscall; 
0x000000000ea3a1: nop edx, edi; mov eax, 0x64; syscall; 
0x000000000ec0d1: nop edx, edi; mov eax, 0x66; syscall; 
0x00000000126e71: nop edx, edi; mov eax, 0x67; syscall; 
0x000000000ec0f1: nop edx, edi; mov eax, 0x68; syscall; 
0x000000000ec0e1: nop edx, edi; mov eax, 0x6b; syscall; 
0x000000000ec101: nop edx, edi; mov eax, 0x6c; syscall; 
0x000000000ec371: nop edx, edi; mov eax, 0x6d; syscall; 
0x000000000ec0c1: nop edx, edi; mov eax, 0x6e; syscall; 
0x000000000ec3a1: nop edx, edi; mov eax, 0x6f; syscall; 
0x000000000ec401: nop edx, edi; mov eax, 0x70; syscall; 
0x000000000ec111: nop edx, edi; mov eax, 0x73; syscall; 
0x000000000ec431: nop edx, edi; mov eax, 0x76; syscall; 
0x000000000ec461: nop edx, edi; mov eax, 0x78; syscall; 
0x000000000ec341: nop edx, edi; mov eax, 0x79; syscall; 
0x00000000125c41: nop edx, edi; mov eax, 0x7a; syscall; 
0x00000000125c71: nop edx, edi; mov eax, 0x7b; syscall; 
0x000000000ec3d1: nop edx, edi; mov eax, 0x7c; syscall; 
0x00000000126c01: nop edx, edi; mov eax, 0x7d; syscall; 
0x00000000126c31: nop edx, edi; mov eax, 0x7e; syscall; 
0x00000000042d41: nop edx, edi; mov eax, 0x83; syscall; 
0x00000000126ff1: nop edx, edi; mov eax, 0x86; syscall; 
0x00000000125f51: nop edx, edi; mov eax, 0x87; syscall; 
0x000000001142b1: nop edx, edi; mov eax, 0x89; syscall; 
0x00000000114ac1: nop edx, edi; mov eax, 0x8; syscall; 
0x000000001142e1: nop edx, edi; mov eax, 0x8a; syscall; 
0x0000000011a8f1: nop edx, edi; mov eax, 0x8c; syscall; 
0x0000000011a931: nop edx, edi; mov eax, 0x8d; syscall; 
0x00000000108be1: nop edx, edi; mov eax, 0x8e; syscall; 
0x00000000108c11: nop edx, edi; mov eax, 0x8f; syscall; 
0x00000000108c41: nop edx, edi; mov eax, 0x90; syscall; 
0x00000000108c71: nop edx, edi; mov eax, 0x91; syscall; 
0x00000000108cd1: nop edx, edi; mov eax, 0x92; syscall; 
0x00000000108d01: nop edx, edi; mov eax, 0x93; syscall; 
0x00000000108d31: nop edx, edi; mov eax, 0x94; syscall; 
0x0000000011edb1: nop edx, edi; mov eax, 0x95; syscall; 
0x0000000011ede1: nop edx, edi; mov eax, 0x96; syscall; 
0x0000000011ee11: nop edx, edi; mov eax, 0x97; syscall; 
0x0000000011ee41: nop edx, edi; mov eax, 0x98; syscall; 
0x0000000011bea1: nop edx, edi; mov eax, 0x99; syscall; 
0x00000000126bc1: nop edx, edi; mov eax, 0x9a; syscall; 
0x00000000126f01: nop edx, edi; mov eax, 0x9b; syscall; 
0x00000000126b91: nop edx, edi; mov eax, 0x9e; syscall; 
0x0000000011b9f1: nop edx, edi; mov eax, 0xa1; syscall; 
0x0000000011bab1: nop edx, edi; mov eax, 0xa2; syscall; 
0x0000000011b9c1: nop edx, edi; mov eax, 0xa3; syscall; 
0x00000000125be1: nop edx, edi; mov eax, 0xa6; syscall; 
0x0000000011bed1: nop edx, edi; mov eax, 0xa7; syscall; 
0x0000000011bf01: nop edx, edi; mov eax, 0xa8; syscall; 
0x0000000011ec51: nop edx, edi; mov eax, 0xa; syscall; 
0x0000000011b521: nop edx, edi; mov eax, 0xaa; syscall; 
0x0000000011b661: nop edx, edi; mov eax, 0xab; syscall; 
0x00000000125b31: nop edx, edi; mov eax, 0xac; syscall; 
0x00000000125b01: nop edx, edi; mov eax, 0xad; syscall; 
0x00000000126c61: nop edx, edi; mov eax, 0xae; syscall; 
0x00000000126c91: nop edx, edi; mov eax, 0xb0; syscall; 
0x00000000126d51: nop edx, edi; mov eax, 0xb1; syscall; 
0x00000000126ed1: nop edx, edi; mov eax, 0xb4; syscall; 
0x0000000011ec21: nop edx, edi; mov eax, 0xb; syscall; 
0x00000000127171: nop edx, edi; mov eax, 0xba; syscall; 
0x00000000125c11: nop edx, edi; mov eax, 0xbb; syscall; 
0x00000000122271: nop edx, edi; mov eax, 0xc2; syscall; 
0x000000001222d1: nop edx, edi; mov eax, 0xc3; syscall; 
0x000000001221b1: nop edx, edi; mov eax, 0xc4; syscall; 
0x00000000122361: nop edx, edi; mov eax, 0xc5; syscall; 
0x00000000122301: nop edx, edi; mov eax, 0xc6; syscall; 
0x000000001221e1: nop edx, edi; mov eax, 0xc7; syscall; 
0x000000000d99e1: nop edx, edi; mov eax, 0xc9; syscall; 
0x0000000011a9d1: nop edx, edi; mov eax, 0xc; syscall; 
0x00000000108dd1: nop edx, edi; mov eax, 0xcb; syscall; 
0x00000000126cc1: nop edx, edi; mov eax, 0xd5; syscall; 
0x00000000126bf1: nop edx, edi; mov eax, 0xe4; syscall; 
0x00000000127181: nop edx, edi; mov eax, 0xea; syscall; 
0x000000000a0391: nop edx, edi; mov eax, 0xf5; syscall; 
0x00000000126de1: nop edx, edi; mov eax, 0xfd; syscall; 
0x00000000126db1: nop edx, edi; mov eax, 0xfe; syscall; 
0x00000000126e41: nop edx, edi; mov eax, 0xff; syscall; 
0x0000000008ddd1: nop edx, edi; mov eax, 0xffffffff; ret; 
0x00000000113991: nop edx, edi; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008f1e1: nop edx, edi; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000113981: nop edx, edi; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000152051: nop edx, edi; mov eax, [rdi+0x20]; ret; 
0x0000000016d0a1: nop edx, edi; mov eax, [rdi+0x28]; ret; 
0x00000000092321: nop edx, edi; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000119d71: nop edx, edi; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000089211: nop edx, edi; mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000891e1: nop edx, edi; mov eax, [rdi]; and eax, 0x804; ret; 
0x00000000092311: nop edx, edi; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000e66e1: nop edx, edi; mov eax, [rdi]; ret; 
0x0000000008a011: nop edx, edi; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008a021: nop edx, edi; mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x000000000961c1: nop edx, edi; mov eax, [rip+0x189926]; ret; 
0x00000000043131: nop edx, edi; mov eax, [rip+0x1d60aa]; ret; 
0x00000000043121: nop edx, edi; mov eax, [rip+0x1d60be]; ret; 
0x0000000015da71: nop edx, edi; mov eax, [rip+0xc9e46]; test eax, eax; je short 0x000000000015da80; ret; 
0x00000000113a31: nop edx, edi; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x0000000003a171: nop edx, edi; mov eax, edi; and eax, 0x7f; ret; 
0x00000000136771: nop edx, edi; mov eax, edi; bswap eax; ret; 
0x00000000045dd1: nop edx, edi; mov eax, edi; neg eax; cmovs eax, edi; ret; 
0x00000000136781: nop edx, edi; mov eax, edi; rol ax, 0x8; ret; 
0x00000000114981: nop edx, edi; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x0000000009b5a1: nop edx, edi; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x00000000140ff1: nop edx, edi; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000173581: nop edx, edi; mov edi, [rip+0xa5fbe]; test edi, edi; jns short 0x0000000000173590; ret; 
0x00000000042781: nop edx, edi; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000178371: nop edx, edi; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000009b541: nop edx, edi; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008f591: nop edx, edi; mov qword ptr [rip+0x18c4b1], 0x0; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x00000000115ca1: nop edx, edi; mov r10, rcx; mov eax, 0x104; syscall; 
0x00000000061f51: nop edx, edi; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000116161: nop edx, edi; mov r10, rcx; mov eax, 0x109; syscall; 
0x00000000116221: nop edx, edi; mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000119d01: nop edx, edi; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000001264a1: nop edx, edi; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000125f11: nop edx, edi; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000127081: nop edx, edi; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000126571: nop edx, edi; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000001265b1: nop edx, edi; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000113c31: nop edx, edi; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000119321: nop edx, edi; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000127d11: nop edx, edi; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000127c71: nop edx, edi; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000127791: nop edx, edi; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126ea1: nop edx, edi; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d81: nop edx, edi; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f31: nop edx, edi; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000126f61: nop edx, edi; mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000122391: nop edx, edi; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000122331: nop edx, edi; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000122211: nop edx, edi; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000122241: nop edx, edi; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001222a1: nop edx, edi; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000122181: nop edx, edi; mov r10, rcx; mov eax, 0xc1; syscall; 
0x0000000011ed81: nop edx, edi; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000128551: nop edx, edi; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000126d21: nop edx, edi; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000113ee1: nop edx, edi; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000119421: nop edx, edi; mov r10d, ecx; mov eax, 0x118; syscall; 
0x00000000126ab1: nop edx, edi; mov r10d, ecx; mov eax, 0x12d; syscall; 
0x000000001141e1: nop edx, edi; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x00000000118ee1: nop edx, edi; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000125e41: nop edx, edi; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000009bf21: nop edx, edi; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x0000000008e821: nop edx, edi; mov rax, 0xffffffffffffffff; ret; 
0x000000000922e1: nop edx, edi; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x000000000923f1: nop edx, edi; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000016cc31: nop edx, edi; mov rax, [rdi+0x18]; sub eax, [rdi+0x20]; ret; 
0x00000000090b31: nop edx, edi; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x0000000008f4e1: nop edx, edi; mov rax, [rdi+0x68]; ret; 
0x0000000009f191: nop edx, edi; mov rax, [rdi+0x78]; ret; 
0x00000000083bf1: nop edx, edi; mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000a0cf1: nop edx, edi; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x00000000000a0d00; ret; 
0x000000000a0ec1: nop edx, edi; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000a0ed0; ret; 
0x000000000a0d31: nop edx, edi; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000a0d40; ret; 
0x00000000097551: nop edx, edi; mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000097541: nop edx, edi; mov rax, [rdi]; mov [rip+0x181d5f], eax; ret; 
0x00000000090c91: nop edx, edi; mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c81: nop edx, edi; mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c71: nop edx, edi; mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x00000000090c61: nop edx, edi; mov rax, [rdi]; mov [rip+0x188623], eax; ret; 
0x0000000009c0e1: nop edx, edi; mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000a0d51: nop edx, edi; mov rax, [rdi]; nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce1: nop edx, edi; mov rax, [rdi]; nop; mov [rip+0x178689], rax; ret; 
0x000000000a0cd1: nop edx, edi; mov rax, [rdi]; nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd1: nop edx, edi; mov rax, [rdi]; nop; mov [rip+0x17f51e], eax; ret; 
0x0000000008f4c1: nop edx, edi; mov rax, [rip+0x18b1b5]; ret; 
0x00000000042f81: nop edx, edi; mov rax, [rip+0x1d5e85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a3a1: nop edx, edi; mov rax, [rip+0x1dea3d]; add rax, fs:[0x0]; ret; 
0x0000000003a361: nop edx, edi; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000003a381: nop edx, edi; mov rax, [rip+0x1dec6d]; add rax, fs:[0x0]; ret; 
0x000000000355d1: nop edx, edi; mov rax, [rip+0x1e54a5]; ret; 
0x0000000002a251: nop edx, edi; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x0000000002b981: nop edx, edi; mov rax, [rip+0x1ef0b5]; ret; 
0x0000000002b971: nop edx, edi; mov rax, [rip+0x1ef0bd]; ret; 
0x00000000178341: nop edx, edi; mov rax, [rip+0xa0ac5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000178321: nop edx, edi; mov rax, [rip+0xa0ae5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f1: nop edx, edi; mov rax, [rip+0xa0c15]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000177fb1: nop edx, edi; mov rax, [rip+0xa0e55]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f91: nop edx, edi; mov rax, [rip+0xa0e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f51: nop edx, edi; mov rax, [rip+0xa0eb5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f31: nop edx, edi; mov rax, [rip+0xa0ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177f11: nop edx, edi; mov rax, [rip+0xa0ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000177ef1: nop edx, edi; mov rax, [rip+0xa0f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000175ca1: nop edx, edi; mov rax, [rip+0xa321d]; jmp qword ptr [rax+0x378]; 
0x00000000175041: nop edx, edi; mov rax, [rip+0xa3e7d]; jmp qword ptr [rax+0x350]; 
0x000000001720c1: nop edx, edi; mov rax, [rip+0xa6d45]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000168961: nop edx, edi; mov rax, [rip+0xb045d]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x0000000014a391: nop edx, edi; mov rax, [rip+0xcec4d]; mov rax, fs:[rax]; ret; 
0x000000001517d1: nop edx, edi; mov rax, [rip+0xd0dad]; test rax, rax; jne short 0x00000000001517e8; ret; 
0x00000000136b21: nop edx, edi; mov rax, [rip+0xe2325]; add rax, fs:[0x0]; ret; 
0x00000000129d01: nop edx, edi; mov rax, [rip+0xef1bd]; mov eax, [rax+0x40]; ret; 
0x000000001271b1: nop edx, edi; mov rax, [rip+0xf1c55]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000011be81: nop edx, edi; mov rax, [rip+0xfcf85]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003a311: nop edx, edi; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a321: nop edx, edi; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000009b591: nop edx, edi; mov rax, fs:[0x10]; ret; 
0x00000000045e21: nop edx, edi; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000045de1: nop edx, edi; mov rax, rdi; neg rax; cmovs rax, rdi; ret; 
0x0000000008f4f1: nop edx, edi; mov rax, rdi; ret; 
0x00000000177e71: nop edx, edi; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x000000000d9cb1: nop edx, edi; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x00000000041f81: nop edx, edi; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000112fc1: nop edx, edi; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x0000000009a671: nop edx, edi; nop; xor eax, eax; ret; 
0x00000000092891: nop edx, edi; or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000041ba1: nop edx, edi; pand xmm1, [rip+0x1a0554]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041711: nop edx, edi; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000041a51: nop edx, edi; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000eac31: nop edx, edi; pop rdi; mov eax, 0x3a; syscall; 
0x00000000029d01: nop edx, edi; ret; 
0x0000000008d331: nop edx, edi; test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x00000000126301: nop edx, edi; test edx, edx; je short 0x0000000000126338; mov eax, 0x145; syscall; 
0x0000000016d4b1: nop edx, edi; test edx, edx; jne short 0x000000000016d4c0; mov eax, 0x1; ret; 
0x0000000016d4f1: nop edx, edi; test edx, edx; jne short 0x000000000016d500; mov eax, 0x1; ret; 
0x000000000c5031: nop edx, edi; test rdx, rdx; jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000bab71: nop edx, edi; test rsi, rsi; jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000d8631: nop edx, edi; test rsi, rsi; jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d9af1: nop edx, edi; test rsi, rsi; jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x0000000003a181: nop edx, edi; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x00000000095cf1: nop edx, edi; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000008e7a1: nop edx, edi; xor eax, eax; ret; 
0x00000000119cd1: nop edx, edi; xor eax, eax; syscall; 
0x000000000891f1: nop edx, edi; xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x00000000089201: nop edx, edi; xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x0000000008c9b1: nop edx, edi; xor eax, eax; test rdx, rdx; jne short 0x000000000008c9c0; ret; 
0x00000000115221: nop edx, edi; xor esi, esi; mov eax, 0x125; syscall; 
0x000000001285f1: nop edx, edi; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000000428cf: nop; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000852ee: nop; add [rax], al; add [rcx+0x1], cl; ret; 
0x000000000a885b: nop; add [rax], al; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x0000000011b605: nop; add [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x000000001726d5: nop; add [rax], eax; add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x00000000099a0f: nop; add rsp, 0x18; ret; 
0x0000000009269f: nop; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000001a86ef: nop; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000b507f: nop; bsr eax, eax; add rax, rdi; ret; 
0x000000000ee0ff: nop; call qword ptr [r12+0x28]; 
0x0000000004553f: nop; call qword ptr [rbx]; 
0x00000000080123: nop; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000009499a: nop; cmp byte ptr [rbx+0x970], 0x0; je 0x0000000000094b31; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000001750ef: nop; cmp byte ptr [rsp+0xf], 0x0; je short 0x0000000000175102; mov rdi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x0000000016b52f: nop; cmp eax, 0x1; jne short 0x000000000016b525; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x000000000ed05f: nop; cmp rax, 0x517b; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x00000000092def: nop; cmp rdx, rbp; jbe short 0x0000000000092e40; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000016d08f: nop; endbr64; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x0000000016d07f: nop; endbr64; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000089fff: nop; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000090c9f: nop; endbr64; cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x000000000945ff: nop; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000a00bf: nop; endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x0000000011462f: nop; endbr64; mov eax, 0x102; syscall; 
0x0000000011627f: nop; endbr64; mov eax, 0x107; syscall; 
0x000000001161bf: nop; endbr64; mov eax, 0x10a; syscall; 
0x00000000126fbf: nop; endbr64; mov eax, 0x110; syscall; 
0x0000000012701f: nop; endbr64; mov eax, 0x11b; syscall; 
0x0000000012646f: nop; endbr64; mov eax, 0x11f; syscall; 
0x00000000126cef: nop; endbr64; mov eax, 0x123; syscall; 
0x000000001151ef: nop; endbr64; mov eax, 0x124; syscall; 
0x00000000126e0f: nop; endbr64; mov eax, 0x126; syscall; 
0x0000000012704f: nop; endbr64; mov eax, 0x12c; syscall; 
0x000000001265ef: nop; endbr64; mov eax, 0x131; syscall; 
0x000000001270df: nop; endbr64; mov eax, 0x13f; syscall; 
0x0000000012710f: nop; endbr64; mov eax, 0x14a; syscall; 
0x0000000012713f: nop; endbr64; mov eax, 0x14b; syscall; 
0x00000000108c9f: nop; endbr64; mov eax, 0x18; syscall; 
0x00000000119d3f: nop; endbr64; mov eax, 0x1; syscall; 
0x000000001197ff: nop; endbr64; mov eax, 0x1b4; syscall; 
0x0000000011ed4f: nop; endbr64; mov eax, 0x1b; syscall; 
0x000000001151bf: nop; endbr64; mov eax, 0x21; syscall; 
0x00000000127cdf: nop; endbr64; mov eax, 0x29; syscall; 
0x0000000016380f: nop; endbr64; mov eax, 0x2; ret; 
0x0000000012775f: nop; endbr64; mov eax, 0x33; syscall; 
0x0000000009fdbf: nop; endbr64; mov eax, 0x3; syscall; 
0x000000000ea36f: nop; endbr64; mov eax, 0x3f; syscall; 
0x0000000011d12f: nop; endbr64; mov eax, 0x4c; syscall; 
0x0000000011534f: nop; endbr64; mov eax, 0x51; syscall; 
0x000000001145ff: nop; endbr64; mov eax, 0x53; syscall; 
0x000000001162af: nop; endbr64; mov eax, 0x54; syscall; 
0x000000001161ef: nop; endbr64; mov eax, 0x59; syscall; 
0x0000000011442f: nop; endbr64; mov eax, 0x5b; syscall; 
0x00000000115c3f: nop; endbr64; mov eax, 0x5d; syscall; 
0x00000000115c6f: nop; endbr64; mov eax, 0x5e; syscall; 
0x000000000ea39f: nop; endbr64; mov eax, 0x64; syscall; 
0x00000000126e6f: nop; endbr64; mov eax, 0x67; syscall; 
0x000000000ec36f: nop; endbr64; mov eax, 0x6d; syscall; 
0x000000000ec39f: nop; endbr64; mov eax, 0x6f; syscall; 
0x000000000ec3ff: nop; endbr64; mov eax, 0x70; syscall; 
0x000000000ec42f: nop; endbr64; mov eax, 0x76; syscall; 
0x000000000ec45f: nop; endbr64; mov eax, 0x78; syscall; 
0x000000000ec33f: nop; endbr64; mov eax, 0x79; syscall; 
0x00000000125c6f: nop; endbr64; mov eax, 0x7b; syscall; 
0x00000000126c2f: nop; endbr64; mov eax, 0x7e; syscall; 
0x00000000126fef: nop; endbr64; mov eax, 0x86; syscall; 
0x00000000108c0f: nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000108c3f: nop; endbr64; mov eax, 0x90; syscall; 
0x00000000108c6f: nop; endbr64; mov eax, 0x91; syscall; 
0x00000000108ccf: nop; endbr64; mov eax, 0x92; syscall; 
0x00000000108cff: nop; endbr64; mov eax, 0x93; syscall; 
0x00000000108d2f: nop; endbr64; mov eax, 0x94; syscall; 
0x0000000011eddf: nop; endbr64; mov eax, 0x96; syscall; 
0x0000000011ee0f: nop; endbr64; mov eax, 0x97; syscall; 
0x0000000011ee3f: nop; endbr64; mov eax, 0x98; syscall; 
0x00000000126bbf: nop; endbr64; mov eax, 0x9a; syscall; 
0x00000000126eff: nop; endbr64; mov eax, 0x9b; syscall; 
0x0000000011b9ef: nop; endbr64; mov eax, 0xa1; syscall; 
0x0000000011becf: nop; endbr64; mov eax, 0xa7; syscall; 
0x0000000011beff: nop; endbr64; mov eax, 0xa8; syscall; 
0x0000000011ec4f: nop; endbr64; mov eax, 0xa; syscall; 
0x0000000011b51f: nop; endbr64; mov eax, 0xaa; syscall; 
0x00000000125b2f: nop; endbr64; mov eax, 0xac; syscall; 
0x00000000126c5f: nop; endbr64; mov eax, 0xae; syscall; 
0x00000000126c8f: nop; endbr64; mov eax, 0xb0; syscall; 
0x0000000011ec1f: nop; endbr64; mov eax, 0xb; syscall; 
0x0000000012716f: nop; endbr64; mov eax, 0xba; syscall; 
0x000000001222ff: nop; endbr64; mov eax, 0xc6; syscall; 
0x000000001221df: nop; endbr64; mov eax, 0xc7; syscall; 
0x000000000d99df: nop; endbr64; mov eax, 0xc9; syscall; 
0x0000000011a9cf: nop; endbr64; mov eax, 0xc; syscall; 
0x00000000126cbf: nop; endbr64; mov eax, 0xd5; syscall; 
0x00000000126bef: nop; endbr64; mov eax, 0xe4; syscall; 
0x00000000126ddf: nop; endbr64; mov eax, 0xfd; syscall; 
0x00000000126e3f: nop; endbr64; mov eax, 0xff; syscall; 
0x000000000e66df: nop; endbr64; mov eax, [rdi]; ret; 
0x0000000009b59f: nop; endbr64; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x00000000140fef: nop; endbr64; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x0000000004277f: nop; endbr64; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000115c9f: nop; endbr64; mov r10, rcx; mov eax, 0x104; syscall; 
0x0000000011615f: nop; endbr64; mov r10, rcx; mov eax, 0x109; syscall; 
0x0000000011621f: nop; endbr64; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000012707f: nop; endbr64; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000001265af: nop; endbr64; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000113c2f: nop; endbr64; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000127d0f: nop; endbr64; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000012778f: nop; endbr64; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000126e9f: nop; endbr64; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000126d7f: nop; endbr64; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000126f2f: nop; endbr64; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000012238f: nop; endbr64; mov r10, rcx; mov eax, 0xbc; syscall; 
0x0000000012232f: nop; endbr64; mov r10, rcx; mov eax, 0xbd; syscall; 
0x0000000012220f: nop; endbr64; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000012229f: nop; endbr64; mov r10, rcx; mov eax, 0xc0; syscall; 
0x0000000011ed7f: nop; endbr64; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000126d1f: nop; endbr64; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000009754f: nop; endbr64; mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000090c8f: nop; endbr64; mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c7f: nop; endbr64; mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c6f: nop; endbr64; mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x0000000003a35f: nop; endbr64; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000002a24f: nop; endbr64; mov rax, [rip+0x1eebb5]; add rax, fs:[0x0]; ret; 
0x00000000041f7f: nop; endbr64; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000041a4f: nop; endbr64; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x0000000012c48f: nop; endbr64; ret; 
0x0000000008e79f: nop; endbr64; xor eax, eax; ret; 
0x0000000011521f: nop; endbr64; xor esi, esi; mov eax, 0x125; syscall; 
0x0000000004231d: nop; jmp rdx; 
0x000000001a4a0f: nop; lea rax, [rdi+0x1]; ret; 
0x000000001a49ff: nop; lea rax, [rdi]; ret; 
0x000000000c6dbf: nop; lea rax, [rip+0xee419]; test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x000000000c562f: nop; lea rax, [rip+0xef449]; test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x00000000078c2d: nop; lea rdx, [rip-0x46e]; add rax, rdx; jmp rax; 
0x000000001a730f: nop; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x00000000084676: nop; mov [rax], rdx; xor eax, eax; ret; 
0x000000000b139f: nop; mov [rax], sil; add rax, rcx; ret; 
0x0000000018d69f: nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000018d68f: nop; mov [rcx], dx; ret; 
0x0000000018d6bf: nop; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x0000000018d6ff: nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000000c0c7f: nop; mov [rdi-0x1], edx; ret; 
0x000000001b0a4f: nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000c0c6f: nop; mov [rdi], dx; ret; 
0x000000000c0c9f: nop; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000c0c8f: nop; mov [rdi], edx; ret; 
0x000000001496ef: nop; mov [rdi], rcx; xor eax, eax; ret; 
0x000000000c0cdf: nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000a0d57: nop; mov [rip+0x178681], rax; ret; 
0x000000000a0ce7: nop; mov [rip+0x178689], rax; ret; 
0x000000000a0d40: nop; mov [rip+0x178690], rax; ret; 
0x000000000a0cd7: nop; mov [rip+0x1786a1], rax; ret; 
0x000000000a0fd7: nop; mov [rip+0x17f51e], eax; ret; 
0x00000000113891: nop; mov al, 0x0; add [rax], al; call qword ptr [rax+0x88]; 
0x0000000018f9df: nop; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x0000000017c9ff: nop; mov dl, [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000000c20ef: nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000000a0fb7: nop; mov dword ptr [rip+0x1783e6], 0x1; mov [rip+0x1783d8], eax; ret; 
0x000000000a0f97: nop; mov dword ptr [rip+0x178406], 0x1; mov [rip+0x1783c7], rax; ret; 
0x000000000a0f77: nop; mov dword ptr [rip+0x178426], 0x1; mov [rip+0x1783df], rax; ret; 
0x000000000a0f57: nop; mov dword ptr [rip+0x178446], 0x1; mov [rip+0x1783f7], rax; ret; 
0x0000000017cbdf: nop; mov dx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000000bfc7f: nop; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000009af2f: nop; mov eax, 0x10; ret; 
0x0000000011456f: nop; mov eax, 0x10c; syscall; 
0x0000000009265f: nop; mov eax, 0x16; ret; 
0x000000000ecf9f: nop; mov eax, 0x7e; ret; 
0x000000000846bf: nop; mov eax, 0xffffffff; ret; 
0x0000000015edbf: nop; mov eax, [rdi+0x20]; mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x000000000d7b4f: nop; mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b7f: nop; mov eax, [rdi+0x34]; cmp eax, [rsi+0x34]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b9f: nop; mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000d7bb0; ret; 
0x000000001a672f: nop; mov eax, [rdi-0xc]; cmp eax, [rsi-0xc]; jne 0x00000000001a6850; ret; 
0x00000000165aff: nop; mov eax, [rdi]; mov [rcx], eax; mov eax, 0x1; ret; 
0x0000000017cf9f: nop; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x000000000c12df: nop; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x0000000019e39f: nop; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x000000000d83df: nop; mov rax, 0x1; ret; 
0x000000000c53af: nop; mov rax, 0xffffffffffffffff; ret; 
0x0000000008fe4f: nop; mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x0000000015df0f: nop; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d4ef: nop; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001751ff: nop; mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x0000000016bd9f: nop; mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016b63f: nop; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000016b5cf: nop; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000011717f: nop; mov rax, [rip+0x101c89]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000c539f: nop; mov rax, [rip+0x153b21]; mov rax, [rax+0x240]; ret; 
0x000000000c538f: nop; mov rax, [rip+0x153b31]; mov rax, [rax+0x238]; ret; 
0x000000000c537f: nop; mov rax, [rip+0x153b41]; mov rax, [rax+0x230]; ret; 
0x000000000c536f: nop; mov rax, [rip+0x153b51]; mov rax, [rax+0x228]; ret; 
0x000000000c535f: nop; mov rax, [rip+0x153b61]; mov rax, [rax+0x220]; ret; 
0x000000000c534f: nop; mov rax, [rip+0x153b71]; mov rax, [rax+0x218]; ret; 
0x000000000c533f: nop; mov rax, [rip+0x153b81]; mov rax, [rax+0x210]; ret; 
0x000000000c532f: nop; mov rax, [rip+0x153b91]; mov rax, [rax+0x208]; ret; 
0x000000000c531f: nop; mov rax, [rip+0x153ba1]; mov rax, [rax+0x200]; ret; 
0x000000000c530f: nop; mov rax, [rip+0x153bb1]; mov rax, [rax+0x1f8]; ret; 
0x0000000009fd9f: nop; mov rax, [rip+0x179069]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cb5f: nop; mov rax, [rip+0x17c2a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000424af: nop; mov rax, [rip+0x1d6959]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004243f: nop; mov rax, [rip+0x1d69c9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000175e8f: nop; mov rax, [rip+0xa2f79]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000012247f: nop; mov rax, [rip+0xf6989]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x0000000011fa9f: nop; mov rax, [rip+0xf9369]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000011bfef: nop; mov rax, [rip+0xfce19]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013588f: nop; mov rax, rdi; ret; 
0x0000000019fb0f: nop; mov rax, rdi; vzeroupper; ret; 
0x000000000c132f: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000c217f: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x0000000004383f: nop; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000c226f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c140f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000bfd5f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000001663df: nop; movdqu xmm2, [rcx]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x000000001663ef: nop; movdqu xmm3, [rdi+0x20]; mov eax, 0x1; movups [rcx], xmm3; ret; 
0x000000001b32ef: nop; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001b2c4f: nop; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x00000000042510: nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x000000000b96cd: nop; or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000015da5f: nop; pop rbp; ret; 
0x000000000c467f: nop; rep ret; 
0x000000000ab8fc: nop; ret far; 
0x000000000378df: nop; ret; 
0x000000000eabbb: nop; rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x000000000d807f: nop; test rax, 0x1; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x00000000156f3f: nop; test rax, rax; je short 0x0000000000156f50; mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x000000001b61af: nop; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b643f: nop; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcff: nop; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001afdff: nop; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000001a112f: nop; vmovdqu [rdi-0x40], ymm0; vmovdqu [rdi-0x20], ymm0; vzeroupper; ret; 
0x000000001a72ff: nop; vmovdqu64 [rax], xmm16; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000000c3d3f: nop; xor ch, ch; mov [rdi], ch; ret; 
0x00000000097271: nop; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000005469f: nop; xor eax, eax; ret; 
0x00000000029daf: nop; xor edi, edi; mov eax, edx; syscall; 
0x000000000d7e7f: nop; xor rax, rax; ret; 
0x0000000010b4f6: not al; stc; dec dword ptr [rax-0x77]; ret; 
0x0000000019a27c: not ax; ret; 
0x000000000dd612: not byte ptr [rbx-0x3e6db6dc]; call far fword ptr [rdi]; 
0x0000000017d756: not byte ptr [rdi+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000012e21f: not dword ptr [rbx-0x18]; push 0xffffffffffffffa2; out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x00000000041031: not eax; and eax, ecx; ret; 
0x000000000413c1: not eax; and eax, edx; ret; 
0x000000000961e3: not eax; lea eax, [rax*8+0x6]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000019a27d: not eax; ret; 
0x0000000016d489: not eax; shr eax, 0x1f; ret; 
0x00000000096d6b: not esi; and esi, 0x80; syscall; 
0x0000000003fc78: notrack bnd jmp rdx; 
0x00000000153b6e: notrack call qword ptr [rsp+0x70]; 
0x0000000003ff4f: notrack jmp r10; 
0x0000000017adc1: notrack jmp r9; 
0x0000000002a3b8: notrack jmp rax; 
0x000000000379d3: notrack jmp rcx; 
0x000000000b139b: notrack jmp rdi; 
0x0000000003fc79: notrack jmp rdx; 
0x000000000519c8: notrack jmp rsi; 
0x000000001663d3: or [eax+0x1], bh; movups [rcx], xmm4; ret; 
0x000000000f4141: or [r10], r8b; xor eax, eax; ret; 
0x000000000a6fc2: or [r11+0x577709f8], r8b; lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000f04fe: or [r11+0x5d], bl; pop r12; pop r13; ret; 
0x0000000008b5f5: or [r11+0x5d], bl; pop r12; ret; 
0x00000000118ca1: or [r11+0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x000000001571bb: or [r11+0x67f01f8], r8b; ret; 
0x000000000922d5: or [r11+0x68901e0], r8b; xor eax, eax; ret; 
0x00000000097fde: or [r11-0x6ffef3b9], r8b; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000133c25: or [r13+0x480d75c0], r8b; cmp dword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x0000000015eef3: or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000015efac: or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164463: or [r14+0x8], r15b; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015fcc6: or [r14+0xf], r12b; insb [rdi], dx; ror dword ptr [rdi], 0x29; add al, 0x24; call qword ptr [rax+0x8]; 
0x000000000bc7c6: or [r14+0xf], spl; adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf4d0: or [r14+0xf], spl; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000bc8df: or [r14-0x77], spl; or [rax-0x77], cl; clc; ret; 
0x0000000008a640: or [r15], cl; adc [rbx+0x18], eax; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x00000000162ce3: or [r15], r9b; adc [rax], ecx; mov eax, 0x1; ret; 
0x00000000165adb: or [r8+0x1], r15b; movups [rcx], xmm1; ret; 
0x00000000169c95: or [r8+0x1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x000000000559ab: or [r8+0x39], r9b; ret; 
0x0000000008f5dc: or [r8+0x39], r9b; shl byte ptr [rbx+0x25], 0x1; movzx eax, byte ptr [rax]; ret; 
0x00000000090366: or [r8-0x73], cl; adc eax, 0x142479; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000164592: or [r8-0x73], r9b; jae short 0x00000000001645b0; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fcd9: or [r8-0x73], r9b; je short 0x000000000015fd03; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x000000001644f3: or [r8-0x73], r9b; je short 0x000000000016451d; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001645a8: or [r8-0x73], r9b; je short 0x00000000001645d2; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016b651: or [r8-0x73], r9b; je short 0x000000000016b67b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b6aa: or [r8-0x73], r9b; je short 0x000000000016b6d4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b741: or [r8-0x73], r9b; je short 0x000000000016b76b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b79a: or [r8-0x73], r9b; je short 0x000000000016b7c4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b831: or [r8-0x73], r9b; je short 0x000000000016b85b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b88a: or [r8-0x73], r9b; je short 0x000000000016b8b4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b921: or [r8-0x73], r9b; je short 0x000000000016b94b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b97a: or [r8-0x73], r9b; je short 0x000000000016b9a4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016c5e8: or [r8-0x73], r9b; je short 0x000000000016c612; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c639: or [r8-0x73], r9b; je short 0x000000000016c663; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c6d8: or [r8-0x73], r9b; je short 0x000000000016c702; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c729: or [r8-0x73], r9b; je short 0x000000000016c753; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c7c8: or [r8-0x73], r9b; je short 0x000000000016c7f2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c819: or [r8-0x73], r9b; je short 0x000000000016c843; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c8b8: or [r8-0x73], r9b; je short 0x000000000016c8e2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c909: or [r8-0x73], r9b; je short 0x000000000016c933; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016749e: or [r8-0x73], r9b; push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167522: or [r8-0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x00000000133ca0: or [r8-0x75], cl; adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000015f82a: or [r8-0x75], r9b; jae short 0x000000000015f840; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f868: or [r8-0x75], r9b; jae short 0x000000000015f87e; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000a78e9: or [r8-0x75], r9b; je short 0x00000000000a791e; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x000000000bc8be: or [r8-0x76b7f7be], cl; clc; ret; 
0x0000000018b698: or [r8-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x0000000015220b: or [r8-0x77], cl; ret far; 
0x000000001644e2: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x0000000016943d: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000016d53f: or [r8-0x77], r9b; ja short 0x000000000016d55d; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000016c2ff: or [r8-0x77], r9b; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x0000000015dcf7: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000169582: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28]; 
0x00000000169422: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000015e26a: or [r8-0x77], r9b; out dx, eax; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x00000000110a31: or [r8-0x7d], r9b; ret; 
0x000000001060a2: or [r8], al; add [rax], al; add al, ch; ret; 
0x000000000620e8: or [r8], r8b; add [rax], al; add [rdi+0x1f88307], al; jg short 0x0000000000062100; ret; 
0x0000000015de24: or [r8], r8b; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000005a1bb: or [r8], r8b; mov [rdi], rax; mov rax, rdi; ret; 
0x0000000015de1e: or [r8], r8b; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x00000000092895: or [r8], r9b; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x0000000009287c: or [r8], r9b; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x00000000029e5c: or [r9+rcx*4-0x1a], cl; mov edi, ebp; add rcx, [r14]; call rcx; 
0x0000000015fc94: or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x0000000015e2e6: or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x000000000f6b34: or [r9-0x75], r9b; je short 0x00000000000f6b5e; or [rcx], ch; ret far; 
0x00000000164a6c: or [r9-0x75], r9b; jo short 0x0000000000164ab2; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000000bc91e: or [r9-0x76b7f7be], cl; clc; ret; 
0x0000000015fc82: or [r9-0x77], r9b; in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000011a379: or [r9-0x804b1f], r8b; jmp qword ptr [rsi+0xf]; 
0x00000000141e18: or [r9], r13b; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x000000001571b6: or [r9], r14b; rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x00000000001571c8; ret; 
0x00000000092659: or [r9], r8b; xor eax, eax; ret; 
0x00000000112a6b: or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000015d473: or [rax+0x10], bh; pop rbx; pop rbp; ret; 
0x00000000126086: or [rax+0x114], bh; syscall; 
0x00000000125d0c: or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x000000001199b7: or [rax+0x11d], bh; syscall; 
0x0000000011acf0: or [rax+0x127], bh; syscall; 
0x0000000011adb0: or [rax+0x128], bh; syscall; 
0x00000000127f8c: or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x000000001262a3: or [rax+0x130], bh; syscall; 
0x0000000011ab95: or [rax+0x13], bh; syscall; 
0x00000000046cb7: or [rax+0x13e], bh; syscall; 
0x0000000011ac35: or [rax+0x14], bh; syscall; 
0x00000000099d92: or [rax+0x16], bh; pop rbx; pop rbp; ret; 
0x00000000165adc: or [rax+0x1], bh; movups [rcx], xmm1; ret; 
0x000000001663d4: or [rax+0x1], bh; movups [rcx], xmm4; ret; 
0x0000000016b353: or [rax+0x1], bh; pop rbp; pop r12; ret; 
0x00000000169c96: or [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000007ff69: or [rax+0x1], bh; pop rbx; pop rbp; ret; 
0x00000000162ce7: or [rax+0x1], bh; ret; 
0x00000000114a67: or [rax+0x1], bh; syscall; 
0x000000001348f9: or [rax+0x1], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret; 
0x0000000011ecc7: or [rax+0x1a], bh; syscall; 
0x00000000113a4a: or [rax+0x1c], edi; syscall; 
0x000000000e8cab: or [rax+0x29], cl; ret; 
0x000000001b4031: or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40ea: or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x0000000005677b: or [rax+0x2], bh; ret; 
0x0000000005677a: or [rax+0x2], r15b; ret; 
0x000000001276d3: or [rax+0x2a], bh; syscall; 
0x00000000127b45: or [rax+0x2e], bh; syscall; 
0x000000001279e7: or [rax+0x2f], bh; syscall; 
0x00000000125b9e: or [rax+0x38], bh; syscall; 
0x00000000113afa: or [rax+0x39], cl; div dword ptr [rbp-0x28]; mov eax, r8d; ret; 
0x000000000f3da3: or [rax+0x39], cl; ret far; 
0x000000000559ac: or [rax+0x39], cl; ret; 
0x0000000008f5dd: or [rax+0x39], cl; shl byte ptr [rbx+0x25], 0x1; movzx eax, byte ptr [rax]; ret; 
0x000000000ed067: or [rax+0x40], bh; ret; 
0x00000000114f5f: or [rax+0x48], bh; syscall; 
0x00000000075f87: or [rax+0x63], cl; xor al, 0x8e; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x00000000118d77: or [rax+0x7], bh; syscall; 
0x0000000013d961: or [rax+0xa], bh; pop rbx; pop rbp; ret; 
0x00000000136806: or [rax+0xf], al; mov dh, 0xc6; or eax, edi; bswap eax; ret; 
0x000000000aaee7: or [rax+0xf], cl; ret; 
0x000000000a0cf9: or [rax+rax], al; add [rsi+0x1], dh; ret; 
0x00000000179947: or [rax+rax], edx; add [rbp-0x77], cl; ret far; 
0x0000000011a246: or [rax+rax], edx; mov eax, 0x10; syscall; 
0x0000000011a277: or [rax+rax], edx; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000f41c1: or [rax+rdi*4], bl; add al, [rax]; add [rax], al; ret; 
0x000000000e006a: or [rax-0x16a6dbbc], cl; ret; 
0x0000000007ff8b: or [rax-0x1], bh; pop rbx; pop rbp; ret; 
0x000000000483b7: or [rax-0x39], cl; ret; 
0x00000000143111: or [rax-0x3f], ecx; out 0x4, al; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000b154f: or [rax-0x73], cl; adc dil, r15b; ret; 
0x00000000090367: or [rax-0x73], cl; adc eax, 0x142479; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000d9bd6: or [rax-0x73], cl; adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d9ab6: or [rax-0x73], cl; adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000f0613: or [rax-0x73], cl; add bl, [r11+0x5d]; pop r12; pop r13; ret; 
0x0000000011c408: or [rax-0x73], cl; add eax, 0x104e48; pop rbx; pop rbp; ret; 
0x000000000c6d75: or [rax-0x73], cl; add eax, 0x11873; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c55e5: or [rax-0x73], cl; add eax, 0x12bc3; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x000000000a93a8: or [rax-0x73], cl; add eax, 0x1ae50; cmove rax, rdx; ret; 
0x0000000011aaed: or [rax-0x73], cl; and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x10; syscall; 
0x0000000012850d: or [rax-0x73], cl; and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x42; syscall; 
0x0000000012651f: or [rax-0x73], cl; and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x9d; syscall; 
0x00000000164593: or [rax-0x73], cl; jae short 0x00000000001645b0; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015fcda: or [rax-0x73], cl; je short 0x000000000015fd03; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x000000001644f4: or [rax-0x73], cl; je short 0x000000000016451d; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001645a9: or [rax-0x73], cl; je short 0x00000000001645d2; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016b652: or [rax-0x73], cl; je short 0x000000000016b67b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b6ab: or [rax-0x73], cl; je short 0x000000000016b6d4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b742: or [rax-0x73], cl; je short 0x000000000016b76b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b79b: or [rax-0x73], cl; je short 0x000000000016b7c4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b832: or [rax-0x73], cl; je short 0x000000000016b85b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b88b: or [rax-0x73], cl; je short 0x000000000016b8b4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016b922: or [rax-0x73], cl; je short 0x000000000016b94b; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000016b97b: or [rax-0x73], cl; je short 0x000000000016b9a4; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000016c5e9: or [rax-0x73], cl; je short 0x000000000016c612; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c63a: or [rax-0x73], cl; je short 0x000000000016c663; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c6d9: or [rax-0x73], cl; je short 0x000000000016c702; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c72a: or [rax-0x73], cl; je short 0x000000000016c753; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c7c9: or [rax-0x73], cl; je short 0x000000000016c7f2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c81a: or [rax-0x73], cl; je short 0x000000000016c843; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000016c8b9: or [rax-0x73], cl; je short 0x000000000016c8e2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000016c90a: or [rax-0x73], cl; je short 0x000000000016c933; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000000c05b9: or [rax-0x73], cl; jg short 0x00000000000c05c6; jne 0x00000000000c0d90; ret; 
0x000000000c1c9d: or [rax-0x73], cl; jg short 0x00000000000c1caa; jne 0x00000000000c25e0; ret; 
0x000000000d9561: or [rax-0x73], cl; mov esp, 0xd024; add [rcx+rcx*4-0x12], cl; mov [rsp+0xd0], rax; call r12; 
0x000000000f04fb: or [rax-0x73], cl; or [r11+0x5d], bl; pop r12; pop r13; ret; 
0x00000000055b04: or [rax-0x73], cl; push rdi; add [rcx-0x77], ecx; push rsp; ret; 
0x00000000056174: or [rax-0x73], cl; push rsi; add [rcx-0x77], ecx; push rsp; ret; 
0x0000000016749f: or [rax-0x73], cl; push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167523: or [rax-0x73], cl; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000013ea60: or [rax-0x73], ecx; cmp eax, 0xe34b8; call rax; 
0x000000000c05dc: or [rax-0x73], ecx; jg short 0x00000000000c05ea; jne 0x00000000000c0d90; ret; 
0x000000000c1cc0: or [rax-0x73], ecx; jg short 0x00000000000c1cce; jne 0x00000000000c25e0; ret; 
0x00000000162c68: or [rax-0x73], ecx; mov ebp, 0xc8; call rax; 
0x0000000018d5a2: or [rax-0x73], ecx; or [rdi], rcx; test [rbx+0x2], esp; add [rax], al; ret; 
0x00000000094789: or [rax-0x75], cl; adc [rax+0xcb], bh; syscall; 
0x00000000133ca1: or [rax-0x75], cl; adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x000000000a0dab: or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x00000000129d65: or [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000129dc6: or [rax-0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x000000001453fe: or [rax-0x75], cl; add al, 0x24; mov rdi, r15; call rax; 
0x000000000445ab: or [rax-0x75], cl; add al, 0x24; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000174963: or [rax-0x75], cl; cmovs eax, [rcx]; ror dword ptr [rax+0x39], 0x1; ret far; 
0x0000000015d2ee: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000015f2f0: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x0000000015f82b: or [rax-0x75], cl; jae short 0x000000000015f840; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x10]; 
0x0000000015f869: or [rax-0x75], cl; jae short 0x000000000015f87e; mov rdx, r12; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000a78ea: or [rax-0x75], cl; je short 0x00000000000a791e; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x00000000090307: or [rax-0x75], cl; jge short 0x000000000009031c; call qword ptr [r12+0x360]; 
0x00000000094b35: or [rax-0x75], cl; mov eax, 0x648; call qword ptr [rax+0x640]; 
0x0000000015e9d1: or [rax-0x75], cl; or al, 0x24; xor eax, eax; mov rdi, rbx; call rcx; 
0x00000000054315: or [rax-0x75], cl; or al, 0xd1; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000000a79b2: or [rax-0x75], cl; test byte ptr [rbx+0x50], 0x1; jne short 0x00000000000a7990; mov rdi, rsi; call rax; 
0x000000000a04d8: or [rax-0x75], cl; xor al, 0x24; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000000896c3: or [rax-0x75], cl; xor ecx, [rax-0x7d]; ret; 
0x0000000007f7cc: or [rax-0x75], ecx; mov edi, 0xe0; jmp rax; 
0x0000000015cde3: or [rax-0x76b70014], edi; ret; 
0x000000000bc8bf: or [rax-0x76b7f7be], cl; clc; ret; 
0x00000000029eaf: or [rax-0x77], cl; adc al, 0x24; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000001675b3: or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x0000000011dadb: or [rax-0x77], cl; add eax, 0x10388d; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daab: or [rax-0x77], cl; add eax, 0x1038bd; mov rax, r8; ret; 
0x000000000bc7cf: or [rax-0x77], cl; clc; ret; 
0x0000000013669c: or [rax-0x77], cl; clc; sar rax, 0x6; ret; 
0x000000000c05d5: or [rax-0x77], cl; cmovns eax, [rbx-0x72b7f618]; jg short 0x00000000000c05ea; jne 0x00000000000c0d90; ret; 
0x000000000751c1: or [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; out dx, eax; call qword ptr [r12+0x38]; 
0x0000000007aafe: or [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x19]; call qword ptr [rbp+0x38]; 
0x000000001644e3: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x0000000016943e: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000016d540: or [rax-0x77], cl; ja short 0x000000000016d55d; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x000000000c3e55: or [rax-0x77], cl; jns 0xffffffffed3c46b5; mov [rdi+0xc], ch; ret; 
0x000000000c3df5: or [rax-0x77], cl; js 0xffffffffed3c4655; mov [rdi+0x9], ch; ret; 
0x00000000091420: or [rax-0x77], cl; mov qword ptr [rax+0x10c0], 0x0; ret; 
0x0000000018b699: or [rax-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x0000000016c300: or [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x000000000e8540: or [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x58]; 
0x0000000011b7df: or [rax-0x77], cl; out dx, al; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000001685d2: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x10]; 
0x0000000015d2dd: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000169583: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x28]; 
0x0000000015fcdf: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000008abd3: or [rax-0x77], cl; out dx, eax; call rax; 
0x0000000015d526: or [rax-0x77], cl; out dx, eax; call rcx; 
0x0000000015e26b: or [rax-0x77], cl; out dx, eax; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x0000000016bd95: or [rax-0x77], cl; out dx, eax; pop rbp; pop r12; jmp rax; 
0x00000000083e79: or [rax-0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x000000000c3e16: or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x0000000012d77e: or [rax-0x77], cl; ret far; 
0x0000000012583f: or [rax-0x77], cl; ret; 
0x000000000a7a27: or [rax-0x7b], cl; shl byte ptr [rbp-0xd], cl; ret; 
0x000000001522fa: or [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x39; js short 0x0000000000152315; jne short 0x00000000001522f8; ret; 
0x0000000003bf6a: or [rax-0x7d], cl; ret; 
0x000000000dc203: or [rax-0x7d], ecx; ret; 
0x000000000a6a98: or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx]; 
0x00000000094a24: or [rax], al; add [rax+0xe], bh; syscall; 
0x0000000009c09a: or [rax], al; add [rax+rax*8-0x3fcef08c], al; add rsp, 0x8; ret; 
0x00000000101620: or [rax], al; add [rax-0x7b], cl; shl byte ptr [rsi+0xf], 0xef; ror byte ptr [rdi], 0x84; ret far; 
0x00000000149d42: or [rax], al; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000a80a4: or [rax], al; add [rax], al; add [rcx], dh; ror byte ptr [rcx-0x77], 0x30; ret; 
0x000000000620e9: or [rax], al; add [rax], al; add [rdi+0x1f88307], al; jg short 0x0000000000062100; ret; 
0x000000001060a3: or [rax], al; add [rax], al; add al, ch; ret; 
0x00000000125cb5: or [rax], al; add [rax], al; mov eax, 0x119; syscall; 
0x00000000125d85: or [rax], al; add [rax], al; mov eax, 0x1b9; syscall; 
0x00000000042785: or [rax], al; add [rax], al; mov eax, 0x7f; syscall; 
0x000000000431ad: or [rax], al; add [rax], al; mov eax, 0x80; syscall; 
0x000000000427d1: or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x000000000425e8: or [rax], al; add [rax], al; mov eax, 0xd; syscall; 
0x00000000053a06: or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x000000000427fc: or [rax], al; add [rax], al; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000015efaf: or [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164466: or [rax], al; add [rax], al; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x00000000099049: or [rax], al; add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000118e11: or [rax], al; add [rax], al; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000009bc8d: or [rax], al; add [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000015ee42: or [rax], al; add [rax], al; ret; 
0x0000000009eb98: or [rax], al; add [rax], al; syscall; 
0x000000001499dc: or [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000b3ff8: or [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000006d90b: or [rax], al; add [rbx+rcx*4-0x4b], cl; cmp bl, 0xff; dec dword ptr [rcx-0x7d]; ret; 
0x00000000049ee4: or [rax], al; add [rcx-0x77], cl; ret far; 
0x0000000011d7d9: or [rax], al; add byte ptr [rax], 0x0; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000014d6f8: or [rax], al; add rdi, r8; notrack jmp rdi; 
0x000000000e7025: or [rax], al; call rbx; 
0x000000000a10bf: or [rax], al; cmp eax, 0x1; je short 0x00000000000a10d0; add rsp, 0x8; ret; 
0x0000000014d6f1: or [rax], al; lea r8, [rip+0x88dde]; add rdi, r8; notrack jmp rdi; 
0x0000000015dce5: or [rax], al; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000005a1bc: or [rax], al; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000e7173: or [rax], al; mov rax, r15; call rax; 
0x0000000014d521: or [rax], al; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000014d4d3: or [rax], al; movzx ecx, al; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x0000000014d3bc: or [rax], al; movzx esi, al; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000a10a7: or [rax], al; nop [rax]; ret; 
0x00000000046034: or [rax], al; pop rbx; ret; 
0x0000000015de1f: or [rax], al; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dcde: or [rax], al; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000a00bb: or [rax], ax; xchg ax, ax; endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x00000000092896: or [rax], cl; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x0000000009287d: or [rax], cl; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x000000000c3dfb: or [rax], dh; in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000c3e1d: or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000c3e5b: or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret; 
0x00000000094afe: or [rax], eax; add [rax+0x14e], bh; syscall; 
0x00000000167733: or [rax], eax; add [rax], al; call qword ptr [rax]; 
0x0000000009499e: or [rax], eax; add [rax], al; je 0x0000000000094b31; mov rdi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x000000000407ea: or [rax], eax; add [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002a53a: or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000091266: or [rax], eax; add [rax], al; mov fs:[0x2f8], rdi; ret; 
0x00000000090be3: or [rax], eax; add [rax], al; mov fs:[0x300], rdi; ret; 
0x0000000015ee07: or [rax], eax; add [rax], al; movups [rsi+0x8], xmm0; ret; 
0x00000000112ca2: or [rax], eax; add [rax], al; pop rbp; pop r14; ret; 
0x00000000090af5: or [rax], eax; add [rax], al; ret; 
0x0000000011ebd1: or [rax], eax; add [rax], al; syscall; 
0x000000000b991d: or [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000019c98f: or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000090c19: or [rax], eax; add [rbx+0x77401f8], al; ret; 
0x000000000cd2b9: or [rax], eax; add [rbx-0x7bf0d402], al; ret; 
0x000000000953ac: or [rax], eax; add [rcx+0x39], cl; ret; 
0x00000000076307: or [rax], eax; add [rcx+0xf], al; mov esi, 0x1d8d48cd; ret far; 
0x0000000007c4a9: or [rax], eax; add [rcx+rcx*4-0x6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000007b79b: or [rax], eax; add [rcx-0x7d], al; vpsubsw xmm15, xmm15, xmm1; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000000a821f: or [rax], eax; add al, ch; add r8, rdi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000bea25: or [rax], eax; add cl, ch; ret; 
0x0000000017d853: or [rax], eax; lea r11, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7f9: or [rax], eax; lea r11, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae73: or [rax], eax; lea r11, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae12: or [rax], eax; lea r11, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x00000000096ab8: or [rax], eax; nop [rax+rax]; endbr64; ret; 
0x000000000a00bc: or [rax], eax; xchg ax, ax; endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x000000001430a6: or [rax], ecx; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x0000000009958a: or [rbp+0x2d850fc0], al; add eax, [rax]; add [rax+0x1], bh; ret; 
0x000000000d7c80: or [rbp+0x310b74f6], al; sar byte ptr [rcx], 0xfe; jne short 0x00000000000d7c90; ret; 
0x0000000009acb3: or [rbp+0x31], al; jmp qword ptr [rsi+0xf]; 
0x00000000150415: or [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x0000000014213b: or [rbp+0x31], al; rcr byte ptr [rbx+0x4c], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x000000000f80f0: or [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x000000000573b7: or [rbp+0x31], al; ror byte ptr [rax-0x39], cl; ret; 
0x000000000457d3: or [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x00000000145f49: or [rbp+0x39], al; ret; 
0x0000000016b348: or [rbp+0x41], bl; pop rsp; jmp rax; 
0x00000000081cfc: or [rbp+0x41], bl; pop rsp; ret; 
0x00000000133c26: or [rbp+0x480d75c0], al; cmp dword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x0000000015fcd2: or [rbp+0x488274c0], al; mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000011f40c: or [rbp+0x5d59000f], dh; pop r12; pop r13; ret; 
0x00000000142dd3: or [rbp+0x5d5b2b04], cl; ret; 
0x00000000041a87: or [rbp+0x6], dh; addss xmm0, xmm0; ret; 
0x0000000007d794: or [rbp+0x7a850fc9], al; add [rax], eax; add [rax-0x73], cl; jmp qword ptr [r14+0x48]; 
0x0000000014bfda: or [rbp+rax-0x18], dh; mov es, bx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000015fe0b: or [rbp+rcx*4+0x4], al; add bl, [rbx+0x5d]; mov eax, r8d; ret; 
0x000000000a83bd: or [rbp-0x17], dh; lea rax, [rip+0xf06f9]; test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000a82ad: or [rbp-0x17], dh; lea rax, [rip+0xf5af9]; test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a887d: or [rbp-0x17], dh; lea rax, [rip+0xf5b99]; test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a9a2d: or [rbp-0x17], dh; lea rax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9abd: or [rbp-0x17], dh; lea rax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000a89ad: or [rbp-0x17], dh; lea rax, [rip+0xf6809]; test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a846d: or [rbp-0x17], dh; lea rax, [rip+0xf69b9]; test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x00000000093243: or [rbp-0x1], esp; jmp qword ptr [rsi+0xf]; 
0x000000000a8332: or [rbp-0x1b], dh; lea rax, [rip+0xf4fc4]; test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x00000000102273: or [rbp-0x2471f040], al; or eax, [rax]; add [rbx-0x7bf0fe08], al; ret; 
0x000000000c6dab: or [rbp-0x26], dh; and esi, 0x400; lea rax, [rip+0xdbb85]; jne short 0x00000000000c6d6f; ret; 
0x000000000c561b: or [rbp-0x26], dh; and esi, 0x400; lea rax, [rip+0xdd115]; jne short 0x00000000000c55df; ret; 
0x000000000c5b30: or [rbp-0x2b], dh; and esi, 0x400; lea rax, [rip+0xdb700]; jne short 0x00000000000c5ae4; ret; 
0x000000000a9570: or [rbp-0x2b], dh; and esi, 0x400; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x000000001038ab: or [rbp-0x49f000b0], cl; ror byte ptr [rax+0x63], cl; adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x00000000165c51: or [rbp-0x74b70098], cl; jo short 0x0000000000165be3; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x0000000007d334: or [rbp-0x74b7ffe7], ah; add al, 0xf8; ret; 
0x000000000b075d: or [rbp-0x77], cl; ret far; 
0x000000000521ce: or [rbp-0x7b], al; ror byte ptr [rcx-0x75], cl; ret; 
0x0000000009e8b0: or [rbp-0x7b], cl; ror byte ptr [rdi], 0x84; mov [rax+rax], al; add [rbx-0x76b3ffab], cl; ret; 
0x00000000133bac: or [rbp-0xf], dh; mov rax, [rax+0x30]; ret; 
0x000000000c5a18: or [rbx+0x11394117], cl; jne short 0x00000000000c59b5; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x0000000007dd49: or [rbx+0x1c772efe], al; lea rdi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x0000000009e6f7: or [rbx+0x1d7402f8], al; ret; 
0x000000000a41d0: or [rbx+0x3d485bc1], eax; jmp far fword ptr [rcx]; 
0x000000000974d1: or [rbx+0x47521f8], al; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000062051: or [rbx+0x48010447], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008b63e: or [rbx+0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x000000000f411c: or [rbx+0x4e3b01c1], al; jl short 0x00000000000f4190; mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000a6fc3: or [rbx+0x577709f8], al; lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001532f9: or [rbx+0x5d5b02e0], al; sub eax, 0x1; pop r12; pop r13; ret; 
0x00000000175f12: or [rbx+0x5d], bl; jmp rax; 
0x0000000015f5b9: or [rbx+0x5d], bl; jmp rcx; 
0x000000000a7ba7: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000005417a: or [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000008b5f6: or [rbx+0x5d], bl; pop r12; ret; 
0x0000000002ac5b: or [rbx+0x5d], bl; ret; 
0x000000001571bc: or [rbx+0x67f01f8], al; ret; 
0x000000000922d6: or [rbx+0x68901e0], al; xor eax, eax; ret; 
0x0000000016acdb: or [rbx+0x798db90c], ecx; mov edi, 0x8337e983; call far fword ptr [rdx]; 
0x00000000081f80: or [rbx+0xd], dh; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000081e36: or [rbx+0xf], dh; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000000f7011: or [rbx+rax*4+0x5b], dh; ret; 
0x0000000004076d: or [rbx+rax+0x57], cl; and [rcx+rcx*4-0x30], cl; ret; 
0x0000000008b973: or [rbx+rcx*4+0x4], cl; and al, 0xe9; ret; 
0x0000000016882b: or [rbx-0x17e3db84], ecx; ret far; 
0x00000000083eae: or [rbx-0x3b7cb7fe], cl; or [rbx+0x5d], bl; ret; 
0x00000000127ed4: or [rbx-0x47e7db84], cl; and [rcx], al; add [rax], al; syscall; 
0x00000000097fdf: or [rbx-0x6ffef3b9], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000005f93f: or [rbx-0x76bef791], ecx; ret; 
0x000000000fd523: or [rbx-0x78f0fe08], al; ret far; 
0x0000000006734c: or [rbx-0x7af0fe01], al; ret; 
0x0000000007d90d: or [rbx-0x7bf00002], al; ret; 
0x00000000095cb2: or [rbx], al; add [rax], al; and eax, 0x10; jne short 0x0000000000095cc0; ret; 
0x0000000009183d: or [rbx], al; add [rax], al; jne short 0x0000000000091828; pop rbx; ret; 
0x00000000168b23: or [rbx], eax; or eax, [rax]; pop rbx; ret; 
0x000000000684e9: or [rbx], ebx; add [rbx-0x5ff7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000002bf41: or [rbx], ebx; add [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi+0xf]; 
0x00000000134413: or [rbx], esp; add [rax], al; nop [rax+rax]; endbr64; ret; 
0x0000000015fdf6: or [rcx+0x29], al; rcr byte ptr [rbx+0x5d], 0x1; mov eax, r8d; ret; 
0x0000000013b5b4: or [rcx+0x400], bh; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x28]; 
0x000000000906b5: or [rcx+0x4c], dl; mov ecx, edx; call rax; 
0x000000000b140b: or [rcx+0x54b70f10], cl; and al, 0xc; mov [rax+0x4], dx; add rax, rcx; ret; 
0x000000001053a7: or [rcx+0x63], cl; xor al, 0xb0; add rsi, r8; notrack jmp rsi; 
0x0000000013b4ae: or [rcx+0xf], eax; ret far; 
0x00000000055580: or [rcx+rax-0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x000000000e7835: or [rcx+rcx*4+0x2b], ah; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008b4ee: or [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000118e73: or [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x00000000092257: or [rcx+rcx*4-0x18], al; pop r12; pop r13; ret; 
0x000000000a8144: or [rcx+rcx*4-0x18], cl; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000859da: or [rcx+rcx*4-0x1], cl; call rax; 
0x0000000015ea7b: or [rcx+rcx*4-0x1], cl; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x000000000ee4ea: or [rcx+rcx*4-0x1], ecx; call rbx; 
0x00000000029e5d: or [rcx+rcx*4-0x1a], cl; mov edi, ebp; add rcx, [r14]; call rcx; 
0x0000000015fc95: or [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call qword ptr [rax]; 
0x00000000160a7c: or [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000086512: or [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x0000000005a583: or [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x000000000c53e5: or [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x000000000a9df3: or [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x0000000009eb8a: or [rcx+rcx*4-0x3e], cl; mov edi, 0x2; mov eax, r15d; mov r10d, 0x8; syscall; 
0x000000000f8092: or [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret; 
0x0000000011d7e1: or [rcx+rcx*4-0x40], al; ret; 
0x000000000e5be7: or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret; 
0x0000000014311a: or [rcx+rcx*4-0x40], cl; ret; 
0x0000000015f2bc: or [rcx+rcx*4-0xa], al; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000015e2e7: or [rcx+rcx*4-0xa], al; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000054662: or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000f8ce4: or [rcx-0x3f], al; call far fword ptr [rax]; 
0x000000000540ee: or [rcx-0x75], cl; adc al, 0xc0; mov [rsi+rax*8], rdx; xor eax, eax; ret; 
0x000000000f6b35: or [rcx-0x75], cl; je short 0x00000000000f6b5e; or [rcx], ch; ret far; 
0x00000000164a6d: or [rcx-0x75], cl; jo short 0x0000000000164ab2; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000105af9: or [rcx-0x75], cl; push rsi; adc [rax+0x63], cl; ret far; 
0x00000000085e09: or [rcx-0x75], cl; sub [r13-0x7b], r8b; shl byte ptr [rbp+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x00000000105af8: or [rcx-0x75], r9b; push rsi; adc [rax+0x63], cl; ret far; 
0x000000000bc91f: or [rcx-0x76b7f7be], cl; clc; ret; 
0x0000000005f942: or [rcx-0x77], al; ret; 
0x0000000015fc83: or [rcx-0x77], cl; in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000012a6fd: or [rcx-0x7c172c07], cl; loopne 0x000000000012a706; ret; 
0x0000000012af9d: or [rcx-0x7c172c07], cl; loopne 0x000000000012afa6; ret; 
0x00000000129e3e: or [rcx-0x7c172c2f], cl; loopne 0x0000000000129e47; ret; 
0x00000000129ede: or [rcx-0x7c172c2f], cl; loopne 0x0000000000129ee7; ret; 
0x00000000129f7e: or [rcx-0x7c172c2f], cl; loopne 0x0000000000129f87; ret; 
0x0000000012a01e: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a027; ret; 
0x0000000012a0be: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a0c7; ret; 
0x0000000012a14e: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a157; ret; 
0x0000000012a1ee: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a1f7; ret; 
0x0000000012a28e: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a297; ret; 
0x0000000012a32e: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a337; ret; 
0x0000000012a3ce: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a3d7; ret; 
0x0000000012a469: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a472; ret; 
0x0000000012a4fe: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a507; ret; 
0x0000000012a850: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a859; ret; 
0x0000000012a8d0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a8d9; ret; 
0x0000000012a950: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a959; ret; 
0x0000000012a9d0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012a9d9; ret; 
0x0000000012aa50: or [rcx-0x7c172c2f], cl; loopne 0x000000000012aa59; ret; 
0x0000000012aad0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012aad9; ret; 
0x0000000012ab50: or [rcx-0x7c172c2f], cl; loopne 0x000000000012ab59; ret; 
0x0000000012abd0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012abd9; ret; 
0x0000000012ac50: or [rcx-0x7c172c2f], cl; loopne 0x000000000012ac59; ret; 
0x0000000012acd0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012acd9; ret; 
0x0000000012ad4d: or [rcx-0x7c172c2f], cl; loopne 0x000000000012ad56; ret; 
0x0000000012add0: or [rcx-0x7c172c2f], cl; loopne 0x000000000012add9; ret; 
0x00000000059d59: or [rcx-0x7d], cl; ret; 
0x0000000011a37a: or [rcx-0x804b1f], al; jmp qword ptr [rsi+0xf]; 
0x00000000120096: or [rcx-0xa], al; ret; 
0x000000001b59bd: or [rcx], ah; enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000113996: or [rcx], al; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x00000000061f58: or [rcx], al; add [rax], al; syscall; 
0x00000000113a38: or [rcx], al; add [rax], al; xor eax, eax; ret; 
0x000000000f419c: or [rcx], al; mov [rax], dl; mov eax, 0x1; ret; 
0x000000000f4170: or [rcx], al; mov byte ptr [rax], 0x5b; mov eax, 0x1; ret; 
0x000000000f4126: or [rcx], al; mov eax, 0x1; ret; 
0x0000000009265a: or [rcx], al; xor eax, eax; ret; 
0x00000000053cce: or [rcx], bh; ret; 
0x000000000b12ff: or [rcx], bh; shl dword ptr [rbp-0x14], 0x1; ret; 
0x000000000f4109: or [rcx], bl; mov eax, 0x1; ret; 
0x00000000141e19: or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x000000000f6b3a: or [rcx], ch; ret far; 
0x000000000d2abc: or [rcx], ch; ret; 
0x000000001b4ba1: or [rcx], cl; shl bl, 0x1; bsf eax, eax; add rax, rdi; ret; 
0x0000000009cb57: or [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000045d1a: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000105940: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000a1a8d: or [rcx], dh; ret; 
0x000000001571b7: or [rcx], dh; rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x00000000001571c8; ret; 
0x000000000a1aac: or [rcx], dh; ror byte ptr [rax+0x9], 0x1; ret; 
0x0000000009287e: or [rcx], dh; ror byte ptr [rax-0x77], 0x57; and [rax-0x77], cl; ja short 0x00000000000928a1; ret; 
0x00000000112a6c: or [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000112c92: or [rcx], dh; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsi; ret; 
0x00000000112b60: or [rcx], dh; ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000016584d: or [rcx], dh; sar byte ptr [rbx], 0x14; ret; 
0x00000000113482: or [rcx], dh; sar byte ptr [rsi-0x1], cl; mov eax, 0x1b4; syscall; 
0x00000000116168: or [rcx], eax; add [rax], al; syscall; 
0x000000001288f2: or [rcx], eax; sar byte ptr [rax+0x14], cl; syscall; 
0x00000000101c07: or [rcx], esi; or eax, 0x4634a00; sahf; add rax, rsi; notrack jmp rax; 
0x00000000113f03: or [rdi+0x10], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001b3b33: or [rdi+0x16], ch; vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b1403: or [rdi+0x16], ch; vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b09b1: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b2ce1: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b41: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b0224: or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1414: or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001a7309: or [rdi+0x44], bh; adc bh, bh; ret; 
0x000000000a6fc6: or [rdi+0x57], esi; lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000001b0a83: or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000009dc33: or [rdi+0x7], ebx; add [rbp-0x7ea28a40], al; ret far; 
0x00000000175e1d: or [rdi+rax*8], edx; xor eax, eax; ret; 
0x00000000175e1c: or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000011c18d: or [rdi+rcx+0x43], cl; ror dword ptr [rax-0x77], 0x1; and al, 0x20; mov eax, 0x65; syscall; 
0x000000000a9ac3: or [rdi+rcx], esp; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x0000000005a34b: or [rdi-0x2e], esi; mov rax, r8; ret; 
0x000000001a7303: or [rdi], bh; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x00000000162ce4: or [rdi], cl; adc [rax], ecx; mov eax, 0x1; ret; 
0x0000000008a641: or [rdi], cl; adc [rbx+0x18], eax; movups [rbx+0x28], xmm0; pop rbx; ret; 
0x00000000128574: or [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001285ac: or [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000014e583: or [rdi], cl; mov bh, 0xc0; add rsp, 0x28; ret; 
0x0000000008a085: or [rdi], cl; mov dh, 0x0; ret; 
0x0000000016d30c: or [rdi], cl; mov dh, 0xc0; add rsp, 0x18; ret; 
0x00000000116114: or [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x0000000009d599: or [rdi], cl; mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x00000000125ecc: or [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000015f6e2: or [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x0000000011ce7c: or [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000050d88: or [rdi], cl; mov dh, 0xc0; ret; 
0x000000001b460f: or [rdi], cl; pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x0000000015ff71: or [rdi], cl; ret; 
0x000000000c8009: or [rdi], cl; test [rbx-0x72fffff9], dh; rol byte ptr [r11-0x78f0f608], 0x1; ret; 
0x00000000108e10: or [rdi], cl; xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x000000001294c8: or [rdi], cl; xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x00000000042ec2: or [rdi], eax; xor eax, eax; ret; 
0x0000000012843c: or [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000019a131: or [rdi], ecx; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000017b3fc: or [rdi], ecx; sub [rdi], esp; notrack jmp r9; 
0x0000000018d5a6: or [rdi], ecx; test [rbx+0x2], esp; add [rax], al; ret; 
0x00000000076ed0: or [rdi], ecx; xchg [rdi+0xffffff0], ecx; mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x00000000075f55: or [rdi], ecx; xchg [rdi+rcx], ah; add [rdi+rcx-0x4a], al; sub [rax-0x77], ecx; ret far; 
0x000000000773a2: or [rdi], ecx; xchg [rdi], esi; in eax, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x000000000dfa5e: or [rdi], ecx; xchg ch, dl; add eax, [rax]; add [rax-0x41], cl; ret; 
0x00000000042ec1: or [rdi], rax; xor eax, eax; ret; 
0x0000000018d5a5: or [rdi], rcx; test [rbx+0x2], esp; add [rax], al; ret; 
0x00000000091b41: or [rdx+0x21], bh; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x000000000a8094: or [rdx+0x9], dh; mov [r8], rsi; ret; 
0x000000001a4605: or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x000000001430a7: or [rdx+0xf], al; adc [rsi+rcx+0x8], edx; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x0000000011ec03: or [rdx-0x2708fff1], esp; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000008e204: or [rdx], al; add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x000000000c533a: or [rdx], al; add [rax], al; ret; 
0x000000000f4142: or [rdx], al; xor eax, eax; ret; 
0x000000000f41b1: or [rdx], bl; mov eax, 0x2; ret; 
0x00000000175018: or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fc7: or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x0000000017552f: or [rdx], ch; push rax; mov rax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x0000000006069f: or [rip+0x100], ah; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000119d76: or [rip+0x100f], ah; ret; 
0x00000000119d75: or [rip+0x100f], r12b; ret; 
0x000000000c2683: or [rip+0x634b0011], ecx; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000119aac: or [rsi+0x10], bh; mov eax, 0x48; syscall; 
0x00000000094923: or [rsi+0x18], bh; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x000000001b5212: or [rsi+0x1b], dh; test eax, eax; je short 0x00000000001b5280; tzcnt eax, eax; ret; 
0x0000000015eef4: or [rsi+0x20], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013eec4: or [rsi+0x3], ah; add [rax-0x75], cl; jl short 0x000000000013eef0; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x00000000139633: or [rsi+0x44e8000e], eax; jge short 0x0000000000139630; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000427fa: or [rsi+0x8], bh; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000015efad: or [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000164464: or [rsi+0x8], bh; mov rdi, rbp; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x000000000bc894: or [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000bc7c7: or [rsi+0xf], ah; adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000bf4d1: or [rsi+0xf], ah; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x0000000015fcc7: or [rsi+0xf], ah; insb [rdi], dx; ror dword ptr [rdi], 0x29; add al, 0x24; call qword ptr [rax+0x8]; 
0x00000000085640: or [rsi-0x1], bh; mov rdi, r8; call qword ptr [rax+0x18]; 
0x000000000e59c3: or [rsi-0x5], edx; jmp qword ptr [rsi+0xf]; 
0x000000000bc8e0: or [rsi-0x77], ah; or [rax-0x77], cl; clc; ret; 
0x000000000f41d6: or [rsi], bl; mov eax, 0x2; ret; 
0x000000000f4137: or [rsi], dl; mov eax, 0x1; ret; 
0x00000000182e43: or [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000009532d: or [rsp+0xd8], eax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x0000000009532c: or [rsp+0xd8], rax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x000000000467c3: or ah, [rip+0x3ff]; xor eax, edx; ret; 
0x00000000041494: or ah, [rsi+0x48]; movd mm2, esi; movapd xmm0, xmm2; ret; 
0x000000000414e6: or ah, [rsi+0xf]; sub dl, al; ret; 
0x00000000078d1c: or al, 0x0; add [rax-0x75], cl; mov ebp, 0xfffff748; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x00000000048a4a: or al, 0x0; add [rax-0x80], al; jmp far fword ptr [rbx]; 
0x00000000046a80: or al, 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000001644a2: or al, 0x0; add [rax], al; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000001563c7: or al, 0x0; add [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x00000000092060: or al, 0x0; add [rax], al; pop rbp; pop r12; ret; 
0x00000000091ea7: or al, 0x0; add [rax], al; pop rbx; pop rbp; ret; 
0x0000000015ee12: or al, 0x0; add [rax], al; ret; 
0x0000000011a9d5: or al, 0x0; add [rax], al; syscall; 
0x0000000011fa63: or al, 0x0; add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000a411a: or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x0000000019c68f: or al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000017a078: or al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000076587: or al, 0x0; add [rcx+rcx*4-0x6], cl; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000057114: or al, 0x0; add [rdi+rax*4-0x17], dh; sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000d42c4: or al, 0x0; add [rdi+rax*4-0x17], dh; sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x00000000155b7f: or al, 0x0; add [rdi], cl; adc [rip+0xcdb5f], esp; call rbx; 
0x0000000015d350: or al, 0x0; add rsp, 0x8; ret; 
0x00000000155b87: or al, 0x0; call rbx; 
0x000000000a83a3: or al, 0x0; cmovne rax, rdx; ret; 
0x00000000155b72: or al, 0x0; mov [rip+0xccb5d], rbp; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b1b: or al, 0x0; mov [rip+0xcdbec], r12; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b22: or al, 0x0; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155ac4: or al, 0x0; mov [rip+0xcec83], r12; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155acb: or al, 0x0; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a74: or al, 0x0; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155b79: or al, 0x0; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b29: or al, 0x0; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155ad2: or al, 0x0; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a7b: or al, 0x0; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155075: or al, 0x0; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000149625: or al, 0x0; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000015501d: or al, 0x0; mov eax, 0x22; mov fs:[rdx], eax; pop rbx; ret; 
0x0000000014b1a9: or al, 0x0; mov eax, [rax+0x18]; test eax, eax; jne short 0x000000000014b1b8; ret; 
0x000000001075ae: or al, 0x0; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000001106cf: or al, 0x0; mov r10, [rsp+0x20]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000014a399: or al, 0x0; mov rax, fs:[rax]; ret; 
0x0000000010ffc0: or al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000107558: or al, 0x0; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x00000000113196: or al, 0x0; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x0000000010fc53: or al, 0x0; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000c5500: or al, 0x0; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x0000000015da78: or al, 0x0; test eax, eax; je short 0x000000000015da80; ret; 
0x00000000072fe5: or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078518: or al, 0x13; add rdx, r13; call qword ptr [r10+rax*8]; 
0x000000001a1d00: or al, 0x16; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a2208: or al, 0x16; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b49f3: or al, 0x16; jne 0x00000000001b4610; ret; 
0x000000001b513b: or al, 0x16; jne 0x00000000001b4c81; ret; 
0x000000001a1e27: or al, 0x16; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ca4: or al, 0x16; jne short 0x00000000001b4c81; ret; 
0x000000000aa79e: or al, 0x16; mov [rsi+rdx+0x1], al; jne short 0x00000000000aa790; ret; 
0x000000000b2dc6: or al, 0x16; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001b1dbf: or al, 0x16; test eax, eax; jne 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b3418: or al, 0x16; test eax, eax; jne 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b4a61: or al, 0x16; test eax, eax; jne 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b51d0: or al, 0x16; test eax, eax; jne 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001b1cb9: or al, 0x16; test eax, eax; jne short 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b32ce: or al, 0x16; test eax, eax; jne short 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b49c7: or al, 0x16; test eax, eax; jne short 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b50dc: or al, 0x16; test eax, eax; jne short 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001a1cfd: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a2205: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b49f0: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x00000000001b4610; ret; 
0x000000001b5138: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x00000000001b4c81; ret; 
0x000000001a1e24: or al, 0x17; cmp ecx, [rsi+rdx]; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ca1: or al, 0x17; cmp ecx, [rsi+rdx]; jne short 0x00000000001b4c81; ret; 
0x00000000113986: or al, 0x1; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x00000000114571: or al, 0x1; add [rax], al; syscall; 
0x00000000113a20: or al, 0x1; add [rax], al; xor eax, eax; ret; 
0x00000000061120: or al, 0x24; add [rax-0x7d], cl; in al, dx; sbb [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000010aad0: or al, 0x24; call rax; 
0x00000000145a27: or al, 0x24; mov rdi, r14; call rcx; 
0x0000000015eabf: or al, 0x24; mov rsi, r15; mov rdi, rbx; xor eax, eax; call rcx; 
0x0000000015e9d4: or al, 0x24; xor eax, eax; mov rdi, rbx; call rcx; 
0x0000000013eb25: or al, 0x25; add [rax], al; add [rax], al; add rcx, [rip+0xda2de]; call rbp; 
0x0000000012562e: or al, 0x30; ror byte ptr [rcx], 0xd0; ret; 
0x000000000a26b3: or al, 0x31; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000012a5e6: or al, 0x31; test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae2d: or al, 0x31; test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae8a: or al, 0x31; test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x00000000092e60: or al, 0x37; add [rax], al; nop [rax]; mov eax, 0x16; ret; 
0x000000001a1fe0: or al, 0x3a; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ec0: or al, 0x3a; jne 0x00000000001b4c81; ret; 
0x000000000964d4: or al, 0x3a; jne short 0x0000000000096510; mov rax, r8; ret; 
0x000000000d7aa1: or al, 0x3b; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x000000001a1fdd: or al, 0x3e; cmp ecx, [rdx+rdi]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ebd: or al, 0x3e; cmp ecx, [rdx+rdi]; jne 0x00000000001b4c81; ret; 
0x0000000012643f: or al, 0x3f; shr eax, cl; and eax, 0x3; ret; 
0x00000000092b1e: or al, 0x40; xor dh, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000115130: or al, 0x41; mov eax, eax; mov eax, 0x3; syscall; 
0x0000000011ba50: or al, 0x41; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000011bb10: or al, 0x41; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000114f58: or al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000092900: or al, 0x45; xor edx, edx; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000095e53: or al, 0x48; add esp, 0x10; pop rbp; ret; 
0x0000000013e91b: or al, 0x48; add esp, 0x18; pop rbp; pop r12; ret; 
0x000000000919d3: or al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000009b7d8: or al, 0x48; add esp, 0x18; ret; 
0x000000000ea570: or al, 0x48; add esp, 0x28; ret; 
0x00000000161a33: or al, 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a264b: or al, 0x48; add esp, 0x8; ret; 
0x0000000018d602: or al, 0x48; lea ecx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x000000000c063f: or al, 0x48; lea edi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c1d33: or al, 0x48; lea edi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x00000000141e20: or al, 0x48; mov [rsi], edi; ret; 
0x000000001674e5: or al, 0x48; mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000091184: or al, 0x48; mov edi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000017546a: or al, 0x48; mov edi, [rsp+0x20]; call qword ptr [rbx+0x360]; 
0x0000000008d8e4: or al, 0x48; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001152c4: or al, 0x48; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000001644f9: or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000012914c: or al, 0x48; mov edx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x00000000125dd7: or al, 0x48; mov esi, [rsp]; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x000000000c1d50: or al, 0x49; sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000000c0880: or al, 0x5; add [rax], al; ret; 
0x000000001572e3: or al, 0x5b; mov eax, 0x1; pop rbp; pop r12; ret; 
0x00000000132ac3: or al, 0x5b; ret; 
0x000000000ead6b: or al, 0x5d; pop r12; ret; 
0x000000000b1412: or al, 0x66; mov [rax+0x4], edx; add rax, rcx; ret; 
0x000000000b14ea: or al, 0x66; mov [rax+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000001a2d9d: or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000199ce6: or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x000000001a35f1: or al, 0x6; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a132a: or al, 0x6; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x0000000004174b: or al, 0x75; or dh, dl; addps xmm0, xmm0; ret; 
0x00000000140a6a: or al, 0x75; ret far; 
0x0000000009d5ec: or al, 0x75; xor [rax+0x3], bh; add rsp, 0x8; ret; 
0x0000000009d57a: or al, 0x75; xor bh, [rax+0x3]; add rsp, 0x8; ret; 
0x000000001baab0: or al, 0x83; add al, [rax]; divss xmm0, [rip+0x29368]; ret; 
0x00000000035dcb: or al, 0x83; inc byte ptr [rbx]; je short 0x0000000000035dd8; pop rbx; ret; 
0x000000000c03ac: or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000073374: or al, 0x83; ret; 
0x000000000a41e2: or al, 0x83; shr dword ptr [rsi+0x48], 0x3d; jmp far fword ptr [rdi+0x32760000]; 
0x00000000139314: or al, 0x85; ror byte ptr [rdi], 0x85; ret; 
0x000000001b5a3a: or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000c588d: or al, 0x87; test ecx, ecx; jne short 0x00000000000c5868; mov rax, r8; ret; 
0x0000000004219b: or al, 0x89; jae short 0x00000000000421df; xor eax, eax; pop rbx; ret; 
0x00000000075f86: or al, 0x8; movsxd rsi, [rsi+rcx*4]; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x00000000073061: or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x000000000b1a33: or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b7c04: or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000012a5e3: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae2a: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae87: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x00000000192eaf: or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a3af: or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000112d6b: or al, 0x8b; add al, 0xeb; ret; 
0x000000001803cd: or al, 0x8b; add r9, r11; notrack jmp r9; 
0x000000001199b3: or al, 0x8b; jl short 0x00000000001199db; or [rax+0x11d], bh; syscall; 
0x0000000017ae1d: or al, 0x8b; lea r9, [r11+r9]; notrack jmp r9; 
0x000000001a3f3d: or al, 0x8b; mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x0000000012a7e7: or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x000000000e3151: or al, 0x8e; add rcx, rsi; notrack jmp rcx; 
0x0000000012a7cc: or al, 0x8e; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b05c: or al, 0x8e; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000012b070; ret; 
0x000000000379ce: or al, 0x8f; add rcx, rdi; notrack jmp rcx; 
0x0000000004553e: or al, 0x90; call qword ptr [rbx]; 
0x0000000017adb6: or al, 0x93; add rsi, rdx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x000000000bfb2b: or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000046cd0: or al, 0x9e; add al, 0x0; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001b799e: or al, 0xa2; add r9, r10; notrack jmp r9; 
0x0000000007a67d: or al, 0xb3; mov r8, [rip+0x1a0232]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x00000000074ba9: or al, 0xb3; mov r8, [rip+0x1a5d06]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000016639d: or al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x00000000127607: or al, 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x00000000128046: or al, 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000017ae21: or al, 0xb; notrack jmp r9; 
0x000000000bfb2f: or al, 0xb; notrack jmp rcx; 
0x000000001a4ab2: or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x000000001bbd60: or al, 0xc6; out 0xff, al; mov qword ptr [rip+0x6bab9], 0x0; add rsp, 0x8; ret; 
0x000000001644a1: or al, 0xc; add [rax], al; add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000005431c: or al, 0xd0; xor eax, eax; ret; 
0x00000000054318: or al, 0xd1; mov [rax+rdx*8], rcx; xor eax, eax; ret; 
0x000000000ea68d: or al, 0xe8; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x0000000012761d: or al, 0xe8; mov ebp, 0x8bfff694; and al, 0xc; add rsp, 0x28; ret; 
0x0000000011a293: or al, 0xe8; push 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x00000000114744: or al, 0xe8; ret; 
0x0000000016c020: or al, 0xe8; ret; 
0x000000001a354a: or al, 0xe; sub eax, ecx; ret; 
0x0000000012c733: or al, 0xeb; shl byte ptr [rsi+0x2e], 0x1; nop [rax+rax]; ret; 
0x000000001b59c1: or al, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001ae934: or al, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000182922: or al, 0xf3; movq [rdi], mm1; ret; 
0x0000000011cc02: or al, 0xf7; jmp qword ptr [rsi+0x66]; 
0x000000000d41ea: or al, 0xf8; dec dword ptr [rax-0x7d]; ret; 
0x000000001664b0: or al, 0xf; enter 0xc089, 0x48; mov [rcx], eax; mov eax, 0x1; ret; 
0x000000000d7aa4: or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x000000000c0643: or al, 0xf; test [rsi+0x7], eax; add [rax], al; ret; 
0x000000001355aa: or al, 0xfe; call qword ptr [rax-0x18]; 
0x000000000dd8b8: or al, [rax]; add [rax-0x75], cl; je short 0x00000000000dd8e3; or al, ch; ret far; 
0x0000000006837b: or al, [rax]; add [rax-0x7d], cl; ret; 
0x0000000013d963: or al, [rax]; add [rax], al; pop rbx; pop rbp; ret; 
0x0000000015ee32: or al, [rax]; add [rax], al; ret; 
0x0000000011ec55: or al, [rax]; add [rax], al; syscall; 
0x00000000167e8f: or al, [rax]; add [rax], al; xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000b3e78: or al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000010fd35: or al, [rax]; add [rcx-0x80], al; call far fword ptr [rdi+rcx-0x7c]; 
0x0000000010fd36: or al, [rax]; add [rcx-0x80], al; call far fword ptr [rdi+rcx-0x7c]; 
0x00000000174eae: or al, [rax]; call qword ptr [rax+0x368]; 
0x00000000175048: or al, [rax]; jmp qword ptr [rax+0x350]; 
0x00000000175049: or al, [rax]; jmp qword ptr [rax+0x350]; 
0x00000000175ca9: or al, [rax]; jmp qword ptr [rax+0x378]; 
0x00000000175db5: or al, [rax]; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x000000001724b9: or al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; mov qword ptr [rdx], 0x0; ret; 
0x000000001760dd: or al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000175e95: or al, [rax]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000001720c9: or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001781f9: or al, [rax]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000128187: or al, [rax]; mov eax, [rax+rdi*4]; ret; 
0x00000000175538: or al, [rax]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x000000000c5d55: or al, [rax]; mov rdi, [r13]; movzx esi, bl; call rbp; 
0x00000000174f86: or al, [rax]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x000000001754ed: or al, [rax]; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x000000001754b9: or al, [rax]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000177e95: or al, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000961b9: or al, [rax]; nop [rax+rax]; endbr64; mov eax, [rip+0x189926]; ret; 
0x000000000945c6: or al, [rax]; nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x00000000090325: or al, [rax]; test al, al; je short 0x0000000000090336; mov rdi, r14; call qword ptr [r12+0x360]; 
0x00000000173588: or al, [rax]; test edi, edi; jns short 0x0000000000173590; ret; 
0x00000000089ffc: or al, [rax]; xchg ax, ax; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000009d9d4: or al, [rbx+0x2d750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d5e9: or al, [rbx+0x30750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x0000000009d577: or al, [rbx+0x32750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000a08b5: or al, [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x00000000039c85: or al, [rcx+rcx*4-0x40]; ret; 
0x00000000174262: or al, [rcx-0x15]; call far fword ptr [rbx+0x44]; 
0x000000001161c5: or al, [rcx]; add [rax], al; syscall; 
0x00000000182fcc: or al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a4a93: or al, bl; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000000b1043: or al, bl; nop [rax]; mov byte ptr [rcx-0x1], 0x0; mov [rdx], rcx; ret; 
0x0000000008a423: or al, ch; addr32 loopne 0x000000000008a421; dec dword ptr [rax-0x77]; ret; 
0x000000001262b9: or al, ch; and [rax+0x448bfff6], ebp; and al, 0x8; add rsp, 0x18; ret; 
0x000000000f515b: or al, ch; call qword ptr [rax]; 
0x0000000012609d: or al, ch; cmp eax, 0x48fff6aa; mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000095cc3: or al, ch; idiv dword ptr [rdx-0x3fce0001]; add rsp, 0x8; ret; 
0x00000000118d8d: or al, ch; jge short 0x0000000000118d89; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x0000000013a67b: or al, ch; jmp far fword ptr [rbp+rsi*8-0x1]; 
0x000000000a043a: or al, ch; mov al, [0x824448b48ffff06]; add rsp, 0x38; ret; 
0x0000000010d2bf: or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x000000001359ec: or al, ch; mov esi, 0x66fffff6; nop [rax+rax]; ret; 
0x0000000014bfc6: or al, ch; movsb [rdi], [rsi]; ret; 
0x000000000f9dc5: or al, ch; movsd [rdi], [rsi]; in eax, 0xf2; jmp qword ptr [rsi+0xf]; 
0x000000001199cd: or al, ch; or eax, 0x8bfff771; and al, 0x8; add rsp, 0x28; ret; 
0x000000001358bb: or al, ch; out dx, eax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000726ef: or al, ch; pop rbx; ja short 0x00000000000726f0; jmp qword ptr [rsi+0x66]; 
0x000000000cbac1: or al, ch; pop rcx; ret far; 
0x0000000004224f: or al, ch; ret far; 
0x00000000046767: or al, ch; ret; 
0x00000000077c2f: or al, ch; sbb esp, [rdx]; cld; jmp qword ptr [rsi+0x66]; 
0x00000000148e06: or al, ch; test dh, dh; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x00000000042717: or al, ch; xor edx, [rbp-0x3f7afffb]; jne short 0x0000000000042730; add rsp, 0x8; ret; 
0x000000000980d7: or al, ch; xor edx, [rdx-0x74b70001]; jl short 0x0000000000098105; or bl, ch; ret far; 
0x000000000a9d1c: or ax, 0x4800; cmovne eax, edx; ret; 
0x000000000b1a38: or bh, [rsi]; jmp r10; 
0x0000000016917c: or bh, al; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000007f861: or bh, bh; rol byte ptr [rbx+0xf74fff8], 0x1; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000174f7e: or bh, bh; xor [rax-0x75], cl; add eax, 0xa3f40; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000120b75: or bl, [rbp+0x41]; pop rsp; pop r13; ret; 
0x000000001683ed: or bl, [rbx+0x31]; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000108b12: or bl, [rdx+0x59]; pop rbx; ret; 
0x000000000415b5: or bl, [rdx]; add dl, dh; mulps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000015ee0e: or bl, al; mov dword ptr [rsi], 0xc; ret; 
0x00000000095cce: or bl, al; mov eax, 0x3; ret; 
0x0000000009f188: or bl, al; nop [rax+rax]; endbr64; mov rax, [rdi+0x78]; ret; 
0x000000001a4a73: or bl, al; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x0000000018d735: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x0000000018d716: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x0000000018d705: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000000c0d15: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000c0cf6: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000c0ce5: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000e56e6: or bl, al; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000128d06: or bl, al; nop [rax+rax]; ret; 
0x0000000009d53a: or bl, al; nop [rax]; endbr64; mov eax, 0x18; syscall; 
0x00000000090ff7: or bl, al; nop [rax]; endbr64; ret; 
0x0000000009c56f: or bl, al; nop [rax]; mov [rdx+0x8], rax; ret; 
0x0000000011ccfa: or bl, al; nop [rax]; mov eax, 0x1; ret; 
0x00000000143007: or bl, al; nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000008fedf: or bl, al; nop [rax]; mov rax, [rax+0x388]; mov rax, [rax+0x8]; jmp rax; 
0x0000000011c6d7: or bl, al; nop [rax]; ret; 
0x000000000a264f: or bl, al; nop [rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000000a265d: or bl, al; nop; xor eax, eax; ret; 
0x00000000092781: or bl, bh; xor eax, eax; ret; 
0x000000000980e1: or bl, ch; ret far; 
0x0000000007fc8e: or bl, ch; ret; 
0x00000000182ae3: or bl, dh; movq [rdi], mm1; ret; 
0x000000001474a7: or bl, dl; out 0x89, al; ret; 
0x0000000015ee0d: or bl, r8b; mov dword ptr [rsi], 0xc; ret; 
0x0000000019d737: or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000090517: or byte ptr [rax+0x3], 0x0; add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x00000000133a08: or byte ptr [rax-0x77], 0xda; movups [rbp-0x78], xmm7; call rax; 
0x000000000c5339: or byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000a7674: or byte ptr [rbx+0x50], 0x1; movsxd rsi, esi; movups [rbx+0x38], xmm0; mov [rbx], rsi; call rax; 
0x000000000c277c: or byte ptr [rbx], 0x11; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000013313f: or byte ptr [rcx+rcx*4-0x16], 0xf; adc [rbp-0x78], ebp; call rax; 
0x00000000132f29: or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], ebx; call rax; 
0x0000000013372b: or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], edi; call rax; 
0x00000000133659: or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esi; call rax; 
0x000000001331a1: or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esp; call rax; 
0x00000000119e1d: or byte ptr [rcx-0x3c3fcef9], 0x48; mov eax, [rip+0xfefe6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000056649: or byte ptr [rcx-0x77], 0x0; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000a76e3: or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x1716f1; call qword ptr [rax]; 
0x0000000013682f: or byte ptr [rdi], 0x45; mov ebx, 0x401f0f; mov eax, edi; shr eax, 0x18; ret; 
0x000000001367ae: or byte ptr [rdi], 0x45; mov ebx, 0x441f0f; add [rcx-0xda08], cl; inc dword ptr [rax]; ret; 
0x00000000036bfc: or byte ptr [rdx-0x75], 0x14; loopne 0x0000000000036c4a; test edx, edx; je short 0x0000000000036c08; call rdx; 
0x00000000098b35: or byte ptr [rdx], 0x14; add al, ch; adc dl, [rbx]; cli; jmp qword ptr [rsi-0x70]; 
0x00000000103034: or ch, al; push rsi; adc eax, 0xc2e9ffff; loop 0x000000000010303d; call qword ptr [rax+0x24448b48]; 
0x000000000397bf: or ch, al; ret far; 
0x00000000165eb0: or ch, bh; jmp qword ptr [rsi+0x66]; 
0x000000000a95f1: or cl, [r15]; add [rax-0x73], cl; add eax, 0xc014; cmove rax, rdx; ret; 
0x0000000009c569: or cl, [rax+0x39]; sbb [rax+rcx-0x3d], sil; nop [rax]; mov [rdx+0x8], rax; ret; 
0x000000000c0601: or cl, [rax-0x73]; jg short 0x00000000000c0610; jne 0x00000000000c0d90; ret; 
0x000000000c1ce5: or cl, [rax-0x73]; jg short 0x00000000000c1cf4; jne 0x00000000000c25e0; ret; 
0x0000000018d5c2: or cl, [rax-0x73]; or cl, [rdi]; test [rbx+0x2], eax; add [rax], al; ret; 
0x00000000080fb9: or cl, [rax-0x7d]; ret; 
0x000000001306fd: or cl, [rcx+0x63]; rol byte ptr [rbp-0x77], 0x1; ret; 
0x00000000148561: or cl, [rcx-0x7d]; ret; 
0x000000000a95f2: or cl, [rdi]; add [rax-0x73], cl; add eax, 0xc014; cmove rax, rdx; ret; 
0x000000001283dc: or cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000128394: or cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000001b56e5: or cl, [rdi]; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x0000000018d5c5: or cl, [rdi]; test [rbx+0x2], eax; add [rax], al; ret; 
0x000000001919b6: or cl, [rdi]; test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000178328: or cl, [rdx]; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000092336: or cl, al; clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x00000000134826: or cl, bh; dec dword ptr [rax-0x73]; add eax, 0xfff907a0; cmovne rax, rdx; ret; 
0x000000001361ab: or cl, bh; jmp qword ptr [rsi-0x70]; 
0x00000000041307: or cl, bl; in eax, 0xdf; loopne 0x00000000000412ea; fsub st, dword ptr [rip+0x200]; ret; 
0x0000000004124f: or cl, bl; std; fstp st(1), st; ret; 
0x0000000003ae31: or cl, ch; imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000854f0: or cl, ch; sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000a8244: or cl, ch; sar edi, cl; jmp qword ptr [rsi+0xf]; 
0x00000000128f99: or cl, ch; shl ebx, 0x1; out dx, eax; call qword ptr [rax-0x3ec274b8]; 
0x000000000c47f5: or cl, cl; cmove rax, rdx; ret; 
0x0000000009104e: or dh, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000041345: or dh, [rbp+0x8]; fadd st, st(0); add rsp, 0x8; ret; 
0x000000000967dd: or dh, [rbp+0x8]; xor eax, eax; ret; 
0x000000000f6e7b: or dh, [rbp+rdi+0x48]; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000003a9e9: or dh, [rdi+0x27]; lea rcx, [rip+0x19156d]; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x00000000084536: or dh, [rdi+rcx+0x48]; cmp ecx, esi; ja short 0x0000000000084530; lea eax, [rdx+rdi]; ret; 
0x0000000008e946: or dh, [rdi+rcx+0x48]; cmp ecx, esi; ja short 0x000000000008e940; lea eax, [rdx+rdi]; ret; 
0x0000000015ce17: or dh, al; adc eax, 0x8348001c; ret; 
0x00000000192f39: or dh, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x00000000062910: or dh, bh; jmp far fword ptr [rbx]; 
0x0000000009264e: or dh, bh; xor eax, eax; ret; 
0x00000000182a03: or dh, bl; movq [rdi], mm1; ret; 
0x0000000004174d: or dh, dl; addps xmm0, xmm0; ret; 
0x00000000122b1a: or dword ptr [rax+0x1000000], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000001753b2: or dword ptr [rax+0x48000003], 0xffffff8b; pop rax; add rsp, 0x70; pop rbx; jmp rax; 
0x0000000008e648: or dword ptr [rax+0x74], 0x80; mov rax, [rax+0x68]; test rax, rax; jne short 0x000000000008e648; ret; 
0x0000000004076c: or dword ptr [rax], 0x2057034c; mov rax, r10; ret; 
0x0000000011d7d8: or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000469cb: or dword ptr [rbp+0x1d], 0x19ce800; add [rax], al; lea rax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x000000001b2f4e: or dword ptr [rbp+0xf000003], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000c9b6b: or dword ptr [rbx+0xf660011], 0xbee9c828; idiv edi; inc dword ptr [rcx-0x73]; ret far; 
0x00000000165073: or dword ptr [rbx-0x14], 0xfffb81ff; add [rax], al; add [rdi], cl; xchg edi, eax; ret; 
0x0000000007f817: or dword ptr [rbx], 0x20; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008a750: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000015503c: or dword ptr [rbx], 0x20; mov fs:[rdx], eax; pop rbx; ret; 
0x0000000008fb3c: or dword ptr [rbx], 0x8; pop rbx; ret; 
0x000000001433c4: or dword ptr [rcx-0x72b7fff7], 0x989a03d; add al, ch; jl short 0x000000000014343c; out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x000000000c03ad: or dword ptr [rcx-0x73], 0xc; or edi, [rsi]; jmp rcx; 
0x00000000092658: or dword ptr [rdi+0x8], 0x1; xor eax, eax; ret; 
0x00000000092894: or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x0000000009287b: or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x00000000099e1d: or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000129444: or dword ptr [rdi], 0x408b4800; sbb [rbx-0x6f3cff00], al; ret; 
0x00000000129434: or dword ptr [rdi], 0x408b4800; sbb [rsi-0x7d], ah; add [rcx], al; ret; 
0x00000000099df8: or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x000000001afa0c: or dword ptr [rdi], 0xffffffbd; ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x000000000c52b4: or dword ptr [rip+0x15b2dd], 0x1; xor eax, eax; ret; 
0x0000000008ab7d: or dword ptr [rsi], 0x3; add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x000000001162c6: or eax, 0x102b45; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116296: or eax, 0x102b75; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116266: or eax, 0x102ba5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116239: or eax, 0x102bd2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116206: or eax, 0x102c05; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161d6: or eax, 0x102c35; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001161a6: or eax, 0x102c65; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116179: or eax, 0x102c92; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000116146: or eax, 0x102cc5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115cb9: or eax, 0x103152; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c86: or eax, 0x103185; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c56: or eax, 0x1031b5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115c26: or eax, 0x1031e5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115366: or eax, 0x103aa5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115336: or eax, 0x103ad5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115276: or eax, 0x103b95; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000115206: or eax, 0x103c05; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151d6: or eax, 0x103c35; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001151a6: or eax, 0x103c65; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114fb6: or eax, 0x103e55; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114646: or eax, 0x1047c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114616: or eax, 0x1047f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114446: or eax, 0x1049c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000114416: or eax, 0x1049f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108d16: or eax, 0x1100f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108ce6: or eax, 0x110125; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108cb6: or eax, 0x110155; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c86: or eax, 0x110185; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c56: or eax, 0x1101b5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108c26: or eax, 0x1101e5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108bf6: or eax, 0x110215; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b138d: or eax, 0x121a22; mov edi, ecx; movsxd rdi, [r9+rdi*4]; add rdi, r9; notrack jmp rdi; 
0x000000000ec476: or eax, 0x12c995; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec446: or eax, 0x12c9c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec416: or eax, 0x12c9f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec3e6: or eax, 0x12ca25; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec386: or eax, 0x12ca85; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec356: or eax, 0x12cab5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ec126: or eax, 0x12cce5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eb106: or eax, 0x12dd05; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000eac5a: or eax, 0x12e1b1; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea5c6: or eax, 0x12e845; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ea386: or eax, 0x12ea85; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001038d8: or eax, 0x14634800; xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x0000000007dda8: or eax, 0x1546a7; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000006b224: or eax, 0x165f3f; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000006ad66: or eax, 0x1661f1; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062643: or eax, 0x16e040; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000062573: or eax, 0x16e0a8; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000008a6a7: or eax, 0x18b954; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000003d47b: or eax, 0x18eea8; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4b0: or eax, 0x18eec7; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d4db: or eax, 0x18eef0; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d26a: or eax, 0x18efbd; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d29f: or eax, 0x18efdc; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003d2ca: or eax, 0x18f005; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003caed: or eax, 0x18f596; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cc36: or eax, 0x18f59d; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cbdf: or eax, 0x18f5a0; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb36: or eax, 0x18f5a1; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003ca6b: or eax, 0x18f5c4; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003cb65: or eax, 0x18f5c6; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c9d0: or eax, 0x18f60b; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003c473: or eax, 0x18fb14; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003a9ee: or eax, 0x19156d; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x00000000142d0a: or eax, 0x1975c085; mov eax, r8d; ret; 
0x0000000009c598: or eax, 0x1; ret; 
0x000000001a197e: or eax, 0x1; vzeroupper; ret; 
0x000000001acebe: or eax, 0x1; xtest; je short 0x00000000001aceca; vzeroall; ret; 
0x000000001ad52b: or eax, 0x1; xtest; je short 0x00000000001ad537; vzeroall; ret; 
0x00000000041ba7: or eax, 0x1a0554; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x000000000415d9: or eax, 0x1a0ac2; orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415ab: or eax, 0x1a0b00; orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000004142f: or eax, 0x1a0c4c; orpd xmm0, xmm1; ret; 
0x000000000c15a1: or eax, 0x1c478d48; ret; 
0x000000000c2031: or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x0000000005406a: or eax, 0x1c4da1; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053b81: or eax, 0x1c528a; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000053a1e: or eax, 0x1c53ed; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000c2411: or eax, 0x1d478d48; ret; 
0x00000000042d56: or eax, 0x1d60b5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042766: or eax, 0x1d66a5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000152200: or eax, 0x1d894800; fild st, word ptr [rbx]; or eax, 0x43894800; or [rax-0x77], cl; ret far; 
0x000000000c08a1: or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x0000000018d628: or eax, 0x1e1850f; add [rax], al; ret; 
0x00000000029eeb: or eax, 0x1eefd8; mov rsi, [r12]; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000150d27: or eax, 0x1f88300; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000155c26: or eax, 0x1f88300; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x00000000191a49: or eax, 0x210850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000019d27f: or eax, 0x2123c; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019bb9e: or eax, 0x2291d; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000019b8ca: or eax, 0x22bf1; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000019a4b5: or eax, 0x24006; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001986bf: or eax, 0x25dfc; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000196a2e: or eax, 0x27a8d; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001966fa: or eax, 0x27dc1; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000194e25: or eax, 0x29696; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001069cd: or eax, 0x2; mov [rdi+0x38], al; mov [rsi], edx; movups [rsi+0x8], xmm0; ret; 
0x00000000092695: or eax, 0x2; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000931a5: or eax, 0x2; mov edx, eax; mov eax, ebp; syscall; 
0x00000000093706: or eax, 0x2; mov edx, eax; mov eax, r12d; syscall; 
0x000000001a4ac2: or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x00000000109a48: or eax, 0x3d8d4800; jg short 0x0000000000109aae; or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x00000000041a34: or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret; 
0x00000000133c2a: or eax, 0x3f8348; je short 0x0000000000133c40; ret; 
0x00000000109a4f: or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x00000000152207: or eax, 0x43894800; or [rax-0x77], cl; ret far; 
0x00000000081f82: or eax, 0x44a8d48; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000101c09: or eax, 0x4634a00; sahf; add rax, rsi; notrack jmp rax; 
0x000000000f65ba: or eax, 0x4634a00; xchg edx, eax; add rax, rdx; notrack jmp rax; 
0x000000001754b7: or eax, 0x48000a3a; mov esi, edi; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x00000000152357: or eax, 0x481b7500; mov [rip+0xd0276], ecx; mov eax, r8d; ret; 
0x000000001b539f: or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548a: or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000000bac75: or eax, 0x48fad348; test edx, edx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x0000000012817e: or eax, 0x48ffb70f; lea eax, [rip+0xae017]; mov eax, [rax+rdi*4]; ret; 
0x000000000c5823: or eax, 0x58d4800; add fs:[rax], eax; cmove rax, rdx; ret; 
0x000000000c5443: or eax, 0x58d4800; mov ah, 0x28; add [rax], eax; cmove rax, rdx; ret; 
0x000000000c54c3: or eax, 0x58d4800; xor al, 0x1a; add [rax], eax; cmove rax, rdx; ret; 
0x0000000003aa12: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000c264e: or eax, 0x634b0011; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000099d08: or eax, 0x6890f00; xor eax, eax; ret; 
0x000000000c0665: or eax, 0x724850f; add [rax], al; ret; 
0x00000000162cb2: or eax, 0x74e69; mov edx, esi; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000a246f: or eax, 0x75001778; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000015ede7: or eax, 0x77cf8; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000c1598: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c2408: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfec8: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x000000000c4068: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000606a5: or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000119e19: or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x000000000d3c40: or eax, 0x80000000; mov [rdx+0x4], r8d; mov [rdx], eax; xor eax, eax; ret; 
0x0000000019dd5a: or eax, 0x83d72948; rol byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000c6fa6: or eax, 0x841f0f66; add [rax], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000c1d59: or eax, 0x880850f; add [rax], al; ret; 
0x0000000014d51e: or eax, 0x88fa1; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000155a1c: or eax, 0x8948000d; sub eax, 0xd0db2; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x0000000016758a: or eax, 0x8948ffec; ret; 
0x00000000167589: or eax, 0x8948ffec; ret; 
0x00000000155a6c: or eax, 0x894c000d; and eax, 0xcfd1a; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x000000000b3b78: or eax, 0x894d0000; ret far; 
0x0000000007973d: or eax, 0x8b480000; mov ebp, 0xfffff748; mov rdx, rbx; mov rsi, r15; call qword ptr [r13+0x38]; 
0x000000001199cf: or eax, 0x8bfff771; and al, 0x8; add rsp, 0x28; ret; 
0x00000000168dd2: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000005f72a: or eax, 0x9235e900; cld; jmp qword ptr [rsi+0x2e]; 
0x0000000017d850: or eax, 0x9bbc3; lea r11, [rip+0x65a34]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7f6: or eax, 0x9bc1d; lea r11, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae70: or eax, 0x9e5a3; lea r11, [rip+0x68254]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae0f: or eax, 0x9e604; lea r11, [rip+0x68275]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000010eb9f: or eax, 0xb2aae800; bnd jmp qword ptr [rsi+0x2e]; 
0x000000001471cb: or eax, 0xb58b4800; mov al, [0xffffffb841fffffb]; jmp qword ptr [rbx+rcx*4]; 
0x000000000f7ab7: or eax, 0xb60f4500; in al, 0x4a; movsxd eax, [rcx]; add rax, rcx; notrack jmp rax; 
0x000000000f7a03: or eax, 0xb60f4500; in al, 0x4a; movsxd eax, [rdx]; add rax, rdx; notrack jmp rax; 
0x000000000f7b41: or eax, 0xb60f4500; test byte ptr [rdx+0x63], 0x4; mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000001517d9: or eax, 0xc0854800; jne short 0x00000000001517e8; ret; 
0x00000000152360: or eax, 0xc0894400; ret; 
0x000000000d8762: or eax, 0xc2bc0f48; shr rax, 0x2; ret; 
0x0000000010ffbd: or eax, 0xc5c72; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x00000000099229: or eax, 0xc7000001; add al, 0x0; add [rax], al; add [rcx], bh; ret; 
0x0000000015235d: or eax, 0xd0276; mov eax, r8d; ret; 
0x00000000103875: or eax, 0xd0894800; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000103872: or eax, 0xd14b1; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038d5: or eax, 0xd1606; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001038fc: or eax, 0xd166f; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000010391e: or eax, 0xd16dd; mov rax, rdx; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x0000000018d624: or eax, 0xd4a8d48; jne 0x000000000018d810; ret; 
0x00000000191a45: or eax, 0xd4a8d48; jne 0x0000000000191c60; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000007d362: or eax, 0xd6158d48; adc eax, 0xd0014800; ret; 
0x000000000c0661: or eax, 0xd7f8d48; jne 0x00000000000c0d90; ret; 
0x000000000c1d55: or eax, 0xd7f8d48; jne 0x00000000000c25e0; ret; 
0x00000000128074: or eax, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000013eb2d: or eax, 0xda2de; call rbp; 
0x000000000f7ab4: or eax, 0xdcfdf; movzx r12d, r12b; movsxd rax, [rcx+r12*4]; add rax, rcx; notrack jmp rax; 
0x0000000009762a: or eax, 0xe8c1078b; adc ecx, [rcx-0x3c3fcefa]; nop [rax]; mov eax, 0x16; ret; 
0x0000000013ee7b: or eax, 0xe8c78948; add ax, [rax]; mov rdi, r12; call rbp; 
0x0000000013f1b3: or eax, 0xe8df8948; adc al, 0x63; add eax, [rax]; mov rdi, r12; call rbx; 
0x000000000e716c: or eax, 0xe8ff894c; pop rbx; jrcxz 0x00000000000e717c; add [rcx+rcx*4-0x8], cl; call rax; 
0x0000000014406e: or eax, 0xe95d5b00; or ebx, edx; hlt; jmp qword ptr [rsi+0xf]; 
0x0000000014bca2: or eax, 0xebf8894d; ret far; 
0x0000000010d2ba: or eax, 0xec834800; or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x000000000c1d80: or eax, 0xee88349; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x000000001828a9: or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000127d29: or eax, 0xf10e2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cf6: or eax, 0xf1115; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127cc6: or eax, 0xf1145; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001277e6: or eax, 0xf1625; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127776: or eax, 0xf1695; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127746: or eax, 0xf16c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127676: or eax, 0xf1795; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127196: or eax, 0xf1c75; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127156: or eax, 0xf1cb5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127126: or eax, 0xf1ce5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270f6: or eax, 0xf1d15; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001270c6: or eax, 0xf1d45; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127099: or eax, 0xf1d72; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127066: or eax, 0xf1da5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127036: or eax, 0xf1dd5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000127006: or eax, 0xf1e05; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fd6: or eax, 0xf1e35; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126fa6: or eax, 0xf1e65; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f79: or eax, 0xf1e92; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f49: or eax, 0xf1ec2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126f16: or eax, 0xf1ef5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ee6: or eax, 0xf1f25; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126eb9: or eax, 0xf1f52; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e86: or eax, 0xf1f85; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e56: or eax, 0xf1fb5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126e26: or eax, 0xf1fe5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126df6: or eax, 0xf2015; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126dc6: or eax, 0xf2045; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d99: or eax, 0xf2072; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d66: or eax, 0xf20a5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d39: or eax, 0xf20d2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126d06: or eax, 0xf2105; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126cd6: or eax, 0xf2135; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ca6: or eax, 0xf2165; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c76: or eax, 0xf2195; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c46: or eax, 0xf21c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126c16: or eax, 0xf21f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126bd6: or eax, 0xf2235; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126ba6: or eax, 0xf2265; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000126a0c: or eax, 0xf23ff; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000014adb0: or eax, 0xf289e900; hlt; jmp qword ptr [rsi+0xf]; 
0x00000000125f66: or eax, 0xf2ea5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125e96: or eax, 0xf2f75; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c86: or eax, 0xf3185; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125c56: or eax, 0xf31b5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125bc0: or eax, 0xf324b; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b46: or eax, 0xf32c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000125b16: or eax, 0xf32f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001223a9: or eax, 0xf6a62; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122376: or eax, 0xf6a95; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122349: or eax, 0xf6ac2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122316: or eax, 0xf6af5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222e6: or eax, 0xf6b25; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001222b9: or eax, 0xf6b52; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122286: or eax, 0xf6b85; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122259: or eax, 0xf6bb2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122229: or eax, 0xf6be2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221f6: or eax, 0xf6c15; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001221c6: or eax, 0xf6c45; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000122199: or eax, 0xf6c72; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001828b2: or eax, 0xf7f0ff3; ret; 
0x0000000011ee56: or eax, 0xf9fb5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ee26: or eax, 0xf9fe5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edf6: or eax, 0xfa015; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011edc6: or eax, 0xfa045; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed99: or eax, 0xfa072; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed66: or eax, 0xfa0a5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ed36: or eax, 0xfa0d5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec66: or eax, 0xfa1a5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ec36: or eax, 0xfa1d5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ea48: or eax, 0xfa3c3; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bf16: or eax, 0xfcef5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bee6: or eax, 0xfcf25; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011beb6: or eax, 0xfcf55; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bb86: or eax, 0xfd285; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011bac6: or eax, 0xfd345; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011ba06: or eax, 0xfd405; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b9d6: or eax, 0xfd435; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b676: or eax, 0xfd795; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011b536: or eax, 0xfd8d5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011a946: or eax, 0xfe4c5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119816: or eax, 0xff5f5; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000119339: or eax, 0xffad2; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041098: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000007ba67: or eax, 0xfffff5d4; add rsi, rcx; jmp rsi; 
0x00000000075f8e: or eax, 0xfffff85d; add rsi, rcx; jmp rsi; 
0x00000000175427: or eax, 0xfffffc14; mov rdi, r9; call qword ptr [rbx+0x358]; 
0x0000000017532c: or eax, 0xfffffcbf; call qword ptr [rbx+0x358]; 
0x00000000175191: or eax, 0xfffffe0a; call qword ptr [rbx+0x358]; 
0x000000001750bc: or eax, 0xfffffe8f; call qword ptr [rbx+0x358]; 
0x00000000042771: or eax, 0xffffffff; ret; 
0x00000000061f03: or eax, [r8]; neg eax; sbb eax, eax; pop rbp; ret; 
0x0000000007378f: or eax, [rax]; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x0000000004b96a: or eax, [rax]; add [rax-0x80], al; jmp far fword ptr [rbx]; 
0x0000000009cdaa: or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000009677f: or eax, [rax]; add [rax], al; ret; 
0x0000000011ec25: or eax, [rax]; add [rax], al; syscall; 
0x00000000046b62: or eax, [rax]; add [rax], eax; ret; 
0x000000000b3cf8: or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000007b689: or eax, [rax]; add [rbx-0x78f0d008], al; ret; 
0x00000000102279: or eax, [rax]; add [rbx-0x7bf0fe08], al; ret; 
0x0000000007b30b: or eax, [rax]; add [rcx+0x63], cl; ret; 
0x000000001721a4: or eax, [rax]; cmp eax, 0x1; jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x000000001722e4: or eax, [rax]; cmp eax, 0x1; jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x00000000168a9a: or eax, [rax]; cmp rax, rdx; je short 0x0000000000168aa8; pop rbx; ret; 
0x0000000015f255: or eax, [rax]; jmp qword ptr [rdx+rax*8]; 
0x00000000168969: or eax, [rax]; lea rdx, [rip+0xbf12e]; mov fs:[rax], rdx; ret; 
0x00000000168970: or eax, [rax]; mov fs:[rax], rdx; ret; 
0x00000000061f04: or eax, [rax]; neg eax; sbb eax, eax; pop rbp; ret; 
0x00000000168aad: or eax, [rax]; pop rbx; ret; 
0x000000000298ab: or eax, [rbx+0x10247c]; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000090cbf: or eax, [rbx+0x58901e0]; ret far; 
0x00000000116228: or eax, [rcx]; add [rax], al; syscall; 
0x00000000115c0d: or eax, [rdx]; add bl, dh; nop edx, edi; mov eax, 0x5c; syscall; 
0x000000000430fd: or eax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000182e66: or eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a4aa3: or eax, ebx; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x0000000019a294: or eax, ecx; cmovne eax, edx; ret; 
0x000000000515ee: or eax, ecx; mov rax, r8; ret; 
0x000000000419bc: or eax, ecx; movd xmm0, eax; mulss xmm0, [rip+0x1a13fe]; ret; 
0x00000000041084: or eax, ecx; ret; 
0x000000000417bf: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x000000000413bb: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000001b18e5: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae895: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001afde3: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000001367ee: or eax, edi; bswap eax; ret; 
0x00000000041230: or eax, edi; je 0x0000000000041178; ret; 
0x00000000199f51: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000ba61e: or eax, edx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x000000000410c7: or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000059bf8: or eax, edx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000416cb: or eax, edx; movq xmm0, rax; ret; 
0x000000000b56d9: or eax, edx; ret; 
0x00000000041b16: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000014e799: or eax, edx; sete al; movzx eax, al; ret; 
0x000000001b4ba2: or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b2340: or eax, edx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000001367d4: or eax, esi; bswap eax; ret; 
0x00000000119dc2: or eax, esi; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000094625: or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x000000000566c0: or eax, esi; movq xmm0, rax; ret; 
0x00000000126404: or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000a9da1: or ebp, [rbx+0xf]; add [rax-0x73], cl; add eax, 0xf6b94; cmove rax, rdx; ret; 
0x000000000a504c: or ebx, [rbx+0x5d]; pop r12; ret; 
0x000000000c1971: or ebx, [rcx]; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000004b471: or ebx, [rdx-0x7cb80000]; ret; 
0x000000001a4a83: or ebx, eax; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x0000000014a636: or ebx, eax; nop [rax+rax]; shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000077a2e: or ebx, edi; call far fword ptr [rbx+0x5d]; 
0x00000000144073: or ebx, edx; hlt; jmp qword ptr [rsi+0xf]; 
0x00000000182a73: or ebx, esi; movq [rdi], mm1; ret; 
0x00000000039bf3: or ebx, esi; sbb eax, 0x10894800; ret; 
0x00000000122474: or ecx, [rax+0x39]; xlat [rbx]; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x00000000156f44: or ecx, [rax-0x39]; add eax, 0xd08d8; add [rax], al; add [rax], al; ret; 
0x000000000c061f: or ecx, [rax-0x73]; jg short 0x00000000000c062f; jne 0x00000000000c0d90; ret; 
0x000000000c1d13: or ecx, [rax-0x73]; jg short 0x00000000000c1d23; jne 0x00000000000c25e0; ret; 
0x000000000c4c14: or ecx, [rax-0x77]; shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x000000000e8ea6: or ecx, [rax-0x7d]; ret; 
0x0000000011daa7: or ecx, [rax-0x7d]; ror byte ptr [rax], 0x48; mov [rip+0x1038bd], eax; mov rax, r8; ret; 
0x0000000008fb3d: or ecx, [rax]; pop rbx; ret; 
0x000000000d7b44: or ecx, [rbx+0x463b2847]; sub [rbp+0x63], dh; ret; 
0x000000000d7b94: or ecx, [rbx+0x463b3847]; cmp [rbp+0x13], dh; ret; 
0x00000000099c94: or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x0000000009032a: or ecx, [rcx+rcx*4-0x9]; call qword ptr [r12+0x360]; 
0x000000001b7d4c: or ecx, [rcx-0x77]; ret far; 
0x000000000ddeb8: or ecx, [rcx-0x7d]; ret; 
0x000000001282d4: or ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000071e6e: or ecx, [rdi]; test [rbp-0xa000000], edi; ret; 
0x000000000c0623: or ecx, [rdi]; test [rsi+0x7], esp; add [rax], al; ret; 
0x0000000004192f: or ecx, eax; movd xmm0, ecx; ret; 
0x00000000199f53: or ecx, esi; sub eax, ecx; ret; 
0x000000001136d3: or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall; 
0x00000000113802: or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall; 
0x00000000099dec: or edi, [rax+0x16]; ret; 
0x000000001426a7: or edi, [rdx+0x29]; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000000ed04f: or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecefc: or edi, [rdx+0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000017ae22: or edi, [rsi]; jmp r9; 
0x000000000bfb30: or edi, [rsi]; jmp rcx; 
0x0000000010593a: or edi, edi; inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000001a6856: or edi, esi; fadd st, st(3); nop [rax+rax]; ret; 
0x00000000091835: or edx, 0x40; lock cmpxchg [r8+0x308], edx; jne short 0x0000000000091828; pop rbx; ret; 
0x000000001136d0: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall; 
0x000000001137ff: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall; 
0x000000000c277d: or edx, [rcx]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000004158e: or edx, eax; movq xmm1, rdx; movapd xmm0, xmm1; ret; 
0x000000000ed04d: or edx, eax; or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecefa: or edx, eax; or edi, [rdx+0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000bab5f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000041b60: or edx, ecx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000088dc3: or edx, edi; jmp qword ptr [rsi+0x2e]; 
0x00000000099534: or edx, edi; jmp qword ptr [rsi+0xf]; 
0x000000000d7c84: or esi, [rcx]; sar byte ptr [rcx], 0xfe; jne short 0x00000000000d7c90; ret; 
0x000000001348a1: or esi, [rdx-0x72b7fff9]; add eax, 0x7b264; cmove rax, rdx; ret; 
0x000000000f419a: or esi, eax; or [rcx], al; mov [rax], dl; mov eax, 0x1; ret; 
0x00000000056679: or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000094640: or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x00000000182993: or esi, ebx; movq [rdi], mm1; ret; 
0x000000000566e4: or esi, edx; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000005667b: or esi, edx; movd xmm0, esi; ret; 
0x000000000566b9: or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x0000000007f818: or esp, [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008a751: or esp, [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000015503d: or esp, [rax]; mov fs:[rdx], eax; pop rbx; ret; 
0x00000000182ae2: or r11b, r14b; movq [rdi], mm1; ret; 
0x000000001a4a72: or r11b, r8b; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x00000000182a72: or r11d, r14d; movq [rdi], mm1; ret; 
0x000000001a4a82: or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x00000000192f38: or r14b, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x00000000182a02: or r14b, r11b; movq [rdi], mm1; ret; 
0x00000000182992: or r14d, r11d; movq [rdi], mm1; ret; 
0x0000000016917b: or r15b, r8b; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000001a4a92: or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000000515ed: or r8d, ecx; mov rax, r8; ret; 
0x0000000004122f: or r8d, edi; je 0x0000000000041178; ret; 
0x000000001a4aa2: or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000000854ef: or r9b, bpl; sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000092335: or r9b, r8b; clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x0000000018d627: or rax, 0x1e1850f; add [rax], al; ret; 
0x00000000191a48: or rax, 0x210850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000d3c3f: or rax, 0xffffffff80000000; mov [rdx+0x4], r8d; mov [rdx], eax; xor eax, eax; ret; 
0x00000000042770: or rax, 0xffffffffffffffff; ret; 
0x00000000194047: or rax, [r8]; add [rbp-0x77], cl; ret far; 
0x000000000430fc: or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000019a293: or rax, rcx; cmovne eax, edx; ret; 
0x000000000413ba: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000001b18e4: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae894: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001afde2: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000000ba61d: or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000059bf7: or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000416ca: or rax, rdx; movq xmm0, rax; ret; 
0x00000000125684: or rax, rdx; ret; 
0x00000000041b15: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000014e798: or rax, rdx; sete al; movzx eax, al; ret; 
0x000000001b233f: or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000566bf: or rax, rsi; movq xmm0, rax; ret; 
0x0000000004158d: or rdx, rax; movq xmm1, rdx; movapd xmm0, xmm1; ret; 
0x000000000bab5e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000041b5f: or rdx, rcx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000009104d: or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000415de: orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415b0: orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041434: orpd xmm0, xmm1; ret; 
0x00000000041970: orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x0000000004194b: orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000415df: orps xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415b1: orps xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041435: orps xmm0, xmm1; ret; 
0x00000000041822: orps xmm0, xmm3; ret; 
0x00000000199a26: out 0x0, al; add [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000e57f4: out 0x0, al; add [rax], al; syscall; 
0x000000000df0dd: out 0x0, al; and [rax-0x80], al; call qword ptr [rax]; 
0x0000000008bc56: out 0x1, al; add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x00000000135b71: out 0x10, al; lea rax, [rip+0x71586]; lea rdx, [rip+0x79eff]; cmovne rax, rdx; ret; 
0x000000000c5bd1: out 0x10, al; lea rax, [rip+0xe1536]; lea rdx, [rip+0xe9eaf]; cmovne rax, rdx; ret; 
0x000000001367e9: out 0x10, eax; movzx eax, si; or eax, edi; bswap eax; ret; 
0x000000000ea6a4: out 0x12, eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000039e3c: out 0x19, al; add [rax-0x77], cl; ret; 
0x0000000003d3d0: out 0x19, al; add cl, ch; ret far; 
0x000000001536e5: out 0x1d, eax; add al, [rax]; xor edi, edi; call qword ptr [rsp+0x20]; 
0x000000000c5af4: out 0x2, al; lea rax, [rip+0x10fe3]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x00000000134859: out 0x2, al; lea rax, [rip+0x7293e]; lea rdx, [rip+0x728c7]; cmove rax, rdx; ret; 
0x000000000a9534: out 0x2, al; lea rax, [rip+0xbcd3]; lea rdx, [rip+0xfb59c]; cmovne rax, rdx; ret; 
0x000000000a9bc9: out 0x2, al; lea rax, [rip+0xbe2e]; lea rdx, [rip+0xdbd87]; cmovne rax, rdx; ret; 
0x000000000a9b29: out 0x2, al; lea rax, [rip+0xbeae]; lea rdx, [rip+0xdbe07]; cmovne rax, rdx; ret; 
0x000000000a9c19: out 0x2, al; lea rax, [rip+0xe02e]; lea rdx, [rip+0xdde97]; cmovne rax, rdx; ret; 
0x000000000a9b79: out 0x2, al; lea rax, [rip+0xe0ae]; lea rdx, [rip+0xddf17]; cmovne rax, rdx; ret; 
0x000000000a97e9: out 0x2, al; lea rax, [rip+0xfd9ce]; lea rdx, [rip+0xfd947]; cmove rax, rdx; ret; 
0x000000000566bd: out 0x20, al; or rax, rsi; movq xmm0, rax; ret; 
0x000000001baaa8: out 0x20, eax; je short 0x00000000001baabc; movss xmm0, [rip+0x2830c]; divss xmm0, [rip+0x29368]; ret; 
0x000000000d9c3b: out 0x31, al; jmp qword ptr [rsi+0x48]; 
0x00000000143114: out 0x4, al; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x0000000014a642: out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000135b59: out 0x4, al; lea rax, [rip-0x70bc2]; lea rdx, [rip+0x6b4d7]; cmove rax, rdx; ret; 
0x000000000c5bb9: out 0x4, al; lea rax, [rip-0xc12]; lea rdx, [rip+0xdb487]; cmove rax, rdx; ret; 
0x000000000964d0: out 0x4, eax; cmp [rdx+rdi], rcx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x00000000093b24: out 0x40, eax; xor dh, 0x81; mov eax, 0xca; syscall; 
0x00000000080f97: out 0x41, al; call qword ptr [rsi+0x38]; 
0x0000000007b5b9: out 0x41, eax; call qword ptr [rsi+0x38]; 
0x0000000016b2a8: out 0x41, eax; call rbp; 
0x00000000128a3a: out 0x44, eax; mov eax, edx; syscall; 
0x00000000040768: out 0x44, eax; mov edx, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x00000000175601: out 0x45, eax; xor ebp, ebp; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000017579b: out 0x45, eax; xor ecx, ecx; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000132643: out 0x48, al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000015fc05: out 0x48, al; mov [rsp], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000162f14: out 0x48, al; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000008a468: out 0x48, al; mov edi, ebp; call qword ptr [r13+0x38]; 
0x0000000008ba30: out 0x48, al; mov edi, ebp; call qword ptr [r13+0x90]; 
0x0000000008ac5b: out 0x48, al; mov edi, ebp; call qword ptr [r15+0x80]; 
0x0000000008a7ba: out 0x48, al; mov edi, ebp; call qword ptr [r15+0x90]; 
0x00000000072855: out 0x48, al; mov edi, ebp; call qword ptr [rax+0x38]; 
0x0000000015fc98: out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x0000000007ebe9: out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x00000000113d8c: out 0x48, al; mov edi, ebp; mov eax, 0x135; syscall; 
0x0000000008ca59: out 0x48, al; mov edi, ebx; call qword ptr [r14+0x78]; 
0x0000000016cee3: out 0x48, al; mov edi, ebx; call rcx; 
0x00000000153826: out 0x48, al; mov edi, ebx; mov rcx, r13; call r10; 
0x000000000e9e01: out 0x48, al; mov edx, [rsp+0x18]; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000000e9a91: out 0x48, al; mov edx, [rsp+0x18]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x0000000019d51d: out 0x48, eax; add eax, edi; vzeroupper; ret; 
0x000000001289a6: out 0x48, eax; mov [rbp-0x830], eax; mov eax, r10d; syscall; 
0x0000000016960a: out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x0000000005d8ce: out 0x48, eax; sub esi, eax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000017ca46: out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000043845: out 0x4c, al; mov edi, ebp; call rbx; 
0x00000000120e0a: out 0x4c, al; mov edi, edi; call r14; 
0x00000000155105: out 0x4c, al; mov edi, esi; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x00000000083a08: out 0x4c, al; mov edi, esi; call qword ptr [rax+0x18]; 
0x00000000074991: out 0x4c, al; mov edi, esi; call qword ptr [rbx+0x38]; 
0x000000000739d6: out 0x4c, al; mov edi, esi; call qword ptr [rcx+0x38]; 
0x00000000120e9f: out 0x4c, al; mov edi, esi; call r13; 
0x0000000005bff6: out 0x4c, eax; mov [rbp-0xe8], eax; call rax; 
0x0000000017c876: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c972: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8be: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000043935: out 0x4c, eax; mov edx, esi; call rbp; 
0x00000000176136: out 0x5, al; cld; jmp qword ptr [rsi+0xf]; 
0x00000000083971: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000e5d98: out 0x5b, eax; pop rbp; pop r12; ret; 
0x00000000151e86: out 0x64, al; in eax, dx; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000142e11: out 0x66, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000150d39: out 0x66, eax; nop [rax+rax]; ret; 
0x000000000b139d: out 0x66, eax; nop; mov [rax], sil; add rax, rcx; ret; 
0x00000000154d3e: out 0x7, al; movsxd rax, [rdi+rsi*4]; shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x0000000009a1c6: out 0x7, al; xor sil, 0x81; syscall; 
0x000000000397bd: out 0x74, eax; or ch, al; ret far; 
0x00000000171ee5: out 0x7d, eax; cli; dec dword ptr [rax-0x77]; ret; 
0x00000000136805: out 0x8, eax; movzx eax, sil; or eax, edi; bswap eax; ret; 
0x0000000003a187: out 0x80, eax; sete al; ret; 
0x00000000073412: out 0x83, al; ret; 
0x000000000ffd85: out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x00000000029e60: out 0x89, al; out dx, eax; add rcx, [r14]; call rcx; 
0x00000000029eb6: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x00000000029e16: out 0x89, al; out dx, eax; call r15; 
0x000000000a0601: out 0x89, al; out dx, eax; mov eax, 0xde; syscall; 
0x000000000e56a2: out 0x89, al; out dx, eax; mov eax, 0xe5; syscall; 
0x000000000d2aad: out 0x89, al; ret; 
0x000000001163e9: out 0x8b, al; adc al, 0x2; call qword ptr [rbx+0x40]; 
0x000000001421e9: out 0x9, eax; add al, ch; pop rdi; jl short 0x00000000001421df; jmp qword ptr [rsi+0x66]; 
0x0000000009bdc8: out 0xb8, eax; sub [rcx], eax; add [rax], al; syscall; 
0x00000000053998: out 0xbf, al; add [rax], esi; add [rax], al; mov eax, 0x9e; syscall; 
0x0000000009edab: out 0xbf, al; add al, [rax]; add [rax], al; mov eax, 0xe; syscall; 
0x000000001b5257: out 0xc3, eax; nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000016b3ad: out 0xc7, eax; add al, 0x24; add al, [rax]; add [rax], al; call r8; 
0x00000000128739: out 0xc7, eax; test eax, esi; idiv edi; jmp qword ptr [rdi+0x6d]; 
0x000000000ab059: out 0xe, al; add [rax-0x73], cl; add eax, 0x9bcd; cmove rax, rdx; ret; 
0x0000000011c926: out 0xe8, al; in al, 0xba; lock dec dword ptr [rax+0x1]; ret; 
0x0000000011c9a6: out 0xe8, al; mov edx, 0x148fff0; ret; 
0x0000000011c966: out 0xe8, al; movsb [rdi], [rsi]; mov edx, 0x148fff0; ret; 
0x000000001680b4: out 0xe8, eax; add eax, 0x8948ffec; ret; 
0x00000000080c1b: out 0xe8, eax; call far fword ptr [rsi]; 
0x0000000003557b: out 0xe8, eax; call qword ptr [r11]; 
0x000000000dd014: out 0xe8, eax; jbe short 0x00000000000dcfcc; hlt; dec dword ptr [rax-0x77]; ret; 
0x0000000015c0eb: out 0xe8, eax; jmp far fword ptr [rbx]; 
0x000000000dc004: out 0xe8, eax; loop 0x00000000000dc003; dec dword ptr [rax+0x39]; ret; 
0x000000000ab8fa: out 0xe8, eax; nop; ret far; 
0x00000000171ee3: out 0xe8, eax; out 0x7d, eax; cli; dec dword ptr [rax-0x77]; ret; 
0x00000000163b0c: out 0xe8, eax; out dx, al; ret far; 
0x0000000002c29c: out 0xe8, eax; out dx, al; ret; 
0x000000001213fb: out 0xe8, eax; out dx, eax; bnd jmp qword ptr [rsi+0x66]; 
0x0000000002b784: out 0xe8, eax; popfq; adc al, 0x0; mov rdi, rbx; call r12; 
0x000000001715a8: out 0xe8, eax; push rdx; cmp edi, edx; dec dword ptr [rbx-0x17b7b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x00000000121dbf: out 0xe8, eax; ret far; 
0x00000000037487: out 0xe8, eax; ret; 
0x00000000035fd8: out 0xe8, eax; xchg edx, eax; and edi, edi; jmp qword ptr [rsi-0x70]; 
0x00000000046ba1: out 0xec, al; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x000000000a966a: out 0xf, al; add [rax-0x73], cl; add eax, 0xfe74c; cmove rax, rdx; ret; 
0x0000000011d1bf: out 0xf0, eax; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000f9baf: out 0xf2, eax; call far fword ptr [rbx+0x4c]; 
0x000000000f9bbf: out 0xf2, eax; jmp qword ptr [rsi+0xf]; 
0x00000000182279: out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x000000001822f9: out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x00000000091089: out 0xf7, al; fadd st, st(3); nop [rax]; mov eax, 0x16; ret; 
0x0000000014a666: out 0xf7, al; out dx, al; jmp qword ptr [rsi+0xf]; 
0x000000001a691a: out 0xf8, eax; jmp qword ptr [rsi+0x66]; 
0x0000000015ef8d: out 0xfc, al; call qword ptr [rax+0x30]; 
0x00000000168057: out 0xfc, al; jmp qword ptr [rsi+0xf]; 
0x00000000158071: out 0xfd, al; jmp qword ptr [rsi+0x66]; 
0x0000000009463e: out 0xfe, al; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x00000000147fe6: out 0xfe, eax; jmp qword ptr [rsi+0xf]; 
0x00000000147f37: out 0xfe, eax; jmp qword ptr [rsi+0xf]; 
0x0000000007cb2c: out 0xff, al; call qword ptr [rax-0x382708b8]; 
0x0000000007732d: out 0xff, al; dec dword ptr [rdi]; mov dh, 0x76; add [rax-0x7d], ecx; ret; 
0x0000000005c894: out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x000000000690bb: out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x000000001bba50: out 0xff, al; mov qword ptr [rip+0x656eb], 0x0; add rsp, 0x8; ret; 
0x000000001bbc25: out 0xff, al; mov qword ptr [rip+0x66956], 0x0; pop rbx; ret; 
0x000000001bbd62: out 0xff, al; mov qword ptr [rip+0x6bab9], 0x0; add rsp, 0x8; ret; 
0x000000001bbad7: out 0xff, al; nop [rax]; add rsp, 0x8; ret; 
0x000000001bbdbf: out 0xff, al; nop [rax]; ret; 
0x000000001bb1d2: out 0xff, al; nop [rax]; ret; 
0x000000001bb969: out 0xff, al; pop rbx; mov qword ptr [rip+0x64d79], 0x0; ret; 
0x000000001bb7cd: out 0xff, al; ret; 
0x000000001bb766: out 0xff, al; test rbx, rbx; jne short 0x00000000001bb755; pop rbx; ret; 
0x00000000068326: out 0xff, eax; dec dword ptr [rax-0x7d]; ret; 
0x00000000132340: out 0xff, eax; jmp qword ptr [rsi+0x66]; 
0x0000000006466f: out 0xff, eax; jmp qword ptr [rsi+0xf]; 
0x0000000007469b: out 0xff, eax; jmp qword ptr [rsi-0x70]; 
0x0000000007ab04: out 0xff, eax; push rbp; cmp [rax+0x39], cl; ret; 
0x0000000015562e: out dx, al; adc dh, bh; jmp qword ptr [rsi+0x66]; 
0x00000000142b52: out dx, al; add [rax-0x78], eax; ja short 0x0000000000142b59; ret; 
0x000000000d6e76: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e96: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb6: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed6: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x000000000dcaa0: out dx, al; add cl, [rcx-0x77]; vpslldq xmm2, xmm5, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000013616e: out dx, al; add cl, bh; call qword ptr [rax-0x18]; 
0x00000000142b4a: out dx, al; add edi, [rax+0x2]; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x0000000008a304: out dx, al; call qword ptr [r14+0x38]; 
0x00000000160283: out dx, al; call qword ptr [r14+0x40]; 
0x0000000015ff32: out dx, al; call qword ptr [r15+0x40]; 
0x0000000015d64b: out dx, al; call qword ptr [rax+0x10]; 
0x0000000016960d: out dx, al; call qword ptr [rax+0x18]; 
0x000000000e8142: out dx, al; call qword ptr [rsp+0x58]; 
0x00000000099fba: out dx, al; clc; clc; jmp qword ptr [rsi-0x70]; 
0x0000000013f260: out dx, al; dec dword ptr [rax-0x77]; add eax, 0xdb777; add rsp, 0x8; ret; 
0x0000000013f121: out dx, al; dec dword ptr [rax-0x77]; ret; 
0x000000001408eb: out dx, al; dec dword ptr [rax-0x7d]; ret; 
0x000000001474c0: out dx, al; inc dword ptr [rbp-0x507bf040]; add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x000000000da3de: out dx, al; jle short 0x00000000000da3d9; call far fword ptr [rdx+0x59]; 
0x00000000156f6e: out dx, al; jmp qword ptr [rsi+0x2e]; 
0x00000000156f6f: out dx, al; jmp qword ptr [rsi+0x2e]; 
0x00000000150333: out dx, al; jmp qword ptr [rsi+0x66]; 
0x0000000014a668: out dx, al; jmp qword ptr [rsi+0xf]; 
0x0000000013ba5c: out dx, al; jmp qword ptr [rsi-0x70]; 
0x000000000ffc3e: out dx, al; jno short 0x00000000000ffc40; jmp far fword ptr [rax+0x4d7a7401]; 
0x0000000005b82f: out dx, al; jo short 0x000000000005b81b; out dx, eax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x0000000018267f: out dx, al; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000012643d: out dx, al; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x000000001757a1: out dx, al; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000009b45e: out dx, al; loop 0x000000000009b45f; jmp qword ptr [rsi+0xf]; 
0x0000000017ca4a: out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000012e764: out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000432fc: out dx, al; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009f1f3: out dx, al; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x000000000d956c: out dx, al; mov [rsp+0xd0], rax; call r12; 
0x000000000e57f2: out dx, al; mov eax, 0xe6; syscall; 
0x00000000096a43: out dx, al; mov eax, 0xea; syscall; 
0x000000000e58b2: out dx, al; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x0000000012f754: out dx, al; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000096888: out dx, al; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000001146de: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000096902: out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000011aece: out dx, al; mov edi, ebp; mov eax, 0x147; syscall; 
0x0000000011b02e: out dx, al; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000001289a3: out dx, al; mov edi, r12d; mov [rbp-0x830], rax; mov eax, r10d; syscall; 
0x0000000011b742: out dx, al; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000009bdc5: out dx, al; mov edi, r12d; mov eax, 0x129; syscall; 
0x000000000a0100: out dx, al; mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000136e5c: out dx, al; mov r8, [rsp+0x20]; mov edx, [rsp+0x48]; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x000000000e5943: out dx, al; mov r8d, eax; mov edi, 0x1; mov eax, 0xe6; syscall; 
0x00000000114754: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000001223f9: out dx, al; mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000122479: out dx, al; mov rax, [rax+0x8]; ret; 
0x0000000015d659: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000015d50b: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001630f3: out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000007b5b6: out dx, al; mov rdi, r12; call qword ptr [r14+0x38]; 
0x0000000007bdb0: out dx, al; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000016833f: out dx, al; mov rdi, r12; call qword ptr [rsp+0x30]; 
0x00000000044409: out dx, al; mov rdi, r12; call rax; 
0x00000000137ca3: out dx, al; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x0000000004548f: out dx, al; mov rdi, r13; call rax; 
0x00000000073c4e: out dx, al; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000072dc3: out dx, al; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000011388b: out dx, al; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000807b7: out dx, al; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000085b8b: out dx, al; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008081c: out dx, al; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000086f7b: out dx, al; mov rdi, r15; call rbx; 
0x0000000008234b: out dx, al; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000008b849: out dx, al; mov rdi, rbp; call qword ptr [rax+0x78]; 
0x0000000015d4f6: out dx, al; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000000d911f: out dx, al; mov rdi, rbp; call rbx; 
0x0000000008b5ac: out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000007fb15: out dx, al; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000814b2: out dx, al; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x000000000815ce: out dx, al; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000082288: out dx, al; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000081237: out dx, al; mov rdi, rbx; call qword ptr [r14+0x48]; 
0x000000000815f8: out dx, al; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000008b40e: out dx, al; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000001609a5: out dx, al; mov rdi, rbx; call qword ptr [rsp+0x20]; 
0x00000000182689: out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x00000000163b0e: out dx, al; ret far; 
0x0000000002c29e: out dx, al; ret; 
0x000000001760ce: out dx, al; xchg edi, eax; bnd jmp qword ptr [rsi+0xf]; 
0x000000000c5989: out dx, al; xor eax, eax; ret; 
0x000000000d7e6d: out dx, eax; adc [rax+0x1], cl; clc; ret; 
0x0000000005c5ca: out dx, eax; add [rax+0x39], ecx; ret; 
0x00000000072d6d: out dx, eax; add [rax], al; add [rbx-0x89f63], cl; dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000000463cf: out dx, eax; add [rcx-0x42], edi; xor eax, eax; ret; 
0x000000001416aa: out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x000000001b7af3: out dx, eax; add rax, rcx; notrack jmp rax; 
0x0000000019d71e: out dx, eax; add rax, rdi; vzeroupper; ret; 
0x00000000029e62: out dx, eax; add rcx, [r14]; call rcx; 
0x00000000084472: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000844ce: out dx, eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000015ef8b: out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000001213fd: out dx, eax; bnd jmp qword ptr [rsi+0x66]; 
0x0000000016d5f6: out dx, eax; call far fword ptr [rbx+0x48]; 
0x0000000016d8a1: out dx, eax; call far fword ptr [rbx+0x48]; 
0x000000000751c7: out dx, eax; call qword ptr [r12+0x38]; 
0x00000000088353: out dx, eax; call qword ptr [r13+0x10]; 
0x00000000075d24: out dx, eax; call qword ptr [r13+0x38]; 
0x0000000008ba33: out dx, eax; call qword ptr [r13+0x90]; 
0x00000000076592: out dx, eax; call qword ptr [r14+0x38]; 
0x0000000008ac5e: out dx, eax; call qword ptr [r15+0x80]; 
0x0000000008a7bd: out dx, eax; call qword ptr [r15+0x90]; 
0x0000000015f835: out dx, eax; call qword ptr [rax+0x10]; 
0x0000000008b751: out dx, eax; call qword ptr [rax+0x18]; 
0x0000000015d2e0: out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015e2ed: out dx, eax; call qword ptr [rax+0x28]; 
0x0000000015eefc: out dx, eax; call qword ptr [rax+0x30]; 
0x00000000072858: out dx, eax; call qword ptr [rax+0x38]; 
0x0000000016c5f1: out dx, eax; call qword ptr [rax+0x40]; 
0x000000001644e9: out dx, eax; call qword ptr [rax+0x48]; 
0x0000000008b84c: out dx, eax; call qword ptr [rax+0x78]; 
0x0000000008ab86: out dx, eax; call qword ptr [rax+0x80]; 
0x0000000015d4f9: out dx, eax; call qword ptr [rax+0x8]; 
0x0000000008aa18: out dx, eax; call qword ptr [rax+0x90]; 
0x00000000128f9d: out dx, eax; call qword ptr [rax-0x3ec274b8]; 
0x00000000128f9c: out dx, eax; call qword ptr [rax-0x3ec274b8]; 
0x0000000015fc9b: out dx, eax; call qword ptr [rax]; 
0x0000000007ed5d: out dx, eax; call qword ptr [rbx+0x10]; 
0x0000000008da28: out dx, eax; call qword ptr [rbx+0x18]; 
0x00000000076046: out dx, eax; call qword ptr [rbx+0x38]; 
0x0000000007f09e: out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000008c0d3: out dx, eax; call qword ptr [rbx+0x88]; 
0x0000000007ebec: out dx, eax; call qword ptr [rbx+0x90]; 
0x00000000029eb8: out dx, eax; call qword ptr [rcx]; 
0x0000000013e596: out dx, eax; call qword ptr [rsp+0x10]; 
0x00000000137ca6: out dx, eax; call qword ptr [rsp+0x50]; 
0x000000001377b4: out dx, eax; call qword ptr [rsp+0x70]; 
0x0000000009edca: out dx, eax; call r12; 
0x00000000029e18: out dx, eax; call r15; 
0x0000000004543e: out dx, eax; call rax; 
0x00000000043848: out dx, eax; call rbx; 
0x0000000015d529: out dx, eax; call rcx; 
0x000000001177b3: out dx, eax; cld; dec dword ptr [rax-0x77]; ret; 
0x000000001677b3: out dx, eax; cld; jmp qword ptr [rsi+0x2e]; 
0x0000000012a654: out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x00000000199686: out dx, eax; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x000000001591c2: out dx, eax; hlt; jmp qword ptr [rsi+0xf]; 
0x0000000005b832: out dx, eax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x0000000012ea9a: out dx, eax; inc dword ptr [rax-0x76b7ffc8]; ret; 
0x0000000009e618: out dx, eax; je short 0x000000000009e624; xor eax, eax; ret; 
0x00000000199866: out dx, eax; jg short 0x00000000001998b1; add eax, edi; vzeroupper; ret; 
0x0000000019da96: out dx, eax; jg short 0x000000000019dae1; add eax, edi; vzeroupper; ret; 
0x0000000019dc96: out dx, eax; jg short 0x000000000019dce1; add eax, edi; vzeroupper; ret; 
0x000000001aed73: out dx, eax; jmp qword ptr [edx-0x5d]; 
0x0000000012b5e1: out dx, eax; jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000012b3a9: out dx, eax; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001433d2: out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000012dfb3: out dx, eax; jmp qword ptr [rsi+0x48]; 
0x00000000142051: out dx, eax; jmp qword ptr [rsi+0x66]; 
0x00000000129880: out dx, eax; jmp qword ptr [rsi+0xf]; 
0x00000000134afc: out dx, eax; jmp qword ptr [rsi-0x70]; 
0x0000000012ca80: out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001826ff: out dx, eax; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000017dbb3: out dx, eax; lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf4: out dx, eax; lea r11, [rip+0x65613]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d3: out dx, eax; lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b114: out dx, eax; lea r11, [rip+0x67e33]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000015d53a: out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000167cd2: out dx, eax; lea r8, [rip-0x906a]; lea rdx, [rip+0x36ff]; call qword ptr [rax]; 
0x0000000015dedd: out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x00000000086d0d: out dx, eax; lea r9, [rsp+0x28]; call rbp; 
0x000000000c6566: out dx, eax; lea r9, [rsp+0x30]; call rbx; 
0x000000001b1689: out dx, eax; lea rax, [rdi+rax]; ret; 
0x0000000016446c: out dx, eax; mov [r12+0x70], edx; call qword ptr [rax+0x30]; 
0x0000000015e1da: out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000017c87a: out dx, eax; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c976: out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8c2: out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000000b1040: out dx, eax; mov [rdx], rcx; ret; 
0x000000000a01ce: out dx, eax; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000000f4135: out dx, eax; mov byte ptr [rax+0x8], 0x16; mov eax, 0x1; ret; 
0x0000000015d5d4: out dx, eax; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d555: out dx, eax; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000164d62: out dx, eax; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x000000001693f8: out dx, eax; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000113d06: out dx, eax; mov eax, 0x135; syscall; 
0x0000000011aed0: out dx, eax; mov eax, 0x147; syscall; 
0x0000000011b030: out dx, eax; mov eax, 0x148; syscall; 
0x00000000098393: out dx, eax; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000009904f: out dx, eax; mov eax, 0xca; syscall; 
0x00000000093f7e: out dx, eax; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000a0603: out dx, eax; mov eax, 0xde; syscall; 
0x000000000e56a4: out dx, eax; mov eax, 0xe5; syscall; 
0x000000000a0103: out dx, eax; mov eax, 0xf4; syscall; 
0x000000001092f0: out dx, eax; mov eax, [rdx+0x8]; ret; 
0x00000000097be6: out dx, eax; mov eax, r13d; syscall; 
0x00000000096d67: out dx, eax; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x00000000096ea6: out dx, eax; mov eax, r15d; syscall; 
0x00000000099ef2: out dx, eax; mov eax, r8d; syscall; 
0x0000000009e668: out dx, eax; mov edx, 0x0; cmovne rax, rdx; ret; 
0x0000000011fd08: out dx, eax; mov edx, r13d; mov esi, 0x1; call r12; 
0x000000000970f7: out dx, eax; mov esi, 0x7; mov eax, 0xca; syscall; 
0x00000000141280: out dx, eax; mov fs:[rbx], r13d; mov eax, 0x3; mov edi, [rbp-0x60]; syscall; 
0x0000000015e26e: out dx, eax; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x0000000014358a: out dx, eax; mov qword ptr [rsp], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000015e29c: out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000004460f: out dx, eax; mov rax, [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000120b20: out dx, eax; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x000000000b11a0: out dx, eax; mov rax, r8; ret; 
0x0000000011fd98: out dx, eax; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000c66b1: out dx, eax; mov rsi, [rsp+0x18]; call rbx; 
0x0000000013196a: out dx, eax; mov rsi, r14; mov rdx, rax; call qword ptr [r15+0x28]; 
0x00000000182709: out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x000000001b78e1: out dx, eax; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x0000000008fe96: out dx, eax; nop [rax+rax]; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x0000000008608b: out dx, eax; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x00000000083975: out dx, eax; pop rbp; pop r12; jmp rax; 
0x0000000002a138: out dx, eax; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000083e7c: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x0000000015ec0e: out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000199876: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000001759d1: out dx, eax; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x0000000009e748: out dx, eax; ret; 
0x0000000008f2e7: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000016d260: out dx, eax; ror byte ptr [rdi], 0x29; and al, 0x60; movups [rsp+0x18], xmm0; call r8; 
0x00000000101628: out dx, eax; ror byte ptr [rdi], 0x84; ret far; 
0x0000000013c4e2: out dx, eax; ror byte ptr [rdi], 0xb7; ret far; 
0x00000000143665: out dx, eax; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000008b281: out dx, eax; sub r12, r14; call qword ptr [rax+0x40]; 
0x00000000126408: out dx, eax; xor eax, eax; ret; 
0x00000000120aff: out dx, eax; xor edx, edx; mov esi, 0x1; call r12; 
0x0000000011fcf6: out dx, eax; xor esi, esi; call r12; 
0x000000000c6864: out dx, eax; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x00000000175ad7: out dx, eax; xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000009a53d: out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000014efcb: outsb dx, [rsi]; adc [rax-0x7d], cl; ret; 
0x00000000098702: outsb dx, [rsi]; add [rax], al; add cl, ch; ret far; 
0x0000000013e5e4: outsb dx, [rsi]; add eax, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax; 
0x0000000011d9af: outsb dx, [rsi]; enter 0x4866, 0xf; outsb dx, [rsi]; ret; 
0x0000000009274c: outsb dx, [rsi]; enter 0xc031, 0x66; punpckldq mm0, mm1; movq [rdi+0x4], xmm0; ret; 
0x0000000012eeee: outsb dx, [rsi]; enter 0xf66, 0x62; ret far; 
0x0000000008fc27: outsb dx, [rsi]; fbld st, tbyte ptr [rsi+0xf]; insb [rdi], dx; ret far; 
0x0000000012d919: outsb dx, [rsi]; fisub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret; 
0x000000001605ea: outsb dx, [rsi]; fmul st, dword ptr [rcx-0x77]; shl byte ptr [rsi+0xf], 0x6c; ret; 
0x0000000011cf60: outsb dx, [rsi]; fsub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret far; 
0x000000000a4272: outsb dx, [rsi]; fsub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret; 
0x000000000d59e4: outsb dx, [rsi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000b180f: outsb dx, [rsi]; idiv edi; add rsp, 0x8; ret; 
0x00000000191efe: outsb dx, [rsi]; idiv edi; jmp qword ptr [rsi+0x66]; 
0x000000000f57fe: outsb dx, [rsi]; jmp qword ptr [rsi+0xf]; 
0x0000000015d731: outsb dx, [rsi]; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000007378e: outsb dx, [rsi]; or eax, [rax]; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x000000000a3f08: outsb dx, [rsi]; ret far; 
0x0000000004490e: outsb dx, [rsi]; ret; 
0x00000000041a3d: outsb dx, [rsi]; rol bl, 0xf3; addps xmm0, xmm0; ret; 
0x0000000011a376: outsb dx, [rsi]; ror byte ptr [rbx-0x1e7ef7b9], 0xb4; jg short 0x000000000011a37f; jmp qword ptr [rsi+0xf]; 
0x000000000dd60e: outsb dx, [rsi]; ror dword ptr [rax+0x69], 0x1; not byte ptr [rbx-0x3e6db6dc]; call far fword ptr [rdi]; 
0x000000000d904d: outsb dx, [rsi]; shl bl, 0xf; jle short 0x00000000000d902b; movaps [rsp], xmm3; call rbx; 
0x000000000419c0: outsb dx, [rsi]; shl bl, 0xf; pop rcx; add eax, 0x1a13fe; ret; 
0x000000000dd5bf: outsb dx, [rsi]; shl byte ptr [rsi+0xf], 0x62; ret; 
0x000000000463f8: outsb dx, [rsi]; shl byte ptr [rsi+0xf], 0x6c; ret; 
0x000000001663e2: outsd dx, [rsi]; adc [rax+0x1], edi; movups [rdi+0x20], xmm2; ret; 
0x0000000005aa3f: outsd dx, [rsi]; adc [rax-0xdf6b], ecx; jmp qword ptr [rsi+0xf]; 
0x00000000099670: outsd dx, [rsi]; add al, 0x1; je 0x00000000000995b8; xor eax, eax; ret; 
0x000000000994dd: outsd dx, [rsi]; add bh, bh; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000001293e0: outsd dx, [rsi]; add eax, 0x1; mov [rdx], eax; ret; 
0x00000000167456: outsd dx, [rsi]; add eax, 0x7b224; movaps [rsp+0x20], xmm0; call qword ptr [rax+0x28]; 
0x0000000013e58e: outsd dx, [rsi]; add eax, [rax]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x10]; 
0x00000000059c01: outsd dx, [rsi]; and al, 0xe8; ret; 
0x0000000011a678: outsd dx, [rsi]; call qword ptr [rbx+0x48]; 
0x000000001a4380: outsd dx, [rsi]; cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017d007: outsd dx, [rsi]; data64 ret far; 
0x000000000b1bce: outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x00000000151474: outsd dx, [rsi]; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x00000000112f66: outsd dx, [rsi]; jg short 0x0000000000112fe1; movups [rsi+0x70], xmm7; ret; 
0x00000000112fb6: outsd dx, [rsi]; jle short 0x0000000000113029; movups [rdi+0x78], xmm7; ret; 
0x000000001139fb: outsd dx, [rsi]; jle short 0x0000000000113a6e; movups [rdi+0xf8], xmm7; ret; 
0x00000000048848: outsd dx, [rsi]; jmp qword ptr [rsi+0xf]; 
0x0000000005750c: outsd dx, [rsi]; jmp qword ptr [rsi-0x70]; 
0x000000000923a6: outsd dx, [rsi]; mov eax, 0x80; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x0000000017d002: outsd dx, [rsi]; mov ebx, 0x4e6f0ff3; ret far; 
0x0000000011396b: outsd dx, [rsi]; mov edi, 0xf8; movups [rsi+0x70], xmm7; ret; 
0x000000000815c8: outsd dx, [rsi]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000016631a: outsd dx, [rsi]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x000000001663d2: outsd dx, [rsi]; or [eax+0x1], bh; movups [rcx], xmm4; ret; 
0x00000000162ce2: outsd dx, [rsi]; or [r15], r9b; adc [rax], ecx; mov eax, 0x1; ret; 
0x00000000165ada: outsd dx, [rsi]; or [r8+0x1], r15b; movups [rcx], xmm1; ret; 
0x0000000005f941: outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x0000000005f729: outsd dx, [rsi]; or eax, 0x9235e900; cld; jmp qword ptr [rsi+0x2e]; 
0x000000001a44d7: outsd dx, [rsi]; pop rcx; jmp qword ptr [rdx-0x2f]; 
0x000000001663f2: outsd dx, [rsi]; pop rdi; and [rax+0x1], bh; movups [rcx], xmm3; ret; 
0x0000000011958e: outsd dx, [rsi]; push 0x1047110f; movups [rdi+0x20], xmm1; ret; 
0x000000000ba80a: outsd dx, [rsi]; push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000bfec6: outsd dx, [rsi]; push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x00000000041cbf: outsd dx, [rsi]; ret far; 
0x000000000ba80f: outsd dx, [rsi]; ret; 
0x000000000f583f: outsd dx, [rsi]; shl dword ptr [rsi+0xf], 0xd4; ret far; 
0x000000000a9962: outsd dx, [rsi]; str [rax-0x73]; add eax, 0xf6f94; cmove rax, rdx; ret; 
0x000000001b5ce4: outsd dx, [rsi]; xchg rsi, rax; jmp qword ptr [rdx-0xd]; 
0x000000001663ba: outsd dx, [rsi]; xor [r8+0x1], r15b; movups [rcx], xmm1; ret; 
0x0000000012e902: paddb mm7, mm7; jmp qword ptr [rsi+0x2e]; 
0x0000000012178d: paddd mm7, mm7; call far fword ptr [rax+0x5a]; 
0x000000000a6b56: paddd mm7, mm7; dec dword ptr [rax-0x77]; ret far; 
0x00000000096db3: paddd mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x00000000041bad: pand mm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041ba5: pand mm1, [rip+0x1a0554]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x000000001a3195: pand mm3, mm1; pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3510; ret; 
0x000000001a39f5: pand mm3, mm1; pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3d70; ret; 
0x000000000412b3: pand mm7, [rsp-0x18]; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000041bac: pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041ba4: pand xmm1, [rip+0x1a0554]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x000000001a3194: pand xmm3, xmm1; pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3510; ret; 
0x000000001a39f4: pand xmm3, xmm1; pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3d70; ret; 
0x00000000192eb2: pcmpeqb mm0, mm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000d7b42: pcmpeqb mm1, [rbx]; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b92: pcmpeqb mm1, [rbx]; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000d7bb0; ret; 
0x000000001a2e37: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000000b56b8: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x000000000d7b68: pcmpeqb mm2, [rip+0x3b30478b]; xor [rbp+0x3d], r14b; ret; 
0x000000000d7a58: pcmpeqb mm2, [rip+0x63b078b]; jne 0x00000000000d7bb0; ret; 
0x000000000d7ae2: pcmpeqb mm3, [rbx]; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000d7bb0; ret; 
0x000000000d7a82: pcmpeqb mm3, [rbx]; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000d7bb0; ret; 
0x000000001a6742: pcmpeqb mm3, [rbx]; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x00000000001a6850; ret; 
0x000000000d83a4: pcmpeqb mm3, [rcx]; add rax, 0x2; ret; 
0x000000001a6714: pcmpeqb mm3, [rcx]; mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x00000000001a6850; ret; 
0x000000000d838f: pcmpeqb mm3, [rsi]; ret; 
0x00000000192eb1: pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001a2e36: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000000b56b7: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x000000001a369a: pcmpeqd mm1, mm0; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000001a3699: pcmpeqd xmm1, xmm0; pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x0000000009be36: pcmpeqw mm0, [rdi]; xor eax, eax; ret; 
0x000000000d8101: pcmpeqw mm1, [rax+rcx*2+0x25]; call far fword ptr [rdi]; 
0x0000000009c062: pcmpeqw mm4, [rbx]; xor eax, eax; ret; 
0x000000000c3e19: pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x000000000c3db7: pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x000000000c1c57: pcmpgtd mm1, [rcx-0x72b7fba9]; add eax, 0x6e88349; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x000000001a4628: pcmpgtd mm1, [rcx-0x7f3c01b2]; cli; add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000000b5043: pcmpgtd mm1, [rdi]; xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x000000001989f6: pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x0000000000198aa0; ret; 
0x00000000198848: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000019e194: pextrw edi, mm5, 0x74; ret far; 
0x0000000019d980: pextrw edi, mm5, 0xd7; rol dword ptr [rbp-0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x00000000041715: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x00000000041a55: pmovmskb eax, mm0; and eax, 0x8; ret; 
0x000000000b4afc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b4fe3: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x000000001a2e3b: pmovmskb eax, mm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a369e: pmovmskb eax, mm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000000b56bc: pmovmskb eax, mm1; sub eax, 0xffff; ret; 
0x000000000b4b62: pmovmskb eax, mm1; test eax, eax; jne 0x00000000000b4c10; xor eax, eax; ret; 
0x000000000d6df2: pmovmskb eax, mm1; test eax, eax; jne 0x00000000000d6ed0; xor eax, eax; ret; 
0x000000000b4b92: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000b4bf0; xor eax, eax; ret; 
0x000000000b5045: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000b50c0; xor eax, eax; ret; 
0x000000000b5074: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000b50f0; xor eax, eax; ret; 
0x000000000d6e22: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000d6e90; xor eax, eax; ret; 
0x000000001a3199: pmovmskb eax, mm3; inc ax; jne 0x00000000001a3510; ret; 
0x000000001a39f9: pmovmskb eax, mm3; inc ax; jne 0x00000000001a3d70; ret; 
0x00000000041714: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000041a54: pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000b4afb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b4fe2: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000001a2e3a: pmovmskb eax, xmm1; inc ax; jne 0x00000000001a2db3; ret; 
0x000000001a369d: pmovmskb eax, xmm1; inc ax; jne 0x00000000001a3603; ret; 
0x000000000b56bb: pmovmskb eax, xmm1; sub eax, 0xffff; ret; 
0x000000000b4b61: pmovmskb eax, xmm1; test eax, eax; jne 0x00000000000b4c10; xor eax, eax; ret; 
0x000000000d6df1: pmovmskb eax, xmm1; test eax, eax; jne 0x00000000000d6ed0; xor eax, eax; ret; 
0x000000000b4b91: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000b4bf0; xor eax, eax; ret; 
0x000000000b5044: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000b50c0; xor eax, eax; ret; 
0x000000000b5073: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000b50f0; xor eax, eax; ret; 
0x000000000d6e21: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000d6e90; xor eax, eax; ret; 
0x000000001a3198: pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3510; ret; 
0x000000001a39f8: pmovmskb eax, xmm3; inc ax; jne 0x00000000001a3d70; ret; 
0x000000000baa03: pmovmskb edx, mm4; test edx, edx; je short 0x00000000000baa0e; bsf eax, edx; ret; 
0x000000000baa02: pmovmskb edx, xmm4; test edx, edx; je short 0x00000000000baa0e; bsf eax, edx; ret; 
0x00000000109a46: pop di; or eax, 0x3d8d4800; jg short 0x0000000000109aae; or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x000000000a898b: pop qword ptr [rax]; add [rax-0x73], cl; adc eax, 0xe2e2b; cmovne rax, rdx; ret; 
0x000000001af8fd: pop qword ptr [rax]; add [rax], al; add eax, 0x40; add rax, rdi; ret; 
0x0000000008dbf5: pop qword ptr [rax]; add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x00000000095725: pop qword ptr [rax]; add [rax], al; syscall; 
0x0000000017238d: pop qword ptr [rbx-0x4]; jmp qword ptr [rsi+0x2e]; 
0x000000001046a1: pop qword ptr [rcx-0x2d]; jrcxz 0x000000000010462f; sub [rcx+0x63], cl; ret far; 
0x000000000dce39: pop qword ptr [rdx]; jbe short 0x00000000000dce40; ret; 
0x000000001603a8: pop r11; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000083977: pop r12; jmp rax; 
0x000000001303e7: pop r12; pop r13; cmove eax, edx; pop r14; ret; 
0x0000000002a1f7: pop r12; pop r13; jmp rax; 
0x00000000077a36: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000002a1a5: pop r12; pop r13; pop r14; jmp rax; 
0x0000000016c1e4: pop r12; pop r13; pop r14; jmp rcx; 
0x0000000002d542: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000002a3de: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000002be4c: pop r12; pop r13; pop r14; ret; 
0x00000000044d41: pop r12; pop r13; pop rbp; ret; 
0x00000000041c48: pop r12; pop r13; ret; 
0x0000000011b918: pop r12; pop r14; ret; 
0x00000000133cdf: pop r12; pop rbp; ret; 
0x00000000035731: pop r12; ret; 
0x000000001303e9: pop r13; cmove eax, edx; pop r14; ret; 
0x0000000002a1f9: pop r13; jmp rax; 
0x00000000077a38: pop r13; mov rax, r9; pop r14; ret; 
0x00000000092ae0: pop r13; pop r14; cmp edx, 0x1; sbb eax, eax; ret; 
0x0000000002a1a7: pop r13; pop r14; jmp rax; 
0x0000000016c1e6: pop r13; pop r14; jmp rcx; 
0x0000000002d544: pop r13; pop r14; pop r15; jmp rax; 
0x0000000002a740: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000002a3e0: pop r13; pop r14; pop r15; ret; 
0x0000000002be4e: pop r13; pop r14; ret; 
0x00000000044d43: pop r13; pop rbp; ret; 
0x00000000041c4a: pop r13; ret; 
0x00000000092ae2: pop r14; cmp edx, 0x1; sbb eax, eax; ret; 
0x0000000002a1a9: pop r14; jmp rax; 
0x0000000016c1e8: pop r14; jmp rcx; 
0x0000000002d546: pop r14; pop r15; jmp rax; 
0x0000000002a742: pop r14; pop r15; pop rbp; ret; 
0x0000000002a3e2: pop r14; pop r15; ret; 
0x0000000002be50: pop r14; ret; 
0x0000000002d548: pop r15; jmp rax; 
0x0000000002a744: pop r15; pop rbp; ret; 
0x0000000002a3e4: pop r15; ret; 
0x00000000166341: pop r8; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000090bdc: pop r8; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x00000000165b76: pop r8; mov eax, 0x1; ret; 
0x00000000090c12: pop r8; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x0000000010c361: pop rax; adc [rax-0x7d], cl; add al, 0x24; add [rax-0x77], ecx; ret; 
0x000000000a9719: pop rax; adc [rax], al; cmove rax, rdx; ret; 
0x0000000009e8d4: pop rax; add [rax], eax; add [rax-0x77], cl; ret; 
0x000000000761cd: pop rax; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x00000000134714: pop rax; add al, 0x0; lea rdx, [rip+0x4bbe1]; cmovne rax, rdx; ret; 
0x0000000003f349: pop rax; add al, 0x5b; ret; 
0x00000000166342: pop rax; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000ffd80: pop rax; add al, [rax]; add al, ch; out 0x85, eax; bnd jmp qword ptr [rsi+0xf]; 
0x00000000050889: pop rax; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000001284ec: pop rax; add rsp, 0x58; ret; 
0x000000001753b9: pop rax; add rsp, 0x70; pop rbx; jmp rax; 
0x000000001664f9: pop rax; call rax; 
0x000000000ff5f3: pop rax; cmp dh, dh; ret; 
0x00000000079402: pop rax; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000078ff6: pop rax; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000007a753: pop rax; idiv edi; jmp qword ptr [rsi-0x77]; 
0x0000000016634a: pop rax; jmp rcx; 
0x0000000007b9cb: pop rax; jmp rsi; 
0x000000000ecec9: pop rax; jne short 0x00000000000eced0; ret; 
0x0000000015e3f9: pop rax; lea r9, [rsp+0x40]; mov [rsp+0x18], rdi; movups [rsp], xmm2; call qword ptr [rax]; 
0x0000000015fd54: pop rax; mov [rdx+0x68], rcx; ret; 
0x00000000090bdd: pop rax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x00000000165b77: pop rax; mov eax, 0x1; ret; 
0x0000000003a127: pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a0b7: pop rax; mov eax, [rax+rdx*4]; ret; 
0x000000000ed020: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000090c13: pop rax; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000090c28; ret; 
0x00000000167ce8: pop rax; mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x0000000002d840: pop rax; mov rax, [rsp+0x18]; call rax; 
0x0000000011f493: pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000002f4cd: pop rax; mov rdi, [rsp+0x50]; call r13; 
0x0000000003a400: pop rax; mov rdx, [rip+0x1de9df]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x000000001377ae: pop rax; mov rdx, rbp; mov rdi, r13; call qword ptr [rsp+0x70]; 
0x0000000011958a: pop rax; movdqu xmm1, [rsi+0x68]; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm1; ret; 
0x0000000015dce4: pop rax; or [rax], al; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000bea24: pop rax; or [rax], eax; add cl, ch; ret; 
0x00000000147cf8: pop rax; pop rbx; pop rbp; ret; 
0x00000000125bb0: pop rax; pop rdi; call rax; 
0x00000000090528: pop rax; pop rdx; pop rbx; ret; 
0x0000000015bac4: pop rax; ret far; 
0x00000000045eaf: pop rax; ret; 
0x000000001a16e7: pop rax; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000119f02: pop rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x00000000120e99: pop rbp; add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13; 
0x0000000014e6f7: pop rbp; add al, ch; push rdx; mov dh, 0xff; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000075111: pop rbp; add dh, dh; ret; 
0x00000000199602: pop rbp; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001025b5: pop rbp; bnd jmp qword ptr [rsi+0xf]; 
0x00000000133d98: pop rbp; clc; leave; ret; 
0x000000001303ea: pop rbp; cmove eax, edx; pop r14; ret; 
0x0000000012e26f: pop rbp; cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000011ad09: pop rbp; idiv edi; mov rax, [rsp]; add rsp, 0x28; ret; 
0x000000000710af: pop rbp; jge short 0x00000000000710cc; add [rcx-0x7d], al; iretd; jmp qword ptr [rdi+rax*8]; 
0x0000000002a1fa: pop rbp; jmp rax; 
0x0000000015d469: pop rbp; jmp rcx; 
0x0000000015ec12: pop rbp; jmp rdx; 
0x000000000e5cbe: pop rbp; lea rax, [rax+rdx*8]; ret; 
0x0000000011f441: pop rbp; lea rax, [rip+0x101ff7]; pop r12; pop r13; ret; 
0x0000000013b77a: pop rbp; mov byte ptr [rdi], 0x0; pop r12; ret; 
0x0000000009d2a8: pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000015fdfb: pop rbp; mov eax, r8d; ret; 
0x000000000ab506: pop rbp; mov qword ptr [r12], 0x0; pop r12; ret; 
0x0000000008a27f: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x0000000008608c: pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000003aa17: pop rbp; mov rax, r12; pop r12; ret; 
0x00000000077a39: pop rbp; mov rax, r9; pop r14; ret; 
0x00000000160893: pop rbp; movzx eax, al; pop r12; ret; 
0x00000000083976: pop rbp; pop r12; jmp rax; 
0x0000000002a1f6: pop rbp; pop r12; pop r13; jmp rax; 
0x0000000008bd7f: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000016c212: pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000002be4b: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000041c47: pop rbp; pop r12; pop r13; ret; 
0x00000000035730: pop rbp; pop r12; ret; 
0x0000000013cf8e: pop rbp; pop r13; pop r14; pop r15; ret; 
0x00000000092ae1: pop rbp; pop r14; cmp edx, 0x1; sbb eax, eax; ret; 
0x0000000002a1a8: pop rbp; pop r14; jmp rax; 
0x0000000016c1e7: pop rbp; pop r14; jmp rcx; 
0x0000000002d545: pop rbp; pop r14; pop r15; jmp rax; 
0x0000000002a741: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000002a3e1: pop rbp; pop r14; pop r15; ret; 
0x0000000002be4f: pop rbp; pop r14; ret; 
0x00000000044d44: pop rbp; pop rbp; ret; 
0x00000000054668: pop rbp; pop rbx; ret; 
0x00000000155b77: pop rbp; ret far; 
0x0000000002a2e0: pop rbp; ret; 
0x0000000002a139: pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000074baf: pop rbp; sbb al, [rax]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000001532fe: pop rbp; sub eax, 0x1; pop r12; pop r13; ret; 
0x0000000013f11f: pop rbp; xchg edx, eax; out dx, al; dec dword ptr [rax-0x77]; ret; 
0x000000000a9c7e: pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x000000000a7f51: pop rbx; add al, 0xf8; jmp qword ptr [rsi+0xf]; 
0x0000000015f5fd: pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000087163: pop rbx; and al, 0xfa; jmp qword ptr [rsi+0xf]; 
0x000000000ead68: pop rbx; and eax, 0xc; pop rbp; pop r12; ret; 
0x000000000ac06c: pop rbx; cmovne rax, rdx; ret; 
0x00000000159371: pop rbx; fdivp st(7), st; jmp qword ptr [rsi+0x66]; 
0x000000000c41b1: pop rbx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000726f1: pop rbx; ja short 0x00000000000726f0; jmp qword ptr [rsi+0x66]; 
0x000000000405f1: pop rbx; jle short 0x00000000000405f2; jmp qword ptr [rsi+0xf]; 
0x0000000008d8c8: pop rbx; jmp rax; 
0x000000000e7171: pop rbx; jrcxz 0x00000000000e717c; add [rcx+rcx*4-0x8], cl; call rax; 
0x00000000142f0b: pop rbx; mov [r9], rdx; ret; 
0x000000001572e4: pop rbx; mov eax, 0x1; pop rbp; pop r12; ret; 
0x000000000f4175: pop rbx; mov eax, 0x1; ret; 
0x00000000133cee: pop rbx; mov eax, 0x5; pop r12; pop rbp; ret; 
0x0000000010d5c6: pop rbx; mov eax, 0x5; pop rbp; pop r12; ret; 
0x00000000112ca0: pop rbx; mov eax, 0x9; pop rbp; pop r14; ret; 
0x0000000009205e: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x0000000011a9c5: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000045ead: pop rbx; mov eax, [rax+0x58]; ret; 
0x000000000921f7: pop rbx; mov eax, fs:[rax]; ret; 
0x0000000009a705: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000008f124: pop rbx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r12+0x18]; 
0x0000000004605b: pop rbx; mov qword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x000000001bb6e5: pop rbx; mov qword ptr [rip+0x5f7cf], 0x0; ret; 
0x000000001bb96b: pop rbx; mov qword ptr [rip+0x64d79], 0x0; ret; 
0x00000000082165: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000083972: pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000142ef5: pop rbx; movsxd rdx, eax; add r10, rdx; mov [r9], r10; ret; 
0x00000000081101: pop rbx; pop r12; pop r13; jmp rax; 
0x00000000044d40: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000091140: pop rbx; pop r12; pop r13; ret; 
0x00000000053863: pop rbx; pop r12; ret; 
0x00000000083e7d: pop rbx; pop rbp; jmp rax; 
0x0000000015d468: pop rbx; pop rbp; jmp rcx; 
0x000000000e5cbd: pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x0000000009d2a7: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000015fdfa: pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000ab505: pop rbx; pop rbp; mov qword ptr [r12], 0x0; pop r12; ret; 
0x0000000003aa16: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000160892: pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x000000000900a3: pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000008bab9: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000041c46: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000001357f0: pop rbx; pop rbp; pop r12; ret; 
0x000000000eaf95: pop rbx; pop rbp; pop r12; ret; 
0x00000000035850: pop rbx; pop rbp; pop r12; ret; 
0x00000000112c98: pop rbx; pop rbp; pop r14; ret; 
0x0000000002a2df: pop rbx; pop rbp; ret; 
0x00000000118411: pop rbx; push rax; jmp qword ptr [rsi-0x7d]; 
0x00000000169bc1: pop rbx; ret far; 
0x00000000035dd1: pop rbx; ret; 
0x00000000141ddc: pop rbx; ret; 
0x00000000112cee: pop rbx; setl al; ret; 
0x0000000011fa3e: pop rbx; setne al; movzx eax, al; ret; 
0x000000000a8a31: pop rbx; str [r8-0x73]; add eax, 0x11c94; cmove rax, rdx; ret; 
0x0000000008b63f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000045e7c: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000012e3dc: pop rbx; test rax, rax; cmovs rax, rdx; ret; 
0x00000000199768: pop rbx; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000001717f1: pop rbx; xchg ah, ch; jmp qword ptr [rsi+0x66]; 
0x00000000133cdc: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000015ec0f: pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000003e44f: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000da06d: pop rcx; adc [rcx+0x29], al; ret; 
0x0000000017abf7: pop rcx; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000008deac: pop rcx; add [rcx+rcx*4-0x1], ecx; call qword ptr [rax+0x18]; 
0x000000000adac1: pop rcx; add al, [rax]; add bh, dh; ret; 
0x00000000041979: pop rcx; add eax, 0x1a0751; ret; 
0x00000000041954: pop rcx; add eax, 0x1a0786; ret; 
0x000000000419c4: pop rcx; add eax, 0x1a13fe; ret; 
0x000000000b7e04: pop rcx; and al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000001645c3: pop rcx; and ebp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000d3cd3: pop rcx; and edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000170d97: pop rcx; cld; jmp qword ptr [rsi+0xf]; 
0x000000001bb258: pop rcx; idiv bh; mov qword ptr [rip+0x5f822], 0x0; add rsp, 0x8; ret; 
0x000000000424b3: pop rcx; imul ebx, [rip+0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x00000000154663: pop rcx; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x000000001a44d9: pop rcx; jmp qword ptr [rdx-0x2f]; 
0x000000001a3eac: pop rcx; jmp qword ptr [rdx-0xf]; 
0x000000000d29d3: pop rcx; jnp short 0x00000000000d29db; add [rbp+0x29dd75db], al; ret; 
0x0000000015e40b: pop rcx; mov rdi, [rsp+0x8]; mov r12d, eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000008a2fe: pop rcx; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000007232e: pop rcx; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000008dea6: pop rcx; movzx esi, byte ptr [rcx]; lea rbx, [rcx+0x1]; mov rdi, r15; call qword ptr [rax+0x18]; 
0x00000000194137: pop rcx; or al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000011f410: pop rcx; pop rbp; pop r12; pop r13; ret; 
0x00000000108b14: pop rcx; pop rbx; ret; 
0x000000000cbac3: pop rcx; ret far; 
0x0000000008c6bb: pop rcx; ret; 
0x0000000013b4a6: pop rcx; rol byte ptr [rbx-0x7cbea817], 0x1; sti; or [rcx+0xf], eax; ret far; 
0x000000001260b3: pop rcx; sub eax, 0xd8f7000f; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001afcea: pop rcx; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000f9e46: pop rcx; xor eax, eax; pop rbp; ret; 
0x0000000017b3f9: pop rdi; adc [rdx+0x9], dh; movaps [rdi], xmm4; notrack jmp r9; 
0x000000001b0a1b: pop rdi; add [rax-0x72b7bfb1], ecx; ret; 
0x0000000009276c: pop rdi; add [rax], al; add [rax+0x16], bh; cmove eax, edx; ret; 
0x000000001a28e7: pop rdi; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000199877: pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000016b58b: pop rdi; add rsp, 0x10; pop rbp; ret; 
0x000000001663f3: pop rdi; and [rax+0x1], bh; movups [rcx], xmm3; ret; 
0x00000000199902: pop rdi; and ch, al; std; xlat [rbx]; ret; 
0x00000000125bb1: pop rdi; call rax; 
0x00000000155b85: pop rdi; fisttp dword ptr [rax+rax], st; call rbx; 
0x0000000011abae: pop rdi; idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000011abaf: pop rdi; idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001623c7: pop rdi; in al, dx; jmp qword ptr [rsi+0xf]; 
0x0000000017ce19: pop rdi; in al, dx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cc29: pop rdi; in eax, dx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x000000001421ed: pop rdi; jl short 0x00000000001421df; jmp qword ptr [rsi+0x66]; 
0x0000000002d549: pop rdi; jmp rax; 
0x000000000eac54: pop rdi; jmp rdi; 
0x000000000eac34: pop rdi; mov eax, 0x3a; syscall; 
0x00000000120ca0: pop rdi; mov rdi, [r12]; call rbx; 
0x00000000173587: pop rdi; or al, [rax]; test edi, edi; jns short 0x0000000000173590; ret; 
0x00000000109a47: pop rdi; or eax, 0x3d8d4800; jg short 0x0000000000109aae; or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x00000000109a4e: pop rdi; or eax, 0x3fae800; jmp qword ptr [rsi+0x2e]; 
0x0000000017ca49: pop rdi; out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017c879: pop rdi; out dx, eax; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000017c975: pop rdi; out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x0000000017c8c1: pop rdi; out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000002a745: pop rdi; pop rbp; ret; 
0x0000000008eef5: pop rdi; ret far; 
0x0000000002a3e5: pop rdi; ret; 
0x0000000017bc79: pop rdi; shl byte ptr [rdx+0x13], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b34b: pop rdi; shl byte ptr [rdx+0xe], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000006aca0: pop rdi; shl byte ptr [rsi+0xf], 0x1; insb [rdi], dx; ret; 
0x0000000014962a: pop rdx; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000009ea52: pop rdx; add [rcx+0x39], ecx; ret; 
0x0000000007e999: pop rdx; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000167ced: pop rdx; call qword ptr [rax+0x20]; 
0x000000000948f1: pop rdx; cli; jmp qword ptr [rbx+rcx*4+0x4]; 
0x0000000003b6d2: pop rdx; in eax, 0xff; inc dword ptr [rax-0x76b7bcc8]; ret; 
0x0000000007690a: pop rdx; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x0000000007c297: pop rdx; jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x00000000091ea5: pop rdx; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x00000000120095: pop rdx; or [rcx-0xa], al; ret; 
0x0000000011f497: pop rdx; pop r12; ret; 
0x00000000090529: pop rdx; pop rbx; ret; 
0x00000000108b13: pop rdx; pop rcx; pop rbx; ret; 
0x00000000160c5f: pop rdx; std; jmp qword ptr [rsi+0x66]; 
0x000000000d8145: pop rdx; test al, 0xf0; jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000a8629: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000a9a0b: pop rsi; add [rax], eax; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000001baab6: pop rsi; add eax, 0x29368; ret; 
0x00000000050cef: pop rsi; add rsp, 0x10; pop rbx; ret; 
0x00000000092ae3: pop rsi; cmp edx, 0x1; sbb eax, eax; ret; 
0x0000000013480e: pop rsi; enter 0x6, 0x48; lea eax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x0000000011ac4f: pop rsi; idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000002a1aa: pop rsi; jmp rax; 
0x0000000016c1e9: pop rsi; jmp rcx; 
0x000000000f4105: pop rsi; jne short 0x00000000000f4130; mov byte ptr [rax+0x8], 0x19; mov eax, 0x1; ret; 
0x00000000099641: pop rsi; mov eax, 0x16; ret; 
0x0000000008d7d9: pop rsi; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x00000000199f61: pop rsi; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001207cd: pop rsi; or [rcx-0xa], al; ret; 
0x000000000b180e: pop rsi; outsb dx, [rsi]; idiv edi; add rsp, 0x8; ret; 
0x0000000002d547: pop rsi; pop r15; jmp rax; 
0x0000000002a743: pop rsi; pop r15; pop rbp; ret; 
0x0000000002a3e3: pop rsi; pop r15; ret; 
0x00000000155b7d: pop rsi; ret far; 
0x0000000002be51: pop rsi; ret; 
0x000000000f6bbe: pop rsi; sbb dh, bl; jmp qword ptr [rsi+0xf]; 
0x00000000042f88: pop rsi; sbb eax, 0xc76400; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000135c9e: pop rsi; shl esp, cl; jmp qword ptr [rsi+0xf]; 
0x00000000096104: pop rsi; xor al, 0x14; add al, ch; ret; 
0x00000000076b1b: pop rsp; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x000000000c55f0: pop rsp; add [rax], eax; cmovne rax, rdx; ret; 
0x000000000ae4f3: pop rsp; add [rdx+0x38], eax; pop rsp; syscall; 
0x0000000016029a: pop rsp; add eax, 0xf486600; outsb dx, [rsi]; ret far; 
0x000000000507bb: pop rsp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007eb27: pop rsp; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000007b9c9: pop rsp; and al, 0x58; jmp rsi; 
0x0000000007632f: pop rsp; and al, 0x70; jmp rsi; 
0x000000000d8f69: pop rsp; and al, 0xf0; movsd xmm0, [rsp-0x10]; ret; 
0x00000000029f47: pop rsp; call far fword ptr [rdx]; 
0x000000001781c0: pop rsp; in eax, 0xfb; jmp qword ptr [rsi+0x2e]; 
0x00000000152751: pop rsp; in eax, dx; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000083978: pop rsp; jmp rax; 
0x0000000015d201: pop rsp; lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000010ffbf: pop rsp; or al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000dce38: pop rsp; pop qword ptr [rdx]; jbe short 0x00000000000dce40; ret; 
0x000000001303e8: pop rsp; pop r13; cmove eax, edx; pop r14; ret; 
0x0000000002a1f8: pop rsp; pop r13; jmp rax; 
0x00000000077a37: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000002a1a6: pop rsp; pop r13; pop r14; jmp rax; 
0x0000000016c1e5: pop rsp; pop r13; pop r14; jmp rcx; 
0x0000000002d543: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x0000000002a3df: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000002be4d: pop rsp; pop r13; pop r14; ret; 
0x00000000044d42: pop rsp; pop r13; pop rbp; ret; 
0x00000000041c49: pop rsp; pop r13; ret; 
0x0000000011b919: pop rsp; pop r14; ret; 
0x00000000133ce0: pop rsp; pop rbp; ret; 
0x00000000155b70: pop rsp; ret far; 
0x00000000035732: pop rsp; ret; 
0x0000000016b7c0: pop rsp; scasd [rdi]; cld; jmp qword ptr [rsi+0x66]; 
0x00000000114a80: pop rsp; shl bh, 0xff; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000041501: pop rsp; shl edx, 0x1; movups [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000160ade: pop rsp; std; jmp qword ptr [rsi+0x2e]; 
0x000000000ae4f8: pop rsp; syscall; 
0x0000000002b786: popfq; adc al, 0x0; mov rdi, rbx; call r12; 
0x0000000016c931: popfq; cld; jmp qword ptr [rsi+0x66]; 
0x0000000007f293: popfq; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000014637b: popfq; cmp bl, 0xff; jmp qword ptr [rcx+rcx*4+0x18]; 
0x0000000015f97f: popfq; insd [rdi], dx; std; jmp qword ptr [rsi+0x66]; 
0x0000000010b64f: popfq; iretd; stc; dec dword ptr [rax-0x77]; ret; 
0x000000000e90cf: popfq; jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000c3972: popfq; lea r11, [rip+0x10fb5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab2: popfq; lea r11, [rip+0x111846]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03d2: popfq; lea r11, [rip+0x112d46]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000a754f: popfq; loopne 0x00000000000a754b; jmp qword ptr [rsi+0x66]; 
0x00000000068325: popfq; out 0xff, eax; dec dword ptr [rax-0x7d]; ret; 
0x0000000007a752: popfq; pop rax; idiv edi; jmp qword ptr [rsi-0x77]; 
0x00000000107c0d: popfq; ret; 
0x0000000006b645: popfq; sar dl, 0xff; inc dword ptr [rcx+0xf]; ret; 
0x0000000006ad28: popfq; sar dl, 0xff; inc dword ptr [rcx-0x7d]; jmp qword ptr [rdi+rcx]; 
0x0000000015c94b: popfq; std; jmp qword ptr [rsi-0x70]; 
0x00000000105887: popfq; xor eax, 0x8b4c0011; add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret; 
0x00000000041bb5: por mm0, mm1; ret; 
0x00000000041bb4: por xmm0, xmm1; ret; 
0x000000001827d2: psllq mm1, [r15]; jg short 0x00000000001827e7; ret; 
0x00000000185302: psllq mm1, [r15]; jg short 0x0000000000185317; ret; 
0x000000000bfda5: psllq mm1, [rdi]; jg short 0x00000000000bfdb2; mov [rdi+0xf], ecx; ret; 
0x000000000bfe06: psllq mm1, [rdi]; jg short 0x00000000000bfe13; mov [rdi+0xf], rcx; ret; 
0x000000000bff08: psllq mm1, [rdi]; jg short 0x00000000000bff14; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c0a95: psllq mm1, [rdi]; jg short 0x00000000000c0aa2; mov [rdi+0xf], ecx; ret; 
0x000000000c0af6: psllq mm1, [rdi]; jg short 0x00000000000c0b03; mov [rdi+0xf], rcx; ret; 
0x000000000c0bf8: psllq mm1, [rdi]; jg short 0x00000000000c0c04; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c1455: psllq mm1, [rdi]; jg short 0x00000000000c1462; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000c14d6: psllq mm1, [rdi]; jg short 0x00000000000c14e3; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000c15d8: psllq mm1, [rdi]; jg short 0x00000000000c15e4; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000c22c5: psllq mm1, [rdi]; jg short 0x00000000000c22d2; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000c2346: psllq mm1, [rdi]; jg short 0x00000000000c2353; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000c2448: psllq mm1, [rdi]; jg short 0x00000000000c2454; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000c30b5: psllq mm1, [rdi]; jg short 0x00000000000c30c2; mov [rdi+0xf], ecx; ret; 
0x000000000c3116: psllq mm1, [rdi]; jg short 0x00000000000c3123; mov [rdi+0xf], rcx; ret; 
0x000000000c3218: psllq mm1, [rdi]; jg short 0x00000000000c3224; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c3ba5: psllq mm1, [rdi]; jg short 0x00000000000c3bb2; mov [rdi+0xf], ecx; ret; 
0x000000000c3c06: psllq mm1, [rdi]; jg short 0x00000000000c3c13; mov [rdi+0xf], rcx; ret; 
0x000000000c3d08: psllq mm1, [rdi]; jg short 0x00000000000c3d14; movdqu [rdi+0xf], xmm2; ret; 
0x000000001827d3: psllq mm1, [rdi]; jg short 0x00000000001827e7; ret; 
0x00000000185303: psllq mm1, [rdi]; jg short 0x0000000000185317; ret; 
0x0000000002adb3: psubsb mm2, [rdi]; cmpsd [rsi], [rdi]; adc al, 0x0; mov rdi, rbx; call r15; 
0x00000000045370: psubsw mm7, mm2; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000835f6: punpckhqdq xmm0, xmm0; mov [rax+0x10], rcx; mov [rax+0x40], rdx; movups [rax], xmm0; ret; 
0x0000000008d78f: punpckhqdq xmm0, xmm0; mov [rdi+0x18], rdx; mov [rdi+0x48], rax; movups [rdi+0x8], xmm0; ret; 
0x000000000835bb: punpckhqdq xmm1, xmm2; movhps [rax+0x10], xmm0; mov [rax+0x40], rdx; movups [rax], xmm1; ret; 
0x0000000008d754: punpckhqdq xmm1, xmm2; movhps [rdi+0x18], xmm0; mov [rdi+0x48], rax; movups [rdi+0x8], xmm1; ret; 
0x00000000092751: punpckldq mm0, mm1; movq [rdi+0x4], xmm0; ret; 
0x00000000045e12: punpckldq mm0, mm1; movq rax, xmm0; ret; 
0x0000000011a39f: punpckldq mm1, mm2; mov [rdi+0x16], ax; punpcklqdq xmm0, xmm1; movups [rdi], xmm0; ret; 
0x00000000092750: punpckldq xmm0, xmm1; movq [rdi+0x4], xmm0; ret; 
0x00000000045e11: punpckldq xmm0, xmm1; movq rax, xmm0; ret; 
0x0000000011a39e: punpckldq xmm1, xmm2; mov [rdi+0x16], ax; punpcklqdq xmm0, xmm1; movups [rdi], xmm0; ret; 
0x0000000016ce62: punpcklqdq xmm0, xmm0; mov [rdi+0x8], rax; mov [rdi+0x28], edx; movups [rdi+0x18], xmm0; ret; 
0x000000000eabf0: punpcklqdq xmm0, xmm0; movups [rax+0x2d8], xmm0; mov eax, 0x111; syscall; 
0x0000000008a741: punpcklqdq xmm0, xmm0; movups [rbx+0x8], xmm0; pop rbx; ret; 
0x00000000046734: punpcklqdq xmm0, xmm1; mov eax, r8d; movups [rdi], xmm0; ret; 
0x0000000015fcc8: punpcklqdq xmm0, xmm1; movaps [rsp], xmm0; call qword ptr [rax+0x8]; 
0x0000000011a3a6: punpcklqdq xmm0, xmm1; movups [rdi], xmm0; ret; 
0x0000000009e6f1: punpcklqdq xmm0, xmm1; movups [rdx+0x8], xmm0; cmp eax, 0x2; je short 0x000000000009e71b; ret; 
0x0000000009e012: punpcklqdq xmm0, xmm1; movups [rdx+0x8], xmm0; je short 0x000000000009e03b; ret; 
0x000000000567bb: punpcklqdq xmm0, xmm1; movups [rsi], xmm0; mov [rdi], eax; mov eax, 0x2; ret; 
0x0000000005680b: punpcklqdq xmm0, xmm2; movups [rsi], xmm0; mov [rdi], eax; mov eax, 0x2; ret; 
0x000000000ec1f3: push 0x0; add [rax], al; syscall; 
0x00000000175022: push 0x0; call qword ptr [rax+0x340]; 
0x000000000d9a8c: push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000000c6115: push 0x0; lea r9, [rsp+0x18]; call r13; 
0x000000000c5e03: push 0x0; lea rcx, [rax+0x1]; lea r9, [rsp+0x38]; call rbx; 
0x000000000c5f69: push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c63a3: push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x00000000175019: push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x340]; 
0x00000000174fc8: push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x000000000d3a47: push 0x0; mov r9, [rsp+0x10]; call r13; 
0x000000000301bb: push 0x0; mov r9, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r14; 
0x0000000002aa90: push 0x0; mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000001759cd: push 0x0; mov rdi, r13; push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x0000000002d275: push 0x0; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x000000000d9a8a: push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x340]; 
0x000000001687f6: push 0x0; push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x00000000175530: push 0x0; push rax; mov rax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x0000000011958f: push 0x1047110f; movups [rdi+0x20], xmm1; ret; 
0x0000000016903b: push 0x142b4864; and eax, 0x28; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x000000000a31e6: push 0x17; add [rax+0x39], cl; ret; 
0x000000000886e2: push 0x17; sti; jmp qword ptr [rsi+0x2e]; 
0x000000000457c5: push 0x19; add al, ch; add dword ptr [rsi-0x1], 0xffffffff; xor eax, eax; ret; 
0x0000000015d958: push 0x19; mov r8, [rsp+0x28]; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000000c632b: push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x000000000c5f67: push 0x1; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x18]; call rbx; 
0x000000000c63a1: push 0x1; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000d3a45: push 0x1; push 0x0; mov r9, [rsp+0x10]; call r13; 
0x000000000c6327: push 0x1; xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x000000000c6110: push 0x1; xor r8d, r8d; push 0x0; lea r9, [rsp+0x18]; call r13; 
0x00000000167d82: push 0x1e; lea r8, [rip-0x647b]; lea rdx, [rip-0x6232]; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x0000000015fd57: push 0x1f0f66c3; add [rax], r8b; xor eax, eax; ret; 
0x00000000165a1a: push 0x1f0fe1ff; add bl, dh; nop edx, edi; ret; 
0x0000000014bfd5: push 0x247c3b48; or [rbp+rax-0x18], dh; mov es, bx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000165a11: push 0x2; add rdi, 0x68; jmp rcx; 
0x00000000174fd1: push 0x2; call qword ptr [rax+0x340]; 
0x000000001759d2: push 0x2; xor r12d, r12d; call qword ptr [rax+0x340]; 
0x000000001687f8: push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x000000001690b1: push 0x42b4864; and eax, 0x28; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169121: push 0x42b4864; and eax, 0x28; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169191: push 0x42b4864; and eax, 0x28; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f2: push 0x42b4864; and eax, 0x28; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169256: push 0x42b4864; and eax, 0x28; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c1: push 0x42b4864; and eax, 0x28; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169344: push 0x42b4864; and eax, 0x28; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x00000000165c53: push 0x438b48ff; jo short 0x0000000000165be3; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x0000000011a295: push 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x00000000090405: push 0x48000003; mov edx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000128cf4: push 0x48000004; mov dword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x000000001a1815: push 0x48; add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001b542f: push 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001630f0: push 0x48ee8948; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000e7091: push 0x48ff894c; mov esi, [rsp+0x60]; call r12; 
0x000000000c2f68: push 0x49001104; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001666d9: push 0x4c388b48; mov esi, edi; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000167a44: push 0x4cffff9f; lea eax, [rip-0x603f]; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000012ade2: push 0x5004b70f; and eax, 0x1000; ret; 
0x0000000012ad62: push 0x5004b70f; and eax, 0x100; ret; 
0x0000000012a962: push 0x5004b70f; and eax, 0x1; ret; 
0x0000000012ace2: push 0x5004b70f; and eax, 0x2000; ret; 
0x0000000012aae2: push 0x5004b70f; and eax, 0x200; ret; 
0x0000000012a9e2: push 0x5004b70f; and eax, 0x2; ret; 
0x0000000012abe2: push 0x5004b70f; and eax, 0x4000; ret; 
0x0000000012a8e2: push 0x5004b70f; and eax, 0x400; ret; 
0x0000000012ac62: push 0x5004b70f; and eax, 0x4; ret; 
0x0000000012ab62: push 0x5004b70f; and eax, 0x8000; ret; 
0x0000000012a862: push 0x5004b70f; and eax, 0x8; ret; 
0x000000000c0822: push 0x5; add [rax], al; ret; 
0x00000000144692: push 0x5b000001; pop rbp; pop r12; pop r13; ret; 
0x00000000119ff1: push 0x5bc88944; pop rbp; ret; 
0x0000000002e2e6: push 0x5c415d5b; pop r13; pop r14; pop r15; jmp rax; 
0x00000000054a70: push 0x5c415d5b; pop r13; pop r14; pop r15; ret; 
0x00000000053cea: push 0x5c415d5b; pop r13; ret; 
0x0000000011b917: push 0x5e415c41; ret; 
0x00000000166694: push 0x60438b48; mov dword ptr [rbx+0x58], 0x0; mov esi, [rbx+0x88]; mov rdi, r15; call qword ptr [rax+0x28]; 
0x00000000112f5f: push 0x6076110f; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x0000000017c676: push 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c488: push 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000052b4b: push 0x72ca3949; sbb cl, ch; sub bh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000112fb3: push 0x7e6f0ff3; jo short 0x0000000000112fc9; adc [rdi+0x78], edi; ret; 
0x000000000b7c00: push 0xc8b0010; mov cl, [rbx-0x37d67dfc]; ret; 
0x000000001223c8: push 0xf; add [rax-0x7d], cl; call qword ptr [rax]; 
0x00000000122318: push 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000003a196: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a123; loopne 0x000000000003a1a3; ret; 
0x0000000003a1b6: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a143; loopne 0x000000000003a1ca; ret; 
0x0000000003a1f6: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a183; loopne 0x000000000003a204; ret; 
0x0000000003a296: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a223; loopne 0x000000000003a2a6; ret; 
0x00000000074dd8: push 0xffffff7; adc esi, 0xe9fffff9; loopne 0x0000000000074de5; jmp qword ptr [rsi+0xf]; 
0x0000000007468f: push 0xffffff7; xor esi, 0xe9ffffe6; scasb [rdi]; out 0xff, eax; jmp qword ptr [rsi-0x70]; 
0x000000001915f4: push 0xffffffff80000006; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000738f3: push 0xffffffff85fffff7; ror byte ptr [rdi], 0x88; imul esi, ebp, 0xffffffff; inc dword ptr [rcx]; ret; 
0x00000000153c3b: push 0xffffffff894cd231; test byte ptr [rax-0x77], 0xdf; mov rcx, r15; call r12; 
0x00000000073c85: push 0xffffffff89fffff7; ret; 
0x000000000ba254: push 0xffffffff8b001042; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000003cd71: push 0xffffffff8be9014c; sbb [rdi], ecx; ret far; 
0x000000001344b5: push 0xffffffff8d480004; adc eax, 0x4be61; cmovne rax, rdx; ret; 
0x0000000009991e: push 0xffffffffab740104; mov eax, 0x83; ret; 
0x000000000a89b4: push 0xffffffffc6f7000f; add [rax+rax], al; add [rbp-0x4b], dh; ret; 
0x00000000155629: push 0xffffffffe8fffffe; out dx, al; adc dh, bh; jmp qword ptr [rsi+0x66]; 
0x0000000010b364: push 0xffffffffe8fffffe; ret; 
0x000000000720e0: push 0xffffffffe9fffffa; ret; 
0x000000000d8137: push 0xfffffffff0478d48; ret; 
0x000000000adad9: push 0xfffffffff7000029; ret; 
0x000000001afb99: push 0xfffffffffbc5c9f5; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000000ce639: push 0xfffffffffff181e9; call qword ptr [rax+0x18b9]; 
0x0000000009ecfc: push 0xfffffffffffc91e9; jmp qword ptr [rsi+0xf]; 
0x00000000053d48: push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70]; 
0x00000000148865: push 0xffffffffffffff88; cmovns edi, [rcx]; ret; 
0x0000000012e222: push 0xffffffffffffffa2; out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x000000000ed8e2: push 0xffffffffffffffc5; hlt; jmp qword ptr [rsi+0x2e]; 
0x000000001677b2: push 0xffffffffffffffef; cld; jmp qword ptr [rsi+0x2e]; 
0x000000001433d1: push 0xffffffffffffffef; jmp qword ptr [rsi+0x2e]; 
0x0000000015e6f1: push 0xfffffffffffffffb; dec dword ptr [rcx-0x75]; and al, 0x38; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000015fd17: push 0xfffffffffffffffd; jmp qword ptr [rsi+0xf]; 
0x000000000bf42f: push qword ptr [rax]; leave; mov [rax], cl; mov rax, rdi; ret; 
0x00000000174f7f: push qword ptr [rax]; mov rax, [rip+0xa3f40]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x0000000011d7fd: push qword ptr [rbp+0x10]; mov eax, 0x1; ret; 
0x000000001a6217: push qword ptr [rbp+0x1a]; xor eax, eax; ret; 
0x00000000120d40: push qword ptr [rbp+0x1d]; mov rdi, [r13]; call rbx; 
0x0000000004303f: push qword ptr [rbp+0x1e]; mov rax, [rip+0x1d5dc7]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000120c72: push qword ptr [rbp+0x4b]; mov rdi, [r12]; call rbx; 
0x0000000011ff30: push qword ptr [rbp+0x4d]; mov rdi, [r13]; call rbx; 
0x00000000112fdd: push qword ptr [rbp+0x5]; mov [rdi], si; xor eax, eax; ret; 
0x00000000120d14: push qword ptr [rbp+0x69]; mov rdi, [r13]; call rbx; 
0x000000001bb22e: push qword ptr [rbp+rax-0x18]; stosb [rdi]; mov eax, [0x31e95def8948fffb]; shl esi, 0x1; call qword ptr [rax-0x5e1f00d]; 
0x00000000061fb0: push qword ptr [rbp+rcx+0x44]; mov eax, eax; ret; 
0x000000001bb3d1: push qword ptr [rbp+rdx+0x48]; mov eax, [rdi+0x20]; test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x0000000013e992: push qword ptr [rbp-0x15]; pop rbx; ret; 
0x0000000014b1f3: push qword ptr [rbp-0x16]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000132641: push qword ptr [rbp-0x1a]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008e910: push qword ptr [rbp-0x40]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000042760: push qword ptr [rbx+0x1]; ret; 
0x00000000053a16: push qword ptr [rbx+0x3]; xor eax, eax; ret; 
0x00000000187bdd: push qword ptr [rbx+0x634f0004]; or al, 0x8a; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000007fe5f: push qword ptr [rbx+rdx*2+0x48]; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000167832: push qword ptr [rcx]; in eax, dx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x000000001184aa: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000921a1: push qword ptr [rcx]; rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; xor eax, eax; ret; 
0x0000000015b7d8: push qword ptr [rcx]; ror byte ptr [rax-0x75], 0x7d; and [rcx-0x7717dbfc], cl; ret far; 
0x0000000015b7d9: push qword ptr [rcx]; ror byte ptr [rax-0x75], 0x7d; and [rcx-0x7717dbfc], cl; ret far; 
0x000000000b0dc7: push qword ptr [rcx]; ror byte ptr [rax-0x77], cl; ret; 
0x0000000013269d: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000095cc8: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x3; ret; 
0x0000000008a546: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x0000000016b15e: push qword ptr [rcx]; ror byte ptr [rcx+0x1], 0xdd; call rbp; 
0x00000000117b55: push qword ptr [rcx]; shr al, 0x33; ret far; 
0x000000000e66bc: push qword ptr [rdi+0x1]; ret; 
0x000000000eac99: push qword ptr [rdi+0x1c]; hlt; mov eax, esi; syscall; 
0x0000000011ebdc: push qword ptr [rdi+0x21]; ret; 
0x00000000128410: push qword ptr [rdi+0x25]; ret; 
0x00000000128656: push qword ptr [rdi+0x2f]; ret; 
0x00000000126344: push qword ptr [rdi+0x31]; mov r8d, eax; mov eax, r8d; ret; 
0x000000000ea66c: push qword ptr [rdi+0x31]; ret; 
0x000000000e576a: push qword ptr [rdi+0x3]; ret; 
0x0000000009c52a: push qword ptr [rdi+0x3]; xor eax, eax; ret; 
0x0000000011511c: push qword ptr [rdi+0x41]; ret; 
0x000000000a09c1: push qword ptr [rdi+0x4]; ret; 
0x000000000427e1: push qword ptr [rdi+0x4c]; ret; 
0x0000000011a256: push qword ptr [rdi+0x4f]; ret; 
0x00000000046c8c: push qword ptr [rdi+0x51]; ret; 
0x00000000114997: push qword ptr [rdi+0x56]; ret; 
0x00000000061f30: push qword ptr [rdi+0x5]; ret; 
0x000000000ea45f: push qword ptr [rdi+0x5e]; ret; 
0x0000000011acb2: push qword ptr [rdi+0x63]; ret; 
0x000000000a049f: push qword ptr [rdi+0x66]; ret; 
0x00000000127825: push qword ptr [rdi+0x68]; ret; 
0x000000001217c7: push qword ptr [rdi+0x6]; ret; 
0x000000000ea512: push qword ptr [rdi+0x6b]; ret; 
0x000000000a03df: push qword ptr [rdi+0x6e]; ret; 
0x000000001278df: push qword ptr [rdi+0x76]; ret; 
0x00000000125cc5: push qword ptr [rdi+0x78]; ret; 
0x0000000012669e: push qword ptr [rdi+0x7]; ret; 
0x0000000011936f: push qword ptr [rdi+0x7e]; ret; 
0x00000000042795: push qword ptr [rdi+0x8]; ret; 
0x000000000a0a84: push qword ptr [rdi+0x9]; ret; 
0x000000000a055b: push qword ptr [rdi+0xa]; mov eax, r8d; ret; 
0x00000000061f63: push qword ptr [rdi+0xa]; ret; 
0x00000000115232: push qword ptr [rdi+0xb]; ret; 
0x00000000113ef2: push qword ptr [rdi+0xb]; xor eax, eax; ret; 
0x0000000015da4c: push qword ptr [rdi+rax+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000007f866: push qword ptr [rdi+rcx+0x48]; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000011f43e: push qword ptr [rdi+rcx+0x5d]; lea rax, [rip+0x101ff7]; pop r12; pop r13; ret; 
0x0000000015d5be: push qword ptr [rdi+rdi*2+0x48]; mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000e56b4: push qword ptr [rdi-0x30]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000113d9f: push qword ptr [rdi-0x38]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000017b2ec: push qword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000042e46: push qword ptr [rdx+rcx+0x48]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000015de21: push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015de1b: push qword ptr [rip+0x84727]; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dce2: push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dcdc: push qword ptr [rip+0x84866]; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000001190ea: push qword ptr [rsi+0x1b]; cmp eax, 0xffffffa1; je short 0x00000000001190f8; neg eax; ret; 
0x000000001192fa: push qword ptr [rsi+0x1b]; cmp eax, 0xffffffa1; je short 0x0000000000119308; neg eax; ret; 
0x00000000095d74: push qword ptr [rsi+0x9]; neg eax; ret; 
0x00000000095dc0: push qword ptr [rsi+0xd]; neg eax; ret; 
0x0000000012941f: push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x0000000015d8a6: push qword ptr [rsi+rcx+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015321d: push qword ptr [rsi+rdi*8]; jmp qword ptr [rsi+0x2e]; 
0x00000000045e47: push qword ptr [rsi+rdi+0x31]; rol byte ptr [rax+0x775003f], 0x5b; ret; 
0x000000000906af: push qword ptr [rsi+rdx+0x48]; sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x00000000167cdd: push qword ptr [rsi]; add [rax], al; call qword ptr [rax]; 
0x00000000029e11: push qword ptr [rsp+rbp+0x4c]; mov esi, esp; mov edi, ebp; call r15; 
0x000000000a2649: push qword ptr [rsp+rcx+0x48]; add esp, 0x8; ret; 
0x00000000090520: push r10; call rax; 
0x00000000053b50: push r10; ret; 
0x000000001685b0: push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000165b96: push r12; mov eax, 0x1; ret; 
0x000000000a9941: push r13; adc [rax], al; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x000000001685ae: push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x0000000011bfeb: push r14; hlt; call qword ptr [rax+0x19058b48]; 
0x000000000a79b8: push r8; add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x00000000090b1c: push r8; mov fs:[0x300], rdi; ret; 
0x000000001685d7: push rax; adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015f837: push rax; adc [rbp-0x17bf040], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x0000000008f219: push rax; adc [rbx-0x2fd6efb9], cl; ret; 
0x000000000a0d25: push rax; add [rax-0x77], ecx; adc eax, 0x17869a; ret; 
0x000000000c5c0e: push rax; add [rax-0x77], ecx; ret; 
0x00000000076c0b: push rax; add [rax], eax; add [rax], al; mov rbx, rcx; jmp rsi; 
0x000000000a79b9: push rax; add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x00000000142fb7: push rax; add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+0x2], 0x0; ret; 
0x0000000009bf2d: push rax; add [rdi], rax; ret; 
0x000000000b13fc: push rax; add al, 0x48; add eax, ecx; ret; 
0x000000000ba00d: push rax; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000b14a6: push rax; add al, bl; nop [rax]; mov [rax], ecx; ret; 
0x0000000013ea47: push rax; add rsp, 0x8; ret; 
0x00000000167f4f: push rax; and [rax-0x75], cl; jge short 0x0000000000167f55; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000012a51e: push rax; and eax, 0x1000; ret; 
0x0000000012a486: push rax; and eax, 0x100; ret; 
0x00000000129f9e: push rax; and eax, 0x1; ret; 
0x0000000012a3ee: push rax; and eax, 0x2000; ret; 
0x0000000012a16e: push rax; and eax, 0x200; ret; 
0x0000000012a03e: push rax; and eax, 0x2; ret; 
0x0000000012a2ae: push rax; and eax, 0x4000; ret; 
0x00000000129efe: push rax; and eax, 0x400; ret; 
0x0000000012a34e: push rax; and eax, 0x4; ret; 
0x0000000012a20e: push rax; and eax, 0x8000; ret; 
0x00000000129e5e: push rax; and eax, 0x8; ret; 
0x0000000013b812: push rax; call far fword ptr [rax+0x4c]; 
0x0000000015d53f: push rax; call qword ptr [rax+0x20]; 
0x0000000002f4d2: push rax; call r13; 
0x0000000002ab0f: push rax; call rbx; 
0x0000000016cce8: push rax; cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x0000000009c05c: push rax; cmpxchg [rdi], rcx; jne short 0x000000000009c088; xor eax, eax; ret; 
0x0000000009cd8e: push rax; cmpxchg [rdi], rdx; jne short 0x000000000009cd87; xor eax, eax; ret; 
0x000000001183af: push rax; dec dword ptr [rax-0x77]; ret; 
0x0000000014473c: push rax; hlt; call qword ptr [rax-0x3fce2dcf]; 
0x00000000073ea6: push rax; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000011ba6c: push rax; idiv edi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000001bb8de: push rax; in eax, dx; dec dword ptr [rax-0x75]; add eax, 0x5d5e0; call qword ptr [rax+0x370]; 
0x00000000162d3f: push rax; insb [rdi], dx; mov eax, 0x1; ret; 
0x0000000008275f: push rax; insd [rdi], dx; cli; jmp qword ptr [rsi+0x2e]; 
0x00000000117767: push rax; jmp qword ptr [rsi-0x7d]; 
0x00000000118412: push rax; jmp qword ptr [rsi-0x7d]; 
0x00000000119898: push rax; mov [rdi+0x38], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x00000000166322: push rax; mov [rsi+0x10], rax; ret; 
0x000000000a073c: push rax; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x00000000090b1d: push rax; mov fs:[0x300], rdi; ret; 
0x0000000010aac6: push rax; mov rax, [rbp-0x1f0]; mov rcx, [r12]; call rax; 
0x00000000175532: push rax; mov rax, [rip+0xa398e]; mov r8, [rbx+0x10]; call qword ptr [rax+0x340]; 
0x0000000002ee5c: push rax; mov rax, [rsp+0x18]; call rax; 
0x0000000002d280: push rax; mov rax, [rsp+0x28]; call rax; 
0x00000000115d2d: push rax; mov rax, r8; pop rbp; ret; 
0x000000001666f5: push rax; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000301c6: push rax; mov rdi, [rsp+0x48]; call r14; 
0x00000000033970: push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x10]; call rax; 
0x000000000321c7: push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x18]; call rax; 
0x000000000311b5: push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x28]; call rax; 
0x0000000002d83b: push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x18]; call rax; 
0x00000000153a24: push rax; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68]; 
0x000000000d911c: push rax; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000132ab6: push rax; mov rsi, rdx; call rax; 
0x00000000083600: push rax; movups [rax], xmm0; ret; 
0x000000000835c5: push rax; movups [rax], xmm1; ret; 
0x000000000a0daa: push rax; or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x00000000174962: push rax; or [rax-0x75], cl; cmovs eax, [rcx]; ror dword ptr [rax+0x39], 0x1; ret far; 
0x0000000016584c: push rax; or [rcx], dh; sar byte ptr [rbx], 0x14; ret; 
0x00000000099e6d: push rax; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x0000000009ee44: push rax; pop rbx; pop rbp; pop r12; ret; 
0x000000001750eb: push rax; pop rbx; ret; 
0x0000000015d200: push rax; pop rsp; lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x0000000005e360: push rax; ret far; 
0x00000000041563: push rax; ret; 
0x0000000008f20a: push rax; sbb [rbx-0x2fd6efb9], cl; ret; 
0x00000000083d45: push rax; sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x000000000a93ac: push rax; scasb [rdi]; add [rax], eax; cmove rax, rdx; ret; 
0x00000000133c09: push rax; shr ax, 0xe; and eax, 0x1; ret; 
0x000000000532f7: push rax; std; jmp qword ptr [rsi+0xf]; 
0x00000000082b42: push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x00000000110a2d: push rbp; adc [rax-0x77], cl; or [r8-0x7d], r9b; ret; 
0x00000000149e5b: push rbp; adc [rax-0x7d], cl; ret; 
0x000000000a9949: push rbp; adc [rax], al; cmove rax, rdx; ret; 
0x000000000a9942: push rbp; adc [rax], al; lea rax, [rip+0x1055b4]; cmove rax, rdx; ret; 
0x0000000009cd5d: push rbp; add [rbp+0x7], dh; xor eax, eax; pop rbp; ret; 
0x000000000551dd: push rbp; call qword ptr [rax+0x48068b48]; 
0x000000001afb1a: push rbp; clc; jmp qword ptr [rsi+0x66]; 
0x0000000007ab06: push rbp; cmp [rax+0x39], cl; ret; 
0x000000001bb6e2: push rbp; idiv bh; pop rbx; mov qword ptr [rip+0x5f7cf], 0x0; ret; 
0x0000000002c4d2: push rbp; mov [rax-0x7d], cl; ret; 
0x00000000099b2a: push rbp; nop; add rsp, 0x18; ret; 
0x00000000133a07: push rbp; or byte ptr [rax-0x77], 0xda; movups [rbp-0x78], xmm7; call rax; 
0x0000000013313e: push rbp; or byte ptr [rcx+rcx*4-0x16], 0xf; adc [rbp-0x78], ebp; call rax; 
0x00000000132f28: push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], ebx; call rax; 
0x0000000013372a: push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], edi; call rax; 
0x00000000133658: push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esi; call rax; 
0x000000001331a0: push rbp; or byte ptr [rcx+rcx*4-0x1e], 0xf; adc [rbp-0x78], esp; call rax; 
0x00000000053d47: push rbp; push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70]; 
0x000000001685af: push rbp; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x0000000008eefb: push rbp; ret far; 
0x000000000f46da: push rbp; sbb [rdx+rdx*2-0x73], dh; add [rax-0x7d], ecx; ret; 
0x00000000053017: push rbp; sbb edi, edi; dec dword ptr [rax-0x77]; ret; 
0x000000000601b4: push rbp; sub dh, al; add [rip-0x13e17], ch; jmp qword ptr [rsi-0x70]; 
0x0000000005ed84: push rbp; sub dh, al; add [rip-0x6f117], ch; jmp qword ptr [rsi-0x70]; 
0x0000000008abca: push rbp; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x000000001b224a: push rbp; tzcnt eax, eax; ret; 
0x000000001320ad: push rbx; add [rax-0x73], ecx; add [r8-0x77], ecx; ret; 
0x000000000e897b: push rbx; add [rax-0x7d], ecx; ret; 
0x00000000112c96: push rbx; add al, 0x5b; pop rbp; pop r14; ret; 
0x0000000007fe61: push rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000009051e: push rbx; and [rcx+0x52], al; call rax; 
0x000000001b1950: push rbx; bsf eax, eax; add rax, rdx; ret; 
0x0000000019d77a: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000001b238e: push rbx; bsf eax, eax; ret; 
0x000000001a2919: push rbx; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000019dac9: push rbx; bsf eax, eax; vzeroupper; ret; 
0x0000000017133f: push rbx; cld; jmp qword ptr [rsi+0x66]; 
0x0000000014c09e: push rbx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000083c5f: push rbx; je short 0x0000000000083cbd; pop rbp; pop r12; ret; 
0x000000000fecf3: push rbx; jmp far fword ptr [rcx]; 
0x000000000d6e9c: push rbx; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d811c: push rbx; lea rax, [rdi-0x10]; ret; 
0x000000000f65b4: push rbx; lea rdx, [rip+0xde3e4]; movsxd rax, [rdx+r10*4]; add rax, rdx; notrack jmp rax; 
0x0000000009a01b: push rbx; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x0000000012569f: push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x00000000120afc: push rbx; mov rdi, rbp; xor edx, edx; mov esi, 0x1; call r12; 
0x000000000852d3: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008ccab: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000c26e2: push rbx; movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret; 
0x000000000c0e92: push rbx; movq [rdi+0x30], mm7; ret; 
0x000000000c4142: push rbx; movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000a4f6f: push rbx; nop edx, edi; cmp byte ptr [rip+0x17b56d], 0x0; jne short 0x00000000000a4f80; ret; 
0x000000000896c2: push rbx; or [rax-0x75], cl; xor ecx, [rax-0x7d]; ret; 
0x000000001203fa: push rbx; or [rax-0x7d], cl; ret; 
0x000000000ecec7: push rbx; pop rax; jne short 0x00000000000eced0; ret; 
0x000000000d5fe9: push rbx; ret; 
0x00000000133cd8: push rbx; sbb al, 0x74; adc bl, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x0000000015e1e1: push rbx; sbb bl, ch; mov edx, 0xfd8536e8; jmp qword ptr [rsi+0xf]; 
0x000000000ed12a: push rbx; setne al; ret; 
0x000000000a9d89: push rcx; adc [rax], al; cmove rax, rdx; ret; 
0x000000000a9d82: push rcx; adc [rax], al; lea rax, [rip+0x1051b4]; cmove rax, rdx; ret; 
0x000000000a94ee: push rcx; adc [rax], al; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000ed063: push rcx; add [rax], al; jne short 0x00000000000ed070; mov eax, 0x40; ret; 
0x0000000018d6a4: push rcx; add al, bl; nop [rax+rax]; mov [rcx], edx; ret; 
0x0000000018d6e3: push rcx; add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x00000000174c5d: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000175450: push rcx; add rsp, 0x30; pop rbx; ret; 
0x00000000094cb7: push rcx; cli; jmp qword ptr [rsi+0xf]; 
0x000000000c5373: push rcx; cmp edx, [rip-0x7f74b800]; sub [rdx], al; add [rax], al; ret; 
0x0000000016575c: push rcx; in eax, dx; call qword ptr [rax-0x5e1f00d]; 
0x00000000165734: push rcx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000001a40ba: push rcx; jl short 0x00000000001a4105; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x000000001a40c1: push rcx; jl short 0x00000000001a410c; adc [rcx-0x1], edi; ret; 
0x000000001a4221: push rcx; jl short 0x00000000001a426c; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4228: push rcx; jl short 0x00000000001a4273; adc [rcx+0x7], edi; ret; 
0x00000000125a6b: push rcx; mov edx, 0xf883000f; add [rdi+0x4], edi; ret; 
0x000000000906b6: push rcx; mov rcx, r10; call rax; 
0x0000000006734b: push rcx; or [rbx-0x7af0fe01], al; ret; 
0x00000000046c8e: push rcx; ret; 
0x0000000012c6fe: push rcx; sldt [rbx+0x1a7f01fa]; add rsp, 0x18; ret; 
0x000000000a8772: push rcx; str [rax-0x73]; add eax, 0x12254; cmove rax, rdx; ret; 
0x0000000008834e: push rcx; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x000000000c40f3: push rdi; adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000c3ff1: push rdi; adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret; 
0x000000000a9712: push rdi; adc [rax], al; lea rax, [rip+0x105824]; cmove rax, rdx; ret; 
0x000000000c40d0: push rdi; adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000c4051: push rdi; adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret; 
0x000000000c4031: push rdi; adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret; 
0x000000000c3f72: push rdi; adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret; 
0x000000000c2312: push rdi; adc al, 0x48; lea eax, [rdi+0x15]; ret; 
0x00000000055b07: push rdi; add [rcx-0x77], ecx; push rsp; ret; 
0x000000000c3da8: push rdi; add al, 0x30; in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000c3dba: push rdi; add al, 0x30; in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000c130a: push rdi; add al, 0x48; lea eax, [rdi+0x5]; ret; 
0x000000000c215a: push rdi; add al, 0x48; lea eax, [rdi+0x6]; ret; 
0x00000000182939: push rdi; add al, 0x48; mov [rdi], ecx; ret; 
0x000000000c0cb4: push rdi; add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000c3d7a: push rdi; add dh, [rax]; in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000c13bc: push rdi; add eax, 0xc478d48; ret; 
0x000000000c221c: push rdi; add eax, 0xd478d48; ret; 
0x000000000c065c: push rdi; add eax, 0xde88349; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c3dd8: push rdi; add esi, [rax]; in eax, dx; mov [rdi+0x7], ch; ret; 
0x000000000d3086: push rdi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000092883: push rdi; and [rax-0x77], cl; ja short 0x00000000000928a1; ret; 
0x00000000040770: push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x00000000093294: push rdi; and al, 0x90; xor eax, eax; ret; 
0x000000000a8626: push rdi; call far fword ptr [rdx+0x31]; 
0x0000000017c708: push rdi; clc; ret; 
0x0000000017c880: push rdi; cld; ret; 
0x0000000017d3a7: push rdi; cli; mov [rdi-0x4], ecx; ret; 
0x00000000182219: push rdi; cmc; mov [rdi-0x4], ecx; ret; 
0x000000000c0900: push rdi; cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000c0929; jne 0x00000000000c0d90; ret; 
0x0000000011989c: push rdi; cmp [rax-0x7d], cl; lock and [rax-0x77], cl; ret; 
0x00000000182199: push rdi; hlt; mov [rdi-0x4], ecx; ret; 
0x000000001bbb9f: push rdi; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000000c0cc2: push rdi; inc ebx; nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000a6fc8: push rdi; lea rdx, [rip+0x12bdb0]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000018207a: push rdi; mov [rdi-0x8], rcx; ret; 
0x000000001675b2: push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x000000000c3dfa: push rdi; or [rax], dh; in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000c3e1c: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000c3e5a: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret; 
0x000000000974d0: push rdi; or [rbx+0x47521f8], al; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000054661: push rdi; or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000008a084: push rdi; or [rdi], cl; mov dh, 0x0; ret; 
0x00000000141e1f: push rdi; or al, 0x48; mov [rsi], edi; ret; 
0x000000000c15a0: push rdi; or eax, 0x1c478d48; ret; 
0x000000000c2410: push rdi; or eax, 0x1d478d48; ret; 
0x000000000c08a0: push rdi; or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x0000000008d795: push rdi; sbb [rax-0x77], cl; movups [rdi+0x8], xmm0; ret; 
0x0000000016cdae: push rdi; sbb [rcx+rcx*4-0x40], al; ret; 
0x00000000150d25: push rdi; sbb [rip+0x1f88300], cl; jg short 0x0000000000150d48; pop rbp; ret; 
0x0000000004602e: push rdi; sbb eax, 0x22ae800; or [rax], al; pop rbx; ret; 
0x0000000017d5a7: push rdi; stc; mov [rdi-0x4], ecx; ret; 
0x0000000017cdca: push rdi; std; mov [rdi-0x2], cx; ret; 
0x0000000017d1a7: push rdi; sti; mov [rdi-0x4], ecx; ret; 
0x0000000016d095: push rdi; sub [rax+0x1], bh; ret; 
0x0000000016ce6b: push rdi; sub [rdi], cl; adc [rdi+0x18], eax; ret; 
0x000000000859d1: push rdi; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000019d988: push rdi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000c40b0: push rdi; wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000ba80b: push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000e56e0: push rdi; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b4b98: push rdi; xor eax, eax; ret; 
0x0000000018210a: push rdi; xrelease mov [rdi-0x8], rcx; ret; 
0x000000000c024a: push rdx; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000e55fa: push rdx; add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000ec4d0: push rdx; add rsp, 0x38; ret; 
0x00000000175379: push rdx; add rsp, 0x70; pop rbx; ret; 
0x00000000090521: push rdx; call rax; 
0x000000001715aa: push rdx; cmp edi, edx; dec dword ptr [rbx-0x17b7b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x0000000016565b: push rdx; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x0000000014e6fa: push rdx; mov dh, 0xff; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000142e8d: push rdx; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000ed093: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ed095: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000e7351: push rdx; mov rdx, r11; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000001b328d: push rdx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000a7a26: push rdx; or [rax-0x7b], cl; shl byte ptr [rbp-0xd], cl; ret; 
0x000000001355ca: push rdx; or al, 0xfe; call qword ptr [rax-0x18]; 
0x00000000053b51: push rdx; ret; 
0x0000000017b2f9: push rdx; sar byte ptr [rsi], 0x41; jmp rcx; 
0x000000000a26a4: push rdx; sbb [rax-0x9], cl; fimul st, dword ptr [rax-0x77]; ror dword ptr [rax+0x21], cl; ret; 
0x0000000013562a: push rdx; std; std; call qword ptr [rax-0x18]; 
0x000000000a87f2: push rdx; str [rax-0x73]; add eax, 0x12374; cmove rax, rdx; ret; 
0x00000000105afc: push rsi; adc [rax+0x63], cl; ret far; 
0x000000000a960c: push rsi; adc [rax], al; test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000bff27: push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x00000000103036: push rsi; adc eax, 0xc2e9ffff; loop 0x000000000010303d; call qword ptr [rax+0x24448b48]; 
0x00000000182c41: push rsi; add [rbx+0x157890e], ecx; mov [rdi], ecx; ret; 
0x00000000056177: push rsi; add [rcx-0x77], ecx; push rsp; ret; 
0x000000001a470d: push rsi; add ah, [rdx-0xf]; jl short 0x00000000001a475b; adc [rsi+0x3], edx; ret; 
0x000000000c3d74: push rsi; add ah, [rsi-0x77]; js 0xffffffffed3c3fd5; mov [rdi+0x3], ch; ret; 
0x000000000c3da3: push rsi; add al, 0x89; js 0xffffffffed3c4203; mov [rdi+0x5], ch; ret; 
0x000000000c3db4: push rsi; add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x00000000182bd1: push rsi; add cl, [rbx+0x257890e]; mov [rdi], ecx; ret; 
0x00000000041971: push rsi; add eax, 0x1a0759; mulss xmm0, [rip+0x1a0751]; ret; 
0x0000000004194c: push rsi; add eax, 0x1a078e; mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000415e0: push rsi; add eax, 0x1a0aba; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415b2: push rsi; add eax, 0x1a0af8; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000001828c2: push rsi; add eax, 0x480e8b48; mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000c13b5: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000c2215: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x000000000bfd35: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; ret; 
0x000000001a47a3: push rsi; add eax, 0x487cf162; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001756eb: push rsi; add eax, 0x840fd284; ret far; 
0x00000000182b61: push rsi; add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret; 
0x000000000c1323: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+0x6]; ret; 
0x000000000c2173: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+0x7]; ret; 
0x000000000bfcd3: push rsi; add ecx, [rcx+0x357890f]; ret; 
0x000000000c3dd3: push rsi; add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x0000000014369a: push rsi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000a93a1: push rsi; and byte ptr [rcx+rax+0x48080000], 0x8d; add eax, 0x1ae50; cmove rax, rdx; ret; 
0x0000000017c816: push rsi; clc; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000017c832: push rsi; clc; mov [rdi-0x8], rdx; ret; 
0x0000000017d186: push rsi; clc; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d386: push rsi; clc; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017d586: push rsi; clc; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000017cfa1: push rsi; cld; mov [rdi-0x4], edx; ret; 
0x0000000017c9f5: push rsi; cld; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbd5: push rsi; cld; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cdb5: push rsi; cld; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cf95: push rsi; cld; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x000000000d42cb: push rsi; cmc; jmp qword ptr [rsi-0x70]; 
0x000000001a5d56: push rsi; cmc; sub eax, edx; ret; 
0x00000000080f9a: push rsi; cmp [rax+0x39], cl; ret; 
0x0000000011bfec: push rsi; hlt; call qword ptr [rax+0x19058b48]; 
0x0000000011bf6c: push rsi; hlt; call qword ptr [rax-0x5e1f00d]; 
0x000000001a5d46: push rsi; hlt; sub eax, edx; ret; 
0x00000000076196: push rsi; idiv bh; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x000000001b7156: push rsi; idiv edi; jmp qword ptr [rsi+0xf]; 
0x00000000099b76: push rsi; je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x00000000132a96: push rsi; je short 0x0000000000132aa0; mov eax, 0x7; ret; 
0x000000001a45f6: push rsi; loopne 0x00000000001a45bc; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x00000000182102: push rsi; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000182072: push rsi; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000c3e54: push rsi; or [rax-0x77], cl; jns 0xffffffffed3c46b5; mov [rdi+0xc], ch; ret; 
0x000000000c3df4: push rsi; or [rax-0x77], cl; js 0xffffffffed3c4655; mov [rdi+0x9], ch; ret; 
0x000000000c3e15: push rsi; or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x000000000fd522: push rsi; or [rbx-0x78f0fe08], al; ret far; 
0x000000000c1597: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000c2407: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000bfec7: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x000000000bff07: push rsi; psllq mm1, [rdi]; jg short 0x00000000000bff14; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c0bf7: push rsi; psllq mm1, [rdi]; jg short 0x00000000000c0c04; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c3217: push rsi; psllq mm1, [rdi]; jg short 0x00000000000c3224; movdqu [rdi+0xf], xmm2; ret; 
0x000000000c3d07: push rsi; psllq mm1, [rdi]; jg short 0x00000000000c3d14; movdqu [rdi+0xf], xmm2; ret; 
0x00000000041823: push rsi; ret; 
0x000000000460cb: push rsi; sbb eax, 0x1f88300; jg short 0x00000000000460f0; pop rbp; ret; 
0x000000001a45a5: push rsi; std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000000e59c4: push rsi; sti; jmp qword ptr [rsi+0xf]; 
0x0000000008a04b: push rsi; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x000000000733bf: push rsi; sub dh, al; add [rcx-0x7d], cl; ret; 
0x000000001a5d36: push rsi; sub eax, edx; ret; 
0x000000001a5d26: push rsi; sub eax, edx; ret; 
0x00000000182312: push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000104c7e: push rsi; xor [rcx+0x63], cl; adc al, 0x97; add rdx, r15; notrack jmp rdx; 
0x00000000118bcb: push rsi; xor ax, ax; ret; 
0x0000000011a247: push rsp; add [rax], al; mov eax, 0x10; syscall; 
0x00000000119fb2: push rsp; add [rax], al; mov eax, ebx; mov ebp, fs:[r10]; syscall; 
0x0000000011a278: push rsp; add [rax], al; mov r8d, eax; mov eax, 0x10; syscall; 
0x0000000004196a: push rsp; add eax, 0x1a0750; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041945: push rsp; add eax, 0x1a0775; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x00000000041426: push rsp; add eax, 0x1a0c64; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x00000000041ba8: push rsp; add eax, 0xf66001a; fild st, dword ptr [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x000000000b147a: push rsp; and al, 0x10; mov [rax], rdx; ret; 
0x000000000ea54f: push rsp; and al, 0x10; mov eax, 0xf7; syscall; 
0x000000000c6934: push rsp; and al, 0x10; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000012792a: push rsp; and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x0000000012e5f3: push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax; 
0x0000000011ace9: push rsp; and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011ada9: push rsp; and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000b1431: push rsp; and al, 0x16; mov [rax+0x6], dl; add rax, rcx; ret; 
0x00000000090199: push rsp; and al, 0x17; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x000000000b13b2: push rsp; and al, 0x18; mov [rax], rdx; add rax, rcx; ret; 
0x000000000e9e04: push rsp; and al, 0x18; mov edi, [rsp+0x30]; call qword ptr [rsp+0x50]; 
0x000000001674a2: push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000167469: push rsp; and al, 0x18; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000001385bf: push rsp; and al, 0x18; mov esi, [rsp+0x48]; mov edi, [rsp+0x24]; call qword ptr [rsp+0x70]; 
0x000000000e9a94: push rsp; and al, 0x18; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x50]; 
0x00000000138e11: push rsp; and al, 0x18; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x60]; 
0x000000000ea54a: push rsp; and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x0000000012e4e9: push rsp; and al, 0x20; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x0000000015d961: push rsp; and al, 0x20; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000001106d3: push rsp; and al, 0x20; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x00000000119f07: push rsp; and al, 0x30; mov eax, 0x10; syscall; 
0x000000000d9808: push rsp; and al, 0x38; call r12; 
0x00000000137c9e: push rsp; and al, 0x38; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x50]; 
0x00000000136e63: push rsp; and al, 0x48; mov rdi, [rsp+0x18]; call qword ptr [rsp+0x70]; 
0x000000000e708f: push rsp; and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x0000000016446f: push rsp; and al, 0x70; call qword ptr [rax+0x30]; 
0x0000000016b69a: push rsp; and al, 0x8; call qword ptr [rax+0x8]; 
0x00000000125b9c: push rsp; and al, 0x8; mov eax, 0x38; syscall; 
0x00000000119aaa: push rsp; and al, 0x8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000008b4ec: push rsp; and al, 0x8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000b1410: push rsp; and al, 0xc; mov [rax+0x4], dx; add rax, rcx; ret; 
0x00000000167526: push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000000b14f1: push rsp; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000b14d8: push rsp; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000b13f8: push rsp; and al, 0xf4; mov [rax+0x4], dl; add rax, rcx; ret; 
0x000000000b14c0: push rsp; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x00000000096568: push rsp; and al, 0xf8; ret; 
0x000000000b13da: push rsp; and al, 0xfa; mov [rax+0x2], dl; add rax, rcx; ret; 
0x000000000b14a2: push rsp; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000001b1b40: push rsp; cmp ah, [rax]; sub eax, edx; ret; 
0x00000000198ca7: push rsp; cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000061b59: push rsp; cmp eax, 0xef894c05; call rax; 
0x000000001bb2a6: push rsp; fld st, qword ptr [rax]; test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x0000000013a728: push rsp; insb [rdi], dx; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001685b1: push rsp; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000b50db: push rsp; lea rax, [rdi+rax+0x10]; ret; 
0x00000000165b97: push rsp; mov eax, 0x1; ret; 
0x000000000ecf53: push rsp; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000004076b: push rsp; or dword ptr [rax], 0x2057034c; mov rax, r10; ret; 
0x0000000004142e: push rsp; or eax, 0x1a0c4c; orpd xmm0, xmm1; ret; 
0x000000001979a9: push rsp; or eax, 0x894d0000; ret far; 
0x0000000007b688: push rsp; or eax, [rax]; add [rbx-0x78f0d008], al; ret; 
0x000000000ed128: push rsp; push rbx; setne al; ret; 
0x0000000011f272: push rsp; ret far; 
0x0000000004181d: push rsp; ret; 
0x0000000010128a: push rsp; xchg ebp, eax; add [rcx+rax-0x16], cl; notrack jmp rdx; 
0x0000000002b8b3: pushfq; adc al, 0x0; mov rdi, rbx; call r14; 
0x00000000098f00: pushfq; adc eax, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000003e7c8: pushfq; add [rax], al; add [rbx-0x7bf0fe08], al; ret far; 
0x0000000016ca67: pushfq; cld; jmp qword ptr [rsi+0xf]; 
0x0000000016caf6: pushfq; cld; jmp qword ptr [rsi+0xf]; 
0x000000000f0918: pushfq; cmp eax, 0x634a000e; add al, 0xaa; add rax, rdx; notrack jmp rax; 
0x00000000120fe0: pushfq; fdiv st, st(5); jmp qword ptr [rsi+0x66]; 
0x000000001b99fe: pushfq; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000016a1d0: pushfq; loope 0x000000000016a1be; jmp qword ptr [rsi+0x66]; 
0x0000000016ad26: pushfq; nop [rax+rax]; ret; 
0x00000000103a74: pushfq; ret; 
0x000000000d7cb3: pushfq; shl bh, 0xd8; cmp esi, r8d; cmovg eax, edx; ret; 
0x000000001b4611: pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x000000001a197a: pushfq; shl bh, 0xd8; or eax, 0x1; vzeroupper; ret; 
0x0000000010d2b8: pushfq; sub [rip-0x137cb800], cl; or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x000000000f0264: pushfq; xor eax, eax; ret; 
0x000000001069e1: pxor mm0, mm0; and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x0000000008440f: pxor mm0, mm0; mov qword ptr [rax+0x50], 0x0; movups [rax+0x40], xmm0; pop rbx; ret; 
0x0000000008d85a: pxor mm0, mm0; mov qword ptr [rbx+0x58], 0x0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000016d25f: pxor mm0, mm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000008f2e6: pxor mm0, mm0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x000000001069e0: pxor xmm0, xmm0; and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x0000000008440e: pxor xmm0, xmm0; mov qword ptr [rax+0x50], 0x0; movups [rax+0x40], xmm0; pop rbx; ret; 
0x0000000008d859: pxor xmm0, xmm0; mov qword ptr [rbx+0x58], 0x0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000016d25e: pxor xmm0, xmm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x0000000008f2e5: pxor xmm0, xmm0; movups [rbx+0x48], xmm0; pop rbx; ret; 
0x0000000014b0cc: rcl bl, 0xed; dec dword ptr [rax+0x39]; ret; 
0x000000000dcdcb: rcl byte ptr [r11], 0x0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000b8d8d: rcl byte ptr [rax+rax], 0x1; add [rbp-0x77], cl; ret far; 
0x0000000009b216: rcl byte ptr [rax-0x3f76bba5], 0x5d; pop r12; pop r13; pop r14; ret; 
0x0000000009a703: rcl byte ptr [rax-0x3f76bba5], 0x5d; pop r12; ret; 
0x00000000198796: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x000000000c267e: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0x110d09]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e2e: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0x112379]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000013ecec: rcl byte ptr [rbx+0x48], 0x89; ret far; 
0x000000000dcdcc: rcl byte ptr [rbx], 0x0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000969b0: rcl byte ptr [rbx], 0x0; syscall; 
0x000000000db58a: rcl byte ptr [rcx+0x14], cl; add [rbx+0x1d7f01f8], al; add rsp, 0x8; ret; 
0x00000000173e03: rcl byte ptr [rcx], 0x0; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000029ccd: rcl byte ptr [rcx], 0x48; mov [rip+0x1f1d52], eax; ret; 
0x0000000009cda4: rcl byte ptr [rdi], 0x0; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x000000000918e7: rcl byte ptr [rsi], 0x83; loopne 0x00000000000918e3; jne short 0x00000000000918a2; pop rbx; ret; 
0x00000000091c1e: rcl dword ptr [rax+rax], 0xe8; sub bh, [rbx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x0000000014406c: rcr bh, 0x1; or eax, 0xe95d5b00; or ebx, edx; hlt; jmp qword ptr [rsi+0xf]; 
0x000000000411b9: rcr bl, 0x3a; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x0000000017d67c: rcr byte ptr [rax+0x6], 0x1; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018871d: rcr byte ptr [rax], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000008b642: rcr byte ptr [rbp+0x41], 0x1; pop rsp; ret; 
0x0000000016c211: rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; jmp rcx; 
0x0000000010629d: rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x0000000002be4a: rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000009ede9: rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x0000000003572f: rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000000813da: rcr byte ptr [rbp+0x41], cl; pop rsp; pop r13; jmp rax; 
0x00000000054667: rcr byte ptr [rbp+0x5b], 0x1; ret; 
0x0000000013b779: rcr byte ptr [rbp-0x3a], 0x7; add [rcx+0x5c], al; ret; 
0x0000000009a0c8: rcr byte ptr [rbx+0x44], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000012e3db: rcr byte ptr [rbx+0x48], cl; test eax, eax; cmovs rax, rdx; ret; 
0x0000000014213e: rcr byte ptr [rbx+0x4c], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x0000000015fdf9: rcr byte ptr [rbx+0x5d], 0x1; mov eax, r8d; ret; 
0x000000001bb30f: rcr byte ptr [rbx+0x5d], 0x1; pop r12; pop r13; pop r14; ret; 
0x000000000a9f30: rcr byte ptr [rbx+0x5d], 0x1; pop r12; ret; 
0x00000000059fbb: rcr byte ptr [rbx+0x5d], 0x1; ret; 
0x000000000898f7: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000045d1c: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000517c9: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000160891: rcr byte ptr [rbx+0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x000000000cf8b5: rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x000000000921ed: rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0x186c19]; pop rbx; mov eax, fs:[rax]; ret; 
0x0000000011fa68: rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0xf939e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000121f4f: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; mov rax, r8; ret; 
0x000000000d8e2f: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; xor eax, eax; pop rbx; ret; 
0x000000000921a3: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; xor eax, eax; ret; 
0x000000000b869d: rcr byte ptr [rbx], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000019f54e: rcr byte ptr [rdi+0x49], 0x29; ror byte ptr [rax-0x73], 0x1; jl short 0x000000000019f56e; and ecx, ebp; ret; 
0x000000001ac11e: rcr byte ptr [rdi+0x49], 0x29; ror byte ptr [rax-0x73], 0x1; jl short 0x00000000001ac13e; and ecx, ebp; ret; 
0x0000000011c64c: rcr dword ptr [rbx+0x31], cl; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000000a41d2: rcr dword ptr [rbx+0x48], 0x3d; jmp far fword ptr [rcx]; 
0x00000000138143: rcr dword ptr [rcx+0x34e8000e], 0x92; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000054695: rcr dword ptr [rcx], 0xc0; and eax, 0x2; sub eax, 0x1; ret; 
0x00000000167a4b: rcr dword ptr [rdi-0x12ce0001], 0x4c; lea ecx, [rsp+0x14]; call qword ptr [rax]; 
0x0000000008795a: rcr dword ptr [rdx+rdi*8], 0x1; jmp qword ptr [rsi-0x70]; 
0x0000000006d112: rcr ecx, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000012643b: rdpkru; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x0000000015d378: rdtsc; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000c498d: rep movsb [rdi], [rsi]; cld; ret; 
0x000000000c497f: rep movsb [rdi], [rsi]; ret; 
0x000000001a0be4: rep movsb [rdi], [rsi]; vmovdqu [r8], ymm0; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001af22d: rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c7f: rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x00000000174658: rep movsq [rdi], [rsi]; ret; 
0x0000000004da59: rep ret; 
0x000000000c5047: rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001a10ce: rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x000000000a4a9b: rep stosq [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000142fb2: rep stosq [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000112eff: rep stosq [rdi]; ret; 
0x0000000014ba03: ret far; 
0x0000000008eee8: ret far; 
0x000000001232e6: ret far; 
0x00000000029551: ret far; 
0x000000000a9c0b: ret far; 
0x00000000029cd6: ret; 
0x00000000141e23: ret; 
0x0000000006cae6: ret; 
0x0000000010cff8: ret; 
0x000000001afce1: rol ah, 0xc2; jp short 0x00000000001afcdd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000001b6081: rol ah, 0xc2; jp short 0x00000000001b607d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000015ea78: rol ax, 0x8; mov rdi, r15; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x00000000136786: rol ax, 0x8; ret; 
0x00000000141e16: rol bh, 0x47; or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x0000000008460c: rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x000000000b56da: rol bl, 0x1; nop [rax]; xor eax, eax; ret; 
0x00000000149ac2: rol bl, 0x1; nop [rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x0000000007d36c: rol bl, 0x1; xchg ax, ax; xor eax, eax; ret; 
0x000000000b530e: rol bl, 0x1; xor eax, eax; ret; 
0x00000000113b02: rol bl, 0x45; xor eax, eax; mov eax, r8d; ret; 
0x00000000118bce: rol bl, 0x48; mov eax, [rip+0x100239]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000042e87: rol bl, 0x48; mov eax, [rip+0x1d5f80]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000042e51: rol bl, 0x48; mov eax, [rip+0x1d5fb6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119e21: rol bl, 0x48; mov eax, [rip+0xfefe6]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000119dc8: rol bl, 0x48; mov eax, [rip+0xff03f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000c43a5: rol bl, 0x48; mov eax, edi; ret; 
0x00000000099e24: rol bl, 0x66; nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x0000000008f495: rol bl, 0x66; nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000008f4d5: rol bl, 0x66; nop [rax+rax]; endbr64; mov rax, [rdi+0x68]; ret; 
0x0000000015d415: rol bl, 0x66; nop [rax+rax]; endbr64; ret; 
0x0000000016d0b5: rol bl, 0x66; nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x000000000620b5: rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x00000000099db8: rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000a7954: rol bl, 0x66; nop [rax+rax]; mov eax, 0x1; ret; 
0x00000000155765: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000891c4: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000152378: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000143375: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x00000000152364: rol bl, 0x66; nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000016c968: rol bl, 0x66; nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000000d83d2: rol bl, 0x66; nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x0000000015d211: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; endbr64; ret; 
0x000000000b507c: rol bl, 0x66; nop; bsr eax, eax; add rax, rdi; ret; 
0x00000000092b9c: rol bl, 0x66; nop; mov eax, 0x16; ret; 
0x000000000846bc: rol bl, 0x66; nop; mov eax, 0xffffffff; ret; 
0x0000000016b52d: rol bl, 0x90; cmp eax, 0x1; jne short 0x000000000016b525; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000009265d: rol bl, 0x90; mov eax, 0x16; ret; 
0x0000000014229d: rol bl, 0x90; mov eax, 0xffffffff; ret; 
0x000000000b56e1: rol bl, 0xb8; add [rax], eax; add [rax], al; ret; 
0x000000001426e7: rol bl, 0xb8; add [rcx], eax; add [rax], al; ret; 
0x00000000041a3e: rol bl, 0xf3; addps xmm0, xmm0; ret; 
0x000000001b224e: rol bl, 0xf3; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x00000000099d0e: rol bl, 0xf3; nop edx, edi; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000c8011: rol byte ptr [r11-0x78f0f608], 0x1; ret; 
0x000000000c5984: rol byte ptr [rax*4+0x31ee75d2], 0xc0; ret; 
0x000000001286a9: rol byte ptr [rax+0x1740039], 0xc3; mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x000000001b16e4: rol byte ptr [rax+0x3a], 0x34; add dh, [rbp-0x72]; add rax, rdx; ret; 
0x000000001af902: rol byte ptr [rax+0x48], 0x1; clc; ret; 
0x00000000199a7c: rol byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x00000000045e4b: rol byte ptr [rax+0x775003f], 0x5b; ret; 
0x000000000b1354: rol byte ptr [rax+0xf], 0x1; xchg ebp, eax; mov dword ptr [rcx-0x7c], 0xc3da75f9; nop; ret; 
0x0000000014402d: rol byte ptr [rax+rax*8-0x7cb7f18b], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000d8412: rol byte ptr [rax+rax], 0x0; add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x00000000035150: rol byte ptr [rax+rcx*2], 0x83; ret; 
0x0000000002f44f: rol byte ptr [rax+rcx*2], 0x89; test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000012e4e6: rol byte ptr [rax+rcx*4+0x54], 0x1; and al, 0x20; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x000000001069e3: rol byte ptr [rax-0x3806c799], 0x6; add [rax], al; add [rax], al; movups [rsi+0x8], xmm0; ret; 
0x000000000a02bb: rol byte ptr [rax-0xa], cl; mov byte ptr [rax+0x75], 0x2e; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x00000000039bec: rol byte ptr [rax], 0x0; add [rax-0x75], cl; add eax, 0x1df309; mov [rax], rdx; ret; 
0x000000000fb8d8: rol byte ptr [rax], 0x0; add [rax-0x77], cl; ret; 
0x000000000a95f9: rol byte ptr [rax], 0x0; cmove rax, rdx; ret; 
0x00000000109355: rol byte ptr [rax], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000000d9571: rol byte ptr [rax], 0x1; add [rax], al; call r12; 
0x0000000016368e: rol byte ptr [rax], 0x1; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000162ef6: rol byte ptr [rax], 0x1; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000000d9566: rol byte ptr [rax], 0x1; add [rax], al; mov rsi, r13; mov [rsp+0xd0], rax; call r12; 
0x0000000015e285: rol byte ptr [rax], cl; add [rbp+0x489374c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000046730: rol byte ptr [rbp+0x31], 0xc0; punpcklqdq xmm0, xmm1; mov eax, r8d; movups [rdi], xmm0; ret; 
0x000000001988fb: rol byte ptr [rbp+0x48e074c0], cl; movsxd ecx, ecx; lea rax, [rdi+rcx]; ret; 
0x000000001aeac5: rol byte ptr [rbp+0x622675c0], 0xb2; and gs:[rsi], ah; ret; 
0x000000001b5b51: rol byte ptr [rbp+0x622a75c0], 0xb2; and gs:[rdi], ah; ret; 
0x000000001b56e1: rol byte ptr [rbp+0xf0a74c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x000000001afa08: rol byte ptr [rbp+0xf8374c0], 0x1; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000001305e7: rol byte ptr [rbp+0xf], 0x44; ret; 
0x000000001b56bc: rol byte ptr [rbp+0xfb374c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000199b47: rol byte ptr [rbp+0xfc474c0], 0x1; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000001af9ba: rol byte ptr [rbp+0xfd174c0], 0x1; mov ebp, 0xf80148c0; ret; 
0x000000000b5159: rol byte ptr [rbp+0xfd274c0], 0x1; mov ebp, 0xf80148c0; ret; 
0x0000000006d797: rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000009c0fe: rol byte ptr [rbp-0x3f6af00a], 0xc1; loopne 0x000000000009c10e; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000092969: rol byte ptr [rbp-0x3f6af02e], 0xc1; loopne 0x0000000000092979; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x00000000119d87: rol byte ptr [rbp-0x74f7872e], 0x47; or [rip+0x100f], ah; ret; 
0x00000000130700: rol byte ptr [rbp-0x77], 0x1; ret; 
0x000000001b173e: rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001afcc2: rol byte ptr [rbp-0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000199764: rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000001afce6: rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000001af922: rol byte ptr [rbx+0x14820c0], 0xf8; ret; 
0x00000000199aa2: rol byte ptr [rbx+0x14820c0], 0xf8; vzeroupper; ret; 
0x000000001af932: rol byte ptr [rbx+0x14840c0], 0xf8; ret; 
0x00000000199ab2: rol byte ptr [rbx+0x14840c0], 0xf8; vzeroupper; ret; 
0x00000000199ac2: rol byte ptr [rbx+0x14860c0], 0xf8; ret; 
0x0000000015575d: rol byte ptr [rbx+0x1d7502f8], 0x44; mov eax, eax; ret; 
0x00000000126b0f: rol byte ptr [rbx+0x2b7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x000000000f6e78: rol byte ptr [rbx+0x3d740afb], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000113a45: rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0x0; add [rax], al; syscall; 
0x00000000061fad: rol byte ptr [rbx+0xd74fff8], 0x44; mov eax, eax; ret; 
0x000000000b1825: rol byte ptr [rbx+0xe7740ff], 0x48; movsxd edi, edi; lea rax, [rip+0x16644b]; mov rax, [rax+rdi*8]; ret; 
0x000000000b1845: rol byte ptr [rbx+0xe7740ff], 0x48; movsxd edi, edi; lea rax, [rip+0x16664b]; mov rax, [rax+rdi*8]; ret; 
0x0000000007f863: rol byte ptr [rbx+0xf74fff8], 0x1; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000001a6236: rol byte ptr [rbx+0xfc3ffd8], 0x1f; add [rax], r8b; xor eax, eax; ret; 
0x00000000054697: rol byte ptr [rbx-0x177cfd20], 0x1; ret; 
0x000000001b40e3: rol byte ptr [rbx-0x39c6bf12], 0x72; or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b5483: rol byte ptr [rbx-0x39c6ef12], 0x72; or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x00000000093705: rol byte ptr [rbx-0x3d76fd38], cl; mov eax, r12d; syscall; 
0x00000000199643: rol byte ptr [rbx-0x3dc67f16], 0x76; adc eax, 0x48c7ff48; add eax, edi; vzeroupper; ret; 
0x0000000011c110: rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000012a0d4: rol byte ptr [rbx-0x69f0f606], 0xc0; ret; 
0x0000000003a185: rol byte ptr [rbx-0x6bf07f19], 0xc0; ret; 
0x000000000c8012: rol byte ptr [rbx-0x78f0f608], 0x1; ret; 
0x0000000013b4a7: rol byte ptr [rbx-0x7cbea817], 0x1; sti; or [rcx+0xf], eax; ret far; 
0x000000000d8402: rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x000000000d83c2: rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret; 
0x000000001a2c3f: rol byte ptr [rcx+0x48], 0x1; clc; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dd5f: rol byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000d2a55: rol byte ptr [rcx+0x5c], 0x1; pop r13; pop r14; ret; 
0x000000001303e6: rol byte ptr [rcx+0x5c], 0x41; pop rbp; cmove eax, edx; pop r14; ret; 
0x0000000016c1e3: rol byte ptr [rcx+0x5c], 0x41; pop rbp; pop r14; jmp rcx; 
0x0000000009271a: rol byte ptr [rcx+0x5c], 0x41; pop rbp; pop r14; ret; 
0x000000000a9c80: rol byte ptr [rcx+0x5c], 0x41; pop rbp; ret; 
0x00000000133cde: rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x0000000019db43: rol byte ptr [rcx+0x81e9], 0x0; add eax, ecx; vzeroupper; ret; 
0x000000000515ec: rol byte ptr [rcx+0x9], 0xc8; mov rax, r8; ret; 
0x00000000109351: rol byte ptr [rcx+0xc0fef9], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000001367a8: rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000081cf5: rol byte ptr [rcx+rcx*4+0x22], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x000000000e585d: rol byte ptr [rcx+rcx*4-0x12], 0xb8; out 0x0, al; add [rax], al; syscall; 
0x00000000092a8e: rol byte ptr [rcx+rcx*4-0x1e], cl; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000149aca: rol byte ptr [rcx+rcx*4-0x30], cl; ret; 
0x000000000929ee: rol byte ptr [rcx+rcx*4-0x36], cl; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000046d39: rol byte ptr [rcx+rcx*4-0x38], cl; sub rsi, rdi; syscall; 
0x000000000f80f3: rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x000000000e563d: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov [rdx], edi; mov eax, r8d; ret; 
0x000000000891c1: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000143372: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov r8d, 0x7fffffff; mov eax, r8d; ret; 
0x0000000014336a: rol byte ptr [rcx+rcx*4-0x40], 0xc3; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000142d1a: rol byte ptr [rcx+rcx*4-0x40], cl; mov byte ptr [rdi+rdx], 0x0; ret; 
0x00000000092903: rol byte ptr [rcx+rcx*4-0x40], cl; xor sil, 0x80; syscall; 
0x0000000016cd66: rol byte ptr [rcx+rcx*4], 0x50; cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000c6de5: rol byte ptr [rcx+rdi], 0xf2; je short 0x00000000000c6def; test edx, edx; jne short 0x00000000000c6de0; ret; 
0x0000000012e4e3: rol byte ptr [rcx-0x30], 0x44; mov [rsp+0x20], dl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000126400: rol byte ptr [rcx-0x38], 0x1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000149b65: rol byte ptr [rcx-0x3a], 0x1; add [rax], al; ret; 
0x00000000142fbb: rol byte ptr [rcx-0x3a], 0x40; add al, [rax]; ret; 
0x0000000004fa86: rol byte ptr [rcx-0x45], 0x40; add [rax], al; add [rax-0x77], cl; ret; 
0x0000000004320c: rol byte ptr [rcx-0x46], 0x8; add [rax], al; add [rax+0x80], bh; syscall; 
0x000000000dce44: rol byte ptr [rcx-0x5c28f401], 0x0; setb al; add eax, 0x16d; ret; 
0x0000000011ace4: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x0000000011ada4: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000ea544: rol byte ptr [rcx-0x77], 0xc1; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000d83e2: rol byte ptr [rcx], 0x0; add [rax], al; ret; 
0x00000000092ace: rol byte ptr [rcx], 0x39; ret; 
0x000000001432de: rol byte ptr [rcx], 0x48; test eax, eax; js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x00000000129423: rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x00000000052fc2: rol byte ptr [rcx], 0x80; js short 0x0000000000052fc8; add [rbp-0xa], dh; pop rbx; ret; 
0x000000000abd02: rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000d83b2: rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 0x3; ret; 
0x00000000051ac2: rol byte ptr [rcx], 0xc6; jmp qword ptr [rax]; 
0x000000001a2db5: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi+rax-0x10]; movzx eax, byte ptr [rdi+rax-0x10]; sub eax, ecx; ret; 
0x000000001aec6f: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x000000001aec5c: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000086d6a: rol byte ptr [rcx], 0xeb; ret far; 
0x000000000b1232: rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je short 0x00000000000b1230; ret; 
0x000000000eaf21: rol byte ptr [rdi+0x135b9805], 0x0; cmp eax, 0x1; jg short 0x00000000000eaf40; pop rbx; ret; 
0x000000000db587: rol byte ptr [rdi+0x1451d205], 0x0; cmp eax, 0x1; jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x00000000095e1d: rol byte ptr [rdi+0x189cfc15], cl; add [rbx+0x177f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000000460c7: rol byte ptr [rdi+0x1d567a05], 0x0; cmp eax, 0x1; jg short 0x00000000000460f0; pop rbp; ret; 
0x00000000099a07: rol byte ptr [rdi+0x1fa8317], cl; jg short 0x0000000000099a58; nop; add rsp, 0x18; ret; 
0x00000000099b23: rol byte ptr [rdi+0x1fa8317], cl; jg short 0x0000000000099b80; nop; add rsp, 0x18; ret; 
0x000000001724f6: rol byte ptr [rdi+0xb578715], cl; add [rbx+0x2e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x00000000172462: rol byte ptr [rdi+0xb581b15], cl; add [rbx+0x327f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000001722df: rol byte ptr [rdi+0xb599e05], 0x0; cmp eax, 0x1; jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x00000000172276: rol byte ptr [rdi+0xb5a0715], cl; add [rbx+0x1e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000001721f6: rol byte ptr [rdi+0xb5a8715], cl; add [rbx+0x2e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x0000000017219f: rol byte ptr [rdi+0xb5ade05], 0x0; cmp eax, 0x1; jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x00000000150d22: rol byte ptr [rdi+0xd185705], 0x0; cmp eax, 0x1; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000155c21: rol byte ptr [rdi+0xd1be405], 0x0; cmp eax, 0x1; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x0000000013ea3c: rol byte ptr [rdi+0xe353505], 0x0; cmp eax, 0x1; jg short 0x000000000013ea98; add rsp, 0x8; ret; 
0x00000000125a68: rol byte ptr [rdi+0xfba5105], 0x1; add [rbx+0x47f01f8], al; ret; 
0x00000000143367: rol byte ptr [rdi+rcx+0x48], 0x1; rol byte ptr [rcx+rcx*4-0x40], 0xc3; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000016cce3: rol byte ptr [rdi+rcx], 0xca; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x0000000016cd23: rol byte ptr [rdi+rcx], 0xca; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000001571b9: rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x00000000001571c8; ret; 
0x000000000d8442: rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000000d83f2: rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x000000000832ea: rol byte ptr [rdx], 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000009af82: rol byte ptr [rdx], 0x1; add [rax], al; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000975de: rol byte ptr [rdx], 0x1; add [rax], al; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000eabbc: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x000000000947cf: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x0000000009b5a6: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0xcb; syscall; 
0x00000000095dac: rol byte ptr [rdx], 0x1; add [rax], al; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x000000000d83a9: rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 0x1; ret; 
0x0000000019198a: rol byte ptr [rdx], cl; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000d8432: rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x0000000018991d: rol byte ptr [rsi], 0x0; add [rbp-0x77], cl; ret far; 
0x000000001347a2: rol byte ptr [rsi], 0x0; lea rax, [rip+0x6c144]; cmove rax, rdx; ret; 
0x00000000199b11: rol ch, 0xf8; ja short 0x0000000000199ad9; nop [rax+rax]; xor eax, eax; ret; 
0x0000000019db1a: rol ch, 0xf8; ja short 0x000000000019dae2; xor eax, eax; ret; 
0x0000000019d816: rol ch, cl; std; xlat [rbx]; ret; 
0x0000000011ea9a: rol cl, cl; cld; jmp qword ptr [rsi-0x70]; 
0x0000000009a1c4: rol cl, cl; out 0x7, al; xor sil, 0x81; syscall; 
0x000000000d838c: rol dword ptr [rax+0x1e740fe1], 0x1; ret; 
0x0000000017464d: rol dword ptr [rax+0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x00000000199290: rol dword ptr [rax+0x49], 0x29; ret far; 
0x000000000fc335: rol dword ptr [rax+0x49], 0x83; ret; 
0x00000000108d4b: rol dword ptr [rax], 0x11; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d6df9: rol dword ptr [rax], cl; add [rax], al; xor eax, eax; ret; 
0x000000000b4b94: rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000d6e24: rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000b5047: rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x000000000b5076: rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000001069c1: rol dword ptr [rbp+0xf1a74d2], 0xb6; cmp [r11-0x377c0620], r8b; add cl, [rax+0x16893847]; movups [rsi+0x8], xmm0; ret; 
0x000000000d6df4: rol dword ptr [rbp-0x2c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000b4b64: rol dword ptr [rbp-0x5c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000b120c: rol dword ptr [rbp-0x7c], 0xca; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x0000000019d5b9: rol dword ptr [rbp-0xc9d8b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000019d984: rol dword ptr [rbp-0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000ea547: rol dword ptr [rbx+rcx*4+0x54], 0x24; sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000b1351: rol dword ptr [rcx+0x39], 0xd0; setne dil; test r9b, dil; jne short 0x00000000000b1338; ret; 
0x00000000077a35: rol dword ptr [rcx+0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x000000000af9f5: rol dword ptr [rcx+rcx*4-0x20], 0xc1; clc; adc al, [rbx-0x76befc17]; ret far; 
0x00000000046737: rol dword ptr [rcx+rcx*4-0x40], 0xf; adc [rdi], eax; ret; 
0x00000000076be2: rol dword ptr [rcx-0x46], cl; add [rax], eax; add [rax], al; mov edx, 0x1; jmp rsi; 
0x00000000075622: rol dword ptr [rcx-0x46], cl; add [rax], eax; add [rax], al; xor edx, edx; jmp rsi; 
0x00000000129443: rol dword ptr [rcx-0x74b7fff1], 0x1; sbb [rbx-0x6f3cff00], al; ret; 
0x000000001b8a49: rol dword ptr [rcx-0xa], cl; ret; 
0x000000000a84bd: rol dword ptr [rcx], 0x0; cmovne rax, rdx; ret; 
0x000000000f411e: rol dword ptr [rcx], 0x3b; jl short 0x00000000000f4190; mov byte ptr [rax+0x8], 0x1; mov eax, 0x1; ret; 
0x0000000014960d: rol dword ptr [rcx], 0x4c; sub ecx, ecx; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x000000000967d7: rol dword ptr [rcx], 0xf0; cmpxchg [rdx], rcx; jne short 0x00000000000967e8; xor eax, eax; ret; 
0x000000000c1e09: rol dword ptr [rdi], cl; add [rax], al; ret; 
0x00000000092acb: rol dword ptr [rdx], 0x83; rol byte ptr [rcx], 0x39; ret; 
0x000000001347a8: rol dword ptr [rsi], 0x0; cmove rax, rdx; ret; 
0x0000000014ceeb: rol dx, 0x8; add edx, 0x1; rol dx, 0x8; mov [rdi+0xa], dx; ret; 
0x0000000014cef2: rol dx, 0x8; mov [rdi+0xa], dx; ret; 
0x00000000029ccc: rol eax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x0000000015ea79: rol eax, 0x8; mov rdi, r15; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x00000000136787: rol eax, 0x8; ret; 
0x00000000042f11: rol eax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000001994af: rol ebp, 0xf8; ja short 0x0000000000199477; xor eax, eax; ret; 
0x000000001a16b2: rol ebp, 0xf8; ja short 0x00000000001a167a; xor eax, eax; ret; 
0x000000001432e7: rol ebx, 0x1; nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000014ceec: rol edx, 0x8; add edx, 0x1; rol dx, 0x8; mov [rdi+0xa], dx; ret; 
0x0000000014cef3: rol edx, 0x8; mov [rdi+0xa], dx; ret; 
0x00000000140d6e: rol esi, 0x45; ret; 
0x00000000140d6d: rol r14, 0x45; ret; 
0x00000000029ccb: rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x00000000042f10: rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000001994ae: rol rbp, 0xf8; ja short 0x0000000000199477; xor eax, eax; ret; 
0x000000001a16b1: rol rbp, 0xf8; ja short 0x00000000001a167a; xor eax, eax; ret; 
0x0000000011bbc3: ror byte ptr [r15], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000017dbaf: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1cf: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001afcee: ror byte ptr [rax+0x1], 0xc8; ret; 
0x0000000019976c: ror byte ptr [rax+0x1], 0xc8; vzeroupper; ret; 
0x000000001a8a8c: ror byte ptr [rax+0x1], 0xc8; xtest; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001aec0f: ror byte ptr [rax+0x1], 0xd0; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001b1954: ror byte ptr [rax+0x1], 0xd0; ret; 
0x0000000019d77e: ror byte ptr [rax+0x1], 0xd0; vzeroupper; ret; 
0x000000001a949e: ror byte ptr [rax+0x1], 0xd0; xtest; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000001afa0f: ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x00000000199ba0: ror byte ptr [rax+0x1], 0xf8; add rax, r8; vzeroupper; ret; 
0x000000000b4c9c: ror byte ptr [rax+0x1], 0xf8; add rax, rcx; ret; 
0x000000000b51b8: ror byte ptr [rax+0x1], 0xf8; add rax, rsi; ret; 
0x000000001b14aa: ror byte ptr [rax+0x1], 0xf8; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000000b4bb2: ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001a2b8c: ror byte ptr [rax+0x1], 0xf8; shr rax, 0x2; vzeroupper; ret; 
0x00000000199479: ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x000000001a73c8: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a85d5: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001ae00b: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x000000001a6cce: ror byte ptr [rax+0x1], 0xfe; sub rcx, rdi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x000000000bab64: ror byte ptr [rax+0x1], cl; ror byte ptr [rax+0x29], 0x1; clc; ret; 
0x000000000d85e4: ror byte ptr [rax+0x1], cl; ror byte ptr [rax+0x29], 0x1; clc; shr rax, 0x2; ret; 
0x00000000042f12: ror byte ptr [rax+0x21], 0x7; xor eax, eax; ret; 
0x00000000041406: ror byte ptr [rax+0x23], 0x1; and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000bab67: ror byte ptr [rax+0x29], 0x1; clc; ret; 
0x000000000d85e7: ror byte ptr [rax+0x29], 0x1; clc; shr rax, 0x2; ret; 
0x000000000b497b: ror byte ptr [rax+0x29], 0xc2; jbe 0x00000000000b4c20; add rax, rdi; add rax, rcx; ret; 
0x000000000b4be2: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf2: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c02: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c12: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000019dd33: ror byte ptr [rax+0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000019dd23: ror byte ptr [rax+0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000001b40c3: ror byte ptr [rax+0x29], 0xd7; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40d3: ror byte ptr [rax+0x29], 0xd7; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5463: ror byte ptr [rax+0x29], 0xd7; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5443: ror byte ptr [rax+0x29], 0xd7; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000001b4136: ror byte ptr [rax+0x39], 0xc6; cmovb eax, esi; ret; 
0x0000000019dda3: ror byte ptr [rax+0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x00000000119504: ror byte ptr [rax+0x39], 0xca; je short 0x0000000000119510; ret; 
0x00000000095cf5: ror byte ptr [rax+0x39], 0xf7; sete al; ret; 
0x00000000090a60: ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x0000000002e772: ror byte ptr [rax+0x39], cl; ret; 
0x00000000103879: ror byte ptr [rax+0x63], 0x1; adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x000000000e30d8: ror byte ptr [rax+0x63], 0x1; add al, 0x86; add rax, rsi; notrack jmp rax; 
0x000000000dd994: ror byte ptr [rax+0x63], 0x4; xchg [rax+0x1], ecx; clc; notrack jmp rax; 
0x0000000007d3e2: ror byte ptr [rax+0x63], cl; adc al, 0x91; add rdx, rcx; notrack jmp rdx; 
0x0000000003fc71: ror byte ptr [rax+0x63], cl; adc al, 0x96; add rdx, rsi; notrack jmp rdx; 
0x000000000b1468: ror byte ptr [rax+0x63], cl; adc al, 0x97; add rdx, rdi; notrack jmp rdx; 
0x000000000a1aae: ror byte ptr [rax+0x9], 0x1; ret; 
0x00000000056772: ror byte ptr [rax+0xf], 0x1; mov edx, 0x894830e8; or [rax+0x2], r15b; ret; 
0x0000000002ed5d: ror byte ptr [rax+0xf], 0x44; ret; 
0x000000000c54ff: ror byte ptr [rax+rax], cl; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000a4755: ror byte ptr [rax+rcx*2], 0x8d; push rsp; ret; 
0x000000000c4738: ror byte ptr [rax-0x1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000c4735: ror byte ptr [rax-0x1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000001994f3: ror byte ptr [rax-0x1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000b5306: ror byte ptr [rax-0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x000000000baaa6: ror byte ptr [rax-0x2d], 0xfa; test rdx, rdx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa49: ror byte ptr [rax-0x2d], 0xfa; test rdx, rdx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000573ba: ror byte ptr [rax-0x39], cl; ret; 
0x0000000013489d: ror byte ptr [rax-0x73], 0x15; or esi, [rdx-0x72b7fff9]; add eax, 0x7b264; cmove rax, rdx; ret; 
0x0000000019f552: ror byte ptr [rax-0x73], 0x1; jl short 0x000000000019f56e; and ecx, ebp; ret; 
0x000000001ac122: ror byte ptr [rax-0x73], 0x1; jl short 0x00000000001ac13e; and ecx, ebp; ret; 
0x000000000ed180: ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x000000000b4bd2: ror byte ptr [rax-0x73], 0x44; cmp [rax], ah; ret; 
0x000000000b50b2: ror byte ptr [rax-0x73], 0x44; cmp [rax], dh; ret; 
0x000000000b4bc2: ror byte ptr [rax-0x73], 0x44; cmp [rax], dl; ret; 
0x000000000b4ba2: ror byte ptr [rax-0x73], 0x44; cmp al, dh; ret; 
0x000000001b57b3: ror byte ptr [rax-0x73], 0x44; xchg [rax], esp; ret; 
0x000000001b567f: ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x000000001b438a: ror byte ptr [rax-0x73], 0x4; xchg [rbx], edi; xor [rbp+0x1d], dh; ret; 
0x000000001b5739: ror byte ptr [rax-0x73], 0x4; xchg ebx, eax; xor eax, eax; ret; 
0x00000000119f04: ror byte ptr [rax-0x73], 0x54; and al, 0x30; mov eax, 0x10; syscall; 
0x000000001b59c5: ror byte ptr [rax-0x73], 0x84; xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000041379: ror byte ptr [rax-0x75], 0x1; add eax, 0x1d7a8f; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000169564: ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000000a7a23: ror byte ptr [rax-0x75], 0x1; push rdx; or [rax-0x7b], cl; shl byte ptr [rbp-0xd], cl; ret; 
0x0000000014ae35: ror byte ptr [rax-0x75], 0x5; ret; 
0x000000001148e2: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000012803d: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x00000000125fcd: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x0000000015d51c: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x00000000086d05: ror byte ptr [rax-0x75], 0x74; and al, 0x18; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000162f28: ror byte ptr [rax-0x75], 0x74; and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000163143: ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x000000001666f0: ror byte ptr [rax-0x75], 0x74; and al, 0x50; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x000000000ea48e: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000001198ff: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x00000000127ecf: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000012829f: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000012612e: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x0000000011292f: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000001129df: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x00000000046cb2: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x13e; syscall; 
0x0000000011ecc2: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x1a; syscall; 
0x00000000118d72: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x7; syscall; 
0x0000000015b7db: ror byte ptr [rax-0x75], 0x7d; and [rcx-0x7717dbfc], cl; ret far; 
0x00000000174fc3: ror byte ptr [rax-0x75], 0x7f; or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x340]; 
0x000000001496ea: ror byte ptr [rax-0x77], 0x17; ret; 
0x000000000906bb: ror byte ptr [rax-0x77], 0x1; adc [r8+0x5a], bl; pop rbx; ret; 
0x00000000059bf9: ror byte ptr [rax-0x77], 0x1; and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret; 
0x000000001b99f9: ror byte ptr [rax-0x77], 0x1; fucomip st, st(1); pushfq; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000165b36: ror byte ptr [rax-0x77], 0x1; mov eax, 0x1; ret; 
0x00000000113f49: ror byte ptr [rax-0x77], 0x1; ret far; 
0x00000000086029: ror byte ptr [rax-0x77], 0x1; ret; 
0x00000000090523: ror byte ptr [rax-0x77], 0x1; sbb [r8+0x5a], bl; pop rbx; ret; 
0x000000001b5679: ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000011fa3a: ror byte ptr [rax-0x77], 0x3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000835f9: ror byte ptr [rax-0x77], 0x48; adc [rax-0x77], cl; push rax; movups [rax], xmm0; ret; 
0x0000000016c32f: ror byte ptr [rax-0x77], 0x4; and al, 0x48; mov eax, [rbp+0x8]; call qword ptr [rax+0x8]; 
0x0000000016bc6b: ror byte ptr [rax-0x77], 0x4; and al, 0x48; mov eax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000092880: ror byte ptr [rax-0x77], 0x57; and [rax-0x77], cl; ja short 0x00000000000928a1; ret; 
0x0000000008d792: ror byte ptr [rax-0x77], 0x57; sbb [rax-0x77], cl; movups [rdi+0x8], xmm0; ret; 
0x000000000b105c: ror byte ptr [rax-0x77], 0xa; ret; 
0x0000000016382c: ror byte ptr [rax-0x77], 0xd6; add rdi, 0x10; jmp rcx; 
0x0000000016384c: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x0000000016633c: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000165a0c: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x00000000162c0c: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x000000000ac068: ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdx; ret; 
0x000000000612c5: ror byte ptr [rax-0x77], 0xd8; test r8d, r8d; jne short 0x00000000000612d0; pop rbx; ret; 
0x0000000015e9d7: ror byte ptr [rax-0x77], 0xdf; call rcx; 
0x0000000011a0ef: ror byte ptr [rax-0x77], 0xe2; mov eax, 0x10; syscall; 
0x00000000121c0d: ror byte ptr [rax-0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000016b3aa: ror byte ptr [rax-0x77], 0xe7; mov dword ptr [rsp], 0x2; call r8; 
0x000000000d34a6: ror byte ptr [rax-0x77], 0xef; call rbx; 
0x000000000c6563: ror byte ptr [rax-0x77], 0xef; lea r9, [rsp+0x30]; call rbx; 
0x00000000096885: ror byte ptr [rax-0x77], cl; out dx, al; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000008b5a9: ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000814af: ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x0000000008ab83: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x0000000008ae6c: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x000000000970f4: ror byte ptr [rax-0x77], cl; out dx, eax; mov esi, 0x7; mov eax, 0xca; syscall; 
0x00000000052ed6: ror byte ptr [rax-0x77], cl; ret far; 
0x000000000b0dc9: ror byte ptr [rax-0x77], cl; ret; 
0x0000000008c9b5: ror byte ptr [rax-0x7b], 0xd2; jne short 0x000000000008c9c0; ret; 
0x00000000045f40: ror byte ptr [rax-0x7b], 0xff; je short 0x0000000000045f4c; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x0000000002a88e: ror byte ptr [rax-0x7d], 0x1; ret; 
0x0000000011f9bf: ror byte ptr [rax-0x7d], 0x3e; add [rax-0x77], cl; je short 0x000000000011f9d0; pop rbx; ret; 
0x000000000891b8: ror byte ptr [rax-0x7d], 0x7f; sbb [rax], al; setne r8b; mov eax, r8d; ret; 
0x00000000099d8e: ror byte ptr [rax-0x7d], 0xc4; or [rax+0x16], bh; pop rbx; pop rbp; ret; 
0x0000000013269f: ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000054176: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000004649f: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000016d4e5: ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000009d595: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x00000000125ec8: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000050d84: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x00000000095cca: ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x3; ret; 
0x000000000e56e2: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000090ff3: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax]; endbr64; ret; 
0x000000001545ae: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax]; mov eax, 0x1; ret; 
0x000000000a2659: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop; xor eax, eax; ret; 
0x00000000116117: ror byte ptr [rax-0x7d], 0xc4; pop rax; ret; 
0x0000000008a548: ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x00000000125f02: ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000148893: ror byte ptr [rax-0x7d], 0xc7; add [rcx+0x39], ecx; ret; 
0x00000000199513: ror byte ptr [rax-0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x00000000199503: ror byte ptr [rax-0x7d], 0xc7; and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x0000000019d733: ror byte ptr [rax-0x7d], 0xc7; or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x000000000b50c2: ror byte ptr [rax-0x7d], 0xea; add rdx, rax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000001802df: ror byte ptr [rax-0x7d], 0xea; lea r11, [rip+0x62e25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000019d71b: ror byte ptr [rax-0x7d], 0xef; add rax, rdi; vzeroupper; ret; 
0x00000000199683: ror byte ptr [rax-0x7d], 0xef; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x00000000199863: ror byte ptr [rax-0x7d], 0xef; jg short 0x00000000001998b1; add eax, edi; vzeroupper; ret; 
0x0000000019da93: ror byte ptr [rax-0x7d], 0xef; jg short 0x000000000019dae1; add eax, edi; vzeroupper; ret; 
0x0000000019dc93: ror byte ptr [rax-0x7d], 0xef; jg short 0x000000000019dce1; add eax, edi; vzeroupper; ret; 
0x0000000017dbb0: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d0: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000199873: ror byte ptr [rax-0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000c473b: ror byte ptr [rax-0x7f], 0xc4; add [rcx], al; add [rax], al; sub rax, rdx; ret; 
0x000000000ed124: ror byte ptr [rax-0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x000000001357ed: ror byte ptr [rax-0x9], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000011dada: ror byte ptr [rax], 0x48; mov [rip+0x10388d], eax; mov rax, r8; add rsp, 0x8; ret; 
0x0000000011daaa: ror byte ptr [rax], 0x48; mov [rip+0x1038bd], eax; mov rax, r8; ret; 
0x0000000015ea7a: ror byte ptr [rax], 0x4c; mov edi, edi; mov [rsp+0x192], ax; mov rax, [rsp+0x28]; call rax; 
0x000000000c47f4: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000010b1f6: ror byte ptr [rbp+0x1], 0xe9; call r15; 
0x000000001ba9af: ror byte ptr [rbp+0x39], cl; ret; 
0x000000000961e4: ror byte ptr [rbp+0x6c504], 0x1; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c2ecb: ror byte ptr [rbp+rcx*4+0x1d], cl; add [rip+0x63490011], eax; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea6: ror byte ptr [rbp+rcx*4+0x1d], cl; add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e89: ror byte ptr [rbp+rcx*4+0x1d], cl; add eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf3: ror byte ptr [rbp+rcx*4+0x1d], cl; and eax, 0x49001134; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3893: ror byte ptr [rbp+rcx*4+0x1d], cl; mov ecx, 0x490010fb; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1233: ror byte ptr [rbp+rcx*4+0x1d], cl; mov ecx, 0x4900111f; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000da4c2: ror byte ptr [rbp+rcx*4+0x44], 0x24; and al, ch; add edi, [rsi-0x8]; call far fword ptr [rcx+0x5e]; 
0x000000000da3d7: ror byte ptr [rbp+rcx*4+0x44], 0x24; and al, ch; out dx, al; jle short 0x00000000000da3d9; call far fword ptr [rdx+0x59]; 
0x00000000101424: ror byte ptr [rbp-0x7600ffbc], 0x4; and al, 0xe8; jmp qword ptr [rdi+rdi*8-0x1]; 
0x000000001149c3: ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x000000001a35ca: ror byte ptr [rbx+0x3120074c], 0xd2; cmp ecx, [rsi+rax+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5b82: ror byte ptr [rbx+0x3120874c], 0xd2; cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5b97: ror byte ptr [rbx+0x3140874c], 0xd2; cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000004fa80: ror byte ptr [rbx+0x3145242c], cl; rol byte ptr [rcx-0x45], 0x40; add [rax], al; add [rax-0x77], cl; ret; 
0x000000001a2057: ror byte ptr [rbx+0x343b0e34], 0xa; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4f59: ror byte ptr [rbx+0x343b0e34], 0xa; jne 0x00000000001b4c81; ret; 
0x000000001a1b34: ror byte ptr [rbx+0x3b203e4c], 0x4c; cmp ah, [rax]; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001b47f4: ror byte ptr [rbx+0x3b203e4c], 0x4c; cmp ah, [rax]; jne 0x00000000001b4610; ret; 
0x000000001a1b02: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a1f98: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b47b4: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x00000000001b4610; ret; 
0x000000001b4e6a: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x00000000001b4c81; ret; 
0x000000001a35a3: ror byte ptr [rbx+0x740e3b0f], 0xed; setg al; lea eax, [rax+rax-0x1]; ret; 
0x000000001a1cfb: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000001a2203: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b49ee: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001b4610; ret; 
0x000000001b5136: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001b4c81; ret; 
0x000000001a1e22: ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4c9f: ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x00000000001b4c81; ret; 
0x000000001a1fdb: ror byte ptr [rbx+0xc3b3e0c], 0x3a; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4ebb: ror byte ptr [rbx+0xc3b3e0c], 0x3a; jne 0x00000000001b4c81; ret; 
0x0000000011a377: ror byte ptr [rbx-0x1e7ef7b9], 0xb4; jg short 0x000000000011a37f; jmp qword ptr [rsi+0xf]; 
0x000000001b5a33: ror byte ptr [rbx-0x2dce78f4], 0x3b; or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35ea: ror byte ptr [rbx-0x2dcef8f4], 0x3b; or al, 0x6; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000012607e: ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 0x8; mov eax, 0x114; syscall; 
0x000000001199af: ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 0x8; mov eax, 0x11d; syscall; 
0x00000000077bdc: ror byte ptr [rbx-0x76bf29ac], cl; adc [rax+0x39], ecx; ret; 
0x000000000ed04e: ror byte ptr [rbx], 0x1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000ecefb: ror byte ptr [rbx], 0x1; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000011a488: ror byte ptr [rcx+0x12eb8fe], cl; add [rax], al; xor edi, edi; syscall; 
0x0000000016b160: ror byte ptr [rcx+0x1], 0xdd; call rbp; 
0x0000000016bc56: ror byte ptr [rcx+0x1b803], 0x0; add bl, ch; ret; 
0x0000000009ebc1: ror byte ptr [rcx+0x2bfc3], cl; add [rax], al; mov eax, r15d; syscall; 
0x000000000d6e72: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e92: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb2: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed2: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x00000000033871: ror byte ptr [rcx+0x3948fc51], cl; ret; 
0x00000000112c94: ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsi; ret; 
0x00000000101287: ror byte ptr [rcx+0x63], 0x1; push rsp; xchg ebp, eax; add [rcx+rax-0x16], cl; notrack jmp rdx; 
0x0000000005fa03: ror byte ptr [rcx+0x63], 0x1; ret far; 
0x0000000010f8fc: ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; notrack jmp rax; 
0x00000000059fb7: ror byte ptr [rcx+r9*4-0x30], 0x1; pop rbx; pop rbp; ret; 
0x0000000015e2c1: ror byte ptr [rcx+rbp-0x20], 0x48; mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000005f961: ror byte ptr [rcx+rcx*4+0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x00000000175ad4: ror byte ptr [rcx+rcx*4-0x11], 0x45; xor ecx, ecx; mov rsi, r12; call qword ptr [rax+0x340]; 
0x00000000085981: ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x80]; 
0x00000000085f3c: ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000009eda8: ror byte ptr [rcx+rcx*4-0x1a], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000113d89: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000153823: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10; 
0x00000000095289: ror byte ptr [rcx+rcx*4-0x2], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000073eec: ror byte ptr [rcx+rcx*4-0x2], cl; mov rdi, r14; mov [rbp-0x900], r9b; mov [rbp-0x8f8], r8b; call rax; 
0x00000000149b62: ror byte ptr [rcx+rcx*4-0x30], 0x1; mov byte ptr [r8], 0x0; ret; 
0x00000000059fb8: ror byte ptr [rcx+rcx*4-0x30], 0x1; pop rbx; pop rbp; ret; 
0x000000000931a1: ror byte ptr [rcx+rcx*4-0x31], cl; or eax, 0x2; mov edx, eax; mov eax, ebp; syscall; 
0x0000000009997b: ror byte ptr [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x0000000009321c: ror byte ptr [rcx+rcx*4-0x39], cl; mov eax, r9d; syscall; 
0x000000000457d6: ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x0000000005a34d: ror byte ptr [rcx+rcx*4-0x40], cl; ret; 
0x0000000007961c: ror byte ptr [rcx+rcx*4-0xa], cl; mov [rbp-0x8f0], r8b; call rax; 
0x000000000969f2: ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000153646: ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x00000000153c3d: ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, rbx; mov rcx, r15; call r12; 
0x0000000015358a: ror byte ptr [rcx+rcx*4-0xf], 0x4c; mov edi, ebp; call r12; 
0x00000000086f75: ror byte ptr [rcx+rcx*4-0xf], 0x4c; mov esi, ebp; mov rdi, r15; call rbx; 
0x00000000093015: ror byte ptr [rcx-0x1776bb36], cl; syscall; 
0x000000000410c8: ror byte ptr [rcx-0x24efdbbc], 0x1; insb [rdi], dx; and al, 0x8; ret; 
0x000000000521d1: ror byte ptr [rcx-0x75], cl; ret; 
0x000000000923e6: ror byte ptr [rcx-0x77], 0x10; ret; 
0x000000001b8b98: ror byte ptr [rcx-0x77], 0x1; ret far; 
0x000000000a80ab: ror byte ptr [rcx-0x77], 0x30; ret; 
0x000000000910f8: ror byte ptr [rcx-0x77], 0xca; mov edx, r13d; mov eax, 0xca; syscall; 
0x00000000112b62: ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000953ab: ror byte ptr [rcx], 0x0; add [rcx+0x39], cl; ret; 
0x00000000125630: ror byte ptr [rcx], 0xd0; ret; 
0x0000000003ff47: ror byte ptr [rdi+0x63], cl; adc al, 0x93; add r10, r11; notrack jmp r10; 
0x00000000042522: ror byte ptr [rdi], 0x0; add [rax], al; syscall; 
0x0000000018901d: ror byte ptr [rdi], 0x0; add [rbp-0x77], cl; ret far; 
0x000000000923ad: ror byte ptr [rdi], 0x11; jle short 0x0000000000092422; ret; 
0x0000000008f2e8: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000eabf3: ror byte ptr [rdi], 0x11; sbb al, 0x2; add [rax], al; mov eax, 0x111; syscall; 
0x000000000c4d9e: ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x20], edx; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000c4ae9: ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x40], edi; ret; 
0x000000001a8e67: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x00000000001a8e71; vzeroall; ret; 
0x000000001a94a1: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000001ab893: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x00000000001ab89d; vzeroall; ret; 
0x000000000404e7: ror byte ptr [rdi], 0x1; mov dh, 0x11; test dl, dl; jne short 0x00000000000404c8; ret; 
0x000000001756e8: ror byte ptr [rdi], 0x1; mov dh, 0x56; add eax, 0x840fd284; ret far; 
0x0000000011531a: ror byte ptr [rdi], 0x1f; add [rax], r8b; endbr64; mov eax, 0x50; syscall; 
0x000000000bd200: ror byte ptr [rdi], 0x28; jmp qword ptr [r14+0x66]; 
0x0000000016d261: ror byte ptr [rdi], 0x29; and al, 0x60; movups [rsp+0x18], xmm0; call r8; 
0x0000000017b3f6: ror byte ptr [rdi], 0x29; pop rdi; adc [rdx+0x9], dh; movaps [rdi], xmm4; notrack jmp r9; 
0x00000000119cd5: ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x0000000000119ce8; ret; 
0x000000001354da: ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x00000000001354f0; ret; 
0x00000000163684: ror byte ptr [rdi], 0x84; and eax, 0x49000001; mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000012275b: ror byte ptr [rdi], 0x84; call far fword ptr [rax+rax]; 
0x000000000b51ec: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000011f03a: ror byte ptr [rdi], 0x84; cmpsd [rsi], [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000015f83a: ror byte ptr [rdi], 0x84; inc byte ptr [rax]; add [rax], al; mov rdi, r12; call qword ptr [rbx]; 
0x0000000009e8b3: ror byte ptr [rdi], 0x84; mov [rax+rax], al; add [rbx-0x76b3ffab], cl; ret; 
0x0000000007f5d1: ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x0000000009e8d1: ror byte ptr [rdi], 0x84; pop rax; add [rax], eax; add [rax-0x77], cl; ret; 
0x0000000007821e: ror byte ptr [rdi], 0x84; ret far; 
0x000000000c9d36: ror byte ptr [rdi], 0x84; ret; 
0x0000000011f59a: ror byte ptr [rdi], 0x84; scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x000000001474c3: ror byte ptr [rdi], 0x84; scasd [rdi]; add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x000000000b4fb6: ror byte ptr [rdi], 0x85; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x00000000191ee2: ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000191e9c: ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000bea21: ror byte ptr [rdi], 0x85; pop rax; or [rax], eax; add cl, ch; ret; 
0x000000000a1d56: ror byte ptr [rdi], 0x85; ret far; 
0x000000000afc22: ror byte ptr [rdi], 0x85; ret; 
0x000000000d6df6: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add [rax], al; xor eax, eax; ret; 
0x0000000009958c: ror byte ptr [rdi], 0x85; sub eax, 0xb8000003; add [rax], eax; add [rax], al; ret; 
0x0000000019998c: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlat [rbx]; ret; 
0x000000000738f8: ror byte ptr [rdi], 0x88; imul esi, ebp, 0xffffffff; inc dword ptr [rcx]; ret; 
0x000000001235ae: ror byte ptr [rdi], 0x88; ret far; 
0x000000000a20a3: ror byte ptr [rdi], 0x8e; ret far; 
0x0000000010279c: ror byte ptr [rdi], 0x8e; ret; 
0x00000000036538: ror byte ptr [rdi], 0x94; ret; 
0x00000000050d81: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x0000000016191e: ror byte ptr [rdi], 0x95; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x00000000160ba0: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001a2d9a: ror byte ptr [rdi], 0xb6; or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000001988f8: ror byte ptr [rdi], 0xb6; rol byte ptr [rbp+0x48e074c0], cl; movsxd ecx, ecx; lea rax, [rdi+rcx]; ret; 
0x000000000ed17d: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x00000000160ba3: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000101421: ror byte ptr [rdi], 0xb6; ror byte ptr [rbp-0x7600ffbc], 0x4; and al, 0xe8; jmp qword ptr [rdi+rdi*8-0x1]; 
0x00000000108e13: ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x0000000015d3e3: ror byte ptr [rdi], 0xb6; shr bl, 0x92; nop [rax]; endbr64; ret; 
0x0000000013c4e3: ror byte ptr [rdi], 0xb7; ret far; 
0x0000000011bb88: ror byte ptr [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011bb44: ror byte ptr [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000079dfa: ror byte ptr [rdi], cl; mov [rbp-0x16000010], edi; xchg esp, eax; in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000b515d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x000000000d86e0: ror byte ptr [rdi], cl; test [rcx+0x48000000], bl; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000bac0b: ror byte ptr [rdi], cl; test [rsi+0x48000000], bl; bsf eax, edx; ret; 
0x000000000d52a0: ror byte ptr [rdi], cl; test [rsp+rdi*8-0x1], ch; jmp qword ptr [rsi+0xf]; 
0x000000000eb16e: ror byte ptr [rsi], cl; add [rax+0x142], bh; syscall; 
0x0000000011bac7: ror dword ptr [r15], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011c190: ror dword ptr [r8-0x77], 0x1; and al, 0x20; mov eax, 0x65; syscall; 
0x000000000ba7ba: ror dword ptr [rax+0x21], 0xce; je 0x00000000000ba8f0; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000000a26ab: ror dword ptr [rax+0x21], cl; ret; 
0x0000000008de0a: ror dword ptr [rax+0x39], 0x1; enter 0x2876, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x0000000008445f: ror dword ptr [rax+0x39], 0x1; enter 0x2b76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x0000000008e86a: ror dword ptr [rax+0x39], 0x1; enter 0x3076, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x0000000008c0cb: ror dword ptr [rax+0x39], 0x1; enter 0x3776, 0x48; mov edi, ebp; call qword ptr [rbx+0x88]; 
0x000000000838ea: ror dword ptr [rax+0x39], 0x1; enter 0x3876, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000081807: ror dword ptr [rax+0x39], 0x1; enter 0x3d76, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x0000000007f21e: ror dword ptr [rax+0x39], 0x1; enter 0x4476, 0x48; mov edi, ebx; call qword ptr [rbp+0x60]; 
0x00000000088349: ror dword ptr [rax+0x39], 0x1; enter 0x5176, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x0000000008a2f9: ror dword ptr [rax+0x39], 0x1; enter 0x5976, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000072329: ror dword ptr [rax+0x39], 0x1; enter 0x5976, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000008c184: ror dword ptr [rax+0x39], 0x1; enter 0x6676, 0x31; idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008dd54: ror dword ptr [rax+0x39], 0x1; enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x000000000778b5: ror dword ptr [rax+0x39], 0x1; enter 0x7576, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000080f8c: ror dword ptr [rax+0x39], 0x1; enter 0x7e76, 0x48; mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x000000001748dc: ror dword ptr [rax+0x39], 0x1; ret far; 
0x000000000e101b: ror dword ptr [rax+0x63], 0x1; adc al, 0x96; add rdx, rsi; notrack jmp rdx; 
0x000000000e0f9d: ror dword ptr [rax+0x63], 0x1; adc al, 0x97; add rdx, rdi; notrack jmp rdx; 
0x000000000e314e: ror dword ptr [rax+0x63], 0x1; or al, 0x8e; add rcx, rsi; notrack jmp rcx; 
0x000000000dd60f: ror dword ptr [rax+0x69], 0x1; not byte ptr [rbx-0x3e6db6dc]; call far fword ptr [rdi]; 
0x000000000a41cc: ror dword ptr [rax-0x3f], 0xe9; or [rbx+0x3d485bc1], eax; jmp far fword ptr [rcx]; 
0x000000000a41de: ror dword ptr [rax-0x3f], 0xe9; or al, 0x83; shr dword ptr [rsi+0x48], 0x3d; jmp far fword ptr [rdi+0x32760000]; 
0x000000001156cb: ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x000000001247b7: ror dword ptr [rax-0x73], 0x5; ret; 
0x0000000009165c: ror dword ptr [rax-0x73], 0x84; adc [rax], al; add [rax], al; ret; 
0x00000000118e6e: ror dword ptr [rax-0x75], 0x7c; and al, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000016c2fc: ror dword ptr [rax-0x75], cl; or [r8-0x77], r9b; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x000000000f99cc: ror dword ptr [rax-0x75], cl; sub cl, [rax-0x7d]; ret; 
0x0000000011c191: ror dword ptr [rax-0x77], 0x1; and al, 0x20; mov eax, 0x65; syscall; 
0x000000000c5136: ror dword ptr [rax-0x77], 0x1; cli; rep stosb [rdi]; mov rax, rdx; ret; 
0x00000000162d89: ror dword ptr [rax-0x77], 0x1; or [rax+0x1], bh; ret; 
0x00000000054319: ror dword ptr [rax-0x77], 0x1; or al, 0xd0; xor eax, eax; ret; 
0x000000000fbd13: ror dword ptr [rax-0x77], cl; ret far; 
0x0000000008357d: ror dword ptr [rax-0x7b], 0xd2; jne short 0x0000000000083570; ret; 
0x0000000008d575: ror dword ptr [rax-0x7b], 0xd2; jne short 0x000000000008d568; ret; 
0x00000000053ccd: ror dword ptr [rax], 0x39; ret; 
0x0000000007d48f: ror dword ptr [rbp+rdx], 0xf; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000c520a: ror dword ptr [rbx+0x2b428704], 0x4; xchg [rsp+rbx*8-0x3d], esi; nop [rax]; xor eax, eax; ret; 
0x00000000127f83: ror dword ptr [rbx+0x48102454], 0x8b; je short 0x0000000000127fb0; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x0000000011ace7: ror dword ptr [rbx+0x48142454], 0x8b; je short 0x000000000011ad14; or [rax+0x127], bh; syscall; 
0x0000000011ada7: ror dword ptr [rbx+0x48142454], 0x8b; je short 0x000000000011add4; or [rax+0x128], bh; syscall; 
0x0000000009e6ee: ror dword ptr [rbx+0x6c0f6606], 0xc1; movups [rdx+0x8], xmm0; cmp eax, 0x2; je short 0x000000000009e71b; ret; 
0x000000001b8882: ror dword ptr [rcx+0x9], cl; ret; 
0x0000000009886f: ror dword ptr [rcx+0xe181c2], 0x0; clc; inc dword ptr [rcx+0x39]; ret far; 
0x000000001b1c85: ror dword ptr [rcx+rax-0x3f], 0x1; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x00000000080819: ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000160f9f: ror dword ptr [rcx-0x77], 0x10; mov [r8+0x8], rcx; ret; 
0x000000001b8e37: ror dword ptr [rcx-0x77], 0x1; ret; 
0x0000000011ae3e: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011af9e: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000001b88c3: ror dword ptr [rcx-0x77], cl; ret; 
0x00000000192eb4: ror dword ptr [rdi-0x73], 0x14; or bh, [rsi]; jmp r10; 
0x0000000002d03a: ror dword ptr [rdi], 0x11; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008dd94: ror dword ptr [rdi], 0x11; cmp [r11+0x5d], bl; pop r12; ret; 
0x0000000009e6f4: ror dword ptr [rdi], 0x11; or [rbx+0x1d7402f8], al; ret; 
0x000000000854ec: ror dword ptr [rdi], 0x11; or r9b, bpl; sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000083c59: ror dword ptr [rdi], 0x11; xor [rcx+0x5d5b7453], cl; pop r12; ret; 
0x000000000a96d2: ror dword ptr [rdi], 0x1; add [rax-0x73], cl; add eax, 0xfd264; cmove rax, rdx; ret; 
0x000000001af9be: ror dword ptr [rdi], 0x1; mov ebp, 0xf80148c0; ret; 
0x0000000015fccb: ror dword ptr [rdi], 0x29; add al, 0x24; call qword ptr [rax+0x8]; 
0x00000000142bcc: ror dword ptr [rdi], 0x87; in eax, dx; add [rax], al; add [rcx-0x77], al; ret far; 
0x00000000057a7f: ror dword ptr [rdi], 0x8f; ret far; 
0x000000001b8718: ror dword ptr [rdi], 0x92; ret; 
0x000000000b4fe5: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001999ae: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x0000000011bac8: ror dword ptr [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011ba84: ror dword ptr [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000839ff: ror dword ptr [rdi], cl; xchg [rdx+0x44000001], cl; mov esi, esp; mov rdi, r14; call qword ptr [rax+0x18]; 
0x00000000133c82: ror eax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000002a13b: ror eax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000045d89: ror eax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000143667: ror eax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000009c54b: ror eax, 0x17; add [rdi+rax*8], ah; add [r8], al; add [rax-0x1], bh; ret; 
0x00000000155585: ror edi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000000dce32: ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000dce40; ret; 
0x0000000008357c: ror qword ptr [r8-0x7b], 0xd2; jne short 0x0000000000083570; ret; 
0x0000000008d574: ror qword ptr [r8-0x7b], 0xd2; jne short 0x000000000008d568; ret; 
0x00000000133c81: ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000002a13a: ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000045d88: ror rax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000143666: ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x00000000155584: ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x0000000005a15f: rstorssp [r8-0x8]; saveprevssp; mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000046cd1: sahf; add al, 0x0; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000101c0e: sahf; add rax, rsi; notrack jmp rax; 
0x0000000016c841: sahf; cld; jmp qword ptr [rsi+0x66]; 
0x000000000ee615: sahf; inc dword ptr [rcx-0x80]; jl short 0x00000000000ee620; jmp far fword ptr [rdi]; 
0x000000001b1532: sahf; lea rax, [rdi+rax+0x40]; ret; 
0x0000000003cbb6: sahf; mov edx, 0xe4e90019; idiv edi; call qword ptr [rax+0x7880c931]; 
0x0000000015da8c: sahf; or al, 0x0; add rsp, 0x8; ret; 
0x0000000015da76: sahf; or al, 0x0; test eax, eax; je short 0x000000000015da80; ret; 
0x0000000015b7ce: sahf; ret far; 
0x000000000c7349: sar ah, 0xff; dec dword ptr [rbx+0xeb8087b]; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000002b394: sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000015e1df: sar bh, 0x53; sbb bl, ch; mov edx, 0xfd8536e8; jmp qword ptr [rsi+0xf]; 
0x000000000bd05b: sar bh, 0xff; call qword ptr [rax+0xf11280f]; 
0x0000000018bab1: sar bh, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000056655: sar bh, 0xff; ret; 
0x00000000056632: sar bh, 0xff; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000a54d0: sar bh, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001394f4: sar bh, cl; jmp qword ptr [rsi+0xf]; 
0x00000000159ffb: sar bh, cl; jmp qword ptr [rsi-0x70]; 
0x00000000117e88: sar bh, cl; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001232aa: sar bl, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000003b112: sar bl, cl; sbb eax, 0x3d8b4c00; ret; 
0x000000000e66ae: sar byte ptr [r8+0xd9], 0x1; syscall; 
0x00000000154e4d: sar byte ptr [rax+0x10], 0x4c; mov eax, esp; pop r12; ret; 
0x000000001190d9: sar byte ptr [rax+0x11d], cl; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000125e46: sar byte ptr [rax+0x121], cl; mov edx, 0x8; syscall; 
0x000000001288f4: sar byte ptr [rax+0x14], cl; syscall; 
0x00000000112ce8: sar byte ptr [rax+0x15], 0x48; cmp ebx, eax; pop rbx; setl al; ret; 
0x000000001285f6: sar byte ptr [rax+0x1d], cl; syscall; 
0x00000000119d89: sar byte ptr [rax+0x8], cl; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000127dda: sar byte ptr [rax+0xb], 0x48; add esp, 0x8; ret; 
0x000000001432e2: sar byte ptr [rax+0xb], 0x48; movsxd edx, ecx; ret; 
0x000000000911ef: sar byte ptr [rax+0xca], cl; syscall; 
0x000000000e66af: sar byte ptr [rax+0xd9], 0x1; syscall; 
0x00000000172097: sar byte ptr [rax+0xe], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x000000001269ef: sar byte ptr [rax+rbx+0x74], 0x1; ret; 
0x0000000011bf87: sar byte ptr [rax], 0x48; cmove eax, ebx; pop rbx; ret; 
0x000000000f6ff9: sar byte ptr [rax], 0xe; je 0x00000000000f6f5d; ret; 
0x00000000125ba8: sar byte ptr [rbx+rdx+0x74], 0x1; ret; 
0x0000000016584f: sar byte ptr [rbx], 0x14; ret; 
0x000000001b4553: sar byte ptr [rbx], 0x34; xchg [rbp-0x14], esi; lea rax, [rdi+rax*4]; ret; 
0x000000001b43e3: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4563: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001a3da8: sar byte ptr [rbx], cl; add al, 0xe; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35ef: sar byte ptr [rbx], cl; or al, 0x6; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5a38: sar byte ptr [rbx], cl; or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000045c6a: sar byte ptr [rbx], cl; sbb eax, 0xe9f63100; imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000001b5b88: sar byte ptr [rbx], cl; xchg [rax], r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d1c: sar byte ptr [rbx], cl; xchg al, r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d04: sar byte ptr [rbx], cl; xchg al, r8b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000090f77: sar byte ptr [rcx+0x1], 0xf0; cmpxchg [rdx], ecx; setne al; movzx eax, al; ret; 
0x0000000011bf48: sar byte ptr [rcx+0x5], 0x41; mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x000000001ae84a: sar byte ptr [rcx], 0xc2; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b58e2: sar byte ptr [rcx], 0xc2; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5f10: sar byte ptr [rcx], 0xc2; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b63cd: sar byte ptr [rcx], 0xc2; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b405f: sar byte ptr [rcx], 0xc6; jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b402d: sar byte ptr [rcx], 0xc6; jb short 0x00000000001b403b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40ab: sar byte ptr [rcx], 0xc6; jb short 0x00000000001b40f4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x000000000d7c86: sar byte ptr [rcx], 0xfe; jne short 0x00000000000d7c90; ret; 
0x000000000e5946: sar byte ptr [rdi+0x1], 0xb8; out 0x0, al; add [rax], al; syscall; 
0x00000000094986: sar byte ptr [rdi+0x2], cl; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000053a3d: sar byte ptr [rdi+0x2], cl; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000099c92: sar byte ptr [rdi+0xb], cl; mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x000000000f0242: sar byte ptr [rdi+rdi], 0x1; jne short 0x00000000000f0229; mov eax, 0x1; ret; 
0x00000000114757: sar byte ptr [rdi-0x64], 0xb8; add [rcx], eax; add [rax], al; syscall; 
0x000000000ecfe6: sar byte ptr [rdx+0x100], 0x1; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000095cd7: sar byte ptr [rdx+0x16], 0x48; cmp [rdi+0x628], edi; cmove eax, edx; ret; 
0x00000000090de1: sar byte ptr [rdx+0x1], 0xf0; cmpxchg [rdi], edx; jne short 0x0000000000090e23; xor eax, eax; ret; 
0x000000000918bd: sar byte ptr [rdx+0x1], cl; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000913aa: sar byte ptr [rdx+0x1], cl; mov eax, 0xca; syscall; 
0x00000000093677: sar byte ptr [rdx+0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000099941: sar byte ptr [rdx+0x1], cl; mov esi, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000091386: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528ec: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, r12d; syscall; 
0x0000000009ad73: sar byte ptr [rdx+0x1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009a535: sar byte ptr [rdx+0x1], cl; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093e6d: sar byte ptr [rdx+0x1], cl; mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000094413: sar byte ptr [rdx+0x1], cl; mov rdi, r15; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000093a1b: sar byte ptr [rdx+0x1], cl; mov rdi, r15; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000092f66: sar byte ptr [rdx+0x1], cl; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000009b10f: sar byte ptr [rdx+0x1], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009132f: sar byte ptr [rdx+0x2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000912c9: sar byte ptr [rdx+0x2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000094462: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; mov esi, [rsp+0x18]; xor sil, 0x81; syscall; 
0x00000000094033: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; mov esi, [rsp+0x8]; xor sil, 0x81; syscall; 
0x00000000093bcb: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; mov esi, ebx; xor sil, 0x81; syscall; 
0x00000000092f93: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x00000000092a53: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000099fcc: sar byte ptr [rdx+0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000093b1c: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000093f76: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, r13; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000943b6: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, r14; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000009b02b: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009a55c: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000009b406: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000016b29d: sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, r12; call r13; 
0x0000000016d009: sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, rbp; call r12; 
0x0000000016cedb: sar byte ptr [rdx-0x1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx; 
0x0000000009187c: sar byte ptr [rdx-0x2], cl; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000ba2d9: sar byte ptr [rdx], 0x48; lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000abd05: sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000015222a: sar byte ptr [rdx], cl; hlt; jmp qword ptr [rsi-0x70]; 
0x000000000a0556: sar byte ptr [rip-0x1000], 0x77; or al, [rcx+rcx*4-0x40]; ret; 
0x00000000120b01: sar byte ptr [rsi+0x1], cl; call r12; 
0x00000000094af4: sar byte ptr [rsi+0x20], cl; lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x00000000144821: sar byte ptr [rsi+0x5], 0x80; cmp ebp, [rsi]; je short 0x0000000000144830; pop rbx; ret; 
0x00000000094bf4: sar byte ptr [rsi+0x80], cl; mov eax, r9d; syscall; 
0x00000000091bf1: sar byte ptr [rsi+0x80], cl; mov rdi, r15; mov eax, r9d; syscall; 
0x00000000099eea: sar byte ptr [rsi+0x80], cl; mov rdi, rbp; mov eax, r8d; syscall; 
0x000000000919e9: sar byte ptr [rsi+0x81], cl; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000977a2: sar byte ptr [rsi+0x87], cl; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x00000000099047: sar byte ptr [rsi+0x8], cl; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000113484: sar byte ptr [rsi-0x1], cl; mov eax, 0x1b4; syscall; 
0x00000000099c5a: sar byte ptr [rsi-0x1d], cl; mov eax, [rip+0x17f651]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000002a3b7: sar byte ptr [rsi], 0x1; jmp rax; 
0x0000000017b2fa: sar byte ptr [rsi], 0x41; jmp rcx; 
0x00000000172a4a: sar byte ptr [rsp+rdi*8], cl; jmp qword ptr [rsi-0x70]; 
0x00000000155310: sar ch, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x000000001a44bb: sar ch, 0xff; jmp qword ptr [rdx-0xf]; 
0x0000000010b4f7: sar cl, 0x1; dec dword ptr [rax-0x77]; ret; 
0x0000000006317e: sar cl, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000011143b: sar dh, 0xff; call qword ptr [rax+0x75f68548]; 
0x0000000008fe26: sar dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000006b646: sar dl, 0xff; inc dword ptr [rcx+0xf]; ret; 
0x0000000006ad29: sar dl, 0xff; inc dword ptr [rcx-0x7d]; jmp qword ptr [rdi+rcx]; 
0x0000000006cb87: sar dl, 0xff; jmp qword ptr [rbx+rcx*4]; 
0x000000001138ce: sar dl, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000001a3e79: sar dword ptr [rax+rcx*2+0x11], 0x1; imul edi, ebp, 0x487cd162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x000000001a4311: sar dword ptr [rax+rcx*2+0x11], 0x1; jmp qword ptr [r10-0x2f]; 
0x000000001a3e80: sar dword ptr [rax+rcx*2+0x11], 0x1; jno short 0x00000000001a3e84; vmovups [r9-0x40], zmm7; ret; 
0x000000001a3e87: sar dword ptr [rax+rcx*2+0x11], 0x1; jns short 0x00000000001a3e8c; ret; 
0x000000001966fb: sar dword ptr [rbp+0x2], 0x0; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x000000000c5303: sar dword ptr [rbx], 0x15; add [rax-0x75], cl; xor al, 0x1; add [rax], al; ret; 
0x0000000011d14b: sar dword ptr [rdi+rcx+0x64d8f700], 0x89; add bh, [rax-0x1]; ret; 
0x00000000075a45: sar dword ptr [rdx+0x1], cl; jmp rsi; 
0x000000001281c9: sar dword ptr [rdx], 0x1; cmovb rax, rdx; ret; 
0x000000001a0be7: sar dword ptr [rsi+0x7f], 0x0; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001b79a2: sar dword ptr [rsi], 0x1; jmp r9; 
0x00000000073065: sar dword ptr [rsi], 0x1; jmp rcx; 
0x000000000922f7: sar eax, 0x1; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c7cf2: sar eax, 0x1; dec dword ptr [rax-0x7d]; ret; 
0x00000000099cb6: sar eax, 0x1c; and eax, 0x3; mov [rsi], eax; xor eax, eax; ret; 
0x00000000099ce6: sar eax, 0x1e; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x000000000417c1: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x00000000177f88: sar eax, 0x1f; ret; 
0x0000000004102c: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000092337: sar eax, 0x2; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x000000000871a6: sar eax, 0x2; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000084d5f: sar eax, 0x2; ret; 
0x0000000008454c: sar eax, 0x2; sub eax, 0x1; ret; 
0x00000000041b19: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000413be: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x00000000175e49: sar eax, 0x6; cdqe; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x00000000175e17: sar eax, 0x6; cdqe; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000001366a1: sar eax, 0x6; ret; 
0x000000001a7d9a: sar eax, cl; jmp qword ptr [rsi+0x66]; 
0x0000000005fe0b: sar ebp, 0xff; call qword ptr [rax+0x55b60f41]; 
0x0000000002823b: sar ebp, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x000000000854f2: sar ebp, 0xff; jmp qword ptr [rsi+0x2e]; 
0x0000000013551b: sar ebp, cl; call qword ptr [rax-0x18]; 
0x00000000159351: sar ebp, cl; jmp qword ptr [rsi+0x66]; 
0x000000000d75cb: sar ebx, 0xff; call qword ptr [rax+0x166f0ff3]; 
0x00000000146d4a: sar ebx, 0xff; jmp far fword ptr [rsi]; 
0x0000000013121f: sar edi, 0x1; dec dword ptr [rcx]; ret; 
0x00000000159fe2: sar edi, 0x1; jmp qword ptr [rsi+0x66]; 
0x000000000b0dc5: sar edi, 0x1; push qword ptr [rcx]; ror byte ptr [rax-0x77], cl; ret; 
0x000000000906b9: sar edi, 0x1; ror byte ptr [rax-0x77], 0x1; adc [r8+0x5a], bl; pop rbx; ret; 
0x000000001b4ac6: sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad6: sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae6: sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab6: sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000001b53a4: sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548f: sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5434: sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e5: sar edi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x00000000199e73: sar edi, 0xc0; jne short 0x0000000000199ec0; vzeroupper; ret; 
0x000000001a14d3: sar edi, 0xc0; jne short 0x00000000001a1520; vzeroupper; ret; 
0x0000000019a14f: sar edi, 0xc0; vzeroupper; ret; 
0x0000000011ebc9: sar edi, 0xf; add [rax], al; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x0000000002803b: sar edi, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x00000000117d7f: sar edi, cl; jmp qword ptr [rdi+rax*8+0x3]; 
0x000000000a8247: sar edi, cl; jmp qword ptr [rsi+0xf]; 
0x000000000a8246: sar edi, cl; jmp qword ptr [rsi+0xf]; 
0x000000000c3a0f: sar edx, 0x10; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000016b695: sar edx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c62a: sar edx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x000000000845f6: sar edx, 0x2; sub eax, edx; ret; 
0x00000000147cd0: sar edx, 0x4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x000000000b5308: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000bac07: sar edx, cl; test rdx, rdx; je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000baaa8: sar edx, cl; test rdx, rdx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa4b: sar edx, cl; test rdx, rdx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac77: sar edx, cl; test rdx, rdx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000001af230: sar esi, 0x28; jg short 0x00000000001af235; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001af28f: sar esi, 0x28; jg short 0x00000000001af294; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c82: sar esi, 0x48; jg short 0x00000000001a6c87; ret; 
0x000000001a6cd8: sar esi, 0x48; jg short 0x00000000001a6cdd; ret; 
0x000000000d778b: sar esi, 0xff; call qword ptr [rax+0xf6f0ff3]; 
0x0000000002813b: sar esi, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x000000001ae48e: sar esi, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000000c63ee: sar esi, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000601ba: sar esi, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000002833b: sar esp, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x000000001ac3f1: sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000001ab733: sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000169357: sar esp, cl; jmp qword ptr [rsi+0xf]; 
0x000000000a54cf: sar r15b, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000871a5: sar rax, 0x2; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000084d5e: sar rax, 0x2; ret; 
0x0000000008454b: sar rax, 0x2; sub eax, 0x1; ret; 
0x00000000041b18: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000413bd: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000001366a0: sar rax, 0x6; ret; 
0x000000001b53a3: sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548e: sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5433: sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e4: sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000016b694: sar rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c629: sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x000000000845f5: sar rdx, 0x2; sub eax, edx; ret; 
0x00000000147ccf: sar rdx, 0x4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x000000000b5307: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000bac06: sar rdx, cl; test rdx, rdx; je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000baaa7: sar rdx, cl; test rdx, rdx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa4a: sar rdx, cl; test rdx, rdx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac76: sar rdx, cl; test rdx, rdx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000000bac86: sar rdx, cl; test rdx, rdx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000001b4bea: sarx eax, eax, ecx; test eax, eax; je 0x00000000001b4b07; tzcnt eax, eax; ret; 
0x000000001b2382: sarx eax, eax, edx; test eax, eax; je 0x00000000001b22a7; tzcnt eax, eax; ret; 
0x0000000005a165: saveprevssp; mov [r9+0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000008d8df: sbb [r11+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000a7a02: sbb [r11+0x5d], bl; pop r12; ret; 
0x0000000015f23b: sbb [r11+0xe7603f8], r8b; mov eax, 0x2; ret; 
0x0000000008a644: sbb [r15], cl; adc [rbx+0x28], eax; pop rbx; ret; 
0x00000000090526: sbb [r8+0x5a], bl; pop rbx; ret; 
0x0000000008d75a: sbb [r8-0x77], r9b; movups [rdi+0x8], xmm1; ret; 
0x000000000e7c52: sbb [r8-0x7d], r9b; ret; 
0x0000000009b7eb: sbb [r8], al; xor eax, eax; ret; 
0x000000000c3ff4: sbb [r8], r14b; in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000c4016: sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000c4054: sbb [r8], r14b; in eax, dx; mov [rdi+0x1c], ch; ret; 
0x0000000015d2d5: sbb [r8], r8d; add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000008869f: sbb [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000016ccec: sbb [r9+r9*4-0x40], r8b; ret; 
0x0000000016a22c: sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000001bab27: sbb [r9-0x75], r9b; push rbp; adc [rax-0x7d], cl; ret; 
0x00000000165ac7: sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x0000000014a661: sbb [r9], r9b; add al, ch; out 0xf7, al; out dx, al; jmp qword ptr [rsi+0xf]; 
0x000000001148eb: sbb [rax+0x101], bh; syscall; 
0x00000000119908: sbb [rax+0x115], bh; syscall; 
0x00000000127ed8: sbb [rax+0x120], bh; syscall; 
0x0000000006d0fe: sbb [rax+0x1], cl; ret far; 
0x000000000f410b: sbb [rax+0x1], edi; ret; 
0x000000000443fe: sbb [rax+0x24048b48], dl; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000127c05: sbb [rax+0x2c], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001282a8: sbb [rax+0x45], bh; syscall; 
0x00000000090527: sbb [rax+0x5a], bl; pop rbx; ret; 
0x0000000014855a: sbb [rax+0x63], cl; enter 0x8d49, 0x1c; or cl, [rcx-0x7d]; ret; 
0x0000000004447e: sbb [rax+0x758b49], dl; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp]; call rax; 
0x000000000921f3: sbb [rax+rbx], ebp; pop rbx; mov eax, fs:[rax]; ret; 
0x0000000009c56d: sbb [rax+rcx-0x3d], dh; nop [rax]; mov [rdx+0x8], rax; ret; 
0x0000000009c56c: sbb [rax+rcx-0x3d], sil; nop [rax]; mov [rdx+0x8], rax; ret; 
0x000000001149f3: sbb [rax+rdx], eax; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000133c7f: sbb [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x000000000c07c3: sbb [rax-0x73], cl; jg short 0x00000000000c07e0; jne 0x00000000000c0d90; ret; 
0x000000000c1f47: sbb [rax-0x73], cl; jg short 0x00000000000c1f64; jne 0x00000000000c25e0; ret; 
0x000000001163e2: sbb [rax-0x73], cl; sub [r9+r9*4-0x1a], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000107552: sbb [rax-0x73], ecx; adc eax, 0xcde86; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000000c07e6: sbb [rax-0x73], ecx; jg short 0x00000000000c0804; jne 0x00000000000c0d90; ret; 
0x000000000c1f7a: sbb [rax-0x73], ecx; jg short 0x00000000000c1f98; jne 0x00000000000c25e0; ret; 
0x00000000029d85: sbb [rax-0x75], cl; adc [rax-0x75], cl; and al, 0x8; call rax; 
0x000000000fdd85: sbb [rax-0x75], cl; add cl, [rax-0x77]; ret; 
0x000000001754e7: sbb [rax-0x75], cl; add eax, 0xa39d9; mov rdi, [rsp]; mov rax, [rax+0x338]; jmp rax; 
0x000000000e7359: sbb [rax-0x75], cl; and al, 0x10; call rax; 
0x00000000174ec0: sbb [rax-0x75], cl; and al, 0x10; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000002e040: sbb [rax-0x75], cl; je short 0x000000000002e069; mov rdi, [rsp+0x50]; mov rax, [rsp+0x28]; call rax; 
0x0000000003518f: sbb [rax-0x75], cl; je short 0x00000000000351b8; mov rdi, [rsp+0x38]; call r15; 
0x000000000a041a: sbb [rax-0x75], cl; je short 0x00000000000a0443; adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x000000001149bb: sbb [rax-0x75], cl; je short 0x00000000001149e4; adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x000000001168a3: sbb [rax-0x75], cl; je short 0x00000000001168cc; sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x00000000116b93: sbb [rax-0x75], cl; je short 0x0000000000116bbc; sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x00000000116bfb: sbb [rax-0x75], cl; je short 0x0000000000116c24; sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x0000000012835a: sbb [rax-0x75], cl; je short 0x0000000000128383; adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x0000000009d433: sbb [rax-0x75], cl; jge short 0x000000000009d440; call qword ptr [rbp]; 
0x0000000009d397: sbb [rax-0x75], cl; js short 0x000000000009d3a4; call qword ptr [rax]; 
0x00000000046056: sbb [rax-0x75], ecx; adc [rbx+0x48], bl; mov dword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x0000000004e7d5: sbb [rax-0x76b7cf05], al; mov byte ptr [rcx+0xf], 0x95; ret; 
0x0000000011c34f: sbb [rax-0x77], cl; add eax, 0x104ec9; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000008d796: sbb [rax-0x77], cl; movups [rdi+0x8], xmm0; ret; 
0x0000000008d75b: sbb [rax-0x77], cl; movups [rdi+0x8], xmm1; ret; 
0x00000000164597: sbb [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x48]; 
0x00000000085dee: sbb [rax-0x77], cl; ret far; 
0x000000000e5d67: sbb [rax-0x77], cl; ret; 
0x0000000008f527: sbb [rax-0x77], cl; sbb eax, 0x18c529; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000009e62b: sbb [rax-0x7b], cl; shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x000000000565e6: sbb [rax-0x7b], ecx; div byte ptr [rbp+0x2c]; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x0000000002d390: sbb [rax-0x7d], cl; ret; 
0x00000000171a08: sbb [rax-0x7d], ecx; ret; 
0x000000000d83a6: sbb [rax-0x7d], ecx; rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 0x1; ret; 
0x000000000a26a5: sbb [rax-0x9], cl; fimul st, dword ptr [rax-0x77]; ror dword ptr [rax+0x21], cl; ret; 
0x000000000fba1d: sbb [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x0000000008f599: sbb [rax], al; add [rax], al; add [rax], al; mov qword ptr [rip+0x18c4ae], 0x0; ret; 
0x0000000008f5a4: sbb [rax], al; add [rax], al; add [rax], al; ret; 
0x00000000094925: sbb [rax], al; add [rax], al; lea rdi, [rax+0x2e0]; mov eax, 0x111; syscall; 
0x0000000009d545: sbb [rax], al; add [rax], al; syscall; 
0x00000000114988: sbb [rax], al; add [rax], al; test eax, eax; jne short 0x00000000001149a0; syscall; 
0x0000000018871e: sbb [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000008f52d: sbb [rax], al; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000004181a: sbb [rax], al; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000090401: sbb [rax], al; call qword ptr [rax+0x368]; 
0x0000000008d09c: sbb [rax], al; cmp eax, 0x1; jg short 0x000000000008d0e0; add rsp, 0x8; ret; 
0x0000000008f574: sbb [rax], al; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x00000000090195: sbb [rax], al; lea rdx, [rsp+0x17]; lea rsi, [rsp+0x20]; lea rdi, [rsp+0x18]; call qword ptr [r12+0x358]; 
0x0000000009e5e6: sbb [rax], al; mov [rdi+0x18], rax; ret; 
0x0000000008a6aa: sbb [rax], al; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x000000000902fd: sbb [rax], al; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x0000000009e5d9: sbb [rax], al; mov dword ptr [rdi], 0x0; mov [rip+0x1815e0], rdi; mov [rdi+0x18], rax; ret; 
0x000000000897d5: sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000003fc6e: sbb [rax], al; mov edx, edx; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000909fd: sbb [rax], al; mov rdi, [rdi+0x10]; call qword ptr [rax+0x360]; 
0x0000000003c476: sbb [rax], al; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x0000000003ff42: sbb [rax], al; movzx r10d, r10b; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x000000000921f5: sbb [rax], al; pop rbx; mov eax, fs:[rax]; ret; 
0x00000000090573: sbb [rax], al; push r10; call rax; 
0x0000000008f4c9: sbb [rax], al; ret; 
0x000000000891bc: sbb [rax], al; setne r8b; mov eax, r8d; ret; 
0x0000000009b7ec: sbb [rax], al; xor eax, eax; ret; 
0x000000000c3ff5: sbb [rax], dh; in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000c4017: sbb [rax], dh; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000c4055: sbb [rax], dh; in eax, dx; mov [rdi+0x1c], ch; ret; 
0x00000000121c3e: sbb [rax], dl; add [rax], al; ret; 
0x0000000015d2d6: sbb [rax], eax; add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000006c5de: sbb [rax], eax; add [rax-0x77], cl; ret; 
0x00000000126b19: sbb [rax], eax; add [rax], al; syscall; 
0x000000000b88ee: sbb [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000075996: sbb [rax], eax; add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x000000000af2fd: sbb [rax], eax; add bh, dh; ret; 
0x00000000038879: sbb [rax], eax; cmp [rdx+0x38], edi; jbe short 0x0000000000038897; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000080a54: sbb [rax], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x0000000008118d: sbb [rax], eax; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000875bd: sbb [rax], eax; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002a3ad: sbb [rax], eax; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x0000000007d336: sbb [rax], eax; mov rax, [rax+rdi*8]; ret; 
0x0000000003a9f1: sbb [rax], eax; movsxd rax, [rcx+rdx*4]; add rax, rcx; notrack jmp rax; 
0x00000000038895: sbb [rax], eax; ret; 
0x00000000173703: sbb [rax], esi; cld; jmp qword ptr [rsi+0xf]; 
0x000000000d34a3: sbb [rbp+0x31], al; ror byte ptr [rax-0x77], 0xef; call rbx; 
0x000000000a2478: sbb [rbp+0x41], bl; pop rsp; ret; 
0x00000000046153: sbb [rbp+0x4c], bl; mov eax, esp; pop r12; ret; 
0x00000000168dd0: sbb [rbp+rcx+0x48], dh; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008e5de: sbb [rbx+0x110ffee0], eax; cmp [r9-0x3b7cb7fd], cl; adc [rax+0x1], bh; pop rbx; ret; 
0x00000000099e17: sbb [rbx+0x237501fe], al; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x0000000016767b: sbb [rbx+0x41], bl; pop rsp; ret; 
0x0000000008d8e0: sbb [rbx+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000142f0a: sbb [rbx+0x49], bl; mov [rcx], edx; ret; 
0x0000000008860f: sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000610cc: sbb [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000a7a03: sbb [rbx+0x5d], bl; pop r12; ret; 
0x00000000041f58: sbb [rbx+0x5d], bl; ret; 
0x00000000092767: sbb [rbx+0x5fba01fe], al; add [rax], al; add [rax+0x16], bh; cmove eax, edx; ret; 
0x0000000015f23c: sbb [rbx+0xe7603f8], al; mov eax, 0x2; ret; 
0x0000000015d959: sbb [rbx+rcx*4+0x44], ecx; and al, 0x28; mov rdx, [rsp+0x20]; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x0000000008f20b: sbb [rbx-0x2fd6efb9], cl; ret; 
0x00000000126082: sbb [rbx-0x47f7db84], cl; adc al, 0x1; add [rax], al; syscall; 
0x00000000129449: sbb [rbx-0x6f3cff00], al; ret; 
0x000000000e566a: sbb [rbx], al; add [rax], al; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x00000000147dd3: sbb [rbx], ebp; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000014cd99: sbb [rcx+0x29], al; ret; 
0x00000000099b6e: sbb [rcx+0x80e6], al; add cl, ch; push rsi; je short 0x0000000000099b78; jmp qword ptr [rsi+0xf]; 
0x000000001269f1: sbb [rcx+rax-0x3d], dh; xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x000000000e7ed6: sbb [rcx+rcx*4+0x2b], esp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000003f19b: sbb [rcx+rcx*4+0x4], cl; and al, 0xe8; ret far; 
0x0000000016a22d: sbb [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x20]; 
0x00000000086d0a: sbb [rcx+rcx*4-0x11], cl; lea r9, [rsp+0x28]; call rbp; 
0x00000000162efe: sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x0000000005d8cb: sbb [rcx+rcx*4-0x19], cl; sub rsi, rax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000001666fa: sbb [rcx+rcx*4-0x1], cl; call rcx; 
0x0000000005385f: sbb [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x0000000007f257: sbb [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000089977: sbb [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000014355d: sbb [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret; 
0x0000000016cc77: sbb [rcx+rcx*4-0x40], al; ret; 
0x0000000016ccaf: sbb [rcx+rcx*4-0x40], cl; ret; 
0x00000000142d0e: sbb [rcx+rcx*4-0x40], eax; ret; 
0x0000000011ecf3: sbb [rcx-0x2708fff1], esp; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001bab28: sbb [rcx-0x75], cl; push rbp; adc [rax-0x7d], cl; ret; 
0x000000000cd76e: sbb [rcx-0x7d], al; call far fword ptr [rax]; 
0x000000000f5974: sbb [rcx-0x7d], ecx; ret; 
0x000000000c6d7a: sbb [rcx], al; add [rax-0x73], cl; adc eax, 0x118ac; cmovne rax, rdx; ret; 
0x00000000165ac8: sbb [rcx], al; add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x00000000042949: sbb [rcx], al; add [rax], al; ret; 
0x00000000119428: sbb [rcx], al; add [rax], al; syscall; 
0x000000000f1dcd: sbb [rcx], bh; ret; 
0x0000000014a662: sbb [rcx], cl; add al, ch; out 0xf7, al; out dx, al; jmp qword ptr [rsi+0xf]; 
0x00000000061126: sbb [rcx], dh; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000867fe: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000126b0d: sbb [rcx], dh; rol byte ptr [rbx+0x2b7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x00000000052ed4: sbb [rcx], dh; ror byte ptr [rax-0x77], cl; ret far; 
0x000000000c1a87: sbb [rcx], dl; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a54: sbb [rcx], dl; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000125d0e: sbb [rcx], eax; add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x00000000125cba: sbb [rcx], eax; add [rax], al; syscall; 
0x000000000ecf14: sbb [rcx], eax; add [rdx+0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000099533: sbb [rcx], ecx; cli; jmp qword ptr [rsi+0xf]; 
0x000000000c191b: sbb [rcx], edx; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab6: sbb [rcx], r10b; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000abcc2: sbb [rdi*1-0x3fceea8c], edi; ret; 
0x000000000d8cfa: sbb [rdi+0x23], edi; mov rax, r12; pop r12; ret; 
0x0000000015de23: sbb [rdi+0x8], eax; add [rbp+rcx*4+0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x000000000c50a7: sbb [rdi], cl; adc [rax], eax; movups [rax+rdx-0x10], xmm0; ret; 
0x0000000008a645: sbb [rdi], cl; adc [rbx+0x28], eax; pop rbx; ret; 
0x00000000169337: sbb [rdi], cl; adc [rsp+0x38], eax; call qword ptr [rax+0x18]; 
0x0000000015e403: sbb [rdi], cl; adc [rsp], edx; call qword ptr [rax]; 
0x00000000125f06: sbb [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000012e2a2: sbb [rdi], cl; mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret; 
0x000000001111f6: sbb [rdi], ecx; mov dh, 0xc0; movsxd rax, [r12+rax*4]; add rax, r12; notrack jmp rax; 
0x0000000003cd76: sbb [rdi], ecx; ret far; 
0x000000000c1f7e: sbb [rdi], ecx; test [rbx+0x6], ebx; add [rax], al; ret; 
0x000000000a7549: sbb [rdi], edx; add [rbx-0x1f6217c8], cl; stc; jmp qword ptr [rsi+0x66]; 
0x000000000ecf52: sbb [rdx+rdi*4], edx; jge short 0x00000000000ecf58; add [rax+0x7f], bh; cmove rax, rdx; ret; 
0x000000000f46db: sbb [rdx+rdx*2-0x73], dh; add [rax-0x7d], ecx; ret; 
0x000000000c535a: sbb [rdx], al; add [rax], al; ret; 
0x0000000014a62e: sbb [rdx], al; add [rax], al; test rax, rax; je short 0x000000000014a640; ret; 
0x000000000b1524: sbb [rdx], dl; add [rcx+0x3c6349d7], cl; mov eax, 0x3ec7014c; jmp rdi; 
0x00000000153b69: sbb [rdx], eax; add [rcx-0x75], al; notrack call qword ptr [rsp+0x70]; 
0x000000000b1464: sbb [rdx], edx; add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; notrack jmp rdx; 
0x0000000011bba8: sbb [rdx], edx; sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall; 
0x00000000150d26: sbb [rip+0x1f88300], cl; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000083d46: sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x000000001674a4: sbb [rsi+0x6], bh; call qword ptr [rax+0x28]; 
0x0000000016746b: sbb [rsi+0x6], bh; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000000427cf: sbb [rsi+0x8], bh; mov eax, 0x82; syscall; 
0x0000000013f363: sbb [rsi+rcx], ebp; add al, ch; adc al, 0x20; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000012943a: sbb [rsi-0x7d], ah; add [rcx], al; ret; 
0x00000000129439: sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x000000000df0da: sbb [rsi-0x7f], ah; out 0x0, al; and [rax-0x80], al; call qword ptr [rax]; 
0x00000000181a47: sbb [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000010f255: sbb al, 0x0; add [rax-0x75], cl; je short 0x000000000010f280; adc [rax-0x77], cl; ret; 
0x0000000015dd36: sbb al, 0x0; add [rax], al; add bl, ch; mov eax, 0xfd89dee8; jmp qword ptr [rsi+0x66]; 
0x00000000113a4c: sbb al, 0x0; add [rax], al; syscall; 
0x00000000196ab9: sbb al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000196a13: sbb al, 0x0; add [rcx+0x29], cl; ret far; 
0x00000000051696: sbb al, 0x0; lea rax, [rip+0x1ca241]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000005169d: sbb al, 0x0; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000053a21: sbb al, 0x0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000c6403: sbb al, 0x15; add [rax+0x39], cl; ret; 
0x00000000132abf: sbb al, 0x20; je short 0x0000000000132ad0; pop rbx; ret; 
0x000000000d9055: sbb al, 0x24; call rbx; 
0x0000000004392e: sbb al, 0x24; mov rsi, r15; mov rdi, r12; mov rdx, r14; call rbp; 
0x000000000eabf6: sbb al, 0x2; add [rax], al; mov eax, 0x111; syscall; 
0x0000000011db50: sbb al, 0x38; adc [rax], al; add rsp, 0x8; ret; 
0x00000000167344: sbb al, 0x48; add esp, 0x10; pop rbx; ret; 
0x0000000014a367: sbb al, 0x48; add esp, 0x118; ret; 
0x000000000433aa: sbb al, 0x48; add esp, 0x98; pop rbp; pop r12; ret; 
0x000000001b5f14: sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x000000000c0879: sbb al, 0x48; lea edi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c200d: sbb al, 0x48; lea edi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x0000000007dd4e: sbb al, 0x48; lea edi, [rip+0x154642]; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; notrack jmp rsi; 
0x000000000ea54c: sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000c2034: sbb al, 0x49; sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000a05fe: sbb al, 0x4c; mov esi, esp; mov edi, ebp; mov eax, 0xde; syscall; 
0x00000000152750: sbb al, 0x5c; in eax, dx; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000133cd9: sbb al, 0x74; adc bl, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x00000000099cb8: sbb al, 0x83; loopne 0x0000000000099cbf; mov [rsi], eax; xor eax, eax; ret; 
0x00000000091113: sbb al, 0x83; ret; 
0x000000001282c0: sbb al, 0x88; idiv bh; mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x000000001200c4: sbb al, 0x89; ret far; 
0x00000000165af4: sbb al, 0xb8; add [rax], eax; add [rax], al; movups [rcx], xmm2; ret; 
0x000000000f41c3: sbb al, 0xb8; add al, [rax]; add [rax], al; ret; 
0x0000000016882f: sbb al, 0xe8; ret far; 
0x000000000eac9b: sbb al, 0xf4; mov eax, esi; syscall; 
0x00000000127128: sbb al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000087a33: sbb al, 0xfa; jmp qword ptr [rsi+0x2e]; 
0x0000000008795b: sbb al, 0xfa; jmp qword ptr [rsi-0x70]; 
0x0000000011ec91: sbb al, [rax]; add [rax], al; syscall; 
0x00000000196c9a: sbb al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000007b21c: sbb al, [rax]; add [rcx-0x7d], al; call qword ptr [rbx+0xf]; 
0x0000000004142a: sbb al, [rax]; andpd xmm1, [rip+0x1a0c4c]; orpd xmm0, xmm1; ret; 
0x00000000074bb0: sbb al, [rax]; mov [rbp-0x8a8], rax; mov [rbp-0x8a0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007a684: sbb al, [rax]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x000000000415b6: sbb al, [rax]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041975: sbb al, [rax]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041950: sbb al, [rax]; mulss xmm0, [rip+0x1a0786]; ret; 
0x000000000415dc: sbb al, [rax]; orpd xmm0, [rip+0x1a0aba]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000415ae: sbb al, [rax]; orpd xmm0, [rip+0x1a0af8]; mulsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000041432: sbb al, [rax]; orpd xmm0, xmm1; ret; 
0x0000000004196e: sbb al, [rax]; orps xmm0, [rip+0x1a0759]; mulss xmm0, [rip+0x1a0751]; ret; 
0x00000000041949: sbb al, [rax]; orps xmm0, [rip+0x1a078e]; mulss xmm0, [rip+0x1a0786]; ret; 
0x00000000041baa: sbb al, [rax]; pand xmm0, [rip+0x1a055c]; por xmm0, xmm1; ret; 
0x00000000041bb2: sbb al, [rax]; por xmm0, xmm1; ret; 
0x00000000029f39: sbb al, [rax]; ret; 
0x00000000029eda: sbb al, [rax]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000029ef9: sbb al, [rax]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x000000000c514e: sbb al, [rbx+0x1c7701fa]; jb short 0x00000000000c5127; mov [rax], sil; ret; 
0x0000000016ad20: sbb al, [rcx+0xf]; ret; 
0x000000001818c7: sbb al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000011991e: sbb al, ch; mov esp, 0x8bfff771; and al, 0x18; add rsp, 0x28; ret; 
0x000000000ea673: sbb al, ch; mul dword ptr [rbx-0x6]; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000196c99: sbb al, fs:[rax]; add [rbp-0x77], cl; ret far; 
0x0000000007b21b: sbb al, fs:[rax]; add [rcx-0x7d], al; call qword ptr [rbx+0xf]; 
0x00000000042768: sbb ax, 0xf700; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000427a4: sbb ax, 0xf700; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000f41b3: sbb bh, [rax+0x2]; ret; 
0x000000001bb202: sbb bh, [rdx]; idiv bh; nop [rax+rax]; ret; 
0x00000000174cb1: sbb bh, ah; jmp qword ptr [rsi+0x66]; 
0x000000000e6a44: sbb bh, ah; jmp qword ptr [rsi+0xf]; 
0x00000000155a72: sbb bh, ch; or al, 0x0; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x000000000a7d11: sbb bh, dh; jmp qword ptr [rsi+0x2e]; 
0x0000000002b8b2: sbb bl, [rsp+rdx-0x2076b800]; call r14; 
0x000000001b5496: sbb bl, al; mov rax, r8; ret; 
0x00000000108bda: sbb bl, al; nop [rax]; endbr64; mov eax, 0x8e; syscall; 
0x0000000016387c: sbb bl, bh; jmp qword ptr [rsi-0x7d]; 
0x0000000015e1e2: sbb bl, ch; mov edx, 0xfd8536e8; jmp qword ptr [rsi+0xf]; 
0x000000000c0b3a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000bfe6b: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000bfeaa: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000001330b7: sbb bl, dh; movq mm1, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x00000000133253: sbb bl, dh; movq mm2, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x000000000c0b39: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000bfe6a: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000bfea9: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c5359: sbb byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000e5669: sbb byte ptr [rax], 0x3; add [rax], al; test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000c5503: sbb byte ptr [rbp+0x2000000], 0x48; lea eax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x00000000091c8b: sbb byte ptr [rbx+rax], 0x0; add [rax], eax; add [rax], al; lea rdi, [r8+0x35c]; syscall; 
0x00000000168b14: sbb byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; mov rax, [rip+0xb0309]; pop rbx; ret; 
0x00000000042e8c: sbb byte ptr [rdi+0x1d], 0x0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000018805d: sbb byte ptr [rdi], 0x0; add [rbp-0x77], cl; ret far; 
0x000000000a8b93: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a73: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b3: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x0000000005711a: sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x0000000005711b: sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000c081b: sbb cl, [rax-0x73]; jg short 0x00000000000c083a; jne 0x00000000000c0d90; ret; 
0x000000000c1faf: sbb cl, [rax-0x73]; jg short 0x00000000000c1fce; jne 0x00000000000c25e0; ret; 
0x000000000326de: sbb cl, [rcx-0x73]; add cl, [rax+0x39]; ret far; 
0x000000000c081f: sbb cl, [rdi]; test [rdx+0x5], ebp; add [rax], al; ret; 
0x000000000f1dca: sbb cl, al; clc; sbb [rcx], bh; ret; 
0x000000000f7bf4: sbb cl, ch; imul edi, esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000052b50: sbb cl, ch; sub bh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000f6bf7: sbb dh, bl; call far fword ptr [rbx+0x31]; 
0x000000000f6bf6: sbb dh, bl; call far fword ptr [rbx+0x31]; 
0x000000000f6bbf: sbb dh, bl; jmp qword ptr [rsi+0xf]; 
0x0000000011688b: sbb dh, cl; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000106935: sbb dh, dl; call far fword ptr [rax+0x5a]; 
0x000000000da4bf: sbb dl, [rax+0x31]; ror byte ptr [rbp+rcx*4+0x44], 0x24; and al, ch; add edi, [rsi-0x8]; call far fword ptr [rcx+0x5e]; 
0x000000001bb9c2: sbb dl, [rcx+0x6]; add [rdi+0x650f405], al; add [rbx+0x1f7f01f8], al; pop rbx; ret; 
0x000000000b138f: sbb dl, [rdx]; add [rcx+0x3c6349cf], cl; mov ecx, 0x3ecf014c; jmp rdi; 
0x00000000106bab: sbb dl, bh; jmp qword ptr [rsi-0x70]; 
0x00000000106baa: sbb dl, dil; jmp qword ptr [rsi-0x70]; 
0x000000000f7013: sbb dword ptr [rbx-0x3d], 0x66; nop [rax+rax]; ret; 
0x00000000181989: sbb dword ptr [rbx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000075995: sbb dword ptr [rcx], 0x0; add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x000000000a830b: sbb dword ptr [rdi], 0x8d480001; adc eax, 0xfc4aa; cmovne rax, rdx; ret; 
0x000000000cbd98: sbb dword ptr [rip+0x48000001], 0x29; ret far; 
0x00000000045ea4: sbb eax, 0x0; add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret; 
0x00000000116305: sbb eax, 0x0; ret; 
0x00000000039bf4: sbb eax, 0x10894800; ret; 
0x00000000039bf5: sbb eax, 0x10894800; ret; 
0x0000000008280a: sbb eax, 0x10c48348; pop rbx; pop rbp; pop r12; ret; 
0x000000000c41db: sbb eax, 0x10f2f4; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a57: sbb eax, 0x10fa78; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a2e: sbb eax, 0x10faa1; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3a0e: sbb eax, 0x10fac1; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39e5: sbb eax, 0x10faea; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c39b6: sbb eax, 0x10fb19; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3997: sbb eax, 0x10fb38; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3912: sbb eax, 0x10fb3d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38f7: sbb eax, 0x10fb58; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3975: sbb eax, 0x10fb5a; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3945: sbb eax, 0x10fb8a; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c38c2: sbb eax, 0x10fb8d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3896: sbb eax, 0x10fbb9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3880: sbb eax, 0x10fbcf; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c385e: sbb eax, 0x10fbf1; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3839: sbb eax, 0x10fc16; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c381c: sbb eax, 0x10fc33; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c37a5: sbb eax, 0x10fcaa; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f67: sbb eax, 0x110468; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f32: sbb eax, 0x11049d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2f06: sbb eax, 0x1104c9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ef0: sbb eax, 0x1104df; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ece: sbb eax, 0x110501; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2ea9: sbb eax, 0x110526; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e8c: sbb eax, 0x110543; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2e34: sbb eax, 0x11059b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c277b: sbb eax, 0x110b80; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2682: sbb eax, 0x110d09; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c266c: sbb eax, 0x110d1f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c264c: sbb eax, 0x110d3f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b97: sbb eax, 0x111764; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b6e: sbb eax, 0x11178d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b4e: sbb eax, 0x1117ad; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1b25: sbb eax, 0x1117d6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1af6: sbb eax, 0x111805; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ad7: sbb eax, 0x111824; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a52: sbb eax, 0x111829; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1ab5: sbb eax, 0x111846; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1a85: sbb eax, 0x111876; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1970: sbb eax, 0x11190b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1942: sbb eax, 0x111939; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1919: sbb eax, 0x111962; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1297: sbb eax, 0x111f58; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1262: sbb eax, 0x111f8d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1236: sbb eax, 0x111fb9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1220: sbb eax, 0x111fcf; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11fe: sbb eax, 0x111ff1; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11d9: sbb eax, 0x112016; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c11bc: sbb eax, 0x112033; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c1164: sbb eax, 0x11208b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0f2b: sbb eax, 0x1121f0; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e32: sbb eax, 0x112379; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0e1c: sbb eax, 0x11238f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0dfc: sbb eax, 0x1123af; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c04b7: sbb eax, 0x112c64; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c048e: sbb eax, 0x112c8d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c046e: sbb eax, 0x112cad; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0445: sbb eax, 0x112cd6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0416: sbb eax, 0x112d05; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03f7: sbb eax, 0x112d24; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0372: sbb eax, 0x112d29; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03d5: sbb eax, 0x112d46; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03a5: sbb eax, 0x112d76; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c02a0: sbb eax, 0x112dfb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0272: sbb eax, 0x112e29; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c0249: sbb eax, 0x112e52; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc57: sbb eax, 0x1133c4; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfc22: sbb eax, 0x1133f9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbf6: sbb eax, 0x113425; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbe0: sbb eax, 0x11343b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbbe: sbb eax, 0x11345d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb99: sbb eax, 0x113482; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb7c: sbb eax, 0x11349f; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfb24: sbb eax, 0x1134f7; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000041817: sbb eax, 0x18b064; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000081dd2: sbb eax, 0x18c48348; pop rbx; pop rbp; ret; 
0x0000000008f52a: sbb eax, 0x18c529; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x0000000003ff3f: sbb eax, 0x18c534; movzx r10d, r10b; movsxd r10, [r11+r10*4]; add r10, r11; notrack jmp r10; 
0x000000000469cd: sbb eax, 0x19ce800; add [rax], al; lea rax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x000000000c08a5: sbb eax, 0x1d7f8d48; jne 0x00000000000c0d90; ret; 
0x000000000c2039: sbb eax, 0x1d7f8d48; jne 0x00000000000c25e0; ret; 
0x000000000c2064: sbb eax, 0x1ee88349; lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x00000000029ecc: sbb eax, 0x1eeff7; mov rsi, [r12]; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x000000001203f1: sbb eax, 0x1f0f3ceb; add [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret; 
0x00000000043128: sbb eax, 0x1f0fc300; add [rax], r8b; endbr64; mov eax, [rip+0x1d60aa]; ret; 
0x0000000004530b: sbb eax, 0x1f88300; jg short 0x0000000000045338; xor eax, eax; pop rbx; ret; 
0x000000000460cc: sbb eax, 0x1f88300; jg short 0x00000000000460f0; pop rbp; ret; 
0x0000000004602f: sbb eax, 0x22ae800; or [rax], al; pop rbx; ret; 
0x00000000045531: sbb eax, 0x258d4c00; mov byte ptr [rbx*1-0x1cc6b400], 0x73; or al, 0x90; call qword ptr [rbx]; 
0x00000000042485: sbb eax, 0x2896400; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007ad8b: sbb eax, 0x2b0; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000085f37: sbb eax, 0x31000001; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000003a369: sbb eax, 0x3486400; add al, 0x25; add [rax], al; add [rax], al; ret; 
0x0000000010f8f2: sbb eax, 0x3cde428d; sbb eax, 0xb60f1677; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; notrack jmp rax; 
0x0000000003b114: sbb eax, 0x3d8b4c00; ret; 
0x0000000011ece0: sbb eax, 0x448bfff7; and al, 0x8; add rsp, 0x28; ret; 
0x00000000127a52: sbb eax, 0x45c93145; xor eax, eax; mov eax, 0x2c; syscall; 
0x00000000127812: sbb eax, 0x45c93145; xor eax, eax; mov eax, 0x2d; syscall; 
0x000000001828a4: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001190db: sbb eax, 0x48000001; mov edx, esi; xor esi, esi; syscall; 
0x000000000e7e32: sbb eax, 0x482b8964; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000011fe9f: sbb eax, 0x49000001; mov edi, [rbp]; call rbx; 
0x0000000017d7f7: sbb eax, 0x4c0009bc; lea ebx, [rip+0x65a4e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x000000000c08a9: sbb eax, 0x4e0850f; add [rax], al; ret; 
0x0000000011f48f: sbb eax, 0x58000003; mov rax, r12; pop rdx; pop r12; ret; 
0x000000000c203d: sbb eax, 0x59c850f; add [rax], al; ret; 
0x000000000e666a: sbb eax, 0x5be0894c; pop rbp; pop r12; ret; 
0x000000000e6612: sbb eax, 0x5c415d5b; ret; 
0x00000000184a23: sbb eax, 0x5eda8; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001846c5: sbb eax, 0x5f106; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184870: sbb eax, 0x5f19b; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184545: sbb eax, 0x5f286; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184608: sbb eax, 0x5f403; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001843c5: sbb eax, 0x5f406; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184488: sbb eax, 0x5f583; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184245: sbb eax, 0x5f586; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184308: sbb eax, 0x5f703; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001840c5: sbb eax, 0x5f706; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184189: sbb eax, 0x5f882; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183f45: sbb eax, 0x5f886; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184008: sbb eax, 0x5fa03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183dc5: sbb eax, 0x5fa06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183e88: sbb eax, 0x5fb83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183c45: sbb eax, 0x5fb86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183d08: sbb eax, 0x5fd03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183ac5: sbb eax, 0x5fd06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183b88: sbb eax, 0x5fe83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183945: sbb eax, 0x5fe86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183a08: sbb eax, 0x60003; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001837c5: sbb eax, 0x60006; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183888: sbb eax, 0x60183; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183645: sbb eax, 0x60186; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001bb805: sbb eax, 0x60226; test rbx, rbx; jne short 0x00000000001bb7f0; pop rbx; ret; 
0x00000000183708: sbb eax, 0x60303; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001834c5: sbb eax, 0x60306; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183588: sbb eax, 0x60483; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183345: sbb eax, 0x60486; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183408: sbb eax, 0x60603; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001831c5: sbb eax, 0x60606; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018304c: sbb eax, 0x6077f; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183288: sbb eax, 0x60783; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183108: sbb eax, 0x60903; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e41: sbb eax, 0x6098a; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fcb: sbb eax, 0x60a40; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e64: sbb eax, 0x60ba7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182f21: sbb eax, 0x60d6a; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000182eba: sbb eax, 0x60d91; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x00000000181eef: sbb eax, 0x613dc; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181bc5: sbb eax, 0x61706; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d5c: sbb eax, 0x617af; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181a45: sbb eax, 0x61886; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181b08: sbb eax, 0x61a03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001818c5: sbb eax, 0x61a06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181988: sbb eax, 0x61b83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181745: sbb eax, 0x61b86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181808: sbb eax, 0x61d03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001815c5: sbb eax, 0x61d06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181689: sbb eax, 0x61e82; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181445: sbb eax, 0x61e86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181508: sbb eax, 0x62003; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001812c5: sbb eax, 0x62006; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181388: sbb eax, 0x62183; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181145: sbb eax, 0x62186; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181208: sbb eax, 0x62303; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180fc5: sbb eax, 0x62306; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181088: sbb eax, 0x62483; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180e45: sbb eax, 0x62486; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180f08: sbb eax, 0x62603; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180cc5: sbb eax, 0x62606; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180d88: sbb eax, 0x62783; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180b45: sbb eax, 0x62786; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180c08: sbb eax, 0x62903; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001809c5: sbb eax, 0x62906; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180a88: sbb eax, 0x62a83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180845: sbb eax, 0x62a86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180908: sbb eax, 0x62c03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001806c5: sbb eax, 0x62c06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018054c: sbb eax, 0x62d7f; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180788: sbb eax, 0x62d83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001802e6: sbb eax, 0x62e25; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180229: sbb eax, 0x62ee2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180608: sbb eax, 0x62f03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180361: sbb eax, 0x62f6a; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018013e: sbb eax, 0x62fcd; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804cb: sbb eax, 0x63040; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180073: sbb eax, 0x63098; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018034d: sbb eax, 0x631be; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180421: sbb eax, 0x6336a; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000001803bf: sbb eax, 0x6338c; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000001815c7: sbb eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017f054: sbb eax, 0x640b7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017efb6: sbb eax, 0x64155; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ef04: sbb eax, 0x64207; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ee66: sbb eax, 0x642a5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017edb4: sbb eax, 0x64357; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ed16: sbb eax, 0x643f5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ec64: sbb eax, 0x644a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ebc6: sbb eax, 0x64545; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017eb14: sbb eax, 0x645f7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ea76: sbb eax, 0x64695; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e9c4: sbb eax, 0x64747; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e926: sbb eax, 0x647e5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e874: sbb eax, 0x64897; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e7d6: sbb eax, 0x64935; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e724: sbb eax, 0x649e7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e689: sbb eax, 0x64a82; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e5d4: sbb eax, 0x64b37; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e536: sbb eax, 0x64bd5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e484: sbb eax, 0x64c87; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e3e6: sbb eax, 0x64d25; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000042769: sbb eax, 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000042834: sbb eax, 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000427a5: sbb eax, 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000046ce5: sbb eax, 0x64d8f700; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000017e334: sbb eax, 0x64dd7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e296: sbb eax, 0x64e75; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e1e4: sbb eax, 0x64f27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e146: sbb eax, 0x64fc5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e094: sbb eax, 0x65077; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dff6: sbb eax, 0x65115; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017df44: sbb eax, 0x651c7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dea6: sbb eax, 0x65265; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ddf4: sbb eax, 0x65317; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dd56: sbb eax, 0x653b5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dca8: sbb eax, 0x65463; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017dbb7: sbb eax, 0x65554; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf8: sbb eax, 0x65613; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017da8e: sbb eax, 0x6567d; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98f: sbb eax, 0x6577c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d755: sbb eax, 0x657f6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8ca: sbb eax, 0x65841; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d67b: sbb eax, 0x658d0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d857: sbb eax, 0x65a34; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017d7fd: sbb eax, 0x65a4e; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017c674: sbb eax, 0x668d7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c5d6: sbb eax, 0x66975; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c524: sbb eax, 0x66a27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c486: sbb eax, 0x66ac5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c3d4: sbb eax, 0x66b77; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c336: sbb eax, 0x66c15; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c284: sbb eax, 0x66cc7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c1e6: sbb eax, 0x66d65; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c134: sbb eax, 0x66e17; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017c096: sbb eax, 0x66eb5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bfe4: sbb eax, 0x66f67; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bf46: sbb eax, 0x67005; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017be94: sbb eax, 0x670b7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bdf6: sbb eax, 0x67155; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bd44: sbb eax, 0x67207; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bca9: sbb eax, 0x672a2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bbf4: sbb eax, 0x67357; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017bb56: sbb eax, 0x673f5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017baa4: sbb eax, 0x674a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ba06: sbb eax, 0x67545; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b954: sbb eax, 0x675f7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b8b6: sbb eax, 0x67695; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b804: sbb eax, 0x67747; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b766: sbb eax, 0x677e5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b6b4: sbb eax, 0x67897; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b616: sbb eax, 0x67935; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b564: sbb eax, 0x679e7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b4c6: sbb eax, 0x67a85; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b414: sbb eax, 0x67b37; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b376: sbb eax, 0x67bd5; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b2c8: sbb eax, 0x67c83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d7: sbb eax, 0x67d74; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b118: sbb eax, 0x67e33; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b0ae: sbb eax, 0x67e9d; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afaf: sbb eax, 0x67f9c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aeea: sbb eax, 0x68061; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017ae77: sbb eax, 0x68254; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000017ae16: sbb eax, 0x68275; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; notrack jmp r9; 
0x0000000019db12: sbb eax, 0x6974c085; tzcnt eax, eax; vzeroupper; ret; 
0x00000000120d42: sbb eax, 0x7d8b49; call rbx; 
0x00000000155038: sbb eax, 0x83000000; or esp, [rax]; mov fs:[rdx], eax; pop rbx; ret; 
0x00000000045369: sbb eax, 0x85008b00; shl byte ptr [rbp+0xf], 0xe9; cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000155a15: sbb eax, 0x894c000d; and eax, 0xd0db1; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x0000000018829d: sbb eax, 0x894d0000; ret far; 
0x0000000019bb9f: sbb eax, 0x8b000229; add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000046d65: sbb eax, 0x8b6400; cmp eax, 0x4; je short 0x0000000000046d30; mov eax, 0xffffffff; ret; 
0x00000000125cb2: sbb eax, 0x8b941; add [rax], al; mov eax, 0x119; syscall; 
0x00000000125d82: sbb eax, 0x8b941; add [rax], al; mov eax, 0x1b9; syscall; 
0x000000000e659a: sbb eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000db592: sbb eax, 0x8c48348; ret; 
0x00000000039be3: sbb eax, 0xa894800; mov rdx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x00000000039be4: sbb eax, 0xa894800; mov rdx, [rax+0xc0]; mov rax, [rip+0x1df309]; mov [rax], rdx; ret; 
0x000000000f2aac: sbb eax, 0xb60f000e; ror byte ptr [rax+0x63], 0x4; xchg [rax+0x1], ecx; clc; notrack jmp rax; 
0x0000000010f8f7: sbb eax, 0xb60f1677; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; notrack jmp rax; 
0x0000000015f66a: sbb eax, 0xb8838b48; and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000011ad62: sbb eax, 0xb8c03145; sub [rcx], al; add [rax], al; syscall; 
0x000000000ea502: sbb eax, 0xb8c03145; test dword ptr [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000ea580; ret; 
0x0000000004533d: sbb eax, 0xc03ce800; add al, 0x0; xor eax, eax; pop rbx; ret; 
0x00000000155762: sbb eax, 0xc3c08944; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000042f89: sbb eax, 0xc76400; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000004137f: sbb eax, 0xc76400; and al, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x00000000040785: sbb eax, 0xc76400; sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x00000000127038: sbb eax, 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000045538: sbb eax, 0xe3394c00; jae short 0x000000000004554b; nop; call qword ptr [rbx]; 
0x000000000457c4: sbb eax, 0xe800196a; add dword ptr [rsi-0x1], 0xffffffff; xor eax, eax; ret; 
0x0000000008c996: sbb eax, 0xe9ebe374; nop [rax+rax]; xor eax, eax; ret; 
0x00000000045c6c: sbb eax, 0xe9f63100; imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000128f4a: sbb eax, 0xf04f1; pop rbx; ret; 
0x00000000128f30: sbb eax, 0xf050b; pop rbx; ret; 
0x000000001536e6: sbb eax, 0xff310002; call qword ptr [rsp+0x20]; 
0x00000000039c39: sbb eax, 0xff634800; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039c38: sbb eax, 0xff634800; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000003a079: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a059: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a0f9: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a039: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x00000000039fb9: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000039f79: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x00000000039ff9: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x00000000039f59: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a019: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x00000000039fd9: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x00000000039f99: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x00000000039f39: sbb eax, 0xff634800; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000007c7e1: sbb eax, 0xffffe85a; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c729: sbb eax, 0xffffe912; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d6b: sbb eax, 0xffffea80; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076bcb: sbb eax, 0xffffec20; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076445: sbb eax, 0xfffff3a6; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc15: sbb eax, 0xfffff426; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007637b: sbb eax, 0xfffff470; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bbb9: sbb eax, 0xfffff482; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076325: sbb eax, 0xfffff4c6; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x0000000007bb6b: sbb eax, 0xfffff4d0; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb17: sbb eax, 0xfffff524; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076285: sbb eax, 0xfffff566; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076195: sbb eax, 0xfffff656; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b9bf: sbb eax, 0xfffff67c; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x0000000007b929: sbb eax, 0xfffff712; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d9: sbb eax, 0xfffff762; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b891: sbb eax, 0xfffff7aa; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b847: sbb eax, 0xfffff7f4; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b7f7: sbb eax, 0xfffff844; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075e1d: sbb eax, 0xfffff9ce; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dc4: sbb eax, 0xfffffa27; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a93: sbb eax, 0xfffffd58; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000163ae5: sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000001915fc: sbb eax, 0xffffffff; ret; 
0x000000000bf42d: sbb eax, 0xffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x0000000009c511: sbb eax, [rax-0x80]; test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x0000000011ed55: sbb eax, [rax]; add [rax], al; syscall; 
0x000000000b869e: sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000756f1: sbb eax, [rax]; add [rcx+rcx*4-0xe], cl; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000005d8d7: sbb eax, [rax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000061f3d: sbb eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001b3eb4: sbb eax, [rbp-0xc988b40]; bsf eax, eax; ret; 
0x000000001190ec: sbb eax, [rbx+0x674a1f8]; neg eax; ret; 
0x000000000a8304: sbb eax, [rbx-0x72b7fb1f]; add eax, 0x11f81; lea rdx, [rip+0xfc4aa]; cmovne rax, rdx; ret; 
0x0000000013056c: sbb eax, [rbx-0x77cfd20]; add [rbp+0x19], eax; fild st, dword ptr [rcx-0x7d]; ret; 
0x00000000045439: sbb eax, [rcx]; add [rax], al; mov edi, ebp; call rax; 
0x00000000127025: sbb eax, [rcx]; add [rax], al; syscall; 
0x00000000181747: sbb eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000008a106: sbb eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000061ed7: sbb eax, eax; add rsp, 0x18; ret; 
0x0000000009df8c: sbb eax, eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002a525: sbb eax, eax; add rsp, 0x8; ret; 
0x00000000054696: sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x0000000009c596: sbb eax, eax; or eax, 0x1; ret; 
0x00000000061f08: sbb eax, eax; pop rbp; ret; 
0x000000000517c8: sbb eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000092ae7: sbb eax, eax; ret; 
0x000000001a6235: sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x0000000002b302: sbb ebp, eax; enter 0x14a1, 0x0; mov rax, [rbp-0x68]; mov rdi, r12; call rax; 
0x000000000a7986: sbb ebp, ebx; nop [rax]; mov rdi, [rbx+0x48]; call rax; 
0x000000000d1541: sbb ebp, ecx; ret far; 
0x00000000172465: sbb ebx, [rax+0xb]; add [rbx+0x327f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000000c39b7: sbb ebx, edi; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000085892: sbb ecx, 0x6; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x00000000078d1a: sbb ecx, 0xc; add [rax], al; mov rdi, [rbp-0x8b8]; mov rdx, rbx; call qword ptr [r12+0x38]; 
0x000000000c0849: sbb ecx, [rax-0x73]; jg short 0x00000000000c0869; jne 0x00000000000c0d90; ret; 
0x000000000c1fdd: sbb ecx, [rax-0x73]; jg short 0x00000000000c1ffd; jne 0x00000000000c25e0; ret; 
0x0000000015dcf4: sbb ecx, [rax-0x75]; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000015235a: sbb ecx, [rax-0x77]; or eax, 0xd0276; mov eax, r8d; ret; 
0x000000000a9f44: sbb ecx, [rax-0x7d]; mov dword ptr [rcx], 0xffff20e9; jmp qword ptr [rsi-0x70]; 
0x000000001a6744: sbb ecx, [rbx+0x463bf847]; clc; jne 0x00000000001a6850; ret; 
0x00000000155c25: sbb ecx, [rip+0x1f88300]; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x000000000c5821: sbb ecx, ebp; or eax, 0x58d4800; add fs:[rax], eax; cmove rax, rdx; ret; 
0x000000001a2d0c: sbb ecx, ecx; or eax, ecx; ret; 
0x00000000103211: sbb edi, [rcx]; ret; 
0x00000000164b8f: sbb edi, ebp; jmp qword ptr [rsi+0x66]; 
0x00000000155a79: sbb edi, ebp; or al, 0x0; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x0000000004829c: sbb edi, edi; call qword ptr [rax+0x56415741]; 
0x00000000053018: sbb edi, edi; dec dword ptr [rax-0x77]; ret; 
0x00000000144b4b: sbb edi, edi; jmp qword ptr [rsi-0x70]; 
0x000000000d42ca: sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x000000000563c5: sbb edx, ebx; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000076a51: sbb esi, [rip+0x63e90001]; out 0xff, eax; jmp qword ptr [rsi+0xf]; 
0x00000000106843: sbb esi, edx; call far fword ptr [rax+0x5a]; 
0x000000000c7d96: sbb esi, esi; jmp qword ptr [rsi+0xf]; 
0x00000000077c31: sbb esp, [rdx]; cld; jmp qword ptr [rsi+0x66]; 
0x000000000e6a24: sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x0000000011ef76: sbb esp, esi; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000a7548: sbb fs:[rdi], edx; add [rbx-0x1f6217c8], cl; stc; jmp qword ptr [rsi+0x66]; 
0x00000000153b68: sbb fs:[rdx], eax; add [rcx-0x75], al; notrack call qword ptr [rsp+0x70]; 
0x0000000009d432: sbb gs:[rax-0x75], cl; jge short 0x000000000009d440; call qword ptr [rbp]; 
0x000000000563c3: sbb r10, r11; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000001330b6: sbb r11b, sil; movq mm1, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm1; call rcx; 
0x00000000133252: sbb r11b, sil; movq mm2, [rbx+0x30]; mov [rbp-0x80], eax; movups [rbp-0x78], xmm2; call r8; 
0x000000000469cc: sbb rax, 0x19ce800; add [rax], al; lea rax, [rip+0x1d4d7b]; add rsp, 0x8; ret; 
0x000000001915fb: sbb rax, 0xffffffffffffffff; ret; 
0x000000000bf42c: sbb rax, 0xffffffffffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x0000000019c20f: scasb [rdi]; adc [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000019bf0f: scasb [rdi]; adc eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001443ef: scasb [rdi]; add [rax], al; add [rbx-0xb34b], cl; jmp qword ptr [rbx]; 
0x0000000019d10f: scasb [rdi]; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000a93ad: scasb [rdi]; add [rax], eax; cmove rax, rdx; ret; 
0x0000000019ce0f: scasb [rdi]; add al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000016b8b1: scasb [rdi]; cld; jmp qword ptr [rsi+0x66]; 
0x000000001515be: scasb [rdi]; insd [rdi], dx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x000000000a9b2e: scasb [rdi]; mov esi, 0x8d480000; adc eax, 0xdbe07; cmovne rax, rdx; ret; 
0x0000000019c80f: scasb [rdi]; or al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000019c50f: scasb [rdi]; or eax, 0x894d0000; ret far; 
0x000000000f9bbe: scasb [rdi]; out 0xf2, eax; jmp qword ptr [rsi+0xf]; 
0x0000000007469a: scasb [rdi]; out 0xff, eax; jmp qword ptr [rsi-0x70]; 
0x0000000003d7be: scasb [rdi]; ret far; 
0x0000000013c0de: scasb [rdi]; ret; 
0x000000000ab085: scasd [rdi]; adc [rax], al; cmove rax, rdx; ret; 
0x0000000011f59d: scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000a9922: scasd [rdi]; add [rax], eax; lea rax, [rip+0x1b084]; cmove rax, rdx; ret; 
0x000000001474c6: scasd [rdi]; add al, [rax]; add [rcx-0x7d], al; jmp qword ptr [rax]; 
0x0000000016b7c1: scasd [rdi]; cld; jmp qword ptr [rsi+0x66]; 
0x00000000135ab0: scasd [rdi]; mov rax, r8; ret; 
0x000000000d9252: scasd [rdi]; ret; 
0x0000000009165b: scasd [rdi]; ror dword ptr [rax-0x73], 0x84; adc [rax], al; add [rax], al; ret; 
0x00000000080a53: scasd [rdi]; sbb [rax], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x000000000436cd: scasd [rdi]; sti; add r15, [rsp]; mov rsi, r15; call r14; 
0x000000001294c9: seta al; movzx eax, al; neg eax; ret; 
0x000000001162ff: seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x00000000090a64: setae al; ret; 
0x000000000dce4b: setb al; add eax, 0x16d; ret; 
0x0000000012a0d8: setbe al; ret; 
0x0000000016d4e3: sete al; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000009d593: sete al; add rsp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x00000000050d82: sete al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001545ac: sete al; add rsp, 0x8; ret; 
0x000000000ed17b: sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x000000000ed17a: sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000014e74d: sete al; movzx eax, al; ret; 
0x0000000009d52e: sete al; movzx eax, al; sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000003a189: sete al; ret; 
0x000000001bbb66: sete al; test al, al; jne short 0x00000000001bbb70; pop rbp; ret; 
0x000000000421ba: sete dh; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x00000000175ed5: sete dl; mov [rbx], edx; pop rbx; ret; 
0x0000000016d4e2: sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000421b9: sete sil; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x000000001a35aa: setg al; lea eax, [rax+rax-0x1]; ret; 
0x000000000d6b50: setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x000000000d7c99: setg al; neg eax; cmp edi, esi; cmovl eax, edx; ret; 
0x000000001a162a: setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a132c: setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000000d7cb2: setl al; neg eax; cmp esi, r8d; cmovg eax, edx; ret; 
0x000000001b4610: setl al; neg eax; or eax, 0x1; ret; 
0x000000001a1979: setl al; neg eax; or eax, 0x1; vzeroupper; ret; 
0x00000000112cef: setl al; ret; 
0x00000000125f00: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000125ec6: setne al; add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000011d827: setne al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000012e4e1: setne al; and eax, r10d; mov [rsp+0x20], r10b; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000109358: setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000009a6b5: setne al; mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x0000000016bc69: setne al; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000891bf: setne al; mov eax, r8d; ret; 
0x00000000108e11: setne al; movzx eax, al; neg eax; ret; 
0x00000000042f5c: setne al; movzx eax, al; ret; 
0x000000000ed110: setne al; ret; 
0x0000000009c101: setne al; shl eax, 0x7; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000009296c: setne al; shl eax, 0x7; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000b1356: setne bh; test r9b, dil; jne short 0x00000000000b1338; ret; 
0x000000000b120a: setne cl; test r10b, r9b; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x0000000009a1bf: setne dh; xor r10d, r10d; shl esi, 0x7; xor sil, 0x81; syscall; 
0x000000000b1355: setne dil; test r9b, dil; jne short 0x00000000000b1338; ret; 
0x000000000891be: setne r8b; mov eax, r8d; ret; 
0x000000000b1209: setne r9b; test r10b, r9b; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x0000000009a1be: setne sil; xor r10d, r10d; shl esi, 0x7; xor sil, 0x81; syscall; 
0x00000000180223: sfence; lea r11, [rip+0x62ee2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018006e: sfence; lea r11, [rip+0x63098]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d74f: sfence; lea r11, [rip+0x657f6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d676: sfence; lea r11, [rip+0x658d0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c5afa: sgdt [rax]; lea rdx, [rip+0xe074c]; cmovne rax, rdx; ret; 
0x00000000113f3a: shl bh, 0xc2; jmp rsi; 
0x000000000d7c9b: shl bh, 0xd8; cmp edi, esi; cmovl eax, edx; ret; 
0x000000000d7cb4: shl bh, 0xd8; cmp esi, r8d; cmovg eax, edx; ret; 
0x000000001b4612: shl bh, 0xd8; or eax, 0x1; ret; 
0x000000001a197b: shl bh, 0xd8; or eax, 0x1; vzeroupper; ret; 
0x00000000108e16: shl bh, 0xd8; ret; 
0x000000001149de: shl bh, 0xff; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000ab229: shl bh, cl; dec dword ptr [rax+0x29]; ret; 
0x000000000ab228: shl bh, cl; dec dword ptr [rax+0x29]; ret; 
0x000000001b4ba3: shl bl, 0x1; bsf eax, eax; add rax, rdi; ret; 
0x000000001b2341: shl bl, 0x1; bsf rax, rax; add rax, rdi; ret; 
0x000000001b2360: shl bl, 0x48; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000000d904e: shl bl, 0xf; jle short 0x00000000000d902b; movaps [rsp], xmm3; call rbx; 
0x000000001b40a7: shl bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b5f0c: shl bl, 0xf; mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x000000000419c1: shl bl, 0xf; pop rcx; add eax, 0x1a13fe; ret; 
0x00000000199ac4: shl byte ptr [rax+0x48], 0x1; clc; ret; 
0x00000000199afd: shl byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x000000001988fd: shl byte ptr [rax+0x48], 0x63; leave; lea rax, [rdi+rcx]; ret; 
0x000000001b0bb2: shl byte ptr [rax+0xf], 0x8c; ret far; 
0x0000000015e58d: shl byte ptr [rax+rax*2+0x41], 0x83; call qword ptr [rbx]; 
0x000000001a16e5: shl byte ptr [rax+rbx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000011c34d: shl byte ptr [rax+rbx+0x48], 0x89; add eax, 0x104ec9; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000015d650: shl byte ptr [rax+rcx*2+0x49], 0x8b; cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000003a0dd: shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x000000001ae715: shl byte ptr [rax+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001b5675: shl byte ptr [rax+rdi*2-0x77], cl; ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x00000000113cc5: shl byte ptr [rax+rdi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax; 
0x00000000121ee4: shl byte ptr [rax+rdi+0x48], 0x39; ret; 
0x0000000015fc8f: shl byte ptr [rax+rdx+0x48], 0x8b; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x00000000045cb5: shl byte ptr [rax+rsi*2+0x48], 0x89; sub [rax-0x77], cl; ret; 
0x000000001af924: shl byte ptr [rax], 0x48; add eax, edi; ret; 
0x00000000199aa4: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000011abfd: shl byte ptr [rbp+0x10], 0xb8; adc al, 0x0; add [rax], al; syscall; 
0x0000000011ab5d: shl byte ptr [rbp+0x10], 0xb8; adc eax, [rax]; add [rax], al; syscall; 
0x00000000114a2d: shl byte ptr [rbp+0x10], 0xb8; add [rax], eax; add [rax], al; syscall; 
0x0000000011510d: shl byte ptr [rbp+0x10], 0xb8; add eax, [rax]; add [rax], al; syscall; 
0x000000000ea65d: shl byte ptr [rbp+0x10], 0xb8; and al, [rax]; add [rax], al; syscall; 
0x0000000011ec8d: shl byte ptr [rbp+0x10], 0xb8; sbb al, [rax]; add [rax], al; syscall; 
0x0000000012769d: shl byte ptr [rbp+0x10], 0xb8; sub al, [rax]; add [rax], al; syscall; 
0x000000001275cd: shl byte ptr [rbp+0x10], 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x0000000012626d: shl byte ptr [rbp+0x10], 0xb8; xor [rcx], al; add [rax], al; syscall; 
0x0000000014ed78: shl byte ptr [rbp+0x12], 0x31; test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x0000000015dfa5: shl byte ptr [rbp+0x14], 0x48; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001128f0: shl byte ptr [rbp+0x15], 0xb8; adc [rax], eax; add [rax], al; syscall; 
0x00000000126040: shl byte ptr [rbp+0x15], 0xb8; adc al, 0x1; add [rax], al; syscall; 
0x000000001129a0: shl byte ptr [rbp+0x15], 0xb8; adc al, [rax]; add [rax], al; syscall; 
0x000000001261a0: shl byte ptr [rbp+0x15], 0xb8; adc eax, [rcx]; add [rax], al; syscall; 
0x00000000127e90: shl byte ptr [rbp+0x15], 0xb8; and [rcx], al; add [rax], al; syscall; 
0x00000000127bb0: shl byte ptr [rbp+0x15], 0xb8; sub al, 0x0; add [rax], al; syscall; 
0x00000000127f40: shl byte ptr [rbp+0x15], 0xb8; sub eax, [rcx]; add [rax], al; syscall; 
0x00000000128000: shl byte ptr [rbp+0x15], 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x000000000427cd: shl byte ptr [rbp+0x18], 0xbe; or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x00000000142d0c: shl byte ptr [rbp+0x19], 0x44; mov eax, eax; ret; 
0x0000000015dcf2: shl byte ptr [rbp+0x1b], 0x48; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000125cb0: shl byte ptr [rbp+0x1d], 0x41; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x00000000125d80: shl byte ptr [rbp+0x1d], 0x41; mov ecx, 0x8; mov eax, 0x1b9; syscall; 
0x0000000011aca0: shl byte ptr [rbp+0x1d], 0x45; xor eax, eax; mov eax, 0x127; syscall; 
0x0000000011ad60: shl byte ptr [rbp+0x1d], 0x45; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000ea500: shl byte ptr [rbp+0x1d], 0x45; xor eax, eax; mov eax, 0xf7; syscall; 
0x00000000127a50: shl byte ptr [rbp+0x1d], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127810: shl byte ptr [rbp+0x1d], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000005655e: shl byte ptr [rbp+0x1f], cl; mov dword ptr [rdi], 0x0; mov eax, 0x1; ret; 
0x000000001aeac7: shl byte ptr [rbp+0x26], 0x62; mov dl, 0x65; and [rsi], ah; ret; 
0x000000001038d0: shl byte ptr [rbp+0x27], cl; lea rcx, [rip+0xd1606]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000000612cb: shl byte ptr [rbp+0x2], 0x5b; ret; 
0x000000001b5b53: shl byte ptr [rbp+0x2a], 0x62; mov dl, 0x65; and [rdi], ah; ret; 
0x000000001b5920: shl byte ptr [rbp+0x2d], 0xc5; std; xlat [rbx]; ret; 
0x000000001b5f5c: shl byte ptr [rbp+0x31], 0xc5; sti; xchg ebx, eax; ret; 
0x00000000199839: shl byte ptr [rbp+0x34], 0xc5; std; xlat [rbx]; ret; 
0x0000000011b8e7: shl byte ptr [rbp+0x36], 0x4c; mov edx, esi; mov eax, 0x10e; syscall; 
0x000000001afdd7: shl byte ptr [rbp+0x36], 0xc5; std; xlat [rbx]; ret; 
0x00000000118e0c: shl byte ptr [rbp+0x39], 0x41; mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000001bbb6a: shl byte ptr [rbp+0x3], 0x5d; ret; 
0x000000000eac51: shl byte ptr [rbp+0x3], 0x5f; jmp rdi; 
0x000000000dd71a: shl byte ptr [rbp+0x3], cl; pop rbx; ret; 
0x000000001b6192: shl byte ptr [rbp+0x3b], 0xc5; sti; xchg ebx, eax; ret; 
0x000000001b641f: shl byte ptr [rbp+0x3e], 0xc5; sti; xchg ebx, eax; ret; 
0x000000000431a8: shl byte ptr [rbp+0x45], 0x41; mov edx, 0x8; mov eax, 0x80; syscall; 
0x0000000009e69f: shl byte ptr [rbp+0x4], cl; mov rax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000c5036: shl byte ptr [rbp+0x4], cl; mov rax, rdi; ret; 
0x000000000b4de2: shl byte ptr [rbp+0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000ea6e8: shl byte ptr [rbp+0x5], 0x48; add esp, 0x8; ret; 
0x0000000008c9b8: shl byte ptr [rbp+0x5], cl; ret; 
0x0000000009dc38: shl byte ptr [rbp+0x5d], 0x81; ret far; 
0x0000000019961d: shl byte ptr [rbp+0x60], 0xc5; std; xlat [rbx]; ret; 
0x0000000011485c: shl byte ptr [rbp+0x61], 0xb8; add [rcx], eax; add [rax], al; syscall; 
0x00000000042477: shl byte ptr [rbp+0x6], 0x5d; ret; 
0x00000000090fd7: shl byte ptr [rbp+0x6], 0xf; add ebp, edx; xor eax, eax; ret; 
0x0000000005675a: shl byte ptr [rbp+0x73], cl; mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x0000000003e44c: shl byte ptr [rbp+0x7], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000149cad: shl byte ptr [rbp+0x8], 0x5b; pop rbp; pop r12; ret; 
0x000000001197cd: shl byte ptr [rbp+0x8], 0x5d; ret; 
0x0000000016d4b5: shl byte ptr [rbp+0x8], cl; mov eax, 0x1; ret; 
0x00000000097605: shl byte ptr [rbp+0x9], cl; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x00000000039c83: shl byte ptr [rbp+0xa], cl; mov eax, r8d; ret; 
0x0000000012a7d2: shl byte ptr [rbp+0xb], cl; ret; 
0x00000000112d69: shl byte ptr [rbp+0xc], 0x8b; add al, 0xeb; ret; 
0x00000000133c28: shl byte ptr [rbp+0xd], 0x48; cmp dword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x0000000014402f: shl byte ptr [rbp+0xe], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012a57f: shl byte ptr [rbp+0xe], cl; mov eax, r8d; ret; 
0x0000000015d376: shl byte ptr [rbp+0xf], 0x31; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000004271e: shl byte ptr [rbp+0xf], 0x48; add esp, 0x8; ret; 
0x0000000005a422: shl byte ptr [rbp+0xf], 0xb6; add cl, [rax+0x428d4801]; add [rcx+0x39], ecx; ret; 
0x0000000004536e: shl byte ptr [rbp+0xf], 0xe9; cli; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x00000000168a6d: shl byte ptr [rbp+rax*8+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x0000000015d2f5: shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000015f2f7: shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x00000000085e10: shl byte ptr [rbp+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x00000000132ab0: shl byte ptr [rbp+rbp+0x48], 0x8b; jp short 0x0000000000132b07; mov rsi, rdx; call rax; 
0x0000000007d360: shl byte ptr [rbp+rcx+0x48], 0x8d; adc eax, 0x1547d6; add rax, rdx; ret; 
0x000000000d8760: shl byte ptr [rbp+rcx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x000000001b1740: shl byte ptr [rbp+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000009a018: shl byte ptr [rbp+rdx+0x53], 0x48; mov ebx, edi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000000d8388: shl byte ptr [rbp+rdx-0x78], cl; rol dword ptr [rax+0x1e740fe1], 0x1; ret; 
0x0000000008f1cd: shl byte ptr [rbp-0x10], 0xc3; add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x0000000009e62f: shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x000000000c5987: shl byte ptr [rbp-0x12], cl; xor eax, eax; ret; 
0x000000000a7950: shl byte ptr [rbp-0x13], 0x31; rol bl, 0x66; nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000c4510: shl byte ptr [rbp-0x13], cl; lea rax, [rcx-0x1]; ret; 
0x00000000083580: shl byte ptr [rbp-0x13], cl; ret; 
0x000000000b11d2: shl byte ptr [rbp-0x15], 0x1; mov rax, r8; ret; 
0x00000000149abd: shl byte ptr [rbp-0x1c], 0x44; mov eax, edx; ret; 
0x000000001a1cba: shl byte ptr [rbp-0x1d], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000000b308b: shl byte ptr [rbp-0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x00000000198dfc: shl byte ptr [rbp-0x1f], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000001668e6: shl byte ptr [rbp-0x21], 0xe8; mov ah, 0xfd; jmp qword ptr [rsi-0x70]; 
0x000000001a219f: shl byte ptr [rbp-0x22], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000001992e1: shl byte ptr [rbp-0x24], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000000c5a21: shl byte ptr [rbp-0x24], cl; ret; 
0x000000000404ec: shl byte ptr [rbp-0x27], cl; ret; 
0x0000000011c579: shl byte ptr [rbp-0x2c], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000011c64a: shl byte ptr [rbp-0x2d], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000041377: shl byte ptr [rbp-0x30], cl; mov rax, [rip+0x1d7a8f]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000d27ee: shl byte ptr [rbp-0x51], 0x83; ret; 
0x00000000199d50: shl byte ptr [rbp-0x53], 0xc5; std; xlat [rbx]; ret; 
0x00000000134a87: shl byte ptr [rbp-0x59], 0x4c; mov eax, ecx; ret; 
0x000000000f900a: shl byte ptr [rbp-0x68], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010932a: shl byte ptr [rbp-0x69], cl; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x00000000054115: shl byte ptr [rbp-0x7c], 0x48; sub edx, 0x1; jne short 0x0000000000054100; mov eax, 0x1; ret; 
0x000000000a7a2a: shl byte ptr [rbp-0xd], cl; ret; 
0x000000000c6dec: shl byte ptr [rbp-0xf], cl; ret; 
0x0000000008f5e0: shl byte ptr [rbx+0x25], 0x1; movzx eax, byte ptr [rax]; ret; 
0x0000000015dc96: shl byte ptr [rbx+0x48], 0x63; ret; 
0x0000000016cdc8: shl byte ptr [rbx+0x5], 0x1; xor eax, eax; ret; 
0x00000000133ba6: shl byte ptr [rbx+0xf], 0x1; cmp [rax+0x8], rdi; jne short 0x0000000000133ba0; mov rax, [rax+0x30]; ret; 
0x0000000008c991: shl byte ptr [rbx+rax*4+0x7d], 0x0; sbb eax, 0xe9ebe374; nop [rax+rax]; xor eax, eax; ret; 
0x000000001afa0a: shl byte ptr [rbx+rax*4+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x000000000e5d16: shl byte ptr [rbx+rbp+0x5b], 0x5d; pop r12; ret; 
0x00000000199766: shl byte ptr [rbx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000001994e2: shl byte ptr [rbx+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000011daa5: shl byte ptr [rbx+rcx+0x48], 0x83; ror byte ptr [rax], 0x48; mov [rip+0x1038bd], eax; mov rax, r8; ret; 
0x00000000156f42: shl byte ptr [rbx+rcx+0x48], 0xc7; add eax, 0xd08d8; add [rax], al; add [rax], al; ret; 
0x00000000122472: shl byte ptr [rbx+rcx+0x48], cl; cmp edi, edx; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x00000000141a77: shl byte ptr [rbx+rcx-0x3a], 0x2; jmp far fword ptr [rax+0x850f02]; 
0x000000000e6c20: shl byte ptr [rbx+rdi*2+0x4d], 0x85; in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x0000000015e289: shl byte ptr [rbx+rdx*4+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000007f8aa: shl byte ptr [rbx+rdx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000001b56be: shl byte ptr [rbx+rsi*4+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000016434a: shl byte ptr [rbx], cl; std; jmp qword ptr [rsi-0x70]; 
0x000000001a2bdb: shl byte ptr [rcx+0x48], 0x1; clc; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dd0b: shl byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x0000000019db14: shl byte ptr [rcx+rbp*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001afce8: shl byte ptr [rcx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000abcc0: shl byte ptr [rcx+rbx+0x3c], 0x3d; je short 0x00000000000abcdc; xor eax, eax; ret; 
0x00000000046054: shl byte ptr [rcx+rbx+0x48], 0x8b; adc [rbx+0x48], bl; mov dword ptr [rip+0x1d56d9], 0x0; mov eax, [rax+0x58]; ret; 
0x000000001288f0: shl byte ptr [rcx+rcx+0x1], cl; sar byte ptr [rax+0x14], cl; syscall; 
0x0000000007f7ca: shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000013ea5e: shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xe34b8; call rax; 
0x00000000162c66: shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x000000001afcc4: shl byte ptr [rcx+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000168ae5: shl byte ptr [rcx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x000000001af9bc: shl byte ptr [rcx+rdx*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000000baaac: shl byte ptr [rcx+rdx+0x48], cl; bsf eax, edx; ret; 
0x000000000d852c: shl byte ptr [rcx+rdx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x0000000015d1fc: shl byte ptr [rcx+rdx-0x75], 0x50; pop rsp; lea rsi, [rax+0x48]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x18]; 
0x00000000187e1d: shl byte ptr [rcx], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000090a5d: shl byte ptr [rcx], 0x1; ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x000000001a2b31: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019dc86: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000011c763: shl byte ptr [rcx], 0xc0; pop rbp; ret; 
0x000000001b5763: shl byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001ae6e3: shl byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x0000000002ab0a: shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x000000001b5d02: shl byte ptr [rcx], 0xd2; cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000117b51: shl byte ptr [rcx], cl; div byte ptr [rcx]; push qword ptr [rcx]; shr al, 0x33; ret far; 
0x000000000eabb1: shl byte ptr [rcx], cl; idiv byte ptr [rdi+0x1200011]; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000002a479: shl byte ptr [rcx], cl; imul al; syscall; 
0x00000000099979: shl byte ptr [rcx], cl; ror byte ptr [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x00000000094bf2: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x80], cl; mov eax, r9d; syscall; 
0x000000000977a0: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x87], cl; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x00000000099045: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x8], cl; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000113cc9: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; call rax; 
0x00000000113d01: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall; 
0x00000000097be1: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, r13d; syscall; 
0x00000000096ea1: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, r15d; syscall; 
0x000000001269e0: shl byte ptr [rdi+0x49], cl; mov eax, ecx; mov eax, 0x1b3; syscall; 
0x000000000c5556: shl byte ptr [rdi+0x4c], 0x89; loopne 0x00000000000c55b8; pop rbp; pop r12; ret; 
0x0000000010d5c3: shl byte ptr [rdi+0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x0000000015ecf6: shl byte ptr [rdi+rax+0x31], 0xc0; ret; 
0x00000000168a9e: shl byte ptr [rdi+rax+0x5b], 0x1; ret; 
0x0000000009c09e: shl byte ptr [rdi+rcx+0x31], 0xc0; add rsp, 0x8; ret; 
0x00000000168b8e: shl byte ptr [rdi+rcx+0x48], 0x1; add eax, 0xa0; pop rbx; ret; 
0x00000000168c0e: shl byte ptr [rdi+rcx+0x48], 0x1; add eax, 0xa8; pop rbx; ret; 
0x00000000168b0e: shl byte ptr [rdi+rcx+0x48], 0x1; sub eax, 0xffffff80; pop rbx; ret; 
0x0000000019d986: shl byte ptr [rdi+rdx*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000015e265: shl byte ptr [rdi+rsi*4+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; mov qword ptr [rsp], 0x0; call qword ptr [rax+0x20]; 
0x000000001496a6: shl byte ptr [rdi+rsi+0x48], 0x8b; add eax, 0xcf760; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001b3eb6: shl byte ptr [rdi-0xd], 0xf; mov esp, 0xc031c3c0; ret; 
0x0000000017bc7a: shl byte ptr [rdx+0x13], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x00000000121f28: shl byte ptr [rdx+0x48], 0x39; ret; 
0x0000000007f853: shl byte ptr [rdx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x000000000bac7b: shl byte ptr [rdx+0x48], cl; bsf eax, edx; ret; 
0x000000000d874b: shl byte ptr [rdx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x0000000017b34c: shl byte ptr [rdx+0xe], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x00000000148863: shl byte ptr [rdx+rbp*2-0x78], cl; cmovns edi, [rcx]; ret; 
0x000000001b56e3: shl byte ptr [rdx+rcx+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000009d5e7: shl byte ptr [rdx+rcx-0x7d], 0xf8; or al, 0x75; xor [rax+0x3], bh; add rsp, 0x8; ret; 
0x0000000009d575: shl byte ptr [rdx+rcx-0x7d], 0xf8; or al, 0x75; xor bh, [rax+0x3]; add rsp, 0x8; ret; 
0x000000000d84d3: shl byte ptr [rdx+rdi*2+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000b515b: shl byte ptr [rdx+rdx*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x00000000174ea7: shl byte ptr [rdx+rdx+0x48], 0x8b; add eax, 0xa4017; call qword ptr [rax+0x368]; 
0x0000000019d5bb: shl byte ptr [rdx-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000015d5e5: shl byte ptr [rdx], 0x0; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000119c56: shl byte ptr [rip+0x410000], cl; cmp eax, 0x410000; je short 0x0000000000119c90; mov eax, 0x101; syscall; 
0x0000000008e079: shl byte ptr [rsi+0x14], 0x48; mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000012c735: shl byte ptr [rsi+0x2e], 0x1; nop [rax+rax]; ret; 
0x00000000175105: shl byte ptr [rsi+0x2e], cl; nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x000000000416cc: shl byte ptr [rsi+0x48], 0x1; movd mm0, eax; ret; 
0x0000000012d915: shl byte ptr [rsi+0x48], 0xf; outsb dx, [rsi]; fisub st, dword ptr [rsi+0xf]; insb [rdi], dx; ret; 
0x00000000129a13: shl byte ptr [rsi+0x49], 0xf; outsb dx, [rsi]; ret; 
0x0000000006aca1: shl byte ptr [rsi+0xf], 0x1; insb [rdi], dx; ret; 
0x000000000ba846: shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x000000000dd5c0: shl byte ptr [rsi+0xf], 0x62; ret; 
0x000000000463f9: shl byte ptr [rsi+0xf], 0x6c; ret; 
0x00000000046733: shl byte ptr [rsi+0xf], 0x6c; rol dword ptr [rcx+rcx*4-0x40], 0xf; adc [rdi], eax; ret; 
0x000000000f583c: shl byte ptr [rsi+0xf], 0x6f; shl dword ptr [rsi+0xf], 0xd4; ret far; 
0x00000000101625: shl byte ptr [rsi+0xf], 0xef; ror byte ptr [rdi], 0x84; ret far; 
0x000000001522fe: shl byte ptr [rsi+rax+0x48], 0x39; js short 0x0000000000152315; jne short 0x00000000001522f8; ret; 
0x00000000165a53: shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000165ac2; call rax; 
0x000000001664f3: shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000166552; call rax; 
0x0000000015d72f: shl byte ptr [rsi+rbp*2+0x48], 0x8b; and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000167f44: shl byte ptr [rsi+rcx+0x49], 0x8b; cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20]; 
0x000000000baa4f: shl byte ptr [rsi+rdi*2+0x48], cl; bsf eax, edx; ret; 
0x000000001987cf: shl byte ptr [rsi+rdx*8+0x48], cl; movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000015557a: shl byte ptr [rsi+rdx+0x48], 0x8b; cmp eax, 0xd227c; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000000b4c97: shl byte ptr [rsi+rdx+0xf], 0xbc; ror byte ptr [rax+0x1], 0xf8; add rax, rcx; ret; 
0x0000000016a227: shl byte ptr [rsi+rsi+0x48], 0x8b; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x0000000011c115: shl byte ptr [rsi], 0x64; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000199b49: shl byte ptr [rsp+rax*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x000000000921e9: shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x000000000b11ce: shl byte ptr [rsp+rax+0x39], 0xd0; jne short 0x00000000000b11c0; mov rax, r8; ret; 
0x000000000b119a: shl byte ptr [rsp+rax+0x39], 0xf0; jne short 0x00000000000b1190; mov rax, r8; ret; 
0x0000000011d1e3: shl byte ptr [rsp+rax+0x48], 0x89; js short 0x000000000011d1f2; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000161a31: shl byte ptr [rsp+rcx+0x48], cl; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000080e91: shl byte ptr [rsp+rcx+0x4c], 0x89; loopne 0x0000000000080ef5; pop r12; pop r13; ret; 
0x0000000015d5c9: shl byte ptr [rsp+rdi+0x48], 0x8b; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000113d51: shl byte ptr [rsp+rsi+0x31], 0xd2; call rax; 
0x000000000dcda0: shl ch, 0x1; jmp qword ptr [rsi+0x2e]; 
0x0000000005effa: shl ch, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000132abd: shl dh, 0x43; sbb al, 0x20; je short 0x0000000000132ad0; pop rbx; ret; 
0x000000000f702d: shl dh, 0x82; enter 0x0, 0x0; jne 0x00000000000f6f5d; ret; 
0x0000000007c436: shl dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000199198: shl dword ptr [rax+0x49], 0x39; ret far; 
0x00000000114268: shl dword ptr [rbp+0x2d], 0x41; mov edx, ecx; mov eax, 0x103; syscall; 
0x000000000b1301: shl dword ptr [rbp-0x14], 0x1; ret; 
0x0000000014966a: shl dword ptr [rbx-0x4d], 0x1; mov byte ptr [r9], 0x0; ret; 
0x0000000012a7e1: shl dword ptr [rbx], 0x4e; adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x000000001a1cf9: shl dword ptr [rcx], 0x1; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x00000000001a1979; vzeroupper; ret; 
0x000000000cc986: shl dword ptr [rcx], 0x1; shr cl, cl; fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x000000000ca116: shl dword ptr [rcx], 0x1; shr cl, cl; fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x00000000059ac6: shl dword ptr [rcx], 0x1; shr cl, cl; xchg edx, eax; fcos; jmp qword ptr [rsi-0x70]; 
0x000000000b105a: shl dword ptr [rcx], 0xc0; mov [rdx], rcx; ret; 
0x000000001355c6: shl dword ptr [rdi+0x5], 0xe9; push rdx; or al, 0xfe; call qword ptr [rax-0x18]; 
0x0000000012664b: shl dword ptr [rdi], 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000045e14: shl dword ptr [rsi+0x48], 0xf; jle short 0x0000000000045dda; ret; 
0x000000000b48d6: shl dword ptr [rsi+0xb], cl; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000000f5840: shl dword ptr [rsi+0xf], 0xd4; ret far; 
0x000000000ba842: shl dword ptr [rsi+0xf], 0xd7; shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x000000000c428f: shl dword ptr [rsi+0xf], 0xda; ret; 
0x000000000ef5f6: shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf]; 
0x00000000151c99: shl dword ptr [rsi-0x13], cl; jmp qword ptr [rbp+rax*2-0x77]; 
0x000000001a2e3d: shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a2db3; ret; 
0x000000001a36a0: shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a3603; ret; 
0x000000001751fd: shl dword ptr [rsi-0x70], 0x1; mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x000000000419b9: shl eax, 0x17; or eax, ecx; movd xmm0, eax; mulss xmm0, [rip+0x1a13fe]; ret; 
0x0000000004192c: shl eax, 0x17; or ecx, eax; movd xmm0, ecx; ret; 
0x000000000515e7: shl eax, 0x1e; mov r8d, eax; or r8d, ecx; mov rax, r8; ret; 
0x0000000012567e: shl eax, 0x20; and rax, rcx; or rax, rdx; ret; 
0x000000001b233c: shl eax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x00000000116e57: shl eax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x000000001430ce: shl eax, 0x3; shr rax, 0x4; and eax, 0x7f; ret; 
0x00000000096797: shl eax, 0x4; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x00000000175dbb: shl eax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000009c104: shl eax, 0x7; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000009296f: shl eax, 0x7; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000001b4b9f: shl eax, 0x8; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000042f57: shl eax, cl; and rax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000042ebf: shl eax, cl; or [rdi], rax; xor eax, eax; ret; 
0x00000000098eab: shl ebp, 0xff; call qword ptr [rax+0x16b8]; 
0x000000000c4c17: shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x00000000128f9b: shl ebx, 0x1; out dx, eax; call qword ptr [rax-0x3ec274b8]; 
0x000000001551e8: shl ebx, 0xff; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000001b18e1: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000160f9a: shl ecx, 0x4; xor rcx, rax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x00000000054e6c: shl ecx, cl; mov [rdi-0x10], r9; ret; 
0x00000000054deb: shl ecx, cl; mov [rdi-0x8], r9; ret; 
0x00000000054dba: shl ecx, cl; mov [rdi], r9; ret; 
0x000000001367e8: shl edi, 0x10; movzx eax, si; or eax, edi; bswap eax; ret; 
0x000000000964cf: shl edi, 0x4; cmp [rdx+rdi], rcx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x00000000136804: shl edi, 0x8; movzx eax, sil; or eax, edi; bswap eax; ret; 
0x000000000414e2: shl edx, 0x1; movups [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000072fe0: shl edx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078513: shl edx, 0x2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x000000000ba61a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000142f4c: shl edx, 0x4; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000142f4b: shl edx, 0x4; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000467c1: shl edx, 0xa; and eax, 0x3ff; xor eax, edx; ret; 
0x00000000056593: shl edx, cl; mov [rsi], rdx; mov [rdi], eax; mov eax, 0x1; ret; 
0x000000001bb23c: shl esi, 0x1; call qword ptr [rax-0x5e1f00d]; 
0x000000000566bc: shl esi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000143113: shl esi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x0000000014a641: shl esi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x0000000009a1c5: shl esi, 0x7; xor sil, 0x81; syscall; 
0x00000000135c9f: shl esp, cl; jmp qword ptr [rsi+0xf]; 
0x00000000054e6b: shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054dea: shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000054db9: shl r9, cl; mov [rdi], r9; ret; 
0x0000000012567d: shl rax, 0x20; and rax, rcx; or rax, rdx; ret; 
0x000000001b233b: shl rax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x00000000116e56: shl rax, 0x2; mov edx, [rdx+rax*4]; call qword ptr [rsp+0x50]; 
0x00000000096796: shl rax, 0x4; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x00000000175dba: shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x00000000042f56: shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000042ebe: shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x000000001b18e0: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000160f99: shl rcx, 0x4; xor rcx, rax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x000000000964ce: shl rdi, 0x4; cmp [rdx+rdi], rcx; jne short 0x0000000000096510; mov rax, r8; ret; 
0x00000000072fde: shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000078511: shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8]; 
0x000000000ba619: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000056592: shl rdx, cl; mov [rsi], rdx; mov [rdi], eax; mov eax, 0x1; ret; 
0x000000000566bb: shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000143112: shl rsi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x0000000014a640: shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000054e64: shld eax, ecx, cl; mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054de4: shld eax, ecx, cl; mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000054e63: shld r8, r9, cl; mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000054de2: shld r8, r9, cl; mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000118364: shr al, 0x26; ret; 
0x0000000011f4c8: shr al, 0x32; adc al, 0xf4; call far fword ptr [rax+0x4c]; 
0x00000000117b57: shr al, 0x33; ret far; 
0x0000000013c78c: shr al, 0x3e; call far fword ptr [rsi+0x5f]; 
0x00000000136885: shr al, 0xb5; lahf; call far fword ptr [rax+0x4c]; 
0x000000000f067a: shr al, 0xe0; jg short 0x00000000000f0672; jmp qword ptr [rsi+0xf]; 
0x000000000f735f: shr al, cl; ret far; 
0x000000000a54cd: shr al, cl; sar r15b, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000133c0a: shr ax, 0xe; and eax, 0x1; ret; 
0x000000000a85ce: shr bl, 0x1; ret; 
0x000000001644dd: shr bl, 0x2a; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000015d3e6: shr bl, 0x92; nop [rax]; endbr64; ret; 
0x000000001751fb: shr bl, 0xd1; xchg ax, ax; mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x00000000175103: shr bl, 0xd2; nop [rax+rax]; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x00000000114dd2: shr bl, 0xd3; nop [rax]; mov edx, r12d; mov eax, 0x10d; syscall; 
0x000000000d9bf1: shr bl, 0xe0; nop [rax]; lea rax, [rip-0x10f]; add rsp, 0x58; ret; 
0x000000000d9ad1: shr bl, 0xe0; nop [rax]; lea rax, [rip-0xff]; add rsp, 0x58; ret; 
0x0000000008fe94: shr bl, cl; out dx, eax; nop [rax+rax]; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x000000000e653c: shr byte ptr [rax], 0x1; adc eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000059193: shr byte ptr [rcx], 0x1; ret; 
0x000000000b308f: shr byte ptr [rcx], 0xc8; ret; 
0x00000000199eaf: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x0000000019d9b3: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000019d9c3: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000019d9d3: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000019d9a3: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x000000001b2253: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b2263: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b2273: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b2283: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x80]; ret; 
0x000000001b4ac3: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad3: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae3: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab3: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000000b530c: shr byte ptr [rcx], cl; rol bl, 0x1; xor eax, eax; ret; 
0x000000000d3a44: shr byte ptr [rdx+0x1], 0x6a; add [rbx+rcx*4+0x4c], cl; and al, 0x10; call r13; 
0x000000000c632a: shr byte ptr [rdx+0x1], cl; lea r9, [rsp+0x20]; call rbx; 
0x000000000c6114: shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x18]; call r13; 
0x0000000014b2a0: shr ch, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000006466c: shr cl, 0x1; ret; 
0x000000001b81b8: shr cl, 0x48; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000135c9c: shr cl, 0x5e; shl esp, cl; jmp qword ptr [rsi+0xf]; 
0x000000000d59e2: shr cl, 0x6e; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000c92df: shr cl, 0x77; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000ce53c: shr cl, 0xb7; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000008fe48: shr cl, cl; adc cl, [rax+0xe]; add [rsi-0x70], ah; mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x000000000cc988: shr cl, cl; fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x000000000ca118: shr cl, cl; fdivp st(7), st; jmp qword ptr [rsi-0x70]; 
0x00000000059ac8: shr cl, cl; xchg edx, eax; fcos; jmp qword ptr [rsi-0x70]; 
0x0000000013fd29: shr dword ptr [rdi-0x1], cl; call far fword ptr [rdx+0x59]; 
0x000000000b56be: shr dword ptr [rip+0xffff], 0xc3; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000061f3b: shr dword ptr [rsi+0x1b], 0x1; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000a41e4: shr dword ptr [rsi+0x48], 0x3d; jmp far fword ptr [rdi+0x32760000]; 
0x00000000136827: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000467be: shr eax, 0x10; shl edx, 0xa; and eax, 0x3ff; xor eax, edx; ret; 
0x0000000009762d: shr eax, 0x13; mov [rsi], eax; xor eax, eax; ret; 
0x0000000013683a: shr eax, 0x18; ret; 
0x0000000014a383: shr eax, 0x1; xchg edi, eax; ret; 
0x00000000099cd6: shr eax, 0x1f; mov [rsi], eax; xor eax, eax; ret; 
0x0000000004109f: shr eax, 0x1f; ret; 
0x0000000004107e: shr eax, 0x1f; shr ecx, 0x10; or eax, ecx; ret; 
0x0000000012560f: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000046c38: shr eax, 0x20; mov [rdx+0x4], ax; xor eax, eax; ret; 
0x000000000b56d6: shr eax, 0x20; or eax, edx; ret; 
0x000000000d848e: shr eax, 0x2; ret; 
0x000000001a2771: shr eax, 0x2; vzeroupper; ret; 
0x000000001ad49e: shr eax, 0x2; xtest; je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000000413ec: shr eax, 0x3f; ret; 
0x0000000008a016: shr eax, 0x4; and eax, 0x1; ret; 
0x000000001430d2: shr eax, 0x4; and eax, 0x7f; ret; 
0x000000000a0d20: shr eax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x0000000008a026: shr eax, 0x5; and eax, 0x1; ret; 
0x00000000090cbd: shr eax, 0xb; and eax, 0x1; mov [rip+0x18adcb], eax; ret; 
0x0000000012562c: shr eax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000133c0b: shr eax, 0xe; and eax, 0x1; ret; 
0x000000000a262b: shr eax, 0xff; call qword ptr [rax-0x5e1f00d]; 
0x00000000129e41: shr eax, cl; and eax, 0x1; ret; 
0x00000000126441: shr eax, cl; and eax, 0x3; ret; 
0x0000000014c63b: shr eax, cl; call far fword ptr [rsi]; 
0x000000001600dc: shr eax, cl; std; jmp qword ptr [rsi+0x66]; 
0x0000000014b0cd: shr ebp, cl; dec dword ptr [rax+0x39]; ret; 
0x000000000436c9: shr ebx, 0x1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000014cf15: shr ebx, 0x1; mov [0x841f0f], eax; mov eax, 0xffffffff; ret; 
0x000000001a738f: shr ebx, 0x3a; xor eax, eax; ret; 
0x00000000041081: shr ecx, 0x10; or eax, ecx; ret; 
0x000000000b0dc2: shr ecx, 0x14; sar edi, 0x1; push qword ptr [rcx]; ror byte ptr [rax-0x77], cl; ret; 
0x00000000154d45: shr ecx, 0x3; add rax, rdi; notrack jmp rax; 
0x00000000174655: shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000112efc: shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000013555b: shr ecx, 0x9f; and bh, bh; call qword ptr [rax-0x18]; 
0x000000000cda44: shr ecx, 0xdf; idiv edi; jmp qword ptr [rsi+0xf]; 
0x00000000054f7c: shr ecx, cl; mov [rdi+0x10], r9; ret; 
0x00000000054f05: shr ecx, cl; mov [rdi+0x8], r9; ret; 
0x00000000054ed4: shr ecx, cl; mov [rdi], r9; ret; 
0x0000000004455c: shr ecx, cl; ret far; 
0x0000000016b785: shr edx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c80a: shr edx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x00000000041b5c: shr edx, 0x3f; or rdx, rcx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000087480: shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x00000000087550: shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x000000000d6e75: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e95: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb5: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed5: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x00000000142b49: shr esi, 0x3; mov eax, 0x2; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x0000000014cf14: shr r11, 0x1; mov [0x841f0f], eax; mov eax, 0xffffffff; ret; 
0x00000000054f7b: shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000054f04: shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000054ed3: shr r9, cl; mov [rdi], r9; ret; 
0x0000000012560e: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000046c37: shr rax, 0x20; mov [rdx+0x4], ax; xor eax, eax; ret; 
0x000000000b56d5: shr rax, 0x20; or eax, edx; ret; 
0x000000000d848d: shr rax, 0x2; ret; 
0x000000001a28b1: shr rax, 0x2; vzeroupper; ret; 
0x000000000413eb: shr rax, 0x3f; ret; 
0x000000001430d1: shr rax, 0x4; and eax, 0x7f; ret; 
0x000000000a0d1f: shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x0000000012562b: shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000436c8: shr rbx, 0x1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x000000001a738e: shr rbx, 0x3a; xor eax, eax; ret; 
0x00000000154d44: shr rcx, 0x3; add rax, rdi; notrack jmp rax; 
0x0000000016b784: shr rdx, 0x20; mov [rsp+0x8], rdx; call qword ptr [rax+0x8]; 
0x0000000016c809: shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48]; 
0x00000000041b5b: shr rdx, 0x3f; or rdx, rcx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000054f74: shrd eax, ecx, cl; mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000054efe: shrd eax, ecx, cl; mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000054f73: shrd r8, r9, cl; mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000054efd: shrd r8, r9, cl; mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000054efc: shrd r8, r9, cl; mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000001b01b5: shufps xmm0, [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x0000000019fe25: shufps xmm0, [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001b13b5: shufps xmm0, [rdi+0x2], 0x0; ret; 
0x000000001b39b5: shufps xmm0, [rdi+0x2], 0x0; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x0000000019e395: shufps xmm0, [rdi+0x2], 0x0; vzeroupper; ret; 
0x0000000011b0eb: sldt [rax+0x2e740038]; mov eax, 0x71; syscall; 
0x0000000011b17b: sldt [rax+0x2e740038]; mov eax, 0x72; syscall; 
0x000000000a9a29: sldt [rax-0x168af71b]; lea rax, [rip+0xf60e9]; test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9ab9: sldt [rax-0x168af71b]; lea rax, [rip+0xf6409]; test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x000000000a956c: sldt [rax-0x2a8af71b]; and esi, 0x400; lea rax, [rip+0xf0680]; jne short 0x00000000000a9524; ret; 
0x0000000012c594: sldt [rax]; add al, ch; adc esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x00000000125615: sldt [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000099c3b: sldt [rax]; je short 0x0000000000099c48; mov [rsi], eax; xor eax, eax; ret; 
0x0000000011ebcb: sldt [rax]; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x0000000007944f: sldt [rax]; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007944e: sldt [rax]; mov rdi, [rbp-0x8b8]; mov rdx, rbx; mov rsi, r15; call qword ptr [r12+0x38]; 
0x0000000007bda8: sldt [rax]; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000007bda7: sldt [rax]; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x0000000012c6ff: sldt [rbx+0x1a7f01fa]; add rsp, 0x18; ret; 
0x00000000125a6d: sldt [rbx+0x47f01f8]; ret; 
0x0000000011d1bc: sldt [rbx-0x387c0f19]; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000096777: stc; add [rax+rax], al; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x00000000194a97: stc; add [rax], al; add [rbp-0x77], cl; ret far; 
0x00000000054cc2: stc; add [rbp-0x77], ecx; ret far; 
0x00000000126754: stc; add [rdi+0x30], esi; mov eax, 0x106; syscall; 
0x00000000112ef5: stc; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x00000000172745: stc; add esi, [rsi+0x7]; ret; 
0x000000000903bd: stc; call qword ptr [rax+0x50b78b48]; 
0x00000000136170: stc; call qword ptr [rax-0x18]; 
0x00000000153c46: stc; call r12; 
0x00000000155114: stc; call rbp; 
0x00000000134763: stc; dec dword ptr [rax-0x73]; add eax, 0xfff90234; cmove rax, rdx; ret; 
0x00000000134633: stc; dec dword ptr [rax-0x73]; add eax, 0xfff90384; cmove rax, rdx; ret; 
0x00000000134503: stc; dec dword ptr [rax-0x73]; add eax, 0xfff904b4; cmove rax, rdx; ret; 
0x00000000134827: stc; dec dword ptr [rax-0x73]; add eax, 0xfff907a0; cmovne rax, rdx; ret; 
0x0000000008a427: stc; dec dword ptr [rax-0x77]; ret; 
0x0000000007b7a3: stc; idiv edi; jmp qword ptr [rsi+0xf]; 
0x00000000148cf8: stc; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x00000000149614: stc; inc dword ptr [rax]; add [rax], al; jg short 0x0000000000149620; ret; 
0x00000000142322: stc; jae short 0x0000000000142333; mov eax, 0xffffffff; ret; 
0x0000000017bacc: stc; jb short 0x000000000017bad7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bb7c: stc; jb short 0x000000000017bb87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e4ac: stc; jb short 0x000000000017e4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e55c: stc; jb short 0x000000000017e567; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000019a3b2: stc; je short 0x000000000019a376; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019ba52: stc; je short 0x000000000019ba16; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000149b4f: stc; jg short 0x0000000000149b0d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x000000000a6a9b: stc; jmp far fword ptr [rcx]; 
0x000000000a6aab: stc; jmp far fword ptr [rdi-0x78f10000]; 
0x00000000091781: stc; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000000909e7: stc; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000896f4: stc; jmp qword ptr [rsi+0x2e]; 
0x0000000008f6a0: stc; jmp qword ptr [rsi+0x48]; 
0x000000000a7551: stc; jmp qword ptr [rsi+0x66]; 
0x0000000008d857: stc; jmp qword ptr [rsi+0xf]; 
0x000000000d367c: stc; jmp qword ptr [rsi-0x70]; 
0x000000000b135b: stc; jne short 0x00000000000b1338; ret; 
0x000000001b01ff: stc; lea rax, [rdi+rdx]; ret; 
0x0000000019fe7f: stc; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000017d5a8: stc; mov [rdi-0x4], ecx; ret; 
0x000000001b01f7: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x000000001b13e7: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x0000000019e3c7: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000001069e7: stc; mov dword ptr [rsi], 0x0; movups [rsi+0x8], xmm0; ret; 
0x0000000017d5a2: stc; mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x000000001b1b38: stc; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000001b1b68: stc; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x000000000379d2: stc; notrack jmp rcx; 
0x0000000017a357: stc; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000019a25c: stc; or eax, ecx; ret; 
0x0000000019a292: stc; or rax, rcx; cmovne eax, edx; ret; 
0x000000001af28b: stc; rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6cd4: stc; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000009c213: stc; ret far; 
0x000000001b13ef: stc; ret; 
0x0000000002b393: stc; sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000016ad1f: stc; sbb al, [rcx+0xf]; ret; 
0x0000000012a6ff: stc; shr eax, cl; and eax, 0x1; ret; 
0x000000001a4388: stc; vmovups [rdi-0x200], zmm15; ret; 
0x0000000019e3cf: stc; vzeroupper; ret; 
0x000000000b314d: std; adc [rax], eax; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000168b3f: std; adc al, 0xf3; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000168c3f: std; adc esi, ebx; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000eceff: std; add [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000e5622: std; add al, [rax]; add [rax], al; syscall; 
0x00000000183ac7: std; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000044616: std; add r15, r14; call rax; 
0x0000000013551c: std; call qword ptr [rax-0x18]; 
0x0000000016188c: std; call qword ptr [rax-0x5e1f00d]; 
0x0000000013597b: std; clc; jmp qword ptr [rsi-0x70]; 
0x000000000512ce: std; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x00000000041251: std; fstp st(1), st; ret; 
0x000000001486a7: std; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x000000001136ce: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000001137fd: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x0000000017b58c: std; jb short 0x000000000017b597; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b63c: std; jb short 0x000000000017b647; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017df6c: std; jb short 0x000000000017df77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e01c: std; jb short 0x000000000017e027; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000014204f: std; jge short 0x0000000000142041; jmp qword ptr [rsi+0x66]; 
0x0000000013ca23: std; jmp qword ptr [rcx+rax*2-0x75]; 
0x0000000013c434: std; jmp qword ptr [rdi+rax*8+0x45]; 
0x00000000159a71: std; jmp qword ptr [rsi+0x2e]; 
0x000000001600de: std; jmp qword ptr [rsi+0x66]; 
0x00000000156c92: std; jmp qword ptr [rsi+0x66]; 
0x00000000160227: std; jmp qword ptr [rsi+0xf]; 
0x00000000065fc7: std; jmp qword ptr [rsi+0xf]; 
0x00000000160184: std; jmp qword ptr [rsi+0xf]; 
0x0000000004b518: std; jmp qword ptr [rsi+0xf]; 
0x0000000005711c: std; jmp qword ptr [rsi-0x70]; 
0x00000000107295: std; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000107296: std; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000001b01db: std; lea rax, [rdi+rdx]; ret; 
0x0000000019fe5b: std; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000000926a2: std; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000001b01d7: std; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x0000000019fe57: std; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001b13d7: std; mov [rdi+rdx-0x3], ecx; ret; 
0x0000000019e3b7: std; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x0000000017cdcb: std; mov [rdi-0x2], cx; ret; 
0x0000000017cdc3: std; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x00000000155a73: std; or al, 0x0; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a7a: std; or al, 0x0; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000094624: std; or eax, esi; mov [rdi], eax; xor eax, eax; ret; 
0x000000001223c7: std; push 0xf; add [rax-0x7d], cl; call qword ptr [rax]; 
0x000000000c498c: std; rep movsb [rdi], [rsi]; cld; ret; 
0x0000000012370f: std; ret; 
0x0000000011ecdf: std; sbb eax, 0x448bfff7; and al, 0x8; add rsp, 0x28; ret; 
0x0000000013562b: std; std; call qword ptr [rax-0x18]; 
0x00000000037efb: std; test rax, rax; je short 0x0000000000037f03; call rax; 
0x000000001a6ac6: std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001af499: std; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001af086: std; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001a6ede: std; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a40b8: std; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e7e: std; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a45a6: std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000019e3bb: std; vzeroupper; ret; 
0x00000000198b83: std; xlat [rbx]; ret far; 
0x00000000199621: std; xlat [rbx]; ret; 
0x0000000019d982: std; xlat [rbx]; rol dword ptr [rbp-0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000019a14d: std; xlat [rbx]; sar edi, 0xc0; vzeroupper; ret; 
0x000000000c3947: sti; adc [rax], al; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c3860: sti; adc [rax], al; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000010ff0d: sti; add cl, [rdi]; xchg ebp, eax; ret; 
0x00000000183c47: sti; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000191861: sti; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000436ce: sti; add r15, [rsp]; mov rsi, r15; call r14; 
0x000000000a15b2: sti; call far fword ptr [rax+0x5a]; 
0x00000000077a2f: sti; call far fword ptr [rbx+0x5d]; 
0x000000000a154a: sti; dec dword ptr [rax-0x7d]; ret; 
0x0000000015e6f2: sti; dec dword ptr [rcx-0x75]; and al, 0x38; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000001bab19: sti; dec dword ptr [rcx-0x75]; jge short 0x00000000001bab2f; add rdi, rbp; call r12; 
0x0000000017b82c: sti; jb short 0x000000000017b837; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b8dc: sti; jb short 0x000000000017b8e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e20c: sti; jb short 0x000000000017e217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e2bc: sti; jb short 0x000000000017e2c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x000000000ed503: sti; jmp qword ptr [rbx+0x1ffde]; 
0x000000000886e4: sti; jmp qword ptr [rsi+0x2e]; 
0x00000000086c73: sti; jmp qword ptr [rsi+0x66]; 
0x000000000d30e6: sti; jmp qword ptr [rsi+0xf]; 
0x000000000edc3c: sti; jmp qword ptr [rsi-0x70]; 
0x0000000016387d: sti; jmp qword ptr [rsi-0x7d]; 
0x00000000161f1a: sti; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000017d1a8: sti; mov [rdi-0x4], ecx; ret; 
0x0000000017d1a2: sti; mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000009a01e: sti; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000001256a2: sti; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x000000001a2d64: sti; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000013b4ad: sti; or [rcx+0xf], eax; ret far; 
0x00000000041d9c: sti; push rax; ret; 
0x00000000038894: sti; sbb [rax], eax; ret; 
0x000000000f1dc9: sti; sbb cl, al; clc; sbb [rcx], bh; ret; 
0x0000000003b113: sti; sbb eax, 0x3d8b4c00; ret; 
0x000000000c02a1: sti; sub eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000083c0e: sti; test byte ptr [rdi], 0x2; jne short 0x0000000000083c88; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x000000001a4379: sti; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001b1af1: sti; xchg ebx, eax; enter 0xc1ff, 0xf; test [rdi+rdi*8-0x1], dh; jmp qword ptr [rdx-0x4e]; 
0x000000001af78e: sti; xchg ebx, eax; ret; 
0x000000001aeac3: sti; xchg ebx, eax; rol byte ptr [rbp+0x622675c0], 0xb2; and gs:[rsi], ah; ret; 
0x000000001b5b4f: sti; xchg ebx, eax; rol byte ptr [rbp+0x622a75c0], 0xb2; and gs:[rdi], ah; ret; 
0x000000001b173c: sti; xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001afcc0: sti; xchg ebx, eax; rol byte ptr [rbp-0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001af835: sti; xchg ebx, eax; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001afb9d: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a7220: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000004e7d7: sti; xor [rax-0x77], cl; mov byte ptr [rcx+0xf], 0x95; ret; 
0x00000000092783: sti; xor eax, eax; ret; 
0x0000000017841e: stosb [rdi]; add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; notrack jmp r10; 
0x000000000ed42e: stosb [rdi]; add rax, rdx; notrack jmp rax; 
0x0000000016bc7b: stosb [rdi]; cld; jmp qword ptr [rsi-0x70]; 
0x00000000125fef: stosb [rdi]; idiv bh; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x000000001260a0: stosb [rdi]; idiv bh; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000007b892: stosb [rdi]; idiv edi; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x00000000076ffa: stosb [rdi]; idiv edi; jmp qword ptr [rsi-0x70]; 
0x0000000015d9d7: stosb [rdi]; in al, dx; dec dword ptr [rax-0x77]; ret; 
0x0000000015d9d6: stosb [rdi]; in al, dx; dec dword ptr [rax-0x77]; ret; 
0x000000000822cf: stosb [rdi]; jno short 0x00000000000822cc; jmp qword ptr [rsi+0x2e]; 
0x00000000172d02: stosb [rdi]; js short 0x0000000000172cfc; jmp qword ptr [rsi+0xf]; 
0x000000000ccf36: stosb [rdi]; leave; cmc; jmp qword ptr [rsi+0xf]; 
0x0000000010eba2: stosb [rdi]; mov dl, 0xf2; jmp qword ptr [rsi+0x2e]; 
0x000000001bb232: stosb [rdi]; mov eax, [0x31e95def8948fffb]; shl esi, 0x1; call qword ptr [rax-0x5e1f00d]; 
0x000000000c5048: stosb [rdi]; mov rax, rdx; ret; 
0x000000001a10cf: stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x000000001af2f9: stosd [rdi]; adc al, [rdi]; add [rdi], cl; sub dword ptr [rbp-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x000000000f0449: stosd [rdi]; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000a9d62: stosd [rdi]; add [rax], eax; lea rax, [rip+0x1ac94]; cmove rax, rdx; ret; 
0x00000000033ba4: stosd [rdi]; add eax, [rax]; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x000000000a4a9d: stosd [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000bad24: stosd [rdi]; fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000005d4ab: stosd [rdi]; loop 0x000000000005d4ad; call qword ptr [rax+0x2085c748]; 
0x00000000142fb4: stosd [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000099922: stosd [rdi]; mov eax, 0x83; ret; 
0x00000000165d97: stosd [rdi]; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000006690f: stosd [rdi]; ret; 
0x0000000008d856: stosd [rdi]; stc; jmp qword ptr [rsi+0xf]; 
0x000000001a1e4a: stosd [rdi]; vzeroupper; ret; 
0x000000000a4a9c: stosq [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000142fb3: stosq [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000112f00: stosq [rdi]; ret; 
0x000000000ded8f: str [r15]; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000a8a32: str [r8-0x73]; add eax, 0x11c94; cmove rax, rdx; ret; 
0x000000000a97f0: str [rax-0x73]; adc eax, 0xfd947; cmove rax, rdx; ret; 
0x000000000a8a33: str [rax-0x73]; add eax, 0x11c94; cmove rax, rdx; ret; 
0x000000000a8773: str [rax-0x73]; add eax, 0x12254; cmove rax, rdx; ret; 
0x000000000a87f3: str [rax-0x73]; add eax, 0x12374; cmove rax, rdx; ret; 
0x000000000a95f3: str [rax-0x73]; add eax, 0xc014; cmove rax, rdx; ret; 
0x000000000ab0e3: str [rax-0x73]; add eax, 0xf3d4; cmove rax, rdx; ret; 
0x000000000a9da3: str [rax-0x73]; add eax, 0xf6b94; cmove rax, rdx; ret; 
0x000000000a9963: str [rax-0x73]; add eax, 0xf6f94; cmove rax, rdx; ret; 
0x000000000a9733: str [rax-0x73]; add eax, 0xf7204; cmove rax, rdx; ret; 
0x000000000a97a0: str [rax-0x73]; add eax, 0xf7957; cmove rax, rdx; ret; 
0x000000000a9d43: str [rax-0x73]; add eax, 0xfcbf4; cmove rax, rdx; ret; 
0x000000000a9903: str [rax-0x73]; add eax, 0xfcff4; cmove rax, rdx; ret; 
0x000000000a96d3: str [rax-0x73]; add eax, 0xfd264; cmove rax, rdx; ret; 
0x000000000a9cdb: str [rax-0x73]; add eax, 0xfe0dc; cmove rax, rdx; ret; 
0x000000000a989b: str [rax-0x73]; add eax, 0xfe4dc; cmove rax, rdx; ret; 
0x000000000a966b: str [rax-0x73]; add eax, 0xfe74c; cmove rax, rdx; ret; 
0x000000000a9807: str [rax-0x73]; add eax, 0xff0f0; cmove rax, rdx; ret; 
0x00000000129445: str [rax-0x75]; sbb [rbx-0x6f3cff00], al; ret; 
0x00000000129435: str [rax-0x75]; sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x0000000012908d: str [rax-0x77]; adc [r10+0x13], r14b; mov qword ptr [rip+0xf03a0], 0x2; ret; 
0x000000001223c9: str [rax-0x7d]; call qword ptr [rax]; 
0x00000000125924: str [rcx+rcx*4+0x3d]; ret; 
0x000000000dd990: str [rdi]; mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000debd0: str [rdi]; mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; notrack jmp rax; 
0x000000000ded90: str [rdi]; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000e0f99: str [rdi]; mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; notrack jmp rdx; 
0x000000000e1017: str [rdi]; mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000001168ab: sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x00000000116c03: sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x00000000116b9b: sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x000000000d7b46: sub [r11], r15b; sub [rbp+0x63], r14b; ret; 
0x00000000085e0c: sub [r13-0x7b], r8b; shl byte ptr [rbp+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x000000001264c3: sub [r15], rcx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000016d085: sub [r8+r15*4], r8b; add [rax], eax; add [rax], al; ret; 
0x0000000016cc72: sub [r8-0x77], r9b; ja short 0x000000000016cc90; mov eax, r8d; ret; 
0x0000000010457c: sub [r8-0x77], r9b; ret; 
0x000000000921e5: sub [r8-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x0000000016cca7: sub [r9+r8-0x3a], r9b; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000001163e5: sub [r9+r9*4-0x1a], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000016cdc5: sub [r9], r15b; shl byte ptr [rbx+0x5], 0x1; xor eax, eax; ret; 
0x0000000012e3d8: sub [r9], sil; rcr byte ptr [rbx+0x48], cl; test eax, eax; cmovs rax, rdx; ret; 
0x000000001261f4: sub [rax+0x113], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001193b4: sub [rax+0x146], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000f47f2: sub [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000016d096: sub [rax+0x1], bh; ret; 
0x000000001a24ab: sub [rax+0x1], cl; clc; vzeroupper; ret; 
0x0000000019d34b: sub [rax+0x1], ecx; clc; vzeroupper; ret; 
0x000000000a4902: sub [rax+0x39], cl; ret far; 
0x000000000ecebe: sub [rax+0x7fffffff], edi; cmp r8, 0x58465342; jne short 0x00000000000eced0; ret; 
0x0000000016d086: sub [rax+rdi*4], al; add [rax], eax; add [rax], al; ret; 
0x00000000072374: sub [rax-0x3b7cb7e7], cl; sbb [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000011705e: sub [rax-0x73], cl; and al, 0x38; mov rsi, r9; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000001168a8: sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x00000000116c00: sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x00000000116b98: sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x0000000002ee52: sub [rax-0x75], cl; je short 0x000000000002ee7b; mov rdi, [rsp+0x50]; mov rax, [rsp+0x18]; call rax; 
0x0000000011b951: sub [rax-0x75], cl; je short 0x000000000011b97a; and [rax+0x10e], bh; mov edi, [rsp+0x1c]; syscall; 
0x0000000015d95e: sub [rax-0x75], cl; push rsp; and al, 0x20; mov rsi, [rsp+0x18]; call qword ptr [rax]; 
0x0000000016cc73: sub [rax-0x77], cl; ja short 0x000000000016cc90; mov eax, r8d; ret; 
0x00000000045cba: sub [rax-0x77], cl; ret; 
0x00000000075f5f: sub [rax-0x77], ecx; ret far; 
0x00000000082b43: sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x000000000921e6: sub [rax-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x00000000175325: sub [rax], al; add [rax], al; add [rax-0x73], cl; or eax, 0xfffffcbf; call qword ptr [rbx+0x358]; 
0x0000000011487c: sub [rax], al; add [rax], al; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114ef2: sub [rax], al; add [rax], al; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x000000000420f1: sub [rax], al; add [rax], al; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x00000000042404: sub [rax], al; add [rax], al; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x00000000042940: sub [rax], al; add [rax], al; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429c3: sub [rax], al; add [rax], al; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042ace: sub [rax], al; add [rax], al; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000043011: sub [rax], al; add [rax], al; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x000000000434a1: sub [rax], al; add [rax], al; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f1f: sub [rax], al; add [rax], al; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x0000000004600f: sub [rax], al; add [rax], al; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046284: sub [rax], al; add [rax], al; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x00000000046809: sub [rax], al; add [rax], al; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046856: sub [rax], al; add [rax], al; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x000000000468a8: sub [rax], al; add [rax], al; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f5: sub [rax], al; add [rax], al; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046948: sub [rax], al; add [rax], al; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046995: sub [rax], al; add [rax], al; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000051503: sub [rax], al; add [rax], al; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x00000000051891: sub [rax], al; add [rax], al; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052ddb: sub [rax], al; add [rax], al; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x000000000562e6: sub [rax], al; add [rax], al; jne short 0x0000000000056365; leave; ret; 
0x0000000005a498: sub [rax], al; add [rax], al; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060754: sub [rax], al; add [rax], al; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060829: sub [rax], al; add [rax], al; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608e0: sub [rax], al; add [rax], al; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609b2: sub [rax], al; add [rax], al; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a74: sub [rax], al; add [rax], al; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b34: sub [rax], al; add [rax], al; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c22: sub [rax], al; add [rax], al; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf9: sub [rax], al; add [rax], al; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x000000000613e1: sub [rax], al; add [rax], al; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e93: sub [rax], al; add [rax], al; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621cc: sub [rax], al; add [rax], al; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a7: sub [rax], al; add [rax], al; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082c04: sub [rax], al; add [rax], al; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cc0: sub [rax], al; add [rax], al; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db9: sub [rax], al; add [rax], al; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e89: sub [rax], al; add [rax], al; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f42: sub [rax], al; add [rax], al; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x00000000089fe2: sub [rax], al; add [rax], al; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090481: sub [rax], al; add [rax], al; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x0000000009064a: sub [rax], al; add [rax], al; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090624: sub [rax], al; add [rax], al; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x00000000090789: sub [rax], al; add [rax], al; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x0000000009075f: sub [rax], al; add [rax], al; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x0000000009bcb9: sub [rax], al; add [rax], al; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x000000000a02df: sub [rax], al; add [rax], al; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d364c: sub [rax], al; add [rax], al; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3727: sub [rax], al; add [rax], al; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8ebf: sub [rax], al; add [rax], al; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d9c5a: sub [rax], al; add [rax], al; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2ea8: sub [rax], al; add [rax], al; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5598: sub [rax], al; add [rax], al; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e774b: sub [rax], al; add [rax], al; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec17b: sub [rax], al; add [rax], al; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec20b: sub [rax], al; add [rax], al; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4cb: sub [rax], al; add [rax], al; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec56b: sub [rax], al; add [rax], al; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef8: sub [rax], al; add [rax], al; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a97: sub [rax], al; add [rax], al; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e11: sub [rax], al; add [rax], al; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000119a97: sub [rax], al; add [rax], al; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b26: sub [rax], al; add [rax], al; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119bde: sub [rax], al; add [rax], al; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c7c: sub [rax], al; add [rax], al; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a1e9: sub [rax], al; add [rax], al; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011b10b: sub [rax], al; add [rax], al; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b19b: sub [rax], al; add [rax], al; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b242: sub [rax], al; add [rax], al; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b302: sub [rax], al; add [rax], al; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3ea: sub [rax], al; add [rax], al; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c070: sub [rax], al; add [rax], al; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0e9: sub [rax], al; add [rax], al; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1bb: sub [rax], al; add [rax], al; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf83: sub [rax], al; add [rax], al; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d016: sub [rax], al; add [rax], al; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d09a: sub [rax], al; add [rax], al; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d115: sub [rax], al; add [rax], al; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011e654: sub [rax], al; add [rax], al; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e72d: sub [rax], al; add [rax], al; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x0000000011f985: sub [rax], al; add [rax], al; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x000000001210b9: sub [rax], al; add [rax], al; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121179: sub [rax], al; add [rax], al; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121357: sub [rax], al; add [rax], al; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x00000000121580: sub [rax], al; add [rax], al; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x0000000012179d: sub [rax], al; add [rax], al; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000121c35: sub [rax], al; add [rax], al; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000126543: sub [rax], al; add [rax], al; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b31: sub [rax], al; add [rax], al; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e6a: sub [rax], al; add [rax], al; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x000000001284e7: sub [rax], al; add [rax], al; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000130aab: sub [rax], al; add [rax], al; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x00000000132594: sub [rax], al; add [rax], al; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000134beb: sub [rax], al; add [rax], al; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cef: sub [rax], al; add [rax], al; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e05: sub [rax], al; add [rax], al; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ecd: sub [rax], al; add [rax], al; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c5f: sub [rax], al; add [rax], al; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d75: sub [rax], al; add [rax], al; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e3d: sub [rax], al; add [rax], al; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136244: sub [rax], al; add [rax], al; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a4: sub [rax], al; add [rax], al; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x0000000013636d: sub [rax], al; add [rax], al; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x0000000013644d: sub [rax], al; add [rax], al; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x0000000013652d: sub [rax], al; add [rax], al; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d12b: sub [rax], al; add [rax], al; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c8: sub [rax], al; add [rax], al; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d235: sub [rax], al; add [rax], al; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000147fda: sub [rax], al; add [rax], al; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x0000000014802d: sub [rax], al; add [rax], al; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488dc: sub [rax], al; add [rax], al; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x00000000149c76: sub [rax], al; add [rax], al; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000014a362: sub [rax], al; add [rax], al; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5ab: sub [rax], al; add [rax], al; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x00000000169041: sub [rax], al; add [rax], al; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x000000001690b7: sub [rax], al; add [rax], al; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169127: sub [rax], al; add [rax], al; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169197: sub [rax], al; add [rax], al; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f8: sub [rax], al; add [rax], al; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x0000000016925c: sub [rax], al; add [rax], al; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c7: sub [rax], al; add [rax], al; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x0000000016934a: sub [rax], al; add [rax], al; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698a8: sub [rax], al; add [rax], al; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698ed: sub [rax], al; add [rax], al; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3c2: sub [rax], al; add [rax], al; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000017213e: sub [rax], al; add [rax], al; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x000000001739c2: sub [rax], al; add [rax], al; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a2a: sub [rax], al; add [rax], al; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x0000000017612a: sub [rax], al; add [rax], al; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000119328: sub [rax], al; add [rax], al; syscall; 
0x000000000921c7: sub [rax], al; je short 0x00000000000921d0; xor eax, eax; ret; 
0x00000000141e1a: sub [rax], eax; add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x000000001426a9: sub [rax], eax; add [rax], al; mov eax, 0x104; cmovne eax, edx; ret; 
0x000000001426f0: sub [rax], eax; add [rax], al; ret; 
0x00000000127ce5: sub [rax], eax; add [rax], al; syscall; 
0x000000000adace: sub [rax], eax; add bh, dh; ret; 
0x000000000c1a53: sub [rax], ebx; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000dcd9b: sub [rax], edx; add al, ch; lodsd [rsi]; shl ch, 0x1; jmp qword ptr [rsi+0x2e]; 
0x000000000937f2: sub [rbp+0x31], al; sar byte ptr [rdx+0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000092f90: sub [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x0000000015db04: sub [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000e5d14: sub [rbp+0x5b2b74c0], al; pop rbp; pop r12; ret; 
0x000000000d7b4a: sub [rbp+0x63], dh; ret; 
0x000000000d7b49: sub [rbp+0x63], r14b; ret; 
0x0000000014d178: sub [rbp-0x24], dh; mov eax, 0x1; ret; 
0x00000000085e0d: sub [rbp-0x7b], al; shl byte ptr [rbp+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x00000000163873: sub [rbp], edx; add [rbx-0x7e17ff83], cl; sbb bl, bh; jmp qword ptr [rsi-0x7d]; 
0x0000000008287c: sub [rbx+0x11], dh; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000008287b: sub [rbx+0x11], sil; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000829e3: sub [rbx+0x12], dh; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000829e2: sub [rbx+0x12], sil; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000015eda6: sub [rbx+0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000009ecf2: sub [rbx+0x180eb70d], cl; add [rbx+rcx*4+0x78], al; push 0xfffffffffffc91e9; jmp qword ptr [rsi+0xf]; 
0x00000000041c45: sub [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000016d122: sub [rbx+0x5d], bl; pop r12; ret; 
0x00000000059b3f: sub [rbx+0x5d], bl; ret; 
0x000000000353ad: sub [rbx+rcx*4+0x35], cl; ret far; 
0x00000000174a28: sub [rbx-0x1b], dh; mov eax, 0x1; ret; 
0x00000000174a27: sub [rbx-0x1b], sil; mov eax, 0x1; ret; 
0x0000000006871a: sub [rbx-0x63b7b], cl; jmp qword ptr [rdi+rdi*2]; 
0x00000000076fef: sub [rbx-0x7af00008], al; mov esi, 0xe9ffffec; stosb [rdi]; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000d7b47: sub [rbx], bh; sub [rbp+0x63], r14b; ret; 
0x0000000018d4e3: sub [rbx], eax; add [rax], al; ret; 
0x000000001046a6: sub [rcx+0x63], cl; ret far; 
0x0000000016cca8: sub [rcx+rax-0x3a], cl; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x00000000138067: sub [rcx+rcx*4+0x2b], ah; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000d9117: sub [rcx+rcx*4+0x7c], cl; and al, 0x50; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000162f32: sub [rcx+rcx*4-0x19], cl; call rcx; 
0x000000001163e6: sub [rcx+rcx*4-0x1a], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000009c98d: sub [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x00000000082ff3: sub [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x00000000087327: sub [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x0000000006124d: sub [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x0000000016c956: sub [rcx+rcx*4-0x40], eax; ret; 
0x00000000042314: sub [rcx-0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x00000000164fd4: sub [rcx-0x8], dh; dec dword ptr [rcx-0x1437b]; jmp qword ptr [rsi-0x70]; 
0x0000000007c6d3: sub [rcx], al; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000014a0cd: sub [rcx], al; add [rax], al; add rsp, 0x110; pop rbx; ret; 
0x0000000011319c: sub [rcx], al; add [rax], al; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x0000000011ad67: sub [rcx], al; add [rax], al; syscall; 
0x0000000016cdc6: sub [rcx], bh; shl byte ptr [rbx+0x5], 0x1; xor eax, eax; ret; 
0x0000000012e3d9: sub [rcx], dh; rcr byte ptr [rbx+0x48], cl; test eax, eax; cmovs rax, rdx; ret; 
0x0000000011a0ed: sub [rcx], dh; ror byte ptr [rax-0x77], 0xe2; mov eax, 0x10; syscall; 
0x0000000009bdca: sub [rcx], eax; add [rax], al; syscall; 
0x00000000046ce3: sub [rcx], esp; sbb eax, 0x64d8f700; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000017b3f8: sub [rdi+0x10], ebx; jb short 0x000000000017b406; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b548: sub [rdi+0x10], ebx; jb short 0x000000000017b556; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b698: sub [rdi+0x10], ebx; jb short 0x000000000017b6a6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b7e8: sub [rdi+0x10], ebx; jb short 0x000000000017b7f6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017b938: sub [rdi+0x10], ebx; jb short 0x000000000017b946; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ba88: sub [rdi+0x10], ebx; jb short 0x000000000017ba96; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bbd8: sub [rdi+0x10], ebx; jb short 0x000000000017bbe6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bd28: sub [rdi+0x10], ebx; jb short 0x000000000017bd36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017be78: sub [rdi+0x10], ebx; jb short 0x000000000017be86; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017bfc8: sub [rdi+0x10], ebx; jb short 0x000000000017bfd6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c118: sub [rdi+0x10], ebx; jb short 0x000000000017c126; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c268: sub [rdi+0x10], ebx; jb short 0x000000000017c276; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c3b8: sub [rdi+0x10], ebx; jb short 0x000000000017c3c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c508: sub [rdi+0x10], ebx; jb short 0x000000000017c516; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017c658: sub [rdi+0x10], ebx; jb short 0x000000000017c666; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ddd8: sub [rdi+0x10], ebx; jb short 0x000000000017dde6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017df28: sub [rdi+0x10], ebx; jb short 0x000000000017df36; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e078: sub [rdi+0x10], ebx; jb short 0x000000000017e086; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e1c8: sub [rdi+0x10], ebx; jb short 0x000000000017e1d6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e318: sub [rdi+0x10], ebx; jb short 0x000000000017e326; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e468: sub [rdi+0x10], ebx; jb short 0x000000000017e476; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e5b8: sub [rdi+0x10], ebx; jb short 0x000000000017e5c6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e708: sub [rdi+0x10], ebx; jb short 0x000000000017e716; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e858: sub [rdi+0x10], ebx; jb short 0x000000000017e866; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017e9a8: sub [rdi+0x10], ebx; jb short 0x000000000017e9b6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eaf8: sub [rdi+0x10], ebx; jb short 0x000000000017eb06; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ec48: sub [rdi+0x10], ebx; jb short 0x000000000017ec56; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017ed98: sub [rdi+0x10], ebx; jb short 0x000000000017eda6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017eee8: sub [rdi+0x10], ebx; jb short 0x000000000017eef6; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000017f038: sub [rdi+0x10], ebx; jb short 0x000000000017f046; movaps [rdi], xmm4; notrack jmp r9; 
0x0000000007dcb5: sub [rdi+0x10], esi; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000001b3b53: sub [rdi+0x16], ch; vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b1433: sub [rdi+0x16], ch; vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b0a13: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x000000001b2d43: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x000000001b3b83: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001b09e1: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b2d11: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b61: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b0254: sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1444: sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001af161: sub [rdi+0x1], bh; ret; 
0x000000001afc27: sub [rdi+0x1], bh; vmovdqu64 [rcx+0x20], ymm16; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001af15b: sub [rdi+0x2], bh; vmovdqu64 [rcx], ymm16; ret; 
0x0000000007d3dd: sub [rdi+0x30], esi; movzx edx, dl; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x000000001a72f9: sub [rdi+0x44], bh; adc bh, bh; ret; 
0x000000001af201: sub [rdi+0x44], bh; cmp bh, bh; ret; 
0x000000001b5ce3: sub [rdi+0x4c], ch; xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x000000001b0a19: sub [rdi+0x5f], bh; add [rax-0x72b7bfb1], ecx; ret; 
0x000000001a69d8: sub [rdi+0x6], ch; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001afaec: sub [rdi+0x7], bh; ret; 
0x000000001aefe4: sub [rdi+0x7], bh; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001a69e6: sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001b2daf: sub [rdi+0x7f], bh; add eax, esi; xchg [rax], eax; ret; 
0x000000001b000a: sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000000dce37: sub [rdi+rcx*4+0x2], bl; jbe short 0x00000000000dce40; ret; 
0x0000000017b354: sub [rdi-0x10], ebp; notrack jmp r9; 
0x0000000011bbaa: sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall; 
0x0000000015fd74: sub [rdi-0x17], dh; mov [rdx+0x20], rsi; ret; 
0x0000000017b350: sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b34a: sub [rdi-0x30], ebx; jb short 0x000000000017b35d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b49a: sub [rdi-0x30], ebx; jb short 0x000000000017b4ad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b5ea: sub [rdi-0x30], ebx; jb short 0x000000000017b5fd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b73a: sub [rdi-0x30], ebx; jb short 0x000000000017b74d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b88a: sub [rdi-0x30], ebx; jb short 0x000000000017b89d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017b9da: sub [rdi-0x30], ebx; jb short 0x000000000017b9ed; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bb2a: sub [rdi-0x30], ebx; jb short 0x000000000017bb3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bc78: sub [rdi-0x30], ebx; jb short 0x000000000017bc90; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bdca: sub [rdi-0x30], ebx; jb short 0x000000000017bddd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017bf1a: sub [rdi-0x30], ebx; jb short 0x000000000017bf2d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c06a: sub [rdi-0x30], ebx; jb short 0x000000000017c07d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c1ba: sub [rdi-0x30], ebx; jb short 0x000000000017c1cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c30a: sub [rdi-0x30], ebx; jb short 0x000000000017c31d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c45a: sub [rdi-0x30], ebx; jb short 0x000000000017c46d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017c5aa: sub [rdi-0x30], ebx; jb short 0x000000000017c5bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dd2a: sub [rdi-0x30], ebx; jb short 0x000000000017dd3d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017de7a: sub [rdi-0x30], ebx; jb short 0x000000000017de8d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017dfca: sub [rdi-0x30], ebx; jb short 0x000000000017dfdd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e11a: sub [rdi-0x30], ebx; jb short 0x000000000017e12d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e26a: sub [rdi-0x30], ebx; jb short 0x000000000017e27d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e3ba: sub [rdi-0x30], ebx; jb short 0x000000000017e3cd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e50a: sub [rdi-0x30], ebx; jb short 0x000000000017e51d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e658: sub [rdi-0x30], ebx; jb short 0x000000000017e670; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e7aa: sub [rdi-0x30], ebx; jb short 0x000000000017e7bd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017e8fa: sub [rdi-0x30], ebx; jb short 0x000000000017e90d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ea4a: sub [rdi-0x30], ebx; jb short 0x000000000017ea5d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017eb9a: sub [rdi-0x30], ebx; jb short 0x000000000017ebad; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ecea: sub [rdi-0x30], ebx; jb short 0x000000000017ecfd; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ee3a: sub [rdi-0x30], ebx; jb short 0x000000000017ee4d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000017ef8a: sub [rdi-0x30], ebx; jb short 0x000000000017ef9d; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; notrack jmp r9; 
0x0000000005f723: sub [rdi-0xb170003], esp; outsd dx, [rsi]; or eax, 0x9235e900; cld; jmp qword ptr [rsi+0x2e]; 
0x000000001af232: sub [rdi], bh; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a72f3: sub [rdi], bh; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x0000000016ce6c: sub [rdi], cl; adc [rdi+0x18], eax; ret; 
0x0000000012660c: sub [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000126594: sub [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000032724: sub [rdi], dh; add [rcx-0x77], cl; ret far; 
0x00000000065fc2: sub [rdi], dl; add al, ch; xchg [rsi], bh; std; jmp qword ptr [rsi+0xf]; 
0x0000000013485e: sub [rdi], eax; add [rax-0x73], cl; adc eax, 0x728c7; cmove rax, rdx; ret; 
0x0000000013485f: sub [rdi], eax; add [rax-0x73], cl; adc eax, 0x728c7; cmove rax, rdx; ret; 
0x0000000012648c: sub [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000f0555: sub [rdi], ecx; test [rax+rax-0x76b80000], dh; ret far; 
0x000000001afba3: sub [rdi], edi; ret; 
0x0000000017b3fe: sub [rdi], esp; notrack jmp r9; 
0x000000001168ac: sub [rdx+0x1], bh; call qword ptr [rbp+0x40]; 
0x00000000116c04: sub [rdx+0x2], bh; call qword ptr [rbp+0x40]; 
0x00000000116b9c: sub [rdx+0x5], bh; call qword ptr [rbp+0x40]; 
0x000000000c537a: sub [rdx], al; add [rax], al; ret; 
0x0000000019bba0: sub [rdx], eax; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x00000000099ffc: sub [rip+0x4be80014], bh; idiv esi; jmp qword ptr [rsi+0x66]; 
0x000000000c0373: sub [rip+0x63490011], ebp; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000010d2b9: sub [rip-0x137cb800], cl; or al, ch; mov ecx, ebx; bnd jmp qword ptr [rsi+0x66]; 
0x00000000193e67: sub [rip-0x76b30000], ecx; ret far; 
0x0000000017b2eb: sub [rsi-0x1], cl; jb short 0x000000000017b2f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b39b: sub [rsi-0x1], cl; jb short 0x000000000017b3a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dccb: sub [rsi-0x1], cl; jb short 0x000000000017dcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017dd7b: sub [rsi-0x1], cl; jb short 0x000000000017dd87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b43b: sub [rsi-0x2], cl; jb short 0x000000000017b447; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b4eb: sub [rsi-0x2], cl; jb short 0x000000000017b4f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017de1b: sub [rsi-0x2], cl; jb short 0x000000000017de27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017decb: sub [rsi-0x2], cl; jb short 0x000000000017ded7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b58b: sub [rsi-0x3], cl; jb short 0x000000000017b597; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b63b: sub [rsi-0x3], cl; jb short 0x000000000017b647; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017df6b: sub [rsi-0x3], cl; jb short 0x000000000017df77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e01b: sub [rsi-0x3], cl; jb short 0x000000000017e027; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b6db: sub [rsi-0x4], cl; jb short 0x000000000017b6e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b78b: sub [rsi-0x4], cl; jb short 0x000000000017b797; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e0bb: sub [rsi-0x4], cl; jb short 0x000000000017e0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e16b: sub [rsi-0x4], cl; jb short 0x000000000017e177; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b82b: sub [rsi-0x5], cl; jb short 0x000000000017b837; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b8db: sub [rsi-0x5], cl; jb short 0x000000000017b8e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e20b: sub [rsi-0x5], cl; jb short 0x000000000017e217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e2bb: sub [rsi-0x5], cl; jb short 0x000000000017e2c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017b97b: sub [rsi-0x6], cl; jb short 0x000000000017b987; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ba2b: sub [rsi-0x6], cl; jb short 0x000000000017ba37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e35b: sub [rsi-0x6], cl; jb short 0x000000000017e367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e40b: sub [rsi-0x6], cl; jb short 0x000000000017e417; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000167b84: sub [rsi-0x72b30001], bl; add eax, 0xffff9e81; xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x0000000017bacb: sub [rsi-0x7], cl; jb short 0x000000000017bad7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bb7b: sub [rsi-0x7], cl; jb short 0x000000000017bb87; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e4ab: sub [rsi-0x7], cl; jb short 0x000000000017e4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e55b: sub [rsi-0x7], cl; jb short 0x000000000017e567; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bc1b: sub [rsi-0x8], cl; jb short 0x000000000017bc27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bccb: sub [rsi-0x8], cl; jb short 0x000000000017bcd7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e5fb: sub [rsi-0x8], cl; jb short 0x000000000017e607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e6ab: sub [rsi-0x8], cl; jb short 0x000000000017e6b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bd6b: sub [rsi-0x9], cl; jb short 0x000000000017bd77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017be1b: sub [rsi-0x9], cl; jb short 0x000000000017be27; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e74b: sub [rsi-0x9], cl; jb short 0x000000000017e757; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e7fb: sub [rsi-0x9], cl; jb short 0x000000000017e807; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bebb: sub [rsi-0xa], cl; jb short 0x000000000017bec7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017bf6b: sub [rsi-0xa], cl; jb short 0x000000000017bf77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e89b: sub [rsi-0xa], cl; jb short 0x000000000017e8a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e94b: sub [rsi-0xa], cl; jb short 0x000000000017e957; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c00b: sub [rsi-0xb], cl; jb short 0x000000000017c017; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c0bb: sub [rsi-0xb], cl; jb short 0x000000000017c0c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017e9eb: sub [rsi-0xb], cl; jb short 0x000000000017e9f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ea9b: sub [rsi-0xb], cl; jb short 0x000000000017eaa7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c15b: sub [rsi-0xc], cl; jb short 0x000000000017c167; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c20b: sub [rsi-0xc], cl; jb short 0x000000000017c217; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eb3b: sub [rsi-0xc], cl; jb short 0x000000000017eb47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ebeb: sub [rsi-0xc], cl; jb short 0x000000000017ebf7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c2ab: sub [rsi-0xd], cl; jb short 0x000000000017c2b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c35b: sub [rsi-0xd], cl; jb short 0x000000000017c367; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ec8b: sub [rsi-0xd], cl; jb short 0x000000000017ec97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ed3b: sub [rsi-0xd], cl; jb short 0x000000000017ed47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c3fb: sub [rsi-0xe], cl; jb short 0x000000000017c407; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c4ab: sub [rsi-0xe], cl; jb short 0x000000000017c4b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017eddb: sub [rsi-0xe], cl; jb short 0x000000000017ede7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ee8b: sub [rsi-0xe], cl; jb short 0x000000000017ee97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c54b: sub [rsi-0xf], cl; jb short 0x000000000017c557; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017c5fb: sub [rsi-0xf], cl; jb short 0x000000000017c607; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017ef2b: sub [rsi-0xf], cl; jb short 0x000000000017ef37; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x0000000017efdb: sub [rsi-0xf], cl; jb short 0x000000000017efe7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; notrack jmp r9; 
0x00000000095ce0: sub [rsi], al; add [rax], al; cmove eax, edx; ret; 
0x000000001809c7: sub [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c0273: sub [rsi], ebp; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000d9047: sub [rsp+0x10], esp; movd xmm0, eax; movq xmm3, xmm0; movaps [rsp], xmm3; call rbx; 
0x0000000016745d: sub [rsp+0x20], eax; call qword ptr [rax+0x28]; 
0x000000001687f2: sub [rsp+0x20], edx; push 0x0; push 0x3c; lea r9, [rsp+0x2a]; call qword ptr [rax]; 
0x000000001685aa: sub [rsp+0x30], edx; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000174ea1: sub [rsp+0x40], eax; test rax, rax; je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000000a0739: sub [rsp+0x50], eax; mov [rsp+0x30], eax; mov eax, 0xde; syscall; 
0x0000000016d263: sub [rsp+0x60], ecx; movups [rsp+0x18], xmm0; call r8; 
0x0000000016d25a: sub [rsp+0x70], eax; pxor xmm0, xmm0; movaps [rsp+0x60], xmm1; movups [rsp+0x18], xmm0; call r8; 
0x000000000f0551: sub [rsp+rsi*2+0x3c], dh; sub [rdi], ecx; test [rax+rax-0x76b80000], dh; ret far; 
0x0000000015fccd: sub [rsp], eax; call qword ptr [rax+0x8]; 
0x00000000119f85: sub [rsp], eax; mov [rsp+0x23], al; mov eax, ebx; movups [rsp+0x11], xmm4; syscall; 
0x000000000d9054: sub [rsp], ebx; call rbx; 
0x00000000078032: sub ah, [rbp+0x39480000]; ret; 
0x000000001b5b55: sub ah, [rdx-0x4e]; and gs:[rdi], ah; ret; 
0x00000000173e8c: sub ah, bh; call qword ptr [rax-0x5e1f00d]; 
0x00000000127c07: sub al, 0x0; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000127a5a: sub al, 0x0; add [rax], al; syscall; 
0x000000001161a7: sub al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000116148: sub al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000c0447: sub al, 0x11; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c04b8: sub al, 0x11; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c75e6: sub al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000ba7c0: sub al, 0x1; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x00000000127055: sub al, 0x1; add [rax], al; syscall; 
0x000000000d7b51: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x00000000090629: sub al, 0x48; add esp, 0x38; ret; 
0x00000000029e13: sub al, 0x4c; mov esi, esp; mov edi, ebp; call r15; 
0x000000000fa011: sub al, 0x5b; pop rbp; pop r12; ret; 
0x000000001806c7: sub al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000d7b54: sub al, 0x75; pop rax; ret; 
0x000000000565eb: sub al, 0xc7; add al, [rax]; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000013f364: sub al, 0xe; add al, ch; adc al, 0x20; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000014c062: sub al, 0xf3; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000126164: sub al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000173a43: sub al, 0xfc; jmp qword ptr [rsi+0x2e]; 
0x00000000163a62: sub al, 0xfd; jmp qword ptr [rsi+0x66]; 
0x0000000015de2b: sub al, 0xff; adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x000000000d7ab5: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b15: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000d7bb0; ret; 
0x000000000d7b65: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7a55: sub al, [rax+0x15740fe2]; mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000d7bb0; ret; 
0x0000000004078a: sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x000000001276a1: sub al, [rax]; add [rax], al; syscall; 
0x00000000091222: sub al, [rbp+0x2e66ffff]; nop [rax+rax]; neg eax; ret; 
0x0000000008ba2a: sub al, [rcx]; add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [r13+0x90]; 
0x000000001b0892: sub al, [rdx]; add [rax], al; ret; 
0x00000000046032: sub al, [rdx]; or [rax], al; pop rbx; ret; 
0x00000000180847: sub al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000fdb9f: sub al, ch; ret far; 
0x0000000015b7cc: sub al, ch; sahf; ret far; 
0x00000000052b52: sub bh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000119a7d: sub bh, [rax+0x48]; syscall; 
0x000000000e575d: sub bh, [rax+0xe3]; syscall; 
0x00000000091c22: sub bh, [rbx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x00000000081362: sub bh, [rdi-0x6]; jmp qword ptr [rsi+0x2e]; 
0x00000000035dbc: sub bh, bh; call qword ptr [rax-0x5e1f00d]; 
0x00000000163cbb: sub bh, ch; jmp qword ptr [rsi-0x70]; 
0x00000000153cbc: sub bh, dh; call qword ptr [rax-0x5e1f00d]; 
0x00000000106842: sub bl, [rbx]; call far fword ptr [rax+0x5a]; 
0x0000000016d0a6: sub bl, al; nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x00000000136163: sub byte ptr [rax+0x48000000], 0x39; enter 0x577, 0xe9; out dx, al; add cl, bh; call qword ptr [rax-0x18]; 
0x00000000157048: sub byte ptr [rax], 0x0; add [rax], al; add rsp, 0x8; ret; 
0x000000000c5379: sub byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000073cd9: sub byte ptr [rsi-0xf], 0xff; jmp qword ptr [rsi-0x70]; 
0x000000001aec9b: sub ch, [rdi+0x16]; vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; ret; 
0x0000000013590f: sub ch, bh; jmp qword ptr [rsi+0xf]; 
0x000000001760cc: sub cl, 0xee; xchg edi, eax; bnd jmp qword ptr [rsi+0xf]; 
0x00000000062640: sub cl, [rax-0x73]; or eax, 0x16e040; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000001644df: sub cl, [rax-0x75]; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x000000000f99cf: sub cl, [rax-0x7d]; ret; 
0x000000000aa9a3: sub cl, [rcx+rcx*4-0x40]; ret; 
0x000000001263b4: sub cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000019a2a7: sub cl, [rsi+rdx-0x1]; or eax, ecx; ret; 
0x00000000041597: sub cl, al; ret; 
0x0000000010dcf2: sub cl, ch; ret far; 
0x000000000503e5: sub cl, ch; ret; 
0x000000000733c0: sub dh, al; add [rcx-0x7d], cl; ret; 
0x000000000601b5: sub dh, al; add [rip-0x13e17], ch; jmp qword ptr [rsi-0x70]; 
0x0000000005ed85: sub dh, al; add [rip-0x6f117], ch; jmp qword ptr [rsi-0x70]; 
0x000000000f4107: sub dh, al; or [rcx], bl; mov eax, 0x1; ret; 
0x000000000896f2: sub dh, al; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000076d6c: sub dl, 0xff; dec dword ptr [rax+0x1]; fimul st, word ptr [rax-0x77]; ret far; 
0x0000000011e939: sub dl, [rax]; add [rbx+0x3f7f01f8], al; pop rbp; ret; 
0x00000000041523: sub dl, al; movq xmm1, rsi; movsd [rdx], xmm1; ret; 
0x0000000004149c: sub dl, al; ret; 
0x0000000009991c: sub dword ptr [r8+0x4], 0x1; je short 0x00000000000998ce; mov eax, 0x83; ret; 
0x0000000015d5ee: sub dword ptr [rax+0x1000022], 0x48; mov edi, ebp; call qword ptr [rax+0x18]; 
0x0000000009991d: sub dword ptr [rax+0x4], 0x1; je short 0x00000000000998ce; mov eax, 0x83; ret; 
0x0000000008ca4f: sub dword ptr [rax+rax-0x76b80000], 0xffffffea; mov rsi, r12; mov rdi, rbx; call qword ptr [r14+0x78]; 
0x000000001af2fe: sub dword ptr [rbp-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x000000001b2f32: sub dword ptr [rcx+0xf000003], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000012648b: sub dword ptr [rcx], 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009966f: sub dword ptr [rdi+0x4], 0x1; je 0x00000000000995b8; xor eax, eax; ret; 
0x00000000180a89: sub dword ptr [rdx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180789: sub dword ptr [rip+0x63490006], 0x14; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000007378d: sub dword ptr [rsi+0xb], 0x0; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x00000000193d21: sub dword ptr [rsi+0xe], 0x0; add [rcx+0x29], cl; ret far; 
0x000000000c0e8a: sub eax, 0x10; jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x000000000c26da: sub eax, 0x10; jb 0x00000000000c1b19; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x0000000018d2c2: sub eax, 0x10; lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x000000000c06b9: sub eax, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c1ddd: sub eax, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x0000000010b1e6: sub eax, 0x10dc65; add rax, fs:[0x0]; mov r8, rax; add r9, r13; call r15; 
0x000000000c06dc: sub eax, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x000000000c1e00: sub eax, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000a0d1c: sub eax, 0x11; shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x000000000c0701: sub eax, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c1e25: sub eax, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c071f: sub eax, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c0d90; ret; 
0x000000000c1e53: sub eax, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c073f: sub eax, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c1e83: sub eax, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c0762: sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c1eb6: sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c0781: sub eax, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c1ee5: sub eax, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c07a1: sub eax, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c1f15: sub eax, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c07c1: sub eax, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c1f45: sub eax, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c07e4: sub eax, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x000000000c1f78: sub eax, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x00000000165b43: sub eax, 0x1; bswap eax; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x00000000162d9b: sub eax, 0x1; bswap eax; mov [rdi+0xa8], eax; mov eax, 0x1; ret; 
0x0000000016645a: sub eax, 0x1; bswap eax; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000018d4b8: sub eax, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x000000000c04d3: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c0d90; ret; 
0x000000000c1bb6: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x0000000019f4e9: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0201: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0629: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b37e1: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000019f700: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0434: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0854: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b3a00: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x00000000035e14: sub eax, 0x1; mov [rdx+0x8], eax; pop rbx; ret; 
0x000000001532ff: sub eax, 0x1; pop r12; pop r13; ret; 
0x0000000014b560: sub eax, 0x1; pop rbx; pop rbp; pop r12; ret; 
0x0000000005469b: sub eax, 0x1; ret; 
0x000000000c0819: sub eax, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c1fad: sub eax, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c0847: sub eax, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c0d90; ret; 
0x000000000c1fdb: sub eax, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c0877: sub eax, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c200b: sub eax, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c08a3: sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c2037: sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c08d3: sub eax, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c2067: sub eax, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c0903: sub eax, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c2097: sub eax, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x0000000019fa1d: sub eax, 0x20; jb 0x000000000019f635; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x000000001b0be3: sub eax, 0x20; jb 0x00000000001b0785; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x000000001b2da3: sub eax, 0x20; jb 0x00000000001b2b35; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001b3d53: sub eax, 0x20; jb 0x00000000001b3935; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000000c0933: sub eax, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c20c7: sub eax, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x0000000009d534: sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000018d4da: sub eax, 0x2; lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x000000000c04f7: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000000c1bdb: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x0000000019f697: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03cb: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b07eb: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x000000001b3997: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x0000000018d500: sub eax, 0x3; lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x000000000c051a: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c1bfe: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x0000000019f6bb: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03ef: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b080f: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x000000001b39bb: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x00000000042d07: sub eax, 0x40c48348; pop rbx; ret; 
0x000000000f4133: sub eax, 0x40c6ef75; or [rsi], dl; mov eax, 0x1; ret; 
0x000000001afb52: sub eax, 0x40fa8348; ja short 0x00000000001afbc0; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x00000000127924: sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000000a94cf: sub eax, 0x480000b4; cmove eax, edx; ret; 
0x000000000a78f0: sub eax, 0x487b8b48; mov rsi, r14; call rax; 
0x0000000018d518: sub eax, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x000000000c0535: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000000c1c19: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x0000000019f6d5: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0409: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0829: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x000000001b39d5: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x00000000132ab2: sub eax, 0x507a8b48; mov rsi, rdx; call rax; 
0x0000000018d53e: sub eax, 0x5; lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x000000000c0558: sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c0d90; ret; 
0x000000000c1c3c: sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x0000000018054e: sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c02a2: sub eax, 0x63490011; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c03a7: sub eax, 0x634b0011; or al, 0x83; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000018d560: sub eax, 0x6; lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x000000000c057d: sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c1c61: sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x0000000018d57e: sub eax, 0x7; lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x000000000c059b: sub eax, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c1c7f: sub eax, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x00000000041803: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000078933: sub eax, 0x83000000; ret; 
0x0000000018d25a: sub eax, 0x8; lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x000000000c05b7: sub eax, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x000000000c1c9b: sub eax, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x000000000ea4af: sub eax, 0x8bfffa66; and al, 0x10; add rsp, 0x28; ret; 
0x0000000018d5a0: sub eax, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x000000000c05da: sub eax, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000000c1cbe: sub eax, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x0000000018d5c0: sub eax, 0xa; lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x000000000c05ff: sub eax, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c1ce3: sub eax, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x0000000009958f: sub eax, 0xb8000003; add [rax], eax; add [rax], al; ret; 
0x0000000011426a: sub eax, 0xb8ca8941; add eax, [rcx]; add [rax], al; syscall; 
0x0000000016572f: sub eax, 0xb9e90007; push rcx; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000018d5e0: sub eax, 0xb; lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x000000000c061d: sub eax, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c0d90; ret; 
0x000000000c1d11: sub eax, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x0000000019998f: sub eax, 0xc5000001; std; xlat [rbx]; ret; 
0x000000001760dc: sub eax, 0xc764000a; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000001360c4: sub eax, 0xc764000e; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000018d600: sub eax, 0xc; lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x000000000c063d: sub eax, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c1d31: sub eax, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x00000000155b76: sub eax, 0xccb5d; mov byte ptr [rip+0xccb5e], 0x0; movups [rip+0xcdb5f], xmm4; call rbx; 
0x00000000155b26: sub eax, 0xcdbed; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155b18: sub eax, 0xcec03; mov [rip+0xcdbec], r12; mov [rip+0xcdbed], rbp; mov byte ptr [rip+0xcdbee], 0x0; call rbx; 
0x00000000155acf: sub eax, 0xcec84; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155ac1: sub eax, 0xcfc9a; mov [rip+0xcec83], r12; mov [rip+0xcec84], rbp; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000155a78: sub eax, 0xcfd1b; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a6a: sub eax, 0xd0d31; mov [rip+0xcfd1a], r12; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x00000000155a21: sub eax, 0xd0db2; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x00000000155a13: sub eax, 0xd1dc8; mov [rip+0xd0db1], r12; mov [rip+0xd0db2], rbp; mov byte ptr [rip+0xd0db3], 0x0; call rbx; 
0x000000001260b4: sub eax, 0xd8f7000f; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000018d622: sub eax, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x000000000c065f: sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c1d53: sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x000000001760a1: sub eax, 0xe8ffffff; jbe short 0x00000000001760ae; cld; jmp qword ptr [rsi+0xf]; 
0x0000000018d642: sub eax, 0xe; lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x000000000c067f: sub eax, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c1d83: sub eax, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x0000000018d662: sub eax, 0xf; lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x000000000c069f: sub eax, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c1db3: sub eax, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x0000000005ed88: sub eax, 0xfff90ee9; jmp qword ptr [rsi-0x70]; 
0x000000000a2e78: sub eax, 0xfff93de9; jmp qword ptr [rsi-0x70]; 
0x000000000601b8: sub eax, 0xfffec1e9; jmp qword ptr [rsi-0x70]; 
0x00000000199fa5: sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x000000001a15ba: sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001a79a5: sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x000000001ae5da: sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000000b56bf: sub eax, 0xffff; ret; 
0x00000000168b12: sub eax, 0xffffff80; pop rbx; ret; 
0x00000000147f34: sub eax, 0xffffffe6; out 0xfe, eax; jmp qword ptr [rsi+0xf]; 
0x000000000420ee: sub eax, [0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x000000000426b6: sub eax, [0x28]; jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x00000000046806: sub eax, [0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046853: sub eax, [0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x00000000050ce7: sub eax, [0x28]; jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x000000000562e3: sub eax, [0x28]; jne short 0x0000000000056365; leave; ret; 
0x00000000089fdf: sub eax, [0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090647: sub eax, [0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090d6d: sub eax, [0x28]; jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x000000000975ab: sub eax, [0x28]; jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x000000000a0c9b: sub eax, [0x28]; jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x0000000011a175: sub eax, [0x28]; jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011ab10: sub eax, [0x28]; jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011e651: sub eax, [0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e72a: sub eax, [0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210b6: sub eax, [0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121176: sub eax, [0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121354: sub eax, [0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x0000000012157d: sub eax, [0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x0000000012179a: sub eax, [0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa8: sub eax, [0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x00000000132591: sub eax, [0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000149c73: sub eax, [0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000015d304: sub eax, [0x28]; jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000016733c: sub eax, [0x28]; jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x000000001690b4: sub eax, [0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169124: sub eax, [0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169194: sub eax, [0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f5: sub eax, [0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169259: sub eax, [0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c4: sub eax, [0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169347: sub eax, [0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698a5: sub eax, [0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698ea: sub eax, [0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3bf: sub eax, [0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x00000000130f8b: sub eax, [rax]; add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000130f8a: sub eax, [rax]; add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000001275d1: sub eax, [rax]; add [rax], al; syscall; 
0x0000000003ab83: sub eax, [rbx+0x8]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010ff0b: sub eax, [rbx-0x6af0fd05]; ret; 
0x00000000073370: sub eax, [rcx+0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x000000000c51b0: sub eax, [rcx+r8*4]; je short 0x00000000000c5198; ret; 
0x000000000c51b1: sub eax, [rcx+rax*4]; je short 0x00000000000c5198; ret; 
0x000000000c55ea: sub eax, [rcx]; add [rax-0x73], cl; adc eax, 0x12e5c; cmovne rax, rdx; ret; 
0x00000000127f8e: sub eax, [rcx]; add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x00000000127f44: sub eax, [rcx]; add [rax], al; syscall; 
0x0000000008fb64: sub eax, [rdi+0x18]; ret; 
0x000000000892bd: sub eax, [rdi+0x20]; ret; 
0x0000000012df49: sub eax, [rdi+0x38]; cmp rax, rsi; jb short 0x000000000012df60; mov eax, 0x1; ret; 
0x0000000008918d: sub eax, [rdi+0x38]; ret; 
0x000000000c520e: sub eax, [rdi+r8*4]; je short 0x00000000000c51f0; ret; 
0x000000000c520f: sub eax, [rdi+rax*4]; je short 0x00000000000c51f0; ret; 
0x00000000084d5b: sub eax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000000892aa: sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000008917a: sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x0000000008f1e7: sub eax, [rsi+0x10]; ret; 
0x00000000144863: sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x000000001a2d07: sub eax, ecx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000001b4125: sub eax, ecx; cmp rsi, rax; ja 0x00000000001b3f27; mov eax, esi; ret; 
0x000000001b54c8: sub eax, ecx; cmp rsi, rax; ja 0x00000000001b5287; mov eax, esi; ret; 
0x0000000019a033: sub eax, ecx; je short 0x000000000019a03c; sbb eax, eax; or eax, 0x1; ret; 
0x000000001a7a33: sub eax, ecx; je short 0x00000000001a7a3c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000056635: sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000019a2a0: sub eax, ecx; movzx ecx, byte ptr [rdi+rdx-0x1]; sub cl, [rsi+rdx-0x1]; or eax, ecx; ret; 
0x000000000b2dcc: sub eax, ecx; ret; 
0x00000000084549: sub eax, ecx; sar rax, 0x2; sub eax, 0x1; ret; 
0x0000000008e959: sub eax, ecx; sub eax, 0x1; ret; 
0x00000000198dff: sub eax, ecx; vzeroupper; ret; 
0x000000001a76ec: sub eax, ecx; xtest; je short 0x00000000001a76f7; vzeroall; ret; 
0x000000000bab69: sub eax, edi; ret; 
0x000000000d85e9: sub eax, edi; shr rax, 0x2; ret; 
0x00000000087ccc: sub eax, edx; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000923e0: sub eax, edx; mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x000000000b56d1: sub eax, edx; mov edx, eax; shr rax, 0x20; or eax, edx; ret; 
0x000000000a7a22: sub eax, edx; mov rdx, [rdx+0x8]; test rdx, rdx; jne short 0x00000000000a7a20; ret; 
0x000000000d2a54: sub eax, edx; pop r12; pop r13; pop r14; ret; 
0x0000000008b641: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000015fdf8: sub eax, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000001a5d27: sub eax, edx; ret; 
0x000000001a5d37: sub eax, edx; ret; 
0x000000000845f9: sub eax, edx; ret; 
0x000000000417e3: sub eax, edx; shr eax, 0x1f; ret; 
0x000000000413e9: sub eax, edx; shr rax, 0x3f; ret; 
0x000000001b0851: sub eax, edx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b39fd: sub eax, edx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x00000000198b02: sub eax, edx; vzeroupper; ret; 
0x000000001a8e66: sub eax, edx; xtest; je short 0x00000000001a8e71; vzeroall; ret; 
0x000000001ab892: sub eax, edx; xtest; je short 0x00000000001ab89d; vzeroall; ret; 
0x0000000015e2c3: sub eax, esp; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x000000000a9961: sub ebp, [rdi+0xf]; add [rax-0x73], cl; add eax, 0xf6f94; cmove rax, rdx; ret; 
0x00000000156508: sub ebp, eax; loop 0x0000000000156493; bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000014c05f: sub ebp, eax; mov ebp, [rbx+rsi*8]; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000008f52b: sub ebp, eax; sbb [rax], al; add dword ptr [rip+0x18c51e], 0x1; pop rbx; ret; 
0x000000001358df: sub ebp, edi; jmp qword ptr [rsi+0xf]; 
0x0000000005ff1d: sub ebx, [rax]; add [rbp+rcx*4+0x5], cl; ret; 
0x000000000e6dcb: sub ebx, [rbx+0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000005f964: sub ebx, [rbx+0x5d]; pop r12; pop r13; ret; 
0x000000000e5d18: sub ebx, [rbx+0x5d]; pop r12; ret; 
0x00000000142dd6: sub ebx, [rbx+0x5d]; ret; 
0x00000000153ba1: sub ebx, [rcx]; add al, [rax]; xor edi, edi; call qword ptr [rsp+0x70]; 
0x0000000011b0e9: sub ebx, ebp; sldt [rax+0x2e740038]; mov eax, 0x71; syscall; 
0x00000000054fc0: sub ecx, 0x1; jae short 0x0000000000054fb8; mov rax, rdx; ret; 
0x00000000154dd1: sub ecx, 0x1; jne short 0x0000000000154d58; ret; 
0x0000000019db74: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000019db64: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x00000000172740: sub ecx, 0x5; cmp cx, 0x3; jbe short 0x0000000000172750; ret; 
0x0000000019db54: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000019db44: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x00000000090786: sub ecx, [0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000143234: sub ecx, [0x28]; jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000174a22: sub ecx, [rax+0x10]; cmp rcx, [rax+0x28]; jae short 0x0000000000174a10; mov eax, 0x1; ret; 
0x00000000112a68: sub ecx, [rax-0x77]; or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000133edb: sub ecx, [rax-0x7d]; ret; 
0x000000000c0561: sub ecx, [rax]; add [rax], al; ret; 
0x00000000120e9c: sub ecx, [rcx+rcx*4-0x1a]; mov rdi, r14; call r13; 
0x000000001262d4: sub ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000126234: sub ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000149657: sub ecx, ecx; cmp rcx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x00000000149610: sub ecx, ecx; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x000000000b7d68: sub ecx, ecx; lea r10, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5af8: sub ecx, ecx; lea r10, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b3148: sub ecx, ecx; lea r10, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a28: sub ecx, ecx; lea r10, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bd8: sub ecx, ecx; lea r10, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a58: sub ecx, ecx; lea r10, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796a8: sub ecx, ecx; lea r10, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000178418: sub ecx, ecx; lea r10, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000112ef4: sub ecx, edi; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000019a25b: sub ecx, edi; or eax, ecx; ret; 
0x0000000019a291: sub ecx, edi; or rax, rcx; cmovne eax, edx; ret; 
0x000000001af28a: sub ecx, edi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6cd3: sub ecx, edi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000008778e: sub ecx, edx; cmp rax, rcx; jbe 0x0000000000087910; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000088f9e: sub ecx, edx; cmp rax, rcx; jbe 0x0000000000089110; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008bf6a: sub ecx, edx; cmp rax, rcx; jbe 0x000000000008c060; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000008e463: sub ecx, edx; cmp rax, rcx; jbe 0x000000000008e510; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f21d: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000007f268; mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x00000000081806: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008184a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x000000000838e9: sub ecx, edx; cmp rax, rcx; jbe short 0x0000000000083928; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008445e: sub ecx, edx; cmp rax, rcx; jbe short 0x0000000000084490; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008a0fa: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000008c0ca: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008c108; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000008dd53: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008ddc0; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008de09: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008de38; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008e869: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000008e8a0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000061b50: sub ecx, edx; movzx edx, byte ptr [r14+rcx]; mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x0000000004102f: sub ecx, edx; not eax; and eax, ecx; ret; 
0x0000000004107c: sub ecx, edx; shr eax, 0x1f; shr ecx, 0x10; or eax, ecx; ret; 
0x000000001a6c7a: sub ecx, esi; inc rsi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000015fd4f: sub ecx, esi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x000000000d7e6c: sub edi, 0x10; add rax, rdi; ret; 
0x000000000463ce: sub edi, 0x1; jns short 0x0000000000046391; xor eax, eax; ret; 
0x0000000017dca3: sub edi, 0x20; lea r11, [rip+0x65463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b2c3: sub edi, 0x20; lea r11, [rip+0x67c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a28ab: sub edi, 0x3f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019984d: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000019d71d: sub edi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000017dbb2: sub edi, 0x40; lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf3: sub edi, 0x40; lea r11, [rip+0x65613]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d2: sub edi, 0x40; lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b113: sub edi, 0x40; lea r11, [rip+0x67e33]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a28e5: sub edi, 0x5f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000199875: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000019d745: sub edi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000001a28c5: sub edi, 0x7f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000199865: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000546f4: sub edi, 0x8; cmp rdi, 0xfffffffffffffff8; jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x00000000199631: sub edi, 0xffffffbf; add rax, rdi; vzeroupper; ret; 
0x00000000199685: sub edi, 0xffffffdf; add rax, rdi; vzeroupper; ret; 
0x00000000141284: sub edi, [rax+0x3]; mov edi, [rbp-0x60]; syscall; 
0x00000000119b0c: sub edi, [rax+0x48]; syscall; 
0x00000000125a95: sub edi, [rdx+0xf]; add [rax], al; ret; 
0x0000000008a5c9: sub edi, ecx; cmp rax, rdi; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000019dc83: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000019dd5c: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000019dd08: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000019d9b4: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000019d9c4: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000019d9d4: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000019dcb9: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000019d9a4: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000001b2254: sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b2264: sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b2274: sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b2284: sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x00000000184a1f: sub edi, edx; lea r11, [rip+0x5eda8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181eeb: sub edi, edx; lea r11, [rip+0x613dc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b4065: sub edi, edx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b4033: sub edi, edx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40ec: sub edi, edx; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40b1: sub edi, edx; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b4ac4: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad4: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae4: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab4: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000001b53a1: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548c: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5431: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e2: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000b5114: sub edx, 0x10; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x30]; ret; 
0x00000000054119: sub edx, 0x1; jne short 0x0000000000054100; mov eax, 0x1; ret; 
0x00000000054341: sub edx, 0x1; jne short 0x0000000000054328; mov eax, 0x1; ret; 
0x000000000b50f4: sub edx, 0x20; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b50d4: sub edx, 0x30; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x10]; ret; 
0x0000000012a0d0: sub edx, 0x30; xor eax, eax; cmp edx, 0x9; setbe al; ret; 
0x000000000b50c4: sub edx, 0x40; add rdx, rax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000001802e1: sub edx, 0x40; lea r11, [rip+0x62e25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001af8a7: sub edx, 0x80; add rdx, rax; jl 0x00000000001af990; add rax, rdi; ret; 
0x000000001803c5: sub edx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000000a6bb3: sub edx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x000000001ae864: sub edx, 0xffffff80; cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b5f24: sub edx, 0xffffff80; cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b58f4: sub edx, 0xffffffe0; cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b63e4: sub edx, 0xffffffe0; cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000113c9c: sub edx, [0x28]; jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x00000000114879: sub edx, [0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114eef: sub edx, [0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x00000000115030: sub edx, [0x28]; jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e2e: sub edx, [0x28]; jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x00000000119610: sub edx, [0x28]; jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x00000000149fb4: sub edx, [0x28]; jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0c4: sub edx, [0x28]; jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a24f: sub edx, [0x28]; jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000015dd9d: sub edx, [0x28]; jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x000000001642bc: sub edx, [0x28]; jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x00000000042401: sub edx, [0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x0000000004293d: sub edx, [0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429c0: sub edx, [0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042acb: sub edx, [0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042cff: sub edx, [0x28]; jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x0000000004300e: sub edx, [0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x0000000004349e: sub edx, [0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f1c: sub edx, [0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x0000000004600c: sub edx, [0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046281: sub edx, [0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x000000000468a5: sub edx, [0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f2: sub edx, [0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046945: sub edx, [0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046992: sub edx, [0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x00000000051500: sub edx, [0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x0000000005188e: sub edx, [0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd8: sub edx, [0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000005a24c: sub edx, [0x28]; jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a495: sub edx, [0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060751: sub edx, [0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060826: sub edx, [0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608dd: sub edx, [0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609af: sub edx, [0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a71: sub edx, [0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b31: sub edx, [0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c1f: sub edx, [0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf6: sub edx, [0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x0000000006135c: sub edx, [0x28]; jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613de: sub edx, [0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e90: sub edx, [0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621c9: sub edx, [0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a4: sub edx, [0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082c01: sub edx, [0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cbd: sub edx, [0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db6: sub edx, [0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e86: sub edx, [0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f3f: sub edx, [0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x0000000009047e: sub edx, [0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x00000000090621: sub edx, [0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x0000000009075c: sub edx, [0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x0000000009bcb6: sub edx, [0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009cbdc: sub edx, [0x28]; jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009dadb: sub edx, [0x28]; jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009dcf9: sub edx, [0x28]; jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x000000000a02dc: sub edx, [0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d2c0c: sub edx, [0x28]; jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d3649: sub edx, [0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3724: sub edx, [0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8ebc: sub edx, [0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f36: sub edx, [0x28]; jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9c57: sub edx, [0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2ea5: sub edx, [0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5595: sub edx, [0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e610c: sub edx, [0x28]; jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e6198: sub edx, [0x28]; jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e7748: sub edx, [0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec178: sub edx, [0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec208: sub edx, [0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c8: sub edx, [0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec568: sub edx, [0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef5: sub edx, [0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a94: sub edx, [0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e0e: sub edx, [0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000115bb9: sub edx, [0x28]; jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x0000000011610c: sub edx, [0x28]; jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000011971d: sub edx, [0x28]; jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x00000000119a94: sub edx, [0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b23: sub edx, [0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119bdb: sub edx, [0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c79: sub edx, [0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a1e6: sub edx, [0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011b108: sub edx, [0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b198: sub edx, [0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b23f: sub edx, [0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2ff: sub edx, [0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3e7: sub edx, [0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c06d: sub edx, [0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0e6: sub edx, [0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1b8: sub edx, [0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf80: sub edx, [0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d013: sub edx, [0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d097: sub edx, [0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d112: sub edx, [0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011f982: sub edx, [0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000121c32: sub edx, [0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x00000000126540: sub edx, [0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b2e: sub edx, [0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e67: sub edx, [0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x0000000012822e: sub edx, [0x28]; jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x000000001284e4: sub edx, [0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000133d8d: sub edx, [0x28]; jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134be8: sub edx, [0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cec: sub edx, [0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e02: sub edx, [0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134eca: sub edx, [0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c5c: sub edx, [0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d72: sub edx, [0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e3a: sub edx, [0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136241: sub edx, [0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a1: sub edx, [0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x0000000013636a: sub edx, [0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x0000000013644a: sub edx, [0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x0000000013652a: sub edx, [0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d128: sub edx, [0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c5: sub edx, [0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d232: sub edx, [0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000147f82: sub edx, [0x28]; jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fd7: sub edx, [0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x0000000014802a: sub edx, [0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488d9: sub edx, [0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a35f: sub edx, [0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5a8: sub edx, [0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014e57b: sub edx, [0x28]; jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000015fbca: sub edx, [0x28]; jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x0000000016014b: sub edx, [0x28]; jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601e9: sub edx, [0x28]; jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160cdf: sub edx, [0x28]; jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x00000000167dc9: sub edx, [0x28]; jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x0000000016903e: sub edx, [0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x0000000016b42a: sub edx, [0x28]; jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4ba: sub edx, [0x28]; jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b583: sub edx, [0x28]; jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9ea: sub edx, [0x28]; jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba7a: sub edx, [0x28]; jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bc2a: sub edx, [0x28]; jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcba: sub edx, [0x28]; jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca1a: sub edx, [0x28]; jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016caaa: sub edx, [0x28]; jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb3a: sub edx, [0x28]; jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbca: sub edx, [0x28]; jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d290: sub edx, [0x28]; jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d304: sub edx, [0x28]; jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d365: sub edx, [0x28]; jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3d3: sub edx, [0x28]; jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d446: sub edx, [0x28]; jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x0000000017213b: sub edx, [0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172352: sub edx, [0x28]; jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e2: sub edx, [0x28]; jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001739bf: sub edx, [0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a27: sub edx, [0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000001750df: sub edx, [0x28]; jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751d6: sub edx, [0x28]; jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x00000000175371: sub edx, [0x28]; jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x00000000175448: sub edx, [0x28]; jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x00000000176127: sub edx, [0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000178284: sub edx, [0x28]; jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x0000000017830a: sub edx, [0x28]; jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x0000000008f218: sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000008f209: sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000011623b: sub edx, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001bb6e1: sub edx, [rbp-0xa]; call far fword ptr [rbx+0x48]; 
0x000000000a9d81: sub edx, [rcx+0x10]; add [rax-0x73], cl; add eax, 0x1051b4; cmove rax, rdx; ret; 
0x000000000845f2: sub edx, [rcx+0x10]; sar rdx, 0x2; sub eax, edx; ret; 
0x00000000084604: sub edx, [rcx+0x8]; sar rdx, 0x2; sub eax, edx; ret; 
0x000000000d97f4: sub edx, eax; add rdx, [rsp+0x80]; mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x000000000b497d: sub edx, eax; jbe 0x00000000000b4c20; add rax, rdi; add rax, rcx; ret; 
0x000000000b4be4: sub edx, eax; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf4: sub edx, eax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c04: sub edx, eax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c14: sub edx, eax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x00000000160012: sub edx, eax; mov rsi, r13; call qword ptr [r15+0x40]; 
0x00000000160738: sub edx, eax; mov rsi, rbx; call qword ptr [rbp+0x40]; 
0x0000000011a908: sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000016027f: sub edx, ebx; mov rsi, r13; call qword ptr [r14+0x40]; 
0x000000000c387c: sub edx, ecx; lea r11, [rip+0x10fbcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2eec: sub edx, ecx; lea r11, [rip+0x1104df]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c196c: sub edx, ecx; lea r11, [rip+0x11190b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c121c: sub edx, ecx; lea r11, [rip+0x111fcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c029c: sub edx, ecx; lea r11, [rip+0x112dfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbdc: sub edx, ecx; lea r11, [rip+0x11343b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000015ff2e: sub edx, ecx; mov rsi, r13; call qword ptr [r15+0x40]; 
0x000000000852d9: sub edx, esi; call qword ptr [rax+0x70]; 
0x0000000008ccb1: sub edx, esi; call qword ptr [rbp+0x70]; 
0x00000000198798: sub edx, esi; cmp edx, ecx; jle short 0x00000000001987b4; movsxd rax, ecx; ret; 
0x000000000841be: sub edx, esi; cmp r13, rdx; jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x0000000008e14d: sub edx, esi; cmp r13, rdx; jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000d6be2: sub edx, esi; jbe 0x00000000000d6ef0; add rax, rdi; add rax, rcx; ret; 
0x000000000d6e79: sub edx, esi; jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e99: sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb9: sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed9: sub edx, esi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x000000000859d4: sub edx, esi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000008abcd: sub edx, esi; mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x00000000160909: sub edx, esi; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x00000000142b51: sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x0000000011f352: sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001354d8: sub esi, [rcx]; ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x00000000001354f0; ret; 
0x0000000005d8d0: sub esi, eax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000008ca1d: sub esi, eax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000132ad4: sub esi, ecx; jmp qword ptr [rsi+0xf]; 
0x00000000046d3e: sub esi, edi; syscall; 
0x000000001846c1: sub esi, edx; lea r11, [rip+0x5f106]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184541: sub esi, edx; lea r11, [rip+0x5f286]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001843c1: sub esi, edx; lea r11, [rip+0x5f406]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184241: sub esi, edx; lea r11, [rip+0x5f586]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001840c1: sub esi, edx; lea r11, [rip+0x5f706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183f41: sub esi, edx; lea r11, [rip+0x5f886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183dc1: sub esi, edx; lea r11, [rip+0x5fa06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183c41: sub esi, edx; lea r11, [rip+0x5fb86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183ac1: sub esi, edx; lea r11, [rip+0x5fd06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183941: sub esi, edx; lea r11, [rip+0x5fe86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001837c1: sub esi, edx; lea r11, [rip+0x60006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183641: sub esi, edx; lea r11, [rip+0x60186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001834c1: sub esi, edx; lea r11, [rip+0x60306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183341: sub esi, edx; lea r11, [rip+0x60486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001831c1: sub esi, edx; lea r11, [rip+0x60606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183048: sub esi, edx; lea r11, [rip+0x6077f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181bc1: sub esi, edx; lea r11, [rip+0x61706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181a41: sub esi, edx; lea r11, [rip+0x61886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001818c1: sub esi, edx; lea r11, [rip+0x61a06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181741: sub esi, edx; lea r11, [rip+0x61b86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001815c1: sub esi, edx; lea r11, [rip+0x61d06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181441: sub esi, edx; lea r11, [rip+0x61e86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001812c1: sub esi, edx; lea r11, [rip+0x62006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181141: sub esi, edx; lea r11, [rip+0x62186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180fc1: sub esi, edx; lea r11, [rip+0x62306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180e41: sub esi, edx; lea r11, [rip+0x62486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180cc1: sub esi, edx; lea r11, [rip+0x62606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180b41: sub esi, edx; lea r11, [rip+0x62786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001809c1: sub esi, edx; lea r11, [rip+0x62906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180841: sub esi, edx; lea r11, [rip+0x62a86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001806c1: sub esi, edx; lea r11, [rip+0x62c06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180548: sub esi, edx; lea r11, [rip+0x62d7f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000008b801: sub esi, edx; mov [rsp], r8; mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000053993: sub esp, 0x18; mov rsi, rsp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000e56d8: sub esp, 0x8; call rax; 
0x000000001256a7: sub esp, 0x8; call rsi; 
0x00000000090564: sub esp, 0x8; mov rax, [rax+0x348]; mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x00000000174f7c: sub esp, 0x8; push qword ptr [rax]; mov rax, [rip+0xa3f40]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x000000000906b3: sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x000000000a0bc3: sub esp, 0x8; syscall; 
0x00000000155ac9: sub esp, 0xc; add [rax-0x77], cl; sub eax, 0xcec84; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x0000000008b283: sub esp, esi; call qword ptr [rax+0x40]; 
0x000000001162c7: sub r10d, [r8]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000016d0a5: sub r11b, r8b; nop [rax+rax]; endbr64; xor eax, eax; ret; 
0x0000000008b282: sub r12, r14; call qword ptr [rax+0x40]; 
0x000000001358de: sub r13, rdi; jmp qword ptr [rsi+0xf]; 
0x000000000c0e89: sub r8, 0x10; jb 0x00000000000c0439; movdqu [rdi+0x30], xmm7; ret; 
0x000000000c26d9: sub r8, 0x10; jb 0x00000000000c1b19; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x0000000018d2c1: sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x000000000018d810; ret; 
0x000000000c06b8: sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c0d90; ret; 
0x000000000c1ddc: sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000c25e0; ret; 
0x000000000c06db: sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c0d90; ret; 
0x000000000c1dff: sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000c25e0; ret; 
0x000000000c0700: sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c0d90; ret; 
0x000000000c1e24: sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000c25e0; ret; 
0x000000000c071e: sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c0d90; ret; 
0x000000000c1e52: sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000c25e0; ret; 
0x000000000c073e: sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c0d90; ret; 
0x000000000c1e82: sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000c25e0; ret; 
0x000000000c0761: sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c0d90; ret; 
0x000000000c1eb5: sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000c25e0; ret; 
0x000000000c0780: sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c0d90; ret; 
0x000000000c1ee4: sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000c25e0; ret; 
0x000000000c07a0: sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c0d90; ret; 
0x000000000c1f14: sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000c25e0; ret; 
0x000000000c07c0: sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c0d90; ret; 
0x000000000c1f44: sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000c25e0; ret; 
0x000000000c07e3: sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c0d90; ret; 
0x000000000c1f77: sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000c25e0; ret; 
0x0000000018d4b7: sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x000000000018d810; ret; 
0x000000000c04d2: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c0d90; ret; 
0x000000000c1bb5: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000c25e0; ret; 
0x0000000019f4e8: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0200: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0628: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b37e0: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000019f6ff: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0433: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0853: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b39ff: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x000000000c0818: sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c0d90; ret; 
0x000000000c1fac: sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000c25e0; ret; 
0x000000000c0846: sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c0d90; ret; 
0x000000000c1fda: sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000c25e0; ret; 
0x000000000c0876: sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c0d90; ret; 
0x000000000c200a: sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000c25e0; ret; 
0x000000000c08a2: sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c0d90; ret; 
0x000000000c2036: sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000c25e0; ret; 
0x000000000c08d2: sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c0d90; ret; 
0x000000000c2066: sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000c25e0; ret; 
0x000000000c0902: sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c0d90; ret; 
0x000000000c2096: sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000c25e0; ret; 
0x0000000019fa1b: sub r8, 0x20; jb 0x000000000019f635; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x000000001b0be2: sub r8, 0x20; jb 0x00000000001b0785; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x000000001b2da2: sub r8, 0x20; jb 0x00000000001b2b35; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001b3d52: sub r8, 0x20; jb 0x00000000001b3935; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000000c0932: sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c0d90; ret; 
0x000000000c20c6: sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000c25e0; ret; 
0x0000000018d4d9: sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x000000000018d810; ret; 
0x000000000c04f6: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c0d90; ret; 
0x000000000c1bda: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000c25e0; ret; 
0x0000000019f696: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03ca: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b07ea: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b0ac0; ret; 
0x000000001b3996: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001b3c30; ret; 
0x0000000018d4ff: sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x000000000018d810; ret; 
0x000000000c0519: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c0d90; ret; 
0x000000000c1bfd: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000c25e0; ret; 
0x0000000019f6ba: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a03ee: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b080e: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b0ac0; ret; 
0x000000001b39ba: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001b3c30; ret; 
0x0000000018d517: sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x000000000018d810; ret; 
0x000000000c0534: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c0d90; ret; 
0x000000000c1c18: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000c25e0; ret; 
0x0000000019f6d4: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000019f920; vzeroupper; ret; 
0x000000001a0408: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001a0650; vzeroupper; ret; 
0x000000001b0828: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b0ac0; ret; 
0x000000001b39d4: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001b3c30; ret; 
0x0000000018d53d: sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x000000000018d810; ret; 
0x000000000c0557: sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c0d90; ret; 
0x000000000c1c3b: sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000c25e0; ret; 
0x0000000018d55f: sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x000000000018d810; ret; 
0x000000000c057c: sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c0d90; ret; 
0x000000000c1c60: sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000c25e0; ret; 
0x0000000018d57d: sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x000000000018d810; ret; 
0x000000000c059a: sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c0d90; ret; 
0x000000000c1c7e: sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000c25e0; ret; 
0x0000000018d259: sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x000000000018d810; ret; 
0x000000000c05b6: sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c0d90; ret; 
0x000000000c1c9a: sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000c25e0; ret; 
0x0000000018d59f: sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x000000000018d810; ret; 
0x000000000c05d9: sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c0d90; ret; 
0x000000000c1cbd: sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000c25e0; ret; 
0x0000000018d5bf: sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x000000000018d810; ret; 
0x000000000c05fe: sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c0d90; ret; 
0x000000000c1ce2: sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000c25e0; ret; 
0x0000000018d5df: sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x000000000018d810; ret; 
0x000000000c061c: sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c0d90; ret; 
0x000000000c1d10: sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000c25e0; ret; 
0x0000000018d5ff: sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x000000000018d810; ret; 
0x000000000c063c: sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c0d90; ret; 
0x000000000c1d30: sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000c25e0; ret; 
0x0000000018d621: sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x000000000018d810; ret; 
0x000000000c065e: sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c0d90; ret; 
0x000000000c1d52: sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000c25e0; ret; 
0x0000000018d641: sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x000000000018d810; ret; 
0x000000000c067e: sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c0d90; ret; 
0x000000000c1d82: sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000c25e0; ret; 
0x0000000018d661: sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x000000000018d810; ret; 
0x000000000c069e: sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c0d90; ret; 
0x000000000c1db2: sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000c25e0; ret; 
0x00000000090646: sub r8, [0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x00000000090645: sub r8, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; jmp rax; 
0x000000001b0850: sub r8, rdx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b0ac0; ret; 
0x000000001b39fc: sub r8, rdx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001b3c30; ret; 
0x0000000015fdf7: sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000b7d67: sub r9, rcx; lea r10, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5af7: sub r9, rcx; lea r10, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b3147: sub r9, rcx; lea r10, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a27: sub r9, rcx; lea r10, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bd7: sub r9, rcx; lea r10, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a57: sub r9, rcx; lea r10, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796a7: sub r9, rcx; lea r10, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000178417: sub r9, rcx; lea r10, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000a0d1b: sub rax, 0x11; shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x17869a], rdx; ret; 
0x000000000c4663: sub rax, 0x1; ret; 
0x000000001360c3: sub rax, 0xffffffffc764000e; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000168b11: sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x000000000420ed: sub rax, [0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x000000000426b5: sub rax, [0x28]; jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x00000000046805: sub rax, [0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046852: sub rax, [0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x00000000050ce6: sub rax, [0x28]; jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x000000000562e2: sub rax, [0x28]; jne short 0x0000000000056365; leave; ret; 
0x00000000089fde: sub rax, [0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090d6c: sub rax, [0x28]; jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x000000000975aa: sub rax, [0x28]; jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x000000000a0c9a: sub rax, [0x28]; jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x0000000011a174: sub rax, [0x28]; jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011ab0f: sub rax, [0x28]; jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011e650: sub rax, [0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e729: sub rax, [0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210b5: sub rax, [0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121175: sub rax, [0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121353: sub rax, [0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x0000000012157c: sub rax, [0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x00000000121799: sub rax, [0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa7: sub rax, [0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x00000000132590: sub rax, [0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000149c72: sub rax, [0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000015d303: sub rax, [0x28]; jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000016733b: sub rax, [0x28]; jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x000000001690b3: sub rax, [0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169123: sub rax, [0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169193: sub rax, [0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f4: sub rax, [0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169258: sub rax, [0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c3: sub rax, [0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169346: sub rax, [0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698a4: sub rax, [0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698e9: sub rax, [0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3be: sub rax, [0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000008fb63: sub rax, [rdi+0x18]; ret; 
0x000000000892bc: sub rax, [rdi+0x20]; ret; 
0x0000000012df46: sub rax, [rdi+0x38]; cmp rax, rsi; jb short 0x000000000012df60; mov eax, 0x1; ret; 
0x0000000008918a: sub rax, [rdi+0x38]; ret; 
0x00000000084d5a: sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000000892a9: sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000089179: sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x000000000420ec: sub rax, fs:[0x28]; jne short 0x00000000000420fc; add rsp, 0x18; ret; 
0x000000000426b4: sub rax, fs:[0x28]; jne short 0x0000000000042704; mov eax, r9d; add rsp, 0x148; ret; 
0x00000000046804: sub rax, fs:[0x28]; jne short 0x0000000000046814; add rsp, 0x18; ret; 
0x00000000046851: sub rax, fs:[0x28]; jne short 0x0000000000046861; add rsp, 0x18; ret; 
0x00000000050ce5: sub rax, fs:[0x28]; jne short 0x0000000000050d4e; add rsp, 0x10; pop rbx; ret; 
0x000000000562e1: sub rax, fs:[0x28]; jne short 0x0000000000056365; leave; ret; 
0x00000000089fdd: sub rax, fs:[0x28]; jne short 0x0000000000089ff9; add rsp, 0x48; ret; 
0x00000000090d6b: sub rax, fs:[0x28]; jne short 0x0000000000090d7c; add rsp, 0x10; pop rbp; ret; 
0x000000000975a9: sub rax, fs:[0x28]; jne short 0x00000000000975ba; add rsp, 0x10; pop rbp; ret; 
0x000000000a0c99: sub rax, fs:[0x28]; jne short 0x00000000000a0cc3; add rsp, 0xe0; pop rbp; ret; 
0x0000000011a173: sub rax, fs:[0x28]; jne short 0x000000000011a1a4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000011ab0e: sub rax, fs:[0x28]; jne short 0x000000000011ab3c; mov eax, r8d; add rsp, 0x58; ret; 
0x0000000011e64f: sub rax, fs:[0x28]; jne short 0x000000000011e662; add rsp, 0xd8; ret; 
0x0000000011e728: sub rax, fs:[0x28]; jne short 0x000000000011e73b; add rsp, 0xd8; ret; 
0x000000001210b4: sub rax, fs:[0x28]; jne short 0x00000000001210c7; add rsp, 0xd8; ret; 
0x00000000121174: sub rax, fs:[0x28]; jne short 0x0000000000121187; add rsp, 0xd8; ret; 
0x00000000121352: sub rax, fs:[0x28]; jne short 0x0000000000121365; add rsp, 0x418; ret; 
0x0000000012157b: sub rax, fs:[0x28]; jne short 0x000000000012158e; add rsp, 0xd8; ret; 
0x00000000121798: sub rax, fs:[0x28]; jne short 0x00000000001217ab; add rsp, 0xd8; ret; 
0x00000000130aa6: sub rax, fs:[0x28]; jne short 0x0000000000130ab9; add rsp, 0xd8; ret; 
0x0000000013258f: sub rax, fs:[0x28]; jne short 0x00000000001325a2; add rsp, 0xd8; ret; 
0x00000000149c71: sub rax, fs:[0x28]; jne short 0x0000000000149c84; add rsp, 0x218; ret; 
0x0000000015d302: sub rax, fs:[0x28]; jne short 0x000000000015d313; add rsp, 0x40; pop rbp; ret; 
0x0000000016733a: sub rax, fs:[0x28]; jne short 0x0000000000167361; add rsp, 0x10; pop rbx; ret; 
0x000000001690b2: sub rax, fs:[0x28]; jne short 0x00000000001690c2; add rsp, 0x78; ret; 
0x00000000169122: sub rax, fs:[0x28]; jne short 0x0000000000169132; add rsp, 0x78; ret; 
0x00000000169192: sub rax, fs:[0x28]; jne short 0x00000000001691a2; add rsp, 0x78; ret; 
0x000000001691f3: sub rax, fs:[0x28]; jne short 0x0000000000169203; add rsp, 0x78; ret; 
0x00000000169257: sub rax, fs:[0x28]; jne short 0x0000000000169267; add rsp, 0x78; ret; 
0x000000001692c2: sub rax, fs:[0x28]; jne short 0x00000000001692d2; add rsp, 0x78; ret; 
0x00000000169345: sub rax, fs:[0x28]; jne short 0x0000000000169355; add rsp, 0x78; ret; 
0x000000001698a3: sub rax, fs:[0x28]; jne short 0x00000000001698b3; add rsp, 0x28; ret; 
0x000000001698e8: sub rax, fs:[0x28]; jne short 0x0000000000169918; add rsp, 0x28; ret; 
0x0000000016b3bd: sub rax, fs:[0x28]; jne short 0x000000000016b3cd; add rsp, 0x48; ret; 
0x0000000015e2c2: sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x000000001a2d06: sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x0000000019a032: sub rax, rcx; je short 0x000000000019a03c; sbb eax, eax; or eax, 0x1; ret; 
0x000000001a7a32: sub rax, rcx; je short 0x00000000001a7a3c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000084548: sub rax, rcx; sar rax, 0x2; sub eax, 0x1; ret; 
0x0000000008e958: sub rax, rcx; sub eax, 0x1; ret; 
0x000000000bab68: sub rax, rdi; ret; 
0x000000000d85e8: sub rax, rdi; shr rax, 0x2; ret; 
0x00000000087ccb: sub rax, rdx; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000923df: sub rax, rdx; mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x000000000b56d0: sub rax, rdx; mov edx, eax; shr rax, 0x20; or eax, edx; ret; 
0x0000000008b640: sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000c4743: sub rax, rdx; ret; 
0x000000000413e8: sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000054fbf: sub rcx, 0x1; jae short 0x0000000000054fb8; mov rax, rdx; ret; 
0x00000000154dd0: sub rcx, 0x1; jne short 0x0000000000154d58; ret; 
0x00000000090785: sub rcx, [0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000143233: sub rcx, [0x28]; jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000174a21: sub rcx, [rax+0x10]; cmp rcx, [rax+0x28]; jae short 0x0000000000174a10; mov eax, 0x1; ret; 
0x00000000090784: sub rcx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; jmp rax; 
0x00000000143232: sub rcx, fs:[0x28]; jne short 0x0000000000143254; add rsp, 0x20; pop rbp; ret; 
0x00000000149656: sub rcx, r9; cmp rcx, 0xff; jg short 0x0000000000149620; mov eax, 0x1; ret; 
0x0000000014960f: sub rcx, r9; cmp rcx, 0xff; jg short 0x0000000000149620; ret; 
0x00000000112ef3: sub rcx, rdi; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000019a290: sub rcx, rdi; or rax, rcx; cmovne eax, edx; ret; 
0x000000001af289: sub rcx, rdi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6cd2: sub rcx, rdi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000008778d: sub rcx, rdx; cmp rax, rcx; jbe 0x0000000000087910; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000088f9d: sub rcx, rdx; cmp rax, rcx; jbe 0x0000000000089110; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000008bf69: sub rcx, rdx; cmp rax, rcx; jbe 0x000000000008c060; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000008e462: sub rcx, rdx; cmp rax, rcx; jbe 0x000000000008e510; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f21c: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000007f268; mov rdi, rbx; call qword ptr [rbp+0x60]; 
0x00000000081805: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008184a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x000000000838e8: sub rcx, rdx; cmp rax, rcx; jbe short 0x0000000000083928; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008445d: sub rcx, rdx; cmp rax, rcx; jbe short 0x0000000000084490; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008a0f9: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008a118; call qword ptr [rbx+0x60]; 
0x0000000008c0c9: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008c108; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x0000000008dd52: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008ddc0; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000008de08: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008de38; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000008e868: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000008e8a0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000061b4f: sub rcx, rdx; movzx edx, byte ptr [r14+rcx]; mov [r13+rdi+0x5], dl; mov rdi, r13; call rax; 
0x000000001a6c79: sub rcx, rsi; inc rsi; rep movsb [rdi], [rsi]; vmovdqu64 [r8], zmm16; ret; 
0x0000000015fd4e: sub rcx, rsi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x000000000d7e6b: sub rdi, 0x10; add rax, rdi; ret; 
0x0000000017dca2: sub rdi, 0x20; lea r11, [rip+0x65463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b2c2: sub rdi, 0x20; lea r11, [rip+0x67c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a28aa: sub rdi, 0x3f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000019984c: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000019d71c: sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000017dbb1: sub rdi, 0x40; lea r11, [rip+0x65554]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017daf1: sub rdi, 0x40; lea r11, [rip+0x65613]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b1d1: sub rdi, 0x40; lea r11, [rip+0x67d74]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b111: sub rdi, 0x40; lea r11, [rip+0x67e33]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001a28e4: sub rdi, 0x5f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000199874: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000019d744: sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000001a28c4: sub rdi, 0x7f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000199864: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000546f3: sub rdi, 0x8; cmp rdi, 0xfffffffffffffff8; jne short 0x00000000000546e8; mov rax, rdx; ret; 
0x00000000199630: sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x00000000199684: sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x0000000008a5c8: sub rdi, rcx; cmp rax, rdi; jbe short 0x000000000008a5f0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000019dc81: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000019dd5b: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000019dd07: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000019dcb8: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000184a1e: sub rdi, rdx; lea r11, [rip+0x5eda8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181eea: sub rdi, rdx; lea r11, [rip+0x613dc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b4064: sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b4032: sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40eb: sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40af: sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b53a0: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548b: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5430: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e1: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000b5113: sub rdx, 0x10; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x30]; ret; 
0x00000000054118: sub rdx, 0x1; jne short 0x0000000000054100; mov eax, 0x1; ret; 
0x00000000054340: sub rdx, 0x1; jne short 0x0000000000054328; mov eax, 0x1; ret; 
0x000000000b50f3: sub rdx, 0x20; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b50d3: sub rdx, 0x30; add rdx, rax; jl short 0x00000000000b5130; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b50c3: sub rdx, 0x40; add rdx, rax; jl short 0x00000000000b5130; add rax, rdi; ret; 
0x000000001802e0: sub rdx, 0x40; lea r11, [rip+0x62e25]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001af8a6: sub rdx, 0x80; add rdx, rax; jl 0x00000000001af990; add rax, rdi; ret; 
0x000000001803c4: sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; notrack jmp r9; 
0x000000000a6bb2: sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000113c9b: sub rdx, [0x28]; jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x00000000114878: sub rdx, [0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114eee: sub rdx, [0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x0000000011502f: sub rdx, [0x28]; jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e2d: sub rdx, [0x28]; jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x0000000011960f: sub rdx, [0x28]; jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x00000000149fb3: sub rdx, [0x28]; jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0c3: sub rdx, [0x28]; jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a24e: sub rdx, [0x28]; jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000015dd9c: sub rdx, [0x28]; jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x000000001642bb: sub rdx, [0x28]; jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x00000000042400: sub rdx, [0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x0000000004293c: sub rdx, [0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429bf: sub rdx, [0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042aca: sub rdx, [0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042cfe: sub rdx, [0x28]; jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x0000000004300d: sub rdx, [0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x0000000004349d: sub rdx, [0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f1b: sub rdx, [0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x0000000004600b: sub rdx, [0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x00000000046280: sub rdx, [0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x000000000468a4: sub rdx, [0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f1: sub rdx, [0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046944: sub rdx, [0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046991: sub rdx, [0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x000000000514ff: sub rdx, [0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x0000000005188d: sub rdx, [0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd7: sub rdx, [0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000005a24b: sub rdx, [0x28]; jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a494: sub rdx, [0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x00000000060750: sub rdx, [0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060825: sub rdx, [0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608dc: sub rdx, [0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609ae: sub rdx, [0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a70: sub rdx, [0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b30: sub rdx, [0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c1e: sub rdx, [0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf5: sub rdx, [0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x0000000006135b: sub rdx, [0x28]; jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613dd: sub rdx, [0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e8f: sub rdx, [0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621c8: sub rdx, [0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a3: sub rdx, [0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082c00: sub rdx, [0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cbc: sub rdx, [0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db5: sub rdx, [0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e85: sub rdx, [0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f3e: sub rdx, [0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x0000000009047d: sub rdx, [0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x00000000090620: sub rdx, [0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x0000000009075b: sub rdx, [0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x0000000009bcb5: sub rdx, [0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009cbdb: sub rdx, [0x28]; jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009dada: sub rdx, [0x28]; jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009dcf8: sub rdx, [0x28]; jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x000000000a02db: sub rdx, [0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d2c0b: sub rdx, [0x28]; jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d3648: sub rdx, [0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3723: sub rdx, [0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8ebb: sub rdx, [0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f35: sub rdx, [0x28]; jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9c56: sub rdx, [0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2ea4: sub rdx, [0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5594: sub rdx, [0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e610b: sub rdx, [0x28]; jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e6197: sub rdx, [0x28]; jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e7747: sub rdx, [0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec177: sub rdx, [0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec207: sub rdx, [0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c7: sub rdx, [0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec567: sub rdx, [0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef4: sub rdx, [0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a93: sub rdx, [0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e0d: sub rdx, [0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000115bb8: sub rdx, [0x28]; jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x0000000011610b: sub rdx, [0x28]; jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000011971c: sub rdx, [0x28]; jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x00000000119a93: sub rdx, [0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b22: sub rdx, [0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119bda: sub rdx, [0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c78: sub rdx, [0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a1e5: sub rdx, [0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011b107: sub rdx, [0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b197: sub rdx, [0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b23e: sub rdx, [0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2fe: sub rdx, [0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3e6: sub rdx, [0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c06c: sub rdx, [0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0e5: sub rdx, [0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1b7: sub rdx, [0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf7f: sub rdx, [0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d012: sub rdx, [0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d096: sub rdx, [0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d111: sub rdx, [0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011f981: sub rdx, [0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000121c31: sub rdx, [0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x0000000012653f: sub rdx, [0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b2d: sub rdx, [0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e66: sub rdx, [0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x0000000012822d: sub rdx, [0x28]; jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x000000001284e3: sub rdx, [0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000133d8c: sub rdx, [0x28]; jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134be7: sub rdx, [0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134ceb: sub rdx, [0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e01: sub rdx, [0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ec9: sub rdx, [0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c5b: sub rdx, [0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d71: sub rdx, [0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e39: sub rdx, [0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x00000000136240: sub rdx, [0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x000000001362a0: sub rdx, [0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136369: sub rdx, [0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136449: sub rdx, [0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136529: sub rdx, [0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d127: sub rdx, [0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c4: sub rdx, [0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d231: sub rdx, [0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000147f81: sub rdx, [0x28]; jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fd6: sub rdx, [0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x00000000148029: sub rdx, [0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488d8: sub rdx, [0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a35e: sub rdx, [0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5a7: sub rdx, [0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014e57a: sub rdx, [0x28]; jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000015fbc9: sub rdx, [0x28]; jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x0000000016014a: sub rdx, [0x28]; jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601e8: sub rdx, [0x28]; jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160cde: sub rdx, [0x28]; jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x00000000167dc8: sub rdx, [0x28]; jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x0000000016903d: sub rdx, [0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x0000000016b429: sub rdx, [0x28]; jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4b9: sub rdx, [0x28]; jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b582: sub rdx, [0x28]; jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9e9: sub rdx, [0x28]; jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba79: sub rdx, [0x28]; jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bc29: sub rdx, [0x28]; jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcb9: sub rdx, [0x28]; jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca19: sub rdx, [0x28]; jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016caa9: sub rdx, [0x28]; jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb39: sub rdx, [0x28]; jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbc9: sub rdx, [0x28]; jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d28f: sub rdx, [0x28]; jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d303: sub rdx, [0x28]; jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d364: sub rdx, [0x28]; jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3d2: sub rdx, [0x28]; jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d445: sub rdx, [0x28]; jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x0000000017213a: sub rdx, [0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172351: sub rdx, [0x28]; jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e1: sub rdx, [0x28]; jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001739be: sub rdx, [0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a26: sub rdx, [0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000001750de: sub rdx, [0x28]; jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751d5: sub rdx, [0x28]; jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x00000000175370: sub rdx, [0x28]; jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x00000000175447: sub rdx, [0x28]; jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x00000000176126: sub rdx, [0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000178283: sub rdx, [0x28]; jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x00000000178309: sub rdx, [0x28]; jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x000000000845f1: sub rdx, [rcx+0x10]; sar rdx, 0x2; sub eax, edx; ret; 
0x00000000084603: sub rdx, [rcx+0x8]; sar rdx, 0x2; sub eax, edx; ret; 
0x00000000113c9a: sub rdx, fs:[0x28]; jne 0x0000000000113d2b; add rsp, 0x10; pop rbp; ret; 
0x00000000114877: sub rdx, fs:[0x28]; jne 0x0000000000114943; add rsp, 0x78; ret; 
0x00000000114eed: sub rdx, fs:[0x28]; jne 0x0000000000114f9b; add rsp, 0x68; ret; 
0x0000000011502e: sub rdx, fs:[0x28]; jne 0x00000000001150ee; add rsp, 0x30; pop rbx; ret; 
0x00000000118e2c: sub rdx, fs:[0x28]; jne 0x0000000000118ed3; add rsp, 0x40; pop r13; ret; 
0x0000000011960e: sub rdx, fs:[0x28]; jne 0x00000000001196c1; add rsp, 0xa0; pop rbx; ret; 
0x00000000149fb2: sub rdx, fs:[0x28]; jne 0x000000000014a063; add rsp, 0x110; pop rbx; ret; 
0x0000000014a0c2: sub rdx, fs:[0x28]; jne 0x000000000014a1f9; add rsp, 0x110; pop rbx; ret; 
0x0000000014a24d: sub rdx, fs:[0x28]; jne 0x000000000014a302; add rsp, 0x110; pop rbx; ret; 
0x0000000015dd9b: sub rdx, fs:[0x28]; jne 0x000000000015de43; add rsp, 0x60; pop rbp; ret; 
0x000000001642ba: sub rdx, fs:[0x28]; jne 0x0000000000164349; add rsp, 0x20; pop rbx; ret; 
0x000000000423ff: sub rdx, fs:[0x28]; jne short 0x0000000000042412; add rsp, 0x148; ret; 
0x0000000004293b: sub rdx, fs:[0x28]; jne short 0x0000000000042955; add rsp, 0x118; ret; 
0x000000000429be: sub rdx, fs:[0x28]; jne short 0x00000000000429d8; add rsp, 0x118; ret; 
0x00000000042ac9: sub rdx, fs:[0x28]; jne short 0x0000000000042adc; add rsp, 0x98; ret; 
0x00000000042cfd: sub rdx, fs:[0x28]; jne short 0x0000000000042d35; add rsp, 0x40; pop rbx; ret; 
0x0000000004300c: sub rdx, fs:[0x28]; jne short 0x000000000004301f; add rsp, 0x148; ret; 
0x0000000004349c: sub rdx, fs:[0x28]; jne short 0x00000000000434af; add rsp, 0xa8; ret; 
0x00000000045f1a: sub rdx, fs:[0x28]; jne short 0x0000000000045f2a; add rsp, 0x28; ret; 
0x0000000004600a: sub rdx, fs:[0x28]; jne short 0x000000000004601a; add rsp, 0x28; ret; 
0x0000000004627f: sub rdx, fs:[0x28]; jne short 0x00000000000462ae; add rsp, 0x18; ret; 
0x000000000468a3: sub rdx, fs:[0x28]; jne short 0x00000000000468b3; add rsp, 0x18; ret; 
0x000000000468f0: sub rdx, fs:[0x28]; jne short 0x0000000000046900; add rsp, 0x18; ret; 
0x00000000046943: sub rdx, fs:[0x28]; jne short 0x0000000000046953; add rsp, 0x18; ret; 
0x00000000046990: sub rdx, fs:[0x28]; jne short 0x00000000000469a0; add rsp, 0x18; ret; 
0x000000000514fe: sub rdx, fs:[0x28]; jne short 0x0000000000051511; add rsp, 0x428; ret; 
0x0000000005188c: sub rdx, fs:[0x28]; jne short 0x000000000005189f; add rsp, 0xd8; ret; 
0x00000000052dd6: sub rdx, fs:[0x28]; jne short 0x0000000000052de9; add rsp, 0xd8; ret; 
0x0000000005a24a: sub rdx, fs:[0x28]; jne short 0x000000000005a270; add rsp, 0x450; pop rbp; ret; 
0x0000000005a493: sub rdx, fs:[0x28]; jne short 0x000000000005a4e5; add rsp, 0x38; ret; 
0x0000000006074f: sub rdx, fs:[0x28]; jne short 0x0000000000060762; add rsp, 0xd8; ret; 
0x00000000060824: sub rdx, fs:[0x28]; jne short 0x0000000000060837; add rsp, 0xd8; ret; 
0x000000000608db: sub rdx, fs:[0x28]; jne short 0x00000000000608ee; add rsp, 0xd8; ret; 
0x000000000609ad: sub rdx, fs:[0x28]; jne short 0x00000000000609c0; add rsp, 0xd8; ret; 
0x00000000060a6f: sub rdx, fs:[0x28]; jne short 0x0000000000060a82; add rsp, 0xd8; ret; 
0x00000000060b2f: sub rdx, fs:[0x28]; jne short 0x0000000000060b42; add rsp, 0xd8; ret; 
0x00000000060c1d: sub rdx, fs:[0x28]; jne short 0x0000000000060c30; add rsp, 0xd8; ret; 
0x00000000060cf4: sub rdx, fs:[0x28]; jne short 0x0000000000060d07; add rsp, 0xd8; ret; 
0x0000000006135a: sub rdx, fs:[0x28]; jne short 0x000000000006136e; add rsp, 0x1010; pop rbp; ret; 
0x000000000613dc: sub rdx, fs:[0x28]; jne short 0x00000000000613ef; add rsp, 0xa8; ret; 
0x00000000061e8e: sub rdx, fs:[0x28]; jne short 0x0000000000061ea7; add rsp, 0x18; ret; 
0x000000000621c7: sub rdx, fs:[0x28]; jne short 0x00000000000621da; add rsp, 0xd8; ret; 
0x000000000622a2: sub rdx, fs:[0x28]; jne short 0x00000000000622b5; add rsp, 0xd8; ret; 
0x00000000082bff: sub rdx, fs:[0x28]; jne short 0x0000000000082c12; add rsp, 0xd8; ret; 
0x00000000082cbb: sub rdx, fs:[0x28]; jne short 0x0000000000082cce; add rsp, 0xd8; ret; 
0x00000000082db4: sub rdx, fs:[0x28]; jne short 0x0000000000082dc7; add rsp, 0xd8; ret; 
0x00000000082e84: sub rdx, fs:[0x28]; jne short 0x0000000000082e97; add rsp, 0xd8; ret; 
0x00000000082f3d: sub rdx, fs:[0x28]; jne short 0x0000000000082f50; add rsp, 0xd8; ret; 
0x0000000009047c: sub rdx, fs:[0x28]; jne short 0x00000000000904b1; add rsp, 0x28; ret; 
0x0000000009061f: sub rdx, fs:[0x28]; jne short 0x0000000000090656; add rsp, 0x38; ret; 
0x0000000009075a: sub rdx, fs:[0x28]; jne short 0x0000000000090795; add rsp, 0x38; ret; 
0x0000000009bcb4: sub rdx, fs:[0x28]; jne short 0x000000000009bd37; add rsp, 0x98; ret; 
0x0000000009cbda: sub rdx, fs:[0x28]; jne short 0x000000000009cc25; add rsp, 0x120; pop rbp; ret; 
0x0000000009dad9: sub rdx, fs:[0x28]; jne short 0x000000000009db07; add rsp, 0x10; pop rbx; ret; 
0x0000000009dcf7: sub rdx, fs:[0x28]; jne short 0x000000000009dd45; add rsp, 0x120; pop rbp; ret; 
0x000000000a02da: sub rdx, fs:[0x28]; jne short 0x00000000000a0345; add rsp, 0x58; ret; 
0x000000000d2c0a: sub rdx, fs:[0x28]; jne short 0x00000000000d2c34; add rsp, 0x20; pop rbx; ret; 
0x000000000d3647: sub rdx, fs:[0x28]; jne short 0x00000000000d365a; add rsp, 0xd8; ret; 
0x000000000d3722: sub rdx, fs:[0x28]; jne short 0x00000000000d3735; add rsp, 0xd8; ret; 
0x000000000d8eba: sub rdx, fs:[0x28]; jne short 0x00000000000d8ed9; add rsp, 0x28; ret; 
0x000000000d8f34: sub rdx, fs:[0x28]; jne short 0x00000000000d8f45; add rsp, 0x40; pop rbp; ret; 
0x000000000d9c55: sub rdx, fs:[0x28]; jne short 0x00000000000d9c9e; add rsp, 0x28; ret; 
0x000000000e2ea3: sub rdx, fs:[0x28]; jne short 0x00000000000e2eb3; add rsp, 0x18; ret; 
0x000000000e5593: sub rdx, fs:[0x28]; jne short 0x00000000000e55a3; add rsp, 0x18; ret; 
0x000000000e610a: sub rdx, fs:[0x28]; jne short 0x00000000000e611e; add rsp, 0xe0; pop rbx; ret; 
0x000000000e6196: sub rdx, fs:[0x28]; jne short 0x00000000000e61aa; add rsp, 0xe0; pop rbx; ret; 
0x000000000e7746: sub rdx, fs:[0x28]; jne short 0x00000000000e779b; add rsp, 0x38; ret; 
0x000000000ec176: sub rdx, fs:[0x28]; jne short 0x00000000000ec1c3; add rsp, 0x38; ret; 
0x000000000ec206: sub rdx, fs:[0x28]; jne short 0x00000000000ec253; add rsp, 0x38; ret; 
0x000000000ec4c6: sub rdx, fs:[0x28]; jne short 0x00000000000ec523; add rsp, 0x38; ret; 
0x000000000ec566: sub rdx, fs:[0x28]; jne short 0x00000000000ec5c3; add rsp, 0x38; ret; 
0x00000000108ef3: sub rdx, fs:[0x28]; jne short 0x0000000000108f6e; add rsp, 0x38; ret; 
0x00000000113a92: sub rdx, fs:[0x28]; jne short 0x0000000000113ab1; add rsp, 0x28; ret; 
0x00000000113e0c: sub rdx, fs:[0x28]; jne short 0x0000000000113e1c; add rsp, 0x38; ret; 
0x00000000115bb7: sub rdx, fs:[0x28]; jne short 0x0000000000115c0b; add rsp, 0x130; pop rbp; ret; 
0x00000000116109: sub rdx, fs:[0x28]; jne short 0x000000000011611d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000011971b: sub rdx, fs:[0x28]; jne short 0x000000000011979f; add rsp, 0xa0; pop rbx; ret; 
0x00000000119a92: sub rdx, fs:[0x28]; jne short 0x0000000000119ae3; add rsp, 0x68; ret; 
0x00000000119b21: sub rdx, fs:[0x28]; jne short 0x0000000000119b73; add rsp, 0x18; ret; 
0x00000000119bd9: sub rdx, fs:[0x28]; jne short 0x0000000000119c2b; add rsp, 0x58; ret; 
0x00000000119c77: sub rdx, fs:[0x28]; jne short 0x0000000000119ccb; add rsp, 0x58; ret; 
0x0000000011a1e4: sub rdx, fs:[0x28]; jne short 0x000000000011a1fb; add rsp, 0x18; ret; 
0x0000000011b106: sub rdx, fs:[0x28]; jne short 0x000000000011b15b; add rsp, 0x38; ret; 
0x0000000011b196: sub rdx, fs:[0x28]; jne short 0x000000000011b1eb; add rsp, 0x38; ret; 
0x0000000011b23d: sub rdx, fs:[0x28]; jne short 0x000000000011b2a8; add rsp, 0x38; ret; 
0x0000000011b2fd: sub rdx, fs:[0x28]; jne short 0x000000000011b368; add rsp, 0x38; ret; 
0x0000000011b3e5: sub rdx, fs:[0x28]; jne short 0x000000000011b3f5; add rsp, 0x28; ret; 
0x0000000011c06a: sub rdx, fs:[0x28]; jne short 0x000000000011c087; add rsp, 0x58; ret; 
0x0000000011c0e4: sub rdx, fs:[0x28]; jne short 0x000000000011c0f4; add rsp, 0x28; ret; 
0x0000000011c1b6: sub rdx, fs:[0x28]; jne short 0x000000000011c1fd; add rsp, 0x68; ret; 
0x0000000011cf7e: sub rdx, fs:[0x28]; jne short 0x000000000011cf8e; add rsp, 0x38; ret; 
0x0000000011d011: sub rdx, fs:[0x28]; jne short 0x000000000011d021; add rsp, 0x38; ret; 
0x0000000011d095: sub rdx, fs:[0x28]; jne short 0x000000000011d0a5; add rsp, 0x38; ret; 
0x0000000011d110: sub rdx, fs:[0x28]; jne short 0x000000000011d120; add rsp, 0x38; ret; 
0x0000000011f980: sub rdx, fs:[0x28]; jne short 0x000000000011f990; add rsp, 0x18; ret; 
0x00000000121c30: sub rdx, fs:[0x28]; jne short 0x0000000000121c55; add rsp, 0x1018; ret; 
0x0000000012653e: sub rdx, fs:[0x28]; jne short 0x0000000000126563; add rsp, 0x58; ret; 
0x00000000126b2c: sub rdx, fs:[0x28]; jne short 0x0000000000126b7d; add rsp, 0x58; ret; 
0x00000000127e65: sub rdx, fs:[0x28]; jne short 0x0000000000127e75; add rsp, 0x18; ret; 
0x0000000012822c: sub rdx, fs:[0x28]; jne short 0x0000000000128247; add rsp, 0xa0; pop rbx; ret; 
0x000000001284e2: sub rdx, fs:[0x28]; jne short 0x0000000000128545; add rsp, 0x58; ret; 
0x00000000133d8b: sub rdx, fs:[0x28]; jne short 0x0000000000133d9c; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000134be6: sub rdx, fs:[0x28]; jne short 0x0000000000134bfe; add rsp, 0xd8; ret; 
0x00000000134cea: sub rdx, fs:[0x28]; jne short 0x0000000000134d05; add rsp, 0xd8; ret; 
0x00000000134e00: sub rdx, fs:[0x28]; jne short 0x0000000000134e13; add rsp, 0xd8; ret; 
0x00000000134ec8: sub rdx, fs:[0x28]; jne short 0x0000000000134edb; add rsp, 0xd8; ret; 
0x00000000135c5a: sub rdx, fs:[0x28]; jne short 0x0000000000135c75; add rsp, 0xd8; ret; 
0x00000000135d70: sub rdx, fs:[0x28]; jne short 0x0000000000135d83; add rsp, 0xd8; ret; 
0x00000000135e38: sub rdx, fs:[0x28]; jne short 0x0000000000135e4b; add rsp, 0xd8; ret; 
0x0000000013623f: sub rdx, fs:[0x28]; jne short 0x0000000000136255; add rsp, 0x28; ret; 
0x0000000013629f: sub rdx, fs:[0x28]; jne short 0x00000000001362b5; add rsp, 0x28; ret; 
0x00000000136368: sub rdx, fs:[0x28]; jne short 0x000000000013637b; add rsp, 0xd8; ret; 
0x00000000136448: sub rdx, fs:[0x28]; jne short 0x000000000013645b; add rsp, 0xd8; ret; 
0x00000000136528: sub rdx, fs:[0x28]; jne short 0x000000000013653b; add rsp, 0xd8; ret; 
0x0000000013d126: sub rdx, fs:[0x28]; jne short 0x000000000013d159; add rsp, 0x38; ret; 
0x0000000013d1c3: sub rdx, fs:[0x28]; jne short 0x000000000013d1d3; add rsp, 0x38; ret; 
0x0000000013d230: sub rdx, fs:[0x28]; jne short 0x000000000013d240; add rsp, 0x28; ret; 
0x00000000147f80: sub rdx, fs:[0x28]; jne short 0x0000000000147fa5; add rsp, 0x20; pop rbx; ret; 
0x00000000147fd5: sub rdx, fs:[0x28]; jne short 0x0000000000147fe5; add rsp, 0x18; ret; 
0x00000000148028: sub rdx, fs:[0x28]; jne short 0x0000000000148038; add rsp, 0x28; ret; 
0x000000001488d7: sub rdx, fs:[0x28]; jne short 0x00000000001488e7; add rsp, 0x18; ret; 
0x0000000014a35d: sub rdx, fs:[0x28]; jne short 0x000000000014a384; add rsp, 0x118; ret; 
0x0000000014a5a6: sub rdx, fs:[0x28]; jne short 0x000000000014a5fc; add rsp, 0x18; ret; 
0x0000000014e579: sub rdx, fs:[0x28]; jne short 0x000000000014e58c; movzx eax, ax; add rsp, 0x28; ret; 
0x0000000015fbc8: sub rdx, fs:[0x28]; jne short 0x000000000015fc13; add rsp, 0x10; pop rbx; ret; 
0x00000000160149: sub rdx, fs:[0x28]; jne short 0x0000000000160182; add rsp, 0x10; pop rbx; ret; 
0x000000001601e7: sub rdx, fs:[0x28]; jne short 0x0000000000160225; add rsp, 0x10; pop rbx; ret; 
0x00000000160cdd: sub rdx, fs:[0x28]; jne short 0x0000000000160cf7; add rsp, 0x40; pop rbx; ret; 
0x00000000167dc7: sub rdx, fs:[0x28]; jne short 0x0000000000167e21; add rsp, 0x20; pop r12; ret; 
0x0000000016903c: sub rdx, fs:[0x28]; jne short 0x000000000016904c; add rsp, 0x78; ret; 
0x0000000016b428: sub rdx, fs:[0x28]; jne short 0x000000000016b473; add rsp, 0x10; pop rbx; ret; 
0x0000000016b4b8: sub rdx, fs:[0x28]; jne short 0x000000000016b502; add rsp, 0x10; pop rbx; ret; 
0x0000000016b581: sub rdx, fs:[0x28]; jne short 0x000000000016b5eb; add rsp, 0x10; pop rbp; ret; 
0x0000000016b9e8: sub rdx, fs:[0x28]; jne short 0x000000000016ba34; add rsp, 0x10; pop rbx; ret; 
0x0000000016ba78: sub rdx, fs:[0x28]; jne short 0x000000000016bac3; add rsp, 0x10; pop rbx; ret; 
0x0000000016bc28: sub rdx, fs:[0x28]; jne short 0x000000000016bc79; add rsp, 0x10; pop rbx; ret; 
0x0000000016bcb8: sub rdx, fs:[0x28]; jne short 0x000000000016bd03; add rsp, 0x10; pop rbx; ret; 
0x0000000016ca18: sub rdx, fs:[0x28]; jne short 0x000000000016ca65; add rsp, 0x10; pop rbx; ret; 
0x0000000016caa8: sub rdx, fs:[0x28]; jne short 0x000000000016caf5; add rsp, 0x10; pop rbx; ret; 
0x0000000016cb38: sub rdx, fs:[0x28]; jne short 0x000000000016cb85; add rsp, 0x10; pop rbx; ret; 
0x0000000016cbc8: sub rdx, fs:[0x28]; jne short 0x000000000016cc15; add rsp, 0x10; pop rbx; ret; 
0x0000000016d28e: sub rdx, fs:[0x28]; jne short 0x000000000016d2a2; add rsp, 0x90; pop rbx; ret; 
0x0000000016d302: sub rdx, fs:[0x28]; jne short 0x000000000016d315; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d363: sub rdx, fs:[0x28]; jne short 0x000000000016d376; movzx eax, al; add rsp, 0x18; ret; 
0x0000000016d3d1: sub rdx, fs:[0x28]; jne short 0x000000000016d3e2; add rsp, 0x10; pop rbx; ret; 
0x0000000016d444: sub rdx, fs:[0x28]; jne short 0x000000000016d455; add rsp, 0x10; pop rbx; ret; 
0x00000000172139: sub rdx, fs:[0x28]; jne short 0x0000000000172174; add rsp, 0x18; ret; 
0x00000000172350: sub rdx, fs:[0x28]; jne short 0x000000000017238c; add rsp, 0x10; pop rbp; ret; 
0x000000001723e0: sub rdx, fs:[0x28]; jne short 0x000000000017241c; add rsp, 0x10; pop rbp; ret; 
0x000000001739bd: sub rdx, fs:[0x28]; jne short 0x00000000001739d9; add rsp, 0x18; ret; 
0x00000000173a25: sub rdx, fs:[0x28]; jne short 0x0000000000173a41; add rsp, 0x18; ret; 
0x000000001750dc: sub rdx, fs:[0x28]; jne short 0x000000000017511c; add rsp, 0x50; pop rbx; ret; 
0x000000001751d4: sub rdx, fs:[0x28]; jne short 0x0000000000175214; add rsp, 0x60; pop rbx; ret; 
0x0000000017536f: sub rdx, fs:[0x28]; jne short 0x00000000001753cc; add rsp, 0x70; pop rbx; ret; 
0x00000000175446: sub rdx, fs:[0x28]; jne short 0x00000000001754a2; add rsp, 0x30; pop rbx; ret; 
0x00000000176125: sub rdx, fs:[0x28]; jne short 0x0000000000176135; add rsp, 0x28; ret; 
0x00000000178282: sub rdx, fs:[0x28]; jne short 0x0000000000178293; add rsp, 0x10; pop rbx; ret; 
0x00000000178308: sub rdx, fs:[0x28]; jne short 0x0000000000178319; add rsp, 0x10; pop rbx; ret; 
0x000000000841bd: sub rdx, r14; cmp r13, rdx; jbe 0x0000000000084388; mov rdi, r15; call qword ptr [rax+0x20]; 
0x0000000008e14c: sub rdx, r14; cmp r13, rdx; jbe 0x000000000008e3b0; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000d97f3: sub rdx, rax; add rdx, [rsp+0x80]; mov [rsp+0x88], rdx; mov [rsp+0x38], rdx; call r12; 
0x000000000b497c: sub rdx, rax; jbe 0x00000000000b4c20; add rax, rdi; add rax, rcx; ret; 
0x000000000b4be3: sub rdx, rax; jbe short 0x00000000000b4c20; add rax, rdi; ret; 
0x000000000b4bf3: sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000b4c03: sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b4c13: sub rdx, rax; jbe short 0x00000000000b4c20; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c387b: sub rdx, rcx; lea r11, [rip+0x10fbcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c2eeb: sub rdx, rcx; lea r11, [rip+0x1104df]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c196b: sub rdx, rcx; lea r11, [rip+0x11190b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c121b: sub rdx, rcx; lea r11, [rip+0x111fcf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000c029b: sub rdx, rcx; lea r11, [rip+0x112dfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000bfbdb: sub rdx, rcx; lea r11, [rip+0x11343b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000852d8: sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000008ccb0: sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000d6be1: sub rdx, rsi; jbe 0x00000000000d6ef0; add rax, rdi; add rax, rcx; ret; 
0x000000000d6e78: sub rdx, rsi; jbe short 0x00000000000d6ef0; add rax, rdi; ret; 
0x000000000d6e98: sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x10]; ret; 
0x000000000d6eb8: sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d6ed8: sub rdx, rsi; jbe short 0x00000000000d6ef0; lea rax, [rdi+rax+0x30]; ret; 
0x000000000859d2: sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000008abcb: sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, rbp; call rax; 
0x00000000160908: sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx+0x10]; 
0x0000000005d8cf: sub rsi, rax; mov rax, [rip+0x1bcfd7]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000008ca1c: sub rsi, rax; mov rdi, rbx; call qword ptr [r14+0x80]; 
0x00000000046d3d: sub rsi, rdi; syscall; 
0x000000001846c0: sub rsi, rdx; lea r11, [rip+0x5f106]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184540: sub rsi, rdx; lea r11, [rip+0x5f286]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001843c0: sub rsi, rdx; lea r11, [rip+0x5f406]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184240: sub rsi, rdx; lea r11, [rip+0x5f586]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001840c0: sub rsi, rdx; lea r11, [rip+0x5f706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183f40: sub rsi, rdx; lea r11, [rip+0x5f886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183dc0: sub rsi, rdx; lea r11, [rip+0x5fa06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183c40: sub rsi, rdx; lea r11, [rip+0x5fb86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183ac0: sub rsi, rdx; lea r11, [rip+0x5fd06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183940: sub rsi, rdx; lea r11, [rip+0x5fe86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001837c0: sub rsi, rdx; lea r11, [rip+0x60006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183640: sub rsi, rdx; lea r11, [rip+0x60186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001834c0: sub rsi, rdx; lea r11, [rip+0x60306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183340: sub rsi, rdx; lea r11, [rip+0x60486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001831c0: sub rsi, rdx; lea r11, [rip+0x60606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183047: sub rsi, rdx; lea r11, [rip+0x6077f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181bc0: sub rsi, rdx; lea r11, [rip+0x61706]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181a40: sub rsi, rdx; lea r11, [rip+0x61886]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001818c0: sub rsi, rdx; lea r11, [rip+0x61a06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181740: sub rsi, rdx; lea r11, [rip+0x61b86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001815c0: sub rsi, rdx; lea r11, [rip+0x61d06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181440: sub rsi, rdx; lea r11, [rip+0x61e86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001812c0: sub rsi, rdx; lea r11, [rip+0x62006]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181140: sub rsi, rdx; lea r11, [rip+0x62186]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180fc0: sub rsi, rdx; lea r11, [rip+0x62306]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180e40: sub rsi, rdx; lea r11, [rip+0x62486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180cc0: sub rsi, rdx; lea r11, [rip+0x62606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180b40: sub rsi, rdx; lea r11, [rip+0x62786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001809c0: sub rsi, rdx; lea r11, [rip+0x62906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180840: sub rsi, rdx; lea r11, [rip+0x62a86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001806c0: sub rsi, rdx; lea r11, [rip+0x62c06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000180547: sub rsi, rdx; lea r11, [rip+0x62d7f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000008b800: sub rsi, rdx; mov [rsp], r8; mov edx, 0x1; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000053991: sub rsp, 0x18; mov rsi, rsp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000053992: sub rsp, 0x18; mov rsi, rsp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000e56d7: sub rsp, 0x8; call rax; 
0x000000001256a6: sub rsp, 0x8; call rsi; 
0x00000000090563: sub rsp, 0x8; mov rax, [rax+0x348]; mov r8d, [rip+0x18a4b3]; push r10; call rax; 
0x00000000174f7b: sub rsp, 0x8; push qword ptr [rax]; mov rax, [rip+0xa3f40]; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x000000000906b2: sub rsp, 0x8; push rcx; mov rcx, r10; call rax; 
0x000000000a0bc2: sub rsp, 0x8; syscall; 
0x0000000004186a: subps xmm1, xmm0; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000041500: subps xmm2, xmm1; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x000000000414ff: subsd xmm2, xmm1; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000041869: subss xmm1, xmm0; movss [rdi], xmm0; movaps xmm0, xmm1; ret; 
0x00000000029db4: syscall; 
0x000000000a09cb: test [r15], dl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000c20cf: test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret; 
0x0000000003a12a: test [rax+0x200], bh; ret; 
0x000000001b39c3: test [rax+0x2], ebp; add [rax], al; ret; 
0x0000000019f6c3: test [rax+0x2], ebx; add [rax], al; vzeroupper; ret; 
0x000000001a03d3: test [rax+0x2], edi; add [rax], al; vzeroupper; ret; 
0x0000000016751b: test [rax+0x48000000], dl; mov eax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000001642c4: test [rax+0x48000000], eax; add esp, 0x20; pop rbx; ret; 
0x00000000114706: test [rax+0x48000000], ebp; add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000016b632: test [rax+0x48000000], ebx; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000118e36: test [rax+0x48000000], ebx; add esp, 0x40; pop r13; ret; 
0x000000001a083b: test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000a78cc: test [rax+0x48fffffe], edx; mov eax, [rip+0x171508]; call qword ptr [rax]; 
0x000000000c093b: test [rax+0x4], edx; add [rax], al; ret; 
0x00000000113884: test [rax+0x4cfffffe], ebx; mov esi, ebp; mov rdi, r14; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000001915f3: test [rax+0x6], ebp; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c1e8b: test [rax+0x7], edx; add [rax], al; ret; 
0x000000000c1d8b: test [rax+0x8], edx; add [rax], al; ret; 
0x00000000066905: test [rax+0xfffff9], edx; add [rax], al; add cl, ch; stosd [rdi]; ret; 
0x0000000002f453: test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000fb8d6: test [rax+rax*8], ah; add [rax], al; add [rax-0x77], cl; ret; 
0x000000001a498f: test [rax+rax+0x40a80000], edi; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000000f0557: test [rax+rax-0x76b80000], dh; ret far; 
0x000000000d80cf: test [rax+rax-0xf580000], ebp; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000ee5e9: test [rax+rax], dl; add [rax-0x77], cl; ret far; 
0x00000000174c17: test [rax+rax], edi; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rcx; 
0x00000000113f33: test [rax+rbx*4], ah; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi; 
0x0000000009532e: test [rax+rbx*8], ah; add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x00000000196e78: test [rax+rbx-0x76b30000], al; ret far; 
0x000000001131a1: test [rax+rcx*2], ah; add [rax], eax; add [rax+0xe], bh; syscall; 
0x00000000164b85: test [rax+rcx*8], ah; add [rax], eax; add bl, ch; mov eax, 0xfd1b8ee8; jmp qword ptr [rsi+0x66]; 
0x000000000e1dc0: test [rax+rdi*8-0x72b60001], ah; dec dword ptr [rbp-0x7b]; test byte ptr [rdi], 0x84; ret; 
0x000000000776da: test [rax+rdi*8], ah; add [rax], al; add al, ch; ret far; 
0x00000000191aab: test [rax-0x7fffffff], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000001a29b5: test [rax-0x81], cl; shr eax, 0x2; vzeroupper; ret; 
0x00000000075123: test [rax-0x9ffffdd], bl; ret; 
0x0000000007c2ce: test [rax], ah; add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x0000000015eab2: test [rax], ah; add [rax], eax; add al, ch; ret; 
0x000000000ff9a9: test [rax], ah; add al, [rax]; add [rcx], al; ret; 
0x00000000188ddc: test [rax], al; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000d83ba: test [rax], al; add [rax], al; add [rax], al; add rax, 0x3; ret; 
0x000000001bb8ba: test [rax], al; add [rax], al; add [rax], al; call qword ptr [rbx]; 
0x00000000029cfa: test [rax], al; add [rax], al; add [rax], al; endbr64; ret; 
0x000000001a4a1a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x2]; ret; 
0x000000001a4a2a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x3]; ret; 
0x000000001a4a3a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x4]; ret; 
0x000000001a4a4a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x5]; ret; 
0x000000001a4a5a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x6]; ret; 
0x000000001a4a6a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x8]; ret; 
0x000000001a4a7a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x9]; ret; 
0x000000001a4a8a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret; 
0x000000001a4a9a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret; 
0x000000001a4aaa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret; 
0x000000001a4aba: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret; 
0x000000001a4aca: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret; 
0x000000000d818a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000d817a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000d816a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret; 
0x0000000003888a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x19fbd8]; ret; 
0x0000000015f24a: test [rax], al; add [rax], al; add [rax], al; lea rdx, [rip+0xb9949]; jmp qword ptr [rdx+rax*8]; 
0x0000000018d6aa: test [rax], al; add [rax], al; add [rax], al; mov [rcx], edx; ret; 
0x0000000018d6ea: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; ret; 
0x000000000c0cba: test [rax], al; add [rax], al; add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000bfc6a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dh; ret; 
0x000000001b0a2a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dl; ret; 
0x000000000c0cca: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; ret; 
0x0000000015ee3a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000015ee2a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000015ee1a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x000000000620ba: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x10; ret; 
0x0000000009297a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x16; ret; 
0x000000000a795a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x1; ret; 
0x0000000009af3a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xb; ret; 
0x000000000e56ea: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xe4; syscall; 
0x0000000004316a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000eac8a: test [rax], al; add [rax], al; add [rax], al; mov eax, edx; syscall; 
0x000000000d83ea: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x2; ret; 
0x000000000d83fa: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x3; ret; 
0x000000000d840a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x4; ret; 
0x000000000d841a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x5; ret; 
0x000000000d842a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x6; ret; 
0x000000000d843a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x7; ret; 
0x0000000008fe9a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rax+0x388]; jmp qword ptr [rax+0x30]; 
0x0000000017510a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rbx+0x388]; call qword ptr [rax+0x48]; 
0x0000000016c97a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x000000000a761a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x1717b9]; call qword ptr [rax]; 
0x0000000003889a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rsi+rax*8+0x80]; ret; 
0x000000000c20da: test [rax], al; add [rax], al; add [rax], al; mov rax, rdi; ret; 
0x0000000009029a: test [rax], al; add [rax], al; add [rax], al; mov rdi, [rbp+0x10]; call qword ptr [r12+0x360]; 
0x000000000c0d3a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000c0d4a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret; 
0x0000000009122a: test [rax], al; add [rax], al; add [rax], al; neg eax; ret; 
0x000000000c0946: test [rax], al; add [rax], al; add [rax], al; nop [rax]; ret; 
0x0000000003e9da: test [rax], al; add [rax], al; add [rax], al; ret; 
0x0000000019ee1a: test [rax], al; add [rax], al; add [rax], al; vzeroupper; ret; 
0x0000000004537a: test [rax], al; add [rax], al; add [rax], al; xor eax, eax; ret; 
0x000000000d819a: test [rax], al; add [rax], al; add [rax], al; xor rax, rax; ret; 
0x00000000033e4e: test [rax], al; add [rax], eax; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x000000001896dc: test [rax], al; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000001884dc: test [rax], al; sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000909fc: test [rax], bl; add [rax-0x75], cl; jg short 0x0000000000090a13; call qword ptr [rax+0x360]; 
0x000000000b922c: test [rax], dh; adc [rax], al; add [rbp-0x77], cl; ret far; 
0x00000000079f97: test [rax], eax; add [rax+0x39], cl; ret; 
0x000000000778e7: test [rax], eax; add [rax], al; add [rax+0x29], cl; ret; 
0x00000000113438: test [rax], eax; add rax, r13; notrack jmp rax; 
0x00000000073135: test [rax], ebp; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000010e841: test [rax], ebx; idiv edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000191a4b: test [rax], edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000079162: test [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000677bb: test [rax], esi; ret far; 
0x00000000141ea3: test [rax], esp; add [rax], eax; add [rax+0x63], cl; ret; 
0x00000000113437: test [rax], r8d; add rax, r13; notrack jmp rax; 
0x0000000005d1f5: test [rbp*8+0x4fe9ffff], ecx; in eax, 0xff; call qword ptr [rax+0x40bf41]; 
0x00000000114881: test [rbp+0x48000000], edi; add esp, 0x78; ret; 
0x00000000162eee: test [rbp+0x48000001], ch; mov eax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000018d9c6: test [rbp+0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000011ff06: test [rbp+0x49000000], edx; mov edi, [rbp]; call rbx; 
0x00000000120ce6: test [rbp+0x49000000], esi; mov edi, [rbp]; call rbx; 
0x00000000164eaa: test [rbp+rcx*2-0x14], al; dec dword ptr [rax-0x75]; and al, 0x48; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001979a8: test [rbp+rcx], dl; add [rbp-0x77], cl; ret far; 
0x0000000012b951: test [rbp+rdi*8-0x1], edi; jmp qword ptr [rsi+0x2e]; 
0x00000000040dc9: test [rbp+rdi*8-0x76b60001], bl; fisttp word ptr [rax-0x7d], st; ret; 
0x0000000006bedf: test [rbp+rdx-0x7cbf0000], al; cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x0000000014fb64: test [rbp-0x16000009], esi; idiv r15d; jmp qword ptr [rsi-0x70]; 
0x000000000f100e: test [rbp-0x7cfffffb], ecx; call far fword ptr [rbx+0xf]; 
0x0000000010d1cb: test [rbp-0x7d000000], ch; call far fword ptr [rbx-0x7c9d8c]; 
0x00000000071e70: test [rbp-0xa000000], edi; ret; 
0x00000000199736: test [rbp-0xd000000], al; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001a2976: test [rbp-0xd000000], al; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000000d7a60: test [rbx+0x1], ecx; add [rax], al; ret; 
0x000000000d8008: test [rbx+0x1], esp; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x0000000018d5c8: test [rbx+0x2], eax; add [rax], al; ret; 
0x0000000018d5a8: test [rbx+0x2], esp; add [rax], al; ret; 
0x000000001a31a0: test [rbx+0x3], ebp; add [rax], al; ret; 
0x0000000018d4c0: test [rbx+0x3], ecx; add [rax], al; ret; 
0x00000000169572: test [rbx+0x66fffffe], edi; nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x000000000c1f80: test [rbx+0x6], ebx; add [rax], al; ret; 
0x00000000122287: test [rbx+0xf], ebp; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000191957: test [rbx+rax], eax; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001918f7: test [rbx+rax], esp; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000197b88: test [rbx+rcx], dh; add [rbp-0x77], cl; ret far; 
0x0000000007b687: test [rbx+rcx], dl; add [rbx-0x78f0d008], al; ret; 
0x00000000146a41: test [rbx+rdi*8+0x394cffff], eax; ret far; 
0x00000000166157: test [rbx-0x3f7a0001], ecx; je 0x0000000000166260; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000c6db7: test [rbx-0x4d8afff3], edi; ret; 
0x00000000167d87: test [rbx-0x72b70001], ebx; adc eax, 0xffff9dce; lea r9, [rsp+0x24]; call qword ptr [rax]; 
0x000000000c800b: test [rbx-0x72fffff9], dh; rol byte ptr [r11-0x78f0f608], 0x1; ret; 
0x0000000012cff8: test [rbx-0xa], al; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001a2768: test [rbx-0xd000000], dl; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000072860: test [rbx], ecx; add [rax], eax; add [rax+0x63], cl; ret; 
0x00000000068379: test [rbx], ecx; or al, [rax]; add [rax-0x7d], cl; ret; 
0x000000000a6b1d: test [rbx], edx; add al, ch; ret far; 
0x000000000d86e2: test [rcx+0x48000000], bl; bsf eax, edx; shr rax, 0x2; ret; 
0x0000000015dda5: test [rcx+0x48000000], ebx; add esp, 0x60; pop rbp; ret; 
0x00000000115038: test [rcx+0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000949a3: test [rcx+0x48000001], cl; mov edi, [rbx+0x648]; call qword ptr [rbx+0x640]; 
0x0000000010758f: test [rcx+0x48000005], edi; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000018d2ca: test [rcx+0x5], eax; add [rax], al; ret; 
0x000000000c0522: test [rcx+0x8], ebp; add [rax], al; ret; 
0x0000000010f900: test [rcx+rax-0x20], cl; notrack jmp rax; 
0x000000000ba7bf: test [rcx+rax], ch; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000000a7747: test [rcx+rax], dh; add [rax-0x75], cl; jg short 0x00000000000a7798; mov rsi, r12; call rax; 
0x000000000d7aa7: test [rcx+rax], eax; add [rax], al; ret; 
0x000000001a6737: test [rcx+rax], edx; add [rax], al; ret; 
0x000000000d7a77: test [rcx+rax], esi; add [rax], al; ret; 
0x00000000197d68: test [rcx+rcx-0x76b30000], dl; ret far; 
0x0000000010c405: test [rcx+rdi*8-0x1], dh; jmp qword ptr [rsi+0xf]; 
0x0000000018d66a: test [rcx-0x3cffffff], esp; ret; 
0x00000000047572: test [rcx-0x7cffffff], cl; jmp qword ptr [rdi+rcx]; 
0x000000000adacc: test [rcx-0x8ffffd7], cl; ret; 
0x0000000019d776: test [rcx-0xc000002], ch; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000017a916: test [rcx], bh; add al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000193f56: test [rcx], bh; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000015eeca: test [rcx], bl; add al, [rax]; add [rax+0x5d5bc031], dl; pop r12; ret; 
0x00000000179c26: test [rcx], ch; adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000193e66: test [rcx], ch; or eax, 0x894d0000; ret far; 
0x00000000179946: test [rcx], cl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000011b90f: test [rdi+0x48000000], ebx; add esp, 0x68; pop r12; pop r14; ret; 
0x00000000114ef7: test [rdi+0x48000000], ebx; add esp, 0x68; ret; 
0x00000000147cf0: test [rdi+0x48000000], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000165c64: test [rdi+0x48000001], dl; mov eax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000001b43d5: test [rdi+0x80], al; ret; 
0x000000001b6456: test [rdi+0xa0], al; ret; 
0x000000001b6466: test [rdi+0xc0], al; ret; 
0x000000001b642c: test [rdi+0xe0], al; ret; 
0x00000000197f48: test [rdi+rax-0x76b30000], dh; ret far; 
0x000000000792f7: test [rdi+rax], ah; add [rcx-0x7d], al; in al, dx; add [rax-0x8eb43], eax; jmp qword ptr [rax]; 
0x000000000c0687: test [rdi+rax], eax; add [rax], al; ret; 
0x000000000c0667: test [rdi+rax], esp; add [rax], al; ret; 
0x000000000951ca: test [rdi+rcx*4], ah; add [rax], al; add [rax], al; syscall; 
0x000000001b428f: test [rdi+rdi*8-0x1], ch; jmp qword ptr [rsi+0x66]; 
0x000000000f6fe4: test [rdi+rdi*8-0x1], dh; inc ebx; nop [rax+rax]; ret; 
0x000000001b1af7: test [rdi+rdi*8-0x1], dh; jmp qword ptr [rdx-0x4e]; 
0x0000000016ea09: test [rdi+rdi*8-0x1], ebx; jmp far fword ptr [rax-0x7cc98aff]; 
0x00000000130bc7: test [rdi+rdi*8-0x1], edi; call qword ptr [rax]; 
0x00000000131067: test [rdi+rdi*8-0x1], edi; jmp qword ptr [rax]; 
0x00000000143a5e: test [rdi+rdi*8-0x1], edx; inc dword ptr [rax]; add [rax], al; add dh, al; ret; 
0x000000001467fb: test [rdi+rdi*8-0x1], esp; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000005b43e: test [rdi+rdi*8-0x1], esp; jmp qword ptr [rsi]; 
0x0000000010d1c2: test [rdi-0x7d000000], ch; call far fword ptr [rdi+rcx+0xad84]; 
0x000000000c0608: test [rdi], al; add [rax], al; ret; 
0x000000001b5f69: test [rdi], al; loopne 0x00000000001b5f6d; add [rax], al; ret; 
0x000000001b5f86: test [rdi], al; mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x000000000f99a4: test [rdi], bl; add al, [rax]; add [rax-0x7d], cl; ret; 
0x00000000129148: test [rdi], cl; add [rbx+0xc], dh; mov rdx, [rip+0xf84a4]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000000a09cc: test [rdi], dl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000014056a: test [rdi], ebp; add [rax], eax; add [rax-0x75], cl; cmp al, [rcx-0xa]; ret; 
0x0000000019f7a1: test [rdx+0x1], edi; add [rax], al; vzeroupper; ret; 
0x00000000191a19: test [rdx+0x2], eax; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001919e9: test [rdx+0x2], esi; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000029fc9: test [rdx+0x48000000], ah; add esp, 0x98; ret; 
0x00000000113ca4: test [rdx+0x48000000], eax; add esp, 0x10; pop rbp; ret; 
0x00000000149fbc: test [rdx+0x48000000], esp; add esp, 0x110; pop rbx; ret; 
0x0000000011fed1: test [rdx+0x49000000], ecx; mov edi, [rbp]; call rbx; 
0x000000001b37e9: test [rdx+0x4], eax; add [rax], al; ret; 
0x000000001a0209: test [rdx+0x4], eax; add [rax], al; vzeroupper; ret; 
0x000000000c0821: test [rdx+0x5], ebp; add [rax], al; ret; 
0x0000000017b4c7: test [rdx+0x6], edi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000c1c69: test [rdx+0x9], esi; add [rax], al; ret; 
0x00000000196c98: test [rdx+rbx], ah; add [rbp-0x77], cl; ret far; 
0x0000000007b21a: test [rdx+rbx], ah; add [rcx-0x7d], al; call qword ptr [rbx+0xf]; 
0x000000000956ec: test [rdx+rdi*8+0x40a8ffff], dl; jne short 0x0000000000095713; xor edi, edi; mov eax, 0x91; syscall; 
0x0000000015ea81: test [rdx+rdx*4], ah; add [rax], eax; add [rax-0x75], cl; and al, 0x28; call rax; 
0x00000000191fc9: test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000005d4a5: test [rdx-0x16000027], ebp; stosd [rdi]; loop 0x000000000005d4ad; call qword ptr [rax+0x2085c748]; 
0x0000000004cc72: test [rdx-0x47fffff4], ebp; add [rax], al; add [rax+0x63], cl; ret far; 
0x000000000592cb: test [rdx-0x7cfffffc], eax; ret; 
0x000000001918d1: test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000001918a9: test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000001919b9: test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000199471: test [rdx-0xd000000], bh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001ae6b1: test [rdx-0xd000000], ch; bsf eax, eax; add rax, rdi; ret; 
0x000000000cd2b7: test [rdx], al; or [rax], eax; add [rbx-0x7bf0d402], al; ret; 
0x0000000018d587: test [rdx], eax; add [rax], al; ret; 
0x00000000055fe1: test [rdx], eax; add al, [rax]; add [rcx-0x73], cl; or [r8+0x39], r9b; ret; 
0x00000000191929: test [rdx], esi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000ec93a: test [rip+0x48000005], edx; add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000163686: test [rip+0x49000001], ah; mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000011fe9e: test [rip+0x49000001], ebx; mov edi, [rbp]; call rbx; 
0x000000000b51ee: test [rip+0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000010086c: test [rip-0x17fffffa], bh; cli; jp short 0x0000000000100867; jmp qword ptr [rsi+0xf]; 
0x00000000099228: test [rip-0x38ffffff], ecx; add al, 0x0; add [rax], al; add [rcx], bh; ret; 
0x0000000019998e: test [rip-0x3affffff], ebp; std; xlat [rbx]; ret; 
0x0000000009958e: test [rip-0x47fffffd], ebp; add [rax], eax; add [rax], al; ret; 
0x0000000006bee0: test [rip-0x7cbf0000], dl; cld; dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000001a60c2: test [rsi+0x1], ebp; add [rax], al; xor eax, eax; ret; 
0x000000001a04d5: test [rsi+0x1], esi; add [rax], al; vzeroupper; ret; 
0x00000000042f87: test [rsi+0x1d], ebx; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000019941d: test [rsi+0x29fffffe], ebx; enter 0xf8c5, 0x77; ret; 
0x000000001b085d: test [rsi+0x2], ebx; add [rax], al; ret; 
0x000000001b39dd: test [rsi+0x2], ecx; add [rax], al; ret; 
0x000000000bac0d: test [rsi+0x48000000], bl; bsf eax, edx; ret; 
0x00000000173aab: test [rsi+0x48000000], eax; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000d80ad: test [rsi+0x48000000], edi; lea eax, [rdi-0x10]; ret; 
0x0000000014a257: test [rsi+0x48000000], esp; add esp, 0x110; pop rbx; ret; 
0x00000000166703: test [rsi+0x5], bl; add [rax], al; mov rax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x000000000b4fdd: test [rsi+0x66000000], ebp; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000c0645: test [rsi+0x7], eax; add [rax], al; ret; 
0x000000000c0625: test [rsi+0x7], esp; add [rax], al; ret; 
0x000000000c053d: test [rsi+0x8], ecx; add [rax], al; ret; 
0x000000000dd5b8: test [rsi+rdi*8+0xf66ffff], edi; outsb dx, [rsi]; shl byte ptr [rsi+0xf], 0x62; ret; 
0x000000000b5867: test [rsi+rdi*8-0x1], dh; dec dword ptr [rbp-0x77]; fucompp; ret; 
0x00000000197048: test [rsi+rdx-0x76b30000], dh; ret far; 
0x000000000f346c: test [rsi+rsi*8-0x4d160001], al; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000076ff4: test [rsi-0x16000014], edi; stosb [rdi]; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000065435: test [rsi-0x76000020], ecx; ret; 
0x0000000010d1d9: test [rsi-0x7d000000], ah; call far fword ptr [rcx+0xa4840f]; 
0x000000000af2fb: test [rsi-0x8ffffe7], ah; ret; 
0x000000000af307: test [rsi-0x8ffffe7], al; ret; 
0x0000000013acf8: test [rsi-0xb], ah; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000008915a: test [rsi], al; cli; jmp qword ptr [rsi-0x70]; 
0x0000000019c08e: test [rsi], ch; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000019bd8e: test [rsi], ch; adc eax, 0x894d0000; ret far; 
0x0000000010fcd5: test [rsi], ch; add al, [rax]; add [rcx-0x80], al; jmp qword ptr [rdi]; 
0x0000000019cf8e: test [rsi], ch; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000010639d: test [rsi], ch; add eax, [rax]; add [rbx+0x634c01c3], al; ret; 
0x0000000019c98e: test [rsi], ch; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000019c68e: test [rsi], ch; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000010fd34: test [rsi], dh; or al, [rax]; add [rcx-0x80], al; call far fword ptr [rdi+rcx-0x7c]; 
0x000000000ff4bf: test [rsp+rax], ah; add al, [rax]; add [rcx], bh; ret; 
0x00000000196ab8: test [rsp+rbx], al; add [rbp-0x77], cl; ret far; 
0x000000000d52a2: test [rsp+rdi*8-0x1], ch; jmp qword ptr [rsi+0xf]; 
0x000000000ffb61: test [rsp+rdi*8], ah; add [rax], eax; add [rcx], bh; ret; 
0x000000000ee5e8: test [rsp+rdx-0x76b80000], al; ret far; 
0x000000001a49e6: test ah, 0x40; jne 0x00000000001a4ad0; lea rax, [rdi+0xf]; ret; 
0x00000000155ad0: test ah, ch; or al, 0x0; mov byte ptr [rip+0xcec85], 0x0; call rbx; 
0x00000000197408: test ah, dh; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000198308: test ah, dh; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000197228: test ah, dl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000198128: test ah, dl; add eax, 0x894d0000; ret far; 
0x00000000162ee0: test al, 0x0; add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x000000000454d4: test al, 0x0; add [rax], al; call rax; 
0x00000000162da2: test al, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x000000000e6ad1: test al, 0x0; add [rax], al; pop rbp; pop r12; ret; 
0x00000000168c13: test al, 0x0; add [rax], al; pop rbx; ret; 
0x000000000388c4: test al, 0x0; add [rax], al; ret; 
0x0000000011bf05: test al, 0x0; add [rax], al; syscall; 
0x0000000016195f: test al, 0x0; add [rbp-0x3f6af040], al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001b0914: test al, 0x1; add [rax], al; ret; 
0x0000000009aed4: test al, 0x1; jne short 0x000000000009aee0; xor eax, eax; ret; 
0x0000000009af90: test al, 0x1; jne short 0x000000000009af68; mov eax, 0x10; ret; 
0x0000000015d5ef: test al, 0x22; add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x0000000009a046: test al, 0x2; je short 0x000000000009a050; xor eax, eax; ret; 
0x0000000005a16c: test al, 0x3; add [rax], al; mov rsp, rdx; ret; 
0x000000001a4994: test al, 0x40; jne 0x00000000001a4a60; lea rax, [rdi+0x7]; ret; 
0x000000000956f1: test al, 0x40; jne short 0x0000000000095713; xor edi, edi; mov eax, 0x91; syscall; 
0x000000001204e0: test al, 0x45; mov edi, ebp; call rax; 
0x00000000134651: test al, 0x7; add [rax-0x73], cl; add eax, 0x7a8b4; cmove rax, rdx; ret; 
0x000000000f700e: test al, 0x83; jrcxz 0x00000000000f701a; je short 0x00000000000f6f97; pop rbx; ret; 
0x0000000009edc4: test al, 0x95; clc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000184a24: test al, 0xed; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000d8005: test al, 0xf0; jne 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x000000000d8118: test al, 0xf0; jne short 0x00000000000d8170; lea rax, [rdi-0x10]; ret; 
0x0000000010f5ec: test al, 0xf2; call qword ptr [rax+0x48247c80]; 
0x000000001262bc: test al, 0xf6; dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret; 
0x000000000ca61a: test al, 0xf8; dec dword ptr [rax-0x7d]; ret; 
0x0000000015ca8a: test al, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000000b947c: test al, ah; or eax, 0x894d0000; ret far; 
0x00000000187e1c: test al, al; and [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000090327: test al, al; je short 0x0000000000090336; mov rdi, r14; call qword ptr [r12+0x360]; 
0x0000000009c09d: test al, al; je short 0x000000000009c0b0; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b308a: test al, al; jne short 0x00000000000b3070; xor eax, eax; sub eax, ecx; ret; 
0x000000000f0261: test al, al; jne short 0x00000000000f0201; xor eax, eax; ret; 
0x00000000134a86: test al, al; jne short 0x0000000000134a31; mov rax, r9; ret; 
0x00000000149abc: test al, al; jne short 0x0000000000149aa4; mov eax, r10d; ret; 
0x000000001bbb69: test al, al; jne short 0x00000000001bbb70; pop rbp; ret; 
0x0000000018871c: test al, al; sbb [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000b869c: test al, al; sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000002b24b: test al, ch; add eax, [rax]; add [rax-0x77], cl; ret; 
0x0000000016f2a4: test al, ch; jbe short 0x000000000016f31c; cld; jmp qword ptr [rsi+0xf]; 
0x000000000fc683: test al, cl; add al, [rax]; add [rax-0x7d], cl; ret; 
0x000000000b8d8c: test al, dl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000007d35e: test ax, ax; je short 0x000000000007d370; lea rdx, [rip+0x1547d6]; add rax, rdx; ret; 
0x0000000016a593: test bh, 0x43; adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000007f5d3: test bh, al; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000072d6c: test bh, ch; add [rax], al; add [rbx-0x89f63], cl; dec dword ptr [rbx-0x8b773]; jmp far fword ptr [rcx]; 
0x000000000f9a74: test bh, dh; add [rax], al; add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x0000000004b968: test bl, al; or eax, [rax]; add [rax-0x80], al; jmp far fword ptr [rbx]; 
0x000000001172c0: test bl, cl; add [rax], al; add al, ch; xchg esi, eax; ret far; 
0x00000000104493: test bl, dh; adc [rax], al; add [rax-0x77], cl; ret; 
0x0000000013b506: test byte ptr [r9+r11*2+0x1], 0x20; je 0x000000000013b486; mov [rax+0x5], dl; pop rbx; ret; 
0x0000000017cbd9: test byte ptr [r9-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000015fd6d: test byte ptr [rax+0x1], 0xc6; cmp rsi, [rdx+0x28]; ja short 0x000000000015fd60; mov [rdx+0x20], rsi; ret; 
0x000000000a93a2: test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x1ae50]; cmove rax, rdx; ret; 
0x000000000c52ab: test byte ptr [rax+0x1a5], 0x80; je short 0x00000000000c52bb; or dword ptr [rip+0x15b2dd], 0x1; xor eax, eax; ret; 
0x000000000eca32: test byte ptr [rax+0x63], 0x4; mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000000c5502: test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x127c0]; cmovne rax, rdx; ret; 
0x000000000a8b92: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bc60]; cmovne rax, rdx; ret; 
0x000000000a8a72: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1bcd0]; cmovne rax, rdx; ret; 
0x000000000a84b2: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x1c1e0]; cmovne rax, rdx; ret; 
0x0000000013196d: test byte ptr [rax-0x77], 0xc2; call qword ptr [r15+0x28]; 
0x0000000008004f: test byte ptr [rax-0x77], 0xdf; call qword ptr [r15+0x38]; 
0x0000000013b5bf: test byte ptr [rax-0x77], 0xdf; call qword ptr [rsp+0x28]; 
0x00000000153c40: test byte ptr [rax-0x77], 0xdf; mov rcx, r15; call r12; 
0x00000000088350: test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x0000000015e2ea: test byte ptr [rax-0x77], 0xef; call qword ptr [rax+0x28]; 
0x0000000007ed5a: test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000016d011: test byte ptr [rax-0x77], 0xef; call r12; 
0x00000000113ccb: test byte ptr [rax-0x77], 0xef; call rax; 
0x0000000015d5d1: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d552: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000113d03: test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall; 
0x00000000097be3: test byte ptr [rax-0x77], 0xef; mov eax, r13d; syscall; 
0x00000000096ea3: test byte ptr [rax-0x77], 0xef; mov eax, r15d; syscall; 
0x0000000008b27e: test byte ptr [rax-0x77], 0xef; sub r12, r14; call qword ptr [rax+0x40]; 
0x000000001987cd: test byte ptr [rbp+0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000421b6: test byte ptr [rbp-0x6bf0bf40], 0xc6; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x0000000008e7f6: test byte ptr [rbp], 0x80; jne short 0x000000000008e810; pop rbp; ret; 
0x00000000132abe: test byte ptr [rbx+0x1c], 0x20; je short 0x0000000000132ad0; pop rbx; ret; 
0x000000000a79b5: test byte ptr [rbx+0x50], 0x1; jne short 0x00000000000a7990; mov rdi, rsi; call rax; 
0x0000000017cbb6: test byte ptr [rbx-0x76b303aa], 0x5f; out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017cbd2: test byte ptr [rbx-0x76b703aa], 0x4f; test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000016cca5: test byte ptr [rcx+0x14c2847], 0xc6; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000519c0: test byte ptr [rcx+0x63], 0x34; mov al, 0x4c; add esi, eax; notrack jmp rsi; 
0x00000000092b21: test byte ptr [rcx+0xc741], 0x0; add [rax], al; syscall; 
0x00000000093a26: test byte ptr [rcx+0xcab8], 0x0; syscall; 
0x000000001b8d23: test byte ptr [rcx+0xf], 0x95; ret; 
0x0000000013b507: test byte ptr [rcx+rbx*2+0x1], 0x20; je 0x000000000013b486; mov [rax+0x5], dl; pop rbx; ret; 
0x00000000055b9a: test byte ptr [rcx+rcx*4+0x54], 0x24; adc al, ch; ret far; 
0x00000000148cf2: test byte ptr [rcx+rcx*4-0x11], 0xe8; jne short 0x0000000000148cf2; in eax, dx; jmp qword ptr [rsi+0xf]; 
0x0000000015b79d: test byte ptr [rcx+rcx*4-0x11], 0xe8; mov ah, [rsi-0x10]; dec dword ptr [rax-0x77]; ret; 
0x0000000015b675: test byte ptr [rcx+rcx*4-0x11], 0xe8; mov dl, 0x67; lock dec dword ptr [rax-0x77]; ret; 
0x00000000088511: test byte ptr [rcx+rcx*4-0x11], 0xe8; xchg esi, eax; ret far; 
0x0000000016b2a5: test byte ptr [rcx+rcx*4-0x19], 0x41; call rbp; 
0x0000000005bff3: test byte ptr [rcx+rcx*4-0x19], 0x4c; mov [rbp-0xe8], eax; call rax; 
0x00000000153649: test byte ptr [rcx+rcx*4-0x1], 0x48; mov [rsp+0x8], ecx; call rbp; 
0x0000000013d48c: test byte ptr [rcx+rcx*4-0x1], 0xc7; and al, 0x40; add byte ptr [rax], 0x0; add al, ch; ret; 
0x0000000014ed7c: test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x000000000913a6: test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x0000000017cbda: test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001b30e6: test byte ptr [rcx], 0x0; add [rdx-0x4e], ah; and gs:[rsi], ah; ret far; 
0x00000000099975: test byte ptr [rdi+0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000a7742: test byte ptr [rdi+0x50], 0x1; je 0x00000000000a78c0; mov rdi, [rdi+0x48]; mov rsi, r12; call rax; 
0x00000000083c0f: test byte ptr [rdi], 0x2; jne short 0x0000000000083c88; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x000000000891f6: test byte ptr [rdi], 0x4; sete al; ret; 
0x0000000008d334: test byte ptr [rdi], 0x80; jne short 0x000000000008d340; ret; 
0x000000000e1dcb: test byte ptr [rdi], 0x84; ret; 
0x0000000009a396: test byte ptr [rdi], 0x85; ret; 
0x0000000014567b: test byte ptr [rdi], 0x88; cmp esi, 0x8b48ffff; add al, 0x24; mov rdi, r15; call rax; 
0x00000000089206: test byte ptr [rdi], 0x8; sete al; ret; 
0x000000000cda41: test byte ptr [rdi], 0x94; shr ecx, 0xdf; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000000f7b46: test byte ptr [rdx+0x63], 0x4; mov dl, 0x48; add eax, edx; notrack jmp rax; 
0x000000000a9a00: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x15e12]; lea rdx, [rip+0xe492b]; cmovne rax, rdx; ret; 
0x000000000a8440: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x172e2]; lea rdx, [rip+0xe1bbb]; cmovne rax, rdx; ret; 
0x000000000a8280: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x1a512]; lea rdx, [rip+0x12afb]; cmovne rax, rdx; ret; 
0x000000000a9a90: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x7e32]; lea rdx, [rip+0xe60ab]; cmovne rax, rdx; ret; 
0x000000000a8980: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x8fb2]; lea rdx, [rip+0xe2e2b]; cmovne rax, rdx; ret; 
0x000000000a8850: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x9022]; lea rdx, [rip+0x1414b]; cmovne rax, rdx; ret; 
0x000000000a8390: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x9602]; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x000000000c6d6f: test byte ptr [rdx+0x9e], 0x8; lea rax, [rip+0x11873]; lea rdx, [rip+0x118ac]; cmovne rax, rdx; ret; 
0x000000000c55df: test byte ptr [rdx+0x9e], 0x8; lea rax, [rip+0x12bc3]; lea rdx, [rip+0x12e5c]; cmovne rax, rdx; ret; 
0x000000000f702e: test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000f6f5d; ret; 
0x000000000f6fdc: test byte ptr [rdx+0xc8], 0x80; je 0x00000000000f6f5d; ret; 
0x000000000a833c: test ch, 0x4; jne short 0x00000000000a8305; ret; 
0x0000000015530e: test ch, bl; sar ch, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x0000000019691b: test cl, ah; sbb eax, 0x894d0000; ret far; 
0x00000000194a96: test cl, bh; add [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000b135a: test cl, bh; jne short 0x00000000000b1338; ret; 
0x0000000017a356: test cl, bh; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000001948b6: test cl, bl; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000017a076: test cl, bl; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000b36f6: test cl, ch; adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000b33f6: test cl, ch; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000001949a6: test cl, ch; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000b45f6: test cl, ch; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000b42f6: test cl, ch; add eax, 0x894d0000; ret far; 
0x000000000b3ff6: test cl, ch; or [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000b3cf6: test cl, ch; or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000017aa86: test cl, cl; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001947c6: test cl, cl; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000b12fc: test cl, cl; je short 0x00000000000b1308; cmp ecx, edx; jne short 0x00000000000b12f0; ret; 
0x000000000c42ef: test cl, cl; jne short 0x00000000000c42e0; ret; 
0x000000000c439f: test cl, cl; jne short 0x00000000000c4390; ret; 
0x000000000c465f: test cl, cl; jne short 0x00000000000c4650; sub rax, 0x1; ret; 
0x000000001a4907: test dh, 0x40; jne 0x00000000001a4840; lea rax, [rdi+0xf]; ret; 
0x000000000a02bd: test dh, 0x40; jne short 0x00000000000a02f0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000001a494d: test dh, 0x4; jne 0x00000000001a4840; lea rax, [rdi+0xb]; ret; 
0x000000000ba725: test dh, al; add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000065e8f: test dh, bh; add [rax], al; add [rbx-0x66773], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000015f83c: test dh, bh; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x00000000148e08: test dh, dh; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x000000000b103d: test dh, dh; jne short 0x00000000000b1030; mov [rdx], rcx; ret; 
0x0000000002d0b9: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000001a4884: test dl, 0x40; jne short 0x00000000001a4840; lea rax, [rdi+0x7]; ret; 
0x000000001a48b2: test dl, 0x4; jne short 0x00000000001a4840; lea rax, [rdi+0x3]; ret; 
0x00000000107eb1: test dl, al; add [rax], eax; add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret; 
0x00000000033ea7: test dl, bh; add [rax], al; add [rcx-0x73], cl; add cl, [rax+0x39]; ret far; 
0x0000000013fe89: test dl, bl; add [rax], al; add [rcx-0xa], al; ret; 
0x0000000007f6d2: test dl, cl; add [rax], al; add [rax-0x77], cl; ret; 
0x000000000b120e: test dl, cl; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x000000001568d5: test dl, dh; jmp qword ptr [rdi+rax*8+0x3]; 
0x000000000404eb: test dl, dl; jne short 0x00000000000404c8; ret; 
0x000000000c450f: test dl, dl; jne short 0x00000000000c4500; lea rax, [rcx-0x1]; ret; 
0x000000000abd04: test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x00000000149624: test dword ptr [rax+rax], 0x5a00c764; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000073ef2: test dword ptr [rax+rcx*4-0x73], 0xfffff700; mov [rbp-0x8f8], r8b; call rax; 
0x000000001204dd: test dword ptr [rax-0x75], 0x8945a845; out dx, eax; call rax; 
0x00000000164a69: test dword ptr [rax-0x75], 0x8b490847; jo short 0x0000000000164ab2; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000012674b: test dword ptr [rax-0x77], 0xca8948d6; cmp r9d, 0x1; ja short 0x0000000000126788; mov eax, 0x106; syscall; 
0x0000000011ea29: test dword ptr [rax-0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x00000000126629: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x2d], esi; mov eax, 0x4; syscall; 
0x000000001266e9: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x2d], esi; mov eax, 0x6; syscall; 
0x00000000126688: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x2e], esi; mov eax, 0x5; syscall; 
0x0000000011d2f9: test dword ptr [rax-0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000ea507: test dword ptr [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000ea580; ret; 
0x000000000f9a75: test dword ptr [rax], 0x89480000; fmul st, dword ptr [rax-0x7d]; ret; 
0x0000000017eb15: test dword ptr [rbp+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000b7d62: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x11b22f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b5af2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x11d41f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b3142: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x11fd4f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000000b1a22: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x1213ef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000187bd2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x4b3ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000185a52: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x4d4ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x000000001796a2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x5982f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x00000000178412: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x5aa3f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000008364f: test dword ptr [rbp-0x3dbaf013], 0x48744389; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000017c9f3: test dword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000182313: test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000139305: test dword ptr [rcx+rcx*4+0x44], 0xe80c24; mov al, [0x850c24448b440001]; ror byte ptr [rdi], 0x85; ret; 
0x0000000004e239: test dword ptr [rcx+rcx-0x1], 0xfffd6ae9; jmp qword ptr [rsi+0xf]; 
0x0000000010692f: test dword ptr [rcx-0x77], 0x1a38e8c4; call far fword ptr [rax+0x5a]; 
0x0000000010683d: test dword ptr [rcx-0x77], 0x1b2ae8c4; call far fword ptr [rax+0x5a]; 
0x000000001b567c: test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000010141e: test dword ptr [rdi], 0xb60fc094; ror byte ptr [rbp-0x7600ffbc], 0x4; and al, 0xe8; jmp qword ptr [rdi+rdi*8-0x1]; 
0x00000000099895: test dword ptr [rdi], 0xfffd7384; call qword ptr [rax+0x48]; 
0x000000000c5d54: test dword ptr [rdx], 0x7d8b4900; add [rdi], cl; mov dh, 0xf3; call rbp; 
0x000000001840c7: test dword ptr [rip+0x14634900], 0x148d4993; adc edi, [rsi]; jmp rdx; 
0x000000001bb6dd: test dword ptr [rip+0x552be800], 0x485bfff6; mov dword ptr [rip+0x5f7cf], 0x0; ret; 
0x000000000d8081: test eax, 0x1; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x000000000d8131: test eax, 0x1; je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x000000000fa055: test eax, 0x315bffff; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000000b1054: test eax, 0x48001f0f; mov ecx, eax; xor eax, eax; mov [rdx], rcx; ret; 
0x000000001afce5: test eax, 0x5974c085; tzcnt eax, eax; add rax, rcx; ret; 
0x00000000199763: test eax, 0x5b74c085; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000015da5c: test eax, 0x5d90ffec; ret; 
0x0000000010f5e7: test eax, 0x61e8000c; test al, 0xf2; call qword ptr [rax+0x48247c80]; 
0x00000000126663: test eax, 0x64000f27; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cb63: test eax, 0x640017c2; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012614f: test eax, 0x8b48fff6; add al, 0x24; add rsp, 0x28; ret; 
0x000000001bab18: test eax, 0x8b49fffb; jge short 0x00000000001bab2f; add rdi, rbp; call r12; 
0x00000000134522: test eax, 0x8d480007; add eax, 0x7a9e4; cmove rax, rdx; ret; 
0x0000000019d777: test eax, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000126163: test eax, 0xf7000f2c; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000125e63: test eax, 0xf7000f2f; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000011ac63: test eax, 0xf7000fe1; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000115163: test eax, 0xf700103c; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000112963: test eax, 0xf7001064; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000c4678: test eax, 0xfffd3be9; jmp qword ptr [rsi-0x70]; 
0x00000000121c93: test eax, eax; cmove eax, edx; add rsp, 0x8; ret; 
0x00000000122171: test eax, eax; cmove eax, edx; ret; 
0x00000000091ef9: test eax, eax; cmovne eax, edx; ret; 
0x0000000011a90a: test eax, eax; cmovns eax, edx; ret; 
0x00000000045e7d: test eax, eax; cmovs eax, edx; ret; 
0x0000000012e3de: test eax, eax; cmovs rax, rdx; ret; 
0x00000000164ea7: test eax, eax; je 0x0000000000029bf3; mov rax, [rsp+0x48]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000121629: test eax, eax; je 0x00000000001216d0; call rax; 
0x0000000015e2a5: test eax, eax; je 0x000000000015e21f; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e9ea: test eax, eax; je 0x000000000015e85e; mov rdi, rbx; call rax; 
0x0000000015f839: test eax, eax; je 0x000000000015f93f; mov rdi, r12; call qword ptr [rbx]; 
0x00000000163683: test eax, eax; je 0x00000000001637b0; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000016615b: test eax, eax; je 0x0000000000166260; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000166700: test eax, eax; je 0x0000000000166c66; mov rax, [rbx+0x60]; mov rdi, r15; call qword ptr [rax+0x20]; 
0x0000000019dac2: test eax, eax; je 0x000000000019d9e4; tzcnt eax, eax; vzeroupper; ret; 
0x000000001ae6ae: test eax, eax; je 0x00000000001ae760; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b1949: test eax, eax; je 0x00000000001b17c4; tzcnt eax, eax; add rax, rdx; ret; 
0x000000001b2387: test eax, eax; je 0x00000000001b22a7; tzcnt eax, eax; ret; 
0x000000001b4bef: test eax, eax; je 0x00000000001b4b07; tzcnt eax, eax; ret; 
0x000000001b572e: test eax, eax; je 0x00000000001b5800; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b5d6e: test eax, eax; je 0x00000000001b5e20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b620e: test eax, eax; je 0x00000000001b62e0; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000036b08: test eax, eax; je short 0x0000000000036b0e; call rax; 
0x00000000037efd: test eax, eax; je short 0x0000000000037f03; call rax; 
0x00000000061f98: test eax, eax; je short 0x0000000000061fe0; mov eax, 0x13c; syscall; 
0x0000000007d35f: test eax, eax; je short 0x000000000007d370; lea rdx, [rip+0x1547d6]; add rax, rdx; ret; 
0x0000000007f7c9: test eax, eax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f802: test eax, eax; je short 0x000000000007f817; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000007f852: test eax, eax; je short 0x000000000007f878; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000007f8a9: test eax, eax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000008a681: test eax, eax; je short 0x000000000008a690; pop rbx; ret; 
0x0000000008e6b4: test eax, eax; je short 0x000000000008e6c7; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000000921e8: test eax, eax; je short 0x00000000000921f0; xor eax, eax; pop rbx; ret; 
0x000000000a7a90: test eax, eax; je short 0x00000000000a7ac8; add rsp, 0x10; pop r12; ret; 
0x000000000b515a: test eax, eax; je short 0x00000000000b5130; bsr eax, eax; add rax, rdi; ret; 
0x000000000ba503: test eax, eax; je short 0x00000000000ba510; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000000e566f: test eax, eax; je short 0x00000000000e56a0; call rax; 
0x000000000e56d3: test eax, eax; je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x000000000eafb2: test eax, eax; je short 0x00000000000eafb8; call rax; 
0x000000000eb02b: test eax, eax; je short 0x00000000000eb031; call rax; 
0x000000000eb073: test eax, eax; je short 0x00000000000eb079; call rax; 
0x00000000113d50: test eax, eax; je short 0x0000000000113d88; xor edx, edx; call rax; 
0x0000000011b380: test eax, eax; je short 0x000000000011b385; ret; 
0x0000000011d215: test eax, eax; je short 0x000000000011d21c; mov [rax], rdx; ret; 
0x0000000012146f: test eax, eax; je short 0x00000000001214b0; call rax; 
0x00000000121c6d: test eax, eax; je short 0x0000000000121c80; add rsp, 0x8; ret; 
0x00000000132aaf: test eax, eax; je short 0x0000000000132ae0; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x000000001355ee: test eax, eax; je short 0x0000000000135600; add rsp, 0x8; ret; 
0x0000000013e66d: test eax, eax; je short 0x000000000013e676; mov rdi, rbx; call rax; 
0x0000000013e9ad: test eax, eax; je short 0x000000000013e9b6; mov rdi, rbx; call rax; 
0x0000000013ea5d: test eax, eax; je short 0x000000000013ea6a; lea rdi, [rip+0xe34b8]; call rax; 
0x0000000014a633: test eax, eax; je short 0x000000000014a640; ret; 
0x000000001522fd: test eax, eax; je short 0x0000000000152307; cmp [rax+0x10], rdi; jne short 0x00000000001522f8; ret; 
0x00000000156f41: test eax, eax; je short 0x0000000000156f50; mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x0000000015d2f4: test eax, eax; je short 0x000000000015d2fd; mov rdi, rbp; call rax; 
0x0000000015d74b: test eax, eax; je short 0x000000000015d754; mov rdi, rbp; call rax; 
0x0000000015d72e: test eax, eax; je short 0x000000000015d7a0; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015da7a: test eax, eax; je short 0x000000000015da80; ret; 
0x0000000015e288: test eax, eax; je short 0x000000000015e21f; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015e740: test eax, eax; je short 0x000000000015e6e7; mov rax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000015e762: test eax, eax; je short 0x000000000015e76b; mov rdi, rbx; call rax; 
0x0000000015ead8: test eax, eax; je short 0x000000000015eae1; mov rdi, rbx; call rax; 
0x0000000015ecf5: test eax, eax; je short 0x000000000015ed00; xor eax, eax; ret; 
0x0000000015f2f6: test eax, eax; je short 0x000000000015f2ff; mov rdi, r13; call rax; 
0x0000000015f667: test eax, eax; je short 0x000000000015f688; mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000162c65: test eax, eax; je short 0x0000000000162c72; lea rdi, [rbp+0xc8]; call rax; 
0x000000001636ab: test eax, eax; je short 0x00000000001636b4; mov rdi, rbp; call rax; 
0x00000000163890: test eax, eax; je short 0x000000000016389b; lea rdi, [r12+0x10]; call rax; 
0x00000000164b4f: test eax, eax; je short 0x0000000000164b58; mov rdi, rbp; call rax; 
0x00000000164d24: test eax, eax; je short 0x0000000000164d2d; mov rdi, r13; call rax; 
0x00000000165a52: test eax, eax; je short 0x0000000000165a5c; lea rdi, [rbp+0x68]; call rax; 
0x0000000016617a: test eax, eax; je short 0x0000000000166183; mov rdi, rbp; call rax; 
0x000000001664f2: test eax, eax; je short 0x00000000001664fc; lea rdi, [rbp+0x58]; call rax; 
0x00000000166ea3: test eax, eax; je short 0x0000000000166f20; mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000167153: test eax, eax; je short 0x00000000001671d0; mov rax, [rbp+0x60]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000167f43: test eax, eax; je short 0x0000000000167f55; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000168a6c: test eax, eax; je short 0x0000000000168a35; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000168a31: test eax, eax; je short 0x0000000000168a40; pop rbx; ret; 
0x00000000168ae4: test eax, eax; je short 0x0000000000168aa1; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000169a10: test eax, eax; je short 0x0000000000169a1b; lea rdi, [r12+0x10]; call rax; 
0x0000000016a1a9: test eax, eax; je short 0x000000000016a1b4; lea rdi, [r12+0x10]; call rax; 
0x0000000016a226: test eax, eax; je short 0x000000000016a260; mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000016c953: test eax, eax; je short 0x000000000016c980; mov eax, r8d; ret; 
0x0000000016c9a3: test eax, eax; je short 0x000000000016c9d0; mov eax, r8d; ret; 
0x00000000174ea6: test eax, eax; je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x00000000193b83: test eax, eax; je short 0x0000000000193b88; xchg edx, eax; sub eax, edx; ret; 
0x00000000194b68: test eax, eax; je short 0x0000000000194b6d; xchg edx, eax; sub eax, edx; ret; 
0x000000001988fc: test eax, eax; je short 0x00000000001988e0; movsxd rcx, ecx; lea rax, [rdi+rcx]; ret; 
0x0000000019d985: test eax, eax; je short 0x000000000019d9e0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000019db13: test eax, eax; je short 0x000000000019db80; tzcnt eax, eax; vzeroupper; ret; 
0x000000001ae714: test eax, eax; je short 0x00000000001ae760; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001af9bb: test eax, eax; je short 0x00000000001af990; bsr eax, eax; add rax, rdi; ret; 
0x000000001afcc3: test eax, eax; je short 0x00000000001afd40; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001afce7: test eax, eax; je short 0x00000000001afd44; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001b173f: test eax, eax; je short 0x00000000001b17c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b2247: test eax, eax; je short 0x00000000001b22a0; tzcnt eax, eax; ret; 
0x000000001b3eb5: test eax, eax; je short 0x00000000001b3f20; tzcnt eax, eax; ret; 
0x000000001b42ed: test eax, eax; je short 0x00000000001b42a4; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x000000001b4312: test eax, eax; je short 0x00000000001b4320; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x000000001b4aa7: test eax, eax; je short 0x00000000001b4b00; tzcnt eax, eax; ret; 
0x000000001b5215: test eax, eax; je short 0x00000000001b5280; tzcnt eax, eax; ret; 
0x000000001b56bd: test eax, eax; je short 0x00000000001b5674; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b56e2: test eax, eax; je short 0x00000000001b56f0; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x000000001b579a: test eax, eax; je short 0x00000000001b5800; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b5dd4: test eax, eax; je short 0x00000000001b5e20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6063: test eax, eax; je short 0x00000000001b60e0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b6087: test eax, eax; je short 0x00000000001b60e4; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001b627a: test eax, eax; je short 0x00000000001b62e0; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001bb2aa: test eax, eax; je short 0x00000000001bb2b0; call rax; 
0x000000001bb3d9: test eax, eax; je short 0x00000000001bb3e4; call rax; 
0x00000000125ba7: test eax, eax; jl short 0x0000000000125bbe; je short 0x0000000000125bae; ret; 
0x000000001269ee: test eax, eax; jl short 0x0000000000126a0a; je short 0x00000000001269f5; ret; 
0x0000000009958b: test eax, eax; jne 0x00000000000998c0; mov eax, 0x1; ret; 
0x000000000b4b65: test eax, eax; jne 0x00000000000b4c10; xor eax, eax; ret; 
0x000000000d6df5: test eax, eax; jne 0x00000000000d6ed0; xor eax, eax; ret; 
0x00000000174c14: test eax, eax; jne 0x0000000000174c98; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x00000000198ef1: test eax, eax; jne 0x0000000000198de0; sub eax, ecx; vzeroupper; ret; 
0x0000000019941a: test eax, eax; jne 0x00000000001992c0; sub eax, ecx; vzeroupper; ret; 
0x000000001a1d6a: test eax, eax; jne 0x00000000001a1ca0; sub eax, ecx; vzeroupper; ret; 
0x000000001a2295: test eax, eax; jne 0x00000000001a2180; sub eax, ecx; vzeroupper; ret; 
0x000000001b1dc1: test eax, eax; jne 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b341a: test eax, eax; jne 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b4a63: test eax, eax; jne 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b51d2: test eax, eax; jne 0x00000000001b50c0; sub eax, ecx; ret; 
0x00000000042476: test eax, eax; jne short 0x0000000000042480; pop rbp; ret; 
0x0000000004271d: test eax, eax; jne short 0x0000000000042730; add rsp, 0x8; ret; 
0x000000000427cc: test eax, eax; jne short 0x00000000000427e8; mov esi, 0x8; mov eax, 0x82; syscall; 
0x000000000431a7: test eax, eax; jne short 0x00000000000431f0; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000046c7c: test eax, eax; jne short 0x0000000000046c90; mov eax, 0x13e; syscall; 
0x000000000612ca: test eax, eax; jne short 0x00000000000612d0; pop rbx; ret; 
0x0000000008e654: test eax, eax; jne short 0x000000000008e648; ret; 
0x0000000008f1cc: test eax, eax; jne short 0x000000000008f1c0; ret; 
0x00000000090fd6: test eax, eax; jne short 0x0000000000090fe0; xend; xor eax, eax; ret; 
0x0000000009e62e: test eax, eax; jne short 0x000000000009e620; ret; 
0x0000000009e745: test eax, eax; jne short 0x000000000009e738; ret; 
0x000000000a03cf: test eax, eax; jne short 0x00000000000a03e8; mov eax, 0xf3; syscall; 
0x000000000a048f: test eax, eax; jne short 0x00000000000a04a8; mov eax, 0xf2; syscall; 
0x000000000a794f: test eax, eax; jne short 0x00000000000a7940; xor eax, eax; ret; 
0x000000000b4b95: test eax, eax; jne short 0x00000000000b4bf0; xor eax, eax; ret; 
0x000000000b5048: test eax, eax; jne short 0x00000000000b50c0; xor eax, eax; ret; 
0x000000000b5077: test eax, eax; jne short 0x00000000000b50f0; xor eax, eax; ret; 
0x000000000d6e25: test eax, eax; jne short 0x00000000000d6e90; xor eax, eax; ret; 
0x000000000e56dd: test eax, eax; jne short 0x00000000000e5738; xor eax, eax; add rsp, 0x8; ret; 
0x000000000ea44f: test eax, eax; jne short 0x00000000000ea468; mov eax, 0x3d; syscall; 
0x000000000ea4ff: test eax, eax; jne short 0x00000000000ea520; xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000ea65c: test eax, eax; jne short 0x00000000000ea670; mov eax, 0x22; syscall; 
0x000000000ea6e7: test eax, eax; jne short 0x00000000000ea6f0; add rsp, 0x8; ret; 
0x000000000eac50: test eax, eax; jne short 0x00000000000eac57; pop rdi; jmp rdi; 
0x000000001128ef: test eax, eax; jne short 0x0000000000112908; mov eax, 0x11; syscall; 
0x0000000011299f: test eax, eax; jne short 0x00000000001129b8; mov eax, 0x12; syscall; 
0x0000000011485b: test eax, eax; jne short 0x00000000001148c0; mov eax, 0x101; syscall; 
0x0000000011498c: test eax, eax; jne short 0x00000000001149a0; syscall; 
0x00000000114a2c: test eax, eax; jne short 0x0000000000114a40; mov eax, 0x1; syscall; 
0x00000000114f10: test eax, eax; jne short 0x0000000000114f40; mov eax, 0x48; syscall; 
0x0000000011510c: test eax, eax; jne short 0x0000000000115120; mov eax, 0x3; syscall; 
0x0000000011529c: test eax, eax; jne short 0x00000000001152b0; mov eax, 0x55; syscall; 
0x00000000118d3c: test eax, eax; jne short 0x0000000000118d50; mov eax, 0x7; syscall; 
0x0000000011935f: test eax, eax; jne short 0x0000000000119378; mov eax, 0x146; syscall; 
0x000000001197cc: test eax, eax; jne short 0x00000000001197d8; pop rbp; ret; 
0x000000001198bf: test eax, eax; jne short 0x00000000001198d8; mov eax, 0x115; syscall; 
0x0000000011996f: test eax, eax; jne short 0x0000000000119988; mov eax, 0x11d; syscall; 
0x0000000011ab5c: test eax, eax; jne short 0x000000000011ab70; mov eax, 0x13; syscall; 
0x0000000011abfc: test eax, eax; jne short 0x000000000011ac10; mov eax, 0x14; syscall; 
0x0000000011ac9f: test eax, eax; jne short 0x000000000011acc0; xor r8d, r8d; mov eax, 0x127; syscall; 
0x0000000011ad5f: test eax, eax; jne short 0x000000000011ad80; xor r8d, r8d; mov eax, 0x128; syscall; 
0x0000000011b8e5: test eax, eax; jne short 0x000000000011b920; mov rdx, r14; mov eax, 0x10e; syscall; 
0x0000000011ba2c: test eax, eax; jne short 0x000000000011ba40; mov eax, 0x4a; syscall; 
0x0000000011baec: test eax, eax; jne short 0x000000000011bb00; mov eax, 0x4b; syscall; 
0x0000000011c760: test eax, eax; jne short 0x000000000011c724; xor eax, eax; pop rbp; ret; 
0x0000000011ec8c: test eax, eax; jne short 0x000000000011eca0; mov eax, 0x1a; syscall; 
0x00000000125caf: test eax, eax; jne short 0x0000000000125cd0; mov r9d, 0x8; mov eax, 0x119; syscall; 
0x00000000125d7f: test eax, eax; jne short 0x0000000000125da0; mov r9d, 0x8; mov eax, 0x1b9; syscall; 
0x00000000125f8f: test eax, eax; jne short 0x0000000000125fa8; mov eax, 0xe8; syscall; 
0x0000000012603f: test eax, eax; jne short 0x0000000000126058; mov eax, 0x114; syscall; 
0x000000001260ef: test eax, eax; jne short 0x0000000000126108; mov eax, 0x116; syscall; 
0x0000000012619f: test eax, eax; jne short 0x00000000001261b8; mov eax, 0x113; syscall; 
0x0000000012626c: test eax, eax; jne short 0x0000000000126280; mov eax, 0x130; syscall; 
0x000000001275cc: test eax, eax; jne short 0x00000000001275e0; mov eax, 0x2b; syscall; 
0x0000000012769c: test eax, eax; jne short 0x00000000001276b0; mov eax, 0x2a; syscall; 
0x000000001278cf: test eax, eax; jne short 0x00000000001278e8; mov eax, 0x2d; syscall; 
0x000000001279a2: test eax, eax; jne short 0x00000000001279c8; mov eax, 0x2f; syscall; 
0x00000000127b0c: test eax, eax; jne short 0x0000000000127b20; mov eax, 0x2e; syscall; 
0x00000000127baf: test eax, eax; jne short 0x0000000000127bc8; mov eax, 0x2c; syscall; 
0x00000000127e8f: test eax, eax; jne short 0x0000000000127ea8; mov eax, 0x120; syscall; 
0x00000000127f3f: test eax, eax; jne short 0x0000000000127f58; mov eax, 0x12b; syscall; 
0x00000000127fff: test eax, eax; jne short 0x0000000000128018; mov eax, 0x133; syscall; 
0x0000000012825f: test eax, eax; jne short 0x0000000000128278; mov eax, 0x45; syscall; 
0x0000000012830f: test eax, eax; jne short 0x0000000000128328; mov eax, 0x46; syscall; 
0x00000000133c27: test eax, eax; jne short 0x0000000000133c38; cmp qword ptr [rdi], 0x0; je short 0x0000000000133c40; ret; 
0x00000000142d0b: test eax, eax; jne short 0x0000000000142d28; mov eax, r8d; ret; 
0x0000000014b1ae: test eax, eax; jne short 0x000000000014b1b8; ret; 
0x000000001517dc: test eax, eax; jne short 0x00000000001517e8; ret; 
0x0000000015dcf1: test eax, eax; jne short 0x000000000015dd10; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015dfa4: test eax, eax; jne short 0x000000000015dfbc; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015ed93: test eax, eax; jne short 0x000000000015ede0; mov dword ptr [rsi], 0x0; ret; 
0x00000000163aca: test eax, eax; jne short 0x0000000000163ad0; ret; 
0x00000000169c2a: test eax, eax; jne short 0x0000000000169c30; ret; 
0x00000000198dfb: test eax, eax; jne short 0x0000000000198de0; sub eax, ecx; vzeroupper; ret; 
0x000000001992e0: test eax, eax; jne short 0x00000000001992c0; sub eax, ecx; vzeroupper; ret; 
0x000000001a1cb9: test eax, eax; jne short 0x00000000001a1ca0; sub eax, ecx; vzeroupper; ret; 
0x000000001a219e: test eax, eax; jne short 0x00000000001a2180; sub eax, ecx; vzeroupper; ret; 
0x000000001a4834: test eax, eax; jne short 0x00000000001a4844; nop [rax+rax]; xor rax, rax; ret; 
0x000000001ae9a9: test eax, eax; jne short 0x00000000001ae9b0; ret; 
0x000000001aec04: test eax, eax; jne short 0x00000000001aec0d; ret; 
0x000000001aec55: test eax, eax; jne short 0x00000000001aec6c; ret; 
0x000000001b1cbb: test eax, eax; jne short 0x00000000001b1ca0; sub eax, ecx; ret; 
0x000000001b32d0: test eax, eax; jne short 0x00000000001b32b0; sub eax, ecx; ret; 
0x000000001b49c9: test eax, eax; jne short 0x00000000001b49b0; sub eax, ecx; ret; 
0x000000001b50de: test eax, eax; jne short 0x00000000001b50c0; sub eax, ecx; ret; 
0x000000001b5a29: test eax, eax; jne short 0x00000000001b5a30; ret; 
0x000000001b5ca4: test eax, eax; jne short 0x00000000001b5cad; ret; 
0x000000001b5cf5: test eax, eax; jne short 0x00000000001b5d11; ret; 
0x000000000875af: test eax, eax; js short 0x00000000000875b8; ret; 
0x00000000127dd9: test eax, eax; js short 0x0000000000127de8; add rsp, 0x8; ret; 
0x000000001432e1: test eax, eax; js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x00000000154e4c: test eax, eax; js short 0x0000000000154e60; mov rax, r12; pop r12; ret; 
0x000000000a982c: test eax, eax; lea rdx, [rip+0x10628b]; lea rax, [rip+0x106304]; cmove rax, rdx; ret; 
0x000000000a97b0: test eax, eax; lea rdx, [rip+0x1b8c7]; lea rax, [rip+0x1b820]; cmovne rax, rdx; ret; 
0x00000000134809: test eax, eax; lea rdx, [rip+0x6c85e]; lea rax, [rip+0x6c8c7]; cmove rax, rdx; ret; 
0x00000000134870: test eax, eax; lea rdx, [rip+0x73ff7]; lea rax, [rip+0x74060]; cmove rax, rdx; ret; 
0x0000000013489c: test eax, eax; lea rdx, [rip+0x7b20b]; lea rax, [rip+0x7b264]; cmove rax, rdx; ret; 
0x000000000a9799: test eax, eax; lea rdx, [rip+0xf78de]; lea rax, [rip+0xf7957]; cmove rax, rdx; ret; 
0x000000000a9800: test eax, eax; lea rdx, [rip+0xff077]; lea rax, [rip+0xff0f0]; cmove rax, rdx; ret; 
0x00000000134820: test eax, eax; lea rdx, [rip-0x6f7d9]; lea rax, [rip-0x6f860]; cmovne rax, rdx; ret; 
0x0000000011bf86: test eax, eax; mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x000000000ac067: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdx; ret; 
0x00000000050d80: test eax, eax; sete al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001545aa: test eax, eax; sete al; add rsp, 0x8; ret; 
0x0000000016191d: test eax, eax; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000008821b: test eax, ebp; jmp rsp; 
0x00000000191883: test eax, ebx; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000163bbe: test eax, edi; jmp qword ptr [rsi+0xf]; 
0x0000000016368d: test eax, edx; add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000049300: test eax, edx; add [rax], al; add [rbp+rcx*4+0x6a], al; inc byte ptr [rbx-0x7bf0fe06]; ret; 
0x00000000072c16: test eax, edx; idiv bh; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001289a9: test eax, edx; idiv edi; inc dword ptr [rcx+rcx*4-0x30]; syscall; 
0x0000000012873b: test eax, esi; idiv edi; jmp qword ptr [rdi+0x6d]; 
0x00000000191a7b: test eax, esp; add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000191e9e: test ebp, ebp; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000a78c9: test ebp, ebp; jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x0000000011fe41: test ebp, ebp; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe71: test ebp, ebp; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c9d: test ebp, ebp; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x0000000015e1e6: test ebp, edi; jmp qword ptr [rsi+0xf]; 
0x0000000015e1e7: test ebp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000ee4e7: test ebx, ebx; je short 0x00000000000ee4f4; mov rdi, r15; call rbx; 
0x00000000107457: test ebx, ebx; je short 0x0000000000107464; mov rdi, r15; call rbx; 
0x00000000175ec0: test ebx, ebx; jne short 0x0000000000175ed0; pop rbx; ret; 
0x000000001bb769: test ebx, ebx; jne short 0x00000000001bb755; pop rbx; ret; 
0x000000001bb80b: test ebx, ebx; jne short 0x00000000001bb7f0; pop rbx; ret; 
0x000000001bbd34: test ebx, ebx; jne short 0x00000000001bbd28; mov qword ptr [rip+0x6badd], 0x0; pop rbx; ret; 
0x00000000145a1d: test ebx, ebx; js 0x0000000000145503; mov rcx, [rsp]; mov rdi, r14; call rcx; 
0x00000000191860: test ebx, edi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000b4fb8: test ebx, esi; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000c5637: test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x000000000c6dc7: test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x0000000011ebc8: test ecx, 0xfff; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x000000001aebd6: test ecx, ecx; jne 0x00000000001aeaa4; ret; 
0x000000001b5c76: test ecx, ecx; jne 0x00000000001b5b30; ret; 
0x000000000c588f: test ecx, ecx; jne short 0x00000000000c5868; mov rax, r8; ret; 
0x0000000012a5e8: test ecx, ecx; jne short 0x000000000012a5f0; ret; 
0x0000000012ae2f: test ecx, ecx; jne short 0x000000000012ae38; ret; 
0x0000000012ae8c: test ecx, ecx; jne short 0x000000000012ae98; ret; 
0x00000000135aad: test ecx, ecx; jne short 0x0000000000135a60; mov rax, r8; ret; 
0x000000001aea9f: test ecx, ecx; jne short 0x00000000001aeaaa; ret; 
0x000000001b5b29: test ecx, ecx; jne short 0x00000000001b5b36; ret; 
0x00000000071e11: test edi, ecx; ret far; 
0x0000000011be87: test edi, ecx; verr [rdi+rax*8]; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000029e10: test edi, edi; je short 0x0000000000029e40; mov rsi, r12; mov edi, ebp; call r15; 
0x00000000042e45: test edi, edi; je short 0x0000000000042e53; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000043159: test edi, edi; je short 0x0000000000043180; lea edx, [rax+0x1]; mov [rip+0x1d6082], edx; ret; 
0x00000000045f42: test edi, edi; je short 0x0000000000045f4c; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x0000000015d5bd: test edi, edi; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000015d8a5: test edi, edi; je short 0x000000000015d8b7; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015da4b: test edi, edi; je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000091223: test edi, edi; jmp qword ptr [rsi+0x2e]; 
0x0000000011fece: test edi, edi; jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011ff03: test edi, edi; jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011fe9b: test edi, edi; jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x00000000120ce3: test edi, edi; jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x000000001ba31b: test edi, edi; jne 0x00000000001ba24c; add rsp, 0x38; ret; 
0x0000000011d7fc: test edi, edi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x0000000011ff2f: test edi, edi; jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120c71: test edi, edi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x00000000120d3f: test edi, edi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d13: test edi, edi; jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x0000000013e991: test edi, edi; jne short 0x000000000013e980; pop rbx; ret; 
0x0000000017358a: test edi, edi; jns short 0x0000000000173590; ret; 
0x0000000009b7e4: test edi, edi; js short 0x000000000009b7f8; mov [rip+0x184302], edi; xor eax, eax; ret; 
0x000000000ed199: test edi, edi; js short 0x00000000000ed1a0; ret; 
0x000000000a834f: test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000a878f: test edx, 0x40000000; je short 0x00000000000a875f; ret; 
0x000000000a880f: test edx, 0x40000000; je short 0x00000000000a87df; ret; 
0x000000000a8a4f: test edx, 0x40000000; je short 0x00000000000a8a1f; ret; 
0x000000000a960f: test edx, 0x40000000; je short 0x00000000000a95df; ret; 
0x000000000ab0ff: test edx, 0x40000000; je short 0x00000000000ab0cf; ret; 
0x000000000b165f: test edx, 0x40000000; je short 0x00000000000b162f; ret; 
0x000000000c545f: test edx, 0x40000000; je short 0x00000000000c542f; ret; 
0x000000000c54df: test edx, 0x40000000; je short 0x00000000000c54af; ret; 
0x000000000c570f: test edx, 0x40000000; je short 0x00000000000c56df; ret; 
0x000000000c583f: test edx, 0x40000000; je short 0x00000000000c580f; ret; 
0x00000000191ec1: test edx, ecx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000191989: test edx, edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000911e9: test edx, edx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000bac0a: test edx, edx; je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000d86df: test edx, edx; je 0x00000000000d8780; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000036c02: test edx, edx; je short 0x0000000000036c08; call rdx; 
0x00000000089783: test edx, edx; je short 0x0000000000089790; ret; 
0x00000000089ba3: test edx, edx; je short 0x0000000000089bb0; ret; 
0x0000000009170b: test edx, edx; je short 0x00000000000916e0; call rdx; 
0x000000000baa06: test edx, edx; je short 0x00000000000baa0e; bsf eax, edx; ret; 
0x000000000baaab: test edx, edx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa4e: test edx, edx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac7a: test edx, edx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000000d8486: test edx, edx; je short 0x00000000000d8492; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000d852b: test edx, edx; je short 0x00000000000d8540; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d84d2: test edx, edx; je short 0x00000000000d8550; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d874a: test edx, edx; je short 0x00000000000d8770; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000126304: test edx, edx; je short 0x0000000000126338; mov eax, 0x145; syscall; 
0x000000001269df: test edx, edx; je short 0x0000000000126a0a; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x000000001288ef: test edx, edx; je short 0x00000000001288fc; add edx, edx; mov eax, 0x14; syscall; 
0x00000000039c82: test edx, edx; jne short 0x0000000000039c90; mov eax, r8d; ret; 
0x0000000005655d: test edx, edx; jne short 0x0000000000056580; mov dword ptr [rdi], 0x0; mov eax, 0x1; ret; 
0x00000000056759: test edx, edx; jne short 0x00000000000567d0; mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x0000000008357f: test edx, edx; jne short 0x0000000000083570; ret; 
0x0000000008c9b7: test edx, edx; jne short 0x000000000008c9c0; ret; 
0x0000000008d577: test edx, edx; jne short 0x000000000008d568; ret; 
0x00000000097604: test edx, edx; jne short 0x0000000000097611; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x0000000009e69e: test edx, edx; jne short 0x000000000009e6a6; mov rax, [rsi+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000a7a29: test edx, edx; jne short 0x00000000000a7a20; ret; 
0x000000000c5035: test edx, edx; jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000c5986: test edx, edx; jne short 0x00000000000c5978; xor eax, eax; ret; 
0x000000000c5a20: test edx, edx; jne short 0x00000000000c5a00; ret; 
0x000000000c6deb: test edx, edx; jne short 0x00000000000c6de0; ret; 
0x000000000dd719: test edx, edx; jne short 0x00000000000dd720; pop rbx; ret; 
0x0000000012a57e: test edx, edx; jne short 0x000000000012a590; mov eax, r8d; ret; 
0x0000000012a7d1: test edx, edx; jne short 0x000000000012a7e0; ret; 
0x0000000012b061: test edx, edx; jne short 0x000000000012b070; ret; 
0x0000000016d4b4: test edx, edx; jne short 0x000000000016d4c0; mov eax, 0x1; ret; 
0x0000000016d4f4: test edx, edx; jne short 0x000000000016d500; mov eax, 0x1; ret; 
0x00000000119d88: test edx, edx; js short 0x0000000000119d94; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000004307d: test edx, edx; sete al; ret; 
0x0000000009a6b3: test edx, edx; setne al; mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x0000000016bc67: test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000ffd86: test edx, esi; jmp qword ptr [rsi+0xf]; 
0x000000000a82b7: test esi, 0x400; jne short 0x00000000000a8274; ret; 
0x000000000a83c7: test esi, 0x400; jne short 0x00000000000a8384; ret; 
0x000000000a8477: test esi, 0x400; jne short 0x00000000000a8434; ret; 
0x000000000a8887: test esi, 0x400; jne short 0x00000000000a8844; ret; 
0x000000000a89b7: test esi, 0x400; jne short 0x00000000000a8974; ret; 
0x000000000a9a37: test esi, 0x400; jne short 0x00000000000a99f4; ret; 
0x000000000a9ac7: test esi, 0x400; jne short 0x00000000000a9a84; ret; 
0x00000000112fda: test esi, 0x575ff00; mov [rdi], si; xor eax, eax; ret; 
0x000000001504f5: test esi, eax; add eax, [rax]; add [rax-0x75], cl; adc [rbp+0x31], al; jmp qword ptr [rsi-0x7d]; 
0x000000000414df: test esi, eax; je short 0x00000000000414b4; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000119468: test esi, esi; je short 0x0000000000119492; mov eax, 0x118; syscall; 
0x000000000565e8: test esi, esi; jne short 0x0000000000056618; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x00000000092649: test esi, esi; jne short 0x0000000000092660; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x00000000099dd4: test esi, esi; jne short 0x0000000000099de8; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x000000000bab75: test esi, esi; jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000d8635: test esi, esi; jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d9af5: test esi, esi; jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x0000000014567a: test esi, esi; js 0x0000000000145503; mov rax, [rsp]; mov rdi, r15; call rax; 
0x000000000ab078: test esi, esi; lea rdx, [rip+0x104c1f]; lea rax, [rip+0x10afb8]; cmove rax, rdx; ret; 
0x000000000a94e8: test esi, esi; lea rdx, [rip+0x10518f]; lea rax, [rip+0x10c848]; cmove rax, rdx; ret; 
0x000000000c5aa8: test esi, esi; lea rdx, [rip+0xefc4f]; lea rax, [rip+0xf0728]; cmove rax, rdx; ret; 
0x000000000e6c24: test esp, esp; je short 0x00000000000e6c3d; mov rbx, r13; mov rdi, rbp; call r12; 
0x000000001256d7: test esp, esp; je short 0x00000000001256e9; mov rsi, r8; mov rdi, rbp; call r12; 
0x0000000011fe0f: test esp, esp; jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x00000000120c38: test esp, esp; jne short 0x0000000000120c60; mov rdi, [rbp]; call rbx; 
0x0000000011d2f8: test qword ptr [rax-0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000017c9f2: test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000b120d: test r10b, r9b; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x000000000e6c23: test r12, r12; je short 0x00000000000e6c3d; mov rbx, r13; mov rdi, rbp; call r12; 
0x000000001256d6: test r12, r12; je short 0x00000000001256e9; mov rsi, r8; mov rdi, rbp; call r12; 
0x0000000011fe0e: test r12, r12; jne short 0x000000000011fe5c; mov rdi, [rbp]; call rbx; 
0x00000000120c37: test r12, r12; jne short 0x0000000000120c60; mov rdi, [rbp]; call rbx; 
0x000000000a78c8: test r13, r13; jne 0x00000000000a7761; mov rax, [rip+0x171508]; call qword ptr [rax]; 
0x0000000011fe40: test r13, r13; jne short 0x000000000011febb; mov rdi, [r12]; call rbx; 
0x0000000011fe70: test r13, r13; jne short 0x000000000011fef0; mov rdi, [r12]; call rbx; 
0x00000000120c9c: test r13, r13; jne short 0x0000000000120d00; mov rdi, [r12]; call rbx; 
0x00000000145679: test r14d, r14d; js 0x0000000000145503; mov rax, [rsp]; mov rdi, r15; call rax; 
0x00000000029e0f: test r15, r15; je short 0x0000000000029e40; mov rsi, r12; mov edi, ebp; call r15; 
0x0000000015d5bc: test r15d, r15d; je short 0x000000000015d640; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000167f42: test r8, r8; je short 0x0000000000167f55; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000061f97: test r8d, r8d; je short 0x0000000000061fe0; mov eax, 0x13c; syscall; 
0x00000000193b82: test r8d, r8d; je short 0x0000000000193b88; xchg edx, eax; sub eax, edx; ret; 
0x00000000194b67: test r8d, r8d; je short 0x0000000000194b6d; xchg edx, eax; sub eax, edx; ret; 
0x000000000612c9: test r8d, r8d; jne short 0x00000000000612d0; pop rbx; ret; 
0x000000000b1359: test r9b, dil; jne short 0x00000000000b1338; ret; 
0x0000000011ebc7: test r9d, 0xfff; jne short 0x000000000011ebe0; mov eax, 0x9; syscall; 
0x000000000d8080: test rax, 0x1; je 0x00000000000d7fe5; lea rax, [rdi-0x10]; ret; 
0x000000000d8130: test rax, 0x1; je short 0x00000000000d81a0; lea rax, [rdi-0x10]; ret; 
0x0000000012e3dd: test rax, rax; cmovs rax, rdx; ret; 
0x00000000121628: test rax, rax; je 0x00000000001216d0; call rax; 
0x0000000015e9e9: test rax, rax; je 0x000000000015e85e; mov rdi, rbx; call rax; 
0x00000000036b07: test rax, rax; je short 0x0000000000036b0e; call rax; 
0x00000000037efc: test rax, rax; je short 0x0000000000037f03; call rax; 
0x0000000007f7c8: test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f801: test rax, rax; je short 0x000000000007f817; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000007f851: test rax, rax; je short 0x000000000007f878; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000007f8a8: test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000008a680: test rax, rax; je short 0x000000000008a690; pop rbx; ret; 
0x0000000008e6b3: test rax, rax; je short 0x000000000008e6c7; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000000921e7: test rax, rax; je short 0x00000000000921f0; xor eax, eax; pop rbx; ret; 
0x000000000a7a8f: test rax, rax; je short 0x00000000000a7ac8; add rsp, 0x10; pop r12; ret; 
0x000000000e566e: test rax, rax; je short 0x00000000000e56a0; call rax; 
0x000000000e56d2: test rax, rax; je short 0x00000000000e56f0; sub rsp, 0x8; call rax; 
0x000000000eafb1: test rax, rax; je short 0x00000000000eafb8; call rax; 
0x000000000eb02a: test rax, rax; je short 0x00000000000eb031; call rax; 
0x000000000eb072: test rax, rax; je short 0x00000000000eb079; call rax; 
0x00000000113d4f: test rax, rax; je short 0x0000000000113d88; xor edx, edx; call rax; 
0x0000000011b37f: test rax, rax; je short 0x000000000011b385; ret; 
0x0000000011d214: test rax, rax; je short 0x000000000011d21c; mov [rax], rdx; ret; 
0x0000000012146e: test rax, rax; je short 0x00000000001214b0; call rax; 
0x00000000132aae: test rax, rax; je short 0x0000000000132ae0; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x000000001355ed: test rax, rax; je short 0x0000000000135600; add rsp, 0x8; ret; 
0x0000000013e66c: test rax, rax; je short 0x000000000013e676; mov rdi, rbx; call rax; 
0x0000000013e9ac: test rax, rax; je short 0x000000000013e9b6; mov rdi, rbx; call rax; 
0x0000000013ea5c: test rax, rax; je short 0x000000000013ea6a; lea rdi, [rip+0xe34b8]; call rax; 
0x0000000014a632: test rax, rax; je short 0x000000000014a640; ret; 
0x000000001522fc: test rax, rax; je short 0x0000000000152307; cmp [rax+0x10], rdi; jne short 0x00000000001522f8; ret; 
0x00000000156f40: test rax, rax; je short 0x0000000000156f50; mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x0000000015d2f3: test rax, rax; je short 0x000000000015d2fd; mov rdi, rbp; call rax; 
0x0000000015d74a: test rax, rax; je short 0x000000000015d754; mov rdi, rbp; call rax; 
0x0000000015e761: test rax, rax; je short 0x000000000015e76b; mov rdi, rbx; call rax; 
0x0000000015ead7: test rax, rax; je short 0x000000000015eae1; mov rdi, rbx; call rax; 
0x0000000015f2f5: test rax, rax; je short 0x000000000015f2ff; mov rdi, r13; call rax; 
0x00000000162c64: test rax, rax; je short 0x0000000000162c72; lea rdi, [rbp+0xc8]; call rax; 
0x000000001636aa: test rax, rax; je short 0x00000000001636b4; mov rdi, rbp; call rax; 
0x0000000016388f: test rax, rax; je short 0x000000000016389b; lea rdi, [r12+0x10]; call rax; 
0x00000000164b4e: test rax, rax; je short 0x0000000000164b58; mov rdi, rbp; call rax; 
0x00000000164d23: test rax, rax; je short 0x0000000000164d2d; mov rdi, r13; call rax; 
0x00000000165a51: test rax, rax; je short 0x0000000000165a5c; lea rdi, [rbp+0x68]; call rax; 
0x00000000166179: test rax, rax; je short 0x0000000000166183; mov rdi, rbp; call rax; 
0x000000001664f1: test rax, rax; je short 0x00000000001664fc; lea rdi, [rbp+0x58]; call rax; 
0x00000000168a6b: test rax, rax; je short 0x0000000000168a35; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000168a30: test rax, rax; je short 0x0000000000168a40; pop rbx; ret; 
0x00000000168ae3: test rax, rax; je short 0x0000000000168aa1; mov fs:[rbx], rax; pop rbx; ret; 
0x00000000169a0f: test rax, rax; je short 0x0000000000169a1b; lea rdi, [r12+0x10]; call rax; 
0x0000000016a1a8: test rax, rax; je short 0x000000000016a1b4; lea rdi, [r12+0x10]; call rax; 
0x00000000174ea4: test rax, rax; je short 0x0000000000174ebc; mov rax, [rip+0xa4017]; call qword ptr [rax+0x368]; 
0x000000001bb2a9: test rax, rax; je short 0x00000000001bb2b0; call rax; 
0x000000001bb3d8: test rax, rax; je short 0x00000000001bb3e4; call rax; 
0x00000000125ba6: test rax, rax; jl short 0x0000000000125bbe; je short 0x0000000000125bae; ret; 
0x000000001269ed: test rax, rax; jl short 0x0000000000126a0a; je short 0x00000000001269f5; ret; 
0x0000000008e653: test rax, rax; jne short 0x000000000008e648; ret; 
0x0000000008f1cb: test rax, rax; jne short 0x000000000008f1c0; ret; 
0x0000000009e62d: test rax, rax; jne short 0x000000000009e620; ret; 
0x0000000009e744: test rax, rax; jne short 0x000000000009e738; ret; 
0x000000000a794e: test rax, rax; jne short 0x00000000000a7940; xor eax, eax; ret; 
0x0000000011c75f: test rax, rax; jne short 0x000000000011c724; xor eax, eax; pop rbp; ret; 
0x000000001517db: test rax, rax; jne short 0x00000000001517e8; ret; 
0x000000001432e0: test rax, rax; js short 0x00000000001432f0; movsxd rdx, ecx; ret; 
0x000000000ac066: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdx; ret; 
0x000000001545a9: test rax, rax; sete al; add rsp, 0x8; ret; 
0x000000000ee4e6: test rbx, rbx; je short 0x00000000000ee4f4; mov rdi, r15; call rbx; 
0x00000000107456: test rbx, rbx; je short 0x0000000000107464; mov rdi, r15; call rbx; 
0x00000000175ebf: test rbx, rbx; jne short 0x0000000000175ed0; pop rbx; ret; 
0x000000001bb768: test rbx, rbx; jne short 0x00000000001bb755; pop rbx; ret; 
0x000000001bb80a: test rbx, rbx; jne short 0x00000000001bb7f0; pop rbx; ret; 
0x000000001bbd33: test rbx, rbx; jne short 0x00000000001bbd28; mov qword ptr [rip+0x6badd], 0x0; pop rbx; ret; 
0x00000000042e44: test rdi, rdi; je short 0x0000000000042e53; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000045f41: test rdi, rdi; je short 0x0000000000045f4c; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x0000000015d8a4: test rdi, rdi; je short 0x000000000015d8b7; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000015da4a: test rdi, rdi; je short 0x000000000015da56; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000011fecd: test rdi, rdi; jne 0x000000000011ff60; mov rdi, [r13]; call rbx; 
0x0000000011ff02: test rdi, rdi; jne 0x000000000011ffa0; mov rdi, [r13]; call rbx; 
0x0000000011fe9a: test rdi, rdi; jne 0x000000000011ffc0; mov rdi, [r13]; call rbx; 
0x00000000120ce2: test rdi, rdi; jne 0x0000000000120da0; mov rdi, [r13]; call rbx; 
0x0000000011d7fb: test rdi, rdi; jne short 0x000000000011d810; mov eax, 0x1; ret; 
0x0000000011ff2e: test rdi, rdi; jne short 0x000000000011ff80; mov rdi, [r13]; call rbx; 
0x00000000120c70: test rdi, rdi; jne short 0x0000000000120cc0; mov rdi, [r12]; call rbx; 
0x00000000120d3e: test rdi, rdi; jne short 0x0000000000120d60; mov rdi, [r13]; call rbx; 
0x00000000120d12: test rdi, rdi; jne short 0x0000000000120d80; mov rdi, [r13]; call rbx; 
0x0000000013e98f: test rdi, rdi; jne short 0x000000000013e980; pop rbx; ret; 
0x000000000911e8: test rdx, rdx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000bac09: test rdx, rdx; je 0x00000000000bacb0; bsf rax, rdx; ret; 
0x000000000d86de: test rdx, rdx; je 0x00000000000d8780; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000036c01: test rdx, rdx; je short 0x0000000000036c08; call rdx; 
0x0000000009170a: test rdx, rdx; je short 0x00000000000916e0; call rdx; 
0x000000000baaaa: test rdx, rdx; je short 0x00000000000baac0; bsf rax, rdx; ret; 
0x000000000baa4d: test rdx, rdx; je short 0x00000000000baad0; bsf rax, rdx; ret; 
0x000000000bac79: test rdx, rdx; je short 0x00000000000baca0; bsf rax, rdx; ret; 
0x000000000d852a: test rdx, rdx; je short 0x00000000000d8540; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d84d1: test rdx, rdx; je short 0x00000000000d8550; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000d8749: test rdx, rdx; je short 0x00000000000d8770; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000001269de: test rdx, rdx; je short 0x0000000000126a0a; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x0000000005655c: test rdx, rdx; jne short 0x0000000000056580; mov dword ptr [rdi], 0x0; mov eax, 0x1; ret; 
0x00000000056758: test rdx, rdx; jne short 0x00000000000567d0; mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x0000000008357e: test rdx, rdx; jne short 0x0000000000083570; ret; 
0x0000000008c9b6: test rdx, rdx; jne short 0x000000000008c9c0; ret; 
0x0000000008d576: test rdx, rdx; jne short 0x000000000008d568; ret; 
0x000000000a7a28: test rdx, rdx; jne short 0x00000000000a7a20; ret; 
0x000000000c5034: test rdx, rdx; jne short 0x00000000000c503d; mov rax, rdi; ret; 
0x000000000414de: test rsi, rax; je short 0x00000000000414b4; movsd [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000119467: test rsi, rsi; je short 0x0000000000119492; mov eax, 0x118; syscall; 
0x000000000565e7: test rsi, rsi; jne short 0x0000000000056618; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000000bab74: test rsi, rsi; jne short 0x00000000000bab7d; xor rax, rax; ret; 
0x000000000d8634: test rsi, rsi; jne short 0x00000000000d863d; xor rax, rax; ret; 
0x000000000d9af4: test rsi, rsi; jne short 0x00000000000d9b28; mov eax, 0x60; syscall; 
0x00000000112fd9: test si, 0xff00; jne short 0x0000000000112fe5; mov [rdi], si; xor eax, eax; ret; 
0x000000000a02bc: test sil, 0x40; jne short 0x00000000000a02f0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x000000000b103c: test sil, sil; jne short 0x00000000000b1030; mov [rdx], rcx; ret; 
0x0000000002d0b8: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000001afceb: tzcnt eax, eax; add rax, rcx; ret; 
0x00000000199769: tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000001b14a7: tzcnt eax, eax; add rax, rdi; cmp sil, [rax]; jne short 0x00000000001b14d1; ret; 
0x000000001ae6b6: tzcnt eax, eax; add rax, rdi; ret; 
0x00000000199476: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001b1951: tzcnt eax, eax; add rax, rdx; ret; 
0x0000000019d77b: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000199500: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000199510: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000199520: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000019d730: tzcnt eax, eax; add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x000000001ae847: tzcnt eax, eax; cmp edx, eax; jbe short 0x00000000001ae871; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b58df: tzcnt eax, eax; cmp edx, eax; jbe short 0x00000000001b5901; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b5f0d: tzcnt eax, eax; cmp edx, eax; jbe short 0x00000000001b5f31; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b63ca: tzcnt eax, eax; cmp edx, eax; jbe short 0x00000000001b63f1; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43e0: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4560: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4535: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x40]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b43a0: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x60]; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b4550: tzcnt eax, eax; cmp esi, [rdi+rax*4]; jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x000000001b45a9: tzcnt eax, eax; cmp esi, [rdx+rax*4]; jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001b4133: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000019dda0: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000001b1500: tzcnt eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b1690: tzcnt eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b14c0: tzcnt eax, eax; cmp sil, [rdi+rax+0x60]; jne short 0x00000000001b14d1; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b1680: tzcnt eax, eax; cmp sil, [rdi+rax]; jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b16e1: tzcnt eax, eax; cmp sil, [rdx+rax]; jne short 0x00000000001b1679; add rax, rdx; ret; 
0x000000001994f0: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000001a29f0: tzcnt eax, eax; lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29e0: tzcnt eax, eax; lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29d0: tzcnt eax, eax; lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x000000001a29b0: tzcnt eax, eax; lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x000000001b5260: tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x000000001b5250: tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x000000001b3f10: tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x000000001b3f00: tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x000000001b3ef0: tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001b3ee0: tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x000000001b5270: tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000001b57b0: tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b57c0: tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b57d0: tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b57e0: tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b6450: tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b6460: tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b6426: tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x000000001b4387: tzcnt eax, eax; lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x00000000001b43b0; ret; 
0x000000001b5736: tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x000000001b5940: tzcnt eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000001b4bbf: tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x000000001ae720: tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001ae8c0: tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001ae730: tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae740: tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001ae750: tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001b5f80: tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x000000001b5f90: tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x000000001b5f63: tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x000000001afe10: tzcnt eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x000000001afe00: tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000001b1900: tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001ae9b0: tzcnt eax, eax; movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000001b224b: tzcnt eax, eax; ret; 
0x000000001a276d: tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000019db70: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000019db60: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000019db50: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000019db40: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000001b2250: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b2260: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b2270: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b2280: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001b4ac0: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad0: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae0: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab0: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x00000000199870: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000019d740: tzcnt eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000199860: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000199700: tzcnt eax, eax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x00000000199680: tzcnt eax, eax; sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x000000001b40c0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b40d0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b5460: tzcnt eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b5440: tzcnt eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000019d989: tzcnt eax, eax; vzeroupper; ret; 
0x000000001aadda: tzcnt eax, eax; xtest; je short 0x00000000001aade7; vzeroall; ret; 
0x000000001b1b93: tzcnt ecx, ecx; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x000000001b1b11: tzcnt ecx, ecx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000001b1b35: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000001b1b65: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x000000001b19aa: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x000000001b19bb: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x000000001b19cc: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x000000001b199a: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001b2342: tzcnt rax, rax; add rax, rdi; ret; 
0x000000001b1667: tzcnt rax, rax; cmp sil, [rdi+rax+0x40]; jne short 0x00000000001b1679; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b18e7: tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001ae897: tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x000000001afde5: tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000199847: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000019d717: tzcnt rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000019962b: tzcnt rax, rax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000001b1c0b: tzcnt rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000041746: ucomisd xmm0, xmm4; jp short 0x0000000000041758; jne short 0x0000000000041758; addsd xmm0, xmm0; ret; 
0x00000000041747: ucomiss xmm0, xmm4; jp short 0x0000000000041758; jne short 0x0000000000041758; addsd xmm0, xmm0; ret; 
0x00000000041a83: ucomiss xmm0, xmm4; jp short 0x0000000000041a90; jne short 0x0000000000041a90; addss xmm0, xmm0; ret; 
0x000000000f6e1f: ud0 edi, edi; jmp qword ptr [rsi+0x66]; 
0x0000000013ff06: ud0 edi, edi; jmp qword ptr [rsi+0xf]; 
0x000000000298aa: ud2; cmp dword ptr [rsp+0x10], 0x0; je short 0x00000000000298cd; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000018035d: ud2; lea r11, [rip+0x62f6a]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000160011: vcmppd xmm9, xmm10, [rcx+rcx*4-0x12], 0x41; call qword ptr [rdi+0x40]; 
0x00000000126323: verr [rbx+rcx*4+0x10]; cmp edx, 0x26; je short 0x0000000000126366; mov eax, r8d; ret; 
0x0000000011be89: verr [rdi+rax*8]; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000122485: verr [rdi+rax*8]; add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x000000001194cd: verr [rdi+rax*8]; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000011a9f5: verr [rdi+rax*8]; or al, 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000128cf1: verw ax; push 0x48000004; mov dword ptr [rip+0xf073d], 0x0; add rsp, 0x8; ret; 
0x0000000012cff5: verw ax; test [rbx-0xa], al; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000012cff4: verw r8w; test [rbx-0xa], al; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001a0beb: vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001a0be6: vmovdqu [r8], ymm0; vmovdqu [r8+0x20], ymm1; vzeroupper; ret; 
0x000000001a3f1e: vmovdqu [r9-0x10], xmm1; ret; 
0x000000001a3f0a: vmovdqu [r9-0x20], ymm1; ret; 
0x000000001a3ef1: vmovdqu [r9-0x20], ymm3; ret; 
0x000000001a3eeb: vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x000000001a1206: vmovdqu [rax+rdx-0x10], xmm0; vzeroupper; ret; 
0x000000001a1124: vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001a1202: vmovdqu [rax], xmm0; vmovdqu [rax+rdx-0x10], xmm0; vzeroupper; ret; 
0x000000001a1120: vmovdqu [rax], ymm0; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001a0b26: vmovdqu [rcx], ymm0; vzeroupper; ret; 
0x000000001a11a4: vmovdqu [rdi+0x20], ymm0; vmovdqu [rdi+0x40], ymm0; vmovdqu [rdi+0x60], ymm0; vzeroupper; ret; 
0x000000001a3ee6: vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x000000001a09e1: vmovdqu [rdi+0x20], ymm1; vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x000000001a05b0: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret; 
0x0000000019ecd0: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x0000000019f880: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x000000001a11a9: vmovdqu [rdi+0x40], ymm0; vmovdqu [rdi+0x60], ymm0; vzeroupper; ret; 
0x000000001a0b9c: vmovdqu [rdi+0x40], ymm6; vmovdqu [rdi+0x60], ymm7; vmovdqu [rdx+rdi-0x20], ymm8; vzeroupper; ret; 
0x000000001a11ae: vmovdqu [rdi+0x60], ymm0; vzeroupper; ret; 
0x000000001a89ae: vmovdqu [rdi+0x60], ymm0; xtest; je short 0x00000000001a89bc; vzeroall; ret; 
0x000000001a0756: vmovdqu [rdi+0x60], ymm7; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x0000000019ed26: vmovdqu [rdi+0x60], ymm7; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x000000001a0ba1: vmovdqu [rdi+0x60], ymm7; vmovdqu [rdx+rdi-0x20], ymm8; vzeroupper; ret; 
0x0000000019fa26: vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x0000000019f8e4: vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001a056f: vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000019ec8f: vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019f83f: vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x000000001a058f: vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000019ecaf: vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019f85f: vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x000000001a09b0: vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x0000000019febe: vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000019e40e: vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x000000001a10a4: vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x000000001a08d9: vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001a7de5: vmovdqu [rdi+rdx-0x20], ymm1; xtest; je short 0x00000000001a7df4; vzeroall; ret; 
0x000000001a09e6: vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x000000001a0e24: vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x000000001a0e1e: vmovdqu [rdi+rdx-0x40], ymm2; vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x000000001a09ec: vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x000000001a0a5f: vmovdqu [rdi+rdx-0x40], ymm5; vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x000000001a0e18: vmovdqu [rdi+rdx-0x60], ymm1; vmovdqu [rdi+rdx-0x40], ymm2; vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x000000001a0a65: vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x000000001a0a6b: vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x0000000019fe9e: vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000019e3ee: vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x000000001a1135: vmovdqu [rdi-0x20], ymm0; vzeroupper; ret; 
0x000000001a1130: vmovdqu [rdi-0x40], ymm0; vmovdqu [rdi-0x20], ymm0; vzeroupper; ret; 
0x000000001a3f1a: vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x0000000019f8e0: vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001a09ac: vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a45f9: vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a056b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000019ec8b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019f83b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000019fe9a: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000019e3ea: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x000000001a3f06: vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x000000001a3ee2: vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x000000001a08d5: vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001a10aa: vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x0000000019f87c: vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x000000001a058b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000019ecab: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000019f85b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x0000000019feba: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000019e40a: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x000000001a45ef: vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x000000001a0b1d: vmovdqu [rdx+0x20], ymm7; vmovdqu [rdx], ymm8; vmovdqu [rcx], ymm0; vzeroupper; ret; 
0x000000001a0ba6: vmovdqu [rdx+rdi-0x20], ymm8; vzeroupper; ret; 
0x000000001a0b22: vmovdqu [rdx], ymm8; vmovdqu [rcx], ymm0; vzeroupper; ret; 
0x000000001a45fd: vmovdqu [rsi-0x10], xmm0; ret; 
0x000000001a45f3: vmovdqu [rsi-0x20], ymm2; ret; 
0x000000001a3f11: vmovdqu xmm0, [rsi]; vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x000000001a09a2: vmovdqu xmm0, [rsi]; vmovdqu xmm1, [rsi+rdx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x000000001a3f15: vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x000000001a09a6: vmovdqu xmm1, [rsi+rdx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret; 
0x0000000019f834: vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000019e3e4: vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x000000001a3efd: vmovdqu ymm0, [rsi]; vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x000000001a3f01: vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x000000001a08cf: vmovdqu ymm1, [rsi+rdx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x0000000019f854: vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x0000000019e404: vmovdqu ymm3, [rsi+rdx-0x1f]; vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x000000001afb58: vmovdqu64 [eax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001af235: vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001af22f: vmovdqu64 [r8], ymm16; vmovdqu64 [r8+0x20], ymm17; ret; 
0x000000001a6c81: vmovdqu64 [r8], zmm16; ret; 
0x000000001a7306: vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001a72f6: vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a71e2: vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a7300: vmovdqu64 [rax], xmm16; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000001a72f0: vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000001a71dc: vmovdqu64 [rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001a72a8: vmovdqu64 [rcx+0x100], zmm16; vmovdqu64 [rcx+0x140], zmm16; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001a72af: vmovdqu64 [rcx+0x140], zmm16; vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001a71f0: vmovdqu64 [rcx+0x180], zmm16; vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001a71f7: vmovdqu64 [rcx+0x1c0], zmm16; ret; 
0x000000001afc2a: vmovdqu64 [rcx+0x20], ymm16; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001afb70: vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001afb77: vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001af15e: vmovdqu64 [rcx], ymm16; ret; 
0x000000001afc24: vmovdqu64 [rcx], ymm16; vmovdqu64 [rcx+0x20], ymm16; vmovdqu64 [rcx+0x40], ymm16; vmovdqu64 [rcx+0x60], ymm16; ret; 
0x000000001a6ba4: vmovdqu64 [rcx], zmm16; ret; 
0x000000001aefe7: vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001b0a16: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x000000001b2d46: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x000000001b3b86: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001af1e9: vmovdqu64 [rdi+0x20], ymm21; vmovdqu64 [rdi+0x40], ymm22; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001b3d4b: vmovdqu64 [rdi+0x40], ymm22; sub r8, 0x20; jb 0x00000000001b3935; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000001af1f0: vmovdqu64 [rdi+0x40], ymm22; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001a6a19: vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x000000001a6c33: vmovdqu64 [rdi+0x40], zmm21; vmovdqu64 [rdi+0x80], zmm22; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001b0bec: vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x000000001b2dac: vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001b3d5c: vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000001af1f7: vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001a6c3a: vmovdqu64 [rdi+0x80], zmm22; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001a6c41: vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001b0a86: vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b09b4: vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b2ce4: vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b44: vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b09e4: vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b2d14: vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b64: vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001a6ecf: vmovdqu64 [rdi+rdx-0x100], zmm16; vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a6ac7: vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001b0257: vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1447: vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001afae1: vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001a69e9: vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aefee: vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001af4a2: vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001af06f: vmovdqu64 [rdi+rdx-0x20], ymm20; vmovdqu64 [rdi+rdx-0x40], ymm21; vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001af49a: vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001aeff6: vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001af077: vmovdqu64 [rdi+rdx-0x40], ymm21; vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001a7164: vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001a68e2: vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001a6a20: vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x000000001a6ee7: vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a6aaf: vmovdqu64 [rdi+rdx-0x40], zmm20; vmovdqu64 [rdi+rdx-0x80], zmm21; vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001af492: vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001af07f: vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001af48a: vmovdqu64 [rdi+rdx-0x80], ymm16; vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x000000001af087: vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001a6edf: vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a6a28: vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x000000001a6ab7: vmovdqu64 [rdi+rdx-0x80], zmm21; vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001a6ed7: vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x000000001a6abf: vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x000000001b0227: vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1417: vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b0a80: vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001b09ae: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b2cde: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b3e: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b0221: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1411: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001afae9: vmovdqu64 [rdi], ymm16; ret; 
0x000000001aefe1: vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x000000001a69e3: vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001b0a10: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x000000001b2d40: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x000000001b3b80: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x000000001b09de: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b2d0e: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b5e: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b0251: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1441: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001a716c: vmovdqu64 [rdi], zmm16; ret; 
0x000000001a6a13: vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x000000001a68dc: vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001af151: vmovdqu64 [rdx+0x20], ymm23; vmovdqu64 [rdx], ymm24; vmovdqu64 [rcx], ymm16; ret; 
0x000000001af14a: vmovdqu64 [rdx+0x40], ymm22; vmovdqu64 [rdx+0x20], ymm23; vmovdqu64 [rdx], ymm24; vmovdqu64 [rcx], ymm16; ret; 
0x000000001a6b97: vmovdqu64 [rdx+0x40], zmm23; vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001a6b90: vmovdqu64 [rdx+0x80], zmm22; vmovdqu64 [rdx+0x40], zmm23; vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001af1fe: vmovdqu64 [rdx+rdi-0x20], ymm24; ret; 
0x000000001a6c48: vmovdqu64 [rdx+rdi-0x40], zmm24; ret; 
0x000000001af158: vmovdqu64 [rdx], ymm24; vmovdqu64 [rcx], ymm16; ret; 
0x000000001a6b9e: vmovdqu64 [rdx], zmm24; vmovdqu64 [rcx], zmm16; ret; 
0x000000001a71db: vmovdqu64 fs:[rax], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; ret; 
0x000000001b3b30: vmovdqu64 xmm18, [rsi]; vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b1400: vmovdqu64 xmm18, [rsi]; vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001b09a6: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x000000001b2cd6: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b36: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x000000001b0216: vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1406: vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x000000001a69d5: vmovdqu64 ymm16, [rsi]; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001a69db: vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x000000001aecaa: vmovdqu64 ymm17, [rsi+rdx-0x20]; vpcmpub k1, ymm17, [rdi+rdx-0x20], 0x4; kmovd eax, k1; ret; 
0x000000001aee63: vmovdqu64 ymm18, [rsi+rdx-0x20]; vpternlogd ymm18, ymm17, [rdi+rdx-0x20], 0xde; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000001b3b50: vmovdqu64 ymm18, [rsi]; vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b1430: vmovdqu64 ymm18, [rsi]; vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001b09d6: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x000000001b2d06: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001b3b56: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x000000001b0246: vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x000000001b1436: vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001a68d4: vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x000000001afba0: vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a7223: vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000001aec98: vmovdqu8 ymm18{k2}, [rsi]; vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; ret; 
0x000000000633d7: vmovhpd xmm0, xmm4, [rax]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000ec447: vmovlpd xmm0, xmm6, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001a4608: vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x000000001a460c: vmovq [rsi-0x8], xmm0; ret; 
0x000000001a4212: vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4219: vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4220: vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a4227: vmovups [r9+0x1c0], zmm15; ret; 
0x000000001a40ab: vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e71: vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40c0: vmovups [r9-0x40], zmm15; ret; 
0x000000001a3ec2: vmovups [r9-0x40], zmm3; ret; 
0x000000001a3e86: vmovups [r9-0x40], zmm7; ret; 
0x000000001a40b9: vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3ebb: vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a3e7f: vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a40b2: vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x000000001a3e78: vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000001a3eb4: vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a45c1: vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a4374: vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a437b: vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4382: vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x000000001a4389: vmovups [rdi-0x200], zmm15; ret; 
0x000000001a3eae: vmovups [rdi], zmm0; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x000000001a45bb: vmovups [rdi], zmm2; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45dc: vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a4797: vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a479e: vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47a5: vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a47ac: vmovups [rsi+0x1c0], zmm2; ret; 
0x000000001a4701: vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a4708: vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a470f: vmovups [rsi+0xc0], zmm2; ret; 
0x000000001a4599: vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45ae: vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45a7: vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a45a0: vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001a46fb: vmovups [rsi], zmm2; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x00000000081ca0: vpaddd xmm6, xmm2, [rsi-0x6]; jmp qword ptr [rsi+0x2e]; 
0x0000000008804d: vpaddsw xmm2, xmm2, [rsi]; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000019a274: vpand xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; not ax; ret; 
0x000000001201de: vpand ymm1, ymm15, [rdi]; lahf; ret; 
0x0000000019a178: vpand ymm2, ymm2, ymm1; vpmovmskb eax, ymm2; inc eax; vzeroupper; ret; 
0x0000000019a0f2: vpand ymm4, ymm4, ymm2; vpmovmskb eax, ymm4; inc eax; vzeroupper; ret; 
0x0000000019a226: vpand ymm4, ymm4, ymm3; vpmovmskb eax, ymm4; inc eax; vzeroupper; ret; 
0x000000001b5ce8: vpcmpd k1, ymm17, [rdi+rdx*4-0x20], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001b5d11; ret; 
0x000000001b5c98: vpcmpd k1, ymm17, [rdx+0x60], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001b5cad; ret; 
0x000000001b5a1e: vpcmpd k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001b5a30; ret; 
0x0000000019a3b1: vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; notrack jmp r10; 
0x0000000019a26e: vpcmpeqb xmm2, xmm2, [rdi+rdx-0x10]; vpand xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; not ax; ret; 
0x00000000199ff7: vpcmpeqb xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x000000001a79f7: vpcmpeqb xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x00000000199f9d: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x000000001a799d: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x0000000019a146: vpcmpeqb ymm1, ymm1, [rdi+rdx-0x20]; vpmovmskb eax, ymm1; inc eax; vzeroupper; ret; 
0x000000001a1607: vpcmpeqd xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001ae627: vpcmpeqd xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000001a15b2: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001ae5d2: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000001aecb2: vpcmpub k1, ymm17, [rdi+rdx-0x20], 0x4; kmovd eax, k1; ret; 
0x000000001aec48: vpcmpub k1, ymm17, [rdi+rdx-0x20], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001aec6c; ret; 
0x000000001aebf8: vpcmpub k1, ymm17, [rdx+0x60], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001aec0d; ret; 
0x000000001aec9e: vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; ret; 
0x000000001ae99e: vpcmpub k1{k2}, ymm18, [rdi], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001ae9b0; ret; 
0x00000000099fb8: vpmaxsw xmm7, xmm2, xmm0; clc; jmp qword ptr [rsi-0x70]; 
0x0000000019a278: vpmovmskb eax, xmm2; not ax; ret; 
0x00000000199fa1: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000199ce0; ret; 
0x000000001a15b6: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a1320; ret; 
0x000000001a79a1: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001a76e0; ret; 
0x000000001ae5d6: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001ae340; ret; 
0x000000001999ab: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000199e70: vpmovmskb eax, ymm1; inc eax; jne short 0x0000000000199ec0; vzeroupper; ret; 
0x000000001a14d0: vpmovmskb eax, ymm1; inc eax; jne short 0x00000000001a1520; vzeroupper; ret; 
0x0000000019a14c: vpmovmskb eax, ymm1; inc eax; vzeroupper; ret; 
0x0000000019a121: vpmovmskb eax, ymm2; inc eax; bzhi eax, eax, edx; vzeroupper; ret; 
0x0000000019a17c: vpmovmskb eax, ymm2; inc eax; vzeroupper; ret; 
0x00000000199e3b: vpmovmskb eax, ymm4; inc eax; jne short 0x0000000000199e84; vzeroupper; ret; 
0x000000001a149b: vpmovmskb eax, ymm4; inc eax; jne short 0x00000000001a14e4; vzeroupper; ret; 
0x0000000019a0f6: vpmovmskb eax, ymm4; inc eax; vzeroupper; ret; 
0x00000000199cc7: vpmovmskb ecx, ymm7; inc ecx; jne short 0x0000000000199d43; vzeroupper; ret; 
0x000000001a130b: vpmovmskb ecx, ymm7; inc ecx; jne short 0x00000000001a1383; vzeroupper; ret; 
0x0000000008a22d: vpmulhw xmm6, xmm2, xmm5; stc; jmp qword ptr [rsi+0x2e]; 
0x000000000dcaa4: vpslldq xmm2, xmm5, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000a6288: vpslldq xmm2, xmm5, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000087958: vpsrlw xmm3, xmm2, [rdx+rdi*8]; jmp qword ptr [rsi-0x70]; 
0x0000000007b7a0: vpsubsw xmm15, xmm15, xmm1; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000001aee6b: vpternlogd ymm18, ymm17, [rdi+rdx-0x20], 0xde; vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000001aee41: vpternlogd ymm20, ymm18, ymm17, 0xfe; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001aed76: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001aee74: vptestmb k1, ymm18, ymm18; kmovd eax, k1; ret; 
0x000000001aed7d: vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001aebcc: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x00000000001aeaa4; ret; 
0x000000001aea95: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne short 0x00000000001aeaaa; ret; 
0x000000001b5c6c: vptestmd k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x00000000001b5b30; ret; 
0x000000001b5b1f: vptestmd k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne short 0x00000000001b5b36; ret; 
0x000000000829b0: vpunpckhwd xmm5, xmm2, [rbx-0x6]; jmp qword ptr [rsi+0x2e]; 
0x000000001aee3b: vpxorq ymm17, ymm17, [rdx]; vpternlogd ymm20, ymm18, ymm17, 0xfe; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001aed6f: vpxorq ymm20, ymm20, [rdi-0x20]; vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd eax, k1; ret; 
0x000000001a73d1: vzeroall; ret; 
0x00000000198b04: vzeroupper; ret; 
0x000000000c3f2c: wrmsr; in eax, dx; mov [rdi+0x13], ch; ret; 
0x000000000c3fae: wrmsr; in eax, dx; mov [rdi+0x17], ch; ret; 
0x000000000c40b1: wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x00000000126406: wrpkru; xor eax, eax; ret; 
0x00000000045431: xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045558; mov edi, ebp; call rax; 
0x000000000454cc: xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x000000000dd998: xchg [rax+0x1], ecx; clc; notrack jmp rax; 
0x0000000008e153: xchg [rax+0x2], bl; add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000008b5a3: xchg [rax+0x31000000], ch; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x00000000062099: xchg [rax+0x48000000], ecx; mov [rax+0x8], ecx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000083bf6: xchg [rax+0x48000000], esp; cmp dword ptr [rax+0x30], 0x0; je short 0x0000000000083c08; ret; 
0x000000000782e3: xchg [rax+0x48000024], bl; mov edi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [r12+0x38]; 
0x00000000156da8: xchg [rax+rax+0x5b000000], edi; pop rbp; pop r12; ret; 
0x0000000014526f: xchg [rax+rax-0x76b40000], bl; ret far; 
0x00000000077343: xchg [rax+rax], edi; add [rdi], cl; mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x000000000532f6: xchg [rax-0x3], dl; jmp qword ptr [rsi+0xf]; 
0x000000001b6447: xchg [rax-0x3d000000], eax; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x000000001b59c9: xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000001b6457: xchg [rax-0x3d000000], esp; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x000000001b57c7: xchg [rax-0x3d], eax; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b59d6: xchg [rax-0x3d], eax; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b4542: xchg [rax-0x3d], eax; xor eax, eax; ret; 
0x000000001b57d7: xchg [rax-0x3d], esp; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b43ad: xchg [rax-0x3d], esp; xor eax, eax; ret; 
0x000000001b57d6: xchg [rax-0x3d], r12d; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001b43ac: xchg [rax-0x3d], r12d; xor eax, eax; ret; 
0x000000001b57c6: xchg [rax-0x3d], r8d; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b59d5: xchg [rax-0x3d], r8d; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x000000001b4541: xchg [rax-0x3d], r8d; xor eax, eax; ret; 
0x00000000162da1: xchg [rax-0x48000000], ebp; add [rax], eax; add [rax], al; ret; 
0x00000000162dce: xchg [rax-0x48000000], edi; add [rax], eax; add [rax], al; ret; 
0x000000001b5b8b: xchg [rax], ah; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000126ff5: xchg [rax], al; add [rax], al; syscall; 
0x0000000008e203: xchg [rax], cl; add al, [rax]; add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x000000000977a4: xchg [rax], eax; add [rax], al; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x0000000008da1d: xchg [rax], eax; add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx+0x18]; 
0x00000000125f55: xchg [rax], eax; add [rax], al; syscall; 
0x000000001b2db4: xchg [rax], eax; ret; 
0x0000000019ed2c: xchg [rax], eax; vzeroupper; ret; 
0x00000000095cb1: xchg [rax], ecx; add eax, [rax]; add [rbx+0x57510e0], al; ret; 
0x000000001b43e6: xchg [rax], esp; jne short 0x00000000001b43b0; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b4566: xchg [rax], esp; jne short 0x00000000001b4545; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000001b43ed: xchg [rax], esp; ret; 
0x000000001b5b8a: xchg [rax], r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b43ec: xchg [rax], r12d; ret; 
0x0000000008b056: xchg [rbp+0x2], ah; add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000008ae66: xchg [rbp+0x31000000], ah; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x00000000099976: xchg [rbp+0x31], eax; shl byte ptr [rcx], cl; ror byte ptr [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x000000000c588e: xchg [rbp+0x4cd575c9], eax; mov eax, eax; ret; 
0x000000000c5007: xchg [rbp+0xf000000], edi; adc [rdi+rdx-0x10], eax; movups [rdi], xmm0; ret; 
0x00000000074987: xchg [rbp+rax], ah; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000001b54ce: xchg [rbp+rdi*8-0xf760001], esi; ret; 
0x000000001b4556: xchg [rbp-0x14], esi; lea rax, [rdi+rax*4]; ret; 
0x000000000b4980: xchg [rbx+0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x0000000007d4e0: xchg [rbx+0x48000002], ebx; lea edx, [rip+0x154d24]; movsxd rax, [rdx+rax*4]; add rax, rdx; notrack jmp rax; 
0x000000000751b8: xchg [rbx+0x48000018], dl; mov esi, [rsp+0x8]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x0000000007c4a7: xchg [rbx+0x4c000009], cl; mov edx, edi; mov rsi, rbp; mov rdi, r12; call qword ptr [rax+0x38]; 
0x00000000076585: xchg [rbx+0x4c00000c], dh; mov edx, edi; mov rsi, r9; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000075994: xchg [rbx+0x4c000019], al; mov edx, esi; mov rsi, r15; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000005140d: xchg [rbx+rdi*8-0x7fbe0001], cl; jl short 0x000000000005143a; jmp far fword ptr [rdi]; 
0x00000000129e3b: xchg [rbx-0x2e76f7fc], cl; shr eax, cl; and eax, 0x1; ret; 
0x0000000003244d: xchg [rbx], bl; add eax, [rax]; add [rcx+0x3948fc56], cl; ret; 
0x000000001b438e: xchg [rbx], edi; xor [rbp+0x1d], dh; ret; 
0x000000001b2a4a: xchg [rcx+0x1], edx; add [rax], al; je 0x00000000001b2b90; mov byte ptr [rdi], 0x0; ret; 
0x0000000007858a: xchg [rcx+0x48000005], esp; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; notrack jmp rcx; 
0x000000001b7b2d: xchg [rcx+rax-0x72b40000], esp; and eax, 0x2c2b7; movsxd r10, [r12+r10*4]; add r10, r12; notrack jmp r10; 
0x000000000379c7: xchg [rcx+rax], eax; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; notrack jmp rcx; 
0x00000000113985: xchg [rcx+rax], ecx; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x00000000170d96: xchg [rcx-0x4], bl; jmp qword ptr [rsi+0xf]; 
0x000000000909e5: xchg [rcx-0x7], edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000008ea32: xchg [rcx], dh; add [rax], eax; add [rsi-0x1], bh; mov rdi, r15; call qword ptr [rax+0x18]; 
0x00000000108b0e: xchg [rcx], dl; add [rcx+0x5b595a0a], cl; ret; 
0x0000000007305a: xchg [rcx], eax; add eax, 0x63480000; or al, 0x8a; add rcx, rdx; notrack jmp rcx; 
0x0000000011ef75: xchg [rcx], ebx; hlt; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x00000000088fa4: xchg [rdi+0x1], ah; add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000087794: xchg [rdi+0x1], dh; add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000006256c: xchg [rdi+0x48000000], edi; lea ecx, [rip+0x16e0a8]; movsxd rax, [rcx+rax*4]; add rax, rcx; notrack jmp rax; 
0x000000000841c4: xchg [rdi+0x4c000001], bh; mov edi, edi; call qword ptr [rax+0x20]; 
0x000000001571ba: xchg [rdi+0x8], eax; cmp eax, 0x1; jg short 0x00000000001571c8; ret; 
0x000000001724f9: xchg [rdi+0xb], edx; add [rbx+0x2e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x000000000c4909: xchg [rdi+0xf000001], ecx; adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x00000000076ed2: xchg [rdi+0xffffff0], ecx; mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x00000000075f57: xchg [rdi+rcx], ah; add [rdi+rcx-0x4a], al; sub [rax-0x77], ecx; ret far; 
0x00000000041956: xchg [rdi], al; sbb al, [rax]; ret; 
0x0000000007690c: xchg [rdi], bh; add al, 0x0; add [rax-0x77], cl; ret far; 
0x0000000007ed54: xchg [rdi], dh; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x000000000620ee: xchg [rdi], eax; cmp eax, 0x1; jg short 0x0000000000062100; ret; 
0x000000000773a4: xchg [rdi], esi; in eax, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x000000000c520d: xchg [rdx+0x2b], eax; add al, 0x87; je short 0x00000000000c51f0; ret; 
0x00000000083a01: xchg [rdx+0x44000001], cl; mov esi, esp; mov rdi, r14; call qword ptr [rax+0x18]; 
0x0000000008e469: xchg [rdx+0x48000000], ah; mov edi, ebx; call qword ptr [r13+0x60]; 
0x00000000076039: xchg [rdx+0x4c000007], dh; mov edx, esi; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000001721f9: xchg [rdx+0xb], ebx; add [rbx+0x2e7f01fa], al; add rsp, 0x10; pop rbp; ret; 
0x00000000128a30: xchg [rdx+rax], dl; add [rcx+rcx*4-0x32], cl; mov edi, r12d; mov eax, r10d; syscall; 
0x0000000017075c: xchg [rdx], cl; add [rbp+0x31], al; jmp qword ptr [rdi+rax*8]; 
0x0000000007c299: xchg [rdx], dh; add eax, 0x89480000; ret far; 
0x0000000011e936: xchg [rip+0x102a6c], eax; cmp eax, 0x1; jg short 0x000000000011e980; pop rbp; ret; 
0x000000000eaf22: xchg [rip+0x135b98], eax; cmp eax, 0x1; jg short 0x00000000000eaf40; pop rbx; ret; 
0x000000000db588: xchg [rip+0x1451d2], eax; cmp eax, 0x1; jg short 0x00000000000db5b0; add rsp, 0x8; ret; 
0x0000000008f570: xchg [rip+0x18c4da], eax; cmp eax, 0x1; jg short 0x000000000008f580; ret; 
0x0000000008d098: xchg [rip+0x18e9b2], eax; cmp eax, 0x1; jg short 0x000000000008d0e0; add rsp, 0x8; ret; 
0x00000000080a50: xchg [rip+0x19afba], eax; cmp eax, 0x1; jg short 0x0000000000080a60; ret; 
0x000000000460c8: xchg [rip+0x1d567a], eax; cmp eax, 0x1; jg short 0x00000000000460f0; pop rbp; ret; 
0x00000000085f36: xchg [rip+0x31000001], bl; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x00000000075d17: xchg [rip+0x4c000015], dh; mov edx, edi; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x000000001bb9c6: xchg [rip+0x650f4], eax; cmp eax, 0x1; jg short 0x00000000001bb9f0; pop rbx; ret; 
0x000000001722e0: xchg [rip+0xb599e], eax; cmp eax, 0x1; jg short 0x0000000000172300; add rsp, 0x8; ret; 
0x000000001721a0: xchg [rip+0xb5ade], eax; cmp eax, 0x1; jg short 0x00000000001721c0; add rsp, 0x8; ret; 
0x00000000040784: xchg [rip+0xc76400], bl; sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x00000000150d23: xchg [rip+0xd1857], eax; cmp eax, 0x1; jg short 0x0000000000150d48; pop rbp; ret; 
0x00000000155c22: xchg [rip+0xd1be4], eax; cmp eax, 0x1; jg short 0x0000000000155c60; add rsp, 0x8; ret; 
0x0000000013ea3d: xchg [rip+0xe3535], eax; cmp eax, 0x1; jg short 0x000000000013ea98; add rsp, 0x8; ret; 
0x0000000012c6fb: xchg [rip+0xf5197], edx; cmp edx, 0x1; jg short 0x000000000012c720; add rsp, 0x18; ret; 
0x00000000125a69: xchg [rip+0xfba51], eax; cmp eax, 0x1; jg short 0x0000000000125a78; ret; 
0x00000000135b76: xchg [rip-0x72b7fff9], dl; adc eax, 0x79eff; cmovne rax, rdx; ret; 
0x0000000007a2a5: xchg [rsi+0x48000006], dh; mov edi, [rbp-0x8b8]; mov rdx, r13; mov rsi, r10; call qword ptr [rbx+0x38]; 
0x00000000080045: xchg [rsi+0x4c000000], dh; mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x000000001a0835: xchg [rsi+0xffffffc], esi; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x00000000180e46: xchg [rsi+rax], ah; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000183346: xchg [rsi+rax], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017e485: xchg [rsi+rax], ecx; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000065fc6: xchg [rsi], bh; std; jmp qword ptr [rsi+0xf]; 
0x00000000139634: xchg [rsi], cl; add al, ch; jge short 0x0000000000139630; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000045432: xchg [rsi], edx; cmp edx, 0x1; jg 0x0000000000045558; mov edi, ebp; call rax; 
0x000000000454cd: xchg [rsi], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x0000000007cb6b: xchg [rsp+rax-0x76b40000], dl; cli; mov rsi, rbp; mov rdi, r12; call qword ptr [r14+0x38]; 
0x000000000c5211: xchg [rsp+rbx*8-0x3d], esi; nop [rax]; xor eax, eax; ret; 
0x000000001717f2: xchg ah, ch; jmp qword ptr [rsi+0x66]; 
0x0000000008b407: xchg ah, dl; add [rax], al; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000001b5d1f: xchg al, ah; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d07: xchg al, al; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001411bb: xchg al, bh; add [rax], al; add [rcx-0x77], al; ret; 
0x00000000183f46: xchg al, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000f14b3: xchg al, ch; add eax, [rax]; add [rbx+0x6b8d483b], cl; add al, 0x83; call far fword ptr [rbp+0xf]; 
0x00000000169bbf: xchg al, ch; pop rbx; ret far; 
0x000000001b5d1e: xchg al, r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d06: xchg al, r8b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000009269e: xchg ax, ax; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000001a86ee: xchg ax, ax; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000b507e: xchg ax, ax; bsr eax, eax; add rax, rdi; ret; 
0x000000001750ee: xchg ax, ax; cmp byte ptr [rsp+0xf], 0x0; je short 0x0000000000175102; mov rdi, [rsp+0x18]; call qword ptr [rbx+0x360]; 
0x00000000092dee: xchg ax, ax; cmp rdx, rbp; jbe short 0x0000000000092e40; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000016d08e: xchg ax, ax; endbr64; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x00000000089ffe: xchg ax, ax; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000090c9e: xchg ax, ax; endbr64; cmp dword ptr [rdi], 0x1; je short 0x0000000000090cb0; ret; 
0x000000000945fe: xchg ax, ax; endbr64; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000a00be: xchg ax, ax; endbr64; mov dword ptr [rip+0x17fb52], 0x0; ret; 
0x0000000012646e: xchg ax, ax; endbr64; mov eax, 0x11f; syscall; 
0x000000001265ee: xchg ax, ax; endbr64; mov eax, 0x131; syscall; 
0x00000000119d3e: xchg ax, ax; endbr64; mov eax, 0x1; syscall; 
0x000000001197fe: xchg ax, ax; endbr64; mov eax, 0x1b4; syscall; 
0x0000000009fdbe: xchg ax, ax; endbr64; mov eax, 0x3; syscall; 
0x000000001145fe: xchg ax, ax; endbr64; mov eax, 0x53; syscall; 
0x000000000ec33e: xchg ax, ax; endbr64; mov eax, 0x79; syscall; 
0x0000000011b51e: xchg ax, ax; endbr64; mov eax, 0xaa; syscall; 
0x0000000011ec1e: xchg ax, ax; endbr64; mov eax, 0xb; syscall; 
0x000000000d99de: xchg ax, ax; endbr64; mov eax, 0xc9; syscall; 
0x000000000e66de: xchg ax, ax; endbr64; mov eax, [rdi]; ret; 
0x0000000009b59e: xchg ax, ax; endbr64; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x000000001265ae: xchg ax, ax; endbr64; mov r10, rcx; mov eax, 0x137; syscall; 
0x0000000009754e: xchg ax, ax; endbr64; mov rax, [rdi]; mov [rip+0x181d42], rax; ret; 
0x00000000090c8e: xchg ax, ax; endbr64; mov rax, [rdi]; mov [rip+0x1885ff], eax; ret; 
0x00000000090c7e: xchg ax, ax; endbr64; mov rax, [rdi]; mov [rip+0x18860b], eax; ret; 
0x00000000090c6e: xchg ax, ax; endbr64; mov rax, [rdi]; mov [rip+0x188617], eax; ret; 
0x0000000003a35e: xchg ax, ax; endbr64; mov rax, [rip+0x1dea8d]; add rax, fs:[0x0]; ret; 
0x0000000015d21e: xchg ax, ax; endbr64; ret; 
0x0000000008e79e: xchg ax, ax; endbr64; xor eax, eax; ret; 
0x000000000c6dbe: xchg ax, ax; lea rax, [rip+0xee419]; test ecx, 0x40000000; je short 0x00000000000c6da2; ret; 
0x000000000c562e: xchg ax, ax; lea rax, [rip+0xef449]; test ecx, 0x40000000; je short 0x00000000000c5612; ret; 
0x000000000b139e: xchg ax, ax; mov [rax], sil; add rax, rcx; ret; 
0x0000000018d68e: xchg ax, ax; mov [rcx], dx; ret; 
0x0000000018d6be: xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000c0c6e: xchg ax, ax; mov [rdi], dx; ret; 
0x000000000c0c9e: xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000018f9de: xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000bfc7e: xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000009af2e: xchg ax, ax; mov eax, 0x10; ret; 
0x0000000011456e: xchg ax, ax; mov eax, 0x10c; syscall; 
0x00000000092b9e: xchg ax, ax; mov eax, 0x16; ret; 
0x000000000ecf9e: xchg ax, ax; mov eax, 0x7e; ret; 
0x000000000846be: xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000d7b4e: xchg ax, ax; mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000d7bb0; ret; 
0x000000000d7b9e: xchg ax, ax; mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000d7bb0; ret; 
0x00000000165afe: xchg ax, ax; mov eax, [rdi]; mov [rcx], eax; mov eax, 0x1; ret; 
0x000000000c12de: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x0000000019e39e: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x0000000008fe4e: xchg ax, ax; mov rax, [rax+0x388]; jmp qword ptr [rax+0x28]; 
0x0000000015df0e: xchg ax, ax; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000015d4ee: xchg ax, ax; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001751fe: xchg ax, ax; mov rax, [rbx+0x388]; call qword ptr [rax+0x50]; 
0x0000000016bd9e: xchg ax, ax; mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000016b63e: xchg ax, ax; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000011717e: xchg ax, ax; mov rax, [rip+0x101c89]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009fd9e: xchg ax, ax; mov rax, [rip+0x179069]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009cb5e: xchg ax, ax; mov rax, [rip+0x17c2a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000175e8e: xchg ax, ax; mov rax, [rip+0xa2f79]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000011fa9e: xchg ax, ax; mov rax, [rip+0xf9369]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000001b3e5e: xchg ax, ax; mov rax, rdi; ret; 
0x0000000004383e: xchg ax, ax; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000c226e: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000c140e: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000001663de: xchg ax, ax; movdqu xmm2, [rcx]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x000000001663ee: xchg ax, ax; movdqu xmm3, [rdi+0x20]; mov eax, 0x1; movups [rcx], xmm3; ret; 
0x000000001b32ee: xchg ax, ax; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001b2c4e: xchg ax, ax; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000000c467e: xchg ax, ax; rep ret; 
0x000000000378de: xchg ax, ax; ret; 
0x00000000156f3e: xchg ax, ax; test rax, rax; je short 0x0000000000156f50; mov qword ptr [rip+0xd08d8], 0x0; ret; 
0x000000001b61ae: xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001b643e: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000001afcfe: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000001afdfe: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000001a112e: xchg ax, ax; vmovdqu [rdi-0x40], ymm0; vmovdqu [rdi-0x20], ymm0; vzeroupper; ret; 
0x000000000c3d3e: xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x0000000007d36e: xchg ax, ax; xor eax, eax; ret; 
0x000000000d7e7e: xchg ax, ax; xor rax, rax; ret; 
0x0000000009112b: xchg bh, bh; jmp qword ptr [rsi-0x70]; 
0x00000000183c46: xchg bl, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000184246: xchg ch, dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000003261c: xchg ch, dl; add [rax], eax; add [rcx-0x77], al; xor ecx, [rcx-0x77]; ret far; 
0x000000000f57f2: xchg ch, dl; add al, [rax]; add [rbp+rcx*4+0x4f], cl; jmp qword ptr [rsi+0x41]; 
0x000000000dfa60: xchg ch, dl; add eax, [rax]; add [rax-0x41], cl; ret; 
0x00000000183946: xchg dh, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000107556: xchg dh, bl; or al, 0x0; movsxd rax, [rdx+rdi*4]; add rax, rdx; notrack jmp rax; 
0x000000001b30e5: xchg dh, dh; add [rax], eax; add [rdx-0x4e], ah; and gs:[rsi], ah; ret far; 
0x000000000867c1: xchg dl, bl; add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000184546: xchg dl, dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b5683: xchg eax, esp; ret; 
0x000000001b5682: xchg eax, r12d; ret; 
0x0000000011ff07: xchg ebp, eax; add [rax], al; add [rcx-0x75], cl; jge short 0x000000000011ff0f; call rbx; 
0x0000000010128b: xchg ebp, eax; add [rcx+rax-0x16], cl; notrack jmp rdx; 
0x0000000009edc5: xchg ebp, eax; clc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x000000000e7e59: xchg ebp, eax; cli; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000007fba3: xchg ebp, eax; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000328b7: xchg ebp, eax; jne short 0x00000000000328ba; add [rbp-0x77], cl; ret; 
0x0000000009a1c0: xchg ebp, eax; mov byte ptr [rbp+0x31], 0xd2; shl esi, 0x7; xor sil, 0x81; syscall; 
0x000000000b1357: xchg ebp, eax; mov dword ptr [rcx-0x7c], 0xc3da75f9; nop; ret; 
0x0000000010baf7: xchg ebp, eax; ret far; 
0x00000000048c2d: xchg ebp, eax; ret; 
0x0000000012e4e2: xchg ebp, eax; rol byte ptr [rcx-0x30], 0x44; mov [rsp+0x20], dl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x000000000b120b: xchg ebp, eax; rol dword ptr [rbp-0x7c], 0xca; jne short 0x00000000000b11f0; mov rax, r8; ret; 
0x0000000016bc6a: xchg ebp, eax; ror byte ptr [rax-0x77], 0x4; and al, 0x48; mov eax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000011d828: xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x0000000016bc55: xchg ebp, eax; ror byte ptr [rcx+0x1b803], 0x0; add bl, ch; ret; 
0x00000000160ba2: xchg ebp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000108e12: xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x0000000015d1e0: xchg ebp, eax; std; jmp qword ptr [rsi+0x2e]; 
0x000000000c5a1f: xchg ebp, eax; test edx, edx; jne short 0x00000000000c5a00; ret; 
0x00000000142bce: xchg ebp, ebp; add [rax], al; add [rcx-0x77], al; ret far; 
0x000000000ad20c: xchg ebx, eax; add [rax], al; add [rcx-0x77], cl; ret; 
0x00000000099639: xchg ebx, eax; add [rax], eax; add [rbx+0x5e7421f8], al; mov eax, 0x16; ret; 
0x000000000f0a89: xchg ebx, eax; add al, [rax]; add [rcx-0x77], al; ret; 
0x000000001baab9: xchg ebx, eax; add al, [rax]; ret; 
0x0000000003ff4b: xchg ebx, eax; add r10, r11; notrack jmp r10; 
0x0000000017adb7: xchg ebx, eax; add rsi, rdx; add rdi, rdx; add r9, r11; notrack jmp r9; 
0x0000000016d3e4: xchg ebx, eax; cld; jmp qword ptr [rsi+0xf]; 
0x0000000007fdb3: xchg ebx, eax; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000947da: xchg ebx, eax; cmp [rsi], al; add [rax], al; syscall; 
0x000000001b1af2: xchg ebx, eax; enter 0xc1ff, 0xf; test [rdi+rdi*8-0x1], dh; jmp qword ptr [rdx-0x4e]; 
0x000000001276ec: xchg ebx, eax; idiv bh; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000082852: xchg ebx, eax; insb [rdi], dx; cli; jmp qword ptr [rsi+0x2e]; 
0x000000001b45b1: xchg ebx, eax; lea rax, [rdx+rax*4]; ret; 
0x000000000bfb2c: xchg ebx, eax; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x0000000017aef2: xchg ebx, eax; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001aebd4: xchg ebx, eax; leave; test ecx, ecx; jne 0x00000000001aeaa4; ret; 
0x000000001b5c74: xchg ebx, eax; leave; test ecx, ecx; jne 0x00000000001b5b30; ret; 
0x000000001aea9d: xchg ebx, eax; leave; test ecx, ecx; jne short 0x00000000001aeaaa; ret; 
0x000000001b5b27: xchg ebx, eax; leave; test ecx, ecx; jne short 0x00000000001b5b36; ret; 
0x0000000015e28b: xchg ebx, eax; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000008ddc6: xchg ebx, eax; nop [rax+rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000001b57a5: xchg ebx, eax; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000000852ed: xchg ebx, eax; nop; add [rax], al; add [rcx+0x1], cl; ret; 
0x000000000d41e9: xchg ebx, eax; or al, 0xf8; dec dword ptr [rax-0x7d]; ret; 
0x00000000057709: xchg ebx, eax; or eax, [rax]; add [rax-0x80], al; jmp far fword ptr [rbx]; 
0x000000001a6919: xchg ebx, eax; out 0xf8, eax; jmp qword ptr [rsi+0x66]; 
0x00000000152938: xchg ebx, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000001afb19: xchg ebx, eax; push rbp; clc; jmp qword ptr [rsi+0x66]; 
0x000000001af78f: xchg ebx, eax; ret; 
0x000000001aeac4: xchg ebx, eax; rol byte ptr [rbp+0x622675c0], 0xb2; and gs:[rsi], ah; ret; 
0x000000001b5b50: xchg ebx, eax; rol byte ptr [rbp+0x622a75c0], 0xb2; and gs:[rdi], ah; ret; 
0x000000001b173d: xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001afcc1: xchg ebx, eax; rol byte ptr [rbp-0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001af836: xchg ebx, eax; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001b235f: xchg ebx, eax; shl bl, 0x48; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001a0919: xchg ebx, eax; stc; jmp qword ptr [rsi+0x66]; 
0x000000001b573d: xchg ebx, eax; xor eax, eax; ret; 
0x000000000a834c: xchg ecx, eax; adc [rax], al; test edx, 0x40000000; je short 0x00000000000a8329; ret; 
0x000000000ebfab: xchg ecx, eax; add [rax], al; add dh, dh; ret; 
0x000000001345e5: xchg ecx, eax; add al, 0x0; lea rdx, [rip+0x4e821]; cmovne rax, rdx; ret; 
0x0000000003a9f6: xchg ecx, eax; add rax, rcx; notrack jmp rax; 
0x0000000007d3e6: xchg ecx, eax; add rdx, rcx; notrack jmp rdx; 
0x000000000c5333: xchg ecx, eax; cmp edx, [rip-0x7f74b800]; or [rdx], al; add [rax], al; ret; 
0x000000001038f9: xchg ecx, eax; lea rcx, [rip+0xd166f]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000196701: xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000011514b: xchg ecx, eax; mov ecx, 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x0000000011d17b: xchg ecx, eax; mov esp, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c893: xchg ecx, eax; out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x0000000016575b: xchg ecx, eax; push rcx; in eax, dx; call qword ptr [rax-0x5e1f00d]; 
0x000000001a44ba: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx-0xf]; 
0x0000000016188b: xchg ecx, eax; std; call qword ptr [rax-0x5e1f00d]; 
0x00000000173e8b: xchg ecx, eax; sub ah, bh; call qword ptr [rax-0x5e1f00d]; 
0x00000000194e2f: xchg ecx, eax; sub eax, edx; ret; 
0x00000000057118: xchg ecx, ebp; sbb ch, bh; jmp qword ptr [rsi-0x70]; 
0x000000000d42c8: xchg ecx, ebp; sbb edx, [rsi-0xb]; jmp qword ptr [rsi-0x70]; 
0x00000000104c83: xchg edi, eax; add rdx, r15; notrack jmp rdx; 
0x00000000053c9e: xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; notrack jmp rdx; 
0x000000000b146c: xchg edi, eax; add rdx, rdi; notrack jmp rdx; 
0x000000001760cf: xchg edi, eax; bnd jmp qword ptr [rsi+0xf]; 
0x0000000010932c: xchg edi, eax; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x000000000ff395: xchg edi, eax; jp short 0x00000000000ff397; jmp far fword ptr [rax+0x6850f01]; 
0x000000000892a0: xchg edi, eax; mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x00000000089170: xchg edi, eax; mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x0000000007f595: xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x000000000a31e5: xchg edi, eax; push 0x17; add [rax+0x39], cl; ret; 
0x0000000012c6fd: xchg edi, eax; push rcx; sldt [rbx+0x1a7f01fa]; add rsp, 0x18; ret; 
0x0000000014a385: xchg edi, eax; ret; 
0x000000001294ca: xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x0000000013608a: xchg edx, eax; adc al, 0xfd; jmp qword ptr [rsi-0x70]; 
0x0000000015ea83: xchg edx, eax; add [rax], eax; add [rax-0x75], cl; and al, 0x28; call rax; 
0x000000001361ea: xchg edx, eax; add bh, cl; jmp qword ptr [rsi-0x70]; 
0x00000000135b9a: xchg edx, eax; add cl, bh; jmp qword ptr [rsi-0x70]; 
0x000000000f65bf: xchg edx, eax; add rax, rdx; notrack jmp rax; 
0x00000000035fda: xchg edx, eax; and edi, edi; jmp qword ptr [rsi-0x70]; 
0x0000000005f72e: xchg edx, eax; cld; jmp qword ptr [rsi+0x2e]; 
0x0000000016d457: xchg edx, eax; cld; jmp qword ptr [rsi+0xf]; 
0x00000000138149: xchg edx, eax; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000134b1a: xchg edx, eax; cmp ch, bh; jmp qword ptr [rsi-0x70]; 
0x00000000059aca: xchg edx, eax; fcos; jmp qword ptr [rsi-0x70]; 
0x000000000cb62a: xchg edx, eax; idiv bh; jmp qword ptr [rsi-0x70]; 
0x000000001afb9e: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x000000001a7221: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x00000000053b77: xchg edx, eax; mov [rax], al; add [rax], al; xor eax, eax; ret; 
0x0000000015d3e8: xchg edx, eax; nop [rax]; endbr64; ret; 
0x0000000013f120: xchg edx, eax; out dx, al; dec dword ptr [rax-0x77]; ret; 
0x0000000016565a: xchg edx, eax; push rdx; in eax, dx; dec dword ptr [rax-0x77]; ret; 
0x0000000008c4aa: xchg edx, eax; ret far; 
0x000000000cea5a: xchg edx, eax; ret; 
0x00000000193b87: xchg edx, eax; sub eax, edx; ret; 
0x0000000015650b: xchg edx, esi; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000002bdd9: xchg esi, eax; adc al, 0x0; mov rdi, rbx; call r14; 
0x000000000a839b: xchg esi, eax; add [rax], al; lea rdx, [rip+0xcffeb]; cmovne rax, rdx; ret; 
0x00000000075d66: xchg esi, eax; add al, [rax]; add cl, ch; idiv dil; call qword ptr [rax-0x5e1f00d]; 
0x00000000059ab6: xchg esi, eax; add edi, esi; jmp qword ptr [rsi+0xf]; 
0x0000000003fc75: xchg esi, eax; add rdx, rsi; notrack jmp rdx; 
0x0000000016d07c: xchg esi, eax; cld; call qword ptr [rax-0x5e1f00d]; 
0x00000000164a73: xchg esi, eax; enter 0x1, 0x0; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000016cb86: xchg esi, eax; fwait; cld; jmp qword ptr [rsi+0xf]; 
0x000000001b5ce6: xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x00000000094cb6: xchg esi, eax; push rcx; cli; jmp qword ptr [rsi+0xf]; 
0x00000000088516: xchg esi, eax; ret far; 
0x0000000004dab6: xchg esi, eax; ret; 
0x00000000076305: xchg esi, ebx; or [rax], eax; add [rcx+0xf], al; mov esi, 0x1d8d48cd; ret far; 
0x0000000012837d: xchg esi, esi; dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x38; ret; 
0x000000000320b8: xchg esp, eax; add [rax], al; add [rcx+0x3948fc51], cl; ret; 
0x000000001b7b3c: xchg esp, eax; add r10, r12; notrack jmp r10; 
0x000000000ff9be: xchg esp, eax; and al, 0x78; add al, [rax]; add [rcx], bh; ret; 
0x00000000032afd: xchg esp, eax; and al, 0x80; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000016d2a4: xchg esp, eax; cld; jmp qword ptr [rsi+0xf]; 
0x0000000007fcab: xchg esp, eax; cli; jmp qword ptr [rsi-0x70]; 
0x00000000127620: xchg esp, eax; idiv bh; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x000000000a9da8: xchg esp, eax; imul ecx, [rdi], 0x0; cmove rax, rdx; ret; 
0x00000000079e02: xchg esp, eax; in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000e97e8: xchg esp, eax; jnp short 0x00000000000e97e5; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000a9d68: xchg esp, eax; lodsb [rsi]; add [rax], eax; cmove rax, rdx; ret; 
0x0000000016fbf8: xchg esp, eax; mov bl, ch; dec dword ptr [rax-0x77]; ret; 
0x000000000b12c4: xchg esp, eax; mov dword ptr [rax+0x8], 0x39e575fe; enter 0xe174, 0x4c; mov eax, eax; ret; 
0x00000000197d69: xchg esp, eax; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000160890: xchg esp, eax; rcr byte ptr [rbx+0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x0000000003653a: xchg esp, eax; ret; 
0x0000000014402c: xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f18b], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000016d4e4: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x00000000050d83: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000000ed17c: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x00000000101420: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rbp-0x7600ffbc], 0x4; and al, 0xe8; jmp qword ptr [rdi+rdi*8-0x1]; 
0x000000001247b6: xchg esp, eax; ror dword ptr [rax-0x73], 0x5; ret; 
0x000000000cda43: xchg esp, eax; shr ecx, 0xdf; idiv edi; jmp qword ptr [rsi+0xf]; 
0x000000000ed61f: xchg esp, ebp; ret; 
0x00000000099a0e: xchg r8, rax; add rsp, 0x18; ret; 
0x000000001b5ce5: xchg rsi, rax; jmp qword ptr [rdx-0xd]; 
0x00000000090fda: xend; xor eax, eax; ret; 
0x0000000013516e: xlat [rbx]; add [rax], al; add [rax+0x1], cl; ret far; 
0x0000000019dc84: xlat [rbx]; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000019dd5d: xlat [rbx]; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000019dd09: xlat [rbx]; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000019d9b5: xlat [rbx]; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000019d9c5: xlat [rbx]; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000019d9d5: xlat [rbx]; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000017adbd: xlat [rbx]; add r9, r11; notrack jmp r9; 
0x0000000005a347: xlat [rbx]; cmp rax, 0x9; ja short 0x000000000005a320; mov rax, r8; ret; 
0x0000000019dcba: xlat [rbx]; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000199e10: xlat [rbx]; inc ecx; jne 0x0000000000199d40; vzeroupper; ret; 
0x000000001a1464: xlat [rbx]; inc ecx; jne 0x00000000001a1380; vzeroupper; ret; 
0x0000000019d9a5: xlat [rbx]; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000005d8d5: xlat [rbx]; iretd; sbb eax, [rax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000000c497c: xlat [rbx]; jb short 0x00000000000c4982; rep movsb [rdi], [rsi]; ret; 
0x00000000122477: xlat [rbx]; jne short 0x0000000000122468; mov rax, [rax+0x8]; ret; 
0x000000001b2255: xlat [rbx]; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b2265: xlat [rbx]; lea eax, [rdi+rax+0x40]; ret; 
0x000000001b2275: xlat [rbx]; lea eax, [rdi+rax+0x60]; ret; 
0x000000001b2285: xlat [rbx]; lea eax, [rdi+rax+0x80]; ret; 
0x00000000184a20: xlat [rbx]; lea r11, [rip+0x5eda8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018486d: xlat [rbx]; lea r11, [rip+0x5f19b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182fc8: xlat [rbx]; lea r11, [rip+0x60a40]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000182e61: xlat [rbx]; lea r11, [rip+0x60ba7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181eec: xlat [rbx]; lea r11, [rip+0x613dc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000181d59: xlat [rbx]; lea r11, [rip+0x617af]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018013b: xlat [rbx]; lea r11, [rip+0x62fcd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001804c8: xlat [rbx]; lea r11, [rip+0x63040]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000018034a: xlat [rbx]; lea r11, [rip+0x631be]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d98c: xlat [rbx]; lea r11, [rip+0x6577c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017d8c7: xlat [rbx]; lea r11, [rip+0x65841]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017afac: xlat [rbx]; lea r11, [rip+0x67f9c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017aee7: xlat [rbx]; lea r11, [rip+0x68061]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b4066: xlat [rbx]; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b4034: xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x000000001b40ed: xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x000000001b40b2: xlat [rbx]; lea rax, [rdi+rax+0x80]; ret; 
0x000000000b1528: xlat [rbx]; movsxd rdi, [r8+rdi*4]; add rdi, r8; notrack jmp rdi; 
0x0000000017c675: xlat [rbx]; push 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000ba47d: xlat [rbx]; ret far; 
0x000000000b49e4: xlat [rbx]; ret; 
0x0000000019d815: xlat [rbx]; rol ch, cl; std; xlat [rbx]; ret; 
0x000000000b4b93: xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000d6e23: xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000b5046: xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x000000000b5075: xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000000d6df3: xlat [rbx]; rol dword ptr [rbp-0x2c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000b4b63: xlat [rbx]; rol dword ptr [rbp-0x5c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x0000000019d5b8: xlat [rbx]; rol dword ptr [rbp-0xc9d8b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000019d983: xlat [rbx]; rol dword ptr [rbp-0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000b4fe4: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001999ad: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x000000001b4ac5: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x000000001b4ad5: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x000000001b4ae5: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x000000001b4ab5: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x00000000199e72: xlat [rbx]; sar edi, 0xc0; jne short 0x0000000000199ec0; vzeroupper; ret; 
0x000000001a14d2: xlat [rbx]; sar edi, 0xc0; jne short 0x00000000001a1520; vzeroupper; ret; 
0x0000000019a14e: xlat [rbx]; sar edi, 0xc0; vzeroupper; ret; 
0x000000001b53a2: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x000000001b548d: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001b5432: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x000000001b53e3: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000ba845: xlat [rbx]; shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x000000001a2e3c: xlat [rbx]; shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a2db3; ret; 
0x000000001a369f: xlat [rbx]; shl dword ptr [rsi-0x1], 0xc0; jne 0x00000000001a3603; ret; 
0x0000000012562a: xlat [rbx]; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000001b4063: xlat [rbx]; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x000000000d7b6c: xor [r11], r15b; xor [rbp+0x3d], r14b; ret; 
0x000000000b4aed: xor [r14+0xf], r12b; xlat [rbx]; ret; 
0x00000000112a97: xor [r15], r9b; adc [rdi+0x40], eax; ret; 
0x000000001663bb: xor [r8+0x1], r15b; movups [rcx], xmm1; ret; 
0x0000000008d812: xor [r8-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000007e415: xor [r9-0x75], cl; add [rcx+0x39], cl; ret; 
0x00000000126757: xor [rax+0x106], bh; syscall; 
0x00000000119f09: xor [rax+0x10], bh; syscall; 
0x00000000126307: xor [rax+0x145], bh; syscall; 
0x000000001663bc: xor [rax+0x1], bh; movups [rcx], xmm1; ret; 
0x00000000170ee6: xor [rax+0x39], ecx; ret; 
0x0000000009d5ee: xor [rax+0x3], bh; add rsp, 0x8; ret; 
0x00000000080816: xor [rax+0x63], ecx; ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000000a0740: xor [rax+0xde], bh; syscall; 
0x000000000a01d3: xor [rax+0xf4], bh; mov [rsp+0x38], r12d; syscall; 
0x00000000169110: xor [rax+rax], al; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000009fddb: xor [rax-0x2708ffe9], edx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000b1562: xor [rax-0x73], cl; adc dil, r15b; ret; 
0x0000000017518e: xor [rax-0x73], cl; or eax, 0xfffffe0a; call qword ptr [rbx+0x358]; 
0x000000000c26e7: xor [rax-0x73], cl; ret; 
0x0000000006a108: xor [rax-0x73], ecx; add [rax-0x77], rcx; lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x0000000008dea9: xor [rax-0x73], ecx; pop rcx; add [rcx+rcx*4-0x1], ecx; call qword ptr [rax+0x18]; 
0x00000000174f80: xor [rax-0x75], cl; add eax, 0xa3f40; mov rdi, [rdi]; call qword ptr [rax+0x348]; 
0x00000000162f2d: xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x0000000002f4c8: xor [rax-0x75], cl; je short 0x000000000002f4f1; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x00000000032b78: xor [rax-0x75], cl; je short 0x0000000000032ba1; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x00000000034338: xor [rax-0x75], cl; je short 0x0000000000034361; pop rax; mov rdi, [rsp+0x50]; call r13; 
0x0000000008d813: xor [rax-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000004e7d8: xor [rax-0x77], cl; mov byte ptr [rcx+0xf], 0x95; ret; 
0x00000000056777: xor [rax-0x77], cl; or [rax+0x2], r15b; ret; 
0x000000000e813f: xor [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x58]; 
0x0000000003774b: xor [rax-0x77], cl; ret; 
0x0000000011fcf3: xor [rax-0x77], ecx; out dx, eax; xor esi, esi; call r12; 
0x00000000056757: xor [rax-0x7b], cl; shl byte ptr [rbp+0x73], cl; mov dword ptr [rdi], 0x0; mov eax, 0x2; ret; 
0x000000000b103b: xor [rax-0x7c], eax; div byte ptr [rbp-0x11]; mov [rdx], rcx; ret; 
0x0000000006a0cc: xor [rax-0x7d], cl; ret; 
0x0000000005399b: xor [rax], al; add [rax+0x9e], bh; syscall; 
0x0000000016902a: xor [rax], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000133c8a: xor [rax], al; add [rax], al; call rax; 
0x0000000002a143: xor [rax], al; add [rax], al; jmp rax; 
0x00000000045d91: xor [rax], al; add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014366f: xor [rax], al; add [rax], al; mov qword ptr [rsp], 0x0; call rax; 
0x00000000029cc7: xor [rax], al; add [rax], al; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x00000000127cb5: xor [rax], al; add [rax], al; syscall; 
0x000000000466e4: xor [rax], al; add [rcx-0x1e], al; jg short 0x0000000000046677; adc [rcx-0x3f76bbea], cl; ret; 
0x00000000083bfe: xor [rax], al; je short 0x0000000000083c08; ret; 
0x000000000c4147: xor [rax], dh; in eax, dx; mov [rdi+0x40], ch; ret; 
0x00000000127665: xor [rax], eax; add [rax], al; syscall; 
0x000000000a478f: xor [rax], ecx; add [rax+0x39], ecx; ret; 
0x00000000115c28: xor [rax], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000a478e: xor [rax], r9; add [rax+0x39], ecx; ret; 
0x000000001b4390: xor [rbp+0x1d], dh; ret; 
0x000000001b14b0: xor [rbp+0x1e], dh; ret; 
0x000000000d3a41: xor [rbp+0x31], al; shr byte ptr [rdx+0x1], 0x6a; add [rbx+rcx*4+0x4c], cl; and al, 0x10; call r13; 
0x000000000d7b70: xor [rbp+0x3d], dh; ret; 
0x000000000d7b6f: xor [rbp+0x3d], r14b; ret; 
0x00000000095e4c: xor [rbp+0x448bffff], dh; and al, 0xc; add rsp, 0x10; pop rbp; ret; 
0x00000000114adb: xor [rbx+0x10], eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000ee4e0: xor [rbx+0x177414fe], al; test rbx, rbx; je short 0x00000000000ee4f4; mov rdi, r15; call rbx; 
0x00000000107450: xor [rbx+0x177414fe], al; test rbx, rbx; je short 0x0000000000107464; mov rdi, r15; call rbx; 
0x00000000040486: xor [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000140831: xor [rbx+0x5d], bl; pop r12; ret; 
0x0000000011c18a: xor [rbx+0xf4c0870], cl; ror dword ptr [r8-0x77], 0x1; and al, 0x20; mov eax, 0x65; syscall; 
0x0000000017549e: xor [rbx-0x1], bl; loopne 0x000000000017548b; jns short 0x00000000001754b7; cld; jmp qword ptr [rsi+0xf]; 
0x0000000008e90d: xor [rbx-0x3f8a0008], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001690a0: xor [rbx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000000d7b6d: xor [rbx], bh; xor [rbp+0x3d], r14b; ret; 
0x000000000c5393: xor [rbx], edi; adc eax, 0x808b4800; cmp [rdx], al; add [rax], al; ret; 
0x000000001685ad: xor [rcx+0x55], al; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000001193e2: xor [rcx+0x5c], al; ret; 
0x00000000083c5c: xor [rcx+0x5d5b7453], cl; pop r12; ret; 
0x00000000104c7f: xor [rcx+0x63], cl; adc al, 0x97; add rdx, r15; notrack jmp rdx; 
0x000000000a01cb: xor [rcx+rcx*4-0x11], al; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000008589b: xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x000000001ba8c2: xor [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x000000001204da: xor [rcx+rcx*4-0x9], cl; mov rax, [rbp-0x58]; mov r15d, r13d; call rax; 
0x0000000006adba: xor [rcx-0x58f4b], cl; jmp qword ptr [rdi+rax*8]; 
0x0000000007e416: xor [rcx-0x75], cl; add [rcx+0x39], cl; ret; 
0x00000000133728: xor [rcx-0x76b37fab], cl; loop 0x000000000013373f; adc [rbp-0x78], edi; call rax; 
0x000000001338e1: xor [rcx-0x76b37fab], cl; loop 0x00000000001338f8; adc [rbp-0x78], edi; call rax; 
0x000000001692b0: xor [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000008a7b4: xor [rcx], al; add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [r15+0x90]; 
0x00000000115bc5: xor [rcx], al; add [rax], al; pop rbp; ret; 
0x00000000126271: xor [rcx], al; add [rax], al; syscall; 
0x0000000012a0d2: xor [rcx], dh; rol byte ptr [rbx-0x69f0f606], 0xc0; ret; 
0x0000000008ea33: xor [rcx], eax; add [rax], al; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax+0x18]; 
0x000000001265f5: xor [rcx], eax; add [rax], al; syscall; 
0x000000000dd723: xor [rdi+0x10890013], esi; xor eax, eax; pop rbx; ret; 
0x000000000c4bf9: xor [rdi+rcx+0x11], al; cmp r14b, al; ret; 
0x00000000112a98: xor [rdi], cl; adc [rdi+0x40], eax; ret; 
0x000000001659eb: xor [rdi], cl; adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000125d44: xor [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000007d3df: xor [rdi], cl; mov dh, 0xd2; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; notrack jmp rdx; 
0x00000000125c58: xor [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000125c2c: xor [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000011b21e: xor [rdx-0x1], edi; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x0000000011b2de: xor [rdx-0x1], edi; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x000000000c538a: xor [rdx], al; add [rax], al; ret; 
0x00000000175db4: xor [rdx], ecx; add [rbp-0x3eb7fbb9], cl; loopne 0x0000000000175dc3; lea rax, [rax+rdx+0x4]; ret; 
0x00000000101c08: xor [rip+0x4634a00], ecx; sahf; add rax, rsi; notrack jmp rax; 
0x00000000169180: xor [rip+0xf000000], al; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000001760db: xor [rip-0x389bfff6], ebp; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000155a6b: xor [rip-0x76b3fff3], ecx; and eax, 0xcfd1a; mov [rip+0xcfd1b], rbp; mov byte ptr [rip+0xcfd1c], 0x0; call rbx; 
0x0000000015dcd6: xor [rsi+0x1], bh; push qword ptr [rip+0x84866]; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x000000000ba80c: xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000b4aee: xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x00000000180075: xor [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000a803c: xor [rsi], al; clc; call far fword ptr [rbx+0x44]; 
0x0000000018034f: xor [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000000bf5b8: xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000bf54e: xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x00000000173704: xor ah, bh; jmp qword ptr [rsi+0xf]; 
0x000000001584ea: xor ah, dl; std; jmp qword ptr [rsi-0x70]; 
0x00000000127735: xor al, 0x0; add [rax], al; syscall; 
0x000000000bfb26: xor al, 0x11; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x00000000096105: xor al, 0x14; add al, ch; ret; 
0x000000001a697a: xor al, 0x16; mov [rdi], ecx; mov [rdi+rdx], esi; ret; 
0x000000001a697f: xor al, 0x17; ret; 
0x000000000d7a78: xor al, 0x1; add [rax], al; ret; 
0x000000000c5309: xor al, 0x1; add [rax], al; ret; 
0x000000001270b5: xor al, 0x1; add [rax], al; syscall; 
0x000000000c54c8: xor al, 0x1a; add [rax], eax; cmove rax, rdx; ret; 
0x00000000029ef2: xor al, 0x24; lea rdi, [rip+0x1ae0a5]; xor eax, eax; call qword ptr [rcx+0x330]; 
0x00000000029ed3: xor al, 0x24; lea rdi, [rip+0x1ae0de]; xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000125dda: xor al, 0x24; mov eax, 0x1b9; mov edi, [rsp+0x8]; syscall; 
0x000000000a04db: xor al, 0x24; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000012629b: xor al, 0x24; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000001276cb: xor al, 0x24; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x000000001279df: xor al, 0x24; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000ab3b3: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x000000001b16e7: xor al, 0x2; jne short 0x00000000001b1679; add rax, rdx; ret; 
0x0000000019d563: xor al, 0x2; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000000f59f0: xor al, 0x39; ret; 
0x000000000a7a93: xor al, 0x48; add esp, 0x10; pop r12; ret; 
0x000000001750e7: xor al, 0x48; add esp, 0x50; pop rbx; ret; 
0x000000000b50fb: xor al, 0x48; lea eax, [rdi+rax+0x20]; ret; 
0x0000000007e178: xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x0000000019d348: xor al, 0x7; jne short 0x000000000019d375; add rax, rdi; vzeroupper; ret; 
0x0000000019d4e2: xor al, 0x7; jne short 0x000000000019d505; add rax, rdi; vzeroupper; ret; 
0x000000001a2307: xor al, 0x7; jne short 0x00000000001a2334; add rax, rdi; vzeroupper; ret; 
0x000000001a24a8: xor al, 0x7; jne short 0x00000000001a24d4; add rax, rdi; vzeroupper; ret; 
0x000000001b1686: xor al, 0x7; jne short 0x00000000001b1679; lea rax, [rdi+rax]; ret; 
0x000000001b45ae: xor al, 0x82; jne short 0x00000000001b4545; lea rax, [rdx+rax*4]; ret; 
0x000000001af95b: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; ret; 
0x00000000199adb: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x000000001b4555: xor al, 0x87; jne short 0x00000000001b4545; lea rax, [rdi+rax*4]; ret; 
0x00000000075a3e: xor al, 0x88; add rsi, rbx; mov rbx, rdx; mov edx, 0x1; jmp rsi; 
0x00000000075472: xor al, 0x88; add rsi, rbx; mov rbx, rdx; xor edx, edx; jmp rsi; 
0x00000000127fa8: xor al, 0x8b; idiv bh; mov eax, [rsp+0x4]; add rsp, 0x28; ret; 
0x0000000007b9bb: xor al, 0x8b; lea rbx, [rip-0x984]; add rsi, rbx; mov rbx, [rsp+0x58]; jmp rsi; 
0x00000000076321: xor al, 0x8b; lea rbx, [rip-0xb3a]; add rsi, rbx; mov rbx, [rsp+0x70]; jmp rsi; 
0x00000000075f8a: xor al, 0x8e; lea rcx, [rip-0x7a3]; add rsi, rcx; jmp rsi; 
0x0000000007ba63: xor al, 0x8f; lea rcx, [rip-0xa2c]; add rsi, rcx; jmp rsi; 
0x00000000138148: xor al, 0x92; cmc; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000012ea98: xor al, 0x9a; out dx, eax; inc dword ptr [rax-0x76b7ffc8]; ret; 
0x000000001a205c: xor al, 0xa; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4f5e: xor al, 0xa; jne 0x00000000001b4c81; ret; 
0x000000000519c3: xor al, 0xb0; add rsi, r8; notrack jmp rsi; 
0x00000000076bc7: xor al, 0xb3; lea rbx, [rip-0x13e0]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076d67: xor al, 0xb3; lea rbx, [rip-0x1580]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c725: xor al, 0xb3; lea rbx, [rip-0x16ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007c7dd: xor al, 0xb3; lea rbx, [rip-0x17a6]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075a8f: xor al, 0xb3; lea rbx, [rip-0x2a8]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075dc0: xor al, 0xb3; lea rbx, [rip-0x5d9]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000075e19: xor al, 0xb3; lea rbx, [rip-0x632]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b843: xor al, 0xb3; lea rbx, [rip-0x80c]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b88d: xor al, 0xb3; lea rbx, [rip-0x856]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b8d5: xor al, 0xb3; lea rbx, [rip-0x89e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007b925: xor al, 0xb3; lea rbx, [rip-0x8ee]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076191: xor al, 0xb3; lea rbx, [rip-0x9aa]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076281: xor al, 0xb3; lea rbx, [rip-0xa9a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb13: xor al, 0xb3; lea rbx, [rip-0xadc]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bb67: xor al, 0xb3; lea rbx, [rip-0xb30]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bbb5: xor al, 0xb3; lea rbx, [rip-0xb7e]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076377: xor al, 0xb3; lea rbx, [rip-0xb90]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007bc11: xor al, 0xb3; lea rbx, [rip-0xbda]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x00000000076441: xor al, 0xb3; lea rbx, [rip-0xc5a]; add rsi, rbx; mov rbx, rcx; jmp rsi; 
0x0000000007dd58: xor al, 0xb7; add rsi, rdi; notrack jmp rsi; 
0x00000000056574: xor al, 0xb8; add [rax], eax; add [rax], al; mov [rsi], rdx; ret; 
0x0000000007dadb: xor al, 0xbe; add [rax], eax; add [rax], al; mov rdi, rbx; call rax; 
0x0000000019983b: xor al, 0xc5; std; xlat [rbx]; ret; 
0x000000001a2059: xor al, 0xe; cmp esi, [rdx+rcx]; jne 0x00000000001a1df6; vzeroupper; ret; 
0x000000001b4f5b: xor al, 0xe; cmp esi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x000000001632b2: xor al, 0xfd; jmp qword ptr [rsi+0x66]; 
0x0000000015321e: xor al, 0xfe; jmp qword ptr [rsi+0x2e]; 
0x000000001277d5: xor al, [rax]; add [rax], al; syscall; 
0x0000000019192a: xor al, [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000011bb75: xor al, [rcx]; add [rax], al; syscall; 
0x0000000007a682: xor al, [rdx]; sbb al, [rax]; mov [rbp-0x8c8], rax; mov [rbp-0x8b0], rsi; call qword ptr [r8+rcx*8-0x40]; 
0x0000000007c29a: xor al, [rip-0x76b80000]; ret far; 
0x0000000012562f: xor al, al; or eax, edx; ret; 
0x0000000016168f: xor al, ch; imul esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000017333b: xor al, ch; jmp qword ptr [rsi-0x6]; 
0x00000000118bcc: xor ax, ax; ret; 
0x0000000009d57c: xor bh, [rax+0x3]; add rsp, 0x8; ret; 
0x0000000008977d: xor bh, [rax-0x1]; test edx, edx; je short 0x0000000000089790; ret; 
0x00000000089b9d: xor bh, [rax-0x1]; test edx, edx; je short 0x0000000000089bb0; ret; 
0x000000000a9a9a: xor bh, [rsi]; add [rax-0x73], cl; adc eax, 0xe60ab; cmovne rax, rdx; ret; 
0x00000000068d81: xor bh, bh; add cl, ch; jmp qword ptr [rbx-0x76bb0001]; 
0x000000001436f3: xor bh, bh; jmp qword ptr [rsi+0x2e]; 
0x0000000014361e: xor bh, bh; jmp qword ptr [rsi+0x66]; 
0x0000000004187d: xor bl, 0xf; adc [rdi], eax; movd xmm1, esi; movaps xmm0, xmm1; ret; 
0x000000000c5158: xor bl, al; nop [rax+rax]; mov [rax], rdi; mov [rax+rdx-0x8], rdi; ret; 
0x000000000b5120: xor bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000001a72e8: xor bl, al; nop [rax+rax]; vmovdqu64 [rax], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; ret; 
0x000000000d6ee1: xor bl, al; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x00000000133bb1: xor bl, al; nop [rax]; xor eax, eax; ret; 
0x000000001afc5e: xor bl, al; vmovdqu64 [rax], xmm16; vmovdqu64 [rax+rdx-0x10], xmm16; ret; 
0x000000000b4c1c: xor bl, al; xchg ax, ax; xor eax, eax; ret; 
0x0000000015f6b9: xor byte ptr [rax+0x1000023], 0x0; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000aa9a0: xor byte ptr [rax+0x6], 0x2a; mov rax, r8; ret; 
0x000000000c5389: xor byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000008e7f9: xor byte ptr [rbp+0x14], 0x5d; ret; 
0x00000000099dfd: xor byte ptr [rcx], 0xc0; ret; 
0x00000000090af3: xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x000000000c3ed8: xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000c3eee: xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000c3f10: xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000c3f2e: xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000c3f4e: xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000c3f74: xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000c3f90: xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000c3fb0: xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000c3fd0: xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000c3ff6: xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000c3d54: xor ch, ch; mov [rdi+0x1], ch; ret; 
0x000000000c4018: xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000c4036: xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000c4056: xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000c4072: xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000c4092: xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000c40b2: xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000c40d2: xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000c40f8: xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000c3d66: xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000c3d7c: xor ch, ch; mov [rdi+0x3], ch; ret; 
0x000000000c4148: xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000c3d94: xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000c3daa: xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000c3dbc: xor ch, ch; mov [rdi+0x6], ch; ret; 
0x000000000c3dda: xor ch, ch; mov [rdi+0x7], ch; ret; 
0x000000000c3de6: xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000000c3dfc: xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000c3e1e: xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000c3e3c: xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000c3e5c: xor ch, ch; mov [rdi+0xc], ch; ret; 
0x000000000c3e7e: xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000c3e9e: xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000c3ebe: xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000c3d40: xor ch, ch; mov [rdi], ch; ret; 
0x00000000125bc1: xor cl, [r15]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000192d9d: xor cl, [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x0000000008cdad: xor cl, [rax-0x75]; and al, 0x8; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax+0x18]; 
0x0000000011fd05: xor cl, [rax-0x77]; out dx, eax; mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000011fd95: xor cl, [rax-0x77]; out dx, eax; mov rdx, r13; mov esi, 0x1; call r12; 
0x00000000125b18: xor cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000125bfc: xor cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001444c8: xor cl, ch; cmp ah, 0xff; jmp qword ptr [rsi-0x70]; 
0x000000000acb2c: xor cl, ch; in eax, dx; idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000005d5b7: xor cl, ch; ret; 
0x000000000bf430: xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x0000000009133b: xor dh, 0x80; syscall; 
0x00000000092b20: xor dh, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000093a25: xor dh, 0x81; mov eax, 0xca; syscall; 
0x00000000092a5f: xor dh, 0x81; syscall; 
0x000000000913a5: xor dh, 0x81; xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000093849: xor dh, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000056d8f: xor dh, bh; jmp qword ptr [rsi+0x66]; 
0x00000000156d7e: xor dh, ch; jmp qword ptr [rsi+0x66]; 
0x000000001323e2: xor dh, cl; jmp qword ptr [rsi+0x66]; 
0x000000000c55aa: xor dh, dh; call far fword ptr [rdx+0x31]; 
0x00000000068d80: xor dil, r15b; add cl, ch; jmp qword ptr [rbx-0x76bb0001]; 
0x0000000011f4ca: xor dl, [rsp+rsi*8]; call far fword ptr [rax+0x4c]; 
0x0000000015f64d: xor dword ptr [rax+0x23], 0x0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000008aa0c: xor dword ptr [rdi+0x48000004], 0xffffff8d; je short 0x000000000008aa39; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x000000000e578b: xor dword ptr [rsi], 0xc7640013; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000a0bbd: xor eax, 0x13213e; sub rsp, 0x8; syscall; 
0x000000000969ae: xor eax, 0x13c0ad; syscall; 
0x0000000009683b: xor eax, 0x13c220; mov eax, 0xe; syscall; 
0x000000000951c4: xor eax, 0x13d817; mov byte ptr [rsp+0x8f], 0x0; syscall; 
0x0000000007d48e: xor eax, 0x154cc1; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000006b8bc: xor eax, 0x165957; movsxd rax, [rsi+r15*4]; add rax, rsi; notrack jmp rax; 
0x0000000003fc6b: xor eax, 0x18c7d0; mov edx, edx; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x0000000011989f: xor eax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000002a2da: xor eax, 0x38c48348; pop rbx; pop rbp; ret; 
0x00000000121467: xor eax, 0x48000f7a; mov eax, [rax]; test rax, rax; je short 0x00000000001214b0; call rax; 
0x00000000039c37: xor eax, 0x48001df3; movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000090853: xor eax, 0x48c48348; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000017e7d7: xor eax, 0x49000649; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x0000000017b617: xor eax, 0x49000679; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x00000000075d18: xor eax, 0x4c000015; mov edx, edi; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000175f92: xor eax, 0x5cac9; syscall; 
0x000000001751de: xor eax, 0x60c48348; pop rbx; ret; 
0x00000000076a52: xor eax, 0x63e90001; out 0xff, eax; jmp qword ptr [rsi+0xf]; 
0x0000000013ea3f: xor eax, 0x83000e35; clc; add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x0000000015de22: xor eax, 0x84719; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015de1c: xor eax, 0x84727; push qword ptr [rip+0x84719]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dce3: xor eax, 0x84858; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000015dcdd: xor eax, 0x84866; push qword ptr [rip+0x84858]; lea r9, [rsp+0x2c]; call qword ptr [rax]; 
0x0000000014d4d0: xor eax, 0x88fdf; movzx ecx, al; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x00000000094a1b: xor eax, 0x8; add [rax], al; lea rsi, [rbx+0x8f0]; mov eax, 0xe; syscall; 
0x00000000105888: xor eax, 0x8b4c0011; add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret; 
0x0000000005fac2: xor eax, 0x8c48348; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000042a42: xor eax, 0x98c48148; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x00000000113193: xor eax, 0xc2dc8; movups [rsp+0x128], xmm0; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000101c06: xor eax, 0xd3109; movsxd rax, [rsi+r11*4]; add rax, rsi; notrack jmp rax; 
0x000000000f0e1d: xor eax, 0xe3916; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000eb16c: xor eax, 0xed2fe; mov eax, 0x142; syscall; 
0x000000000e30d2: xor eax, 0xf0ea1; mov eax, edx; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x000000000e3148: xor eax, 0xf1017; mov ecx, edx; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; notrack jmp rcx; 
0x000000000e1014: xor eax, 0xf2b87; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; notrack jmp rdx; 
0x000000000ded8d: xor eax, 0xf4b9a; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; notrack jmp rax; 
0x0000000009828f: xor eax, 0xf7000001; ret; 
0x00000000126fd7: xor eax, 0xf7000f1e; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126cd7: xor eax, 0xf7000f21; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000126bd7: xor eax, 0xf7000f22; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011b9d7: xor eax, 0xf7000fd4; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001161d7: xor eax, 0xf700102c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001151d7: xor eax, 0xf700103c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000013ea40: xor eax, 0xf883000e; add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x0000000007c290: xor eax, 0xffffedab; cmp edi, 0x5a; jbe 0x000000000007c7d0; mov rbx, rcx; jmp rsi; 
0x00000000076902: xor eax, 0xffffeee9; cmp dil, 0x5a; jbe 0x0000000000076d50; mov rbx, rcx; jmp rsi; 
0x0000000007bc43: xor eax, 0xfffff3f8; mov dword ptr [rsp+0x60], 0x1; mov rbx, rcx; jmp rsi; 
0x000000000761c5: xor eax, 0xfffff626; mov dword ptr [rsp+0x58], 0x1; mov rbx, rcx; jmp rsi; 
0x00000000133c87: xor eax, [0x30]; call rax; 
0x0000000002a140: xor eax, [0x30]; jmp rax; 
0x00000000045d8e: xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014366c: xor eax, [0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000002a19e: xor eax, [0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002a1ef: xor eax, [0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000029cc4: xor eax, [0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x0000000007f7c1: xor eax, [0x30]; test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f8a1: xor eax, [0x30]; test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000454c5: xor eax, [0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x0000000011d318: xor eax, [rax+0x10]; add [rbx], ah; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000127765: xor eax, [rax]; add [rax], al; syscall; 
0x00000000128004: xor eax, [rcx]; add [rax], al; syscall; 
0x0000000014e795: xor eax, [rsi+0x10]; or rax, rdx; sete al; movzx eax, al; ret; 
0x0000000016b15f: xor eax, eax; add r13, rbx; call rbp; 
0x00000000097272: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000008a547: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000099c97: xor eax, eax; add rsp, 0x18; ret; 
0x0000000013269e: xor eax, eax; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000004649e: xor eax, eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000090e2c: xor eax, eax; add rsp, 0x8; ret; 
0x0000000003a184: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000015e1de: xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000015e2a0: xor eax, eax; call qword ptr [rbx+0x28]; 
0x00000000029edc: xor eax, eax; call qword ptr [rbx+0x330]; 
0x00000000029efb: xor eax, eax; call qword ptr [rcx+0x330]; 
0x0000000002aa9b: xor eax, eax; call rbx; 
0x0000000015eac7: xor eax, eax; call rcx; 
0x0000000014e722: xor eax, eax; cmp [rdi+0x2], cx; je short 0x000000000014e730; ret; 
0x000000000f6ff8: xor eax, eax; cmp [rsi], cl; je 0x00000000000f6f5d; ret; 
0x000000001286a8: xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x00000000001286b0; ret; 
0x00000000045e4a: xor eax, eax; cmp byte ptr [rdi], 0x0; jne short 0x0000000000045e58; pop rbx; ret; 
0x00000000045e49: xor eax, eax; cmp byte ptr [rdi], 0x0; jne short 0x0000000000045e58; pop rbx; ret; 
0x0000000015575c: xor eax, eax; cmp eax, 0x2; jne short 0x0000000000155780; mov eax, r8d; ret; 
0x00000000109350: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000009b7bc: xor eax, eax; cmp edi, 0x1; je short 0x000000000009b7c8; ret; 
0x000000000dce43: xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x00000000155060: xor eax, eax; cmp edx, 0x1; jne short 0x0000000000155088; ret; 
0x00000000113a44: xor eax, eax; cmp edx, 0x4; je short 0x0000000000113a54; mov eax, 0x1c; syscall; 
0x0000000012a0d3: xor eax, eax; cmp edx, 0x9; setbe al; ret; 
0x00000000119b06: xor eax, eax; cmp esi, 0x9; je short 0x0000000000119b38; mov eax, 0x48; syscall; 
0x000000000d7c85: xor eax, eax; cmp esi, edi; jne short 0x00000000000d7c90; ret; 
0x000000000891b7: xor eax, eax; cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x000000000903f0: xor eax, eax; cmp qword ptr [rdi+0x460], 0x0; je short 0x0000000000090409; mov rax, [rip+0x188ac5]; call qword ptr [rax+0x368]; 
0x00000000095cf4: xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000ed13b: xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x000000000ed156: xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000ed123: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x000000000ed107: xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x00000000119503: xor eax, eax; cmp rdx, rcx; je short 0x0000000000119510; ret; 
0x00000000090a5f: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000007c679: xor eax, eax; jmp rsi; 
0x000000000c6866: xor eax, eax; lea r9, [rsp+0x28]; call rbx; 
0x00000000119f03: xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall; 
0x000000000923e5: xor eax, eax; mov [r8], rdx; ret; 
0x000000000a80aa: xor eax, eax; mov [r8], rsi; ret; 
0x000000000421bd: xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x00000000083d8f: xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x00000000092898: xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x0000000009287f: xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x00000000142ffa: xor eax, eax; mov [rdi+0x3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x0000000009679f: xor eax, eax; mov [rdi], ecx; ret; 
0x00000000094642: xor eax, eax; mov [rdi], esi; ret; 
0x000000001496e9: xor eax, eax; mov [rdi], rdx; ret; 
0x000000000b105b: xor eax, eax; mov [rdx], rcx; ret; 
0x00000000141e15: xor eax, eax; mov dword ptr [rdi+0x8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x00000000046b5d: xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x0000000011aca4: xor eax, eax; mov eax, 0x127; syscall; 
0x0000000011ad64: xor eax, eax; mov eax, 0x128; syscall; 
0x0000000011ae43: xor eax, eax; mov eax, 0x147; syscall; 
0x0000000011afa3: xor eax, eax; mov eax, 0x148; syscall; 
0x00000000126b16: xor eax, eax; mov eax, 0x19; syscall; 
0x00000000114c9b: xor eax, eax; mov eax, 0x1b7; syscall; 
0x00000000127a57: xor eax, eax; mov eax, 0x2c; syscall; 
0x00000000127817: xor eax, eax; mov eax, 0x2d; syscall; 
0x00000000050c72: xor eax, eax; mov eax, 0x3e; syscall; 
0x000000000ea504: xor eax, eax; mov eax, 0xf7; syscall; 
0x000000000f80f2: xor eax, eax; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000cf8b9: xor eax, eax; mov eax, r8d; ret; 
0x000000001b4620: xor eax, eax; mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x00000000001b4610; ret; 
0x000000001b4634: xor eax, eax; mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x00000000001b4610; ret; 
0x000000001b4648: xor eax, eax; mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x00000000001b4610; ret; 
0x000000001b49ed: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001b4610; ret; 
0x000000001b5135: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x00000000001b4c81; ret; 
0x000000001b4c9e: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x00000000001b4c81; ret; 
0x000000001b5110: xor eax, eax; mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x00000000001b4c81; ret; 
0x000000001b47f3: xor eax, eax; mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x00000000001b4610; ret; 
0x000000001b4833: xor eax, eax; mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x00000000001b4610; ret; 
0x000000001b4eba: xor eax, eax; mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x00000000001b4c81; ret; 
0x000000001b499d: xor eax, eax; mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x00000000001b4610; ret; 
0x000000001b47b3: xor eax, eax; mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001b4610; ret; 
0x000000001b4e69: xor eax, eax; mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x00000000095cd6: xor eax, eax; mov edx, 0x16; cmp [rdi+0x628], rdi; cmove eax, edx; ret; 
0x0000000016ceda: xor eax, eax; mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx; 
0x0000000016ced9: xor eax, eax; mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx; 
0x0000000016b29c: xor eax, eax; mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13; 
0x0000000016d008: xor eax, eax; mov edx, 0xffffffff; mov rsi, r14; mov rdi, rbp; call r12; 
0x000000001b4871: xor eax, eax; mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x00000000001b4610; ret; 
0x000000001b4f58: xor eax, eax; mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x00000000001b4c81; ret; 
0x000000000910f7: xor eax, eax; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000001653e7: xor eax, eax; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000000457d5: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000d3316: xor eax, eax; mov rcx, r12; call rbx; 
0x00000000153589: xor eax, eax; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000086f74: xor eax, eax; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000175ad3: xor eax, eax; mov rdi, r13; xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x000000000d34a5: xor eax, eax; mov rdi, rbp; call rbx; 
0x000000000c6562: xor eax, eax; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x0000000015e9d6: xor eax, eax; mov rdi, rbx; call rcx; 
0x0000000016b3a9: xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 0x2; call r8; 
0x0000000011a0ee: xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000121c0c: xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x0000000015d51b: xor eax, eax; mov rsi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x00000000086d04: xor eax, eax; mov rsi, [rsp+0x18]; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000162f27: xor eax, eax; mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000163142: xor eax, eax; mov rsi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x000000001666ef: xor eax, eax; mov rsi, [rsp+0x50]; mov rcx, [rsp+0x18]; mov rdi, r15; call rcx; 
0x0000000016382b: xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x0000000016384b: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x0000000016633b: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000165a0b: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x00000000162c0b: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x000000000923ac: xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x0000000016c1e2: xor eax, eax; pop r12; pop r13; pop r14; jmp rcx; 
0x000000000a9c7f: xor eax, eax; pop r12; pop r13; ret; 
0x00000000133cdd: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000015ec10: xor eax, eax; pop rbp; jmp rdx; 
0x0000000013b778: xor eax, eax; pop rbp; mov byte ptr [rdi], 0x0; pop r12; ret; 
0x0000000009ede8: xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000003e450: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000407ca: xor eax, eax; pop rbp; ret; 
0x0000000015f5fb: xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x0000000015d466: xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x00000000089d2e: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000046524: xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000045311: xor eax, eax; pop rbx; ret; 
0x0000000004219e: xor eax, eax; pop rbx; ret; 
0x0000000009274e: xor eax, eax; punpckldq xmm0, xmm1; movq [rdi+0x4], xmm0; ret; 
0x0000000008a73f: xor eax, eax; punpcklqdq xmm0, xmm0; movups [rbx+0x8], xmm0; pop rbx; ret; 
0x00000000046732: xor eax, eax; punpcklqdq xmm0, xmm1; mov eax, r8d; movups [rdi], xmm0; ret; 
0x000000000c6113: xor eax, eax; push 0x0; lea r9, [rsp+0x18]; call r13; 
0x000000000d3a43: xor eax, eax; push 0x1; push 0x0; mov r9, [rsp+0x10]; call r13; 
0x00000000090dec: xor eax, eax; ret; 
0x000000000404f8: xor eax, eax; ret; 
0x000000000b308e: xor eax, eax; sub eax, ecx; ret; 
0x00000000091055: xor eax, eax; syscall; 
0x00000000132abc: xor eax, eax; test byte ptr [rbx+0x1c], 0x20; je short 0x0000000000132ad0; pop rbx; ret; 
0x000000000891f4: xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x00000000089204: xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x000000000f702c: xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000f6f5d; ret; 
0x000000000f6fda: xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000f6f5d; ret; 
0x0000000016c951: xor eax, eax; test eax, eax; je short 0x000000000016c980; mov eax, r8d; ret; 
0x0000000016c9a1: xor eax, eax; test eax, eax; je short 0x000000000016c9d0; mov eax, r8d; ret; 
0x000000001ba319: xor eax, eax; test edi, edi; jne 0x00000000001ba24c; add rsp, 0x38; ret; 
0x0000000004307b: xor eax, eax; test edx, edx; sete al; ret; 
0x0000000008c9b4: xor eax, eax; test rdx, rdx; jne short 0x000000000008c9c0; ret; 
0x000000001992f0: xor eax, eax; vzeroupper; ret; 
0x000000001571b8: xor eax, eax; xchg [rdi+0x8], eax; cmp eax, 0x1; jg short 0x00000000001571c8; ret; 
0x0000000002ab09: xor eax, eax; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000404e6: xor eax, edx; movzx edx, byte ptr [rcx]; test dl, dl; jne short 0x00000000000404c8; ret; 
0x000000000467c9: xor eax, edx; ret; 
0x000000001280e9: xor eax, r8d; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000184489: xor ebp, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b5f5e: xor ebp, eax; sti; xchg ebx, eax; ret; 
0x000000001269f5: xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x00000000167833: xor ebp, ebp; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000167e93: xor ebp, ebp; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000175603: xor ebp, ebp; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000125bae: xor ebp, ebp; pop rax; pop rdi; call rax; 
0x000000000a4449: xor ebx, [rax+0x17]; add [rbp+rcx*4+0x4a], cl; adc [rax+0x39], cl; ret far; 
0x0000000016763f: xor ebx, ebx; lea r9, [rsp+0x14]; call qword ptr [rax]; 
0x00000000086c72: xor ebx, edi; jmp qword ptr [rsi+0x66]; 
0x00000000161f19: xor ebx, edi; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000055cae: xor ecx, [rax-0x7d]; ret; 
0x00000000120411: xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x00000000032623: xor ecx, [rcx-0x77]; ret far; 
0x000000001375b1: xor ecx, [rsi]; add [rax], al; add [rax], al; add bl, ch; ret far; 
0x00000000160f9e: xor ecx, eax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x000000000416d8: xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000001b5764: xor ecx, ecx; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x000000001ae6e4: xor ecx, ecx; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x0000000015df92: xor ecx, ecx; lea rdx, [rip+0xd445]; lea r9, [rsp+0x20]; call qword ptr [rax]; 
0x0000000009be59: xor ecx, ecx; lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x000000000352ea: xor ecx, ecx; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x00000000175ad9: xor ecx, ecx; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000017579d: xor ecx, ecx; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000002ab0b: xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x00000000127a54: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127814: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000015558a: xor edi, [0x30]; call rax; 
0x0000000017b119: xor edi, [rsi+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; notrack jmp rdx; 
0x000000001b7af2: xor edi, ebp; add rax, rcx; notrack jmp rax; 
0x000000001b78e0: xor edi, ebp; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x000000001536e9: xor edi, edi; call qword ptr [rsp+0x20]; 
0x00000000153ba5: xor edi, edi; call qword ptr [rsp+0x70]; 
0x000000001365f0: xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000001365f1: xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x00000000095722: xor edi, edi; mov eax, 0x8f; syscall; 
0x000000000956f5: xor edi, edi; mov eax, 0x91; syscall; 
0x000000000969a2: xor edi, edi; mov eax, 0xe; mov rdx, r14; lea rsi, [rip+0x13c0ad]; syscall; 
0x00000000175f86: xor edi, edi; mov eax, 0xe; mov rdx, r14; lea rsi, [rip+0x5cac9]; syscall; 
0x00000000029db0: xor edi, edi; mov eax, edx; syscall; 
0x00000000053a02: xor edi, edi; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000007621e: xor edi, edi; mov r11d, 0x1; jmp rsi; 
0x000000000d9cbc: xor edi, edi; syscall; 
0x000000000c6d40: xor edi, esi; jmp qword ptr [rsi+0x2e]; 
0x000000000c381d: xor edi, esp; adc [rax], al; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001b7af1: xor edi, r13d; add rax, rcx; notrack jmp rax; 
0x000000001b78df: xor edi, r13d; movzx r9d, dil; add rax, rcx; notrack jmp rax; 
0x00000000042719: xor edx, [rbp-0x3f7afffb]; jne short 0x0000000000042730; add rsp, 0x8; ret; 
0x000000000bfc24: xor edx, [rcx]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000000980d9: xor edx, [rdx-0x74b70001]; jl short 0x0000000000098105; or bl, ch; ret far; 
0x00000000113d54: xor edx, edx; call rax; 
0x000000001b5b6b: xor edx, edx; cmp eax, [rsi+rcx*4+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a3da7: xor edx, edx; cmp eax, [rsi+rcx]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5b87: xor edx, edx; cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5b9b: xor edx, edx; cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d1b: xor edx, edx; cmp ecx, [rsi+rax*4-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5d03: xor edx, edx; cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5a37: xor edx, edx; cmp ecx, [rsi+rax*4]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35cf: xor edx, edx; cmp ecx, [rsi+rax+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001b5cb7: xor edx, edx; cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a360c: xor edx, edx; cmp ecx, [rsi+rax-0x10]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001a35ee: xor edx, edx; cmp ecx, [rsi+rax]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000ea3b9: xor edx, edx; cmp rax, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000005d603: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000007547a: xor edx, edx; jmp rsi; 
0x000000001285f5: xor edx, edx; mov eax, 0x1d; syscall; 
0x000000000911ee: xor edx, edx; mov eax, 0xca; syscall; 
0x000000000a85d8: xor edx, edx; mov eax, edx; ret; 
0x00000000149ac9: xor edx, edx; mov eax, r10d; ret; 
0x00000000092902: xor edx, edx; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000046d38: xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x0000000009ebc0: xor edx, edx; mov ebx, eax; mov edi, 0x2; mov eax, r15d; syscall; 
0x00000000094985: xor edx, edx; mov edi, 0x2; mov eax, 0xe; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000053a3c: xor edx, edx; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000913a9: xor edx, edx; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000093676: xor edx, edx; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091385: xor edx, edx; mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528eb: xor edx, edx; mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x0000000009132e: xor edx, edx; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000912c8: xor edx, edx; mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000092f92: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000092a52: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000099fcb: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000009187b: xor edx, edx; mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000093014: xor edx, edx; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000092a8d: xor edx, edx; mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000120b00: xor edx, edx; mov esi, 0x1; call r12; 
0x00000000094af3: xor edx, edx; mov esi, 0x20; lea rdi, [rax+0x9a0]; mov eax, 0x14e; syscall; 
0x00000000094bf3: xor edx, edx; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000091bf0: xor edx, edx; mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x00000000099ee9: xor edx, edx; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x000000000919e8: xor edx, edx; mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000977a1: xor edx, edx; mov esi, 0x87; mov dword ptr [rsp+0x4], 0x0; mov eax, 0xca; syscall; 
0x00000000099046: xor edx, edx; mov esi, 0x8; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000113483: xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x0000000011a486: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000011a487: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000096559: xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000085980: xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000085f3b: xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x0000000009997a: xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000009321b: xor edx, edx; mov rdi, r8; mov eax, r9d; syscall; 
0x0000000008ab82: xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000008ae6b: xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x000000000970f3: xor edx, edx; mov rdi, rbp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000009eda7: xor edx, edx; mov rsi, r12; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000113d88: xor edx, edx; mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000153822: xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10; 
0x000000000969f1: xor edx, edx; mov rsi, r14; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000153645: xor edx, edx; mov rsi, r14; mov rdi, r15; mov [rsp+0x8], rcx; call rbp; 
0x00000000153c3c: xor edx, edx; mov rsi, r14; mov rdi, rbx; mov rcx, r15; call r12; 
0x00000000095288: xor edx, edx; mov rsi, r15; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000096884: xor edx, edx; mov rsi, rbp; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000008b5a8: xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000814ae: xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x48]; 
0x0000000009532a: xor edx, edx; or [rsp+0xd8], rax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x000000000c47f3: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000093704: xor edx, edx; or eax, 0x2; mov edx, eax; mov eax, r12d; syscall; 
0x000000000813d9: xor edx, edx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000008e566: xor edx, edx; pop rbx; jmp rax; 
0x0000000012e3da: xor edx, edx; pop rbx; test rax, rax; cmovs rax, rdx; ret; 
0x000000000c6329: xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x0000000002ab0d: xor edx, edx; push rax; call rbx; 
0x0000000009a1c3: xor edx, edx; shl esi, 0x7; xor sil, 0x81; syscall; 
0x00000000094bf1: xor edx, edx; xor edx, edx; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000099978: xor edx, edx; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000008ed18: xor edx, edx; xor esi, esi; mov rdi, r15; call qword ptr [rax+0x58]; 
0x00000000113cc8: xor edx, edx; xor esi, esi; mov rdi, rbp; call rax; 
0x00000000113d00: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000097be0: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000096ea0: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, r15d; syscall; 
0x00000000091047: xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000074694: xor esi, 0xe9ffffe6; scasb [rdi]; out 0xff, eax; jmp qword ptr [rsi-0x70]; 
0x00000000091052: xor esi, eax; xor r8d, r8d; syscall; 
0x000000000c6a67: xor esi, edi; jmp qword ptr [rsi+0xf]; 
0x0000000011fcf7: xor esi, esi; call r12; 
0x000000000e561e: xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000015f643: xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000015f6b6: xor esi, esi; mov dword ptr [rax+0x23b0], 0x1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000016a592: xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000115224: xor esi, esi; mov eax, 0x125; syscall; 
0x0000000008c962: xor esi, esi; mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000eabb2: xor esi, esi; mov edi, 0x1200011; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000012e5f6: xor esi, esi; mov edi, 0x2000004; call rax; 
0x00000000085e47: xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008add7: xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000085c59: xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007f095: xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008c18a: xor esi, esi; mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000a80a0: xor esi, esi; mov qword ptr [r8+0x8], 0x0; xor eax, eax; mov [r8], rsi; ret; 
0x0000000008ed1a: xor esi, esi; mov rdi, r15; call qword ptr [rax+0x58]; 
0x00000000045a4f: xor esi, esi; mov rdi, r8; call rax; 
0x0000000008834f: xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x0000000007ed59: xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000113cca: xor esi, esi; mov rdi, rbp; call rax; 
0x0000000015d5d0: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000015d551: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000113d02: xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000097be2: xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000096ea2: xor esi, esi; mov rdi, rbp; mov eax, r15d; syscall; 
0x000000001190e1: xor esi, esi; syscall; 
0x000000001190e2: xor esi, esi; syscall; 
0x00000000053a00: xor esi, esi; xor edi, edi; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000008c961: xor esi, r14d; mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000091051: xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000c11bd: xor esp, [rax]; adc [rax], eax; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; notrack jmp rcx; 
0x000000001759d5: xor esp, esp; call qword ptr [rax+0x340]; 
0x000000000d8d28: xor esp, esp; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000167730: xor esp, esp; mov esi, 0x9; call qword ptr [rax]; 
0x000000000d8d41: xor esp, esp; mov rax, r12; pop r12; ret; 
0x000000001285f4: xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000149ac8: xor r10d, r10d; mov eax, r10d; ret; 
0x00000000092901: xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x000000000913a8: xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000093675: xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000091384: xor r10d, r10d; mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000001528ea: xor r10d, r10d; mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x0000000009132d: xor r10d, r10d; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000912c7: xor r10d, r10d; mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x00000000092f91: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000092a51: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000099fca: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000009187a: xor r10d, r10d; mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000093013: xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000092a8c: xor r10d, r10d; mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000091bee: xor r10d, r10d; mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x00000000099ee8: xor r10d, r10d; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x000000000919e7: xor r10d, r10d; mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000011a4c6: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000011a4c7: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000093219: xor r10d, r10d; mov rdi, r8; mov eax, r9d; syscall; 
0x0000000009321a: xor r10d, r10d; mov rdi, r8; mov eax, r9d; syscall; 
0x00000000093703: xor r10d, r10d; or eax, 0x2; mov edx, eax; mov eax, r12d; syscall; 
0x0000000009a1c2: xor r10d, r10d; shl esi, 0x7; xor sil, 0x81; syscall; 
0x00000000094bf0: xor r10d, r10d; xor edx, edx; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000099977: xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000097bdf: xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000096e9f: xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r15d; syscall; 
0x000000001759d4: xor r12d, r12d; call qword ptr [rax+0x340]; 
0x000000000d8d27: xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x0000000016772f: xor r12d, r12d; mov esi, 0x9; call qword ptr [rax]; 
0x000000000d8d40: xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x00000000175602: xor r13d, r13d; lea rcx, [r10+0x3a0]; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x0000000007621d: xor r15d, r15d; mov r11d, 0x1; jmp rsi; 
0x000000001ba318: xor r8, r8; test edi, edi; jne 0x00000000001ba24c; add rsp, 0x38; ret; 
0x0000000002aa9a: xor r8d, r8d; call rbx; 
0x0000000015575b: xor r8d, r8d; cmp eax, 0x2; jne short 0x0000000000155780; mov eax, r8d; ret; 
0x000000000891b6: xor r8d, r8d; cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x0000000007c678: xor r8d, r8d; jmp rsi; 
0x000000000c6865: xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x0000000011aca3: xor r8d, r8d; mov eax, 0x127; syscall; 
0x0000000011ad63: xor r8d, r8d; mov eax, 0x128; syscall; 
0x0000000011ae42: xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000011afa2: xor r8d, r8d; mov eax, 0x148; syscall; 
0x00000000126b15: xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000127a56: xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127816: xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000ea503: xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000f80f1: xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000cf8b8: xor r8d, r8d; mov eax, r8d; ret; 
0x000000000910f6: xor r8d, r8d; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000000457d4: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000d3315: xor r8d, r8d; mov rcx, r12; call rbx; 
0x00000000153588: xor r8d, r8d; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000086f73: xor r8d, r8d; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000175ad2: xor r8d, r8d; mov rdi, r13; xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x000000000d34a4: xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000c6b51: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x000000000c6561: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx; 
0x00000000086d03: xor r8d, r8d; mov rsi, [rsp+0x18]; mov rdi, r13; lea r9, [rsp+0x28]; call rbp; 
0x00000000046731: xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups [rdi], xmm0; ret; 
0x000000000c6112: xor r8d, r8d; push 0x0; lea r9, [rsp+0x18]; call r13; 
0x000000000d3a42: xor r8d, r8d; push 0x1; push 0x0; mov r9, [rsp+0x10]; call r13; 
0x00000000091054: xor r8d, r8d; syscall; 
0x0000000016c950: xor r8d, r8d; test eax, eax; je short 0x000000000016c980; mov eax, r8d; ret; 
0x0000000016c9a0: xor r8d, r8d; test eax, eax; je short 0x000000000016c9d0; mov eax, r8d; ret; 
0x0000000002ab08: xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000352e9: xor r9d, r9d; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15; 
0x00000000175ad8: xor r9d, r9d; mov rsi, r12; call qword ptr [rax+0x340]; 
0x0000000017579c: xor r9d, r9d; mov rsi, r13; lea r8, [rsp+0x20]; call qword ptr [rax+0x340]; 
0x00000000127a53: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x00000000127813: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000011989e: xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x00000000133c86: xor rax, [0x30]; call rax; 
0x0000000002a13f: xor rax, [0x30]; jmp rax; 
0x00000000045d8d: xor rax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014366b: xor rax, [0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000002a19d: xor rax, [0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002a1ee: xor rax, [0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000029cc3: xor rax, [0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x0000000007f7c0: xor rax, [0x30]; test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f8a0: xor rax, [0x30]; test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000454c4: xor rax, [0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x0000000014e794: xor rax, [rsi+0x10]; or rax, rdx; sete al; movzx eax, al; ret; 
0x00000000133c85: xor rax, fs:[0x30]; call rax; 
0x0000000002a13e: xor rax, fs:[0x30]; jmp rax; 
0x00000000045d8c: xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014366a: xor rax, fs:[0x30]; mov qword ptr [rsp], 0x0; call rax; 
0x0000000002a19c: xor rax, fs:[0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002a1ed: xor rax, fs:[0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000029cc2: xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1f1d52], rax; ret; 
0x0000000007f7bf: xor rax, fs:[0x30]; test rax, rax; je short 0x000000000007f7d6; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007f89f: xor rax, fs:[0x30]; test rax, rax; je short 0x000000000007f8c0; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000454c3: xor rax, fs:[0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000045580; call rax; 
0x000000000bab79: xor rax, rax; ret; 
0x000000000404e5: xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne short 0x00000000000404c8; ret; 
0x00000000160f9d: xor rcx, rax; mov [r8], rdx; mov [r8+0x8], rcx; ret; 
0x00000000155589: xor rdi, [0x30]; call rax; 
0x00000000155588: xor rdi, fs:[0x30]; call rax; 
0x0000000008c189: xor si, si; mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000009133a: xor sil, 0x80; syscall; 
0x00000000092b1f: xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000093a24: xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000092a5e: xor sil, 0x81; syscall; 
0x000000000913a4: xor sil, 0x81; xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000093848: xor sil, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000004602d: xorps xmm3, [rip+0x22ae800]; or [rax], al; pop rbx; ret; 
0x0000000018210b: xrelease mov [rdi-0x8], rcx; ret; 
0x0000000017cfee: xrelease mov [rdi-0x8], rdx; ret; 
0x000000001a73cc: xtest; je short 0x00000000001a73d5; vzeroall; ret; 
0x000000001a76ee: xtest; je short 0x00000000001a76f7; vzeroall; ret; 
0x000000001a7afc: xtest; je short 0x00000000001a7b05; vzeroall; ret; 
0x000000001a7deb: xtest; je short 0x00000000001a7df4; vzeroall; ret; 
0x000000001a85d9: xtest; je short 0x00000000001a85e2; vzeroall; ret; 
0x000000001a89b3: xtest; je short 0x00000000001a89bc; vzeroall; ret; 
0x000000001a8a90: xtest; je short 0x00000000001a8a99; vzeroall; ret; 
0x000000001a8e0d: xtest; je short 0x00000000001a8e16; vzeroall; ret; 
0x000000001a8e68: xtest; je short 0x00000000001a8e71; vzeroall; ret; 
0x000000001a94a2: xtest; je short 0x00000000001a94ab; vzeroall; ret; 
0x000000001a972b: xtest; je short 0x00000000001a9734; vzeroall; ret; 
0x000000001a9bae: xtest; je short 0x00000000001a9bb7; vzeroall; ret; 
0x000000001aa788: xtest; je short 0x00000000001aa791; vzeroall; ret; 
0x000000001aab38: xtest; je short 0x00000000001aab41; vzeroall; ret; 
0x000000001aadde: xtest; je short 0x00000000001aade7; vzeroall; ret; 
0x000000001ab3f8: xtest; je short 0x00000000001ab401; vzeroall; ret; 
0x000000001ab894: xtest; je short 0x00000000001ab89d; vzeroall; ret; 
0x000000001ac0b6: xtest; je short 0x00000000001ac0bf; vzeroall; ret; 
0x000000001ac9d9: xtest; je short 0x00000000001ac9e2; vzeroall; ret; 
0x000000001acb49: xtest; je short 0x00000000001acb52; vzeroall; ret; 
0x000000001ace5c: xtest; je short 0x00000000001ace65; vzeroall; ret; 
0x000000001acec1: xtest; je short 0x00000000001aceca; vzeroall; ret; 
0x000000001ad4a1: xtest; je short 0x00000000001ad4aa; vzeroall; ret; 
0x000000001ad52e: xtest; je short 0x00000000001ad537; vzeroall; ret; 
0x000000001add4c: xtest; je short 0x00000000001add55; vzeroall; ret; 
0x000000001adece: xtest; je short 0x00000000001aded7; vzeroall; ret; 
0x000000001ae00f: xtest; je short 0x00000000001ae018; vzeroall; ret; 
0x000000001ae353: xtest; je short 0x00000000001ae35c; vzeroall; ret; 

CONFIG [ search: ROP-JOP-SYS (default), x_match: none, max_len: 5, syntax: Intel, regex_filter: none ]
RESULT [ unique_gadgets: 44757, search_time: 596.192325ms, print_time: 2.777855884s ]
