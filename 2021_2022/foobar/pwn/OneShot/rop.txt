


Gadgets
=======


0x0000000000436d0a: adc ah, al; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d91d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043d67f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d6e9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004b1748: adc al, 0; add byte ptr [rax], al; adc byte ptr [rax], ah; add byte ptr [rax - 0x6b], dl; cli; call qword ptr [rdi]; 
0x00000000004b2d48: adc al, 0; add byte ptr [rax], al; adc byte ptr [rsi], dh; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004b2b38: adc al, 0; add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x00000000004af738: adc al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add al, dl; stc; jmp qword ptr [rdi + 6]; 
0x000000000048d00d: adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004af720: adc al, 0; add byte ptr [rax], al; call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x00000000004b0120: adc al, 0; add byte ptr [rax], al; call 0xffffffffd80b0172; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b4f70: adc al, 0; add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004afdf0: adc al, 0; add byte ptr [rax], al; mov eax, 0x18000046; cwde; stc; jmp qword ptr [rcx]; 
0x00000000004b00f0: adc al, 0; add byte ptr [rax], al; mov eax, 0xa8000049; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b2ba0: adc al, 0; add byte ptr [rax], al; push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b0508: adc al, 0; add byte ptr [rax], al; ror byte ptr [rbp], 1; add byte ptr [rax - 0x46], ah; stc; call qword ptr [rdx]; 
0x000000000047de9a: adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000004af768: adc al, 0; add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax + 0x57], dh; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004b5c68: adc al, 0; add byte ptr [rax], al; xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x000000000045fc8b: adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000044c077: adc al, 0x11; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042dac5: adc al, 0x13; jmp rdx; 
0x0000000000426385: adc al, 0x16; sub eax, edx; ret; 
0x000000000042b795: adc al, 0x16; test r8d, r8d; je 0x2b79d; xchg eax, edx; sub eax, edx; ret; 
0x000000000048cd2a: adc al, 0x24; mov edi, 1; call rax; 
0x000000000048d3dd: adc al, 0x24; mov esi, 1; mov edi, 1; call rax; 
0x0000000000449b77: adc al, 0x24; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000449671: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49689; add rsp, 0x28; ret; 
0x000000000044a5a0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4a5b7; add rsp, 0x28; ret; 
0x0000000000484eb7: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f9a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84fb4; add rsp, 0x38; ret; 
0x000000000040e991: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040ea7d: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004958a4: adc al, 0x3d; sti; call qword ptr [rdi + 0x3d14fffb]; sti; jmp qword ptr [rbx + 0x3e]; 
0x00000000004958ac: adc al, 0x3d; sti; jmp qword ptr [rbx + 0x3e]; 
0x0000000000444a50: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x0000000000416edb: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048cfbb: adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x000000000043eb10: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d23e: adc al, 0x91; sub eax, edx; ret; 
0x000000000042dac1: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040d320: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000004264f3: adc al, 0xa; sub eax, edx; ret; 
0x00000000004b3fdc: adc al, 0xca; cld; call rdx; 
0x0000000000446fcf: adc al, 0xe; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ed61: adc al, 0xe; lea rcx, [rip + 0x597b6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d231: adc al, 0xe; lea rcx, [rip + 0x5b2e6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a96a: adc al, 0xe; sub eax, edx; ret; 
0x000000000042c03a: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000004131eb: adc al, 0xf6; ret 0x7420; 
0x000000000048d0ad: adc al, 0xf7; ret; 
0x0000000000493fed: adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x000000000048bf51: adc al, 1; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000423762: adc al, 1; cmp dl, r8b; jne 0x23750; sub rax, 0x10; ret; 
0x00000000004330ee: adc al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048cce4: adc al, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000469acf: adc al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000043d827: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d891: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047212a: adc al, byte ptr [rax]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000047283a: adc al, byte ptr [rcx + 0xf]; mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004010fa: adc al, byte ptr [rdx]; add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x00000000004b2f39: adc bh, ah; jmp qword ptr [rax]; 
0x0000000000419f8f: adc bh, al; add eax, 0x2a1dd6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000493fe9: adc bh, cl; call qword ptr [rax]; 
0x0000000000493fe9: adc bh, cl; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x00000000004947f1: adc bh, dl; call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494631: adc bh, dl; call rsi; 
0x0000000000494631: adc bh, dl; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049462d: adc bh, dl; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x000000000049462d: adc bh, dl; inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x00000000004946b1: adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004946b1: adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x00000000004945ed: adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x00000000004946ad: adc bh, dl; push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494434: adc bl, ah; stc; call qword ptr [rax]; 
0x0000000000494564: adc bl, al; stc; jmp qword ptr [rax - 0x3c]; 
0x0000000000482cd2: adc bl, ch; jno 0x82d1f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000495184: adc bl, dh; cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xd]; 
0x0000000000435300: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d56: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444a26: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a46: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444396: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444386: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444aa7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444417: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449e7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444357: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444ba8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444f8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004352ff: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444a25: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a45: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444395: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444385: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444aa6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444416: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444356: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000047f16a: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000419a75: adc byte ptr [r11 + 0x5d], r11b; ret; 
0x0000000000412139: adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000489d45: adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000472cff: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000048373e: adc byte ptr [r15], cl; sahf; ret 0x3948; 
0x000000000045c0c9: adc byte ptr [r15], cl; sahf; ret 0x894c; 
0x0000000000483f53: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000447102: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045b2e5: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000045bac6: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3949; 
0x0000000000481c2f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000411e72: adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000484d93: adc byte ptr [r8 - 0x73], cl; adc eax, 0x25a30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041905f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x0000000000416d9c: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045c0c2: adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000047c26f: adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000411e9d: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004447ca: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x509cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441aa: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x50f6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000488705: adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000041f2f3: adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041b61c: adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000041b838: adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x0000000000424346: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x0000000000483f4d: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000048807f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000481c30: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000411277: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000411e73: adc byte ptr [rax + 1], cl; ret; 
0x000000000044c10b: adc byte ptr [rax + rbp*8 + 0x48], bh; cmp ecx, dword ptr [rax + 0x18]; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c10a: adc byte ptr [rax + rbp*8 + 0x48], dil; cmp ecx, dword ptr [rax + 0x18]; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000400f2e: adc byte ptr [rax - 0x39], cl; ret 0; 
0x00000000004a3d90: adc byte ptr [rax - 0x4ec70004], dh; cld; call rax; 
0x000000000049413c: adc byte ptr [rax - 0x72590007], 0xf9; call qword ptr [rdx - 0x72]; 
0x000000000049413c: adc byte ptr [rax - 0x72590007], 0xf9; call qword ptr [rdx - 0x72]; stc; jmp qword ptr [rdx]; 
0x000000000045c0bf: adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000485056: adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424176: adc byte ptr [rax - 0x73], cl; adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000484d94: adc byte ptr [rax - 0x73], cl; adc eax, 0x25a30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424ac6: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x000000000047f20f: adc byte ptr [rax - 0x73], cl; add dword ptr [rax - 0x77], r9d; add eax, 0x23d195; ret; 
0x00000000004175c7: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004740bb: adc byte ptr [rax - 0x75], cl; je 0x740e4; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000041d34d: adc byte ptr [rax - 0x77], cl; and al, 8; call rcx; 
0x000000000044c0e5: adc byte ptr [rax - 0x77], cl; and sil, al; sub byte ptr [rcx], al; ret; 
0x00000000004589e8: adc byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000470367: adc byte ptr [rax - 0x77], cl; jo 0x7037c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047f427: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000040e109: adc byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000471362: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000041d933: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000422b0f: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041e731: adc byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000419060: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x0000000000416d9d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041783f: adc byte ptr [rax - 0x78], al; jl 0x17859; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004846ab: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x0000000000490c36: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x000000000045c0c3: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000004410f7: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000441133: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000004249d5: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x000000000040ab55: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x00000000004076c6: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x000000000041a113: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004556c8: adc byte ptr [rax - 0x7d], cl; ret 0x4902; 
0x0000000000401100: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000494100: adc byte ptr [rax - 7], dh; inc dword ptr [rax]; jno 0x94100; push rax; jno 0x94104; jmp rax; 
0x00000000004b174c: adc byte ptr [rax], ah; add byte ptr [rax - 0x6b], dl; cli; call qword ptr [rdi]; 
0x000000000049f395: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000473af0: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x000000000047faee: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c495853; ret; 
0x000000000047fb0b: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c495870; ret; 
0x000000000047fb48: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4958ad; ret; 
0x000000000042a9ca: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043d612: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000043f0dc: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043da31: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004b5b20: adc byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffff880b5bcc; cwde; std; call qword ptr [rdx]; 
0x00000000004ac220: adc byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffb80ac233; sub al, 0xf6; call qword ptr [rax]; 
0x00000000004b3c70: adc byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rbp - 0x49780000], al; cld; jmp qword ptr [rdx]; 
0x00000000004af9b0: adc byte ptr [rax], al; add byte ptr [rax], al; js 0xaf9f8; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004afa28: adc byte ptr [rax], al; add byte ptr [rax], al; lock add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x00000000004b3fc0: adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax - 0x36080000], cl; cld; jmp qword ptr [rcx]; 
0x0000000000449b43: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000046fe49: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004482ac: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b1760: adc byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rax], ah; add byte ptr [rax - 0x6b], bl; cli; call qword ptr [rcx]; 
0x000000000046c0c5: adc byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x0000000000469286: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000049f38d: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000043b2e8: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000473ae4: adc byte ptr [rax], al; lea rax, [rip - 0x2bced]; cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x0000000000484460: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000048dfd8: adc byte ptr [rbp + 0x13], dh; xor eax, eax; ret; 
0x000000000048ae38: adc byte ptr [rbp + 0x1d], dh; xor eax, eax; ret; 
0x000000000044480f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rcx], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ef: adc byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rdi], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041213a: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000489d46: adc byte ptr [rbp - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004942a8: adc byte ptr [rbp - 0x490f0007], dh; stc; call rax; 
0x000000000040120d: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000414524: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000004110e3: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000419a76: adc byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000444457: adc byte ptr [rbx + 0xff3174e], cl; jg 0x44466; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b07: adc byte ptr [rbx + 0xff3174e], cl; jg 0x44b16; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444477: adc byte ptr [rbx + 0xff3184e], cl; jg 0x44486; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444b27: adc byte ptr [rbx + 0xff3184e], cl; jg 0x44b36; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000489674: adc byte ptr [rbx + rax], 0; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004122cb: adc byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000418c42: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000047085e: adc byte ptr [rbx - 0x3b7cb7fa], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047555d: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004942c4: adc byte ptr [rbx - 0x4b0f0007], dh; stc; call rax; 
0x0000000000496024: adc byte ptr [rbx - 5], ch; push rax; push -5; call rax; 
0x0000000000411e9e: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x0000000000446c1b: adc byte ptr [rcx + rbp - 0x40], al; cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000471963: adc byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000040e074: adc byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000494348: adc byte ptr [rcx + rdi*8 - 0x64a0f01], dh; call rax; 
0x0000000000493fec: adc byte ptr [rcx + rdi*8], dl; call qword ptr [rax + 0x15]; 
0x000000000044b052: adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000044b14a: adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041a20f: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000048aa3f: adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000004199c7: adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000042a9fd: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000045c061: adc byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000495024: adc byte ptr [rcx - 6], cl; jmp qword ptr [rax]; 
0x00000000004945f8: adc byte ptr [rcx], 0xfa; call qword ptr [rax]; 
0x000000000048258a: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000448c09: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000493ffc: adc byte ptr [rcx], bl; stc; call qword ptr [rax + 0x1a]; 
0x000000000047284a: adc byte ptr [rcx], cl; ret 0xb60f; 
0x0000000000458a65: adc byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000049428c: adc byte ptr [rdi - 0x470f0007], dh; stc; jmp rax; 
0x000000000044721d: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447103: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000048373f: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x000000000045c0ca: adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000444c63: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000042ade1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042aed1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042acf1: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042b739: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000042b291: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042aa21: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000042b471: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ac01: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042b651: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042b561: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042aea3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042af93: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042adb3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ab11: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042acc3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aae3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042abd3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9f3: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000045b2e6: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x000000000045bac7: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000449fd9: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x0000000000483e01: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x000000000048313d: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000044c0dd: adc byte ptr [rdx + 0x40], dh; cmp rcx, qword ptr [rax + 0x18]; ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c0dc: adc byte ptr [rdx + 0x40], sil; cmp rcx, qword ptr [rax + 0x18]; ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004b2129: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add byte ptr [rax + rax], cl; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004ad13b: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000473ded: adc byte ptr [rdx + 1], ch; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000446736: adc byte ptr [rdx], al; jne 0x46750; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467e6: adc byte ptr [rdx], al; jne 0x46800; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x000000000042cefb: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000446735: adc byte ptr [rdx], r8b; jne 0x46750; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467e5: adc byte ptr [rdx], r8b; jne 0x46800; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x00000000004440f6: adc byte ptr [rip + 0xc634900], al; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048d13c: adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000042c3a5: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cdaa: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000042c3a0: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004250d5: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438ffb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000472d00: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000446f7b: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004470f9: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000444c33: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043864a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000444437: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000433567: adc byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446f78: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000049400c: adc byte ptr [rsi], bl; stc; call qword ptr [rax + 0x1f]; 
0x00000000004b2d4c: adc byte ptr [rsi], dh; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x0000000000494438: adc ch, ah; stc; call qword ptr [rax]; 
0x000000000042417a: adc ch, byte ptr [rdx]; add al, byte ptr [rax]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x00000000004a9559: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004014f0: adc ch, cl; ret; 
0x0000000000494590: adc cl, 0xf9; call rax; 
0x0000000000494590: adc cl, 0xf9; call rax; sar cl, cl; jmp qword ptr [rax]; 
0x0000000000494430: adc cl, ah; stc; call qword ptr [rax]; 
0x0000000000493fe1: adc cl, bh; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x000000000045cdbf: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x0000000000419075: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000044c6aa: adc cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000440e25: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000047c77d: adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000045cdc2: adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x0000000000485e4a: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000045c385: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000044478a: adc cl, byte ptr [rdx]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004946a0: adc cl, byte ptr [rip + 0x1382fffa]; cli; call qword ptr [rdx]; 
0x00000000004ab681: adc dh, bh; call qword ptr [rdi]; 
0x00000000004ab2b9: adc dh, bh; call rsp; 
0x0000000000485209: adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x000000000041cd9e: adc dh, dh; ret 0xf0f; 
0x000000000049477d: adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000494641: adc dl, bh; call qword ptr [rsi]; 
0x0000000000494801: adc dl, bh; call rax; 
0x00000000004947fd: adc dl, bh; inc dword ptr [rax + 0x10]; cli; call rax; 
0x0000000000494781: adc dl, bh; jmp rsp; 
0x00000000004945b8: adc dl, cl; stc; jmp qword ptr [rax - 0x35]; 
0x000000000049515c: adc dl, dh; cli; jmp qword ptr [rax]; 
0x0000000000494800: adc dl, dil; call rax; 
0x000000000046f8db: adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x0000000000414611: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c42a378; ret; 
0x000000000040e98d: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040ea79: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040ea53: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000045ac8d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000411e8f: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044c078: adc dword ptr [rax - 0x73], ecx; or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000470ef4: adc dword ptr [rax - 0x7d], ecx; ret 0x4110; 
0x000000000040520f: adc dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047087e: adc dword ptr [rax - 1], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043f0db: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x000000000043d9c7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043efdf: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045ddb0: adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045b2f5: adc dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000471647: adc dword ptr [rbp + 0x16], esi; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000042bfe6: adc dword ptr [rbp + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000004359c6: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x5f10e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a7a17: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000494180: adc dword ptr [rbx - 0x6c6e0007], edx; stc; jmp qword ptr [rcx]; 
0x0000000000447228: adc dword ptr [rbx], eax; ret; 
0x00000000004471a1: adc dword ptr [rbx], esp; ret; 
0x0000000000438919: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438920: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438927: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000447193: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447197: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044719c: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000494170: adc dword ptr [rcx - 0x6e6e0007], edx; stc; call qword ptr [rcx]; 
0x00000000004385c2: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000438586: adc dword ptr [rcx - 1], edi; ret; 
0x00000000004385bb: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004387b9: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043857f: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387b2: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438578: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387ab: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438571: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000447190: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000004190b6: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000044721b: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447101: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044721f: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447223: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004385b4: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446d61: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446f83: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x0000000000447105: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004470d8: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004470dd: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000044710a: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000004470e2: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004470e7: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000049419c: adc dword ptr [rdi - 0x68710007], edx; stc; jmp qword ptr [rsi]; 
0x0000000000438a74: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a7b: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a82: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a89: adc dword ptr [rdi - 8], edi; ret; 
0x00000000004470fe: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446f80: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004385ae: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446260: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000446d5b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d7c: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447218: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000043eb0b: adc dword ptr [rdx + 0x148b0005], ebx; xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000494178: adc dword ptr [rdx - 0x6d6e0007], edx; stc; call qword ptr [rcx]; 
0x0000000000446ea1: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ea8: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446eaf: adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446f3e: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f45: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f4c: adc dword ptr [rsi + 7], edx; ret; 
0x0000000000446d4e: adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d47: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d40: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d39: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004333e7: adc dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446e9b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043d9c6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000485059: adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004720f8: adc eax, 0x1653; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000493ff1: adc eax, 0x1690fff9; stc; call rax; 
0x0000000000424ed8: adc eax, 0x1b963; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x0000000000490c3b: adc eax, 0x20478b48; test rax, rax; je 0x90c4c; call rax; 
0x0000000000424e22: adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce2: adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b82: adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e89: adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d49: adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be9: adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e68: adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424179: adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d28: adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c37: adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c88: adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000484d27: adc eax, 0x235e34; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004852d5: adc eax, 0x236e9e; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047ba7f: adc eax, 0x23e79c; xor eax, eax; add rsp, 8; ret; 
0x0000000000484d97: adc eax, 0x25a30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d4c7: adc eax, 0x26b5ec; pop rbx; ret; 
0x0000000000418fd3: adc eax, 0x2a2d40; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000048dfba: adc eax, 0x30ff8040; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee1a: adc eax, 0x30ff8040; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000046eb86: adc eax, 0x351fd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047bb42: adc eax, 0x4000003; ret; 
0x000000000047ba92: adc eax, 0x4000003; xor eax, eax; ret; 
0x00000000004a647e: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004357b5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357b0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044931e: adc eax, 0x4c3f9; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004401c8: adc eax, 0x58353; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004401ae: adc eax, 0x5836d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043eb3e: adc eax, 0x599dd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cfa8: adc eax, 0x5b573; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cf8e: adc eax, 0x5b58d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ae3e: adc eax, 0x5d6dd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000432e98: adc eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000424ea8: adc eax, 0x6b33; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000046578a: adc eax, 0x6be0f44; cmp edi, r8d; ja 0x65770; mov eax, r9d; ret; 
0x0000000000423b1f: adc eax, 0x703fc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000043d551: adc eax, 0x83480000; ret 0xe910; 
0x0000000000468f55: adc eax, 0x83fffffd; ret; 
0x000000000040d5ff: adc eax, 0x851b4; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000478c41: adc eax, 0x89000003; ret 0xe8c0; 
0x000000000047f43f: adc eax, 0x8948fffa; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000469796: adc eax, 0x8b480000; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000402371: adc eax, 0x90332; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021a4: adc eax, 0x904a7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402020: adc eax, 0x905ff; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473a78: adc eax, 0xcd3; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000042637a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000047468a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000004952cc: adc eax, 0xefffb30; xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000480fa3: adc eax, 0xf000000; add eax, 0x940fc085; ret 0x3d; 
0x0000000000447dd4: adc eax, 0xf880272; ret; 
0x0000000000473af5: adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x0000000000424ac9: adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000447dcf: adc eax, dword ptr [rax + 0x157701fa]; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x00000000004aca89: adc eax, dword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x000000000047c083: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x28c93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000043ee3e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000473ae9: adc eax, dword ptr [rbx - 3]; inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x0000000000490499: adc eax, dword ptr [rip + 0x1f0ffff9]; add bl, dh; ret; 
0x0000000000433267: adc eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004842b9: adc eax, eax; ret; 
0x00000000004843f6: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000047f2c8: adc eax, esi; add eax, 0x23d4f8; add byte ptr [rax - 0x77], cl; add eax, 0x23d0d9; add rsp, 8; ret; 
0x00000000004a78a5: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x0000000000436409: adc ebp, ecx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e09: adc ebp, edi; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436109: adc ebp, esp; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000413517: adc ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000437009: adc ebx, ebp; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047588c: adc ebx, esi; ret; 
0x0000000000417a5a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000040eb51: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004579b4: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000493fe5: adc ecx, edi; call rax; 
0x0000000000493fe5: adc ecx, edi; call rax; adc bh, cl; call qword ptr [rax]; 
0x0000000000493fe5: adc ecx, edi; call rax; adc bh, cl; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x0000000000417a71: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f00e: adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f0ab: adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000048c97d: adc edi, eax; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004946a5: adc edi, edx; call qword ptr [rdx]; 
0x00000000004945e9: adc edi, edx; call rax; 
0x00000000004945e9: adc edi, edx; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x00000000004945e5: adc edi, edx; inc dword ptr [rax + 0x13]; cli; call rax; 
0x00000000004945e5: adc edi, edx; inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494625: adc edi, edx; jmp qword ptr [rsi]; 
0x00000000004947e5: adc edi, edx; jmp rax; 
0x0000000000494629: adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x00000000004833da: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004880f1: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004945f9: adc edx, edi; call qword ptr [rax]; 
0x00000000004946b5: adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004946b5: adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494779: adc edx, edi; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x00000000004947f5: adc edx, edi; jmp qword ptr [rax]; 
0x0000000000494635: adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000047f864: adc edx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004946b9: adc edx, edi; jmp rdx; 
0x00000000004947f9: adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x00000000004a8dbe: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x0000000000416e23: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048de4c: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004131e9: adc esi, dword ptr [rsp + rdx - 0xa]; ret 0x7420; 
0x00000000004ab2d9: adc esi, edi; jmp rsp; 
0x0000000000436a09: adc esp, ebx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436709: adc esp, esi; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000438918: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043891f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438926: adc qword ptr [rcx + 7], rdi; ret; 
0x00000000004385c1: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000438585: adc qword ptr [rcx - 1], rdi; ret; 
0x00000000004385ba: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004387b8: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043857e: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387b1: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438577: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387aa: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438570: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004385b3: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446d60: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000438a73: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a7a: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a81: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a88: adc qword ptr [rdi - 8], rdi; ret; 
0x00000000004385ad: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446d5a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d7b: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446ea0: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ea7: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446eae: adc qword ptr [rsi + 3], rdx; ret; 
0x0000000000446f3d: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f44: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f4b: adc qword ptr [rsi + 7], rdx; ret; 
0x0000000000446d4d: adc qword ptr [rsi - 1], rdx; ret; 
0x0000000000446d46: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d3f: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d38: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e9a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004880f0: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000047f863: adc r10, rdi; jmp qword ptr [rsi + 0xf]; 
0x0000000000447d55: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000494630: adc r15b, dl; call rsi; 
0x0000000000494630: adc r15b, dl; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000047c082: adc r8, qword ptr [r8]; add byte ptr [rax - 0x73], cl; or eax, 0x28c93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004aca88: adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004843f5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004833d9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004af61f: add ah, ah; add byte ptr ds:[rax], al; pop rsp; cmc; clc; call qword ptr [rsi + 0x16]; 
0x00000000004b3b1f: add ah, ah; add dword ptr [rax], 0; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004aca8b: add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004b0d1f: add ah, ah; push rbp; add byte ptr [rax], al; cld; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004b13ff: add ah, al; pop rsp; add byte ptr [rax], al; sbb al, 0x74; cli; call qword ptr [rdx]; 
0x0000000000448219: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004481fe: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000004b0d23: add ah, bh; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004482db: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000448249: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004b01a3: add ah, bl; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x0000000000447ad0: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x47adb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447c76: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x47c81; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000446eaa: add ah, byte ptr [rdx - 0xf]; jl 0x46ef7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000443dd3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000442613: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004afb27: add ah, ch; add byte ptr [r8], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004acd23: add ah, ch; jno 0xacd1d; call qword ptr [rax]; 
0x00000000004adae3: add ah, cl; mov ch, 0xf6; call qword ptr [rdi + 1]; 
0x00000000004afb2b: add ah, dh; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004ae82f: add ah, dh; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004afe7b: add ah, dl; cdq; stc; jmp qword ptr [rax]; 
0x00000000004abc05: add al, 0; add al, bh; xchg eax, esp; cmc; call qword ptr [rdx]; 
0x00000000004532f3: add al, 0; add bh, dh; ret 0; 
0x00000000004532e7: add al, 0; add bh, dh; ret 0xf800; 
0x0000000000456fef: add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000411a10: add al, 0; add byte ptr [rax + 1], cl; ret; 
0x000000000042b357: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046ebf6: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000043fcff: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b385: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000474713: add al, 0; add byte ptr [rax], al; ret; 
0x000000000044969f: add al, 0; add byte ptr [rax], al; syscall; 
0x00000000004532df: add al, 0; add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000471ef0: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040a0d1: add al, 0; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000409f87: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000040acd4: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000409f90: add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000045e1bf: add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x0000000000424af5: add al, 0; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004a2a35: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004015e3: add al, 0; cmp eax, -1; je 0x16bb; add rsp, 0x98; ret; 
0x000000000044c152: add al, 0; mov eax, 0x15; syscall; 
0x0000000000449321: add al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004481a5: add al, 0; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004481c7: add al, 0; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004846aa: add al, 0x10; test rdi, rdi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x0000000000448294: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004401aa: add al, 0x17; lea rdx, [rip + 0x5836d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043eb3a: add al, 0x17; lea rdx, [rip + 0x599dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cf8a: add al, 0x17; lea rdx, [rip + 0x5b58d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ae3a: add al, 0x17; lea rdx, [rip + 0x5d6dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000426381: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042631a: add al, 0x17; sub eax, ecx; ret; 
0x0000000000486c40: add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048abb7: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8bb: add al, 0x24; add rsp, 0x38; ret; 
0x000000000048a8b2: add al, 0x24; call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000489b06: add al, 0x24; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489ab4: add al, 0x24; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004148b4: add al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045acca: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045ada9: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000048420b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8424e; leave; ret; 
0x000000000040ea57: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000047325e: add al, 0x31; ret; 
0x000000000047315a: add al, 0x37; ret; 
0x000000000048472e: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x0000000000472870: add al, 0x39; ret 0xeb75; 
0x00000000004182df: add al, 0x3a; ret; 
0x0000000000495864: add al, 0x3d; sti; call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x0000000000495ac8: add al, 0x3d; sti; inc dword ptr [rdi + 0x3d6afffb]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000495acc: add al, 0x3d; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x000000000044d590: add al, 0x48; cmp eax, 0x16; ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000047f8e6: add al, 0x48; cmp ecx, dword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x00000000004448bb: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000443dc9: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000443ddb: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000048d0c0: add al, 0x48; mov dword ptr [rax], edx; ret; 
0x00000000004354ca: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000047f894: add al, 0x48; mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000442609: add al, 0x48; mov eax, edi; ret; 
0x00000000004354c3: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044c074: add al, 0x48; mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000475215: add al, 0x48; sub esp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x0000000000473534: add al, 0x48; xor eax, eax; ret; 
0x000000000047e676: add al, 0x4c; cmp ecx, eax; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000473df8: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000460218: add al, 0x66; and eax, 0x48b4800; clc; jmp rax; 
0x0000000000443dd7: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000442617: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004579b2: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000438637: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447dcd: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x000000000047bb33: add al, 0x74; or bh, bh; and eax, 0x23e6e4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000424c30: add al, 0x74; sbb eax, 0x8d48c085; adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000046e3d8: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000043d23b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043eb13: add al, 0x81; sub eax, edx; ret; 
0x0000000000402027: add al, 0x82; add rax, rdx; jmp rax; 
0x000000000043ae47: add al, 0x82; sub eax, ecx; ret; 
0x0000000000448c06: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004aca81: add al, 0x83; add eax, 0x2c; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x000000000044d599: add al, 0x83; add rax, rbx; jmp rax; 
0x0000000000402281: add al, 0x83; call 0xaf8a58b; ja 0x1eef; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000048bf5a: add al, 0x84; add rax, r12; jmp rax; 
0x0000000000466519: add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x000000000048c85b: add al, 0x86; add rax, r14; jmp rax; 
0x000000000046e26c: add al, 0x86; add rax, rsi; jmp rax; 
0x000000000048af09: add al, 0x87; add rax, r15; jmp rax; 
0x000000000046ea08: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000443dc6: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000442606: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000048ace3: add al, 0x88; add rax, r8; jmp rax; 
0x000000000047b5be: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004abc1c: add al, 0x95; cmc; call rsp; 
0x0000000000448263: add al, 0x96; add rax, rsi; jmp rax; 
0x000000000048c493: add al, 0x99; add rax, r9; jmp rax; 
0x0000000000449325: add al, 0x9a; add rax, rdx; jmp rax; 
0x000000000047c08f: add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000047c9b7: add al, 0xa7; add rax, rdi; jmp rax; 
0x00000000004481a9: add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000040d30f: add al, 0xc3; ja 0xd995; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000046b5ed: add al, 0xc6; jmp rax; 
0x00000000004607b2: add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000460e0a: add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000460768: add al, 0xc7; jmp rax; 
0x000000000046b628: add al, 0xc8; mov ecx, 1; jmp rax; 
0x00000000004b06fc: add al, 0xce; stc; jmp qword ptr [rdx]; 
0x0000000000462949: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045d5b7: add al, 0xd8; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004592a1: add al, 0xe8; test rax, rax; je 0x592aa; call rax; 
0x0000000000459296: add al, 0xeb; lea rax, [rip + 0x25f9a1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x00000000004014c2: add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x0000000000435833: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000044999b: add al, 0xf3; ret; 
0x000000000048d0b9: add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000046021e: add al, 0xf8; jmp rax; 
0x00000000004904e2: add al, 0xf9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000484c18: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042a966: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042c036: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000446cbb: add al, 0xf; sub rax, rsi; ret; 
0x0000000000494a11: add al, 0xfa; call qword ptr [rax]; 
0x0000000000494a51: add al, 0xfa; inc dword ptr [rax]; add al, 0xfa; push qword ptr [rax + 3]; cli; jmp rax; 
0x0000000000494855: add al, 0xfa; jmp rax; 
0x0000000000494a55: add al, 0xfa; push qword ptr [rax + 3]; cli; jmp rax; 
0x00000000004b4891: add al, 0xfd; jmp qword ptr [rdx]; 
0x00000000004b48a9: add al, 0xfd; jmp rdx; 
0x000000000040f0a7: add al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048acdb: add al, 2; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000047f897: add al, 2; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000042d607: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000434167: add al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000460dff: add al, 6; lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a7: add al, 6; lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000044022d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044068e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000046075d: add al, 7; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046b5e9: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000440448: add al, 7; ret; 
0x00000000004264ef: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004021a6: add al, 9; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000004b2b6f: add al, ah; cmc; sti; jmp qword ptr [rsi]; 
0x00000000004b2d1b: add al, ah; jne 0xb2d1f; add byte ptr [rax - 3], dl; sti; jmp qword ptr [rbx]; 
0x00000000004b522f: add al, ah; push rdi; std; call qword ptr [rdx]; 
0x000000000049749f: add al, ah; sub edi, esp; call rax; 
0x000000000049749f: add al, ah; sub edi, esp; call rax; sub edi, esp; call qword ptr [rax]; 
0x00000000004b488f: add al, al; add al, 0xfd; jmp qword ptr [rdx]; 
0x00000000004b010f: add al, al; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b2daf: add al, al; or al, 0xfc; jmp qword ptr [rbx]; 
0x00000000004b52af: add al, al; pop rbx; std; jmp qword ptr [rcx + 9]; 
0x000000000049f247: add al, al; sldt word ptr [rax]; ret; 
0x00000000004b193f: add al, al; std; call rdx; 
0x00000000004951d8: add al, bh; cli; jmp qword ptr [rax]; 
0x00000000004b2133: add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004482f5: add al, bh; jg 0x482f0; int1; mov eax, eax; ret; 
0x00000000004b3fc7: add al, bh; leave; cld; jmp qword ptr [rcx]; 
0x00000000004ada87: add al, bh; mov ah, 0xf6; jmp qword ptr [rax]; 
0x00000000004b4a33: add al, bh; xchg eax, edx; add byte ptr [rax], al; pop rax; or ch, bh; call qword ptr [rax]; 
0x00000000004b4e33: add al, bh; xchg eax, esi; add byte ptr [rax], al; or byte ptr [rdx], dh; std; call qword ptr [rbx]; 
0x00000000004abc07: add al, bh; xchg eax, esp; cmc; call qword ptr [rdx]; 
0x00000000004b48a7: add al, bl; add al, 0xfd; jmp rdx; 
0x00000000004af5e7: add al, bl; fprem; call qword ptr [rax]; 
0x00000000004b0127: add al, bl; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x0000000000417416: add al, bpl; movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x0000000000440e21: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000455936: add al, byte ptr [rax]; add al, ch; xchg eax, edx; ret 0xfffa; 
0x00000000004010fb: add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047aef0: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004552ed: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045f0a3: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000472af2: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000048806e: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x3a83; 
0x000000000045ad5d: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004683e4: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000423d13: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x00000000004010e5: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000449319: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x4c3f9; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000047c26a: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041b93b: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004477e4: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047b5f1: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000042201a: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000454a8b: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042b537: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e8d1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b565: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045ac52: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000484448: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000484651: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000047db66: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044a779: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x000000000040dc7c: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000004744a4: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000421558: add al, byte ptr [rax]; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x719; 
0x0000000000446264: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000411476: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000485974: add al, byte ptr [rax]; add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x0000000000411add: add al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000462cff: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000041b597: add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x0000000000424ad3: add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000424183: add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000472100: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241f0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eb0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a80: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472130: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000424e25: add al, byte ptr [rax]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce5: add al, byte ptr [rax]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b85: add al, byte ptr [rax]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e8c: add al, byte ptr [rax]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d4c: add al, byte ptr [rax]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424bec: add al, byte ptr [rax]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e6b: add al, byte ptr [rax]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000042417c: add al, byte ptr [rax]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d2b: add al, byte ptr [rax]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424bcb: add al, byte ptr [rax]; lea rax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x0000000000424c3a: add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c8b: add al, byte ptr [rax]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000047d745: add al, byte ptr [rax]; mov eax, 0x15; syscall; 
0x00000000004240b7: add al, byte ptr [rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000480f9c: add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000045888f: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004005a2: add al, byte ptr [rax]; mov qword ptr [rip + 0x2bbae9], 0; pop rax; ret; 
0x000000000047c08b: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047c9b3: add al, byte ptr [rax]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000484d9a: add al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048acdc: add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000044b055: add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000046e9f9: add al, byte ptr [rbx - 0x77cdf18]; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000044beae: add al, byte ptr [rcx + 0x39]; ret; 
0x000000000045e97c: add al, byte ptr [rcx - 5]; jg 0x5e993; test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000048505a: add al, byte ptr [rcx]; add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000474686: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x746b0; ret; 
0x00000000004abfd5: add al, byte ptr [rdx]; ret 0xb00e; 
0x000000000048453e: add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x00000000004342e7: add al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004558ce: add al, ch; cld; ret 0xfffa; 
0x00000000004b46d7: add al, ch; cli; cld; call qword ptr [rbx]; 
0x000000000045a691: add al, ch; cmp dword ptr [rbp - 6], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000004015df: add al, ch; fild dword ptr [rsp + rax - 0x77d00]; je 0x16bb; add rsp, 0x98; ret; 
0x000000000047d348: add al, ch; jb 0x7d309; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000489e81: add al, ch; jge 0x89e7d; jmp qword ptr [rsi + 0xf]; 
0x0000000000400c89: add al, ch; jno 0xc8c; add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x0000000000469e6d: add al, ch; lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047b61a: add al, ch; mov al, 0x65; clc; call qword ptr [rbp + 0x53]; 
0x0000000000400bc3: add al, ch; mov bh, 0xf3; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000477664: add al, ch; movsw word ptr [rdi], word ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000417417: add al, ch; movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x0000000000458ff0: add al, ch; or dh, byte ptr [rax - 0x46]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b4aa7: add al, ch; or ebp, edi; call qword ptr [rbx + 1]; 
0x000000000044a55b: add al, ch; outsd dx, dword ptr [rsi]; jbe 0x4a55b; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b1023: add al, ch; pop rax; add byte ptr [rax], al; sbb byte ptr [rax], dh; cli; jmp qword ptr [rdi + 0x11]; 
0x000000000047fb6c: add al, ch; pop rsi; and al, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000041ec88: add al, ch; ret 0x2d1; 
0x00000000004762b0: add al, ch; ret 0xf8a1; 
0x000000000045a228: add al, ch; ret 0xfc5e; 
0x0000000000457ce8: add al, ch; ret 0xfc8c; 
0x00000000004502e8: add al, ch; ret 0xfd06; 
0x00000000004103b7: add al, ch; ret; 
0x000000000044902c: add al, ch; sahf; mov edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000044e99e: add al, ch; sub al, 0x32; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000455938: add al, ch; xchg eax, edx; ret 0xfffa; 
0x00000000004ac2e7: add al, ch; xor esi, esi; jmp qword ptr [rax]; 
0x00000000004abc03: add al, cl; add al, 0; add al, bh; xchg eax, esp; cmc; call qword ptr [rdx]; 
0x00000000004ab903: add al, cl; add dword ptr [rax], eax; add byte ptr [rax + 0x61], ch; cmc; call qword ptr [rbx + 1]; 
0x00000000004b2b57: add al, cl; cmc; sti; jmp qword ptr [rbx]; 
0x00000000004af787: add al, cl; outsb dx, byte ptr [rsi]; stc; call qword ptr [rbx + 4]; 
0x00000000004afa2b: add al, dh; add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x00000000004b56bf: add al, dh; jle 0xb56c0; call qword ptr [rdx + 1]; 
0x00000000004b472b: add al, dh; pop qword ptr [rax]; add al, dl; cld; cld; call qword ptr [rax]; 
0x00000000004b31af: add al, dl; and esp, edi; jmp qword ptr [rcx]; 
0x00000000004b472f: add al, dl; cld; cld; call qword ptr [rax]; 
0x00000000004b120b: add al, dl; pop rdx; add byte ptr [rax], al; jo 0xb126b; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004ab7cf: add al, dl; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004af73f: add al, dl; stc; jmp qword ptr [rdi + 6]; 
0x00000000004b3f16: add bh, ah; ret; 
0x000000000048453c: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000044e92f: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004200df: add bh, al; add eax, 0x29bc86; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000494570: add bh, al; stc; call qword ptr [rax - 0x38]; 
0x00000000004b095f: add bh, al; sti; hlt; jmp qword ptr [rbx]; 
0x000000000047e984: add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000045e3f7: add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040eb4f: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004010fd: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000049446c: add bh, bl; stc; jmp rax; 
0x0000000000484489: add bh, byte ptr [rax + 1]; ret; 
0x00000000004845e6: add bh, byte ptr [rax + 2]; ret; 
0x00000000004496bb: add bh, byte ptr [rax - 1]; ret; 
0x000000000047f898: add bh, byte ptr [rdx]; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004506e3: add bh, ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000004951b0: add bh, dh; cli; call qword ptr [rax]; 
0x00000000004ab201: add bh, dh; inc dword ptr [rbx + rax - 2]; call rsp; 
0x0000000000400eca: add bh, dh; ret 0; 
0x00000000004532e9: add bh, dh; ret 0xf800; 
0x000000000040f207: add bh, dh; ret 0xffef; 
0x0000000000494a5d: add bh, dl; inc dword ptr [rax - 0x5f00061b]; out 0xf9, al; jmp qword ptr [rax]; 
0x0000000000494a21: add bh, dl; jmp qword ptr [rax]; 
0x00000000004948a1: add bh, dl; jmp qword ptr [rdx + 0xa]; 
0x00000000004945a4: add bl, 0xf9; call rax; 
0x0000000000489edb: add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000423e64: add bl, ch; iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000046ff7f: add bl, ch; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000400c31: add bl, ch; or cl, byte ptr [rbx - 0x387603bb]; call 0xb6d; leave; ret; 
0x000000000040f4e0: add bl, ch; ret 0x1f0f; 
0x0000000000401553: add bl, ch; ret 0xe883; 
0x0000000000485b09: add bl, ch; ret; 
0x000000000042babd: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004490d3: add bl, ch; sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000042bacf: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440ccf: add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004409cf: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044434f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044436f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004443ef: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004443af: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004443cf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004444ef: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044448f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004444af: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444cf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004449bf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004449cf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044433f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000400a7f: add bl, dh; ret; 
0x000000000044434e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000041b7fe: add bl, sil; ret; 
0x000000000046c0ca: add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000046b77c: add byte ptr [r11 - 0x78f0d008], r8b; mov ebx, 0x89000025; ret 0x349; 
0x000000000046b22e: add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000481570: add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000044987c: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000472196: add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000455495: add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000418b2a: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000040e24a: add byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004afb29: add byte ptr [r8], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004af8d9: add byte ptr [r8], al; je 0xaf958; stc; call rsp; 
0x00000000004b00f5: add byte ptr [r8], al; test al, 0xa5; stc; jmp qword ptr [rcx]; 
0x00000000004b06f9: add byte ptr [r8], r8b; add al, 0xce; stc; jmp qword ptr [rdx]; 
0x00000000004755eb: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004754cb: add byte ptr [r9 + rdi - 0x75], sil; add eax, 0x247337; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x0000000000493fdf: add byte ptr [rax + 0x10], dl; stc; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x000000000044c153: add byte ptr [rax + 0x15], bh; syscall; 
0x0000000000423e0f: add byte ptr [rax + 0x16], bh; ret; 
0x00000000004afdf3: add byte ptr [rax + 0x18000046], bh; cwde; stc; jmp qword ptr [rcx]; 
0x00000000004b3bd3: add byte ptr [rax + 0x18000084], bl; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x000000000044960f: add byte ptr [rax + 0x18], bh; syscall; 
0x000000000044960f: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044960e: add byte ptr [rax + 0x18], dil; syscall; 
0x000000000044960e: add byte ptr [rax + 0x18], dil; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044a6ff: add byte ptr [rax + 0x1c], bh; syscall; 
0x000000000044a6ff: add byte ptr [rax + 0x1c], bh; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x00000000004ada83: add byte ptr [rax + 0x23], cl; add byte ptr [rax], al; clc; mov ah, 0xf6; jmp qword ptr [rax]; 
0x000000000047f2ff: add byte ptr [rax + 0x23d4c13d], al; add byte ptr [rax], al; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x000000000048852f: add byte ptr [rax + 0x26], bh; syscall; 
0x000000000048852f: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x00000000004b16d3: add byte ptr [rax + 0x2800005f], bl; nop; cli; call qword ptr [rdx]; 
0x0000000000452a71: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000004535d7: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000465728: add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000476b88: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000047a87a: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000412a90: add byte ptr [rax + 0x29], cl; ret; 
0x0000000000423f90: add byte ptr [rax + 0x31], dl; shr al, 0xd7; ret 0xfffe; 
0x000000000048aeb3: add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a96f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000413a6f: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000048af48: add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000047aef2: add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000041d900: add byte ptr [rax + 0x39], cl; ret 0xf275; 
0x00000000004781c8: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040eb2f: add byte ptr [rax + 0x39], cl; ret; 
0x00000000004480e3: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000447f20: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000004af593: add byte ptr [rax + 0x3e], bl; add byte ptr [rax], al; cwde; xchg eax, esi; clc; call qword ptr [rax]; 
0x00000000004af79b: add byte ptr [rax + 0x40], ah; add byte ptr [rax], al; push rax; jae 0xaf79c; call qword ptr [rdi]; 
0x00000000004af9b3: add byte ptr [rax + 0x42], bh; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004af98b: add byte ptr [rax + 0x42], dl; add byte ptr [rax], al; jo 0xaf915; stc; call qword ptr [rax]; 
0x00000000004b37f3: add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000449b46: add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004515bc: add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004af76f: add byte ptr [rax + 0x57], dh; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004b120f: add byte ptr [rax + 0x59], dh; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004b5297: add byte ptr [rax + 0x5b], ch; std; jmp qword ptr [rcx]; 
0x00000000004b2aeb: add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004b178b: add byte ptr [rax + 0x60], dl; add byte ptr [rax], al; jo 0xb1727; cli; call qword ptr [rcx]; 
0x00000000004ab907: add byte ptr [rax + 0x61], ch; cmc; call qword ptr [rbx + 1]; 
0x000000000040d31d: add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000046e3d5: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000402024: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000046ea05: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000449322: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000004481a6: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000048c983: add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004597f7: add byte ptr [rax + 0x63], cl; ret; 
0x000000000046eed3: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000045d521: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000004b37f7: add byte ptr [rax + 0x64], cl; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004753af: add byte ptr [rax + 0x66], bh; syscall; 
0x00000000004753af: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000004753cf: add byte ptr [rax + 0x68], bh; syscall; 
0x00000000004753cf: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004753bf: add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004753bf: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000004753df: add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000004753df: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004b257b: add byte ptr [rax + 0x6e], al; add byte ptr [rax], al; mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x00000000004af9db: add byte ptr [rax + 0x70000042], ah; test cl, bh; call qword ptr [rbx]; 
0x00000000004b01eb: add byte ptr [rax + 0x7000004a], dh; stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x00000000004af79f: add byte ptr [rax + 0x73], dl; stc; call qword ptr [rdi]; 
0x0000000000489678: add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004b2ba3: add byte ptr [rax + 0x74], ch; add byte ptr [rax], al; sbb dh, dh; sti; jmp qword ptr [rbx]; 
0x0000000000440e1f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000048cfb8: add byte ptr [rax + 0x75], al; adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x000000000048777f: add byte ptr [rax + 0x75], al; jge 0x877cc; cmp dword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x00000000004affc3: add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x00000000004b549f: add byte ptr [rax + 0x78], dl; std; jmp qword ptr [rsi]; 
0x000000000044485f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004b31ab: add byte ptr [rax + 0x7a], dh; add byte ptr [rax], al; shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x000000000041197e: add byte ptr [rax + 0x7f741], dl; or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000044a6cf: add byte ptr [rax + 0xa], bh; syscall; 
0x000000000044a6cf: add byte ptr [rax + 0xa], bh; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a69f: add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044a69f: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044be91: add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044be91: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000044bf38: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000048d05f: add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000449384: add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000040dc7f: add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000415def: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450c7f: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004730c5: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000044fd0f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000047469f: add byte ptr [rax + 0xfe580f5], cl; je 0x746c0; add rax, 2; ret; 
0x000000000046f586: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048444c: add byte ptr [rax + 1], bh; ret; 
0x0000000000449a5f: add byte ptr [rax + 1], bh; syscall; 
0x0000000000472af4: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000004737d1: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000472e21: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000483658: add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000488070: add byte ptr [rax + 1], cl; ret 0x3a83; 
0x0000000000411a12: add byte ptr [rax + 1], cl; ret; 
0x0000000000484655: add byte ptr [rax + 2], bh; ret; 
0x0000000000449d0f: add byte ptr [rax + 3], bh; syscall; 
0x0000000000449a8f: add byte ptr [rax + 8], bh; syscall; 
0x00000000004b4a37: add byte ptr [rax + 8], bl; std; call qword ptr [rax]; 
0x0000000000449a8e: add byte ptr [rax + 8], dil; syscall; 
0x0000000000481571: add byte ptr [rax + 9], cl; ret 0x840f; 
0x0000000000475fc8: add byte ptr [rax + 9], cl; ret 0x850f; 
0x00000000004845f9: add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000049e1eb: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004b3b3c: add byte ptr [rax + rax - 0x356f000], al; jmp qword ptr [rdx]; 
0x0000000000450563: add byte ptr [rax + rax*8 - 0x76b3178b], al; ret 0x294c; 
0x0000000000471eef: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000424af4: add byte ptr [rax + rax], al; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004b489f: add byte ptr [rax + rax], bh; add byte ptr [rax], al; push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x00000000004ae82b: add byte ptr [rax + rax], bl; add byte ptr [rax], al; hlt; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004b427b: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004b409f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x00000000004b4a9f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b454f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x00000000004b212f: add byte ptr [rax + rax], cl; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004b37ef: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b2ae7: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004affbf: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x0000000000472103: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x0000000000424ee3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x00000000004241f3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x0000000000424eb3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x00000000004721d3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000473a83: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000472133: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x00000000004757b1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041e61b: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473ad7: add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004b56b7: add byte ptr [rax + rax], dh; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x00000000004b5967: add byte ptr [rax + rax], dh; add byte ptr [rax], al; xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x00000000004b2b3c: add byte ptr [rax + rax], dh; mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x00000000004b1747: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc byte ptr [rax], ah; add byte ptr [rax - 0x6b], dl; cli; call qword ptr [rdi]; 
0x00000000004b2d47: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc byte ptr [rsi], dh; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004b2b37: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x00000000004af737: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add byte ptr [rax], al; add al, dl; stc; jmp qword ptr [rdi + 6]; 
0x00000000004af71f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x00000000004b011f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffd80b0172; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b4f6f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004afdef: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov eax, 0x18000046; cwde; stc; jmp qword ptr [rcx]; 
0x00000000004b00ef: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov eax, 0xa8000049; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b2b9f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b0507: add byte ptr [rax + rax], dl; add byte ptr [rax], al; ror byte ptr [rbp], 1; add byte ptr [rax - 0x46], ah; stc; call qword ptr [rdx]; 
0x00000000004af767: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax + 0x57], dh; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004b5c67: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x00000000004b3b23: add byte ptr [rax + rbp*4 - 4], bh; jmp qword ptr [rdx]; 
0x0000000000490e96: add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000045ac6d: add byte ptr [rax + rcx - 0xd], dh; ret; 
0x000000000045ad5f: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004b3fd7: add byte ptr [rax + rcx*4 - 0x35ec0000], bl; cld; call rdx; 
0x000000000049f397: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004b47ef: add byte ptr [rax + rdx*4 + 0x33c0000], dh; std; jmp qword ptr [rdx]; 
0x000000000044987d: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004636d4: add byte ptr [rax - 0x15343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000047b944: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x00000000004b4557: add byte ptr [rax - 0x17], cl; cld; jmp qword ptr [rcx]; 
0x000000000041db1f: add byte ptr [rax - 0x17], dl; ret; 
0x00000000004b46d3: add byte ptr [rax - 0x17ffff71], bl; cli; cld; call qword ptr [rbx]; 
0x00000000004ac2e3: add byte ptr [rax - 0x17fffff5], ch; xor esi, esi; jmp qword ptr [rax]; 
0x00000000004b4457: add byte ptr [rax - 0x1f], bl; cld; jmp qword ptr [rsi]; 
0x00000000004af5e3: add byte ptr [rax - 0x27ffffc2], ch; fprem; call qword ptr [rax]; 
0x00000000004735c5: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004ab7cb: add byte ptr [rax - 0x30000000], dl; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004b2137: add byte ptr [rax - 0x38], ch; sti; jmp qword ptr [rbx + 8]; 
0x0000000000484538: add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x00000000004713e8: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000041903a: add byte ptr [rax - 0x39], cl; add eax, 0x2a2cd2; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004005a3: add byte ptr [rax - 0x39], cl; add eax, 0x2bbae9; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x000000000044f501: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000417d13: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000416e8f: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004105c3: add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000464acb: add byte ptr [rax - 0x39], cl; ret 0xb2c8; 
0x000000000045cdaf: add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000040dca7: add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x0000000000423d15: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000467a55: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x00000000004010e7: add byte ptr [rax - 0x39], cl; ret; 
0x00000000004746ff: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004746df: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000047473f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004746ef: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047472f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ae5f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000048aea8: add byte ptr [rax - 0x3f], cl; call 0xffffffff850bf7ef; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000048af3d: add byte ptr [rax - 0x3f], cl; call 0xffffffff850bf884; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x00000000004589b9: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000458990: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004582f0: add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000004844fa: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004a2a2f: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004b050f: add byte ptr [rax - 0x46], ah; stc; call qword ptr [rdx]; 
0x00000000004b04f7: add byte ptr [rax - 0x46], ch; stc; call qword ptr [rax]; 
0x00000000004b0527: add byte ptr [rax - 0x46], ch; stc; jmp qword ptr [rcx]; 
0x00000000004b040f: add byte ptr [rax - 0x47], al; stc; call qword ptr [rdx]; 
0x000000000048a98f: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x0000000000460eaf: add byte ptr [rax - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000004b01ef: add byte ptr [rax - 0x56], dh; stc; call qword ptr [rdi]; 
0x00000000004b00f3: add byte ptr [rax - 0x57ffffb7], bh; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004abdbf: add byte ptr [rax - 0x5d], al; cmc; jmp qword ptr [rax]; 
0x00000000004b549b: add byte ptr [rax - 0x63], ah; add byte ptr [rax], al; push rax; js 0xb54a0; jmp qword ptr [rsi]; 
0x00000000004affc7: add byte ptr [rax - 0x63], bh; stc; call qword ptr [rbx]; 
0x0000000000460758: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460dfa: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a2: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460707: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab6: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a68: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609b9: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046095d: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606bd: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046066f: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046020e: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b4dab: add byte ptr [rax - 0x6a], dh; add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x00000000004b1767: add byte ptr [rax - 0x6b], bl; cli; call qword ptr [rcx]; 
0x00000000004b178f: add byte ptr [rax - 0x6b], dh; cli; call qword ptr [rcx]; 
0x00000000004b174f: add byte ptr [rax - 0x6b], dl; cli; call qword ptr [rdi]; 
0x000000000046eb83: add byte ptr [rax - 0x73], cl; adc eax, 0x351fd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044931b: add byte ptr [rax - 0x73], cl; adc eax, 0x4c3f9; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000423b1c: add byte ptr [rax - 0x73], cl; adc eax, 0x703fc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473af2: add byte ptr [rax - 0x73], cl; adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x0000000000473df4: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000047b5bb: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000044022a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045528a: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000045740d: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000472106: add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x0000000000424ee6: add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x00000000004241f6: add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x0000000000424e26: add byte ptr [rax - 0x73], cl; add eax, 0x22132; cmovne rax, rdx; ret; 
0x0000000000424ce6: add byte ptr [rax - 0x73], cl; add eax, 0x22262; cmovne rax, rdx; ret; 
0x0000000000424b86: add byte ptr [rax - 0x73], cl; add eax, 0x223d2; cmovne rax, rdx; ret; 
0x0000000000424e8d: add byte ptr [rax - 0x73], cl; add eax, 0x2247b; cmovne rax, rdx; ret; 
0x0000000000424d4d: add byte ptr [rax - 0x73], cl; add eax, 0x225ab; cmovne rax, rdx; ret; 
0x0000000000424bed: add byte ptr [rax - 0x73], cl; add eax, 0x2271b; cmovne rax, rdx; ret; 
0x0000000000424e6c: add byte ptr [rax - 0x73], cl; add eax, 0x228cc; cmovne rax, rdx; ret; 
0x000000000042417d: add byte ptr [rax - 0x73], cl; add eax, 0x2296b; cmovne rax, rdx; ret; 
0x0000000000424d2c: add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x0000000000424bcc: add byte ptr [rax - 0x73], cl; add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x0000000000424c3b: add byte ptr [rax - 0x73], cl; add eax, 0x231dd; cmovne rax, rdx; ret; 
0x0000000000424c8c: add byte ptr [rax - 0x73], cl; add eax, 0x2330c; cmovne rax, rdx; ret; 
0x00000000004848df: add byte ptr [rax - 0x73], cl; add eax, 0x237799; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48f: add byte ptr [rax - 0x73], cl; add eax, 0x26ce69; ret; 
0x000000000048505d: add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x0000000000424eb6: add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x00000000004721d6: add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000473a86: add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000472136: add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x0000000000473ae5: add byte ptr [rax - 0x73], cl; add eax, 0xfffd4313; cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x00000000004200bf: add byte ptr [rax - 0x73], cl; add eax, 0xffffeb59; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200cd: add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x299784], rax; ret; 
0x000000000045742b: add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457449: add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000047c9ad: add byte ptr [rax - 0x73], cl; cmp eax, 0x28403; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000040ec9b: add byte ptr [rax - 0x73], cl; cmp eax, 0x83f8a; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040d316: add byte ptr [rax - 0x73], cl; cmp eax, 0x85462; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000047c085: add byte ptr [rax - 0x73], cl; or eax, 0x28c93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046e3ce: add byte ptr [rax - 0x73], cl; or eax, 0x3576e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000042a95e: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000479a72: add byte ptr [rax - 0x73], cl; push 0x48b4901; and al, 0x83; ret; 
0x000000000041cd9a: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000041f2ef: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041b618: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000471244: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000046b0cb: add byte ptr [rax - 0x73], cl; xor eax, 0x24bd4d; jmp rax; 
0x000000000044819f: add byte ptr [rax - 0x73], cl; xor eax, 0x4d0d9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004b448b: add byte ptr [rax - 0x73], dl; add byte ptr [rax], al; nop; loope 0xb448f; call qword ptr [rdx]; 
0x000000000047c26c: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041a10f: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000485e47: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000048abb4: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8b8: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000004607af: add byte ptr [rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000460e07: add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000460765: add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x000000000046b625: add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000045929e: add byte ptr [rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x592aa; call rax; 
0x000000000048d0b6: add byte ptr [rax - 0x75], cl; add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000046021b: add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000443e7f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000044254f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000047f36f: add byte ptr [rax - 0x75], cl; add eax, 0x239d79; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x0000000000457b0f: add byte ptr [rax - 0x75], cl; add eax, 0x264361; ret; 
0x000000000044f5af: add byte ptr [rax - 0x75], cl; add eax, 0x26d371; ret; 
0x0000000000418f3f: add byte ptr [rax - 0x75], cl; add eax, 0x2a01d9; ret; 
0x000000000040dfeb: add byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x000000000042f96f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004649a5: add byte ptr [rax - 0x75], cl; cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000044e9ef: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000042fb4f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043013f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000401208: add byte ptr [rax - 0x75], cl; je 0x1231; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004231ef: add byte ptr [rax - 0x75], cl; je 0x23218; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000047f4af: add byte ptr [rax - 0x75], cl; je 0x7f4d8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000458fff: add byte ptr [rax - 0x75], cl; jl 0x59028; sbb al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; jns 0x59005; jmp qword ptr [rsi + 0xf]; 
0x000000000045b6fb: add byte ptr [rax - 0x75], cl; jl 0x5b724; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000040ea82: add byte ptr [rax - 0x75], cl; js 0xeaa7; call rdx; 
0x00000000004916b7: add byte ptr [rax - 0x75], cl; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004717ef: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000042fd3f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff3f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000491709: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000478c9f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x0000000000481a2f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000486b90: add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400fad: add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000004136d1: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000043544f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000042f3ef: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c8f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434bff: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434e9f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000468b43: add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000042f5af: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000047f206: add byte ptr [rax - 0x75], cl; xor eax, 0x23d1a2; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000044a8dc: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x4a908; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000412baf: add byte ptr [rax - 0x76b80000], al; ret; 
0x00000000004b40a3: add byte ptr [rax - 0x77], ch; add byte ptr [rax], al; or ch, cl; cld; jmp qword ptr [rsi]; 
0x0000000000418fd0: add byte ptr [rax - 0x77], cl; adc eax, 0x2a2d40; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000048a8af: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004848e6: add byte ptr [rax - 0x77], cl; add eax, 0x23777a; ret; 
0x00000000004848cb: add byte ptr [rax - 0x77], cl; add eax, 0x237795; add rsp, 8; ret; 
0x000000000047f2cf: add byte ptr [rax - 0x77], cl; add eax, 0x23d0d9; add rsp, 8; ret; 
0x0000000000419aad: add byte ptr [rax - 0x77], cl; add eax, 0x29fd33; ret; 
0x0000000000419a8d: add byte ptr [rax - 0x77], cl; add eax, 0x29fd4b; ret; 
0x000000000047e42f: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7dd60; add rsp, 0xd8; ret; 
0x000000000041108d: add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000414615: add byte ptr [rax - 0x77], cl; call 0x5c42a378; ret; 
0x000000000047e371: add byte ptr [rax - 0x77], cl; call 0x5c4940d4; pop r13; ret; 
0x000000000047faf0: add byte ptr [rax - 0x77], cl; call 0x5c495853; ret; 
0x000000000047fb0d: add byte ptr [rax - 0x77], cl; call 0x5c495870; ret; 
0x000000000047fb4a: add byte ptr [rax - 0x77], cl; call 0x5c4958ad; ret; 
0x0000000000413e5d: add byte ptr [rax - 0x77], cl; call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413232: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000414f93: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000488425: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x000000000048850c: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000412db7: add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x0000000000458425: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000455496: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000045df87: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000412094: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000473c34: add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x000000000048b35e: add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x0000000000418b2b: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000004018a1: add byte ptr [rax - 0x77], cl; jbe 0x18b6; syscall; 
0x000000000044c0ff: add byte ptr [rax - 0x77], cl; jo 0x4c124; ret; 
0x0000000000413383: add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000041e6df: add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x0000000000423e6f: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041199e: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000044951b: add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x000000000041e5c7: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000411ae6: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004139ba: add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x000000000048e72c: add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x00000000004495c7: add byte ptr [rax - 0x77], cl; ret 0x6ae9; 
0x0000000000402e9e: add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000045f5d8: add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041b93d: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000402c1f: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000410a78: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000048de7f: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004564f8: add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x0000000000403233: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000469c17: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000040fc4d: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000415118: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000449532: add byte ptr [rax - 0x77], cl; ret 0xffe9; 
0x0000000000403911: add byte ptr [rax - 0x77], cl; ret; 
0x000000000042a9cc: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043d614: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000447040: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000481b61: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000048ca9f: add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x000000000048f49d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x22cee005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f38d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x22cff005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000047b5f3: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000480f9d: add byte ptr [rax - 0x77], cl; xchg eax, r8d; mov eax, 0x15; syscall; 
0x00000000004542a8: add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x000000000048a996: add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000047352f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000048fffa: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x22bceb; jne 0x8ffe8; pop rbx; ret; 
0x000000000047124b: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044be3f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004798f7: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x00000000004109ea: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046cbbd: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400aa5: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x000000000044cf53: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000048d13f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000400ae7: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x000000000040040a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000486c38: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048ae2f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfcf: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee2f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f89f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x00000000004af9b7: add byte ptr [rax - 0x7c], cl; stc; call qword ptr [rdx]; 
0x00000000004af9df: add byte ptr [rax - 0x7c], dh; stc; call qword ptr [rbx]; 
0x00000000004b3ab3: add byte ptr [rax - 0x7d], bh; add byte ptr [rax], al; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x000000000048ebde: add byte ptr [rax - 0x7d], cl; and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000047fbcf: add byte ptr [rax - 0x7d], cl; call 0x7c9343d8; ret; 
0x00000000004204bc: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000401b59: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000461313: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000447cdd: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d2d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000041317f: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2a5e20; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000403909: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2b564e; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423774: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000048a6c1: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000041736f: add byte ptr [rax - 0x7d], cl; jg 0x173ac; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000045729a: add byte ptr [rax - 0x7d], cl; jl 0x572c3; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x000000000041f932: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000471206: add byte ptr [rax - 0x7d], cl; js 0x7123b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000044672f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000044c4a7: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000046ea17: add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000040f34f: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000456154: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000004858bf: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000047db6a: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000045d504: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000042a9f9: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041ef87: add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000048de5f: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000046ebf8: add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x0000000000424580: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043d3b3: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aa27: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047de27: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000040600f: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042642f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000047366f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000489422: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x00000000004af98f: add byte ptr [rax - 0x7d], dh; stc; call qword ptr [rax]; 
0x000000000041ec81: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2d1; 
0x000000000045ac54: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000043305b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004b3fc3: add byte ptr [rax - 0x7ffff78], cl; leave; cld; jmp qword ptr [rcx]; 
0x00000000004adacb: add byte ptr [rax - 0x7fffffdd], dl; mov ch, 0xf6; call qword ptr [rsi]; 
0x000000000048acbf: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048dfe7: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x74]; 
0x000000000048df8f: add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004af60f: add byte ptr [rax - 0xb], ah; clc; call qword ptr [rax]; 
0x00000000004b2aef: add byte ptr [rax - 0xc], ah; sti; call qword ptr [rsi + 1]; 
0x00000000004b56bb: add byte ptr [rax - 0xfffff61], al; jle 0xb56c0; call qword ptr [rdx + 1]; 
0x000000000045c90d: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000041254a: add byte ptr [rax - 1], bh; ret; 
0x00000000004b2d1f: add byte ptr [rax - 3], dl; sti; jmp qword ptr [rbx]; 
0x000000000041ec85: add byte ptr [rax], 0; add al, ch; ret 0x2d1; 
0x00000000004103b4: add byte ptr [rax], 0; add al, ch; ret; 
0x00000000004162ba: add byte ptr [rax], 0; add bl, dh; ret; 
0x0000000000447f1d: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x0000000000418fcd: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2a2d40; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x0000000000413e5a: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000415115: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000042b9ab: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b9cb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000048852b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x0000000000449a5b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; syscall; 
0x000000000043583b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000457b0b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000043567b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000044433b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044822b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000043598b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043591b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042c0bb: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044998b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; syscall; 
0x00000000004751d6: add byte ptr [rax], 0; add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000465859: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000041b1ab: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044be5c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000040ed61: add byte ptr [rax], 0; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000044801f: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fbf: add byte ptr [rax], 0; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004348e3: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000042c621: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b37f5: add byte ptr [rax], 0; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b179f: add byte ptr [rax], ah; add byte ptr [rbp + rdx*4 - 6], bh; call qword ptr [rax]; 
0x00000000004b2d4f: add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004b596f: add byte ptr [rax], ah; mov ebp, edi; jmp qword ptr [rbx]; 
0x00000000004b4d5b: add byte ptr [rax], ah; xchg eax, esi; add byte ptr [rax], al; mov al, 0x2d; std; jmp qword ptr [rax + 1]; 
0x00000000004af71e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x00000000004b2b9e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b5c66: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x00000000004b3fda: add byte ptr [rax], al; adc al, 0xca; cld; call rdx; 
0x00000000004b174a: add byte ptr [rax], al; adc byte ptr [rax], ah; add byte ptr [rax - 0x6b], dl; cli; call qword ptr [rdi]; 
0x00000000004ac21e: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffb80ac233; sub al, 0xf6; call qword ptr [rax]; 
0x00000000004b3fbe: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax - 0x36080000], cl; cld; jmp qword ptr [rcx]; 
0x000000000048445e: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004b2d4a: add byte ptr [rax], al; adc byte ptr [rsi], dh; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004aca86: add byte ptr [rax], al; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004b3b1d: add byte ptr [rax], al; add ah, ah; add dword ptr [rax], 0; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004afb25: add byte ptr [rax], al; add ah, ch; add byte ptr [r8], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004ae82d: add byte ptr [rax], al; add ah, dh; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004abc1a: add byte ptr [rax], al; add al, 0x95; cmc; call rsp; 
0x00000000004b06fa: add byte ptr [rax], al; add al, 0xce; stc; jmp qword ptr [rdx]; 
0x00000000004b2d19: add byte ptr [rax], al; add al, ah; jne 0xb2d1f; add byte ptr [rax - 3], dl; sti; jmp qword ptr [rbx]; 
0x000000000049749d: add byte ptr [rax], al; add al, ah; sub edi, esp; call rax; 
0x000000000049749d: add byte ptr [rax], al; add al, ah; sub edi, esp; call rax; sub edi, esp; call qword ptr [rax]; 
0x00000000004b2131: add byte ptr [rax], al; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x000000000045a68f: add byte ptr [rax], al; add al, ch; cmp dword ptr [rbp - 6], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000004015dd: add byte ptr [rax], al; add al, ch; fild dword ptr [rsp + rax - 0x77d00]; je 0x16bb; add rsp, 0x98; ret; 
0x000000000047d346: add byte ptr [rax], al; add al, ch; jb 0x7d309; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000489e7f: add byte ptr [rax], al; add al, ch; jge 0x89e7d; jmp qword ptr [rsi + 0xf]; 
0x0000000000469e6b: add byte ptr [rax], al; add al, ch; lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044a559: add byte ptr [rax], al; add al, ch; outsd dx, dword ptr [rsi]; jbe 0x4a55b; jmp qword ptr [rsi + 0x2e]; 
0x000000000047fb6a: add byte ptr [rax], al; add al, ch; pop rsi; and al, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000041ec86: add byte ptr [rax], al; add al, ch; ret 0x2d1; 
0x00000000004762ae: add byte ptr [rax], al; add al, ch; ret 0xf8a1; 
0x000000000045a226: add byte ptr [rax], al; add al, ch; ret 0xfc5e; 
0x00000000004103b5: add byte ptr [rax], al; add al, ch; ret; 
0x000000000044902a: add byte ptr [rax], al; add al, ch; sahf; mov edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000044e99c: add byte ptr [rax], al; add al, ch; sub al, 0x32; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000004ab901: add byte ptr [rax], al; add al, cl; add dword ptr [rax], eax; add byte ptr [rax + 0x61], ch; cmc; call qword ptr [rbx + 1]; 
0x00000000004afa29: add byte ptr [rax], al; add al, dh; add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x00000000004ab7cd: add byte ptr [rax], al; add al, dl; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004af73c: add byte ptr [rax], al; add al, dl; stc; jmp qword ptr [rdi + 6]; 
0x000000000044e92d: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045e43e: add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040eb4d: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040f4de: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000485b07: add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004409cd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004449bd: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044433d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004162bb: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004755e9: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000493fdd: add byte ptr [rax], al; add byte ptr [rax + 0x10], dl; stc; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x00000000004afdf1: add byte ptr [rax], al; add byte ptr [rax + 0x18000046], bh; cwde; stc; jmp qword ptr [rcx]; 
0x00000000004ada81: add byte ptr [rax], al; add byte ptr [rax + 0x23], cl; add byte ptr [rax], al; clc; mov ah, 0xf6; jmp qword ptr [rax]; 
0x000000000048852d: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; 
0x000000000048852d: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x00000000004b16d1: add byte ptr [rax], al; add byte ptr [rax + 0x2800005f], bl; nop; cli; call qword ptr [rdx]; 
0x0000000000465726: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000476b86: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000047a878: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000468438: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000048aeb1: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a96d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000413a6d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000048af46: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000041fb1f: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000447f1e: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000004af799: add byte ptr [rax], al; add byte ptr [rax + 0x40], ah; add byte ptr [rax], al; push rax; jae 0xaf79c; call qword ptr [rdi]; 
0x00000000004af9b1: add byte ptr [rax], al; add byte ptr [rax + 0x42], bh; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004af989: add byte ptr [rax], al; add byte ptr [rax + 0x42], dl; add byte ptr [rax], al; jo 0xaf915; stc; call qword ptr [rax]; 
0x00000000004b37f1: add byte ptr [rax], al; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000449b44: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004515ba: add byte ptr [rax], al; add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004b2ae9: add byte ptr [rax], al; add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004b1789: add byte ptr [rax], al; add byte ptr [rax + 0x60], dl; add byte ptr [rax], al; jo 0xb1727; cli; call qword ptr [rcx]; 
0x000000000046ea03: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000046ab54: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004753cd: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000004753cd: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004753bd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004753bd: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000004753dd: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000004753dd: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004b2579: add byte ptr [rax], al; add byte ptr [rax + 0x6e], al; add byte ptr [rax], al; mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x00000000004af9d9: add byte ptr [rax], al; add byte ptr [rax + 0x70000042], ah; test cl, bh; call qword ptr [rbx]; 
0x00000000004b01e9: add byte ptr [rax], al; add byte ptr [rax + 0x7000004a], dh; stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x00000000004b2ba1: add byte ptr [rax], al; add byte ptr [rax + 0x74], ch; add byte ptr [rax], al; sbb dh, dh; sti; jmp qword ptr [rbx]; 
0x00000000004affc1: add byte ptr [rax], al; add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x000000000044485d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004b31a9: add byte ptr [rax], al; add byte ptr [rax + 0x7a], dh; add byte ptr [rax], al; shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x000000000044a69d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044a69d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044be8f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044be8f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000044bf36: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000048d05d: add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000449382: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000040dc7d: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000044fd0d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000047469d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x746c0; add rax, 2; ret; 
0x000000000048444a: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000449a5d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; syscall; 
0x0000000000483656: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000482f89: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000484653: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000049e1e9: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004b3b3a: add byte ptr [rax], al; add byte ptr [rax + rax - 0x356f000], al; jmp qword ptr [rdx]; 
0x00000000004b489d: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rax], al; push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x00000000004b4a9d: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b454d: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x00000000004b37ed: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b2ae5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004affbd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x00000000004b56b5: add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x00000000004b5965: add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x00000000004b2b3a: add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x00000000004af71d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x00000000004b2b9d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b5c65: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x00000000004b3fd5: add byte ptr [rax], al; add byte ptr [rax + rcx*4 - 0x35ec0000], bl; cld; call rdx; 
0x00000000004b47ed: add byte ptr [rax], al; add byte ptr [rax + rdx*4 + 0x33c0000], dh; std; jmp qword ptr [rdx]; 
0x00000000004ac2e1: add byte ptr [rax], al; add byte ptr [rax - 0x17fffff5], ch; xor esi, esi; jmp qword ptr [rax]; 
0x00000000004af5e1: add byte ptr [rax], al; add byte ptr [rax - 0x27ffffc2], ch; fprem; call qword ptr [rax]; 
0x0000000000484536: add byte ptr [rax], al; add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x00000000004713e6: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000419038: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2a2cd2; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000417d11: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004105c1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000045cdad: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000044995d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000044a4f1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004746fd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004746dd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000047473d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004746ed: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047472d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ae5d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004589b7: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000045898e: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004582ee: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000004b00f1: add byte ptr [rax], al; add byte ptr [rax - 0x57ffffb7], bh; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b5499: add byte ptr [rax], al; add byte ptr [rax - 0x63], ah; add byte ptr [rax], al; push rax; js 0xb54a0; jmp qword ptr [rsi]; 
0x0000000000460756: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460705: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab4: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a66: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609b7: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046095b: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606bb: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046066d: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046020c: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b4da9: add byte ptr [rax], al; add byte ptr [rax - 0x6a], dh; add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x0000000000440228: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045740b: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004848dd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x237799; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x26ce69; ret; 
0x0000000000457429: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457447: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000046b0c9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x24bd4d; jmp rax; 
0x00000000004b4489: add byte ptr [rax], al; add byte ptr [rax - 0x73], dl; add byte ptr [rax], al; nop; loope 0xb448f; call qword ptr [rdx]; 
0x000000000041a10d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044254d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000457b0d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x264361; ret; 
0x000000000044f5bd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x26d371; ret; 
0x0000000000418f3d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2a01d9; ret; 
0x000000000040ea80: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0xeaa7; call rdx; 
0x00000000004717ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000042fd3d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff3d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434e9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000042f5ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000004b40a1: add byte ptr [rax], al; add byte ptr [rax - 0x77], ch; add byte ptr [rax], al; or ch, cl; cld; jmp qword ptr [rsi]; 
0x0000000000418fce: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2a2d40; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x0000000000419aab: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x29fd33; ret; 
0x0000000000419a8b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x29fd4b; ret; 
0x000000000047e42d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7dd60; add rsp, 0xd8; ret; 
0x000000000041108b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000414613: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c42a378; ret; 
0x0000000000413e5b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000418f6d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000488423: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x000000000048850a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000412db5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x0000000000412092: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000473c32: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x000000000048b35c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x000000000040189f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x18b6; syscall; 
0x000000000044c0fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x4c124; ret; 
0x0000000000413381: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000041e6dd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x0000000000423e6d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041199c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000411ae4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000045fa34: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041c1fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048de7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000469eb5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000040fc4b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000415116: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004109f1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048ca9d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x00000000004542a6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x000000000048a994: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000047352d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000046cbbb: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400408: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000486c36: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004b3ab1: add byte ptr [rax], al; add byte ptr [rax - 0x7d], bh; add byte ptr [rax], al; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x0000000000457298: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jl 0x572c3; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000471204: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; js 0x7123b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000044672d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000040f34d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004858bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000047db68: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042b713: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048de5d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000004724de: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043ea71: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b73d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040600d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042642d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000489420: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000434854: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004b3fc1: add byte ptr [rax], al; add byte ptr [rax - 0x7ffff78], cl; leave; cld; jmp qword ptr [rcx]; 
0x00000000004adac9: add byte ptr [rax], al; add byte ptr [rax - 0x7fffffdd], dl; mov ch, 0xf6; call qword ptr [rsi]; 
0x000000000048f8dd: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048df8d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004b56b9: add byte ptr [rax], al; add byte ptr [rax - 0xfffff61], al; jle 0xb56c0; call qword ptr [rdx + 1]; 
0x000000000045c90b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412548: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004b179d: add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rbp + rdx*4 - 6], bh; call qword ptr [rax]; 
0x000000000049749b: add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; sub edi, esp; call rax; 
0x00000000004af73a: add byte ptr [rax], al; add byte ptr [rax], al; add al, dl; stc; jmp qword ptr [rdi + 6]; 
0x000000000040eb4b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000418f2b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000413a6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004753cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000004753cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004753bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004753bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000004753db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000004753db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000044485b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000044a69b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000048d05b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x000000000044fd0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000048df7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000045cdab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000044995b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x00000000004746fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004746db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000047473b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004746eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047472b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ae5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004848db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x237799; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x26ce69; ret; 
0x000000000041a10b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044f5bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x26d371; ret; 
0x0000000000418f3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2a01d9; ret; 
0x00000000004717eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000418f6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000044c0fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x4c124; ret; 
0x0000000000423e6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041c1fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048de7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000048ca9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x000000000048a992: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000047352b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000044672b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000040f34b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000048de5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000040600b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042642b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000048f8db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048df8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x0000000000418eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000497499: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; sub edi, esp; call rax; 
0x00000000004a0072: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004a0562: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x0000000000417b56: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004af739: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ror byte ptr [rbp - 7], 1; jmp qword ptr [rdi + 6]; 
0x000000000044d49b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x26f46a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000044427b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000443dab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000043511b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000004198bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000048f61b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000041d7cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000044696b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000004739bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x000000000042677b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042508b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004134eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042b99b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b9bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000443d6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004425bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000041a66b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000485279: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x0000000000485279: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bdd9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000474c49: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474c49: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045b079: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000042301b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x000000000044a63b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004746bc: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000044f615: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000481a0f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000448274: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042b9ac: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b9bc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b9cc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b99c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eb4c: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000041a5dc: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004a209c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004a124c: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004481e7: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x000000000048cfcc: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x8cfbc; add rsp, 0x18; ret; 
0x000000000048df8c: add byte ptr [rax], al; add byte ptr [rax], al; cmp dil, 4; jne 0x8dfa5; mov eax, 8; ret; 
0x00000000004240ba: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f89a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048cfd4: add byte ptr [rax], al; add byte ptr [rax], al; je 0x8cfbc; add rsp, 0x18; ret; 
0x000000000048d0a5: add byte ptr [rax], al; add byte ptr [rax], al; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000045f86d: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000444e8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444eac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444ebc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ecc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444e1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444e2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444e3c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444e4c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444e5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444e6c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444e7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000440227: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000444dfc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004848dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26ce69]; ret; 
0x000000000046b0c8: add byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x0000000000400c90: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000443d6c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004425bc: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000443d7c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004425cc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000041322c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000044485c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044423c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000044425c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000044486c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044424c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000048852c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x00000000004753cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000004753cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004753bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004753bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000004753dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000004753dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044a69c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x0000000000418eec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000484449: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000449a5c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000484652: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000443dac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000044427c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004490dc: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000043511c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043583c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044be84: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000044c0fc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x00000000004713e5: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000480dc8: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480dc0: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000417e30: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000048d0fc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417e4c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000419037: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2a2cd2], 0; ret; 
0x000000000045acbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000045acdc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000044a61c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000047fc9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000418edc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045ae5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000004746dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000004746ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000004746fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047470c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047471c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047472c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000047473c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000481a1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000443cfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044254c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000004717ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d07c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d10c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d16c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d15c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d11c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000419afc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a228a], eax; ret; 
0x000000000041997c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29febd], rax; ret; 
0x0000000000457b0c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000044f5bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d371]; ret; 
0x0000000000418f3c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x000000000048ae4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x00000000004739bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000418f6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000004442bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000484e2f: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000042f3ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043567c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000423e6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000004449bc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044433c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000480ebc: add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x00000000004460fc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000042c32c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004134ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000044822c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000042632c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004352ac: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043598c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043522c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043591c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044a6f7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x00000000004753a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x000000000044a6c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044bda8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000048527a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000048527a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000044bdda: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474c4a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x0000000000474c4a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045b07a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000484535: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004136fc: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047fc82: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x23a55b], 1; pop rbx; ret; 
0x00000000004005ab: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000004198bc: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004120ac: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004a106c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1804: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004a0074: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004a0564: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x0000000000417b58: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004af73b: add byte ptr [rax], al; add byte ptr [rax], al; ror byte ptr [rbp - 7], 1; jmp qword ptr [rdi + 6]; 
0x00000000004a006c: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000400407: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x000000000047352c: add byte ptr [rax], al; add byte ptr [rax], al; test rsi, rsi; jne 0x73539; xor rax, rax; ret; 
0x00000000004409cc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000472ffc: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x0000000000417e6c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044998c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000047351c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000444c3c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004b1775: add byte ptr [rax], al; add byte ptr [rax], bh; add byte ptr [rax], al; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004b4451: add byte ptr [rax], al; add byte ptr [rax], bl; lea eax, [rax]; add byte ptr [rax - 0x1f], bl; cld; jmp qword ptr [rsi]; 
0x00000000004b4551: add byte ptr [rax], al; add byte ptr [rax], bl; mov es, word ptr [rax]; add byte ptr [rax - 0x17], cl; cld; jmp qword ptr [rcx]; 
0x00000000004af769: add byte ptr [rax], al; add byte ptr [rax], dh; add byte ptr [rax], al; jo 0xaf7c9; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004af9d5: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x70000042], ah; test cl, bh; call qword ptr [rbx]; 
0x00000000004adac5: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x7fffffdd], dl; mov ch, 0xf6; call qword ptr [rsi]; 
0x00000000004b1799: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rbp + rdx*4 - 6], bh; call qword ptr [rax]; 
0x00000000004b06f1: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdi + rcx*2 - 0x31fc0000], bh; stc; jmp qword ptr [rdx]; 
0x00000000004af999: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; add byte ptr [rbx + rax*4 - 7], ch; jmp rbx; 
0x00000000004b2d49: add byte ptr [rax], al; add byte ptr [rax], dl; jbe 0xb2d4f; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004b37ee: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b2ae6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004affbe: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x0000000000449674: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x0000000000484f9d: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x000000000047573b: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x00000000004488bc: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000481da2: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x0000000000481ce2: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000046c6d5: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000481f03: add byte ptr [rax], al; add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x000000000047533d: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000048420e: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044a78d: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000004498a4: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000475609: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000045aff4: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000416cc5: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449c34: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000044bc87: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044a5a3: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x0000000000488318: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000045adac: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000484eba: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000041a84d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000041002e: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000047568c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x000000000048d0a6: add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x00000000004b147d: add byte ptr [rax], al; add byte ptr [rbp + rbx*2], al; add byte ptr [rsp + rsi*2 - 6], cl; jmp rax; 
0x0000000000468430: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041f8b9: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000041eed7: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000047195c: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000471a56: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000044bd38: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000049e1e1: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000449378: add byte ptr [rax], al; add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000046e915: add byte ptr [rax], al; add byte ptr [rbp - 0x76ba7fec], cl; call 0x1ff1263; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000047fc83: add byte ptr [rax], al; add byte ptr [rbx + 0x23a55b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000044d49d: add byte ptr [rax], al; add byte ptr [rbx + 0x26f46a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000449c8d: add byte ptr [rax], al; add byte ptr [rbx + 0x272b7605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004751d7: add byte ptr [rax], al; add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000457c69: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x0000000000410691: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000044489d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044427d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000443dad: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000043015d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff5d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fd5d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043511d: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000414ac2: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000417a74: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000410569: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000459f9d: add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000048f3ed: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004357cd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043575d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004356ed: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000048d065: add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000457957: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004b427d: add byte ptr [rax], al; add byte ptr [rbx + rcx*4], al; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004aca85: add byte ptr [rax], al; add byte ptr [rbx + rdx], cl; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x0000000000484dfe: add byte ptr [rax], al; add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000046c84d: add byte ptr [rax], al; add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x0000000000484d8f: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x25a30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046585a: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004adab5: add byte ptr [rax], al; add byte ptr [rbx], bh; add byte ptr [rbp + rsi*4 - 0xa], dh; call qword ptr [rdi]; 
0x000000000041d7cd: add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000411dd4: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000419a6e: add byte ptr [rax], al; add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004103cf: add byte ptr [rax], al; add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x0000000000482580: add byte ptr [rax], al; add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x00000000004712ea: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000046035f: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000046c118: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000004481f5: add byte ptr [rax], al; add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x00000000004174ee: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000468e26: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000478c3a: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000040e1d3: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000044696d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000048d008: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004af8d5: add byte ptr [rax], al; add byte ptr [rcx + rax*2 + 0x7a740000], bl; stc; call rsp; 
0x0000000000491fad: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004143e8: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041300d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x00000000004148ac: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000040dc95: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; jne 0xdcbc; add rsp, 0x118; ret; 
0x000000000041b1ac: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474ac0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000004738fd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000417e31: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000046fe4a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004916bd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000047e98c: add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000045af20: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000004898b9: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000040489e: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000479c72: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x00000000004242f9: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x00000000004242b2: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042677d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042508d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041d7d5: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000048cfcd: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000041510f: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000042bb40: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042bb66: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004845f5: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000044be5d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000046b5e2: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040ed62: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000472cda: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000040dc73: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000448020: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fc0: add byte ptr [rax], al; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000048cdfb: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000462c93: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004b06f5: add byte ptr [rax], al; add byte ptr [rdi + rcx*2 - 0x31fc0000], bh; stc; jmp qword ptr [rdx]; 
0x00000000004b0ee5: add byte ptr [rax], al; add byte ptr [rdi + rdx*2 + 0x17540000], ch; cli; call rcx; 
0x00000000004b4dae: add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x000000000040dc54: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000480fa4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004348e4: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000448175: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000043591d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043598d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000044822d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x000000000042632d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004134ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042c32d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042b99d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b9cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b9bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000472d4d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x72d90; add rax, rdi; ret; 
0x000000000042b9ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000046c112: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x000000000040dc29: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc31: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc39: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000449b25: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x00000000004754f7: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000449792: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847d5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x00000000004766b0: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x0000000000443d6d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004425bd: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000048cfd5: add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000044be8a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000004af99d: add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; add byte ptr [rbx + rax*4 - 7], ch; jmp rbx; 
0x000000000044d4c1: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x26b5ec; pop rbx; ret; 
0x00000000004b019d: add byte ptr [rax], al; add byte ptr [rdx + rcx*2], ah; add ah, bl; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004b193a: add byte ptr [rax], al; add byte ptr [rdx], ah; add al, al; std; call rdx; 
0x00000000004ac13a: add byte ptr [rax], al; add byte ptr [rdx], cl; add byte ptr [rax], al; push rax; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004755e4: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x75618; mov eax, 0x101; syscall; 
0x000000000047b512: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000044be85: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000042c622: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041a66d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000472c42: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000004b3f2e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3ec6: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3efa: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004b45ed: add byte ptr [rax], al; add byte ptr [rsi + rcx*4 - 0x10440000], dh; cld; jmp qword ptr [rdx + 5]; 
0x000000000048527b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000048527b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bddb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000474c4b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474c4b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045b07b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004425cd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000041703e: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004abdba: add byte ptr [rax], al; add byte ptr [rsi], 0; add byte ptr [rax - 0x5d], al; cmc; jmp qword ptr [rax]; 
0x000000000045e678: add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000454d06: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x0000000000455553: add byte ptr [rax], al; add cl, ch; ret; 
0x000000000048a9de: add byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b3c46: add byte ptr [rax], al; add cl, cl; hlt; jmp qword ptr [rcx]; 
0x0000000000400c91: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000469936: add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000045e180: add byte ptr [rax], al; add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000045115c: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000042301d: add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x000000000044a63d: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004460c1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004845f6: add byte ptr [rax], al; add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000004746be: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000048d009: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x0000000000472af3: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000004737d0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000472e20: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000489a26: add byte ptr [rax], al; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000041fc98: add byte ptr [rax], al; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000412172: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048d010: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000044f695: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847dc: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000048aad3: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000004169eb: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449799: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x0000000000473ba1: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449b2c: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x00000000004015ec: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000046f314: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457c63: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000462915: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004108fb: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000485097: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000044b2ce: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040dcde: add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004241c6: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004b2d4e: add byte ptr [rax], al; and byte ptr [rbx], al; cld; jmp rdx; 
0x00000000004b095a: add byte ptr [rax], al; and byte ptr [rdx], dl; add bh, al; sti; hlt; jmp qword ptr [rbx]; 
0x00000000004b4d5a: add byte ptr [rax], al; and byte ptr [rsi + 0x2db00000], dl; std; jmp qword ptr [rax + 1]; 
0x0000000000448276: add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000004720fb: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424eab: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721cb: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a7b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047212b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000042d061: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042d933: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d066: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004ada82: add byte ptr [rax], al; and rax, qword ptr [rax]; add al, bh; mov ah, 0xf6; jmp qword ptr [rax]; 
0x000000000042b9ae: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b9be: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b9ce: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b99e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000472d4e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000440ab0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000474294: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x000000000042630e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004730c4: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x0000000000473152: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004b1022: add byte ptr [rax], al; call 0x180b1081; xor dl, bh; jmp qword ptr [rdi + 0x11]; 
0x000000000040eca6: add byte ptr [rax], al; call 0x1bd0; xor eax, eax; ret; 
0x00000000004015de: add byte ptr [rax], al; call 0x49ac0; cmp eax, -1; je 0x16bb; add rsp, 0x98; ret; 
0x0000000000468106: add byte ptr [rax], al; call 0x4be80; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047521b: add byte ptr [rax], al; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000045caeb: add byte ptr [rax], al; call 0x4be80; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000400bc2: add byte ptr [rax], al; call 0xff80; nop; leave; ret; 
0x00000000004b5b22: add byte ptr [rax], al; call 0xffffffff880b5bcc; cwde; std; call qword ptr [rdx]; 
0x00000000004ac222: add byte ptr [rax], al; call 0xffffffffb80ac233; sub al, 0xf6; call qword ptr [rax]; 
0x00000000004af722: add byte ptr [rax], al; call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x00000000004b0122: add byte ptr [rax], al; call 0xffffffffd80b0172; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x0000000000471221: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x00000000004010fc: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x000000000040eb4e: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000040ea5b: add byte ptr [rax], al; call rax; 
0x00000000004a209e: add byte ptr [rax], al; call rdi; 
0x000000000040e995: add byte ptr [rax], al; call rdx; 
0x00000000004a124e: add byte ptr [rax], al; call rsp; 
0x0000000000460757: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460706: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab5: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a67: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609b8: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046095c: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606bc: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046066e: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046020d: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b2132: add byte ptr [rax], al; clc; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004482f4: add byte ptr [rax], al; clc; jg 0x482f0; int1; mov eax, eax; ret; 
0x00000000004b3fc6: add byte ptr [rax], al; clc; leave; cld; jmp qword ptr [rcx]; 
0x00000000004ada86: add byte ptr [rax], al; clc; mov ah, 0xf6; jmp qword ptr [rax]; 
0x00000000004abc06: add byte ptr [rax], al; clc; xchg eax, esp; cmc; call qword ptr [rdx]; 
0x00000000004b0d22: add byte ptr [rax], al; cld; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004b37f6: add byte ptr [rax], al; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000488588: add byte ptr [rax], al; cmove edx, eax; call 0x78bd0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000448221: add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x00000000004481e9: add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x0000000000424ebc: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000485063: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000004b489e: add byte ptr [rax], al; cmp al, 0; add byte ptr [rax], al; push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x00000000004b1776: add byte ptr [rax], al; cmp al, 0x60; add byte ptr [rax], al; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004b47f2: add byte ptr [rax], al; cmp al, 3; std; jmp qword ptr [rdx]; 
0x000000000048cfce: add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x8cfbc; add rsp, 0x18; ret; 
0x00000000004b4f72: add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004b3b72: add byte ptr [rax], al; cmp byte ptr [rax + rax - 0x355d800], al; jmp qword ptr [rsi]; 
0x00000000004b3c72: add byte ptr [rax], al; cmp byte ptr [rbp - 0x49780000], al; cld; jmp qword ptr [rdx]; 
0x000000000047f2fe: add byte ptr [rax], al; cmp byte ptr [rip + 0x23d4c1], 0; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x000000000048df8e: add byte ptr [rax], al; cmp dil, 4; jne 0x8dfa5; mov eax, 8; ret; 
0x0000000000416fa6: add byte ptr [rax], al; cmp eax, -1; je 0x16f28; mov eax, 0xffffffff; ret; 
0x0000000000417196: add byte ptr [rax], al; cmp eax, -1; je 0x17118; mov eax, 0xffffffff; ret; 
0x0000000000446578: add byte ptr [rax], al; cmp eax, ecx; jne 0x46635; xor eax, eax; ret; 
0x000000000044be5e: add byte ptr [rax], al; cmp eax, edx; jne 0x4be6c; nop; mov eax, 0xca; syscall; 
0x00000000004240bc: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f89c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000447d2c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x47d3f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447cdc: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x47d48; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447f1f: add byte ptr [rax], al; cmp rdx, rcx; jne 0x47f07; vzeroupper; ret; 
0x00000000004480e2: add byte ptr [rax], al; cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x00000000004b2f36: add byte ptr [rax], al; cwde; adc bh, ah; jmp qword ptr [rax]; 
0x00000000004b5d06: add byte ptr [rax], al; cwde; lahf; std; jmp qword ptr [rax]; 
0x00000000004af596: add byte ptr [rax], al; cwde; xchg eax, esi; clc; call qword ptr [rax]; 
0x00000000004b49e6: add byte ptr [rax], al; fadd dword ptr [rsi]; std; call qword ptr [rdi]; 
0x00000000004af5e6: add byte ptr [rax], al; fcomp st(1); clc; call qword ptr [rax]; 
0x00000000004af366: add byte ptr [rax], al; fsubr dword ptr [rdi - 9]; jmp qword ptr [rbx + 2]; 
0x00000000004afb2a: add byte ptr [rax], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004ae82e: add byte ptr [rax], al; hlt; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004acd1e: add byte ptr [rax], al; in al, 0x15; add byte ptr [rax], al; in al, dx; jno 0xacd1d; call qword ptr [rax]; 
0x00000000004b0d1e: add byte ptr [rax], al; in al, 0x55; add byte ptr [rax], al; cld; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004b3b1e: add byte ptr [rax], al; in al, 0x83; add byte ptr [rax], al; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004afb26: add byte ptr [rax], al; in al, dx; add byte ptr [r8], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004acd22: add byte ptr [rax], al; in al, dx; jno 0xacd1d; call qword ptr [rax]; 
0x0000000000448021: add byte ptr [rax], al; ja 0x48037; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fc1: add byte ptr [rax], al; ja 0x48040; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000449314: add byte ptr [rax], al; ja 0x495d0; lea rdx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004359c3: add byte ptr [rax], al; jae 0x35a60; lea r11, [rip + 0x5f10e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044d4c2: add byte ptr [rax], al; je 0x4d4d0; mov dword ptr [rip + 0x26b5ec], edx; pop rbx; ret; 
0x000000000048cfd6: add byte ptr [rax], al; je 0x8cfbc; add rsp, 0x18; ret; 
0x000000000048d0a7: add byte ptr [rax], al; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004af8da: add byte ptr [rax], al; je 0xaf958; stc; call rsp; 
0x00000000004b1482: add byte ptr [rax], al; je 0xb1481; jmp rax; 
0x00000000004b4eda: add byte ptr [rax], al; je 0xb4f12; std; jmp qword ptr [rdx]; 
0x00000000004af4b6: add byte ptr [rax], al; jl 0xaf4f7; add byte ptr [rax], al; test byte ptr [rsi], cl; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004b17a2: add byte ptr [rax], al; jl 0xb173b; cli; call qword ptr [rax]; 
0x00000000004b3b22: add byte ptr [rax], al; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004b4b92: add byte ptr [rax], al; jl 0xb4ba5; std; call qword ptr [rax]; 
0x000000000044a77b: add byte ptr [rax], al; jmp rax; 
0x000000000041002f: add byte ptr [rax], al; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100e0: add byte ptr [rax], al; jne 0x100ec; add rsp, 0xd8; ret; 
0x000000000041216c: add byte ptr [rax], al; jne 0x1221d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004169e5: add byte ptr [rax], al; jne 0x16aa6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000416cc6: add byte ptr [rax], al; jne 0x16d14; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000417ee7: add byte ptr [rax], al; jne 0x18196; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000041a84e: add byte ptr [rax], al; jne 0x1a858; add rsp, 0x20; pop rbx; ret; 
0x000000000042c122: add byte ptr [rax], al; jne 0x2c030; ret; 
0x00000000004488bd: add byte ptr [rax], al; jne 0x488e4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449379: add byte ptr [rax], al; jne 0x49310; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000449675: add byte ptr [rax], al; jne 0x49689; add rsp, 0x28; ret; 
0x0000000000449793: add byte ptr [rax], al; jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a5: add byte ptr [rax], al; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b26: add byte ptr [rax], al; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c35: add byte ptr [rax], al; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000044a5a4: add byte ptr [rax], al; jne 0x4a5b7; add rsp, 0x28; ret; 
0x000000000044bc88: add byte ptr [rax], al; jne 0x4bc96; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bd18: add byte ptr [rax], al; jne 0x4bd26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bebd: add byte ptr [rax], al; jne 0x4bea8; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x0000000000457c5d: add byte ptr [rax], al; jne 0x57d1f; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000045adad: add byte ptr [rax], al; jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000045aff5: add byte ptr [rax], al; jne 0x5b043; add rsp, 0x148; ret; 
0x0000000000468200: add byte ptr [rax], al; jne 0x6820c; add rsp, 0xd8; ret; 
0x000000000047533e: add byte ptr [rax], al; jne 0x7537a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000004754f8: add byte ptr [rax], al; jne 0x755b9; add rsp, 0x78; ret; 
0x000000000047560a: add byte ptr [rax], al; jne 0x75653; add rsp, 0x58; ret; 
0x000000000047568d: add byte ptr [rax], al; jne 0x75699; movzx eax, al; add rsp, 0x58; ret; 
0x000000000047573c: add byte ptr [rax], al; jne 0x7575b; add rsp, 0x38; ret; 
0x000000000047f305: add byte ptr [rax], al; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000481be8: add byte ptr [rax], al; jne 0x81bf2; add rsp, 0x20; pop rbx; ret; 
0x0000000000481ce3: add byte ptr [rax], al; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481da3: add byte ptr [rax], al; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481f04: add byte ptr [rax], al; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821d3: add byte ptr [rax], al; jne 0x821fe; add rsp, 0x68; ret; 
0x000000000048420f: add byte ptr [rax], al; jne 0x8424e; leave; ret; 
0x00000000004847d6: add byte ptr [rax], al; jne 0x84894; add rsp, 0x30; pop rbx; ret; 
0x0000000000484997: add byte ptr [rax], al; jne 0x84b25; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000484db0: add byte ptr [rax], al; jne 0x84e58; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484ebb: add byte ptr [rax], al; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f9e: add byte ptr [rax], al; jne 0x84fb4; add rsp, 0x38; ret; 
0x0000000000487789: add byte ptr [rax], al; jne 0x8778f; pop rbx; ret; 
0x0000000000488319: add byte ptr [rax], al; jne 0x8832c; add rsp, 0x38; ret; 
0x000000000048cfb7: add byte ptr [rax], al; jne 0x8cfd0; cmp qword ptr [r9 + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x00000000004af76e: add byte ptr [rax], al; jo 0xaf7c9; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004af98e: add byte ptr [rax], al; jo 0xaf915; stc; call qword ptr [rax]; 
0x00000000004af9de: add byte ptr [rax], al; jo 0xaf966; stc; call qword ptr [rbx]; 
0x00000000004b01ee: add byte ptr [rax], al; jo 0xb019c; stc; call qword ptr [rdi]; 
0x00000000004b120e: add byte ptr [rax], al; jo 0xb126b; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004b178e: add byte ptr [rax], al; jo 0xb1727; cli; call qword ptr [rcx]; 
0x00000000004b31aa: add byte ptr [rax], al; jo 0xb3228; add byte ptr [rax], al; shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x00000000004b4daa: add byte ptr [rax], al; jo 0xb4d44; add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x00000000004af9b2: add byte ptr [rax], al; js 0xaf9f8; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004affc6: add byte ptr [rax], al; js 0xaff67; stc; call qword ptr [rbx]; 
0x00000000004b3ab2: add byte ptr [rax], al; js 0xb3a39; add byte ptr [rax], al; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x00000000004359c9: add byte ptr [rax], al; lea r11, [rip + 0x5f10e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048f8f5: add byte ptr [rax], al; lea r8, [rip + 0x1bdda]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000047195d: add byte ptr [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000471a57: add byte ptr [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047b5ba: add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000444e8e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e9e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444eae: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444ebe: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ece: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444ded: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000444e0e: add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444e1e: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444e2e: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444e3e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444e4e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444e5e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444d9a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x0000000000444e6e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444e7e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000440229: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000444dfe: add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x0000000000472105: add byte ptr [rax], al; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee5: add byte ptr [rax], al; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241f5: add byte ptr [rax], al; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x00000000004848de: add byte ptr [rax], al; lea rax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48e: add byte ptr [rax], al; lea rax, [rip + 0x26ce69]; ret; 
0x000000000048505c: add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424eb5: add byte ptr [rax], al; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d5: add byte ptr [rax], al; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a85: add byte ptr [rax], al; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472135: add byte ptr [rax], al; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000042a95d: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000047c084: add byte ptr [rax], al; lea rcx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046e3cd: add byte ptr [rax], al; lea rcx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047c9ac: add byte ptr [rax], al; lea rdi, [rip + 0x28403]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000040d315: add byte ptr [rax], al; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000418bfe: add byte ptr [rax], al; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046eb82: add byte ptr [rax], al; lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044931a: add byte ptr [rax], al; lea rdx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000423b1b: add byte ptr [rax], al; lea rdx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473af1: add byte ptr [rax], al; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x000000000046b0ca: add byte ptr [rax], al; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000044819e: add byte ptr [rax], al; lea rsi, [rip + 0x4d0d9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000400c92: add byte ptr [rax], al; leave; ret; 
0x00000000004afa2a: add byte ptr [rax], al; lock add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x00000000004ac212: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; sub al, 0xf6; call qword ptr [rdx]; 
0x00000000004b47ee: add byte ptr [rax], al; mov ah, 0x90; add byte ptr [rax], al; cmp al, 3; std; jmp qword ptr [rdx]; 
0x00000000004b4d5e: add byte ptr [rax], al; mov al, 0x2d; std; jmp qword ptr [rax + 1]; 
0x00000000004b01ea: add byte ptr [rax], al; mov al, 0x4a; add byte ptr [rax], al; jo 0xb019c; stc; call qword ptr [rdi]; 
0x00000000004afa2e: add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x00000000004af5be: add byte ptr [rax], al; mov al, 0xb8; clc; call qword ptr [rax]; 
0x00000000004b257e: add byte ptr [rax], al; mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x00000000004b2b3e: add byte ptr [rax], al; mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x0000000000443d6e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004425be: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000443d7e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004425ce: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004b3fc2: add byte ptr [rax], al; mov byte ptr [rax - 0x36080000], cl; cld; jmp qword ptr [rcx]; 
0x00000000004affc2: add byte ptr [rax], al; mov byte ptr [rax], cl; add byte ptr [rax - 0x63], bh; stc; call qword ptr [rbx]; 
0x000000000045f851: add byte ptr [rax], al; mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000041322e: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000044485e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044423e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000047469e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x746c0; add rax, 2; ret; 
0x000000000044487e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044425e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000046c4f0: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046c66d: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046bffa: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000414ec0: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004712eb: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419a6f: add byte ptr [rax], al; mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x0000000000419aec: add byte ptr [rax], al; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x00000000004358ae: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044486e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044424e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000400c8d: add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x000000000042408e: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004afdf2: add byte ptr [rax], al; mov eax, 0x18000046; cwde; stc; jmp qword ptr [rcx]; 
0x000000000044a6fe: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x000000000044a6fe: add byte ptr [rax], al; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x000000000048852e: add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x000000000048852e: add byte ptr [rax], al; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x00000000004b37f2: add byte ptr [rax], al; mov eax, 0x48000080; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000449b45: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x00000000004753ae: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000004753ae: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000004753ce: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000004753ce: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004753be: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004753be: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000004753de: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000004753de: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000004b00f2: add byte ptr [rax], al; mov eax, 0xa8000049; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x000000000044a6ce: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x000000000044a6ce: add byte ptr [rax], al; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a69e: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000044a69e: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044be90: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000044be90: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000044bf37: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000449383: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000040dc7e: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000045c90c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412549: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046f585: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048444b: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000449a5e: add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000484654: add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000484d90: add byte ptr [rax], al; mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x25a30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000443dae: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000418c0e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bd2e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x270b8a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449c8e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x272b76]; test eax, eax; jne 0x49cb0; mov eax, 3; syscall; 
0x00000000004498ee: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x272f16]; test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x0000000000449cd8: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000482581: add byte ptr [rax], al; mov eax, ebx; jne 0x825a5; add rsp, 0x110; pop rbx; ret; 
0x00000000004481f6: add byte ptr [rax], al; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000040dc49: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000047e5ff: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000468112: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x00000000004658b1: add byte ptr [rax], al; mov eax, edx; ret; 
0x00000000004103d0: add byte ptr [rax], al; mov eax, esi; jne 0x103df; add rsp, 0xd0; pop rbx; ret; 
0x000000000040dc96: add byte ptr [rax], al; mov eax, r8d; jne 0xdcbc; add rsp, 0x118; ret; 
0x000000000049f242: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000049ef92: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000044489e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044427e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000044428e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000048cdfc: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000449b7f: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000449cba: add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000004490de: add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000046ff86: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004012fd: add byte ptr [rax], al; mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000044be8b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004357ce: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043575e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004356ee: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043511e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd5e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff5e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043015e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043583e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004497f0: add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044bf46: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047b513: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044be86: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000047132a: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000414770: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041703f: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004a2c36: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000044c0fe: add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x00000000004713e7: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000484e38: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000480dca: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000481b60: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488392: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000488466: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000416e8e: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000480dc2: add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044f610: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417e32: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000047b5c4: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048d0fe: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417e4e: add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417e39: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000484468: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000413382: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000047f2ce: add byte ptr [rax], al; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x0000000000419aac: add byte ptr [rax], al; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a8c: add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419039: add byte ptr [rax], al; mov qword ptr [rip + 0x2a2cd2], 0; ret; 
0x0000000000418fcf: add byte ptr [rax], al; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x00000000004018a0: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004787de: add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000047e42e: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7dd60; add rsp, 0xd8; ret; 
0x000000000041108c: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048a8ae: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041b03e: add byte ptr [rax], al; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045ad5e: add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045af21: add byte ptr [rax], al; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000047c586: add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f3ce: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000046b0b2: add byte ptr [rax], al; mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x00000000004697c5: add byte ptr [rax], al; mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046bcab: add byte ptr [rax], al; mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004b427e: add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x000000000045acbe: add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000045acde: add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acfe: add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004496c6: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a61e: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000004757a6: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046589e: add byte ptr [rax], al; mov rax, -0x40; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000047fc9e: add byte ptr [rax], al; mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045ac9e: add byte ptr [rax], al; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041819e: add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045ae5e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000004746de: add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000004746ee: add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000004746fe: add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047470e: add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047471e: add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047472e: add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000047473e: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000047cb93: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000041209e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000481a1e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000481a2e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000047d1f2: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c3ae: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c26b: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000484dc6: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000443cfe: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044254e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000004198de: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004717ee: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f5e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d07e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d10e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d16e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d15e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d11e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000419a9e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd66], 1; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a7e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419afe: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a228a], eax; ret; 
0x000000000041997e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29febd], rax; ret; 
0x000000000047f36e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x239d79]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x0000000000457b0e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000044f5be: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d371]; ret; 
0x0000000000418f3e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x000000000048ae4e: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000048abb3: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8b7: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041b1ad: add byte ptr [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474ac1: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004738fe: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000414614: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d278: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000488424: add byte ptr [rax], al; mov rax, rbx; jne 0x8843c; add rsp, 0x40; pop rbx; ret; 
0x000000000048850b: add byte ptr [rax], al; mov rax, rbx; jne 0x88524; add rsp, 0x50; pop rbx; ret; 
0x0000000000414f92: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000418f6e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000041e61e: add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000047f9fa: add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000042f78e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f96e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb4e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd3e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff3e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043013e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f5ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004448ee: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442be: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004442ce: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044703f: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040ea81: add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000491fae: add byte ptr [rax], al; mov rdi, r13; call rax; 
0x00000000004600ec: add byte ptr [rax], al; mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004916be: add byte ptr [rax], al; mov rdi, r15; call rax; 
0x000000000041199d: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000046e84f: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000458424: add byte ptr [rax], al; mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x4d500; mov rdi, r14; call rbx; 
0x0000000000412093: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000449d26: add byte ptr [rax], al; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000044995e: add byte ptr [rax], al; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000484db6: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484e31: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000043560e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043559e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043552e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043544e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353de: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043536e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434e1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434bfe: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f3ee: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434e9e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043567e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045ddb1: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000469afe: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000045d80b: add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004148ad: add byte ptr [rax], al; mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000041300e: add byte ptr [rax], al; mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045df86: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045d656: add byte ptr [rax], al; mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000044a8db: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047f205: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x23d1a2]; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x0000000000420bae: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000004916b6: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x00000000004143e9: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046fe4b: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000423e6e: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000412db6: add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045af19: add byte ptr [rax], al; mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000044976f: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000040dc2a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc32: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc3a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000044436e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004443ee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004443ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004443ce: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004444ee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044448e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004444ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444ce: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004449be: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044433e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004adade: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; and eax, dword ptr [rax]; add ah, cl; mov ch, 0xf6; call qword ptr [rdi + 1]; 
0x0000000000480ebe: add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000048af05: add byte ptr [rax], al; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000046ea04: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045a49d: add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000459f9e: add byte ptr [rax], al; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000446f75: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000048bf53: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000415dee: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000046bcb1: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004460fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000044615e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044614e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044613e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044612e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044611e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044610e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004464b8: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x46635; xor eax, eax; ret; 
0x000000000042d1ce: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf81: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042c0ae: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000416ffe: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134ee: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000044822e: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000450c7e: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000042632e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000046c26f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c21c: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcef: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c08e: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c049: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c004: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfb5: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004352ae: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043598e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043522e: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043591e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004174ef: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000044a6f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x00000000004753a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x000000000044a6c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000047cbe1: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000044bdaa: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004198fa: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29fef5], rax; ret; 
0x0000000000401302: add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000435114: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000045ae54: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004352a4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435224: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000400bc7: add byte ptr [rax], al; nop; leave; ret; 
0x00000000004b448e: add byte ptr [rax], al; nop; loope 0xb448f; call qword ptr [rdx]; 
0x000000000048527c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000048527c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000044bddc: add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474c4c: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x0000000000474c4c: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045b07c: add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004ab7ae: add byte ptr [rax], al; nop; push rsp; cmc; call qword ptr [rsi]; 
0x00000000004abe12: add byte ptr [rax], al; or al, 0xa6; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004b3c42: add byte ptr [rax], al; or byte ptr [rbp - 0x36fe0000], al; hlt; jmp qword ptr [rcx]; 
0x0000000000484537: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000047ba8e: add byte ptr [rax], al; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000004b4e36: add byte ptr [rax], al; or byte ptr [rdx], dh; std; call qword ptr [rbx]; 
0x00000000004b40a6: add byte ptr [rax], al; or ch, cl; cld; jmp qword ptr [rsi]; 
0x00000000004136fe: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047fc84: add byte ptr [rax], al; or dword ptr [rip + 0x23a55b], 1; pop rbx; ret; 
0x00000000004b257a: add byte ptr [rax], al; outsb dx, byte ptr [rsi]; add byte ptr [rax], al; mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x0000000000472c69: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004b4456: add byte ptr [rax], al; pop rax; loope 0xb4457; jmp qword ptr [rsi]; 
0x00000000004b4a36: add byte ptr [rax], al; pop rax; or ch, bh; call qword ptr [rax]; 
0x00000000004005ad: add byte ptr [rax], al; pop rax; ret; 
0x00000000004b1766: add byte ptr [rax], al; pop rax; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004b147e: add byte ptr [rax], al; pop rbp; add byte ptr [rax], al; je 0xb1481; jmp rax; 
0x000000000044a78e: add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000400ab6: add byte ptr [rax], al; pop rbp; ret; 
0x000000000046585b: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000457c6a: add byte ptr [rax], al; pop rbx; pop r12; ret; 
0x0000000000414ac3: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000417a75: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000041056a: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000400e66: add byte ptr [rax], al; pop rbx; ret; 
0x00000000004af622: add byte ptr [rax], al; pop rsp; cmc; clc; call qword ptr [rsi + 0x16]; 
0x00000000004acdc2: add byte ptr [rax], al; pop rsp; jne 0xacdbd; call qword ptr [rdi + 2]; 
0x00000000004b4aa2: add byte ptr [rax], al; push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b48a2: add byte ptr [rax], al; push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x00000000004b2ba2: add byte ptr [rax], al; push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004abca2: add byte ptr [rax], al; push 0x28000005; wait; cmc; call rax; 
0x00000000004b40a2: add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x0000000000493fde: add byte ptr [rax], al; push rax; adc cl, bh; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x00000000004b147a: add byte ptr [rax], al; push rax; add byte ptr [rax], al; add byte ptr [rbp + rbx*2], al; add byte ptr [rsp + rsi*2 - 6], cl; jmp rax; 
0x00000000004af98a: add byte ptr [rax], al; push rax; add byte ptr [rax], al; jo 0xaf915; stc; call qword ptr [rax]; 
0x00000000004af79e: add byte ptr [rax], al; push rax; jae 0xaf79c; call qword ptr [rdi]; 
0x00000000004b549e: add byte ptr [rax], al; push rax; js 0xb54a0; jmp qword ptr [rsi]; 
0x00000000004515bb: add byte ptr [rax], al; push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004b2d1e: add byte ptr [rax], al; push rax; std; sti; jmp qword ptr [rbx]; 
0x00000000004ac13e: add byte ptr [rax], al; push rax; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004b174e: add byte ptr [rax], al; push rax; xchg eax, ebp; cli; call qword ptr [rdi]; 
0x00000000004af8d6: add byte ptr [rax], al; pushfq; add byte ptr [r8], al; je 0xaf958; stc; call rsp; 
0x00000000004b3fd6: add byte ptr [rax], al; pushfq; mov byte ptr [rax], al; add byte ptr [rdx + rcx*8], dl; cld; call rdx; 
0x00000000004b5c6f: add byte ptr [rax], al; pushfq; std; jmp qword ptr [rcx]; 
0x00000000004b120a: add byte ptr [rax], al; rcr byte ptr [rdx], 1; add byte ptr [rax + 0x59], dh; cli; jmp qword ptr [rsi + 0xa]; 
0x0000000000498426: add byte ptr [rax], al; ret 0; 
0x000000000049f39e: add byte ptr [rax], al; ret 0x10; 
0x00000000004a106e: add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1806: add byte ptr [rax], al; ret 0x1d5; 
0x00000000004a0076: add byte ptr [rax], al; ret 0x24; 
0x00000000004a0566: add byte ptr [rax], al; ret 0x33; 
0x000000000049eb9e: add byte ptr [rax], al; ret 0xa; 
0x000000000049ef9e: add byte ptr [rax], al; ret 0xd; 
0x00000000004a2442: add byte ptr [rax], al; ret 1; 
0x00000000004a2642: add byte ptr [rax], al; ret 2; 
0x00000000004a2842: add byte ptr [rax], al; ret 3; 
0x00000000004a2a42: add byte ptr [rax], al; ret 4; 
0x00000000004a2c42: add byte ptr [rax], al; ret 5; 
0x000000000049e746: add byte ptr [rax], al; ret 6; 
0x00000000004a3042: add byte ptr [rax], al; ret 7; 
0x00000000004a3242: add byte ptr [rax], al; ret 8; 
0x00000000004a3442: add byte ptr [rax], al; ret 9; 
0x00000000004015f3: add byte ptr [rax], al; ret; 
0x00000000004a2a3e: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000049ee46: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000004af73e: add byte ptr [rax], al; ror byte ptr [rbp - 7], 1; jmp qword ptr [rdi + 6]; 
0x00000000004b050a: add byte ptr [rax], al; ror byte ptr [rbp], 1; add byte ptr [rax - 0x46], ah; stc; call qword ptr [rdx]; 
0x00000000004b010a: add byte ptr [rax], al; ror byte ptr [rcx], 1; add al, al; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b193e: add byte ptr [rax], al; sal bl, 0xfd; call rdx; 
0x00000000004b472e: add byte ptr [rax], al; sar ah, 1; cld; call qword ptr [rax]; 
0x000000000048d0e5: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004735c4: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004b409e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x00000000004b1402: add byte ptr [rax], al; sbb al, 0x74; cli; call qword ptr [rdx]; 
0x00000000004b3b36: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax - 0x356f000], al; jmp qword ptr [rdx]; 
0x00000000004b1026: add byte ptr [rax], al; sbb byte ptr [rax], dh; cli; jmp qword ptr [rdi + 0x11]; 
0x00000000004b4452: add byte ptr [rax], al; sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x00000000004b56ba: add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x00000000004b4552: add byte ptr [rax], al; sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x00000000004b0b66: add byte ptr [rax], al; sbb cl, bh; std; jmp qword ptr [rdx]; 
0x00000000004b2866: add byte ptr [rax], al; sbb dh, ch; sti; jmp qword ptr [rdx]; 
0x00000000004b2ba6: add byte ptr [rax], al; sbb dh, dh; sti; jmp qword ptr [rbx]; 
0x00000000004b31ae: add byte ptr [rax], al; shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x00000000004a006e: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000041f5cc: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004b4a9e: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b454e: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x00000000004b0b62: add byte ptr [rax], al; sub byte ptr [rax + rax], dl; sbb cl, bh; std; jmp qword ptr [rdx]; 
0x00000000004b1762: add byte ptr [rax], al; sub byte ptr [rax], ah; add byte ptr [rax - 0x6b], bl; cli; call qword ptr [rcx]; 
0x00000000004b2862: add byte ptr [rax], al; sub byte ptr [rcx], dh; add byte ptr [rax], bl; out dx, al; sti; jmp qword ptr [rdx]; 
0x000000000042d06c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004140e8: add byte ptr [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004182e6: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471546: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000446b81: add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000047165e: add byte ptr [rax], al; sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000048a6c0: add byte ptr [rax], al; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000040dc42: add byte ptr [rax], al; syscall; 
0x0000000000449613: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044a6a3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044a6d3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a703: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x000000000044bdb6: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044bde3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x0000000000475383: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x75390; ret; 
0x0000000000488533: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x000000000044be95: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x0000000000474c53: add byte ptr [rax], al; syscall; ret; 
0x0000000000444de4: add byte ptr [rax], al; test ah, 0x40; jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x00000000004af5e2: add byte ptr [rax], al; test al, 0x3e; add byte ptr [rax], al; fcomp st(1); clc; call qword ptr [rax]; 
0x0000000000444d92: add byte ptr [rax], al; test al, 0x40; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x00000000004b49e2: add byte ptr [rax], al; test al, 0x92; add byte ptr [rax], al; fadd dword ptr [rsi]; std; call qword ptr [rdi]; 
0x00000000004b3ab6: add byte ptr [rax], al; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b00f6: add byte ptr [rax], al; test al, 0xa5; stc; jmp qword ptr [rcx]; 
0x00000000004236ee: add byte ptr [rax], al; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000004af4ba: add byte ptr [rax], al; test byte ptr [rsi], cl; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004acdbe: add byte ptr [rax], al; test byte ptr [rsi], dl; add byte ptr [rax], al; pop rsp; jne 0xacdbd; call qword ptr [rdi + 2]; 
0x00000000004af9b6: add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x0000000000444d05: add byte ptr [rax], al; test dh, 0x40; jne 0x44c40; lea rax, [rdi + 0xf]; ret; 
0x0000000000444d4b: add byte ptr [rax], al; test dh, 4; jne 0x44c40; lea rax, [rdi + 0xb]; ret; 
0x00000000004b438a: add byte ptr [rax], al; test dh, bl; cld; call qword ptr [rdi + 1]; 
0x0000000000444c82: add byte ptr [rax], al; test dl, 0x40; jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x0000000000444cb0: add byte ptr [rax], al; test dl, 4; jne 0x44c40; lea rax, [rdi + 3]; ret; 
0x000000000044bd39: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x000000000048d13e: add byte ptr [rax], al; test rax, rax; je 0x8d150; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000400aa4: add byte ptr [rax], al; test rax, rax; je 0xab8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ae6: add byte ptr [rax], al; test rax, rax; je 0xaf8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x000000000048fff9: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x22bceb], rbx; jne 0x8ffe8; pop rbx; ret; 
0x0000000000486c37: add byte ptr [rax], al; test rdx, rdx; je 0x86c48; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047352e: add byte ptr [rax], al; test rsi, rsi; jne 0x73539; xor rax, rax; ret; 
0x000000000042bace: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440cce: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004409ce: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000472ffe: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004b177a: add byte ptr [rax], al; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004af5aa: add byte ptr [rax], al; xchg eax, esp; xchg eax, esi; clc; jmp qword ptr [rsi]; 
0x00000000004b56b6: add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x00000000004b5966: add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x00000000004af76a: add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax + 0x57], dh; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004b5c6a: add byte ptr [rax], al; xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x00000000004b596a: add byte ptr [rax], al; xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x000000000045caf7: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000475b5e: add byte ptr [rax], al; xor eax, eax; leave; ret; 
0x000000000040ed63: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d285: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040f3d6: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044998e: add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000042bfe9: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000046b5e3: add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044a654: add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000044a46a: add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000040dc74: add byte ptr [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040dcd7: add byte ptr [rax], al; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x000000000044bf3c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000046c6d6: add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000444c3e: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004b1777: add byte ptr [rax], bh; add byte ptr [rax], al; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x0000000000400c8e: add byte ptr [rax], bh; leave; ret; 
0x00000000004b3b73: add byte ptr [rax], bh; test byte ptr [rax], al; add byte ptr [rax], ch; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x00000000004afdf7: add byte ptr [rax], bl; cwde; stc; jmp qword ptr [rcx]; 
0x00000000004b2ba7: add byte ptr [rax], bl; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b2b53: add byte ptr [rax], bl; je 0xb2b57; add al, cl; cmc; sti; jmp qword ptr [rbx]; 
0x00000000004b4453: add byte ptr [rax], bl; lea eax, [rax]; add byte ptr [rax - 0x1f], bl; cld; jmp qword ptr [rsi]; 
0x00000000004b3bd7: add byte ptr [rax], bl; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004b4553: add byte ptr [rax], bl; mov es, word ptr [rax]; add byte ptr [rax - 0x17], cl; cld; jmp qword ptr [rcx]; 
0x00000000004b2867: add byte ptr [rax], bl; out dx, al; sti; jmp qword ptr [rdx]; 
0x00000000004b0b67: add byte ptr [rax], bl; stc; std; jmp qword ptr [rdx]; 
0x00000000004b1027: add byte ptr [rax], bl; xor dl, bh; jmp qword ptr [rdi + 0x11]; 
0x00000000004b2863: add byte ptr [rax], ch; jno 0xb2867; add byte ptr [rax], bl; out dx, al; sti; jmp qword ptr [rdx]; 
0x00000000004b16d7: add byte ptr [rax], ch; nop; cli; call qword ptr [rdx]; 
0x00000000004b0b63: add byte ptr [rax], ch; push rsp; add byte ptr [rax], al; sbb cl, bh; std; jmp qword ptr [rdx]; 
0x00000000004b3b77: add byte ptr [rax], ch; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x00000000004abca7: add byte ptr [rax], ch; wait; cmc; call rax; 
0x0000000000421785: add byte ptr [rax], cl; add al, ch; ret; 
0x00000000004b40a7: add byte ptr [rax], cl; int 0xfc; jmp qword ptr [rsi]; 
0x000000000048b84e: add byte ptr [rax], cl; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b847: add byte ptr [rax], cl; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b840: add byte ptr [rax], cl; mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b839: add byte ptr [rax], cl; mov byte ptr [rip + 0x23096b], 8; mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b855: add byte ptr [rax], cl; ret; 
0x00000000004b3c43: add byte ptr [rax], cl; test dword ptr [rax], eax; add byte ptr [rdx], al; leave; hlt; jmp qword ptr [rcx]; 
0x00000000004b4e37: add byte ptr [rax], cl; xor bh, ch; call qword ptr [rbx]; 
0x00000000004af76b: add byte ptr [rax], dh; add byte ptr [rax], al; jo 0xaf7c9; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004ab7ab: add byte ptr [rax], dh; add byte ptr [rax], al; nop; push rsp; cmc; call qword ptr [rsi]; 
0x00000000004b2b6b: add byte ptr [rax], dh; je 0xb2b6f; add al, ah; cmc; sti; jmp qword ptr [rsi]; 
0x0000000000494040: add byte ptr [rax], dh; stc; jmp qword ptr [rax]; 
0x00000000004af9af: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x42], bh; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004af9d7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x70000042], ah; test cl, bh; call qword ptr [rbx]; 
0x00000000004b3fbf: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x7ffff78], cl; leave; cld; jmp qword ptr [rcx]; 
0x00000000004adac7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x7fffffdd], dl; mov ch, 0xf6; call qword ptr [rsi]; 
0x00000000004b179b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rbp + rdx*4 - 6], bh; call qword ptr [rax]; 
0x00000000004b06f3: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdi + rcx*2 - 0x31fc0000], bh; stc; jmp qword ptr [rdx]; 
0x00000000004af99b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; add byte ptr [rbx + rax*4 - 7], ch; jmp rbx; 
0x00000000004abdb7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi], 0; add byte ptr [rax - 0x5d], al; cmc; jmp qword ptr [rax]; 
0x0000000000473aef: add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x000000000047f9f8: add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004b147b: add byte ptr [rax], dl; add byte ptr [rax], al; pop rbp; add byte ptr [rax], al; je 0xb1481; jmp rax; 
0x00000000004b2d4b: add byte ptr [rax], dl; jbe 0xb2d4f; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x0000000000485055: add byte ptr [rax], dl; lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424175: add byte ptr [rax], dl; lea rdx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424ac5: add byte ptr [rax], dl; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000004b2130: add byte ptr [rax], r8b; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004b37f0: add byte ptr [rax], r8b; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b2ae8: add byte ptr [rax], r8b; add byte ptr [rax + 0x60000073], dh; hlt; sti; call qword ptr [rsi + 1]; 
0x00000000004affc0: add byte ptr [rax], r8b; add byte ptr [rax + 0x78000048], cl; popfq; stc; call qword ptr [rbx]; 
0x000000000044b2cd: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004241c5: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047f2fd: add byte ptr [rax], r8b; cmp byte ptr [rip + 0x23d4c1], 0; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000416fa5: add byte ptr [rax], r8b; cmp eax, -1; je 0x16f28; mov eax, 0xffffffff; ret; 
0x0000000000417195: add byte ptr [rax], r8b; cmp eax, -1; je 0x17118; mov eax, 0xffffffff; ret; 
0x0000000000418bfd: add byte ptr [rax], r8b; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000044487d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000042408d: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000044a6fd: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x000000000044a6fd: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x00000000004753ad: add byte ptr [rax], r8b; mov eax, 0x66; syscall; 
0x00000000004753ad: add byte ptr [rax], r8b; mov eax, 0x66; syscall; ret; 
0x000000000044a6cd: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000044a6cd: add byte ptr [rax], r8b; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000041909d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x0000000000418c0d: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bd2d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x270b8a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000046ff85: add byte ptr [rax], r8b; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000044426d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004787dd: add byte ptr [rax], r8b; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x00000000004496c5: add byte ptr [rax], r8b; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004757a5: add byte ptr [rax], r8b; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045ac9d: add byte ptr [rax], r8b; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041819d: add byte ptr [rax], r8b; mov rax, -1; ret; 
0x000000000047cbe5: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004198dd: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000419a7d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000474b7d: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004448ed: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442cd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a47d: add byte ptr [rax], r8b; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449a2d: add byte ptr [rax], r8b; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004442ad: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000420bad: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000044615d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044614d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044613d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044612d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044611d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044610d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000042c0ad: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000416ffd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000450c7d: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000435113: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000045ae53: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004352a3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435223: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000047ba8d: add byte ptr [rax], r8b; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400ab5: add byte ptr [rax], r8b; pop rbp; ret; 
0x0000000000484b8d: add byte ptr [rax], r8b; pop rbx; ret; 
0x00000000004182e5: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471545: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004236ed: add byte ptr [rax], r8b; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000042bacd: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044663d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000449676: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000047f20d: add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x0000000000484f9f: add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x000000000047573d: add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x00000000004488be: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000481da4: add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x00000000004140e9: add byte ptr [rbp + 0x29], cl; hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000481ce4: add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000044c146: add byte ptr [rbp + 0x312574d2], al; test byte ptr [rax - 0x73], 0x3d; jno 0x4c0ed; add al, 0; mov eax, 0x15; syscall; 
0x000000000041396a: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000473c4a: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000047186f: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a4b: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046c6d7: add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000481f05: add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x000000000047533f: add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000484210: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044a78f: add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000004787d0: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004498a6: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x000000000047560b: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000048559d: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000045aff6: add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000416cc7: add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449c36: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x00000000004532e1: add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000004110dd: add byte ptr [rbp + 0x76], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bc89: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000485b74: add byte ptr [rbp + 0xa], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000482e3f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000482d2f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000044a5a5: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x000000000048831a: add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000047f306: add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x000000000048778a: add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000045adae: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000484ebc: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000041a84f: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000410030: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000047568e: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000482605: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d0a8: add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000048cfc0: add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x00000000004b147f: add byte ptr [rbp + rbx*2], al; add byte ptr [rsp + rsi*2 - 6], cl; jmp rax; 
0x000000000049ef97: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x000000000042e11f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rcx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edf: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rip + 0x63490006], esi; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aaf: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ebp, dword ptr [rcx], 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecef: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul edx, dword ptr [rbp + 6], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfcf: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rdx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043195f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x4900062a; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x49000656; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea4f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rax + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043180f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rsi + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee3f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rsi + rax], edx; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f22f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rax + 6], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043156f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x4900062e; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7af: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x4900065a; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; xor qword ptr [r14], rax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041b86c: add byte ptr [rbp + rcx*4 + 0x24], cl; sub ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000468432: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046693d: add byte ptr [rbp + rcx*4 + 0x35], cl; ret 0x3ce; 
0x000000000041f8bb: add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000041eed9: add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000047195e: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000471a58: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000471b52: add byte ptr [rbp + rcx*4 + 0x4d], cl; ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x000000000048f8f6: add byte ptr [rbp + rcx*4 + 5], cl; fidivr dword ptr [rbp - 0x49f0ffff]; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000042155a: add byte ptr [rbp + rcx*4 + 5], cl; ret 0x719; 
0x00000000004b177b: add byte ptr [rbp + rdx*4 - 6], ah; call qword ptr [rcx]; 
0x00000000004b17a3: add byte ptr [rbp + rdx*4 - 6], bh; call qword ptr [rax]; 
0x00000000004acdc3: add byte ptr [rbp + rsi*2 - 0xa], bl; call qword ptr [rdi + 2]; 
0x00000000004adabb: add byte ptr [rbp + rsi*4 - 0xa], dh; call qword ptr [rdi]; 
0x00000000004af623: add byte ptr [rbp + rsi*8 - 8], bl; call qword ptr [rsi + 0x16]; 
0x000000000044bf21: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x000000000044bebe: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x0000000000490004: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x000000000046579f: add byte ptr [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000419f8b: add byte ptr [rbp - 0x38ef8b40], al; add eax, 0x2a1dd6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044bd3a: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000049f243: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x00000000004754d4: add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004499c5: add byte ptr [rbp - 0x47e98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000449c95: add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049e1e3: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000448f17: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x000000000044937a: add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004685d9: add byte ptr [rbp - 0x75], cl; je 0x68602; and byte ptr [rax + 1], cl; ret; 
0x000000000041d78e: add byte ptr [rbp - 0x75], cl; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000046e917: add byte ptr [rbp - 0x76ba7fec], cl; call 0x1ff1263; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000495098: add byte ptr [rbp - 0x795f0006], al; cli; inc dword ptr [rax - 0x78]; cli; jmp rax; 
0x000000000045889f: add byte ptr [rbp - 0x7cf78140], al; call 0x84911ab; pop rbx; ret; 
0x000000000044d4a5: add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000048f397: add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x00000000004940c0: add byte ptr [rbp - 7], bl; push qword ptr [rax + 0x5e]; stc; jmp rax; 
0x000000000043d239: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000448785: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x48798; xor eax, eax; ret; 
0x0000000000491393: add byte ptr [rbx + 0x22847a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048529d: add byte ptr [rbx + 0x236ebc0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000047fc85: add byte ptr [rbx + 0x23a55b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000047f0a2: add byte ptr [rbx + 0x23cf8705], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000047f005: add byte ptr [rbx + 0x23d02405], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000044d49f: add byte ptr [rbx + 0x26f46a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000044bd2f: add byte ptr [rbx + 0x270b8a05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000449c8f: add byte ptr [rbx + 0x272b7605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000042420f: add byte ptr [rbx + 0x297bda15], cl; add bh, dh; ret 0; 
0x0000000000420b27: add byte ptr [rbx + 0x298ce63d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000418fd7: add byte ptr [rbx + 0x2a2d3505], al; add byte ptr [rcx], al; ret; 
0x000000000041a5cf: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000004751d9: add byte ptr [rbx + 0x31d2313b], cl; imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004448cf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044429f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000457c6b: add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x0000000000410693: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000044489f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044427f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000042cef0: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x0000000000443daf: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000449cd9: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000045a69f: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a6af; call rax; 
0x000000000043015f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff5f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fd5f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044640b: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000042d152: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000043511f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x000000000042230f: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000412c78: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000414ac4: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000405e61: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041056b: add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000459f9f: add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000047c777: add byte ptr [rbx + 0x7525087b], al; adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048f3ef: add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004852d0: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004357cf: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043575f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004356ef: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000473ada: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004af9a3: add byte ptr [rbx + rax*4 - 7], ch; jmp rbx; 
0x00000000004af953: add byte ptr [rbx + rax*4 - 7], cl; call qword ptr [rdx]; 
0x00000000004b47f3: add byte ptr [rbx + rax], bh; std; jmp qword ptr [rdx]; 
0x00000000004014c1: add byte ptr [rbx + rbp*8], al; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000048d067: add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x00000000004b4283: add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x000000000044c815: add byte ptr [rbx + rcx*4 + 0x1d], cl; ret; 
0x000000000041d92f: add byte ptr [rbx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000045320b: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004843e7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000488227: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000488b1f: add byte ptr [rbx + rcx*4 + 0xd], al; xchg eax, ecx; jmp qword ptr [rdx]; 
0x000000000040fa6d: add byte ptr [rbx + rcx*4 + 5], cl; ret; 
0x0000000000457959: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004b427f: add byte ptr [rbx + rcx*4], al; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004aca87: add byte ptr [rbx + rdx], cl; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x0000000000484e00: add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000400e53: add byte ptr [rbx - 0x1f7c8040], al; ror byte ptr [rax - 0x77], 5; mov edi, 0x48002baf; add esp, 0x88; pop rbx; ret; 
0x0000000000449b37: add byte ptr [rbx - 0x358af602], al; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000494274: add byte ptr [rbx - 0x42ff0007], bh; stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x000000000046c84f: add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x000000000044851e: add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x0000000000466df2: add byte ptr [rbx - 0x6bf00008], al; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000484d91: add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x25a30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000443dbf: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004425ff: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000046585c: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000046c0cb: add byte ptr [rbx - 0x78f0d008], al; mov eax, 0x8900001d; ret 0x349; 
0x000000000046b77d: add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000025; ret 0x349; 
0x000000000046192b: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000046b22f: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900002b; ret 0x349; 
0x00000000004015e4: add byte ptr [rbx - 0x7bf00008], al; int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000446266: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000406fa5: add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000409f89: add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000040acd6: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000411478: add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000407d1c: add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x0000000000409f92: add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000409eef: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000048ee0f: add byte ptr [rbx - 0x7fbf8f19], al; jmp qword ptr [rax]; 
0x0000000000469213: add byte ptr [rbx - 0x8bf43], al; call qword ptr [rbx + 0xf]; 
0x000000000047b5b8: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004adab7: add byte ptr [rbx], bh; add byte ptr [rbp + rsi*4 - 0xa], dh; call qword ptr [rdi]; 
0x000000000041d7cf: add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000466b15: add byte ptr [rcx + 0x29], cl; ret; 
0x0000000000411e6f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000411dd6: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x00000000004898c2: add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x000000000047369f: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000041062d: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000419a70: add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004103d1: add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x0000000000410560: add byte ptr [rcx + 0x480a75f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000482582: add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x00000000004134e0: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; ret; 
0x00000000004712ec: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000042dabe: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048af06: add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x000000000045a49e: add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x000000000042c31c: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004440f8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000460361: add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000046c11a: add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x000000000048a884: add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x0000000000473ad4: add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000485976: add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x00000000004481f7: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x00000000004174f0: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000042494d: add byte ptr [rcx + 0xf], al; mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000468e28: add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000424947: add byte ptr [rcx + 0xf], al; mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000478c3c: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004666c7: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000046b6de: add byte ptr [rcx + 1], al; ret 0x8b48; 
0x000000000040e1d5: add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000048c155: add byte ptr [rcx + 1], cl; ret 0xef89; 
0x000000000044696f: add byte ptr [rcx + 1], cl; ret; 
0x000000000048d00a: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000419a4d: add byte ptr [rcx + rax + 0x57], al; sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000047f164: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000402292: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x00000000004af8d7: add byte ptr [rcx + rax*2 + 0x7a740000], bl; stc; call rsp; 
0x00000000004755ec: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000417374: add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x0000000000471ee7: add byte ptr [rcx + rcx*4 + 0x23], cl; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000491faf: add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004143ea: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000047d1e9: add byte ptr [rcx + rcx*4 - 0x12], cl; xor eax, eax; call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000045ddb2: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000469aff: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000045d80c: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000473f61: add byte ptr [rcx + rcx*4 - 0x17], cl; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000004499f4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449924: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000044e88c: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000041300f: add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x00000000004148ae: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000040dc97: add byte ptr [rcx + rcx*4 - 0x40], al; jne 0xdcbc; add rsp, 0x118; ret; 
0x000000000041b1ae: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474ac2: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000004738ff: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000417e33: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000046fe4c: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004916bf: add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004740b3: add byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000004600ed: add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004754cc: add byte ptr [rcx + rdi - 0x75], dh; add eax, 0x247337; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x00000000004497f1: add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x000000000047e98e: add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000049ef93: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000045554f: add byte ptr [rcx - 0x46], al; add eax, 0xe9000000; ret; 
0x000000000045af22: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000449cbb: add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000046bcac: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046f8d4: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000047f00b: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f0a8: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000046c0c7: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000046b22b: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000465b0d: add byte ptr [rcx - 0x75], al; jl 0x65b36; or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x73], 0x15; ret; 
0x000000000040e247: add byte ptr [rcx - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000045d657: add byte ptr [rcx - 0x75], cl; ja 0x5d674; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000049209a: add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000045fa2f: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000411adf: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046b2f4: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004898bb: add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000046bade: add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000044bea7: add byte ptr [rcx - 0x77], al; ret; 
0x00000000004048a0: add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000491715: add byte ptr [rcx - 0x77], cl; ret 0x8349; 
0x0000000000479c74: add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x00000000004761c2: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000004242fb: add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x00000000004242b4: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048a88a: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000044a45f: add byte ptr [rcx - 0x77], cl; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000048a999: add byte ptr [rcx - 0x7b], cl; ret 0x840f; 
0x0000000000470dab: add byte ptr [rcx - 0x7cb7e8f4], cl; ret 0x4804; 
0x000000000045e1c1: add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004696a5: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000045b2f7: add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000419c8f: add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x000000000045b56e: add byte ptr [rcx - 0x7d], cl; ret 0x6601; 
0x000000000042677f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042508f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041d7d7: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000045fc8d: add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000048cfcf: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000047349b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000415111: add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000494104: add byte ptr [rcx - 7], dh; push rax; jno 0x94104; jmp rax; 
0x000000000042bb42: add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042bb68: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004845f7: add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000419aa9: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x29fd33; ret; 
0x0000000000419a89: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x29fd4b; ret; 
0x000000000048b35a: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x000000000041a84b: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000004480e0: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x0000000000446b7f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000040ec4f: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004755e5: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x00000000004236dc: add byte ptr [rcx], al; je 0x23708; test rax, rax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x00000000004755ea: add byte ptr [rcx], al; je 0x75618; mov eax, 0x101; syscall; 
0x0000000000400b2b: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000047fc8b: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000418fdd: add byte ptr [rcx], al; ret; 
0x000000000044d4bc: add byte ptr [rcx], bh; ret; 
0x000000000044be5f: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000494f5c: add byte ptr [rcx], ch; cli; jmp qword ptr [rax + 0xb]; 
0x0000000000412546: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041b09b: add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x00000000004721ab: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046b5e4: add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000472981: add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000040ed64: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000472cdc: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000040dc75: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000044d4db: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x0000000000421780: add byte ptr [rcx], dh; sar byte ptr [rsi + 0x80000], 0xe8; ret; 
0x0000000000475375: add byte ptr [rcx], dh; shr bl, 0xb5; call 0x4bf70; nop; mov eax, 0x3f; syscall; 
0x0000000000448022: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fc2: add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000048cdfd: add byte ptr [rdi + 1], bh; call rax; 
0x00000000004ad4cb: add byte ptr [rdi + rbx*4 - 0xa], ah; call qword ptr [rdi]; 
0x000000000044c776: add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000462c95: add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004b4b93: add byte ptr [rdi + rcx - 3], bh; call qword ptr [rax]; 
0x00000000004b06f7: add byte ptr [rdi + rcx*2 - 0x31fc0000], bh; stc; jmp qword ptr [rdx]; 
0x00000000004b0eeb: add byte ptr [rdi + rdx - 6], dl; call rcx; 
0x00000000004b0ee7: add byte ptr [rdi + rdx*2 + 0x17540000], ch; cli; call rcx; 
0x00000000004b4ed7: add byte ptr [rdi + rdx*4 + 0x34740000], bl; std; jmp qword ptr [rdx]; 
0x000000000049f23b: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000049427c: add byte ptr [rdi - 0x4e6f0007], bh; stc; call qword ptr [rax - 0x4d]; 
0x0000000000495118: add byte ptr [rdi - 0x646f0006], ch; cli; jmp qword ptr [rax]; 
0x0000000000495020: add byte ptr [rdi - 6], al; call qword ptr [rax]; 
0x0000000000495020: add byte ptr [rdi - 6], al; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000494020: add byte ptr [rdi], ah; stc; jmp qword ptr [rax]; 
0x00000000004b4db0: add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x0000000000446f76: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004359c4: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x5f10e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dc56: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000480fa6: add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004348e6: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000448177: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000043591f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043598f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000044614f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044613f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044610f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044612f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044611f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000048bf54: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e31b: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000044822f: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x000000000048acdd: add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000042632f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040d603: add byte ptr [rdi], cl; mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000416fff: add byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134ef: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042c0af: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bbef: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000461e73: add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x000000000042b99f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b9cf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b9bf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000472d4f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d5f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b9af: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000046c114: add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x000000000040dc2b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc33: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc3b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000401647: add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000048870b: add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x0000000000484db1: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000449b27: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x000000000041216d: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004169e6: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004754f9: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000411986: add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000417ee8: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000457c5e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000449794: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847d7: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x0000000000484998: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048941c: add byte ptr [rdi], cl; test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000042251e: add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000449315: add byte ptr [rdi], cl; xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x4c3f9; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000469288: add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000420f3e: add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x00000000004766b3: add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000044f944: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x000000000046fe47: add byte ptr [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004012fe: add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000443d6f: add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004425bf: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000048cfd7: add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000047c08c: add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000047c9b4: add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000044bd35: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000040eca2: add byte ptr [rdx + 0x6c], bh; call 0x1bd0; xor eax, eax; ret; 
0x000000000044be8c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x0000000000413187: add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004af99f: add byte ptr [rdx + rax*2], ah; add byte ptr [rbx + rax*4 - 7], ch; jmp rbx; 
0x0000000000473ad1: add byte ptr [rdx + rax], cl; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004720fe: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ede: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241ee: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eae: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721ce: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a7e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047212e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000049eb97: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000044d4c3: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x26b5ec; pop rbx; ret; 
0x00000000004b019f: add byte ptr [rdx + rcx*2], ah; add ah, bl; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004b3fdb: add byte ptr [rdx + rcx*8], dl; cld; call rdx; 
0x00000000004572a0: add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000045729f: add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x00000000004af8db: add byte ptr [rdx + rdi*2 - 7], dh; call rsp; 
0x0000000000494a54: add byte ptr [rdx + rdi*8], al; push qword ptr [rax + 3]; cli; jmp rax; 
0x0000000000419073: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x00000000004950b8: add byte ptr [rdx - 0x6c5f0006], dl; cli; inc dword ptr [rax - 0x6b]; cli; jmp rax; 
0x000000000045919e: add byte ptr [rdx - 0x77], cl; xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x0000000000494a20: add byte ptr [rdx], 0xfa; jmp qword ptr [rax]; 
0x00000000004b193c: add byte ptr [rdx], ah; add al, al; std; call rdx; 
0x000000000045ad5c: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000424e1e: add byte ptr [rdx], al; lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424cde: add byte ptr [rdx], al; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b7e: add byte ptr [rdx], al; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e85: add byte ptr [rdx], al; lea rdx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d45: add byte ptr [rdx], al; lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be5: add byte ptr [rdx], al; lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e64: add byte ptr [rdx], al; lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424d24: add byte ptr [rdx], al; lea rdx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c84: add byte ptr [rdx], al; lea rdx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x00000000004b3c47: add byte ptr [rdx], al; leave; hlt; jmp qword ptr [rcx]; 
0x00000000004240b8: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000494d58: add byte ptr [rdx], ch; cli; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x00000000004ac13c: add byte ptr [rdx], cl; add byte ptr [rax], al; push rax; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004720fc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424edc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241ec: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eac: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721cc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a7c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047212c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000494b10: add byte ptr [rip + 0x3490fffa], dh; cli; jmp qword ptr [rax]; 
0x00000000004755e7: add byte ptr [rip + 0x410000], bh; je 0x75618; mov eax, 0x101; syscall; 
0x00000000004755e6: add byte ptr [rip + 0x410000], dil; je 0x75618; mov eax, 0x101; syscall; 
0x0000000000494850: add byte ptr [rip + 0x470fffa], al; cli; jmp rax; 
0x000000000049484c: add byte ptr [rip + 0x500fffa], 0xfa; push qword ptr [rax + 4]; cli; jmp rax; 
0x0000000000472101: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241f1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eb1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a81: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472131: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000042d92f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d92e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d062: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004673df: add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x000000000042b995: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444245: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000418f15: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000435115: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000045ae55: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000004717e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f55: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000418f35: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x00000000004352a5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435225: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000446ad5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473515: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000042b994: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000418f34: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x0000000000446ad4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473514: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000044be5a: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x4be6c; nop; mov eax, 0xca; syscall; 
0x000000000044bf47: add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047b514: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000044be87: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048cdf8: add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x0000000000446c65: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000042c624: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000472cfb: add byte ptr [rsi + 0xf], ah; je 0x72d4f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000462d3a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000041ac37: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x0000000000465aba: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4ce8; 
0x000000000041a66f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000462d63: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x0000000000462d01: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000472c44: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000041ac36: add byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x0000000000424b31: add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x00000000004b3f30: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3ec8: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3efc: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004b45ef: add byte ptr [rsi + rcx*4 - 0x10440000], dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004b06fb: add byte ptr [rsi + rcx*8], al; stc; jmp qword ptr [rdx]; 
0x00000000004ae833: add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x0000000000456060: add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x000000000045605f: add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000049f38f: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000049eb8f: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000048527d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000048527d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bddd: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x000000000044bddd: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x0000000000474c4d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474c4d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x00000000004499bd: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x272e46]; test eax, eax; jne 0x499e0; mov eax, 1; syscall; 
0x000000000045b07d: add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000045ae4d: add byte ptr [rsi - 0x70], ah; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004004cd: add byte ptr [rsi - 0x70], ah; ret; 
0x00000000004425cf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004425df: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000047132b: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000414771: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417040: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000424af7: add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004abdbc: add byte ptr [rsi], 0; add byte ptr [rax - 0x5d], al; cmc; jmp qword ptr [rax]; 
0x0000000000494848: add byte ptr [rsi], al; cli; inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004abe13: add byte ptr [rsi], cl; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004496d1: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004a2a37: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000448c04: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004accd3: add byte ptr [rsp + rbp*2 - 0xa], cl; jmp rdx; 
0x00000000004add03: add byte ptr [rsp + rdi*4 - 0xa], bl; call qword ptr [rbx]; 
0x00000000004b4b8f: add byte ptr [rsp + rdx*4], dl; add byte ptr [rdi + rcx - 3], bh; call qword ptr [rax]; 
0x0000000000452d1c: add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x00000000004b4edb: add byte ptr [rsp + rsi - 3], dh; jmp qword ptr [rdx]; 
0x00000000004b1483: add byte ptr [rsp + rsi*2 - 6], cl; jmp rax; 
0x000000000047bb32: add byte ptr [rsp + rsi*2], al; or bh, bh; and eax, 0x23e6e4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000004b1403: add byte ptr [rsp + rsi*2], bl; cli; call qword ptr [rdx]; 
0x00000000004af595: add byte ptr ds:[rax], al; cwde; xchg eax, esi; clc; call qword ptr [rax]; 
0x00000000004af5e5: add byte ptr ds:[rax], al; fcomp st(1); clc; call qword ptr [rax]; 
0x00000000004af5bd: add byte ptr ds:[rax], al; mov al, 0xb8; clc; call qword ptr [rax]; 
0x0000000000481b5e: add byte ptr ds:[rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004af621: add byte ptr ds:[rax], al; pop rsp; cmc; clc; call qword ptr [rsi + 0x16]; 
0x00000000004af5a9: add byte ptr ds:[rax], al; xchg eax, esp; xchg eax, esi; clc; jmp qword ptr [rsi]; 
0x0000000000449045: add byte ptr es:[rax + 0x39], cl; ret; 
0x00000000004498ed: add byte ptr es:[rax], al; mov eax, dword ptr [rip + 0x272f16]; test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x000000000044c145: add byte ptr es:[rbp + 0x312574d2], al; test byte ptr [rax - 0x73], 0x3d; jno 0x4c0ed; add al, 0; mov eax, 0x15; syscall; 
0x000000000044d4a4: add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x000000000044c814: add byte ptr es:[rbx + rcx*4 + 0x1d], cl; ret; 
0x000000000044bd37: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000415ed2: add ch, al; pop rax; ret; 
0x0000000000415fd9: add ch, al; push rcx; ret 0xffff; 
0x00000000004407ff: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000493f30: add ch, bh; clc; jmp qword ptr [rax]; 
0x0000000000494488: add ch, bl; stc; jmp rax; 
0x00000000004a98fc: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004a98fd: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000468e24: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000468e63: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004acc0f: add ch, byte ptr [rsi + rcx + 8]; ret; 
0x00000000004481c8: add cl, al; call 0xfe504db; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004951fc: add cl, bh; cli; jmp qword ptr [rax]; 
0x00000000004425e7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000469642: add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x0000000000468b96: add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000045528e: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000447f44: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000411e93: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000411f74: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000450e2c: add cl, byte ptr [rax + 1]; fimul word ptr [rax + 1]; ret; 
0x0000000000424e1f: add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424cdf: add cl, byte ptr [rax - 0x73]; adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b7f: add cl, byte ptr [rax - 0x73]; adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e86: add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d46: add cl, byte ptr [rax - 0x73]; adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be6: add cl, byte ptr [rax - 0x73]; adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e65: add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424d25: add cl, byte ptr [rax - 0x73]; adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c85: add cl, byte ptr [rax - 0x73]; adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000443e85: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442675: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000004425a5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004425e8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x0000000000442555: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004854d5: add cl, byte ptr [rax - 0x77]; je 0x854fe; or byte ptr [rax + 1], cl; ret; 
0x000000000047e624: add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000471216: add cl, byte ptr [rax - 0x77]; sti; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000418bf2: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000440db0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000440e13: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x0000000000483fad: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x00000000004b56b3: add cl, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x000000000045fc84: add cl, byte ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000435762: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000442623: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000443e05: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000442665: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000046ae73: add cl, byte ptr [rcx + rcx*4 - 0xe]; call qword ptr [rax + 0x38]; 
0x000000000048cd27: add cl, byte ptr [rcx - 0x75]; adc al, 0x24; mov edi, 1; call rax; 
0x000000000040e1e7: add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000451f5a: add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000049138d: add cl, byte ptr [rdi]; test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x22847a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000406f9f: add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a5e6: add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040acd0: add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000446c6b: add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000004425e5: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000443dc3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000442603: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x000000000045e67a: add cl, ch; ret 0xfffa; 
0x0000000000454d08: add cl, ch; ret 0xfffd; 
0x0000000000448797: add cl, ch; ret; 
0x000000000048a9e0: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b2ea: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004904df: add cl, ch; retf; add al, 0xf9; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b3c48: add cl, cl; hlt; jmp qword ptr [rcx]; 
0x0000000000400c93: add cl, cl; ret; 
0x0000000000469938: add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000045e182: add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000004ab1e1: add dh, bh; jmp rsp; 
0x00000000004ab1dd: add dh, bh; push qword ptr [rax + rax - 2]; jmp rsp; 
0x00000000004a2097: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000435913: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000413189: add dh, bl; ret; 
0x000000000049450c: add dh, bl; stc; jmp rax; 
0x0000000000424b6e: add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000446737: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467e7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x00000000004ad141: add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000438648: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446dbf: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004945c4: add dh, cl; stc; call qword ptr [rax - 0x31]; 
0x000000000045115e: add dh, dh; ret 0x4801; 
0x000000000042301f: add dh, dh; ret 0x4804; 
0x000000000047c538: add dh, dh; ret 0x7403; 
0x000000000044a63f: add dh, dh; ret 0x7404; 
0x0000000000444c97: add dh, dh; ret 0x7501; 
0x0000000000444ca4: add dh, dh; ret 0x7502; 
0x0000000000444cb1: add dh, dh; ret 0x7504; 
0x0000000000444c69: add dh, dh; ret 0x7510; 
0x0000000000444c76: add dh, dh; ret 0x7520; 
0x0000000000424d9c: add dh, dh; ret 0x7540; 
0x0000000000423343: add dh, dh; ret 0xf02; 
0x000000000045a3f8: add dh, dh; ret 0xf04; 
0x000000000041b599: add dh, dh; ret 0xf08; 
0x0000000000466521: add dh, dh; ret 0xf40; 
0x0000000000466507: add dh, dh; ret 0xf50; 
0x000000000041b666: add dh, dh; ret; 
0x0000000000494524: add dl, bl; stc; call rax; 
0x00000000004a7cda: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000495158: add dl, dh; cli; call qword ptr [rax]; 
0x0000000000495158: add dl, dh; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x00000000004798fd: add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000046f8d7: add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000046e6f5: add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000044fd13: add dword ptr [r8 - 0x7d], r9d; ret; 
0x000000000045a49b: add dword ptr [r8], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000448c07: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443d71: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x000000000046511a: add dword ptr [rax + 0x29], ecx; fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x000000000047fac9: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047fadb: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000045b5bf: add dword ptr [rax + 0x39], ecx; ret 0x8841; 
0x00000000004644fa: add dword ptr [rax + 0x39], ecx; ret 0x8c0f; 
0x000000000040f353: add dword ptr [rax + 0x39], ecx; ret 0xd774; 
0x000000000040f2dd: add dword ptr [rax + 0x39], ecx; ret 0xed75; 
0x000000000041756d: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000047f2c3: add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x0000000000457410: add dword ptr [rax + 0x39], r9d; ret; 
0x000000000047f2c2: add dword ptr [rax + 0x39], r9d; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x000000000048de63: add dword ptr [rax + 0x7900ff7a], eax; sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x00000000004182d3: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x0000000000481e77: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040db8a: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000004790f5: add dword ptr [rax + 9], ecx; ret 0x1475; 
0x000000000041e77e: add dword ptr [rax + 9], ecx; ret 0x8949; 
0x00000000004790c7: add dword ptr [rax + 9], ecx; ret 0xe75; 
0x00000000004756c0: add dword ptr [rax + rax], edx; mov eax, ecx; syscall; 
0x00000000004236dd: add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x0000000000423763: add dword ptr [rax + rdi - 0x3e], eax; jne 0x23750; sub rax, 0x10; ret; 
0x000000000047db63: add dword ptr [rax - 0x39], ecx; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000047f8e2: add dword ptr [rax - 0x3f], ecx; out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000460b9b: add dword ptr [rax - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000402cff: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x00000000004236f4: add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000046f8d8: add dword ptr [rax - 0x75], ecx; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x00000000004425c1: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x0000000000472193: add dword ptr [rax - 0x77], ecx; add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000443e82: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442672: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000004425a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000442552: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000443e02: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000442662: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047f213: add dword ptr [rax - 0x77], ecx; add eax, 0x23d195; ret; 
0x000000000045da80: add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000450277: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x0000000000414936: add dword ptr [rax - 0x77], ecx; ret 0x3c75; 
0x0000000000405ffc: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000047f212: add dword ptr [rax - 0x77], r9d; add eax, 0x23d195; ret; 
0x0000000000480e12: add dword ptr [rax - 0x7d], ecx; mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000481483: add dword ptr [rax - 0x7d], ecx; ret 0x4118; 
0x0000000000481803: add dword ptr [rax - 0x7d], ecx; ret 0x4418; 
0x000000000045ba29: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000046e6f6: add dword ptr [rax - 0x7d], ecx; ret 0x8502; 
0x0000000000402d49: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000450866: add dword ptr [rax - 0x7d], ecx; ret 0x8b01; 
0x000000000046ed47: add dword ptr [rax - 0x7d], ecx; ret 0x8b04; 
0x000000000040e4ab: add dword ptr [rax - 0x7d], ecx; ret 0xf10; 
0x000000000040efb6: add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004696a9: add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000045e1c5: add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x0000000000405a30: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000004b3b21: add dword ptr [rax], 0; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004b3ab5: add dword ptr [rax], 0; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x000000000044be89: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000004558cc: add dword ptr [rax], eax; add al, ch; cld; ret 0xfffa; 
0x00000000004109b4: add dword ptr [rax], eax; add bl, dh; ret; 
0x00000000004480e1: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x00000000004ab905: add dword ptr [rax], eax; add byte ptr [rax + 0x61], ch; cmc; call qword ptr [rbx + 1]; 
0x00000000004730c3: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000472e1f: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x000000000041a21a: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000467a53: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000423b1a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x703fc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000455288: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000048505b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x000000000041f2ed: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041b616: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000044819d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x4d0d9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000458423: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000449519: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x000000000048e72a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x00000000004564f6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000048cc75: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004758cd: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044703e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000471249: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044cf51: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000048a6bf: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000041f930: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000044b7fc: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000456152: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000042b627: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041ef85: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000042457e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043ff9f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b655: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000467d28: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044e931: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004a209a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004a124a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004a106a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1802: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004a1072: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046f588: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048cd2d: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000044d4c0: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x4d4d0; mov dword ptr [rip + 0x26b5ec], edx; pop rbx; ret; 
0x00000000004607b5: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000041a84c: add dword ptr [rax], eax; add byte ptr [rax], al; jne 0x1a858; add rsp, 0x20; pop rbx; ret; 
0x0000000000475bea: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000419aea: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x000000000044be8e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000449381: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000047e5fd: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000048d3e0: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000047b511: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000484466: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000419aaa: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a8a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x000000000046e84d: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000412db4: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000046bcaf: add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046c26d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c21a: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bced: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c08c: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c047: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfb3: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000417a73: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867ce: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000047fc91: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000467f90: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004499cb: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000046b5e1: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046c6d4: add dword ptr [rax], eax; add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000413968: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000491391: add dword ptr [rax], eax; add byte ptr [rbx + 0x22847a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048cbc6: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000044e152: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000409eed: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000045a49c: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000004497ef: add dword ptr [rax], eax; add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x0000000000492098: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x00000000004761c0: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000048b358: add dword ptr [rax], eax; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x000000000048bf52: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000401645: add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000471329: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000041476f: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000444c95: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x0000000000444ca2: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x0000000000444caf: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000444c67: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000444c74: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000444c81: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000045a3f6: add dword ptr [rax], eax; add dh, dh; ret 0xf04; 
0x000000000041b664: add dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000424edb: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241eb: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x00000000004241fc: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000041062c: add dword ptr [rax], eax; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048dcfc: add dword ptr [rax], eax; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004845f8: add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000405e60: add dword ptr [rax], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044c774: add dword ptr [rax], ebp; add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044c781: add dword ptr [rax], esp; jmp rdx; 
0x0000000000446aa7: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46aa0; sub rax, 1; ret; 
0x0000000000446957: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46950; lea rax, [rcx - 1]; ret; 
0x0000000000473d75: add dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473def: add dword ptr [rbp + 0x31], eax; shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046e975: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000046e6ef: add dword ptr [rbp + 0xf48ff7e], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x0000000000448eb9: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000045e002: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x00000000004357d2: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000046bb15: add dword ptr [rbx - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000454a81: add dword ptr [rbx - 0x67f3f1f], eax; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000040d57e: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x0000000000443df1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000442621: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000045c482: add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000443dd1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000442611: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000443dc1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000442601: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000416724: add dword ptr [rcx + 0x58b4803], ecx; ret 0x2a55; 
0x000000000044aed3: add dword ptr [rcx + 9], ecx; ret; 
0x000000000040e1ea: add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x00000000004425f1: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000046e4ee: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000459ac8: add dword ptr [rcx - 0x78], eax; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000466be1: add dword ptr [rcx - 0x7d], ecx; ret 0x2504; 
0x000000000047883b: add dword ptr [rcx - 0x7d], ecx; ret 0xf01; 
0x000000000044c575: add dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000400e17: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000004497ee: add dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044976d: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004754da: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000447dd2: add dword ptr [rdi + 0x15], esi; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000447053: add dword ptr [rdi + 0x26], esi; jb 0x4705d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447f40: add dword ptr [rdi + 0x2c], esi; jb 0x47f47; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000448108: add dword ptr [rdi + 0x3a], esi; jb 0x4810f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004473b3: add dword ptr [rdi + 0x3b], esi; jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447803: add dword ptr [rdi + 0x53], esi; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004b3f35: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3ecd: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3f01: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004b3ede: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004b3f12: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004b3f46: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b0625: add dword ptr [rdi], 3; ret 0xa01; 
0x00000000004aba9e: add dword ptr [rdi], 3; ret; 
0x000000000041783b: add dword ptr [rdi], ecx; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x17859; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004569d0: add dword ptr [rdi], ecx; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000448521: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x000000000049170f: add dword ptr [rdi], ecx; test dh, al; add eax, 0x89490000; ret 0x8349; 
0x0000000000454341: add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x00000000004798fe: add dword ptr [rdi], ecx; xchg eax, ebp; ret 0xc283; 
0x0000000000490daf: add dword ptr [rdx + 0x22], esi; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000473d73: add dword ptr [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000446dcc: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043865d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004852db: add dword ptr [rdx + rax*2], 1; ret; 
0x0000000000480e16: add dword ptr [rdx + rdx*8 - 0x41f0308b], eax; sal edi, 0xd8; ret; 
0x0000000000447c36: add dword ptr [rdx - 0x2f], esp; jge 0x47c83; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000004385b6: add dword ptr [rdx - 0x2f], esp; jl 0x38603; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000447a97: add dword ptr [rdx - 0x2f], esp; std; jg 0x47ae7; jmp qword ptr [rdx - 0x2f]; 
0x0000000000440176: add dword ptr [rdx - 0x5ef272b8], edx; add dword ptr [rip - 0x6eeb7500], -0x75; add al, 0x81; sub eax, edx; ret; 
0x0000000000446d63: add dword ptr [rdx - 0xf], esp; jl 0x46db0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446ea3: add dword ptr [rdx - 0xf], esp; jl 0x46ef0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004b30a4: add dword ptr [rdx], 0x4a; ret; 
0x00000000004b5b5c: add dword ptr [rdx], 0x55; ret; 
0x00000000004af0b4: add dword ptr [rdx], 0x5a; ret; 
0x00000000004b5b18: add dword ptr [rdx], 0x76; ret; 
0x0000000000418fd8: add dword ptr [rip + 0x2a2d35], 1; ret; 
0x00000000004aca82: add dword ptr [rip + 0x2c], 0x4c; adc eax, dword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x000000000044017c: add dword ptr [rip - 0x6eeb7500], -0x75; add al, 0x81; sub eax, edx; ret; 
0x00000000004401b0: add dword ptr [rip - 0x75f37500], -0x75; add al, 0x82; sub eax, ecx; ret; 
0x00000000004acc0b: add dword ptr [rsi + rcx + 0x30], ecx; add ch, byte ptr [rsi + rcx + 8]; ret; 
0x00000000004425d2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004425e2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000434467: add dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000472109: add eax, 0x1422; cmove rax, rdx; ret; 
0x00000000004345e8: add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000489edd: add eax, 0x1489066; ret 0xb70f; 
0x000000000045adb0: add eax, 0x18c48348; ret; 
0x0000000000424ee9: add eax, 0x1b512; cmove rax, rdx; ret; 
0x000000000048f8f9: add eax, 0x1bdda; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004241f9: add eax, 0x1c832; cmove rax, rdx; ret; 
0x00000000004496fa: add eax, 0x1f0fc3f3; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000049049a: add eax, 0x1f0ffff9; add bl, dh; ret; 
0x0000000000474875: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ce5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad5: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000424ad0: add eax, 0x21b7b; cmove rax, rdx; ret; 
0x0000000000424e29: add eax, 0x22132; cmovne rax, rdx; ret; 
0x0000000000424ce9: add eax, 0x22262; cmovne rax, rdx; ret; 
0x0000000000424b89: add eax, 0x223d2; cmovne rax, rdx; ret; 
0x0000000000424e90: add eax, 0x2247b; cmovne rax, rdx; ret; 
0x0000000000424d50: add eax, 0x225ab; cmovne rax, rdx; ret; 
0x0000000000424bf0: add eax, 0x2271b; cmovne rax, rdx; ret; 
0x0000000000424e6f: add eax, 0x228cc; cmovne rax, rdx; ret; 
0x0000000000424180: add eax, 0x2296b; cmovne rax, rdx; ret; 
0x0000000000424d2f: add eax, 0x229fc; cmovne rax, rdx; ret; 
0x0000000000490dae: add eax, 0x22b201; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000424bcf: add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x0000000000490529: add eax, 0x22b956; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000048f4b1: add eax, 0x22cece; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000048f3a1: add eax, 0x22cfde; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000424c3e: add eax, 0x231dd; cmovne rax, rdx; ret; 
0x0000000000424c8f: add eax, 0x2330c; cmovne rax, rdx; ret; 
0x0000000000485481: add eax, 0x23743a; ret; 
0x00000000004848e9: add eax, 0x23777a; ret; 
0x00000000004848ce: add eax, 0x237795; add rsp, 8; ret; 
0x00000000004848e2: add eax, 0x237799; mov qword ptr [rip + 0x23777a], rax; ret; 
0x00000000004848c7: add eax, 0x2377b4; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000047f372: add eax, 0x239d79; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x0000000000481a0a: add eax, 0x23a63d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000047f37c: add eax, 0x23d027; mov qword ptr [rsi], rax; ret; 
0x000000000047f30b: add eax, 0x23d0a0; ret; 
0x000000000047f2d2: add eax, 0x23d0d9; add rsp, 8; ret; 
0x000000000047f216: add eax, 0x23d195; ret; 
0x000000000047f2ca: add eax, 0x23d4f8; add byte ptr [rax - 0x77], cl; add eax, 0x23d0d9; add rsp, 8; ret; 
0x00000000004754d0: add eax, 0x247337; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x000000000046c277: add eax, 0x24afa4; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c224: add eax, 0x24aff7; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcf7: add eax, 0x24b024; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c096: add eax, 0x24b185; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c051: add eax, 0x24b1ca; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c00c: add eax, 0x24b20f; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfbd: add eax, 0x24b25e; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b621: add eax, 0x24b8fa; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000460710: add eax, 0x255f0b; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460abf: add eax, 0x25605c; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a71: add eax, 0x2560aa; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609c2: add eax, 0x256159; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460966: add eax, 0x2561b5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606c6: add eax, 0x256455; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460678: add eax, 0x2564a3; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460217: add eax, 0x256604; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000045929a: add eax, 0x25f9a1; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x000000000045919a: add eax, 0x25faa1; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x0000000000457b12: add eax, 0x264361; ret; 
0x000000000044d492: add eax, 0x26ce69; ret; 
0x000000000044f5b2: add eax, 0x26d371; ret; 
0x000000000044bd8a: add eax, 0x26e3e1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044bd31: add eax, 0x270b8a; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449c91: add eax, 0x272b76; test eax, eax; jne 0x49cb0; mov eax, 3; syscall; 
0x0000000000449afe: add eax, 0x272d09; test eax, eax; jne 0x49b68; mov eax, 0x48; syscall; 
0x00000000004499c1: add eax, 0x272e46; test eax, eax; jne 0x499e0; mov eax, 1; syscall; 
0x00000000004498f1: add eax, 0x272f16; test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x0000000000452a6f: add eax, 0x29480000; ret 0x349; 
0x0000000000424e09: add eax, 0x296fe2; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424cda: add eax, 0x29711d; add cl, byte ptr [rax - 0x73]; adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424cc9: add eax, 0x297122; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424be1: add eax, 0x297216; add cl, byte ptr [rax - 0x73]; adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424b69: add eax, 0x297282; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424ac1: add eax, 0x297365; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000004200d7: add eax, 0x299784; ret; 
0x00000000004200c9: add eax, 0x29979a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200e1: add eax, 0x29bc86; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419aef: add eax, 0x29fd18; ret; 
0x0000000000419ae5: add eax, 0x29fd26; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419ab0: add eax, 0x29fd33; ret; 
0x0000000000419a90: add eax, 0x29fd4b; ret; 
0x0000000000419aa5: add eax, 0x29fd66; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a85: add eax, 0x29fd86; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419986: add eax, 0x29febd; ret; 
0x0000000000419916: add eax, 0x29fedd; ret; 
0x0000000000419906: add eax, 0x29fef5; ret; 
0x0000000000418f42: add eax, 0x2a01d9; ret; 
0x000000000041a9f3: add eax, 0x2a1368; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000419f91: add eax, 0x2a1dd6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419f87: add eax, 0x2a1de4; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x0000000000419b05: add eax, 0x2a228a; ret; 
0x000000000041903d: add eax, 0x2a2cd2; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000400e5c: add eax, 0x2bafbf; add rsp, 0x88; pop rbx; ret; 
0x00000000004005a6: add eax, 0x2bbae9; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000004aca83: add eax, 0x2c; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004b2104: add eax, 0x3400e4e; ret; 
0x0000000000484ebe: add eax, 0x38c48348; ret; 
0x000000000041d8fe: add eax, 0x39480000; ret 0xf275; 
0x0000000000474895: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d05: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae5: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000048c853: add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000494851: add eax, 0x470fffa; cli; jmp rax; 
0x0000000000443e08: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x0000000000442638: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000435453: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444966: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444306: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000043891b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000446f40: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000494a0d: add eax, 0x4a0fffa; cli; call qword ptr [rax]; 
0x000000000049484d: add eax, 0x500fffa; cli; push qword ptr [rax + 4]; cli; jmp rax; 
0x0000000000443e89: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442679: add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000004948c9: add eax, 0x552fffa; cli; call rdx; 
0x0000000000485060: add eax, 0x5b; cmovne rax, rdx; ret; 
0x00000000004a2c31: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004a2c3d: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000047122a: add eax, 0x5c415d5b; ret; 
0x00000000004748e3: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d53: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bb13: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000402022: add eax, 0x63480009; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000433fe7: add eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000477662: add eax, 0x66e80000; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000424eb9: add eax, 0x6922; cmove rax, rdx; ret; 
0x0000000000400e54: add eax, 0x7f; and eax, 0xffffffc0; mov qword ptr [rip + 0x2bafbf], rax; add rsp, 0x88; pop rbx; ret; 
0x000000000043d238: add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042b267: add eax, 0x83480000; ret 0x4910; 
0x000000000043e591: add eax, 0x83480000; ret 0xe910; 
0x000000000042b295: add eax, 0x83480000; ret 0xeb10; 
0x000000000045e985: add eax, 0x83ffffef; ret; 
0x00000000004753c6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000004753b6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000004753d6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000443e0b: add eax, 0x8428d48; ret; 
0x00000000004721d9: add eax, 0x892; cmove rax, rdx; ret; 
0x000000000040dc58: add eax, 0x8944c689; ret 0xeab8; 
0x0000000000458f93: add eax, 0x89480000; ret 0x2948; 
0x0000000000491713: add eax, 0x89490000; ret 0x8349; 
0x000000000043ae41: add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000491707: add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000041d78c: add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000043eb0d: add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000480fa8: add eax, 0x940fc085; ret 0x3d; 
0x00000000004abca5: add eax, 0x9b280000; cmc; call rax; 
0x0000000000473a89: add eax, 0xa22; cmove rax, rdx; ret; 
0x000000000042494c: add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000040dc4e: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000042d35a: add eax, 0xc0310000; ret; 
0x0000000000443e8d: add eax, 0xc428d48; ret; 
0x000000000044496d: add eax, 0xc478d48; ret; 
0x00000000004440f7: add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000424952: add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000455552: add eax, 0xe9000000; ret; 
0x00000000004357ba: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000472139: add eax, 0xf32; cmove rax, rdx; ret; 
0x000000000048d0aa: add eax, 0xf7148948; ret; 
0x00000000004357c3: add eax, 0xf7f0ff3; ret; 
0x0000000000473ae8: add eax, 0xfffd4313; cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x000000000048f3ba: add eax, 0xffff50e9; push rbx; ret; 
0x00000000004200c2: add eax, 0xffffeb59; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200d0: add eax, 0xfffff57b; mov qword ptr [rip + 0x299784], rax; ret; 
0x000000000044e915: add eax, 1; push rax; call rbx; 
0x00000000004746b1: add eax, 1; ret; 
0x00000000004746a8: add eax, 2; ret; 
0x00000000004746c1: add eax, 3; ret; 
0x000000000045acc9: add eax, dword ptr [0]; ret; 
0x000000000048d00c: add eax, dword ptr [rax + 0xd0]; add rsp, 0x18; ret; 
0x000000000047b618: add eax, dword ptr [rax]; add al, ch; mov al, 0x65; clc; call qword ptr [rbp + 0x53]; 
0x0000000000456b05: add eax, dword ptr [rax]; add al, ch; ret; 
0x000000000047b5f8: add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000489676: add eax, dword ptr [rax]; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000489d4c: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000046eb81: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x351fd; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047b5b9: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000046e3cc: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x3576e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000041cd98: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000048a8b6: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000045b6f9: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x5b724; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000486b8e: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400fab: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000420cb7: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004204ba: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000420680: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000042b447: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e731: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b475: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044f504: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047fc81: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x23a55b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000044a78c: add eax, dword ptr [rax]; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000474703: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000449c9b: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044bebc: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x000000000044851c: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x00000000004898c0: add eax, dword ptr [rax]; add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x000000000044bea5: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000461e71: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x0000000000488709: add eax, dword ptr [rax]; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000044bf45: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047c536: add eax, dword ptr [rax]; add dh, dh; ret 0x7403; 
0x000000000047b12f: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x0000000000418fc8: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000041b037: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000044821b: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x000000000046e3d4: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046eb1b: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046eb89: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046e31a: add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000418199: add eax, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000448200: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000047d1fc: add eax, dword ptr [rbp - 0xb8]; call rax; 
0x0000000000489aad: add eax, dword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004b3ee1: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x000000000045d3cc: add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d75cd6; ret 0x8341; 
0x000000000041062b: add eax, dword ptr [rcx]; add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000423b21: add eax, dword ptr [rdi]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000486c43: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000481d94: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821c4: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000481ef5: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x000000000047c9b1: add eax, dword ptr [rdx + rax + 0x4634a00]; cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; jmp rax; 
0x00000000004b3f15: add eax, dword ptr [rdx]; cld; ret; 
0x00000000004b3f49: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047c276: add eax, dword ptr [rsi]; call rax; 
0x0000000000489910: add eax, dword ptr [rsi]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000418fc7: add eax, dword ptr cs:[rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000048ace6: add eax, eax; jmp rax; 
0x0000000000402294: add eax, ebp; jmp rax; 
0x000000000047c597: add eax, ebx; call rax; 
0x000000000044d59c: add eax, ebx; jmp rax; 
0x00000000004408b8: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x000000000046e3db: add eax, ecx; jmp rax; 
0x000000000042b841: add eax, ecx; ret; 
0x000000000047479d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c1d: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba2d: add eax, ecx; vzeroupper; ret; 
0x000000000042b83e: add eax, edi; add rax, rcx; ret; 
0x000000000047479a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c1a: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba2a: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x000000000046ea0b: add eax, edi; jmp rax; 
0x000000000042b9b4: add eax, edi; ret; 
0x0000000000485210: add eax, edi; sub rax, r8; ret; 
0x0000000000474855: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd5: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000446c7a: add eax, edi; sub rax, rsi; ret; 
0x000000000042bac5: add eax, edi; vzeroupper; ret; 
0x000000000040202a: add eax, edx; jmp rax; 
0x000000000040eb3c: add eax, edx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000440bc6: add eax, edx; sub rax, rdi; ret; 
0x00000000004743ab: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000047f166: add eax, esi; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004481ac: add eax, esi; jmp rax; 
0x000000000048ad09: add eax, esi; test dil, dil; jns 0x8ad13; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dd29: add eax, esi; test dil, dil; jns 0x8dd33; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f929: add eax, esi; test dil, dil; jns 0x8f933; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048bf5d: add eax, esp; jmp rax; 
0x0000000000462978: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000471f33: add ebp, esp; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000047c272: add ebx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000489b01: add ebx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489a29: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048a30a: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000488600: add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000004173b1: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004b3f06: add ebx, dword ptr [rbx + 3]; ret; 
0x0000000000435983: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004480de: add ecx, 0x100; cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x0000000000447f1b: add ecx, 0x80; cmp rdx, rcx; jne 0x47f07; vzeroupper; ret; 
0x0000000000442625: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000424957: add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000045744d: add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000040e14e: add ecx, dword ptr [rax + 1]; fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000484c06: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000044bd87: add ecx, dword ptr [rax - 0x77]; add eax, 0x26e3e1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000442629: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000047e6c7: add ecx, dword ptr [rax - 0x77]; mov rax, rcx; ret; 
0x000000000044fe03: add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000048ba1f: add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040eb41: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x0000000000480c8a: add ecx, dword ptr [rbp - 0x77]; dec byte ptr [rax - 0x7d]; ret; 
0x0000000000483180: add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x00000000004356f2: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004b3ed2: add ecx, dword ptr [rbx + 3]; ret; 
0x00000000004448d4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004442a4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000410695: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x0000000000489aae: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000442626: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x0000000000402373: add ecx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000448ebf: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x0000000000448f1d: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000004abfd1: add ecx, dword ptr [rsi + rcx - 0x50]; add al, byte ptr [rdx]; ret 0xb00e; 
0x00000000004aca7f: add ecx, dword ptr [rsp + rax + 0x2c0583]; add byte ptr [rax], al; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004657a9: add ecx, eax; mov eax, r9d; ret; 
0x000000000042c322: add ecx, ebx; jmp rcx; 
0x00000000004481d4: add ecx, esi; jmp rcx; 
0x000000000044480d: add edi, 0x10; lea r11, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ed: add edi, 0x10; lea r11, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446c19: add edi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x000000000047b50d: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000444842: add edi, 0x20; lea r11, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444222: add edi, 0x20; lea r11, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044bf42: add edi, 0x308; mov esi, 0x80; syscall; 
0x000000000044470f: add edi, 0x30; lea r11, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440ef: add edi, 0x30; lea r11, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042c319: add edi, dword ptr [rsi + 6]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000464264: add edi, eax; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004b47f5: add edi, ebp; jmp qword ptr [rdx]; 
0x00000000004500f0: add edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000045a4a4: add edi, ebx; jmp rdi; 
0x0000000000437181: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437001: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e81: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d02: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b81: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a01: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436881: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436701: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436581: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436401: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436281: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436101: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f81: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e01: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c81: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434521: add edi, edx; add rsi, rdx; lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434222: add edi, edx; add rsi, rdx; lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f21: add edi, edx; add rsi, rdx; lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c21: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433921: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433621: add edi, edx; add rsi, rdx; lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433321: add edi, edx; add rsi, rdx; lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430637: add edi, edx; add rsi, rdx; lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc67: add edi, edx; add rsi, rdx; lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494859: add edi, edx; call qword ptr [rax + 3]; 
0x00000000004948d9: add edi, edx; jmp qword ptr [rdx]; 
0x0000000000494a59: add edi, edx; jmp rax; 
0x000000000040d60c: add edi, edx; jmp rdi; 
0x00000000004373ec: add edi, edx; lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b47: add edi, edx; lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359eb: add edi, edx; lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348f8: add edi, edx; lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432cea: add edi, edx; lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433067: add edi, edx; lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef5: add edi, edx; lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054b: add edi, edx; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430486: add edi, edx; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7b: add edi, edx; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab6: add edi, edx; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd71: add edi, edx; lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf7: add edi, edx; lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc68: add edi, edx; lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca5d: add edi, edx; lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92b: add edi, edx; lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c865: add edi, edx; lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e7: add edi, edx; lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c750: add edi, edx; lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c554: add edi, edx; lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c423: add edi, edx; lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c314: add edi, edx; lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000431230: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e860: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c1c: add edi, edx; sfence; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430234: add edi, edx; sfence; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004ab205: add edi, esi; call rsp; 
0x00000000004b2d51: add edi, esp; jmp rdx; 
0x00000000004447c8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441a8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004833e2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000040d323: add edx, edi; jmp rdx; 
0x0000000000444809: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441e9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044483e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044421e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044470b: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440eb: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004119c7: add esi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f8e0: add esi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000480e14: add esi, 1; test dl, dl; jne 0x80dea; movsx eax, cl; neg eax; ret; 
0x000000000044e14b: add esi, dword ptr [rbp - 0x53]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458856: add esi, dword ptr [rdi + rax - 0xd]; ret; 
0x0000000000459fa5: add esi, eax; jmp rsi; 
0x00000000004358a3: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000446fd5: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004496ac: add esi, ebx; ret; 
0x000000000041f5d0: add esi, ebx; stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000444781: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444764: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444161: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004482de: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x00000000004373e9: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b44: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359e8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348f5: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ce7: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433064: add esi, edx; add rdi, rdx; lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef2: add esi, edx; add rdi, rdx; lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430548: add esi, edx; add rdi, rdx; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430483: add esi, edx; add rdi, rdx; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db78: add esi, edx; add rdi, rdx; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab3: add esi, edx; add rdi, rdx; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd6e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc65: add esi, edx; add rdi, rdx; lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca5a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c928: add esi, edx; add rdi, rdx; lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c862: add esi, edx; add rdi, rdx; lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c74d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c551: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c420: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c311: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000437184: add esi, edx; lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437004: add esi, edx; lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e84: add esi, edx; lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d05: add esi, edx; lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b84: add esi, edx; lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a04: add esi, edx; lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436884: add esi, edx; lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436704: add esi, edx; lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436584: add esi, edx; lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436404: add esi, edx; lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436284: add esi, edx; lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436104: add esi, edx; lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f84: add esi, edx; lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e04: add esi, edx; lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c84: add esi, edx; lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a4: add esi, edx; lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434524: add esi, edx; lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a4: add esi, edx; lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434225: add esi, edx; lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a4: add esi, edx; lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f24: add esi, edx; lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da4: add esi, edx; lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c24: add esi, edx; lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa4: add esi, edx; lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433924: add esi, edx; lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a4: add esi, edx; lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433624: add esi, edx; lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a4: add esi, edx; lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433324: add esi, edx; lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a4: add esi, edx; lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b60: add esi, edx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a10: add esi, edx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318c0: add esi, edx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431770: add esi, edx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431620: add esi, edx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314d0: add esi, edx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431380: add esi, edx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310e0: add esi, edx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f90: add esi, edx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e40: add esi, edx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cf0: add esi, edx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ba0: add esi, edx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a50: add esi, edx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430900: add esi, edx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043063a: add esi, edx; lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f190: add esi, edx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f040: add esi, edx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eef0: add esi, edx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eda0: add esi, edx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec50: add esi, edx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb00: add esi, edx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9b0: add esi, edx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e710: add esi, edx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5c0: add esi, edx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e470: add esi, edx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e320: add esi, edx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1d0: add esi, edx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e080: add esi, edx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df30: add esi, edx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc6a: add esi, edx; lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446b7d: add esp, 0x100; sub rax, rdx; ret; 
0x00000000004589e6: add esp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416ee1: add esp, 0x10; pop rbx; jmp rax; 
0x00000000004110e1: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449cdf: add esp, 0x10; pop rbx; ret; 
0x0000000000482588: add esp, 0x110; pop rbx; ret; 
0x000000000040dc9e: add esp, 0x118; ret; 
0x000000000045affa: add esp, 0x148; ret; 
0x000000000041a9f9: add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041fcc3: add esp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004202ee: add esp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000044d2ba: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000412175: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045adb2: add esp, 0x18; ret; 
0x000000000041fd11: add esp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000048cbc3: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044e14f: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423e00: add esp, 0x20; call 0x10810; call 0xdcf0; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004179ed: add esp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x00000000004175cd: add esp, 0x20; pop rbx; jmp rax; 
0x0000000000417a26: add esp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000482609: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000041733f: add esp, 0x20; pop rbx; ret; 
0x000000000048d274: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d281: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000448d02: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044967a: add esp, 0x28; ret; 
0x000000000044f698: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847df: add esp, 0x30; pop rbx; ret; 
0x000000000048aad6: add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000040db54: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004169ee: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000475741: add esp, 0x38; ret; 
0x000000000048842c: add esp, 0x40; pop rbx; ret; 
0x0000000000481b1c: add esp, 0x48; jmp qword ptr [rax]; 
0x0000000000449352: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000488513: add esp, 0x50; pop rbx; ret; 
0x0000000000481aaa: add esp, 0x58; jmp qword ptr [rax]; 
0x00000000004498aa: add esp, 0x58; ret; 
0x000000000044979c: add esp, 0x68; ret; 
0x0000000000473ba4: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449b2f: add esp, 0x78; ret; 
0x00000000004108f7: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000046810e: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000418fcb: add esp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000041b03a: add esp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041b1a9: add esp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000465857: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000475223: add esp, 0x80; pop rbx; ret; 
0x000000000045caf3: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000040ed5f: add esp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bc8d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000400e62: add esp, 0x88; pop rbx; ret; 
0x00000000004015ef: add esp, 0x98; ret; 
0x000000000046f317: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000475343: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000457c66: add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000414c35: add esp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000485421: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004103d7: add esp, 0xd0; pop rbx; ret; 
0x0000000000410566: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000410034: add esp, 0xd8; ret; 
0x0000000000462975: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000412584: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004867ca: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004124ef: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000047fb9b: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004108fe: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047e5f9: add esp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000044b2c0: add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a4fc: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000416f99: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000488369: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000413fa4: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401c83: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000400413: add esp, 8; ret; 
0x00000000004241c9: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004385b5: add qword ptr [r10 - 0x2f], r12; jl 0x38603; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041f2ec: add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000435982: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000435912: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x00000000004358a2: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004ab204: add r15d, esi; call rsp; 
0x000000000042b474: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048ad08: add r8, rsi; test dil, dil; jns 0x8ad13; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dd28: add r8, rsi; test dil, dil; jns 0x8dd33; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f928: add r8, rsi; test dil, dil; jns 0x8f933; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000045742e: add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000045744c: add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004657a8: add r9d, eax; mov eax, r9d; ret; 
0x0000000000474874: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ce4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad4: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000474894: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d04: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae4: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000004748e2: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d52: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bb12: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004746b0: add rax, 1; ret; 
0x00000000004746a7: add rax, 2; ret; 
0x00000000004746c0: add rax, 3; ret; 
0x000000000045acc8: add rax, qword ptr [0]; ret; 
0x000000000047c275: add rax, qword ptr [r14]; call rax; 
0x000000000048990f: add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000048d00b: add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x000000000047d1fb: add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000489aac: add rax, qword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000486c42: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000481d93: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821c3: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000481ef4: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x000000000045acc7: add rax, qword ptr fs:[0]; ret; 
0x000000000047c596: add rax, r11; call rax; 
0x000000000048bf5c: add rax, r12; jmp rax; 
0x0000000000402293: add rax, r13; jmp rax; 
0x000000000048c85d: add rax, r14; jmp rax; 
0x000000000048af0b: add rax, r15; jmp rax; 
0x000000000048ace5: add rax, r8; jmp rax; 
0x000000000048c495: add rax, r9; jmp rax; 
0x000000000044d613: add rax, rbp; jmp rax; 
0x000000000044d59b: add rax, rbx; jmp rax; 
0x00000000004408b7: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000046e3da: add rax, rcx; jmp rax; 
0x000000000042b840: add rax, rcx; ret; 
0x000000000047479c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c1c: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba2c: add rax, rcx; vzeroupper; ret; 
0x000000000042b83d: add rax, rdi; add rax, rcx; ret; 
0x0000000000474799: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c19: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba29: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000046ea0a: add rax, rdi; jmp rax; 
0x000000000042b9b3: add rax, rdi; ret; 
0x000000000048520f: add rax, rdi; sub rax, r8; ret; 
0x0000000000474854: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd4: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000446c79: add rax, rdi; sub rax, rsi; ret; 
0x000000000042bac4: add rax, rdi; vzeroupper; ret; 
0x0000000000402029: add rax, rdx; jmp rax; 
0x000000000040eb3b: add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000440bc5: add rax, rdx; sub rax, rdi; ret; 
0x00000000004743aa: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004481ab: add rax, rsi; jmp rax; 
0x000000000047c271: add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000489b00: add rbx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489a28: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004480dd: add rcx, 0x100; cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x0000000000447f1a: add rcx, 0x80; cmp rdx, rcx; jne 0x47f07; vzeroupper; ret; 
0x000000000042c321: add rcx, r11; jmp rcx; 
0x00000000004481d3: add rcx, rsi; jmp rcx; 
0x000000000044480c: add rdi, 0x10; lea r11, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ec: add rdi, 0x10; lea r11, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446c18: add rdi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x000000000047b50c: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000444841: add rdi, 0x20; lea r11, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444221: add rdi, 0x20; lea r11, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044bf41: add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044470e: add rdi, 0x30; lea r11, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440ee: add rdi, 0x30; lea r11, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040d60b: add rdi, r10; jmp rdi; 
0x000000000045a4a3: add rdi, r11; jmp rdi; 
0x0000000000437180: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437000: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e80: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d01: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b80: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a00: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436880: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436700: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436580: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436400: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436280: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436100: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f80: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e00: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c80: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434520: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434221: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f20: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c20: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433920: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433620: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433320: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430636: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc66: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004373eb: add rdi, rdx; lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b46: add rdi, rdx; lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359ea: add rdi, rdx; lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348f7: add rdi, rdx; lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ce9: add rdi, rdx; lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433066: add rdi, rdx; lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef4: add rdi, rdx; lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054a: add rdi, rdx; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430485: add rdi, rdx; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7a: add rdi, rdx; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab5: add rdi, rdx; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd70: add rdi, rdx; lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf6: add rdi, rdx; lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc67: add rdi, rdx; lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca5c: add rdi, rdx; lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92a: add rdi, rdx; lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c864: add rdi, rdx; lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e6: add rdi, rdx; lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c74f: add rdi, rdx; lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c553: add rdi, rdx; lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c422: add rdi, rdx; lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c313: add rdi, rdx; lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043122f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e85f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c1b: add rdi, rdx; sfence; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430233: add rdi, rdx; sfence; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004447c7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441a7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004833e1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000040d322: add rdx, rdi; jmp rdx; 
0x0000000000444808: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441e8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044483d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044421d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044470a: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440ea: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004119c6: add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f8df: add rsi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000480e13: add rsi, 1; test dl, dl; jne 0x80dea; movsx eax, cl; neg eax; ret; 
0x0000000000459fa4: add rsi, r8; jmp rsi; 
0x0000000000444780: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444763: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444160: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004373e8: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b43: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359e7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348f4: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ce6: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433063: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef1: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430547: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430482: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db77: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab2: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd6d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc64: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca59: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c927: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c861: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c74c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c550: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c41f: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c310: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000437183: add rsi, rdx; lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437003: add rsi, rdx; lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e83: add rsi, rdx; lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d04: add rsi, rdx; lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b83: add rsi, rdx; lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a03: add rsi, rdx; lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436883: add rsi, rdx; lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436703: add rsi, rdx; lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436583: add rsi, rdx; lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436403: add rsi, rdx; lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436283: add rsi, rdx; lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436103: add rsi, rdx; lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f83: add rsi, rdx; lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e03: add rsi, rdx; lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c83: add rsi, rdx; lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a3: add rsi, rdx; lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434523: add rsi, rdx; lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a3: add rsi, rdx; lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434224: add rsi, rdx; lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a3: add rsi, rdx; lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f23: add rsi, rdx; lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da3: add rsi, rdx; lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c23: add rsi, rdx; lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa3: add rsi, rdx; lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433923: add rsi, rdx; lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a3: add rsi, rdx; lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433623: add rsi, rdx; lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a3: add rsi, rdx; lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433323: add rsi, rdx; lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a3: add rsi, rdx; lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b5f: add rsi, rdx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a0f: add rsi, rdx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318bf: add rsi, rdx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043176f: add rsi, rdx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043161f: add rsi, rdx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314cf: add rsi, rdx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043137f: add rsi, rdx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310df: add rsi, rdx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f8f: add rsi, rdx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e3f: add rsi, rdx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cef: add rsi, rdx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b9f: add rsi, rdx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a4f: add rsi, rdx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004308ff: add rsi, rdx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430639: add rsi, rdx; lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f18f: add rsi, rdx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f03f: add rsi, rdx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeef: add rsi, rdx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed9f: add rsi, rdx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec4f: add rsi, rdx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eaff: add rsi, rdx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9af: add rsi, rdx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e70f: add rsi, rdx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5bf: add rsi, rdx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e46f: add rsi, rdx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e31f: add rsi, rdx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1cf: add rsi, rdx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e07f: add rsi, rdx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df2f: add rsi, rdx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc69: add rsi, rdx; lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446b7c: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004589e5: add rsp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416ee0: add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004110e0: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449cde: add rsp, 0x10; pop rbx; ret; 
0x0000000000482587: add rsp, 0x110; pop rbx; ret; 
0x000000000040dc9d: add rsp, 0x118; ret; 
0x000000000045aff9: add rsp, 0x148; ret; 
0x000000000041a9f8: add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041fcc2: add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004202ed: add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000044d2b9: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000412174: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045adb1: add rsp, 0x18; ret; 
0x000000000041fd10: add rsp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000048cbc2: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044e14e: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423dff: add rsp, 0x20; call 0x10810; call 0xdcf0; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004179ec: add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x00000000004175cc: add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000417a25: add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000482608: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000041733e: add rsp, 0x20; pop rbx; ret; 
0x000000000048d273: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d280: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000448d01: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000449679: add rsp, 0x28; ret; 
0x000000000044f697: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847de: add rsp, 0x30; pop rbx; ret; 
0x000000000048aad5: add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000040db53: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004169ed: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000475740: add rsp, 0x38; ret; 
0x000000000048842b: add rsp, 0x40; pop rbx; ret; 
0x0000000000481b1b: add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000449351: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000488512: add rsp, 0x50; pop rbx; ret; 
0x0000000000481aa9: add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004498a9: add rsp, 0x58; ret; 
0x000000000044979b: add rsp, 0x68; ret; 
0x0000000000473ba3: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449b2e: add rsp, 0x78; ret; 
0x00000000004108f6: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000046810d: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000418fca: add rsp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000041b039: add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041b1a8: add rsp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000465856: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000475222: add rsp, 0x80; pop rbx; ret; 
0x000000000045caf2: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000040ed5e: add rsp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bc8c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000400e61: add rsp, 0x88; pop rbx; ret; 
0x00000000004015ee: add rsp, 0x98; ret; 
0x000000000046f316: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000475342: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000457c65: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000414c34: add rsp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000485420: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004103d6: add rsp, 0xd0; pop rbx; ret; 
0x0000000000410565: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000410033: add rsp, 0xd8; ret; 
0x0000000000462974: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000412583: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004867c9: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004124ee: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000047fb9a: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004108fd: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047e5f8: add rsp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000044b2bf: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a4fb: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000416f98: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000488368: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000413fa3: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401c82: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000400412: add rsp, 8; ret; 
0x00000000004241c8: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004ab1dc: add sil, r15b; push qword ptr [rax + rax - 2]; jmp rsp; 
0x00000000004852da: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000494adc: and ah, bh; stc; dec dword ptr [rsi + 0x33]; cli; call rax; 
0x0000000000494508: and ah, bl; stc; inc dword ptr [rax]; fdivp st(1); jmp rax; 
0x0000000000494598: and ah, dl; stc; push qword ptr [rax - 0x2b]; stc; push qword ptr [rax - 0x7f000640]; ret; 
0x000000000046b0d1: and al, 0; jmp rax; 
0x000000000046b624: and al, 0; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046bcfa: and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004754d3: and al, 0; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x000000000048d148: and al, 0x10; add rsp, 0x28; ret; 
0x000000000041213e: and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000044a8e8: and al, 0x10; call rax; 
0x000000000048254b: and al, 0x10; call rdx; 
0x000000000047555c: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040120c: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041d34c: and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004122ca: and al, 0x10; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004175f8: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000471962: and al, 0x10; mov rdi, r12; call rbx; 
0x000000000040dfe3: and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004740ba: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040e073: and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040e108: and al, 0x10; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048eae8: and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000486b8c: and al, 0x14; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000047e433: and al, 0x18; call 0x7dd60; add rsp, 0xd8; ret; 
0x0000000000401215: and al, 0x18; call rax; 
0x0000000000449c0c: and al, 0x18; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x00000000004122cf: and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000475560: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000449b40: and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044e898: and al, 0x18; mov r9, r13; call rbx; 
0x000000000047187d: and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004740bf: and al, 0x18; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000482546: and al, 0x18; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004175f3: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000475557: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000045321e: and al, 0x20; call rax; 
0x0000000000473d80: and al, 0x20; call rbx; 
0x0000000000449c16: and al, 0x20; je 0x49c40; mov eax, 0x48; syscall; 
0x000000000041d347: and al, 0x20; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000450eb2: and al, 0x20; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000452c5a: and al, 0x20; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004a7a44: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000041fcc0: and al, 0x28; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004202eb: and al, 0x28; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000041d342: and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b0a: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a98: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000450ead: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004231f3: and al, 0x28; mov rdi, rbp; call rax; 
0x00000000004515c1: and al, 0x28; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f9e: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004756b8: and al, 0x28; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000451a9b: and al, 0x30; call rbx; 
0x0000000000449c11: and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x0000000000473f6e: and al, 0x30; mov rdi, rbp; call rbx; 
0x0000000000481b0f: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9d: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000494c8c: and al, 0x35; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x00000000004a647c: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000452d1a: and al, 0x38; add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x00000000004515cb: and al, 0x38; call rbx; 
0x0000000000473c58: and al, 0x38; lea rcx, [rax + 1]; call rbx; 
0x00000000004512d7: and al, 0x38; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000481b14: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa2: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000451a96: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000045320f: and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000049590c: and al, 0x3d; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000466c1c: and al, 0x40; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000045729e: and al, 0x40; add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000045605e: and al, 0x40; add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x0000000000481b19: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa7: and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000455fa8: and al, 0x40; call rbx; 
0x0000000000453219: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004515c6: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004512d2: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000451a91: and al, 0x40; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000449b78: and al, 0x41; mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000486c41: and al, 0x48; add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000416f08: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x000000000048abb8: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8bc: and al, 0x48; add esp, 0x38; ret; 
0x00000000004707f9: and al, 0x48; mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004715c1: and al, 0x48; mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041745b: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000413be4: and al, 0x48; mov edi, ebx; call rax; 
0x0000000000455fa3: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000453214: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004512cd: and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000473c54: and al, 0x4c; lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000489b07: and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004148b5: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000489ab5: and al, 0x4c; mov esi, esp; mov edi, ebp; call rax; 
0x0000000000481d9a: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821ca: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000420bb3: and al, 0x68; call rax; 
0x0000000000481efb: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x0000000000413e59: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004632ee: and al, 0x83; ret; 
0x0000000000457409: and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000457427: and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457445: and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000045795d: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000419a73: and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000040489c: and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000491fab: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004916bb: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000045226b: and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000046bcf8: and al, 0xb0; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000048d3de: and al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000048cd2b: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000479c70: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000449cdc: and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x0000000000449cd3: and al, 0xc; call 0x4bf00; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000449b83: and al, 0xc; mov eax, 0x48; syscall; 
0x0000000000401210: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000416f03: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040dc2f: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000004174cc: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000040dc37: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000048a8b3: and al, 0xe8; ja 0x8a8ba; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000418ae3: and al, 0xe9; ret 0xfffd; 
0x000000000045267e: and al, 0xf6; ret; 
0x0000000000424b4a: and al, 2; add bh, dh; ret 0; 
0x0000000000424b84: and al, 2; add byte ptr [rax - 0x73], cl; add eax, 0x223d2; cmovne rax, rdx; ret; 
0x0000000000424e8b: and al, 2; add byte ptr [rax - 0x73], cl; add eax, 0x2247b; cmovne rax, rdx; ret; 
0x000000000044994c: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004175fd: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000417a23: and al, 8; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x00000000004144eb: and al, 8; call 0x13180; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040dfef: and al, 8; call rax; 
0x000000000041d351: and al, 8; call rcx; 
0x000000000046eb12: and al, 8; ja 0x6eb48; lea rdi, [rip + 0x351af]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004497eb: and al, 8; mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449c43: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044a8e3: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000411b10: and al, 8; mov rdi, r15; call rax; 
0x00000000004144f5: and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000411091: and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000049500f: and al, al; cli; call rax; 
0x000000000049500f: and al, al; cli; call rax; cli; jmp rax; 
0x000000000047fb6f: and al, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000049052c: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000449cd7: and al, byte ptr [rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x00000000004600cd: and al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000048f3a4: and al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000048d04a: and al, byte ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x8d06c; mov rax, qword ptr [rax]; ret; 
0x0000000000490003: and al, byte ptr [rax]; jne 0x8ffe8; pop rbx; ret; 
0x000000000048d0b5: and al, byte ptr [rax]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x0000000000424caa: and al, byte ptr [rdx]; add bh, dh; ret 0; 
0x0000000000440e2a: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x0000000000449cd6: and al, byte ptr es:[rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000421952: and al, ch; mov eax, 0xe8fffeee; xchg eax, ebx; ret; 
0x000000000047404c: and al, ch; out dx, al; ret; 
0x0000000000449157: and al, ch; ret; 
0x0000000000460219: and ax, 0x4800; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x0000000000468e61: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000045321f: and bh, bh; rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x00000000004a6a25: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000494558: and bl, ah; stc; jmp qword ptr [rax]; 
0x00000000004a75c3: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000411dd9: and byte ptr [r8 + 1], r9b; ret; 
0x000000000045a6a3: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x5a6af; call rax; 
0x0000000000416e20: and byte ptr [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000411d3e: and byte ptr [r9 - 0x77], r9b; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000047131e: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004715bb: and byte ptr [rax + 0x3b], cl; sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000474877: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ce7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad7: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000400fb1: and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000411dda: and byte ptr [rax + 1], cl; ret; 
0x000000000043023c: and byte ptr [rax + 6], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000465d1e: and byte ptr [rax + 9], cl; ret 0xff83; 
0x0000000000440bbd: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004743f9: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000450eb3: and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000452c5b: and byte ptr [rax - 0x75], cl; je 0x52c84; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000468b79: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045d65f: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004770f3: and byte ptr [rax - 0x75], cl; sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000413db9: and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdb5ae; jmp qword ptr [rsi + 0x2e]; 
0x000000000045a6a4: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x5a6af; call rax; 
0x000000000048d226: and byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000467754: and byte ptr [rax - 0x7d], cl; ret 0xe920; 
0x000000000044fb96: and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000413702: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000049500d: and byte ptr [rax], ah; and al, al; cli; call rax; 
0x000000000049500d: and byte ptr [rax], ah; and al, al; cli; call rax; cli; jmp rax; 
0x000000000049500b: and byte ptr [rax], ah; and byte ptr [rax], ah; and al, al; cli; call rax; 
0x0000000000495009: and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; and al, al; cli; call rax; 
0x0000000000495008: and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; 
0x000000000049500a: and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; 
0x000000000049500c: and byte ptr [rax], ah; and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; 
0x000000000049500c: and byte ptr [rax], ah; and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; cli; jmp rax; 
0x000000000049500e: and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; 
0x000000000049500e: and byte ptr [rax], ah; sar byte ptr [rsi], 0xfa; call rax; cli; jmp rax; 
0x000000000048d1f9: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046c002: and byte ptr [rax], al; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004482ba: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000494024: and byte ptr [rax], ch; stc; inc dword ptr [rax + 0x29]; stc; jmp qword ptr [rax + 0x2a]; 
0x0000000000444844: and byte ptr [rbp + rcx*4 + 0x1d], cl; push rsp; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430855: and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x000000000042de85: and byte ptr [rbp + rcx*4 + 0x1d], cl; shl dword ptr [rbx + 6], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004943c4: and byte ptr [rbp - 0x592f0007], 0xf9; jmp qword ptr [rax]; 
0x00000000004950ac: and byte ptr [rbp - 0x713f0006], cl; cli; jmp qword ptr [rax - 0x70]; 
0x0000000000492271: and byte ptr [rbp - 0x77], cl; ret; 
0x000000000048260b: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004679b3: and byte ptr [rbx + rcx*4 + 0x40], cl; sub cl, ch; ret 0xffe8; 
0x0000000000482662: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000046e9fc: and byte ptr [rbx - 0x78f0d608], al; mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000495028: and byte ptr [rbx - 6], cl; push qword ptr [rax]; cli; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x00000000004b2d50: and byte ptr [rbx], al; cld; jmp rdx; 
0x000000000045d670: and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000468b8e: and byte ptr [rcx + 0x2b], cl; push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000416e21: and byte ptr [rcx + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000415f89: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000412541: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046e262: and byte ptr [rcx + rbp], bh; ja 0x6e290; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000041d348: and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000494318: and byte ptr [rcx + rdi*8 - 0x641df01], bh; push qword ptr [rax + 0x70fff9b0]; mov dl, 0xf9; call qword ptr [rax - 0x4c]; 
0x00000000004179ef: and byte ptr [rcx - 0x2dcea42f], cl; jmp rax; 
0x000000000040e987: and byte ptr [rcx - 0x353eb711], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000046a4b9: and byte ptr [rcx - 0x537bf0ce], cl; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6a4d8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000048d3d4: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000411d3f: and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000045f859: and byte ptr [rcx - 1], bh; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000047f4b4: and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000494044: and byte ptr [rcx], dh; stc; inc dword ptr [rax + 0x32]; stc; jmp qword ptr [rax + 0x33]; 
0x00000000004947f8: and byte ptr [rcx], dl; cli; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000447ce1: and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000048dfb6: and byte ptr [rdi + 0x76], dh; adc eax, 0x30ff8040; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee16: and byte ptr [rdi + 0x76], dh; adc eax, 0x30ff8040; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000044700c: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447d31: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004940fc: and byte ptr [rdi - 7], ch; call qword ptr [rax]; 
0x000000000042177e: and byte ptr [rdi], al; add byte ptr [rcx], dh; sar byte ptr [rsi + 0x80000], 0xe8; ret; 
0x0000000000447221: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000444d8d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x000000000041058b: and byte ptr [rdi], cl; test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x0000000000444c70: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004385f6: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000446d88: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000494f54: and byte ptr [rdx], ch; cli; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x00000000004b095c: and byte ptr [rdx], dl; add bh, al; sti; hlt; jmp qword ptr [rbx]; 
0x0000000000494d40: and byte ptr [rip + 0x2ca0fffa], ch; cli; jmp qword ptr [rax]; 
0x0000000000494a0c: and byte ptr [rip + 0x4a0fffa], al; cli; call qword ptr [rax]; 
0x00000000004b4d5c: and byte ptr [rsi + 0x2db00000], dl; std; jmp qword ptr [rax + 1]; 
0x000000000042c3ba: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c3b5: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042ccfc: and byte ptr [rsi + rax], dh; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000049431c: and byte ptr [rsi - 0x4f4f0007], bh; stc; push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x0000000000448278: and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000004746a2: and ch, 0xf; je 0x746c0; add rax, 2; ret; 
0x000000000049455c: and ch, ah; stc; call rax; 
0x000000000049455c: and ch, ah; stc; call rax; mov esi, 0xc310fff9; stc; jmp qword ptr [rax - 0x3c]; 
0x0000000000472f7c: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000493f34: and ch, bh; clc; call qword ptr [rax - 3]; 
0x0000000000493f34: and ch, bh; clc; call qword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x000000000047468d: and cl, 0xf; je 0x746b0; ret; 
0x0000000000494554: and cl, ah; stc; jmp qword ptr [rax]; 
0x0000000000494015: and cl, bh; call rax; 
0x0000000000495200: and cl, bh; cli; inc dword ptr [rax - 7]; cli; jmp qword ptr [rax - 7]; 
0x000000000044c871: and cl, byte ptr [rax + 0x63]; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000048d0ca: and cl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x000000000041208d: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f2b4: and cl, byte ptr [rax - 0x77]; ret 0x1f0f; 
0x000000000042bbfd: and cl, byte ptr [rcx - 0x77]; ret; 
0x0000000000473a8a: and cl, byte ptr [rdx]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000467758: and cl, ch; push rax; call 0xffffffff8954775f; ret 0x894c; 
0x00000000004919b1: and cl, ch; sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004481e3: and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000004490ed: and dh, ah; mov edi, edx; mov eax, r8d; syscall; 
0x000000000044c0e9: and dh, al; sub byte ptr [rcx], al; ret; 
0x0000000000468e60: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004b0f81: and dl, bh; call qword ptr [rdi]; 
0x000000000049414c: and dl, byte ptr [rax - 0x723f0007]; stc; push qword ptr [rax - 0x72]; stc; jmp qword ptr [rax - 0x71]; 
0x0000000000495160: and dl, dh; cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xe]; 
0x00000000004689d8: and dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000412090: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000468b41: and dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x00000000004689d9: and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000449cb9: and dword ptr [rax], eax; add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004a9562: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x000000000042dcd9: and dword ptr [rbp + 6], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004181f7: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041824f: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494188: and dword ptr [rcx + rdi*8 - 0x66b4e01], edx; inc dword ptr [rcx - 0x6b]; stc; call rcx; 
0x0000000000461cff: and dword ptr [rcx], eax; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000041907e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x0000000000424dea: and dword ptr [rdx], eax; add bh, dh; ret 0; 
0x0000000000424e24: and dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x22132; cmovne rax, rdx; ret; 
0x00000000004a6619: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004a9561: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045accb: and eax, 0; ret; 
0x000000000047c07f: and eax, 0x134d870f; add byte ptr [rax], al; lea rcx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004720fd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424edd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241ed: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424ead: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721cd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a7d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047212d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000047bb37: and eax, 0x23e6e4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000041002c: and eax, 0x28; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100dd: and eax, 0x28; jne 0x100ec; add rsp, 0xd8; ret; 
0x00000000004488ba: and eax, 0x28; jne 0x488e4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449672: and eax, 0x28; jne 0x49689; add rsp, 0x28; ret; 
0x0000000000449790: and eax, 0x28; jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a2: and eax, 0x28; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b23: and eax, 0x28; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c32: and eax, 0x28; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000044a5a1: and eax, 0x28; jne 0x4a5b7; add rsp, 0x28; ret; 
0x000000000045adaa: and eax, 0x28; jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000045aff2: and eax, 0x28; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681fd: and eax, 0x28; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f5: and eax, 0x28; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475607: and eax, 0x28; jne 0x75653; add rsp, 0x58; ret; 
0x000000000047568a: and eax, 0x28; jne 0x75699; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000475739: and eax, 0x28; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481be5: and eax, 0x28; jne 0x81bf2; add rsp, 0x20; pop rbx; ret; 
0x0000000000481ce0: and eax, 0x28; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481da0: and eax, 0x28; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481f01: and eax, 0x28; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821d0: and eax, 0x28; jne 0x821fe; add rsp, 0x68; ret; 
0x000000000048420c: and eax, 0x28; jne 0x8424e; leave; ret; 
0x00000000004847d3: and eax, 0x28; jne 0x84894; add rsp, 0x30; pop rbx; ret; 
0x0000000000484eb8: and eax, 0x28; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f9b: and eax, 0x28; jne 0x84fb4; add rsp, 0x38; ret; 
0x0000000000488316: and eax, 0x28; jne 0x8832c; add rsp, 0x38; ret; 
0x000000000040dc93: and eax, 0x28; mov eax, r8d; jne 0xdcbc; add rsp, 0x118; ret; 
0x0000000000411089: and eax, 0x28; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004004c9: and eax, 0x2b8bfa; nop; ret; 
0x000000000040ea58: and eax, 0x30; call rax; 
0x000000000040e992: and eax, 0x30; call rdx; 
0x000000000040ea7e: and eax, 0x30; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000045919d: and eax, 0x34894a00; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x00000000004481fd: and eax, 0x3fc00; pop rbx; ret; 
0x00000000004482da: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000448248: and eax, 0x3fffc00; pop rbx; ret; 
0x00000000004755e3: and eax, 0x410000; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x000000000046021a: and eax, 0x48b4800; clc; jmp rax; 
0x000000000045ac4d: and eax, 0x54800; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000004482f3: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000448297: and eax, 0x7ff80000; ret; 
0x000000000048d13d: and eax, 0x85480000; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000424d4b: and eax, 0x8d480002; add eax, 0x225ab; cmovne rax, rdx; ret; 
0x000000000044c14a: and eax, 0x8d48f631; cmp eax, 0x49b71; mov eax, 0x15; syscall; 
0x000000000044bf27: and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x000000000045ac6c: and eax, 0xf3087400; ret; 
0x00000000004481cc: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000406f9a: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a5e1: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000042d930: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d063: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000400e57: and eax, 0xffffffc0; mov qword ptr [rip + 0x2bafbf], rax; add rsp, 0x88; pop rbx; ret; 
0x0000000000440b04: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa3: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000048ad25: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000048d0eb: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004826ac: and eax, 2; sub eax, 1; ret; 
0x0000000000485054: and eax, dword ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004adae1: and eax, dword ptr [rax]; add ah, cl; mov ch, 0xf6; call qword ptr [rdi + 1]; 
0x00000000004ada85: and eax, dword ptr [rax]; add al, bh; mov ah, 0xf6; jmp qword ptr [rax]; 
0x000000000047f2cd: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0x23d0d9; add rsp, 8; ret; 
0x0000000000481a0d: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000047f304: and eax, dword ptr [rax]; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000487788: and eax, dword ptr [rax]; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x00000000004adab9: and eax, dword ptr [rax]; add byte ptr [rbp + rsi*4 - 0xa], dh; call qword ptr [rdi]; 
0x000000000047f2d5: and eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000004852d8: and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004852cf: and eax, dword ptr [rax]; jae 0x852df; mov rdx, qword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047f20c: and eax, dword ptr [rax]; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000048777e: and eax, dword ptr [rax]; jne 0x87800; cmp qword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x0000000000484d2a: and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000047f375: and eax, dword ptr [rax]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x00000000004848e5: and eax, dword ptr [rax]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x00000000004848ca: and eax, dword ptr [rax]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000047f37f: and eax, dword ptr [rax]; mov qword ptr [rsi], rax; ret; 
0x000000000047bb3a: and eax, dword ptr [rax]; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000047f219: and eax, dword ptr [rax]; ret; 
0x000000000047ba82: and eax, dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x0000000000424ce4: and eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22262; cmovne rax, rdx; ret; 
0x0000000000452a6e: and eax, dword ptr [rip + 0x29480000]; ret 0x349; 
0x00000000004730be: and eax, ecx; je 0x73280; bsr rax, rax; add rax, rdi; ret; 
0x0000000000424e69: and ebp, dword ptr [rcx]; add al, byte ptr [rax]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x00000000004181f8: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000418250: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044bec2: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x000000000042d935: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d068: and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000471eea: and ecx, dword ptr [rax - 0x39]; or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044b60a: and ecx, dword ptr [rax - 0x77]; ret 0xabe; 
0x0000000000412dae: and ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000041f2ea: and ecx, ebp; add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000044825e: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000047324e: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000473342: and esi, eax; je 0x73280; bsr rax, rsi; add rax, rdi; ret; 
0x000000000047314c: and esi, ecx; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004b31b1: and esp, edi; jmp qword ptr [rcx]; 
0x000000000044bec1: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x0000000000472f7b: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000440b03: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa2: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000048ad24: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x00000000004ada84: and rax, qword ptr [rax]; add al, bh; mov ah, 0xf6; jmp qword ptr [rax]; 
0x00000000004730bd: and rax, rcx; je 0x73280; bsr rax, rax; add rax, rdi; ret; 
0x000000000047324d: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000473341: and rsi, rax; je 0x73280; bsr rax, rsi; add rax, rdi; ret; 
0x000000000047314b: and rsi, rcx; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044c0e8: and sil, al; sub byte ptr [rcx], al; ret; 
0x000000000046ae76: bnd call qword ptr [rax + 0x38]; 
0x000000000045d669: bnd call qword ptr [rbx + 0x38]; 
0x000000000041d33a: bnd jmp 0x1d1b3; mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041d400: bnd jmp 0x1d20e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000440ce1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad1: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440d01: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae1: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000440d4f: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bb0f: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004408b4: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000042b83a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000440c16: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba26: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000042b9b0: bsf eax, eax; add rax, rdi; ret; 
0x0000000000474851: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd1: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bac1: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000472f91: bsf eax, eax; cmp rdx, rax; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x000000000042b9c0: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b9d0: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b9a0: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042b989: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000440443: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000440223: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000472ae9: bsf eax, eax; sub rdx, rax; jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d50: bsf eax, eax; sub rdx, rax; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d60: bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d70: bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d80: bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000440a66: bsf eax, edx; ret; 
0x0000000000474297: bsf eax, edx; shr rax, 2; ret; 
0x000000000042c2c1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2e1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2a7: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042c031: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000004264ea: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004265b0: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042637c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000440bc2: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743a7: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004447e1: bsf edx, edx; lea r11, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447a9: bsf edx, edx; lea r11, [rip + 0x509ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444784: bsf edx, edx; lea r11, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444767: bsf edx, edx; lea r11, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444189: bsf edx, edx; lea r11, [rip + 0x50f8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444164: bsf edx, edx; lea r11, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000426311: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000440560: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000440340: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000440ab2: bsf rax, rdx; ret; 
0x0000000000474296: bsf rax, rdx; shr rax, 2; ret; 
0x00000000004264e9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004265af: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042637b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000440bc1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743a6: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004447e0: bsf rdx, rdx; lea r11, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447a8: bsf rdx, rdx; lea r11, [rip + 0x509ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444783: bsf rdx, rdx; lea r11, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444766: bsf rdx, rdx; lea r11, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444188: bsf rdx, rdx; lea r11, [rip + 0x50f8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444163: bsf rdx, rdx; lea r11, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000426310: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004730c7: bsr eax, eax; add rax, rdi; ret; 
0x00000000004734a1: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000047334b: bsr eax, esi; add rax, rdi; ret; 
0x0000000000473259: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x0000000000473155: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x00000000004730c6: bsr rax, rax; add rax, rdi; ret; 
0x000000000047334a: bsr rax, rsi; add rax, rdi; ret; 
0x0000000000473258: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000473154: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000042c09c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000042c09e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000004736e3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743a3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473644: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004736e2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743a2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473643: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x0000000000423e03: call 0x10810; call 0xdcf0; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000400c8a: call 0x10c00; mov eax, 0; leave; ret; 
0x00000000004144ed: call 0x13180; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000414ebd: call 0x16ab0; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004b1024: call 0x180b1081; xor dl, bh; jmp qword ptr [rdi + 0x11]; 
0x000000000044c10d: call 0x184cfc5a; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000468472: call 0x18cb07bf; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047f2f6: call 0x1bd0; nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x23d4c1], 0; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x000000000040eca8: call 0x1bd0; xor eax, eax; ret; 
0x000000000046e91d: call 0x1ff1263; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000047fb95: call 0x209b0; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000410629: call 0x209b0; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480db8: call 0x209b0; mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047f43d: call 0x209b0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bfe4: call 0x29842f8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000046e9fb: call 0x29ff6d20; ja 0x6ea90; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045f09a: call 0x3947f09e; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000410a5c: call 0x415d4bbe; pop rbp; pop r14; ret; 
0x00000000004222e3: call 0x415e6445; pop rbp; pop r14; ret; 
0x00000000004227e3: call 0x415e6945; pop rbp; pop r14; ret; 
0x00000000004857be: call 0x41649920; pop rbp; ret; 
0x0000000000460c8f: call 0x42060c8e; call qword ptr [rdi + 0x38]; 
0x0000000000440e34: call 0x48ecf949; mov eax, edi; ret; 
0x0000000000440f14: call 0x48ecfa29; mov eax, edx; ret; 
0x00000000004600fb: call 0x490600fa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004015e0: call 0x49ac0; cmp eax, -1; je 0x16bb; add rsp, 0x98; ret; 
0x000000000047bbdb: call 0x4a6d0; test eax, eax; js 0x7bbf2; pop rbx; ret; 
0x000000000044a78a: call 0x4ab4d; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000418fc5: call 0x4be50; add rsp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000041b034: call 0x4be50; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000468108: call 0x4be80; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047521d: call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000045caed: call 0x4be80; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000449cb7: call 0x4bea0; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000449cd5: call 0x4bf00; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000004498eb: call 0x4bf70; mov eax, dword ptr [rip + 0x272f16]; test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x000000000047575b: call 0x4bf70; mov ecx, 0xc; mov eax, ecx; syscall; 
0x0000000000418196: call 0x4bf70; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000488524: call 0x4bf70; nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000485477: call 0x4bf70; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23743a]; ret; 
0x0000000000457b04: call 0x4bf70; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000047537a: call 0x4bf70; nop; mov eax, 0x3f; syscall; 
0x000000000045d5c3: call 0x4d05d5be; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045842d: call 0x4d500; mov rdi, r14; call rbx; 
0x000000000044f185: call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000458704: call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000042d435: call 0x4e71e42d; call 0xf69bcf1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434f00: call 0x4ef35ef7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437a20: call 0x4ef38a17; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000041062f: call 0x5c42638f; ret; 
0x0000000000410a93: call 0x5c4267f3; pop r13; pop r14; ret; 
0x0000000000410b74: call 0x5c4268d4; pop r13; ret; 
0x0000000000410baf: call 0x5c42690f; pop r13; ret; 
0x0000000000414618: call 0x5c42a378; ret; 
0x0000000000414634: call 0x5c42a394; ret; 
0x0000000000415353: call 0x5c42b0b3; ret; 
0x0000000000419513: call 0x5c42f273; pop r13; pop r14; ret; 
0x00000000004195bf: call 0x5c42f31f; pop r13; pop r14; ret; 
0x0000000000420786: call 0x5c4364e6; pop r13; pop r14; ret; 
0x000000000044a773: call 0x5c4604d3; mov esi, 2; jmp rax; 
0x000000000044acaf: call 0x5c460a0f; pop r13; ret; 
0x000000000047e374: call 0x5c4940d4; pop r13; ret; 
0x000000000047faf3: call 0x5c495853; ret; 
0x000000000047fb10: call 0x5c495870; ret; 
0x000000000047fb4d: call 0x5c4958ad; ret; 
0x000000000048579c: call 0x5c49b4fc; pop r13; ret; 
0x000000000048a2a7: call 0x5c4a0007; pop r13; ret; 
0x000000000048a2d6: call 0x5c4a0036; pop r13; ret; 
0x00000000004234c3: call 0x5d439109; pop r14; pop r15; ret; 
0x000000000045ee10: call 0x634eee14; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000040eb40: call 0x648e3748; ret; 
0x000000000045ac86: call 0x6505ac8a; mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ace3: call 0x6505ace7; add rax, qword ptr [0]; ret; 
0x000000000046f582: call 0x70380; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474685: call 0x74d9ca8c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000042d918: call 0x75cb112d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000046e261: call 0x77301e86; sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004747a4: call 0x78000cab; ret; 
0x000000000047485c: call 0x78000d63; ret; 
0x0000000000474880: call 0x78000d87; ret; 
0x00000000004748a0: call 0x78000da7; ret; 
0x00000000004748ee: call 0x78000df5; ret; 
0x000000000047498d: call 0x78000e94; ret; 
0x0000000000474ac8: call 0x78000fcf; ret; 
0x0000000000474afa: call 0x78001001; ret; 
0x0000000000474b11: call 0x78001018; ret; 
0x0000000000474b35: call 0x7800103c; ret; 
0x0000000000474b55: call 0x7800105c; ret; 
0x0000000000474b75: call 0x7800107c; ret; 
0x0000000000474b85: call 0x7800108c; ret; 
0x0000000000474bac: call 0x780010b3; ret; 
0x0000000000474bd0: call 0x780010d7; ret; 
0x0000000000474bf0: call 0x780010f7; ret; 
0x0000000000474c3e: call 0x78001145; ret; 
0x000000000048858d: call 0x78bd0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000481c28: call 0x7aab0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048a303: call 0x7aab0; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047fbd2: call 0x7c9343d8; ret; 
0x000000000048756f: call 0x7c93bd75; ret; 
0x000000000047e435: call 0x7dd60; add rsp, 0xd8; ret; 
0x000000000047c583: call 0x7e500; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000047d1ef: call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000045888c: call 0x81c90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004841ff: call 0x835b0; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x000000000048451b: call 0x847e7; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000004588a5: call 0x84911ab; pop rbx; ret; 
0x0000000000488284: call 0x85ba0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000481b5d: call 0x85ba0; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488463: call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048838f: call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048a8b4: call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000047e5f7: call 0x8cc6944; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000490e98: call 0x8cd91e5; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000400b21: call 0x8f610; mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x000000000048d13b: call 0x8f650; test rax, rax; je 0x8d150; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000402197: call 0xaf8a49f; ja 0x1ec1; lea rdx, [rip + 0x904a7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402283: call 0xaf8a58b; ja 0x1eef; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000400c39: call 0xb6d; leave; ret; 
0x0000000000423e08: call 0xdcf0; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000048d0c9: call 0xdcf0; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040dcdb: call 0xeec0; add rsp, 8; ret; 
0x000000000042d43a: call 0xf69bcf1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004481ca: call 0xfe504db; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000400bc4: call 0xff80; nop; leave; ret; 
0x000000000048aeab: call 0xffffffff850bf7ef; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000048af40: call 0xffffffff850bf884; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x00000000004b5b24: call 0xffffffff880b5bcc; cwde; std; call qword ptr [rdx]; 
0x000000000046775b: call 0xffffffff8954775f; ret 0x894c; 
0x000000000045d3cf: call 0xffffffff89d75cd6; ret 0x8341; 
0x000000000044c923: call 0xffffffff9d0a5270; jmp qword ptr [rsi]; 
0x00000000004ac224: call 0xffffffffb80ac233; sub al, 0xf6; call qword ptr [rax]; 
0x00000000004af724: call 0xffffffffb80af768; stc; jmp qword ptr [rbx]; 
0x000000000042c292: call 0xffffffffc52d3896; std; xlatb; ret; 
0x00000000004b0124: call 0xffffffffd80b0172; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x000000000044b2c5: call 0xffffffffe1041025; nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a4d38: call 0xffffffffe90a4ab0; jae 0xa4d3c; push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; jmp rax; 
0x0000000000494a69: call 0xffffffffe9aa4a67; stc; jmp qword ptr [rax]; 
0x000000000042f3b3: call 0xfffffffff0617f04; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d83: call 0xfffffffff061a8d4; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f283: call 0xfffffffff0627bd4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2c1: call 0xfffffffff0627c12; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2f9: call 0xfffffffff0627c4a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f337: call 0xfffffffff0627c88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f36f: call 0xfffffffff0627cc0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f397: call 0xfffffffff0627ce8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3bf: call 0xfffffffff0627d10; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c53: call 0xfffffffff062a5a4; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431c91: call 0xfffffffff062a5e2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431cc9: call 0xfffffffff062a61a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431d07: call 0xfffffffff062a658; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d3f: call 0xfffffffff062a690; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d67: call 0xfffffffff062a6b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d8f: call 0xfffffffff062a6e0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048d41b: call 0xfffffffff07e5f6c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d599: call 0xfffffffff07e60ea; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d6e5: call 0xfffffffff07e6236; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d731: call 0xfffffffff07e6282; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d8c0: call 0xfffffffff07e6411; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048da20: call 0xfffffffff07e6571; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048da71: call 0xfffffffff07e65c2; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004885fb: call 0xfffffffff8c9ce5b; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000004481fb: call 0xfffffffffc04a70e; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000448246: call 0xfffffffffc04a751; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000048f5a4: call 0xffffffffffc00000; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413e60: call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413dc0: call 0xfffffffffffdb5ae; jmp qword ptr [rsi + 0x2e]; 
0x00000000004947e3: call qword ptr [rax + 0x13]; 
0x00000000004947e3: call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000493fef: call qword ptr [rax + 0x15]; 
0x000000000041477a: call qword ptr [rax + 0x18]; 
0x0000000000493fff: call qword ptr [rax + 0x1a]; 
0x0000000000493fff: call qword ptr [rax + 0x1a]; stc; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x000000000044d484: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26ce69]; ret; 
0x000000000048d074: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049400f: call qword ptr [rax + 0x1f]; 
0x00000000004942db: call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x00000000004947f3: call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494ee3: call qword ptr [rax + 0x30]; 
0x0000000000494ee3: call qword ptr [rax + 0x30]; cli; call rax; 
0x000000000041b09d: call qword ptr [rax + 0x31]; 
0x0000000000494d1b: call qword ptr [rax + 0x33]; 
0x0000000000494b03: call qword ptr [rax + 0x36]; 
0x0000000000494b03: call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000045f606: call qword ptr [rax + 0x38]; 
0x0000000000495867: call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x00000000004140f6: call qword ptr [rax + 0x40]; 
0x000000000048acc2: call qword ptr [rax + 0x49]; 
0x0000000000495033: call qword ptr [rax + 0x51]; 
0x0000000000495033: call qword ptr [rax + 0x51]; cli; jmp qword ptr [rax + 0x53]; 
0x00000000004940cb: call qword ptr [rax + 0x61]; 
0x0000000000471223: call qword ptr [rax + 0x68]; 
0x0000000000496007: call qword ptr [rax + 0x6b]; 
0x00000000004940ef: call qword ptr [rax + 0x6c]; 
0x0000000000494307: call qword ptr [rax + 0x70fff9b4]; mov dh, 0xf9; call qword ptr [rax - 0x48]; 
0x000000000048ae19: call qword ptr [rax + 0x74]; 
0x00000000004148bc: call qword ptr [rax + 0x78]; 
0x000000000049460b: call qword ptr [rax + 0xf]; 
0x000000000049460b: call qword ptr [rax + 0xf]; cli; jmp rax; 
0x0000000000494f57: call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x00000000004af6b3: call qword ptr [rax + 1]; 
0x000000000049485b: call qword ptr [rax + 3]; 
0x00000000004122d8: call qword ptr [rax + 8]; 
0x0000000000496013: call qword ptr [rax + rbp*2 + 0x6894fffb]; sti; call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x000000000049601b: call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x000000000049477f: call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000460d48: call qword ptr [rax - 0x18]; 
0x0000000000460d48: call qword ptr [rax - 0x18]; xchg eax, ecx; ret 0xffff; 
0x000000000048eec9: call qword ptr [rax - 0x1b]; 
0x00000000004950eb: call qword ptr [rax - 0x1f000560]; movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; 
0x00000000004943b7: call qword ptr [rax - 0x1f00065f]; movabs byte ptr [0xa580fff9a430fff9], al; stc; call rax; 
0x000000000049454f: call qword ptr [rax - 0x21]; 
0x000000000049454f: call qword ptr [rax - 0x21]; stc; jmp qword ptr [rax]; 
0x0000000000494427: call qword ptr [rax - 0x23]; 
0x0000000000494003: call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000493fe3: call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x00000000004945c7: call qword ptr [rax - 0x31]; 
0x0000000000494573: call qword ptr [rax - 0x38]; 
0x000000000049430f: call qword ptr [rax - 0x48]; 
0x000000000049430f: call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x000000000049438b: call qword ptr [rax - 0x4b]; 
0x000000000049438b: call qword ptr [rax - 0x4b]; stc; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000494327: call qword ptr [rax - 0x4c]; 
0x0000000000494327: call qword ptr [rax - 0x4c]; stc; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494283: call qword ptr [rax - 0x4d]; 
0x0000000000494283: call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000495193: call qword ptr [rax - 0x4f00050d]; cli; call rax; 
0x0000000000495173: call qword ptr [rax - 0x4f00050e]; cli; call rax; 
0x00000000004942bf: call qword ptr [rax - 0x4f]; 
0x00000000004942bf: call qword ptr [rax - 0x4f]; stc; call qword ptr [rax]; 
0x00000000004a3a1f: call qword ptr [rax - 0x57]; 
0x00000000004943fb: call qword ptr [rax - 0x5d]; 
0x00000000004943a7: call qword ptr [rax - 0x64]; 
0x00000000004942d7: call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x00000000004942d3: call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x000000000049415b: call qword ptr [rax - 0x70]; 
0x000000000046c600: call qword ptr [rax - 0x75]; 
0x00000000004940df: call qword ptr [rax - 0x7f000698]; imul edi, ecx, 0xf96a70ff; jmp qword ptr [rax + 0x6b]; 
0x00000000004950cb: call qword ptr [rax - 0x80]; 
0x000000000049518b: call qword ptr [rax - 0xd]; 
0x0000000000495167: call qword ptr [rax - 0xe]; 
0x0000000000495167: call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x000000000049512b: call qword ptr [rax - 0xf]; 
0x000000000049512b: call qword ptr [rax - 0xf]; cli; jmp qword ptr [rax - 0xf]; 
0x0000000000493f37: call qword ptr [rax - 3]; 
0x0000000000493f37: call qword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004951bf: call qword ptr [rax - 9]; 
0x00000000004951bf: call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x000000000041f663: call qword ptr [rax]; 
0x0000000000493feb: call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x0000000000495023: call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000495183: call qword ptr [rax]; cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xd]; 
0x000000000048ae37: call qword ptr [rax]; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd7: call qword ptr [rax]; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee37: call qword ptr [rax]; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a7: call qword ptr [rax]; jne 0x8f8c8; xor eax, eax; ret; 
0x00000000004943d7: call qword ptr [rax]; lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rax - 0x53]; 
0x0000000000494347: call qword ptr [rax]; mov ah, 0xf9; push rax; mov ch, 0xf9; call rax; 
0x00000000004942c3: call qword ptr [rax]; mov bl, 0xf9; push rax; mov ah, 0xf9; call rax; 
0x00000000004942a7: call qword ptr [rax]; mov ch, 0xf9; push rax; mov dh, 0xf9; call rax; 
0x0000000000494563: call qword ptr [rax]; ret; 
0x00000000004943eb: call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x0000000000493ffb: call qword ptr [rax]; sbb ecx, edi; call qword ptr [rax + 0x1a]; 
0x000000000049510b: call qword ptr [rax]; stosd dword ptr [rdi], eax; cli; jmp qword ptr [rax - 0x54]; 
0x0000000000411124: call qword ptr [rbp + 0x18]; 
0x0000000000411098: call qword ptr [rbp + 0x20]; 
0x00000000004119d5: call qword ptr [rbp + 0x30]; 
0x0000000000410ccc: call qword ptr [rbp + 0x38]; 
0x0000000000400b6c: call qword ptr [rbp + 0x48]; 
0x0000000000409a9e: call qword ptr [rbp + 0x53]; 
0x0000000000410f12: call qword ptr [rbp + 0x58]; 
0x00000000004108aa: call qword ptr [rbp + 0x60]; 
0x0000000000410fb8: call qword ptr [rbp + 0x68]; 
0x00000000004134b5: call qword ptr [rbp + 0x70]; 
0x00000000004afb2f: call qword ptr [rbp + 1]; 
0x0000000000411fd6: call qword ptr [rbp + 8]; 
0x0000000000494e7b: call qword ptr [rbp + rbp - 6]; call rsp; 
0x0000000000494c87: call qword ptr [rbp + rsi + 0x3524fffa]; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x00000000004010fe: call qword ptr [rbx + 0x10]; 
0x00000000004174fc: call qword ptr [rbx + 0x18]; 
0x000000000045d66a: call qword ptr [rbx + 0x38]; 
0x00000000004588d9: call qword ptr [rbx + 0x48]; 
0x000000000048dac2: call qword ptr [rbx + 0x49]; 
0x000000000041bb8c: call qword ptr [rbx + 0x50]; 
0x000000000048d2b2: call qword ptr [rbx + 0x52]; 
0x000000000041f516: call qword ptr [rbx + 0x64]; 
0x00000000004a7ce0: call qword ptr [rbx + 0x7c]; 
0x000000000045fc90: call qword ptr [rbx + 0xf]; 
0x00000000004ab90b: call qword ptr [rbx + 1]; 
0x00000000004af78b: call qword ptr [rbx + 4]; 
0x0000000000494e8b: call qword ptr [rbx + rbp - 6]; call rsp; 
0x000000000047bcfb: call qword ptr [rbx - 0x77]; 
0x000000000049264b: call qword ptr [rbx - 5]; 
0x000000000040eb50: call qword ptr [rbx]; 
0x000000000045ddc4: call qword ptr [rcx + 0x38]; 
0x00000000004afa47: call qword ptr [rcx + 1]; 
0x00000000004a75cd: call qword ptr [rcx - 0x66]; 
0x0000000000489b10: call qword ptr [rcx]; 
0x0000000000418401: call qword ptr [rdi + 0x18]; 
0x000000000045fd6a: call qword ptr [rdi + 0x38]; 
0x00000000004958a7: call qword ptr [rdi + 0x3d14fffb]; sti; jmp qword ptr [rbx + 0x3e]; 
0x00000000004137d4: call qword ptr [rdi + 0x40]; 
0x00000000004165fe: call qword ptr [rdi + 0x58]; 
0x000000000047a978: call qword ptr [rdi + 0x60]; 
0x00000000004113e1: call qword ptr [rdi + 0x70]; 
0x000000000041514e: call qword ptr [rdi + 0x78]; 
0x00000000004b438f: call qword ptr [rdi + 1]; 
0x00000000004acdc7: call qword ptr [rdi + 2]; 
0x0000000000494e6b: call qword ptr [rdi + rbp - 6]; call rsp; 
0x0000000000494c77: call qword ptr [rdi + rsi - 6]; jmp rsp; 
0x00000000004ab683: call qword ptr [rdi]; 
0x00000000004946b7: call qword ptr [rdx + 0x11]; 
0x00000000004946b7: call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494baf: call qword ptr [rdx + 0x38]; 
0x0000000000494baf: call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x00000000004b3dfb: call qword ptr [rdx + 1]; 
0x00000000004948cb: call qword ptr [rdx + 5]; 
0x00000000004948cb: call qword ptr [rdx + 5]; cli; call rdx; 
0x00000000004948c3: call qword ptr [rdx + 6]; 
0x00000000004948c3: call qword ptr [rdx + 6]; cli; call rdx; 
0x00000000004948bb: call qword ptr [rdx + 7]; 
0x00000000004948bb: call qword ptr [rdx + 7]; cli; call rdx; 
0x00000000004948b3: call qword ptr [rdx + 8]; 
0x00000000004948b3: call qword ptr [rdx + 8]; cli; call rdx; 
0x00000000004948ab: call qword ptr [rdx + 9]; 
0x00000000004948ab: call qword ptr [rdx + 9]; cli; call rdx; 
0x0000000000494143: call qword ptr [rdx - 0x72]; 
0x0000000000494143: call qword ptr [rdx - 0x72]; stc; jmp qword ptr [rdx]; 
0x000000000049469f: call qword ptr [rdx]; 
0x000000000047ba7e: call qword ptr [rip + 0x23e79c]; xor eax, eax; add rsp, 8; ret; 
0x00000000004952cb: call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x00000000004af627: call qword ptr [rsi + 0x16]; 
0x000000000041341f: call qword ptr [rsi + 0x18]; 
0x0000000000417711: call qword ptr [rsi + 0x20]; 
0x0000000000494623: call qword ptr [rsi + 0x26fffa13]; adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x00000000004a931f: call qword ptr [rsi + 0x30]; 
0x0000000000494b4b: call qword ptr [rsi + 0x35]; 
0x0000000000494b4b: call qword ptr [rsi + 0x35]; cli; jmp rsi; 
0x0000000000462785: call qword ptr [rsi + 0x38]; 
0x0000000000495913: call qword ptr [rsi + 0x3d]; 
0x000000000049572b: call qword ptr [rsi + 0x3e]; 
0x000000000041b29d: call qword ptr [rsi + 0x50]; 
0x0000000000494653: call qword ptr [rsi + 0xe]; 
0x0000000000494653: call qword ptr [rsi + 0xe]; cli; jmp rsi; 
0x00000000004b2af3: call qword ptr [rsi + 1]; 
0x0000000000494e73: call qword ptr [rsi + rbp - 6]; call rsp; 
0x00000000004941d7: call qword ptr [rsi - 0x6a]; 
0x0000000000489961: call qword ptr [rsi]; 
0x0000000000494e83: call qword ptr [rsp + rbp - 6]; call rsp; 
0x0000000000400410: call rax; 
0x0000000000493fe7: call rax; adc bh, cl; call qword ptr [rax]; 
0x0000000000493fe7: call rax; adc bh, cl; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x00000000004945eb: call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000400410: call rax; add rsp, 8; ret; 
0x0000000000494cfb: call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000495013: call rax; cli; jmp rax; 
0x000000000049517b: call rax; cli; push rax; cli; call qword ptr [rax]; 
0x0000000000494ae3: call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004943c7: call rax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x00000000004951a3: call rax; idiv dl; jmp rax; 
0x0000000000494477: call rax; in al, 0xf9; call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x000000000049514b: call rax; int1; cli; jmp rax; 
0x000000000049455f: call rax; mov esi, 0xc310fff9; stc; jmp qword ptr [rax - 0x3c]; 
0x00000000004950fb: call rax; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x000000000049447b: call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x000000000049602b: call rax; push -5; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x0000000000494593: call rax; sar cl, cl; jmp qword ptr [rax]; 
0x0000000000494007: call rax; sbb al, 0xf9; call qword ptr [rax]; 
0x00000000004974a3: call rax; sub edi, esp; call qword ptr [rax]; 
0x0000000000494247: call rax; xchg eax, ebx; stc; jmp qword ptr [rax - 0x6c]; 
0x000000000040094d: call rbx; 
0x000000000041d353: call rcx; 
0x0000000000494193: call rcx; xchg eax, ebp; stc; push qword ptr [rcx - 0x6a]; stc; call qword ptr [rcx]; 
0x000000000044ad23: call rdi; 
0x000000000040e997: call rdx; 
0x00000000004948af: call rdx; or dl, bh; call qword ptr [rdx + 8]; 
0x0000000000494bcf: call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x000000000044eba1: call rsi; 
0x0000000000494633: call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494b2b: call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x000000000044a7e1: call rsp; 
0x0000000000411dd3: cdq; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000042457d: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043eb40: cdq; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048c494: cdq; add rax, r9; jmp rax; 
0x0000000000482613: cdq; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004825a7: cdq; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004a8dc0: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004848e3: cdq; ja 0x84909; add byte ptr [rax - 0x77], cl; add eax, 0x23777a; ret; 
0x00000000004a8dbb: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004905c3: cdq; ret; 
0x00000000004afe7d: cdq; stc; jmp qword ptr [rax]; 
0x0000000000431183: cdq; xor al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000460759: cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460dfb: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a3: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460708: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab7: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a69: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609ba: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046095e: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606be: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460670: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046020f: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000469641: clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000047e623: clc; add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000040accf: clc; add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x00000000004236f3: clc; add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000040d57d: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000004885ff: clc; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000044fe02: clc; add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000042b83f: clc; add rax, rcx; ret; 
0x000000000047479b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c1b: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba2b: clc; add rax, rcx; vzeroupper; ret; 
0x0000000000493f36: clc; call qword ptr [rax - 3]; 
0x0000000000493f36: clc; call qword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004af59a: clc; call qword ptr [rax]; 
0x000000000047b61e: clc; call qword ptr [rbp + 0x53]; 
0x00000000004af626: clc; call qword ptr [rsi + 0x16]; 
0x00000000004951e1: clc; cli; inc dword ptr [rax - 8]; cli; jmp qword ptr [rax - 8]; 
0x00000000004951f9: clc; cli; inc dword ptr [rax]; stc; cli; jmp qword ptr [rax]; 
0x00000000004951f1: clc; cli; inc eax; clc; cli; jmp rax; 
0x00000000004951e5: clc; cli; jmp qword ptr [rax - 8]; 
0x00000000004951d9: clc; cli; jmp qword ptr [rax]; 
0x00000000004951f5: clc; cli; jmp rax; 
0x00000000004236f8: clc; cmovne rax, rcx; ret; 
0x000000000042cecd: clc; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x00000000004767d6: clc; dec dword ptr [rax + 0x39]; ret; 
0x0000000000472170: clc; dec dword ptr [rax + 1]; ret; 
0x000000000047fac4: clc; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000048c97e: clc; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000046f689: clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000401b5c: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004789fb: clc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000461316: clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000046133f: clc; dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000045f2be: clc; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x0000000000466df4: clc; dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000045e673: clc; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000469ce3: clc; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004b2134: clc; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x0000000000493f2e: clc; inc dword ptr [rax]; std; clc; jmp qword ptr [rax]; 
0x00000000004598d2: clc; inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x0000000000474c41: clc; ja 0x74c07; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x0000000000410fb2: clc; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004143e4: clc; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045d806: clc; jbe 0x5ee25; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045ddac: clc; jbe 0x5eeb9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004482f6: clc; jg 0x482f0; int1; mov eax, eax; ret; 
0x0000000000454177: clc; jg 0x54103; ret 0xdb76; 
0x0000000000493f32: clc; jmp qword ptr [rax]; 
0x00000000004af4be: clc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000471d80: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000471f35: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004782ec: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004af5ae: clc; jmp qword ptr [rsi]; 
0x000000000046021f: clc; jmp rax; 
0x0000000000432dd6: clc; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c20: clc; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430312: clc; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430238: clc; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004b3fc8: clc; leave; cld; jmp qword ptr [rcx]; 
0x000000000048d423: clc; leave; ret; 
0x00000000004ada88: clc; mov ah, 0xf6; jmp qword ptr [rax]; 
0x00000000004a7a22: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000413204: clc; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000042f3d7: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd2b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff2b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043012b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3bb: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fcff: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042feff: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300ff: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f38f: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd47: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c97: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ff47: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c07: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430147: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b77: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f3f3: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000447dde: clc; mov qword ptr [rdi], rcx; ret; 
0x0000000000447f5d: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000043862c: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044706a: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000048ad27: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042d44f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x000000000048d5a1: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000042cec9: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x0000000000447062: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042bc12: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000046ebf1: clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000041b446: clc; pop rbp; pop r12; ret; 
0x0000000000471227: clc; push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000041828f: clc; push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475313: clc; push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x0000000000490e38: clc; push rbx; ret; 
0x0000000000413235: clc; ret; 
0x0000000000482d7a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004743af: clc; shr rax, 2; ret; 
0x0000000000494a95: clc; stc; jmp qword ptr [rax]; 
0x000000000046e9fe: clc; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000485211: clc; sub rax, r8; ret; 
0x0000000000474856: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd6: clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000446c7b: clc; sub rax, rsi; ret; 
0x000000000042bac6: clc; vzeroupper; ret; 
0x00000000004b4a34: clc; xchg eax, edx; add byte ptr [rax], al; pop rax; or ch, bh; call qword ptr [rax]; 
0x00000000004b4e34: clc; xchg eax, esi; add byte ptr [rax], al; or byte ptr [rdx], dh; std; call qword ptr [rbx]; 
0x00000000004abc08: clc; xchg eax, esp; cmc; call qword ptr [rdx]; 
0x0000000000484207: clc; xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x00000000004a9558: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000044821a: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004481ff: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000423b20: cld; add eax, dword ptr [rdi]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000004b0d24: cld; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004a3a1e: cld; call qword ptr [rax - 0x57]; 
0x00000000004974a6: cld; call qword ptr [rax]; 
0x00000000004b46da: cld; call qword ptr [rbx]; 
0x00000000004b438e: cld; call qword ptr [rdi + 1]; 
0x00000000004b3dfa: cld; call qword ptr [rdx + 1]; 
0x00000000004b4492: cld; call qword ptr [rdx]; 
0x00000000004974a2: cld; call rax; 
0x00000000004974a2: cld; call rax; sub edi, esp; call qword ptr [rax]; 
0x00000000004b3fde: cld; call rdx; 
0x00000000004b4731: cld; cld; call qword ptr [rax]; 
0x0000000000446411: cld; cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000042d692: cld; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x00000000004492f2: cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000004a3d82: cld; dec esp; scasb al, byte ptr [rdi]; cld; call rax; 
0x000000000047bbde: cld; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x00000000004482dc: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044824a: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004974aa: cld; inc eax; sub edi, esp; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x0000000000486fe7: cld; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004a3a12: cld; jmp qword ptr [rax - 0x57]; 
0x00000000004b2d9a: cld; jmp qword ptr [rax]; 
0x00000000004b4286: cld; jmp qword ptr [rbx + 1]; 
0x00000000004b2db2: cld; jmp qword ptr [rbx]; 
0x00000000004b37fa: cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b31b2: cld; jmp qword ptr [rcx]; 
0x00000000004b45f6: cld; jmp qword ptr [rdx + 5]; 
0x00000000004b3b26: cld; jmp qword ptr [rdx]; 
0x0000000000482614: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458f08: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004b3aba: cld; jmp qword ptr [rsi + 5]; 
0x00000000004b3bda: cld; jmp qword ptr [rsi + 7]; 
0x000000000047d34c: cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004b40aa: cld; jmp qword ptr [rsi]; 
0x00000000004974b6: cld; jmp rax; 
0x00000000004b2d52: cld; jmp rdx; 
0x00000000004a3e0e: cld; lcall [rax + 0x78fffcb0]; mov al, 0xfc; call rax; 
0x00000000004974ae: cld; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x000000000042fb62: cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd65: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff65: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430165: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000447de6: cld; mov dword ptr [rdi], ecx; ret; 
0x0000000000447f68: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000043863e: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447078: cld; mov dword ptr [rdi], esi; ret; 
0x000000000042cef3: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000044640e: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000042d155: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x0000000000400c36: cld; mov edi, eax; call 0xb6d; leave; ret; 
0x0000000000447072: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042f59a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f77a: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f95a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb3a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f75e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f93e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb1e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f796: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e26: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f976: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434da6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fb56: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d26: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f5b6: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ea6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000449de7: cld; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004a3a06: cld; push qword ptr [rax + 0x70fffca8]; test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x00000000004a3a16: cld; push qword ptr [rax - 0x4f000358]; test al, 0xfc; call qword ptr [rax - 0x57]; 
0x00000000004558d0: cld; ret 0xfffa; 
0x000000000042f441: cld; ret; 
0x0000000000494add: cld; stc; dec dword ptr [rsi + 0x33]; cli; call rax; 
0x00000000004a6ed6: cld; test al, 0x97; xchg eax, esp; ret; 
0x00000000004387ad: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438573: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438a6f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000446d3b: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447902: cld; vzeroupper; ret; 
0x0000000000447dcc: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000473aee: cli; add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x0000000000415ed1: cli; add ch, al; pop rax; ret; 
0x0000000000415fd8: cli; add ch, al; push rcx; ret 0xffff; 
0x0000000000468b95: cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000411e92: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000406f9e: cli; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a5e5: cli; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000446dbe: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000447dd1: cli; add dword ptr [rdi + 0x15], esi; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000447052: cli; add dword ptr [rdi + 0x26], esi; jb 0x4705d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447f3f: cli; add dword ptr [rdi + 0x2c], esi; jb 0x47f47; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000448107: cli; add dword ptr [rdi + 0x3a], esi; jb 0x4810f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004473b2: cli; add dword ptr [rdi + 0x3b], esi; jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447802: cli; add dword ptr [rdi + 0x53], esi; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446dcb: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043865c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000448ebe: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x0000000000448f1c: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x0000000000447ce0: cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d30: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000446d87: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000045919c: cli; and eax, 0x34894a00; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x00000000004947e2: cli; call qword ptr [rax + 0x13]; 
0x00000000004947e2: cli; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x00000000004947f2: cli; call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494ee2: cli; call qword ptr [rax + 0x30]; 
0x0000000000494ee2: cli; call qword ptr [rax + 0x30]; cli; call rax; 
0x0000000000494d1a: cli; call qword ptr [rax + 0x33]; 
0x0000000000494b02: cli; call qword ptr [rax + 0x36]; 
0x0000000000494b02: cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000045f605: cli; call qword ptr [rax + 0x38]; 
0x0000000000495032: cli; call qword ptr [rax + 0x51]; 
0x0000000000495032: cli; call qword ptr [rax + 0x51]; cli; jmp qword ptr [rax + 0x53]; 
0x000000000049460a: cli; call qword ptr [rax + 0xf]; 
0x000000000049460a: cli; call qword ptr [rax + 0xf]; cli; jmp rax; 
0x0000000000494f56: cli; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x000000000049485a: cli; call qword ptr [rax + 3]; 
0x000000000049477e: cli; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x00000000004950ea: cli; call qword ptr [rax - 0x1f000560]; movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; 
0x0000000000495192: cli; call qword ptr [rax - 0x4f00050d]; cli; call rax; 
0x0000000000495172: cli; call qword ptr [rax - 0x4f00050e]; cli; call rax; 
0x00000000004950ca: cli; call qword ptr [rax - 0x80]; 
0x000000000049518a: cli; call qword ptr [rax - 0xd]; 
0x0000000000495166: cli; call qword ptr [rax - 0xe]; 
0x0000000000495166: cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x000000000049512a: cli; call qword ptr [rax - 0xf]; 
0x000000000049512a: cli; call qword ptr [rax - 0xf]; cli; jmp qword ptr [rax - 0xf]; 
0x00000000004951be: cli; call qword ptr [rax - 9]; 
0x00000000004951be: cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x00000000004945fa: cli; call qword ptr [rax]; 
0x0000000000495022: cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000495182: cli; call qword ptr [rax]; cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xd]; 
0x000000000049510a: cli; call qword ptr [rax]; stosd dword ptr [rdi], eax; cli; jmp qword ptr [rax - 0x54]; 
0x0000000000494e7a: cli; call qword ptr [rbp + rbp - 6]; call rsp; 
0x0000000000494c86: cli; call qword ptr [rbp + rsi + 0x3524fffa]; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x0000000000494e8a: cli; call qword ptr [rbx + rbp - 6]; call rsp; 
0x00000000004b1a6a: cli; call qword ptr [rbx]; 
0x00000000004b176a: cli; call qword ptr [rcx]; 
0x0000000000494e6a: cli; call qword ptr [rdi + rbp - 6]; call rsp; 
0x0000000000494c76: cli; call qword ptr [rdi + rsi - 6]; jmp rsp; 
0x00000000004b0f82: cli; call qword ptr [rdi]; 
0x00000000004946b6: cli; call qword ptr [rdx + 0x11]; 
0x00000000004946b6: cli; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494bae: cli; call qword ptr [rdx + 0x38]; 
0x0000000000494bae: cli; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x00000000004948ca: cli; call qword ptr [rdx + 5]; 
0x00000000004948ca: cli; call qword ptr [rdx + 5]; cli; call rdx; 
0x00000000004948c2: cli; call qword ptr [rdx + 6]; 
0x00000000004948c2: cli; call qword ptr [rdx + 6]; cli; call rdx; 
0x00000000004948ba: cli; call qword ptr [rdx + 7]; 
0x00000000004948ba: cli; call qword ptr [rdx + 7]; cli; call rdx; 
0x00000000004948b2: cli; call qword ptr [rdx + 8]; 
0x00000000004948b2: cli; call qword ptr [rdx + 8]; cli; call rdx; 
0x00000000004948aa: cli; call qword ptr [rdx + 9]; 
0x00000000004948aa: cli; call qword ptr [rdx + 9]; cli; call rdx; 
0x000000000049469e: cli; call qword ptr [rdx]; 
0x0000000000494622: cli; call qword ptr [rsi + 0x26fffa13]; adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494b4a: cli; call qword ptr [rsi + 0x35]; 
0x0000000000494b4a: cli; call qword ptr [rsi + 0x35]; cli; jmp rsi; 
0x0000000000494652: cli; call qword ptr [rsi + 0xe]; 
0x0000000000494652: cli; call qword ptr [rsi + 0xe]; cli; jmp rsi; 
0x0000000000494e72: cli; call qword ptr [rsi + rbp - 6]; call rsp; 
0x0000000000494642: cli; call qword ptr [rsi]; 
0x0000000000494e82: cli; call qword ptr [rsp + rbp - 6]; call rsp; 
0x00000000004945ea: cli; call rax; 
0x00000000004945ea: cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494cfa: cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000495012: cli; call rax; cli; jmp rax; 
0x000000000049517a: cli; call rax; cli; push rax; cli; call qword ptr [rax]; 
0x0000000000494ae2: cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004951a2: cli; call rax; idiv dl; jmp rax; 
0x000000000049514a: cli; call rax; int1; cli; jmp rax; 
0x00000000004950fa: cli; call rax; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x00000000004b0eee: cli; call rcx; 
0x00000000004946d6: cli; call rdx; 
0x00000000004948ae: cli; call rdx; or dl, bh; call qword ptr [rdx + 8]; 
0x0000000000494bce: cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494632: cli; call rsi; 
0x0000000000494632: cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494b2a: cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494c96: cli; call rsp; 
0x00000000004b46d9: cli; cld; call qword ptr [rbx]; 
0x000000000044c395: cli; cmp eax, 0x83497174; ret; 
0x000000000045cdce: cli; dec dword ptr [rax + 0x29]; ret; 
0x000000000047f440: cli; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045c575: cli; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471477: cli; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000466d6a: cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004947fe: cli; inc dword ptr [rax + 0x10]; cli; call rax; 
0x00000000004945e6: cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x00000000004945e6: cli; inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494cf6: cli; inc dword ptr [rax + 0x37]; cli; call rax; 
0x0000000000494cf6: cli; inc dword ptr [rax + 0x37]; cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x000000000049502e: cli; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x000000000049502e: cli; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; cli; jmp qword ptr [rax + 0x53]; 
0x000000000049484a: cli; inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004950f6: cli; inc dword ptr [rax - 0x2f00055c]; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x00000000004951c6: cli; inc dword ptr [rax - 0x5f000509]; idiv edx; inc eax; idiv edx; jmp rax; 
0x0000000000494a5e: cli; inc dword ptr [rax - 0x5f00061b]; out 0xf9, al; jmp qword ptr [rax]; 
0x00000000004950be: cli; inc dword ptr [rax - 0x6b]; cli; jmp rax; 
0x000000000049509e: cli; inc dword ptr [rax - 0x78]; cli; jmp rax; 
0x0000000000495126: cli; inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; 
0x0000000000495126: cli; inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; cli; jmp qword ptr [rax - 0xf]; 
0x0000000000495202: cli; inc dword ptr [rax - 7]; cli; jmp qword ptr [rax - 7]; 
0x00000000004951e2: cli; inc dword ptr [rax - 8]; cli; jmp qword ptr [rax - 8]; 
0x00000000004951ba: cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004951ba: cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x0000000000494a52: cli; inc dword ptr [rax]; add al, 0xfa; push qword ptr [rax + 3]; cli; jmp rax; 
0x000000000044821e: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000049484e: cli; inc dword ptr [rax]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004951d6: cli; inc dword ptr [rax]; clc; cli; jmp qword ptr [rax]; 
0x000000000049501e: cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x000000000049501e: cli; inc dword ptr [rax]; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x00000000004951ae: cli; inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x00000000004951fa: cli; inc dword ptr [rax]; stc; cli; jmp qword ptr [rax]; 
0x0000000000494d56: cli; inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x0000000000494f5a: cli; inc dword ptr [rax]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494b0e: cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x00000000004598cf: cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x0000000000455915: cli; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x000000000045262d: cli; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000494dda: cli; inc dword ptr [rdx + 0x29]; cli; call rdx; 
0x0000000000494bca: cli; inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x0000000000494bca: cli; inc dword ptr [rdx + 0x35]; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x00000000004946d2: cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x000000000049462e: cli; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x000000000049462e: cli; inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494b1e: cli; inc dword ptr [rsi + 0x33]; cli; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494b26: cli; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x0000000000494b26: cli; inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494c92: cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x00000000004951f2: cli; inc eax; clc; cli; jmp rax; 
0x0000000000494afe: cli; inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000494afe: cli; inc eax; cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000049519e: cli; inc eax; idiv dl; call rax; 
0x000000000049519e: cli; inc eax; idiv dl; call rax; idiv dl; jmp rax; 
0x00000000004951ce: cli; inc eax; idiv edx; jmp rax; 
0x0000000000495146: cli; inc eax; int1; cli; call rax; 
0x0000000000495212: cli; inc eax; stc; cli; jmp rax; 
0x0000000000495106: cli; inc eax; test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x0000000000494d16: cli; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x00000000004946b2: cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004946b2: cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494baa: cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x0000000000494baa: cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494b46: cli; inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x000000000049477a: cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000466b12: cli; int 3; add byte ptr [rcx + 0x29], cl; ret; 
0x0000000000447e88: cli; ja 0x47e9a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447e38: cli; ja 0x47ea3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000446d74: cli; jb 0x46d86; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000438617: cli; jg 0x38621; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446d96: cli; jg 0x46da0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004473c9: cli; jg 0x473d3; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447831: cli; jg 0x4783b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447f52: cli; jg 0x47f5c; vzeroupper; ret; 
0x0000000000448128: cli; jg 0x48132; vzeroupper; ret; 
0x00000000004945ee: cli; jmp qword ptr [rax + 0x12]; 
0x0000000000494cfe: cli; jmp qword ptr [rax + 0x36]; 
0x0000000000494ae6: cli; jmp qword ptr [rax + 0x39]; 
0x0000000000495036: cli; jmp qword ptr [rax + 0x53]; 
0x0000000000494f5e: cli; jmp qword ptr [rax + 0xb]; 
0x0000000000494806: cli; jmp qword ptr [rax + 0xf]; 
0x000000000049510e: cli; jmp qword ptr [rax - 0x54]; 
0x00000000004950b2: cli; jmp qword ptr [rax - 0x70]; 
0x0000000000495092: cli; jmp qword ptr [rax - 0x7d]; 
0x000000000049516a: cli; jmp qword ptr [rax - 0xe]; 
0x000000000049512e: cli; jmp qword ptr [rax - 0xf]; 
0x0000000000495206: cli; jmp qword ptr [rax - 7]; 
0x00000000004951e6: cli; jmp qword ptr [rax - 8]; 
0x00000000004951c2: cli; jmp qword ptr [rax - 9]; 
0x00000000004947f6: cli; jmp qword ptr [rax]; 
0x00000000004b102a: cli; jmp qword ptr [rdi + 0x11]; 
0x0000000000494dd2: cli; jmp qword ptr [rdx + 0x2a]; 
0x0000000000494bd2: cli; jmp qword ptr [rdx + 0x34]; 
0x00000000004948a2: cli; jmp qword ptr [rdx + 0xa]; 
0x00000000004946da: cli; jmp qword ptr [rdx + 0xd]; 
0x00000000004946ca: cli; jmp qword ptr [rdx]; 
0x0000000000494636: cli; jmp qword ptr [rsi + 0x11]; 
0x000000000045ac10: cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000494b2e: cli; jmp qword ptr [rsi + 0x38]; 
0x00000000004b1212: cli; jmp qword ptr [rsi + 0xa]; 
0x0000000000453e35: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045593c: cli; jmp qword ptr [rsi - 0x70]; 
0x000000000049461e: cli; jmp qword ptr [rsi]; 
0x000000000049460e: cli; jmp rax; 
0x000000000040d324: cli; jmp rdx; 
0x0000000000494656: cli; jmp rsi; 
0x0000000000494782: cli; jmp rsp; 
0x0000000000494eda: cli; lcall [rdx]; sub edx, edi; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x000000000041f5c7: cli; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000049469a: cli; ljmp [rbp + rcx - 6]; call qword ptr [rdx]; 
0x00000000004947d6: cli; ljmp [rdx + 0x3afffa0d]; or eax, 0xce0fffa; cli; call qword ptr [rax + 0x13]; 
0x0000000000494ede: cli; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x0000000000461e6f: cli; mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000042ff68: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000046b622: cli; mov eax, 0x8b480024; add al, 0xc8; mov ecx, 1; jmp rax; 
0x00000000004004ca: cli; mov ebp, dword ptr [rbx]; add byte ptr [rsi - 0x70], ah; ret; 
0x000000000042ff62: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004140ef: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000040d606: cli; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000042bc18: cli; movzx edx, dl; sub eax, edx; ret; 
0x000000000042acc6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000446da0: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004a9341: cli; push 0x6e; ja 0xa92c9; ret 0x48f; 
0x0000000000494f4e: cli; push qword ptr [rax + 0x20fffa2a]; sub bh, dl; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494d5a: cli; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x00000000004947fa: cli; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x00000000004945e2: cli; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x0000000000494a56: cli; push qword ptr [rax + 3]; cli; jmp rax; 
0x0000000000494852: cli; push qword ptr [rax + 4]; cli; jmp rax; 
0x0000000000495142: cli; push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x000000000049518e: cli; push qword ptr [rax - 0xd]; cli; call qword ptr [rax - 0x4f00050d]; cli; call rax; 
0x000000000049516e: cli; push qword ptr [rax - 0xe]; cli; call qword ptr [rax - 0x4f00050e]; cli; call rax; 
0x0000000000495186: cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xd]; 
0x0000000000495162: cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xe]; 
0x0000000000495162: cli; push qword ptr [rax]; cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x000000000049502a: cli; push qword ptr [rax]; cli; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x00000000004951b6: cli; push qword ptr [rax]; idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004950f2: cli; push qword ptr [rax]; movabs dword ptr [0xa5d0fffaa480fffa], eax; cli; jmp qword ptr [rax]; 
0x0000000000494d12: cli; push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000494dca: cli; push qword ptr [rdx + 0x2b]; cli; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x00000000004946ae: cli; push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494ba6: cli; push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000049462a: cli; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494b22: cli; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494c8e: cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x000000000049517e: cli; push rax; cli; call qword ptr [rax]; 
0x000000000049501a: cli; push rax; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x00000000004951aa: cli; push rax; idiv dl; inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x0000000000494d02: cli; push rax; xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x0000000000494dce: cli; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x0000000000447d09: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000044be4b: cli; setae al; ret; 
0x0000000000494ad9: cli; stc; jmp qword ptr [rax]; 
0x0000000000440b09: cli; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa8: cli; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x0000000000473638: cli; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004735c8: cli; test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004742f8: cli; test rdx, rdx; je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047428c: cli; test rdx, rdx; je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000438a7d: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004a6a2a: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000044c813: cmc; add byte ptr es:[rbx + rcx*4 + 0x1d], cl; ret; 
0x00000000004746a1: cmc; and ch, 0xf; je 0x746c0; add rax, 2; ret; 
0x00000000004ab90a: cmc; call qword ptr [rbx + 1]; 
0x00000000004abc0a: cmc; call qword ptr [rdx]; 
0x00000000004ab7b2: cmc; call qword ptr [rsi]; 
0x00000000004abcaa: cmc; call rax; 
0x00000000004abc1e: cmc; call rsp; 
0x00000000004af611: cmc; clc; call qword ptr [rax]; 
0x00000000004af625: cmc; clc; call qword ptr [rsi + 0x16]; 
0x000000000045262c: cmc; cli; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004abdc2: cmc; jmp qword ptr [rax]; 
0x00000000004ab7d2: cmc; jmp qword ptr [rbp + 2]; 
0x00000000004abe16: cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004a9769: cmc; mov ch, 0xab; ret; 
0x0000000000434daa: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f7ee: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434da3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f957: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f973: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000446153: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004a6617: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000494a8d: cmc; stc; jmp qword ptr [rax]; 
0x00000000004692d1: cmc; std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004b2b41: cmc; sti; jmp qword ptr [rbx]; 
0x00000000004b2b71: cmc; sti; jmp qword ptr [rsi]; 
0x0000000000446157: cmc; sub eax, edx; ret; 
0x00000000004a8da5: cmc; xlatb; ret 0x4e27; 
0x00000000004198e9: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004198e8: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000448224: cmove eax, ecx; pop rbx; ret; 
0x00000000004717d1: cmove eax, ecx; ret; 
0x00000000004240c3: cmove eax, edx; add rsp, 8; ret; 
0x00000000004481ec: cmove eax, edx; pop rbx; ret; 
0x00000000004241ff: cmove eax, edx; ret; 
0x000000000041534f: cmove ebp, esp; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041534e: cmove ebp, r12d; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047e728: cmove ecx, eax; mov rax, rcx; ret; 
0x000000000048858a: cmove edx, eax; call 0x78bd0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000044be44: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004717d0: cmove r8, rcx; ret; 
0x0000000000448223: cmove rax, rcx; pop rbx; ret; 
0x00000000004240c2: cmove rax, rdx; add rsp, 8; ret; 
0x00000000004481eb: cmove rax, rdx; pop rbx; ret; 
0x00000000004241fe: cmove rax, rdx; ret; 
0x000000000047e727: cmove rcx, rax; mov rax, rcx; ret; 
0x000000000044be43: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004236fa: cmovne eax, ecx; ret; 
0x00000000004703b1: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000417339: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000044827c: cmovne eax, edx; pop rbx; ret; 
0x0000000000424186: cmovne eax, edx; ret; 
0x0000000000440694: cmovne eax, edx; vzeroupper; ret; 
0x0000000000473251: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000473255: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004236f9: cmovne rax, rcx; ret; 
0x000000000044827b: cmovne rax, rdx; pop rbx; ret; 
0x0000000000424185: cmovne rax, rdx; ret; 
0x0000000000440693: cmovne rax, rdx; vzeroupper; ret; 
0x0000000000473250: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000473254: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000045a3bd: cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000044c778: cmovs eax, dword ptr [rbp + 0x480a74d2]; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000478ac9: cmovs eax, dword ptr [rbx + 0x65e8f0e7]; jns 0x78aca; dec dword ptr [rax - 0x77]; ret; 
0x0000000000450c8c: cmovs eax, edx; ret; 
0x0000000000438625: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048da98: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x0000000000471538: cmovs edi, dword ptr [rcx]; int1; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004481ce: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000448260: cmovs esp, dword ptr [rbx + 4]; xchg eax, esi; add rax, rsi; jmp rax; 
0x0000000000485206: cmp ah, byte ptr [rbx + 0x1f]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446c68: cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000446cb2: cmp ah, byte ptr [rbx - 0x37]; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000043df0a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ea6a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e24a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043da2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043e58a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dd6a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d54a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e72a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043d88a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d9c0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e6c0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e1e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ea00: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dd00: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d820: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e520: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000401300: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004b48a0: cmp al, 0; add byte ptr [rax], al; push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x0000000000455ab2: cmp al, 0x24; add byte ptr [rcx - 0x77], al; ret; 
0x000000000044f942: cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x0000000000416f07: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000473c53: cmp al, 0x24; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046e263: cmp al, 0x29; ja 0x6e290; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048aeff: cmp al, 0x2f; ja 0x8b7b1; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048d0bc: cmp al, 0x31; or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x000000000048d04d: cmp al, 0x32; or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x00000000004a7a20: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004b1778: cmp al, 0x60; add byte ptr [rax], al; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004a75c8: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004a9555: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045a4a1: cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x000000000040d609: cmp al, 0xba; add rdi, r10; jmp rdi; 
0x00000000004a6483: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000048bf4d: cmp al, 0xee; ja 0x8c069; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004957a9: cmp al, 0xfb; dec dword ptr [rax + 0x2efffb3d]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x00000000004959d9: cmp al, 0xfb; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x00000000004959d5: cmp al, 0xfb; push rcx; cmp al, 0xfb; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x000000000048832e: cmp al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045a223: cmp al, 0xfd; add byte ptr [rax], al; add al, ch; ret 0xfc5e; 
0x000000000044b6ed: cmp al, 0xff; dec dword ptr [rax - 0x7f]; ret; 
0x000000000046eb80: cmp al, 3; add byte ptr [rax], al; lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004b47f4: cmp al, 3; std; jmp qword ptr [rdx]; 
0x0000000000430769: cmp al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046c273: cmp al, 7; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c220: cmp al, 7; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcf3: cmp al, 7; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c092: cmp al, 7; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c04d: cmp al, 7; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c008: cmp al, 7; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfb9: cmp al, 7; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046070c: cmp al, 7; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460abb: cmp al, 7; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a6d: cmp al, 7; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609be: cmp al, 7; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460962: cmp al, 7; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606c2: cmp al, 7; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460674: cmp al, 7; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460213: cmp al, 7; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004464be: cmp al, byte ptr [rsi - 1]; jne 0x46635; xor eax, eax; ret; 
0x00000000004309a4: cmp al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d05b: cmp al, cl; jne 0x2d930; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000446572: cmp al, cl; jne 0x46635; cmp eax, ecx; jne 0x46635; xor eax, eax; ret; 
0x000000000044662f: cmp al, cl; jne 0x46635; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000042b9a6: cmp al, dh; ret; 
0x000000000042b9a5: cmp al, r14b; ret; 
0x000000000048ae36: cmp bh, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd6: cmp bh, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee36: cmp bh, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a6: cmp bh, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x000000000048ae1e: cmp bh, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048dfbc: cmp bh, 0x30; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee1c: cmp bh, 0x30; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ae18: cmp bh, 0x50; je 0x8ae3b; cmp dil, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048df91: cmp bh, 4; jne 0x8dfa5; mov eax, 8; ret; 
0x0000000000411272: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000048cfd0: cmp byte ptr [r9 + 0xdf], 0; je 0x8cfbc; add rsp, 0x18; ret; 
0x0000000000476bfb: cmp byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x0000000000412c2f: cmp byte ptr [rax + 0x29], cl; ret; 
0x00000000004b4f74: cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004136d9: cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000040177b: cmp byte ptr [rax + 0x39], cl; ret 0x4f76; 
0x0000000000410cce: cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000472d57: cmp byte ptr [rax + 1], cl; clc; ret; 
0x000000000046fe55: cmp byte ptr [rax + 1], cl; ret; 
0x000000000046f8e0: cmp byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004b3b74: cmp byte ptr [rax + rax - 0x355d800], al; jmp qword ptr [rsi]; 
0x000000000045b107: cmp byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000412136: cmp byte ptr [rax - 0x75], cl; adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x00000000004512d8: cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000481b15: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa3: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000453210: cmp byte ptr [rax - 0x75], cl; je 0x53239; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045b284: cmp byte ptr [rax - 0x75], cl; jl 0x5b2ad; and byte ptr [rax + 1], cl; ret; 
0x0000000000411273: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000048472f: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x000000000046f686: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000452be4: cmp byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000494af0: cmp byte ptr [rax], 0xfa; call qword ptr [rax]; 
0x000000000042b9d6: cmp byte ptr [rax], ah; ret; 
0x000000000048cfbf: cmp byte ptr [rax], al; je 0x8cfe0; add rsp, 0x18; ret; 
0x0000000000440230: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x000000000042b9c6: cmp byte ptr [rax], dl; ret; 
0x000000000042b9c5: cmp byte ptr [rax], r10b; ret; 
0x000000000042b9d5: cmp byte ptr [rax], r12b; ret; 
0x000000000044022f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004b3c74: cmp byte ptr [rbp - 0x49780000], al; cld; jmp qword ptr [rdx]; 
0x00000000004649a9: cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004b3f11: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000004b3f45: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b3edd: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x000000000048aad8: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000040db56: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004169f0: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004b3f33: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000004b3ecb: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000004b3eff: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000004a75c7: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000471260: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000048cfd1: cmp byte ptr [rcx + 0xdf], 0; je 0x8cfbc; add rsp, 0x18; ret; 
0x00000000004173ab: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d0bb: cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x00000000004a3e00: cmp byte ptr [rcx - 0x4ec70004], dh; cld; call rax; 
0x000000000045d66c: cmp byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000480016: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000004182d4: cmp byte ptr [rcx], 0xa; je 0x182e8; cmp rsi, rcx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x000000000048d0a1: cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x0000000000455284: cmp byte ptr [rdi], cl; test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000042d8c0: cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d8a9: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d892: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c34e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cdad: cmp byte ptr [rdi], dl; ret; 
0x000000000048d04c: cmp byte ptr [rdx + rsi], 8; jne 0x8d06c; mov rax, qword ptr [rax]; ret; 
0x000000000047f300: cmp byte ptr [rip + 0x23d4c1], 0; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000430ba6: cmp byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddba: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041d927: cmp ch, cl; movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004375a4: cmp ch, dl; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045dbba: cmp cl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000480e95: cmp cl, 9; jbe 0x80e80; cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x000000000049409d: cmp cl, bh; inc dword ptr [rax - 0xf0006af]; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x0000000000446cb5: cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000446734: cmp cl, byte ptr [rax + rdx + 2]; jne 0x46750; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467e4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x46800; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x0000000000488d32: cmp cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x00000000004103b0: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x00000000004947dc: cmp cl, byte ptr [rip + 0xce0fffa]; cli; call qword ptr [rax + 0x13]; 
0x00000000004048c7: cmp cl, ch; ret 0xfffb; 
0x0000000000484515: cmp cx, 0x7fff; je 0x84504; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000440691: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000485482: cmp dh, byte ptr [rbx]; ret; 
0x000000000044810a: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000048ae35: cmp dil, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd5: cmp dil, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee35: cmp dil, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a5: cmp dil, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x000000000048ae1d: cmp dil, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048dfbb: cmp dil, 0x30; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee1b: cmp dil, 0x30; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ae17: cmp dil, 0x50; je 0x8ae3b; cmp dil, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048df90: cmp dil, 4; jne 0x8dfa5; mov eax, 8; ret; 
0x0000000000446d86: cmp dl, 0x20; jb 0x46d95; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446d73: cmp dl, 0x40; jb 0x46d86; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447051: cmp dl, 1; ja 0x4707c; jb 0x4705d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004473b1: cmp dl, 1; ja 0x473f1; jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447801: cmp dl, 1; ja 0x47859; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447dd0: cmp dl, 1; ja 0x47dea; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000447f3e: cmp dl, 1; ja 0x47f6f; jb 0x47f47; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000448106: cmp dl, 1; ja 0x48145; jb 0x4810f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000043865b: cmp dl, 1; jb 0x38664; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446dca: cmp dl, 1; jb 0x46dd1; mov byte ptr [rdi], cl; ret; 
0x0000000000446dbd: cmp dl, 2; jb 0x46dca; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000446db2: cmp dl, 4; jb 0x46dbd; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446d9f: cmp dl, 8; jb 0x46dae; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000423765: cmp dl, al; jne 0x23750; sub rax, 0x10; ret; 
0x0000000000494af1: cmp dl, bh; call qword ptr [rax]; 
0x0000000000494bad: cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x0000000000494bad: cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494ced: cmp dl, bh; jmp qword ptr [rax]; 
0x0000000000494b2d: cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x000000000045e3af: cmp dl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000494bb1: cmp dl, bh; jmp rdx; 
0x0000000000423764: cmp dl, r8b; jne 0x23750; sub rax, 0x10; ret; 
0x000000000040eb21: cmp dword ptr [rax - 0x39], ecx; ret; 
0x000000000048c850: cmp dword ptr [rbp + 8], 5; ja 0x8c88d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000045a693: cmp dword ptr [rbp - 6], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000004754ce: cmp dword ptr [rbx + 0x24733705], ecx; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000047c778: cmp dword ptr [rbx + 8], 0x25; jne 0x7c790; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004010f1: cmp dword ptr [rbx + 8], 0x25; mov r14, qword ptr [rbx]; jne 0x1310; call qword ptr [rbx + 0x10]; 
0x00000000004348e8: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000048cfbd: cmp dword ptr [rcx + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x000000000042e123: cmp dword ptr [rcx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000471534: cmp dword ptr [rcx], 0xa; je 0x71548; cmp rcx, rsi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004198e5: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004182d5: cmp dword ptr [rdx], ecx; je 0x182e8; cmp rsi, rcx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x0000000000471535: cmp dword ptr [rdx], ecx; je 0x71548; cmp rcx, rsi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x0000000000487784: cmp dword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x000000000045e083: cmp dword ptr [rip + 0x39480001], ebx; ret; 
0x0000000000430ee3: cmp dword ptr [rip + 0x63490006], esi; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a56: cmp dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000475b58: cmp dword ptr [rsi], eax; je 0x75c28; xor eax, eax; leave; ret; 
0x00000000004240bf: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f89f: cmp eax, -1; cmove rax, rdx; ret; 
0x00000000004015e5: cmp eax, -1; je 0x16bb; add rsp, 0x98; ret; 
0x0000000000416fa8: cmp eax, -1; je 0x16f28; mov eax, 0xffffffff; ret; 
0x0000000000417198: cmp eax, -1; je 0x17118; mov eax, 0xffffffff; ret; 
0x0000000000471226: cmp eax, -1; je 0x71230; pop rbx; pop rbp; pop r12; ret; 
0x000000000041828e: cmp eax, -1; jne 0x1824f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d592: cmp eax, 0x16; ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000044d609: cmp eax, 0x17; ja 0x4d5e0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044c86d: cmp eax, 0x1e; ja 0x4c894; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000418198: cmp eax, 0x1f0f0003; add byte ptr [rax], r8b; mov rax, -1; ret; 
0x0000000000487785: cmp eax, 0x2317ed; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000047f301: cmp eax, 0x23d4c1; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000480f99: cmp eax, 0x23f7c; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000460761: cmp eax, 0x255fba; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d742: cmp eax, 0x277d3; mov eax, 0x15; syscall; 
0x000000000047c9b0: cmp eax, 0x28403; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046e9fd: cmp eax, 0x29; ja 0x6ea90; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000413182: cmp eax, 0x2a5e20; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000040390c: cmp eax, 0x2b564e; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046eb18: cmp eax, 0x351af; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046e3c6: cmp eax, 0x37; ja 0x6e780; lea rcx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046eb7b: cmp eax, 0x37; ja 0x6eec0; lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000495861: cmp eax, 0x3d04fffb; sti; call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x0000000000495ac9: cmp eax, 0x3d04fffb; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x00000000004958a9: cmp eax, 0x3d14fffb; sti; jmp qword ptr [rbx + 0x3e]; 
0x0000000000495909: cmp eax, 0x3d24fffb; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x000000000049590d: cmp eax, 0x3d6afffb; sti; call qword ptr [rsi + 0x3d]; 
0x00000000004957b1: cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x0000000000495721: cmp eax, 0x3deefffb; sti; jmp rsi; 
0x0000000000495725: cmp eax, 0x3ee6fffb; sti; call qword ptr [rsi + 0x3e]; 
0x00000000004755e8: cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x000000000044c14f: cmp eax, 0x49b71; mov eax, 0x15; syscall; 
0x0000000000430640: cmp eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a7901: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000004a78fe: cmp eax, 0x733db8a1; xlatb; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x000000000044c56f: cmp eax, 0x83482f74; ret; 
0x000000000044c396: cmp eax, 0x83497174; ret; 
0x000000000040ec9e: cmp eax, 0x83f8a; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040d319: cmp eax, 0x85462; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004733b4: cmp eax, 0x89000001; ret 0x8948; 
0x0000000000402199: cmp eax, 0xa; ja 0x1ec1; lea rdx, [rip + 0x904a7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402285: cmp eax, 0xa; ja 0x1eef; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000472102: cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee2: cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241f2: cmp eax, 0xc00; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eb2: cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d2: cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a82: cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472132: cmp eax, 0xc00; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x0000000000417019: cmp eax, 0xd8af8b48; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004af4b9: cmp eax, 0xe840000; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004490e7: cmp eax, 0xfffff000; ja 0x49110; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000449618: cmp eax, 0xfffff001; jae 0x49620; ret; 
0x000000000044a6a8: cmp eax, 0xfffff001; jae 0x4a6b0; ret; 
0x000000000044a6d8: cmp eax, 0xfffff001; jae 0x4a6e0; ret; 
0x000000000044a708: cmp eax, 0xfffff001; jae 0x4a710; ret; 
0x000000000044bdbb: cmp eax, 0xfffff001; jae 0x4bdc3; ret; 
0x000000000044bde8: cmp eax, 0xfffff001; jae 0x4bdf0; ret; 
0x0000000000475388: cmp eax, 0xfffff001; jae 0x75390; ret; 
0x0000000000488538: cmp eax, 0xfffff001; jae 0x88540; ret; 
0x0000000000448786: cmp eax, 1; je 0x487a0; cmp eax, 2; je 0x48798; xor eax, eax; ret; 
0x000000000044878b: cmp eax, 2; je 0x48798; xor eax, eax; ret; 
0x000000000044bf2a: cmp eax, 4; je 0x4bf30; ret; 
0x00000000004715bd: cmp eax, dword ptr [rdx + 0x18]; jbe 0x715e6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043085a: cmp eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004175c4: cmp eax, eax; jbe 0x175d8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000480e9b: cmp eax, eax; je 0x80de6; sub eax, r8d; ret; 
0x00000000004108a3: cmp eax, ecx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000416ed8: cmp eax, ecx; jbe 0x16ef0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000417039: cmp eax, ecx; jbe 0x170f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000417261: cmp eax, ecx; jbe 0x172f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004173df: cmp eax, ecx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417458: cmp eax, ecx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e8: cmp eax, ecx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041827f: cmp eax, ecx; jbe 0x182a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000047143d: cmp eax, ecx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000446c1f: cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000446412: cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000044657a: cmp eax, ecx; jne 0x46635; xor eax, eax; ret; 
0x0000000000446633: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000410fb1: cmp eax, edi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004143e3: cmp eax, edi; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045d805: cmp eax, edi; jbe 0x5ee25; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045ddab: cmp eax, edi; jbe 0x5eeb9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041907b: cmp eax, edx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x000000000044be60: cmp eax, edx; jne 0x4be6c; nop; mov eax, 0xca; syscall; 
0x000000000047f2c5: cmp eax, edx; jne 0x7f2dc; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x0000000000416de2: cmp eax, esi; jbe 0x16e40; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000045e2c4: cmp eax, esi; jbe 0x5ee3d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045df80: cmp eax, esi; jbe 0x5eea1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000469af8: cmp eax, esi; jbe 0x6a870; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000470658: cmp eax, esi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004714d7: cmp eax, esi; jbe 0x714f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004014ec: cmp ebp, dword ptr [rcx - 0x16edffd5]; ret; 
0x000000000044bec6: cmp ebx, 0xa; je 0x4becc; ret; 
0x0000000000484516: cmp ecx, 0xe8747fff; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044c0e1: cmp ecx, dword ptr [rax + 0x18]; ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c10f: cmp ecx, dword ptr [rax + 0x18]; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044e9f2: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000470ce4: cmp ecx, dword ptr [rbp - 0x75]; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000047f8e8: cmp ecx, dword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000488081: cmp ecx, dword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x00000000004717ce: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000042d4d5: cmp ecx, eax; jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf7b: cmp ecx, eax; jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cecf: cmp ecx, eax; jne 0x2d903; xor eax, eax; ret; 
0x000000000042cfc6: cmp ecx, eax; jne 0x2d90f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cef7: cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000042d1c8: cmp ecx, eax; jne 0x2d91a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000047e678: cmp ecx, eax; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x00000000004826a8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000484212: cmp ecx, ecx; ret; 
0x000000000047153a: cmp ecx, esi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004710ae: cmp edi, dword ptr [rax + 0x18]; jbe 0x710db; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000465790: cmp edi, eax; ja 0x65770; mov eax, r9d; ret; 
0x0000000000447039: cmp edi, ecx; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447394: cmp edi, ecx; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477df: cmp edi, ecx; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446fd2: cmp edi, edx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048843e: cmp edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x000000000046578f: cmp edi, r8d; ja 0x65770; mov eax, r9d; ret; 
0x0000000000495095: cmp edx, -1; add byte ptr [rbp - 0x795f0006], al; cli; inc dword ptr [rax - 0x78]; cli; jmp rax; 
0x0000000000473aed: cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x0000000000447d2f: cmp edx, 0x20; ja 0x47d3f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447cdf: cmp edx, 0x20; ja 0x47d48; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000040f3c5: cmp edx, 0x24; jbe 0xf3e0; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000040faf5: cmp edx, 0x24; jbe 0xfb10; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000447e87: cmp edx, 0x40; ja 0x47e9a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447e37: cmp edx, 0x40; ja 0x47ea3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044821d: cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x000000000040ea43: cmp edx, 3; jne 0xe970; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000471320: cmp edx, dword ptr [rax + 0x18]; jbe 0x71344; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000494218: cmp edx, dword ptr [rsi - 0x69240007]; stc; jmp qword ptr [rax - 0x69]; 
0x0000000000472fa5: cmp edx, eax; jbe 0x73000; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472fc5: cmp edx, eax; jbe 0x73000; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000472fe5: cmp edx, eax; jbe 0x73000; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000472f95: cmp edx, eax; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x0000000000447f22: cmp edx, ecx; jne 0x47f07; vzeroupper; ret; 
0x00000000004480e5: cmp edx, ecx; jne 0x480c2; vzeroupper; ret; 
0x0000000000494b29: cmp edx, edi; call rsi; 
0x0000000000494b29: cmp edx, edi; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494b25: cmp edx, edi; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x0000000000494b25: cmp edx, edi; inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494ba9: cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x0000000000494ba9: cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494ae5: cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494ba5: cmp edx, edi; push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000044be4a: cmp edx, edi; setae al; ret; 
0x0000000000494b28: cmp edx, r15d; call rsi; 
0x0000000000494b28: cmp edx, r15d; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x00000000004190b9: cmp esi, -1; setne al; neg eax; ret; 
0x0000000000449b38: cmp esi, 9; jne 0x49b07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004707f5: cmp esi, dword ptr [rax + 0x18]; jbe 0x7081e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004709a5: cmp esi, dword ptr [rax + 0x18]; jbe 0x709d2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004751db: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004473b5: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004a7bb8: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000473945: cmp esi, eax; jbe 0x739c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004a8da4: cmp esi, ebp; xlatb; ret 0x4e27; 
0x00000000004182da: cmp esi, ecx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x000000000041476a: cmp esp, edx; jbe 0x14950; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048cfbc: cmp qword ptr [r9 + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x00000000004198e4: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000487783: cmp qword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x0000000000475b57: cmp qword ptr [rsi], rax; je 0x75c28; xor eax, eax; leave; ret; 
0x0000000000447800: cmp r10b, 1; ja 0x47859; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044bec5: cmp r11d, 0xa; je 0x4becc; ret; 
0x0000000000414769: cmp r12, rdx; jbe 0x14950; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480e9a: cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x0000000000480e94: cmp r9b, 9; jbe 0x80e80; cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x00000000004490e6: cmp rax, -0x1000; ja 0x49110; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000449617: cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044a6a7: cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044a6d7: cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a707: cmp rax, -0xfff; jae 0x4a710; ret; 
0x000000000044bdba: cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044bde7: cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x0000000000475387: cmp rax, -0xfff; jae 0x75390; ret; 
0x0000000000488537: cmp rax, -0xfff; jae 0x88540; ret; 
0x00000000004240be: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f89e: cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044d591: cmp rax, 0x16; ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000044d608: cmp rax, 0x17; ja 0x4d5e0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044c86c: cmp rax, 0x1e; ja 0x4c894; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004715bc: cmp rax, qword ptr [rdx + 0x18]; jbe 0x715e6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004175c3: cmp rax, r8; jbe 0x175d8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004108a2: cmp rax, rcx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000416ed7: cmp rax, rcx; jbe 0x16ef0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000417038: cmp rax, rcx; jbe 0x170f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000417260: cmp rax, rcx; jbe 0x172f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004173de: cmp rax, rcx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417457: cmp rax, rcx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e7: cmp rax, rcx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041827e: cmp rax, rcx; jbe 0x182a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000047143c: cmp rax, rcx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000410fb0: cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004143e2: cmp rax, rdi; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045d804: cmp rax, rdi; jbe 0x5ee25; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045ddaa: cmp rax, rdi; jbe 0x5eeb9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041907a: cmp rax, rdx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x000000000047f2c4: cmp rax, rdx; jne 0x7f2dc; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x0000000000416de1: cmp rax, rsi; jbe 0x16e40; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000045e2c3: cmp rax, rsi; jbe 0x5ee3d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045df7f: cmp rax, rsi; jbe 0x5eea1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000469af7: cmp rax, rsi; jbe 0x6a870; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000470657: cmp rax, rsi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004714d6: cmp rax, rsi; jbe 0x714f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000044c0e0: cmp rcx, qword ptr [rax + 0x18]; ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c10e: cmp rcx, qword ptr [rax + 0x18]; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000047f8e7: cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000488080: cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x00000000004717cd: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000047e677: cmp rcx, r8; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042d4d4: cmp rcx, rax; jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf7a: cmp rcx, rax; jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cece: cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x00000000004826a7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000471539: cmp rcx, rsi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004710ad: cmp rdi, qword ptr [rax + 0x18]; jbe 0x710db; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000447038: cmp rdi, r9; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447393: cmp rdi, r9; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477de: cmp rdi, r9; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446fd1: cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447d2e: cmp rdx, 0x20; ja 0x47d3f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447cde: cmp rdx, 0x20; ja 0x47d48; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447e86: cmp rdx, 0x40; ja 0x47e9a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447e36: cmp rdx, 0x40; ja 0x47ea3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040ea42: cmp rdx, 3; jne 0xe970; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000047131f: cmp rdx, qword ptr [rax + 0x18]; jbe 0x71344; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000472fa4: cmp rdx, rax; jbe 0x73000; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472fc4: cmp rdx, rax; jbe 0x73000; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000472fe4: cmp rdx, rax; jbe 0x73000; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000472f94: cmp rdx, rax; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x0000000000447f21: cmp rdx, rcx; jne 0x47f07; vzeroupper; ret; 
0x00000000004480e4: cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x000000000044be49: cmp rdx, rdi; setae al; ret; 
0x00000000004707f4: cmp rsi, qword ptr [rax + 0x18]; jbe 0x7081e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004709a4: cmp rsi, qword ptr [rax + 0x18]; jbe 0x709d2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000473944: cmp rsi, rax; jbe 0x739c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004182d9: cmp rsi, rcx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x0000000000440690: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000475bdd: cmp word ptr [rsi + 0x14], 0x2f75; jne 0x75b0d; mov eax, 1; leave; ret; 
0x0000000000491706: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000042d359: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000481a0c: cmpsb byte ptr [rsi], byte ptr [rdi]; and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004abe15: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x000000000042cd76: cmpsb byte ptr [rsi], byte ptr [rdi]; jae 0x2cd7f; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000459006: cmpsb byte ptr [rsi], byte ptr [rdi]; jns 0x59005; jmp qword ptr [rsi + 0xf]; 
0x0000000000458f06: cmpsb byte ptr [rsi], byte ptr [rdi]; jp 0x58f05; jmp qword ptr [rsi + 0xf]; 
0x000000000043e046: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040058c: cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x00000000004b01a5: cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004943c9: cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x00000000004021a5: cmpsd dword ptr [rsi], dword ptr [rdi]; add al, 9; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000047c9b8: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; jmp rax; 
0x0000000000431775: cmpsd dword ptr [rsi], dword ptr [rdi]; sub al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a98f5: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004b2f38: cwde; adc bh, ah; jmp qword ptr [rax]; 
0x000000000048aeb0: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a96c: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000048af45: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000041199b: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000491fac: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004916bc: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000048cbc5: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004782eb: cwde; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004950c9: cwde; cli; call qword ptr [rax - 0x80]; 
0x00000000004b5d08: cwde; lahf; std; jmp qword ptr [rax]; 
0x0000000000494260: cwde; mov cl, 0xf9; jmp qword ptr [rax - 0x4d]; 
0x000000000046075a: cwde; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460dfc: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a4: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460709: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab8: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a6a: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609bb: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046095f: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606bf: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460671: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460210: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b46d4: cwde; pop qword ptr [rax]; add al, ch; cli; cld; call qword ptr [rbx]; 
0x00000000004afdf9: cwde; stc; jmp qword ptr [rcx]; 
0x00000000004b5b29: cwde; std; call qword ptr [rdx]; 
0x00000000004b3bd4: cwde; test byte ptr [rax], al; add byte ptr [rax], bl; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004af598: cwde; xchg eax, esi; clc; call qword ptr [rax]; 
0x0000000000442331: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000442332: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x0000000000438bd2: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004478f5: dec byte ptr [rax + 0x7f]; je 0x47911; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000447ad3: dec byte ptr [rax + 0x7f]; jg 0x47adb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447c79: dec byte ptr [rax + 0x7f]; jg 0x47c81; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004478fd: dec byte ptr [rax + 0x7f]; jl 0x47919; cld; vzeroupper; ret; 
0x0000000000447a06: dec byte ptr [rax + 0x7f]; jns 0x47a09; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447b9f: dec byte ptr [rax + 0x7f]; jns 0x47ba2; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a0d: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000045d5c9: dec byte ptr [rax - 0x75]; mov ebp, 0xfffff758; call rax; 
0x0000000000480cef: dec byte ptr [rax - 0x77]; fisttp word ptr [rax - 0x77]; ret 0xade8; 
0x0000000000472020: dec byte ptr [rax - 0x77]; ret; 
0x0000000000480c8d: dec byte ptr [rax - 0x7d]; ret; 
0x000000000044a952: dec byte ptr [rbx + rcx*4 + 0x5f]; or byte ptr [rcx - 0xa], al; ret; 
0x000000000040e4c6: dec byte ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000040e077: dec byte ptr [rcx + rcx*4 - 0x11]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004649ac: dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000449b39: dec byte ptr [rcx]; jne 0x49b07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000447080: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000004569d3: dec dword ptr [r8 - 0x7d]; ret 0x8801; 
0x000000000045d666: dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x0000000000442472: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000004829b1: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x0000000000482af1: dec dword ptr [rax + 0x29]; ret 0x894c; 
0x000000000041efc5: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x0000000000411b3d: dec dword ptr [rax + 0x29]; ret; 
0x0000000000468b80: dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004957ab: dec dword ptr [rax + 0x2efffb3d]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x0000000000473147: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046e972: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000041396d: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000476163: dec dword ptr [rax + 0x39]; ret; 
0x000000000041d33f: dec dword ptr [rax + 0x48282454]; mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004846ae: dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x000000000045ee12: dec dword ptr [rax + 0x63]; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000046e6f2: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x0000000000473349: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000045b10b: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000472171: dec dword ptr [rax + 1]; ret; 
0x0000000000490dab: dec dword ptr [rax - 0x39]; add eax, 0x22b201; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000490526: dec dword ptr [rax - 0x39]; add eax, 0x22b956; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000481a07: dec dword ptr [rax - 0x39]; add eax, 0x23a63d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000044959f: dec dword ptr [rax - 0x39]; ret 0; 
0x0000000000449544: dec dword ptr [rax - 0x39]; ret 0x8000; 
0x000000000045d630: dec dword ptr [rax - 0x39]; ret 0xac20; 
0x00000000004494b7: dec dword ptr [rax - 0x39]; ret 0xff80; 
0x00000000004682c6: dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x0000000000449835: dec dword ptr [rax - 0x39]; ret 0xffc0; 
0x000000000044940c: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x00000000004030f3: dec dword ptr [rax - 0x39]; ret; 
0x0000000000485b01: dec dword ptr [rax - 0x39]; sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x000000000048bc5f: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x000000000040236e: dec dword ptr [rax - 0x73]; adc eax, 0x90332; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021a1: dec dword ptr [rax - 0x73]; adc eax, 0x904a7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040201d: dec dword ptr [rax - 0x73]; adc eax, 0x905ff; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004568e4: dec dword ptr [rax - 0x73]; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000424acd: dec dword ptr [rax - 0x73]; add eax, 0x21b7b; cmove rax, rdx; ret; 
0x000000000046e843: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000041818f: dec dword ptr [rax - 0x73]; push -0x2a171115; cmp eax, 0x1f0f0003; add byte ptr [rax], r8b; mov rax, -1; ret; 
0x000000000047fac5: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041f418: dec dword ptr [rax - 0x73]; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000048c152: dec dword ptr [rax - 0x75]; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x0000000000484203: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x000000000041126f: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000044f18c: dec dword ptr [rax - 0x75]; jne 0x4f121; call rsi; 
0x0000000000491fa7: dec dword ptr [rax - 0x75]; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000468adb: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045ddbc: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000048c97f: dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004144f1: dec dword ptr [rax - 0x75]; push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000416efc: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004600f7: dec dword ptr [rax - 0x75]; xchg eax, ebp; call 0x490600fa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000458708: dec dword ptr [rax - 0x75]; xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000481c2c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004200d4: dec dword ptr [rax - 0x77]; add eax, 0x299784; ret; 
0x00000000004200c6: dec dword ptr [rax - 0x77]; add eax, 0x29979a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x000000000048a307: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000041d3fd: dec dword ptr [rax - 0x77]; bnd jmp 0x1d20e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047f441: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000402e96: dec dword ptr [rax - 0x77]; fucomip st(0); push rcx; rol byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000046b0b9: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f85e: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000041d405: dec dword ptr [rax - 0x77]; push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047576e: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x000000000041f8bf: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x00000000004756cd: dec dword ptr [rax - 0x77]; ret 0x7577; 
0x000000000041f63c: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000424037: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000045af32: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000046d2d8: dec dword ptr [rax - 0x77]; ret 0x8b44; 
0x00000000004492f3: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000047865c: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x000000000044a665: dec dword ptr [rax - 0x77]; ret 0xa076; 
0x0000000000449491: dec dword ptr [rax - 0x77]; ret 0xa0e9; 
0x00000000004568fd: dec dword ptr [rax - 0x77]; ret 0xb2eb; 
0x000000000044947d: dec dword ptr [rax - 0x77]; ret 0xb4e9; 
0x000000000046b3e9: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000047cc77: dec dword ptr [rax - 0x77]; ret 0xb8e8; 
0x000000000046d646: dec dword ptr [rax - 0x77]; ret 0xd9e8; 
0x0000000000475c7c: dec dword ptr [rax - 0x77]; ret 0xefeb; 
0x000000000046f68a: dec dword ptr [rax - 0x77]; ret 0xf41; 
0x00000000004058df: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x0000000000401b5d: dec dword ptr [rax - 0x77]; ret; 
0x00000000004758c6: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000484d1f: dec dword ptr [rax - 0x7b]; sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x235e34; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fce: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000048756c: dec dword ptr [rax - 0x7d]; call 0x7c93bd75; ret; 
0x00000000004692d3: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045605a: dec dword ptr [rax - 0x7d]; jl 0x56083; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x0000000000454701: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000452deb: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000405e2b: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004569d4: dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000048df47: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x000000000040482f: dec dword ptr [rax - 0x7d]; ret; 
0x00000000004594d8: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004348ec: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000044b6f0: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000476f07: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x000000000048e944: dec dword ptr [rax - 9]; ret; 
0x00000000004965f3: dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x0000000000495297: dec dword ptr [rax]; xor bl, bh; inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x000000000045fb3b: dec dword ptr [rbp + 0x29]; fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000461534: dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x0000000000405a2b: dec dword ptr [rbp - 0x73]; je 0x5a36; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000046f651: dec dword ptr [rbp - 0x75]; mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000403607: dec dword ptr [rbp - 0x75]; push rsp; ret 0x4820; 
0x000000000046775d: dec dword ptr [rbp - 0x77]; ret 0x894c; 
0x000000000045c576: dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000400ec4: dec dword ptr [rbx + 0x2baf3115]; add bh, dh; ret 0; 
0x00000000004236ad: dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x0000000000464c81: dec dword ptr [rbx - 0x1237b]; inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000471478: dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000046d1d5: dec dword ptr [rbx - 0x177cefbe]; xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x0000000000470a0b: dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000046148f: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000047c319: dec dword ptr [rcx + 0x39]; ret 0x860f; 
0x000000000045fd73: dec dword ptr [rcx + 0x39]; ret; 
0x0000000000484c04: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000046a777: dec dword ptr [rcx + 0x63]; ret 0x8545; 
0x000000000046abf5: dec dword ptr [rcx + 0x63]; ret; 
0x000000000040228d: dec dword ptr [rcx + 0x63]; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000448242: dec dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000473acc: dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000047c595: dec dword ptr [rcx + rax - 0x28]; call rax; 
0x000000000046ae62: dec dword ptr [rcx + rbp - 0x1f]; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004845dd: dec dword ptr [rcx + rcx*4 + 0x4f]; or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000042f57e: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000048463c: dec dword ptr [rcx + rcx*4 + 7]; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004697d7: dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x00000000004697cd: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045f5f9: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000468ad1: dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046c4f8: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046b52a: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c675: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c502: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rax + 0x38]; 
0x000000000046b537: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rcx + 0x38]; 
0x000000000044f189: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045d5c6: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045fa65: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000458431: dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000045870f: dec dword ptr [rcx + rcx*4 - 9]; call rdx; 
0x000000000045d426: dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000046ae6f: dec dword ptr [rcx - 0x3f]; inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046bace: dec dword ptr [rcx - 0x4e773]; ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000455492: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000040e33f: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000040e1e4: dec dword ptr [rcx - 0x75]; add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000047c660: dec dword ptr [rcx - 0x77]; ret 0x13e9; 
0x0000000000404871: dec dword ptr [rcx - 0x77]; ret 0x149; 
0x000000000047d000: dec dword ptr [rcx - 0x77]; ret 0x9be9; 
0x000000000046a744: dec dword ptr [rcx - 0x77]; ret 0xff31; 
0x000000000045fcd7: dec dword ptr [rcx - 0x77]; ret; 
0x000000000041cbb6: dec dword ptr [rcx - 0x7b]; ret; 
0x000000000045fadf: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000004952c7: dec dword ptr [rdi + rbp]; sti; call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x000000000045ffdb: dec dword ptr [rdi + rcx + 0x48]; ret 0x958b; 
0x0000000000416ff0: dec dword ptr [rdi]; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000461340: dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000004532ef: dec dword ptr [rdi]; test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000042c286: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x00000000004464c0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045f2bf: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000046d946: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000047d75a: dec dword ptr [rdi]; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000421c3c: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x00000000004190bb: dec dword ptr [rdi]; xchg eax, ebp; sal bh, 0xd8; ret; 
0x0000000000466df5: dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000494adf: dec dword ptr [rsi + 0x33]; cli; call rax; 
0x0000000000494adf: dec dword ptr [rsi + 0x33]; cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004952cf: dec dword ptr [rsi]; xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000400c3d: dec ecx; ret; 
0x00000000004a3d83: dec esp; scasb al, byte ptr [rdi]; cld; call rax; 
0x0000000000442471: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000473146: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000484444: div byte ptr [rbp + 0x29]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000473532: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000484512: div byte ptr [rbp - 0x11]; cmp cx, 0x7fff; je 0x84504; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000047e6c5: div byte ptr [rbx + rax + 0x48]; mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x000000000048d09e: div byte ptr [rdi + rcx - 0x80]; mov esp, 0xd837; add byte ptr [rax], al; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004657a6: div eax; add r9d, eax; mov eax, r9d; ret; 
0x00000000004482f8: div ecx; mov eax, eax; ret; 
0x00000000004482df: div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000480cf8: div edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004657a5: div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000048d0a4: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000048d063: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000413380: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000410568: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000410036: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000437247: fadd dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004b49e8: fadd dword ptr [rsi]; std; call qword ptr [rdi]; 
0x0000000000465793: fadd qword ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000444c80: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x000000000042cf51: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048fe74: fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042cf4f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000440d3b: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000045e4a6: fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000048d069: fcomi st(3); ret; 
0x0000000000410d59: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000414f96: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044a501: fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000004a9919: fcomp dword ptr [rdx + 0x21]; ret; 
0x00000000004af5e8: fcomp st(1); clc; call qword ptr [rax]; 
0x0000000000488286: fcos; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000484c02: fcos; dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000488428: fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x000000000048850f: fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000482584: fdiv dword ptr [rbp + 0x1e]; add rsp, 0x110; pop rbx; ret; 
0x00000000004a4da0: fdiv dword ptr [rbp - 3]; jmp rax; 
0x000000000042d41f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d21f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004944e9: fdiv st(1), st(0); inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x0000000000494509: fdiv st(1), st(0); inc dword ptr [rax]; fdivp st(1); jmp rax; 
0x000000000048acb9: fdiv st(3); ret; 
0x000000000040281e: fdiv st(7), st(0); inc dword ptr [rbp - 0x7aa48740]; ror byte ptr [rdi], 0x84; ret; 
0x0000000000461cc3: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000046d5b4: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004944cd: fdivp st(1); jmp qword ptr [rax - 0x20]; 
0x00000000004944ed: fdivp st(1); jmp qword ptr [rax]; 
0x000000000049450d: fdivp st(1); jmp rax; 
0x00000000004b438d: fdivp st(4); call qword ptr [rdi + 1]; 
0x000000000041f63a: fdivp st(7); dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004944e1: fdivr st(1); inc dword ptr [rax + 0x60fff9da]; fdiv st(1), st(0); inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x0000000000494501: fdivr st(1); inc dword ptr [rax - 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004a6ed5: fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x000000000046d94f: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000446638: fdivr st(7); ret; 
0x0000000000444de2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x0000000000400591: fiadd dword ptr [rax]; test dl, dl; jne 0x598; ret; 
0x000000000040f8c8: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x00000000004370c7: fiadd dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000412dba: fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x0000000000472e1e: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000041476e: fiadd word ptr [rcx]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000436c47: fiadd word ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a9766: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x000000000042d31f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d01f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000488085: fidivr dword ptr [rax + 1]; ret; 
0x000000000048f8fa: fidivr dword ptr [rbp - 0x49f0ffff]; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000424212: fidivr dword ptr [rbx + 0x29]; add bh, dh; ret 0; 
0x00000000004597f5: fild dword ptr [rbx]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000436f47: fild dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004015e1: fild dword ptr [rsp + rax - 0x77d00]; je 0x16bb; add rsp, 0x98; ret; 
0x000000000048cfd3: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x0000000000464582: fild word ptr [rbp - 0x77]; ret 0x8b4c; 
0x0000000000458428: fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000041a55c: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000455499: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000480ce7: fimul dword ptr [rax + 0x39]; ret 0x7472; 
0x000000000046511d: fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x000000000041b65d: fimul dword ptr [rax + 0x39]; ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x0000000000446c75: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x00000000004736e5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004743a5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000042aae6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046ba9d: fimul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000040eb37: fimul dword ptr [rax - 9]; ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648e3748; ret; 
0x000000000045df8a: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000042f601: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450e2f: fimul word ptr [rax + 1]; ret; 
0x000000000042f602: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045fb41: fimul word ptr [rcx + rcx*4 - 9]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004499ff: fistp qword ptr [rax + 1]; syscall; 
0x0000000000412097: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416f9e: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x00000000004706e0: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x000000000048fe71: fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000458a67: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000483341: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000048fffd: fisttp dword ptr [rax - 0x77]; sbb eax, 0x22bceb; jne 0x8ffe8; pop rbx; ret; 
0x0000000000465f6c: fisttp dword ptr [rax - 0x7b]; rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000047f4b6: fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000466c18: fisttp dword ptr [rax - 0x7d]; jl 0x66c41; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000048c490: fisttp dword ptr [rbx + 0x63]; add al, 0x99; add rax, r9; jmp rax; 
0x000000000048335b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000455177: fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000048df0d: fisttp dword ptr [rdi]; mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000042182b: fisttp dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x000000000047d5d4: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000045efc1: fisttp dword ptr [rsi + 1]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000042f7e1: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004249da: fisttp qword ptr [rax + 0x29]; ret; 
0x0000000000405e4e: fisttp qword ptr [rax - 0x7d]; ret 0x4401; 
0x0000000000446b72: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042f7e2: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f431: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f52d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f479: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044a770: fisttp word ptr [rax - 0x77]; call 0x5c4604d3; mov esi, 2; jmp rax; 
0x0000000000480cf2: fisttp word ptr [rax - 0x77]; ret 0xade8; 
0x00000000004019c3: fisttp word ptr [rax - 0x7d]; ret; 
0x00000000004833df: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000494120: fisttp word ptr [rbp - 0x6f4f0007]; stc; lcall [rsi - 0x5f000671]; nop; stc; call rcx; 
0x0000000000449cbd: fisttp word ptr [rcx + 0x3b8c2]; add byte ptr [rax], al; syscall; 
0x000000000042f432: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f52e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47a: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045fb3e: fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000043f37d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000042d321: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444c1f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000047e982: fisub word ptr [rbx]; add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000042d021: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444c61: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000048dcfb: fld dword ptr [rcx]; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000418f43: fld dword ptr [rcx]; sub al, byte ptr [rax]; ret; 
0x00000000004373f2: fld dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000483654: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000465ab8: fld qword ptr [rbx]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4ce8; 
0x0000000000436dc7: fld qword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a7bc1: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000473382: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000040ec4d: fld xword ptr [rdx]; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a98f1: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000424e23: fldenv [rcx]; add al, byte ptr [rax]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x000000000042b977: fldenv [rsi + 0xf]; je 0x2b9cb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000472c59: fldenv [rsi + 0xf]; je 0x72cad; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042d3a1: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b891: fldenv [rsi + 0xf]; xlatb; ret; 
0x00000000004880ed: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004842ad: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000467f8c: fldpi; stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004843f4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000044a525: fmul dword ptr [rax + 0x39]; ret; 
0x0000000000412a38: fmul dword ptr [rax - 0x77]; ret; 
0x000000000040e151: fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004898c4: fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000476f0a: fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x000000000048d3d7: fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cd21: fmul dword ptr [rcx + rcx*4 - 0x1f]; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000042f9d1: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000486c12: fmul qword ptr [rax - 0x77]; ret; 
0x000000000042f9d2: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004250d9: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438fff: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000045f09f: fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000494698: fmul qword ptr [rip + 0xd6cfffa]; cli; call qword ptr [rdx]; 
0x000000000048f3a2: fmulp st(7); and al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004481a3: fnop; add al, 0; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x000000000047f2d3: fnop; and eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000473380: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000424c3f: fnsave dword ptr [rcx]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000042d11f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d39f: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043063f: fnstsw dword ptr [rip + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dba9: fpatan; ret; 
0x00000000004af5e9: fprem; call qword ptr [rax]; 
0x000000000042d121: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043ae3f: fst st(6); add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004a78a7: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x000000000043eb3f: fstp qword ptr [rcx + 0xc8b0005]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004a7c20: fstp st(0); ret 0xde5d; 
0x0000000000449628: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004496b8: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449968: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000042d421: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004411a4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000042d221: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044039c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000042db80: fsub qword ptr [rsi + 6]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000404a77: fsub st(0), st(0); mov ebx, 0x8bffffb9; mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000004af368: fsubr dword ptr [rdi - 9]; jmp qword ptr [rbx + 2]; 
0x0000000000449c64: fsubr st(3); ret 0xf66; 
0x000000000047f43c: fucomi st(0); outsb dx, byte ptr [rsi]; adc eax, 0x8948fffa; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047a161: fucomi st(3); ret 0x1f0f; 
0x000000000042bfde: fucomi st(4); vptest ymm5, ymm0; jae 0x2c280; xor eax, eax; vzeroupper; ret; 
0x0000000000402e99: fucomip st(0); push rcx; rol byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x0000000000473c37: fucomip st(0); ret; 
0x000000000048b361: fucomip st(1); ret; 
0x0000000000462b0d: fyl2xp1; dec dword ptr [rax + 0x29]; ret; 
0x0000000000494461: fyl2xp1; inc dword ptr [rax - 0x25]; stc; jmp qword ptr [rax]; 
0x0000000000494441: fyl2xp1; jmp qword ptr [rax - 0x25]; 
0x0000000000494481: fyl2xp1; jmp qword ptr [rax]; 
0x0000000000494421: fyl2xp1; push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x000000000045e1be: hlt; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000044d4a3: hlt; add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x000000000042c428: hlt; jl 0x2c431; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000044d4d8: hlt; jle 0x4d4dd; add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x00000000004b0962: hlt; jmp qword ptr [rbx]; 
0x00000000004b3c4a: hlt; jmp qword ptr [rcx]; 
0x00000000004afb2c: hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x0000000000434d2a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f9de: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d23: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004490ee: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x000000000042fb37: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb53: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004140ec: hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000048520b: hlt; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446143: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000494ac9: hlt; stc; jmp qword ptr [rax]; 
0x00000000004b2af1: hlt; sti; call qword ptr [rsi + 1]; 
0x0000000000446147: hlt; sub eax, edx; ret; 
0x00000000004ae830: hlt; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004345e6: idiv bh; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045d42c: idiv bh; call rax; 
0x0000000000468ad9: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045ddba: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x0000000000468acf: idiv bh; dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000045d5c4: idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045d424: idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000045d5bd: idiv bh; inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d05d5be; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045e674: idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000045e186: idiv bh; jmp qword ptr [rax]; 
0x0000000000466ee3: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004074d4: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004b2ba9: idiv bl; jmp qword ptr [rbx]; 
0x00000000004a7bb7: idiv byte ptr [rbx]; jbe 0xa7bee; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000450c86: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x00000000004951a1: idiv dl; call rax; 
0x00000000004951a1: idiv dl; call rax; idiv dl; jmp rax; 
0x00000000004951ad: idiv dl; inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x00000000004951a5: idiv dl; jmp rax; 
0x00000000004951a9: idiv dl; push rax; idiv dl; inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x0000000000494ad1: idiv ecx; jmp qword ptr [rax]; 
0x000000000045d746: idiv edi; call qword ptr [rax]; 
0x0000000000469217: idiv edi; call qword ptr [rbx + 0xf]; 
0x000000000045d664: idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x0000000000468b7e: idiv edi; dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045d62e: idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000041d3fb: idiv edi; dec dword ptr [rax - 0x77]; bnd jmp 0x1d20e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000046a111: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004697d5: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x00000000004697cb: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000492842: idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x000000000046936d: idiv edi; inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000469c0f: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041baab: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000049283a: idiv edi; mov r9b, 0xf7; ljmp [rbx - 0x50]; idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x00000000004951bd: idiv edx; call qword ptr [rax - 9]; 
0x00000000004951bd: idiv edx; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x00000000004951b1: idiv edx; call qword ptr [rax]; 
0x00000000004951c5: idiv edx; inc dword ptr [rax - 0x5f000509]; idiv edx; inc eax; idiv edx; jmp rax; 
0x00000000004951b9: idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004951b9: idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x00000000004951d5: idiv edx; inc dword ptr [rax]; clc; cli; jmp qword ptr [rax]; 
0x00000000004951cd: idiv edx; inc eax; idiv edx; jmp rax; 
0x00000000004951c1: idiv edx; jmp qword ptr [rax - 9]; 
0x00000000004951d1: idiv edx; jmp rax; 
0x00000000004951b5: idiv edx; push qword ptr [rax]; idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004789f7: imul al; mov edi, dword ptr [rdx - 8]; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004751df: imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x000000000046c225: imul dword ptr [rdi - 0x74b7ffdc]; add al, 0xf8; jmp rax; 
0x0000000000431625: imul dword ptr [rip + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046ff7e: imul eax, dword ptr [rax], -0x15; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000424eaa: imul eax, dword ptr [rax], 0; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000424ebb: imul eax, dword ptr [rax], 0x440f4800; ret 0x66c3; 
0x00000000004b2135: imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x0000000000444ca1: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x0000000000467a52: imul eax, dword ptr [rcx], 0xc7480000; ret 0xffe0; 
0x000000000043891a: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x3896f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000431ab3: imul ebp, dword ptr [rcx], 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000489d40: imul ecx, dword ptr [rax], 0x74; jl 0x89cd0; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000048b83d: imul ecx, dword ptr [rcx], 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x00000000004441b1: imul ecx, dword ptr [rdi], 5; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000047537c: imul edi, ebp, -1; nop; mov eax, 0x3f; syscall; 
0x00000000004387b3: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438579: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000496021: imul edi, ebx, -1; adc byte ptr [rbx - 5], ch; push rax; push -5; call rax; 
0x00000000004940e5: imul edi, ecx, 0xf96a70ff; jmp qword ptr [rax + 0x6b]; 
0x0000000000407193: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000404a04: imul edi, edx, -1; dec dword ptr [rax - 0x7d]; ret; 
0x000000000042ecf3: imul edx, dword ptr [rbp + 6], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000492838: imul esi, dword ptr [rax - 0x4eba0009], -9; ljmp [rbx - 0x50]; idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x0000000000492844: imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x0000000000418b2e: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000044411c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x00000000004acd20: in al, 0x15; add byte ptr [rax], al; in al, dx; jno 0xacd1d; call qword ptr [rax]; 
0x0000000000419f88: in al, 0x1d; sub al, byte ptr [rax]; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x0000000000449cb8: in al, 0x21; add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000494e68: in al, 0x2f; cli; call qword ptr [rdi + rbp - 6]; call rsp; 
0x00000000004af620: in al, 0x3e; add byte ptr [rax], al; pop rsp; cmc; clc; call qword ptr [rsi + 0x16]; 
0x000000000042f9d6: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004b0d20: in al, 0x55; add byte ptr [rax], al; cld; add edi, edx; jmp qword ptr [rdx]; 
0x000000000040d399: in al, 0x74; mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000440e2c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000044c393: in al, 0x80; cli; cmp eax, 0x83497174; ret; 
0x00000000004b3b20: in al, 0x83; add byte ptr [rax], al; jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x000000000047bb38: in al, 0xe6; and eax, dword ptr [rax]; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000434d0a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000447dbe: in al, 0xf3; ret; 
0x0000000000494479: in al, 0xf9; call rax; 
0x0000000000494479: in al, 0xf9; call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x000000000045dd20: in al, 0xf; lahf; ret; 
0x000000000046a864: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000436647: in al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004ab2b8: in al, dx; adc dh, bh; call rsp; 
0x00000000004afb28: in al, dx; add byte ptr [r8], al; hlt; mov bh, cl; call qword ptr [rbp + 1]; 
0x000000000041ec84: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2d1; 
0x00000000004103b3: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000047f9f7: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000045e1c4: in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000045e001: in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x0000000000435ec7: in al, dx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045d423: in al, dx; idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000042c930: in al, dx; ja 0x2c939; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004acd24: in al, dx; jno 0xacd1d; call qword ptr [rax]; 
0x0000000000435100: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000415351: in al, dx; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bf23: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x000000000042f9da: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043510a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000048d0c7: in al, dx; or al, ch; and cl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x0000000000423777: in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000047ba7c: in al, dx; or bh, bh; adc eax, 0x23e79c; xor eax, eax; add rsp, 8; ret; 
0x000000000041f65f: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000042aed4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041bb89: in al, dx; or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x000000000041b29a: in al, dx; or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x000000000040dcd2: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x000000000048dc49: in al, dx; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000048a6c4: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000494a75: in al, dx; stc; jmp qword ptr [rax]; 
0x000000000042bfdf: in al, dx; vptest ymm5, ymm0; jae 0x2c280; xor eax, eax; vzeroupper; ret; 
0x0000000000449386: in eax, 0; add byte ptr [rax], al; syscall; 
0x00000000004a7a43: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004a98f3: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004846b2: in eax, 0x48; mov eax, esi; ret; 
0x000000000042f7e6: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004a6cd9: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x000000000048c18a: in eax, 0x83; call qword ptr [rcx]; 
0x00000000004a98f9: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000448279: in eax, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000434d8a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000471f34: in eax, 0xf8; jmp qword ptr [rsi + 0xf]; 
0x0000000000494439: in eax, 0xf9; call qword ptr [rax]; 
0x000000000049455d: in eax, 0xf9; call rax; 
0x000000000049455d: in eax, 0xf9; call rax; mov esi, 0xc310fff9; stc; jmp qword ptr [rax - 0x3c]; 
0x0000000000494aa1: in eax, 0xf9; jmp qword ptr [rax]; 
0x00000000004746a3: in eax, 0xf; je 0x746c0; add rax, 2; ret; 
0x000000000046573b: in eax, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a8dc1: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000466518: in eax, dx; add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x00000000004696a8: in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x0000000000435d47: in eax, dx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048febf: in eax, dx; jne 0x8fe98; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490112: in eax, dx; jne 0x900f8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490ccc: in eax, dx; jne 0x90cb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000435180: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446962: in eax, dx; lea rax, [rcx - 1]; ret; 
0x000000000042f7ea: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043518a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004447af: in eax, dx; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446742: in eax, dx; ret; 
0x0000000000446ab2: in eax, dx; sub rax, 1; ret; 
0x000000000047d73d: in eax, dx; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x000000000044a96c: inc byte ptr [rbp - 0x60f0be13]; ret 0x8545; 
0x000000000046ae72: inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000434767: inc byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000423f8e: inc byte ptr [rsi]; add byte ptr [rax + 0x31], dl; shr al, 0xd7; ret 0xfffe; 
0x000000000047f168: inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004947ff: inc dword ptr [rax + 0x10]; cli; call rax; 
0x00000000004945e7: inc dword ptr [rax + 0x13]; cli; call rax; 
0x00000000004945e7: inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494027: inc dword ptr [rax + 0x29]; stc; jmp qword ptr [rax + 0x2a]; 
0x000000000049529b: inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x0000000000494047: inc dword ptr [rax + 0x32]; stc; jmp qword ptr [rax + 0x33]; 
0x0000000000494cf7: inc dword ptr [rax + 0x37]; cli; call rax; 
0x0000000000494cf7: inc dword ptr [rax + 0x37]; cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x000000000049502f: inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x000000000049502f: inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; cli; jmp qword ptr [rax + 0x53]; 
0x00000000004944e3: inc dword ptr [rax + 0x60fff9da]; fdiv st(1), st(0); inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004940f3: inc dword ptr [rax + 0x6d]; stc; push qword ptr [rax]; outsb dx, byte ptr [rsi]; stc; jmp qword ptr [rax]; 
0x00000000004940e3: inc dword ptr [rax + 0x70fff969]; push -7; jmp qword ptr [rax + 0x6b]; 
0x000000000048ae13: inc dword ptr [rax + 0x74]; sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x000000000049484b: inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004ab1db: inc dword ptr [rax + rax - 2]; push qword ptr [rax + rax - 2]; jmp rsp; 
0x000000000045d5bf: inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d05d5be; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000464f50: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x74]; 
0x00000000004652d2: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x75]; 
0x00000000004944eb: inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x0000000000494447: inc dword ptr [rax - 0x23]; stc; jmp qword ptr [rax]; 
0x0000000000494463: inc dword ptr [rax - 0x25]; stc; jmp qword ptr [rax]; 
0x0000000000494503: inc dword ptr [rax - 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004950f7: inc dword ptr [rax - 0x2f00055c]; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x000000000049458f: inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x00000000004943c3: inc dword ptr [rax - 0x2f00065b]; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x000000000049438f: inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000494267: inc dword ptr [rax - 0x4b]; stc; jmp qword ptr [rax]; 
0x00000000004951c7: inc dword ptr [rax - 0x5f000509]; idiv edx; inc eax; idiv edx; jmp rax; 
0x0000000000494a5f: inc dword ptr [rax - 0x5f00061b]; out 0xf9, al; jmp qword ptr [rax]; 
0x000000000049404f: inc dword ptr [rax - 0x5f0006cc]; xor eax, 0x36c0fff9; stc; jmp qword ptr [rax + 0x26]; 
0x00000000004943b3: inc dword ptr [rax - 0x60]; stc; call qword ptr [rax - 0x1f00065f]; movabs byte ptr [0xa580fff9a430fff9], al; stc; call rax; 
0x00000000004950e7: inc dword ptr [rax - 0x61]; cli; call qword ptr [rax - 0x1f000560]; movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; 
0x00000000004950bf: inc dword ptr [rax - 0x6b]; cli; jmp rax; 
0x0000000000494243: inc dword ptr [rax - 0x6d]; stc; call rax; 
0x0000000000494243: inc dword ptr [rax - 0x6d]; stc; call rax; xchg eax, ebx; stc; jmp qword ptr [rax - 0x6c]; 
0x000000000049509f: inc dword ptr [rax - 0x78]; cli; jmp rax; 
0x0000000000469dfd: inc dword ptr [rax - 0x91743]; jmp qword ptr [rax]; 
0x000000000045e6b5: inc dword ptr [rax - 0x93b43]; jmp qword ptr [rax]; 
0x000000000049409f: inc dword ptr [rax - 0xf0006af]; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x0000000000495127: inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; 
0x0000000000495127: inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; cli; jmp qword ptr [rax - 0xf]; 
0x0000000000495203: inc dword ptr [rax - 7]; cli; jmp qword ptr [rax - 7]; 
0x00000000004951e3: inc dword ptr [rax - 8]; cli; jmp qword ptr [rax - 8]; 
0x00000000004951bb: inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004951bb: inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x0000000000494a53: inc dword ptr [rax]; add al, 0xfa; push qword ptr [rax + 3]; cli; jmp rax; 
0x0000000000400c2f: inc dword ptr [rax]; add bl, ch; or cl, byte ptr [rbx - 0x387603bb]; call 0xb6d; leave; ret; 
0x000000000046b0c7: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x24bd4d; jmp rax; 
0x000000000047e98a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000462c91: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x000000000045e676: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000469fb7: inc dword ptr [rax]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000042d931: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000044821f: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000042d937: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000400c8c: inc dword ptr [rax]; add byte ptr [rax], bh; leave; ret; 
0x000000000049484f: inc dword ptr [rax]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004951d7: inc dword ptr [rax]; clc; cli; jmp qword ptr [rax]; 
0x000000000049501f: inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x000000000049501f: inc dword ptr [rax]; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x000000000049450b: inc dword ptr [rax]; fdivp st(1); jmp rax; 
0x00000000004951af: inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x0000000000494103: inc dword ptr [rax]; jno 0x94100; push rax; jno 0x94104; jmp rax; 
0x000000000049427b: inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x00000000004940bf: inc dword ptr [rax]; pop rbp; stc; push qword ptr [rax + 0x5e]; stc; jmp rax; 
0x00000000004951fb: inc dword ptr [rax]; stc; cli; jmp qword ptr [rax]; 
0x0000000000493f2f: inc dword ptr [rax]; std; clc; jmp qword ptr [rax]; 
0x0000000000494d57: inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x0000000000494f5b: inc dword ptr [rax]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x00000000004923da: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x00000000004943a3: inc dword ptr [rax]; wait; stc; call qword ptr [rax - 0x64]; 
0x000000000049403f: inc dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x0000000000494b0f: inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000455174: inc dword ptr [rbp + 0x31]; fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000047d73a: inc dword ptr [rbp + 0x31]; in eax, dx; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x00000000004848c0: inc dword ptr [rbp + 0x480e74c0]; lea eax, [rip + 0x2377b4]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000047bbdf: inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x000000000045e842: inc dword ptr [rbp + 0x79850fc9]; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000048c48c: inc dword ptr [rbp + 0xf]; mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x0000000000488362: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000048253c: inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000402820: inc dword ptr [rbp - 0x7aa48740]; ror byte ptr [rdi], 0x84; ret; 
0x000000000041253e: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000400947: inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x0000000000415f86: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004ab203: inc dword ptr [rbx + rax - 2]; call rsp; 
0x000000000046a10c: inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000040d57b: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000048e1b9: inc dword ptr [rbx - 0x38b7f808]; ret 0xffff; 
0x00000000004598d0: inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x000000000045614b: inc dword ptr [rbx - 0x7af0f808]; xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000048c3b3: inc dword ptr [rbx - 0x7bf0bf1e]; ret; 
0x000000000041ef7e: inc dword ptr [rbx - 0x7bf0fe1a]; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000045e634: inc dword ptr [rbx - 0x8f743]; call qword ptr [rax]; 
0x0000000000464f6c: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0x75]; 
0x00000000004482dd: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044824b: inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000473aec: inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x000000000047f169: inc dword ptr [rcx + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000045fa02: inc dword ptr [rcx + 0x29]; ret 0x8545; 
0x000000000045f09c: inc dword ptr [rcx + 0x39]; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000480ea2: inc dword ptr [rcx + rbp - 0x40]; ret; 
0x000000000041301b: inc dword ptr [rcx + rcx*4 - 0x18]; syscall; 
0x000000000049418f: inc dword ptr [rcx - 0x6b]; stc; call rcx; 
0x0000000000494163: inc dword ptr [rcx - 0x72]; stc; call qword ptr [rcx]; 
0x0000000000455916: inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000004598d3: inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000045262e: inc dword ptr [rcx - 0x77]; ret; 
0x000000000045dffe: inc dword ptr [rcx - 0x7d]; in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x000000000046936f: inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000468f4c: inc dword ptr [rcx - 5]; jg 0x68f63; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000046a3c4: inc dword ptr [rcx - 5]; jg 0x6a3db; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000046a4c1: inc dword ptr [rcx - 5]; jg 0x6a4d8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000045e43c: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000046a7c1: inc dword ptr [rcx]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000049585f: inc dword ptr [rdi + 0x3d04fffb]; sti; call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x0000000000495ac7: inc dword ptr [rdi + 0x3d04fffb]; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000495acb: inc dword ptr [rdi + 0x3d6afffb]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000494ddb: inc dword ptr [rdx + 0x29]; cli; call rdx; 
0x0000000000494bcb: inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x0000000000494bcb: inc dword ptr [rdx + 0x35]; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x00000000004946d3: inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x00000000004345e7: inc dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000402021: inc dword ptr [rip + 0x63480009]; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000043fb5d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000049462f: inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x000000000049462f: inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494b1f: inc dword ptr [rsi + 0x33]; cli; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494b27: inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x0000000000494b27: inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x000000000048df92: inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x0000000000494c93: inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000446b7a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004951f3: inc eax; clc; cli; jmp rax; 
0x0000000000494aff: inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000494aff: inc eax; cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000049519f: inc eax; idiv dl; call rax; 
0x000000000049519f: inc eax; idiv dl; call rax; idiv dl; jmp rax; 
0x00000000004951cf: inc eax; idiv edx; jmp rax; 
0x0000000000446b77: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446b74: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000495147: inc eax; int1; cli; call rax; 
0x00000000004942bb: inc eax; mov esi, 0xb150fff9; stc; call qword ptr [rax]; 
0x00000000004942b7: inc eax; mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; 
0x00000000004942b7: inc eax; mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; stc; call qword ptr [rax]; 
0x00000000004943e7: inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000495213: inc eax; stc; cli; jmp rax; 
0x0000000000494057: inc eax; stc; jmp qword ptr [rax + 0x26]; 
0x00000000004943d3: inc eax; stosb byte ptr [rdi], al; stc; call qword ptr [rax]; 
0x0000000000494037: inc eax; sub eax, 0x2ee0fff9; stc; inc dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x00000000004974ab: inc eax; sub edi, esp; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x0000000000495107: inc eax; test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x000000000049423f: inc eax; xchg eax, edx; stc; inc dword ptr [rax - 0x6d]; stc; call rax; 
0x0000000000494d17: inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x000000000042c28c: inc ebp; std; xlatb; ret 0xe883; 
0x0000000000449a8a: inc ebx; nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000044a6ef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000047539f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a6bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044bdd2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000486fe8: inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000464c87: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004946b3: inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004946b3: inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494bab: inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x0000000000494bab: inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494b47: inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x000000000049477b: inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000446b79: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446b76: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446b73: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004af5a8: insb byte ptr [rdi], dx; add byte ptr ds:[rax], al; xchg eax, esp; xchg eax, esi; clc; jmp qword ptr [rsi]; 
0x000000000042b654: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004a98fe: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x000000000047121b: insb byte ptr [rdi], dx; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000045cdc5: insb byte ptr [rdi], dx; ret 0x4c40; 
0x000000000048a600: insb byte ptr [rdi], dx; sbb esp, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004532e6: insd dword ptr [rdi], dx; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000409f8f: insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000472980: insd dword ptr [rdi], dx; add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000004401af: insd dword ptr [rdi], dx; add dword ptr [rip - 0x75f37500], -0x75; add al, 0x82; sub eax, ecx; ret; 
0x000000000048d41a: insd dword ptr [rdi], dx; call 0xfffffffff07e5f6c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d598: insd dword ptr [rdi], dx; call 0xfffffffff07e60ea; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d6e4: insd dword ptr [rdi], dx; call 0xfffffffff07e6236; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d730: insd dword ptr [rdi], dx; call 0xfffffffff07e6282; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d8bf: insd dword ptr [rdi], dx; call 0xfffffffff07e6411; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048da1f: insd dword ptr [rdi], dx; call 0xfffffffff07e6571; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048da70: insd dword ptr [rdi], dx; call 0xfffffffff07e65c2; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048ff42: insd dword ptr [rdi], dx; js 0x8ffbc; ret 0x8b48; 
0x00000000004a98ff: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000004a7cad: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x00000000004940f5: insd dword ptr [rdi], dx; stc; push qword ptr [rax]; outsb dx, byte ptr [rsi]; stc; jmp qword ptr [rax]; 
0x00000000004a8bbf: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004015ea: int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000004a9024: int 0x6b; ret; 
0x0000000000467a4a: int 0x80; 
0x0000000000402538: int 0x83; ret 0x8901; 
0x000000000048266e: int 0x90; jmp rdx; 
0x00000000004a7a66: int 0xdd; je 0xa7a2f; xor al, 0xd8; ret; 
0x00000000004a6ed3: int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x0000000000494585: int 0xf9; jmp rax; 
0x00000000004b40a9: int 0xfc; jmp qword ptr [rsi]; 
0x0000000000466b13: int 3; add byte ptr [rcx + 0x29], cl; ret; 
0x000000000042d05f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004359cf: int1; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048d049: int1; and al, byte ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x8d06c; mov rax, qword ptr [rax]; ret; 
0x00000000004264e8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004740c6: int1; call rbx; 
0x0000000000495129: int1; cli; call qword ptr [rax - 0xf]; 
0x0000000000495129: int1; cli; call qword ptr [rax - 0xf]; cli; jmp qword ptr [rax - 0xf]; 
0x0000000000495149: int1; cli; call rax; 
0x0000000000495149: int1; cli; call rax; int1; cli; jmp rax; 
0x0000000000495125: int1; cli; inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; 
0x0000000000495155: int1; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x0000000000495145: int1; cli; inc eax; int1; cli; call rax; 
0x000000000049512d: int1; cli; jmp qword ptr [rax - 0xf]; 
0x000000000049514d: int1; cli; jmp rax; 
0x0000000000495141: int1; cli; push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x00000000004957a8: int1; cmp al, 0xfb; dec dword ptr [rax + 0x2efffb3d]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x00000000004959d8: int1; cmp al, 0xfb; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000438bd1: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447ad2: int1; dec byte ptr [rax + 0x7f]; jg 0x47adb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447c78: int1; dec byte ptr [rax + 0x7f]; jg 0x47c81; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004478fc: int1; dec byte ptr [rax + 0x7f]; jl 0x47919; cld; vzeroupper; ret; 
0x000000000047537b: int1; imul edi, ebp, -1; nop; mov eax, 0x3f; syscall; 
0x00000000004385b1: int1; jl 0x385fc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446d3d: int1; jl 0x46d88; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d44: int1; jl 0x46d8f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d4b: int1; jl 0x46d96; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d5e: int1; jl 0x46da9; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d65: int1; jl 0x46db0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d6c: int1; jl 0x46db7; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d79: int1; jl 0x46dc4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d7f: int1; jl 0x46dca; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446e46: int1; jl 0x46e91; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e4d: int1; jl 0x46e98; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e54: int1; jl 0x46e9f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446e9e: int1; jl 0x46ee9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ea5: int1; jl 0x46ef0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446eac: int1; jl 0x46ef7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446f3b: int1; jl 0x46f86; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f42: int1; jl 0x46f8d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f49: int1; jl 0x46f94; adc dword ptr [rsi + 7], edx; ret; 
0x00000000004481d5: int1; jmp rcx; 
0x000000000047153b: int1; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004482f9: int1; mov eax, eax; ret; 
0x0000000000434b7b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ffaf: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b73: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430127: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430143: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000446113: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004482e0: int1; pop rbx; mov eax, eax; ret; 
0x0000000000494ac1: int1; stc; jmp qword ptr [rax]; 
0x0000000000446117: int1; sub eax, edx; ret; 
0x000000000042c071: int1; sub rax, rcx; je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x000000000048807b: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x000000000043ef8d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047d75d: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000492097: iretd; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000048f3a3: iretd; and al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000047bbda: iretd; call 0x4a6d0; test eax, eax; js 0x7bbf2; pop rbx; ret; 
0x0000000000473253: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004143e1: iretd; cmp rax, rdi; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000400946: iretd; inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x000000000044703a: iretd; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447395: iretd; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477e0: iretd; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004a7a41: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000480e1a: iretd; movsx eax, cl; neg eax; ret; 
0x00000000004265b2: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000423e66: iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000004a8e4d: iretd; ret 0x8b36; 
0x0000000000438d3d: iretd; ret 5; 
0x000000000044414d: iretd; syscall; 
0x000000000044414d: iretd; syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004122d3: ja 0x1232d; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000402018: ja 0x1db8; lea rdx, [rip + 0x905ff]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040219c: ja 0x1ec1; lea rdx, [rip + 0x904a7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402288: ja 0x1eef; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000402369: ja 0x1f00; lea rdx, [rip + 0x90332]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000423b17: ja 0x23c90; lea rdx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000042c931: ja 0x2c939; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000438a83: ja 0x38a7e; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000444267: ja 0x4426b; ret; 
0x0000000000444283: ja 0x44289; mov dword ptr [rdi], ecx; ret; 
0x00000000004442c4: ja 0x442ce; mov qword ptr [rdi], rcx; ret; 
0x0000000000444349: ja 0x4435b; ret; 
0x000000000044439f: ja 0x443b5; ret; 
0x0000000000444421: ja 0x4443b; ret; 
0x0000000000444887: ja 0x4488b; lea rax, [rdi + 2]; ret; 
0x00000000004448a3: ja 0x448a9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004448f4: ja 0x448fe; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004449d9: ja 0x449eb; lea rax, [rdi + 0x10]; ret; 
0x0000000000444a4f: ja 0x44a65; lea rax, [rdi + 0x14]; ret; 
0x0000000000444ad1: ja 0x44aeb; lea rax, [rdi + 0x18]; ret; 
0x0000000000447054: ja 0x4707c; jb 0x4705d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044700d: ja 0x4708d; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447220: ja 0x47242; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004472ee: ja 0x47310; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004473b4: ja 0x473f1; jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004475f8: ja 0x4763a; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000447714: ja 0x47756; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000447804: ja 0x47859; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447acf: ja 0x47ad3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447c75: ja 0x47c79; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447d32: ja 0x47d3f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447ce2: ja 0x47d48; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d4c: ja 0x47d64; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447dd3: ja 0x47dea; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000447e8a: ja 0x47e9a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447e3a: ja 0x47ea3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447f41: ja 0x47f6f; jb 0x47f47; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000448023: ja 0x48037; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fc3: ja 0x48040; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000448109: ja 0x48145; jb 0x4810f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004490ec: ja 0x49110; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000449316: ja 0x495d0; lea rdx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000449696: ja 0x496c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004496e5: ja 0x49718; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000044c0e4: ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c870: ja 0x4c894; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d60c: ja 0x4d5e0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044d595: ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000459f9a: ja 0x5a080; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x000000000045a499: ja 0x5a5e0; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000045d65a: ja 0x5d674; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000405e5d: ja 0x5e35; mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000465792: ja 0x65770; mov eax, r9d; ret; 
0x000000000046e265: ja 0x6e290; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000046e3c9: ja 0x6e780; lea rcx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046ea00: ja 0x6ea90; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046eb14: ja 0x6eb48; lea rdi, [rip + 0x351af]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046eb7e: ja 0x6eec0; lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473948: ja 0x73992; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000474b08: ja 0x74b52; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000474c42: ja 0x74c07; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x00000000004753f6: ja 0x75428; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000475448: ja 0x75480; mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000047c080: ja 0x7d3d3; lea rcx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047d744: ja 0x7d748; add byte ptr [rax + 0x15], bh; syscall; 
0x0000000000482dde: ja 0x82e29; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004848c9: ja 0x848ee; add byte ptr [rax - 0x77], cl; add eax, 0x237795; add rsp, 8; ret; 
0x00000000004848e4: ja 0x84909; add byte ptr [rax - 0x77], cl; add eax, 0x23777a; ret; 
0x0000000000486778: ja 0x86760; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048838a: ja 0x88394; mov rdi, qword ptr [rdi]; call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048845e: ja 0x88468; mov rdi, qword ptr [rdi]; call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048a8b5: ja 0x8a8ba; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000048af01: ja 0x8b7b1; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048bf4f: ja 0x8c069; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000048c487: ja 0x8c069; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000048c854: ja 0x8c88d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004a9344: ja 0xa92c9; ret 0x48f; 
0x000000000040d311: ja 0xd995; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000417337: jae 0x17371; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000041907d: jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x0000000000423b19: jae 0x23b1c; add byte ptr [rax], al; lea rdx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424ac3: jae 0x24aee; add byte ptr [rax], dl; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000424b2f: jae 0x24b31; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x0000000000424c89: jae 0x24cbe; add al, byte ptr [rax]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x000000000042bfe5: jae 0x2c280; xor eax, eax; vzeroupper; ret; 
0x000000000042cd77: jae 0x2cd7f; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004359c5: jae 0x35a60; lea r11, [rip + 0x5f10e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cfa9: jae 0x3cf60; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000447dce: jae 0x47de3; cmp dl, 1; ja 0x47dea; jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x000000000044916e: jae 0x4916b; dec dword ptr [rax - 0x77]; ret; 
0x000000000044961d: jae 0x49620; ret; 
0x000000000044a6ad: jae 0x4a6b0; ret; 
0x000000000044a6dd: jae 0x4a6e0; ret; 
0x000000000044a70d: jae 0x4a710; ret; 
0x000000000044bdc0: jae 0x4bdc3; ret; 
0x000000000044bded: jae 0x4bdf0; ret; 
0x000000000045ae3e: jae 0x5ae80; xor eax, eax; pop rbx; ret; 
0x0000000000470a06: jae 0x7095b; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047538d: jae 0x75390; ret; 
0x00000000004754d2: jae 0x754f8; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000047f8eb: jae 0x7f891; xor eax, eax; ret; 
0x000000000048520a: jae 0x85200; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x00000000004852d1: jae 0x852df; mov rdx, qword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000488084: jae 0x88060; mov eax, 1; ret; 
0x000000000048853d: jae 0x88540; ret; 
0x00000000004a4d3d: jae 0xa4d3c; push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; jmp rax; 
0x00000000004a7902: jae 0xa78db; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x00000000004a879e: jae 0xa8773; push rsi; pop rdx; je 0xa8768; ret 0xacfc; 
0x00000000004ad142: jae 0xad14e; ret; 
0x00000000004af7a1: jae 0xaf79c; call qword ptr [rdi]; 
0x00000000004b2aed: jae 0xb2aef; add byte ptr [rax - 0xc], ah; sti; call qword ptr [rsi + 1]; 
0x00000000004b3ec4: jae 0xb3eca; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x000000000041e5e7: jb 0x1e5c8; mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x0000000000424b7c: jb 0x24ba7; add byte ptr [rdx], al; lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424be3: jb 0x24c0e; add byte ptr [rdx], al; lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x00000000004385f7: jb 0x3860d; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000438624: jb 0x38635; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000438638: jb 0x38646; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000438649: jb 0x3865b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043865e: jb 0x38664; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446d76: jb 0x46d86; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d89: jb 0x46d95; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446da2: jb 0x46dae; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000446db5: jb 0x46dbd; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446dc0: jb 0x46dca; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000446dcd: jb 0x46dd1; mov byte ptr [rdi], cl; ret; 
0x0000000000446fd4: jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447056: jb 0x4705d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044703b: jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004473b6: jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447396: jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447806: jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004477e1: jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447dd5: jb 0x47dd9; mov byte ptr [rdi], cl; ret; 
0x0000000000447f43: jb 0x47f47; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044810b: jb 0x4810f; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044c0de: jb 0x4c120; cmp rcx, qword ptr [rax + 0x18]; ja 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000047d34a: jb 0x7d309; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000049410d: jb 0x94108; call rax; 
0x0000000000494dcc: jb 0x94df9; cli; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x00000000004108a5: jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000410fb3: jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004110df: jbe 0x11129; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004143e5: jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041476c: jbe 0x14950; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416de4: jbe 0x16e40; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416eda: jbe 0x16ef0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000416feb: jbe 0x16f52; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041703b: jbe 0x170f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000417263: jbe 0x172f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004173e1: jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041745a: jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004175c6: jbe 0x175d8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004181ea: jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000418281: jbe 0x182a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004018a4: jbe 0x18b6; syscall; 
0x0000000000429077: jbe 0x29084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a7d7: jbe 0x2a7e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b7b7: jbe 0x2b7c4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042ca63: jbe 0x2ca6b; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000434766: jbe 0x34766; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044a55e: jbe 0x4a55b; jmp qword ptr [rsi + 0x2e]; 
0x0000000000456062: jbe 0x5605a; ret; 
0x000000000045d807: jbe 0x5ee25; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e2c6: jbe 0x5ee3d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045df82: jbe 0x5eea1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045ddad: jbe 0x5eeb9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000469afa: jbe 0x6a870; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046c669: jbe 0x6da30; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047065a: jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004707f8: jbe 0x7081e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004709a8: jbe 0x709d2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004710b1: jbe 0x710db; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471323: jbe 0x71344; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000047143f: jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004714d9: jbe 0x714f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004715c0: jbe 0x715e6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000472aef: jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d56: jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d66: jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d76: jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d86: jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472fa7: jbe 0x73000; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472fc7: jbe 0x73000; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000472fe7: jbe 0x73000; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000472f97: jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x0000000000473967: jbe 0x739c0; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000473987: jbe 0x739c0; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004739a7: jbe 0x739c0; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000473947: jbe 0x739c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000474b07: jbe 0x74b80; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000480e98: jbe 0x80e80; cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x000000000048dfb9: jbe 0x8dfd0; cmp dil, 0x30; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee19: jbe 0x8ee30; cmp dil, 0x30; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x0000000000490e36: jbe 0x90e33; clc; push rbx; ret; 
0x00000000004a7bb9: jbe 0xa7bee; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004b2d4d: jbe 0xb2d4f; add byte ptr [rax], ah; add edi, esp; jmp rdx; 
0x00000000004b2dad: jbe 0xb2daf; add al, al; or al, 0xfc; jmp qword ptr [rbx]; 
0x000000000040f3c8: jbe 0xf3e0; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000040faf8: jbe 0xfb10; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000040120b: je 0x1231; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000041257d: je 0x124ee; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004124ec: je 0x12558; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000412c2d: je 0x12c53; cmp byte ptr [rax + 0x29], cl; ret; 
0x00000000004015e8: je 0x16bb; add rsp, 0x98; ret; 
0x0000000000416fab: je 0x16f28; mov eax, 0xffffffff; ret; 
0x0000000000416f02: je 0x16f28; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041719b: je 0x17118; mov eax, 0xffffffff; ret; 
0x00000000004181f5: je 0x181fa; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004182d7: je 0x182e8; cmp rsi, rcx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x0000000000419074: je 0x19088; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x00000000004190b5: je 0x190c8; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000419f8e: je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x0000000000419f84: je 0x19fe2; mov eax, dword ptr [rip + 0x2a1de4]; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x000000000041d346: je 0x1d36c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004231f2: je 0x23218; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x00000000004236e3: je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x00000000004236de: je 0x23708; test rax, rax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x0000000000424c31: je 0x24c50; test eax, eax; lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424cd7: je 0x24cf8; test byte ptr [rip + 0x29711d], 2; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000426379: je 0x26390; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004265a9: je 0x26445; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b79a: je 0x2b79d; xchg eax, edx; sub eax, edx; ret; 
0x000000000042b838: je 0x2b850; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042b97a: je 0x2b9cb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042ba23: je 0x2ba40; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000042c021: je 0x2c03a; vpmovmskb eax, ymm2; sub eax, -1; jne 0x2c030; vzeroupper; ret; 
0x000000000042c075: je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x000000000042c119: je 0x2c0ec; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000042c157: je 0x2c170; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000042c266: je 0x2c27f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x2c030; vzeroupper; ret; 
0x000000000042cc6e: je 0x2cc76; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042ccfd: je 0x2cd05; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042d697: je 0x2d69b; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000440441: je 0x40450; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004408b1: je 0x408d0; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000440a5c: je 0x40a3e; pmovmskb edx, xmm4; test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x0000000000440a64: je 0x40a6a; bsf eax, edx; ret; 
0x0000000000440b0d: je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aac: je 0x40b30; bsf rax, rdx; ret; 
0x000000000040040e: je 0x412; call rax; 
0x000000000040040e: je 0x412; call rax; add rsp, 8; ret; 
0x0000000000446c74: je 0x46c50; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000446fcb: je 0x46fd8; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004470e3: je 0x470fc; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000004478f8: je 0x47911; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000044828d: je 0x481b2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000044823d: je 0x481b2; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000044878e: je 0x48798; xor eax, eax; ret; 
0x0000000000448789: je 0x487a0; cmp eax, 2; je 0x48798; xor eax, eax; ret; 
0x0000000000448c05: je 0x48c0b; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044987e: je 0x498b0; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449c18: je 0x49c40; mov eax, 0x48; syscall; 
0x0000000000449de3: je 0x49d8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000449fd7: je 0x49ffd; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x000000000044bec9: je 0x4becc; ret; 
0x000000000044bf2d: je 0x4bf30; ret; 
0x000000000044c149: je 0x4c170; xor esi, esi; lea rdi, [rip + 0x49b71]; mov eax, 0x15; syscall; 
0x000000000044c77c: je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044c777: je 0x4c788; test rdx, rdx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044d4c4: je 0x4d4d0; mov dword ptr [rip + 0x26b5ec], edx; pop rbx; ret; 
0x0000000000450eac: je 0x50ed2; sub byte ptr [rax - 0x75], cl; jl 0x50ed7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000004512d1: je 0x512f7; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004515c5: je 0x515eb; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000452c5e: je 0x52c84; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000453213: je 0x53239; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000454245: je 0x5426b; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455fa2: je 0x55fc8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004571e2: je 0x57208; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045888a: je 0x58899; call 0x81c90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004591aa: je 0x591ae; call rsi; 
0x00000000004592a6: je 0x592aa; call rax; 
0x0000000000405a2e: je 0x5a36; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000045a6ab: je 0x5a6af; call rax; 
0x0000000000465789: je 0x657a0; movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x65770; mov eax, r9d; ret; 
0x00000000004685dc: je 0x68602; and byte ptr [rax + 1], cl; ret; 
0x000000000046e83e: je 0x6e3b8; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046eede: je 0x6eb6d; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004703b6: je 0x70400; add esp, 0x20; pop rbx; ret; 
0x000000000047087d: je 0x70890; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470a7d: je 0x70a90; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000471229: je 0x71230; pop rbx; pop rbp; pop r12; ret; 
0x0000000000471263: je 0x712c0; pop rbp; pop r12; ret; 
0x00000000004712ef: je 0x7134c; pop rbp; pop r12; ret; 
0x000000000047144a: je 0x7144f; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047147a: je 0x714a0; or al, 0xeb; ret 0x5590; 
0x00000000004714a6: je 0x714ab; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000471537: je 0x71548; cmp rcx, rsi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x0000000000472c5c: je 0x72cad; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000472cfe: je 0x72d4f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000004730c0: je 0x73280; bsr rax, rax; add rax, rdi; ret; 
0x0000000000473344: je 0x73280; bsr rax, rsi; add rax, rdi; ret; 
0x000000000047314e: je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004734df: je 0x73494; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000473504: je 0x73520; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000473634: je 0x73643; sar rdx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x000000000047363c: je 0x73660; bsf rax, rdx; ret; 
0x00000000004735cc: je 0x73670; bsf rax, rdx; ret; 
0x000000000047404a: je 0x74070; and al, ch; out dx, al; ret; 
0x00000000004740be: je 0x740e4; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x00000000004742fc: je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000474290: je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000474689: je 0x746a0; mov cl, dl; and cl, 0xf; je 0x746b0; ret; 
0x0000000000474690: je 0x746b0; ret; 
0x00000000004746a5: je 0x746c0; add rax, 2; ret; 
0x00000000004754cd: je 0x75508; mov eax, dword ptr [rip + 0x247337]; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x000000000047555b: je 0x75581; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004755ed: je 0x75618; mov eax, 0x101; syscall; 
0x0000000000475b5a: je 0x75c28; xor eax, eax; leave; ret; 
0x000000000047ba78: je 0x7ba90; sub rsp, 8; call qword ptr [rip + 0x23e79c]; xor eax, eax; add rsp, 8; ret; 
0x000000000047e6c6: je 0x7e6cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000047f165: je 0x7f168; lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f4b2: je 0x7f4d8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000480e9d: je 0x80de6; sub eax, r8d; ret; 
0x00000000004826a5: je 0x82690; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000048451a: je 0x84504; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004848c3: je 0x848d3; lea rax, [rip + 0x2377b4]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x0000000000484b27: je 0x84b25; jmp qword ptr [rsi + 0xf]; 
0x0000000000484d23: je 0x84d2f; lea rdx, [rip + 0x235e34]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fd2: je 0x84fe0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004854d8: je 0x854fe; or byte ptr [rax + 1], cl; ret; 
0x00000000004867c3: je 0x8672f; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000486c3c: je 0x86c48; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000487b30: je 0x87b40; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048aa3d: je 0x8aa63; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000048ae33: je 0x8ae3b; cmp dil, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048ae1b: je 0x8ae3b; cmp dil, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048aefd: je 0x8af60; cmp al, 0x2f; ja 0x8b7b1; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048cfd8: je 0x8cfbc; add rsp, 0x18; ret; 
0x000000000048cfc1: je 0x8cfe0; add rsp, 0x18; ret; 
0x000000000048d09f: je 0x8d0b0; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000048d0a9: je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000048d143: je 0x8d150; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048da97: je 0x8daa8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000048de4b: je 0x8de60; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048dfd3: je 0x8dfdb; cmp dil, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048dfb7: je 0x8dfe0; jbe 0x8dfd0; cmp dil, 0x30; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee33: je 0x8ee3b; cmp dil, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048ee17: je 0x8ee40; jbe 0x8ee30; cmp dil, 0x30; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048f8a3: je 0x8f8ab; cmp dil, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x0000000000490c43: je 0x90c4c; call rax; 
0x0000000000490c3a: je 0x90c51; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x0000000000490e97: je 0x90e81; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004965f1: je 0x965ee; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x00000000004a7a68: je 0xa7a2f; xor al, 0xd8; ret; 
0x00000000004a87a2: je 0xa8768; ret 0xacfc; 
0x0000000000400aa9: je 0xab8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400aeb: je 0xaf8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x00000000004af8dc: je 0xaf958; stc; call rsp; 
0x00000000004b1405: je 0xb1401; call qword ptr [rdx]; 
0x00000000004b1485: je 0xb1481; jmp rax; 
0x0000000000400b1a: je 0xb26; mov edi, 0x4ab768; call 0x8f610; mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x00000000004b2b55: je 0xb2b57; add al, cl; cmc; sti; jmp qword ptr [rbx]; 
0x00000000004b2b6d: je 0xb2b6f; add al, ah; cmc; sti; jmp qword ptr [rsi]; 
0x00000000004b2ba5: je 0xb2ba7; add byte ptr [rax], bl; idiv bl; jmp qword ptr [rbx]; 
0x00000000004b4edc: je 0xb4f12; std; jmp qword ptr [rdx]; 
0x0000000000417372: jg 0x173ac; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000042dd8e: jg 0x2dddf; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df2d: jg 0x2df2f; add rsi, rdx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfce: jg 0x2dfd0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e07d: jg 0x2e07f; add rsi, rdx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e11e: jg 0x2e120; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1cd: jg 0x2e1cf; add rsi, rdx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e26e: jg 0x2e270; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e31d: jg 0x2e31f; add rsi, rdx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3be: jg 0x2e3c0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e46d: jg 0x2e46f; add rsi, rdx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e50e: jg 0x2e510; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5bd: jg 0x2e5bf; add rsi, rdx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e65e: jg 0x2e660; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e70d: jg 0x2e70f; add rsi, rdx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7ae: jg 0x2e7b0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e865: jg 0x2e867; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8fe: jg 0x2e900; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9ad: jg 0x2e9af; add rsi, rdx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea4e: jg 0x2ea50; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eafd: jg 0x2eaff; add rsi, rdx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb9e: jg 0x2eba0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec4d: jg 0x2ec4f; add rsi, rdx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecee: jg 0x2ecf0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed9d: jg 0x2ed9f; add rsi, rdx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee3e: jg 0x2ee40; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeed: jg 0x2eeef; add rsi, rdx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef8e: jg 0x2ef90; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f03d: jg 0x2f03f; add rsi, rdx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0de: jg 0x2f0e0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f18d: jg 0x2f18f; add rsi, rdx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f22e: jg 0x2f230; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042fb99: jg 0x2fbea; ret; 
0x000000000042fc1f: jg 0x2fc68; ret; 
0x000000000042fd99: jg 0x2fdea; ret 0x894c; 
0x000000000042fe1f: jg 0x2fe68; ret 0x894c; 
0x000000000043075e: jg 0x307af; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004308fd: jg 0x308ff; add rsi, rdx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043099e: jg 0x309a0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a4d: jg 0x30a4f; add rsi, rdx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430aee: jg 0x30af0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b9d: jg 0x30b9f; add rsi, rdx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c3e: jg 0x30c40; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ced: jg 0x30cef; add rsi, rdx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d8e: jg 0x30d90; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e3d: jg 0x30e3f; add rsi, rdx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ede: jg 0x30ee0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f8d: jg 0x30f8f; add rsi, rdx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043102e: jg 0x31030; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310dd: jg 0x310df; add rsi, rdx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431235: jg 0x31237; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312ce: jg 0x312d0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043137d: jg 0x3137f; add rsi, rdx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043141e: jg 0x31420; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314cd: jg 0x314cf; add rsi, rdx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043156e: jg 0x31570; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043161d: jg 0x3161f; add rsi, rdx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316be: jg 0x316c0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043176d: jg 0x3176f; add rsi, rdx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043180e: jg 0x31810; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318bd: jg 0x318bf; add rsi, rdx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043195e: jg 0x31960; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a0d: jg 0x31a0f; add rsi, rdx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aae: jg 0x31ab0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b5d: jg 0x31b5f; add rsi, rdx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bfe: jg 0x31c00; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432569: jg 0x325ba; ret; 
0x00000000004325ef: jg 0x32638; ret; 
0x0000000000432769: jg 0x327ba; ret 0x894c; 
0x00000000004327ef: jg 0x32838; ret 0x894c; 
0x0000000000432e8e: jg 0x32e50; sub rdx, 0x40; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434b58: jg 0x34ba1; loope 0x34b4f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434bcf: jg 0x34c18; ret 0xff2; 
0x0000000000434c5f: jg 0x34ca8; ret; 
0x0000000000434d08: jg 0x34d51; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434d88: jg 0x34dd1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434e08: jg 0x34e51; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434e88: jg 0x34ed1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435108: jg 0x35151; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435188: jg 0x351d1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435218: jg 0x35261; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435298: jg 0x352e1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043530c: jg 0x35315; ret; 
0x0000000000435366: jg 0x35377; ret; 
0x0000000000435361: jg 0x353aa; psllq mm1, qword ptr [rdi]; jg 0x35377; ret; 
0x00000000004353d6: jg 0x353e7; ret; 
0x0000000000435446: jg 0x35457; ret; 
0x0000000000435433: jg 0x3547c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435441: jg 0x3548a; or eax, 0xf7f0ff3; ret; 
0x00000000004354b6: jg 0x354c7; ret; 
0x00000000004354b1: jg 0x354fa; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000435526: jg 0x35537; ret; 
0x0000000000435521: jg 0x3556a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000435596: jg 0x355a7; ret; 
0x0000000000435591: jg 0x355da; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000435606: jg 0x35617; ret; 
0x0000000000435601: jg 0x3564a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000435676: jg 0x35687; ret; 
0x0000000000435671: jg 0x356ba; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004356e6: jg 0x356f7; ret; 
0x0000000000435756: jg 0x35767; ret; 
0x00000000004357c6: jg 0x357d7; ret; 
0x00000000004357b3: jg 0x357fc; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357c1: jg 0x3580a; add eax, 0xf7f0ff3; ret; 
0x0000000000435836: jg 0x35847; ret; 
0x0000000000435831: jg 0x3587a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004358a6: jg 0x358b7; ret; 
0x00000000004358a1: jg 0x358ea; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000435916: jg 0x35927; ret; 
0x0000000000435911: jg 0x3595a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000435986: jg 0x35997; ret; 
0x0000000000435981: jg 0x359ca; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000437678: jg 0x376c1; loope 0x3766f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004376ef: jg 0x37738; ret 0xff2; 
0x000000000043777f: jg 0x377c8; ret; 
0x0000000000437828: jg 0x37871; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004378a8: jg 0x378f1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000437928: jg 0x37971; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004379a8: jg 0x379f1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000437c28: jg 0x37c71; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437ca8: jg 0x37cf1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437d38: jg 0x37d81; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437db8: jg 0x37e01; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437e2c: jg 0x37e35; ret; 
0x0000000000437e86: jg 0x37e97; ret; 
0x0000000000437e81: jg 0x37eca; psllq mm1, qword ptr [rdi]; jg 0x37e97; ret; 
0x0000000000437ef6: jg 0x37f07; ret; 
0x0000000000437f66: jg 0x37f77; ret; 
0x0000000000437f53: jg 0x37f9c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000437f61: jg 0x37faa; or eax, 0xf7f0ff3; ret; 
0x0000000000437fd6: jg 0x37fe7; ret; 
0x0000000000437fd1: jg 0x3801a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000438046: jg 0x38057; ret; 
0x0000000000438041: jg 0x3808a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004380b6: jg 0x380c7; ret; 
0x00000000004380b1: jg 0x380fa; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000438126: jg 0x38137; ret; 
0x0000000000438121: jg 0x3816a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000438196: jg 0x381a7; ret; 
0x0000000000438191: jg 0x381da; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000438206: jg 0x38217; ret; 
0x0000000000438276: jg 0x38287; ret; 
0x00000000004382e6: jg 0x382f7; ret; 
0x00000000004382d3: jg 0x3831c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004382e1: jg 0x3832a; add eax, 0xf7f0ff3; ret; 
0x0000000000438356: jg 0x38367; ret; 
0x0000000000438351: jg 0x3839a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004383c6: jg 0x383d7; ret; 
0x00000000004383c1: jg 0x3840a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000438436: jg 0x38447; ret; 
0x0000000000438431: jg 0x3847a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000004384a6: jg 0x384b7; ret; 
0x00000000004384a1: jg 0x384ea; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004385e0: jg 0x385e9; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000438604: jg 0x3860d; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000438618: jg 0x38621; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000438a8a: jg 0x38a84; ret; 
0x0000000000444336: jg 0x4433f; ret; 
0x0000000000444346: jg 0x4434f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044435a: jg 0x44363; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444379: jg 0x44382; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444389: jg 0x44392; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444399: jg 0x443a2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004443ba: jg 0x443c3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004443da: jg 0x443e3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004443fa: jg 0x44403; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044441a: jg 0x44423; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044443e: jg 0x44447; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044445d: jg 0x44466; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044447d: jg 0x44486; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044449b: jg 0x444a4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004444bb: jg 0x444c4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444db: jg 0x444e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004444fb: jg 0x44504; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004449c6: jg 0x449cf; lea rax, [rdi + 0xf]; ret; 
0x00000000004449d6: jg 0x449df; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004449ea: jg 0x449f3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444a09: jg 0x44a12; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444a29: jg 0x44a32; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a49: jg 0x44a52; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444a6a: jg 0x44a73; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444a8a: jg 0x44a93; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444aaa: jg 0x44ab3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444aca: jg 0x44ad3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444aee: jg 0x44af7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444b0d: jg 0x44b16; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444b2d: jg 0x44b36; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444b4b: jg 0x44b54; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444b6b: jg 0x44b74; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444b8b: jg 0x44b94; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000444b4f: jg 0x44ba8; or eax, 0x1c478d48; ret; 
0x0000000000444bab: jg 0x44bb4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000446d97: jg 0x46da0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000446d8d: jg 0x46da6; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000447224: jg 0x47256; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004472f2: jg 0x47324; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447333: jg 0x4733c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044736f: jg 0x47378; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004473ca: jg 0x473d3; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447496: jg 0x4749f; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044755b: jg 0x47580; vzeroupper; ret; 
0x0000000000447555: jg 0x47598; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447550: jg 0x475cb; rol ch, 0x7e; jg 0x47598; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447602: jg 0x47607; vzeroupper; ret; 
0x00000000004475fd: jg 0x4765f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000044768e: jg 0x476b3; vzeroupper; ret; 
0x0000000000447688: jg 0x476cb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447683: jg 0x476fe; rol ch, 0x7e; jg 0x476cb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000044771e: jg 0x47723; vzeroupper; ret; 
0x000000000044776c: jg 0x47775; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447719: jg 0x4777b; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004477b8: jg 0x477c1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000044781a: jg 0x47823; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000447832: jg 0x4783b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447928: jg 0x47931; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447a16: jg 0x47a3b; vzeroupper; ret; 
0x0000000000447a0f: jg 0x47a52; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a01: jg 0x47a74; jmp qword ptr [rdx - 0xf]; 
0x0000000000447ad6: jg 0x47adb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447adc: jg 0x47ae1; vzeroupper; ret; 
0x0000000000447a9c: jg 0x47ae7; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447baf: jg 0x47bd4; vzeroupper; ret; 
0x0000000000447ba8: jg 0x47beb; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447b9a: jg 0x47c0d; jmp qword ptr [rdx - 0xf]; 
0x0000000000447c7c: jg 0x47c81; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447c82: jg 0x47c87; vzeroupper; ret; 
0x0000000000447cec: jg 0x47cf5; ret; 
0x0000000000447d3c: jg 0x47d45; ret; 
0x0000000000447d50: jg 0x47d59; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447d54: jg 0x47d9d; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447e44: jg 0x47e4d; vzeroupper; ret; 
0x0000000000447e94: jg 0x47e9d; vzeroupper; ret; 
0x0000000000447eae: jg 0x47eb7; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000447f53: jg 0x47f5c; vzeroupper; ret; 
0x0000000000447fd1: jg 0x47fda; vzeroupper; ret; 
0x0000000000448031: jg 0x4803a; vzeroupper; ret; 
0x000000000044804d: jg 0x48056; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044811b: jg 0x48124; vzeroupper; ret; 
0x0000000000448129: jg 0x48132; vzeroupper; ret; 
0x0000000000448180: jg 0x481bb; ret 0x2b77; 
0x00000000004482f7: jg 0x482f0; int1; mov eax, eax; ret; 
0x000000000044c112: jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000454178: jg 0x54103; ret 0xdb76; 
0x000000000045e982: jg 0x5e993; test byte ptr [rip - 0x7c000011], al; ret; 
0x0000000000468f52: jg 0x68f63; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000046a3ca: jg 0x6a3db; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000046a4c7: jg 0x6a4d8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000482665: jg 0x8268f; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000484519: jg 0x8458f; call 0x847e7; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000048a882: jg 0x8a884; add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000048a888: jg 0x8a88a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000042bfe2: jge 0x2bffb; call 0x29842f8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000447c39: jge 0x47c83; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000468c7f: jge 0x68c7c; jmp qword ptr [rsi + 0xf]; 
0x0000000000484250: jge 0x8424e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000487782: jge 0x877cc; cmp dword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x0000000000489e84: jge 0x89e7d; jmp qword ptr [rsi + 0xf]; 
0x000000000048c851: jge 0x8c85b; add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000048d422: jge 0x8d41c; leave; ret; 
0x000000000048d5a0: jge 0x8d59a; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d6ec: jge 0x8d6e6; leave; ret; 
0x000000000048d738: jge 0x8d732; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d8c7: jge 0x8d8c1; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048da27: jge 0x8da21; leave; ret; 
0x000000000048da78: jge 0x8da72; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048de48: jge 0x8de53; jp 0x8dec0; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040dfea: jge 0xdfec; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040120f: jl 0x1235; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000401641: jl 0x1667; sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000417842: jl 0x17859; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041f29b: jl 0x1f293; ret 0x7508; 
0x000000000042251c: jl 0x22547; add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000424173: jl 0x2419e; add byte ptr [rax], dl; lea rdx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x000000000042c429: jl 0x2c431; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043856f: jl 0x385b9; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438576: jl 0x385c0; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043857d: jl 0x385c7; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438584: jl 0x385ce; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004385ac: jl 0x385f6; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004385b2: jl 0x385fc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004385b9: jl 0x38603; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004385c0: jl 0x3860a; adc dword ptr [rcx - 1], ebx; ret; 
0x00000000004387a9: jl 0x387f3; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387b0: jl 0x387fa; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387b7: jl 0x38801; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387be: jl 0x38808; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000438917: jl 0x38961; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043891e: jl 0x38968; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438925: jl 0x3896f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000438a72: jl 0x38abc; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a79: jl 0x38ac3; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a80: jl 0x38aca; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a87: jl 0x38ad1; adc dword ptr [rdi - 8], edi; ret; 
0x0000000000446d37: jl 0x46d81; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d3e: jl 0x46d88; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d45: jl 0x46d8f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d4c: jl 0x46d96; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d59: jl 0x46da3; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d5f: jl 0x46da9; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d66: jl 0x46db0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d6d: jl 0x46db7; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d7a: jl 0x46dc4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d80: jl 0x46dca; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446e40: jl 0x46e8a; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e47: jl 0x46e91; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e4e: jl 0x46e98; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e55: jl 0x46e9f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446e99: jl 0x46ee3; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446e9f: jl 0x46ee9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ea6: jl 0x46ef0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ead: jl 0x46ef7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446f3c: jl 0x46f86; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f43: jl 0x46f8d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f4a: jl 0x46f94; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000447900: jl 0x47919; cld; vzeroupper; ret; 
0x000000000044a8e2: jl 0x4a908; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000404b06: jl 0x4b2c; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000044c10c: jl 0x4c0f6; cmp rcx, qword ptr [rax + 0x18]; jg 0x4c0f6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000450eb1: jl 0x50ed7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000004512d6: jl 0x512fc; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000453218: jl 0x5323e; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045424a: jl 0x54270; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000045605d: jl 0x56083; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000045678d: jl 0x567b3; or al, 0xe9; ret; 
0x000000000045729d: jl 0x572c3; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000459002: jl 0x59028; sbb al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; jns 0x59005; jmp qword ptr [rsi + 0xf]; 
0x000000000045a3bb: jl 0x5a3e1; cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000045b287: jl 0x5b2ad; and byte ptr [rax + 1], cl; ret; 
0x000000000045b6fe: jl 0x5b724; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000045ba46: jl 0x5ba6c; xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x0000000000465b10: jl 0x65b36; or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x73], 0x15; ret; 
0x0000000000466c1b: jl 0x66c41; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x0000000000468305: jl 0x6832b; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047555f: jl 0x75585; sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000478ac7: jl 0x78aed; cmovs eax, dword ptr [rbx + 0x65e8f0e7]; jns 0x78aca; dec dword ptr [rax - 0x77]; ret; 
0x000000000047b555: jl 0x7b57b; or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x0000000000480f9a: jl 0x80fdb; add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000482545: jl 0x8256b; sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000488390: jl 0x883b4; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000489d43: jl 0x89cd0; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004a3d80: jl 0xa3d30; cld; dec esp; scasb al, byte ptr [rdi]; cld; call rax; 
0x00000000004af4b8: jl 0xaf4f7; add byte ptr [rax], al; test byte ptr [rsi], cl; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004b17a4: jl 0xb173b; cli; call qword ptr [rax]; 
0x00000000004b3b24: jl 0xb3ace; cld; jmp qword ptr [rdx]; 
0x00000000004b4b94: jl 0xb4ba5; std; call qword ptr [rax]; 
0x000000000040d4f8: jl 0xd51e; or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x00000000004174fa: jle 0x174fd; call qword ptr [rbx + 0x18]; 
0x000000000042c115: jle 0x2c12d; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000042c31a: jle 0x2c322; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000440aae: jle 0x40ab0; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000446c21: jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000446db0: jle 0x46d73; cmp dl, 4; jb 0x46dbd; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000044700e: jle 0x4701f; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447554: jle 0x475d5; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447687: jle 0x47708; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000044d4ba: jle 0x4d4be; add byte ptr [rcx], bh; ret; 
0x000000000044d4d9: jle 0x4d4dd; add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x00000000004588a2: jle 0x588ac; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000462990: jle 0x62886; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000475bdf: jle 0x75bf5; jne 0x75c12; jne 0x75b0d; mov eax, 1; leave; ret; 
0x00000000004a8dba: jle 0xa8d55; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004b56c1: jle 0xb56c0; call qword ptr [rdx + 1]; 
0x000000000040d313: jle 0xd31b; add byte ptr [rax], al; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004945ef: jmp qword ptr [rax + 0x12]; 
0x000000000049405b: jmp qword ptr [rax + 0x26]; 
0x000000000049402b: jmp qword ptr [rax + 0x2a]; 
0x000000000049529f: jmp qword ptr [rax + 0x2f]; 
0x000000000049404b: jmp qword ptr [rax + 0x33]; 
0x0000000000494cff: jmp qword ptr [rax + 0x36]; 
0x0000000000494ae7: jmp qword ptr [rax + 0x39]; 
0x0000000000495037: jmp qword ptr [rax + 0x53]; 
0x00000000004940a7: jmp qword ptr [rax + 0x54]; 
0x0000000000496037: jmp qword ptr [rax + 0x6a]; 
0x00000000004940eb: jmp qword ptr [rax + 0x6b]; 
0x0000000000494f5f: jmp qword ptr [rax + 0xb]; 
0x0000000000494807: jmp qword ptr [rax + 0xf]; 
0x00000000004b4d63: jmp qword ptr [rax + 1]; 
0x00000000004944cf: jmp qword ptr [rax - 0x20]; 
0x000000000049454b: jmp qword ptr [rax - 0x23]; 
0x00000000004944e7: jmp qword ptr [rax - 0x24]; 
0x0000000000494443: jmp qword ptr [rax - 0x25]; 
0x000000000049447f: jmp qword ptr [rax - 0x27]; 
0x00000000004945bb: jmp qword ptr [rax - 0x35]; 
0x0000000000494567: jmp qword ptr [rax - 0x3c]; 
0x00000000004942fb: jmp qword ptr [rax - 0x42]; 
0x000000000049437b: jmp qword ptr [rax - 0x43]; 
0x00000000004942f7: jmp qword ptr [rax - 0x44]; 
0x0000000000494377: jmp qword ptr [rax - 0x45]; 
0x00000000004942f3: jmp qword ptr [rax - 0x46]; 
0x0000000000494373: jmp qword ptr [rax - 0x47]; 
0x0000000000494263: jmp qword ptr [rax - 0x4d]; 
0x00000000004943db: jmp qword ptr [rax - 0x53]; 
0x000000000049510f: jmp qword ptr [rax - 0x54]; 
0x00000000004a3a13: jmp qword ptr [rax - 0x57]; 
0x00000000004943ef: jmp qword ptr [rax - 0x61]; 
0x000000000049421f: jmp qword ptr [rax - 0x69]; 
0x000000000049424b: jmp qword ptr [rax - 0x6c]; 
0x00000000004950b3: jmp qword ptr [rax - 0x70]; 
0x0000000000494157: jmp qword ptr [rax - 0x71]; 
0x0000000000495093: jmp qword ptr [rax - 0x7d]; 
0x000000000049516b: jmp qword ptr [rax - 0xe]; 
0x000000000049512f: jmp qword ptr [rax - 0xf]; 
0x0000000000495207: jmp qword ptr [rax - 7]; 
0x00000000004951e7: jmp qword ptr [rax - 8]; 
0x00000000004951c3: jmp qword ptr [rax - 9]; 
0x000000000040e3f1: jmp qword ptr [rax]; 
0x00000000004ab7d3: jmp qword ptr [rbp + 2]; 
0x00000000004b490b: jmp qword ptr [rbp]; 
0x00000000004af773: jmp qword ptr [rbx + 0x17]; 
0x00000000004958af: jmp qword ptr [rbx + 0x3e]; 
0x00000000004b4287: jmp qword ptr [rbx + 1]; 
0x00000000004af36b: jmp qword ptr [rbx + 2]; 
0x00000000004b213b: jmp qword ptr [rbx + 8]; 
0x00000000004a6486: jmp qword ptr [rbx - 0x40]; 
0x0000000000478f07: jmp qword ptr [rbx]; 
0x00000000004b37fb: jmp qword ptr [rcx + 0xe]; 
0x00000000004ac553: jmp qword ptr [rcx + 1]; 
0x00000000004ac34f: jmp qword ptr [rcx + 2]; 
0x00000000004b52b3: jmp qword ptr [rcx + 9]; 
0x00000000004928ab: jmp qword ptr [rcx - 0x50]; 
0x00000000004a6de3: jmp qword ptr [rcx - 0x69]; 
0x0000000000494187: jmp qword ptr [rcx]; 
0x00000000004b102b: jmp qword ptr [rdi + 0x11]; 
0x00000000004af4bf: jmp qword ptr [rdi + 0x2b]; 
0x000000000047e93b: jmp qword ptr [rdi + 0x6d]; 
0x0000000000464f56: jmp qword ptr [rdi + 0x74]; 
0x00000000004652d8: jmp qword ptr [rdi + 0x75]; 
0x00000000004ad81f: jmp qword ptr [rdi + 2]; 
0x00000000004af743: jmp qword ptr [rdi + 6]; 
0x00000000004a9564: jmp qword ptr [rdi]; 
0x0000000000494dd3: jmp qword ptr [rdx + 0x2a]; 
0x0000000000494bd3: jmp qword ptr [rdx + 0x34]; 
0x00000000004abe17: jmp qword ptr [rdx + 0x36]; 
0x00000000004388f2: jmp qword ptr [rdx + 0x51]; 
0x0000000000438a53: jmp qword ptr [rdx + 0x71]; 
0x00000000004948a3: jmp qword ptr [rdx + 0xa]; 
0x00000000004946db: jmp qword ptr [rdx + 0xd]; 
0x00000000004b572b: jmp qword ptr [rdx + 1]; 
0x00000000004b45f7: jmp qword ptr [rdx + 5]; 
0x0000000000438a0b: jmp qword ptr [rdx - 0x2f]; 
0x00000000004a6e30: jmp qword ptr [rdx - 0x71]; 
0x00000000004a8f53: jmp qword ptr [rdx - 0x78]; 
0x0000000000438551: jmp qword ptr [rdx - 0xf]; 
0x000000000049268b: jmp qword ptr [rdx - 4]; 
0x000000000049265f: jmp qword ptr [rdx - 5]; 
0x0000000000488b24: jmp qword ptr [rdx]; 
0x0000000000494637: jmp qword ptr [rsi + 0x11]; 
0x0000000000401974: jmp qword ptr [rsi + 0x2e]; 
0x0000000000494b2f: jmp qword ptr [rsi + 0x38]; 
0x00000000004584c7: jmp qword ptr [rsi + 0x41]; 
0x00000000004469b3: jmp qword ptr [rsi + 0x44]; 
0x000000000043322f: jmp qword ptr [rsi + 0x45]; 
0x000000000047eb2f: jmp qword ptr [rsi + 0x48]; 
0x0000000000464f72: jmp qword ptr [rsi + 0x75]; 
0x00000000004b1213: jmp qword ptr [rsi + 0xa]; 
0x0000000000401fb6: jmp qword ptr [rsi + 0xf]; 
0x00000000004b3abb: jmp qword ptr [rsi + 5]; 
0x00000000004b3bdb: jmp qword ptr [rsi + 7]; 
0x000000000048eb0f: jmp qword ptr [rsi - 0x3f]; 
0x000000000040164d: jmp qword ptr [rsi - 0x70]; 
0x0000000000467aac: jmp qword ptr [rsi - 0x7b]; 
0x000000000044a1f1: jmp qword ptr [rsi - 0x7d]; 
0x0000000000463b4d: jmp qword ptr [rsi - 0x7f]; 
0x000000000044c8be: jmp qword ptr [rsi]; 
0x0000000000400ab1: jmp rax; 
0x0000000000480011: jmp rbx; 
0x0000000000422d62: jmp rcx; 
0x000000000040d60e: jmp rdi; 
0x000000000040d325: jmp rdx; 
0x0000000000459fa7: jmp rsi; 
0x000000000046cd9d: jmp rsp; 
0x0000000000410031: jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100e2: jne 0x100ec; add rsp, 0xd8; ret; 
0x00000000004103d4: jne 0x103df; add rsp, 0xd0; pop rbx; ret; 
0x0000000000410563: jne 0x1056f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000004110de: jne 0x11156; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411b04: jne 0x11b0d; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041216e: jne 0x1221d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004010f8: jne 0x1310; call qword ptr [rbx + 0x10]; 
0x0000000000413bd8: jne 0x13be1; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004169e7: jne 0x16aa6; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000416cc8: jne 0x16d14; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000417ee9: jne 0x18196; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000418291: jne 0x1824f; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004182dc: jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x0000000000418c33: jne 0x18c40; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041a850: jne 0x1a858; add rsp, 0x20; pop rbx; ret; 
0x000000000042345a: jne 0x233df; ret; 
0x0000000000423767: jne 0x23750; sub rax, 0x10; ret; 
0x00000000004265dc: jne 0x265c0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042b983: jne 0x2b9d0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042c124: jne 0x2c030; ret; 
0x000000000042c02a: jne 0x2c030; vzeroupper; ret; 
0x000000000042d4d7: jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf7d: jne 0x2d903; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042ced1: jne 0x2d903; xor eax, eax; ret; 
0x000000000042cfc8: jne 0x2d90f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cef9: jne 0x2d90f; xor eax, eax; ret; 
0x000000000042d1ca: jne 0x2d91a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042d05d: jne 0x2d930; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000444d50: jne 0x44c40; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d0a: jne 0x44c40; lea rax, [rdi + 0xf]; ret; 
0x0000000000444cb5: jne 0x44c40; lea rax, [rdi + 3]; ret; 
0x0000000000444c87: jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x0000000000444c32: jne 0x44c44; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000444cac: jne 0x44e20; test dl, 4; jne 0x44c40; lea rax, [rdi + 3]; ret; 
0x0000000000444d8e: jne 0x44e50; test al, 0x40; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000444d96: jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000444c7e: jne 0x44e60; test dl, 0x40; jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x0000000000444d47: jne 0x44e90; test dh, 4; jne 0x44c40; lea rax, [rdi + 0xb]; ret; 
0x0000000000444de0: jne 0x44ec0; test ah, 0x40; jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444de9: jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444d01: jne 0x44ed0; test dh, 0x40; jne 0x44c40; lea rax, [rdi + 0xf]; ret; 
0x00000000004460e5: jne 0x46160; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000446414: jne 0x46620; xor eax, eax; ret; 
0x0000000000446574: jne 0x46635; cmp eax, ecx; jne 0x46635; xor eax, eax; ret; 
0x0000000000446631: jne 0x46635; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000446610: jne 0x46635; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x46635; xor eax, eax; ret; 
0x00000000004464c1: jne 0x46635; xor eax, eax; ret; 
0x0000000000446741: jne 0x46730; ret; 
0x0000000000446738: jne 0x46750; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467f1: jne 0x467e0; ret; 
0x00000000004467e8: jne 0x46800; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x0000000000446961: jne 0x46950; lea rax, [rcx - 1]; ret; 
0x0000000000446958: jne 0x46970; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46950; lea rax, [rcx - 1]; ret; 
0x0000000000446ab1: jne 0x46aa0; sub rax, 1; ret; 
0x0000000000446aa8: jne 0x46ac0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46aa0; sub rax, 1; ret; 
0x0000000000447f24: jne 0x47f07; vzeroupper; ret; 
0x00000000004480e7: jne 0x480c2; vzeroupper; ret; 
0x00000000004488bf: jne 0x488e4; add rsp, 0x20; pop rbx; ret; 
0x000000000044937b: jne 0x49310; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000449677: jne 0x49689; add rsp, 0x28; ret; 
0x0000000000449768: jne 0x497cb; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449795: jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a7: jne 0x498eb; add rsp, 0x58; ret; 
0x00000000004498f8: jne 0x49910; xor eax, eax; syscall; 
0x00000000004499c8: jne 0x499e0; mov eax, 1; syscall; 
0x0000000000449b3b: jne 0x49b07; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000449afb: jne 0x49b38; mov eax, dword ptr [rip + 0x272d09]; test eax, eax; jne 0x49b68; mov eax, 0x48; syscall; 
0x0000000000449b05: jne 0x49b68; mov eax, 0x48; syscall; 
0x0000000000449b28: jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c37: jne 0x49c83; add rsp, 0x68; ret; 
0x0000000000449c98: jne 0x49cb0; mov eax, 3; syscall; 
0x000000000044a5a6: jne 0x4a5b7; add rsp, 0x28; ret; 
0x000000000044bc8a: jne 0x4bc96; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bd1a: jne 0x4bd26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044be72: jne 0x4be64; pop rdx; pop r10; ret; 
0x000000000044be62: jne 0x4be6c; nop; mov eax, 0xca; syscall; 
0x000000000044bebf: jne 0x4bea8; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x000000000044bf22: jne 0x4bf10; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x000000000044e14c: jne 0x4e0fb; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000044f183: jne 0x4f115; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000044f18f: jne 0x4f121; call rsi; 
0x000000000044f691: jne 0x4f731; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457c5f: jne 0x57d1f; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000400595: jne 0x598; ret; 
0x000000000045a694: jne 0x5a690; jmp qword ptr [rsi + 0xf]; 
0x000000000045adaf: jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000045aff7: jne 0x5b043; add rsp, 0x148; ret; 
0x0000000000405e7c: jne 0x5e88; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000468202: jne 0x6820c; add rsp, 0xd8; ret; 
0x000000000047121a: jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000047153c: jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x0000000000471648: jne 0x71660; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004717c9: jne 0x717d8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000471878: jne 0x718ca; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000472c65: jne 0x72d40; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472d07: jne 0x72d60; xor eax, eax; ret; 
0x0000000000472cd7: jne 0x72d80; xor eax, eax; ret; 
0x0000000000472f83: jne 0x72fa0; xor eax, eax; vzeroupper; ret; 
0x0000000000472f46: jne 0x72fe0; xor eax, eax; vzeroupper; ret; 
0x0000000000473533: jne 0x73539; xor rax, rax; ret; 
0x0000000000473933: jne 0x73960; mov rax, r8; vzeroupper; ret; 
0x00000000004738fa: jne 0x739a0; mov rax, r8; vzeroupper; ret; 
0x0000000000473b9d: jne 0x73cb1; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004741f3: jne 0x741f9; xor rax, rax; ret; 
0x0000000000474af3: jne 0x74b20; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000474abd: jne 0x74b60; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000475340: jne 0x7537a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000004754d7: jne 0x75536; mov eax, 0x101; syscall; 
0x00000000004754fa: jne 0x755b9; add rsp, 0x78; ret; 
0x000000000047560c: jne 0x75653; add rsp, 0x58; ret; 
0x000000000047568f: jne 0x75699; movzx eax, al; add rsp, 0x58; ret; 
0x000000000047573e: jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000475bd7: jne 0x75b0d; cmp word ptr [rsi + 0x14], 0x2f75; jne 0x75b0d; mov eax, 1; leave; ret; 
0x0000000000475be3: jne 0x75b0d; mov eax, 1; leave; ret; 
0x0000000000475be1: jne 0x75c12; jne 0x75b0d; mov eax, 1; leave; ret; 
0x000000000047c267: jne 0x7c4f6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047c77c: jne 0x7c790; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047cb8f: jne 0x7d166; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047de83: jne 0x7ddc0; lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047e67a: jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000047f20e: jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000047f2c7: jne 0x7f2dc; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x000000000047f307: jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000480e19: jne 0x80dea; movsx eax, cl; neg eax; ret; 
0x0000000000481bea: jne 0x81bf2; add rsp, 0x20; pop rbx; ret; 
0x0000000000481ce5: jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481da5: jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481f06: jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821d5: jne 0x821fe; add rsp, 0x68; ret; 
0x000000000048253f: jne 0x82590; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000482585: jne 0x825a5; add rsp, 0x110; pop rbx; ret; 
0x0000000000482606: jne 0x82611; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484211: jne 0x8424e; leave; ret; 
0x0000000000484440: jne 0x84458; test rsi, rsi; jne 0x84470; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484445: jne 0x84470; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484513: jne 0x84504; cmp cx, 0x7fff; je 0x84504; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004846b1: jne 0x84698; mov rax, rsi; ret; 
0x0000000000484735: jne 0x84710; mov rax, rsi; ret; 
0x00000000004847d8: jne 0x84894; add rsp, 0x30; pop rbx; ret; 
0x0000000000484999: jne 0x84b25; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000484db2: jne 0x84e58; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484ebd: jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484fa0: jne 0x84fb4; add rsp, 0x38; ret; 
0x00000000004855a0: jne 0x855a5; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000485b75: jne 0x85b81; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000048778b: jne 0x8778f; pop rbx; ret; 
0x0000000000487781: jne 0x87800; cmp qword ptr [rip + 0x2317ed], 0; jne 0x8778f; pop rbx; ret; 
0x000000000048831b: jne 0x8832c; add rsp, 0x38; ret; 
0x0000000000488429: jne 0x8843c; add rsp, 0x40; pop rbx; ret; 
0x0000000000488510: jne 0x88524; add rsp, 0x50; pop rbx; ret; 
0x000000000048a980: jne 0x8a8b0; add rsp, 0x38; ret; 
0x000000000048aacf: jne 0x8aba9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048ae21: jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048ae39: jne 0x8ae58; xor eax, eax; ret; 
0x000000000048cfba: jne 0x8cfd0; cmp qword ptr [r9 + 0x38], 0; je 0x8cfe0; add rsp, 0x18; ret; 
0x000000000048d050: jne 0x8d06c; mov rax, qword ptr [rax]; ret; 
0x000000000048d0bf: jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000048d41e: jne 0x8d410; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d59c: jne 0x8d58e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d6e8: jne 0x8d6da; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d734: jne 0x8d726; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d8c3: jne 0x8d8b5; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048da23: jne 0x8da15; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048da74: jne 0x8da66; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048df0c: jne 0x8dee9; movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048df94: jne 0x8dfa5; mov eax, 8; ret; 
0x000000000048dfbf: jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048dfd9: jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee1f: jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee39: jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a9: jne 0x8f8c8; xor eax, eax; ret; 
0x000000000048fe75: jne 0x8fe60; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048fec0: jne 0x8fe98; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490005: jne 0x8ffe8; pop rbx; ret; 
0x0000000000490113: jne 0x900f8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490ccd: jne 0x90cb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490e51: jne 0x90e60; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494119: jne 0x94114; jmp rax; 
0x00000000004965f5: jne 0x965f2; jmp rax; 
0x00000000004a4da1: jne 0xa4da0; jmp rax; 
0x00000000004acdc5: jne 0xacdbd; call qword ptr [rdi + 2]; 
0x00000000004b2d1d: jne 0xb2d1f; add byte ptr [rax - 3], dl; sti; jmp qword ptr [rbx]; 
0x00000000004b3ef8: jne 0xb3efe; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000040dc9b: jne 0xdcbc; add rsp, 0x118; ret; 
0x000000000040ea46: jne 0xe970; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004108a6: jno 0x108f0; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000424c82: jno 0x24cad; add byte ptr [rdx], al; lea rdx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000424cdc: jno 0x24d07; add byte ptr [rdx], al; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000042d18e: jno 0x2d197; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000438580: jno 0x38580; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387ba: jno 0x387ba; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438921: jno 0x38929; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438a71: jno 0x38aef; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a78: jno 0x38af6; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a7f: jno 0x38afd; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a86: jno 0x38b04; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000447194: jno 0x47186; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447282: jno 0x47274; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044754c: jno 0x4752e; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044767f: jno 0x47661; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447a0c: jno 0x47a0c; jg 0x47a52; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447ba5: jno 0x47ba5; jg 0x47beb; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000044c150: jno 0x4c0ed; add al, 0; mov eax, 0x15; syscall; 
0x000000000045e2c8: jno 0x5e2d5; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000482cd4: jno 0x82d1f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000494105: jno 0x94100; push rax; jno 0x94104; jmp rax; 
0x0000000000494109: jno 0x94104; jmp rax; 
0x0000000000494198: jno 0x94130; stc; call qword ptr [rcx]; 
0x00000000004a78f9: jno 0xa788f; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x00000000004acd25: jno 0xacd1d; call qword ptr [rax]; 
0x00000000004b2865: jno 0xb2867; add byte ptr [rax], bl; out dx, al; sti; jmp qword ptr [rdx]; 
0x0000000000400c8b: jno 0xc8c; add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x0000000000424213: jnp 0x2423e; add bh, dh; ret 0; 
0x0000000000424ad1: jnp 0x24aee; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000424e91: jnp 0x24eb7; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000042c55a: jnp 0x2c562; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000475214: jnp 0x7521a; sub rsp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x00000000004a7785: jnp 0xa7740; ret; 
0x00000000004a901e: jnp 0xa9036; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x0000000000424b83: jns 0x24ba9; add al, byte ptr [rax]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x000000000042c756: jns 0x2c75e; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042c7ed: jns 0x2c7f5; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000438587: jns 0x38588; ret; 
0x00000000004387c1: jns 0x387c2; ret; 
0x0000000000438928: jns 0x38931; ret; 
0x000000000043ee37: jns 0x3ee9c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee88: jns 0x3eeed; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ef87: jns 0x3efec; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f126: jns 0x3f18b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f377: jns 0x3f3dc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f518: jns 0x3f57d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f617: jns 0x3f67c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f668: jns 0x3f6cd; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f767: jns 0x3f7cc; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fb57: jns 0x3fbbc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043fe48: jns 0x3fead; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ff47: jns 0x3ffac; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000447198: jns 0x4717a; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447286: jns 0x47268; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447551: jns 0x47513; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447684: jns 0x47646; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447a09: jns 0x47a09; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447ba2: jns 0x47ba2; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000459007: jns 0x59005; jmp qword ptr [rsi + 0xf]; 
0x0000000000478ad0: jns 0x78aca; dec dword ptr [rax - 0x77]; ret; 
0x000000000047f373: jns 0x7f312; and eax, dword ptr [rax]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x0000000000481bf3: jns 0x81b98; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000048ad0e: jns 0x8ad13; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048cfbe: jns 0x8cff8; add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x000000000048dd2e: jns 0x8dd33; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f92e: jns 0x8f933; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x00000000004a688e: jns 0xa6822; ret 0xf869; 
0x000000000041111a: jo 0x11154; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000412135: jo 0x1216f; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000414ec4: jo 0x14f0e; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000414ef4: jo 0x14f3e; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000424d22: jo 0x24d4d; add byte ptr [rdx], al; lea rdx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424d43: jo 0x24d6e; add byte ptr [rdx], al; lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x000000000044c102: jo 0x4c124; ret; 
0x0000000000458ff3: jo 0x58faf; jmp qword ptr [rsi + 0x2e]; 
0x0000000000469afc: jo 0x69b0b; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000047036a: jo 0x7037c; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004703af: jo 0x703e1; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004707f6: jo 0x70810; jbe 0x7081e; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004709a6: jo 0x709c0; jbe 0x709d2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000473ba6: jo 0x73c03; pop rbp; pop r12; ret; 
0x0000000000473dbd: jo 0x73e1a; pop rbp; pop r12; ret; 
0x00000000004820c4: jo 0x82121; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048c97c: jo 0x8c991; clc; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000493f2c: jo 0x93f2b; clc; inc dword ptr [rax]; std; clc; jmp qword ptr [rax]; 
0x0000000000494154: jo 0x940e4; stc; jmp qword ptr [rax - 0x71]; 
0x0000000000494101: jo 0x940fc; inc dword ptr [rax]; jno 0x94100; push rax; jno 0x94104; jmp rax; 
0x00000000004940c4: jo 0x94124; stc; jmp rax; 
0x00000000004940e8: jo 0x94154; stc; jmp qword ptr [rax + 0x6b]; 
0x00000000004942a0: jo 0x94253; stc; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x000000000049430c: jo 0x942c4; stc; call qword ptr [rax - 0x48]; 
0x000000000049430c: jo 0x942c4; stc; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x0000000000494324: jo 0x942d8; stc; call qword ptr [rax - 0x4c]; 
0x0000000000494340: jo 0x942f2; stc; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x0000000000494388: jo 0x9433d; stc; call qword ptr [rax - 0x4b]; 
0x00000000004943d0: jo 0x9437b; stc; inc eax; stosb byte ptr [rdi], al; stc; call qword ptr [rax]; 
0x00000000004943e4: jo 0x94381; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000494424: jo 0x94401; stc; call qword ptr [rax - 0x23]; 
0x000000000049459c: jo 0x94573; stc; push qword ptr [rax - 0x7f000640]; ret; 
0x0000000000494854: jo 0x9485a; cli; jmp rax; 
0x0000000000494a58: jo 0x94a5d; cli; jmp rax; 
0x0000000000494b0c: jo 0x94b43; cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494d5c: jo 0x94d87; cli; jmp rsi; 
0x0000000000495104: jo 0x950ae; cli; inc eax; test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x0000000000495170: jo 0x95164; cli; call qword ptr [rax - 0x4f00050e]; cli; call rax; 
0x0000000000495190: jo 0x95185; cli; call qword ptr [rax - 0x4f00050d]; cli; call rax; 
0x00000000004965ed: jo 0x965ea; lcall [rcx + 0x74]; sti; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x00000000004a7904: jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x00000000004ab7ac: jo 0xab7ae; add byte ptr [rax], al; nop; push rsp; cmc; call qword ptr [rsi]; 
0x00000000004aea6c: jo 0xaea71; ret 0xa01; 
0x00000000004af770: jo 0xaf7c9; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004af990: jo 0xaf915; stc; call qword ptr [rax]; 
0x00000000004af9e0: jo 0xaf966; stc; call qword ptr [rbx]; 
0x00000000004b01f0: jo 0xb019c; stc; call qword ptr [rdi]; 
0x00000000004b1210: jo 0xb126b; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004b1790: jo 0xb1727; cli; call qword ptr [rcx]; 
0x00000000004b31ac: jo 0xb3228; add byte ptr [rax], al; shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x00000000004b4dac: jo 0xb4d44; add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x000000000048d0a0: jo 0xe10862; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000040e986: jo 0xe9a8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004572a2: jp 0x5729a; ret; 
0x0000000000458f07: jp 0x58f05; jmp qword ptr [rsi + 0xf]; 
0x00000000004789fa: jp 0x789f4; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004848ea: jp 0x84963; and eax, dword ptr [rax]; ret; 
0x000000000048de4a: jp 0x8dec0; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a75c5: jp 0xa7620; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004af8dd: jp 0xaf8d8; call rsp; 
0x00000000004b31ad: jp 0xb31af; add al, dl; and esp, edi; jmp qword ptr [rcx]; 
0x0000000000413288: js 0x132c0; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000424b67: js 0x24b5f; add eax, 0x297282; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424cc7: js 0x24cbf; add eax, 0x297122; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424e07: js 0x24dff; add eax, 0x296fe2; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000042c86b: js 0x2c873; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000044a34d: js 0x4a34c; dec dword ptr [rax - 0x77]; ret; 
0x000000000044a513: js 0x4a4f4; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004710af: js 0x710c9; jbe 0x710db; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471209: js 0x7123b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000047bbe2: js 0x7bbf2; pop rbx; ret; 
0x000000000047c584: js 0x7c5a5; add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000048d276: js 0x8d27a; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d283: js 0x8d287; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048ff43: js 0x8ffbc; ret 0x8b48; 
0x00000000004974b4: js 0x974e0; cld; jmp rax; 
0x00000000004a3e14: js 0xa3dc6; cld; call rax; 
0x00000000004af9b4: js 0xaf9f8; add byte ptr [rax], al; test cl, dil; call qword ptr [rdx]; 
0x00000000004affc8: js 0xaff67; stc; call qword ptr [rbx]; 
0x00000000004b3ab4: js 0xb3a39; add byte ptr [rax], al; test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b54a1: js 0xb54a0; jmp qword ptr [rsi]; 
0x000000000040ea85: js 0xeaa7; call rdx; 
0x000000000046ab53: lahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004558cb: lahf; add dword ptr [rax], eax; add al, ch; cld; ret 0xfffa; 
0x00000000004564f5: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000041f92f: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004950e9: lahf; cli; call qword ptr [rax - 0x1f000560]; movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; 
0x0000000000423f8d: lahf; inc byte ptr [rsi]; add byte ptr [rax + 0x31], dl; shr al, 0xd7; ret 0xfffe; 
0x00000000004a8dc3: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000047e67b: lahf; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043f8bd: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e41f: lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000041958f: lahf; ret 0x3949; 
0x0000000000419642: lahf; ret 0x48e9; 
0x000000000044a971: lahf; ret 0x8545; 
0x00000000004a661d: lahf; ret 0x871e; 
0x0000000000448179: lahf; ret 0xea81; 
0x000000000048c631: lahf; ret 0xf45; 
0x000000000044aabb: lahf; ret; 
0x00000000004b5d09: lahf; std; jmp qword ptr [rax]; 
0x00000000004a9021: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000043ff4d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049425f: lcall [rax + 0x60fff9b1]; mov bl, 0xf9; inc dword ptr [rax - 0x4b]; stc; jmp qword ptr [rax]; 
0x00000000004a3e0f: lcall [rax + 0x78fffcb0]; mov al, 0xfc; call rax; 
0x000000000041b442: lcall [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret; 
0x0000000000419ca0: lcall [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000412805: lcall [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000045c912: lcall [rbx + 0x5d]; pop r12; ret; 
0x000000000041258b: lcall [rbx + 0x5d]; ret; 
0x000000000047fca6: lcall [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000410ebe: lcall [rbx - 0x77]; rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; ret; 
0x00000000004965ef: lcall [rcx + 0x74]; sti; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x0000000000494edb: lcall [rdx]; sub edx, edi; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x0000000000494127: lcall [rsi - 0x5f000671]; nop; stc; call rcx; 
0x00000000004352fc: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435586: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435516: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354a6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435436: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353c6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435356: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435976: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435906: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435896: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435826: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357b6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435746: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356d6: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435666: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355f6: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434ae6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043528c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043520c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043517c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350fc: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043507c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ffc: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f7c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434efc: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e7c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434dfc: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d7c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cfc: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c6c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bdc: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b4c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434adc: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435306: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435291: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435211: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435181: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435101: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435081: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435001: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f81: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f01: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e81: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e01: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d81: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d01: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c71: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434be1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b51: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043558b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043551b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043543b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043535b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043597b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043590b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043589b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043582b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043574b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356db: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043566b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004182eb: lea eax, [r8 - 1]; ret; 
0x000000000048ad2c: lea eax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042b9c4: lea eax, [rax + rdi + 0x10]; ret; 
0x000000000042b9d4: lea eax, [rax + rdi + 0x20]; ret; 
0x000000000042b9a4: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000047b5bd: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004182ec: lea eax, [rax - 1]; ret; 
0x00000000004b4455: lea eax, [rax]; add byte ptr [rax - 0x1f], bl; cld; jmp qword ptr [rsi]; 
0x000000000047325d: lea eax, [rcx + rsi]; ret; 
0x0000000000446964: lea eax, [rcx - 1]; ret; 
0x00000000004449dc: lea eax, [rdi + 0x10]; ret; 
0x00000000004449f1: lea eax, [rdi + 0x11]; ret; 
0x0000000000444a0f: lea eax, [rdi + 0x12]; ret; 
0x0000000000444a2f: lea eax, [rdi + 0x13]; ret; 
0x0000000000444a52: lea eax, [rdi + 0x14]; ret; 
0x0000000000444a71: lea eax, [rdi + 0x15]; ret; 
0x0000000000444a91: lea eax, [rdi + 0x16]; ret; 
0x0000000000444ab1: lea eax, [rdi + 0x17]; ret; 
0x0000000000444ad4: lea eax, [rdi + 0x18]; ret; 
0x0000000000444af9: lea eax, [rdi + 0x19]; ret; 
0x0000000000444b17: lea eax, [rdi + 0x1a]; ret; 
0x0000000000444b37: lea eax, [rdi + 0x1b]; ret; 
0x0000000000444b53: lea eax, [rdi + 0x1c]; ret; 
0x0000000000444b73: lea eax, [rdi + 0x1d]; ret; 
0x0000000000444b93: lea eax, [rdi + 0x1e]; ret; 
0x0000000000444bb3: lea eax, [rdi + 0x1f]; ret; 
0x000000000044492d: lea eax, [rdi + 0xa]; ret; 
0x000000000044494d: lea eax, [rdi + 0xb]; ret; 
0x000000000044496f: lea eax, [rdi + 0xc]; ret; 
0x000000000044498f: lea eax, [rdi + 0xd]; ret; 
0x00000000004449af: lea eax, [rdi + 0xe]; ret; 
0x00000000004449c9: lea eax, [rdi + 0xf]; ret; 
0x0000000000444877: lea eax, [rdi + 1]; ret; 
0x000000000044488a: lea eax, [rdi + 2]; ret; 
0x0000000000444895: lea eax, [rdi + 3]; ret; 
0x00000000004448a8: lea eax, [rdi + 4]; ret; 
0x00000000004448bd: lea eax, [rdi + 5]; ret; 
0x00000000004448db: lea eax, [rdi + 6]; ret; 
0x00000000004448e7: lea eax, [rdi + 7]; ret; 
0x00000000004448fa: lea eax, [rdi + 8]; ret; 
0x000000000044490f: lea eax, [rdi + 9]; ret; 
0x0000000000472d69: lea eax, [rdi + rax + 0x10]; ret; 
0x00000000004407c7: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000472d79: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000042b98d: lea eax, [rdi + rax + 0x30]; ret; 
0x00000000004407e7: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440825: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004734a5: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044022c: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044068d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440447: lea eax, [rdi + rax]; ret; 
0x0000000000446cba: lea eax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000473159: lea eax, [rdi + rsi]; ret; 
0x00000000004657a0: lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000041b099: lea eax, [rdi]; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x0000000000444863: lea eax, [rdi]; ret; 
0x0000000000443e4d: lea eax, [rdx + 0xa]; ret; 
0x0000000000443e6d: lea eax, [rdx + 0xb]; ret; 
0x0000000000443e8f: lea eax, [rdx + 0xc]; ret; 
0x0000000000443eaf: lea eax, [rdx + 0xd]; ret; 
0x0000000000443ecf: lea eax, [rdx + 0xe]; ret; 
0x0000000000443d5f: lea eax, [rdx + 0xf]; ret; 
0x0000000000443d87: lea eax, [rdx + 1]; ret; 
0x0000000000443d9d: lea eax, [rdx + 2]; ret; 
0x0000000000443db5: lea eax, [rdx + 3]; ret; 
0x0000000000443dcb: lea eax, [rdx + 4]; ret; 
0x0000000000443ddd: lea eax, [rdx + 5]; ret; 
0x0000000000443dfb: lea eax, [rdx + 6]; ret; 
0x000000000048ad21: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000443d07: lea eax, [rdx + 7]; ret; 
0x0000000000443e0d: lea eax, [rdx + 8]; ret; 
0x0000000000443e2d: lea eax, [rdx + 9]; ret; 
0x00000000004182de: lea eax, [rdx + rdi]; ret; 
0x0000000000448293: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004236e6: lea eax, [rdx - 0x10]; ret; 
0x0000000000443d75: lea eax, [rdx]; ret; 
0x0000000000472108: lea eax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee8: lea eax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000048f8f8: lea eax, [rip + 0x1bdda]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004241f8: lea eax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424acf: lea eax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000424e28: lea eax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce8: lea eax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b88: lea eax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e8f: lea eax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d4f: lea eax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424bef: lea eax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e6e: lea eax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000042417f: lea eax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d2e: lea eax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424bce: lea eax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x0000000000424c3d: lea eax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c8e: lea eax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x00000000004848e1: lea eax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x00000000004848c6: lea eax, [rip + 0x2377b4]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000046c276: lea eax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c223: lea eax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcf6: lea eax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c095: lea eax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c050: lea eax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c00b: lea eax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfbc: lea eax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b620: lea eax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046070f: lea eax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460abe: lea eax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a70: lea eax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609c1: lea eax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460965: lea eax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606c5: lea eax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460677: lea eax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460216: lea eax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000459299: lea eax, [rip + 0x25f9a1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x0000000000459199: lea eax, [rip + 0x25faa1]; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x000000000044d491: lea eax, [rip + 0x26ce69]; ret; 
0x000000000048505f: lea eax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424eb8: lea eax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d8: lea eax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a88: lea eax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472138: lea eax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000004200c1: lea eax, [rip - 0x14a7]; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x0000000000473ae7: lea eax, [rip - 0x2bced]; cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x00000000004200cf: lea eax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x000000000047f211: lea eax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000041213c: lea eax, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000449c0f: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x000000000045f0a1: lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000040e111: lea ebx, [rdi + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000463e2d: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x0000000000444846: lea ebx, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444811: lea ebx, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447e5: lea ebx, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447cf: lea ebx, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447ad: lea ebx, [rip + 0x509ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444788: lea ebx, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044476b: lea ebx, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444713: lea ebx, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444226: lea ebx, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441f1: lea ebx, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441c5: lea ebx, [rip + 0x50f55]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441af: lea ebx, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044418d: lea ebx, [rip + 0x50f8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444168: lea ebx, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044414b: lea ebx, [rip + 0x50fcf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440f3: lea ebx, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004375a2: lea ebx, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437244: lea ebx, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004373ef: lea ebx, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370c4: lea ebx, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437187: lea ebx, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f44: lea ebx, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437007: lea ebx, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dc4: lea ebx, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e87: lea ebx, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c44: lea ebx, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d08: lea ebx, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ac4: lea ebx, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b87: lea ebx, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436944: lea ebx, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a07: lea ebx, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367c4: lea ebx, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436887: lea ebx, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436644: lea ebx, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436707: lea ebx, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364c4: lea ebx, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436587: lea ebx, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436344: lea ebx, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436407: lea ebx, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361c4: lea ebx, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436287: lea ebx, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436044: lea ebx, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436107: lea ebx, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ec4: lea ebx, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f87: lea ebx, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d44: lea ebx, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bcb: lea ebx, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e07: lea ebx, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c87: lea ebx, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359cc: lea ebx, [rip + 0x5f10e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b4a: lea ebx, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359ee: lea ebx, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8e: lea ebx, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434764: lea ebx, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348fb: lea ebx, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345e4: lea ebx, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a7: lea ebx, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434464: lea ebx, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434527: lea ebx, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342e4: lea ebx, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a7: lea ebx, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434164: lea ebx, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434228: lea ebx, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fe4: lea ebx, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a7: lea ebx, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e64: lea ebx, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f27: lea ebx, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ce4: lea ebx, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da7: lea ebx, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b64: lea ebx, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c27: lea ebx, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339e4: lea ebx, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa7: lea ebx, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433864: lea ebx, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433927: lea ebx, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336e4: lea ebx, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a7: lea ebx, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433564: lea ebx, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433627: lea ebx, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333e4: lea ebx, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a7: lea ebx, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433264: lea ebx, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330eb: lea ebx, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433327: lea ebx, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432e95: lea ebx, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dd8: lea ebx, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a7: lea ebx, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f0b: lea ebx, [rip + 0x616cf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ced: lea ebx, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043306a: lea ebx, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c22: lea ebx, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef8: lea ebx, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c01: lea ebx, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b63: lea ebx, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ab1: lea ebx, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a13: lea ebx, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431961: lea ebx, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318c3: lea ebx, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431811: lea ebx, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431773: lea ebx, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316c1: lea ebx, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431623: lea ebx, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431571: lea ebx, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314d3: lea ebx, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431421: lea ebx, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431383: lea ebx, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d1: lea ebx, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431238: lea ebx, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431181: lea ebx, [rip + 0x63299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310e3: lea ebx, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431031: lea ebx, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f93: lea ebx, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee1: lea ebx, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e43: lea ebx, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d91: lea ebx, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cf3: lea ebx, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c41: lea ebx, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ba3: lea ebx, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af1: lea ebx, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a53: lea ebx, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a1: lea ebx, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430903: lea ebx, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430857: lea ebx, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430766: lea ebx, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a7: lea ebx, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043063d: lea ebx, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054e: lea ebx, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430314: lea ebx, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430489: lea ebx, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043023a: lea ebx, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f231: lea ebx, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f193: lea ebx, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e1: lea ebx, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f043: lea ebx, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef91: lea ebx, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eef3: lea ebx, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee41: lea ebx, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eda3: lea ebx, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf1: lea ebx, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec53: lea ebx, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba1: lea ebx, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb03: lea ebx, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea51: lea ebx, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9b3: lea ebx, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e901: lea ebx, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e868: lea ebx, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b1: lea ebx, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e713: lea ebx, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e661: lea ebx, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5c3: lea ebx, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e511: lea ebx, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e473: lea ebx, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c1: lea ebx, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e323: lea ebx, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e271: lea ebx, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1d3: lea ebx, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e121: lea ebx, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e083: lea ebx, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd1: lea ebx, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df33: lea ebx, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de87: lea ebx, [rip + 0x663d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd96: lea ebx, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd7: lea ebx, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc6d: lea ebx, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7e: lea ebx, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab9: lea ebx, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd74: lea ebx, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccfa: lea ebx, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc6b: lea ebx, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca60: lea ebx, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92e: lea ebx, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c868: lea ebx, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ea: lea ebx, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c753: lea ebx, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c557: lea ebx, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c426: lea ebx, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c317: lea ebx, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004a6ed1: lea ebx, [rsi - 0x3271f33]; test al, 0x97; xchg eax, esp; ret; 
0x0000000000473c5b: lea ecx, [rax + 1]; call rbx; 
0x0000000000473df6: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046e845: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004440fe: lea ecx, [rbx + rcx]; jmp rcx; 
0x000000000044418f: lea ecx, [rdi]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041f5c8: lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000047e674: lea ecx, [rdx + 4]; cmp rcx, r8; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042a960: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004236f6: lea ecx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000048d0b1: lea ecx, [rip + 0x22f0e9]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000047c087: lea ecx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046e3d0: lea ecx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000440179: lea ecx, [rip + 0x583a1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ed64: lea ecx, [rip + 0x597b6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043eb09: lea ecx, [rip + 0x59a11]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d234: lea ecx, [rip + 0x5b2e6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044c07a: lea ecx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000447035: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447390: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477db: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000471960: lea ecx, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000047187b: lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000473d7e: lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000473f6c: lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473c56: lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000468ad7: lea edi, [rax + 0x48fffff6]; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000475213: lea edi, [rbx + 4]; sub rsp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000044c77f: lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000446fda: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432e8d: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480f98: lea edi, [rip + 0x23f7c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000460760: lea edi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d741: lea edi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x000000000047c9af: lea edi, [rip + 0x28403]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046eb17: lea edi, [rip + 0x351af]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000044c14e: lea edi, [rip + 0x49b71]; mov eax, 0x15; syscall; 
0x000000000040ec9d: lea edi, [rip + 0x83f8a]; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040d318: lea edi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004174f9: lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000418c01: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046e849: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042dac4: lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000431bf8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aa8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431958: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431808: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431568: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431418: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431028: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ed8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c38: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ae8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430998: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f228: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0d8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee38: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ece8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb98: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7a8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e658: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e508: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e268: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e118: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfc8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000485058: lea edx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004720f7: lea edx, [rip + 0x1653]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ed7: lea edx, [rip + 0x1b963]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x0000000000424e21: lea edx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce1: lea edx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b81: lea edx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e88: lea edx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d48: lea edx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be8: lea edx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e67: lea edx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424178: lea edx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d27: lea edx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c36: lea edx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c87: lea edx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000484d26: lea edx, [rip + 0x235e34]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484d96: lea edx, [rip + 0x25a30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046eb85: lea edx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044931d: lea edx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004401c7: lea edx, [rip + 0x58353]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004401ad: lea edx, [rip + 0x5836d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043eb3d: lea edx, [rip + 0x599dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cfa7: lea edx, [rip + 0x5b573]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cf8d: lea edx, [rip + 0x5b58d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ae3d: lea edx, [rip + 0x5d6dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000424ea7: lea edx, [rip + 0x6b33]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000423b1e: lea edx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040d5fe: lea edx, [rip + 0x851b4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000402370: lea edx, [rip + 0x90332]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021a3: lea edx, [rip + 0x904a7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040201f: lea edx, [rip + 0x905ff]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473a77: lea edx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000473af4: lea edx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x0000000000424ac8: lea edx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000446fce: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000449b3e: lea edx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000449c41: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000471877: lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471959: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000471a53: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000043cf8f: lea esi, [rbp + 0xc8b0005]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000047de8a: lea esi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401893: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004122d2: lea esi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046b0cd: lea esi, [rip + 0x24bd4d]; jmp rax; 
0x0000000000460e02: lea esi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607aa: lea esi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004481a1: lea esi, [rip + 0x4d0d9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000446fdf: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000469e6f: lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044d605: lea esp, [rbp + 1]; cmp rax, 0x17; ja 0x4d5e0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000040eb43: lea esp, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000047e196: lea esp, [rbx + rdi*8 - 0x76b30001]; ret 0x2948; 
0x000000000040d5fd: lea r10, [rip + 0x851b4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000444845: lea r11, [rip + 0x50954]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444810: lea r11, [rip + 0x50989]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447e4: lea r11, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447ce: lea r11, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447ac: lea r11, [rip + 0x509ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444787: lea r11, [rip + 0x50a12]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044476a: lea r11, [rip + 0x50a2f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444712: lea r11, [rip + 0x50a87]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444225: lea r11, [rip + 0x50ef4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441f0: lea r11, [rip + 0x50f29]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441c4: lea r11, [rip + 0x50f55]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ae: lea r11, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044418c: lea r11, [rip + 0x50f8d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444167: lea r11, [rip + 0x50fb2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044414a: lea r11, [rip + 0x50fcf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440f2: lea r11, [rip + 0x51027]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004375a1: lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437243: lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004373ee: lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370c3: lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437186: lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f43: lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437006: lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dc3: lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e86: lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c43: lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d07: lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ac3: lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b86: lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436943: lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a06: lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367c3: lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436886: lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436643: lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436706: lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364c3: lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436586: lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436343: lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436406: lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361c3: lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436286: lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436043: lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436106: lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ec3: lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f86: lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d43: lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bca: lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e06: lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c86: lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359cb: lea r11, [rip + 0x5f10e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b49: lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359ed: lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8d: lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434763: lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348fa: lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345e3: lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a6: lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434463: lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434526: lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342e3: lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a6: lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434163: lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434227: lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fe3: lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a6: lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e63: lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f26: lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ce3: lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da6: lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b63: lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c26: lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339e3: lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa6: lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433863: lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433926: lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336e3: lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a6: lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433563: lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433626: lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333e3: lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a6: lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433263: lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330ea: lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433326: lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432e94: lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dd7: lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a6: lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f0a: lea r11, [rip + 0x616cf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432cec: lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433069: lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c21: lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef7: lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c00: lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b62: lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ab0: lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a12: lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431960: lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318c2: lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431810: lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431772: lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316c0: lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431622: lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431570: lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314d2: lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431420: lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431382: lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d0: lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431237: lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431180: lea r11, [rip + 0x63299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310e2: lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431030: lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f92: lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee0: lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e42: lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d90: lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cf2: lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c40: lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ba2: lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af0: lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a52: lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a0: lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430902: lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430856: lea r11, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430765: lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a6: lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043063c: lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054d: lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430313: lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430488: lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430239: lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f230: lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f192: lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e0: lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f042: lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef90: lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eef2: lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee40: lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eda2: lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf0: lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec52: lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba0: lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb02: lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea50: lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9b2: lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e900: lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e867: lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b0: lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e712: lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e660: lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5c2: lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e510: lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e472: lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c0: lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e322: lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e270: lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1d2: lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e120: lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e082: lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd0: lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df32: lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de86: lea r11, [rip + 0x663d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd95: lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd6: lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc6c: lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7d: lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab8: lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd73: lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf9: lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc6a: lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca5f: lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92d: lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c867: lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e9: lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c752: lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c556: lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c425: lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c316: lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000044d604: lea r12, [r13 + 1]; cmp rax, 0x17; ja 0x4d5e0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000040eb42: lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004174f8: lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000041b100: lea r8, [rdi]; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x000000000048f8f7: lea r8, [rip + 0x1bdda]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000041213b: lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000447034: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044738f: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477da: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047195f: lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000047187a: lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000473d7d: lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473f6b: lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473c55: lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000048ad2b: lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042b9c3: lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b9d3: lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b9a3: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000047b5bc: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047325c: lea rax, [rcx + rsi]; ret; 
0x0000000000446963: lea rax, [rcx - 1]; ret; 
0x00000000004449db: lea rax, [rdi + 0x10]; ret; 
0x00000000004449f0: lea rax, [rdi + 0x11]; ret; 
0x0000000000444a0e: lea rax, [rdi + 0x12]; ret; 
0x0000000000444a2e: lea rax, [rdi + 0x13]; ret; 
0x0000000000444a51: lea rax, [rdi + 0x14]; ret; 
0x0000000000444a70: lea rax, [rdi + 0x15]; ret; 
0x0000000000444a90: lea rax, [rdi + 0x16]; ret; 
0x0000000000444ab0: lea rax, [rdi + 0x17]; ret; 
0x0000000000444ad3: lea rax, [rdi + 0x18]; ret; 
0x0000000000444af8: lea rax, [rdi + 0x19]; ret; 
0x0000000000444b16: lea rax, [rdi + 0x1a]; ret; 
0x0000000000444b36: lea rax, [rdi + 0x1b]; ret; 
0x0000000000444b52: lea rax, [rdi + 0x1c]; ret; 
0x0000000000444b72: lea rax, [rdi + 0x1d]; ret; 
0x0000000000444b92: lea rax, [rdi + 0x1e]; ret; 
0x0000000000444bb2: lea rax, [rdi + 0x1f]; ret; 
0x000000000044492c: lea rax, [rdi + 0xa]; ret; 
0x000000000044494c: lea rax, [rdi + 0xb]; ret; 
0x000000000044496e: lea rax, [rdi + 0xc]; ret; 
0x000000000044498e: lea rax, [rdi + 0xd]; ret; 
0x00000000004449ae: lea rax, [rdi + 0xe]; ret; 
0x00000000004449c8: lea rax, [rdi + 0xf]; ret; 
0x0000000000444876: lea rax, [rdi + 1]; ret; 
0x0000000000444889: lea rax, [rdi + 2]; ret; 
0x0000000000444894: lea rax, [rdi + 3]; ret; 
0x00000000004448a7: lea rax, [rdi + 4]; ret; 
0x00000000004448bc: lea rax, [rdi + 5]; ret; 
0x00000000004448da: lea rax, [rdi + 6]; ret; 
0x00000000004448e6: lea rax, [rdi + 7]; ret; 
0x00000000004448f9: lea rax, [rdi + 8]; ret; 
0x000000000044490e: lea rax, [rdi + 9]; ret; 
0x0000000000472d68: lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004407c6: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000472d78: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b98c: lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004407e6: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440824: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004734a4: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044022b: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044068c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440446: lea rax, [rdi + rax]; ret; 
0x0000000000446cb9: lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000473158: lea rax, [rdi + rsi]; ret; 
0x0000000000444862: lea rax, [rdi]; ret; 
0x0000000000443e4c: lea rax, [rdx + 0xa]; ret; 
0x0000000000443e6c: lea rax, [rdx + 0xb]; ret; 
0x0000000000443e8e: lea rax, [rdx + 0xc]; ret; 
0x0000000000443eae: lea rax, [rdx + 0xd]; ret; 
0x0000000000443ece: lea rax, [rdx + 0xe]; ret; 
0x0000000000443d5e: lea rax, [rdx + 0xf]; ret; 
0x0000000000443d86: lea rax, [rdx + 1]; ret; 
0x0000000000443d9c: lea rax, [rdx + 2]; ret; 
0x0000000000443db4: lea rax, [rdx + 3]; ret; 
0x0000000000443dca: lea rax, [rdx + 4]; ret; 
0x0000000000443ddc: lea rax, [rdx + 5]; ret; 
0x0000000000443dfa: lea rax, [rdx + 6]; ret; 
0x000000000048ad20: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000443d06: lea rax, [rdx + 7]; ret; 
0x0000000000443e0c: lea rax, [rdx + 8]; ret; 
0x0000000000443e2c: lea rax, [rdx + 9]; ret; 
0x00000000004236e5: lea rax, [rdx - 0x10]; ret; 
0x0000000000443d74: lea rax, [rdx]; ret; 
0x0000000000472107: lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ee7: lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241f7: lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424ace: lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000424e27: lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce7: lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b87: lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e8e: lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d4e: lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424bee: lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e6d: lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x000000000042417e: lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d2d: lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424bcd: lea rax, [rip + 0x22b6c]; cmovne rax, rdx; ret; 
0x0000000000424c3c: lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c8d: lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x00000000004848e0: lea rax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x00000000004848c5: lea rax, [rip + 0x2377b4]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000046c275: lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c222: lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcf5: lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c094: lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c04f: lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c00a: lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfbb: lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b61f: lea rax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046070e: lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460abd: lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a6f: lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609c0: lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460964: lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606c4: lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460676: lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460215: lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000459298: lea rax, [rip + 0x25f9a1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x0000000000459198: lea rax, [rip + 0x25faa1]; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x000000000044d490: lea rax, [rip + 0x26ce69]; ret; 
0x000000000048505e: lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424eb7: lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721d7: lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a87: lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000472137: lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x00000000004200c0: lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x0000000000473ae6: lea rax, [rip - 0x2bced]; cmp edx, 0x1000; lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x00000000004200ce: lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x000000000047f210: lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x0000000000449c0e: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x000000000040e110: lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004440fd: lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000473c5a: lea rcx, [rax + 1]; call rbx; 
0x0000000000473df5: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046e844: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047e673: lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042a95f: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004236f5: lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000048d0b0: lea rcx, [rip + 0x22f0e9]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000047c086: lea rcx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046e3cf: lea rcx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000440178: lea rcx, [rip + 0x583a1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ed63: lea rcx, [rip + 0x597b6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043eb08: lea rcx, [rip + 0x59a11]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d233: lea rcx, [rip + 0x5b2e6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044c079: lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000475212: lea rdi, [rbx + 4]; sub rsp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000044c77e: lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000446fd9: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432e8c: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480f97: lea rdi, [rip + 0x23f7c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000046075f: lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d740: lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x000000000047c9ae: lea rdi, [rip + 0x28403]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046eb16: lea rdi, [rip + 0x351af]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000044c14d: lea rdi, [rip + 0x49b71]; mov eax, 0x15; syscall; 
0x000000000040ec9c: lea rdi, [rip + 0x83f8a]; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040d317: lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000042dac3: lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418c00: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046e848: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000431bf7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aa7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431957: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431807: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431567: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431417: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431027: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ed7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c37: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ae7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430997: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f227: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0d7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee37: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ece7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb97: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7a7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e657: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e507: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e267: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e117: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfc7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000485057: lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004720f6: lea rdx, [rip + 0x1653]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424ed6: lea rdx, [rip + 0x1b963]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x0000000000424e20: lea rdx, [rip + 0x221d9]; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424ce0: lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b80: lea rdx, [rip + 0x22479]; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e87: lea rdx, [rip + 0x224c2]; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d47: lea rdx, [rip + 0x225f2]; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be7: lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e66: lea rdx, [rip + 0x22923]; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424177: lea rdx, [rip + 0x22a12]; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424d26: lea rdx, [rip + 0x22a53]; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c35: lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000424c86: lea rdx, [rip + 0x23373]; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000484d25: lea rdx, [rip + 0x235e34]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484d95: lea rdx, [rip + 0x25a30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046eb84: lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044931c: lea rdx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004401c6: lea rdx, [rip + 0x58353]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004401ac: lea rdx, [rip + 0x5836d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043eb3c: lea rdx, [rip + 0x599dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cfa6: lea rdx, [rip + 0x5b573]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cf8c: lea rdx, [rip + 0x5b58d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ae3c: lea rdx, [rip + 0x5d6dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000424ea6: lea rdx, [rip + 0x6b33]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x0000000000423b1d: lea rdx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040236f: lea rdx, [rip + 0x90332]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021a2: lea rdx, [rip + 0x904a7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040201e: lea rdx, [rip + 0x905ff]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473a76: lea rdx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000473af3: lea rdx, [rip - 0x2bb7a]; cmove rax, rdx; ret; 
0x0000000000424ac7: lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000446fcd: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000449b3d: lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000449c40: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000471876: lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471958: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000471a52: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047de89: lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401892: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004122d1: lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046b0cc: lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x0000000000460e01: lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a9: lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004481a0: lea rsi, [rip + 0x4d0d9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000446fde: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000415f88: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004b3fc9: leave; cld; jmp qword ptr [rcx]; 
0x0000000000446cb4: leave; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004b3c49: leave; hlt; jmp qword ptr [rcx]; 
0x0000000000446740: leave; jne 0x46730; ret; 
0x00000000004467f0: leave; jne 0x467e0; ret; 
0x0000000000446ab0: leave; jne 0x46aa0; sub rax, 1; ret; 
0x000000000047c266: leave; jne 0x7c4f6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb8e: leave; jne 0x7d166; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000446cb8: leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000042c09f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000048ace0: leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000044e90f: leave; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x00000000004264ec: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000046b5e6: leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000400bca: leave; ret; 
0x00000000004a7081: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000047e6c2: leave; test rsi, rsi; je 0x7e6cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000473d7a: leave; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004974af: ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x000000000049602f: ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x000000000049469b: ljmp [rbp + rcx - 6]; call qword ptr [rdx]; 
0x000000000049283f: ljmp [rbx - 0x50]; idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x000000000046bad4: ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x00000000004947d7: ljmp [rdx + 0x3afffa0d]; or eax, 0xce0fffa; cli; call qword ptr [rax + 0x13]; 
0x000000000049590f: ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000494edf: ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x00000000004957af: ljmp [rsi]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x00000000004945df: ljmp [rsi]; or eax, 0x13b0fffa; cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x000000000042c6de: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004afa2c: lock add byte ptr [rax], al; mov al, 0x85; stc; call qword ptr [rbx]; 
0x000000000047f167: lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004109f0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004460c0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004b3bd9: lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004a98f0: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000042ab14: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004a955d: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000046a4be: lodsb al, byte ptr [rsi]; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6a4d8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000494419: lodsb al, byte ptr [rsi]; stc; call rax; 
0x00000000004943d9: lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rax - 0x53]; 
0x00000000004ac214: lodsb al, byte ptr [rsi]; sub al, 0xf6; call qword ptr [rdx]; 
0x000000000044e14d: lodsd eax, dword ptr [rsi]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a647b: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000480cf7: lodsd eax, dword ptr [rsi]; div edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000482e42: lodsd eax, dword ptr [rsi]; ret; 
0x00000000004728bf: lodsd eax, dword ptr [rsi]; xchg eax, esi; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a7a18: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000042ffa7: loope 0x2fff5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffef: loope 0x3003d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043002d: loope 0x3007b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430065: loope 0x300b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300a3: loope 0x300f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300db: loope 0x30129; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430103: loope 0x30151; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432977: loope 0x329c5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329bf: loope 0x32a0d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329fd: loope 0x32a4b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a35: loope 0x32a83; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a73: loope 0x32ac1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432aab: loope 0x32af9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432ad3: loope 0x32b21; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b5a: loope 0x34b4f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000436947: loope 0x3694e; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b8a: loope 0x36b91; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043767a: loope 0x3766f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000440bbc: loope 0x40bde; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000444235: loope 0x4429d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004447de: loope 0x44770; bsf rdx, rdx; lea r11, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444855: loope 0x448bd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444deb: loope 0x44ded; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x00000000004487de: loope 0x487d3; ret; 
0x000000000044e16e: loope 0x4e173; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x00000000004682c3: loope 0x68246; stc; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x000000000046ae65: loope 0x6aeb0; mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000473738: loope 0x7375a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000473ad0: loope 0x73ad2; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000047468e: loope 0x7469f; je 0x746b0; ret; 
0x000000000047c97b: loope 0x7c97c; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000482cd7: loope 0x82d25; mov dword ptr [rdi], ecx; ret; 
0x0000000000482d08: loope 0x82d56; mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000482d7d: loope 0x82dcb; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000048a886: loope 0x8a887; jg 0x8a88a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000048d3da: loope 0x8d425; mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000490006: loope 0x90063; ret; 
0x0000000000490cce: loope 0x90d2b; pop rbp; pop r12; ret; 
0x0000000000494431: loope 0x9442c; call qword ptr [rax]; 
0x0000000000494555: loope 0x94550; jmp qword ptr [rax]; 
0x00000000004b4459: loope 0xb4457; jmp qword ptr [rsi]; 
0x00000000004b4491: loope 0xb448f; call qword ptr [rdx]; 
0x000000000046c00d: lss esp, ptr [rax + rax]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004a68ea: mov ah, 0x13; ret; 
0x0000000000491faa: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004916ba: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000494c90: mov ah, 0x34; cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x000000000040d600: mov ah, 0x51; or byte ptr [rax], al; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000004a78fb: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x00000000004848c8: mov ah, 0x77; and eax, dword ptr [rax]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x00000000004b47f0: mov ah, 0x90; add byte ptr [rax], al; cmp al, 3; std; jmp qword ptr [rdx]; 
0x00000000004a6d90: mov ah, 0xa5; ret; 
0x00000000004a6194: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004ada89: mov ah, 0xf6; jmp qword ptr [rax]; 
0x00000000004866f2: mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004942c9: mov ah, 0xf9; call rax; 
0x0000000000494309: mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x0000000000494309: mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x0000000000494329: mov ah, 0xf9; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494349: mov ah, 0xf9; push rax; mov ch, 0xf9; call rax; 
0x0000000000449318: mov ah, 2; add byte ptr [rax], al; lea rdx, [rip + 0x4c3f9]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004a66e4: mov ah, bl; push rsi; ret; 
0x0000000000419b06: mov ah, byte ptr [rdx]; sub al, byte ptr [rax]; ret; 
0x000000000048ae26: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000004947fc: mov al, 0x10; cli; inc dword ptr [rax + 0x10]; cli; call rax; 
0x00000000004945e4: mov al, 0x13; cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x000000000046bcf9: mov al, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000494f50: mov al, 0x2a; cli; jmp qword ptr [rax]; 
0x00000000004b4d60: mov al, 0x2d; std; jmp qword ptr [rax + 1]; 
0x0000000000494cf4: mov al, 0x37; cli; inc dword ptr [rax + 0x37]; cli; call rax; 
0x00000000004b01ec: mov al, 0x4a; add byte ptr [rax], al; jo 0xb019c; stc; call qword ptr [rdi]; 
0x00000000004940dc: mov al, 0x50; stc; call qword ptr [rax - 0x7f000698]; imul edi, ecx, 0xf96a70ff; jmp qword ptr [rax + 0x6b]; 
0x00000000004940b4: mov al, 0x58; stc; jmp qword ptr [rax]; 
0x000000000047b61c: mov al, 0x65; clc; call qword ptr [rbp + 0x53]; 
0x0000000000494118: mov al, 0x75; stc; jmp rax; 
0x00000000004afa30: mov al, 0x85; stc; call qword ptr [rbx]; 
0x0000000000494124: mov al, 0x90; stc; lcall [rsi - 0x5f000671]; nop; stc; call rcx; 
0x00000000004a3a1c: mov al, 0xa8; cld; call qword ptr [rax - 0x57]; 
0x00000000004a3a10: mov al, 0xa8; cld; jmp qword ptr [rax - 0x57]; 
0x00000000004a3a04: mov al, 0xa8; cld; push qword ptr [rax + 0x70fffca8]; test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x0000000000494320: mov al, 0xb0; stc; push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x0000000000494304: mov al, 0xb2; stc; call qword ptr [rax + 0x70fff9b4]; mov dh, 0xf9; call qword ptr [rax - 0x48]; 
0x00000000004af5c0: mov al, 0xb8; clc; call qword ptr [rax]; 
0x00000000004942d0: mov al, 0xb8; stc; call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x000000000048fdbc: mov al, 0xc1; sti; call qword ptr [rbp + 0x53]; 
0x000000000044080f: mov al, 0xc5; std; xlatb; ret; 
0x0000000000462b0c: mov al, 0xd9; stc; dec dword ptr [rax + 0x29]; ret; 
0x00000000004b2580: mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x00000000004587e8: mov al, 0xe8; ret 0xfc81; 
0x0000000000495144: mov al, 0xf1; cli; inc eax; int1; cli; call rax; 
0x0000000000495178: mov al, 0xf2; cli; call rax; 
0x0000000000495198: mov al, 0xf3; cli; call rax; 
0x00000000004b2b40: mov al, 0xf5; sti; jmp qword ptr [rbx]; 
0x0000000000492849: mov al, 0xf7; call qword ptr [rbx]; 
0x00000000004928a9: mov al, 0xf7; jmp qword ptr [rcx - 0x50]; 
0x0000000000494321: mov al, 0xf9; push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x0000000000494301: mov al, 0xf9; push qword ptr [rax - 0x6f00064e]; mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x0000000000494341: mov al, 0xf9; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x00000000004b1a69: mov al, 0xfa; call qword ptr [rbx]; 
0x00000000004902b4: mov al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x00000000004a3e15: mov al, 0xfc; call rax; 
0x00000000004949e8: mov al, 9; cli; jmp qword ptr [rax]; 
0x000000000041f5c9: mov al, byte ptr [rax + 2]; add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000046ea02: mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000462f7b: mov al, byte ptr [rbx - 0x76ffffe6]; ret 0xc389; 
0x0000000000443d96: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443dc4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000442604: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443d70: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004425c0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000042c0a0: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000443dd4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000442614: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443d80: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443d90: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004425d0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000435921: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000447082: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000457c0f: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000444c88: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x00000000004a7bc4: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004a6197: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000413c49: mov bh, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000400bc5: mov bh, 0xf3; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000494391: mov bh, 0xf9; call qword ptr [rax]; 
0x0000000000494371: mov bh, 0xf9; jmp qword ptr [rax - 0x47]; 
0x0000000000487b7f: mov bh, 0xff; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048f5a7: mov bh, 0xff; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000487d0c: mov bh, 0xff; nop; add rsp, 8; ret; 
0x000000000040ec9f: mov bh, byte ptr [rdi]; or byte ptr [rax], al; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x00000000004afb2d: mov bh, cl; call qword ptr [rbp + 1]; 
0x000000000044657e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000490c81: mov bl, 0x22; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045a4a2: mov bl, 0x4c; add edi, ebx; jmp rdi; 
0x00000000004a4d44: mov bl, 0x86; std; jmp rax; 
0x00000000004a4d98: mov bl, 0x86; std; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x00000000004a6193: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004163e3: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004ad945: mov bl, 0xf6; call qword ptr [rdi]; 
0x0000000000494389: mov bl, 0xf9; call qword ptr [rax - 0x4b]; 
0x0000000000494389: mov bl, 0xf9; call qword ptr [rax - 0x4b]; stc; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x00000000004942a5: mov bl, 0xf9; call qword ptr [rax]; 
0x00000000004942a5: mov bl, 0xf9; call qword ptr [rax]; mov ch, 0xf9; push rax; mov dh, 0xf9; call rax; 
0x0000000000494265: mov bl, 0xf9; inc dword ptr [rax - 0x4b]; stc; jmp qword ptr [rax]; 
0x0000000000494285: mov bl, 0xf9; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x00000000004942c5: mov bl, 0xf9; push rax; mov ah, 0xf9; call rax; 
0x0000000000494268: mov bpl, 0xf9; jmp qword ptr [rax]; 
0x000000000044e43a: mov byte ptr [r8 - 0x7d], r9b; ret 0x4830; 
0x0000000000402534: mov byte ptr [r9 - 0x77], r8b; int 0x83; ret 0x8901; 
0x000000000044c0ea: mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000446197: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000484f14: mov byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004b3fc4: mov byte ptr [rax - 0x36080000], cl; cld; jmp qword ptr [rcx]; 
0x0000000000450c83: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044e43b: mov byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x00000000004b3fc5: mov byte ptr [rax], al; add al, bh; leave; cld; jmp qword ptr [rcx]; 
0x000000000044bc8f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000400e64: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b3fd9: mov byte ptr [rax], al; add byte ptr [rdx + rcx*8], dl; cld; call rdx; 
0x00000000004affc4: mov byte ptr [rax], cl; add byte ptr [rax - 0x63], bh; stc; call qword ptr [rbx]; 
0x000000000045f853: mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045d5c1: mov byte ptr [rbp - 0x918], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045d5c0: mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000468ad6: mov byte ptr [rbp - 0x948], cl; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000468ad5: mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000468acc: mov byte ptr [rbp - 0x94c], al; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000468acb: mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046e4d7: mov byte ptr [rcx + 0xf], 0x4f; ret; 
0x0000000000459fa3: mov byte ptr [rcx + rax - 0x3a], cl; jmp rsi; 
0x000000000048ace4: mov byte ptr [rcx + rax - 0x40], cl; jmp rax; 
0x0000000000402535: mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x0000000000405e5f: mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f8e1: mov byte ptr [rcx], 0x48; shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000480e15: mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x00000000004014c4: mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000042105f: mov byte ptr [rcx], ch; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045e333: mov byte ptr [rcx], cl; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004449d8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444348: mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000444a4e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044439e: mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444ad0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444420: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000444886: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444266: mov byte ptr [rdi + 2], dh; ret; 
0x00000000004448a2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000444282: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004448f3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442c3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000042f53b: mov byte ptr [rdi - 1], dl; ret; 
0x0000000000413230: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000438662: mov byte ptr [rdi], cl; ret; 
0x0000000000447f45: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000444860: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444240: mov byte ptr [rdi], dh; ret; 
0x0000000000435993: mov byte ptr [rdi], dl; ret; 
0x0000000000443d99: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e9: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443dc7: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000442607: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000004460bb: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x0000000000443d72: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004425c2: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000048b850: mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b849: mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b842: mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b83b: mov byte ptr [rip + 0x23096b], 8; mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000047f2c9: mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x0000000000400b26: mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x000000000041e5e9: mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x00000000004846af: mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x0000000000484733: mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x000000000041d340: mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004a66e2: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000004a7a23: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000460967: mov ch, 0x61; and eax, 0x48b4800; clc; jmp rax; 
0x000000000047195a: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000471a54: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004a8dbf: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004a976a: mov ch, 0xab; ret; 
0x000000000045ddb8: mov ch, 0xb0; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000004a6195: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000470ce7: mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000475379: mov ch, 0xe8; int1; imul edi, ebp, -1; nop; mov eax, 0x3f; syscall; 
0x00000000004adae5: mov ch, 0xf6; call qword ptr [rdi + 1]; 
0x00000000004adabd: mov ch, 0xf6; call qword ptr [rdi]; 
0x00000000004adad1: mov ch, 0xf6; call qword ptr [rsi]; 
0x0000000000494289: mov ch, 0xf9; call qword ptr [rax]; 
0x000000000049434d: mov ch, 0xf9; call rax; 
0x000000000049438d: mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000494269: mov ch, 0xf9; jmp qword ptr [rax]; 
0x00000000004942a9: mov ch, 0xf9; push rax; mov dh, 0xf9; call rax; 
0x00000000004500ef: mov ch, 3; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000042d256: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004447e7: mov ch, 9; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048253a: mov ch, bh; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000423341: mov ch, byte ptr [rcx]; add dh, dh; ret 0xf02; 
0x00000000004746a0: mov ch, dh; and ch, 0xf; je 0x746c0; add rax, 2; ret; 
0x000000000046c053: mov cl, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000416847: mov cl, 0x35; ret; 
0x000000000049418c: mov cl, 0x94; stc; inc dword ptr [rcx - 0x6b]; stc; call rcx; 
0x0000000000486ac7: mov cl, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000049283d: mov cl, 0xf7; ljmp [rbx - 0x50]; idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x0000000000494281: mov cl, 0xf9; call qword ptr [rax - 0x4d]; 
0x0000000000494281: mov cl, 0xf9; call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x00000000004942c1: mov cl, 0xf9; call qword ptr [rax]; 
0x00000000004942c1: mov cl, 0xf9; call qword ptr [rax]; mov bl, 0xf9; push rax; mov ah, 0xf9; call rax; 
0x0000000000494261: mov cl, 0xf9; jmp qword ptr [rax - 0x4d]; 
0x00000000004942e1: mov cl, 0xf9; jmp rax; 
0x0000000000494385: mov cl, 0xf9; push qword ptr [rax - 0x4d]; stc; call qword ptr [rax - 0x4b]; 
0x00000000004942a1: mov cl, 0xf9; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x00000000004a3d8d: mov cl, 0xfc; call qword ptr [rax]; 
0x00000000004a3d95: mov cl, 0xfc; call rax; 
0x00000000004a3e0d: mov cl, 0xfc; lcall [rax + 0x78fffcb0]; mov al, 0xfc; call rax; 
0x000000000046e3cb: mov cl, 3; add byte ptr [rax], al; lea rcx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043ae45: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004575e2: mov cl, byte ptr [rcx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x000000000042c0a4: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000438660: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000047468b: mov cl, dl; and cl, 0xf; je 0x746b0; ret; 
0x00000000004a8e4c: mov cs, edi; ret 0x8b36; 
0x0000000000467a02: mov cs, word ptr [rdx - 0x77000000]; ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000043f3ce: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000043864e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004449e4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444354: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444ae8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444438: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042f984: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004358b4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444880: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444260: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043864d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004847da: mov dh, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000048df0f: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000416ff2: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134df: mov dh, 0; pop r12; pop r13; pop r14; ret; 
0x0000000000419080: mov dh, 0; ret; 
0x000000000049462c: mov dh, 0x12; cli; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x0000000000423761: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x23750; sub rax, 0x10; ret; 
0x0000000000435991: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000042bbf4: mov dh, 0x16; sub eax, edx; ret; 
0x00000000004174f3: mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000494b24: mov dh, 0x39; cli; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x000000000041783d: mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x17859; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046e4ec: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000040dac9: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x00000000004569d2: mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000424950: mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000468e2b: mov dh, 0x46; or al, 0x83; ret; 
0x000000000047283d: mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000446151: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446141: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000446111: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000446131: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000446121: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000045da29: mov dh, 0x47; or al, 0x83; ret; 
0x00000000004a7b82: mov dh, 0x4e; ret 0x474c; 
0x000000000042494a: mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000446155: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000446145: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x0000000000446115: mov dh, 0x56; int1; sub eax, edx; ret; 
0x0000000000446125: mov dh, 0x56; sub eax, edx; ret; 
0x0000000000462c98: mov dh, 0x67; or al, 0x89; ret 0xc689; 
0x0000000000405ffa: mov dh, 0x73; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000040efb4: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000478c3f: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000457407: mov dh, 0x94; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000457425: mov dh, 0x94; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457443: mov dh, 0x94; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004941d4: mov dh, 0x95; stc; call qword ptr [rsi - 0x6a]; 
0x000000000043ed66: mov dh, 0x97; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004a6196: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000475692: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048bf56: mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e268: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048836d: mov dh, 0xc0; neg eax; ret; 
0x0000000000484c1a: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bc14: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e911: mov dh, 0xc0; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000448231: mov dh, 0xc1; pop rbx; ret; 
0x00000000004481e1: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000415df2: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447d05: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450c82: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004a8dc4: mov dh, 0xc7; ret 0xe71f; 
0x000000000048acdf: mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000448271: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042bc1a: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000049ef90: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000048c48f: mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000004a98f7: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000447059: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x0000000000426331: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c0b4: mov dh, 0xe; sub eax, ecx; ret; 
0x000000000049430d: mov dh, 0xf9; call qword ptr [rax - 0x48]; 
0x000000000049430d: mov dh, 0xf9; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x000000000049432d: mov dh, 0xf9; call qword ptr [rax]; 
0x00000000004942ad: mov dh, 0xf9; call rax; 
0x000000000040d605: mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000004b3c79: mov dh, 0xfc; jmp qword ptr [rdx]; 
0x00000000004206f4: mov dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000417001: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134f1: mov dh, 2; ret; 
0x00000000004846a9: mov dh, 4; adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x00000000004401c4: mov dh, 7; lea rdx, [rip + 0x58353]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cfa4: mov dh, 7; lea rdx, [rip + 0x5b573]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042c0b1: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bbf1: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000426334: mov dh, 7; sub eax, ecx; ret; 
0x00000000004487dc: mov dh, byte ptr [rcx - 0xd]; ret; 
0x0000000000494390: mov dil, 0xf9; call qword ptr [rax]; 
0x000000000046bfbf: mov dl, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000494bc8: mov dl, 0x35; cli; inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x00000000004755ba: mov dl, 0x69; std; jmp qword ptr [rsi - 0x70]; 
0x000000000040eb2d: mov dl, 0x6b; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000414032: mov dl, 0x6b; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004139b8: mov dl, 0x6b; add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x00000000004a9020: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004a6192: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004946d0: mov dl, 0xe; cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x000000000044c812: mov dl, 0xf5; add byte ptr es:[rbx + rcx*4 + 0x1d], cl; ret; 
0x0000000000494305: mov dl, 0xf9; call qword ptr [rax + 0x70fff9b4]; mov dh, 0xf9; call qword ptr [rax - 0x48]; 
0x0000000000494325: mov dl, 0xf9; call qword ptr [rax - 0x4c]; 
0x0000000000494325: mov dl, 0xf9; call qword ptr [rax - 0x4c]; stc; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494345: mov dl, 0xf9; call qword ptr [rax]; 
0x0000000000494345: mov dl, 0xf9; call qword ptr [rax]; mov ah, 0xf9; push rax; mov ch, 0xf9; call rax; 
0x000000000044416a: mov dl, 0xf; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004948d8: mov dl, 3; cli; jmp qword ptr [rdx]; 
0x000000000043d237: mov dl, 5; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000004950a1: mov dl, bh; jmp rax; 
0x000000000042f5c0: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004950a0: mov dl, dil; jmp rax; 
0x0000000000461e75: mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x0000000000438656: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000438641: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044c081: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000470329: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470369: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000471368: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000044c0e7: mov dword ptr [rax + 0x20], ecx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c101: mov dword ptr [rax + 0x20], esi; ret; 
0x0000000000471364: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x00000000004703ae: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000047125e: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047032d: mov dword ptr [rax + 0x40], ecx; ret; 
0x00000000004713ea: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000430545: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430480: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db75: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000450bb4: mov dword ptr [rax + 0x4c], ecx; movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004713e2: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000450bbf: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450bc2: mov dword ptr [rax + 0x54], edx; ret; 
0x000000000041a5c0: mov dword ptr [rax + 8], ebx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000047031e: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470362: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044c085: mov dword ptr [rax + 8], edx; ret; 
0x00000000004915f5: mov dword ptr [rax + rax], 0x348d4800; ret 0xc183; 
0x0000000000484e2d: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004496d0: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004658ad: mov dword ptr [rax], 0x16; mov eax, edx; ret; 
0x000000000044a628: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000040f3d2: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x00000000004757b0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041e61a: mov dword ptr [rax], 0xc; mov rax, rsi; ret; 
0x0000000000412545: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004b40a5: mov dword ptr [rax], eax; add byte ptr [rax], cl; int 0xfc; jmp qword ptr [rsi]; 
0x000000000048453b: mov dword ptr [rax], eax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004844f9: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000484ddd: mov dword ptr [rax], edi; pop rbx; ret; 
0x0000000000484d2d: mov dword ptr [rax], edx; add rsp, 8; ret; 
0x000000000047085d: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470326: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470366: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000041b042: mov dword ptr [rax], edx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000484dd1: mov dword ptr [rax], edx; pop rbx; ret; 
0x000000000048d0c2: mov dword ptr [rax], edx; ret; 
0x000000000047579d: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x000000000048d270: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000045842a: mov dword ptr [rbp - 0x48], eax; call 0x4d500; mov rdi, r14; call rbx; 
0x0000000000458429: mov dword ptr [rbp - 0x48], r8d; call 0x4d500; mov rdi, r14; call rbx; 
0x000000000046c214: mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c20e: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bce1: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c03b: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c080: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfa7: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c261: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b615: mov dword ptr [rbp - 0x4b8], edx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046bce7: mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046ae6a: mov dword ptr [rbp - 0x4c8], ecx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046b0c2: mov dword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f867: mov dword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045fb36: mov dword ptr [rbp - 0x4d8], ecx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046c4f3: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046c670: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c4f2: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046c66f: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004600f2: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000046b0bb: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f860: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004600f1: mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000046c041: mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bffc: mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000045fa52: mov dword ptr [rbp - 0x4f8], ecx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c086: mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b532: mov dword ptr [rbp - 0x500], eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046bfad: mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b525: mov dword ptr [rbp - 0x508], ecx; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000045fa59: mov dword ptr [rbp - 0x508], ecx; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046b524: mov dword ptr [rbp - 0x508], r9d; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000045fa58: mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c267: mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000480f9f: mov dword ptr [rbp - 0x70], eax; mov eax, 0x15; syscall; 
0x000000000044f182: mov dword ptr [rbp - 0x70], esi; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000047544b: mov dword ptr [rbp - 0x77], 0xca8948c2; mov eax, 0x106; syscall; 
0x000000000045d5ba: mov dword ptr [rbp - 0x93c], ecx; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045d5b9: mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000468ac5: mov dword ptr [rbp - 0x950], ebx; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000468ac4: mov dword ptr [rbp - 0x950], r11d; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004586fe: mov dword ptr [rbp - 0x98], edx; call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000004850b0: mov dword ptr [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000471596: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418b29: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472195: mov dword ptr [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458892: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000413307: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000481c2e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004136ef: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000047f93e: mov dword ptr [rbx + 0x10], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004132ff: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481b63: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488395: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000047f93a: mov dword ptr [rbx + 0x18], esp; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000488469: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x00000000004589bf: mov dword ptr [rbx + 0x20], edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417336: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000045ae3d: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000004173ad: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416e91: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x000000000047159a: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418b2d: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414ec2: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004703b4: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000471261: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041328b: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000414610: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048ccab: mov dword ptr [rbx + 0x98], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041337e: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000480dc5: mov dword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000471eec: mov dword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412db0: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000413303: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000004136eb: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f429: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417225: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004588a7: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000459295: mov dword ptr [rbx + rbp*8], eax; lea rax, [rip + 0x25f9a1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x00000000004591a0: mov dword ptr [rbx + rsi*8], esi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x000000000044f613: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dbe: mov dword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047fc80: mov dword ptr [rbx], 0; or dword ptr [rip + 0x23a55b], 1; pop rbx; ret; 
0x0000000000461e70: mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x00000000004855a3: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000041733c: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000048a309: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004173b0: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413205: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047136b: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000417a70: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416e22: mov dword ptr [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000471ee9: mov dword ptr [rbx], esp; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417e35: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417e2d: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004846a6: mov dword ptr [rcx + 0xf], 0x481004b6; test edi, edi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x0000000000400e1e: mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x0000000000462948: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000450f15: mov dword ptr [rcx - 0x7d], 0x940f07fc; ret 0x1f0f; 
0x0000000000438657: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000438642: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000438631: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000480e11: mov dword ptr [rcx], 0x1c68348; test dl, dl; jne 0x80dea; movsx eax, cl; neg eax; ret; 
0x000000000044962a: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000444813: mov dword ptr [rcx], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045ac8c: mov dword ptr [rcx], edx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000416d9b: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000419a74: mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x00000000004449ed: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444a2b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444aad: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444a4b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044439b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444acd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044441d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044435d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444b10: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444460: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b30: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444480: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444af1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444441: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444b13: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444463: mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000416d73: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000444af5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444b33: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000416d9f: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000444445: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000419a71: mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000047b5c0: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047b5c7: mov dword ptr [rdi + 0x308], eax; ret; 
0x0000000000416d6f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416da3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048d101: mov dword ptr [rdi + 0x98], esi; ret; 
0x0000000000417b47: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417b52: mov dword ptr [rdi + 0xa8], 0; ret; 
0x0000000000444a6d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443bd: mov dword ptr [rdi + 0xe], ecx; ret; 
0x0000000000444a0b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444a8d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000044437b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004357d5: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435618: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004358b8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000435765: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355a8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004448d7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004356f5: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435538: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004442a7: mov dword ptr [rdi + 3], edx; ret; 
0x00000000004448b9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000004354c8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444299: mov dword ptr [rdi + 4], edx; ret; 
0x000000000044496b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000435458: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044430b: mov dword ptr [rdi + 5], edx; ret; 
0x000000000044498b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000004353e8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044431b: mov dword ptr [rdi + 6], edx; ret; 
0x0000000000444929: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004449ab: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000435378: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004442e9: mov dword ptr [rdi + 7], edx; ret; 
0x00000000004845fe: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000416d77: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000482e88: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000484643: mov dword ptr [rdi + 8], ecx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482e14: mov dword ptr [rdi + 8], ecx; ret; 
0x00000000004845df: mov dword ptr [rdi + 8], ecx; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000444949: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000044490b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x00000000004843f0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004842b4: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000004442db: mov dword ptr [rdi + 8], edx; ret; 
0x00000000004833dd: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000447deb: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x0000000000447f70: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000447085: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x0000000000447de3: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000447f65: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000447075: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000447ddb: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x0000000000447f5a: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000447067: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x000000000048d0ac: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000042f285: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2c3: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000482d7f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000042f438: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f534: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f480: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f608: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e8: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9d8: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba9: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda9: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa9: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f281: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2bf: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f434: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f530: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47c: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f604: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e4: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9d4: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba5: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda5: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa5: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27d: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2bb: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f430: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f52c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f478: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f600: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e0: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9d0: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba1: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda1: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa1: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f279: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2b7: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f60c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e28: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f7ec: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434da8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f9dc: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d28: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fbad: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c99: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fdad: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c09: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ffad: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b79: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f98d: mov dword ptr [rdi - 2], ecx; ret; 
0x000000000042f7a5: mov dword ptr [rdi - 2], edx; ret; 
0x000000000042f989: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fd69: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f43f: mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd66: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff66: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430166: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000482d78: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042f289: mov dword ptr [rdi - 8], ecx; ret; 
0x000000000042f2c7: mov dword ptr [rdi - 8], edx; ret; 
0x000000000042f43c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f538: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f484: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ea8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044be82: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004135e3: mov dword ptr [rdi], eax; mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047f378: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x0000000000482d04: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482e0e: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048463e: mov dword ptr [rdi], eax; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000046802a: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000482d71: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482e81: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004448a5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004448f7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x0000000000444884: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444264: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004448d5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004442a5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000444927: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004442e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444947: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004442f7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000446db7: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000415f8a: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000444968: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444308: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444988: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444318: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004449a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444328: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004448b6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444296: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000444908: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446dc3: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043537c: mov dword ptr [rdi], ecx; ret; 
0x0000000000447f5f: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000444874: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000444892: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004448e4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000412542: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000435684: mov dword ptr [rdi], edx; ret; 
0x000000000043863f: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000484486: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043862e: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000438653: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000044706c: mov dword ptr [rdi], esi; ret; 
0x0000000000413385: mov dword ptr [rdx + 0x130], edi; pop rbx; ret; 
0x0000000000443df7: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000442627: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443dd9: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000442619: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000443e8b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x0000000000443e09: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442639: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443eab: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x0000000000443e29: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442649: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000042dfd3: mov dword ptr [rdx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443e49: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000443ecb: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442659: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443e69: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000443d5b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425ab: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000484447: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484650: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000048453d: mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000047c269: mov dword ptr [rdx], eax; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000443d84: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x0000000000443db2: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000443d04: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x0000000000443d94: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443dc2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000442602: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443dd2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000442612: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000004496ba: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000484488: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004845e5: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000443df2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000442622: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443e04: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442634: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443e24: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442644: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443e44: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442654: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443e64: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442664: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000044996a: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x0000000000443e84: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442674: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ea4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442694: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443ec4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d54: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442554: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000484dbd: mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000418c08: mov dword ptr [rdx], eax; ret; 
0x0000000000490dad: mov dword ptr [rip + 0x22b201], 0; add rsp, 8; ret; 
0x0000000000490528: mov dword ptr [rip + 0x22b956], 0; add rsp, 8; ret; 
0x000000000048ffff: mov dword ptr [rip + 0x22bceb], ebx; jne 0x8ffe8; pop rbx; ret; 
0x000000000048f4b0: mov dword ptr [rip + 0x22cece], 1; ret; 
0x000000000048f3a0: mov dword ptr [rip + 0x22cfde], 1; ret; 
0x00000000004848e8: mov dword ptr [rip + 0x23777a], eax; ret; 
0x00000000004848cd: mov dword ptr [rip + 0x237795], eax; add rsp, 8; ret; 
0x0000000000481a09: mov dword ptr [rip + 0x23a63d], 0; add rsp, 8; ret; 
0x000000000047f2d1: mov dword ptr [rip + 0x23d0d9], eax; add rsp, 8; ret; 
0x000000000047f215: mov dword ptr [rip + 0x23d195], eax; ret; 
0x000000000044d4c6: mov dword ptr [rip + 0x26b5ec], edx; pop rbx; ret; 
0x000000000044bd89: mov dword ptr [rip + 0x26e3e1], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004200d6: mov dword ptr [rip + 0x299784], eax; ret; 
0x00000000004200c8: mov dword ptr [rip + 0x29979a], eax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200e0: mov dword ptr [rip + 0x29bc86], 0; ret; 
0x0000000000419aee: mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419ae4: mov dword ptr [rip + 0x29fd26], 1; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aaf: mov dword ptr [rip + 0x29fd33], eax; ret; 
0x0000000000419a8f: mov dword ptr [rip + 0x29fd4b], eax; ret; 
0x0000000000419aa4: mov dword ptr [rip + 0x29fd66], 1; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a84: mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419985: mov dword ptr [rip + 0x29febd], eax; ret; 
0x0000000000419915: mov dword ptr [rip + 0x29fedd], eax; ret; 
0x0000000000419905: mov dword ptr [rip + 0x29fef5], eax; ret; 
0x000000000041a9f2: mov dword ptr [rip + 0x2a1368], eax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000419f90: mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x0000000000419b04: mov dword ptr [rip + 0x2a228a], eax; ret; 
0x000000000041903c: mov dword ptr [rip + 0x2a2cd2], 0; ret; 
0x0000000000418fd2: mov dword ptr [rip + 0x2a2d40], edx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x0000000000400e5b: mov dword ptr [rip + 0x2bafbf], eax; add rsp, 0x88; pop rbx; ret; 
0x00000000004005a5: mov dword ptr [rip + 0x2bbae9], 0; pop rax; ret; 
0x00000000004018a3: mov dword ptr [rsi + 0x10], esi; syscall; 
0x0000000000401897: mov dword ptr [rsi + 8], eax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000446dc6: mov dword ptr [rsi - 2], ecx; ret; 
0x0000000000446db9: mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004787e1: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x00000000004119d3: mov dword ptr [rsi], eax; call qword ptr [rbp + 0x30]; 
0x000000000048d0ee: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047f382: mov dword ptr [rsi], eax; ret; 
0x000000000045ac81: mov dword ptr [rsi], ecx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047e6c9: mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x000000000040189b: mov dword ptr [rsi], esi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041d34a: mov dword ptr [rsp + 0x10], ebx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041d407: mov dword ptr [rsp + 0x10], edx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047e431: mov dword ptr [rsp + 0x18], eax; call 0x7dd60; add rsp, 0xd8; ret; 
0x0000000000449c0a: mov dword ptr [rsp + 0x18], eax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x0000000000449c14: mov dword ptr [rsp + 0x20], eax; je 0x49c40; mov eax, 0x48; syscall; 
0x000000000041d345: mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004756b6: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000449cd1: mov dword ptr [rsp + 0xc], eax; call 0x4bf00; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000041d34f: mov dword ptr [rsp + 8], eax; call rcx; 
0x000000000041108f: mov dword ptr [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000411b0e: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x000000000041ddb3: mov dword ptr [rsp + rsi*2], 0x158b48e9; stosb byte ptr [rdi], al; ret; 
0x000000000048a8b1: mov dword ptr [rsp], eax; call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000489b05: mov dword ptr [rsp], eax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489ab3: mov dword ptr [rsp], eax; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004148b3: mov dword ptr [rsp], eax; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413be2: mov dword ptr [rsp], ecx; mov rdi, rbx; call rax; 
0x00000000004496cf: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004658ac: mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000044a627: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000040f3d1: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004757af: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041e619: mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000412544: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047579c: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x0000000000449629: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000004496b9: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449969: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000447074: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x00000000004358b0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004448b2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444292: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000444903: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042f7a0: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f980: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000444870: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000444250: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000048a991: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x0000000000448273: mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000400c8f: mov eax, 0; leave; ret; 
0x0000000000400405: mov eax, 0; test rax, rax; je 0x412; call rax; 
0x00000000004497ed: mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044976c: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004754d9: mov eax, 0x101; syscall; 
0x0000000000475452: mov eax, 0x106; syscall; 
0x00000000004482ab: mov eax, 0x10; pop rbx; ret; 
0x000000000044a467: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000047de99: mov eax, 0x14; syscall; 
0x000000000044c154: mov eax, 0x15; syscall; 
0x0000000000423e10: mov eax, 0x16; ret; 
0x00000000004afdf4: mov eax, 0x18000046; cwde; stc; jmp qword ptr [rcx]; 
0x0000000000449610: mov eax, 0x18; syscall; 
0x0000000000449610: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044bdb3: mov eax, 0x19; syscall; 
0x000000000044bdb3: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044a700: mov eax, 0x1c; syscall; 
0x000000000044a700: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x00000000004482b9: mov eax, 0x20; pop rbx; ret; 
0x0000000000488530: mov eax, 0x26; syscall; 
0x0000000000488530: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x0000000000485280: mov eax, 0x27; syscall; 
0x0000000000485280: mov eax, 0x27; syscall; ret; 
0x00000000004482b2: mov eax, 0x30; pop rbx; ret; 
0x0000000000475380: mov eax, 0x3f; syscall; 
0x0000000000475380: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x75390; ret; 
0x00000000004482c7: mov eax, 0x40; pop rbx; ret; 
0x00000000004a6cdb: mov eax, 0x45155e93; ret 0x591c; 
0x00000000004b37f4: mov eax, 0x48000080; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000449b07: mov eax, 0x48; syscall; 
0x0000000000468ad8: mov eax, 0x48fffff6; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000449deb: mov eax, 0x4f; syscall; 
0x0000000000457c68: mov eax, 0x5b000000; pop r12; ret; 
0x0000000000414c37: mov eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x00000000004482c0: mov eax, 0x60; pop rbx; ret; 
0x0000000000481561: mov eax, 0x62696c67; movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000044bde0: mov eax, 0x63; syscall; 
0x000000000044bde0: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x00000000004753b0: mov eax, 0x66; syscall; 
0x00000000004753b0: mov eax, 0x66; syscall; ret; 
0x00000000004753d0: mov eax, 0x68; syscall; 
0x00000000004753d0: mov eax, 0x68; syscall; ret; 
0x00000000004753c0: mov eax, 0x6b; syscall; 
0x00000000004753c0: mov eax, 0x6b; syscall; ret; 
0x00000000004753e0: mov eax, 0x6c; syscall; 
0x00000000004753e0: mov eax, 0x6c; syscall; ret; 
0x000000000044829d: mov eax, 0x80; pop rbx; ret; 
0x00000000004898bf: mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000046c0d1: mov eax, 0x8900001d; ret 0x349; 
0x0000000000486b94: mov eax, 0x89fd8945; ret 0xe283; 
0x000000000046b623: mov eax, 0x8b480024; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000040189d: mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004b00f4: mov eax, 0xa8000049; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x000000000044a6d0: mov eax, 0xa; syscall; 
0x000000000044a6d0: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a6a0: mov eax, 0xb; syscall; 
0x000000000044a6a0: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x00000000004a2a30: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000047765c: mov eax, 0xba0002ce; sbb al, byte ptr [rip + 0x66e80000]; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004942d1: mov eax, 0xba90fff9; stc; call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x000000000040dc52: mov eax, 0xba; syscall; 
0x00000000004942b1: mov eax, 0xbac0fff9; stc; inc eax; mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; 
0x00000000004a6198: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000474c50: mov eax, 0xc9; syscall; 
0x0000000000474c50: mov eax, 0xc9; syscall; ret; 
0x000000000044be65: mov eax, 0xca; syscall; 
0x000000000044be92: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000044bf39: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000449385: mov eax, 0xe5; syscall; 
0x0000000000421954: mov eax, 0xe8fffeee; xchg eax, ebx; ret; 
0x000000000040dc80: mov eax, 0xe; syscall; 
0x000000000040dc5e: mov eax, 0xea; syscall; 
0x000000000042d3e9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045ae61: mov eax, 0xf; syscall; 
0x00000000004755b8: mov eax, 0xfd69b2e8; jmp qword ptr [rsi - 0x70]; 
0x000000000045842c: mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000004845d9: mov eax, 0xffffbfd1; mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004844fb: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000045aca1: mov eax, 0xffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004496c9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a621: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000040f3cb: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004757a9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004135e6: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004658a1: mov eax, 0xffffffc0; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000415f81: mov eax, 0xffffffc0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000412539: mov eax, 0xffffffc0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047fca1: mov eax, 0xffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045ad01: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ace1: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045acc1: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000047087f: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412801: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045c90e: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412587: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000413703: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041254b: mov eax, 0xffffffff; ret; 
0x000000000046f587: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475be9: mov eax, 1; leave; ret; 
0x0000000000484465: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000046bcae: mov eax, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417a72: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867cd: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000047fc90: mov eax, 1; pop rbx; ret; 
0x0000000000467f8f: mov eax, 1; ret; 
0x00000000004499ca: mov eax, 1; syscall; 
0x00000000004744a3: mov eax, 2; ret; 
0x0000000000474701: mov eax, 3; ret; 
0x0000000000449c9a: mov eax, 3; syscall; 
0x0000000000474711: mov eax, 4; ret; 
0x000000000044969e: mov eax, 4; syscall; 
0x0000000000474721: mov eax, 5; ret; 
0x00000000004496ec: mov eax, 5; syscall; 
0x0000000000474731: mov eax, 6; ret; 
0x00000000004753fe: mov eax, 6; syscall; 
0x0000000000474741: mov eax, 7; ret; 
0x00000000004482a4: mov eax, 8; pop rbx; ret; 
0x000000000044e960: mov eax, 8; ret; 
0x0000000000449a90: mov eax, 8; syscall; 
0x000000000044a5fc: mov eax, 9; syscall; 
0x000000000047121d: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000471326: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004707fb: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041209a: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040ea4d: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004120a1: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004649a7: mov eax, dword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004717f4: mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000048990c: mov eax, dword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000481a21: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000481a31: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x00000000004592a0: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x000000000045d5b6: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046b627: mov eax, dword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045acaf: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000046021d: mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b4281: mov eax, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x000000000048ad29: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000048ad11: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; ret; 
0x000000000045acac: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047fca9: mov eax, dword ptr [rax]; ret; 
0x0000000000416f95: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000417185: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000048c856: mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x0000000000401c7c: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480f92: mov eax, dword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x23f7c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d1f5: mov eax, dword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c590: mov eax, dword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000400c34: mov eax, dword ptr [rbp - 4]; mov edi, eax; call 0xb6d; leave; ret; 
0x0000000000484205: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x000000000047c3b1: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c26e: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000484d92: mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x25a30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000416edd: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000416efe: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000484e29: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484dd9: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004136e7: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000484dc9: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004175c9: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004179e9: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000041208f: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040d30e: mov eax, dword ptr [rbx + rax*8]; ja 0xd995; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000044bd86: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x26e3e1], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443df4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000442624: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443dd5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000442615: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443e06: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442636: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443e87: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442677: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443e26: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442646: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443ea7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442697: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443e46: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442656: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443ec7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443e66: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442666: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443d57: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043d23a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043eb12: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000443db0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000443dc0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000442600: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443dd0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000442610: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443df0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000442620: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000004425f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000443d01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443e01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442631: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443e21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442641: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443e41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442651: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443e61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442661: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443e81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442671: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ea1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442691: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443ec1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d51: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442551: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000443d81: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443d91: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004425d1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000047cb96: mov eax, dword ptr [rdi + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047164e: mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000418c10: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000418c38: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000045a6a2: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a6af; call rax; 
0x0000000000490c3d: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x00000000004198e1: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004717f1: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000416d6b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000418f61: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000048d081: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000048d0d1: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000048d111: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000048d171: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000048d161: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000048d121: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000048d0e1: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000419077: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x000000000048da91: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0x8daa8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000460767: mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x000000000048d0b8: mov eax, dword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000042cef4: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000044640c: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000042d153: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000042d451: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x000000000042cec7: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x0000000000418c05: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000419ae1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd26], 1; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aa1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd66], 1; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a81: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419b01: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2a228a], eax; ret; 
0x0000000000419981: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x29febd], rax; ret; 
0x0000000000419911: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x29fedd], rax; ret; 
0x0000000000419901: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x29fef5], rax; ret; 
0x00000000004715c3: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047e67c: mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043ae46: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047f896: mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048cca8: mov eax, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000485480: mov eax, dword ptr [rip + 0x23743a]; ret; 
0x000000000047f371: mov eax, dword ptr [rip + 0x239d79]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x000000000047f37b: mov eax, dword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x000000000047f30a: mov eax, dword ptr [rip + 0x23d0a0]; ret; 
0x00000000004754cf: mov eax, dword ptr [rip + 0x247337]; test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x0000000000457b11: mov eax, dword ptr [rip + 0x264361]; ret; 
0x000000000044f5b1: mov eax, dword ptr [rip + 0x26d371]; ret; 
0x000000000044bd30: mov eax, dword ptr [rip + 0x270b8a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449c90: mov eax, dword ptr [rip + 0x272b76]; test eax, eax; jne 0x49cb0; mov eax, 3; syscall; 
0x0000000000449afd: mov eax, dword ptr [rip + 0x272d09]; test eax, eax; jne 0x49b68; mov eax, 0x48; syscall; 
0x00000000004499c0: mov eax, dword ptr [rip + 0x272e46]; test eax, eax; jne 0x499e0; mov eax, 1; syscall; 
0x00000000004498f0: mov eax, dword ptr [rip + 0x272f16]; test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x0000000000418f41: mov eax, dword ptr [rip + 0x2a01d9]; ret; 
0x0000000000419f86: mov eax, dword ptr [rip + 0x2a1de4]; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x000000000048dfc2: mov eax, dword ptr [rsi + 0x10]; ret; 
0x000000000048ae51: mov eax, dword ptr [rsi + 0xa8]; ret; 
0x000000000048ae24: mov eax, dword ptr [rsi + 0xb0]; ret; 
0x000000000048ae41: mov eax, dword ptr [rsi + 0xb8]; ret; 
0x000000000048dfe1: mov eax, dword ptr [rsi + 8]; ret; 
0x00000000004119cb: mov eax, dword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000046b5ec: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x00000000004607b1: mov eax, dword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460e09: mov eax, dword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000047085f: mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048d146: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000044a8e6: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x00000000004122c8: mov eax, dword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000401213: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004122cd: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000045321c: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000449cda: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000044994a: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000040dfed: mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000486c3f: mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048abb6: mov eax, dword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8ba: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000047fca8: mov eax, dword ptr fs:[rax]; ret; 
0x000000000041b1b0: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040dc99: mov eax, eax; jne 0xdcbc; add rsp, 0x118; ret; 
0x0000000000475553: mov eax, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000449b7a: mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004499f9: mov eax, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449929: mov eax, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000042300f: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004482e2: mov eax, eax; ret; 
0x0000000000474ac4: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000004490f2: mov eax, eax; syscall; 
0x0000000000473901: mov eax, eax; vzeroupper; ret; 
0x000000000044a789: mov eax, ebp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x00000000004234c2: mov eax, ebp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000410a5b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004857bd: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000044b2c4: mov eax, ebp; pop rbx; pop rbp; jmp rax; 
0x000000000044a772: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000410b73: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041062e: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004124f2: mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041301d: mov eax, ebp; syscall; 
0x00000000004843f3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000044bf25: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x0000000000482583: mov eax, ebx; jne 0x825a5; add rsp, 0x110; pop rbx; ret; 
0x0000000000488427: mov eax, ebx; jne 0x8843c; add rsp, 0x40; pop rbx; ret; 
0x000000000048850e: mov eax, ebx; jne 0x88524; add rsp, 0x50; pop rbx; ret; 
0x000000000048d3d6: mov eax, ebx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cd20: mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000410d58: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414f95: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a500: mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000041330b: mov eax, ebx; pop rbx; ret; 
0x00000000004842b7: mov eax, ecx; adc eax, eax; ret; 
0x000000000047e71f: mov eax, ecx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000465795: mov eax, ecx; ret; 
0x00000000004481f8: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000448243: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000040dc4b: mov eax, ecx; syscall; 
0x0000000000413203: mov eax, edi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b445: mov eax, edi; pop rbp; pop r12; ret; 
0x0000000000413234: mov eax, edi; ret; 
0x000000000041b045: mov eax, edx; add rsp, 8; ret; 
0x000000000047349c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000410ec0: mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x000000000046585e: mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000410f69: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000410901: mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004482e6: mov eax, edx; pop rbx; ret; 
0x000000000041b051: mov eax, edx; ret; 
0x000000000040130a: mov eax, edx; syscall; 
0x0000000000449694: mov eax, esi; ja 0x496c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004496e3: mov eax, esi; ja 0x49718; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004753f4: mov eax, esi; ja 0x75428; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004103d2: mov eax, esi; jne 0x103df; add rsp, 0xd0; pop rbx; ret; 
0x0000000000410561: mov eax, esi; jne 0x1056f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000047e671: mov eax, esi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000482667: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004144da: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046f4b4: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041e5ed: mov eax, esi; pop rbx; ret; 
0x000000000041e621: mov eax, esi; ret; 
0x00000000004490e2: mov eax, esi; syscall; 
0x000000000048cdf0: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046e5e8: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044bf24: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bf30; ret; 
0x00000000004234c1: mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000041301c: mov eax, r13d; syscall; 
0x000000000040dc98: mov eax, r8d; jne 0xdcbc; add rsp, 0x118; ret; 
0x00000000004490f1: mov eax, r8d; syscall; 
0x0000000000465794: mov eax, r9d; ret; 
0x0000000000412dbe: mov eax, r9d; syscall; 
0x000000000042d0e4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049433d: mov ebp, 0xb070fff9; stc; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x000000000048f8fb: mov ebp, 0xb60f0001; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000049f244: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004a619d: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000041741a: mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x000000000042d0e9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004730c8: mov ebp, 0xf80148c0; ret; 
0x000000000047334c: mov ebp, 0xf80148c6; ret; 
0x00000000004a7906: mov ebp, 0xfb67d10d; ret; 
0x0000000000469b08: mov ebp, 0xfffff730; call qword ptr [rbx + 0x38]; 
0x0000000000468ade: mov ebp, 0xfffff730; call rax; 
0x00000000004697d3: mov ebp, 0xfffff730; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000468b7c: mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045d815: mov ebp, 0xfffff758; call qword ptr [rbx + 0x38]; 
0x000000000045ddbf: mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000045d5cc: mov ebp, 0xfffff758; call rax; 
0x000000000045d662: mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000046bad9: mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000046b0bc: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f861: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045f5f5: mov ebp, 0xfffffb48; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047de94: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x00000000004649b5: mov ebp, 0xffffff40; call rax; 
0x0000000000413017: mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000048d419: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d597: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004697c8: mov ebp, dword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000048d5a3: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000412730: mov ebp, dword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004004cb: mov ebp, dword ptr [rbx]; add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000411999: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000410c16: mov ebp, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048266d: mov ebp, ecx; nop; jmp rdx; 
0x00000000004b5971: mov ebp, edi; jmp qword ptr [rbx]; 
0x000000000046b783: mov ebx, 0x89000025; ret 0x349; 
0x000000000044db6d: mov ebx, 0x890026e2; ret 0xff25; 
0x000000000040486f: mov ebx, 0x8949ffff; ret 0x149; 
0x0000000000404a79: mov ebx, 0x8bffffb9; mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000404897: mov ebx, 0x8c8bffff; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000044bec4: mov ebx, 0xafb8341; je 0x4becc; ret; 
0x0000000000494275: mov ebx, 0xbd00fff9; stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x00000000004a619b: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x000000000042d269: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040e2f4: mov ebx, 0xfffd29e9; jmp qword ptr [rsi + 0xf]; 
0x000000000046b0b5: mov ebx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000047c589: mov ebx, dword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f3d1: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3b5: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000481b0d: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9b: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000041337f: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x0000000000482541: mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000471218: mov ebx, edi; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000045a6a6: mov ebx, edi; test rax, rax; je 0x5a6af; call rax; 
0x0000000000475240: mov ebx, esi; sub rsp, 8; syscall; 
0x000000000047f9fd: mov ebx, esp; mov rsi, rbx; syscall; 
0x000000000049052b: mov ecx, 0x22; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000424eda: mov ecx, 0x250001; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000040dc46: mov ecx, 0x27; mov eax, ecx; syscall; 
0x00000000004169e9: mov ecx, 0x48000000; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004754fc: mov ecx, 0x48000000; add esp, 0x78; ret; 
0x0000000000431963: mov ecx, 0x4900062a; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba3: mov ecx, 0x49000656; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000404a4c: mov ecx, 0x8949ffff; ret 0x149; 
0x0000000000404a7a: mov ecx, 0x8c8bffff; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000049ef94: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004a6199: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000475760: mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000045af1e: mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000048cfd2: mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000042d369: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000423524: mov ecx, 0xffff31e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000449621: mov ecx, 0xffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000045ac84: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045f85a: mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046b62a: mov ecx, 1; jmp rax; 
0x000000000044a651: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000411121: mov ecx, dword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000470322: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000475081: mov ecx, dword ptr [rbp + rdi*8 - 1]; nop dword ptr [rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000412138: mov ecx, dword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041111d: mov ecx, dword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000043864f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043863c: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043862a: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004717cb: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000043ae43: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000444a24: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a44: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444394: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444384: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444aa5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444415: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444355: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444b08: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444458: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b28: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444478: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444ae9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444439: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444a65: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a04: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444374: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444a85: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044706f: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044705f: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042f775: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f791: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f955: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f971: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb35: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb51: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd25: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd41: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff25: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff41: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430125: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430141: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f985: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044640f: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x46620; xor eax, eax; ret; 
0x000000000042d156: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x000000000042fd63: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff63: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430163: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042cef1: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d90f; xor eax, eax; ret; 
0x0000000000434e24: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434da4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434d24: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434ea4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042cecb: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x0000000000434c95: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c05: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b75: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042d44d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x000000000042f595: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f5b1: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004448a0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000444280: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004448f1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442c1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004357d3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435763: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004356f3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004448b0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444290: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000444901: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004448d0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004442a0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000444921: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004442e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444941: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004442f1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000435615: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004355a5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435535: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004354c5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435455: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353e5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435375: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444961: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444301: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444981: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444311: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004449a1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444321: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004358b5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444881: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444261: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000452c58: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004515bf: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f9c: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045320d: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000481b17: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa5: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000451a8f: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000481d98: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821c8: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000481ef9: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x000000000043863b: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044e89b: mov ecx, ebp; call rbx; 
0x000000000048cdf3: mov ecx, ebp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473f63: mov ecx, ebp; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000471874: mov ecx, edi; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a50: mov ecx, edi; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004740b5: mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000447d01: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004179f0: mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000447042: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000417a2a: mov ecx, edx; xor edx, edx; jmp rax; 
0x00000000004740c5: mov ecx, esi; call rbx; 
0x000000000048807a: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x000000000048d3d9: mov ecx, esp; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cd23: mov ecx, esp; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000044e88e: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004a9551: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045ee1a: mov edi, 0x440f48c0; ret 0xae9; 
0x0000000000400e5d: mov edi, 0x48002baf; add esp, 0x88; pop rbx; ret; 
0x0000000000400b1c: mov edi, 0x4ab768; call 0x8f610; mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x0000000000400aac: mov edi, 0x6babd0; jmp rax; 
0x00000000004845db: mov edi, 0x894cffff; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004a8dbc: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000049427d: mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x000000000042cf19: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000449774: mov edi, 0xffffff9c; syscall; 
0x000000000048cd2c: mov edi, 1; call rax; 
0x000000000048da9c: mov edi, 1; jmp rax; 
0x0000000000449380: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040dc7b: mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040ea84: mov edi, dword ptr [rax + 0x20]; call rdx; 
0x000000000047de93: mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000045f5f4: mov edi, dword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000413016: mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045d814: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045ddbe: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045d5cb: mov edi, dword ptr [rbp - 0x8a8]; call rax; 
0x000000000045d661: mov edi, dword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000469b07: mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000468add: mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x00000000004697d2: mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000468b7b: mov edi, dword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004649b4: mov edi, dword ptr [rbp - 0xc0]; call rax; 
0x000000000048d421: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x000000000048d59f: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000040dfe9: mov edi, dword ptr [rbp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047c77f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000482664: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000488461: mov edi, dword ptr [rdi]; call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048838d: mov edi, dword ptr [rdi]; call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004789f9: mov edi, dword ptr [rdx - 8]; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004a7bc6: mov edi, dword ptr [rdx]; ret; 
0x000000000047555e: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000482544: mov edi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000450eb0: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000451a99: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x00000000004515c9: mov edi, dword ptr [rsp + 0x38]; call rbx; 
0x00000000004512d5: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455fa6: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x0000000000453217: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449b81: mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040120e: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004175fb: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000417a21: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000044a8e1: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000416f06: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000473c52: mov edi, dword ptr [rsp]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000400c37: mov edi, eax; call 0xb6d; leave; ret; 
0x00000000004122d6: mov edi, eax; call qword ptr [rax + 8]; 
0x0000000000423e74: mov edi, eax; call rcx; 
0x000000000040dc50: mov edi, eax; mov eax, 0xba; syscall; 
0x000000000047544a: mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000449699: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004496e7: mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004753f9: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000046fe51: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x0000000000489a32: mov edi, ebp; call qword ptr [rax]; 
0x0000000000411096: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x0000000000489b0e: mov edi, ebp; call qword ptr [rcx]; 
0x00000000004231f6: mov edi, ebp; call rax; 
0x0000000000473f71: mov edi, ebp; call rbx; 
0x000000000040e10e: mov edi, ebp; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044a5fa: mov edi, ebp; mov eax, 9; syscall; 
0x0000000000412dbc: mov edi, ebp; mov eax, r9d; syscall; 
0x00000000004740c2: mov edi, ebp; mov r9, r14; call rbx; 
0x000000000040e079: mov edi, ebp; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000412132: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411117: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000040e988: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000044b2bd: mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000414778: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x00000000004140f4: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x00000000004148ba: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x0000000000416dec: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x000000000041745d: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004181ed: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x00000000004108a8: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000410fb6: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x00000000004143ef: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x0000000000413be6: mov edi, ebx; call rax; 
0x000000000044902f: mov edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000048fe73: mov edi, ebx; jne 0x8fe60; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000458427: mov edi, ebx; mov dword ptr [rbp - 0x48], r8d; call 0x4d500; mov rdi, r14; call rbx; 
0x00000000004499fe: mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449cbc: mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000412096: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416f9d: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x00000000004706df: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000044992e: mov edi, ebx; xor eax, eax; syscall; 
0x000000000047bbd9: mov edi, ecx; call 0x4a6d0; test eax, eax; js 0x7bbf2; pop rbx; ret; 
0x000000000046c504: mov edi, edi; call qword ptr [rax + 0x38]; 
0x000000000046b539: mov edi, edi; call qword ptr [rcx + 0x38]; 
0x0000000000411b13: mov edi, edi; call rax; 
0x000000000044f18b: mov edi, edi; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046b32b: mov edi, edi; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004950a9: mov edi, edx; jmp qword ptr [rax]; 
0x0000000000484731: mov edi, edx; mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x00000000004490e0: mov edi, edx; mov eax, esi; syscall; 
0x00000000004490ef: mov edi, edx; mov eax, r8d; syscall; 
0x00000000004586fb: mov edi, edx; mov qword ptr [rbp - 0x98], rdx; call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000047349f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000045fa67: mov edi, esi; call qword ptr [rax + 0x38]; 
0x0000000000458433: mov edi, esi; call rbx; 
0x0000000000458711: mov edi, esi; call rdx; 
0x00000000004600ef: mov edi, esi; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f17f: mov edi, esi; mov qword ptr [rbp - 0x70], rsi; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045fb43: mov edi, esi; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045f5fe: mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000471880: mov edi, esp; call rbx; 
0x00000000004174f6: mov edi, esp; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000449de9: mov edi, esp; mov eax, 0x4f; syscall; 
0x0000000000412dbb: mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004481e6: mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000004240b9: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f899: mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000440226: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000046fe48: mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000413386: mov edx, 0x130; pop rbx; ret; 
0x00000000004005a8: mov edx, 0x2b; add byte ptr [rax], al; pop rax; ret; 
0x00000000004012ff: mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000457c61: mov edx, 0x48000000; add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000004730c2: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x0000000000460762: mov edx, 0x4800255f; mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x000000000042ca62: mov edx, 0x49000676; movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000044bd36: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000040eca3: mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040dcd4: mov edx, 0xa; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x00000000004942d5: mov edx, 0xbc90fff9; stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x000000000044a786: mov edx, 0xe889485b; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000040dc53: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000042d2e9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048bc61: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x00000000004496b1: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449961: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000045ac8f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450c87: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004658a7: mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000044d4bf: mov edx, 1; je 0x4d4d0; mov dword ptr [rip + 0x26b5ec], edx; pop rbx; ret; 
0x000000000044be8d: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000047e5fc: mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047b510: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000412db3: mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045b081: mov edx, 8; mov eax, 0xe; syscall; 
0x000000000045af24: mov edx, 8; mov eax, ecx; syscall; 
0x0000000000418c30: mov edx, dword ptr [rax + 8]; jne 0x18c40; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000047067c: mov edx, dword ptr [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004600f9: mov edx, dword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000045870a: mov edx, dword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048cdf6: mov edx, dword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000484db9: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000413bdb: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000043eb0f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d23d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044c076: mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000416d67: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045d65d: mov edx, dword ptr [rdi + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000484dcd: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411b07: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000484e34: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004852d4: mov edx, dword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000444455: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444475: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000468b77: mov edx, dword ptr [rsi + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004358b1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004357d0: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435611: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435760: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355a1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004448d2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004442a2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004356f0: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435531: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004448b3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444293: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004354c1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444964: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444304: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435451: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444984: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444314: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004353e1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444923: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004442e3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000004449a4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444324: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435371: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444943: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004442f3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000444904: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000434e21: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434da1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434d21: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c91: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c01: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b71: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f7a1: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f981: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fb60: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f598: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f778: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f958: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb38: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f794: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f974: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb54: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f5b4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd60: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042ff60: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430160: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f3d5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd29: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff29: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430129: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3b9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd45: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff45: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430145: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3f1: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434ea1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000444890: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000435840: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004448e1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435681: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000444871: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000444251: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000482549: mov edx, dword ptr [rsp + 0x10]; call rdx; 
0x000000000040dfe1: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004740b8: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040e071: mov edx, dword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000475555: mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000481b12: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa0: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004512cb: mov edx, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004144f3: mov edx, dword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000048c483: mov edx, dword ptr [rsp + rax*8 + 0x30]; ja 0x8c069; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000048cd29: mov edx, dword ptr [rsp]; mov edi, 1; call rax; 
0x000000000048d3dc: mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000449b76: mov edx, dword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000044825c: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000040dc5c: mov edx, eax; mov eax, 0xea; syscall; 
0x0000000000449cbe: mov edx, eax; mov eax, 3; syscall; 
0x00000000004148b0: mov edx, eax; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000047544d: mov edx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004697d9: mov edx, ebp; call qword ptr [rbx + 0x38]; 
0x0000000000489ab0: mov edx, ebp; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045ddb4: mov edx, ebp; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044e893: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000489a2d: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489b09: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489913: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000469b01: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004649ae: mov edx, ebp; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045d80e: mov edx, ebp; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045df89: mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000475450: mov edx, ecx; mov eax, 0x106; syscall; 
0x000000000044bdb1: mov edx, ecx; mov eax, 0x19; syscall; 
0x000000000044bdb1: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044a64f: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000045fa4f: mov edx, ecx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000413011: mov edx, ecx; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045f604: mov edx, edi; call qword ptr [rax + 0x38]; 
0x00000000004140ee: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000447d08: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000046ae75: mov edx, esi; call qword ptr [rax + 0x38]; 
0x0000000000473f69: mov edx, esi; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000044976a: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044a5f1: mov edx, esi; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000046c4fa: mov edx, esi; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046b52c: mov edx, esi; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c677: mov edx, esi; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004497f2: mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044a461: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004756bd: mov edx, esp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004499f6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449926: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004122c5: mov edx, esp; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000044a5f4: mov edx, esp; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000044a5f3: mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000040dc5b: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000004532f2: mov es, word ptr [rax + rax]; add bh, dh; ret 0; 
0x00000000004b4555: mov es, word ptr [rax]; add byte ptr [rax - 0x17], cl; cld; jmp qword ptr [rcx]; 
0x0000000000449b42: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000450bb1: mov esi, 0x4889194a; movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450bbc: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004756bf: mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004a8bba: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000494e60: mov esi, 0x64fffa28; xor dl, bh; jmp rsp; 
0x000000000044be5b: mov esi, 0x80; cmp eax, edx; jne 0x4be6c; nop; mov eax, 0xca; syscall; 
0x000000000044bf48: mov esi, 0x80; syscall; 
0x000000000047b515: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044be88: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000044fd12: mov esi, 0x83480147; ret; 
0x0000000000461931: mov esi, 0x8900000b; ret 0x349; 
0x000000000046b235: mov esi, 0x8900002b; ret 0x349; 
0x000000000048cdf9: mov esi, 0xa; mov edi, 1; call rax; 
0x000000000049431d: mov esi, 0xb0b0fff9; stc; push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x00000000004942dd: mov esi, 0xb120fff9; stc; jmp rax; 
0x00000000004942bd: mov esi, 0xb150fff9; stc; call qword ptr [rax]; 
0x000000000049429d: mov esi, 0xb170fff9; stc; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x0000000000450bb8: mov esi, 0xbe0f1a4a; push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004a619e: mov esi, 0xc2c1c0bf; ret; 
0x0000000000494561: mov esi, 0xc310fff9; stc; jmp qword ptr [rax - 0x3c]; 
0x000000000046578d: mov esi, 0xc7394406; ja 0x65770; mov eax, r9d; ret; 
0x0000000000484b85: mov esi, 0xceebfff9; nop word ptr [rax + rax]; pop rbx; ret; 
0x0000000000448174: mov esi, 0xf000000; lahf; ret 0xea81; 
0x000000000042cfe9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a6a26: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000047132c: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000414772: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416de6: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418283: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004607b4: mov esi, 1; jmp rax; 
0x000000000048d3df: mov esi, 1; mov edi, 1; call rax; 
0x000000000046e84c: mov esi, 1; mov rdi, rbx; call rax; 
0x000000000044a778: mov esi, 2; jmp rax; 
0x000000000044a78b: mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000449b7c: mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040e985: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004591a4: mov esi, dword ptr [rax + rsi*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x000000000048d41d: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d59b: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000045fa60: mov esi, dword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c4fd: mov esi, dword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x0000000000460100: mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f18e: mov esi, dword ptr [rbp - 0x70]; call rsi; 
0x000000000045ddb7: mov esi, dword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004010f6: mov esi, dword ptr [rbx]; jne 0x1310; call qword ptr [rbx + 0x10]; 
0x000000000044a8de: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045d659: mov esi, dword ptr [rdi + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000048845d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000488389: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000040dfe6: mov esi, dword ptr [rdi]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047f208: mov esi, dword ptr [rip + 0x23d1a2]; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000043864c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000447073: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000043863a: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447064: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000438627: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047555a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040120a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004175f6: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e896: mov esi, dword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004740bd: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041fcbe: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004202e9: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000450eab: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004231f1: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000451a94: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004515c4: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004512d0: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455fa1: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000453212: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000420bb1: mov esi, dword ptr [rsp + 0x68]; call rax; 
0x0000000000491fa9: mov esi, dword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000004916b9: mov esi, dword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x0000000000416f01: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040dc59: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x000000000046b52f: mov esi, eax; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c67a: mov esi, eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004499fc: mov esi, ebp; mov edi, ebx; mov eax, 1; syscall; 
0x000000000044992c: mov esi, ebp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473c4f: mov esi, ebp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000045df8c: mov esi, ebp; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040e10b: mov esi, ebp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000423e71: mov esi, ebp; mov rdi, rax; call rcx; 
0x000000000044a5f7: mov esi, ebp; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004148b7: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004143ec: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000422822: mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000040ea74: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000047d1eb: mov esi, ebp; xor eax, eax; call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000412db9: mov esi, ebx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045fb40: mov esi, ebx; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047fa00: mov esi, ebx; syscall; 
0x000000000045af1c: mov esi, ecx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000040dc79: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046ae67: mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000045d811: mov esi, ecx; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046b328: mov esi, ecx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000044a465: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000449772: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x000000000048da9a: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000045d5c8: mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000040e076: mov esi, edi; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004649ab: mov esi, edi; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000044969c: mov esi, edx; mov eax, 4; syscall; 
0x00000000004496ea: mov esi, edx; mov eax, 5; syscall; 
0x00000000004753fc: mov esi, edx; mov eax, 6; syscall; 
0x0000000000468ad3: mov esi, esi; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004649b1: mov esi, esi; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046fe4e: mov esi, esi; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004140f1: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000044937e: mov esi, esp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000413014: mov esi, esp; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000489a30: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489b0c: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489916: mov esi, esp; mov edi, ebp; call rax; 
0x0000000000469b04: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004697cf: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045f5fb: mov esi, esp; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004706dc: mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004706db: mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000444785: mov esp, 0x1d8d4cd2; adc cl, byte ptr [rdx]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447aa: mov esp, 0x1d8d4cd2; in eax, dx; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444148: mov esp, 0x1d8d4cd2; iretd; syscall; 
0x000000000044418a: mov esp, 0x1d8d4cd2; lea ecx, [rdi]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447e2: mov esp, 0x1d8d4cd2; mov ch, 9; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444165: mov esp, 0x1d8d4cd2; mov dl, 0xf; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441c2: mov esp, 0x1d8d4cd2; push rbp; syscall; 
0x000000000040d39b: mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004200e3: mov esp, 0x29; add byte ptr [rax], al; ret; 
0x000000000041e850: mov esp, 0x31000756; call qword ptr [rax + 0x31]; 
0x000000000042b9a1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b9d1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b9c1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004407c2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004407e2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440820: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004407a2: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000042d1e4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004948a0: mov esp, 0x62fffa02; or bh, dl; jmp rdx; 
0x0000000000418292: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000004200bd: mov esp, 0x8d480029; add eax, 0xffffeb59; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x0000000000444d90: mov esp, 0xa8000000; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000440224: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004a2c38: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000494319: mov esp, 0xbe20fff9; stc; push qword ptr [rax + 0x70fff9b0]; mov dl, 0xf9; call qword ptr [rax - 0x4c]; 
0x00000000004942d9: mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x00000000004942b9: mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; 
0x00000000004942b9: mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; stc; call qword ptr [rax]; 
0x0000000000474892: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d02: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae2: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x0000000000440ce2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000472aea: mov esp, 0xc22948c0; jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d51: mov esp, 0xc22948c0; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d61: mov esp, 0xc22948c0; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d71: mov esp, 0xc22948c0; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d81: mov esp, 0xc22948c0; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472fa2: mov esp, 0xc23948c0; jbe 0x73000; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472fc2: mov esp, 0xc23948c0; jbe 0x73000; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000472fe2: mov esp, 0xc23948c0; jbe 0x73000; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000472f92: mov esp, 0xc23948c0; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x0000000000473942: mov esp, 0xc63948c0; jbe 0x739c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004408b5: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000440bc3: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004743a8: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000429072: mov esp, 0xd32949d2; jbe 0x29084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a7d2: mov esp, 0xd32949d2; jbe 0x2a7e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b7b2: mov esp, 0xd32949d2; jbe 0x2b7c4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046f654: mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000048d0a2: mov esp, 0xd837; add byte ptr [rax], al; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x0000000000490002: mov esp, 0xe1750022; pop rbx; ret; 
0x000000000042d1e9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b83b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x0000000000474797: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c17: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba27: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000042b9b1: mov esp, 0xf80148c0; ret; 
0x0000000000474852: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd2: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x000000000042bac2: mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000048d415: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048266a: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x000000000048d5a7: mov esp, ecx; ret; 
0x0000000000449de6: mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000452a6d: mov fs, word ptr [rbx]; add eax, 0x29480000; ret 0x349; 
0x0000000000456fed: mov gs, esi; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000048ad13: mov qword ptr [r10], r8; ret; 
0x00000000004703ad: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000048453a: mov qword ptr [r8], rax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004844f8: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000041b041: mov qword ptr [r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000438630: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044c080: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000470328: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470368: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000471367: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000044c0e6: mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c100: mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000471363: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000047125d: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047032c: mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004713e9: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000004713e1: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000041a5bf: mov qword ptr [rax + 8], rbx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000047031d: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470361: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044c084: mov qword ptr [rax + 8], rdx; ret; 
0x0000000000484e2c: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484ddc: mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000484d2c: mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000047085c: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470325: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470365: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000484dd0: mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048d0c1: mov qword ptr [rax], rdx; ret; 
0x000000000048d26f: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000046c20d: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bce0: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c03a: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c07f: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfa6: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c260: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b614: mov qword ptr [rbp - 0x4b8], rdx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046ae69: mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046b0c1: mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f866: mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045fb35: mov qword ptr [rbp - 0x4d8], rcx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046b0ba: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000045f85f: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045fa51: mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046b531: mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000480f9e: mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000044f181: mov qword ptr [rbp - 0x70], rsi; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004586fd: mov qword ptr [rbp - 0x98], rdx; call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000004850af: mov qword ptr [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000471595: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418b28: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472194: mov qword ptr [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458891: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000413306: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481c2d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004136ee: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f93d: mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f939: mov qword ptr [rbx + 0x18], r12; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004132fe: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481b62: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488394: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000488468: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004589be: mov qword ptr [rbx + 0x20], rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417335: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004173ac: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416e90: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000471599: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418b2c: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041328a: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041460f: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048ccaa: mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041337d: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000480dc4: mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000471eeb: mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412daf: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000413302: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000004136ea: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f428: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417224: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045919f: mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x0000000000459294: mov qword ptr [rbx + rbp*8], rax; lea rax, [rip + 0x25f9a1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x000000000044f612: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dbd: mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047fc7f: mov qword ptr [rbx], 0; or dword ptr [rip + 0x23a55b], 1; pop rbx; ret; 
0x0000000000471ee8: mov qword ptr [rbx], r12; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000004855a2: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048a308: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000417e34: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417e2c: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000462947: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045ac8b: mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000482e8e: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000416d9a: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000444aac: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444acc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044441c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443fc: mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444b0f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044445f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b2f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044447f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444af0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444440: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000416d72: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416d9e: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047b5c6: mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000416d6e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416da2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048d100: mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417b46: mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417b51: mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000444a6c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443bc: mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a8c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443dc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000435617: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004355a7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435537: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004354c7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044496a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000435457: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044430a: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044498a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004353e7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044431a: mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004449aa: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000435377: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044432a: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004843ef: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004842b3: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000482e87: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000484642: mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482e13: mov qword ptr [rdi + 8], r9; ret; 
0x00000000004845de: mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004845fd: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000416d76: mov qword ptr [rdi + 8], rax; ret; 
0x00000000004833dc: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000447dda: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x0000000000447f59: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000447066: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000048d0ab: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000042f284: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2c2: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000482d7e: mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042f437: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f533: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47f: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f607: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e7: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9d7: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba8: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda8: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa8: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f280: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2be: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f433: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f52f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47b: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f603: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e3: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9d3: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba4: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda4: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa4: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27c: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2ba: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f42f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f52b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f477: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f5ff: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7df: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9cf: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fba0: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fda0: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffa0: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f278: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2b6: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f60b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434e27: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f7eb: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434da7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f9db: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d27: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fbac: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c98: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fdac: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434c08: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ffac: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b78: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000482d77: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d09: mov qword ptr [rdi - 8], r9; ret; 
0x000000000042f288: mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2c6: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f43b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f537: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f483: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ea7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000482d70: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482e80: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000468029: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000482d03: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482e0d: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048463d: mov qword ptr [rdi], r8; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482cd8: mov qword ptr [rdi], r9; ret; 
0x000000000047f377: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x00000000004448f6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000444926: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004442e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444946: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004442f6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000444967: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444307: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444987: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444317: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004449a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444327: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000444907: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043537b: mov qword ptr [rdi], rcx; ret; 
0x0000000000447f5e: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000004448e3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435683: mov qword ptr [rdi], rdx; ret; 
0x0000000000484485: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043862d: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044706b: mov qword ptr [rdi], rsi; ret; 
0x0000000000413384: mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000443e8a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000044267a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443eaa: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000044269a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443eca: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426ba: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d5a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425aa: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000443d03: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443e03: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442633: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443e23: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442643: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443e43: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442653: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443e63: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442663: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443e83: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442673: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ea3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442693: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443ec3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d53: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442553: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000484dbc: mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000418c07: mov qword ptr [rdx], rax; ret; 
0x0000000000490dac: mov qword ptr [rip + 0x22b201], 0; add rsp, 8; ret; 
0x0000000000490527: mov qword ptr [rip + 0x22b956], 0; add rsp, 8; ret; 
0x000000000048fffe: mov qword ptr [rip + 0x22bceb], rbx; jne 0x8ffe8; pop rbx; ret; 
0x00000000004848e7: mov qword ptr [rip + 0x23777a], rax; ret; 
0x00000000004848cc: mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x0000000000481a08: mov qword ptr [rip + 0x23a63d], 0; add rsp, 8; ret; 
0x000000000047f2d0: mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x000000000047f214: mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000044bd88: mov qword ptr [rip + 0x26e3e1], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004200d5: mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200c7: mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x0000000000419aae: mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a8e: mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419984: mov qword ptr [rip + 0x29febd], rax; ret; 
0x0000000000419914: mov qword ptr [rip + 0x29fedd], rax; ret; 
0x0000000000419904: mov qword ptr [rip + 0x29fef5], rax; ret; 
0x000000000041a9f1: mov qword ptr [rip + 0x2a1368], rax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041903b: mov qword ptr [rip + 0x2a2cd2], 0; ret; 
0x0000000000418fd1: mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x0000000000400e5a: mov qword ptr [rip + 0x2bafbf], rax; add rsp, 0x88; pop rbx; ret; 
0x00000000004005a4: mov qword ptr [rip + 0x2bbae9], 0; pop rax; ret; 
0x00000000004018a2: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000401896: mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004787e0: mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x00000000004119d2: mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f381: mov qword ptr [rsi], rax; ret; 
0x000000000045ac80: mov qword ptr [rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047e6c8: mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000040189a: mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041d349: mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041d406: mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047e430: mov qword ptr [rsp + 0x18], rax; call 0x7dd60; add rsp, 0xd8; ret; 
0x0000000000449c09: mov qword ptr [rsp + 0x18], rax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x0000000000449c13: mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x000000000041d344: mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004756b5: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000041d34e: mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041108e: mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000411b0d: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000489b04: mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489ab2: mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004148b2: mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000048a8b0: mov qword ptr [rsp], rax; call 0x8ac30; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000413be1: mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000041b040: mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045ac8a: mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ac95: mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ac7f: mov qword ptr fs:[rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000413289: mov qword ptr ss:[rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000447065: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000048c482: mov r10, qword ptr [rsp + rax*8 + 0x30]; ja 0x8c069; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000044bdb0: mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000044bdb0: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044a460: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000045b080: mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000045af23: mov r10d, 8; mov eax, ecx; syscall; 
0x000000000044a64e: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000044a5f0: mov r10d, r14d; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000047544c: mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000047c588: mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f3d0: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3b4: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000481b0c: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9a: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000482540: mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000046b0b4: mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24bd4d]; jmp rax; 
0x000000000048d414: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000449de5: mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000048d418: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d596: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004697c7: mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000048d41c: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d59a: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004010f5: mov r14, qword ptr [rbx]; jne 0x1310; call qword ptr [rbx + 0x10]; 
0x00000000004649aa: mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046ae66: mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000045f5f3: mov r15, qword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000048d420: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d59e: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000047c77e: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000482663: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004a9550: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000048ad10: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048ad28: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x00000000004122cc: mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000048cdef: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000048d3d5: mov r8, rbx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cd1f: mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000047e670: mov r8, rsi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e61b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000045842b: mov r8d, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000046bcad: mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004b4280: mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x0000000000475552: mov r8d, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000449b79: mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004499f8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449928: mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000411120: mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000452c57: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004515be: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f9b: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045320c: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000451a8e: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000044e89a: mov r9, r13; call rbx; 
0x00000000004740c4: mov r9, r14; call rbx; 
0x000000000049283c: mov r9b, 0xf7; ljmp [rbx - 0x50]; idiv edi; imul esi, dword ptr [rax - 0x4f940009], -9; call qword ptr [rbx]; 
0x000000000045acc0: mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000045ace0: mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045ad00: mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004496c8: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a620: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000040f3ca: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000004757a8: mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004135e5: mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004658a0: mov rax, -0x40; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000415f80: mov rax, -0x40; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000412538: mov rax, -0x40; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047fca0: mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045aca0: mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004181a0: mov rax, -1; ret; 
0x0000000000400404: mov rax, 0; test rax, rax; je 0x412; call rax; 
0x000000000045ae60: mov rax, 0xf; syscall; 
0x00000000004746e0: mov rax, 1; ret; 
0x00000000004746f0: mov rax, 2; ret; 
0x0000000000474700: mov rax, 3; ret; 
0x0000000000474710: mov rax, 4; ret; 
0x0000000000474720: mov rax, 5; ret; 
0x0000000000474730: mov rax, 6; ret; 
0x0000000000474740: mov rax, 7; ret; 
0x0000000000486c3e: mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047cb95: mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047121c: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000471325: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004707fa: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000412099: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040ea4c: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004120a0: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004649a6: mov rax, qword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004717f3: mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000048990b: mov rax, qword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000481a20: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000481a30: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000045d5b5: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045929f: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x592aa; call rax; 
0x000000000046b626: mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045acae: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000046021c: mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000045acab: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000048d052: mov rax, qword ptr [rax]; ret; 
0x0000000000416f94: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000417184: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000480f91: mov rax, qword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x23f7c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d1f4: mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c58f: mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000484204: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x000000000047c3b0: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c26d: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000416edc: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000416efd: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000484e28: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484dd8: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004136e6: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000484dc8: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004175c8: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004179e8: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000041208e: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040d30d: mov rax, qword ptr [rbx + rax*8]; ja 0xd995; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000044bd85: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x26e3e1], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443e86: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442676: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ea6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442696: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443ec6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d56: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000443d00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443e00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000442630: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443e20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442640: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443e40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442650: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443e60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442660: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443e80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442670: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ea0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442690: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443ec0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004426b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d50: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004425a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442550: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000045a6a1: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a6af; call rax; 
0x0000000000490c3c: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x00000000004198e0: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004717f0: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000416d6a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000418f60: mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d080: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d0d0: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048d110: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d170: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d160: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d120: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000048d0e0: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000419076: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x190a0; movzx eax, byte ptr [rax]; ret; 
0x000000000048da90: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0x8daa8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000460766: mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000048d0b7: mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000042d450: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x000000000042cec6: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x0000000000418c04: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000419ae0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd26], 1; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aa0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd66], 1; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a80: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419b00: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a228a], eax; ret; 
0x0000000000419980: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29febd], rax; ret; 
0x0000000000419910: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29fedd], rax; ret; 
0x0000000000419900: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29fef5], rax; ret; 
0x00000000004715c2: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047f895: mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048cca7: mov rax, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047f370: mov rax, qword ptr [rip + 0x239d79]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x000000000047f37a: mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x000000000047f309: mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000457b10: mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000044f5b0: mov rax, qword ptr [rip + 0x26d371]; ret; 
0x0000000000418f40: mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x000000000048dfc1: mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ae50: mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000048ae23: mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048ae40: mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000048dfe0: mov rax, qword ptr [rsi + 8]; ret; 
0x00000000004119ca: mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000046b5eb: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004607b0: mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460e08: mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000048d145: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000044a8e5: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004122c7: mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000401212: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045321b: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449949: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000040dfec: mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048abb5: mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a8b9: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000045acaa: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000046e5e7: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004857bc: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000044acad: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004144d9: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041b1af: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042300e: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000474ac3: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000473900: mov rax, r8; vzeroupper; ret; 
0x000000000044a788: mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000410a5a: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000044b2c3: mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a771: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000410b72: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414616: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d27a: mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000488426: mov rax, rbx; jne 0x8843c; add rsp, 0x40; pop rbx; ret; 
0x000000000048850d: mov rax, rbx; jne 0x88524; add rsp, 0x50; pop rbx; ret; 
0x0000000000415061: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414f94: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a4ff: mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041330a: mov rax, rbx; pop rbx; ret; 
0x000000000047e71e: mov rax, rcx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000047e6cb: mov rax, rcx; ret; 
0x0000000000413202: mov rax, rdi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b444: mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000413233: mov rax, rdi; ret; 
0x000000000041b044: mov rax, rdx; add rsp, 8; ret; 
0x000000000047518a: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041a9fc: mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004482e5: mov rax, rdx; pop rbx; ret; 
0x000000000041b050: mov rax, rdx; ret; 
0x0000000000449693: mov rax, rsi; ja 0x496c8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004753f3: mov rax, rsi; ja 0x75428; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000041e5ec: mov rax, rsi; pop rbx; ret; 
0x000000000041e620: mov rax, rsi; ret; 
0x0000000000411998: mov rbp, qword ptr [r15 + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048d5a2: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000041272f: mov rbp, qword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048266c: mov rbp, r9; nop; jmp rdx; 
0x0000000000471217: mov rbx, rdi; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000045a6a5: mov rbx, rdi; test rax, rax; je 0x5a6af; call rax; 
0x000000000047523f: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047f9fc: mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000045ac83: mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000449620: mov rcx, -0x40; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000470321: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000412137: mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041111c: mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000438629: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000444aa4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444414: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444a64: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a84: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044705e: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042f774: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f790: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f954: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f970: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb34: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb50: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fd24: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd40: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff24: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff40: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430124: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430140: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ceca: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x0000000000434c94: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c04: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b74: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042d44c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d903; xor eax, eax; ret; 
0x000000000042f594: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f5b0: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004448f0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442c0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000444900: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442d0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000444920: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004442e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444940: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004442f0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000435614: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004355a4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435534: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004354c4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435454: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353e4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435374: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444960: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444300: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444980: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444310: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004449a0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444320: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000481b16: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa4: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000481d97: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821c7: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000481ef8: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x0000000000438628: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048d3d8: mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cd22: mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000044e88d: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000473f62: mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000471873: mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a4f: mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004740b4: mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000048cdf2: mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000447d00: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447041: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000488079: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x0000000000473c51: mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000040dfe8: mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040ea83: mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000045d813: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045ddbd: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045d5ca: mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045d660: mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000469b06: mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000468adc: mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004697d1: mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000468b7a: mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004649b3: mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000488460: mov rdi, qword ptr [rdi]; call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048838c: mov rdi, qword ptr [rdi]; call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000482543: mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000450eaf: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000451a98: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004515c8: mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004512d4: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455fa5: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000453216: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004175fa: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000417a20: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000044a8e0: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000416f05: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000047187f: mov rdi, r12; call rbx; 
0x00000000004174f5: mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000449de8: mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000491fb0: mov rdi, r13; call rax; 
0x000000000040e10d: mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040e078: mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000045fa66: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000458432: mov rdi, r14; call rbx; 
0x0000000000458710: mov rdi, r14; call rdx; 
0x00000000004600ee: mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000045fb42: mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045f5fd: mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046c503: mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046b538: mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000411b12: mov rdi, r15; call rax; 
0x000000000044f18a: mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046b32a: mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004122d5: mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000423e73: mov rdi, rax; call rcx; 
0x000000000040dc4f: mov rdi, rax; mov eax, 0xba; syscall; 
0x0000000000449698: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004753f8: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000046fe50: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000411095: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004231f5: mov rdi, rbp; call rax; 
0x0000000000473f70: mov rdi, rbp; call rbx; 
0x000000000044a5f9: mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004740c1: mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000412131: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411116: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000044b2bc: mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000414777: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004140f3: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004148b9: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000416deb: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041745c: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181ec: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004108a7: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000410fb5: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004143ee: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000413be5: mov rdi, rbx; call rax; 
0x000000000048fe72: mov rdi, rbx; jne 0x8fe60; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000458426: mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x4d500; mov rdi, r14; call rbx; 
0x0000000000412095: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416f9c: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004706de: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000047bbd8: mov rdi, rcx; call 0x4a6d0; test eax, eax; js 0x7bbf2; pop rbx; ret; 
0x0000000000484730: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x00000000004586fa: mov rdi, rdx; mov qword ptr [rbp - 0x98], rdx; call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000047349e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044f17e: mov rdi, rsi; mov qword ptr [rbp - 0x70], rsi; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045ac8e: mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004496b0: mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449960: mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000048cd28: mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000048d3db: mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000468b76: mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045d65c: mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000411b06: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000418c2f: mov rdx, qword ptr [rax + 8]; jne 0x18c40; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004600f8: mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000458709: mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048cdf5: mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000484db8: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000413bda: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000044c075: mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000416d66: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000484dcc: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484e33: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004852d3: mov rdx, qword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000444454: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444474: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000435610: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004355a0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435530: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004354c0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444963: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444303: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435450: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444983: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000444313: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004353e0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004449a3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444323: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435370: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434e20: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434da0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434d20: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c90: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c00: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434b70: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f3d4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd28: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff28: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430128: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3b8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd44: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff44: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430144: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3f0: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434ea0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004448e0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435680: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000482548: mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000040dfe0: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004740b7: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040e070: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000481b11: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9f: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004512ca: mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004144f2: mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000449b75: mov rdx, qword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004499f5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449925: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004122c4: mov rdx, r12; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004697d8: mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000489aaf: mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045ddb3: mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000489a2c: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489b08: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489912: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000469b00: mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004649ad: mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045d80d: mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046ae74: mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000473f68: mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000046c4f9: mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046b52b: mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c676: mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000045f603: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004140ed: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004148af: mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413010: mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000044e892: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000045df88: mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000047544f: mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000045fa4e: mov rdx, rcx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000447d07: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004756bc: mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000045d658: mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000040dfe5: mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040e984: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004591a3: mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x000000000045fa5f: mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c4fc: mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000004600ff: mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f18d: mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045ddb6: mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044a8dd: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000048845c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a310; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000488388: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a610; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000047f207: mov rsi, qword ptr [rip + 0x23d1a2]; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x0000000000447063: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000438626: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000475559: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000401209: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004175f5: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e895: mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004740bc: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041fcbd: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004202e8: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000450eaa: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004231f0: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000451a93: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004515c3: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004512cf: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455fa0: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000453211: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000420bb0: mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000491fa8: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000004916b8: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x000000000045fb3f: mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000413013: mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000489a2f: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489b0b: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489915: mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000469b03: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004697ce: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045f5fa: mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045df8b: mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044a5f6: mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004148b6: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004143eb: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000422821: mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000047d1ea: mov rsi, r13; xor eax, eax; call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000468ad2: mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004649b0: mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046fe4d: mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004140f0: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000045d5c7: mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000040e075: mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000046b52e: mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c679: mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000040dc78: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000045d810: mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004499fb: mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x000000000044992b: mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473c4e: mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000040e10a: mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000423e70: mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000412db8: mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000047f9ff: mov rsi, rbx; syscall; 
0x000000000045af1b: mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000046b327: mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000449771: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000048da99: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000044969b: mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004496e9: mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004753fb: mov rsi, rdx; mov eax, 6; syscall; 
0x000000000044937d: mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000482669: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048d5a6: mov rsp, rcx; ret; 
0x000000000043864b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000046c116: mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x0000000000438655: mov word ptr [r9 - 2], cx; ret; 
0x00000000004aca80: mov word ptr [rbx + rax*4], es; add eax, 0x2c; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x0000000000420b2b: mov word ptr [rcx], gs; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004449ec: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044435c: mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444af4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444444: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004358b7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004448b8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444298: mov word ptr [rdi + 4], dx; ret; 
0x000000000044490a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004442da: mov word ptr [rdi + 8], dx; ret; 
0x0000000000447dea: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x0000000000447f6f: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000447084: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000042f98c: mov word ptr [rdi - 2], cx; ret; 
0x000000000042f7a4: mov word ptr [rdi - 2], dx; ret; 
0x000000000042f988: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000444883: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444263: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000446dc2: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004358bb: mov word ptr [rdi], cx; ret; 
0x0000000000447f74: mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000444873: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000435923: mov word ptr [rdi], dx; ret; 
0x0000000000438652: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000447089: mov word ptr [rdi], si; ret; 
0x0000000000443dd8: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000442618: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443d83: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443d93: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004425e3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004425d3: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000047c08a: mov word ptr [rdx], es; add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x0000000000446dc5: mov word ptr [rsi - 2], cx; ret; 
0x00000000004aba9c: mov word ptr [rsi], es; add dword ptr [rdi], 3; ret; 
0x000000000040489b: mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000447083: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000044c07c: movabs al, byte ptr [0x4810488948ffffff]; mov dword ptr [rax + 8], edx; ret; 
0x0000000000484db4: movabs al, byte ptr [0x4818538b48000000]; mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000412091: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000417b49: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x0000000000494ad8: movabs al, byte ptr [0x4efff9fc20fff9fa]; xor edi, edx; call rax; 
0x00000000004b0ee2: movabs al, byte ptr [0x57ac0000009001]; add byte ptr [rdi + rdx - 6], dl; call rcx; 
0x0000000000447557: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000046cbba: movabs al, byte ptr [0x840fc08548000000]; ret; 
0x000000000046842f: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000494a08: movabs al, byte ptr [0xa0fffa0520fffa05]; add al, 0xfa; call qword ptr [rax]; 
0x00000000004950ed: movabs al, byte ptr [0xa330fffaa1e0fffa]; cli; inc dword ptr [rax - 0x2f00055c]; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000494d10: movabs al, byte ptr [0xc0fffa3430fffa34]; xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000494af8: movabs al, byte ptr [0xc0fffa3730fffa37]; cli; call qword ptr [rax + 0x36]; 
0x0000000000495140: movabs al, byte ptr [0xc0fffaf1b0fffaf1]; int1; cli; call rax; 
0x00000000004a9554: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000049409c: movabs al, byte ptr [0xf0fff95180fff938]; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x000000000042aadc: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a7bbb: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000047f20a: movabs byte ptr [0x468d4810750023d1], al; add dword ptr [rax - 0x77], ecx; add eax, 0x23d195; ret; 
0x00000000004943bd: movabs byte ptr [0xa580fff9a430fff9], al; stc; call rax; 
0x00000000004946ac: movabs byte ptr [0xc2fffa1232fffa12], al; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494ba4: movabs byte ptr [0xc2fffa3932fffa39], al; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000042adda: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041d929: movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004950f5: movabs dword ptr [0xa5d0fffaa480fffa], eax; cli; jmp qword ptr [rax]; 
0x000000000045929b: movabs eax, dword ptr [0x48e8048b480025f9]; test eax, eax; je 0x592aa; call rax; 
0x000000000042dabb: movabs eax, dword ptr [0x4993146349000667]; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000045919b: movabs eax, dword ptr [0x4af334894a0025fa]; mov esi, dword ptr [rax + rsi*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x00000000004950f1: movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; 
0x00000000004950f1: movabs eax, dword ptr [0xa480fffaa330fffa]; cli; call rax; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x00000000004a78ff: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x000000000042d0e8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d1e8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040dc2c: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc34: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc3c: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000043084d: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043075c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd8c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004449e0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444350: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444a20: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444390: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444380: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444a00: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444370: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444aa0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444410: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444a60: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a80: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004444f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b40: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444490: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b60: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004449c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004449d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444340: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000444330: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004444f4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b44: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444494: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b64: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444b4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444d4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431b5a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a0a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043176a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043161a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043137a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004308fa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f18a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f03a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eafa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9aa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e70a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e46a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e31a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e07a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df2a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bfb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043195b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043180b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043156b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043141b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431232: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043102b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c3b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430aeb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043099b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f22b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0db: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee3b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eceb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb9b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e862: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7ab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e65b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e50b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e26b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e11b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfcb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435301: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d52: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444bad: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444fd: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000435971: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435901: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435891: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435821: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357b1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435741: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356d1: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435661: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355f1: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435581: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435511: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354a1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435431: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353c1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435351: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f7: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043558f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043551f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354af: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043543f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b4d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044449d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004353cf: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b6d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444bd: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043535f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b8d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004444dd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043597f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043590f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043589f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043582f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357bf: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043574f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356df: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043566f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355ff: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447d57: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447ce4: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d5d: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000434aeb: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000434b5b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435296: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435216: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435186: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435106: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435086: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435006: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f86: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f06: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e86: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e06: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d86: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d06: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c76: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434be6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b56: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ae1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435287: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435207: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435177: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350f7: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435077: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ff7: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f77: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ef7: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434df7: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d77: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cf7: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c67: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bd7: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b47: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ad7: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004449c4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004449d4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444344: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000444a27: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a47: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444397: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444387: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444a07: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444377: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444aa8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444418: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444b0b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044445b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b2b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044447b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444aec: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044443c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444a68: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a88: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004449e8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444358: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447d4e: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444ba9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b49: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444499: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b69: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444b89: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004444d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043530a: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435364: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447ce3: movdqu xmmword ptr fs:[rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004449e1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444351: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444a21: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444391: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444381: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444a01: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444371: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444aa1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444411: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444a61: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a81: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004444f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b41: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444491: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b61: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444d1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004449c1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004449d1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444341: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000444331: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004444f5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b45: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444495: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b65: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444b5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004444d5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431b5b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a0b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043176b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043161b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043137b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ceb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004308fb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f18b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f03b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeeb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eafb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9ab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e70b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e46b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e31b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e07b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df2b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bfc: movq qword ptr [r8], mm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aac: movq qword ptr [r8], mm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043195c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043180c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043156c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043141c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431233: movq qword ptr [r8], mm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043102c: movq qword ptr [r8], mm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edc: movq qword ptr [r8], mm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c3c: movq qword ptr [r8], mm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430aec: movq qword ptr [r8], mm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043099c: movq qword ptr [r8], mm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f22c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0dc: movq qword ptr [r8], mm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee3c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecec: movq qword ptr [r8], mm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb9c: movq qword ptr [r8], mm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e863: movq qword ptr [r8], mm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7ac: movq qword ptr [r8], mm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e65c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e50c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e26c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e11c: movq qword ptr [r8], mm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfcc: movq qword ptr [r8], mm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b5c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x628b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a0c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043176c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043161c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62f47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043137c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x635d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x639c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004308fc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63b17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f18c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x650c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f03c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65217]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65367]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x654b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65607]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eafc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65757]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9ac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x658a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e70c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65b47]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65c97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e46c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65de7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e31c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65f37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x66087]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e07c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x661d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df2c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x66327]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431bfd: movq qword ptr [rax], mm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aad: movq qword ptr [rax], mm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043195d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043180d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043156d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043141d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431234: movq qword ptr [rax], mm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043102d: movq qword ptr [rax], mm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430edd: movq qword ptr [rax], mm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c3d: movq qword ptr [rax], mm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430aed: movq qword ptr [rax], mm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043099d: movq qword ptr [rax], mm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f22d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0dd: movq qword ptr [rax], mm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee3d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eced: movq qword ptr [rax], mm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb9d: movq qword ptr [rax], mm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e864: movq qword ptr [rax], mm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7ad: movq qword ptr [rax], mm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e65d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e50d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e26d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e11d: movq qword ptr [rax], mm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfcd: movq qword ptr [rax], mm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435302: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d53: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444bae: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444fe: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000435972: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435902: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435892: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435822: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357b2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435742: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356d2: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435662: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355f2: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435582: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435512: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354a2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435432: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353c2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435352: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f8: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435590: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435520: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354b0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435440: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b4e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044449e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000004353d0: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b6e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444be: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000435360: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444b8e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004444de: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000435980: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435910: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004358a0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435830: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357c0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435750: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356e0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435670: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435600: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447d58: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447ce5: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d5e: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x0000000000434aec: movq qword ptr [rdi - 0x10], mm0; ret; 
0x0000000000434b5c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435297: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435217: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435187: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435107: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435087: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435007: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f87: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f07: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e87: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e07: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d87: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d07: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c77: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434be7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b57: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ae2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043084e: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435288: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435208: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435178: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350f8: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435078: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ff8: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f78: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ef8: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434df8: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d78: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cf8: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c68: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bd8: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b48: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ad8: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043075d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd8d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004449c5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004449d5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444345: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000444a28: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444a48: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444398: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444388: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444a08: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444378: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444aa9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444ac9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000444419: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004443f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444b0c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044445c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444b2c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044447c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444aed: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044443d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444a69: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004443b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444a89: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004443d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004449e9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444359: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447d4f: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444baa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444b4a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044449a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444b6a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004444ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444b8a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004444da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043530b: movq qword ptr [rdi], mm0; ret; 
0x0000000000435365: movq qword ptr [rdi], mm1; ret; 
0x000000000045795c: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004adae0: movsb byte ptr [rdi], byte ptr [rsi]; and eax, dword ptr [rax]; add ah, cl; mov ch, 0xf6; call qword ptr [rdi + 1]; 
0x0000000000446fe5: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004950f9: movsb byte ptr [rdi], byte ptr [rsi]; cli; call rax; 
0x00000000004950f9: movsb byte ptr [rdi], byte ptr [rsi]; cli; call rax; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x00000000004a7a42: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000446fd7: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046c278: movsb byte ptr [rdi], byte ptr [rsi]; scasd eax, dword ptr [rdi]; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004943c1: movsb byte ptr [rdi], byte ptr [rsi]; stc; inc dword ptr [rax - 0x2f00065b]; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x000000000047f8ec: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004b5d05: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; cwde; lahf; std; jmp qword ptr [rax]; 
0x0000000000477667: movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004950fd: movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000482d32: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000004943c5: movsd dword ptr [rdi], dword ptr [rsi]; stc; call rax; 
0x00000000004943c5: movsd dword ptr [rdi], dword ptr [rsi]; stc; call rax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x00000000004b00f9: movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x0000000000477666: movsw word ptr [rdi], word ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000046578c: movsx eax, byte ptr [rsi]; cmp edi, r8d; ja 0x65770; mov eax, r9d; ret; 
0x0000000000480e1b: movsx eax, cl; neg eax; ret; 
0x0000000000480ec0: movsx eax, dl; sub eax, ecx; ret; 
0x0000000000450bb7: movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450bbb: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000046578b: movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x65770; mov eax, r9d; ret; 
0x0000000000450bb6: movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000048bf58: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000040228e: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000048c859: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000048af07: movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048ace1: movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048c491: movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000048ace2: movsxd rax, dword ptr [rax + rcx*4]; add rax, r8; jmp rax; 
0x0000000000417a6e: movsxd rax, dword ptr [rax - 0x77]; adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004173ae: movsxd rax, dword ptr [rax - 0x77]; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044bde1: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044bde1: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x00000000004685d7: movsxd rax, dword ptr [rax]; add byte ptr [rbp - 0x75], cl; je 0x68602; and byte ptr [rax + 1], cl; ret; 
0x000000000040228f: movsxd rax, dword ptr [rbp + rax*4]; add rax, r13; jmp rax; 
0x000000000044d60f: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044d598: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000460be5: movsxd rax, dword ptr [rbx - 0x52743]; call qword ptr [rax]; 
0x000000000047c08d: movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046e3d7: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000048c492: movsxd rax, dword ptr [rcx + rbx*4]; add rax, r9; jmp rax; 
0x000000000044703d: movsxd rax, dword ptr [rcx]; add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047c08e: movsxd rax, dword ptr [rcx]; add rax, rcx; jmp rax; 
0x000000000047c9b5: movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000048af08: movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; jmp rax; 
0x000000000046ea07: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000041db1d: movsxd rax, dword ptr [rdi]; add byte ptr [rax - 0x17], dl; ret; 
0x000000000047c9b6: movsxd rax, dword ptr [rdi]; add rax, rdi; jmp rax; 
0x0000000000402026: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000449324: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004240b6: movsxd rax, dword ptr [rdx]; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048c85a: movsxd rax, dword ptr [rsi + rax*4]; add rax, r14; jmp rax; 
0x000000000046e26b: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004481a8: movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000448262: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000042de8a: movsxd rax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048bf59: movsxd rax, dword ptr [rsp + rax*4]; add rax, r12; jmp rax; 
0x000000000048520d: movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446c77: movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000446c24: movsxd rax, ecx; ret; 
0x000000000043df0b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fb58: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f378: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f768: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ef88: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ea6b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e24b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043da2b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f127: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e58b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dd6b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d54b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e72b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f618: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee38: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ff48: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d88b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d9c1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e6c1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e1e1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f519: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fe49: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ea01: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dd01: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d821: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e521: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043f669: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ee89: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000481566: movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000047f93b: movsxd rbx, dword ptr [rax]; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000485207: movsxd rbx, dword ptr [rdi]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446c69: movsxd rbx, ecx; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000042c31d: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004440f9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042c31e: movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004440fa: movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004481d0: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000446cb3: movsxd rcx, ecx; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000446cb7: movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000040d607: movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000045a49f: movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000417419: movsxd rdi, dword ptr [rbp - 0x3b140001]; nop; mov eax, 0xffffffff; ret; 
0x000000000045a4a0: movsxd rdi, dword ptr [rbx + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000424ed9: movsxd rdi, dword ptr [rcx + 0x250001]; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x000000000040d608: movsxd rdi, dword ptr [rdx + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000046a10a: movsxd rdi, ecx; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000042377b: movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000045aca8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000042dabf: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dac0: movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040d31f: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000047de91: movsxd rdx, esp; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047de90: movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000459fa0: movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000459fa1: movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x000000000048d09d: movsxd rsi, esi; je 0x8d0b0; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d0b0; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004aca8d: movsxd rsi, esi; jmp rdi; 
0x00000000004460dc: movsxd rsi, esi; ret 0x7520; 
0x0000000000446f77: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446f7a: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004470f8: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044719f: movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447226: movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447227: movups xmmword ptr [rbx], xmm0; ret; 
0x00000000004471a0: movups xmmword ptr [rbx], xmm4; ret; 
0x0000000000447192: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447196: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044719b: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044719a: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044718f: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447100: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044721a: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000044721e: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447222: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000446f82: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447104: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004470d7: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000447109: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004470dc: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004470e1: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004470e6: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004470fd: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446f7f: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447217: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000475691: movzx eax, al; add rsp, 0x58; ret; 
0x000000000048bf55: movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e267: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048836c: movzx eax, al; neg eax; ret; 
0x0000000000484c19: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bc13: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e910: movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000415df0: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000004846a7: movzx eax, byte ptr [r8 + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x00000000004264ed: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004846a8: movzx eax, byte ptr [rax + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x000000000041824b: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048df0e: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000416ff1: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134de: movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x000000000041907f: movzx eax, byte ptr [rax]; ret; 
0x000000000046075b: movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x255fba]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046b5e7: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000042c2c4: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2e4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2aa: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042a964: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042c034: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000004401a8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5836d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043eb38: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x599dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cf88: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5b58d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ae38: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5d6dd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042637f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000426318: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000446100: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000446160: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000446150: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446140: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000446130: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000446120: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000446110: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004464ba: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x46635; xor eax, eax; ret; 
0x000000000042d1d0: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf83: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000004460e7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004401c3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x58353]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043cfa3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x5b573]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042c0b0: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bbf0: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000426333: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000417000: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134f0: movzx eax, byte ptr [rdx]; ret; 
0x0000000000460dfd: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255918]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607a5: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255f70]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000415df1: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x0000000000448230: movzx eax, cl; pop rbx; ret; 
0x0000000000447d04: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450c81: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004481e0: movzx eax, dl; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000447d03: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450c80: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000048c48e: movzx ebx, bl; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000046b61b: movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000044673a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46730; ret; 
0x00000000004467ea: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x467e0; ret; 
0x0000000000446aaa: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46aa0; sub rax, 1; ret; 
0x0000000000426314: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004265d6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x265c0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042d1d4: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000447058: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000426330: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c0b3: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000048acde: movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000044707c: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000046c271: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24afa4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c21e: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aff7]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcf1: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b024]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c090: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b185]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c04b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b1ca]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c006: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b20f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bfb7: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24b25e]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046070a: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f0b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460ab9: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25605c]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460a6b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2560aa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004609bc: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256159]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460960: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2561b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004606c0: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256455]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460672: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2564a3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460211: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x256604]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000040d604: movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000423760: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x23750; sub rax, 0x10; ret; 
0x00000000004264f1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044695a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46950; lea rax, [rcx - 1]; ret; 
0x000000000042c2c9: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2e9: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2af: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000043ed5f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x597b6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d22f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x5b2e6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a968: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042c038: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000426383: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042b793: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x2b79d; xchg eax, edx; sub eax, edx; ret; 
0x0000000000446104: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000446164: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000446154: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446144: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000446134: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000446124: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000446114: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004352b0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042cf87: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000004460eb: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000435990: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000042bbf3: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000448270: movzx edx, cl; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042bc19: movzx edx, dl; sub eax, edx; ret; 
0x0000000000435230: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000435920: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004174f1: movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004174f2: movzx esi, byte ptr [rsi]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000447081: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000048c48d: movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000041e618: mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473197: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000048d153: mul byte ptr [rsi - 0x70]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000449627: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000004496b7: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449967: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004190bf: neg eax; ret; 
0x000000000047e722: neg eax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000047e721: neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004746b8: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000044b2cb: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004241c3: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042b9b8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b998: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eb48: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041a5d8: nop dword ptr [rax + rax]; call rax; 
0x000000000047f2fb: nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x23d4c1], 0; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x0000000000416fa3: nop dword ptr [rax + rax]; cmp eax, -1; je 0x16f28; mov eax, 0xffffffff; ret; 
0x0000000000417193: nop dword ptr [rax + rax]; cmp eax, -1; je 0x17118; mov eax, 0xffffffff; ret; 
0x0000000000444e88: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e98: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444ea8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444eb8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ec8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e08: nop dword ptr [rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444e18: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444e28: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444e38: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444e48: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444e58: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444e68: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444e78: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444df8: nop dword ptr [rax + rax]; lea rax, [rdi]; ret; 
0x00000000004848d8: nop dword ptr [rax + rax]; lea rax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d488: nop dword ptr [rax + rax]; lea rax, [rip + 0x26ce69]; ret; 
0x0000000000418bfb: nop dword ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000413228: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444858: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444238: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044487b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444248: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042408b: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000044a6fb: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000044a6fb: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x00000000004753ab: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x00000000004753ab: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x00000000004753c8: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x00000000004753c8: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x00000000004753b8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x00000000004753b8: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x00000000004753d8: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x00000000004753d8: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x000000000044a6cb: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044a6cb: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a698: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x0000000000418ee8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000048df78: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000418c0b: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bd2b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x270b8a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000004490d8: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000046ff83: nop dword ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000435118: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044426b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044c0f8: nop dword ptr [rax + rax]; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000048d0f8: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417e48: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004787db: nop dword ptr [rax + rax]; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000045acb8: nop dword ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000045acd8: nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf8: nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004496c3: nop dword ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004757a3: nop dword ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045ac9b: nop dword ptr [rax + rax]; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041819b: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x000000000045ae58: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000004746d8: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x00000000004746e8: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000004746f8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x0000000000474708: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x0000000000474718: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x0000000000474728: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x0000000000474738: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000481a18: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004198db: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004717e8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f58: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d078: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d108: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d168: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d158: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d118: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000419a7b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x000000000044f5b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x26d371]; ret; 
0x0000000000418f38: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x000000000048ae48: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000474b7b: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004739b8: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x0000000000418f68: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000004448eb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004442cb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a47b: nop dword ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449a2b: nop dword ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004442ab: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000420bab: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000423e68: nop dword ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000480eb8: nop dword ptr [rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000044615b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044614b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000044613b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000044612b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000044611b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044610b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000042c0ab: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000416ffb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004134e8: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x0000000000450c7b: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004352a8: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435228: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a6f3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a6c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000435111: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000045ae51: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004352a1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435221: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000485276: nop dword ptr [rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bdd6: nop dword ptr [rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474c46: nop dword ptr [rax + rax]; nop; mov eax, 0xc9; syscall; 
0x000000000047ba8b: nop dword ptr [rax + rax]; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400ab3: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000004120a8: nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000004182e3: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471543: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004236eb: nop dword ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000042bacb: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472ff8: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000417e68: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473518: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444c38: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004746ac: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000042d92c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042b9a9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b9c9: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000472d0c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000472d5c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004200dd: nop dword ptr [rax]; mov dword ptr [rip + 0x29bc86], 0; ret; 
0x0000000000423e0d: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000044960c: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x000000000044960c: nop dword ptr [rax]; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x0000000000488529: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x00000000004717d5: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000449a59: nop dword ptr [rax]; mov eax, 1; syscall; 
0x0000000000449d0d: nop dword ptr [rax]; mov eax, 3; syscall; 
0x0000000000449a8c: nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000048547c: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23743a]; ret; 
0x000000000044429d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000046fe45: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000435839: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044bdac: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045b05d: nop dword ptr [rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000484dd5: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000041990c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29fedd], rax; ret; 
0x00000000004198fc: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x29fef5], rax; ret; 
0x0000000000457b09: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x264361]; ret; 
0x000000000044f5ad: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x26d371]; ret; 
0x000000000041b04c: nop dword ptr [rax]; mov rax, rdx; ret; 
0x00000000004442ed: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004442fd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000004496fd: nop dword ptr [rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000435679: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004202e4: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x00000000004231ec: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000044434c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004449cd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444339: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042bbed: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000448229: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x0000000000435989: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000435919: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042b992: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444243: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000418f13: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004717e3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f53: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000418f32: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x0000000000446ad2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473512: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000047bb3c: nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000400af5: nop dword ptr [rax]; pop rbp; ret; 
0x000000000044885c: nop dword ptr [rax]; pop rbx; ret; 
0x000000000041a5cd: nop dword ptr [rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000042c07d: nop dword ptr [rax]; ret; 
0x0000000000417555: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000449989: nop dword ptr [rax]; xor eax, eax; syscall; 
0x0000000000401304: nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004746b7: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042b997: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444e87: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e97: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444ea7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444eb7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ec7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e07: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444e17: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444e27: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444e37: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444e47: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444e57: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444e67: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444e77: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444df7: nop dword ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d487: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x26ce69]; ret; 
0x0000000000413227: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444857: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444237: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444247: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000418f17: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004490d7: nop dword ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000435117: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd7: nop dword ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf7: nop dword ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000418ef7: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x000000000045ae57: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004746d7: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x00000000004717e7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f57: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d077: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d157: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418f37: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x0000000000418f67: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000480eb7: nop dword ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x00000000004352a7: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435227: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a6f2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a6c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000485275: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bdd5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474c45: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x00000000004120a7: nop dword ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000472ff7: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000446ad7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473517: nop dword ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444c37: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000044b2ca: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042b9b7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000040eb47: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041a5d7: nop word ptr [rax + rax]; call rax; 
0x0000000000418bfa: nop word ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000042408a: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000047ba9a: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000046ff82: nop word ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000044426a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000417e47: nop word ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045acb7: nop word ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004496c2: nop word ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004757a2: nop word ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045ac9a: nop word ptr [rax + rax]; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000418ed7: nop word ptr [rax + rax]; mov rax, -1; ret; 
0x000000000047c3a7: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000419a7a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x00000000004739b7: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x00000000004442ca: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a47a: nop word ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449a2a: nop word ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000420baa: nop word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000423e67: nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000450c7a: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000484b8a: nop word ptr [rax + rax]; pop rbx; ret; 
0x00000000004182e2: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471542: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004236ea: nop word ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x0000000000417e67: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004746b6: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042b996: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444e86: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e96: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444ea6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444eb6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ec6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e06: nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444e16: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444e26: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444e36: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444e46: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444e56: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444e66: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444e76: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444df6: nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d486: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x26ce69]; ret; 
0x0000000000413226: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444856: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444236: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444246: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000418f16: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004490d6: nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000435116: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045acd6: nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acf6: nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000418ef6: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x000000000045ae56: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004746d6: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x00000000004717e6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f56: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d076: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d156: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418f36: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x0000000000418f66: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000480eb6: nop word ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x00000000004352a6: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000435226: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a6f1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a6c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000485274: nop word ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bdd4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474c44: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x00000000004120a6: nop word ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000472ff6: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000446ad6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473516: nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444c36: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000046ff81: nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000493fe4: nop; adc ecx, edi; call rax; 
0x0000000000493fe4: nop; adc ecx, edi; call rax; adc bh, cl; call qword ptr [rax]; 
0x00000000004947f4: nop; adc edx, edi; jmp qword ptr [rax]; 
0x000000000045a68e: nop; add byte ptr [rax], al; add al, ch; cmp dword ptr [rbp - 6], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000004ab7cc: nop; add byte ptr [rax], al; add al, dl; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x0000000000414612: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c42a378; ret; 
0x00000000004349e7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000047195b: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000471a55: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004b0ee4: nop; add byte ptr [rax], al; add byte ptr [rdi + rdx*2 + 0x17540000], ch; cli; call rcx; 
0x000000000042c63c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b47f1: nop; add byte ptr [rax], al; cmp al, 3; std; jmp qword ptr [rdx]; 
0x00000000004758cc: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044ea4f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000487d0f: nop; add rsp, 8; ret; 
0x0000000000494014: nop; and cl, bh; call rax; 
0x0000000000472d6f: nop; bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d7f: nop; bsf eax, eax; sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004447df: nop; bsf rdx, rdx; lea r11, [rip + 0x509b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044f184: nop; call 0x4d500; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004855ff: nop; call rax; 
0x000000000044f190: nop; call rsi; 
0x00000000004b16d9: nop; cli; call qword ptr [rdx]; 
0x0000000000494cec: nop; cmp dl, bh; jmp qword ptr [rax]; 
0x0000000000494584: nop; int 0xf9; jmp rax; 
0x000000000048266f: nop; jmp rdx; 
0x0000000000449c3f: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000400bc9: nop; leave; ret; 
0x00000000004b4490: nop; loope 0xb448f; call qword ptr [rdx]; 
0x0000000000494308: nop; mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x0000000000494370: nop; mov bh, 0xf9; jmp qword ptr [rax - 0x47]; 
0x0000000000494280: nop; mov cl, 0xf9; call qword ptr [rax - 0x4d]; 
0x000000000042f5bf: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000047b5bf: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048464f: nop; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000048f4af: nop; mov dword ptr [rip + 0x22cece], 1; ret; 
0x000000000048f39f: nop; mov dword ptr [rip + 0x22cfde], 1; ret; 
0x0000000000419ae3: nop; mov dword ptr [rip + 0x29fd26], 1; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aa3: nop; mov dword ptr [rip + 0x29fd66], 1; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a83: nop; mov dword ptr [rip + 0x29fd86], 1; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419b03: nop; mov dword ptr [rip + 0x2a228a], eax; ret; 
0x000000000042f79f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f97f: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000480fa1: nop; mov eax, 0x15; syscall; 
0x000000000048527f: nop; mov eax, 0x27; syscall; 
0x000000000048527f: nop; mov eax, 0x27; syscall; ret; 
0x000000000047537f: nop; mov eax, 0x3f; syscall; 
0x000000000047537f: nop; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x75390; ret; 
0x000000000044bddf: nop; mov eax, 0x63; syscall; 
0x000000000044bddf: nop; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x0000000000474c4f: nop; mov eax, 0xc9; syscall; 
0x0000000000474c4f: nop; mov eax, 0xc9; syscall; ret; 
0x000000000044be64: nop; mov eax, 0xca; syscall; 
0x000000000041741f: nop; mov eax, 0xffffffff; ret; 
0x000000000047fc8f: nop; mov eax, 1; pop rbx; ret; 
0x00000000004499bf: nop; mov eax, dword ptr [rip + 0x272e46]; test eax, eax; jne 0x499e0; mov eax, 1; syscall; 
0x00000000004942d4: nop; mov edx, 0xbc90fff9; stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x000000000042fb5f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044488f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004942dc: nop; mov esi, 0xb120fff9; stc; jmp rax; 
0x00000000004942d8: nop; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x0000000000419983: nop; mov qword ptr [rip + 0x29febd], rax; ret; 
0x0000000000419913: nop; mov qword ptr [rip + 0x29fedd], rax; ret; 
0x0000000000419903: nop; mov qword ptr [rip + 0x29fef5], rax; ret; 
0x000000000045b07f: nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000048d0cf: nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000419adf: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x29fd26], 1; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x000000000048ae3f: nop; mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000048dfdf: nop; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000004442df: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044430f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044431f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004496af: nop; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000044999f: nop; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004448df: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000044437f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000044432f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000045ae50: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004746b5: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000444e85: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e95: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444ea5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444eb5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444ec5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e05: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444e15: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444e25: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444e35: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444e45: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444e55: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444e65: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444e75: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444df5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d485: nop; nop word ptr cs:[rax + rax]; lea rax, [rip + 0x26ce69]; ret; 
0x00000000004746d5: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000048d075: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d155: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418f65: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000472ff5: nop; nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000444c35: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000045ae4f: nop; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000494824: nop; or bh, dl; call qword ptr [rax]; 
0x0000000000494a30: nop; or dl, bh; call qword ptr [rax]; 
0x00000000004940e0: nop; push 0x6980fff9; stc; push qword ptr [rax + 0x6a]; stc; jmp qword ptr [rax + 0x6b]; 
0x00000000004ab7b0: nop; push rsp; cmc; call qword ptr [rsi]; 
0x00000000004004cf: nop; ret; 
0x0000000000494004: nop; sbb edi, ecx; call rax; 
0x0000000000494004: nop; sbb edi, ecx; call rax; sbb al, 0xf9; call qword ptr [rax]; 
0x000000000049416d: nop; stc; call qword ptr [rcx]; 
0x000000000049412d: nop; stc; call rcx; 
0x0000000000494125: nop; stc; lcall [rsi - 0x5f000671]; nop; stc; call rcx; 
0x0000000000418c3f: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000494f58: nop; sub edx, edi; inc dword ptr [rax]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x000000000049440c: nop; test al, 0xf9; jmp rax; 
0x000000000042badf: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000049511c: nop; wait; cli; jmp qword ptr [rax]; 
0x0000000000494b14: nop; xor al, 0xfa; jmp qword ptr [rax]; 
0x000000000041508f: nop; xor eax, eax; ret; 
0x0000000000456b76: not byte ptr [rbx - 1]; jmp qword ptr [rsi + 0xf]; 
0x000000000040eb39: not edx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040eb38: not rdx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000472104: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1422; cmove rax, rdx; ret; 
0x0000000000424ee4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1b512; cmove rax, rdx; ret; 
0x00000000004241f4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1c832; cmove rax, rdx; ret; 
0x0000000000424eb4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6922; cmove rax, rdx; ret; 
0x00000000004721d4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x892; cmove rax, rdx; ret; 
0x0000000000473a84: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000472134: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xf32; cmove rax, rdx; ret; 
0x0000000000484f15: or al, 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000042aae7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f51f: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ab15: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004757b2: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000475761: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000041e61c: or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473ad8: or al, 0; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000046b6dc: or al, 0; add byte ptr [rcx + 1], al; ret 0x8b48; 
0x0000000000473a7a: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047d1f0: or al, 0x13; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000447036: or al, 0x16; cmp rdi, r9; jb 0x471a4; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447391: or al, 0x16; cmp rdi, r9; jb 0x47561; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004477dc: or al, 0x16; cmp rdi, r9; jb 0x47a1c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000426316: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004265d8: or al, 0x16; test al, al; jne 0x265c0; xor eax, eax; sub eax, ecx; ret; 
0x000000000041e5ea: or al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x0000000000413be3: or al, 0x24; mov rdi, rbx; call rax; 
0x000000000041002b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100dc: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x100ec; add rsp, 0xd8; ret; 
0x000000000044978f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b22: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c31: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000045aff1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681fc: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f4: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475606: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75653; add rsp, 0x58; ret; 
0x0000000000475738: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481cdf: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481d9f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481f00: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821cf: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000488315: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8832c; add rsp, 0x38; ret; 
0x00000000004952c8: or al, 0x2f; sti; call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000424c90: or al, 0x33; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000047f8e9: or al, 0x37; jae 0x7f891; xor eax, eax; ret; 
0x0000000000449cdd: or al, 0x48; add esp, 0x10; pop rbx; ret; 
0x0000000000401211: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000416f04: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004852d2: or al, 0x48; mov edx, dword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000484fd3: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000000046e503: or al, 0x7e; ret 0x8944; 
0x000000000045da2b: or al, 0x83; ret; 
0x00000000004481d1: or al, 0x86; add rcx, rsi; jmp rcx; 
0x0000000000462c9a: or al, 0x89; ret 0xc689; 
0x000000000044825b: or al, 0x89; ret 0xe283; 
0x000000000043ae44: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000438639: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000042c31f: or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004440fb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004abe14: or al, 0xa6; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004440ff: or al, 0xb; jmp rcx; 
0x0000000000449cd4: or al, 0xe8; and al, byte ptr es:[rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000045678f: or al, 0xe9; ret; 
0x000000000047147c: or al, 0xeb; ret 0x5590; 
0x00000000004354b3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004663fd: or al, 0xf6; ret 0xf01; 
0x000000000048d0cb: or al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x000000000045a498: or al, 0xf; xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x00000000004947e1: or al, 0xfa; call qword ptr [rax + 0x13]; 
0x00000000004947e1: or al, 0xfa; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x00000000004b2db1: or al, 0xfc; jmp qword ptr [rbx]; 
0x0000000000473ad2: or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004720ff: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1422]; cmove rax, rdx; ret; 
0x0000000000424edf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1b512]; cmove rax, rdx; ret; 
0x00000000004241ef: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1c832]; cmove rax, rdx; ret; 
0x0000000000424eaf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x00000000004721cf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x0000000000473a7f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047212f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xf32]; cmove rax, rdx; ret; 
0x000000000046b61d: or al, 7; lea rax, [rip + 0x24b8fa]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x00000000004236b1: or al, 9; ret 0xbae9; 
0x000000000046a236: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000042acc7: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e0b1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042acf5: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048cdfa: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000044a6d1: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044a6d1: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000040dcd5: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x000000000049eb95: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000049eb8d: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000040ab5c: or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x00000000004076cd: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x000000000044c6a6: or al, byte ptr [rcx + rcx*8 - 0x7cb7ed8c]; ret 0x4801; 
0x00000000004b3ee3: or al, byte ptr [rcx]; ret; 
0x0000000000444716: or al, byte ptr [rip + 0xc634900]; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000433b67: or al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048d0c8: or al, ch; and cl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x000000000040ae38: or al, ch; ret 0xffb2; 
0x000000000040bd37: or al, ch; ret; 
0x0000000000423778: or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000047ba7d: or bh, bh; adc eax, 0x23e79c; xor eax, eax; add rsp, 8; ret; 
0x000000000047bb35: or bh, bh; and eax, 0x23e6e4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000044fb07: or bh, bl; jmp qword ptr [rsi + 0xf]; 
0x0000000000400b1b: or bh, byte ptr [rdi + 0x4ab768]; call 0x8f610; mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x0000000000424b70: or bh, dh; ret 0; 
0x0000000000494825: or bh, dl; call qword ptr [rax]; 
0x00000000004948a5: or bh, dl; jmp rdx; 
0x0000000000405e7d: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000048e7ed: or bl, ch; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000435673: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000044a477: or bl, dh; ret; 
0x0000000000412db1: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000044fe06: or byte ptr [r15], 0x8e; ret 1; 
0x0000000000417226: or byte ptr [r15], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411ea1: or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000040e1ed: or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000419078: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004845ff: or byte ptr [r8 + 2], r15b; ret; 
0x000000000049170c: or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000411f6f: or byte ptr [r8 - 0x3f], r9b; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000041e6e2: or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000047f42a: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004425a8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047f915: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000478ca2: or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x0000000000471eed: or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000484644: or byte ptr [r9 + 0x2b802], r9b; add byte ptr [rax], al; ret; 
0x000000000048c857: or byte ptr [r9 + 0x63], r9b; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004845e0: or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000442667: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000004497ec: or byte ptr [rax + 0x101], bh; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000411ea2: or byte ptr [rax + 0x29], cl; ret; 
0x0000000000411e8c: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x00000000004136d5: or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000452a68: or byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x000000000040e1ee: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000419079: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004b212c: or byte ptr [rax + 0xb], cl; add byte ptr [rax + rax], cl; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004ad13e: or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x000000000041a126: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000041a5c2: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867cc: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000047d711: or byte ptr [rax + 1], cl; ret; 
0x0000000000484600: or byte ptr [rax + 2], bh; ret; 
0x0000000000489aab: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000489ed7: or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000481a33: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000481a32: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049170d: or byte ptr [rax - 0x397bf0ff], ch; add eax, 0x89490000; ret 0x8349; 
0x0000000000400403: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000411f70: or byte ptr [rax - 0x3f], cl; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000004199c3: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000044a8e4: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000481d96: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821c6: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000481ef7: or byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x000000000041e6e3: or byte ptr [rax - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000040ab51: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x00000000004076c2: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000470364: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7037c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044b04e: or byte ptr [rax - 0x77], cl; adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x0000000000410b71: or byte ptr [rax - 0x77], cl; call 0x5c4268d4; pop r13; ret; 
0x0000000000410bac: or byte ptr [rax - 0x77], cl; call 0x5c42690f; pop r13; ret; 
0x00000000004425ad: or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000415060: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047f42b: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044a4fe: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000416f9b: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000401899: or byte ptr [rax - 0x77], cl; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004425a9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000475189: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000047f7d0: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000401898: or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000478ca3: or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000047f916: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x000000000041f660: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000045b700: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000047b557: or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x000000000047dbc2: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c560: or byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000044ac92: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000041ddb0: or byte ptr [rax - 0xa], al; mov dword ptr [rsp + rsi*2], 0x158b48e9; stosb byte ptr [rdi], al; ret; 
0x0000000000412586: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000471eee: or byte ptr [rax], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041aceb: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000042af97: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e251: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aed5: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000417d17: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000045115a: or byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000045b082: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000045af25: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000004482a5: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000044e961: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004b3b34: or byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax - 0x356f000], al; jmp qword ptr [rdx]; 
0x0000000000449a91: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004b56b4: or byte ptr [rax], al; add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x000000000048af04: or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x0000000000411984: or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000420f3c: or byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x00000000004012fc: or byte ptr [rax], al; add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042d060: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000040ec9a: or byte ptr [rax], al; lea rdi, [rip + 0x83f8a]; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x0000000000400b24: or byte ptr [rax], al; mov byte ptr [rip + 0x2ba7b3], 1; pop rbp; ret; 
0x000000000040eca1: or byte ptr [rax], al; mov edx, 0x6c; call 0x1bd0; xor eax, eax; ret; 
0x000000000040d31c: or byte ptr [rax], al; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000040d602: or byte ptr [rax], al; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000495298: or byte ptr [rax], dh; sti; inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x00000000004adab3: or byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rbx], bh; add byte ptr [rbp + rsi*4 - 0xa], dh; call qword ptr [rdi]; 
0x000000000043f90e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048d04f: or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x00000000004859eb: or byte ptr [rbp + 0x39481e04], cl; ret 0x830f; 
0x0000000000482a81: or byte ptr [rbp + 0x39], cl; ret 0x8b48; 
0x00000000004856e9: or byte ptr [rbp + 0x440f4cf6], al; ret 0x8b64; 
0x000000000045d4fc: or byte ptr [rbp + 0x63840fc0], al; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000004637e0: or byte ptr [rbp + 0x6a840fc0], al; sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004b4278: or byte ptr [rbp + 0xb], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004b37ea: or byte ptr [rbp + 0xb], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000418c32: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000048d0be: or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x0000000000482703: or byte ptr [rbp + rcx*4 + 0x24], cl; ret 0x8d4a; 
0x00000000004b3c44: or byte ptr [rbp - 0x36fe0000], al; hlt; jmp qword ptr [rcx]; 
0x000000000041016f: or byte ptr [rbp - 0x627bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041d792: or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000049209e: or byte ptr [rbp - 0x77], cl; ret; 
0x000000000044a2fc: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xc221; 
0x0000000000449e13: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xca21; 
0x00000000004965f4: or byte ptr [rbp - 5], dh; jmp rax; 
0x0000000000413fa6: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000401c85: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000044b14e: or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041e6e7: or byte ptr [rbx + 0x94807e0], al; ret; 
0x000000000041e6e6: or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004b16cd: or byte ptr [rbx + rcx + 0x2c], cl; add byte ptr [rax], al; add byte ptr [rax + 0x2800005f], bl; nop; cli; call qword ptr [rdx]; 
0x0000000000462977: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x0000000000410699: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000044bf44: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047b5c9: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004843eb: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000484645: or byte ptr [rcx + 0x2b802], cl; add byte ptr [rax], al; ret; 
0x000000000048156d: or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x00000000004790f2: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x00000000004790c4: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000410f68: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x0000000000410d57: or byte ptr [rcx + 0x415d5bd8], cl; pop rsp; pop r13; ret; 
0x000000000048a2a5: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000046f4b3: or byte ptr [rcx + 0x415d5bf0], cl; pop rsp; pop r13; ret; 
0x000000000048c858: or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004b444d: or byte ptr [rcx + 0xb], al; xor al, 0; add byte ptr [rax], al; sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x00000000004b4f6c: or byte ptr [rcx + 0xb], cl; add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x000000000046e4e9: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000048822b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004833e0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000004845e1: or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000489b03: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004144f6: or byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000489a2b: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000044acac: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000042300d: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411b11: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004190b4: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004843f2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000044b1bb: or byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x0000000000411dca: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000442668: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000484539: or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000488701: or byte ptr [rcx - 0x77], cl; adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000044b146: or byte ptr [rcx - 0x77], cl; push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000040d4fa: or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x0000000000421218: or byte ptr [rcx - 0x77], cl; ret; 
0x0000000000465b12: or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x73], 0x15; ret; 
0x000000000041d796: or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000044a956: or byte ptr [rcx - 0xa], al; ret; 
0x000000000041bb8a: or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x000000000041b29b: or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x000000000041507a: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000411092: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000004a955e: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000047bb40: or byte ptr [rdi + 0x315], 4; ret; 
0x000000000047ba90: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000046eb13: or byte ptr [rdi + 0x32], dh; lea rdi, [rip + 0x351af]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004546fb: or byte ptr [rdi], 0x85; retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000454a87: or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044fe07: or byte ptr [rdi], 0x8e; ret 1; 
0x00000000004172cf: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040efb2: or byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000475690: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048836b: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000417227: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411472: or byte ptr [rdi], cl; test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000483043: or byte ptr [rdi], cl; xchg eax, edx; ret 0x8949; 
0x00000000004012d1: or byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000040dcd3: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x0000000000446da1: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000438623: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047e5fb: or byte ptr [rdx + 1], bh; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000412db2: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004b4e38: or byte ptr [rdx], dh; std; call qword ptr [rbx]; 
0x000000000048c852: or byte ptr [rip + 0x458b3777], al; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000449c44: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x00000000004b3eda: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004b3f0e: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004b3f42: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000494810: or byte ptr [rsi], 0xfa; call qword ptr [rax]; 
0x0000000000433ce7: or byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000489d41: or byte ptr [rsp + rdi*2 - 0x75], dh; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004b4a39: or ch, bh; call qword ptr [rax]; 
0x00000000004b40a8: or ch, cl; cld; jmp qword ptr [rsi]; 
0x0000000000457c11: or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000411404: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000484d24: or cl, byte ptr [rax - 0x73]; adc eax, 0x235e34; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000472302: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000045ce1e: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000410cf7: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000400c33: or cl, byte ptr [rbx - 0x387603bb]; call 0xb6d; leave; ret; 
0x0000000000486c3d: or cl, byte ptr [rcx - 0x75]; add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000402368: or cl, byte ptr [rdi]; xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x90332]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402017: or cl, byte ptr [rdi]; xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x905ff]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004ad136: or cl, byte ptr [rsi]; sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000490497: or cl, ch; adc eax, dword ptr [rip + 0x1f0ffff9]; add bl, dh; ret; 
0x0000000000407191: or cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046cd9b: or cl, ch; jmp rsp; 
0x0000000000421696: or cl, ch; ret; 
0x000000000042a962: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435593: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000048f3f5: or dh, bl; ret; 
0x0000000000458ff2: or dh, byte ptr [rax - 0x46]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000471536: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; jne 0x71530; lea eax, [rdx + rdi]; ret; 
0x00000000004182d6: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x182d0; lea eax, [rdx + rdi]; ret; 
0x000000000048f5a6: or dh, byte ptr [rdi - 0x2776b701]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004124eb: or dh, byte ptr [rdx + rbp*2 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000044cf5c: or dh, dh; ret 0x8902; 
0x000000000041b2e7: or dh, dh; ret 0xf02; 
0x0000000000494a31: or dl, bh; call qword ptr [rax]; 
0x00000000004948b1: or dl, bh; call qword ptr [rdx + 8]; 
0x00000000004948b1: or dl, bh; call qword ptr [rdx + 8]; cli; call rdx; 
0x00000000004948b5: or dl, bh; call rdx; 
0x00000000004949f1: or dl, bh; jmp qword ptr [rax]; 
0x0000000000420f3a: or dword ptr [rax + 0xf000008], 0xffffff93; ret 0x3d83; 
0x000000000044d59a: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x000000000042ea53: or dword ptr [rax + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dacb: or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000482539: or dword ptr [rax - 0x3f7a0003], 0x75; mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000045a80e: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000484e03: or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000440e2e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000042aea7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f7bf: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ade5: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000412547: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000044a5fd: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000044a652: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000045e335: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000400c88: or dword ptr [rax], eax; call 0x10c00; mov eax, 0; leave; ret; 
0x0000000000402023: or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048cce3: or dword ptr [rax], edx; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000449b3a: or dword ptr [rbp - 0x36], esi; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000042d756: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000413700: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000424ce3: or dword ptr [rbx], esp; add al, byte ptr [rax]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x000000000048b84c: or dword ptr [rbx], esp; add byte ptr [rax], cl; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b845: or dword ptr [rbx], esp; add byte ptr [rax], cl; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b83e: or dword ptr [rbx], esp; add byte ptr [rax], cl; mov byte ptr [rip + 0x230965], 8; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000048b853: or dword ptr [rbx], esp; add byte ptr [rax], cl; ret; 
0x0000000000470a07: or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040dac7: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x000000000046ebf2: or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000048de49: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047fc86: or dword ptr [rip + 0x23a55b], 1; pop rbx; ret; 
0x00000000004447b0: or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000449aff: or dword ptr [rip - 0x3f7affd9], ebp; jne 0x49b68; mov eax, 0x48; syscall; 
0x0000000000431813: or dword ptr [rsi + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480e97: or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x0000000000481c29: or dword ptr [rsi - 0x76b70001], 0x43; adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000048b844: or dword ptr gs:[rbx], esp; add byte ptr [rax], cl; mov byte ptr [rip + 0x23095f], 8; mov byte ptr [rip + 0x230959], 8; ret; 
0x00000000004b3ee0: or eax, 0x10a0303; ret; 
0x00000000004b3f38: or eax, 0x1370303; ret; 
0x00000000004946a1: or eax, 0x1382fffa; cli; call qword ptr [rdx]; 
0x0000000000494621: or eax, 0x1396fffa; cli; jmp qword ptr [rsi]; 
0x00000000004945e1: or eax, 0x13b0fffa; cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x0000000000444b51: or eax, 0x1c478d48; ret; 
0x00000000004135e0: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048d0b2: or eax, 0x22f0e9; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000047c088: or eax, 0x28c93; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004014eb: or eax, 0x2ba93b; adc ch, cl; ret; 
0x00000000004014bd: or eax, 0x2ba969; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x00000000004b3ed0: or eax, 0x34b0303; ret; 
0x000000000046e3d1: or eax, 0x3576e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004b3f04: or eax, 0x35b0303; ret; 
0x00000000004717ca: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000046ea12: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000046e27a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045af1f: or eax, 0x41000000; mov edx, 8; mov eax, ecx; syscall; 
0x000000000045a91a: or eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000440442: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x0000000000473635: or eax, 0x48fad348; test edx, edx; je 0x73660; bsf rax, rdx; ret; 
0x000000000044017a: or eax, 0x583a1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ed65: or eax, 0x597b6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043eb0a: or eax, 0x59a11; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d235: or eax, 0x5b2e6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000433867: or eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444b48: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444498: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042a9f7: or eax, 0x83480000; ret 0x4910; 
0x000000000043dd71: or eax, 0x83480000; ret 0xe910; 
0x000000000042aa25: or eax, 0x83480000; ret 0xeb10; 
0x0000000000490e52: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000474312: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x00000000004947dd: or eax, 0xce0fffa; cli; call qword ptr [rax + 0x13]; 
0x0000000000494819: or eax, 0xd30fffa; cli; call rax; 
0x00000000004947d9: or eax, 0xd3afffa; cli; jmp rax; 
0x0000000000494699: or eax, 0xd6cfffa; cli; call qword ptr [rdx]; 
0x000000000049ef99: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000454345: or eax, 0xea810000; ret 0; 
0x000000000043543a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435443: or eax, 0xf7f0ff3; ret; 
0x0000000000469281: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044c07b: or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000044962d: or eax, 0xffffffff; ret; 
0x000000000042c079: or eax, 1; ret; 
0x00000000004b3c6d: or eax, dword ptr [r8]; adc byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rbp - 0x49780000], al; cld; jmp qword ptr [rdx]; 
0x00000000004b4f6e: or eax, dword ptr [rax]; adc al, 0; add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004b3c6e: or eax, dword ptr [rax]; adc byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rbp - 0x49780000], al; cld; jmp qword ptr [rdx]; 
0x00000000004ac2e5: or eax, dword ptr [rax]; add al, ch; xor esi, esi; jmp qword ptr [rax]; 
0x00000000004b409d: or eax, dword ptr [rax]; add byte ptr [rax + rax], bl; add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x000000000047c9ab: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0x28403; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000042abd7: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043df11: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ac05: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004b37ec: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b45ea: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rsi + rcx*4 - 0x10440000], dh; cld; jmp qword ptr [rdx + 5]; 
0x000000000044a6a1: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044a6a1: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x00000000004b212e: or eax, dword ptr [rax]; add byte ptr [rax], r8b; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x0000000000461929: or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000045e2c9: or eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004721ca: or eax, dword ptr [rax]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x892]; cmove rax, rdx; ret; 
0x00000000004b427a: or eax, dword ptr [rax]; sbb al, 0; add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004ad140: or eax, dword ptr [rdx]; jae 0xad14e; ret; 
0x00000000004b521a: or eax, dword ptr [rdx]; ret 0xe0a; 
0x00000000004339e7: or eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440557: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000047fac3: or eax, edi; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000044055e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004845fb: or eax, edx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000418c34: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000458f04: or ebp, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; jp 0x58f05; jmp qword ptr [rsi + 0xf]; 
0x00000000004b4aa9: or ebp, edi; call qword ptr [rbx + 1]; 
0x000000000041321d: or ebp, edx; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400aec: or ebx, dword ptr [rbp - 0x41]; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000460711: or ebx, dword ptr [rdi + 0x25]; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000435603: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004150a6: or ebx, esi; ret; 
0x0000000000415f87: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000423bff: or ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000413f97: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x0000000000446fcc: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048d144: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000410f18: or ecx, dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x0000000000490ecf: or ecx, dword ptr [rax - 0x7d]; ret 0x4810; 
0x00000000004828e3: or ecx, dword ptr [rbp + 0x39]; ret 0x860f; 
0x000000000048f3b4: or ecx, dword ptr [rbx + 0x74c08507]; add eax, 0xffff50e9; push rbx; ret; 
0x0000000000470a05: or ecx, dword ptr [rdi]; or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004264e7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c070: or ecx, esi; sub rax, rcx; je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x0000000000484fcb: or edi, 0x8548fffe; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000444233: or edi, edi; loope 0x4429d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444853: or edi, edi; loope 0x448bd; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000041253f: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000044a659: or edx, 0x40; mov eax, ecx; syscall; 
0x0000000000440bbf: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743fb: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004736e0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000494a29: or edx, edi; call qword ptr [rax]; 
0x00000000004948a9: or edx, edi; call qword ptr [rdx + 9]; 
0x00000000004948a9: or edx, edi; call qword ptr [rdx + 9]; cli; call rdx; 
0x00000000004948ad: or edx, edi; call rdx; 
0x00000000004948ad: or edx, edi; call rdx; or dl, bh; call qword ptr [rdx + 8]; 
0x00000000004949e9: or edx, edi; jmp qword ptr [rax]; 
0x000000000048cd25: or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004b444e: or esi, dword ptr [r8 + rax]; add byte ptr [rax], al; sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x00000000004b444f: or esi, dword ptr [rax + rax]; add byte ptr [rax], al; sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x0000000000446fca: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000484463: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000447d33: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435523: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000045b094: or esi, ebx; ret; 
0x0000000000413701: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000044bd33: or esp, dword ptr [rdi]; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x00000000004b2d99: or esp, edi; jmp qword ptr [rax]; 
0x000000000044a658: or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000435672: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x0000000000435602: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000042a961: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435592: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000435522: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004b5219: or r8d, dword ptr [r10]; ret 0xe0a; 
0x00000000004b37eb: or r8d, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x48000080], bh; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b4279: or r8d, dword ptr [r8]; sbb al, 0; add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x0000000000457c10: or r9b, byte ptr [r8 + 0x39]; ret 0x1176; 
0x00000000004b3f37: or rax, 0x1370303; ret; 
0x00000000004b3ecf: or rax, 0x34b0303; ret; 
0x00000000004b3f03: or rax, 0x35b0303; ret; 
0x000000000046ea11: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000046e279: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044962c: or rax, 0xffffffffffffffff; ret; 
0x00000000004b4f6d: or rax, qword ptr [r8]; adc al, 0; add byte ptr [rax], al; cmp byte ptr [rax + 0x35b80000], bl; std; jmp qword ptr [rcx]; 
0x00000000004b409c: or rax, qword ptr [rax]; add byte ptr [rax + rax], bl; add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x00000000004b212d: or rax, qword ptr [rax]; add byte ptr [rax], r8b; add al, bh; imul eax, dword ptr [rax], 0xfbc86800; jmp qword ptr [rbx + 8]; 
0x00000000004ad13f: or rax, qword ptr [rdx]; jae 0xad14e; ret; 
0x0000000000440556: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044055d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004845fa: or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000004264e6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c06f: or rcx, rsi; sub rax, rcx; je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x0000000000440bbe: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004743fa: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004736df: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000484462: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000495728: out 0x3e, al; sti; call qword ptr [rsi + 0x3e]; 
0x0000000000410cca: out 0x41, al; call qword ptr [rbp + 0x38]; 
0x0000000000480e99: out 0x41, al; cmp eax, eax; je 0x80de6; sub eax, r8d; ret; 
0x000000000044bec0: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4becc; ret; 
0x000000000046f682: out 0x41, eax; call qword ptr [rdi + 0x38]; 
0x000000000048daf5: out 0x41, eax; call rdi; 
0x0000000000486779: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000484484: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000469b05: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004697d0: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x00000000004706dd: out 0x48, al; mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000423768: out 0x48, eax; sub eax, 0x10; ret; 
0x0000000000447c3b: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x000000000042f606: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045f5fc: out 0x4c, al; mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000042f436: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f532: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47e: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045f602: out 0x4c, eax; mov edx, edi; call qword ptr [rax + 0x38]; 
0x00000000004174f7: out 0x4d, eax; lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x000000000046ffa5: out 0x74, eax; xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000489a31: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x0000000000489b0d: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x0000000000489917: out 0x89, al; out dx, eax; call rax; 
0x0000000000413015: out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000043d236: out 0xb2, al; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044937f: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000004a7a40: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000048d13a: out 0xe8, al; adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004061e8: out 0xe8, eax; ret 0x1a7; 
0x00000000004506e0: out 0xe8, eax; retf 0xfd02; jmp qword ptr [rsi + 0x2e]; 
0x00000000004481e4: out 0xf0, al; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000434e0a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434e8a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004a9768: out 0xf5, eax; mov ch, 0xab; ret; 
0x000000000048f5d3: out 0xf7, eax; jmp qword ptr [rsi + 0x2e]; 
0x000000000049447d: out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x0000000000494a65: out 0xf9, al; jmp qword ptr [rax]; 
0x0000000000421a63: out 0xff, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000461532: out 0xff, eax; dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x000000000046a4bf: out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6a4d8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000475fc6: out 2, eax; add byte ptr [rax + 9], cl; ret 0x850f; 
0x000000000047f8e5: out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x00000000004364c7: out 5, al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436347: out 5, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000456fee: out dx, al; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000418195: out dx, al; call 0x4bf70; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000495724: out dx, al; cmp eax, 0x3ee6fffb; sti; call qword ptr [rsi + 0x3e]; 
0x000000000048bf4e: out dx, al; ja 0x8c069; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000424b2e: out dx, al; jae 0x24b31; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x0000000000435210: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004499fd: out dx, al; mov edi, ebx; mov eax, 1; syscall; 
0x000000000044992d: out dx, al; mov edi, ebx; xor eax, eax; syscall; 
0x000000000042f60a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000473c50: out dx, al; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000045df8d: out dx, al; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040e10c: out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000423e72: out dx, al; mov rdi, rax; call rcx; 
0x000000000044a5f8: out dx, al; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004148b8: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004143ed: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000043521a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043f66e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000422823: out dx, al; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000041f9de: out dx, al; ret; 
0x000000000040ea75: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000494ab9: out dx, al; stc; jmp qword ptr [rax]; 
0x00000000004b2869: out dx, al; sti; jmp qword ptr [rdx]; 
0x00000000004306a0: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd0: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047d1ec: out dx, al; xor eax, eax; call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000004330ed: out dx, eax; adc al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bce: out dx, eax; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004181f9: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000418251: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000430854: out dx, eax; and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x000000000046fe52: out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000489a33: out dx, eax; call qword ptr [rax]; 
0x0000000000411097: out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000489b0f: out dx, eax; call qword ptr [rcx]; 
0x00000000004231f7: out dx, eax; call rax; 
0x0000000000473f72: out dx, eax; call rbx; 
0x00000000004b45f5: out dx, eax; cld; jmp qword ptr [rdx + 5]; 
0x0000000000484514: out dx, eax; cmp cx, 0x7fff; je 0x84504; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000435290: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000430763: out dx, eax; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a4: out dx, eax; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd93: out dx, eax; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd4: out dx, eax; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040e10f: out dx, eax; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044a5fb: out dx, eax; mov eax, 9; syscall; 
0x0000000000412dbd: out dx, eax; mov eax, r9d; syscall; 
0x000000000042f43a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f536: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f482: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004740c3: out dx, eax; mov r9, r14; call rbx; 
0x000000000040e07a: out dx, eax; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000043529a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043f76d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000412133: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411118: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000042c3a3: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c3b8: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c3cd: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000446883: out dx, eax; ret 0xf66; 
0x000000000040e989: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000042d8bc: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d8a5: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d88e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c34a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494a7d: out dx, eax; stc; jmp qword ptr [rax]; 
0x000000000042c61f: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c6dc: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c68b: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048aa57: out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000043d67e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047f43e: outsb dx, byte ptr [rsi]; adc eax, 0x8948fffa; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004b257d: outsb dx, byte ptr [rsi]; add byte ptr [rax], al; mov al, 0xe0; sti; jmp qword ptr [rdi]; 
0x0000000000444cae: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000420cb6: outsb dx, byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004852d7: outsb dx, byte ptr [rsi]; and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004852ce: outsb dx, byte ptr [rsi]; and eax, dword ptr [rax]; jae 0x852df; mov rdx, qword ptr [rip + 0x236e9e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004a75cc: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004a9343: outsb dx, byte ptr [rsi]; ja 0xa92c9; ret 0x48f; 
0x000000000047d710: outsb dx, byte ptr [rsi]; or byte ptr [rax + 1], cl; ret; 
0x000000000046e3d2: outsb dx, byte ptr [rsi]; push rdi; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004a7084: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x0000000000423216: outsb dx, byte ptr [rsi]; sar ch, cl; jmp qword ptr [rsi + 0xf]; 
0x00000000004af789: outsb dx, byte ptr [rsi]; stc; call qword ptr [rbx + 4]; 
0x00000000004940f9: outsb dx, byte ptr [rsi]; stc; jmp qword ptr [rax]; 
0x000000000044721c: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000419a72: outsd dx, dword ptr [rsi]; and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000042d438: outsd dx, dword ptr [rsi]; call 0xf69bcf1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045ac0f: outsd dx, dword ptr [rsi]; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000438a7c: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042d41d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d21d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004250d8: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438ffe: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000042d39d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044a55d: outsd dx, dword ptr [rsi]; jbe 0x4a55b; jmp qword ptr [rsi + 0x2e]; 
0x000000000042d0e7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d1e7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000438bd4: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000042d31d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d11d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d75d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000042d6bd: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000047319a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004444f6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042cf4d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d01d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444b46: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444496: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004444d6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x444e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000462d3d: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000041ac3a: outsd dx, dword ptr [rsi]; ret 0x4466; 
0x0000000000465abd: outsd dx, dword ptr [rsi]; ret 0x4ce8; 
0x00000000004a7a46: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000041a672: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000462d66: outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x0000000000465a99: outsd dx, dword ptr [rsi]; ret 0xe583; 
0x00000000004731ea: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000044682c: outsd dx, dword ptr [rsi]; ret; 
0x000000000042d77d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d89e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d6dd: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d81d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000462d04: outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000004940fd: outsd dx, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x0000000000424e0b: outsd dx, dword ptr [rsi]; sub dword ptr [rax], eax; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004a7a45: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000472cfd: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x72d60; xor eax, eax; ret; 
0x00000000004746a4: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x000000000047468f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000440a5b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x0000000000472cfc: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x72d60; xor eax, eax; ret; 
0x0000000000440a5a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x00000000004a8e45: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000004a8e46: pcmpeqw mm5, qword ptr [rbp - 0x5f]; mov cs, edi; ret 0x8b36; 
0x0000000000415f8b: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000446cb0: pcmpistri xmm1, xmm1, 0x3a; movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000485204: pcmpistri xmm3, xmmword ptr [rdi], 0x12; jae 0x85200; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000447f46: pextrw edi, mm0, 0x77; ret; 
0x000000000043ed5e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; mov dh, 0x97; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d22e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; out 0xb2, al; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044043c: pmovmskb eax, mm0; test eax, eax; je 0x40450; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b986: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472d02: pmovmskb eax, mm1; test eax, eax; jne 0x72d60; xor eax, eax; ret; 
0x0000000000472cd2: pmovmskb eax, mm1; test eax, eax; jne 0x72d80; xor eax, eax; ret; 
0x000000000044043b: pmovmskb eax, xmm0; test eax, eax; je 0x40450; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b985: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472d01: pmovmskb eax, xmm1; test eax, eax; jne 0x72d60; xor eax, eax; ret; 
0x0000000000472cd1: pmovmskb eax, xmm1; test eax, eax; jne 0x72d80; xor eax, eax; ret; 
0x0000000000440a5f: pmovmskb edx, mm4; test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x0000000000440a5e: pmovmskb edx, xmm4; test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x00000000004b46d5: pop qword ptr [rax]; add al, ch; cli; cld; call qword ptr [rbx]; 
0x00000000004b472d: pop qword ptr [rax]; add al, dl; cld; cld; call qword ptr [rax]; 
0x0000000000417265: pop qword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000457ce5: pop qword ptr [rcx + 0x26]; add al, ch; ret 0xfc8c; 
0x000000000044be75: pop r10; ret; 
0x000000000044a791: pop r12; jmp rax; 
0x000000000044a776: pop r12; mov esi, 2; jmp rax; 
0x00000000004207d9: pop r12; pop r13; pop r14; jmp rax; 
0x0000000000422d5c: pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000421a06: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000040268e: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000040069f: pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004101c9: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000410a5e: pop r12; pop r13; pop r14; ret; 
0x000000000040db59: pop r12; pop r13; ret; 
0x0000000000405e64: pop r12; ret; 
0x00000000004207db: pop r13; pop r14; jmp rax; 
0x0000000000422d5e: pop r13; pop r14; jmp rcx; 
0x0000000000421a08: pop r13; pop r14; pop r15; jmp rax; 
0x0000000000402690: pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a1: pop r13; pop r14; pop r15; ret; 
0x00000000004101cb: pop r13; pop r14; pop rbp; ret; 
0x0000000000410a60: pop r13; pop r14; ret; 
0x000000000040db5b: pop r13; ret; 
0x00000000004207dd: pop r14; jmp rax; 
0x0000000000422d60: pop r14; jmp rcx; 
0x0000000000421a0a: pop r14; pop r15; jmp rax; 
0x00000000004872de: pop r14; pop r15; pop rbp; ret; 
0x00000000004006a3: pop r14; pop r15; ret; 
0x00000000004101cd: pop r14; pop rbp; ret; 
0x0000000000410a62: pop r14; ret; 
0x0000000000421a0c: pop r15; jmp rax; 
0x0000000000402694: pop r15; pop rbp; ret; 
0x00000000004006a5: pop r15; ret; 
0x00000000004b1025: pop rax; add byte ptr [rax], al; sbb byte ptr [rax], dh; cli; jmp qword ptr [rdi + 0x11]; 
0x00000000004af594: pop rax; add byte ptr ds:[rax], al; cwde; xchg eax, esi; clc; call qword ptr [rax]; 
0x000000000041ef84: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000045d663: pop rax; idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000045d62d: pop rax; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000481aac: pop rax; jmp qword ptr [rax]; 
0x00000000004b4458: pop rax; loope 0xb4457; jmp qword ptr [rsi]; 
0x00000000004119c9: pop rax; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004122d4: pop rax; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000041a5c1: pop rax; or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000049209d: pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x00000000004b4a38: pop rax; or ch, bh; call qword ptr [rax]; 
0x000000000040dac6: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000481b66: pop rax; pop rdx; pop rbx; ret; 
0x00000000004005af: pop rax; ret; 
0x00000000004940b5: pop rax; stc; jmp qword ptr [rax]; 
0x00000000004b1768: pop rax; xchg eax, ebp; cli; call qword ptr [rcx]; 
0x0000000000481d9b: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x00000000004821cb: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x00000000004b1481: pop rbp; add byte ptr [rax], al; je 0xb1481; jmp rax; 
0x00000000004721aa: pop rbp; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000416fa0: pop rbp; jmp rax; 
0x00000000004587e7: pop rbp; mov al, 0xe8; ret 0xfc81; 
0x00000000004754d8: pop rbp; mov eax, 0x101; syscall; 
0x0000000000486b93: pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400aab: pop rbp; mov edi, 0x6babd0; jmp rax; 
0x00000000004134dd: pop rbp; movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x000000000044a790: pop rbp; pop r12; jmp rax; 
0x000000000044a775: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x00000000004207d8: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000422d5b: pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000421a05: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000040069e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000410a5d: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040db58: pop rbp; pop r12; pop r13; ret; 
0x0000000000405e63: pop rbp; pop r12; ret; 
0x00000000004207dc: pop rbp; pop r14; jmp rax; 
0x0000000000422d5f: pop rbp; pop r14; jmp rcx; 
0x0000000000421a09: pop rbp; pop r14; pop r15; jmp rax; 
0x0000000000402691: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a2: pop rbp; pop r14; pop r15; ret; 
0x00000000004101cc: pop rbp; pop r14; pop rbp; ret; 
0x0000000000410a61: pop rbp; pop r14; ret; 
0x00000000004843f8: pop rbp; pop rbx; ret; 
0x0000000000400ab8: pop rbp; ret; 
0x00000000004940c1: pop rbp; stc; push qword ptr [rax + 0x5e]; stc; jmp rax; 
0x00000000004a6618: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004482f2: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000448296: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004492f1: pop rbx; cld; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000004a6616: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000416ee4: pop rbx; jmp rax; 
0x000000000047fca7: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004482e1: pop rbx; mov eax, eax; ret; 
0x0000000000410ebf: pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x000000000046585d: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000417a29: pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000412098: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004857bb: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000044a787: pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000041b443: pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x00000000004101c8: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000457c6c: pop rbx; pop r12; ret; 
0x000000000048aad9: pop rbx; pop r14; ret; 
0x0000000000416f9f: pop rbx; pop rbp; jmp rax; 
0x00000000004706e1: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000044a774: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x00000000004207d7: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000422d5a: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000410a94: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040db57: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000405e62: pop rbx; pop rbp; pop r12; ret; 
0x0000000000401c86: pop rbx; pop rbp; ret; 
0x00000000004a9900: pop rbx; ret 0x6f9; 
0x0000000000449489: pop rbx; ret 4; 
0x0000000000400e68: pop rbx; ret; 
0x00000000004885fc: pop rbx; sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000044e170: pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x00000000004b52b1: pop rbx; std; jmp qword ptr [rcx + 9]; 
0x00000000004b5299: pop rbx; std; jmp qword ptr [rcx]; 
0x0000000000405e7e: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004179f2: pop rbx; xor edx, edx; jmp rax; 
0x00000000004b1211: pop rcx; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004a75c6: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004965f0: pop rcx; je 0x965ee; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x0000000000438bd5: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004385a8: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000048b852: pop rcx; or dword ptr [rbx], esp; add byte ptr [rax], cl; ret; 
0x00000000004316c3: pop rcx; sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fdfd: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000460712: pop rdi; and eax, 0x48b4800; clc; jmp rax; 
0x000000000042f9d9: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e9: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004a8bbe: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000421a0d: pop rdi; jmp rax; 
0x00000000004a7b81: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x000000000044a955: pop rdi; or byte ptr [rcx - 0xa], al; ret; 
0x000000000048b84b: pop rdi; or dword ptr [rbx], esp; add byte ptr [rax], cl; mov byte ptr [rip + 0x230959], 8; ret; 
0x000000000042f609: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f439: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f535: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f481: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000402695: pop rdi; pop rbp; ret; 
0x00000000004006a6: pop rdi; ret; 
0x00000000004940c9: pop rdi; stc; call qword ptr [rax + 0x61]; 
0x000000000047cb8b: pop rdi; test rcx, rcx; jne 0x7d166; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000484d99: pop rdx; add al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004b120d: pop rdx; add byte ptr [rax], al; jo 0xb126b; cli; jmp qword ptr [rsi + 0xa]; 
0x000000000042b266: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x0000000000482612: pop rdx; cdq; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a87a1: pop rdx; je 0xa8768; ret 0xacfc; 
0x00000000004a75c4: pop rdx; jp 0xa7620; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000416de5: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004a9767: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x000000000044be74: pop rdx; pop r10; ret; 
0x0000000000481b67: pop rdx; pop rbx; ret; 
0x000000000044be99: pop rdx; pop rsi; ret; 
0x000000000044be76: pop rdx; ret; 
0x000000000043fcfe: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000449029: pop rsi; add byte ptr [rax], al; add al, ch; sahf; mov edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000047fb6e: pop rsi; and al, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000484d29: pop rsi; and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004207de: pop rsi; jmp rax; 
0x0000000000422d61: pop rsi; jmp rcx; 
0x000000000046bfbe: pop rsi; mov dl, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000421a0b: pop rsi; pop r15; jmp rax; 
0x0000000000402693: pop rsi; pop r15; pop rbp; ret; 
0x00000000004006a4: pop rsi; pop r15; ret; 
0x00000000004101ce: pop rsi; pop rbp; ret; 
0x0000000000410a63: pop rsi; ret; 
0x00000000004a78fc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x00000000004940c5: pop rsi; stc; jmp rax; 
0x0000000000413184: pop rsi; sub al, byte ptr [rax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000043d890: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042b564: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004b1401: pop rsp; add byte ptr [rax], al; sbb al, 0x74; cli; call qword ptr [rdx]; 
0x000000000043e590: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x000000000041d34b: pop rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b0e: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9c: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004af624: pop rsp; cmc; clc; call qword ptr [rsi + 0x16]; 
0x000000000044a792: pop rsp; jmp rax; 
0x00000000004acdc4: pop rsp; jne 0xacdbd; call qword ptr [rdi + 2]; 
0x0000000000419f85: pop rsp; mov eax, dword ptr [rip + 0x2a1de4]; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x000000000044a777: pop rsp; mov esi, 2; jmp rax; 
0x00000000004207da: pop rsp; pop r13; pop r14; jmp rax; 
0x0000000000422d5d: pop rsp; pop r13; pop r14; jmp rcx; 
0x0000000000421a07: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x000000000040268f: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a0: pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004101ca: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000410a5f: pop rsp; pop r13; pop r14; ret; 
0x000000000040db5a: pop rsp; pop r13; ret; 
0x0000000000401e33: pop rsp; ret; 
0x0000000000410174: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000474abf: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000004b549d: popfq; add byte ptr [rax], al; push rax; js 0xb54a0; jmp qword ptr [rsi]; 
0x000000000047f374: popfq; and eax, dword ptr [rax]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d027]; mov qword ptr [rsi], rax; ret; 
0x000000000046a10f: popfq; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000044c927: popfq; jmp qword ptr [rsi]; 
0x000000000048c61e: popfq; ret 0xf45; 
0x00000000004affc9: popfq; stc; call qword ptr [rbx]; 
0x0000000000435362: psllq mm1, qword ptr [r15]; jg 0x35377; ret; 
0x0000000000437e82: psllq mm1, qword ptr [r15]; jg 0x37e97; ret; 
0x0000000000435363: psllq mm1, qword ptr [rdi]; jg 0x35377; ret; 
0x0000000000437e83: psllq mm1, qword ptr [rdi]; jg 0x37e97; ret; 
0x0000000000444376: psllq mm1, qword ptr [rdi]; jg 0x44382; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004443d7: psllq mm1, qword ptr [rdi]; jg 0x443e3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004444d8: psllq mm1, qword ptr [rdi]; jg 0x444e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444a06: psllq mm1, qword ptr [rdi]; jg 0x44a12; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444a87: psllq mm1, qword ptr [rdi]; jg 0x44a93; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444b88: psllq mm1, qword ptr [rdi]; jg 0x44b94; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004946cd: psubd mm7, mm7; mov dl, 0xe; cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x000000000049401d: psubw mm7, mm7; add byte ptr [rdi], ah; stc; jmp qword ptr [rax]; 
0x0000000000458700: push -0x17000001; test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000004b4aa4: push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b48a4: push -0x27ffff6f; add al, 0xfd; jmp rdx; 
0x0000000000418193: push -0x2a171115; cmp eax, 0x1f0f0003; add byte ptr [rax], r8b; mov rax, -1; ret; 
0x00000000004a75ca: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000045db22: push -0x7c000003; ret; 
0x0000000000444c94: push -0x9ffffff; ret 0x7501; 
0x000000000044d4a2: push -0xc; add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x0000000000496029: push -5; call rax; 
0x0000000000496029: push -5; call rax; push -5; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x0000000000496035: push -5; jmp qword ptr [rax + 0x6a]; 
0x000000000049602d: push -5; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x00000000004940e9: push -7; jmp qword ptr [rax + 0x6b]; 
0x0000000000473df3: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045320a: push 0; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044e890: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004b2ba4: push 0x18000074; idiv bl; jmp qword ptr [rbx]; 
0x00000000004abca4: push 0x28000005; wait; cmc; call rax; 
0x0000000000495910: push 0x3d; sti; call qword ptr [rsi + 0x3d]; 
0x000000000041a9f4: push 0x48002a13; add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000449c3c: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004124ed: push 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000479a75: push 0x48b4901; and al, 0x83; ret; 
0x000000000045870c: push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000047125b: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000496015: push 0x6894fffb; sti; call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x00000000004940e1: push 0x6980fff9; stc; push qword ptr [rax + 0x6a]; stc; jmp qword ptr [rax + 0x6b]; 
0x000000000049601d: push 0x6b30fffb; sti; call qword ptr [rax]; 
0x00000000004a9342: push 0x6e; ja 0xa92c9; ret 0x48f; 
0x0000000000471225: push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x00000000004b40a4: push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x0000000000481efc: push 0xc334864; and eax, 0x28; jne 0x81f3e; add rsp, 0x78; ret; 
0x0000000000473dee: push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473d74: push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000494f4f: push qword ptr [rax + 0x20fffa2a]; sub bh, dl; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494d5b: push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x0000000000494b0b: push qword ptr [rax + 0x35]; cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000412134: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411119: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004947fb: push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x00000000004945e3: push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x00000000004940c3: push qword ptr [rax + 0x5e]; stc; jmp rax; 
0x00000000004940e7: push qword ptr [rax + 0x6a]; stc; jmp qword ptr [rax + 0x6b]; 
0x000000000049431f: push qword ptr [rax + 0x70fff9b0]; mov dl, 0xf9; call qword ptr [rax - 0x4c]; 
0x00000000004a3a07: push qword ptr [rax + 0x70fffca8]; test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x0000000000494a57: push qword ptr [rax + 3]; cli; jmp rax; 
0x0000000000494853: push qword ptr [rax + 4]; cli; jmp rax; 
0x00000000004ab1df: push qword ptr [rax + rax - 2]; jmp rsp; 
0x0000000000449de2: push qword ptr [rax + rbp*4 + 0x49]; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000494423: push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x000000000049459b: push qword ptr [rax - 0x2b]; stc; push qword ptr [rax - 0x7f000640]; ret; 
0x0000000000495143: push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x000000000049430b: push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x000000000049430b: push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x0000000000494387: push qword ptr [rax - 0x4d]; stc; call qword ptr [rax - 0x4b]; 
0x0000000000494323: push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x00000000004a3a17: push qword ptr [rax - 0x4f000358]; test al, 0xfc; call qword ptr [rax - 0x57]; 
0x00000000004a39ff: push qword ptr [rax - 0x4f000358]; test al, 0xfc; push qword ptr [rax + 0x70fffca8]; test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x000000000049429f: push qword ptr [rax - 0x4f]; stc; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x000000000049433f: push qword ptr [rax - 0x50]; stc; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x00000000004943cf: push qword ptr [rax - 0x57]; stc; inc eax; stosb byte ptr [rdi], al; stc; call qword ptr [rax]; 
0x0000000000495103: push qword ptr [rax - 0x58]; cli; inc eax; test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x00000000004943e3: push qword ptr [rax - 0x65]; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x00000000004942cf: push qword ptr [rax - 0x6f000648]; mov edx, 0xbc90fff9; stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x0000000000494303: push qword ptr [rax - 0x6f00064e]; mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x00000000004940db: push qword ptr [rax - 0x6f0006b0]; push 0x6980fff9; stc; push qword ptr [rax + 0x6a]; stc; jmp qword ptr [rax + 0x6b]; 
0x0000000000494153: push qword ptr [rax - 0x72]; stc; jmp qword ptr [rax - 0x71]; 
0x000000000049459f: push qword ptr [rax - 0x7f000640]; ret; 
0x000000000049518f: push qword ptr [rax - 0xd]; cli; call qword ptr [rax - 0x4f00050d]; cli; call rax; 
0x000000000049516f: push qword ptr [rax - 0xe]; cli; call qword ptr [rax - 0x4f00050e]; cli; call rax; 
0x0000000000493f2b: push qword ptr [rax - 3]; clc; inc dword ptr [rax]; std; clc; jmp qword ptr [rax]; 
0x00000000004951df: push qword ptr [rax]; clc; cli; inc dword ptr [rax - 8]; cli; jmp qword ptr [rax - 8]; 
0x0000000000495187: push qword ptr [rax]; cli; call qword ptr [rax - 0xd]; 
0x0000000000495163: push qword ptr [rax]; cli; call qword ptr [rax - 0xe]; 
0x0000000000495163: push qword ptr [rax]; cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x000000000049502b: push qword ptr [rax]; cli; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x00000000004951b7: push qword ptr [rax]; idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x000000000049601f: push qword ptr [rax]; imul edi, ebx, -1; adc byte ptr [rbx - 5], ch; push rax; push -5; call rax; 
0x0000000000495123: push qword ptr [rax]; int1; cli; inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; 
0x000000000048ae1f: push qword ptr [rax]; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048dfbd: push qword ptr [rax]; jne 0x8dfe8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ee1d: push qword ptr [rax]; jne 0x8ee48; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000004942a3: push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x0000000000494287: push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x000000000049432b: push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494343: push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x00000000004950f3: push qword ptr [rax]; movabs dword ptr [0xa5d0fffaa480fffa], eax; cli; jmp qword ptr [rax]; 
0x00000000004940f7: push qword ptr [rax]; outsb dx, byte ptr [rsi]; stc; jmp qword ptr [rax]; 
0x000000000049458b: push qword ptr [rax]; sar cl, 1; inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x0000000000494d13: push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000446618: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x00000000004b3ef7: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000042c029: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x0000000000471228: push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x0000000000417a5d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000047124e: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000473633: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x0000000000490c39: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x0000000000418290: push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044961c: push qword ptr [rbx + 1]; ret; 
0x00000000004b3ec3: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004181f4: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004714a5: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a4d9b: push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x00000000004a4d3f: push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; jmp rax; 
0x00000000004a4d93: push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x000000000049418b: push qword ptr [rcx + 0x41fff994]; xchg eax, ebp; stc; call rcx; 
0x0000000000494777: push qword ptr [rcx + rdx]; cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000494197: push qword ptr [rcx - 0x6a]; stc; call qword ptr [rcx]; 
0x000000000045e4a4: push qword ptr [rcx]; fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000047a15f: push qword ptr [rcx]; fucomi st(3); ret 0x1f0f; 
0x000000000041e616: push qword ptr [rcx]; mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000041603f: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004550c3: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044f93d: push qword ptr [rcx]; ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000004490eb: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000475314: push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x00000000004ab1d3: push qword ptr [rdi + rdi*8 - 0x30003]; std; inc dword ptr [rax + rax - 2]; push qword ptr [rax + rax - 2]; jmp rsp; 
0x0000000000494dcb: push qword ptr [rdx + 0x2b]; cli; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x00000000004946af: push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494ba7: push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000049462b: push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494b23: push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x000000000048ae32: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee32: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x0000000000494b43: push qword ptr [rsi]; cli; inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x0000000000494c8f: push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x0000000000451a8c: push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000047523b: push r12; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000452c55: push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f99: push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000417e2e: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416e92: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040ab54: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x00000000004076c5: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000418c41: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000044b149: push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x0000000000493fe0: push rax; adc cl, bh; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x000000000041cd9d: push rax; adc dh, dh; ret 0xf0f; 
0x0000000000493ff0: push rax; adc eax, 0x1690fff9; stc; call rax; 
0x00000000004947e4: push rax; adc edi, edx; jmp rax; 
0x00000000004713e4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000417e2f: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416e93: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b147c: push rax; add byte ptr [rax], al; add byte ptr [rbp + rbx*2], al; add byte ptr [rsp + rsi*2 - 6], cl; jmp rax; 
0x00000000004af98c: push rax; add byte ptr [rax], al; jo 0xaf915; stc; call qword ptr [rax]; 
0x000000000045da7f: push rax; add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000400fb0: push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000046775a: push rax; call 0xffffffff8954775f; ret 0x894c; 
0x000000000044e918: push rax; call rbx; 
0x000000000049517f: push rax; cli; call qword ptr [rax]; 
0x000000000049501b: push rax; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x0000000000495168: push rax; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000494b04: push rax; cli; jmp rax; 
0x000000000046fe54: push rax; cmp byte ptr [rax + 1], cl; ret; 
0x00000000004951ab: push rax; idiv dl; inc dword ptr [rax]; idiv edx; call qword ptr [rax]; 
0x00000000004951c0: push rax; idiv edx; jmp qword ptr [rax - 9]; 
0x0000000000495153: push rax; int1; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x000000000049512c: push rax; int1; cli; jmp qword ptr [rax - 0xf]; 
0x00000000004af7a0: push rax; jae 0xaf79c; call qword ptr [rdi]; 
0x000000000048ae1a: push rax; je 0x8ae3b; cmp dil, 0x30; jne 0x8ae58; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x0000000000494107: push rax; jno 0x94104; jmp rax; 
0x00000000004b54a0: push rax; js 0xb54a0; jmp qword ptr [rsi]; 
0x0000000000471879: push rax; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004942c7: push rax; mov ah, 0xf9; call rax; 
0x0000000000494328: push rax; mov ah, 0xf9; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494284: push rax; mov bl, 0xf9; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x000000000049434b: push rax; mov ch, 0xf9; call rax; 
0x000000000049438c: push rax; mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000423340: push rax; mov ch, byte ptr [rcx]; add dh, dh; ret 0xf02; 
0x00000000004942c0: push rax; mov cl, 0xf9; call qword ptr [rax]; 
0x00000000004942ab: push rax; mov dh, 0xf9; call rax; 
0x0000000000450bc1: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004515bd: push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000489ed6: push rax; or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x00000000004199c2: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000470363: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7037c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000041acea: push rax; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000418c31: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000044b14d: push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041d795: push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000044cf5b: push rax; or dh, dh; ret 0x8902; 
0x000000000041e4e2: push rax; or dh, dh; ret 0xf02; 
0x0000000000488515: push rax; pop rbx; ret; 
0x0000000000496027: push rax; push -5; call rax; 
0x0000000000471224: push rax; push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x0000000000451a8b: push rax; push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000452c54: push rax; push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f98: push rax; push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000495034: push rax; push rcx; cli; jmp qword ptr [rax + 0x53]; 
0x00000000004940a3: push rax; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x000000000044b35c: push rax; push rsi; std; push rbx; ret; 
0x0000000000450bc3: push rax; push rsp; ret; 
0x0000000000414254: push rax; ret 0xfffe; 
0x0000000000494000: push rax; sbb bh, cl; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000418c36: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000471369: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000471321: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004940dd: push rax; stc; call qword ptr [rax - 0x7f000698]; imul edi, ecx, 0xf96a70ff; jmp qword ptr [rax + 0x6b]; 
0x0000000000493f38: push rax; std; clc; jmp qword ptr [rax]; 
0x00000000004b2d20: push rax; std; sti; jmp qword ptr [rbx]; 
0x0000000000471365: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004ac140: push rax; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004b1750: push rax; xchg eax, ebp; cli; call qword ptr [rdi]; 
0x0000000000494ee4: push rax; xor dl, bh; call rax; 
0x0000000000494d03: push rax; xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x0000000000489eda: push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x000000000048c982: push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004b0d21: push rbp; add byte ptr [rax], al; cld; add edi, edx; jmp qword ptr [rdx]; 
0x000000000048cdf7: push rbp; add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x000000000047fac8: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x00000000004606c7: push rbp; and eax, 0x48b4800; clc; jmp rax; 
0x0000000000410ccd: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000452c56: push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f9a: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000410fb4: push rbp; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000048156c: push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000047523d: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004b5b5e: push rbp; ret; 
0x00000000004441c7: push rbp; syscall; 
0x00000000004441c7: push rbp; syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041828c: push rbp; xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411276: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000004010ff: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047f93f: push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004401c9: push rbx; add dword ptr [rip - 0x75f37500], -0x75; add al, 0x82; sub eax, ecx; ret; 
0x0000000000413db8: push rbx; and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdb5ae; jmp qword ptr [rsi + 0x2e]; 
0x00000000004136d8: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000447805: push rbx; jb 0x4780d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000471262: push rbx; je 0x712c0; pop rbp; pop r12; ret; 
0x00000000004712ee: push rbx; je 0x7134c; pop rbp; pop r12; ret; 
0x000000000045a6a0: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a6af; call rax; 
0x000000000047523e: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004136d4: push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000044b35f: push rbx; ret; 
0x0000000000424d29: push rbx; sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x0000000000413bdc: push rbx; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000471213: push rbx; test byte ptr [rdi], 2; mov rbx, rdi; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046e84a: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000413dbc: push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdb5ae; jmp qword ptr [rsi + 0x2e]; 
0x000000000041f2f2: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041b61b: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000041b837: push rcx; adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x000000000044b7fb: push rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041d78b: push rcx; add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000046eb1a: push rcx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046eb88: push rcx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004a7a25: push rcx; call qword ptr [rsi]; 
0x0000000000495035: push rcx; cli; jmp qword ptr [rax + 0x53]; 
0x00000000004957a7: push rcx; cmp al, 0xfb; dec dword ptr [rax + 0x2efffb3d]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x00000000004959d7: push rcx; cmp al, 0xfb; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x000000000045df96: push rcx; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004387af: push rcx; jl 0x387fa; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387b6: push rcx; jl 0x38801; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387bd: push rcx; jl 0x38808; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000438916: push rcx; jl 0x38961; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043891d: push rcx; jl 0x38968; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438924: push rcx; jl 0x3896f; adc dword ptr [rcx + 7], edi; ret; 
0x000000000040d601: push rcx; or byte ptr [rax], al; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000004790f1: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x00000000004790c3: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000415fdb: push rcx; ret 0xffff; 
0x000000000049062b: push rcx; ret; 
0x0000000000402e9b: push rcx; rol byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000041a12d: push rcx; sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000004940a1: push rcx; stc; push rax; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x00000000004448ba: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000004354c9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000446d62: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x46db0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044496c: push rdi; add eax, 0xc478d48; ret; 
0x000000000046e3d3: push rdi; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046e319: push rdi; add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000473968: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000472fa8: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000045d65e: push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000045d66f: push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000042f282: push rdi; call 0xfffffffff0627bd4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2c0: push rdi; call 0xfffffffff0627c12; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2f8: push rdi; call 0xfffffffff0627c4a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f336: push rdi; call 0xfffffffff0627c88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f36e: push rdi; call 0xfffffffff0627cc0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f396: push rdi; call 0xfffffffff0627ce8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3be: push rdi; call 0xfffffffff0627d10; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c52: push rdi; call 0xfffffffff062a5a4; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431c90: push rdi; call 0xfffffffff062a5e2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431cc8: push rdi; call 0xfffffffff062a61a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431d06: push rdi; call 0xfffffffff062a658; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d3e: push rdi; call 0xfffffffff062a690; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d66: push rdi; call 0xfffffffff062a6b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431d8e: push rdi; call 0xfffffffff062a6e0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2c8: push rdi; clc; ret; 
0x000000000042f440: push rdi; cld; ret; 
0x000000000042ff67: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434da9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000046f685: push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000042d31e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d11e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000449626: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004496b6: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449966: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000434d29: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f9d5: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7e5: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434b7a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ffa6: push rdi; loope 0x2fff5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffee: push rdi; loope 0x3003d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043002c: push rdi; loope 0x3007b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430064: push rdi; loope 0x300b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300a2: push rdi; loope 0x300f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004300da: push rdi; loope 0x30129; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430102: push rdi; loope 0x30151; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432976: push rdi; loope 0x329c5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329be: push rdi; loope 0x32a0d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004329fc: push rdi; loope 0x32a4b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a34: push rdi; loope 0x32a83; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432a72: push rdi; loope 0x32ac1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432aaa: push rdi; loope 0x32af9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432ad2: push rdi; loope 0x32b21; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d3e8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d268: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d368: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d2e8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000416d70: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416da4: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000434c0a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000412130: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411115: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004843ea: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000048822a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004843f1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000048f5a5: push rdi; or dh, byte ptr [rdi - 0x2776b701]; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b2e6: push rdi; or dh, dh; ret 0xf02; 
0x0000000000444b50: push rdi; or eax, 0x1c478d48; ret; 
0x000000000042f605: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f435: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f531: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f47d: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042d75e: push rdi; ret 0xff3; 
0x000000000042d6be: push rdi; ret; 
0x000000000045d673: push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000419a50: push rdi; sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000416d68: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004af771: push rdi; stc; jmp qword ptr [rbx + 0x17]; 
0x0000000000430167: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004b5231: push rdi; std; call qword ptr [rdx]; 
0x000000000042f98a: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fd67: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004318c5: push rdi; sub eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000411b08: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000047319b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000472d08: push rdi; xor eax, eax; ret; 
0x00000000004946b8: push rdx; adc edx, edi; jmp rdx; 
0x0000000000494bb0: push rdx; cmp dl, bh; jmp rdx; 
0x000000000044be81: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000431bf9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431aa9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431959: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431809: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431569: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431419: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431029: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x633e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ed9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x637d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ae9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63929]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430999: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f229: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65029]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0d9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65179]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x652c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65419]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ece9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65569]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x656b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65809]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e8f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65959]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65aa9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e659: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65bf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e509: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65d49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e269: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65fe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e119: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66139]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfc9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66289]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004948b4: push rdx; or dl, bh; call rdx; 
0x00000000004948ac: push rdx; or edx, edi; call rdx; 
0x00000000004948ac: push rdx; or edx, edi; call rdx; or dl, bh; call qword ptr [rdx + 8]; 
0x00000000004104b5: push rdx; ret; 
0x0000000000450bbd: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004940a5: push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x0000000000494dcf: push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x0000000000444ba7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004444f7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444456: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x44466; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444476: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x44486; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042c3a4: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000446ea9: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x46ef7; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004354c2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000041b596: push rsi; add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x0000000000435761: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004357d1: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000446ea2: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x46ef0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000435452: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444965: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444305: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000446f3f: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004356f1: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004448d3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004442a3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000468b78: push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000042c3b9: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f3d6: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd2a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff2a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043012a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3ba: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fd46: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff46: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430146: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f3f2: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fb61: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f599: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f779: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f959: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb39: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f795: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f975: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fb55: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f5b5: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000446d3a: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042ff61: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004a9340: push rsi; cli; push 0x6e; ja 0xa92c9; ret 0x48f; 
0x0000000000434da2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000446156: push rsi; cmc; sub eax, edx; ret; 
0x000000000042cf4e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d01e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434d22: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000446146: push rsi; hlt; sub eax, edx; ret; 
0x0000000000434b72: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000446116: push rsi; int1; sub eax, edx; ret; 
0x00000000004a901d: push rsi; jnp 0xa9036; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x000000000049052a: push rsi; mov ecx, 0x22; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000042cf18: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cfe8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434c92: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434c02: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000444b47: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444497: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004a87a0: push rsi; pop rdx; je 0xa8768; ret 0xacfc; 
0x00000000004444d7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x444e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444b87: push rsi; psllq mm1, qword ptr [rdi]; jg 0x44b94; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004a66e6: push rsi; ret; 
0x0000000000468b91: push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000430161: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f982: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044b35d: push rsi; std; push rbx; ret; 
0x0000000000446d41: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042fd61: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000045da83: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040390e: push rsi; sub eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446126: push rsi; sub eax, edx; ret; 
0x0000000000434ea2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000042c3ce: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494780: push rsp; adc dl, bh; jmp rsp; 
0x00000000004756c1: push rsp; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000004b0b65: push rsp; add byte ptr [rax], al; sbb cl, bh; std; jmp qword ptr [rdx]; 
0x000000000042494b: push rsp; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000048254a: push rsp; and al, 0x10; call rdx; 
0x000000000041d408: push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000040dfe2: push rsp; and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004740b9: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040e072: push rsp; and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000449b3f: push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000475556: push rsp; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000041d341: push rsp; and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b13: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa1: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004512cc: push rsp; and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000449c42: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004144f4: push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000494e74: push rsp; cli; call rsp; 
0x00000000004ab7b1: push rsp; cmc; call qword ptr [rsi]; 
0x00000000004ab7d1: push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004a6485: push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000451a8d: push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000040d31b: push rsp; or byte ptr [rax], al; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000444848: push rsp; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000047523c: push rsp; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000040360a: push rsp; ret 0x4820; 
0x0000000000481471: push rsp; ret 0xeb30; 
0x0000000000450bc4: push rsp; ret; 
0x00000000004940a9: push rsp; stc; call rax; 
0x0000000000494e84: push rsp; sub al, 0xfa; call rsp; 
0x0000000000494e8c: push rsp; sub edi, edx; call rsp; 
0x00000000004a8f6a: push rsp; syscall; 
0x00000000004b4b90: push rsp; xchg eax, esp; add byte ptr [rax], al; jl 0xb4ba5; std; call qword ptr [rax]; 
0x000000000043d550: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x00000000004af8d8: pushfq; add byte ptr [r8], al; je 0xaf958; stc; call rsp; 
0x0000000000461e76: pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000045226a: pushfq; and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x0000000000479c6f: pushfq; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x00000000004174cb: pushfq; and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004767d5: pushfq; clc; dec dword ptr [rax + 0x39]; ret; 
0x0000000000482364: pushfq; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004b3fd8: pushfq; mov byte ptr [rax], al; add byte ptr [rdx + rcx*8], dl; cld; call rdx; 
0x000000000043e250: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aa24: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000048c657: pushfq; ret 0xf45; 
0x00000000004943e9: pushfq; stc; call qword ptr [rax]; 
0x00000000004943e9: pushfq; stc; call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x00000000004b5c71: pushfq; std; jmp qword ptr [rcx]; 
0x00000000004b4ed8: pushfq; xchg eax, edi; add byte ptr [rax], al; je 0xb4f12; std; jmp qword ptr [rdx]; 
0x0000000000435bcd: pxor mm0, qword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000452c53: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f97: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000451a8a: rcl byte ptr [rax + 0x41], cl; push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000045fc8a: rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000493ff8: rcl byte ptr [rdi], 1; stc; call qword ptr [rax]; 
0x0000000000493ff8: rcl byte ptr [rdi], 1; stc; call qword ptr [rax]; sbb ecx, edi; call qword ptr [rax + 0x1a]; 
0x0000000000494240: rcl byte ptr [rdx - 0x6cbf0007], 0xf9; call rax; 
0x00000000004945ec: rcl byte ptr [rdx], 1; cli; jmp qword ptr [rax + 0x12]; 
0x0000000000493fe8: rcl byte ptr [rdx], 1; stc; call qword ptr [rax]; 
0x0000000000493fe8: rcl byte ptr [rdx], 1; stc; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x000000000049425c: rcl byte ptr [rsi - 0x4e670007], 0xf9; jmp qword ptr [rax - 0x4d]; 
0x00000000004943a0: rcl byte ptr [rsi - 0x64ff0007], 0xf9; call qword ptr [rax - 0x64]; 
0x0000000000494594: rcl dl, 1; stc; jmp qword ptr [rax]; 
0x0000000000494194: rcl dword ptr [rbp - 0x698e0007], 1; stc; call qword ptr [rcx]; 
0x00000000004a879f: rcl dword ptr [rsi + 0x5a], cl; je 0xa8768; ret 0xacfc; 
0x000000000047f302: rcl esp, 0x23; add byte ptr [rax], al; jne 0x7f318; mov rax, qword ptr [rip + 0x23d0a0]; ret; 
0x00000000004944e0: rcr al, 0xf9; inc dword ptr [rax + 0x60fff9da]; fdiv st(1), st(0); inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x0000000000472983: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000405e80: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000410ec1: rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; ret; 
0x000000000046585f: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004843f7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000044fb52: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000004127e6: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000040ed66: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000410f6a: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x0000000000410902: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000494008: rcr byte ptr [rcx + rdi*8], 1; call qword ptr [rax]; 
0x00000000004a8bbd: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004b120c: rcr byte ptr [rdx], 1; add byte ptr [rax + 0x59], dh; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004826a9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000043df0c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fb59: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f379: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f769: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ef89: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ea6c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e24c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043da2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f128: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e58c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dd6c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d54c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e72c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f619: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee39: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ff49: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d88c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d9c2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e6c2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e1e2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f51a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fe4a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ea02: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dd02: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d822: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e522: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043f66a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ee8a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000446fe4: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000446fd6: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447d0a: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000041f5d1: rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000040058b: repe cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x00000000004006d7: ret 0; 
0x000000000047b55a: ret 0x101; 
0x000000000049f3a0: ret 0x10; 
0x00000000004843cc: ret 0x114d; 
0x0000000000457c14: ret 0x1176; 
0x000000000047facc: ret 0x1272; 
0x000000000047c663: ret 0x13e9; 
0x000000000048aaf1: ret 0x145; 
0x0000000000483876: ret 0x1474; 
0x00000000004790f8: ret 0x1475; 
0x0000000000475771: ret 0x1477; 
0x00000000004460b8: ret 0x148; 
0x0000000000404874: ret 0x149; 
0x0000000000438b7f: ret 0x14d; 
0x00000000004246d4: ret 0x14eb; 
0x000000000046bae1: ret 0x1674; 
0x000000000040a0ea: ret 0x168; 
0x000000000044951e: ret 0x16e9; 
0x0000000000472fe6: ret 0x1776; 
0x00000000004278aa: ret 0x17; 
0x0000000000438abc: ret 0x180f; 
0x0000000000472d75: ret 0x1876; 
0x000000000040ab62: ret 0x18; 
0x0000000000457c0b: ret 0x1a72; 
0x00000000004061ea: ret 0x1a7; 
0x00000000004a911a: ret 0x1ad4; 
0x00000000004a78ad: ret 0x1b49; 
0x0000000000407d22: ret 0x1b; 
0x000000000048ebbf: ret 0x1be8; 
0x0000000000424d7a: ret 0x1c0; 
0x000000000040f129: ret 0x1ce9; 
0x00000000004a1070: ret 0x1d4; 
0x00000000004a1808: ret 0x1d5; 
0x0000000000400cc1: ret 0x1d89; 
0x000000000040ec22: ret 0x1f0f; 
0x000000000041f2f6: ret 0x1f77; 
0x0000000000459ffd: ret 0x1fe9; 
0x000000000045ac57: ret 0x200; 
0x0000000000449fdc: ret 0x2044; 
0x00000000004240fa: ret 0x20a; 
0x0000000000461537: ret 0x20be; 
0x00000000004760fc: ret 0x2148; 
0x000000000041414d: ret 0x214c; 
0x00000000004136dc: ret 0x2175; 
0x000000000048977a: ret 0x217; 
0x0000000000424e8a: ret 0x224; 
0x000000000047e868: ret 0x2275; 
0x0000000000440e28: ret 0x2288; 
0x000000000049067c: ret 0x22; 
0x00000000004905fa: ret 0x22a4; 
0x000000000042d8c2: ret 0x2373; 
0x0000000000481586: ret 0x23aa; 
0x000000000047f8fa: ret 0x23ce; 
0x00000000004787f2: ret 0x2402; 
0x00000000004a0078: ret 0x24; 
0x000000000044a304: ret 0x24e9; 
0x000000000041688d: ret 0x2501; 
0x0000000000466be4: ret 0x2504; 
0x0000000000424013: ret 0x2575; 
0x0000000000459f88: ret 0x25; 
0x000000000048c4f1: ret 0x25e9; 
0x000000000044c2dc: ret 0x26; 
0x0000000000473676: ret 0x2774; 
0x000000000042f096: ret 0x280f; 
0x0000000000472d65: ret 0x2876; 
0x000000000047e8e7: ret 0x28f5; 
0x0000000000462d3e: ret 0x290f; 
0x000000000040f559: ret 0x2948; 
0x0000000000465c7a: ret 0x2949; 
0x000000000040f920: ret 0x294c; 
0x00000000004139bd: ret 0x294d; 
0x000000000041d588: ret 0x29; 
0x000000000041672a: ret 0x2a55; 
0x000000000041052c: ret 0x2a; 
0x000000000041127a: ret 0x2b48; 
0x000000000042373b: ret 0x2b74; 
0x000000000041f612: ret 0x2b75; 
0x0000000000448182: ret 0x2b77; 
0x00000000004009c5: ret 0x2b8; 
0x000000000048c4df: ret 0x2be9; 
0x0000000000477e7b: ret 0x2c2; 
0x000000000041fe6e: ret 0x2c75; 
0x000000000041ec8a: ret 0x2d1; 
0x000000000046ea55: ret 0x2e66; 
0x0000000000480d30: ret 0x2e8; 
0x000000000044c25e: ret 0x2f75; 
0x00000000004677a5: ret 0x30be; 
0x00000000004a0568: ret 0x33; 
0x0000000000452a74: ret 0x349; 
0x000000000048a890: ret 0x3575; 
0x000000000047b22a: ret 0x3774; 
0x0000000000472fc6: ret 0x3776; 
0x00000000004a89fa: ret 0x3827; 
0x000000000046f8de: ret 0x3873; 
0x0000000000472d55: ret 0x3876; 
0x000000000041733b: ret 0x389; 
0x00000000004a7086: ret 0x38ae; 
0x000000000048e1a2: ret 0x38e8; 
0x0000000000489428: ret 0x3901; 
0x0000000000480fed: ret 0x3934; 
0x000000000046d09f: ret 0x3941; 
0x0000000000411b21: ret 0x3948; 
0x00000000004128dd: ret 0x3949; 
0x000000000041f73c: ret 0x394c; 
0x000000000046874d: ret 0x394d; 
0x0000000000446732: ret 0x3a01; 
0x000000000042d8ab: ret 0x3a73; 
0x0000000000488073: ret 0x3a83; 
0x0000000000447151: ret 0x3b48; 
0x0000000000449cbf: ret 0x3b8; 
0x0000000000414939: ret 0x3c75; 
0x0000000000466941: ret 0x3ce; 
0x00000000004766b8: ret 0x3d01; 
0x000000000047f258: ret 0x3d73; 
0x0000000000420f41: ret 0x3d83; 
0x0000000000480fad: ret 0x3d; 
0x000000000041d32f: ret 0x3de9; 
0x000000000047b08a: ret 0x3e80; 
0x000000000045a40b: ret 0x4002; 
0x0000000000456b48: ret 0x401; 
0x000000000040d2ed: ret 0x4074; 
0x0000000000473c61: ret 0x408d; 
0x000000000044c4aa: ret 0x4101; 
0x000000000045fe08: ret 0x4108; 
0x00000000004605bd: ret 0x4110; 
0x0000000000481486: ret 0x4118; 
0x0000000000481027: ret 0x4134; 
0x0000000000453227: ret 0x415f; 
0x0000000000450c8e: ret 0x41c3; 
0x000000000042652a: ret 0x4266; 
0x00000000004703b3: ret 0x4389; 
0x0000000000405e51: ret 0x4401; 
0x0000000000467ffb: ret 0x4404; 
0x0000000000481806: ret 0x4418; 
0x000000000041ac3b: ret 0x4466; 
0x000000000041e6b3: ret 0x4473; 
0x0000000000483bda: ret 0x44; 
0x00000000004a7b84: ret 0x474c; 
0x000000000040e154: ret 0x4801; 
0x0000000000412ad6: ret 0x4803; 
0x0000000000423021: ret 0x4804; 
0x0000000000440db3: ret 0x4808; 
0x0000000000403046: ret 0x480a; 
0x000000000041cd48: ret 0x4810; 
0x00000000004589bc: ret 0x4811; 
0x000000000045d507: ret 0x481e; 
0x000000000040360b: ret 0x4820; 
0x000000000044e43e: ret 0x4830; 
0x000000000041bc61: ret 0x4840; 
0x0000000000440a68: ret 0x48c3; 
0x000000000045aaea: ret 0x48e8; 
0x0000000000419643: ret 0x48e9; 
0x00000000004a9346: ret 0x48f; 
0x0000000000405dec: ret 0x4901; 
0x00000000004556cb: ret 0x4902; 
0x0000000000419c92: ret 0x4908; 
0x000000000042a9fc: ret 0x4910; 
0x000000000045a859: ret 0x4c01; 
0x000000000041ef8a: ret 0x4c07; 
0x000000000045cdc6: ret 0x4c40; 
0x000000000042495d: ret 0x4c88; 
0x0000000000465abe: ret 0x4ce8; 
0x000000000045c078: ret 0x4d10; 
0x000000000040274f: ret 0x4de8; 
0x00000000004a8da7: ret 0x4e27; 
0x000000000040177e: ret 0x4f76; 
0x000000000044efcf: ret 0x5089; 
0x000000000044c0c7: ret 0x508b; 
0x000000000042d894: ret 0x5173; 
0x0000000000449f17: ret 0x5488; 
0x00000000004a700c: ret 0x5508; 
0x000000000047147e: ret 0x5590; 
0x0000000000489e45: ret 0x55e8; 
0x0000000000472fa6: ret 0x5776; 
0x00000000004a92d8: ret 0x5803; 
0x0000000000455731: ret 0x5841; 
0x00000000004879e5: ret 0x5876; 
0x000000000040e763: ret 0x589; 
0x00000000004a6ce0: ret 0x591c; 
0x00000000004a7a47: ret 0x5ae4; 
0x0000000000455919: ret 0x5be9; 
0x000000000040f53e: ret 0x5d5b; 
0x000000000046443d: ret 0x5de8; 
0x00000000004a9772: ret 0x62c1; 
0x000000000042493d: ret 0x6348; 
0x000000000047c4d0: ret 0x6349; 
0x00000000004851e4: ret 0x637f; 
0x0000000000458993: ret 0x6411; 
0x000000000045b571: ret 0x6601; 
0x0000000000472ce1: ret 0x6620; 
0x0000000000424188: ret 0x66c3; 
0x000000000047fade: ret 0x674; 
0x0000000000472f96: ret 0x6776; 
0x00000000004a6cff: ret 0x67b2; 
0x00000000004178e5: ret 0x6874; 
0x00000000004495ca: ret 0x6ae9; 
0x00000000004a9901: ret 0x6f9; 
0x000000000042155e: ret 0x719; 
0x0000000000421912: ret 0x723; 
0x000000000045e37a: ret 0x73; 
0x0000000000417a61: ret 0x7401; 
0x0000000000422fea: ret 0x7402; 
0x000000000047c53a: ret 0x7403; 
0x000000000044a641: ret 0x7404; 
0x0000000000471252: ret 0x7408; 
0x00000000004131ed: ret 0x7420; 
0x0000000000463c94: ret 0x7450; 
0x0000000000480cea: ret 0x7472; 
0x0000000000444c99: ret 0x7501; 
0x0000000000444ca6: ret 0x7502; 
0x0000000000444cb3: ret 0x7504; 
0x000000000041f29d: ret 0x7508; 
0x0000000000444c6b: ret 0x7510; 
0x0000000000444c78: ret 0x7520; 
0x0000000000424d9e: ret 0x7540; 
0x00000000004756d0: ret 0x7577; 
0x000000000042c782: ret 0x7677; 
0x0000000000482962: ret 0x777; 
0x0000000000484226: ret 0x77f; 
0x0000000000402ea1: ret 0x7ce9; 
0x0000000000472c81: ret 0x7e20; 
0x0000000000472efc: ret 0x7e40; 
0x00000000004250dc: ret 0x7f10; 
0x000000000046d2a8: ret 0x7f3c; 
0x00000000004262b9: ret 0x8000; 
0x000000000048de62: ret 0x8001; 
0x000000000043305e: ret 0x80; 
0x0000000000476b5e: ret 0x8116; 
0x000000000045f5db: ret 0x8148; 
0x000000000048e3b8: ret 0x8166; 
0x000000000041da30: ret 0x820f; 
0x0000000000454f53: ret 0x8301; 
0x000000000047d257: ret 0x8303; 
0x00000000004244c4: ret 0x830f; 
0x000000000045d3d4: ret 0x8341; 
0x0000000000402ccb: ret 0x8348; 
0x0000000000446bb0: ret 0x8349; 
0x000000000047f0cf: ret 0x8364; 
0x0000000000475ac1: ret 0x8401; 
0x0000000000470b96: ret 0x840; 
0x00000000004128e5: ret 0x840f; 
0x0000000000453ca0: ret 0x841; 
0x000000000048b10e: ret 0x8440; 
0x0000000000479c77: ret 0x848b; 
0x000000000046e6f9: ret 0x8502; 
0x0000000000413a72: ret 0x850f; 
0x00000000004582f3: ret 0x8511; 
0x000000000044a972: ret 0x8545; 
0x0000000000402c22: ret 0x8548; 
0x0000000000476c7c: ret 0x8549; 
0x000000000042403a: ret 0x854d; 
0x0000000000405cc1: ret 0x8575; 
0x00000000004014c6: ret 0x860f; 
0x000000000041b61f: ret 0x870f; 
0x00000000004a661e: ret 0x871e; 
0x000000000046d2af: ret 0x875; 
0x0000000000472d85: ret 0x876; 
0x0000000000402d4c: ret 0x8801; 
0x0000000000451f9d: ret 0x8804; 
0x0000000000479903: ret 0x882e; 
0x000000000045b5c2: ret 0x8841; 
0x000000000047e1be: ret 0x8844; 
0x000000000040253a: ret 0x8901; 
0x000000000044cf5e: ret 0x8902; 
0x0000000000412d6a: ret 0x8908; 
0x000000000045d3c6: ret 0x8941; 
0x000000000041ff0f: ret 0x8944; 
0x0000000000403edf: ret 0x8948; 
0x0000000000413f9a: ret 0x8949; 
0x0000000000411591: ret 0x894c; 
0x00000000004833db: ret 0x894e; 
0x0000000000478201: ret 0x89e9; 
0x0000000000450869: ret 0x8b01; 
0x000000000046ed4a: ret 0x8b04; 
0x0000000000475863: ret 0x8b05; 
0x000000000046ebfb: ret 0x8b08; 
0x00000000004a8e4e: ret 0x8b36; 
0x000000000041df21: ret 0x8b41; 
0x000000000046d2db: ret 0x8b44; 
0x00000000004143c3: ret 0x8b48; 
0x0000000000411d46: ret 0x8b49; 
0x000000000048335e: ret 0x8b4a; 
0x000000000040d4fd: ret 0x8b4c; 
0x00000000004856ef: ret 0x8b64; 
0x0000000000487c10: ret 0x8b; 
0x00000000004644fd: ret 0x8c0f; 
0x000000000045ce21: ret 0x8d04; 
0x000000000048c30f: ret 0x8d0f; 
0x000000000041d614: ret 0x8d44; 
0x000000000041a131: ret 0x8d48; 
0x0000000000424477: ret 0x8d49; 
0x0000000000482707: ret 0x8d4a; 
0x000000000041e734: ret 0x8d4c; 
0x000000000045d3e2: ret 0x8d89; 
0x0000000000452a6b: ret 0x8e0f; 
0x000000000045d68a: ret 0x8f0f; 
0x0000000000440235: ret 0x90c3; 
0x000000000048af4b: ret 0x9272; 
0x000000000041b7e5: ret 0x948; 
0x0000000000473238: ret 0x94c; 
0x0000000000484c12: ret 0x950f; 
0x0000000000448f50: ret 0x9572; 
0x00000000004a7c73: ret 0x9576; 
0x000000000045ffdf: ret 0x958b; 
0x0000000000422f7e: ret 0x976; 
0x00000000004a98d9: ret 0x990e; 
0x000000000047d003: ret 0x9be9; 
0x00000000004870f5: ret 0x9eb; 
0x00000000004aea6e: ret 0xa01; 
0x000000000044a668: ret 0xa076; 
0x0000000000449494: ret 0xa0e9; 
0x0000000000462d67: ret 0xa3e8; 
0x000000000048c3ce: ret 0xa4e9; 
0x00000000004a7963: ret 0xa514; 
0x000000000048c4cd: ret 0xa5e9; 
0x000000000049eba0: ret 0xa; 
0x000000000044b60d: ret 0xabe; 
0x00000000004105c6: ret 0xac20; 
0x00000000004a7de7: ret 0xac65; 
0x00000000004a87a4: ret 0xacfc; 
0x0000000000480cf5: ret 0xade8; 
0x000000000045ee1f: ret 0xae9; 
0x0000000000423e7a: ret 0xaeeb; 
0x00000000004abfd7: ret 0xb00e; 
0x00000000004121ad: ret 0xb074; 
0x000000000041b83b: ret 0xb277; 
0x0000000000464ace: ret 0xb2c8; 
0x00000000004564fb: ret 0xb2eb; 
0x0000000000449480: ret 0xb4e9; 
0x000000000045d406: ret 0xb589; 
0x0000000000402d05: ret 0xb60f; 
0x0000000000400fb4: ret 0xb70f; 
0x000000000046b3ec: ret 0xb848; 
0x0000000000469645: ret 0xb8; 
0x000000000047cc7a: ret 0xb8e8; 
0x00000000004a7cae: ret 0xb9b9; 
0x000000000046cc25: ret 0xb9e9; 
0x000000000046e7d4: ret 0xba41; 
0x00000000004236b3: ret 0xbae9; 
0x0000000000456632: ret 0xbaeb; 
0x000000000048c986: ret 0xbc80; 
0x000000000045d3f2: ret 0xbd89; 
0x0000000000480e32: ret 0xbe0f; 
0x00000000004a7a04: ret 0xbe57; 
0x0000000000426179: ret 0xc000; 
0x0000000000403236: ret 0xc031; 
0x00000000004589de: ret 0xc083; 
0x000000000042b880: ret 0xc085; 
0x000000000040e196: ret 0xc148; 
0x000000000041bad5: ret 0xc183; 
0x00000000004049a8: ret 0xc189; 
0x000000000044a302: ret 0xc221; 
0x000000000041ff4b: ret 0xc275; 
0x00000000004766b6: ret 0xc283; 
0x000000000042d764: ret 0xc2b2; 
0x00000000004481ee: ret 0xc35b; 
0x0000000000457dcd: ret 0xc389; 
0x000000000041ff4d: ret 0xc3f3; 
0x00000000004a61a2: ret 0xc4c3; 
0x00000000004a75b8: ret 0xc4ff; 
0x0000000000472f61: ret 0xc540; 
0x0000000000457e96: ret 0xc589; 
0x0000000000462c9c: ret 0xc689; 
0x0000000000441170: ret 0xc748; 
0x000000000047f0ad: ret 0xc74; 
0x0000000000468898: ret 0xc789; 
0x0000000000480ec2: ret 0xc829; 
0x0000000000461672: ret 0xc839; 
0x000000000041732c: ret 0xc883; 
0x00000000004600b7: ret 0xc985; 
0x000000000046ece3: ret 0xc9eb; 
0x0000000000440d81: ret 0xc9ff; 
0x00000000004008e1: ret 0xca21; 
0x00000000004a704a: ret 0xcca7; 
0x00000000004a912d: ret 0xcd11; 
0x00000000004051b2: ret 0xce80; 
0x000000000042182e: ret 0xd020; 
0x000000000040dfa6: ret 0xd021; 
0x0000000000463b1b: ret 0xd120; 
0x00000000004012d4: ret 0xd284; 
0x000000000045798a: ret 0xd285; 
0x000000000048e908: ret 0xd2e8; 
0x0000000000479d06: ret 0xd348; 
0x000000000044f947: ret 0xd5e9; 
0x000000000048127f: ret 0xd75; 
0x000000000040f356: ret 0xd774; 
0x00000000004a8bc5: ret 0xd8f; 
0x000000000046d649: ret 0xd9e8; 
0x000000000049efa0: ret 0xd; 
0x000000000040058f: ret 0xda80; 
0x00000000004108b3: ret 0xdaf7; 
0x000000000045417a: ret 0xdb76; 
0x00000000004a8ca6: ret 0xdcd9; 
0x00000000004a7c22: ret 0xde5d; 
0x00000000004a69b1: ret 0xde9e; 
0x0000000000426039: ret 0xe000; 
0x0000000000444c29: ret 0xe074; 
0x000000000044d6b0: ret 0xe083; 
0x00000000004b521c: ret 0xe0a; 
0x000000000048c591: ret 0xe1e9; 
0x000000000044d4e2: ret 0xe1eb; 
0x000000000040db90: ret 0xe281; 
0x0000000000400cf5: ret 0xe283; 
0x0000000000472948: ret 0xe575; 
0x0000000000465120: ret 0xe57f; 
0x0000000000465a9a: ret 0xe583; 
0x00000000004481e2: ret 0xe680; 
0x000000000046617f: ret 0xe683; 
0x00000000004a8dc6: ret 0xe71f; 
0x00000000004790ca: ret 0xe75; 
0x0000000000423766: ret 0xe775; 
0x0000000000465753: ret 0xe7e9; 
0x0000000000401555: ret 0xe883; 
0x0000000000478c46: ret 0xe8c0; 
0x0000000000402fda: ret 0xe901; 
0x000000000040301f: ret 0xe902; 
0x0000000000440e16: ret 0xe908; 
0x000000000043d3b6: ret 0xe910; 
0x000000000045dc4d: ret 0xe920; 
0x00000000004a7127: ret 0xe970; 
0x000000000044817a: ret 0xea81; 
0x000000000040dc5d: ret 0xeab8; 
0x0000000000400cdd: ret 0xeac1; 
0x000000000047d906: ret 0xeb01; 
0x000000000046ec13: ret 0xeb04; 
0x000000000042aa2a: ret 0xeb10; 
0x0000000000481472: ret 0xeb30; 
0x0000000000472872: ret 0xeb75; 
0x00000000004a98d8: ret 0xec2; 
0x000000000040f2e0: ret 0xed75; 
0x00000000004a957a: ret 0xef32; 
0x000000000048c158: ret 0xef89; 
0x0000000000475c7f: ret 0xefeb; 
0x0000000000425ef9: ret 0xf000; 
0x0000000000405695: ret 0xf01; 
0x000000000041b2e9: ret 0xf02; 
0x000000000041d799: ret 0xf04; 
0x0000000000412433: ret 0xf08; 
0x000000000041b5b9: ret 0xf0f; 
0x000000000040e4ae: ret 0xf10; 
0x0000000000465f9b: ret 0xf20; 
0x000000000041d903: ret 0xf275; 
0x0000000000463056: ret 0xf3f; 
0x0000000000466523: ret 0xf40; 
0x000000000046f68d: ret 0xf41; 
0x000000000048c60c: ret 0xf45; 
0x0000000000424349: ret 0xf475; 
0x0000000000451826: ret 0xf48; 
0x00000000004004fd: ret 0xf49; 
0x0000000000466509: ret 0xf50; 
0x0000000000475325: ret 0xf631; 
0x00000000004264b6: ret 0xf66; 
0x000000000047ad57: ret 0xf675; 
0x000000000046f74c: ret 0xf741; 
0x00000000004058e2: ret 0xf748; 
0x000000000048294c: ret 0xf749; 
0x0000000000425db9: ret 0xf800; 
0x00000000004a6890: ret 0xf869; 
0x00000000004762b2: ret 0xf8a1; 
0x0000000000419063: ret 0xf8b; 
0x0000000000463051: ret 0xf8c1; 
0x0000000000440696: ret 0xf8c5; 
0x0000000000448524: ret 0xf8e9; 
0x000000000042981e: ret 0xf; 
0x00000000004946b4: ret 0xfa11; 
0x0000000000494bac: ret 0xfa38; 
0x000000000041fc22: ret 0xfae9; 
0x000000000042021a: ret 0xfbe9; 
0x0000000000425c79: ret 0xfc00; 
0x0000000000424b91: ret 0xfc3; 
0x000000000045a22a: ret 0xfc5e; 
0x00000000004587ea: ret 0xfc81; 
0x0000000000457cea: ret 0xfc8c; 
0x0000000000490bda: ret 0xfc9a; 
0x00000000004502ea: ret 0xfd06; 
0x0000000000425b39: ret 0xfe00; 
0x0000000000400e25: ret 0xfe83; 
0x00000000004259f9: ret 0xff00; 
0x000000000044d65b: ret 0xff25; 
0x0000000000434bd1: ret 0xff2; 
0x000000000042c0f9: ret 0xff2d; 
0x000000000046a747: ret 0xff31; 
0x000000000042645a: ret 0xff3; 
0x00000000004258b9: ret 0xff80; 
0x0000000000465d21: ret 0xff83; 
0x000000000045410c: ret 0xff85; 
0x000000000045cdb2: ret 0xffa0; 
0x000000000040b13a: ret 0xffaf; 
0x000000000040ae3a: ret 0xffb2; 
0x000000000044f89a: ret 0xffb3; 
0x0000000000411847: ret 0xffb8; 
0x000000000040dcaa: ret 0xffc0; 
0x0000000000423d18: ret 0xffdf; 
0x0000000000425639: ret 0xffe0; 
0x0000000000461b8e: ret 0xffe6; 
0x00000000004679b9: ret 0xffe8; 
0x0000000000449535: ret 0xffe9; 
0x000000000040f209: ret 0xffef; 
0x000000000040dad2: ret 0xfff0; 
0x000000000046a130: ret 0xfff1; 
0x00000000004253b9: ret 0xfff8; 
0x0000000000423732: ret 0xfff; 
0x000000000041d238: ret 0xfffa; 
0x00000000004048c9: ret 0xfffb; 
0x0000000000425279: ret 0xfffc; 
0x0000000000418ae5: ret 0xfffd; 
0x000000000041421b: ret 0xfffe; 
0x0000000000415fdc: ret 0xffff; 
0x000000000042131d: ret 1; 
0x000000000041c20d: ret 2; 
0x000000000041bf22: ret 3; 
0x0000000000409f98: ret 4; 
0x0000000000438d3e: ret 5; 
0x000000000049e748: ret 6; 
0x000000000042afba: ret 7; 
0x0000000000409ff8: ret 8; 
0x00000000004456da: ret 9; 
0x0000000000400416: ret; 
0x000000000048529a: retf 0x236e; add byte ptr [rbx + 0x236ebc0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000046c052: retf 0x24b1; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000047e865: retf 0x394c; ret 0x2275; 
0x000000000040e98c: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040ea78: retf 0x6411; xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004a7082: retf 0x6ee8; sahf; ret 0x38ae; 
0x0000000000411b03: retf 0x775; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000042a9cf: retf 0x8349; ret 0x7f10; 
0x000000000043d617: retf 0x8349; ret 0xf10; 
0x0000000000413012: retf 0x894c; out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x0000000000449b3c: retf 0x8d48; push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004447cd: retf 0x8d4c; sbb eax, 0x509cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ad: retf 0x8d4c; sbb eax, 0x50f6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004480e6: retf 0xd975; vzeroupper; ret; 
0x000000000042a9f6: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000447f23: retf 0xe175; vzeroupper; ret; 
0x0000000000486777: retf 0xe677; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000440bc0: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004743fc: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004736e1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000042d306: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004506e2: retf 0xfd02; jmp qword ptr [rsi + 0x2e]; 
0x0000000000473386: retf 0xfdc5; xlatb; ret; 
0x000000000046419a: retf 0xfff5; jmp qword ptr [rsi - 0x70]; 
0x00000000004546fe: retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000423e05: retf 0xfffe; call 0xdcf0; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000448b32: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000041198e: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004904e1: retf; add al, 0xf9; jmp qword ptr [rsi + 0x2e]; 
0x000000000044bead: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x00000000004447d1: retf; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004a700b: retf; ret 0x5508; 
0x00000000004945a8: rol ah, 1; stc; jmp qword ptr [rax]; 
0x000000000045d3c9: rol al, 0xea; add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d75cd6; ret 0x8341; 
0x0000000000472cde: rol bl, 0x83; ret 0x6620; 
0x000000000044719d: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x0000000000426432: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000474896: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d06: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae6: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000473672: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004a2a40: rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004481a4: rol byte ptr [rax + rax], 1; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004481c6: rol byte ptr [rax + rax], 1; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000400e1a: rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x0000000000454a84: rol byte ptr [rax - 0x7af07f07], 0xc1; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000495014: rol byte ptr [rax - 6], 1; jmp rax; 
0x0000000000400406: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000479c71: rol byte ptr [rax], 0; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000040dc28: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000042c68d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044cf6b: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000048d00e: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000040dc30: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000004103d9: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004755df: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x000000000042b962: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000045ee15: rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x00000000004826ab: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x00000000004190b8: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000453221: rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x0000000000474702: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000448171: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000465f6f: rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000044719e: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000046cc22: rol byte ptr [rcx - 0x77], 1; ret 0xb9e9; 
0x00000000004746e2: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000044e916: rol byte ptr [rcx], 0x50; call rbx; 
0x00000000004594db: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000448507: rol byte ptr [rcx], 0x83; ret 0xf01; 
0x0000000000464263: rol byte ptr [rcx], 0xc7; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000448520: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x000000000044e151: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000402e9c: rol byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x0000000000474742: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000004948b8: rol byte ptr [rdi], cl; cli; call qword ptr [rdx + 7]; 
0x00000000004948b8: rol byte ptr [rdi], cl; cli; call qword ptr [rdx + 7]; cli; call rdx; 
0x00000000004746f2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004948c8: rol byte ptr [rip + 0x552fffa], cl; cli; call rdx; 
0x0000000000474732: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000004948c0: rol byte ptr [rsi], cl; cli; call qword ptr [rdx + 6]; 
0x00000000004948c0: rol byte ptr [rsi], cl; cli; call qword ptr [rdx + 6]; cli; call rdx; 
0x0000000000447552: rol ch, 0x7e; jg 0x47598; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447685: rol ch, 0x7e; jg 0x476cb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000042baff: rol ch, 1; std; xlatb; ret; 
0x0000000000440d2f: rol ch, cl; std; xlatb; ret 0xc085; 
0x00000000004733e6: rol ch, cl; std; xlatb; ret; 
0x00000000004a61a0: rol cl, 0xc2; ret; 
0x000000000047468c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000447f1c: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x0000000000447d02: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004480df: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x480c2; vzeroupper; ret; 
0x0000000000472f80: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000472d04: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000444c2f: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000042baf3: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000440803: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000472cd4: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004738f7: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000472f43: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000473ace: rol dword ptr [rcx + 0x20c00e1], 1; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000473ac9: rol dword ptr [rcx - 3], cl; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000041783a: rol dword ptr [rcx], 0xf; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x17859; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004569cf: rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000004a6e2a: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x0000000000454a8a: rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042c0f5: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x00000000004945b4: ror al, 0xf9; call qword ptr [rax]; 
0x000000000043075f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd8f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000471b55: ror byte ptr [r9 + rcx*4 - 1], 0x41; call rsp; 
0x000000000048a878: ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000472aeb: ror byte ptr [rax + 0x29], 0xc2; jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d52: ror byte ptr [rax + 0x29], 0xc2; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d62: ror byte ptr [rax + 0x29], 0xc2; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d72: ror byte ptr [rax + 0x29], 0xc2; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d82: ror byte ptr [rax + 0x29], 0xc2; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000440bc7: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000004743ac: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x00000000004119fe: ror byte ptr [rax + 0x29], 1; ret; 
0x0000000000410fac: ror byte ptr [rax + 0x29], 1; xlatb; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000472fa3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x73000; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000472fc3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x73000; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000472fe3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x73000; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000472f93: ror byte ptr [rax + 0x39], 0xc2; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x0000000000473943: ror byte ptr [rax + 0x39], 0xc6; jbe 0x739c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000044be48: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000041e5e3: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000046f8e3: ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047c7fa: ror byte ptr [rax + 0x39], cl; ret; 
0x000000000044d60d: ror byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000424473: ror byte ptr [rax + 0xf], 0x43; ret 0x8d49; 
0x000000000045ee1b: ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000044be42: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004408b6: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x000000000042b83c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000474798: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c18: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba28: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x000000000042b9b2: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000474853: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x000000000042bac3: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000405a33: ror byte ptr [rax + 1], 1; ret; 
0x0000000000440bc4: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000004743a9: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000040eb3a: ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648e3748; ret; 
0x0000000000440555: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000049ee48: ror byte ptr [rax + rax], 0; ret; 
0x000000000042bc15: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x0000000000440b06: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa5: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000048317c: ror byte ptr [rax - 0x3f], 0xe0; add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x0000000000465d1a: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xff83; 
0x000000000040eb3d: ror byte ptr [rax - 0x3f], 1; call 0x648e3748; ret; 
0x00000000004747a1: ror byte ptr [rax - 0x3f], 1; call 0x78000cab; ret; 
0x0000000000474859: ror byte ptr [rax - 0x3f], 1; call 0x78000d63; ret; 
0x000000000047487d: ror byte ptr [rax - 0x3f], 1; call 0x78000d87; ret; 
0x000000000047489d: ror byte ptr [rax - 0x3f], 1; call 0x78000da7; ret; 
0x00000000004748eb: ror byte ptr [rax - 0x3f], 1; call 0x78000df5; ret; 
0x000000000047498a: ror byte ptr [rax - 0x3f], 1; call 0x78000e94; ret; 
0x0000000000474b0e: ror byte ptr [rax - 0x3f], 1; call 0x78001018; ret; 
0x0000000000474b32: ror byte ptr [rax - 0x3f], 1; call 0x7800103c; ret; 
0x0000000000474b52: ror byte ptr [rax - 0x3f], 1; call 0x7800105c; ret; 
0x0000000000474b72: ror byte ptr [rax - 0x3f], 1; call 0x7800107c; ret; 
0x0000000000474ba9: ror byte ptr [rax - 0x3f], 1; call 0x780010b3; ret; 
0x0000000000474bcd: ror byte ptr [rax - 0x3f], 1; call 0x780010d7; ret; 
0x0000000000474bed: ror byte ptr [rax - 0x3f], 1; call 0x780010f7; ret; 
0x0000000000474c3b: ror byte ptr [rax - 0x3f], 1; call 0x78001145; ret; 
0x0000000000465b15: ror byte ptr [rax - 0x73], 0x15; ret; 
0x0000000000424c34: ror byte ptr [rax - 0x73], 0x15; xor al, 0x32; add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000042b9a2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000042b9d2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x000000000042b9c2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000042372e: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004410f3: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000044112f: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000432e8b: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044068b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004798fa: ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x00000000004756bb: ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004499fa: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 1; syscall; 
0x000000000044992a: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473c4d: ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000411094: ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000004845fc: ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000048a88d: ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000045a3c4: ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x00000000004143c0: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000481e7a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040db8d: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000411c40: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000400e59: ror byte ptr [rax - 0x77], 5; mov edi, 0x48002baf; add esp, 0x88; pop rbx; ret; 
0x000000000041fd15: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000484c0c: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000474893: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d03: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x0000000000440ce3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000423e35: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000416e25: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000488367: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000475693: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000048e327: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000416041: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000432e8f: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dcf: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043030b: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430760: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd90: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046bad6: ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000040ec30: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x00000000004550c5: ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000446b7b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000446b78: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446b75: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000489425: ror byte ptr [rax], 0x83; ret 0x3901; 
0x00000000004948b0: ror byte ptr [rax], cl; cli; call qword ptr [rdx + 8]; 
0x00000000004948b0: ror byte ptr [rax], cl; cli; call qword ptr [rdx + 8]; cli; call rdx; 
0x000000000046e922: ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000444786: ror byte ptr [rbp + rcx*4 + 0x1d], cl; adc cl, byte ptr [rdx]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447ab: ror byte ptr [rbp + rcx*4 + 0x1d], cl; in eax, dx; or dword ptr [rip + 0xc634900], eax; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444149: ror byte ptr [rbp + rcx*4 + 0x1d], cl; iretd; syscall; 
0x000000000044418b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; lea ecx, [rdi]; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447e3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov ch, 9; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444166: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov dl, 0xf; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441c3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; push rbp; syscall; 
0x0000000000473d7c: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call rbx; 
0x0000000000494150: ror byte ptr [rbp - 0x718f0007], 0xf9; jmp qword ptr [rax - 0x71]; 
0x00000000004af740: ror byte ptr [rbp - 7], 1; jmp qword ptr [rdi + 6]; 
0x00000000004b050c: ror byte ptr [rbp], 1; add byte ptr [rax - 0x46], ah; stc; call qword ptr [rdx]; 
0x0000000000475554: ror byte ptr [rbx + 0x481c2454], 0x8b; je 0x75581; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000044a464: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000429073: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004845e4: ror byte ptr [rcx + 0x2b802], 1; add byte ptr [rax], al; ret; 
0x000000000048bf57: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000468028: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000040dc77: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000473f67: ror byte ptr [rcx + rcx*4 - 0xe], 0x4c; lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000471b56: ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x0000000000471872: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a4e: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047324c: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000045c0c6: ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000004789f1: ror byte ptr [rcx - 0x73], 0x7d; sub byte ptr [rcx], dh; imul al; mov edi, dword ptr [rdx - 8]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000467a08: ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000044f93f: ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000004b010c: ror byte ptr [rcx], 1; add al, al; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x000000000045ae62: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000044bd3c: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000045e41c: ror byte ptr [rdi], 0x84; lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004109ed: ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004758c9: ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000410171: ror byte ptr [rdi], 0x84; popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045fc87: ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000046651b: ror byte ptr [rdi], 0x84; ret 0x17; 
0x00000000004508c7: ror byte ptr [rdi], 0x84; ret 0xfffc; 
0x0000000000402826: ror byte ptr [rdi], 0x84; ret; 
0x00000000004410fa: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000044c99f: ror byte ptr [rdi], 0x85; ret 0xfffe; 
0x000000000047d9e2: ror byte ptr [rdi], 0x85; ret 2; 
0x00000000004230cf: ror byte ptr [rdi], 0x85; ret; 
0x00000000004670b9: ror byte ptr [rdi], 0x8f; ret 7; 
0x0000000000480faa: ror byte ptr [rdi], 0x94; ret 0x3d; 
0x000000000046d2a5: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x0000000000484c0f: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000446c6e: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000410f1b: ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x000000000047f4b9: ror byte ptr [rdi], 0x94; ret; 
0x0000000000423728: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004108b0: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x0000000000488364: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000046c6da: ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000042372b: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000494608: ror byte ptr [rdi], 0xfa; call qword ptr [rax + 0xf]; 
0x0000000000494608: ror byte ptr [rdi], 0xfa; call qword ptr [rax + 0xf]; cli; jmp rax; 
0x00000000004470e5: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000494804: ror byte ptr [rdi], 1; cli; jmp qword ptr [rax + 0xf]; 
0x000000000042375f: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x23750; sub rax, 0x10; ret; 
0x000000000047428f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004735cb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x0000000000440aab: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000047314a: ror dword ptr [rax + 0x21], 0xce; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000048520e: ror dword ptr [rax + 1], 0xf8; sub rax, r8; ret; 
0x0000000000446c78: ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000473a79: ror dword ptr [rax + rax], cl; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000440bb9: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000048aa54: ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000046eed6: ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x0000000000423e77: ror dword ptr [rax - 0x77], 1; ret 0xaeeb; 
0x0000000000479d03: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x0000000000465750: ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x0000000000440b02: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa1: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000045d524: ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000004190b3: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000483e4d: ror dword ptr [rbp + rcx*4 + 0x14], cl; ret; 
0x00000000004833d8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000046510b: ror dword ptr [rcx - 0x77], 0x14; ret 0x8b48; 
0x0000000000411d3b: ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000444c27: ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042cef8: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d604: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d3d6: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000042d356: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000042d694: ror dword ptr [rdi], 0x85; je 0x2d69b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d18b: ror dword ptr [rdi], 0x85; jno 0x2d197; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d253: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ced0: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041b660: ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x000000000040ea51: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040e98b: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040ea77: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040ea50: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040e98a: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040ea76: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040189e: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x18b6; syscall; 
0x0000000000461cfe: sahf; and dword ptr [rcx], eax; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000482141: sahf; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000046d94e: sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004a6ed2: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x0000000000404896: sahf; mov ebx, 0x8c8bffff; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000044902e: sahf; mov edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000043f7be: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004852d6: sahf; outsb dx, byte ptr [rsi]; and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004a7085: sahf; ret 0x38ae; 
0x0000000000483741: sahf; ret 0x3948; 
0x000000000045c0cc: sahf; ret 0x894c; 
0x000000000048c644: sahf; ret 0xf45; 
0x00000000004943ed: sahf; stc; jmp qword ptr [rax - 0x61]; 
0x00000000004720e3: sahf; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004190be: sal bh, 0xd8; ret; 
0x00000000004951d0: sal bh, 0xfa; jmp rax; 
0x00000000004262b7: sal bh, 1; ret 0x8000; 
0x0000000000426177: sal bh, 1; ret 0xc000; 
0x0000000000426037: sal bh, 1; ret 0xe000; 
0x0000000000425ef7: sal bh, 1; ret 0xf000; 
0x0000000000425db7: sal bh, 1; ret 0xf800; 
0x0000000000425c77: sal bh, 1; ret 0xfc00; 
0x0000000000425b37: sal bh, 1; ret 0xfe00; 
0x00000000004259f7: sal bh, 1; ret 0xff00; 
0x00000000004258b7: sal bh, 1; ret 0xff80; 
0x0000000000425777: sal bh, 1; ret 0xffc0; 
0x0000000000425637: sal bh, 1; ret 0xffe0; 
0x00000000004254f7: sal bh, 1; ret 0xfff0; 
0x00000000004253b7: sal bh, 1; ret 0xfff8; 
0x0000000000425277: sal bh, 1; ret 0xfffc; 
0x0000000000425137: sal bh, 1; ret 0xfffe; 
0x00000000004b1940: sal bl, 0xfd; call rdx; 
0x000000000042babf: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000049519c: sal bl, 1; cli; inc eax; idiv dl; call rax; 
0x000000000047448f: sal bl, 1; ret; 
0x000000000047f35d: sal bl, cl; ret; 
0x000000000040dacd: sal byte ptr [rax + 0x48], 0xc7; ret 0xfff0; 
0x00000000004199bd: sal byte ptr [rax + rbx + 0x48], 0x8b; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000444c31: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000047f2c6: sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4f8], 0; mov qword ptr [rip + 0x23d0d9], rax; add rsp, 8; ret; 
0x00000000004499c7: sal byte ptr [rbp + 0x16], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000449c97: sal byte ptr [rbp + 0x16], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000040dc9a: sal byte ptr [rbp + 0x1f], 0x48; add esp, 0x118; ret; 
0x0000000000474af2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000473932: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x000000000044c148: sal byte ptr [rbp + 0x31], cl; test byte ptr [rax - 0x73], 0x3d; jno 0x4c0ed; add al, 0; mov eax, 0x15; syscall; 
0x000000000042b982: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000048253e: sal byte ptr [rbp + 0x4f], 0x89; ret; 
0x00000000004754d6: sal byte ptr [rbp + 0x5d], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000449767: sal byte ptr [rbp + 0x61], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000405e7b: sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000048f3f3: sal byte ptr [rbp + 0xa], 0xf3; ret; 
0x00000000004717c8: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000400594: sal byte ptr [rbp + 1], cl; ret; 
0x000000000048559f: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048f3d8: sal byte ptr [rbp + 5], 0xf3; ret; 
0x000000000044be61: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000004408b0: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000004249d8: sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x0000000000474310: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000400aa8: sal byte ptr [rbp + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000474688: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000044be71: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x0000000000417c5d: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000446960: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x00000000004265db: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x000000000042bafd: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000480e18: sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000042baf5: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x000000000044080d: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x0000000000440805: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x000000000041907c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000044cf56: sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000042ba22: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000048d142: sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000400aea: sal byte ptr [rbx + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000470ce2: sal byte ptr [rbx + rdi + 0x4d], 0x8b; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000494d18: sal byte ptr [rbx], 0xfa; call qword ptr [rax + 0x33]; 
0x000000000048aefc: sal byte ptr [rcx + 0x3c], 0x2f; ja 0x8b7b1; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x0000000000494114: sal byte ptr [rcx + rdi*8 - 1], 0xb0; jne 0x94114; jmp rax; 
0x0000000000440b0c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000044e90d: sal byte ptr [rcx], 0xc9; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000473d78: sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044e912: sal byte ptr [rcx], 0xd2; add eax, 1; push rax; call rbx; 
0x00000000004407c3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004407e3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440821: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004407a3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044be46: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004482d7: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004751dd: sal byte ptr [rcx], cl; imul al; stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x000000000040ab58: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x00000000004076c9: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x000000000040eb2c: sal byte ptr [rdx + 0x3948006b], 1; ret; 
0x000000000047363b: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000004742fb: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000040040d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000446c73: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000484d22: sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x235e34; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000044c77b: sal byte ptr [rdx + rcx + 0x48], cl; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000486c3b: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000494bd0: sal byte ptr [rdx + rdi*8], cl; jmp qword ptr [rdx + 0x34]; 
0x0000000000440e23: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000042d77f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d8a0: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000004175c5: sal byte ptr [rsi + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004848c2: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x2377b4; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x000000000042b837: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000004942cc: sal byte ptr [rsi - 0x474f0007], 1; stc; call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x0000000000494058: sal byte ptr [rsi], 0xf9; jmp qword ptr [rax + 0x26]; 
0x0000000000494b00: sal byte ptr [rsi], 0xfa; call qword ptr [rax + 0x36]; 
0x0000000000494b00: sal byte ptr [rsi], 0xfa; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x0000000000494cfc: sal byte ptr [rsi], 1; cli; jmp qword ptr [rax + 0x36]; 
0x000000000040dac1: sal byte ptr [rsp + rbp*2 + 0x48], 0x8d; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000419f83: sal byte ptr [rsp + rbx*2 - 0x75], cl; add eax, 0x2a1de4; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x0000000000484fd1: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000047f919: sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000495148: sal cl, 0xfa; call rax; 
0x0000000000495148: sal cl, 0xfa; call rax; int1; cli; jmp rax; 
0x0000000000435b4c: sal cl, 1; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049514c: sal cl, 1; cli; jmp rax; 
0x00000000004951a0: sal dh, 0xfa; call rax; 
0x00000000004951a0: sal dh, 0xfa; call rax; idiv dl; jmp rax; 
0x00000000004951a4: sal dh, 1; cli; jmp rax; 
0x000000000049517c: sal dl, 1; cli; push rax; cli; call qword ptr [rax]; 
0x000000000047d743: sal dword ptr [rdi + 2], cl; add byte ptr [rax + 0x15], bh; syscall; 
0x000000000042d6df: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d81f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000429076: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000447043: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000480e1d: sal edi, 0xd8; ret; 
0x000000000042d6de: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d81e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b4730: sar ah, 1; cld; call qword ptr [rax]; 
0x00000000004951f4: sar al, 0xfa; jmp rax; 
0x00000000004495d3: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x00000000004030f0: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x000000000041253b: sar bh, 0xff; inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000415f83: sar bh, 0xff; inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047fca3: sar bh, 0xff; lcall [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000484540: sar bh, 0xff; mov eax, 1; ret; 
0x0000000000449623: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004496b3: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449963: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000004844fd: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000413287: sar byte ptr [rax + 0x36], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000402822: sar byte ptr [rax + 0x5b], 0x85; ror byte ptr [rdi], 0x84; ret; 
0x000000000047bbe1: sar byte ptr [rax + 0xe], 0x5b; ret; 
0x000000000044a512: sar byte ptr [rax - 0x21], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004942b0: sar byte ptr [rax - 0x453f0007], 1; stc; inc eax; mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; 
0x00000000004942b8: sar byte ptr [rcx + rdi*8 - 0x6413f01], 0xff; push rax; mov cl, 0xf9; call qword ptr [rax]; 
0x0000000000446c1e: sar byte ptr [rcx], 0xc8; jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000494ae4: sar byte ptr [rcx], 1; cli; jmp qword ptr [rax + 0x39]; 
0x000000000044d4dd: sar byte ptr [rcx], cl; ret; 
0x0000000000400e55: sar byte ptr [rdi - 0x7d], 0xe0; ror byte ptr [rax - 0x77], 5; mov edi, 0x48002baf; add esp, 0x88; pop rbx; ret; 
0x0000000000440225: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004a78fd: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x0000000000421782: sar byte ptr [rsi + 0x80000], 0xe8; ret; 
0x00000000004588a1: sar byte ptr [rsi + 8], 0x83; call 0x84911ab; pop rbx; ret; 
0x00000000004a7a1f: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000494560: sar byte ptr [rsi - 0x3cef0007], 1; stc; jmp qword ptr [rax - 0x3c]; 
0x00000000004942bc: sar byte ptr [rsi - 0x4eaf0007], 0xf9; call qword ptr [rax]; 
0x0000000000495010: sar byte ptr [rsi], 0xfa; call rax; 
0x0000000000495010: sar byte ptr [rsi], 0xfa; call rax; cli; jmp rax; 
0x0000000000438bb7: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000048d352: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000423217: sar ch, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000495214: sar cl, 0xfa; jmp rax; 
0x00000000004945a1: sar cl, 0xff; add bl, 0xf9; call rax; 
0x000000000049458d: sar cl, 1; inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x0000000000494595: sar cl, cl; jmp qword ptr [rax]; 
0x0000000000438575: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043857c: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x38580; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438583: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x38588; ret; 
0x0000000000448272: sar dword ptr [rax], 1; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000447c38: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000004845da: sar dword ptr [rdi - 0x76b30001], 1; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000447559: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x000000000048bf4c: sar dword ptr [rsi + rbp*8], cl; ja 0x8c069; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000048d0e8: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047154c: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x00000000004119cf: sar eax, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004885fe: sar eax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000042bc11: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000447a99: sar ebp, 1; jg 0x47ae7; jmp qword ptr [rdx - 0x2f]; 
0x00000000004919b3: sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000494591: sar ecx, 1; call rax; 
0x0000000000494591: sar ecx, 1; call rax; sar cl, cl; jmp qword ptr [rax]; 
0x00000000004a7783: sar ecx, 1; jnp 0xa7740; ret; 
0x0000000000468b85: sar edx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000471652: sar edx, 2; sub eax, edx; ret; 
0x000000000042bc17: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000440b08: sar edx, cl; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa7: sar edx, cl; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x0000000000473637: sar edx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004735c7: sar edx, cl; test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004742f7: sar edx, cl; test rdx, rdx; je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047428b: sar edx, cl; test rdx, rdx; je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000447a13: sar esi, 1; jg 0x47a3b; vzeroupper; ret; 
0x0000000000447bac: sar esi, 1; jg 0x47bd4; vzeroupper; ret; 
0x000000000046ae71: sar esi, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046ae70: sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000047154b: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004119ce: sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048d0e7: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004885fd: sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000042bc10: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000468b84: sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000471651: sar rdx, 2; sub eax, edx; ret; 
0x000000000042bc16: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000440b07: sar rdx, cl; test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa6: sar rdx, cl; test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x0000000000473636: sar rdx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004735c6: sar rdx, cl; test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004742f6: sar rdx, cl; test rdx, rdx; je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047428a: sar rdx, cl; test rdx, rdx; je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000462d05: sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000004ae82c: sbb al, 0; add byte ptr [rax], al; hlt; xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x00000000004b427c: sbb al, 0; add byte ptr [rax], al; mov r8d, dword ptr [rax]; add byte ptr [rbx + rbx*8 - 4], bl; jmp qword ptr [rbx + 1]; 
0x00000000004b40a0: sbb al, 0; add byte ptr [rax], al; push 0x8000089; int 0xfc; jmp qword ptr [rsi]; 
0x000000000044a701: sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000044a701: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x000000000046617d: sbb al, 0x29; ret 0xe683; 
0x0000000000475558: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004b1404: sbb al, 0x74; cli; call qword ptr [rdx]; 
0x00000000004670b7: sbb al, 0x85; ror byte ptr [rdi], 0x8f; ret 7; 
0x000000000047b50f: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000048c06b: sbb al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x0000000000494009: sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000494500: sbb al, 0xf9; inc dword ptr [rax - 0x26]; stc; jmp qword ptr [rax]; 
0x000000000040e112: sbb al, 7; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004637e6: sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000406fa3: sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000477661: sbb al, byte ptr [rip + 0x66e80000]; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000046928b: sbb al, byte ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000459004: sbb al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; jns 0x59005; jmp qword ptr [rsi + 0xf]; 
0x000000000040b138: sbb al, ch; ret 0xffaf; 
0x000000000044ea4b: sbb bh, bl; jmp qword ptr [rsi - 0x70]; 
0x0000000000494001: sbb bh, cl; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000494548: sbb bl, 0xf9; jmp qword ptr [rax - 0x23]; 
0x00000000004a6505: sbb bl, byte ptr [rsi]; ret; 
0x0000000000444b2a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044447a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444aeb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044443b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444b29: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444479: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444aea: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044443a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000416eff: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000481b64: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000416da0: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000485b04: sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004706d9: sbb byte ptr [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000411d33: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000484c09: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000475561: sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000047e1c1: sbb byte ptr [rax + 0x29], cl; ret 0x394c; 
0x000000000045d674: sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000419a51: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000481b65: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000468b92: sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000449c0d: sbb byte ptr [rax - 0x73], cl; and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x49c40; mov eax, 0x48; syscall; 
0x00000000004122d0: sbb byte ptr [rax - 0x73], cl; ja 0x1232d; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004179e7: sbb byte ptr [rax - 0x75], cl; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000040e983: sbb byte ptr [rax - 0x75], cl; jo 0xe9a8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000416d69: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048dc4a: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x00000000004199bf: sbb byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000482547: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000416d99: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000474feb: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000041fcc5: sbb byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x00000000004740c0: sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000047f93c: sbb byte ptr [rax - 0x77], cl; push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000416da1: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041a9fb: sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000041a213: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000041d568: sbb byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000412800: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000485b05: sbb byte ptr [rax], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004b3b38: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax - 0x356f000], al; jmp qword ptr [rdx]; 
0x00000000004ada80: sbb byte ptr [rax], al; add byte ptr [rax], al; and rax, qword ptr [rax]; add al, bh; mov ah, 0xf6; jmp qword ptr [rax]; 
0x0000000000449611: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000449611: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000040a5ea: sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x00000000004600eb: sbb byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004b1028: sbb byte ptr [rax], dh; cli; jmp qword ptr [rdi + 0x11]; 
0x00000000004b4454: sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x0000000000416f00: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048a6c5: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004202f0: sbb byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000044d2bc: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000412177: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000418c37: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000048aa51: sbb byte ptr [rcx + 0x21], cl; ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000460e04: sbb byte ptr [rcx + 0x25], bl; add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x000000000047136a: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004ad138: sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x000000000041a12e: sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000485799: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047187e: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000004706da: sbb byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000046e5e6: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048ff3f: sbb byte ptr [rcx + rdi + 0x6d], cl; js 0x8ffbc; ret 0x8b48; 
0x000000000045d65b: sbb byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000454488: sbb byte ptr [rcx - 0x77], al; ret; 
0x0000000000488737: sbb byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000411d34: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000040dca0: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000004127e4: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000041fd13: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000484c0a: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000044c0e3: sbb byte ptr [rdi + 0x10], dh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c0e2: sbb byte ptr [rdi + 0x10], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004b56bc: sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x000000000044c111: sbb byte ptr [rdi - 0x1e], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c110: sbb byte ptr [rdi - 0x1e], dil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000486feb: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000449b41: sbb byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x0000000000471322: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004707f7: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004715bf: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004715be: sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004709a7: sbb byte ptr [rsi + 0x28], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004b4554: sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x000000000045d809: sbb byte ptr [rsi], dl; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000419af0: sbb ch, bh; sub dword ptr [rax], eax; ret; 
0x0000000000494edc: sbb ch, byte ptr [rcx]; cli; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x0000000000494460: sbb cl, 0xf9; inc dword ptr [rax - 0x25]; stc; jmp qword ptr [rax]; 
0x00000000004b0b68: sbb cl, bh; std; jmp qword ptr [rdx]; 
0x000000000041e5dd: sbb cl, byte ptr [rax + 0x29480614]; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000457c0d: sbb cl, byte ptr [rdi]; mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000450bba: sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000043df0d: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fb5a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f37a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f76a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ef8a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ea6d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e24d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043da2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f129: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e58d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dd6d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d54d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e72d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f61a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee3a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ff4a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d88d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d9c3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e6c3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e1e3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f51b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fe4b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ea03: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dd03: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d823: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e523: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043f66b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ee8b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004947d4: sbb cl, byte ptr [rsi]; cli; ljmp [rdx + 0x3afffa0d]; or eax, 0xce0fffa; cli; call qword ptr [rax + 0x13]; 
0x00000000004944cc: sbb dh, 0xf9; jmp qword ptr [rax - 0x20]; 
0x000000000048df75: sbb dh, bl; ret; 
0x00000000004b2868: sbb dh, ch; sti; jmp qword ptr [rdx]; 
0x00000000004b2ba8: sbb dh, dh; sti; jmp qword ptr [rbx]; 
0x000000000044ea4a: sbb dil, bl; jmp qword ptr [rsi - 0x70]; 
0x0000000000400590: sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x00000000004944e4: sbb dl, 0xf9; jmp qword ptr [rax - 0x24]; 
0x000000000046c4d0: sbb dword ptr [r8], r8d; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000401895: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000048de69: sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x00000000004885db: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000469325: sbb dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000044bdb4: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000044bdb4: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000046c4d1: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000460b69: sbb dword ptr [rbx - 0x52743], eax; call qword ptr [rax]; 
0x00000000004a8dbd: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000450bb3: sbb dword ptr [rcx - 0x41f0b3b8], ecx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000045df84: sbb dword ptr [rdi], ecx; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004490d5: sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000042ee43: sbb dword ptr [rsi + rax], edx; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432efb: sbb dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446637: sbb eax, -1; ret; 
0x000000000048cfc2: sbb eax, 0x18c48348; ret; 
0x0000000000424cdb: sbb eax, 0x2002971; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000490000: sbb eax, 0x22bceb; jne 0x8ffe8; pop rbx; ret; 
0x0000000000419f93: sbb eax, 0x2a; add byte ptr [rax], al; ret; 
0x000000000045e084: sbb eax, 0x39480001; ret; 
0x0000000000435435: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435430: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444847: sbb eax, 0x50954; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444812: sbb eax, 0x50989; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447e6: sbb eax, 0x509b5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447d0: sbb eax, 0x509cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004447ae: sbb eax, 0x509ed; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444789: sbb eax, 0x50a12; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044476c: sbb eax, 0x50a2f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444714: sbb eax, 0x50a87; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444227: sbb eax, 0x50ef4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441f2: sbb eax, 0x50f29; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441c6: sbb eax, 0x50f55; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441b0: sbb eax, 0x50f6b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044418e: sbb eax, 0x50f8d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444169: sbb eax, 0x50fb2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044414c: sbb eax, 0x50fcf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440f4: sbb eax, 0x51027; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004375a3: sbb eax, 0x5d538; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437245: sbb eax, 0x5d896; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004373f0: sbb eax, 0x5d92b; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370c5: sbb eax, 0x5da16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437188: sbb eax, 0x5db93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f45: sbb eax, 0x5db96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437008: sbb eax, 0x5dd13; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dc5: sbb eax, 0x5dd16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e88: sbb eax, 0x5de93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c45: sbb eax, 0x5de96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d09: sbb eax, 0x5e012; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ac5: sbb eax, 0x5e016; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b88: sbb eax, 0x5e193; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436945: sbb eax, 0x5e196; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a08: sbb eax, 0x5e313; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367c5: sbb eax, 0x5e316; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436888: sbb eax, 0x5e493; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436645: sbb eax, 0x5e496; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436708: sbb eax, 0x5e613; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364c5: sbb eax, 0x5e616; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436588: sbb eax, 0x5e793; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436345: sbb eax, 0x5e796; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436408: sbb eax, 0x5e913; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361c5: sbb eax, 0x5e916; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436288: sbb eax, 0x5ea93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436045: sbb eax, 0x5ea96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436108: sbb eax, 0x5ec13; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ec5: sbb eax, 0x5ec16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f88: sbb eax, 0x5ed93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d45: sbb eax, 0x5ed96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bcc: sbb eax, 0x5ef0f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e08: sbb eax, 0x5ef13; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c88: sbb eax, 0x5f093; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359cd: sbb eax, 0x5f10e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b4b: sbb eax, 0x5f1d0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359ef: sbb eax, 0x5f32c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8f: sbb eax, 0x5fb4c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434765: sbb eax, 0x5fe76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348fc: sbb eax, 0x5ff1f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345e5: sbb eax, 0x5fff6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a8: sbb eax, 0x60173; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434465: sbb eax, 0x60176; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434528: sbb eax, 0x602f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342e5: sbb eax, 0x602f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a8: sbb eax, 0x60473; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434165: sbb eax, 0x60476; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434229: sbb eax, 0x605f2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fe5: sbb eax, 0x605f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a8: sbb eax, 0x60773; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e65: sbb eax, 0x60776; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f28: sbb eax, 0x608f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ce5: sbb eax, 0x608f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da8: sbb eax, 0x60a73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b65: sbb eax, 0x60a76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c28: sbb eax, 0x60bf3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339e5: sbb eax, 0x60bf6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa8: sbb eax, 0x60d73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433865: sbb eax, 0x60d76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433928: sbb eax, 0x60ef3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336e5: sbb eax, 0x60ef6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a8: sbb eax, 0x61073; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433565: sbb eax, 0x61076; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433628: sbb eax, 0x611f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333e5: sbb eax, 0x611f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a8: sbb eax, 0x61373; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433265: sbb eax, 0x61376; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330ec: sbb eax, 0x614ef; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433328: sbb eax, 0x614f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432e96: sbb eax, 0x61585; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dd9: sbb eax, 0x61642; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a8: sbb eax, 0x61673; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f0c: sbb eax, 0x616cf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432cee: sbb eax, 0x6172d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043306b: sbb eax, 0x617b0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c23: sbb eax, 0x617f8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef9: sbb eax, 0x61922; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431c02: sbb eax, 0x62819; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431b64: sbb eax, 0x628b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ab2: sbb eax, 0x62969; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a14: sbb eax, 0x62a07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431962: sbb eax, 0x62ab9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318c4: sbb eax, 0x62b57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431812: sbb eax, 0x62c09; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431774: sbb eax, 0x62ca7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316c2: sbb eax, 0x62d59; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431624: sbb eax, 0x62df7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431572: sbb eax, 0x62ea9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314d4: sbb eax, 0x62f47; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431422: sbb eax, 0x62ff9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431384: sbb eax, 0x63097; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d2: sbb eax, 0x63149; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431239: sbb eax, 0x631e2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431182: sbb eax, 0x63299; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310e4: sbb eax, 0x63337; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431032: sbb eax, 0x633e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f94: sbb eax, 0x63487; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee2: sbb eax, 0x63539; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e44: sbb eax, 0x635d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d92: sbb eax, 0x63689; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cf4: sbb eax, 0x63727; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c42: sbb eax, 0x637d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ba4: sbb eax, 0x63877; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af2: sbb eax, 0x63929; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a54: sbb eax, 0x639c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a2: sbb eax, 0x63a79; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430904: sbb eax, 0x63b17; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430858: sbb eax, 0x63bc3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430767: sbb eax, 0x63cb4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a8: sbb eax, 0x63d73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043063e: sbb eax, 0x63ddd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054f: sbb eax, 0x63ecc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430315: sbb eax, 0x63f46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043048a: sbb eax, 0x63f91; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043023b: sbb eax, 0x64020; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f232: sbb eax, 0x65029; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f194: sbb eax, 0x650c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e2: sbb eax, 0x65179; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f044: sbb eax, 0x65217; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef92: sbb eax, 0x652c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eef4: sbb eax, 0x65367; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee42: sbb eax, 0x65419; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eda4: sbb eax, 0x654b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf2: sbb eax, 0x65569; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec54: sbb eax, 0x65607; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba2: sbb eax, 0x656b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb04: sbb eax, 0x65757; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea52: sbb eax, 0x65809; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9b4: sbb eax, 0x658a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e902: sbb eax, 0x65959; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e869: sbb eax, 0x659f2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b2: sbb eax, 0x65aa9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e714: sbb eax, 0x65b47; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e662: sbb eax, 0x65bf9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5c4: sbb eax, 0x65c97; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e512: sbb eax, 0x65d49; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e474: sbb eax, 0x65de7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c2: sbb eax, 0x65e99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e324: sbb eax, 0x65f37; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e272: sbb eax, 0x65fe9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1d4: sbb eax, 0x66087; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e122: sbb eax, 0x66139; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e084: sbb eax, 0x661d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd2: sbb eax, 0x66289; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df34: sbb eax, 0x66327; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de88: sbb eax, 0x663d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd97: sbb eax, 0x664c4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd8: sbb eax, 0x66583; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc6e: sbb eax, 0x665ed; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7f: sbb eax, 0x666dc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042daba: sbb eax, 0x667a1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd75: sbb eax, 0x673a6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccfb: sbb eax, 0x67420; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc6c: sbb eax, 0x674af; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca61: sbb eax, 0x676ba; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92f: sbb eax, 0x677ec; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c869: sbb eax, 0x678b2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7eb: sbb eax, 0x67930; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c754: sbb eax, 0x679c7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c558: sbb eax, 0x67bc3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c427: sbb eax, 0x67cf4; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c318: sbb eax, 0x67e03; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000046b229: sbb eax, 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000424c32: sbb eax, 0x8d48c085; adc eax, 0x23234; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x0000000000419f89: sbb eax, 0xc085002a; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x00000000004408b2: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000414f91: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045d502: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000407d1a: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x00000000004826aa: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000042c077: sbb eax, eax; or eax, 1; ret; 
0x0000000000446635: sbb eax, eax; sbb eax, -1; ret; 
0x0000000000472349: sbb ecx, dword ptr [rbp + 0x29]; ret 0x8948; 
0x0000000000450bbe: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x0000000000403f7d: sbb ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000493ffd: sbb ecx, edi; call qword ptr [rax + 0x1a]; 
0x0000000000493ffd: sbb ecx, edi; call qword ptr [rax + 0x1a]; stc; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000494005: sbb edi, ecx; call rax; 
0x0000000000494005: sbb edi, ecx; call rax; sbb al, 0xf9; call qword ptr [rax]; 
0x00000000004842b1: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042ba24: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000424bf1: sbb esp, dword ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000048a601: sbb esp, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000450bb2: sbb qword ptr [rcx - 0x41f0b3b8], rcx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004842b0: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042b712: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fbae: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x0000000000432dd5: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c1f: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430311: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430237: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a3d85: scasb al, byte ptr [rdi]; cld; call rax; 
0x00000000004a3d81: scasb al, byte ptr [rdi]; cld; dec esp; scasb al, byte ptr [rdi]; cld; call rax; 
0x000000000043fcad: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000458fed: scasd eax, dword ptr [rdi]; add al, ch; or dh, byte ptr [rax - 0x46]; jmp qword ptr [rsi + 0x2e]; 
0x000000000041703d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000046c226: scasd eax, dword ptr [rdi]; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004a3d99: scasd eax, dword ptr [rdi]; cld; call rax; 
0x000000000041199a: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000042cc6d: scasd eax, dword ptr [rdi]; je 0x2cc76; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000041508e: scasd eax, dword ptr [rdi]; nop; xor eax, eax; ret; 
0x0000000000475fc5: scasd eax, dword ptr [rdi]; out 2, eax; add byte ptr [rax + 9], cl; ret 0x850f; 
0x000000000046eb19: scasd eax, dword ptr [rdi]; push rcx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045b10e: scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000411e96: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000041a129: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000448523: scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x000000000040e4c9: scasd eax, dword ptr [rdi]; ret; 
0x0000000000400e5e: scasd eax, dword ptr [rdi]; sub eax, dword ptr [rax]; add rsp, 0x88; pop rbx; ret; 
0x000000000040058d: seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x000000000044be4c: setae al; ret; 
0x000000000045ae3a: sete dh; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000045ae39: sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000488365: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004190bc: setne al; neg eax; ret; 
0x0000000000432dd4: sfence; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c1e: sfence; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430310: sfence; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430236: sfence; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494478: shl ah, 1; stc; call rax; 
0x0000000000494478: shl ah, 1; stc; call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x00000000004748e4: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440d54: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042bb14: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000474876: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ce6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad6: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x000000000047f003: shl byte ptr [rbx], 1; add byte ptr [rbx + 0x23d02405], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f009: shl byte ptr [rbx], 1; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x0000000000424b8a: shl byte ptr [rbx], cl; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004b31b0: shl byte ptr [rcx], 1; cld; jmp qword ptr [rcx]; 
0x000000000048f38b: shl byte ptr [rdx], 1; add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x22cff005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x00000000004482d9: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004755e2: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x000000000044687f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x0000000000444c23: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004403d5: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000042d88b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042d8a2: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000004731e7: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000004731d6: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000042d781: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049447c: shl dh, 1; stc; jmp qword ptr [rax - 0x27]; 
0x0000000000494474: shl dl, 1; stc; call rax; 
0x00000000004a0070: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000042de89: shl dword ptr [rbx + 6], cl; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047f20b: shl dword ptr [rbx], 1; add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x00000000004a7908: shl dword ptr [rdi - 5], 1; ret; 
0x0000000000444c1b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004731d2: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000004466db: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000042d806: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d8bd: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d8a6: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d88f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c34b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d821: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b87c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000042d6e1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000449044: shl dword ptr [rsi], 1; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047f892: shl eax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044e171: shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000440bbb: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044e16d: shl ecx, 3; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000482d7c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d07: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482cd6: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044055a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044c072: shl edx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047f8e4: shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000484483: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000482d7b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d06: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482cd5: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000047f891: shl rax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000440bba: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000440559: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044c071: shl rdx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047f8e3: shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f891; xor eax, eax; ret; 
0x0000000000484482: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000482d74: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d00: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482d73: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482cff: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004500ed: shr al, 0xb5; add edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000423f93: shr al, 0xd7; ret 0xfffe; 
0x0000000000475377: shr bl, 0xb5; call 0x4bf70; nop; mov eax, 0x3f; syscall; 
0x000000000048d151: shr bl, 0xf6; nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000047569a: shr byte ptr [rax - 3], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000049441c: shr byte ptr [rbp - 0x26570007], 1; stc; push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x0000000000400aad: shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000400aef: shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x00000000004974ac: shr byte ptr [rbx], 0xfc; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x00000000004974a4: shr byte ptr [rbx], 1; cld; call qword ptr [rax]; 
0x0000000000495108: shr byte ptr [rcx - 0x54ef0006], 0xfa; jmp qword ptr [rax - 0x54]; 
0x00000000004265df: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000494dd8: shr byte ptr [rcx], cl; cli; inc dword ptr [rdx + 0x29]; cli; call rdx; 
0x00000000004579b8: shr byte ptr [rcx], cl; ret; 
0x00000000004a3d88: shr byte ptr [rdi - 0x4ec70004], 1; cld; call qword ptr [rax]; 
0x00000000004a3e08: shr byte ptr [rdi - 0x4ec70004], 1; cld; lcall [rax + 0x78fffcb0]; mov al, 0xfc; call rax; 
0x00000000004943d4: shr byte ptr [rdx - 0x53ef0007], 0xf9; jmp qword ptr [rax - 0x53]; 
0x000000000049602c: shr byte ptr [rdx - 5], 1; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x0000000000473df2: shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000494038: shr byte ptr [rip + 0x2ee0fff9], 0xf9; inc dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x0000000000466df8: shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000048caa2: shr cl, 1; ret 0xfffe; 
0x000000000048c5af: shr cl, cl; ret; 
0x0000000000444c6e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004481c9: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000448259: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004481fa: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000047429b: shr eax, 2; ret; 
0x00000000004747a3: shr eax, 2; vzeroupper; ret; 
0x000000000040eb3f: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000448245: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000041f5ce: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000482e8c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e11: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482de0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000482e8b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e10: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482ddf: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000047429a: shr rax, 2; ret; 
0x00000000004747a2: shr rax, 2; vzeroupper; ret; 
0x000000000040eb3e: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000482e84: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e0a: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482e83: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e09: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000047213b: sldt word ptr [rax]; cmove rax, rdx; ret; 
0x000000000049f241: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000045df85: sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000049f249: sldt word ptr [rax]; ret; 
0x000000000044625f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000473ad6: stc; add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000454340: stc; add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x0000000000493fee: stc; call qword ptr [rax + 0x15]; 
0x0000000000493ffe: stc; call qword ptr [rax + 0x1a]; 
0x0000000000493ffe: stc; call qword ptr [rax + 0x1a]; stc; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x000000000049400e: stc; call qword ptr [rax + 0x1f]; 
0x00000000004942da: stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x00000000004940ca: stc; call qword ptr [rax + 0x61]; 
0x00000000004940ee: stc; call qword ptr [rax + 0x6c]; 
0x0000000000494306: stc; call qword ptr [rax + 0x70fff9b4]; mov dh, 0xf9; call qword ptr [rax - 0x48]; 
0x00000000004af6b2: stc; call qword ptr [rax + 1]; 
0x00000000004943b6: stc; call qword ptr [rax - 0x1f00065f]; movabs byte ptr [0xa580fff9a430fff9], al; stc; call rax; 
0x000000000049454e: stc; call qword ptr [rax - 0x21]; 
0x000000000049454e: stc; call qword ptr [rax - 0x21]; stc; jmp qword ptr [rax]; 
0x0000000000494426: stc; call qword ptr [rax - 0x23]; 
0x0000000000494002: stc; call qword ptr [rax - 0x2f0006e5]; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000493fe2: stc; call qword ptr [rax - 0x2f0006ef]; adc bh, cl; call qword ptr [rax]; 
0x00000000004945c6: stc; call qword ptr [rax - 0x31]; 
0x0000000000494572: stc; call qword ptr [rax - 0x38]; 
0x000000000049430e: stc; call qword ptr [rax - 0x48]; 
0x000000000049430e: stc; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x000000000049438a: stc; call qword ptr [rax - 0x4b]; 
0x000000000049438a: stc; call qword ptr [rax - 0x4b]; stc; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000494326: stc; call qword ptr [rax - 0x4c]; 
0x0000000000494326: stc; call qword ptr [rax - 0x4c]; stc; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494282: stc; call qword ptr [rax - 0x4d]; 
0x0000000000494282: stc; call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x00000000004942be: stc; call qword ptr [rax - 0x4f]; 
0x00000000004942be: stc; call qword ptr [rax - 0x4f]; stc; call qword ptr [rax]; 
0x00000000004943fa: stc; call qword ptr [rax - 0x5d]; 
0x00000000004943a6: stc; call qword ptr [rax - 0x64]; 
0x00000000004942d6: stc; call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x00000000004942d2: stc; call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x000000000049415a: stc; call qword ptr [rax - 0x70]; 
0x00000000004940de: stc; call qword ptr [rax - 0x7f000698]; imul edi, ecx, 0xf96a70ff; jmp qword ptr [rax + 0x6b]; 
0x0000000000493fea: stc; call qword ptr [rax]; 
0x0000000000493fea: stc; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x00000000004943d6: stc; call qword ptr [rax]; lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rax - 0x53]; 
0x0000000000494346: stc; call qword ptr [rax]; mov ah, 0xf9; push rax; mov ch, 0xf9; call rax; 
0x00000000004942c2: stc; call qword ptr [rax]; mov bl, 0xf9; push rax; mov ah, 0xf9; call rax; 
0x00000000004942a6: stc; call qword ptr [rax]; mov ch, 0xf9; push rax; mov dh, 0xf9; call rax; 
0x0000000000494562: stc; call qword ptr [rax]; ret; 
0x00000000004943ea: stc; call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x0000000000493ffa: stc; call qword ptr [rax]; sbb ecx, edi; call qword ptr [rax + 0x1a]; 
0x00000000004afb2e: stc; call qword ptr [rbp + 1]; 
0x00000000004af78a: stc; call qword ptr [rbx + 4]; 
0x00000000004af9e2: stc; call qword ptr [rbx]; 
0x00000000004afa46: stc; call qword ptr [rcx + 1]; 
0x0000000000494166: stc; call qword ptr [rcx]; 
0x00000000004b01f2: stc; call qword ptr [rdi]; 
0x0000000000494142: stc; call qword ptr [rdx - 0x72]; 
0x0000000000494142: stc; call qword ptr [rdx - 0x72]; stc; jmp qword ptr [rdx]; 
0x00000000004af956: stc; call qword ptr [rdx]; 
0x00000000004941d6: stc; call qword ptr [rsi - 0x6a]; 
0x00000000004b04d2: stc; call qword ptr [rsi]; 
0x0000000000493fe6: stc; call rax; 
0x0000000000493fe6: stc; call rax; adc bh, cl; call qword ptr [rax]; 
0x0000000000493fe6: stc; call rax; adc bh, cl; call qword ptr [rax]; adc al, 0xf9; call qword ptr [rax + 0x15]; 
0x00000000004943c6: stc; call rax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x0000000000494476: stc; call rax; in al, 0xf9; call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x000000000049455e: stc; call rax; mov esi, 0xc310fff9; stc; jmp qword ptr [rax - 0x3c]; 
0x000000000049447a: stc; call rax; out 0xf9, al; jmp qword ptr [rax - 0x27]; 
0x0000000000494592: stc; call rax; sar cl, cl; jmp qword ptr [rax]; 
0x0000000000494006: stc; call rax; sbb al, 0xf9; call qword ptr [rax]; 
0x0000000000494246: stc; call rax; xchg eax, ebx; stc; jmp qword ptr [rax - 0x6c]; 
0x000000000049412e: stc; call rcx; 
0x00000000004b01a6: stc; call rsi; 
0x00000000004af8de: stc; call rsp; 
0x0000000000495201: stc; cli; inc dword ptr [rax - 7]; cli; jmp qword ptr [rax - 7]; 
0x0000000000495211: stc; cli; inc eax; stc; cli; jmp rax; 
0x0000000000495205: stc; cli; jmp qword ptr [rax - 7]; 
0x00000000004951fd: stc; cli; jmp qword ptr [rax]; 
0x0000000000495215: stc; cli; jmp rax; 
0x0000000000462b0e: stc; dec dword ptr [rax + 0x29]; ret; 
0x00000000004682c5: stc; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x0000000000494ade: stc; dec dword ptr [rsi + 0x33]; cli; call rax; 
0x0000000000494ade: stc; dec dword ptr [rsi + 0x33]; cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494026: stc; inc dword ptr [rax + 0x29]; stc; jmp qword ptr [rax + 0x2a]; 
0x0000000000494046: stc; inc dword ptr [rax + 0x32]; stc; jmp qword ptr [rax + 0x33]; 
0x00000000004944e2: stc; inc dword ptr [rax + 0x60fff9da]; fdiv st(1), st(0); inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004940e2: stc; inc dword ptr [rax + 0x70fff969]; push -7; jmp qword ptr [rax + 0x6b]; 
0x00000000004944ea: stc; inc dword ptr [rax - 0x22]; stc; jmp qword ptr [rax]; 
0x0000000000494446: stc; inc dword ptr [rax - 0x23]; stc; jmp qword ptr [rax]; 
0x0000000000494462: stc; inc dword ptr [rax - 0x25]; stc; jmp qword ptr [rax]; 
0x0000000000494502: stc; inc dword ptr [rax - 0x26]; stc; jmp qword ptr [rax]; 
0x000000000049458e: stc; inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x00000000004943c2: stc; inc dword ptr [rax - 0x2f00065b]; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x000000000049438e: stc; inc dword ptr [rax - 0x49]; stc; call qword ptr [rax]; 
0x0000000000494266: stc; inc dword ptr [rax - 0x4b]; stc; jmp qword ptr [rax]; 
0x000000000049404e: stc; inc dword ptr [rax - 0x5f0006cc]; xor eax, 0x36c0fff9; stc; jmp qword ptr [rax + 0x26]; 
0x0000000000494242: stc; inc dword ptr [rax - 0x6d]; stc; call rax; 
0x000000000049409e: stc; inc dword ptr [rax - 0xf0006af]; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x000000000049450a: stc; inc dword ptr [rax]; fdivp st(1); jmp rax; 
0x0000000000494102: stc; inc dword ptr [rax]; jno 0x94100; push rax; jno 0x94104; jmp rax; 
0x000000000049427a: stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x00000000004943a2: stc; inc dword ptr [rax]; wait; stc; call qword ptr [rax - 0x64]; 
0x000000000049403e: stc; inc dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x000000000046a10b: stc; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000049418e: stc; inc dword ptr [rcx - 0x6b]; stc; call rcx; 
0x0000000000494162: stc; inc dword ptr [rcx - 0x72]; stc; call qword ptr [rcx]; 
0x00000000004942ba: stc; inc eax; mov esi, 0xb150fff9; stc; call qword ptr [rax]; 
0x00000000004942b6: stc; inc eax; mov esp, 0xbec0fff9; stc; call qword ptr [rax - 0x4f]; 
0x00000000004943e6: stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000494056: stc; inc eax; stc; jmp qword ptr [rax + 0x26]; 
0x00000000004943d2: stc; inc eax; stosb byte ptr [rdi], al; stc; call qword ptr [rax]; 
0x000000000049405a: stc; jmp qword ptr [rax + 0x26]; 
0x000000000049402a: stc; jmp qword ptr [rax + 0x2a]; 
0x000000000049404a: stc; jmp qword ptr [rax + 0x33]; 
0x00000000004940a6: stc; jmp qword ptr [rax + 0x54]; 
0x00000000004940ea: stc; jmp qword ptr [rax + 0x6b]; 
0x00000000004944ce: stc; jmp qword ptr [rax - 0x20]; 
0x000000000049454a: stc; jmp qword ptr [rax - 0x23]; 
0x00000000004944e6: stc; jmp qword ptr [rax - 0x24]; 
0x0000000000494442: stc; jmp qword ptr [rax - 0x25]; 
0x000000000049447e: stc; jmp qword ptr [rax - 0x27]; 
0x00000000004945ba: stc; jmp qword ptr [rax - 0x35]; 
0x0000000000494566: stc; jmp qword ptr [rax - 0x3c]; 
0x00000000004942fa: stc; jmp qword ptr [rax - 0x42]; 
0x000000000049437a: stc; jmp qword ptr [rax - 0x43]; 
0x00000000004942f6: stc; jmp qword ptr [rax - 0x44]; 
0x0000000000494376: stc; jmp qword ptr [rax - 0x45]; 
0x00000000004942f2: stc; jmp qword ptr [rax - 0x46]; 
0x0000000000494372: stc; jmp qword ptr [rax - 0x47]; 
0x0000000000494262: stc; jmp qword ptr [rax - 0x4d]; 
0x00000000004943da: stc; jmp qword ptr [rax - 0x53]; 
0x00000000004943ee: stc; jmp qword ptr [rax - 0x61]; 
0x000000000049421e: stc; jmp qword ptr [rax - 0x69]; 
0x000000000049424a: stc; jmp qword ptr [rax - 0x6c]; 
0x0000000000494156: stc; jmp qword ptr [rax - 0x71]; 
0x0000000000494022: stc; jmp qword ptr [rax]; 
0x00000000004af772: stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004af72a: stc; jmp qword ptr [rbx]; 
0x0000000000494186: stc; jmp qword ptr [rcx]; 
0x00000000004af742: stc; jmp qword ptr [rdi + 6]; 
0x0000000000494146: stc; jmp qword ptr [rdx]; 
0x00000000004904e3: stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000469865: stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004941a2: stc; jmp qword ptr [rsi]; 
0x000000000049403a: stc; jmp rax; 
0x00000000004af9a6: stc; jmp rbx; 
0x00000000004a7784: stc; jnp 0xa7740; ret; 
0x000000000049425e: stc; lcall [rax + 0x60fff9b1]; mov bl, 0xf9; inc dword ptr [rax - 0x4b]; stc; jmp qword ptr [rax]; 
0x0000000000494126: stc; lcall [rsi - 0x5f000671]; nop; stc; call rcx; 
0x0000000000471875: stc; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a51: stc; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000430168: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430162: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004740b6: stc; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000454a86: stc; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000480e96: stc; or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x80de6; sub eax, r8d; ret; 
0x00000000004940c2: stc; push qword ptr [rax + 0x5e]; stc; jmp rax; 
0x00000000004940e6: stc; push qword ptr [rax + 0x6a]; stc; jmp qword ptr [rax + 0x6b]; 
0x000000000049431e: stc; push qword ptr [rax + 0x70fff9b0]; mov dl, 0xf9; call qword ptr [rax - 0x4c]; 
0x0000000000494422: stc; push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x000000000049459a: stc; push qword ptr [rax - 0x2b]; stc; push qword ptr [rax - 0x7f000640]; ret; 
0x000000000049430a: stc; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x000000000049430a: stc; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; stc; jmp qword ptr [rax]; 
0x0000000000494386: stc; push qword ptr [rax - 0x4d]; stc; call qword ptr [rax - 0x4b]; 
0x0000000000494322: stc; push qword ptr [rax - 0x4e]; stc; call qword ptr [rax - 0x4c]; 
0x000000000049429e: stc; push qword ptr [rax - 0x4f]; stc; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x000000000049433e: stc; push qword ptr [rax - 0x50]; stc; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x0000000000494302: stc; push qword ptr [rax - 0x6f00064e]; mov ah, 0xf9; push qword ptr [rax - 0x4a]; stc; call qword ptr [rax - 0x48]; 
0x0000000000494152: stc; push qword ptr [rax - 0x72]; stc; jmp qword ptr [rax - 0x71]; 
0x000000000049459e: stc; push qword ptr [rax - 0x7f000640]; ret; 
0x00000000004942a2: stc; push qword ptr [rax]; mov bl, 0xf9; call qword ptr [rax]; 
0x0000000000494286: stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x000000000049432a: stc; push qword ptr [rax]; mov dh, 0xf9; call qword ptr [rax]; 
0x0000000000494342: stc; push qword ptr [rax]; mov dl, 0xf9; call qword ptr [rax]; 
0x00000000004940f6: stc; push qword ptr [rax]; outsb dx, byte ptr [rsi]; stc; jmp qword ptr [rax]; 
0x000000000049458a: stc; push qword ptr [rax]; sar cl, 1; inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x000000000049418a: stc; push qword ptr [rcx + 0x41fff994]; xchg eax, ebp; stc; call rcx; 
0x0000000000494196: stc; push qword ptr [rcx - 0x6a]; stc; call qword ptr [rcx]; 
0x0000000000494106: stc; push rax; jno 0x94104; jmp rax; 
0x00000000004942c6: stc; push rax; mov ah, 0xf9; call rax; 
0x000000000049434a: stc; push rax; mov ch, 0xf9; call rax; 
0x00000000004942aa: stc; push rax; mov dh, 0xf9; call rax; 
0x00000000004940a2: stc; push rax; push rdx; stc; jmp qword ptr [rax + 0x54]; 
0x000000000044931f: stc; ret; 
0x000000000048aefb: stc; sal byte ptr [rcx + 0x3c], 0x2f; ja 0x8b7b1; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000004b0b69: stc; std; jmp qword ptr [rdx]; 
0x0000000000438a84: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042c0f7: stc; xlatb; ret 0xff2d; 
0x000000000045a224: std; add byte ptr [rax], al; add al, ch; ret 0xfc5e; 
0x000000000048941f: std; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x00000000004143e7: std; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004b4a3a: std; call qword ptr [rax]; 
0x00000000004b4aaa: std; call qword ptr [rbx + 1]; 
0x00000000004b57a2: std; call qword ptr [rbx]; 
0x00000000004b49ea: std; call qword ptr [rdi]; 
0x00000000004b56c2: std; call qword ptr [rdx + 1]; 
0x00000000004b5232: std; call qword ptr [rdx]; 
0x00000000004b1942: std; call rdx; 
0x0000000000493f35: std; clc; call qword ptr [rax - 3]; 
0x0000000000493f35: std; clc; call qword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x0000000000493f2d: std; clc; inc dword ptr [rax]; std; clc; jmp qword ptr [rax]; 
0x0000000000493f31: std; clc; jmp qword ptr [rax]; 
0x0000000000476162: std; dec dword ptr [rax + 0x39]; ret; 
0x000000000044a34e: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004692d2: std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000473acb: std; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000466dfa: std; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004ab1da: std; inc dword ptr [rax + rax - 2]; push qword ptr [rax + rax - 2]; jmp rsp; 
0x000000000048253b: std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000473aeb: std; inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd4486; cmove rax, rdx; ret; 
0x0000000000447a9a: std; jg 0x47ae7; jmp qword ptr [rdx - 0x2f]; 
0x00000000004b4d62: std; jmp qword ptr [rax + 1]; 
0x00000000004b5d0a: std; jmp qword ptr [rax]; 
0x00000000004b490a: std; jmp qword ptr [rbp]; 
0x00000000004b5972: std; jmp qword ptr [rbx]; 
0x00000000004b52b2: std; jmp qword ptr [rcx + 9]; 
0x00000000004b4f7a: std; jmp qword ptr [rcx]; 
0x00000000004b144a: std; jmp qword ptr [rdi]; 
0x00000000004b572a: std; jmp qword ptr [rdx + 1]; 
0x00000000004b0b6a: std; jmp qword ptr [rdx]; 
0x00000000004506e4: std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423218: std; jmp qword ptr [rsi + 0xf]; 
0x00000000004755bc: std; jmp qword ptr [rsi - 0x70]; 
0x00000000004b54a2: std; jmp qword ptr [rsi]; 
0x00000000004a4d46: std; jmp rax; 
0x00000000004b48aa: std; jmp rdx; 
0x00000000004ab1c6: std; jmp rsp; 
0x000000000042f983: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042f98b: std; mov word ptr [rdi - 2], cx; ret; 
0x00000000004a4d9a: std; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x00000000004a4d3e: std; push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; jmp rax; 
0x00000000004a4d92: std; push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x00000000004ab1d2: std; push qword ptr [rdi + rdi*8 - 0x30003]; std; inc dword ptr [rax + rax - 2]; push qword ptr [rax + rax - 2]; jmp rsp; 
0x000000000044b35e: std; push rbx; ret; 
0x000000000046eb87: std; push rcx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000446fe3: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004b2d21: std; sti; jmp qword ptr [rbx]; 
0x0000000000419ae7: std; sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aa7: std; sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a87: std; sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x0000000000419a92: std; sub dword ptr [rax], eax; ret; 
0x0000000000447a11: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004478fa: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x00000000004387b4: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043857a: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000446d42: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042baf9: std; xlatb; ret 0xc085; 
0x000000000042bf33: std; xlatb; ret 0xe883; 
0x000000000042bb01: std; xlatb; ret; 
0x0000000000473384: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000004733e4: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x0000000000472f7e: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000042baf1: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000440801: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000422521: sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000411f73: sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000434a91: sti; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000495866: sti; call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x0000000000496006: sti; call qword ptr [rax + 0x6b]; 
0x0000000000496012: sti; call qword ptr [rax + rbp*2 + 0x6894fffb]; sti; call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x000000000049601a: sti; call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x0000000000496022: sti; call qword ptr [rax]; 
0x000000000048fdbe: sti; call qword ptr [rbp + 0x53]; 
0x00000000004958a6: sti; call qword ptr [rdi + 0x3d14fffb]; sti; jmp qword ptr [rbx + 0x3e]; 
0x000000000049586e: sti; call qword ptr [rdx]; 
0x00000000004952ca: sti; call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000495912: sti; call qword ptr [rsi + 0x3d]; 
0x000000000049572a: sti; call qword ptr [rsi + 0x3e]; 
0x00000000004b2af2: sti; call qword ptr [rsi + 1]; 
0x000000000049528e: sti; call rax; 
0x000000000049602a: sti; call rax; push -5; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x0000000000490e37: sti; clc; push rbx; ret; 
0x0000000000495720: sti; cmp eax, 0x3deefffb; sti; jmp rsi; 
0x00000000004957aa: sti; dec dword ptr [rax + 0x2efffb3d]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x000000000044916f: sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000004965f2: sti; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x0000000000495296: sti; dec dword ptr [rax]; xor bl, bh; inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x00000000004952c6: sti; dec dword ptr [rdi + rbp]; sti; call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x00000000004952ce: sti; dec dword ptr [rsi]; xor bl, bh; jmp qword ptr [rbx]; 
0x00000000004b0961: sti; hlt; jmp qword ptr [rbx]; 
0x000000000049529a: sti; inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x000000000049585e: sti; inc dword ptr [rdi + 0x3d04fffb]; sti; call qword ptr [rax + 0x3ffffb3e]; sti; call qword ptr [rdx]; 
0x0000000000495ac6: sti; inc dword ptr [rdi + 0x3d04fffb]; sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x0000000000495aca: sti; inc dword ptr [rdi + 0x3d6afffb]; sti; call qword ptr [rsi + 0x3d]; 
0x000000000049529e: sti; jmp qword ptr [rax + 0x2f]; 
0x0000000000496036: sti; jmp qword ptr [rax + 0x6a]; 
0x00000000004958ae: sti; jmp qword ptr [rbx + 0x3e]; 
0x00000000004b213a: sti; jmp qword ptr [rbx + 8]; 
0x00000000004952d2: sti; jmp qword ptr [rbx]; 
0x00000000004b2582: sti; jmp qword ptr [rdi]; 
0x00000000004b286a: sti; jmp qword ptr [rdx]; 
0x000000000044a55f: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000449030: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000044ea4c: sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004b2b72: sti; jmp qword ptr [rsi]; 
0x00000000004965f6: sti; jmp rax; 
0x0000000000495312: sti; jmp rbx; 
0x0000000000495726: sti; jmp rsi; 
0x00000000004957b6: sti; jmp rsp; 
0x0000000000471219: sti; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004965ee: sti; lcall [rcx + 0x74]; sti; dec dword ptr [rax]; jne 0x965f2; jmp rax; 
0x000000000049602e: sti; ljmp [rax - 0x7f000496]; push -5; jmp qword ptr [rax + 0x6a]; 
0x000000000049590e: sti; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x00000000004957ae: sti; ljmp [rsi]; cmp eax, 0x3d88fffb; sti; jmp rsp; 
0x000000000042fd68: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fd62: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000496026: sti; push rax; push -5; call rax; 
0x00000000004959d6: sti; push rcx; cmp al, 0xfb; ljmp [rdx + 0x3d]; sti; call qword ptr [rsi + 0x3d]; 
0x00000000004a790a: sti; ret; 
0x0000000000494a9d: sti; stc; jmp rax; 
0x000000000045a6a7: sti; test rax, rax; je 0x5a6af; call rax; 
0x0000000000438a76: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004b3b79: stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x0000000000461cc2: stosb byte ptr [rdi], al; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x0000000000447d0b: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000048af03: stosb byte ptr [rdi], al; or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x00000000004947d8: stosb byte ptr [rdi], al; or eax, 0xd3afffa; cli; jmp rax; 
0x000000000041ddba: stosb byte ptr [rdi], al; ret; 
0x00000000004943d5: stosb byte ptr [rdi], al; stc; call qword ptr [rax]; 
0x00000000004943d5: stosb byte ptr [rdi], al; stc; call qword ptr [rax]; lodsb al, byte ptr [rsi]; stc; jmp qword ptr [rax - 0x53]; 
0x00000000004b01f1: stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x0000000000494ee0: stosb byte ptr [rdi], al; sub dl, bh; call qword ptr [rax + 0x30]; 
0x0000000000494ee0: stosb byte ptr [rdi], al; sub dl, bh; call qword ptr [rax + 0x30]; cli; call rax; 
0x00000000004a9556: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000049510d: stosd dword ptr [rdi], eax; cli; jmp qword ptr [rax - 0x54]; 
0x0000000000412731: stosd dword ptr [rdi], eax; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004736e4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004743a4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000467f8e: stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000041f5d3: stosd dword ptr [rdi], eax; pop rbx; ret; 
0x00000000004a8eec: stosd dword ptr [rdi], eax; ret; 
0x0000000000473645: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004751e1: stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000401206: stosd dword ptr [rdi], eax; sub eax, dword ptr [rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041f5d2: stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004aca84: sub al, 0; add byte ptr [rax], al; adc r8, qword ptr [rax]; add ah, ah; movsxd rsi, esi; jmp rdi; 
0x00000000004b4aa0: sub al, 0; add byte ptr [rax], al; push -0x17ffff6d; or ebp, edi; call qword ptr [rbx + 1]; 
0x00000000004b4550: sub al, 0; add byte ptr [rax], al; sbb byte ptr [rsi - 0x16b80000], cl; cld; jmp qword ptr [rcx]; 
0x000000000044e9a0: sub al, 0x32; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000481ce6: sub al, 0x48; add esp, 0x38; ret; 
0x0000000000447f42: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000482140: sub al, 0x9e; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000042ced3: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004359f0: sub al, 0xf3; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004692d0: sub al, 0xf5; std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004ac201: sub al, 0xf6; call qword ptr [rax]; 
0x00000000004ac215: sub al, 0xf6; call qword ptr [rdx]; 
0x0000000000494e81: sub al, 0xfa; call qword ptr [rsp + rbp - 6]; call rsp; 
0x0000000000494e85: sub al, 0xfa; call rsp; 
0x0000000000494d45: sub al, 0xfa; jmp qword ptr [rax]; 
0x0000000000473150: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000431776: sub al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000419040: sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045fa2d: sub al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000413185: sub al, byte ptr [rax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000418fd6: sub al, byte ptr [rax]; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000041a9f6: sub al, byte ptr [rax]; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000418f45: sub al, byte ptr [rax]; ret; 
0x0000000000419f8a: sub al, byte ptr [rax]; test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x000000000042417b: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x2296b; cmovne rax, rdx; ret; 
0x0000000000424d2a: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229fc; cmovne rax, rdx; ret; 
0x0000000000431964: sub al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042c295: sub al, ch; std; xlatb; ret; 
0x00000000004974b5: sub bh, ah; jmp rax; 
0x0000000000494f55: sub bh, dl; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494dd5: sub bh, dl; call rdx; 
0x0000000000494d55: sub bh, dl; inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x0000000000494f51: sub bh, dl; jmp qword ptr [rax]; 
0x0000000000494dd1: sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x0000000000494d59: sub bh, dl; push qword ptr [rax + 0x29]; cli; jmp rsi; 
0x0000000000411dcd: sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000411d37: sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004770f7: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000004770f6: sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000483873: sub byte ptr [rax + 1], cl; ret 0x1474; 
0x0000000000411d38: sub byte ptr [rax + 1], cl; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004b0b64: sub byte ptr [rax + rax], dl; sbb cl, bh; std; jmp qword ptr [rdx]; 
0x00000000004515c2: sub byte ptr [rax - 0x75], cl; je 0x515eb; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455f9f: sub byte ptr [rax - 0x75], cl; je 0x55fc8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004571df: sub byte ptr [rax - 0x75], cl; je 0x57208; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000450eae: sub byte ptr [rax - 0x75], cl; jl 0x50ed7; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000004709a9: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041d343: sub byte ptr [rax - 0x77], cl; je 0x1d36c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004231f4: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000471366: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000046f334: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000048c0ac: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000404ac3: sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004b1764: sub byte ptr [rax], ah; add byte ptr [rax - 0x6b], bl; cli; call qword ptr [rcx]; 
0x00000000004b1938: sub byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx], ah; add al, al; std; call rdx; 
0x000000000041002d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100de: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x100ec; add rsp, 0xd8; ret; 
0x00000000004488bb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x488e4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449673: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49689; add rsp, 0x28; ret; 
0x0000000000449791: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b24: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c33: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000044a5a2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4a5b7; add rsp, 0x28; ret; 
0x000000000045adab: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000045aff3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681fe: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475608: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75653; add rsp, 0x58; ret; 
0x000000000047568b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75699; movzx eax, al; add rsp, 0x58; ret; 
0x000000000047573a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481be6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81bf2; add rsp, 0x20; pop rbx; ret; 
0x0000000000481ce1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481da1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481f02: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821d1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x821fe; add rsp, 0x68; ret; 
0x000000000048420d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8424e; leave; ret; 
0x00000000004847d4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84894; add rsp, 0x30; pop rbx; ret; 
0x0000000000484eb9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f9c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84fb4; add rsp, 0x38; ret; 
0x0000000000488317: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8832c; add rsp, 0x38; ret; 
0x000000000040dc94: sub byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; jne 0xdcbc; add rsp, 0x118; ret; 
0x000000000041108a: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000044c775: sub byte ptr [rax], al; je 0x4c788; test rdx, rdx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000411dce: sub byte ptr [rbp - 0x667bf02e], al; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000048f4a1: sub byte ptr [rbx + 0x22cee005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f4a0: sub byte ptr [rbx + 0x22cee005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f391: sub byte ptr [rbx + 0x22cff005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f390: sub byte ptr [rbx + 0x22cff005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x0000000000448d04: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000481b0b: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a99: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000488083: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000488082: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000494418: sub byte ptr [rcx + rdi*8 - 0x6522f01], 0xff; test al, 0xd9; stc; push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x0000000000482666: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x00000000004940e4: sub byte ptr [rcx - 7], 0xff; jo 0x94154; stc; jmp qword ptr [rax + 0x6b]; 
0x000000000044c0ec: sub byte ptr [rcx], al; ret; 
0x00000000004b2864: sub byte ptr [rcx], dh; add byte ptr [rax], bl; out dx, al; sti; jmp qword ptr [rdx]; 
0x00000000004789f5: sub byte ptr [rcx], dh; imul al; mov edi, dword ptr [rdx - 8]; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004756b9: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000401643: sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000422016: sub byte ptr [rdi], cl; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000484b84: sub byte ptr [rsi - 0x31140007], bh; nop word ptr [rax + rax]; pop rbx; ret; 
0x0000000000431b66: sub byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494025: sub cl, bh; inc dword ptr [rax + 0x29]; stc; jmp qword ptr [rax + 0x2a]; 
0x00000000004679b6: sub cl, bpl; ret 0xffe8; 
0x000000000040ec2d: sub cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x00000000004679b7: sub cl, ch; ret 0xffe8; 
0x000000000045da84: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004673dd: sub dh, al; add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000004ac141: sub dh, dh; jmp qword ptr [rax]; 
0x0000000000494ee1: sub dl, bh; call qword ptr [rax + 0x30]; 
0x0000000000494ee1: sub dl, bh; call qword ptr [rax + 0x30]; cli; call rax; 
0x00000000004755ee: sub dword ptr [rax + 0x101], edi; syscall; 
0x0000000000477412: sub dword ptr [rax + 0xf000002], -0x7b; ret; 
0x000000000042f233: sub dword ptr [rax + 6], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048ae16: sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x0000000000424174: sub dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0x22a12; lea rax, [rip + 0x2296b]; cmovne rax, rdx; ret; 
0x0000000000424ac4: sub dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x00000000004200e4: sub dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046b2f2: sub dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000424e1d: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x221d9; lea rax, [rip + 0x22132]; cmovne rax, rdx; ret; 
0x0000000000424cdd: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22309; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424b7d: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22479; lea rax, [rip + 0x223d2]; cmovne rax, rdx; ret; 
0x0000000000424e84: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x224c2; lea rax, [rip + 0x2247b]; cmovne rax, rdx; ret; 
0x0000000000424d44: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x225f2; lea rax, [rip + 0x225ab]; cmovne rax, rdx; ret; 
0x0000000000424be4: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22762; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424e63: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22923; lea rax, [rip + 0x228cc]; cmovne rax, rdx; ret; 
0x0000000000424d23: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22a53; lea rax, [rip + 0x229fc]; cmovne rax, rdx; ret; 
0x0000000000424c83: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23373; lea rax, [rip + 0x2330c]; cmovne rax, rdx; ret; 
0x0000000000424b6c: sub dword ptr [rax], eax; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004236db: sub dword ptr [rax], eax; add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x0000000000419ae8: sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x29fd18], eax; ret; 
0x0000000000419aa8: sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd33], rax; ret; 
0x0000000000419a88: sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x00000000004200be: sub dword ptr [rax], eax; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x29979a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200cc: sub dword ptr [rax], eax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x0000000000419909: sub dword ptr [rax], eax; ret; 
0x000000000046e264: sub dword ptr [rdi + 0x29], esi; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000447191: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000004441f3: sub dword ptr [rdi], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000046e266: sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000046e9ff: sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000424e6a: sub dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x228cc; cmovne rax, rdx; ret; 
0x000000000042d6b6: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x0000000000431ab4: sub dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dc2d: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc35: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dc3d: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000042c027: sub eax, -1; jne 0x2c030; vzeroupper; ret; 
0x000000000042376a: sub eax, 0x10; ret; 
0x000000000046e9fa: sub eax, 0x20; cmp eax, 0x29; ja 0x6ea90; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000494d41: sub eax, 0x2ca0fffa; cli; jmp qword ptr [rax]; 
0x0000000000494e79: sub eax, 0x2d54fffa; cli; call rsp; 
0x0000000000494039: sub eax, 0x2ee0fff9; stc; inc dword ptr [rax]; xor cl, bh; jmp qword ptr [rax]; 
0x0000000000481567: sub eax, 0x3349646c; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000432cef: sub eax, 0x49000617; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418fd5: sub eax, 0x583002a; xor eax, 0x1002a2d; ret; 
0x0000000000431626: sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000466235: sub eax, 0x83000000; ret 0x8b01; 
0x0000000000468e64: sub eax, 0x83000000; ret; 
0x00000000004a955a: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000449b00: sub eax, 0xc0850027; jne 0x49b68; mov eax, 0x48; syscall; 
0x00000000004a98f4: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004673e0: sub eax, 0xffee53e9; jmp qword ptr [rsi + 0x2e]; 
0x000000000042c11f: sub eax, 0xffff; jne 0x2c030; ret; 
0x00000000004588a4: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000446ab4: sub eax, 1; ret; 
0x0000000000402282: sub eax, 3; cmp eax, 0xa; ja 0x1eef; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000044c869: sub eax, 3; cmp rax, 0x1e; ja 0x4c894; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d58e: sub eax, 4; cmp rax, 0x16; ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000481a36: sub eax, dword ptr [0]; ret; 
0x00000000004014ee: sub eax, dword ptr [rax]; adc ch, cl; ret; 
0x00000000004014c0: sub eax, dword ptr [rax]; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000040390f: sub eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004005a9: sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x0000000000400e5f: sub eax, dword ptr [rax]; add rsp, 0x88; pop rbx; ret; 
0x0000000000401207: sub eax, dword ptr [rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004004cc: sub eax, dword ptr [rax]; nop; ret; 
0x0000000000401c7f: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045da26: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x0000000000461311: sub eax, dword ptr [rcx]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004198ee: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000424bca: sub eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22b6c; cmovne rax, rdx; ret; 
0x00000000004119c3: sub eax, dword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000418c13: sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004318c6: sub eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446c1d: sub eax, eax; cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000480ea4: sub eax, eax; ret; 
0x000000000042c073: sub eax, ecx; je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x00000000004182e9: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x0000000000484500: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000042631c: sub eax, ecx; ret; 
0x0000000000471549: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000484480: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000440bc9: sub eax, edi; ret; 
0x00000000004743ae: sub eax, edi; shr rax, 2; ret; 
0x00000000004845e3: sub eax, edx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000042375e: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x23750; sub rax, 0x10; ret; 
0x0000000000418c3b: sub eax, edx; ret; 
0x00000000004747a0: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000041089d: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x00000000004173d9: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417452: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e2: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471437: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000410fab: sub eax, edx; sub rdi, rdx; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000470652: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000042c03c: sub eax, edx; vzeroupper; ret; 
0x0000000000484640: sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000446c7d: sub eax, esi; ret; 
0x00000000004845e2: sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000446c1c: sub eax, r8d; cmp eax, ecx; jle 0x46c58; movsxd rax, ecx; ret; 
0x0000000000480ea3: sub eax, r8d; ret; 
0x0000000000414630: sub ebp, eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466d68: sub ebp, ecx; cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000413206: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004a6615: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004373f1: sub ebx, ecx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000429075: sub ebx, edx; jbe 0x29084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a7d5: sub ebx, edx; jbe 0x2a7e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b7b5: sub ebx, edx; jbe 0x2b7c4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000041b870: sub ecx, dword ptr [rax + 0x39]; ret; 
0x000000000044cf58: sub ecx, dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x8902; 
0x0000000000474af4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000473934: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x000000000048807d: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x0000000000494029: sub ecx, edi; jmp qword ptr [rax + 0x2a]; 
0x00000000004108a0: sub ecx, edx; cmp rax, rcx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000417036: sub ecx, edx; cmp rax, rcx; jbe 0x170f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041725e: sub ecx, edx; cmp rax, rcx; jbe 0x172f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004173dc: sub ecx, edx; cmp rax, rcx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417455: sub ecx, edx; cmp rax, rcx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e5: sub ecx, edx; cmp rax, rcx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041827c: sub ecx, edx; cmp rax, rcx; jbe 0x182a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000047143a: sub ecx, edx; cmp rax, rcx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000046ae64: sub ecx, esp; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000430853: sub edi, 0x20; lea r11, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430762: sub edi, 0x40; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a3: sub edi, 0x40; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd92: sub edi, 0x40; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd3: sub edi, 0x40; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000484446: sub edi, eax; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000045fb3d: sub edi, ebx; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004143e0: sub edi, ecx; cmp rax, rdi; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000494e89: sub edi, edx; call qword ptr [rbx + rbp - 6]; call rsp; 
0x0000000000494e8d: sub edi, edx; call rsp; 
0x0000000000410fae: sub edi, edx; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000494d4d: sub edi, edx; jmp qword ptr [rax]; 
0x000000000043759f: sub edi, edx; lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8b: sub edi, edx; lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494f4d: sub edi, edx; push qword ptr [rax + 0x20fffa2a]; sub bh, dl; call qword ptr [rax + 0xfffa29]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494dc9: sub edi, edx; push qword ptr [rdx + 0x2b]; cli; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x0000000000494dcd: sub edi, edx; push rdx; sub bh, dl; jmp qword ptr [rdx + 0x2a]; 
0x000000000043723e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370be: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f3e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dbe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c3e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436abe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043693e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367be: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043663e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364be: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043633e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361be: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043603e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ebe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d3e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bc5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043475e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345de: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043445e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342de: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043415e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fde: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e5e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433cde: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b5e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339de: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043385e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336de: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043355e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333de: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043325e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330e5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a9022: sub edi, esi; int 0x6b; ret; 
0x00000000004974a5: sub edi, esp; call qword ptr [rax]; 
0x00000000004974a1: sub edi, esp; call rax; 
0x00000000004974a1: sub edi, esp; call rax; sub edi, esp; call qword ptr [rax]; 
0x00000000004974a9: sub edi, esp; inc eax; sub edi, esp; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x00000000004974ad: sub edi, esp; ljmp [rax + 0x78fffc2b]; sub bh, ah; jmp rax; 
0x000000000045f601: sub edi, esp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000432e91: sub edx, 0x40; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dd1: sub edx, 0x40; sfence; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043030d: sub edx, 0x40; sfence; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418c40: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000418c35: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000047164b: sub edx, dword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000471661: sub edx, dword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000472aed: sub edx, eax; jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d54: sub edx, eax; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d64: sub edx, eax; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d74: sub edx, eax; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d84: sub edx, eax; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004447cc: sub edx, ecx; lea r11, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ac: sub edx, ecx; lea r11, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000494f19: sub edx, edi; call qword ptr [rax]; 
0x0000000000494ddd: sub edx, edi; call rdx; 
0x0000000000494f59: sub edx, edi; inc dword ptr [rax]; sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494dd9: sub edx, edi; inc dword ptr [rdx + 0x29]; cli; call rdx; 
0x0000000000494f5d: sub edx, edi; jmp qword ptr [rax + 0xb]; 
0x0000000000494d5d: sub edx, edi; jmp rsi; 
0x0000000000494ed9: sub edx, edi; lcall [rdx]; sub edx, edi; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x000000000041f5c6: sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000494edd: sub edx, edi; ljmp [rdx + 0x50fffa28]; xor dl, bh; call rax; 
0x000000000045d668: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x0000000000414767: sub edx, esi; cmp r12, rdx; jbe 0x14950; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000411b0b: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000413bdf: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000468b82: sub edx, esi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043069f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dccf: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046b325: sub esi, ecx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000416ddf: sub esi, edx; cmp rax, rsi; jbe 0x16e40; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000470655: sub esi, edx; cmp rax, rsi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004714d4: sub esi, edx; cmp rax, rsi; jbe 0x714f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000437241: sub esi, edx; lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370c1: sub esi, edx; lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f41: sub esi, edx; lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dc1: sub esi, edx; lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c41: sub esi, edx; lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ac1: sub esi, edx; lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436941: sub esi, edx; lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367c1: sub esi, edx; lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436641: sub esi, edx; lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364c1: sub esi, edx; lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436341: sub esi, edx; lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361c1: sub esi, edx; lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436041: sub esi, edx; lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ec1: sub esi, edx; lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d41: sub esi, edx; lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bc8: sub esi, edx; lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434761: sub esi, edx; lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345e1: sub esi, edx; lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434461: sub esi, edx; lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342e1: sub esi, edx; lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434161: sub esi, edx; lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fe1: sub esi, edx; lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e61: sub esi, edx; lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ce1: sub esi, edx; lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b61: sub esi, edx; lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339e1: sub esi, edx; lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433861: sub esi, edx; lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336e1: sub esi, edx; lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433561: sub esi, edx; lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333e1: sub esi, edx; lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433261: sub esi, edx; lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330e8: sub esi, edx; lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043759c: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a88: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048a6c3: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f9f6: sub esp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000468102: sub esp, 0x80; call 0x4be80; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000475217: sub esp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000045cae7: sub esp, 0x80; call 0x4be80; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004923dd: sub esp, 8; add rsp, 8; ret; 
0x000000000048d0c6: sub esp, 8; call 0xdcf0; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047ba7b: sub esp, 8; call qword ptr [rip + 0x23e79c]; xor eax, eax; add rsp, 8; ret; 
0x000000000040dcd1: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x0000000000475243: sub esp, 8; syscall; 
0x0000000000449c93: sub esp, dword ptr [rdi]; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004140eb: sub esp, esi; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000429074: sub r11, rdx; jbe 0x29084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a7d4: sub r11, rdx; jbe 0x2a7e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b7b4: sub r11, rdx; jbe 0x2b7c4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004140ea: sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000046b324: sub r14, rcx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000045fb3c: sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045f600: sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004119c2: sub r8, qword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004182e8: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471548: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000423769: sub rax, 0x10; ret; 
0x0000000000446ab3: sub rax, 1; ret; 
0x000000000044c868: sub rax, 3; cmp rax, 0x1e; ja 0x4c894; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d58d: sub rax, 4; cmp rax, 0x16; ja 0x4d5e0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000481a35: sub rax, qword ptr [0]; ret; 
0x00000000004198ed: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000481a34: sub rax, qword ptr fs:[0]; ret; 
0x0000000000485212: sub rax, r8; ret; 
0x000000000042c072: sub rax, rcx; je 0x2c080; sbb eax, eax; or eax, 1; ret; 
0x0000000000440bc8: sub rax, rdi; ret; 
0x00000000004743ad: sub rax, rdi; shr rax, 2; ret; 
0x000000000042375d: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x23750; sub rax, 0x10; ret; 
0x0000000000446b83: sub rax, rdx; ret; 
0x000000000047479f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000041089c: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x00000000004173d8: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417451: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e1: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471436: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000410faa: sub rax, rdx; sub rdi, rdx; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000470651: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000440c1f: sub rax, rdx; vzeroupper; ret; 
0x0000000000446c7c: sub rax, rsi; ret; 
0x000000000041462f: sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048807c: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88060; mov eax, 1; ret; 
0x000000000046ae63: sub rcx, r12; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000041089f: sub rcx, rdx; cmp rax, rcx; jbe 0x10918; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000417035: sub rcx, rdx; cmp rax, rcx; jbe 0x170f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041725d: sub rcx, rdx; cmp rax, rcx; jbe 0x172f8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004173db: sub rcx, rdx; cmp rax, rcx; jbe 0x17418; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000417454: sub rcx, rdx; cmp rax, rcx; jbe 0x17480; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004181e4: sub rcx, rdx; cmp rax, rcx; jbe 0x18220; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041827b: sub rcx, rdx; cmp rax, rcx; jbe 0x182a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471439: sub rcx, rdx; cmp rax, rcx; jbe 0x71470; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000430852: sub rdi, 0x20; lea r11, [rip + 0x63bc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430761: sub rdi, 0x40; lea r11, [rip + 0x63cb4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004306a2: sub rdi, 0x40; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd91: sub rdi, 0x40; lea r11, [rip + 0x664c4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcd2: sub rdi, 0x40; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004143df: sub rdi, rcx; cmp rax, rdi; jbe 0x144e8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000410fad: sub rdi, rdx; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000043759e: sub rdi, rdx; lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8a: sub rdi, rdx; lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043723d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370bd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f3d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dbd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c3d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436abd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043693d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367bd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043663d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364bd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043633d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361bd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043603d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ebd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d3d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bc4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043475d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345dd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043445d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342dd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043415d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fdd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e5d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433cdd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b5d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339dd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043385d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336dd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043355d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333dd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043325d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330e4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432e90: sub rdx, 0x40; lea r11, [rip + 0x61585]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dd0: sub rdx, 0x40; sfence; lea r11, [rip + 0x61642]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043030c: sub rdx, 0x40; sfence; lea r11, [rip + 0x63f46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047164a: sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000471660: sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000414766: sub rdx, r14; cmp r12, rdx; jbe 0x14950; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000472aec: sub rdx, rax; jbe 0x72d90; add rax, rdi; add rax, rcx; ret; 
0x0000000000472d53: sub rdx, rax; jbe 0x72d90; add rax, rdi; ret; 
0x0000000000472d63: sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000472d73: sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000472d83: sub rdx, rax; jbe 0x72d90; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004447cb: sub rdx, rcx; lea r11, [rip + 0x509cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004441ab: sub rdx, rcx; lea r11, [rip + 0x50f6b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041f5c5: sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000045d667: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000411b0a: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000413bde: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000468b81: sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043069e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x63d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dcce: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x66583]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000416dde: sub rsi, rdx; cmp rax, rsi; jbe 0x16e40; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000470654: sub rsi, rdx; cmp rax, rsi; jbe 0x70690; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004714d3: sub rsi, rdx; cmp rax, rsi; jbe 0x714f0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000437240: sub rsi, rdx; lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370c0: sub rsi, rdx; lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f40: sub rsi, rdx; lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dc0: sub rsi, rdx; lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c40: sub rsi, rdx; lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ac0: sub rsi, rdx; lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436940: sub rsi, rdx; lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367c0: sub rsi, rdx; lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436640: sub rsi, rdx; lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364c0: sub rsi, rdx; lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436340: sub rsi, rdx; lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361c0: sub rsi, rdx; lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436040: sub rsi, rdx; lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ec0: sub rsi, rdx; lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d40: sub rsi, rdx; lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bc7: sub rsi, rdx; lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434760: sub rsi, rdx; lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345e0: sub rsi, rdx; lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434460: sub rsi, rdx; lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342e0: sub rsi, rdx; lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434160: sub rsi, rdx; lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fe0: sub rsi, rdx; lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e60: sub rsi, rdx; lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ce0: sub rsi, rdx; lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b60: sub rsi, rdx; lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339e0: sub rsi, rdx; lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433860: sub rsi, rdx; lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336e0: sub rsi, rdx; lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433560: sub rsi, rdx; lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333e0: sub rsi, rdx; lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433260: sub rsi, rdx; lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330e7: sub rsi, rdx; lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043759b: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a87: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048a6c2: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f9f5: sub rsp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000468101: sub rsp, 0x80; call 0x4be80; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000475216: sub rsp, 0x80; call 0x4be80; add rsp, 0x80; pop rbx; ret; 
0x000000000045cae6: sub rsp, 0x80; call 0x4be80; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004923dc: sub rsp, 8; add rsp, 8; ret; 
0x000000000048d0c5: sub rsp, 8; call 0xdcf0; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047ba7a: sub rsp, 8; call qword ptr [rip + 0x23e79c]; xor eax, eax; add rsp, 8; ret; 
0x000000000040dcd0: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x0000000000475242: sub rsp, 8; syscall; 
0x000000000040130c: syscall; 
0x000000000044414e: syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000449615: syscall; cmp rax, -0xfff; jae 0x49620; ret; 
0x000000000044a6a5: syscall; cmp rax, -0xfff; jae 0x4a6b0; ret; 
0x000000000044a6d5: syscall; cmp rax, -0xfff; jae 0x4a6e0; ret; 
0x000000000044a705: syscall; cmp rax, -0xfff; jae 0x4a710; ret; 
0x000000000044bdb8: syscall; cmp rax, -0xfff; jae 0x4bdc3; ret; 
0x000000000044bde5: syscall; cmp rax, -0xfff; jae 0x4bdf0; ret; 
0x0000000000475385: syscall; cmp rax, -0xfff; jae 0x75390; ret; 
0x0000000000488535: syscall; cmp rax, -0xfff; jae 0x88540; ret; 
0x000000000044be97: syscall; pop rdx; pop rsi; ret; 
0x0000000000474c55: syscall; ret; 
0x0000000000444ddd: test ah, 0x20; jne 0x44ec0; test ah, 0x40; jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444de6: test ah, 0x40; jne 0x44ed0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444cfe: test ah, 0x40; jne 0x44ed0; test dh, 0x40; jne 0x44c40; lea rax, [rdi + 0xf]; ret; 
0x000000000045e1bd: test ah, dh; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000049138f: test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x22847a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000417b54: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000475345: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000048ae53: test al, 0; add byte ptr [rax], al; ret; 
0x0000000000488464: test al, 0x1e; add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000444d8c: test al, 0x20; jne 0x44e50; test al, 0x40; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000471247: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004af5e4: test al, 0x3e; add byte ptr [rax], al; fcomp st(1); clc; call qword ptr [rax]; 
0x0000000000444d94: test al, 0x40; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000444c7c: test al, 0x40; jne 0x44e60; test dl, 0x40; jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x0000000000449de4: test al, 0x49; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000044baba: test al, 0x75; ret; 
0x00000000004b49e4: test al, 0x92; add byte ptr [rax], al; fadd dword ptr [rsi]; std; call qword ptr [rdi]; 
0x00000000004a6ed7: test al, 0x97; xchg eax, esp; ret; 
0x00000000004b3ab8: test al, 0xa2; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b00f8: test al, 0xa5; stc; jmp qword ptr [rcx]; 
0x0000000000494420: test al, 0xd9; stc; push qword ptr [rax - 0x25]; stc; call qword ptr [rax - 0x23]; 
0x00000000004a7a1b: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000049440d: test al, 0xf9; jmp rax; 
0x0000000000495105: test al, 0xfa; inc eax; test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x00000000004a3a1d: test al, 0xfc; call qword ptr [rax - 0x57]; 
0x00000000004a3a11: test al, 0xfc; jmp qword ptr [rax - 0x57]; 
0x00000000004b3b25: test al, 0xfc; jmp qword ptr [rdx]; 
0x00000000004a3a05: test al, 0xfc; push qword ptr [rax + 0x70fffca8]; test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x000000000047e725: test al, al; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004265da: test al, al; jne 0x265c0; xor eax, eax; sub eax, ecx; ret; 
0x000000000045fc89: test al, dl; adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000420466: test bh, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000048ae31: test bh, bh; je 0x8ae3b; cmp dil, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd1: test bh, bh; je 0x8dfdb; cmp dil, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee31: test bh, bh; je 0x8ee3b; cmp dil, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a1: test bh, bh; je 0x8f8ab; cmp dil, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x000000000048ad0c: test bh, bh; jns 0x8ad13; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dd2c: test bh, bh; jns 0x8dd33; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f92c: test bh, bh; jns 0x8f933; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000406fa1: test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a5e8: test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x00000000004724dc: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000041b614: test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000004109ef: test byte ptr [rax + rax - 0x76b80000], ch; ret; 
0x00000000004015e2: test byte ptr [rax + rax], al; cmp eax, -1; je 0x16bb; add rsp, 0x98; ret; 
0x0000000000468ad4: test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000040dc2e: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000480f96: test byte ptr [rax - 0x73], 0x3d; jl 0x80fdb; add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000044c14c: test byte ptr [rax - 0x73], 0x3d; jno 0x4c0ed; add al, 0; mov eax, 0x15; syscall; 
0x000000000047d73f: test byte ptr [rax - 0x73], 0x3d; sal dword ptr [rdi + 2], cl; add byte ptr [rax + 0x15], bh; syscall; 
0x0000000000458f91: test byte ptr [rax - 0x76b80000], ch; ret 0x2948; 
0x0000000000402531: test byte ptr [rax - 0x77], 0x45; mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x00000000004140f2: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x40]; 
0x000000000046fe4f: test byte ptr [rax - 0x77], 0xef; call qword ptr [rax + 0x38]; 
0x000000000046a4c9: test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000433ce6: test byte ptr [rax], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dc36: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x00000000004746ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042b9ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b99a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eb4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000041a5da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000444e8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444e0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444e1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444e2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444e3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444e5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444e7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000444dfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004848da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x237799]; mov qword ptr [rip + 0x23777a], rax; ret; 
0x000000000044d48a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26ce69]; ret; 
0x000000000041322a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000044485a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044423a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000044424a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004753ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000004753ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000004753ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000004753ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000004753da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000004753da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044a69a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x0000000000418eea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000048df7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000004490da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000043511a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044c0fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000048d0fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045acba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000045acda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000045acfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000418eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000045ae5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000004746da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000004746ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000004746fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047470a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047471a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047472a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x000000000047473a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000481a1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004717ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418f5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d07a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d10a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d16a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d15a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d11a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000044f5ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d371]; ret; 
0x0000000000418f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a01d9]; ret; 
0x000000000048ae4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x00000000004739ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000418f6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000423e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000480eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x00000000004134ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x00000000004352aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043522a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a6f5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004753a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a6c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000485278: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000044bdd8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474c48: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x00000000004120aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000472ffa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x0000000000417e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047351a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000444c3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004abca0: test byte ptr [rax], al; add byte ptr [rax], al; push 0x28000005; wait; cmc; call rax; 
0x00000000004b3bd5: test byte ptr [rax], al; add byte ptr [rax], bl; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004b3b75: test byte ptr [rax], al; add byte ptr [rax], ch; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x000000000044f0a2: test byte ptr [rbp + rcx*4 + 0x3c], cl; ret; 
0x000000000045ae36: test byte ptr [rbp - 0x6bf0bf40], 0xc6; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000046a3cc: test byte ptr [rbp - 0x7c000018], bl; ret; 
0x00000000004594d4: test byte ptr [rbx + rdi*8 - 0x7cb70001], bh; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000046e83f: test byte ptr [rbx + rdi*8 - 1], dh; dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042f777: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004339e6: test byte ptr [rbx], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446262: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000046eedf: test byte ptr [rcx + 0x48fffffc], cl; lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000048bf5b: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000446259: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000047314f: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046f67f: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call qword ptr [rdi + 0x38]; 
0x000000000048daf2: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x0000000000461342: test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000004542ad: test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000401649: test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004236f0: test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x0000000000487b7e: test byte ptr [rdi - 0x3b7cb701], dh; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044b7b4: test byte ptr [rdi - 0x7d000000], bl; ret; 
0x000000000044a2ff: test byte ptr [rdi], 0x94; ret 0xc221; 
0x0000000000449e16: test byte ptr [rdi], 0x94; ret 0xca21; 
0x0000000000471214: test byte ptr [rdi], 2; mov rbx, rdi; jne 0x71288; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000455286: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000474291: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004730c1: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x00000000004342e6: test byte ptr [rdx], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000491397: test byte ptr [rdx], ah; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000042067e: test byte ptr [rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000047c9b2: test byte ptr [rdx], al; add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x00000000004724c4: test byte ptr [rdx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004221de: test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004761be: test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000004226de: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000424cd9: test byte ptr [rip + 0x29711d], 2; lea rdx, [rip + 0x22309]; lea rax, [rip + 0x22262]; cmovne rax, rdx; ret; 
0x0000000000424be0: test byte ptr [rip + 0x297216], 2; lea rdx, [rip + 0x22762]; lea rax, [rip + 0x2271b]; cmovne rax, rdx; ret; 
0x0000000000424ac0: test byte ptr [rip + 0x297365], 0x10; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x21b7b]; cmove rax, rdx; ret; 
0x0000000000433fe6: test byte ptr [rip + 0x63490006], 0x14; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000468f54: test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000045e984: test byte ptr [rip - 0x7c000011], al; ret; 
0x00000000004735cd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000004265aa: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000048870d: test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x00000000004532f1: test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x00000000004336e6: test byte ptr [rsi], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440aad: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004af4bc: test byte ptr [rsi], cl; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004acdc0: test byte ptr [rsi], dl; add byte ptr [rax], al; pop rsp; jne 0xacdbd; call qword ptr [rdi + 2]; 
0x0000000000486b8b: test byte ptr [rsp + rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000040acd2: test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x00000000004af9e1: test cl, bh; call qword ptr [rbx]; 
0x00000000004af9b9: test cl, bh; call qword ptr [rdx]; 
0x0000000000489d4a: test cl, bl; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000044673f: test cl, cl; jne 0x46730; ret; 
0x00000000004467ef: test cl, cl; jne 0x467e0; ret; 
0x0000000000446aaf: test cl, cl; jne 0x46aa0; sub rax, 1; ret; 
0x00000000004af9b8: test cl, dil; call qword ptr [rdx]; 
0x0000000000444d07: test dh, 0x40; jne 0x44c40; lea rax, [rdi + 0xf]; ret; 
0x0000000000446196: test dh, 0x40; jne 0x46160; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044828a: test dh, 0xf0; je 0x481b2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000444d4d: test dh, 4; jne 0x44c40; lea rax, [rdi + 0xb]; ret; 
0x0000000000491711: test dh, al; add eax, 0x89490000; ret 0x8349; 
0x00000000004b438c: test dh, bl; cld; call qword ptr [rdi + 1]; 
0x0000000000450c85: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000048ae30: test dil, dil; je 0x8ae3b; cmp dil, 0x10; jne 0x8ae58; xor eax, eax; ret; 
0x000000000048dfd0: test dil, dil; je 0x8dfdb; cmp dil, 0x10; jne 0x8dfee; xor eax, eax; ret; 
0x000000000048ee30: test dil, dil; je 0x8ee3b; cmp dil, 0x10; jne 0x8ee4e; xor eax, eax; ret; 
0x000000000048f8a0: test dil, dil; je 0x8f8ab; cmp dil, 0x10; jne 0x8f8c8; xor eax, eax; ret; 
0x000000000048ad0b: test dil, dil; jns 0x8ad13; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dd2b: test dil, dil; jns 0x8dd33; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f92b: test dil, dil; jns 0x8f933; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000444c84: test dl, 0x40; jne 0x44c40; lea rax, [rdi + 7]; ret; 
0x00000000004460e2: test dl, 0x40; jne 0x46160; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000444cb2: test dl, 4; jne 0x44c40; lea rax, [rdi + 3]; ret; 
0x0000000000474687: test dl, dl; je 0x746a0; mov cl, dl; and cl, 0xf; je 0x746b0; ret; 
0x000000000044695f: test dl, dl; jne 0x46950; lea rax, [rcx - 1]; ret; 
0x0000000000400593: test dl, dl; jne 0x598; ret; 
0x0000000000480e17: test dl, dl; jne 0x80dea; movsx eax, cl; neg eax; ret; 
0x0000000000484db3: test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004738fb: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x000000000048d0ba: test dword ptr [rax + 0x7508313c], 0x10894804; ret; 
0x0000000000491a63: test dword ptr [rax + 0xf000008], ecx; xchg eax, ebx; ret 0x3d83; 
0x000000000047e986: test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000444d8f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44e60; lea rax, [rdi + 7]; ret; 
0x0000000000472f47: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x000000000048364d: test dword ptr [rax - 0x2f], 0x48d48fb; fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x00000000004724dd: test dword ptr [rax], 0x83480000; ret 0xe901; 
0x0000000000468436: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004b3c45: test dword ptr [rax], eax; add byte ptr [rdx], al; leave; hlt; jmp qword ptr [rcx]; 
0x0000000000402291: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x000000000044d611: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000045e3f9: test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x0000000000468b46: test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000402290: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000044d610: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000045f5ff: test dword ptr [rbp + 0x29], 0xfa894ce7; call qword ptr [rax + 0x38]; 
0x0000000000474abe: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000458705: test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000472cd8: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000449b29: test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000444d48: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x44c40; lea rax, [rdi + 0xb]; ret; 
0x000000000042d1b7: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d606: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042c288: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x000000000042f5b3: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000434ea3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000004204b8: test dword ptr [rbx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041216f: test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004169e8: test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004754fb: test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000047c268: test dword ptr [rcx + 0x48000002], ecx; mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000042d18d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d09d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042cfc9: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cfad: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004600f0: test dword ptr [rcx + rcx*4 - 0x73], 0xfffffb18; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000411988: test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000046c097: test dword ptr [rcx - 0x74b7ffdc], esi; add al, 0xf8; jmp rax; 
0x0000000000417eea: test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000048ded4: test dword ptr [rdi + rdi*8 - 1], esi; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000464133: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000041d8fc: test dword ptr [rdi], eax; add eax, 0x39480000; ret 0xf275; 
0x000000000044f692: test dword ptr [rdx + 0x48000000], ebx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457c60: test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000042d1cb: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042d0c9: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042ced2: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004010f9: test dword ptr [rdx], edx; add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000400fa9: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000432e97: test dword ptr [rip + 0x63490006], edx; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004733b3: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x0000000000449796: test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847d9: test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000048499a: test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000444cad: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x44c40; lea rax, [rdi + 3]; ret; 
0x00000000004464c2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000419c9c: test dword ptr [rsi + rdi*8 + 0x5d5bffff], ebp; pop r12; pop r13; pop r14; ret; 
0x0000000000468acd: test dword ptr [rsi + rsi*8 - 0x76b30001], esi; test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045f2c1: test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000046d948: test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000041058d: test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x000000000042d3d8: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000412170: test eax, 0x48000000; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000431573: test eax, 0x4900062e; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b3: test eax, 0x4900065a; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a8bc0: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000433056: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004a98f2: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004a3a0d: test eax, 0xa8b0fffc; cld; jmp qword ptr [rax - 0x57]; 
0x00000000004943d1: test eax, 0xaac0fff9; stc; call qword ptr [rax]; 
0x0000000000495109: test eax, 0xab10fffa; cli; jmp qword ptr [rax - 0x54]; 
0x000000000043f372: test eax, 0xe3c4c9eb; jns 0x3f3dc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043fb52: test eax, 0xe3c4c9eb; jns 0x3fbbc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x00000000004014ed: test eax, 0xe912002b; ret; 
0x00000000004014bf: test eax, 0xeb04002b; mov byte ptr [rcx], bh; ret 0x860f; 
0x0000000000446ac8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000044bd3b: test eax, eax; cmove eax, edx; ret; 
0x0000000000419f8c: test eax, eax; je 0x19fa0; mov dword ptr [rip + 0x2a1dd6], 0; ret; 
0x00000000004236e1: test eax, eax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x000000000042b798: test eax, eax; je 0x2b79d; xchg eax, edx; sub eax, edx; ret; 
0x000000000042b836: test eax, eax; je 0x2b850; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000044043f: test eax, eax; je 0x40450; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000040040c: test eax, eax; je 0x412; call rax; 
0x000000000040040c: test eax, eax; je 0x412; call rax; add rsp, 8; ret; 
0x0000000000446c72: test eax, eax; je 0x46c50; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x00000000004592a4: test eax, eax; je 0x592aa; call rax; 
0x000000000045a6a9: test eax, eax; je 0x5a6af; call rax; 
0x00000000004734dd: test eax, eax; je 0x73494; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000473502: test eax, eax; je 0x73520; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004848c1: test eax, eax; je 0x848d3; lea rax, [rip + 0x2377b4]; mov qword ptr [rip + 0x237795], rax; add rsp, 8; ret; 
0x0000000000484d21: test eax, eax; je 0x84d2f; lea rdx, [rip + 0x235e34]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fd0: test eax, eax; je 0x84fe0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d141: test eax, eax; je 0x8d150; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048da95: test eax, eax; je 0x8daa8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000490c41: test eax, eax; je 0x90c4c; call rax; 
0x0000000000400aa7: test eax, eax; je 0xab8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ae9: test eax, eax; je 0xaf8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x00000000004588a0: test eax, eax; jle 0x588ac; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000042b981: test eax, eax; jne 0x2b9d0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000444c30: test eax, eax; jne 0x44c44; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004498f6: test eax, eax; jne 0x49910; xor eax, eax; syscall; 
0x00000000004499c6: test eax, eax; jne 0x499e0; mov eax, 1; syscall; 
0x0000000000449b03: test eax, eax; jne 0x49b68; mov eax, 0x48; syscall; 
0x0000000000449c96: test eax, eax; jne 0x49cb0; mov eax, 3; syscall; 
0x000000000044be70: test eax, eax; jne 0x4be64; pop rdx; pop r10; ret; 
0x00000000004717c7: test eax, eax; jne 0x717d8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000472c63: test eax, eax; jne 0x72d40; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000472d05: test eax, eax; jne 0x72d60; xor eax, eax; ret; 
0x0000000000472cd5: test eax, eax; jne 0x72d80; xor eax, eax; ret; 
0x0000000000472f81: test eax, eax; jne 0x72fa0; xor eax, eax; vzeroupper; ret; 
0x0000000000472f44: test eax, eax; jne 0x72fe0; xor eax, eax; vzeroupper; ret; 
0x0000000000473931: test eax, eax; jne 0x73960; mov rax, r8; vzeroupper; ret; 
0x00000000004738f8: test eax, eax; jne 0x739a0; mov rax, r8; vzeroupper; ret; 
0x0000000000474af1: test eax, eax; jne 0x74b20; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004754d5: test eax, eax; jne 0x75536; mov eax, 0x101; syscall; 
0x000000000048253d: test eax, eax; jne 0x82590; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000047bbe0: test eax, eax; js 0x7bbf2; pop rbx; ret; 
0x0000000000424c33: test eax, eax; lea rdx, [rip + 0x23234]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000045ae37: test eax, eax; sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000488363: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000042bb0c: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000045d5c2: test eax, ebp; idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000469535: test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000046fe6a: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000461927: test eax, ebx; or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000045e672: test eax, edi; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000048febe: test ebp, ebp; jne 0x8fe98; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490111: test ebp, ebp; jne 0x900f8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490ccb: test ebp, ebp; jne 0x90cb0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042d05e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000048941e: test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000472c40: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000490e4f: test ebx, ebx; jne 0x90e60; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048fffc: test ebx, ebx; mov qword ptr [rip + 0x22bceb], rbx; jne 0x8ffe8; pop rbx; ret; 
0x0000000000422520: test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000422018: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000454a89: test ecx, eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000444c72: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000047c265: test ecx, ecx; jne 0x7c4f6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb8d: test ecx, ecx; jne 0x7d166; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004afa31: test ecx, edi; call qword ptr [rbx]; 
0x00000000004afa45: test ecx, edi; call qword ptr [rcx + 1]; 
0x0000000000411474: test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000492096: test edi, ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000449de1: test edi, edi; je 0x49d8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000458888: test edi, edi; je 0x58899; call 0x81c90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000490c38: test edi, edi; je 0x90c51; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x000000000048a97e: test edi, edi; jne 0x8a8b0; add rsp, 0x38; ret; 
0x00000000004846ad: test edi, edi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x000000000044be41: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000440a62: test edx, edx; je 0x40a6a; bsf eax, edx; ret; 
0x0000000000440b0b: test edx, edx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aaa: test edx, edx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000044c147: test edx, edx; je 0x4c170; xor esi, esi; lea rdi, [rip + 0x49b71]; mov eax, 0x15; syscall; 
0x000000000044c77a: test edx, edx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000047363a: test edx, edx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004735ca: test edx, edx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004742fa: test edx, edx; je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047428e: test edx, edx; je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000486c3a: test edx, edx; je 0x86c48; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048559e: test edx, edx; jne 0x855a5; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048aacd: test edx, edx; jne 0x8aba9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000444c65: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004591a8: test esi, esi; je 0x591ae; call rsi; 
0x000000000047e6c4: test esi, esi; je 0x7e6cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000473531: test esi, esi; jne 0x73539; xor rax, rax; ret; 
0x00000000004741f1: test esi, esi; jne 0x741f9; xor rax, rax; ret; 
0x0000000000484443: test esi, esi; jne 0x84470; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000045e184: test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x0000000000444c7f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000042f5b2: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000048aacc: test r10d, r10d; jne 0x8aba9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000047e724: test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000042b797: test r8d, r8d; je 0x2b79d; xchg eax, edx; sub eax, edx; ret; 
0x00000000004236e0: test rax, rax; je 0x236f0; lea rax, [rdx - 0x10]; ret; 
0x000000000040040b: test rax, rax; je 0x412; call rax; 
0x000000000040040b: test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x00000000004592a3: test rax, rax; je 0x592aa; call rax; 
0x000000000045a6a8: test rax, rax; je 0x5a6af; call rax; 
0x0000000000484d20: test rax, rax; je 0x84d2f; lea rdx, [rip + 0x235e34]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fcf: test rax, rax; je 0x84fe0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d140: test rax, rax; je 0x8d150; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048da94: test rax, rax; je 0x8daa8; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000490c40: test rax, rax; je 0x90c4c; call rax; 
0x0000000000400aa6: test rax, rax; je 0xab8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ae8: test rax, rax; je 0xaf8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x000000000048febd: test rbp, rbp; jne 0x8fe98; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490110: test rbp, rbp; jne 0x900f8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490cca: test rbp, rbp; jne 0x90cb0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490e4e: test rbx, rbx; jne 0x90e60; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048fffb: test rbx, rbx; mov qword ptr [rip + 0x22bceb], rbx; jne 0x8ffe8; pop rbx; ret; 
0x000000000047c264: test rcx, rcx; jne 0x7c4f6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb8c: test rcx, rcx; jne 0x7d166; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000449de0: test rdi, rdi; je 0x49d8d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000458887: test rdi, rdi; je 0x58899; call 0x81c90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000490c37: test rdi, rdi; je 0x90c51; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90c4c; call rax; 
0x00000000004846ac: test rdi, rdi; mov byte ptr [rsi], al; jne 0x84698; mov rax, rsi; ret; 
0x000000000044be40: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000440b0a: test rdx, rdx; je 0x40b20; bsf rax, rdx; ret; 
0x0000000000440aa9: test rdx, rdx; je 0x40b30; bsf rax, rdx; ret; 
0x000000000044c779: test rdx, rdx; je 0x4c788; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000473639: test rdx, rdx; je 0x73660; bsf rax, rdx; ret; 
0x00000000004735c9: test rdx, rdx; je 0x73670; bsf rax, rdx; ret; 
0x00000000004742f9: test rdx, rdx; je 0x74320; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047428d: test rdx, rdx; je 0x74330; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000486c39: test rdx, rdx; je 0x86c48; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004591a7: test rsi, rsi; je 0x591ae; call rsi; 
0x000000000047e6c3: test rsi, rsi; je 0x7e6cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000473530: test rsi, rsi; jne 0x73539; xor rax, rax; ret; 
0x00000000004741f0: test rsi, rsi; jne 0x741f9; xor rax, rax; ret; 
0x0000000000484442: test rsi, rsi; jne 0x84470; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000450c84: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000440ce0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bad0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440d00: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bae0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000440d4e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bb0e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004408b3: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000440c15: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042ba25: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000474850: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440cd0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042bac0: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000472f90: tzcnt eax, eax; cmp rdx, rax; jbe 0x73000; add rax, rdi; vzeroupper; ret; 
0x000000000042c2c0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2e0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c2a6: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042c030: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000446fdc: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432f08: ud2; lea r11, [rip + 0x616cf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000415df3: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000447f15: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x47f07; vzeroupper; ret; 
0x000000000043860d: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004473be: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000438611: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004473c2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042c151: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000043861a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447f4b: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x00000000004473cc: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000438616: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004473c8: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446d95: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000447f51: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x0000000000446d99: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004385f9: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447327: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004385fd: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000044732b: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004385d9: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447e3b: vmovdqu ymmword ptr [edi + edx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447558: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000004475ff: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000438606: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004385ed: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004385e7: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447549: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044754e: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447553: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447eb0: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004385e2: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447498: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004475f0: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004475f5: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004475fa: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000447eb5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000447e3c: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447335: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044749d: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447463: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447ebb: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004474a3: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447469: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044746f: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447475: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000438602: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447eac: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004385de: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447494: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447331: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000447e42: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000446d8b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446d8f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044775a: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447760: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447a12: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447ad8: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447a0b: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000044804f: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000044792a: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447ad1: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004478fb: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000448056: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000447fc5: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000044776e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447931: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000044805e: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000447939: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000448049: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000447924: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447768: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447fcd: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000446da4: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000446da8: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000438915: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043891c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438923: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043856d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387bc: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004385be: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438582: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387b5: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004385b7: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043857b: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004387ae: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438574: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004385b0: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446d5d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000438a70: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a77: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a7e: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438a85: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000446d78: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446f3a: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f41: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f48: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e9d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446ea4: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446eab: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d4a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d43: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d3c: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042bfdc: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x2c280; xor eax, eax; vzeroupper; ret; 
0x000000000042c117: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000042c155: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x000000000042c11b: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c030; ret; 
0x0000000000472f7d: vpmovmskb eax, ymm1; test eax, eax; jne 0x72fa0; xor eax, eax; vzeroupper; ret; 
0x000000000047392d: vpmovmskb eax, ymm1; test eax, eax; jne 0x73960; mov rax, r8; vzeroupper; ret; 
0x000000000042c023: vpmovmskb eax, ymm2; sub eax, -1; jne 0x2c030; vzeroupper; ret; 
0x0000000000405a25: vpsubsb xmm10, xmm15, xmmword ptr [rdx + rbp*4 - 0x72b20001]; je 0x5a36; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000042bfe0: vptest ymm5, ymm0; jae 0x2c280; xor eax, eax; vzeroupper; ret; 
0x000000000041fe94: vshufps xmm2, xmm2, xmm5, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000042ba2f: vzeroupper; ret; 
0x0000000000473000: vzeroupper; xor eax, eax; ret; 
0x000000000044c151: wait; add al, 0; mov eax, 0x15; syscall; 
0x0000000000472af1: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000049511d: wait; cli; jmp qword ptr [rax]; 
0x00000000004abca9: wait; cmc; call rax; 
0x00000000004943a5: wait; stc; call qword ptr [rax - 0x64]; 
0x00000000004943e5: wait; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x000000000042ade3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043df0f: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aed3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042acf3: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045fa32: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000043fb5c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f37c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f76c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ef8c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047d75c: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000469afb: xchg byte ptr [rax + 0xd], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004481d2: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000042b73b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000043ea6f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e24f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043da2f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042b293: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000043f12b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000494640: xchg byte ptr [rax], dl; cli; call qword ptr [rsi]; 
0x000000000043e58f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aa23: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000043dd6f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000473af6: xchg byte ptr [rbp + rdi*8 - 1], al; cmove rax, rdx; ret; 
0x000000000043d54f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x0000000000472af0: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000043e72f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042b473: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ac03: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000045e2c7: xchg byte ptr [rcx + 0xb], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000048c85c: xchg byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x000000000042b653: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048499b: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045df83: xchg byte ptr [rcx], bl; sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000043f61c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee3c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ff4c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000494b38: xchg byte ptr [rdi], dh; cli; call qword ptr [rsi]; 
0x0000000000454343: xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x000000000042b563: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043d88f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042aea5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042af95: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042adb5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d9c5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e6c5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ddae: xchg byte ptr [rsi], al; adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000043e1e5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f51d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000455435: xchg byte ptr [rsi], bl; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000418fc6: xchg byte ptr [rsi], ch; add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a2d40], rdx; add dword ptr [rip + 0x2a2d35], 1; ret; 
0x000000000043fe4d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ab13: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004143e6: xchg ch, bh; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004a4d45: xchg ch, bh; jmp rax; 
0x00000000004a4d99: xchg ch, bh; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x00000000004a4d91: xchg ch, bh; push qword ptr [rbx - 0x4c00027a]; xchg ch, bh; push qword ptr [rbx - 0x2700027a]; jne 0xa4da0; jmp rax; 
0x0000000000419a86: xchg ch, bh; sub dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x29fd4b], rax; ret; 
0x000000000043ea05: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dd05: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d825: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e525: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000041476d: xchg dh, bl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043f66d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ee8d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049509d: xchg dl, bh; inc dword ptr [rax - 0x78]; cli; jmp rax; 
0x000000000042acc5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aae5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042abd5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9f5: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000046ea09: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x000000000042e1d5: xchg dword ptr [rax + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046c0d0: xchg dword ptr [rax - 0x76ffffe3], edi; ret 0x349; 
0x0000000000402db3: xchg dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047b5f6: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000047c081: xchg dword ptr [rbp + 0x13], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x28c93]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000044f1f4: xchg dword ptr [rbp + rcx*4 + 0x34], ecx; ret; 
0x000000000046256b: xchg dword ptr [rbp - 0x77000000], eax; ret 0x349; 
0x0000000000423b18: xchg dword ptr [rbx + 1], esi; add byte ptr [rax], al; lea rdx, [rip + 0x703fc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046eb7f: xchg dword ptr [rbx + rax], edi; add byte ptr [rax], al; lea rdx, [rip + 0x351fd]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410c15: xchg dword ptr [rbx - 0x76b7ffd6], ecx; ret; 
0x000000000046b782: xchg dword ptr [rbx - 0x76ffffdb], edi; ret 0x349; 
0x000000000046e3ca: xchg dword ptr [rcx + 0x48000003], esi; lea ecx, [rip + 0x3576e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040236a: xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x90332]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004a688c: xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x000000000045a49a: xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000048af0a: xchg dword ptr [rcx + rax - 8], ecx; jmp rax; 
0x000000000048bf50: xchg dword ptr [rcx + rax], edx; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046c77a: xchg dword ptr [rcx - 0x76ffffea], ecx; ret 0x349; 
0x000000000046d3c5: xchg dword ptr [rcx - 0x76fffff6], esp; ret 0x349; 
0x000000000041b662: xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x000000000046d39c: xchg dword ptr [rdi - 0x76fffff6], edx; ret 0x349; 
0x000000000044be6e: xchg dword ptr [rdi], eax; test eax, eax; jne 0x4be64; pop rdx; pop r10; ret; 
0x000000000046ebf4: xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000046ea01: xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000402019: xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x905ff]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048af02: xchg dword ptr [rdx + 0x49000008], ebp; movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; jmp rax; 
0x0000000000449317: xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x4c3f9; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000046928a: xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000444715: xchg dword ptr [rdx], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000478c40: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x00000000004781c5: xchg dword ptr [rsi + 0x24], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040d312: xchg dword ptr [rsi + 6], edi; add byte ptr [rax], al; lea rdi, [rip + 0x85462]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000430f95: xchg dword ptr [rsi + rax], esi; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046b234: xchg dword ptr [rsi - 0x76ffffd5], edi; ret 0x349; 
0x0000000000461418: xchg dword ptr [rsi - 0x76ffffef], eax; ret 0x349; 
0x0000000000461930: xchg dword ptr [rsi - 0x76fffff5], edi; ret 0x349; 
0x000000000046deb3: xchg dword ptr [rsi - 0x77000000], edx; ret 0x349; 
0x00000000004a6a2b: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000460c8e: xchg eax, ebp; call 0x42060c8e; call qword ptr [rdi + 0x38]; 
0x00000000004600fa: xchg eax, ebp; call 0x490600fa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004b17a5: xchg eax, ebp; cli; call qword ptr [rax]; 
0x00000000004b1769: xchg eax, ebp; cli; call qword ptr [rcx]; 
0x00000000004b1751: xchg eax, ebp; cli; call qword ptr [rdi]; 
0x00000000004950c1: xchg eax, ebp; cli; jmp rax; 
0x00000000004abc1d: xchg eax, ebp; cmc; call rsp; 
0x00000000004586ff: xchg eax, ebp; push -0x17000001; test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000045870b: xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000048aaf0: xchg eax, ebp; ret 0x145; 
0x0000000000449f0c: xchg eax, ebp; ret 0x3948; 
0x000000000041e6cb: xchg eax, ebp; ret 0x8348; 
0x0000000000479900: xchg eax, ebp; ret 0xc283; 
0x000000000042182d: xchg eax, ebp; ret 0xd020; 
0x000000000040dfa5: xchg eax, ebp; ret 0xd021; 
0x0000000000463b1a: xchg eax, ebp; ret 0xd120; 
0x00000000004108b2: xchg eax, ebp; ret 0xdaf7; 
0x000000000044d4e1: xchg eax, ebp; ret 0xe1eb; 
0x000000000048c66a: xchg eax, ebp; ret 0xf45; 
0x000000000044fe1f: xchg eax, ebp; ret; 
0x0000000000488366: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004190bd: xchg eax, ebp; sal bh, 0xd8; ret; 
0x00000000004941d5: xchg eax, ebp; stc; call qword ptr [rsi - 0x6a]; 
0x0000000000494191: xchg eax, ebp; stc; call rcx; 
0x0000000000494255: xchg eax, ebp; stc; jmp qword ptr [rax]; 
0x0000000000494195: xchg eax, ebp; stc; push qword ptr [rcx - 0x6a]; stc; call qword ptr [rcx]; 
0x000000000045888e: xchg eax, ebx; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000411ae2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046b2f7: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042c320: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000004950bd: xchg eax, ebx; cli; inc dword ptr [rax - 0x6b]; cli; jmp rax; 
0x0000000000436e89: xchg eax, ebx; fiadd word ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437189: xchg eax, ebx; fild dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436889: xchg eax, ebx; in al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f89: xchg eax, ebx; in eax, dx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004440fc: xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042dac2: xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b89: xchg eax, ebx; loope 0x36b91; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044937c: xchg eax, ebx; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000047c089: xchg eax, ebx; mov word ptr [rdx], es; add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x0000000000436589: xchg eax, ebx; out 5, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045b2e8: xchg eax, ebx; ret 0x3948; 
0x00000000004128dc: xchg eax, ebx; ret 0x3949; 
0x0000000000420f40: xchg eax, ebx; ret 0x3d83; 
0x0000000000470b95: xchg eax, ebx; ret 0x840; 
0x000000000045bdcd: xchg eax, ebx; ret 0x854d; 
0x0000000000421959: xchg eax, ebx; ret; 
0x0000000000494245: xchg eax, ebx; stc; call rax; 
0x0000000000494245: xchg eax, ebx; stc; call rax; xchg eax, ebx; stc; jmp qword ptr [rax - 0x6c]; 
0x0000000000494249: xchg eax, ebx; stc; jmp qword ptr [rax - 0x6c]; 
0x0000000000494185: xchg eax, ebx; stc; jmp qword ptr [rcx]; 
0x0000000000488b23: xchg eax, ecx; jmp qword ptr [rdx]; 
0x000000000043eb11: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000460d4b: xchg eax, ecx; ret 0xffff; 
0x0000000000438bb6: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000494175: xchg eax, ecx; stc; call qword ptr [rcx]; 
0x000000000043d23f: xchg eax, ecx; sub eax, edx; ret; 
0x0000000000494184: xchg eax, ecx; xchg eax, ebx; stc; jmp qword ptr [rcx]; 
0x0000000000494174: xchg eax, ecx; xchg eax, ecx; stc; call qword ptr [rcx]; 
0x000000000049417c: xchg eax, ecx; xchg eax, edx; stc; call qword ptr [rcx]; 
0x0000000000415114: xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004b4ed9: xchg eax, edi; add byte ptr [rax], al; je 0xb4f12; std; jmp qword ptr [rdx]; 
0x000000000043ed67: xchg eax, edi; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040d321: xchg eax, edi; add rdx, rdi; jmp rdx; 
0x00000000004a7cdf: xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000481756: xchg eax, edi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004794c3: xchg eax, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004898be: xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000041f73b: xchg eax, edi; ret 0x394c; 
0x000000000040058e: xchg eax, edi; ret 0xda80; 
0x000000000041fc21: xchg eax, edi; ret 0xfae9; 
0x0000000000420219: xchg eax, edi; ret 0xfbe9; 
0x00000000004941a1: xchg eax, edi; stc; jmp qword ptr [rsi]; 
0x00000000004200cb: xchg eax, edi; sub dword ptr [rax], eax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x299784], rax; ret; 
0x00000000004200d9: xchg eax, edi; sub dword ptr [rax], eax; ret; 
0x00000000004a6ed8: xchg eax, edi; xchg eax, esp; ret; 
0x0000000000431385: xchg eax, edi; xor byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047aeef: xchg eax, edx; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004b49e5: xchg eax, edx; add byte ptr [rax], al; fadd dword ptr [rsi]; std; call qword ptr [rdi]; 
0x00000000004b4a35: xchg eax, edx; add byte ptr [rax], al; pop rax; or ch, bh; call qword ptr [rax]; 
0x0000000000494bc0: xchg eax, edx; cli; jmp qword ptr [rdx]; 
0x00000000004a879d: xchg eax, edx; jae 0xa8773; push rsi; pop rdx; je 0xa8768; ret 0xacfc; 
0x0000000000440177: xchg eax, edx; lea rcx, [rip + 0x583a1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043eb07: xchg eax, edx; lea rcx, [rip + 0x59a11]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042377a: xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000405cb8: xchg eax, edx; ret 0x8548; 
0x0000000000483045: xchg eax, edx; ret 0x8949; 
0x00000000004a688f: xchg eax, edx; ret 0xf869; 
0x000000000045593a: xchg eax, edx; ret 0xfffa; 
0x0000000000446c6d: xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000049417d: xchg eax, edx; stc; call qword ptr [rcx]; 
0x0000000000494241: xchg eax, edx; stc; inc dword ptr [rax - 0x6d]; stc; call rax; 
0x000000000042b79c: xchg eax, edx; sub eax, edx; ret; 
0x0000000000494624: xchg eax, esi; adc edi, edx; jmp qword ptr [rsi]; 
0x000000000042c620: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434853: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004b4dad: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rdi], ch; std; jmp qword ptr [rbp]; 
0x00000000004b4d5d: xchg eax, esi; add byte ptr [rax], al; mov al, 0x2d; std; jmp qword ptr [rax + 1]; 
0x00000000004b4e35: xchg eax, esi; add byte ptr [rax], al; or byte ptr [rdx], dh; std; call qword ptr [rbx]; 
0x0000000000456151: xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000448264: xchg eax, esi; add rax, rsi; jmp rax; 
0x0000000000485476: xchg eax, esi; call 0x4bf70; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23743a]; ret; 
0x00000000004af599: xchg eax, esi; clc; call qword ptr [rax]; 
0x00000000004af5ad: xchg eax, esi; clc; jmp qword ptr [rsi]; 
0x0000000000437246: xchg eax, esi; fadd dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c46: xchg eax, esi; fiadd word ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f46: xchg eax, esi; fild dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436646: xchg eax, esi; in al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d46: xchg eax, esi; in eax, dx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042c6dd: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000436946: xchg eax, esi; loope 0x3694e; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042c63b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000436346: xchg eax, esi; out 5, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000448ec1: xchg eax, esi; ret 0xc085; 
0x00000000004a912c: xchg eax, esi; ret 0xcd11; 
0x0000000000448f1f: xchg eax, esi; ret 0xd284; 
0x0000000000422396: xchg eax, esi; ret 0xffff; 
0x000000000042c68c: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494199: xchg eax, esi; stc; call qword ptr [rcx]; 
0x00000000004943a1: xchg eax, esi; stc; inc dword ptr [rax]; wait; stc; call qword ptr [rax - 0x64]; 
0x000000000049421d: xchg eax, esi; stc; jmp qword ptr [rax - 0x69]; 
0x00000000004728c0: xchg eax, esi; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004941cc: xchg eax, esi; xchg eax, esp; stc; jmp qword ptr [rsi]; 
0x0000000000459f9b: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000046c117: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000004b4b91: xchg eax, esp; add byte ptr [rax], al; jl 0xb4ba5; std; call qword ptr [rax]; 
0x0000000000413e58: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd164e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000457408: xchg eax, esp; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000457426: xchg eax, esp; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457444: xchg eax, esp; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004abc09: xchg eax, esp; cmc; call qword ptr [rdx]; 
0x00000000004a78fa: xchg eax, esp; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x0000000000496014: xchg eax, esp; push 0x6894fffb; sti; call qword ptr [rax + rbp*2 + 0x6b30fffb]; sti; call qword ptr [rax]; 
0x000000000049601c: xchg eax, esp; push 0x6b30fffb; sti; call qword ptr [rax]; 
0x00000000004a933f: xchg eax, esp; push rsi; cli; push 0x6e; ja 0xa92c9; ret 0x48f; 
0x0000000000450f1b: xchg eax, esp; ret 0x1f0f; 
0x0000000000449fdb: xchg eax, esp; ret 0x2044; 
0x0000000000480fac: xchg eax, esp; ret 0x3d; 
0x000000000041d32e: xchg eax, esp; ret 0x3de9; 
0x000000000046d2a7: xchg eax, esp; ret 0x7f3c; 
0x0000000000484c11: xchg eax, esp; ret 0x950f; 
0x0000000000402d04: xchg eax, esp; ret 0xb60f; 
0x0000000000446c70: xchg eax, esp; ret 0xc085; 
0x000000000044a301: xchg eax, esp; ret 0xc221; 
0x00000000004766b5: xchg eax, esp; ret 0xc283; 
0x0000000000449e18: xchg eax, esp; ret 0xca21; 
0x00000000004012d3: xchg eax, esp; ret 0xd284; 
0x000000000044f946: xchg eax, esp; ret 0xd5e9; 
0x0000000000410f1d: xchg eax, esp; ret 0xdaf7; 
0x000000000048c60b: xchg eax, esp; ret 0xf45; 
0x0000000000465f72: xchg eax, esp; ret; 
0x000000000042372a: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000466df7: xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000049418d: xchg eax, esp; stc; inc dword ptr [rcx - 0x6b]; stc; call rcx; 
0x00000000004941cd: xchg eax, esp; stc; jmp qword ptr [rsi]; 
0x0000000000494189: xchg eax, esp; stc; push qword ptr [rcx + 0x41fff994]; xchg eax, ebp; stc; call rcx; 
0x00000000004af5ac: xchg eax, esp; xchg eax, esi; clc; jmp qword ptr [rsi]; 
0x0000000000494c88: xchg eax, esp; xor eax, 0x3524fffa; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x0000000000494190: xchg eax, r13d; stc; call rcx; 
0x0000000000480fa0: xchg eax, r8d; mov eax, 0x15; syscall; 
0x00000000004a9557: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000041b615: xlatb; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000004a2099: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000437182: xlatb; add rsi, rdx; lea r11, [rip + 0x5db93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437002: xlatb; add rsi, rdx; lea r11, [rip + 0x5dd13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e82: xlatb; add rsi, rdx; lea r11, [rip + 0x5de93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d03: xlatb; add rsi, rdx; lea r11, [rip + 0x5e012]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b82: xlatb; add rsi, rdx; lea r11, [rip + 0x5e193]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a02: xlatb; add rsi, rdx; lea r11, [rip + 0x5e313]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436882: xlatb; add rsi, rdx; lea r11, [rip + 0x5e493]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436702: xlatb; add rsi, rdx; lea r11, [rip + 0x5e613]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436582: xlatb; add rsi, rdx; lea r11, [rip + 0x5e793]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436402: xlatb; add rsi, rdx; lea r11, [rip + 0x5e913]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436282: xlatb; add rsi, rdx; lea r11, [rip + 0x5ea93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436102: xlatb; add rsi, rdx; lea r11, [rip + 0x5ec13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f82: xlatb; add rsi, rdx; lea r11, [rip + 0x5ed93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e02: xlatb; add rsi, rdx; lea r11, [rip + 0x5ef13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c82: xlatb; add rsi, rdx; lea r11, [rip + 0x5f093]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004346a2: xlatb; add rsi, rdx; lea r11, [rip + 0x60173]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434522: xlatb; add rsi, rdx; lea r11, [rip + 0x602f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343a2: xlatb; add rsi, rdx; lea r11, [rip + 0x60473]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434223: xlatb; add rsi, rdx; lea r11, [rip + 0x605f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340a2: xlatb; add rsi, rdx; lea r11, [rip + 0x60773]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f22: xlatb; add rsi, rdx; lea r11, [rip + 0x608f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433da2: xlatb; add rsi, rdx; lea r11, [rip + 0x60a73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c22: xlatb; add rsi, rdx; lea r11, [rip + 0x60bf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433aa2: xlatb; add rsi, rdx; lea r11, [rip + 0x60d73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433922: xlatb; add rsi, rdx; lea r11, [rip + 0x60ef3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337a2: xlatb; add rsi, rdx; lea r11, [rip + 0x61073]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433622: xlatb; add rsi, rdx; lea r11, [rip + 0x611f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334a2: xlatb; add rsi, rdx; lea r11, [rip + 0x61373]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433322: xlatb; add rsi, rdx; lea r11, [rip + 0x614f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331a2: xlatb; add rsi, rdx; lea r11, [rip + 0x61673]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430638: xlatb; add rsi, rdx; lea r11, [rip + 0x63ddd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc68: xlatb; add rsi, rdx; lea r11, [rip + 0x665ed]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000410faf: xlatb; cmp rax, rdi; jbe 0x1100a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000446fd3: xlatb; jb 0x46fd9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040d60d: xlatb; jmp rdi; 
0x00000000004a7903: xlatb; jo 0xa7977; mov ebp, 0xfb67d10d; ret; 
0x0000000000434e7b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004375a0: xlatb; lea r11, [rip + 0x5d538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004373ed: xlatb; lea r11, [rip + 0x5d92b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b48: xlatb; lea r11, [rip + 0x5f1d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004359ec: xlatb; lea r11, [rip + 0x5f32c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a8c: xlatb; lea r11, [rip + 0x5fb4c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004348f9: xlatb; lea r11, [rip + 0x5ff1f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ceb: xlatb; lea r11, [rip + 0x6172d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433068: xlatb; lea r11, [rip + 0x617b0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ef6: xlatb; lea r11, [rip + 0x61922]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043054c: xlatb; lea r11, [rip + 0x63ecc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430487: xlatb; lea r11, [rip + 0x63f91]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db7c: xlatb; lea r11, [rip + 0x666dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dab7: xlatb; lea r11, [rip + 0x667a1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cd72: xlatb; lea r11, [rip + 0x673a6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ccf8: xlatb; lea r11, [rip + 0x67420]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cc69: xlatb; lea r11, [rip + 0x674af]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042ca5e: xlatb; lea r11, [rip + 0x676ba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c92c: xlatb; lea r11, [rip + 0x677ec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c866: xlatb; lea r11, [rip + 0x678b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e8: xlatb; lea r11, [rip + 0x67930]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c751: xlatb; lea r11, [rip + 0x679c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c555: xlatb; lea r11, [rip + 0x67bc3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c424: xlatb; lea r11, [rip + 0x67cf4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c315: xlatb; lea r11, [rip + 0x67e03]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000484732: xlatb; mov byte ptr [rsi], al; jne 0x84710; mov rax, rsi; ret; 
0x00000000004490e1: xlatb; mov eax, esi; syscall; 
0x00000000004490f0: xlatb; mov eax, r8d; syscall; 
0x00000000004586fc: xlatb; mov qword ptr [rbp - 0x98], rdx; call 0x4d500; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x0000000000431231: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x631e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e861: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x659f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a8da6: xlatb; ret 0x4e27; 
0x0000000000473237: xlatb; ret 0x94c; 
0x000000000042b87f: xlatb; ret 0xc085; 
0x00000000004263d0: xlatb; ret 0xc148; 
0x000000000042bf34: xlatb; ret 0xe883; 
0x0000000000440a84: xlatb; ret 0xf66; 
0x000000000042c0f8: xlatb; ret 0xff2d; 
0x0000000000423f95: xlatb; ret 0xfffe; 
0x000000000042b894: xlatb; ret; 
0x0000000000473385: xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000042b961: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x00000000004733e5: xlatb; rol ch, cl; std; xlatb; ret; 
0x0000000000472f7f: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000472d03: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000444c2e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000042baf2: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000440802: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000472cd3: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004738f6: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000472f42: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000004410f2: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000044112e: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000444c26: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004262b6: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000426176: xlatb; sal bh, 1; ret 0xc000; 
0x0000000000426036: xlatb; sal bh, 1; ret 0xe000; 
0x0000000000425ef6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000425db6: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000425c76: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000425b36: xlatb; sal bh, 1; ret 0xfe00; 
0x00000000004259f6: xlatb; sal bh, 1; ret 0xff00; 
0x00000000004258b6: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000425776: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000425636: xlatb; sal bh, 1; ret 0xffe0; 
0x00000000004254f6: xlatb; sal bh, 1; ret 0xfff0; 
0x00000000004253b6: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000425276: xlatb; sal bh, 1; ret 0xfffc; 
0x0000000000425136: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000432c1d: xlatb; sfence; lea r11, [rip + 0x617f8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430235: xlatb; sfence; lea r11, [rip + 0x64020]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c22: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004731e6: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000004731d5: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000043723f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5d896]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370bf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5da16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f3f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5db96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dbf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5dd16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c3f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5de96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436abf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e016]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043693f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e196]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367bf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e316]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043663f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364bf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e616]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043633f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e796]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361bf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e916]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043603f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ea96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435ebf: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ec16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d3f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ed96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bc6: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ef0f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043475f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5fe76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004345df: xlatb; sub rsi, rdx; lea r11, [rip + 0x5fff6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043445f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60176]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004342df: xlatb; sub rsi, rdx; lea r11, [rip + 0x602f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043415f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60476]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433fdf: xlatb; sub rsi, rdx; lea r11, [rip + 0x605f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e5f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60776]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433cdf: xlatb; sub rsi, rdx; lea r11, [rip + 0x608f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b5f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60a76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004339df: xlatb; sub rsi, rdx; lea r11, [rip + 0x60bf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043385f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60d76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004336df: xlatb; sub rsi, rdx; lea r11, [rip + 0x60ef6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043355f: xlatb; sub rsi, rdx; lea r11, [rip + 0x61076]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004333df: xlatb; sub rsi, rdx; lea r11, [rip + 0x611f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043325f: xlatb; sub rsi, rdx; lea r11, [rip + 0x61376]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004330e6: xlatb; sub rsi, rdx; lea r11, [rip + 0x614ef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e45: xlatb; xor eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000424e2a: xor ah, byte ptr [rcx]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004b4450: xor al, 0; add byte ptr [rax], al; sbb byte ptr [rbp - 0x1ea80000], cl; cld; jmp qword ptr [rsi]; 
0x00000000004b56b8: xor al, 0; add byte ptr [rax], al; sbb byte ptr [rdi + 0x7ef00000], 0xfd; call qword ptr [rdx + 1]; 
0x00000000004b5968: xor al, 0; add byte ptr [rax], al; xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x0000000000494778: xor al, 0x11; cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000401894: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004a688a: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x0000000000424c38: xor al, 0x32; add al, byte ptr [rax]; lea rax, [rip + 0x231dd]; cmovne rax, rdx; ret; 
0x000000000047065b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004181eb: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000484d28: xor al, 0x5e; and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000459fa2: xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000046e84b: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004a7a6a: xor al, 0xd8; ret; 
0x00000000004591a5: xor al, 0xf0; test rsi, rsi; je 0x591ae; call rsi; 
0x00000000004591a1: xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x591ae; call rsi; 
0x0000000000452d1e: xor al, 0xf6; ret; 
0x0000000000494c95: xor al, 0xfa; call rsp; 
0x0000000000494c91: xor al, 0xfa; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494d15: xor al, 0xfa; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000494b15: xor al, 0xfa; jmp qword ptr [rax]; 
0x0000000000494bd1: xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494d11: xor al, 0xfa; push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x00000000004b4f15: xor al, 0xfd; jmp qword ptr [rcx]; 
0x00000000004b4edd: xor al, 0xfd; jmp qword ptr [rdx]; 
0x0000000000430f96: xor al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004951e0: xor al, bh; cli; inc dword ptr [rax - 8]; cli; jmp qword ptr [rax - 8]; 
0x0000000000402372: xor al, byte ptr [rbx]; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424c39: xor al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x231dd; cmovne rax, rdx; ret; 
0x0000000000431184: xor al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049458c: xor al, dl; stc; inc dword ptr [rax - 0x2f00062f]; sar cl, cl; jmp qword ptr [rax]; 
0x000000000044e9a1: xor bh, bl; jmp qword ptr [rsi + 0x2e]; 
0x000000000049442c: xor bh, bl; stc; call qword ptr [rax]; 
0x0000000000494ba8: xor bh, byte ptr [rcx]; cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x00000000004b4e39: xor bh, ch; call qword ptr [rbx]; 
0x0000000000494049: xor bh, cl; jmp qword ptr [rax + 0x33]; 
0x00000000004951b8: xor bh, dh; cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004952c5: xor bl, bh; dec dword ptr [rdi + rbp]; sti; call qword ptr [rip + 0xefffb30]; xor bl, bh; jmp qword ptr [rbx]; 
0x00000000004952cd: xor bl, bh; dec dword ptr [rsi]; xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000495299: xor bl, bh; inc dword ptr [rax + 0x2f]; sti; jmp qword ptr [rax + 0x2f]; 
0x00000000004952d1: xor bl, bh; jmp qword ptr [rbx]; 
0x0000000000495188: xor bl, dh; cli; call qword ptr [rax - 0xd]; 
0x000000000042b97b: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000472ccf: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000411d42: xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000045ba48: xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x0000000000411d43: xor byte ptr [rax + 1], cl; ret 0x8b49; 
0x0000000000481b10: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481a9e: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000046fe67: xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000440def: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000449c12: xor byte ptr [rax - 0x77], cl; and al, 0x20; je 0x49c40; mov eax, 0x48; syscall; 
0x0000000000413dbd: xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdb5ae; jmp qword ptr [rsi + 0x2e]; 
0x0000000000473f6f: xor byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000048aa58: xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x00000000004712d2: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044d2af: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000402fe8: xor byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000047121e: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000471327: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004707fc: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041209b: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004af76c: xor byte ptr [rax], al; add byte ptr [rax + 0x57], dh; stc; jmp qword ptr [rbx + 0x17]; 
0x000000000040ea59: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000040e993: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000047e42c: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7dd60; add rsp, 0xd8; ret; 
0x000000000040ea7f: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004482b3: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004ae831: xor byte ptr [rax], al; add byte ptr [rsi + rdx - 9], bh; jmp qword ptr [rax]; 
0x000000000048dfbe: xor byte ptr [rbp + 0x27], dh; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048ae20: xor byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x0000000000449afa: xor byte ptr [rbp + 0x3b], dh; mov eax, dword ptr [rip + 0x272d09]; test eax, eax; jne 0x49b68; mov eax, 0x48; syscall; 
0x0000000000447225: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x0000000000444711: xor byte ptr [rbp + rcx*4 + 0x1d], cl; xchg dword ptr [rdx], ecx; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004b5c6c: xor byte ptr [rbp - 0x64000000], ah; std; jmp qword ptr [rcx]; 
0x000000000049502c: xor byte ptr [rbp - 6], cl; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; 
0x000000000049502c: xor byte ptr [rbp - 6], cl; inc dword ptr [rax + 0x4f]; cli; call qword ptr [rax + 0x51]; cli; jmp qword ptr [rax + 0x53]; 
0x0000000000466179: xor byte ptr [rbx + 0x291c2454], cl; ret 0xe683; 
0x0000000000415426: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000044f69a: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041828d: xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004942a4: xor byte ptr [rbx - 0x4aef0007], dh; stc; push rax; mov dh, 0xf9; call rax; 
0x0000000000494414: xor byte ptr [rbx - 0x537f0007], ch; stc; call rax; 
0x00000000004950f4: xor byte ptr [rbx - 0x5b7f0006], ah; cli; call rax; 
0x00000000004950f4: xor byte ptr [rbx - 0x5b7f0006], ah; cli; call rax; movsd dword ptr [rdi], dword ptr [rsi]; cli; jmp qword ptr [rax]; 
0x000000000046d1db: xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x0000000000496020: xor byte ptr [rbx - 5], ch; call qword ptr [rax]; 
0x000000000044987f: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000048a875: xor byte ptr [rcx + 0x21], cl; ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000478553: xor byte ptr [rcx + 0x29], cl; ret; 
0x000000000042c7ec: xor byte ptr [rcx + 6], bh; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000047125c: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004943c0: xor byte ptr [rcx + rdi*8 - 0x65a7f01], ah; call rax; 
0x00000000004943c0: xor byte ptr [rcx + rdi*8 - 0x65a7f01], ah; call rax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; jmp qword ptr [rax]; 
0x000000000047121f: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000471328: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004707fd: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417e37: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041209c: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000413387: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004470d6: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004542ab: xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000494afc: xor byte ptr [rdi], dh; cli; inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000484d98: xor byte ptr [rdx + 2], bl; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000494d14: xor byte ptr [rdx + rdi*8], dh; inc eax; xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000494344: xor byte ptr [rdx - 0x4bef0007], dh; stc; push rax; mov ch, 0xf9; call rax; 
0x00000000004b596c: xor byte ptr [rdx - 0x76e00000], ah; std; jmp qword ptr [rbx]; 
0x0000000000424c0a: xor byte ptr [rdx], al; add bh, dh; ret 0; 
0x00000000004b061f: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; ret 0xa01; 
0x00000000004a98f6: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000042c3cf: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c3ca: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047319c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042b97c: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000472cd0: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000049432c: xor byte ptr [rsi - 0x47ef0007], dh; stc; jmp rax; 
0x00000000004940f8: xor byte ptr [rsi - 7], ch; jmp qword ptr [rax]; 
0x0000000000431386: xor byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004241fa: xor cl, al; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x0000000000494041: xor cl, bh; jmp qword ptr [rax]; 
0x000000000046eb15: xor cl, byte ptr [rax - 0x73]; cmp eax, 0x351af; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000412acd: xor cl, byte ptr [rax - 0x77]; ret 0x2948; 
0x0000000000424362: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000047dc53: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x000000000045b5b7: xor cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x000000000048d04e: xor cl, byte ptr [rax]; jne 0x8d06c; mov rax, qword ptr [rax]; ret; 
0x000000000047213a: xor cl, byte ptr [rdi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000405ce0: xor cl, ch; ret; 
0x0000000000495124: xor cl, dh; cli; inc dword ptr [rax - 0xf]; cli; call qword ptr [rax - 0xf]; 
0x000000000045a409: xor dh, dh; ret 0x4002; 
0x0000000000494048: xor dil, cl; jmp qword ptr [rax + 0x33]; 
0x0000000000494ee5: xor dl, bh; call rax; 
0x00000000004b1029: xor dl, bh; jmp qword ptr [rdi + 0x11]; 
0x0000000000494e65: xor dl, bh; jmp rsp; 
0x00000000004946b0: xor dl, byte ptr [rdx]; cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000495164: xor dl, dh; cli; call qword ptr [rax - 0xe]; 
0x0000000000495164: xor dl, dh; cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000480120: xor dl, dh; ret; 
0x000000000046574d: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000044c27f: xor dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000417e36: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000048d0bd: xor dword ptr [rax], ecx; jne 0x8d0c5; mov qword ptr [rax], rdx; ret; 
0x000000000041c84d: xor dword ptr [rbx - 0x76b7f020], eax; ret 0x8948; 
0x00000000004496e6: xor dword ptr [rcx - 0x2976b739], ecx; mov eax, 5; syscall; 
0x000000000043123b: xor dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418fda: xor eax, 0x1002a2d; ret; 
0x000000000047f209: xor eax, 0x23d1a2; jne 0x7f220; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d195], rax; ret; 
0x000000000046b0ce: xor eax, 0x24bd4d; jmp rax; 
0x0000000000460e03: xor eax, 0x255918; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004607ab: xor eax, 0x255f70; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000494b11: xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494c8d: xor eax, 0x34b4fffa; cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494bcd: xor eax, 0x34d2fffa; cli; jmp qword ptr [rdx + 0x34]; 
0x0000000000494c89: xor eax, 0x3524fffa; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x0000000000494bc9: xor eax, 0x3542fffa; cli; call rdx; 
0x0000000000494bc9: xor eax, 0x3542fffa; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494b49: xor eax, 0x3556fffa; cli; jmp rsi; 
0x0000000000494d05: xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x0000000000494055: xor eax, 0x36c0fff9; stc; jmp qword ptr [rax + 0x26]; 
0x00000000004a7a1a: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004477e3: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004481a2: xor eax, 0x4d0d9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000430e46: xor eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000448105: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000046505a: xor eax, 0x89ffffe6; ret; 
0x000000000045ada8: xor eax, dword ptr [0x28]; jne 0x5adb6; add rsp, 0x18; ret; 
0x000000000048420a: xor eax, dword ptr [0x28]; jne 0x8424e; leave; ret; 
0x000000000040ea56: xor eax, dword ptr [0x30]; call rax; 
0x00000000004473b0: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x473bd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000424c8a: xor eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x2330c; cmovne rax, rdx; ret; 
0x0000000000431034: xor eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000416040: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000416e24: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045caf9: xor eax, eax; add rsp, 8; ret; 
0x000000000047c581: xor eax, eax; call 0x7e500; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000047d1ed: xor eax, eax; call 0x7e500; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000004190b7: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000044be47: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000475b60: xor eax, eax; leave; ret; 
0x0000000000471871: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a4d: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000411093: xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000473f66: xor eax, eax; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000004756ba: xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000473c4c: xor eax, eax; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046c6d9: xor eax, eax; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000472982: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000405e7f: xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004127e5: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040ed65: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004241cc: xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004136f2: xor eax, eax; pop rbx; ret; 
0x0000000000473df1: xor eax, eax; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000040ecad: xor eax, eax; ret; 
0x00000000004265de: xor eax, eax; sub eax, ecx; ret; 
0x00000000004498fa: xor eax, eax; syscall; 
0x000000000048a97c: xor eax, eax; test edi, edi; jne 0x8a8b0; add rsp, 0x38; ret; 
0x000000000042bfeb: xor eax, eax; vzeroupper; ret; 
0x0000000000473d77: xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004730bb: xor eax, edx; and rax, rcx; je 0x73280; bsr rax, rax; add rax, rdi; ret; 
0x000000000047333f: xor eax, edx; and rsi, rax; je 0x73280; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000424ea9: xor ebp, dword ptr [rbx]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6922]; cmove rax, rdx; ret; 
0x000000000047d73c: xor ebp, ebp; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x0000000000458d68: xor ebp, ecx; ret 0xfffd; 
0x0000000000485b63: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000458a66: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041002a: xor ecx, dword ptr [0x28]; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100db: xor ecx, dword ptr [0x28]; jne 0x100ec; add rsp, 0xd8; ret; 
0x000000000044978e: xor ecx, dword ptr [0x28]; jne 0x49849; add rsp, 0x68; ret; 
0x00000000004498a0: xor ecx, dword ptr [0x28]; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b21: xor ecx, dword ptr [0x28]; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c30: xor ecx, dword ptr [0x28]; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000045aff0: xor ecx, dword ptr [0x28]; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681fb: xor ecx, dword ptr [0x28]; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f3: xor ecx, dword ptr [0x28]; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475605: xor ecx, dword ptr [0x28]; jne 0x75653; add rsp, 0x58; ret; 
0x0000000000475737: xor ecx, dword ptr [0x28]; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481cde: xor ecx, dword ptr [0x28]; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481d9e: xor ecx, dword ptr [0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481eff: xor ecx, dword ptr [0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821ce: xor ecx, dword ptr [0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000488314: xor ecx, dword ptr [0x28]; jne 0x8832c; add rsp, 0x38; ret; 
0x000000000044a8df: xor ecx, dword ptr [rax - 0x75]; jl 0x4a908; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000048967b: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000473149: xor ecx, eax; and rsi, rcx; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044e90e: xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000046b5e5: xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047e6c1: xor ecx, ecx; test rsi, rsi; je 0x7e6cb; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000473d79: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000494045: xor ecx, edi; inc dword ptr [rax + 0x32]; stc; jmp qword ptr [rax + 0x33]; 
0x000000000044c25c: xor edi, dword ptr [rax]; ret 0x2f75; 
0x0000000000419ab1: xor edi, ebp; sub dword ptr [rax], eax; ret; 
0x000000000049404d: xor edi, ecx; inc dword ptr [rax - 0x5f0006cc]; xor eax, 0x36c0fff9; stc; jmp qword ptr [rax + 0x26]; 
0x0000000000401308: xor edi, edi; mov eax, edx; syscall; 
0x000000000044a656: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000041b441: xor edi, edi; pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x000000000044a46c: xor edi, edi; syscall; 
0x000000000048a97a: xor edi, edi; xor eax, eax; test edi, edi; jne 0x8a8b0; add rsp, 0x38; ret; 
0x000000000047d739: xor edi, edi; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x0000000000494d19: xor edi, edx; call qword ptr [rax + 0x33]; 
0x0000000000494ae1: xor edi, edx; call rax; 
0x0000000000494ae1: xor edi, edx; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494b1d: xor edi, edx; inc dword ptr [rsi + 0x33]; cli; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494b21: xor edi, edx; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000449670: xor edx, dword ptr [0x28]; jne 0x49689; add rsp, 0x28; ret; 
0x000000000044a59f: xor edx, dword ptr [0x28]; jne 0x4a5b7; add rsp, 0x28; ret; 
0x0000000000484eb6: xor edx, dword ptr [0x28]; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f99: xor edx, dword ptr [0x28]; jne 0x84fb4; add rsp, 0x38; ret; 
0x000000000040e990: xor edx, dword ptr [0x30]; call rdx; 
0x000000000040ea7c: xor edx, dword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000044e913: xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000047b50a: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044bf3f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047e5d0: xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004482d8: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004755e1: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x00000000004657a3: xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000004179f3: xor edx, edx; jmp rax; 
0x0000000000473d7b: xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004407c4: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004407e4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440822: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044068a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044a463: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000041fd14: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040dc76: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004a7cdd: xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x000000000040dcd9: xor esi, esi; call 0xeec0; add rsp, 8; ret; 
0x00000000004ac2e9: xor esi, esi; jmp qword ptr [rax]; 
0x0000000000460e0c: xor esi, esi; jmp rax; 
0x0000000000480f95: xor esi, esi; lea rdi, [rip + 0x23f7c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d73e: xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x000000000044c14b: xor esi, esi; lea rdi, [rip + 0x49b71]; mov eax, 0x15; syscall; 
0x000000000041e617: xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000045d89f: xor esp, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004312d3: xor qword ptr [r14], rax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044bf3e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047b509: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004755e0: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x75618; mov eax, 0x101; syscall; 
0x000000000047d73b: xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x0000000000494ae0: xor r15, rdx; call rax; 
0x0000000000494ae0: xor r15, rdx; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494b20: xor r15d, edx; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x000000000047d738: xor r15d, r15d; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277d3]; mov eax, 0x15; syscall; 
0x0000000000471870: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000471a4c: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000473f65: xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473c4b: xor r8d, r8d; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046c6d8: xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000473df0: xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473d76: xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045ada7: xor rax, qword ptr [0x28]; jne 0x5adb6; add rsp, 0x18; ret; 
0x0000000000484209: xor rax, qword ptr [0x28]; jne 0x8424e; leave; ret; 
0x000000000040ea55: xor rax, qword ptr [0x30]; call rax; 
0x000000000045ada6: xor rax, qword ptr fs:[0x28]; jne 0x5adb6; add rsp, 0x18; ret; 
0x0000000000484208: xor rax, qword ptr fs:[0x28]; jne 0x8424e; leave; ret; 
0x000000000040ea54: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000444c40: xor rax, rax; ret; 
0x00000000004730ba: xor rax, rdx; and rax, rcx; je 0x73280; bsr rax, rax; add rax, rdi; ret; 
0x000000000047333e: xor rax, rdx; and rsi, rax; je 0x73280; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000410029: xor rcx, qword ptr [0x28]; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100da: xor rcx, qword ptr [0x28]; jne 0x100ec; add rsp, 0xd8; ret; 
0x000000000044978d: xor rcx, qword ptr [0x28]; jne 0x49849; add rsp, 0x68; ret; 
0x000000000044989f: xor rcx, qword ptr [0x28]; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b20: xor rcx, qword ptr [0x28]; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c2f: xor rcx, qword ptr [0x28]; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000045afef: xor rcx, qword ptr [0x28]; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681fa: xor rcx, qword ptr [0x28]; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f2: xor rcx, qword ptr [0x28]; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475604: xor rcx, qword ptr [0x28]; jne 0x75653; add rsp, 0x58; ret; 
0x0000000000475736: xor rcx, qword ptr [0x28]; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481cdd: xor rcx, qword ptr [0x28]; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481d9d: xor rcx, qword ptr [0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481efe: xor rcx, qword ptr [0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821cd: xor rcx, qword ptr [0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000488313: xor rcx, qword ptr [0x28]; jne 0x8832c; add rsp, 0x38; ret; 
0x0000000000410028: xor rcx, qword ptr fs:[0x28]; jne 0x1003b; add rsp, 0xd8; ret; 
0x00000000004100d9: xor rcx, qword ptr fs:[0x28]; jne 0x100ec; add rsp, 0xd8; ret; 
0x000000000044978c: xor rcx, qword ptr fs:[0x28]; jne 0x49849; add rsp, 0x68; ret; 
0x000000000044989e: xor rcx, qword ptr fs:[0x28]; jne 0x498eb; add rsp, 0x58; ret; 
0x0000000000449b1f: xor rcx, qword ptr fs:[0x28]; jne 0x49bd9; add rsp, 0x78; ret; 
0x0000000000449c2e: xor rcx, qword ptr fs:[0x28]; jne 0x49c83; add rsp, 0x68; ret; 
0x000000000045afee: xor rcx, qword ptr fs:[0x28]; jne 0x5b043; add rsp, 0x148; ret; 
0x00000000004681f9: xor rcx, qword ptr fs:[0x28]; jne 0x6820c; add rsp, 0xd8; ret; 
0x00000000004754f1: xor rcx, qword ptr fs:[0x28]; jne 0x755b9; add rsp, 0x78; ret; 
0x0000000000475603: xor rcx, qword ptr fs:[0x28]; jne 0x75653; add rsp, 0x58; ret; 
0x0000000000475735: xor rcx, qword ptr fs:[0x28]; jne 0x7575b; add rsp, 0x38; ret; 
0x0000000000481cdc: xor rcx, qword ptr fs:[0x28]; jne 0x81d13; add rsp, 0x38; ret; 
0x0000000000481d9c: xor rcx, qword ptr fs:[0x28]; jne 0x81dce; add rsp, 0x68; ret; 
0x0000000000481efd: xor rcx, qword ptr fs:[0x28]; jne 0x81f3e; add rsp, 0x78; ret; 
0x00000000004821cc: xor rcx, qword ptr fs:[0x28]; jne 0x821fe; add rsp, 0x68; ret; 
0x0000000000488312: xor rcx, qword ptr fs:[0x28]; jne 0x8832c; add rsp, 0x38; ret; 
0x0000000000473148: xor rcx, rax; and rsi, rcx; je 0x73280; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044966f: xor rdx, qword ptr [0x28]; jne 0x49689; add rsp, 0x28; ret; 
0x000000000044a59e: xor rdx, qword ptr [0x28]; jne 0x4a5b7; add rsp, 0x28; ret; 
0x0000000000484eb5: xor rdx, qword ptr [0x28]; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f98: xor rdx, qword ptr [0x28]; jne 0x84fb4; add rsp, 0x38; ret; 
0x000000000040e98f: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040ea7b: xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000044966e: xor rdx, qword ptr fs:[0x28]; jne 0x49689; add rsp, 0x28; ret; 
0x000000000044a59d: xor rdx, qword ptr fs:[0x28]; jne 0x4a5b7; add rsp, 0x28; ret; 
0x0000000000484eb4: xor rdx, qword ptr fs:[0x28]; jne 0x84ec4; add rsp, 0x38; ret; 
0x0000000000484f97: xor rdx, qword ptr fs:[0x28]; jne 0x84fb4; add rsp, 0x38; ret; 
0x000000000040e98e: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040ea7a: xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 

18870 gadgets found
