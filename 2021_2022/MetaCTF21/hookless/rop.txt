TARGET 0 - 'libc.so.6': ELF-X64, 0x0000000002d420 entry, 1471756/1 executable bytes/segments 

0x0000000010bcb9: adc [r10+0x13], r14b; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000007fef2: adc [r10+0x2a], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x000000000802d2: adc [r10+0x3a], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000080746: adc [r11+0x16], r14b; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000122708: adc [r11+0x4c], r11d; mov eax, esp; pop rbp; pop r12; ret; 
0x000000000e0f07: adc [r11+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret; 
0x00000000081ec6: adc [r11+0x6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000080780: adc [r11+0xc], r14b; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000013c8ec: adc [r11-0x76b6f7ad], cl; ret; 
0x00000000096f8a: adc [r13+0x39], cl; ret far; 
0x000000000fd9db: adc [r13+0x41], r11b; pop rsp; pop r13; pop r14; ret; 
0x000000000862a1: adc [r13+0x4c1174c0], r8b; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000008e771: adc [r13+0x531974c0], r8b; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000128c82: adc [r13+0x5b0875c0], r8b; ret; 
0x000000000a4bdf: adc [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000c4a4f: adc [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000f812b: adc [r15], r9b; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000b4602: adc [r15], r9b; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x00000000083866: adc [r15], r9b; or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000127568: adc [r8+0x14], dil; add edx, 0x1; syscall; 
0x000000000db3b2: adc [r8+0x1], r9b; fmul st, dword ptr [rax-0x7d]; ret; 
0x0000000007cfb2: adc [r8+0x1], r9b; ret; 
0x00000000085e1a: adc [r8+0x5a], bl; pop rbx; ret; 
0x000000000867ae: adc [r8+r9*4+0x4], r12b; and eax, 0x972; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x000000000b3aff: adc [r8-0x12cfeba9], r9b; mov [rdi+0x15], ch; ret; 
0x000000000c9fda: adc [r8-0x73], r9b; adc eax, 0xe06d1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008360c: adc [r8-0x77], r9b; sbb [r8-0x77], r9b; push rdi; mov [rdi+0x8], rax; ret; 
0x000000000ebfdf: adc [r8-0x7b], r9b; shl byte ptr [rbp+rax+0x48], 0x39; ret; 
0x0000000008e782: adc [r8], al; add [rax], al; add [rbx-0x3d], bl; nop [rax+rax]; ret; 
0x000000000b3a7c: adc [r8], r14b; in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000b3a9e: adc [r8], r14b; in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000b3adc: adc [r8], r14b; in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000b3b5e: adc [r8], r14b; in eax, dx; mov [rdi+0x18], ch; ret; 
0x000000000d8024: adc [r8], r8; cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d7e74: adc [r8], r8; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d8074: adc [r8], r8; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000143963: adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x000000000a575e: adc [r8], r8b; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000103d6b: adc [r9+0x9], cl; ror dword ptr [rcx+rcx*4+0x48], 0x1; or bl, ch; ret; 
0x00000000143ce3: adc [r9], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000084b34: adc [r9], r13b; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x000000001094be: adc [rax+0x113], edi; syscall; 
0x0000000010935e: adc [rax+0x114], edi; syscall; 
0x000000000fe44e: adc [rax+0x115], edi; syscall; 
0x0000000010940e: adc [rax+0x116], edi; syscall; 
0x000000000fea96: adc [rax+0x11], eax; mov [r8+0x34], eax; mov [r8+0x38], eax; mov eax, r9d; ret; 
0x000000000f7f8e: adc [rax+0x11], edi; syscall; 
0x000000000fe4fe: adc [rax+0x11d], edi; syscall; 
0x0000000010ad0e: adc [rax+0x120], edi; syscall; 
0x000000000f803e: adc [rax+0x12], edi; syscall; 
0x0000000010adbe: adc [rax+0x12b], edi; syscall; 
0x0000000010ae6e: adc [rax+0x133], edi; syscall; 
0x000000000fdfce: adc [rax+0x146], edi; syscall; 
0x00000000127569: adc [rax+0x14], bh; add edx, 0x1; syscall; 
0x0000000013b575: adc [rax+0x1], bh; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000140bb4: adc [rax+0x1], bh; movups [rdi+0x20], xmm2; ret; 
0x00000000144a83: adc [rax+0x1], bh; pop rbp; ret; 
0x0000000012f24e: adc [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000131fc0: adc [rax+0x1], bh; pop rbx; ret; 
0x00000000140c6e: adc [rax+0x1], bh; ret; 
0x000000000c5a6e: adc [rax+0x1], cl; clc; ret; 
0x000000000db3b3: adc [rax+0x1], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x0000000005131e: adc [rax+0x1], cl; ret; 
0x00000000140c6d: adc [rax+0x1], dil; ret; 
0x0000000010a96e: adc [rax+0x2c], edi; syscall; 
0x0000000010a6ae: adc [rax+0x2d], edi; syscall; 
0x000000000d9404: adc [rax+0x39], cl; ret; 
0x0000000009ce39: adc [rax+0x39], ecx; ret; 
0x0000000014c293: adc [rax+0x3b], cl; sub [rbx-0x1b], sil; mov eax, 0x1; ret; 
0x000000000d681f: adc [rax+0x3d], bh; syscall; 
0x000000000d67de: adc [rax+0x3d], edi; syscall; 
0x00000000177986: adc [rax+0x447ffec5], ah; adc al, al; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000177985: adc [rax+0x447ffec5], r12b; adc al, al; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x0000000010afce: adc [rax+0x45], edi; syscall; 
0x0000000010b0c7: adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x0000000010b07e: adc [rax+0x46], edi; syscall; 
0x00000000122706: adc [rax+0x4c5b1145], ecx; mov eax, esp; pop rbp; pop r12; ret; 
0x00000000085e1b: adc [rax+0x5a], bl; pop rbx; ret; 
0x00000000075d8f: adc [rax+0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000008ce98: adc [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000010bb66: adc [rax+0x63], ecx; fisttp dword ptr [rax-0x77], st; sbb eax, 0xe18af; pop rbx; ret; 
0x00000000164232: adc [rax+0x66c30251], ecx; nop [rax+rax]; mov [rcx], edx; ret; 
0x00000000164251: adc [rax+0x66c30451], ecx; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x00000000164292: adc [rax+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000000415c7: adc [rax+0x68], esi; movups [r8+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000415cc: adc [rax+0x78], edi; mov eax, r9d; add rsp, 0xd0; ret; 
0x0000000013dc50: adc [rax+0x8], eax; ret; 
0x00000000133a6a: adc [rax+0xa0], edx; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000133a83: adc [rax+0xb0], ebx; ret; 
0x00000000087486: adc [rax+0xc], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000089604: adc [rax+0xcb], bh; syscall; 
0x000000000d229e: adc [rax+0xe6], edi; syscall; 
0x000000001092ae: adc [rax+0xe8], edi; syscall; 
0x0000000009405e: adc [rax+0xf2], edi; syscall; 
0x00000000093fe7: adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x00000000093f9e: adc [rax+0xf3], edi; syscall; 
0x000000000d68d9: adc [rax+0xf7], bh; syscall; 
0x000000000b33ff: adc [rax+0xf], esi; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000115d74: adc [rax+rax], eax; cmovne rax, rdx; ret; 
0x00000000115630: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000002d559: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; jmp rax; 
0x000000001322e3: adc [rax+rcx*2+0x33], esp; cmp al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x000000000867af: adc [rax+rcx*4+0x4], ah; and eax, 0x972; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x000000000b3c84: adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000b3b82: adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret; 
0x000000000b3b00: adc [rax-0x12cfeba9], cl; mov [rdi+0x15], ch; ret; 
0x000000000d216e: adc [rax-0x1], bh; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000f9157: adc [rax-0x1], bh; pop rbp; ret; 
0x000000000fecc0: adc [rax-0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000041dfb: adc [rax-0x389bffe6], esi; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000115650: adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x00000000123946: adc [rax-0x69], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000163e54: adc [rax-0x73], cl; adc [rdi], cl; test [rcx+0x5], eax; add [rax], al; ret; 
0x0000000010ce94: adc [rax-0x73], cl; adc al, 0xb2; add eax, [rdx+rcx]; ret; 
0x0000000003a3b2: adc [rax-0x73], cl; adc al, 0xb7; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x0000000013ff46: adc [rax-0x73], cl; adc eax, 0x6ebd2; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c9fdb: adc [rax-0x73], cl; adc eax, 0xe06d1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009b2d4: adc [rax-0x73], cl; add eax, 0x19094; cmovne rax, rdx; ret; 
0x0000000009b1b4: adc [rax-0x73], cl; add eax, 0x19114; cmovne rax, rdx; ret; 
0x0000000009ac44: adc [rax-0x73], cl; add eax, 0x195e4; cmovne rax, rdx; ret; 
0x000000000b02ab: adc [rax-0x73], cl; jg short 0x00000000000b02c0; jne 0x00000000000b0980; ret; 
0x000000000b199f: adc [rax-0x73], cl; jg short 0x00000000000b19b4; jne 0x00000000000b21a0; ret; 
0x0000000010d05c: adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x0000000008c1bc: adc [rax-0x73], cl; or eax, 0x11d3e4; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000f5d22: adc [rax-0x73], cl; or eax, 0xb6c56; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000007563e: adc [rax-0x73], ecx; adc eax, 0x1330da; add rax, rdx; ret; 
0x0000000007969e: adc [rax-0x73], ecx; add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret; 
0x000000000b02ce: adc [rax-0x73], ecx; jg short 0x00000000000b02e4; jne 0x00000000000b0980; ret; 
0x000000000b19c2: adc [rax-0x73], ecx; jg short 0x00000000000b19d8; jne 0x00000000000b21a0; ret; 
0x0000000010d05b: adc [rax-0x73], r9b; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x0000000007a8a2: adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x00000000083cf7: adc [rax-0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000013f94f: adc [rax-0x75], cl; and al, 0x48; call qword ptr [rax+0x28]; 
0x0000000002d1cf: adc [rax-0x75], cl; and al, 0x8; call rax; 
0x0000000010c69c: adc [rax-0x75], cl; and al, 0x8; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6fd: adc [rax-0x75], cl; and al, 0x8; mov rax, [rsp]; add rsp, 0x40; ret; 
0x00000000139051: adc [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call rcx; 
0x000000000eda26: adc [rax-0x75], cl; je short 0x00000000000eda4f; adc al, ch; jmp rbp; 
0x0000000010911f: adc [rax-0x75], cl; je short 0x0000000000109148; or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x0000000010adff: adc [rax-0x75], cl; je short 0x000000000010ae28; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x0000000008721d: adc [rax-0x75], cl; jnp short 0x000000000008722a; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000086e9d: adc [rax-0x75], cl; js short 0x0000000000086eaa; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x0000000013982e: adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000013b3e1: adc [rax-0x75], cl; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x0000000007c336: adc [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000007aae3: adc [rax-0x77], cl; adc [rax-0x77], cl; push rax; adc [rax-0x77], cl; ret; 
0x000000000a1544: adc [rax-0x77], cl; adc bl, al; nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x0000000002d37a: adc [rax-0x77], cl; and al, 0x8; cmovne rdi, r15; call rsi; 
0x000000000af1ec: adc [rax-0x77], cl; clc; ret; 
0x0000000003f093: adc [rax-0x77], cl; cmp [rcx+rcx*4+0x48], cl; or cl, ch; ret; 
0x000000000c85c1: adc [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x0000000007b8a3: adc [rax-0x77], cl; jo short 0x000000000007b8e8; mov [rax], rdx; xor eax, eax; ret; 
0x000000000c8144: adc [rax-0x77], cl; jo short 0x00000000000c8151; add rsp, 0x10; pop rbp; ret; 
0x0000000007ab28: adc [rax-0x77], cl; mov [rax], rdx; ret; 
0x0000000008146e: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x00000000139b68: adc [rax-0x77], cl; out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000000b5fae: adc [rax-0x77], cl; out dx, eax; mov rsi, [rsp+0x18]; call rbx; 
0x0000000007aae7: adc [rax-0x77], cl; push rax; adc [rax-0x77], cl; ret; 
0x0000000007aaeb: adc [rax-0x77], cl; ret; 
0x0000000008360d: adc [rax-0x77], cl; sbb [r8-0x77], r9b; push rdi; mov [rdi+0x8], rax; ret; 
0x0000000002d12a: adc [rax-0x77], ecx; add eax, 0x1c35b6; ret; 
0x00000000131fe8: adc [rax-0x77], ecx; ret far; 
0x00000000103c19: adc [rax-0x7b], cl; push qword ptr [rbp+0x27]; mov rdi, [rbp]; call rbx; 
0x00000000160d77: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000160db3: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000ea9cf: adc [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x39; ret; 
0x0000000009888b: adc [rax-0x7d], cl; call qword ptr [rax]; 
0x00000000096436: adc [rax-0x7d], cl; ret far; 
0x0000000005d7a1: adc [rax-0x7d], cl; ret; 
0x00000000102f94: adc [rax-0x7d], ecx; ret; 
0x0000000006e158: adc [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000073394: adc [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000138917: adc [rax], al; add [rax-0x77], cl; ret; 
0x0000000008e783: adc [rax], al; add [rax], al; add [rbx-0x3d], bl; nop [rax+rax]; ret; 
0x00000000143964: adc [rax], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000059324: adc [rax], al; add [rax], al; add [rcx-0x77], al; ret; 
0x000000000350ab: adc [rax], al; add [rax], al; add [rcx-0xa], al; ret; 
0x000000000fa992: adc [rax], al; add [rax], al; add bl, ch; ret far; 
0x000000000948ed: adc [rax], al; add [rax], al; cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x0000000009044c: adc [rax], al; add [rax], al; cmove eax, ecx; ret; 
0x0000000014caa2: adc [rax], al; add [rax], al; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008b18c: adc [rax], al; add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000013a63e: adc [rax], al; add [rax], al; mov [rsi+0x8], rax; ret; 
0x0000000008618a: adc [rax], al; add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x000000000fe616: adc [rax], al; add [rax], al; mov eax, 0x48; syscall; 
0x0000000004486c: adc [rax], al; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000013a729: adc [rax], al; add [rax], al; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000013a66e: adc [rax], al; add [rax], al; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x00000000078171: adc [rax], al; add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000138fb5: adc [rax], al; add [rax], al; pop rbx; pop rbp; ret; 
0x0000000005c2d1: adc [rax], al; add [rax], al; ret; 
0x000000000fe9dd: adc [rax], al; add [rax], al; syscall; 
0x000000000a38c8: adc [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000005ba21: adc [rax], al; add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x0000000005b9f9: adc [rax], al; add al, ch; call qword ptr [rax]; 
0x0000000002ce0e: adc [rax], al; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000111313: adc [rax], al; je short 0x0000000000111320; xor eax, eax; ret; 
0x000000000a15de: adc [rax], al; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000000a145e: adc [rax], al; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000a1531: adc [rax], al; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000a1a8f: adc [rax], al; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000004e003: adc [rax], al; ret; 
0x000000000d6724: adc [rax], ax; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000017dcfe: adc [rax], bh; enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x0000000013a773: adc [rax], ch; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000000b3a7d: adc [rax], dh; in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000b3a9f: adc [rax], dh; in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000b3add: adc [rax], dh; in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000b3b5f: adc [rax], dh; in eax, dx; mov [rdi+0x18], ch; ret; 
0x000000000b3c61: adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000b865d: adc [rax], dl; add al, ch; ret far; 
0x0000000005bc2b: adc [rax], eax; add [rax], al; mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x000000000f7f90: adc [rax], eax; add [rax], al; syscall; 
0x000000000a3748: adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000014b579: adc [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000006e3bf: adc [rax], eax; add [rbx-0x78f0d008], al; call qword ptr [rax+rax]; 
0x0000000014cdfa: adc [rax], eax; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000d6ec1: adc [rax], eax; and [rcx], al; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000d3d75: adc [rax], eax; cmp byte ptr [rax], 0x0; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d7d25: adc [rax], eax; cmp byte ptr [rax], 0x0; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d7d85: adc [rax], eax; cmp byte ptr [rax], 0x0; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7fb5: adc [rax], eax; cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d8025: adc [rax], eax; cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d71f9: adc [rax], eax; cmp eax, 0x1; jg short 0x00000000000d7208; pop rbx; ret; 
0x0000000008ce93: adc [rax], eax; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d226d: adc [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21fd: adc [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d2c75: adc [rax], eax; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x00000000037264: adc [rax], eax; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x000000000d2141: adc [rax], eax; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000d727c: adc [rax], eax; mov rax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x0000000002e633: adc [rax], eax; mov rax, [rbp-0x60]; mov rdi, r12; call rax; 
0x0000000002e076: adc [rax], eax; mov rdi, rbx; call r12; 
0x0000000002ed72: adc [rax], eax; mov rdi, rbx; call r14; 
0x0000000002df03: adc [rax], eax; mov rdi, rbx; call rbp; 
0x0000000008bb1a: adc [rax], eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008b696: adc [rax], eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000d6725: adc [rax], eax; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d21dd: adc [rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d2e65: adc [rax], eax; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000946bc: adc [rax], eax; sub rsp, 0x8; syscall; 
0x00000000089ed2: adc [rax], eax; syscall; 
0x00000000140bcc: adc [rax], ebx; ret; 
0x0000000014034c: adc [rax], ecx; ret; 
0x0000000014035c: adc [rax], edx; ret; 
0x00000000140bac: adc [rax], esp; ret; 
0x000000000d7fb4: adc [rax], r8; cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d7f34: adc [rax], r8; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d8004: adc [rax], r8; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000013b000: adc [rbp+0x15840fc0], al; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x00000000141ad5: adc [rbp+0x31], al; call far fword ptr [rdx+0x59]; 
0x00000000132536: adc [rbp+0x31], eax; rol byte ptr [rbx+0x197502f8], 0x44; mov eax, eax; ret; 
0x00000000096f8b: adc [rbp+0x39], cl; ret far; 
0x000000000fd9dc: adc [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000037396: adc [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000010ce19: adc [rbp+0x440a75d2], eax; mov eax, eax; ret; 
0x0000000013b3dd: adc [rbp+0x481074c0], al; mov eax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x00000000144af8: adc [rbp+0x485474c0], al; mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000007b865: adc [rbp+0x494575f6], al; lea edx, [rax+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000013916e: adc [rbp+0x494874c0], al; mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000862a2: adc [rbp+0x4c1174c0], al; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000008e772: adc [rbp+0x531974c0], al; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000128c83: adc [rbp+0x5b0875c0], al; ret; 
0x0000000008a94f: adc [rbp+0x6], dh; ret; 
0x000000000b2228: adc [rbp+rcx*4+0x1d], cl; and [rcx+0x634b000f], al; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b223d: adc [rbp+rcx*4+0x1d], cl; or eax, [rcx+0x634b000f]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af82f: adc [rbp+rcx*4+0x1d], cl; test eax, 0x49000fa7; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b544d: adc [rbp-0x6b], esi; test edx, edx; jne short 0x00000000000b5430; ret; 
0x000000000e7cdd: adc [rbp-0x77], cl; ret far; 
0x0000000002d256: adc [rbp-0x7b], cl; push qword ptr [rsp+rbp+0x4c]; mov esi, esp; mov edi, ebp; call r15; 
0x00000000104412: adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret; 
0x000000001743ce: adc [rbp-0xc928b40], eax; bsf eax, eax; vzeroupper; ret; 
0x0000000012f9ac: adc [rbp-0xf], dh; ret; 
0x0000000008df18: adc [rbx+0x127733f8], al; lea rdx, [rip+0x11bc23]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c026: adc [rbx+0x13e8c107], ecx; mov [rsi], eax; xor eax, eax; ret; 
0x00000000080747: adc [rbx+0x16], dh; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000002eddf: adc [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000005b9a5: adc [rbx+0x41], bl; pop rsp; pop r13; ret; 
0x0000000017e30f: adc [rbx+0x463bfc47], cl; cld; jne short 0x000000000017e320; xor eax, eax; ret; 
0x00000000043ff1: adc [rbx+0x48], bl; mov dword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000122709: adc [rbx+0x4c], ebx; mov eax, esp; pop rbp; pop r12; ret; 
0x000000000e0f08: adc [rbx+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret; 
0x000000001117f7: adc [rbx+0x5d], bl; mov eax, r10d; pop r12; ret; 
0x000000000440e2: adc [rbx+0x5d], bl; mov rax, r12; pop r12; ret; 
0x00000000085896: adc [rbx+0x5d], bl; pop r12; jmp rax; 
0x000000000759b7: adc [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000036d0e: adc [rbx+0x5d], bl; pop r12; ret; 
0x00000000081ec7: adc [rbx+0x6], dh; movzx eax, byte ptr [rax]; ret; 
0x0000000009be6c: adc [rbx+0xb], bl; add [rax-0x73], cl; adc eax, 0xbb079; cmovne rax, rdx; ret; 
0x00000000080781: adc [rbx+0xc], dh; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000f9584: adc [rbx+0xe0], esi; movups [rbx+0xf0], xmm7; add rsp, 0x190; pop rbx; ret; 
0x000000000f958b: adc [rbx+0xf0], edi; add rsp, 0x190; pop rbx; ret; 
0x0000000013b435: adc [rbx+0xf], bl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000afa97: adc [rbx+0xff3174e], cl; jg short 0x00000000000afaa6; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b0767: adc [rbx+0xff3174e], cl; jg short 0x00000000000b0776; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b2d47: adc [rbx+0xff3174e], cl; jg short 0x00000000000b2d56; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b3817: adc [rbx+0xff3174e], cl; jg short 0x00000000000b3826; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000afab7: adc [rbx+0xff3184e], cl; jg short 0x00000000000afac6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b0787: adc [rbx+0xff3184e], cl; jg short 0x00000000000b0796; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b2d67: adc [rbx+0xff3184e], cl; jg short 0x00000000000b2d76; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b3837: adc [rbx+0xff3184e], cl; jg short 0x00000000000b3846; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c1986: adc [rbx+rcx*4+0x4c], cl; and al, 0x18; mov rdi, [rax]; call r13; 
0x000000000894d6: adc [rbx-0x1197cc9], ecx; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x00000000084b32: adc [rbx-0x2fd6efb9], cl; ret; 
0x0000000013b352: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000145562: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x000000001456f6: adc [rbx-0x3d], bl; nop [rax]; ret; 
0x000000000f9bf7: adc [rbx-0x47e7db84], cl; add [rcx], eax; add [rax], al; syscall; 
0x0000000010aeaa: adc [rbx-0x47f3db84], cl; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000012301a: adc [rbx-0x73], al; add [rdx], r8d; pop rbx; ret; 
0x0000000013c8ed: adc [rbx-0x76b6f7ad], cl; ret; 
0x0000000003bd9b: adc [rbx], bl; add [rbx-0xb373], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x00000000044844: adc [rbx], eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d2ad1: adc [rbx], eax; add rsp, 0xd0; pop rbx; ret; 
0x000000000b4725: adc [rbx], eax; ret; 
0x000000000b46a2: adc [rbx], esp; ret; 
0x0000000008b39f: adc [rcx+0x1c283d0], cl; lock cmpxchg [rdi], rdx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x00000000093099: adc [rcx+0x244489ee], cl; adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall; 
0x0000000017bcf2: adc [rcx+0x4], esp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcf1: adc [rcx+0x4], rsp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x00000000123335: adc [rcx+0x4e2c1f2], ecx; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000017bcf9: adc [rcx+0x5], ebp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcf8: adc [rcx+0x5], rbp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000009a2f3: adc [rcx+0x5c], al; ret; 
0x00000000164271: adc [rcx+0x66c30351], ecx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000001642b2: adc [rcx+0x66c30751], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x000000001642c2: adc [rcx+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x00000000091eec: adc [rcx+0x6], dh; add [rbp-0x7eb38a40], al; ret far; 
0x0000000017bd00: adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcff: adc [rcx+0x6], rsi; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bd07: adc [rcx+0x7], edi; ret; 
0x0000000017bd06: adc [rcx+0x7], rdi; ret; 
0x00000000103d6c: adc [rcx+0x9], cl; ror dword ptr [rcx+rcx*4+0x48], 0x1; or bl, ch; ret; 
0x000000000b2a7f: adc [rcx+0xf], edi; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000013de7a: adc [rcx+rcx*4-0x1a], cl; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000011b11f: adc [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x0000000013aff7: adc [rcx+rcx*4-0x1e], cl; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b031: adc [rcx+rcx*4-0x1e], cl; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000014a055: adc [rcx+rcx*4-0x20], al; pop r12; ret; 
0x00000000041ec0: adc [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000373ba: adc [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000076154: adc [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000001117cc: adc [rcx+rcx*4-0x30], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000074126: adc [rcx+rcx*4-0x3e], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000943b4: adc [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x000000000df749: adc [rcx+rcx*4-0x40], cl; pop rbx; pop r12; pop r13; ret; 
0x0000000011f580: adc [rcx+rcx*4-0xe], cl; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x000000000d21fb: adc [rcx+rdx+0xc76400], ebp; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000b4694: adc [rcx-0x10], esi; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000b3be2: adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret; 
0x000000000b3bc2: adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret; 
0x0000000017b9a2: adc [rcx-0x1], ebx; ret; 
0x0000000017b966: adc [rcx-0x1], edi; ret; 
0x0000000017b9a1: adc [rcx-0x1], rbx; ret; 
0x0000000017b965: adc [rcx-0x1], rdi; ret; 
0x000000000b4698: adc [rcx-0x20], edi; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x0000000017b99b: adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x0000000017bb99: adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b95f: adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x0000000017b99a: adc [rcx-0x2], rdx; vmovups [r9-0x40], zmm3; ret; 
0x0000000017bb98: adc [rcx-0x2], rsi; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b95e: adc [rcx-0x2], rsi; vmovups [r9-0x40], zmm7; ret; 
0x000000000b469d: adc [rcx-0x30], eax; movups [r11], xmm4; ret; 
0x0000000017bb92: adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b958: adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb91: adc [rcx-0x3], rbp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b957: adc [rcx-0x3], rbp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x000000000df627: adc [rcx-0x3fcecb95], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000004151d: adc [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xd; syscall; 
0x0000000017bb8b: adc [rcx-0x4], esp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b951: adc [rcx-0x4], esp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb8a: adc [rcx-0x4], rsp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b950: adc [rcx-0x4], rsp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000007b8d2: adc [rcx-0x73], cl; adc al, 0x90; mov [rax], rdx; xor eax, eax; ret; 
0x00000000142474: adc [rcx-0x75], cl; or [rcx+r9*4-0x9], r9b; call qword ptr [rax+0x20]; 
0x000000000ed7da: adc [rcx-0x77], al; fmul st, dword ptr [rax+0x63]; ret far; 
0x00000000044a5f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x13e; syscall; 
0x00000000102b2f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x1a; syscall; 
0x000000000fda2f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x7; syscall; 
0x000000000f9cd0: adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x00000000109393: adc [rcx-0x77], al; ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 0x8; mov eax, 0x114; syscall; 
0x000000000fe534: adc [rcx-0x77], al; ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 0x8; mov eax, 0x11d; syscall; 
0x00000000147e4c: adc [rcx-0x77], cl; ret; 
0x0000000009a85f: adc [rcx-0x77], cl; xor [rax-0x77], cl; clc; ret; 
0x000000000fea97: adc [rcx-0x77], eax; xor al, 0x41; mov [rax+0x38], eax; mov eax, r9d; ret; 
0x0000000018f497: adc [rcx-0x7d], al; ret far; 
0x0000000009494e: adc [rcx-0x7d], al; ret; 
0x0000000004f117: adc [rcx-0x7d], cl; ret; 
0x000000000cd4cf: adc [rcx-0x80], al; jmp qword ptr [rbx]; 
0x00000000143ce4: adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000014cdff: adc [rcx], al; add [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000009107e: adc [rcx], al; add [rax], al; pop rbp; ret; 
0x0000000010a171: adc [rcx], al; add [rax], al; syscall; 
0x0000000012f167: adc [rcx], al; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x0000000016f323: adc [rcx], ch; cmp edx, ecx; jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x00000000084b35: adc [rcx], ch; rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x00000000110fa1: adc [rcx], dh; idiv byte ptr [rdi+0x2000004]; call rax; 
0x00000000098a0b: adc [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000036ce7: adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000007b8da: adc [rcx], dh; rol bl, 0x66; nop; mov eax, 0xffffffff; ret; 
0x0000000007caa7: adc [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x80]; 
0x00000000084453: adc [rcx], eax; add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000081c03: adc [rcx], eax; add [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000089762: adc [rcx], eax; add [rax], al; syscall; 
0x00000000178e04: adc [rcx], edx; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000f812a: adc [rdi+0x10], eax; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000b4718: adc [rdi+0x10], ebp; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000b4601: adc [rdi+0x10], ecx; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x0000000017b994: adc [rdi+0x1], ecx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017c0a1: adc [rdi+0x1], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017b993: adc [rdi+0x1], rcx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017c0a0: adc [rdi+0x1], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000000f812e: adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x00000000140bbb: adc [rdi+0x20], edx; ret; 
0x000000000b471c: adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000f8132: adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x00000000140b88: adc [rdi+0x30], eax; ret; 
0x000000000b4720: adc [rdi+0x30], edi; movups [r11], xmm8; ret; 
0x000000000f8136: adc [rdi+0x40], eax; ret; 
0x000000000f858d: adc [rdi+0x68], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8596: adc [rdi+0x78], edi; ret; 
0x00000000140337: adc [rdi+0x8], eax; ret; 
0x0000000009c28c: adc [rdi+0xb], dl; add [rax-0x73], cl; adc eax, 0xbac79; cmovne rax, rdx; ret; 
0x000000000f8edf: adc [rdi+0xe8], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000f8eeb: adc [rdi+0xf8], edi; ret; 
0x000000000e5ecc: adc [rdi+rdi*8-0x3b7cb701], bl; or [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x000000001233e0: adc [rdi+rdx+0x8], eax; ret; 
0x000000000b48c5: adc [rdi+rdx-0x10], ebx; ret; 
0x000000000b4463: adc [rdi+rdx-0x10], ecx; ret; 
0x000000000b4605: adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b45d8: adc [rdi+rdx-0x10], esp; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b45dd: adc [rdi+rdx-0x20], ebp; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b460a: adc [rdi+rdx-0x20], ebx; ret; 
0x000000000b48c0: adc [rdi+rdx-0x20], edx; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b48bb: adc [rdi+rdx-0x30], ecx; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45e2: adc [rdi+rdx-0x30], esi; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b48b6: adc [rdi+rdx-0x40], eax; movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45e7: adc [rdi+rdx-0x40], edi; ret; 
0x0000000017be54: adc [rdi-0x5], esp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be53: adc [rdi-0x5], rsp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be5b: adc [rdi-0x6], ebp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be5a: adc [rdi-0x6], rbp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be62: adc [rdi-0x7], esi; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be61: adc [rdi-0x7], rsi; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be69: adc [rdi-0x8], edi; ret; 
0x0000000017be68: adc [rdi-0x8], rdi; ret; 
0x000000000f812c: adc [rdi], cl; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000b471a: adc [rdi], cl; adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000b4603: adc [rdi], cl; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret; 
0x00000000140c48: adc [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 0x1; ret; 
0x000000000a1595: adc [rdi], cl; mov bh, 0x54; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000a1585: adc [rdi], cl; mov dh, 0x54; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000a1567: adc [rdi], cl; mov dh, 0x54; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x00000000091de9: adc [rdi], cl; mov dh, 0xc0; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807d8: adc [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x00000000083867: adc [rdi], cl; or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000163e57: adc [rdi], cl; test [rcx+0x5], eax; add [rax], al; ret; 
0x00000000040525: adc [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000408c1: adc [rdi], eax; movd xmm0, esi; ret; 
0x000000000b45fe: adc [rdi], eax; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b4460: adc [rdi], eax; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000e24a7: adc [rdi], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000017b98e: adc [rdi], eax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x00000000127f56: adc [rdi], ecx; mov dh, 0xc0; movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x000000000584c6: adc [rdi], ecx; mov esi, 0x77cf39ca; loop 0x0000000000058513; mov eax, eax; ret; 
0x0000000017c09b: adc [rdi], edx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0bc: adc [rdi], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017b98d: adc [rdi], rax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017c09a: adc [rdi], rdx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0bb: adc [rdi], rdx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000010bcba: adc [rdx+0x13], dh; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x000000000ff04e: adc [rdx+0x14], edi; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000073980: adc [rdx+0x1], bh; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x000000000b5927: adc [rdx+0x1], ch; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000b5c86: adc [rdx+0x1], ch; xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x0000000007fef3: adc [rdx+0x2a], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x000000000802d3: adc [rdx+0x3a], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000151fe9: adc [rdx+0x8], dh; movaps [rdi], xmm4; jmp r9; 
0x0000000010c082: adc [rdx+0x8], dh; seta al; movzx eax, al; neg eax; ret; 
0x000000000f01ca: adc [rdx+0x8], dh; setne al; movzx eax, al; neg eax; ret; 
0x000000000b06a6: adc [rdx+0xff31456], cl; jg short 0x00000000000b06b5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000b06a5: adc [rdx+0xff31456], r9b; jg short 0x00000000000b06b5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000b0727: adc [rdx+0xff3184e], cl; jg short 0x00000000000b0736; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b0828: adc [rdx+0xff3204e], cl; jg short 0x00000000000b0837; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b2048: adc [rdx+0xff3204e], cl; jg short 0x00000000000b2057; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000001685dc: adc [rdx], al; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b4e0a: adc [rdx], al; add [rax], al; ret; 
0x0000000017a02b: adc [rdx], cl; add [rax], al; xor eax, eax; ret; 
0x000000000d45bc: adc [rdx], dl; add al, ch; fsub st, qword ptr [rdx]; sti; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000013dc64: adc [rdx], ecx; ret; 
0x000000000d4444: adc [rdx], edx; add al, ch; push rsp; and al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000040872: adc [rip+0x162b68], bl; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000040640: adc [rip+0x178d9a], al; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x0000000004061a: adc [rip+0x178dc8], al; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x0000000019260a: adc [rip+0x27468], al; divss xmm0, [rip+0x2877c]; ret; 
0x00000000132846: adc [rip+0xc5b5c], esp; call rbx; 
0x000000001327d6: adc [rip+0xc6c0c], ebx; mov qword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x000000000f90fb: adc [rip-0x2708fff1], edi; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b0fb: adc [rip-0x2708fff2], ebx; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000149b60: adc [rip-0x76b40000], al; loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b80: adc [rip-0x76b40000], al; loopne 0x0000000000149bc9; pop rsp; ret; 
0x00000000040193: adc [rip-0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x0000000017c1e1: adc [rsi+0x1], edx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1e0: adc [rsi+0x1], rdx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1e8: adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1e7: adc [rsi+0x2], rdx; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1ef: adc [rsi+0x3], edx; ret; 
0x0000000017c1ee: adc [rsi+0x3], rdx; ret; 
0x0000000017c277: adc [rsi+0x4], edx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c276: adc [rsi+0x4], rdx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c27e: adc [rsi+0x5], edx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c27d: adc [rsi+0x5], rdx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x000000000877fd: adc [rsi+0x60], esi; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x000000000f853d: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e52: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x0000000017c303: adc [rsi+0x66], ah; nop [rax+rax]; nop; xor rax, rax; ret; 
0x0000000017c285: adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c284: adc [rsi+0x6], rdx; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000008780b: adc [rsi+0x70], edi; ret; 
0x0000000017c28c: adc [rsi+0x7], edx; ret; 
0x0000000017c28b: adc [rsi+0x7], rdx; ret; 
0x00000000179eda: adc [rsi+0xf], ah; cmp [rdi], dl; ret; 
0x000000000a1c2b: adc [rsi+0xf], ah; outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x000000000a4be0: adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000c4a50: adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000f7ffb: adc [rsi+0xf], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000015426c: adc [rsi+rax], bl; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000012346a: adc [rsi+rcx+0x8], edx; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000b445b: adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x0000000017c08e: adc [rsi-0x1], edx; ret; 
0x0000000017c08d: adc [rsi-0x1], rdx; ret; 
0x0000000017c087: adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c086: adc [rsi-0x2], rdx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c080: adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c07f: adc [rsi-0x3], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c079: adc [rsi-0x4], edx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c078: adc [rsi-0x4], rdx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017ba2a: adc [rsi-0x75], ah; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000000b3ba3: adc [rsi-0x77], ah; sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x0000000011603a: adc [rsi], al; add [rax-0x73], cl; add eax, 0x6113c; cmove rax, rdx; ret; 
0x000000000b4458: adc [rsi], al; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x0000000014026a: adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000140afa: adc [rsi], eax; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000013db7d: adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000017c1db: adc [rsi], edx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1da: adc [rsi], rdx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000004151a: adc [rsp+0x10], edi; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000142bac: adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000000942cd: adc [rsp+0x40], eax; mov [rsp+0x30], eax; mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x000000000942db: adc [rsp+0x50], eax; syscall; 
0x000000000446ca: adc [rsp+0x8], al; add rsp, 0x18; ret; 
0x00000000142f14: adc [rsp+0xb8], ecx; call rax; 
0x00000000142fbe: adc [rsp+0xb8], edx; call rax; 
0x000000000c6a2a: adc [rsp-0x10], al; ret; 
0x000000000e0f10: adc [rsp], eax; pop r12; ret; 
0x00000000041516: adc [rsp], esi; movups [rsp+0x10], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000119595: adc ah, [rcx+rcx*4+0x2b]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000afe4a: adc ah, [rdx+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000017aa4d: adc ah, [rip+0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000ff0ed: adc ah, [rsp+rax*2-0x77]; and esi, [rcx]; neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41]; 
0x000000000b4c34: adc ah, bh; mov [rax], ecx; ret; 
0x000000001779dd: adc ah, bh; mov [rax], ecx; vzeroupper; ret; 
0x0000000018713a: adc ah, bh; vmovdqu64 [rax+rdx-0x60], ymm16; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ecdd: adc ah, bh; vmovdqu64 [rax+rdx-0xc0], zmm16; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x000000000466d1: adc al, 0x0; add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x000000000f11cf: adc al, 0x0; add [rax], al; add [rdx+0x2], edi; cmove eax, edx; ret; 
0x0000000012756b: adc al, 0x0; add [rax], al; add edx, 0x1; syscall; 
0x000000000ff2fd: adc al, 0x0; add [rax], al; syscall; 
0x000000000a3448: adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000ca683: adc al, 0x0; add dh, dh; ret; 
0x00000000040e3e: adc al, 0x0; add rsp, 0x10; pop rbx; ret; 
0x00000000040fbc: adc al, 0x0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000a18bf: adc al, 0x0; mov rax, [rax+rdi*8]; ret; 
0x0000000005c6bf: adc al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000006503a: adc al, 0x0; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x00000000064ce2: adc al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000064945: adc al, 0x0; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000005d46b: adc al, 0x0; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d088: adc al, 0x0; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000005d801: adc al, 0x0; movzx r12d, r12b; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000010ce18: adc al, 0x11; test edx, edx; jne short 0x000000000010ce28; mov eax, r8d; ret; 
0x0000000010d04b: adc al, 0x11; test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d89b: adc al, 0x11; test edx, edx; jne short 0x000000000010d8a8; ret; 
0x00000000151af5: adc al, 0x13; jmp rdx; 
0x000000000a2e95: adc al, 0x16; sub eax, edx; ret; 
0x0000000016f69c: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x00000000192c58: adc al, 0x19; idiv edi; mov qword ptr [rip+0x5cf19], 0x0; add rsp, 0x8; ret; 
0x0000000011f4a9: adc al, 0x1; add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xd7728; call rax; 
0x00000000045513: adc al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000017e208: adc al, 0x1; add [rax], al; ret; 
0x00000000109360: adc al, 0x1; add [rax], al; syscall; 
0x00000000144b48: adc al, 0x24; call qword ptr [rax+0x8]; 
0x00000000103e3e: adc al, 0x24; mov [rsp+0x10], rbx; call rax; 
0x00000000125a52: adc al, 0x24; mov rdi, r14; call rdx; 
0x000000000fb51e: adc al, 0x2; call qword ptr [rbx+0x40]; 
0x000000000fbf3b: adc al, 0x2; call qword ptr [rsp+0x50]; 
0x000000000b3b03: adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret; 
0x0000000018a85c: adc al, 0x3a; sub eax, edx; ret; 
0x0000000016fcbd: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000041fcb: adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall; 
0x0000000014a46b: adc al, 0x48; add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x000000000f935b: adc al, 0x48; add esp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000b1070: adc al, 0x48; lea eax, [rdi+0x14]; ret; 
0x000000000b1ed3: adc al, 0x48; lea eax, [rdi+0x15]; ret; 
0x000000000a515b: adc al, 0x48; lea eax, [rdi+rax+0x30]; ret; 
0x000000000b0331: adc al, 0x48; lea edi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b1a45: adc al, 0x48; lea edi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x00000000084e33: adc al, 0x48; mov [rip+0x16b8dd], ebx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x0000000008373b: adc al, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000002d1c7: adc al, 0x48; mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000ff3e3: adc al, 0x48; mov esi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff493: adc al, 0x48; mov esi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000b0350: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1a73: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x0000000009309f: adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall; 
0x00000000081b0d: adc al, 0x4c; mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x0000000009d793: adc al, 0x5b; pop rbp; pop r12; ret; 
0x00000000095138: adc al, 0x60; cld; dec dword ptr [rax-0x7d]; ret; 
0x000000000a14fd: adc al, 0x66; mov [rdi+0x4], edx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x000000000d9956: adc al, 0x74; sbb [rbp-0x7b], cl; push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15; 
0x000000001366b9: adc al, 0x75; ret far; 
0x000000000a1316: adc al, 0x7; cmp edx, esi; je short 0x00000000000a1310; ret; 
0x00000000186f0b: adc al, 0x83; shl byte ptr [rax+0x48], 0x1; clc; ret; 
0x0000000017064b: adc al, 0x83; shl byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x0000000013a6c0: adc al, 0x88; add rdx, r8; jmp rdx; 
0x000000000903c5: adc al, 0x89; out dx, al; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000013c8e9: adc al, 0x8b; adc [r11-0x76b6f7ad], cl; ret; 
0x000000000a15e4: adc al, 0x90; add rdx, r8; jmp rdx; 
0x0000000007b86d: adc al, 0x90; mov [rax], rdx; xor eax, eax; ret; 
0x0000000009b1b8: adc al, 0x91; add [rax], eax; cmovne rax, rdx; ret; 
0x0000000004e2a9: adc al, 0x91; add rdx, r9; jmp rdx; 
0x00000000075e88: adc al, 0x91; add rdx, rcx; jmp rdx; 
0x0000000016d290: adc al, 0x91; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016b9be: adc al, 0x91; sub eax, edx; ret; 
0x000000000b4cdc: adc al, 0x91; sub edx, [rcx+rsi*4]; je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x000000000cb760: adc al, 0x93; add rdx, r11; jmp rdx; 
0x00000000151af1: adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000ecae6: adc al, 0x96; add rdx, r14; jmp rdx; 
0x000000000cd567: adc al, 0x96; add rdx, rsi; jmp rdx; 
0x000000000501bd: adc al, 0x97; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000a1537: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000a1a97: adc al, 0xa; jmp r10; 
0x000000000a3003: adc al, 0xa; sub eax, edx; ret; 
0x0000000016f81d: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x000000000b4cdf: adc al, 0xb1; je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x0000000010ce97: adc al, 0xb2; add eax, [rdx+rcx]; ret; 
0x0000000010ad68: adc al, 0xb4; idiv edi; mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x000000000cfb3c: adc al, 0xb6; or eax, 0x48c68900; movsxd esi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000cfadc: adc al, 0xb7; add rdx, rdi; jmp rdx; 
0x0000000003a3b5: adc al, 0xb7; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x000000000ff2fb: adc al, 0xb8; adc al, 0x0; add [rax], al; syscall; 
0x000000000ff25b: adc al, 0xb8; adc eax, [rax]; add [rax], al; syscall; 
0x000000000f9d3b: adc al, 0xb8; add [rax], eax; add [rax], al; syscall; 
0x000000000fa35b: adc al, 0xb8; add eax, [rax]; add [rax], al; syscall; 
0x000000000d69bb: adc al, 0xb8; and al, [rax]; add [rax], al; syscall; 
0x000000000d7d2b: adc al, 0xb8; imul eax, [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000d7d60; ret; 
0x000000000d802b: adc al, 0xb8; ja short 0x00000000000d802f; add [rax], al; syscall; 
0x000000000ff84b: adc al, 0xb8; jb short 0x00000000000ff84f; add [rax], al; syscall; 
0x000000000d3d7b: adc al, 0xb8; je short 0x00000000000d3d7f; add [rax], al; syscall; 
0x000000000d7fbb: adc al, 0xb8; jne short 0x00000000000d7fbf; add [rax], al; syscall; 
0x000000000ff7db: adc al, 0xb8; jno short 0x00000000000ff7df; add [rax], al; syscall; 
0x000000000d7d8b: adc al, 0xb8; push 0x0; add [rax], al; syscall; 
0x00000000102afb: adc al, 0xb8; sbb al, [rax]; add [rax], al; syscall; 
0x0000000010a48b: adc al, 0xb8; sub al, [rax]; add [rax], al; syscall; 
0x0000000010a3bb: adc al, 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x0000000010957b: adc al, 0xb8; xor [rcx], al; add [rax], al; syscall; 
0x0000000014c3b0: adc al, 0xb; or al, [rax]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x000000000f02a1: adc al, 0xc3; ret; 
0x0000000014cff8: adc al, 0xc7; xor eax, eax; ret; 
0x000000000c7fe0: adc al, 0xe9; cmp dh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000b44b4: adc al, 0xe; cmp rdi, rdx; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x00000000169ad1: adc al, 0xe; sub eax, edx; ret; 
0x000000000b06a9: adc al, 0xf3; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x0000000009adb2: adc al, 0xf9; call far fword ptr [rdx+0x31]; 
0x0000000015286b: adc al, 0xf; sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000000b1a49: adc al, 0xf; test [rax+0x7], edx; add [rax], al; ret; 
0x000000000d2647: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x000000000f8040: adc al, [rax]; add [rax], al; syscall; 
0x000000000a8c2e: adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000017295f: adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000c84eb: adc al, [rax]; cmp eax, 0x1; jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x000000000c7512: adc al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000085b39: adc al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000085b38: adc al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c73cd: adc al, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c72b5: adc al, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000858b1: adc al, [rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000df21d: adc al, [rcx+rcx*4-0x38]; ret; 
0x0000000004361a: adc al, [rcx]; add [rax], al; mov esi, ebp; mov rdi, r13; call rax; 
0x000000000ac3a4: adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x00000000175fca: adc al, [rdx]; add [rax], al; vzeroupper; ret; 
0x00000000115f1a: adc al, [rsi]; add [rax-0x73], cl; add eax, 0x6127c; cmove rax, rdx; ret; 
0x000000000b4bfc: adc al, ah; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x00000000177992: adc al, ah; vzeroupper; ret; 
0x000000000b4bf0: adc al, al; movdqu [rax+rdx-0x30], xmm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x0000000017798c: adc al, al; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000000b4c2c: adc al, bh; mov [rax], rcx; ret; 
0x000000001779d2: adc al, bh; mov [rax], rcx; vzeroupper; ret; 
0x000000000eda2b: adc al, ch; jmp rbp; 
0x00000000086093: adc al, ch; mov bh, 0x62; cli; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000940be: adc al, ch; mov esp, 0x8bffff20; and al, 0x10; add rsp, 0x28; ret; 
0x0000000004e190: adc al, ch; or al, [rax]; add [rax], al; add rsp, 0xd8; ret; 
0x00000000053b7f: adc al, ch; pop rbx; ret; 
0x000000000f56fa: adc al, ch; push rax; insb [rdi], dx; call far fword ptr [rax+0x5a]; 
0x0000000004c6bf: adc al, ch; ret far; 
0x0000000003f567: adc al, ch; ret; 
0x000000000d3c92: adc al, ch; sbb [rbp], cl; add [rax-0x77], cl; ret; 
0x000000000b4c02: adc al, dh; rep ret; 
0x000000001779c5: adc al, dh; vmovdqu [rax], xmm0; vzeroupper; ret; 
0x0000000008898b: adc al, dh; xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x000000000b4bf6: adc al, dl; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bf5: adc al, r10b; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bfb: adc al, r12b; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x00000000177991: adc al, r12b; vzeroupper; ret; 
0x000000000b4c01: adc al, r14b; rep ret; 
0x000000001779c4: adc al, r14b; vmovdqu [rax], xmm0; vzeroupper; ret; 
0x000000000b4c2b: adc al, r15b; mov [rax], rcx; ret; 
0x000000001779d1: adc al, r15b; mov [rax], rcx; vzeroupper; ret; 
0x000000000b4bef: adc al, r8b; movdqu [rax+rdx-0x30], xmm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x0000000017798b: adc al, r8b; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000139236: adc ax, [rax]; add [rbp+0x486274c0], al; mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000e3433: adc bh, [rcx]; ret far; 
0x000000000de490: adc bh, [rcx]; ror byte ptr [rdi], 0x1; test [rdi+rsi*8-0x1d160001], ch; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000143961: adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x0000000017ecf5: adc bh, bh; rep ret; 
0x00000000177def: adc bh, bh; ret; 
0x0000000017ed69: adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x0000000017ed5a: adc bh, bh; vmovdqu64 [rax], ymm16; ret; 
0x00000000177af1: adc bh, bh; vzeroupper; ret; 
0x000000001859d1: adc bh, bh; xtest; je short 0x00000000001859dc; vzeroall; ret; 
0x00000000116cd7: adc bh, dh; call qword ptr [rax-0x18]; 
0x00000000098e74: adc bl, 0x11; add al, ch; ret; 
0x0000000018cd4b: adc bl, al; mov rax, r8; ret; 
0x0000000013a6e5: adc bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xc; ret; 
0x000000000a4c17: adc bl, al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50d7: adc bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a1547: adc bl, al; nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x000000000401b8: adc bl, bl; insb [rdi], dx; and al, 0x8; ret; 
0x00000000080303: adc bl, ch; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000050ca2: adc bl, ch; jno short 0x0000000000050cef; shl ecx, cl; mov [rdi], r9; ret; 
0x00000000084ba0: adc bl, ch; ret; 
0x00000000159330: adc bl, dh; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b1e46: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b0656: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000b1007: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e67: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af997: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000b1046: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000af9d6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000af9c6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000b10c7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f27: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000afa57: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa37: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x000000000b11c8: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b2028: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000afb38: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x00000000192607: adc bl, dh; movups xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x0000000015932f: adc bl, r14b; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b1e45: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b0655: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000b1006: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e66: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af996: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000b1045: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000af9d5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000af9c5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000b10c6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f26: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000afa56: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa36: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x0000000013a6e4: adc bl, r8b; nop [rax+rax]; mov dword ptr [rsi], 0xc; ret; 
0x00000000187141: adc bpl, r15b; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ece4: adc bpl, r15b; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x00000000101e5c: adc byte ptr [rax-0x3f7a0001], 0x74; and al, 0x83; ret; 
0x000000000b4e09: adc byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000b4dd4: adc byte ptr [rbx], 0x0; mov rax, [rax+0x1f8]; ret; 
0x000000000b4de4: adc byte ptr [rbx], 0x0; mov rax, [rax+0x200]; ret; 
0x000000000b4df4: adc byte ptr [rbx], 0x0; mov rax, [rax+0x208]; ret; 
0x000000000b4e04: adc byte ptr [rbx], 0x0; mov rax, [rax+0x210]; ret; 
0x000000000b4e14: adc byte ptr [rbx], 0x0; mov rax, [rax+0x218]; ret; 
0x000000000b4e24: adc byte ptr [rbx], 0x0; mov rax, [rax+0x220]; ret; 
0x000000000b4e34: adc byte ptr [rbx], 0x0; mov rax, [rax+0x228]; ret; 
0x000000000b4e44: adc byte ptr [rbx], 0x0; mov rax, [rax+0x230]; ret; 
0x000000000b4e54: adc byte ptr [rbx], 0x0; mov rax, [rax+0x238]; ret; 
0x000000000b4e64: adc byte ptr [rbx], 0x0; mov rax, [rax+0x240]; ret; 
0x000000000a8c2d: adc byte ptr [rdx], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000015f4ed: adc byte ptr [rsi], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000100125: adc ch, [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000001235fa: adc ch, [rdi-0xf]; jmp qword ptr [rsi-0x70]; 
0x00000000187142: adc ch, bh; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ece5: adc ch, bh; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x000000000a19e5: adc cl, [rax+0x29]; ret; 
0x0000000007a8a6: adc cl, [rax+0x39]; ret far; 
0x0000000008df1d: adc cl, [rax-0x73]; adc eax, 0x11bc23; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b02f3: adc cl, [rax-0x73]; jg short 0x00000000000b030a; jne 0x00000000000b0980; ret; 
0x000000000b19e7: adc cl, [rax-0x73]; jg short 0x00000000000b19fe; jne 0x00000000000b21a0; ret; 
0x0000000014be4e: adc cl, [rax-0x75]; add eax, 0xa1072; call qword ptr [rax+0x360]; 
0x00000000084ee5: adc cl, [rax-0x75]; or [r8+0x39], r9b; shl byte ptr [rbx+0x21], 0x1; movzx eax, byte ptr [rax]; ret; 
0x0000000008785d: adc cl, [rax-0x77]; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000085e0d: adc cl, [rax-0x7d]; in al, dx; or [rcx+0x4c], dl; mov ecx, edx; call rax; 
0x00000000124583: adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d]; 
0x000000000ac56f: adc cl, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58f: adc cl, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5af: adc cl, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0ff: adc cl, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac3f5: adc cl, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000db733: adc cl, [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000007cf08: adc cl, ch; sar esi, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000016f619: adc dh, [rbx-0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000f5d20: adc dh, [rdi+0x10]; lea rcx, [rip+0xb6c56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000010af18: adc dh, [rdi+0xd]; movzx edi, di; lea rax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x00000000156f2a: adc dh, [rip+0x63490006]; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b4c3c: adc dh, bh; mov [rax], cx; ret; 
0x000000001779e8: adc dh, bh; mov [rax], cx; vzeroupper; ret; 
0x0000000018714a: adc dh, bh; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017eced: adc dh, bh; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x000000000cbb77: adc dh, dh; ret; 
0x0000000017ecf4: adc dil, r15b; rep ret; 
0x0000000017ed68: adc dil, r15b; vmovdqu64 [rax], xmm16; ret; 
0x0000000017ed59: adc dil, r15b; vmovdqu64 [rax], ymm16; ret; 
0x000000000c7cb7: adc dl, [rax+0x31]; ror byte ptr [rbp+rcx*4+0x44], 0x24; sbb al, ch; ret far; 
0x0000000009c14a: adc dl, [rbp-0x72b80000]; adc eax, 0xc03ab; cmovne rax, rdx; ret; 
0x0000000018fb4b: adc dword ptr [rax+0x41000002], 0xffffff83; ret far; 
0x000000000a1a8e: adc dword ptr [rax], 0x0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000edcc4: adc dword ptr [rax], 0xe683e800; jmp qword ptr [rsi+0xf]; 
0x000000001599f6: adc dword ptr [rbp+0x4c000000], 0xffffff8d; sbb eax, 0x60cfe; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000006c41f: adc dword ptr [rbx], 0x0; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000815c5: adc dword ptr [rsi], 0x3; add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x0000000013de5e: adc eax, 0x0; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000094827: adc eax, 0x100; add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x000000000947f7: adc eax, 0x100; add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x000000000a79bc: adc eax, 0x10259f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a575c: adc eax, 0x10477f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a319c: adc eax, 0x106cbf; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a8c: adc eax, 0x10834f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000c5a6a: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x000000000b506b: adc eax, 0x10fd0; cmovne rax, rdx; ret; 
0x00000000099bdd: adc eax, 0x11015e; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d8072: adc eax, 0x114d99; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d8002: adc eax, 0x114e09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7dc2: adc eax, 0x115049; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7d62: adc eax, 0x1150a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009afac: adc eax, 0x1162f; cmovne rax, rdx; ret; 
0x000000000d6a02: adc eax, 0x116409; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6902: adc eax, 0x116509; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d684a: adc eax, 0x1165c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d3dba: adc eax, 0x119051; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d2e62: adc eax, 0x119fa9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000d2252: adc eax, 0x11abb9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d21da: adc eax, 0x11ac31; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000008e2ba: adc eax, 0x11b959; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008de96: adc eax, 0x11bc15; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008df20: adc eax, 0x11bc23; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d8ea: adc eax, 0x11c0b1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d74a: adc eax, 0x11c1b9; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008ce90: adc eax, 0x11c8d3; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c80f: adc eax, 0x11cebc; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008bb17: adc eax, 0x11d9f4; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c9ba2: adc eax, 0x123269; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9b72: adc eax, 0x123299; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000085b36: adc eax, 0x1236c1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c754a: adc eax, 0x1258c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c73ca: adc eax, 0x125a41; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c72b2: adc eax, 0x125b59; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000075641: adc eax, 0x1330da; add rax, rdx; ret; 
0x00000000064cdf: adc eax, 0x143028; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d468: adc eax, 0x14a493; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000080722: adc eax, 0x14a8d48; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret; 
0x000000000b0354: adc eax, 0x157f8d48; jne 0x00000000000b0980; ret; 
0x000000000b1a78: adc eax, 0x157f8d48; jne 0x00000000000b21a0; ret; 
0x000000000945ca: adc eax, 0x158841; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009457a: adc eax, 0x158891; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009452a: adc eax, 0x1588e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094898: adc eax, 0x158af3; ret; 
0x000000000940d2: adc eax, 0x158d39; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009401a: adc eax, 0x158df1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000093f72: adc eax, 0x158e99; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093eea: adc eax, 0x158f21; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093ab2: adc eax, 0x159359; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000098566: adc eax, 0x15cc45; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x0000000003ebfa: adc eax, 0x1643a1; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x0000000002d780: adc eax, 0x16687b; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003afae: adc eax, 0x167fad; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b1aa2: adc eax, 0x16e88349; lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x0000000009c2d8: adc eax, 0x18163; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb8: adc eax, 0x18563; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc98: adc eax, 0x187a3; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd54: adc eax, 0x18df7; lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x0000000005c19a: adc eax, 0x190c71; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c162: adc eax, 0x190ca9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000044a92: adc eax, 0x1a8379; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000041e4d: adc eax, 0x1ab376; ret; 
0x00000000041722: adc eax, 0x1ab6e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000004169a: adc eax, 0x1ab771; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000413e2: adc eax, 0x1aba29; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003aa30: adc eax, 0x1b23b3; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x0000000002d145: adc eax, 0x1bfd3e; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x00000000094848: adc eax, 0x1f0fc300; add [rax], r8b; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x000000001929ab: adc eax, 0x20478b48; test rax, rax; je short 0x00000000001929bc; call rax; 
0x00000000173ba8: adc eax, 0x21913; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000173b83: adc eax, 0x21938; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721f8: adc eax, 0x232c3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721de: adc eax, 0x232dd; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f2a8: adc eax, 0x26213; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f283: adc eax, 0x26238; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2d8: adc eax, 0x281e3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2be: adc eax, 0x281fd; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000141e5a: adc eax, 0x2ab1; call qword ptr [rax]; 
0x0000000018fff2: adc eax, 0x2ad59; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000160b88: adc eax, 0x34933; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000160b63: adc eax, 0x34958; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000059d0c: adc eax, 0x358d4c00; call far fword ptr [rcx+0x15]; 
0x0000000015e628: adc eax, 0x36e93; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015e60e: adc eax, 0x36ead; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000951a3: adc eax, 0x39485a00; ret; 
0x000000000c579a: adc eax, 0x3b30478b; xor [rbp+0x3d], r14b; ret; 
0x00000000096ab4: adc eax, 0x3d8b4800; ret far; 
0x00000000115fb2: adc eax, 0x40f29; cmovne rax, rdx; ret; 
0x00000000115d72: adc eax, 0x41189; cmovne rax, rdx; ret; 
0x00000000115e92: adc eax, 0x43b39; cmovne rax, rdx; ret; 
0x000000001597e4: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000079f2a: adc eax, 0x4718d48; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000008de97: adc eax, 0x480011bc; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009b05d: adc eax, 0x4802e580; lea eax, [rip+0x8098]; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000009c143: adc eax, 0x4802e680; lea eax, [rip+0x9512]; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a3: adc eax, 0x4802e680; lea eax, [rip+0x95a2]; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb5e: adc eax, 0x4802e680; lea eax, [rip+0x96e7]; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009c193: adc eax, 0x4802e680; lea eax, [rip+0xb702]; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f3: adc eax, 0x4802e680; lea eax, [rip+0xb792]; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x000000000b550e: adc eax, 0x4802e680; lea eax, [rip+0xf1f7]; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x00000000117283: adc eax, 0x4808e680; lea eax, [rip-0x627fe]; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x000000000b55d3: adc eax, 0x4808e680; lea eax, [rip-0xb3e]; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x000000000d44c2: adc eax, 0x482b8964; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000095c0e: adc eax, 0x484e7500; add esp, 0x10; pop rbp; ret; 
0x00000000172318: adc eax, 0x48923; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000001701aa: adc eax, 0x48c7ff48; add eax, edi; vzeroupper; ret; 
0x000000000d335f: adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x000000000c7497: adc eax, 0x48ffffff; cmove eax, edx; add rsp, 0x58; ret; 
0x00000000170c88: adc eax, 0x49f73; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015e76c: adc eax, 0x4b82f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000013b005: adc eax, 0x4c000001; mov edi, esp; call qword ptr [rbx]; 
0x0000000016d418: adc eax, 0x4c7a3; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5fc: adc eax, 0x4d91f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016b848: adc eax, 0x4e333; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000016a808: adc eax, 0x4f333; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000169a38: adc eax, 0x500c3; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000001502ac: adc eax, 0x59bef; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f02c: adc eax, 0x5adef; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000117290: adc eax, 0x605ab; cmove rax, rdx; ret; 
0x00000000116038: adc eax, 0x610e3; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f18: adc eax, 0x61223; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df8: adc eax, 0x61343; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000116099: adc eax, 0x617d2; lea rax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x000000000b0358: adc eax, 0x621850f; add [rax], al; ret; 
0x000000000c568a: adc eax, 0x63b078b; jne 0x00000000000c57e0; ret; 
0x00000000093ab5: adc eax, 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009401d: adc eax, 0x64d8f700; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000094832: adc eax, 0x6666c300; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094802: adc eax, 0x6666c300; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x00000000115cd1: adc eax, 0x66fffffe; nop [rax+rax]; nop; ret; 
0x00000000115fd8: adc eax, 0x68373; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb8: adc eax, 0x684b3; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d98: adc eax, 0x685d3; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160f4: adc eax, 0x68ac7; cmove rax, rdx; ret; 
0x00000000115f74: adc eax, 0x69527; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e54: adc eax, 0x69667; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d34: adc eax, 0x69787; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116104: adc eax, 0x69e87; lea rax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000013ff49: adc eax, 0x6ebd2; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000001172ac: adc eax, 0x6fd4f; cmovne rax, rdx; ret; 
0x00000000116018: adc eax, 0x70423; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef8: adc eax, 0x70563; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd8: adc eax, 0x70683; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x00000000116130: adc eax, 0x70eeb; lea rax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x000000000b1a7c: adc eax, 0x71d850f; add [rax], al; ret; 
0x000000000983e4: adc eax, 0x7750000; ret; 
0x0000000008e4ff: adc eax, 0x7fc33900; cmp dh, bh; ret; 
0x0000000008e45f: adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x000000000531f2: adc eax, 0x80400000; jmp qword ptr [rbp+0xf]; 
0x00000000138996: adc eax, 0x8348001c; ret; 
0x000000000b4c23: adc eax, 0x8880272; ret; 
0x0000000003e153: adc eax, 0x894c0005; loopne 0x000000000003e1b7; pop r12; pop r13; ret; 
0x0000000017265f: adc eax, 0x894d0000; ret far; 
0x000000001503d8: adc eax, 0x894d0000; ret far; 
0x000000000d21b2: adc eax, 0x8ec8348; call rax; 
0x0000000009489b: adc eax, 0x9066c300; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x0000000004e802: adc eax, 0x948b4c00; and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000014eb32: adc eax, 0x9e2d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000014cf7e: adc eax, 0x9ff45; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000014b2b3: adc eax, 0xa1b58; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000014b26b: adc eax, 0xa1ba0; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x00000000139986: adc eax, 0xaf85; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013ab2a: adc eax, 0xb2071; jmp qword ptr [rdx+rax*8]; 
0x000000000b4f99: adc eax, 0xb4392; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009ab3c: adc eax, 0xb446f; cmovne rax, rdx; ret; 
0x0000000009b06a: adc eax, 0xb51a1; cmovne rax, rdx; ret; 
0x000000000f6661: adc eax, 0xb63da; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f60db: adc eax, 0xb68ec; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f598b: adc eax, 0xb6eb8; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000142653: adc eax, 0xba108; cmp rax, rdx; je short 0x0000000000142660; pop rbx; ret; 
0x00000000142539: adc eax, 0xba222; mov fs:[rax], rdx; ret; 
0x0000000009c292: adc eax, 0xbac79; cmovne rax, rdx; ret; 
0x0000000009be72: adc eax, 0xbb079; cmovne rax, rdx; ret; 
0x000000000eebb1: adc eax, 0xbd52a; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000eebeb: adc eax, 0xbd748; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x0000000009bc52: adc eax, 0xbdd89; cmovne rax, rdx; ret; 
0x0000000009c150: adc eax, 0xc03ab; cmovne rax, rdx; ret; 
0x0000000009c0b0: adc eax, 0xc043b; cmovne rax, rdx; ret; 
0x000000000b55e0: adc eax, 0xc226b; cmove rax, rdx; ret; 
0x0000000009c1a0: adc eax, 0xc24ab; cmovne rax, rdx; ret; 
0x0000000009c100: adc eax, 0xc253b; cmovne rax, rdx; ret; 
0x000000000b54af: adc eax, 0xc294c; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f68: adc eax, 0xc3163; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5158: adc eax, 0xc33b3; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5258: adc eax, 0xc3a63; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef8: adc eax, 0xc3b43; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x0000000009abdc: adc eax, 0xc5fbf; cmovne rax, rdx; ret; 
0x0000000009b0dc: adc eax, 0xc726f; cmovne rax, rdx; ret; 
0x00000000090abd: adc eax, 0xc76400; add [r8], al; add [rax-0x1], bh; ret; 
0x0000000009a2b5: adc eax, 0xc76400; or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000911ed: adc eax, 0xc76400; or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000b551b: adc eax, 0xc8800; cmovne rax, rdx; ret; 
0x0000000009bf8c: adc eax, 0xc8f3f; cmovne rax, rdx; ret; 
0x000000000e270b: adc eax, 0xc93b0; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000e285d: adc eax, 0xc93c2; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000009c01c: adc eax, 0xca6bf; cmovne rax, rdx; ret; 
0x000000000dd702: adc eax, 0xce23d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000a16e8: adc eax, 0xcece3; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x000000000dc02c: adc eax, 0xcf823; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dbb62: adc eax, 0xcfc6d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000a2e8a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000b55fc: adc eax, 0xd1a0f; cmovne rax, rdx; ret; 
0x000000000d8edb: adc eax, 0xd28a0; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x000000000d8aae: adc eax, 0xd28e1; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000d86e4: adc eax, 0xd2c57; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x0000000009d39f: adc eax, 0xd2ecc; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009b1a9: adc eax, 0xd4242; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009b2c9: adc eax, 0xd4252; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009baff: adc eax, 0xd44bc; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009ac39: adc eax, 0xd4682; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x00000000116caa: adc eax, 0xd6161; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000009d418: adc eax, 0xd6a23; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x000000000b54cc: adc eax, 0xd7bcf; lea rax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009b178: adc eax, 0xd8ed3; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed8: adc eax, 0xd9343; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af48: adc eax, 0xd9453; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x0000000009c318: adc eax, 0xdae33; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef8: adc eax, 0xdb233; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd8: adc eax, 0xdb473; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bd39: adc eax, 0xdbb42; lea rax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x000000000cb55e: adc eax, 0xdf2d9; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000ca79b: adc eax, 0xdff44; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c9fde: adc eax, 0xe06d1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009bb6b: adc eax, 0xe0a40; cmovne rax, rdx; ret; 
0x0000000009aaad: adc eax, 0xe17de; cmovne rax, rdx; ret; 
0x000000000c5f7a: adc eax, 0xe180d188; pcmpeqb mm3, [rsi]; ret; 
0x0000000010b3aa: adc eax, 0xe1a61; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b33a: adc eax, 0xe1ad1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b302: adc eax, 0xe1b09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b2d2: adc eax, 0xe1b39; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b2aa: adc eax, 0xe1b61; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b27a: adc eax, 0xe1b91; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1e2: adc eax, 0xe1c29; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1a2: adc eax, 0xe1c69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b142: adc eax, 0xe1cc9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b0fa: adc eax, 0xe1d11; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b03a: adc eax, 0xe1dd1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010aeda: adc eax, 0xe1f31; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ae32: adc eax, 0xe1fd9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ad7a: adc eax, 0xe2091; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009c2b8: adc eax, 0xe20c3; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000010aa3a: adc eax, 0xe23d1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a9f2: adc eax, 0xe2419; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000009be98: adc eax, 0xe24c3; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000010a932: adc eax, 0xe24d9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a88a: adc eax, 0xe2581; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a7d2: adc eax, 0xe2639; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a732: adc eax, 0xe26d9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000009bc78: adc eax, 0xe2703; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000010a66a: adc eax, 0xe27a1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a59a: adc eax, 0xe2871; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a4f2: adc eax, 0xe2919; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a422: adc eax, 0xe29e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009bd94: adc eax, 0xe2e37; cmove rax, rdx; ret; 
0x0000000009c254: adc eax, 0xe3277; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x000000001099ca: adc eax, 0xe3441; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109972: adc eax, 0xe3499; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109922: adc eax, 0xe34e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001098d2: adc eax, 0xe3539; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109892: adc eax, 0xe3579; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010986a: adc eax, 0xe35a1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010983a: adc eax, 0xe35d1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010980a: adc eax, 0xe3601; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001097aa: adc eax, 0xe3661; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009be34: adc eax, 0xe3677; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x00000000109772: adc eax, 0xe3699; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001096c2: adc eax, 0xe3749; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001095e2: adc eax, 0xe3829; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009bc14: adc eax, 0xe38b7; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x00000000109542: adc eax, 0xe38c9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010947a: adc eax, 0xe3991; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001093ca: adc eax, 0xe3a41; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010931a: adc eax, 0xe3af1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001091a2: adc eax, 0xe3c69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109152: adc eax, 0xe3cb9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109042: adc eax, 0xe3dc9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109012: adc eax, 0xe3df9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009bda4: adc eax, 0xe41f7; lea rax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x0000000010ee38: adc eax, 0xe773b; cmp edx, 0x1; jg short 0x000000000010ee60; add rsp, 0x18; ret; 
0x00000000104e42: adc eax, 0xe7fc9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000007ff4a: adc eax, 0xe8ef8948; std; ret; 
0x0000000003d54a: adc eax, 0xe9001720; ret; 
0x0000000009d3bc: adc eax, 0xe9e1f; lea rax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009c2f8: adc eax, 0xea173; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bb1c: adc eax, 0xea1bf; lea rax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x00000000102b62: adc eax, 0xea2a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010bd7c: adc eax, 0xea557; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000009bed8: adc eax, 0xea573; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb8: adc eax, 0xea7b3; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x0000000009bdd0: adc eax, 0xeb25b; lea rax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x000000000a9ec8: adc eax, 0xeb5f3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a9ea3: adc eax, 0xeb618; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001012f2: adc eax, 0xebb19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001012c2: adc eax, 0xebb49; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010069a: adc eax, 0xec771; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000100142: adc eax, 0xeccc9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001000c2: adc eax, 0xecd49; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100002: adc eax, 0xece09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff9aa: adc eax, 0xed461; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff91a: adc eax, 0xed4f1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff892: adc eax, 0xed579; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff822: adc eax, 0xed5e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff4c2: adc eax, 0xed949; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff412: adc eax, 0xed9f9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff362: adc eax, 0xedaa9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff2c2: adc eax, 0xedb49; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a7878: adc eax, 0xedc43; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a785e: adc eax, 0xedc5d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000ff062: adc eax, 0xedda9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed82: adc eax, 0xee089; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed52: adc eax, 0xee0b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed12: adc eax, 0xee0f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000feb8a: adc eax, 0xee281; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe9f2: adc eax, 0xee419; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe812: adc eax, 0xee5f9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7ea: adc eax, 0xee621; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7b2: adc eax, 0xee659; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe78a: adc eax, 0xee681; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe71a: adc eax, 0xee6f1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe682: adc eax, 0xee789; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe62a: adc eax, 0xee7e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe5b2: adc eax, 0xee859; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe56a: adc eax, 0xee8a1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe4ba: adc eax, 0xee951; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000091217: adc eax, 0xeea2e800; add eax, 0x70058900; rcl byte ptr [rip-0x3b7cb800], 0x8; ret; 
0x000000000fe0d2: adc eax, 0xeed39; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe09a: adc eax, 0xeed71; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe052: adc eax, 0xeedb9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fda62: adc eax, 0xef3a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa532: adc eax, 0xf28d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa3b2: adc eax, 0xf2a59; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9e12: adc eax, 0xf2ff9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9de2: adc eax, 0xf3029; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9da2: adc eax, 0xf3069; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9d02: adc eax, 0xf3109; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f96d2: adc eax, 0xf3739; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f96a2: adc eax, 0xf3769; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9662: adc eax, 0xf37a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d4eee: adc eax, 0xf3a3c90; test [rdi+0xf000000], bh; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000f931a: adc eax, 0xf3af1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f90fa: adc eax, 0xf3d11; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000004528d: adc eax, 0xf489066; mov esi, 0x83480153; ret; 
0x000000000f80aa: adc eax, 0xf4d61; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f7ffa: adc eax, 0xf4e11; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000b4da1: adc eax, 0xf579a; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b661b: adc eax, 0xfbf0; cmovne rax, rdx; ret; 
0x000000000f01a2: adc eax, 0xfcc69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f0102: adc eax, 0xfcd09; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009aa2c: adc eax, 0xff8f; cmovne rax, rdx; ret; 
0x00000000115ff8: adc eax, 0xfff9e413; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x00000000115ed8: adc eax, 0xfff9e553; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115db8: adc eax, 0xfff9e673; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x000000001160b4: adc eax, 0xfff9ea87; lea rax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x0000000006c298: adc eax, 0xfffffc20; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000009b9e9: adc eax, 0xfffffd52; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x00000000071330: adc eax, 0xfffffd61; add rax, rdx; jmp rax; 
0x000000000c7496: adc eax, 0xffffff15; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7376: adc eax, 0xffffff25; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000115df9: adc eax, [r14]; add [rax-0x73], cl; add eax, 0x6139c; cmove rax, rdx; ret; 
0x000000000b4c1e: adc eax, [rax+0x157701fa]; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x0000000005cbde: adc eax, [rax-0x78]; sub [rbx+0x5d], bl; pop r12; ret; 
0x000000000d9a88: adc eax, [rax]; add [rax-0x77], cl; ret far; 
0x0000000004b5e2: adc eax, [rax]; add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x000000000ff25d: adc eax, [rax]; add [rax], al; syscall; 
0x00000000139237: adc eax, [rax]; add [rbp+0x486274c0], al; mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000a35c8: adc eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000006c420: adc eax, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000d8427: adc eax, [rax]; add [rdx+0x7f], bh; cmovne rax, rdx; ret; 
0x00000000075644: adc eax, [rax]; add rax, rdx; ret; 
0x000000000b4dc5: adc eax, [rax]; mov rax, [rax+0x1f0]; ret; 
0x000000000b4dd5: adc eax, [rax]; mov rax, [rax+0x1f8]; ret; 
0x000000000b4de5: adc eax, [rax]; mov rax, [rax+0x200]; ret; 
0x000000000b4df5: adc eax, [rax]; mov rax, [rax+0x208]; ret; 
0x000000000b4e05: adc eax, [rax]; mov rax, [rax+0x210]; ret; 
0x000000000b4e15: adc eax, [rax]; mov rax, [rax+0x218]; ret; 
0x000000000b4e25: adc eax, [rax]; mov rax, [rax+0x220]; ret; 
0x000000000b4e35: adc eax, [rax]; mov rax, [rax+0x228]; ret; 
0x000000000b4e45: adc eax, [rax]; mov rax, [rax+0x230]; ret; 
0x000000000b4e55: adc eax, [rax]; mov rax, [rax+0x238]; ret; 
0x000000000b4e65: adc eax, [rax]; mov rax, [rax+0x240]; ret; 
0x000000000b4db5: adc eax, [rax]; mov rax, [rax+0x248]; ret; 
0x00000000073d79: adc eax, [rax]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x0000000006e6f2: adc eax, [rax]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x00000000073c33: adc eax, [rax]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cf6: adc eax, [rax]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000071328: adc eax, [rax]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x00000000075843: adc eax, [rax]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000006f68f: adc eax, [rax]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000074968: adc eax, [rax]; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x00000000075e2a: adc eax, [rax]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000075e84: adc eax, [rax]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000757e5: adc eax, [rax]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000010950e: adc eax, [rcx]; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001094c0: adc eax, [rcx]; add [rax], al; syscall; 
0x00000000101c15: adc eax, [rdi+rcx]; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000000ac4eb: adc eax, [rdx]; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000ac50b: adc eax, [rdx]; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000ac52b: adc eax, [rdx]; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000ac54b: adc eax, [rdx]; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000ac3a8: adc eax, [rdx]; mov rax, rdi; ret; 
0x000000000ac3fa: adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac56b: adc eax, [rdx]; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58b: adc eax, [rdx]; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5ab: adc eax, [rdx]; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0fb: adc eax, [rdx]; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af17c: adc eax, [rdx]; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x00000000115dfa: adc eax, [rsi]; add [rax-0x73], cl; add eax, 0x6139c; cmove rax, rdx; ret; 
0x00000000050649: adc eax, eax; ret; 
0x000000000fa16e: adc eax, ebp; fadd st, qword ptr [rax+rax]; add rsp, 0x68; ret; 
0x00000000050786: adc eax, edx; pop rbp; pop rbx; ret; 
0x0000000008001b: adc eax, esi; add r15b, dil; add bl, ch; ret far; 
0x000000000798a1: adc ebp, ebx; ret far; 
0x00000000084ab1: adc ebp, ebx; ret; 
0x000000000d319d: adc ebp, ecx; in eax, dx; jns short 0x00000000000d319e; jmp qword ptr [rsi+0x2e]; 
0x000000000d31bd: adc ebp, ecx; popfq; jp short 0x00000000000d31be; jmp qword ptr [rsi+0x2e]; 
0x0000000011568a: adc ebx, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x000000001232f2: adc ebx, eax; mov eax, 0xffffffff; ret; 
0x00000000164211: adc ebx, eax; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000010bcbc: adc ecx, [rax-0x39]; add eax, 0xe1758; add al, [rax]; add [rax], al; ret; 
0x000000000b0311: adc ecx, [rax-0x73]; jg short 0x00000000000b0329; jne 0x00000000000b0980; ret; 
0x000000000b1a15: adc ecx, [rax-0x73]; jg short 0x00000000000b1a2d; jne 0x00000000000b21a0; ret; 
0x0000000003963b: adc ecx, [rax-0x75]; cli; ret; 
0x00000000043d88: adc ecx, [rax-0x75]; jge short 0x0000000000043d95; call rax; 
0x0000000012f9f2: adc ecx, [rax-0x77]; or eax, 0xc789e; mov eax, r8d; ret; 
0x00000000031441: adc ecx, [rax-0x77]; ret far; 
0x000000000436d1: adc ecx, [rax-0x7d]; ret; 
0x000000000db629: adc ecx, [rbx-0x7cb7fbad]; ret; 
0x00000000064513: adc ecx, [rcx+0x415d5b28]; pop rsp; ret; 
0x0000000006bb26: adc ecx, [rcx+rax-0x1e]; call qword ptr [r10+rax*8]; 
0x000000000a1243: adc ecx, [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000008c02b: adc ecx, [rcx-0x3c3fcefa]; nop [rax]; mov eax, 0x16; ret; 
0x000000000ac574: adc ecx, [rdx+0x5]; mov rax, rdi; ret; 
0x000000000ac594: adc ecx, [rdx+0x6]; mov rax, rdi; ret; 
0x000000000ac5b4: adc ecx, [rdx+0x7]; mov rax, rdi; ret; 
0x000000000ac3fe: adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000af1e5: adc ecx, [rdx+0x8]; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x0000000012f639: adc ecx, ebp; out dx, eax; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000041c04: adc edi, [rax+0x1]; shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x000000000fe654: adc edi, [rax+0x48]; syscall; 
0x000000000789a1: adc edi, [rsi]; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000014938c: adc edi, ebp; call qword ptr [rax-0x1a76b7ab]; 
0x00000000050641: adc edx, ebx; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000108fc6: adc esi, [rcx+rax-0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x00000000099dae: adc esi, [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000014bed0: adc esi, ebp; jmp qword ptr [rsi+0x2e]; 
0x0000000012919f: adc esi, ecx; jmp qword ptr [rsi+0x2e]; 
0x000000000d6944: adc fs:[rax], eax; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6a04: adc fs:[rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d684c: adc gs:[rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000a1a8d: adc qword ptr [r8], 0x0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000005063f: adc r10, r11; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000080302: adc r11b, r13b; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000084b9f: adc r11b, r13b; ret; 
0x00000000177dee: adc r15b, dil; ret; 
0x00000000177af0: adc r15b, dil; vzeroupper; ret; 
0x000000001859d0: adc r15b, dil; xtest; je short 0x00000000001859dc; vzeroall; ret; 
0x00000000124582: adc r9b, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d]; 
0x0000000004e801: adc rax, 0xffffffff948b4c00; and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x00000000073c32: adc rax, [r8]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073d77: adc rax, [rax]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x00000000073cf4: adc rax, [rax]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000050785: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000b4c3b: adc sil, r15b; mov [rax], cx; ret; 
0x000000001779e7: adc sil, r15b; mov [rax], cx; vzeroupper; ret; 
0x00000000187149: adc sil, r15b; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ecec: adc sil, r15b; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x000000000b4c33: adc spl, r15b; mov [rax], ecx; ret; 
0x000000001779dc: adc spl, r15b; mov [rax], ecx; vzeroupper; ret; 
0x00000000187139: adc spl, r15b; vmovdqu64 [rax+rdx-0x60], ymm16; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ecdc: adc spl, r15b; vmovdqu64 [rax+rdx-0xc0], zmm16; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017b995: add [r10-0x2f], r12; jl short 0x000000000017b9e3; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x0000000008aff2: add [r11-0x70f0fe08], r8b; ret; 
0x000000000fe747: add [r13+rdx-0x48], sil; add [rcx], eax; add [rax], al; syscall; 
0x00000000100ad8: add [r13-0x2d], esi; mov rax, r8; ret; 
0x000000000f7da1: add [r8-0x77], ecx; ret; 
0x00000000113b96: add [r8-0x77], rcx; ret far; 
0x0000000003dc5c: add [r8-0x7d], ecx; ret; 
0x0000000005f91b: add [r8-0x7d], r9b; ret; 
0x000000000db423: add [r8-0x7d], r9d; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret; 
0x00000000113bb2: add [r8-0x7d], rcx; ret; 
0x0000000011031b: add [r8-0x9], r9d; rol esi, 0x1; jmp qword ptr [rax]; 
0x00000000090ac2: add [r8], al; add [rax-0x1], bh; ret; 
0x000000000f457d: add [r8], r8b; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000009d7f8: add [r8], r8b; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x0000000013e99e: add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000055630: add [r8], r8b; add rsp, 0x440; mov rax, rbp; pop rbp; ret; 
0x0000000008cc6d: add [r8], r8d; add [rbx+0x16061905], cl; add [rcx], bh; ret; 
0x0000000009abd7: add [r8], r8d; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000018a2f6: add [r8], r8d; ret; 
0x000000001754c6: add [r8], r8d; vzeroupper; ret; 
0x00000000044791: add [r8], rax; add [rax-0x75], cl; and al, 0x8; add rsp, 0x18; ret; 
0x0000000009ba6b: add [r9+rcx*4-0x20], r9b; pop rbp; pop r12; pop r13; ret; 
0x000000000df232: add [r9+rcx*4-0x38], rax; ret; 
0x000000000e8682: add [r9-0x76f7dbbc], r9d; ret; 
0x000000000448ac: add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000f998f: add [rax+0x102], bh; syscall; 
0x000000000fb39f: add [rax+0x107], bh; syscall; 
0x0000000005c2cf: add [rax+0x10], bh; ret; 
0x000000000fea2c: add [rax+0x10], bh; syscall; 
0x000000000fb2df: add [rax+0x10a], bh; syscall; 
0x000000000f98bf: add [rax+0x10c], bh; syscall; 
0x0000000010a16f: add [rax+0x110], bh; syscall; 
0x00000000089760: add [rax+0x111], bh; syscall; 
0x000000001090d4: add [rax+0x119], bh; syscall; 
0x0000000010a1cf: add [rax+0x11b], bh; syscall; 
0x0000000010975f: add [rax+0x11f], bh; syscall; 
0x0000000010975e: add [rax+0x11f], dil; syscall; 
0x000000001091bf: add [rax+0x122], bh; syscall; 
0x000000001091be: add [rax+0x122], dil; syscall; 
0x00000000109e6f: add [rax+0x123], bh; syscall; 
0x000000000fa43f: add [rax+0x124], bh; syscall; 
0x000000000fa49f: add [rax+0x125], bh; syscall; 
0x00000000109f8f: add [rax+0x126], bh; syscall; 
0x0000000010a1ff: add [rax+0x12c], bh; syscall; 
0x0000000010987f: add [rax+0x131], bh; syscall; 
0x0000000010987e: add [rax+0x131], dil; syscall; 
0x000000001000ef: add [rax+0x132], bh; syscall; 
0x000000001018fe: add [rax+0x13d8b48], dl; str [r8-0x7b]; push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x0000000010a28f: add [rax+0x13f], bh; syscall; 
0x000000000d73d9: add [rax+0x142], bh; syscall; 
0x000000000d7d26: add [rax+0x14740038], al; mov eax, 0x69; syscall; 
0x000000000d7d86: add [rax+0x14740038], al; mov eax, 0x6a; syscall; 
0x000000000ff7d6: add [rax+0x14740038], al; mov eax, 0x71; syscall; 
0x000000000ff846: add [rax+0x14740038], al; mov eax, 0x72; syscall; 
0x000000000d3d76: add [rax+0x14740038], al; mov eax, 0x74; syscall; 
0x000000000d7fb6: add [rax+0x14740038], al; mov eax, 0x75; syscall; 
0x000000000d8026: add [rax+0x14740038], al; mov eax, 0x77; syscall; 
0x0000000017c4de: add [rax+0x1478d48], dl; ret; 
0x0000000010b5d1: add [rax+0x14], bh; syscall; 
0x0000000010a2bf: add [rax+0x14a], bh; syscall; 
0x0000000010a2ef: add [rax+0x14b], bh; syscall; 
0x000000000983df: add [rax+0x15cdc13d], al; add [rax], al; jne short 0x00000000000983f0; ret; 
0x00000000087abb: add [rax+0x16], bh; cmove eax, edx; ret; 
0x00000000087b9f: add [rax+0x16], bh; cmp rdx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x00000000087bdf: add [rax+0x16], bh; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x000000000879df: add [rax+0x16], bh; ret; 
0x000000000fa46f: add [rax+0x16], bh; syscall; 
0x00000000087cb6: add [rax+0x16], dil; ret; 
0x000000000b1cae: add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x0000000009191f: add [rax+0x18], bh; syscall; 
0x000000000d20ad: add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000c57df: add [rax+0x1], bh; jg short 0x00000000000c57e9; neg eax; ret; 
0x0000000017e31f: add [rax+0x1], bh; jg short 0x000000000017e330; neg eax; ret; 
0x0000000005217c: add [rax+0x1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000001377e4: add [rax+0x1], bh; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x00000000076808: add [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000f8377: add [rax+0x1], bh; pop rbx; ret; 
0x0000000005208f: add [rax+0x1], bh; ret; 
0x000000000fe7ff: add [rax+0x1], bh; syscall; 
0x000000000d88af: add [rax+0x1], bh; test edi, edi; js short 0x00000000000d88c0; ret; 
0x000000000a49d4: add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000000731a3: add [rax+0x1], cl; clc; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000186e45: add [rax+0x1], cl; clc; ret; 
0x00000000170579: add [rax+0x1], cl; clc; vzeroupper; ret; 
0x00000000116941: add [rax+0x1], cl; ret far; 
0x0000000002fcdb: add [rax+0x1], cl; ret; 
0x00000000075645: add [rax+0x1], cl; rol bl, 0x1; nop [rax+rax]; xor eax, eax; ret; 
0x000000000f8376: add [rax+0x1], dil; pop rbx; ret; 
0x00000000131536: add [rax+0x1], dil; ret; 
0x000000000fe7fe: add [rax+0x1], dil; syscall; 
0x0000000014722b: add [rax+0x1], ecx; ret far; 
0x000000000df2ef: add [rax+0x1], edi; mov byte ptr [rdi], 0x5b; ret; 
0x000000000df2a8: add [rax+0x1], edi; ret; 
0x0000000013e95f: add [rax+0x1], edi; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000c5c6e: add [rax+0x1a948], dl; add [rax], al; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x0000000010a35f: add [rax+0x1b4], bh; syscall; 
0x000000000c570f: add [rax+0x1b740fe6], al; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000c57e0; ret; 
0x000000000c56af: add [rax+0x1b740fe6], al; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000c57e0; ret; 
0x0000000017e20f: add [rax+0x1b740fe6], al; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x000000000df31d: add [rax+0x1b807], ecx; add [rax], al; ret; 
0x00000000102bbf: add [rax+0x1b], bh; syscall; 
0x00000000102b8f: add [rax+0x1c], bh; syscall; 
0x00000000131ea0: add [rax+0x1d], bh; pop rbx; ret; 
0x0000000010b2bf: add [rax+0x1e], bh; syscall; 
0x0000000014c35f: add [rax+0x1f247c], al; je short 0x000000000014c34c; mov [rsp+0xc], eax; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000040861: add [rax+0x1fe8c17f], al; ret; 
0x000000000d84a7: add [rax+0x20], bh; cmove rax, rdx; ret; 
0x000000000fa3df: add [rax+0x20], bh; syscall; 
0x000000000fa40f: add [rax+0x21], bh; syscall; 
0x00000000131e81: add [rax+0x22], bh; pop rbx; ret; 
0x00000000040858: add [rax+0x2444237f], al; cld; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000d692f: add [rax+0x25], bh; syscall; 
0x0000000014aebe: add [rax+0x26623d8b], dl; or al, [rax]; test edi, edi; jns short 0x000000000014aed0; ret; 
0x000000000c9b8f: add [rax+0x26], bh; syscall; 
0x000000000c9b8e: add [rax+0x26], dil; syscall; 
0x000000000d7c8f: add [rax+0x27], bh; syscall; 
0x00000000166571: add [rax+0x28d4802], ecx; ret; 
0x000000000df281: add [rax+0x29755efa], al; mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x0000000010aa7f: add [rax+0x29], bh; syscall; 
0x00000000047ba0: add [rax+0x29], cl; ret far; 
0x0000000006d6e6: add [rax+0x29], cl; ret; 
0x0000000004224e: add [rax+0x2], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000005227b: add [rax+0x2], bh; ret; 
0x0000000010aa4f: add [rax+0x30], bh; syscall; 
0x00000000086f53: add [rax+0x31450016], ebx; sar byte ptr [rsi+0x81], cl; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000010a44f: add [rax+0x31], bh; syscall; 
0x000000000b960e: add [rax+0x31d18948], dl; shr cl, cl; cmpsb [rsi], [rdi]; loopne 0x00000000000b9618; jmp qword ptr [rsi+0xf]; 
0x0000000010a5af: add [rax+0x32], bh; syscall; 
0x0000000010a54f: add [rax+0x33], bh; syscall; 
0x0000000010a51f: add [rax+0x34], bh; syscall; 
0x000000000d6ecb: add [rax+0x38], bh; syscall; 
0x000000001177f3: add [rax+0x39], cl; enter 0x577, 0xe9; loop 0x00000000001177df; stc; call qword ptr [rax-0x18]; 
0x000000000c9dd7: add [rax+0x39], cl; ret far; 
0x00000000031928: add [rax+0x39], cl; ret; 
0x00000000060c43: add [rax+0x39], cl; ror dword ptr [rdi], cl; test [rbx], bl; ret; 
0x00000000133b01: add [rax+0x39], cl; shl byte ptr [rbp-0x17], 0x1; mov rax, r8; add rsp, 0x8; ret; 
0x00000000142657: add [rax+0x39], cl; shl byte ptr [rbx+rax+0x5b], 0x1; ret; 
0x00000000142737: add [rax+0x39], cl; shl byte ptr [rbx+rcx+0x48], 0x1; add eax, 0xa0; pop rbx; ret; 
0x000000001427a7: add [rax+0x39], cl; shl byte ptr [rbx+rcx+0x48], 0x1; add eax, 0xa8; pop rbx; ret; 
0x000000001426c7: add [rax+0x39], cl; shl byte ptr [rbx+rcx+0x48], 0x1; sub eax, 0xffffff80; pop rbx; ret; 
0x000000000a0f36: add [rax+0x39], ecx; ret far; 
0x0000000004f7db: add [rax+0x39], ecx; ret; 
0x000000000da7b3: add [rax+0x39], ecx; shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf]; 
0x0000000008807f: add [rax+0x3], bh; ret; 
0x000000000fe59f: add [rax+0x3], bh; syscall; 
0x000000000e9943: add [rax+0x3], ecx; test [rax+rax*4], ah; add al, [rax]; add [rax-0x73], cl; ret; 
0x000000000d736f: add [rax+0x3b], bh; syscall; 
0x0000000017e1fe: add [rax+0x3bf4478b], dl; hlt; jne 0x000000000017e320; ret; 
0x0000000004164f: add [rax+0x3e], bh; syscall; 
0x0000000010b1cf: add [rax+0x40], bh; syscall; 
0x00000000145a4e: add [rax+0x4284783], dl; mov eax, 0x1; ret; 
0x000000000940ff: add [rax+0x43752f3f], al; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x000000000c1b6f: add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret; 
0x0000000011e63c: add [rax+0x478b4803], cl; or [rax-0x7d], cl; ret; 
0x0000000009cdc3: add [rax+0x482aff70], eax; cmp eax, esi; jne short 0x000000000009cdc0; mov rax, r8; ret; 
0x000000000861ce: add [rax+0x48478b48], dl; mov fs:[0x300], rax; ret; 
0x000000000fe619: add [rax+0x48], bh; syscall; 
0x0000000014c6cd: add [rax+0x48], dl; mov eax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x00000000040590: add [rax+0x48c22148], al; mov [rdi], edx; ret; 
0x000000000fa20f: add [rax+0x49], bh; syscall; 
0x000000001012af: add [rax+0x4c], bh; syscall; 
0x000000001012ae: add [rax+0x4c], dil; syscall; 
0x000000001012df: add [rax+0x4d], bh; syscall; 
0x000000001012de: add [rax+0x4d], dil; syscall; 
0x000000000fa55f: add [rax+0x50], bh; syscall; 
0x000000000fa58f: add [rax+0x51], bh; syscall; 
0x0000000005c14f: add [rax+0x52], bh; syscall; 
0x000000000f995f: add [rax+0x53], bh; syscall; 
0x000000000fb3cf: add [rax+0x54], bh; syscall; 
0x000000000fb24f: add [rax+0x56], bh; syscall; 
0x000000000fb30f: add [rax+0x59], bh; syscall; 
0x0000000003aa34: add [rax+0x5], cl; add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret; 
0x000000000f977f: add [rax+0x5a], bh; syscall; 
0x000000000f97af: add [rax+0x5b], bh; syscall; 
0x000000000fad9f: add [rax+0x5c], bh; syscall; 
0x000000000fadcf: add [rax+0x5d], bh; syscall; 
0x000000000fadff: add [rax+0x5e], bh; syscall; 
0x000000000fed6f: add [rax+0x62], bh; syscall; 
0x000000000fed6e: add [rax+0x62], dil; syscall; 
0x0000000007a89f: add [rax+0x63], cl; adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x00000000075e85: add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x0000000005c6c0: add [rax+0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000003afb2: add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000ea52f: add [rax+0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x0000000006503b: add [rax+0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000006f690: add [rax+0x63], cl; add al, 0x87; add rax, rsi; jmp rax; 
0x00000000074969: add [rax+0x63], cl; add al, 0x87; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x00000000073d7a: add [rax+0x63], cl; add al, 0x88; add rax, rdi; jmp rax; 
0x0000000006e6f3: add [rax+0x63], cl; add al, 0x88; add rax, rsi; jmp rax; 
0x00000000073c34: add [rax+0x63], cl; add al, 0x88; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cf7: add [rax+0x63], cl; add al, 0x88; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000071329: add [rax+0x63], cl; add al, 0x90; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x000000000d8ab2: add [rax+0x63], cl; add al, 0xaa; add rax, rdx; jmp rax; 
0x000000000b4da5: add [rax+0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x0000000004420b: add [rax+0x63], cl; and al, 0xc; add rsp, 0x18; ret; 
0x0000000003a316: add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000011136c: add [rax+0x63], cl; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000006bb8e: add [rax+0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x00000000064946: add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x00000000038246: add [rax+0x63], cl; ret; 
0x0000000016f507: add [rax+0x63], cl; ror dword ptr [rax+0x1], 0xf8; ret; 
0x0000000013ab14: add [rax+0x63], cl; sbb [r11+0xa7603f8], r8b; mov eax, 0x2; ret; 
0x0000000018f5d2: add [rax+0x63], cl; sbb al, 0x99; add rcx, rbx; jmp rcx; 
0x000000000bf80c: add [rax+0x63], ecx; cmp cl, [rbp-0x77]; ret; 
0x000000000e036b: add [rax+0x63], ecx; ret; 
0x00000000099fb4: add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx; 
0x0000000008f6a1: add [rax+0x642a7401], ch; mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000d673f: add [rax+0x64], bh; syscall; 
0x00000000187f7e: add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x0000000016420e: add [rax+0x6666c311], cl; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x000000000b084e: add [rax+0x6666c317], cl; nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000d7caf: add [rax+0x66], bh; syscall; 
0x00000000040560: add [rax+0x66c22148], al; movq mm0, rdx; ret; 
0x0000000018b37c: add [rax+0x66c3404f], ecx; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x00000000145a7e: add [rax+0x66c3c031], dl; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000b3a5e: add [rax+0x66f0ff3], dl; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x00000000109fef: add [rax+0x67], bh; syscall; 
0x0000000013be1e: add [rax+0x689c80f], al; mov eax, 0x1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000d7ccf: add [rax+0x68], bh; syscall; 
0x000000000d7cbf: add [rax+0x6b], bh; syscall; 
0x000000000d7cdf: add [rax+0x6c], bh; syscall; 
0x000000000d7e8f: add [rax+0x6d], bh; syscall; 
0x000000000d7c9f: add [rax+0x6e], bh; syscall; 
0x000000000d7ebf: add [rax+0x6f], bh; syscall; 
0x000000000d7f1f: add [rax+0x70], bh; syscall; 
0x00000000040521: add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000408bd: add [rax+0x7110ff3], al; movd xmm0, esi; ret; 
0x000000000d7cef: add [rax+0x73], bh; syscall; 
0x000000000b50bb: add [rax+0x74], al; ret far; 
0x000000000e6943: add [rax+0x75040878], eax; mov dh, 0x8b; pop rax; or bh, dh; ret; 
0x000000000d7f4f: add [rax+0x76], bh; syscall; 
0x00000000116d3e: add [rax+0x77ca3948], dl; add eax, 0xfe45c6e9; call qword ptr [rax-0x18]; 
0x0000000017614e: add [rax+0x77f8c517], cl; ret; 
0x000000000d7f7f: add [rax+0x78], bh; syscall; 
0x000000000b0e7f: add [rax+0x78d4837], cl; ret; 
0x000000000b176f: add [rax+0x78d4837], cl; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x0000000010908f: add [rax+0x7b], bh; syscall; 
0x000000000d7eef: add [rax+0x7c], bh; syscall; 
0x00000000109daf: add [rax+0x7e], bh; syscall; 
0x000000000d83d6: add [rax+0x7f], bh; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x00000000041684: add [rax+0x7f], bh; syscall; 
0x000000001236b7: add [rax+0x7fffffff], bh; ret; 
0x00000000041e8c: add [rax+0x80], bh; syscall; 
0x000000000416c0: add [rax+0x82], bh; syscall; 
0x0000000010a19f: add [rax+0x86], bh; syscall; 
0x000000000f968f: add [rax+0x89], bh; syscall; 
0x000000000f968e: add [rax+0x89], dil; syscall; 
0x000000000f9dcf: add [rax+0x8], bh; syscall; 
0x000000000f96bf: add [rax+0x8a], bh; syscall; 
0x000000000f96be: add [rax+0x8a], dil; syscall; 
0x000000000ff07f: add [rax+0x8d], bh; syscall; 
0x000000000ff07e: add [rax+0x8d], dil; syscall; 
0x000000000eff9f: add [rax+0x8e], bh; syscall; 
0x000000000effcf: add [rax+0x8f], bh; syscall; 
0x0000000008962b: add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x000000000effff: add [rax+0x90], bh; syscall; 
0x000000000f002f: add [rax+0x91], bh; syscall; 
0x000000000f008f: add [rax+0x92], bh; syscall; 
0x000000000f00bf: add [rax+0x93], bh; syscall; 
0x000000000f00ef: add [rax+0x94], bh; syscall; 
0x0000000010963f: add [rax+0x95], bh; syscall; 
0x00000000102c4f: add [rax+0x96], bh; syscall; 
0x00000000102c7f: add [rax+0x97], bh; syscall; 
0x00000000102caf: add [rax+0x98], bh; syscall; 
0x00000000109d0f: add [rax+0x9a], bh; syscall; 
0x0000000010a0af: add [rax+0x9b], bh; syscall; 
0x00000000109cdf: add [rax+0x9e], bh; syscall; 
0x00000000109cde: add [rax+0x9e], dil; syscall; 
0x000000000fff6f: add [rax+0xa1], bh; syscall; 
0x0000000010002f: add [rax+0xa2], bh; syscall; 
0x000000000fff3f: add [rax+0xa3], bh; syscall; 
0x00000000108fff: add [rax+0xa6], bh; syscall; 
0x000000000fe1b0: add [rax+0xa740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000010040f: add [rax+0xa7], bh; syscall; 
0x0000000010043f: add [rax+0xa8], bh; syscall; 
0x00000000102abf: add [rax+0xa], bh; syscall; 
0x000000000ffb3f: add [rax+0xaa], bh; syscall; 
0x00000000108f4f: add [rax+0xac], bh; syscall; 
0x00000000108f1f: add [rax+0xad], bh; syscall; 
0x00000000109ddf: add [rax+0xae], bh; syscall; 
0x00000000109e0f: add [rax+0xb0], bh; syscall; 
0x000000000c576f: add [rax+0xb740fe6], al; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000c57e0; ret; 
0x000000000c57bf: add [rax+0xb740fe6], al; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000c57e0; ret; 
0x0000000008f66f: add [rax+0xb], bh; ret; 
0x0000000008b40f: add [rax+0xba], bh; syscall; 
0x0000000010902f: add [rax+0xbb], bh; syscall; 
0x0000000010902e: add [rax+0xbb], dil; syscall; 
0x000000001054af: add [rax+0xc6], bh; syscall; 
0x0000000010538f: add [rax+0xc7], bh; syscall; 
0x000000000ff11f: add [rax+0xc], bh; syscall; 
0x0000000008dfe8: add [rax+0xca], bh; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000867ee: add [rax+0xca], bh; syscall; 
0x0000000008684f: add [rax+0xca], bh; xor sil, 0x80; syscall; 
0x00000000088b6f: add [rax+0xca], bh; xor sil, 0x81; syscall; 
0x0000000008fcc5: add [rax+0xcb], bh; syscall; 
0x0000000008a9f8: add [rax+0xcc], bh; cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x0000000008aa4d: add [rax+0xcc], bh; syscall; 
0x00000000109e3f: add [rax+0xd5], bh; syscall; 
0x00000000128ead: add [rax+0xd75003f], eax; xor eax, eax; add rsp, 0x100; pop rbx; ret; 
0x00000000041523: add [rax+0xd], bh; syscall; 
0x000000000d21c7: add [rax+0xe4], bh; syscall; 
0x000000000d21c6: add [rax+0xe4], dil; syscall; 
0x000000000946b1: add [rax+0xe], bh; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000089786: add [rax+0xe], bh; mov qword ptr [rsp+0x58], 0x0; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000050029: add [rax+0xe], bh; syscall; 
0x0000000010a32f: add [rax+0xea], bh; syscall; 
0x00000000093ead: add [rax+0xf0], edi; syscall; 
0x00000000094108: add [rax+0xf1], edi; syscall; 
0x00000000093f5f: add [rax+0xf5], bh; syscall; 
0x00000000084373: add [rax+0xf740a38], eax; cmp rax, rsi; ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x000000000e277a: add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e270f: add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x00000000085e9c: add [rax+0xf], cl; and al, 0x10; add rsp, 0x28; ret; 
0x0000000014c49c: add [rax+0xf], cl; and al, 0x18; add rsp, 0x28; ret; 
0x00000000085d91: add [rax+0xf], cl; and al, 0x18; add rsp, 0x38; ret; 
0x000000000fe234: add [rax+0xf], cl; mov [0x90c481481d72d1], eax; add [rax], al; pop rbx; ret; 
0x000000000aa365: add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000d4e4f: add [rax+0xf], cl; mov esi, 0x83480153; ret; 
0x0000000004415a: add [rax+0xf], cl; ret; 
0x00000000086106: add [rax+0xf], cl; shl byte ptr [rcx], 0x1; ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x000000000d8457: add [rax+0xfc17], bh; ret; 
0x000000000d8456: add [rax+0xfc17], dil; ret; 
0x00000000109f5f: add [rax+0xfd], bh; syscall; 
0x000000000d8587: add [rax+0xff], bh; ret; 
0x00000000109fbf: add [rax+0xff], bh; syscall; 
0x000000000d8586: add [rax+0xff], dil; ret; 
0x0000000013df78: add [rax+rax*8+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000128d47: add [rax+rax*8-0x177ceb8c], eax; and [rbx*2-0x3fce128a], edi; ret; 
0x000000000db428: add [rax+rax*8-0x3fce338b], eax; ret; 
0x00000000090648: add [rax+rax*8-0x3fcef48c], al; add rsp, 0x8; ret; 
0x000000000a13cc: add [rax+rax*8-0xfc6f08c], eax; jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x000000000fc38e: add [rax+rax], ah; add [rax], al; mov eax, 0x1; pop rbx; ret; 
0x000000000f59d1: add [rax+rax], ah; add al, ch; jge short 0x00000000000f5a42; dec dword ptr [rcx-0x77]; ret; 
0x0000000005b7df: add [rax+rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000008b354: add [rax+rax], al; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x0000000009a397: add [rax+rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000011f944: add [rax+rax], al; add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x0000000011c704: add [rax+rax], al; add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000df0c5: add [rax+rax], al; add al, ch; xchg edx, eax; ret; 
0x00000000179b93: add [rax+rax], al; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000ff149: add [rax+rax], cl; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000099228: add [rax+rax], cl; add [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000009a2b9: add [rax+rax], cl; add [rax], al; xor eax, eax; ret; 
0x00000000045cfb: add [rax+rax], cl; add [rbp+0x1e], dh; xor eax, eax; add rsp, 0x8; ret; 
0x00000000179a61: add [rax+rax], eax; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000fea29: add [rax+rax], edx; mov eax, 0x10; syscall; 
0x000000000c5d25: add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret; 
0x000000000e08ec: add [rax+rbp*4-0x7d], esi; jrcxz 0x00000000000e08fa; je short 0x00000000000e0877; pop rbx; ret; 
0x0000000002d676: add [rax+rcx*2+0x3], ah; add al, 0x25; add [rax], al; add [rax], al; ret; 
0x0000000019291f: add [rax+rcx*2-0x75], ah; add [r8-0x7d], r9b; ret; 
0x0000000008fcaf: add [rax+rcx*2-0x75], ah; add al, 0x25; adc [rax], al; add [rax], al; ret; 
0x00000000128c7c: add [rax+rcx*2-0x75], ah; cmp ecx, [rbx-0x3f7aefb9]; jne short 0x0000000000128c90; pop rbx; ret; 
0x00000000043d84: add [rax+rcx*2-0x77], ah; adc ecx, [rax-0x75]; jge short 0x0000000000043d95; call rax; 
0x00000000086262: add [rax+rcx*2-0x77], ah; cmp al, 0x25; add [rbx], al; add [rax], al; ret; 
0x000000000a147e: add [rax+rcx*4+0x17], al; add rax, rdi; ret; 
0x00000000086182: add [rax+rdx+0x64], esi; mov rax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x000000000564db: add [rax-0x13343], al; jmp qword ptr [rsi+0xf]; 
0x00000000091529: add [rax-0x15], al; ret; 
0x000000000b00bf: add [rax-0x177cb6c9], cl; add [rax-0x73], ecx; jg short 0x00000000000b00cb; jne 0x00000000000b0980; ret; 
0x000000001290e6: add [rax-0x1], bh; add rsp, 0x18; ret; 
0x0000000010058f: add [rax-0x1], bh; add rsp, 0x48; ret; 
0x0000000005bc2e: add [rax-0x1], bh; add rsp, 0x98; ret; 
0x000000000d75e3: add [rax-0x1], bh; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000004335d: add [rax-0x1], bh; pop rbp; pop r12; pop r13; ret; 
0x0000000003f8bd: add [rax-0x1], bh; pop rbp; ret; 
0x00000000076833: add [rax-0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000001230bf: add [rax-0x1], bh; pop rbx; ret; 
0x0000000002d8ed: add [rax-0x1], bh; ret; 
0x0000000007de16: add [rax-0x1], dil; ret; 
0x0000000009ab5a: add [rax-0x1a8af71b], al; lea rax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009aa4a: add [rax-0x1a8af71b], al; lea rax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afca: add [rax-0x1a8af71b], al; lea rax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfaa: add [rax-0x1a8af71b], al; lea rax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c03a: add [rax-0x1a8af71b], al; lea rax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b0fa: add [rax-0x1a8af71b], al; lea rax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009abfa: add [rax-0x1a8af71b], al; lea rax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000014bc6e: add [rax-0x1ab417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc5e: add [rax-0x1b0417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc4e: add [rax-0x1b4417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc7e: add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc2e: add [rax-0x1c6417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc3e: add [rax-0x1cc417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000009aacf: add [rax-0x1e8af71a], al; lea rax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x000000000b6640: add [rax-0x218af71b], al; and esi, 0x800; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b5090: add [rax-0x218af71b], al; and esi, 0x800; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x000000000b5545: add [rax-0x268af71b], al; and esi, 0x800; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x0000000009bb95: add [rax-0x268af71b], al; and esi, 0x800; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x000000000889ab: add [rax-0x29767e0e], al; mov edx, 0x7fffffff; syscall; 
0x000000000a18fe: add [rax-0x2c30417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014cff2: add [rax-0x2d], cl; loop 0x000000000014d03f; or [rdi+rax*8], edx; xor eax, eax; ret; 
0x00000000041c09: add [rax-0x2d], cl; loopne 0x0000000000041c56; or [rdi], eax; xor eax, eax; ret; 
0x00000000040914: add [rax-0x3991f09a], al; ret; 
0x0000000007b241: add [rax-0x39], cl; add [rax], al; add [rax], al; pop rbx; ret; 
0x0000000014ef9f: add [rax-0x39], cl; add [rax], eax; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000084eaa: add [rax-0x39], cl; add eax, 0x16b862; add [rax], al; add [rax], al; ret; 
0x0000000010bd16: add [rax-0x39], cl; add eax, 0xe16fe; add [rax], al; add [rax], al; ret; 
0x0000000010bced: add [rax-0x39], cl; add eax, 0xe1727; add [rax], al; add [rax], al; ret; 
0x0000000010bc96: add [rax-0x39], cl; add eax, 0xe177e; add [rax], al; add [rax], al; ret; 
0x00000000108eb1: add [rax-0x39], cl; add eax, 0xed2cb; add [rax], al; add [rax], al; ret; 
0x00000000145be8: add [rax-0x39], cl; and al, 0x20; add [rax], al; add [rax], al; call r8; 
0x00000000141909: add [rax-0x39], cl; and al, 0x28; add [rax], al; add [rax], al; call qword ptr [rax+0x28]; 
0x00000000123932: add [rax-0x39], cl; and al, 0x8; add [rax], al; add [rax], al; call rax; 
0x00000000046103: add [rax-0x39], cl; ret; 
0x000000000c5fef: add [rax-0x39], cl; rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x000000000c602f: add [rax-0x39], cl; rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000000c5fdf: add [rax-0x39], cl; rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x000000000c601f: add [rax-0x39], cl; rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x0000000004146e: add [rax-0x39], cl; ror byte ptr [rdi], 0x0; add [rax], al; syscall; 
0x0000000005e841: add [rax-0x39], cl; test [rax+0xfffffb], edi; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000b086e: add [rax-0x3c00a877], dl; nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x00000000117dca: add [rax-0x3c38baf1], al; mov eax, edi; shr eax, 0x18; ret; 
0x00000000117d49: add [rax-0x3c38baf1], al; nop; mov eax, edi; and eax, 0xffffff; ret; 
0x0000000017c4ce: add [rax-0x3cf872b8], dl; nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x0000000009d67f: add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret; 
0x00000000040195: add [rax-0x3f000001], al; shr eax, 0x1f; ret; 
0x00000000040a8e: add [rax-0x3f28f09a], dl; and eax, 0x8; ret; 
0x000000001702ce: add [rax-0x3f43f00d], dl; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000123865: add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x00000000129176: add [rax-0x3f], cl; out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x0000000002d126: add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x1c35b6], eax; ret; 
0x00000000108cb0: add [rax-0x3f], cl; ret; 
0x000000000d0996: add [rax-0x3f], cl; stc; add ch, [rcx]; ret far; 
0x000000000fe8dc: add [rax-0x3fcef877], al; ret; 
0x00000000052157: add [rax-0x3ffe], bh; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000cbdb5: add [rax-0x41], cl; ret; 
0x0000000010ba9f: add [rax-0x42], cl; ret; 
0x0000000005befb: add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x00000000052178: add [rax-0x47ff76b7], al; add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000019255f: add [rax-0x48], cl; add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret; 
0x00000000038647: add [rax-0x49f000b9], ecx; push rbx; add [rax-0x7d], ecx; ret; 
0x000000000878ef: add [rax-0x68], cl; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000006df57: add [rax-0x68], cl; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x00000000091e6e: add [rax-0x6d9417], dl; jmp qword ptr [rsi+0x2e]; 
0x00000000187f4c: add [rax-0x72b7bfb1], ecx; ret; 
0x0000000011729f: add [rax-0x72b7df1a], al; add eax, 0x678f6; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x000000000b55ef: add [rax-0x72b7df1a], al; add eax, 0xc95b6; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000b5068: add [rax-0x73], cl; adc eax, 0x10fd0; cmovne rax, rdx; ret; 
0x0000000009afa9: add [rax-0x73], cl; adc eax, 0x1162f; cmovne rax, rdx; ret; 
0x0000000009c2d5: add [rax-0x73], cl; adc eax, 0x18163; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb5: add [rax-0x73], cl; adc eax, 0x18563; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc95: add [rax-0x73], cl; adc eax, 0x187a3; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000018ffef: add [rax-0x73], cl; adc eax, 0x2ad59; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000115faf: add [rax-0x73], cl; adc eax, 0x40f29; cmovne rax, rdx; ret; 
0x00000000115d6f: add [rax-0x73], cl; adc eax, 0x41189; cmovne rax, rdx; ret; 
0x00000000115e8f: add [rax-0x73], cl; adc eax, 0x43b39; cmovne rax, rdx; ret; 
0x00000000116035: add [rax-0x73], cl; adc eax, 0x610e3; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f15: add [rax-0x73], cl; adc eax, 0x61223; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df5: add [rax-0x73], cl; adc eax, 0x61343; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000115fd5: add [rax-0x73], cl; adc eax, 0x68373; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb5: add [rax-0x73], cl; adc eax, 0x684b3; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d95: add [rax-0x73], cl; adc eax, 0x685d3; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160f1: add [rax-0x73], cl; adc eax, 0x68ac7; cmove rax, rdx; ret; 
0x00000000115f71: add [rax-0x73], cl; adc eax, 0x69527; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e51: add [rax-0x73], cl; adc eax, 0x69667; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d31: add [rax-0x73], cl; adc eax, 0x69787; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x000000001172a9: add [rax-0x73], cl; adc eax, 0x6fd4f; cmovne rax, rdx; ret; 
0x00000000116015: add [rax-0x73], cl; adc eax, 0x70423; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef5: add [rax-0x73], cl; adc eax, 0x70563; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd5: add [rax-0x73], cl; adc eax, 0x70683; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x0000000013ab26: add [rax-0x73], cl; adc eax, 0xb2071; jmp qword ptr [rdx+rax*8]; 
0x0000000009ab39: add [rax-0x73], cl; adc eax, 0xb446f; cmovne rax, rdx; ret; 
0x0000000009b067: add [rax-0x73], cl; adc eax, 0xb51a1; cmovne rax, rdx; ret; 
0x000000000f5988: add [rax-0x73], cl; adc eax, 0xb6eb8; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000142536: add [rax-0x73], cl; adc eax, 0xba222; mov fs:[rax], rdx; ret; 
0x0000000009c28f: add [rax-0x73], cl; adc eax, 0xbac79; cmovne rax, rdx; ret; 
0x0000000009be6f: add [rax-0x73], cl; adc eax, 0xbb079; cmovne rax, rdx; ret; 
0x0000000009bc4f: add [rax-0x73], cl; adc eax, 0xbdd89; cmovne rax, rdx; ret; 
0x0000000009c14d: add [rax-0x73], cl; adc eax, 0xc03ab; cmovne rax, rdx; ret; 
0x0000000009c0ad: add [rax-0x73], cl; adc eax, 0xc043b; cmovne rax, rdx; ret; 
0x0000000009c19d: add [rax-0x73], cl; adc eax, 0xc24ab; cmovne rax, rdx; ret; 
0x0000000009c0fd: add [rax-0x73], cl; adc eax, 0xc253b; cmovne rax, rdx; ret; 
0x0000000009abd9: add [rax-0x73], cl; adc eax, 0xc5fbf; cmovne rax, rdx; ret; 
0x0000000009b0d9: add [rax-0x73], cl; adc eax, 0xc726f; cmovne rax, rdx; ret; 
0x000000000b5518: add [rax-0x73], cl; adc eax, 0xc8800; cmovne rax, rdx; ret; 
0x0000000009bf89: add [rax-0x73], cl; adc eax, 0xc8f3f; cmovne rax, rdx; ret; 
0x0000000009c019: add [rax-0x73], cl; adc eax, 0xca6bf; cmovne rax, rdx; ret; 
0x000000000dd6ff: add [rax-0x73], cl; adc eax, 0xce23d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dbb5f: add [rax-0x73], cl; adc eax, 0xcfc6d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b55f9: add [rax-0x73], cl; adc eax, 0xd1a0f; cmovne rax, rdx; ret; 
0x000000000d8aab: add [rax-0x73], cl; adc eax, 0xd28e1; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x0000000009c315: add [rax-0x73], cl; adc eax, 0xdae33; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef5: add [rax-0x73], cl; adc eax, 0xdb233; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd5: add [rax-0x73], cl; adc eax, 0xdb473; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bb68: add [rax-0x73], cl; adc eax, 0xe0a40; cmovne rax, rdx; ret; 
0x0000000009aaaa: add [rax-0x73], cl; adc eax, 0xe17de; cmovne rax, rdx; ret; 
0x0000000009c2b5: add [rax-0x73], cl; adc eax, 0xe20c3; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be95: add [rax-0x73], cl; adc eax, 0xe24c3; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc75: add [rax-0x73], cl; adc eax, 0xe2703; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009bd91: add [rax-0x73], cl; adc eax, 0xe2e37; cmove rax, rdx; ret; 
0x0000000009c251: add [rax-0x73], cl; adc eax, 0xe3277; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be31: add [rax-0x73], cl; adc eax, 0xe3677; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc11: add [rax-0x73], cl; adc eax, 0xe38b7; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009c2f5: add [rax-0x73], cl; adc eax, 0xea173; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bed5: add [rax-0x73], cl; adc eax, 0xea573; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb5: add [rax-0x73], cl; adc eax, 0xea7b3; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x000000000b4d9e: add [rax-0x73], cl; adc eax, 0xf579a; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b6618: add [rax-0x73], cl; adc eax, 0xfbf0; cmovne rax, rdx; ret; 
0x0000000009aa29: add [rax-0x73], cl; adc eax, 0xff8f; cmovne rax, rdx; ret; 
0x00000000115ff5: add [rax-0x73], cl; adc eax, 0xfff9e413; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x00000000115ed5: add [rax-0x73], cl; adc eax, 0xfff9e553; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115db5: add [rax-0x73], cl; adc eax, 0xfff9e673; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000100ad5: add [rax-0x73], cl; add [r13-0x2d], esi; mov rax, r8; ret; 
0x0000000005e5ce: add [rax-0x73], cl; add [rax-0x7d], rcx; ret; 
0x000000000b57ec: add [rax-0x73], cl; add [rcx-0x75], rcx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx; 
0x000000000b592b: add [rax-0x73], cl; add al, 0x4c; lea ecx, [rsp+0x20]; call rbx; 
0x000000000a9f2a: add [rax-0x73], cl; add al, 0x7; cmp [rax], sil; cmovne rax, rdx; ret; 
0x0000000017c50f: add [rax-0x73], cl; add al, 0xc3; nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x0000000003519c: add [rax-0x73], cl; add cl, [rax+0x39]; ret; 
0x000000000b515c: add [rax-0x73], cl; add eax, 0x1069c; cmove rax, rdx; ret; 
0x000000000b525c: add [rax-0x73], cl; add eax, 0x1082c; cmove rax, rdx; ret; 
0x000000000b4efc: add [rax-0x73], cl; add eax, 0x109fc; cmove rax, rdx; ret; 
0x00000000039647: add [rax-0x73], cl; add eax, 0x175e46; ret; 
0x0000000002d3ff: add [rax-0x73], cl; add eax, 0x181bef; ret; 
0x0000000009c2dc: add [rax-0x73], cl; add eax, 0x1821c; cmove rax, rdx; ret; 
0x0000000002d40f: add [rax-0x73], cl; add eax, 0x183a80; ret; 
0x0000000009bebc: add [rax-0x73], cl; add eax, 0x1861c; cmove rax, rdx; ret; 
0x0000000009bc9c: add [rax-0x73], cl; add eax, 0x1885c; cmove rax, rdx; ret; 
0x0000000009bd58: add [rax-0x73], cl; add eax, 0x18d70; cmovne rax, rdx; ret; 
0x000000000447bf: add [rax-0x73], cl; add eax, 0x1abc4f; add rsp, 0x8; ret; 
0x000000000395f5: add [rax-0x73], cl; add eax, 0x1b6303; ret; 
0x0000000017c51f: add [rax-0x73], cl; add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x000000000a16ec: add [rax-0x73], cl; add eax, 0x378c; cmove rax, rdx; ret; 
0x0000000011603c: add [rax-0x73], cl; add eax, 0x6113c; cmove rax, rdx; ret; 
0x00000000115f1c: add [rax-0x73], cl; add eax, 0x6127c; cmove rax, rdx; ret; 
0x00000000115dfc: add [rax-0x73], cl; add eax, 0x6139c; cmove rax, rdx; ret; 
0x0000000011609d: add [rax-0x73], cl; add eax, 0x6182b; cmove rax, rdx; ret; 
0x00000000115fdc: add [rax-0x73], cl; add eax, 0x683dc; cmove rax, rdx; ret; 
0x00000000115ebc: add [rax-0x73], cl; add eax, 0x6851c; cmove rax, rdx; ret; 
0x00000000115d9c: add [rax-0x73], cl; add eax, 0x6863c; cmove rax, rdx; ret; 
0x00000000115f78: add [rax-0x73], cl; add eax, 0x69580; cmove rax, rdx; ret; 
0x00000000115e58: add [rax-0x73], cl; add eax, 0x696c0; cmove rax, rdx; ret; 
0x00000000115d38: add [rax-0x73], cl; add eax, 0x697e0; cmove rax, rdx; ret; 
0x00000000116108: add [rax-0x73], cl; add eax, 0x69ee0; cmove rax, rdx; ret; 
0x0000000011601c: add [rax-0x73], cl; add eax, 0x7048c; cmove rax, rdx; ret; 
0x00000000115efc: add [rax-0x73], cl; add eax, 0x705cc; cmove rax, rdx; ret; 
0x00000000115ddc: add [rax-0x73], cl; add eax, 0x706ec; cmove rax, rdx; ret; 
0x00000000116134: add [rax-0x73], cl; add eax, 0x70f34; cmove rax, rdx; ret; 
0x0000000009d3a3: add [rax-0x73], cl; add eax, 0x78d5; cmove rax, rdx; ret; 
0x0000000009bb03: add [rax-0x73], cl; add eax, 0x8e45; cmove rax, rdx; ret; 
0x000000000b5550: add [rax-0x73], cl; add eax, 0xc24a8; jne short 0x00000000000b5500; ret; 
0x000000000b664b: add [rax-0x73], cl; add eax, 0xc2a6d; jne short 0x00000000000b660b; ret; 
0x000000000b509b: add [rax-0x73], cl; add eax, 0xc3e1d; jne short 0x00000000000b505b; ret; 
0x0000000009d41c: add [rax-0x73], cl; add eax, 0xccdc; cmove rax, rdx; ret; 
0x0000000009bba0: add [rax-0x73], cl; add eax, 0xd4bb8; jne short 0x000000000009bb50; ret; 
0x000000000b665f: add [rax-0x73], cl; add eax, 0xd6519; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b4f0f: add [rax-0x73], cl; add eax, 0xd6c09; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f7f: add [rax-0x73], cl; add eax, 0xd6e19; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b50af: add [rax-0x73], cl; add eax, 0xd7289; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b516f: add [rax-0x73], cl; add eax, 0xd7349; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b526f: add [rax-0x73], cl; add eax, 0xd7c19; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000b54d0: add [rax-0x73], cl; add eax, 0xd8768; cmove rax, rdx; ret; 
0x0000000009c31c: add [rax-0x73], cl; add eax, 0xdae8c; cmove rax, rdx; ret; 
0x0000000009befc: add [rax-0x73], cl; add eax, 0xdb28c; cmove rax, rdx; ret; 
0x0000000009bcdc: add [rax-0x73], cl; add eax, 0xdb4cc; cmove rax, rdx; ret; 
0x0000000009bd3d: add [rax-0x73], cl; add eax, 0xdbb9b; cmove rax, rdx; ret; 
0x0000000009c2bc: add [rax-0x73], cl; add eax, 0xe212c; cmove rax, rdx; ret; 
0x0000000009be9c: add [rax-0x73], cl; add eax, 0xe252c; cmove rax, rdx; ret; 
0x0000000009bc7c: add [rax-0x73], cl; add eax, 0xe276c; cmove rax, rdx; ret; 
0x0000000009c258: add [rax-0x73], cl; add eax, 0xe32d0; cmove rax, rdx; ret; 
0x0000000009be38: add [rax-0x73], cl; add eax, 0xe36d0; cmove rax, rdx; ret; 
0x0000000009bc18: add [rax-0x73], cl; add eax, 0xe3910; cmove rax, rdx; ret; 
0x0000000009bda8: add [rax-0x73], cl; add eax, 0xe4250; cmove rax, rdx; ret; 
0x000000000a16ff: add [rax-0x73], cl; add eax, 0xe5589; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x0000000009c2fc: add [rax-0x73], cl; add eax, 0xea1dc; cmove rax, rdx; ret; 
0x0000000009bedc: add [rax-0x73], cl; add eax, 0xea5dc; cmove rax, rdx; ret; 
0x0000000009bcbc: add [rax-0x73], cl; add eax, 0xea81c; cmove rax, rdx; ret; 
0x0000000009bdd4: add [rax-0x73], cl; add eax, 0xeb2a4; cmove rax, rdx; ret; 
0x0000000009d42f: add [rax-0x73], cl; add eax, 0xeb7e9; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x0000000009aae7: add [rax-0x73], cl; add eax, 0xede91; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aeef: add [rax-0x73], cl; add eax, 0xee9c9; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009d3c0: add [rax-0x73], cl; add eax, 0xf06d8; cmove rax, rdx; ret; 
0x0000000009af5f: add [rax-0x73], cl; add eax, 0xf06f9; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b18f: add [rax-0x73], cl; add eax, 0xf0789; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x0000000009b17c: add [rax-0x73], cl; add eax, 0xf18c; cmove rax, rdx; ret; 
0x0000000009bb20: add [rax-0x73], cl; add eax, 0xf1c98; cmove rax, rdx; ret; 
0x000000000b54b3: add [rax-0x73], cl; add eax, 0xf2d5; cmove rax, rdx; ret; 
0x000000001032ed: add [rax-0x73], cl; add eax, 0xf2dcb; add rsp, 0x18; ret; 
0x00000000102da5: add [rax-0x73], cl; add eax, 0xf32d3; add rsp, 0x8; ret; 
0x0000000009aedc: add [rax-0x73], cl; add eax, 0xf71c; cmove rax, rdx; ret; 
0x0000000009af4c: add [rax-0x73], cl; add eax, 0xf84c; cmove rax, rdx; ret; 
0x000000000b4f6c: add [rax-0x73], cl; add eax, 0xfbbc; cmove rax, rdx; ret; 
0x0000000006ecf2: add [rax-0x73], cl; add eax, 0xfffff0b1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000073b94: add [rax-0x73], cl; add eax, 0xfffff4e1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000c74be: add [rax-0x73], cl; add eax, 0xfffffee9; ret; 
0x000000000c74ae: add [rax-0x73], cl; add eax, 0xfffffef9; add rsp, 0x58; ret; 
0x000000000c739e: add [rax-0x73], cl; add eax, 0xfffffef9; ret; 
0x000000000c738e: add [rax-0x73], cl; add eax, 0xffffff09; add rsp, 0x58; ret; 
0x0000000017c4ef: add [rax-0x73], cl; add r8b, r11b; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x0000000017c4ff: add [rax-0x73], cl; add r8d, r11d; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x00000000035503: add [rax-0x73], cl; add r9b, [rax+0x39]; ret far; 
0x000000000c5d6f: add [rax-0x73], cl; clc; ret; 
0x000000000c5d7f: add [rax-0x73], cl; cld; ret; 
0x000000000c5d5f: add [rax-0x73], cl; hlt; ret; 
0x0000000007c9d1: add [rax-0x73], cl; je short 0x000000000007c9fa; xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x00000000081469: add [rax-0x73], cl; je short 0x0000000000081492; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x000000000ebcc8: add [rax-0x73], cl; je short 0x00000000000ebca2; add [rcx+0x63], cl; rol byte ptr [rcx+0x29], 0x1; ret; 
0x00000000086f5e: add [rax-0x73], cl; js short 0x0000000000086f83; mov eax, 0xca; syscall; 
0x0000000014caa5: add [rax-0x73], cl; js short 0x000000000014cac6; mov eax, 0xca; syscall; 
0x000000000898f1: add [rax-0x73], cl; mov eax, 0x61c; mov eax, 0xca; syscall; 
0x00000000089759: add [rax-0x73], cl; mov ebx, 0x2e0; mov eax, 0x111; syscall; 
0x0000000017c57f: add [rax-0x73], cl; or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x0000000008d069: add [rax-0x73], cl; or eax, 0x11c807; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c37a: add [rax-0x73], cl; or eax, 0x11d2be; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b690: add [rax-0x73], cl; or eax, 0x11dde8; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000075e7e: add [rax-0x73], cl; or eax, 0x1331ae; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000007583d: add [rax-0x73], cl; or eax, 0x1335ab; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c6b9: add [rax-0x73], cl; or eax, 0x14aabf; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000080d5c: add [rax-0x73], cl; or eax, 0x16e1fc; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000018f5cb: add [rax-0x73], cl; or eax, 0x2b74d; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000017c58f: add [rax-0x73], cl; or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x0000000017c53f: add [rax-0x73], cl; or r11b, r8b; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x0000000017c54f: add [rax-0x73], cl; or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x0000000017c55f: add [rax-0x73], cl; or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x0000000017c56f: add [rax-0x73], cl; or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000000e994b: add [rax-0x73], cl; ret; 
0x000000000ea528: add [rax-0x73], cl; sbb eax, 0xc18e4; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x00000000089630: add [rax-0x73], cl; xchg ebx, eax; cmp [rsi], al; add [rax], al; syscall; 
0x000000000946b6: add [rax-0x73], cl; xor eax, 0x115602; sub rsp, 0x8; syscall; 
0x00000000089ecc: add [rax-0x73], cl; xor eax, 0x11f52c; syscall; 
0x0000000006493f: add [rax-0x73], cl; xor eax, 0x1431b9; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000113b93: add [rax-0x73], ecx; add [r8-0x77], rcx; ret far; 
0x0000000016404a: add [rax-0x73], ecx; add [rdi], rcx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x00000000073d73: add [rax-0x73], ecx; add eax, 0x134845; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x000000000b00c5: add [rax-0x73], ecx; jg short 0x00000000000b00cb; jne 0x00000000000b0980; ret; 
0x000000000b1778: add [rax-0x73], ecx; jg short 0x00000000000b177e; jne 0x00000000000b21a0; ret; 
0x00000000175dab: add [rax-0x73], ecx; jg short 0x0000000000175db1; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac3: add [rax-0x73], ecx; jg short 0x0000000000176ac9; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187b5b: add [rax-0x73], ecx; jg short 0x0000000000187b61; jne 0x0000000000187ff0; ret; 
0x0000000018afd3: add [rax-0x73], ecx; jg short 0x000000000018afd9; jne 0x000000000018b420; ret; 
0x00000000073e3c: add [rax-0x73], ecx; or eax, 0xfffff239; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x000000000db3af: add [rax-0x75], cl; adc [r8+0x1], r9b; fmul st, dword ptr [rax-0x7d]; ret; 
0x000000000b4e06: add [rax-0x75], cl; adc byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000003a7dd: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77d: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x0000000003a97d: add [rax-0x75], cl; add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a7bd: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74d: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret; 
0x000000001621cf: add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x00000000043e81: add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret; 
0x00000000191c57: add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000011f076: add [rax-0x75], cl; add al, 0x24; mov rdi, rbx; call rax; 
0x00000000037f7c: add [rax-0x75], cl; add al, 0xd8; test rax, rax; je short 0x0000000000037f88; call rax; 
0x00000000075613: add [rax-0x75], cl; add al, 0xf8; ret; 
0x0000000013dd16: add [rax-0x75], cl; add al, [rbx-0x37f0fe18]; mov [r8+0xa8], eax; mov eax, 0x1; ret; 
0x000000000b4de6: add [rax-0x75], cl; add byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000897d6: add [rax-0x75], cl; add dword ptr [rax+0x6], 0x8b480000; mov ecx, 0x648; je 0x00000000000898c5; call rax; 
0x000000000d2ce4: add [rax-0x75], cl; add eax, 0x11a124; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d2267: add [rax-0x75], cl; add eax, 0x11aba1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f7: add [rax-0x75], cl; add eax, 0x11ac11; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000c750c: add [rax-0x75], cl; add eax, 0x1258fc; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009a02f: add [rax-0x75], cl; add eax, 0x152da9; call qword ptr [rax]; 
0x00000000099f6e: add [rax-0x75], cl; add eax, 0x152e69; call qword ptr [rax]; 
0x00000000093eff: add [rax-0x75], cl; add eax, 0x158f09; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a7f: add [rax-0x75], cl; add eax, 0x159389; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000911e7: add [rax-0x75], cl; add eax, 0x15bc21; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x00000000091037: add [rax-0x75], cl; add eax, 0x15bdd1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090ab7: add [rax-0x75], cl; add eax, 0x15c351; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000906af: add [rax-0x75], cl; add eax, 0x15c759; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009061f: add [rax-0x75], cl; add eax, 0x15c7e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000860a6: add [rax-0x75], cl; add eax, 0x166e19; mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x00000000084dce: add [rax-0x75], cl; add eax, 0x169889; ret; 
0x0000000007ff1f: add [rax-0x75], cl; add eax, 0x16cee9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000078ac7: add [rax-0x75], cl; add eax, 0x174341; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000004462f: add [rax-0x75], cl; add eax, 0x1a87d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000044597: add [rax-0x75], cl; add eax, 0x1a8871; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041df7: add [rax-0x75], cl; add eax, 0x1ab011; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041db7: add [rax-0x75], cl; add eax, 0x1ab051; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c57: add [rax-0x75], cl; add eax, 0x1ab1b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c17: add [rax-0x75], cl; add eax, 0x1ab1f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041447: add [rax-0x75], cl; add eax, 0x1ab9c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004140f: add [rax-0x75], cl; add eax, 0x1ab9f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004139f: add [rax-0x75], cl; add eax, 0x1aba69; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000003f84f: add [rax-0x75], cl; add eax, 0x1ad5b9; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a9ce: add [rax-0x75], cl; add eax, 0x1b2411; add rax, fs:[0x0]; ret; 
0x0000000003a9ae: add [rax-0x75], cl; add eax, 0x1b2641; add rax, fs:[0x0]; ret; 
0x0000000003a2cf: add [rax-0x75], cl; add eax, 0x1b2c29; mov [rax], rdx; ret; 
0x00000000036abf: add [rax-0x75], cl; add eax, 0x1b8c79; ret; 
0x0000000002d66f: add [rax-0x75], cl; add eax, 0x1bf799; add rax, fs:[0x0]; ret; 
0x0000000002debf: add [rax-0x75], cl; add eax, 0x1c1839; ret; 
0x0000000002deaf: add [rax-0x75], cl; add eax, 0x1c1841; ret; 
0x0000000014ef4f: add [rax-0x75], cl; add eax, 0x9deb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec0f: add [rax-0x75], cl; add eax, 0x9e1f9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d05f: add [rax-0x75], cl; add eax, 0x9fda9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000149f4e: add [rax-0x75], cl; add eax, 0xa2eb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001427b7: add [rax-0x75], cl; add eax, 0xaa619; pop rbx; ret; 
0x000000001426d7: add [rax-0x75], cl; add eax, 0xaa751; pop rbx; ret; 
0x00000000142747: add [rax-0x75], cl; add eax, 0xaa879; pop rbx; ret; 
0x0000000014252f: add [rax-0x75], cl; add eax, 0xaa891; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000131ec6: add [rax-0x75], cl; add eax, 0xbaf41; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000128f3f: add [rax-0x75], cl; add eax, 0xc40a1; mov rax, fs:[rax]; ret; 
0x000000001285e6: add [rax-0x75], cl; add eax, 0xc4821; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000117fbf: add [rax-0x75], cl; add eax, 0xd4e89; add rax, fs:[0x0]; ret; 
0x00000000117787: add [rax-0x75], cl; add eax, 0xd5681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b25f: add [rax-0x75], cl; add eax, 0xe1ba9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010a38f: add [rax-0x75], cl; add eax, 0xe2a79; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000109a4f: add [rax-0x75], cl; add eax, 0xe33b9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a17: add [rax-0x75], cl; add eax, 0xe33f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099df: add [rax-0x75], cl; add eax, 0xe3429; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109987: add [rax-0x75], cl; add eax, 0xe3481; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109937: add [rax-0x75], cl; add eax, 0xe34d1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e7: add [rax-0x75], cl; add eax, 0xe3521; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109747: add [rax-0x75], cl; add eax, 0xe36c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109717: add [rax-0x75], cl; add eax, 0xe36f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104e57: add [rax-0x75], cl; add eax, 0xe7fb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001038af: add [rax-0x75], cl; add eax, 0xe9559; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010bfff: add [rax-0x75], cl; add eax, 0xea2f1; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000102a0f: add [rax-0x75], cl; add eax, 0xea3f9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000010067f: add [rax-0x75], cl; add eax, 0xec789; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000010051f: add [rax-0x75], cl; add eax, 0xec8e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001004ef: add [rax-0x75], cl; add eax, 0xec919; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff13f: add [rax-0x75], cl; add eax, 0xedcc9; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000fea07: add [rax-0x75], cl; add eax, 0xee401; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9bf: add [rax-0x75], cl; add eax, 0xef449; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fd88e: add [rax-0x75], cl; add eax, 0xef579; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x000000000fc21f: add [rax-0x75], cl; add eax, 0xf0be9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9677: add [rax-0x75], cl; add eax, 0xf3791; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f92bf: add [rax-0x75], cl; add eax, 0xf3b49; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000007cf16: add [rax-0x75], cl; and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x00000000139063: add [rax-0x75], cl; and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000013901f: add [rax-0x75], cl; and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000013907c: add [rax-0x75], cl; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000c1981: add [rax-0x75], cl; and al, 0x10; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x0000000014ce18: add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x000000000c6ff2: add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax; 
0x00000000085da6: add [rax-0x75], cl; and al, 0x38; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x00000000044717: add [rax-0x75], cl; and al, 0x8; add rsp, 0x18; ret; 
0x00000000044a83: add [rax-0x75], cl; and al, 0x8; add rsp, 0x28; ret; 
0x0000000013ab83: add [rax-0x75], cl; and al, 0x8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000138e34: add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000010068d: add [rax-0x75], cl; and al, 0xb0; ret; 
0x000000000b4e26: add [rax-0x75], cl; and byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000010564f: add [rax-0x75], cl; and byte ptr [rax], 0x3; add [rax], al; ret; 
0x0000000013915f: add [rax-0x75], cl; cmp [r13+r9*4+0x6c], r9b; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000013e55e: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000013dbdb: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x000000000b4dd6: add [rax-0x75], cl; cmp al, 0x1; add [rax], al; ret; 
0x0000000014c2ea: add [rax-0x75], cl; cmp al, 0x24; mov rax, [rax+0x330]; jmp rax; 
0x000000000b4e56: add [rax-0x75], cl; cmp byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000e7569: add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x00000000070155: add [rax-0x75], cl; je short 0x000000000007017e; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000013de62: add [rax-0x75], cl; je short 0x000000000013de8b; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x000000000860ae: add [rax-0x75], cl; jg short 0x00000000000860c3; call qword ptr [rax+0x358]; 
0x0000000009a087: add [rax-0x75], cl; jg short 0x000000000009a0d4; mov rsi, rbp; call rax; 
0x00000000085877: add [rax-0x75], cl; jge short 0x000000000008588c; call qword ptr [rbx+0x358]; 
0x0000000011f8ef: add [rax-0x75], cl; jl short 0x000000000011f918; sub [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x000000001410ed: add [rax-0x75], cl; jl short 0x0000000000141116; push 0xffffffffeeb260e8; dec dword ptr [rax-0x77]; ret; 
0x0000000009a207: add [rax-0x75], cl; jnp short 0x000000000009a254; call rax; 
0x0000000003a94e: add [rax-0x75], cl; jo short 0x000000000003a99d; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000075506: add [rax-0x75], cl; jo short 0x0000000000075523; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000895fd: add [rax-0x75], cl; jo short 0x000000000008960a; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000001404b1: add [rax-0x75], cl; jo short 0x00000000001404ff; mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000003a95f: add [rax-0x75], cl; js short 0x000000000003a9ad; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x000000000f8a30: add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x000000000897dd: add [rax-0x75], cl; mov ecx, 0x648; je 0x00000000000898c5; call rax; 
0x0000000003a7e0: add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret; 
0x0000000003a780: add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x00000000153d6f: add [rax-0x75], cl; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f6f: add [rax-0x75], cl; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000003a980: add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x000000000f8adb: add [rax-0x75], cl; nop; mov al, 0x0; add [rax], al; call qword ptr [rax+0x88]; 
0x0000000013a7d0: add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013f26f: add [rax-0x75], cl; or [r8-0x73], r9b; jae short 0x000000000013f290; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000142ddf: add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000013990f: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000142f1f: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000000b4df6: add [rax-0x75], cl; or byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000003a7c0: add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a750: add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret; 
0x0000000003af69: add [rax-0x75], cl; pop rsp; ret; 
0x0000000010d647: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1000; ret; 
0x0000000010d1d7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1; ret; 
0x0000000010d557: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2000; ret; 
0x0000000010d357: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x200; ret; 
0x0000000010d257: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2; ret; 
0x0000000010d457: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4000; ret; 
0x0000000010d157: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x400; ret; 
0x0000000010d4d7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4; ret; 
0x0000000010d3d7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8000; ret; 
0x0000000010d0d7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8; ret; 
0x00000000094946: add [rax-0x75], cl; push rax; or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x00000000085ca7: add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x00000000082b9c: add [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x0000000015341e: add [rax-0x75], cl; push rsi; clc; mov [rdi-0x8], rdx; ret; 
0x00000000158ece: add [rax-0x75], cl; push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000010a6ff: add [rax-0x75], cl; push rsp; and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x000000000d423f: add [rax-0x75], cl; sbb [r8-0x7d], r9b; ret; 
0x0000000010c016: add [rax-0x75], cl; sbb [rbx-0x6f3cff00], al; ret; 
0x0000000010c006: add [rax-0x75], cl; sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x000000000b4e16: add [rax-0x75], cl; sbb byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000b4e36: add [rax-0x75], cl; sub byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000eb027: add [rax-0x75], cl; test [rax+rdi*4], ah; add [rax], al; add cl, al; call far fword ptr [rax]; 
0x000000001535df: add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000770de: add [rax-0x75], cl; xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x000000000b4dc6: add [rax-0x75], cl; xor al, 0x1; add [rax], al; ret; 
0x0000000006dced: add [rax-0x75], cl; xor al, 0x24; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000072fb9: add [rax-0x75], cl; xor al, 0x24; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000b4e46: add [rax-0x75], cl; xor byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000011558b: add [rax-0x75], cl; xor cl, ch; cld; out 0xff, eax; jmp qword ptr [rsi+0x66]; 
0x000000000f660e: add [rax-0x75], ecx; xor ecx, [rax-0x7d]; ret; 
0x000000000ac416: add [rax-0x776b7fe], ecx; ret; 
0x00000000164041: add [rax-0x776b7fe], ecx; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x0000000010bcb6: add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000014c404: add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret; 
0x000000000948ae: add [rax-0x77], cl; add eax, 0x158ae9; ret; 
0x0000000009482c: add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x000000000947fc: add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x000000000947ae: add [rax-0x77], cl; add eax, 0x158b99; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x0000000014c6df: add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret; 
0x0000000013f94a: add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000007caa2: add [rax-0x77], cl; and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000043dff: add [rax-0x77], cl; clc; cqo; idiv rsi; ret; 
0x00000000084dff: add [rax-0x77], cl; clc; ret; 
0x0000000017710f: add [rax-0x77], cl; clc; vzeroupper; ret; 
0x000000000ed569: add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret; 
0x00000000085ace: add [rax-0x77], cl; cmp al, 0x24; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x000000000927fc: add [rax-0x77], cl; cmp eax, 0x162084; mov [rdi+0x18], rax; ret; 
0x0000000014c2b6: add [rax-0x77], cl; dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x330]; jmp rax; 
0x00000000082493: add [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x00000000105211: add [rax-0x77], cl; fcomp st, dword ptr [rbx-0x3d]; nop [rax+rax]; ret; 
0x00000000089ec4: add [rax-0x77], cl; fidivr st, dword ptr [rax+0xe]; lea rsi, [rip+0x11f52c]; syscall; 
0x00000000112e22: add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000007dacf: add [rax-0x77], cl; fimul st, dword ptr [rax-0x77]; je short 0x000000000007dafb; or al, ch; ret; 
0x00000000071c34: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006e15a: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000788cd: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38]; 
0x00000000073396: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000074696: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000006c54e: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x0000000011f020: add [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x18]; 
0x0000000004640f: add [rax-0x77], cl; fisttp word ptr [rax+0xf], st; mov esi, 0x83480143; ret; 
0x00000000080dc7: add [rax-0x77], cl; fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x000000000e78e7: add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret; 
0x00000000110c8c: add [rax-0x77], cl; fucomip st, st(0); ret far; 
0x000000000771c2: add [rax-0x77], cl; fucomip st, st(0); test [rcx-0x5], edx; call far fword ptr [rbx+0x4c]; 
0x0000000009a36d: add [rax-0x77], cl; imul ecx, [rax], 0x5b; pop rbp; pop r12; ret; 
0x0000000013eee1: add [rax-0x77], cl; in eax, 0x89; ret; 
0x000000000879ef: add [rax-0x77], cl; ja short 0x0000000000087a04; xor eax, eax; ret; 
0x000000001037cf: add [rax-0x77], cl; je short 0x00000000001037e0; pop rbx; ret; 
0x000000001037ce: add [rax-0x77], cl; je short 0x00000000001037e0; pop rbx; ret; 
0x000000000ef035: add [rax-0x77], cl; loop 0x00000000000ef023; cmp esp, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x0000000014bcdd: add [rax-0x77], cl; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x000000000d6ef6: add [rax-0x77], cl; mov eax, 0x2d8; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000d6efd: add [rax-0x77], cl; mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x0000000014eb0f: add [rax-0x77], cl; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014ea9e: add [rax-0x77], cl; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000861a8: add [rax-0x77], cl; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000012f8b8: add [rax-0x77], cl; or [r8-0x77], cl; ret far; 
0x0000000013a6d9: add [rax-0x77], cl; or [rax-0x75], r9b; mov [rsi+0x10], rax; ret; 
0x000000001448ff: add [rax-0x77], cl; out 0x41, eax; call rax; 
0x000000000767af: add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x00000000080f48: add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90]; 
0x0000000014303f: add [rax-0x77], cl; out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x00000000141432: add [rax-0x77], cl; out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013e54a: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000013a7d9: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30]; 
0x00000000076c08: add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000009a15f: add [rax-0x77], cl; out dx, eax; call rax; 
0x00000000141e4d: add [rax-0x77], cl; out dx, eax; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000001398d3: add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000008da16: add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000008e65f: add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000014c743: add [rax-0x77], cl; out dx, eax; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x0000000008f817: add [rax-0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000861b5: add [rax-0x77], cl; push r8; mov fs:[0x300], rdi; ret; 
0x00000000115336: add [rax-0x77], cl; push rbp; nop; mov rdx, r12; call rax; 
0x00000000142ba5: add [rax-0x77], cl; push rsp; and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d65: add [rax-0x77], cl; push rsp; and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000110758: add [rax-0x77], cl; rcr byte ptr [rbx+0x5d], 0x1; pop r12; pop r13; ret; 
0x0000000004f729: add [rax-0x77], cl; ret far; 
0x00000000037e08: add [rax-0x77], cl; ret; 
0x000000001922d7: add [rax-0x77], cl; ror dword ptr [rax+0x9], cl; ret far; 
0x00000000191eb7: add [rax-0x77], cl; ror dword ptr [rax-0x75], 0x1; je short 0x0000000000191ee3; adc [rcx-0x77], cl; ret; 
0x0000000014c3bc: add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret; 
0x000000000b4540: add [rax-0x77], cl; shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x000000000fdd5a: add [rax-0x77], cl; xor esi, esi; syscall; 
0x00000000094895: add [rax-0x77], ecx; adc eax, 0x158af3; ret; 
0x0000000005cbdb: add [rax-0x77], ecx; adc eax, [rax-0x78]; sub [rbx+0x5d], bl; pop r12; ret; 
0x00000000166682: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x000000001622f2: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x000000001621d2: add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x00000000166602: add [rax-0x77], ecx; add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret; 
0x000000001622e2: add [rax-0x77], ecx; add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret; 
0x000000000643af: add [rax-0x77], ecx; lea esi, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x00000000096f83: add [rax-0x77], ecx; or [rax-0x77], cl; adc [r13+0x39], cl; ret far; 
0x0000000013911f: add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x0000000005ad19: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e]; 
0x00000000059bf9: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xfd517], ch; jmp qword ptr [rsi+0x2e]; 
0x0000000008074d: add [rax-0x77], ecx; push rdi; or [rdi], cl; mov dh, 0x0; ret; 
0x00000000113b97: add [rax-0x77], ecx; ret far; 
0x000000000b562b: add [rax-0x77], ecx; ret; 
0x000000001916ad: add [rax-0x77], ecx; shr ecx, 0x7a; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000080726: add [rax-0x77], ecx; sub [rax-0x3f76bbfe], r9b; ret; 
0x000000000643ae: add [rax-0x77], rcx; lea esi, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x00000000080725: add [rax-0x77], rcx; sub [rax-0x3f76bbfe], r9b; ret; 
0x00000000122f5f: add [rax-0x78], eax; ja short 0x0000000000122f65; ret; 
0x0000000002fe4c: add [rax-0x78], eax; je short 0x000000000002fe62; add ecx, [rcx+0x39]; ret; 
0x00000000192566: add [rax-0x7ab70000], al; ret; 
0x000000000c73af: add [rax-0x7b], cl; div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall; 
0x000000000aa79e: add [rax-0x7b], cl; div byte ptr [rbp+0x4]; xor rax, rax; ret; 
0x0000000014d04f: add [rax-0x7b], cl; div byte ptr [rbx+rcx-0x17]; test byte ptr [rsi], 0xf0; jmp qword ptr [rsi+0xf]; 
0x00000000101906: add [rax-0x7b], cl; push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x0000000010452f: add [rax-0x7b], cl; push qword ptr [rbp+rax+0x48]; test esi, esi; jne short 0x0000000000104540; ret; 
0x0000000010454f: add [rax-0x7b], cl; push qword ptr [rbp+rax+0x48]; test esi, esi; jne short 0x0000000000104560; ret; 
0x000000001394f5: add [rax-0x7b], cl; push qword ptr [rdi+rax+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000013936c: add [rax-0x7b], cl; push qword ptr [rdi+rcx+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000007f08a: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x000000000acc63: add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000f91aa: add [rax-0x7b], cl; shl byte ptr [rax+rsi+0x31], 0xd2; call rax; 
0x000000000b4b1f: add [rax-0x7b], cl; shl byte ptr [rbp+0x4], cl; mov rax, rdi; ret; 
0x000000001144cd: add [rax-0x7b], cl; shl byte ptr [rbp+rbp+0x48], 0x8b; jp short 0x0000000000114527; mov rsi, rdx; call rax; 
0x00000000143253: add [rax-0x7b], cl; shl byte ptr [rbp-0x19], 0x5b; ret; 
0x000000000f9127: add [rax-0x7b], cl; shl byte ptr [rbx+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax; 
0x00000000077203: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000011f4ab: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xd7728; call rax; 
0x000000000772c3: add [rax-0x7b], cl; shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000007727c: add [rax-0x7b], cl; shl byte ptr [rsi+rbx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x0000000009e161: add [rax-0x7b], ecx; ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x00000000123624: add [rax-0x7b], ecx; sar byte ptr [rax+0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000006e6a7: add [rax-0x7bf0d505], eax; call qword ptr [rdx]; 
0x0000000016236b: add [rax-0x7bf0ffc7], al; ret far; 
0x00000000040fce: add [rax-0x7c3faff1], dl; loopne 0x0000000000040fde; ret; 
0x00000000168187: add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000088590: add [rax-0x7cfb8bfe], ch; and al, 0x2; xor eax, eax; ret; 
0x00000000098895: add [rax-0x7d], cl; call far fword ptr [rdi]; 
0x00000000105576: add [rax-0x7d], cl; call qword ptr [rax]; 
0x00000000095c91: add [rax-0x7d], cl; clc; push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x0000000004062f: add [rax-0x7d], cl; clc; ret far; 
0x0000000008a957: add [rax-0x7d], cl; in al, dx; or al, ch; pop rdi; ret; 
0x0000000009896c: add [rax-0x7d], cl; jmp qword ptr [rax]; 
0x00000000095d45: add [rax-0x7d], cl; ret far; 
0x0000000002ef78: add [rax-0x7d], cl; ret; 
0x0000000003668d: add [rax-0x7d], cl; rol byte ptr [rax+rcx*2], 0x83; ret; 
0x000000000c5faf: add [rax-0x7d], cl; rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret; 
0x000000000c5f9e: add [rax-0x7d], cl; rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 0x3; ret; 
0x000000000a130e: add [rax-0x7d], cl; rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je short 0x00000000000a1310; ret; 
0x0000000012dafb: add [rax-0x7d], cl; stc; add [rax-0x77], ecx; ret far; 
0x0000000003a0f0: add [rax-0x7d], cl; sti; or al, 0x75; ret; 
0x0000000016818a: add [rax-0x7d], ecx; fdivr st, st(7); ret; 
0x000000000db424: add [rax-0x7d], ecx; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret; 
0x0000000002e9fa: add [rax-0x7d], ecx; ret; 
0x000000000501ea: add [rax-0x7d], ecx; ror dword ptr [rax], 0x41; cmp ebx, eax; jne short 0x00000000000501b0; ret; 
0x0000000005e5d2: add [rax-0x7d], rcx; ret; 
0x000000000466d4: add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x000000000868bf: add [rax-0x80], al; test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x0000000003ee1e: add [rax-0x80], eax; jmp qword ptr [rax]; 
0x0000000006ceff: add [rax-0x8a743], al; jmp qword ptr [rax]; 
0x0000000006c7d6: add [rax-0x8a743], eax; jmp qword ptr [rax]; 
0x00000000071fee: add [rax-0x8df43], al; jmp qword ptr [rax]; 
0x00000000071b0c: add [rax-0x8df43], eax; jmp qword ptr [rax]; 
0x0000000011031c: add [rax-0x9], ecx; rol esi, 0x1; jmp qword ptr [rax]; 
0x0000000003e418: add [rax-0x9], ecx; ror byte ptr [rax+0x1], 0x1; ret; 
0x0000000014bc9e: add [rax-0xb9417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc8e: add [rax-0xc7417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000003a6e3: add [rax], ah; add [rax], al; ret; 
0x00000000110cc3: add [rax], ah; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009b2d2: add [rax], al; adc [rax-0x73], cl; add eax, 0x19094; cmovne rax, rdx; ret; 
0x0000000009b1b2: add [rax], al; adc [rax-0x73], cl; add eax, 0x19114; cmovne rax, rdx; ret; 
0x0000000009ac42: add [rax], al; adc [rax-0x73], cl; add eax, 0x195e4; cmovne rax, rdx; ret; 
0x000000000fe745: add [rax], al; add [r13+rdx-0x48], sil; add [rcx], eax; add [rax], al; syscall; 
0x0000000005c2cd: add [rax], al; add [rax+0x10], bh; ret; 
0x000000000ff21d: add [rax], al; add [rax+0x10], bh; syscall; 
0x000000001090d2: add [rax], al; add [rax+0x119], bh; syscall; 
0x0000000017c4dc: add [rax], al; add [rax+0x1478d48], dl; ret; 
0x0000000010b5ce: add [rax], al; add [rax+0x14], bh; syscall; 
0x000000000983dd: add [rax], al; add [rax+0x15cdc13d], al; add [rax], al; jne short 0x00000000000983f0; ret; 
0x00000000087ab9: add [rax], al; add [rax+0x16], bh; cmove eax, edx; ret; 
0x000000000879dd: add [rax], al; add [rax+0x16], bh; ret; 
0x000000000b1cac: add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x0000000009191d: add [rax], al; add [rax+0x18], bh; syscall; 
0x000000000d20ab: add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000d20aa: add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x000000000c57dd: add [rax], al; add [rax+0x1], bh; jg short 0x00000000000c57e9; neg eax; ret; 
0x000000000fc390: add [rax], al; add [rax+0x1], bh; pop rbx; ret; 
0x0000000005208d: add [rax], al; add [rax+0x1], bh; ret; 
0x000000000c59a0: add [rax], al; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x00000000186e43: add [rax], al; add [rax+0x1], cl; clc; ret; 
0x00000000170577: add [rax], al; add [rax+0x1], cl; clc; vzeroupper; ret; 
0x0000000011693f: add [rax], al; add [rax+0x1], cl; ret far; 
0x0000000002fcd9: add [rax], al; add [rax+0x1], cl; ret; 
0x00000000131e9e: add [rax], al; add [rax+0x1d], bh; pop rbx; ret; 
0x000000000d84db: add [rax], al; add [rax+0x20], bh; cmove rax, rdx; ret; 
0x00000000131e7f: add [rax], al; add [rax+0x22], bh; pop rbx; ret; 
0x000000000d7c8d: add [rax], al; add [rax+0x27], bh; syscall; 
0x000000000df27f: add [rax], al; add [rax+0x29755efa], al; mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x00000000047b9e: add [rax], al; add [rax+0x29], cl; ret far; 
0x0000000006d6e4: add [rax], al; add [rax+0x29], cl; ret; 
0x00000000052279: add [rax], al; add [rax+0x2], bh; ret; 
0x00000000031926: add [rax], al; add [rax+0x39], cl; ret; 
0x0000000008a96d: add [rax], al; add [rax+0x3], bh; ret; 
0x000000000d736d: add [rax], al; add [rax+0x3b], bh; syscall; 
0x0000000017e1fc: add [rax], al; add [rax+0x3bf4478b], dl; hlt; jne 0x000000000017e320; ret; 
0x0000000004164d: add [rax], al; add [rax+0x3e], bh; syscall; 
0x0000000010b1cd: add [rax], al; add [rax+0x40], bh; syscall; 
0x00000000145a4c: add [rax], al; add [rax+0x4284783], dl; mov eax, 0x1; ret; 
0x000000000c1b6d: add [rax], al; add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret; 
0x000000000861cc: add [rax], al; add [rax+0x48478b48], dl; mov fs:[0x300], rax; ret; 
0x000000000fe617: add [rax], al; add [rax+0x48], bh; syscall; 
0x0000000004058e: add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret; 
0x0000000005c14d: add [rax], al; add [rax+0x52], bh; syscall; 
0x000000000f995d: add [rax], al; add [rax+0x53], bh; syscall; 
0x000000000fb24d: add [rax], al; add [rax+0x56], bh; syscall; 
0x000000000f977d: add [rax], al; add [rax+0x5a], bh; syscall; 
0x0000000007a89d: add [rax], al; add [rax+0x63], cl; adc [rax-0x75], cl; adc cl, [rax+0x39]; ret far; 
0x000000000e9215: add [rax], al; add [rax+0x63], cl; ret; 
0x0000000013ab12: add [rax], al; add [rax+0x63], cl; sbb [r11+0xa7603f8], r8b; mov eax, 0x2; ret; 
0x00000000187f7c: add [rax], al; add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x000000000d7cad: add [rax], al; add [rax+0x66], bh; syscall; 
0x0000000004055e: add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret; 
0x000000000d7ccd: add [rax], al; add [rax+0x68], bh; syscall; 
0x000000000d7cbd: add [rax], al; add [rax+0x6b], bh; syscall; 
0x000000000d7cdd: add [rax], al; add [rax+0x6c], bh; syscall; 
0x000000000d7c9d: add [rax], al; add [rax+0x6e], bh; syscall; 
0x0000000004051f: add [rax], al; add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000408bb: add [rax], al; add [rax+0x7110ff3], al; movd xmm0, esi; ret; 
0x000000000d7ced: add [rax], al; add [rax+0x73], bh; syscall; 
0x000000000b50b9: add [rax], al; add [rax+0x74], al; ret far; 
0x00000000116d3c: add [rax], al; add [rax+0x77ca3948], dl; add eax, 0xfe45c6e9; call qword ptr [rax-0x18]; 
0x000000000b0e7d: add [rax], al; add [rax+0x78d4837], cl; ret; 
0x000000000d7eed: add [rax], al; add [rax+0x7c], bh; syscall; 
0x00000000041682: add [rax], al; add [rax+0x7f], bh; syscall; 
0x00000000041e8a: add [rax], al; add [rax+0x80], bh; syscall; 
0x000000000416be: add [rax], al; add [rax+0x82], bh; syscall; 
0x000000000eff9d: add [rax], al; add [rax+0x8e], bh; syscall; 
0x00000000108ffd: add [rax], al; add [rax+0xa6], bh; syscall; 
0x000000000ffb3d: add [rax], al; add [rax+0xaa], bh; syscall; 
0x0000000008f66d: add [rax], al; add [rax+0xb], bh; ret; 
0x0000000008b4b5: add [rax], al; add [rax+0xba], bh; syscall; 
0x000000000ff11d: add [rax], al; add [rax+0xc], bh; syscall; 
0x0000000008dfe6: add [rax], al; add [rax+0xca], bh; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000867ec: add [rax], al; add [rax+0xca], bh; syscall; 
0x0000000008684d: add [rax], al; add [rax+0xca], bh; xor sil, 0x80; syscall; 
0x00000000088b6d: add [rax], al; add [rax+0xca], bh; xor sil, 0x81; syscall; 
0x000000000f018d: add [rax], al; add [rax+0xcb], bh; syscall; 
0x0000000008aa4b: add [rax], al; add [rax+0xcc], bh; syscall; 
0x00000000041521: add [rax], al; add [rax+0xd], bh; syscall; 
0x000000000946af: add [rax], al; add [rax+0xe], bh; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000050027: add [rax], al; add [rax+0xe], bh; syscall; 
0x0000000010a32d: add [rax], al; add [rax+0xea], bh; syscall; 
0x00000000093f5d: add [rax], al; add [rax+0xf5], bh; syscall; 
0x00000000085e9a: add [rax], al; add [rax+0xf], cl; and al, 0x10; add rsp, 0x28; ret; 
0x0000000014c49a: add [rax], al; add [rax+0xf], cl; and al, 0x18; add rsp, 0x28; ret; 
0x00000000085d8f: add [rax], al; add [rax+0xf], cl; and al, 0x18; add rsp, 0x38; ret; 
0x0000000010e92d: add [rax], al; add [rax+0xf], cl; mov esi, 0x83480153; ret; 
0x00000000044158: add [rax], al; add [rax+0xf], cl; ret; 
0x000000000df0c3: add [rax], al; add [rax+rax], al; add al, ch; xchg edx, eax; ret; 
0x000000000c5d23: add [rax], al; add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret; 
0x00000000043d82: add [rax], al; add [rax+rcx*2-0x77], ah; adc ecx, [rax-0x75]; jge short 0x0000000000043d95; call rax; 
0x000000001290e4: add [rax], al; add [rax-0x1], bh; add rsp, 0x18; ret; 
0x0000000010058d: add [rax], al; add [rax-0x1], bh; add rsp, 0x48; ret; 
0x0000000005bc2c: add [rax], al; add [rax-0x1], bh; add rsp, 0x98; ret; 
0x000000000d75e1: add [rax], al; add [rax-0x1], bh; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000003f8bb: add [rax], al; add [rax-0x1], bh; pop rbp; ret; 
0x000000001230bd: add [rax], al; add [rax-0x1], bh; pop rbx; ret; 
0x00000000041cba: add [rax], al; add [rax-0x1], bh; ret; 
0x0000000002d8eb: add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014bc6c: add [rax], al; add [rax-0x1ab417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc5c: add [rax], al; add [rax-0x1b0417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc4c: add [rax], al; add [rax-0x1b4417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc7c: add [rax], al; add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc2c: add [rax], al; add [rax-0x1c6417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc3c: add [rax], al; add [rax-0x1cc417], dl; jmp qword ptr [rsi+0x2e]; 
0x000000000889a9: add [rax], al; add [rax-0x29767e0e], al; mov edx, 0x7fffffff; syscall; 
0x000000000a18fc: add [rax], al; add [rax-0x2c30417], dl; jmp qword ptr [rsi+0x2e]; 
0x00000000040912: add [rax], al; add [rax-0x3991f09a], al; ret; 
0x0000000004e325: add [rax], al; add [rax-0x39], cl; ret; 
0x000000000c5fed: add [rax], al; add [rax-0x39], cl; rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x000000000c602d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000000c5fdd: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x000000000c601d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x00000000117dc8: add [rax], al; add [rax-0x3c38baf1], al; mov eax, edi; shr eax, 0x18; ret; 
0x0000000009d9cd: add [rax], al; add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret; 
0x00000000040a8c: add [rax], al; add [rax-0x3f28f09a], dl; and eax, 0x8; ret; 
0x00000000123863: add [rax], al; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000002d124: add [rax], al; add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x1c35b6], eax; ret; 
0x00000000108cae: add [rax], al; add [rax-0x3f], cl; ret; 
0x000000000d0994: add [rax], al; add [rax-0x3f], cl; stc; add ch, [rcx]; ret far; 
0x000000000fe8da: add [rax], al; add [rax-0x3fcef877], al; ret; 
0x0000000010ba9d: add [rax], al; add [rax-0x42], cl; ret; 
0x00000000091e6c: add [rax], al; add [rax-0x6d9417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000002d3fd: add [rax], al; add [rax-0x73], cl; add eax, 0x181bef; ret; 
0x0000000002d40d: add [rax], al; add [rax-0x73], cl; add eax, 0x183a80; ret; 
0x00000000035501: add [rax], al; add [rax-0x73], cl; add r9b, [rax+0x39]; ret far; 
0x000000000c5d6d: add [rax], al; add [rax-0x73], cl; clc; ret; 
0x000000000c5d7d: add [rax], al; add [rax-0x73], cl; cld; ret; 
0x000000000c5d5d: add [rax], al; add [rax-0x73], cl; hlt; ret; 
0x00000000086f5c: add [rax], al; add [rax-0x73], cl; js short 0x0000000000086f83; mov eax, 0xca; syscall; 
0x0000000014caa3: add [rax], al; add [rax-0x73], cl; js short 0x000000000014cac6; mov eax, 0xca; syscall; 
0x000000000898ef: add [rax], al; add [rax-0x73], cl; mov eax, 0x61c; mov eax, 0xca; syscall; 
0x00000000089757: add [rax], al; add [rax-0x73], cl; mov ebx, 0x2e0; mov eax, 0x111; syscall; 
0x000000000ea46a: add [rax], al; add [rax-0x73], cl; ret; 
0x000000000946b4: add [rax], al; add [rax-0x73], cl; xor eax, 0x115602; sub rsp, 0x8; syscall; 
0x00000000089eca: add [rax], al; add [rax-0x73], cl; xor eax, 0x11f52c; syscall; 
0x00000000043e7f: add [rax], al; add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret; 
0x0000000009a02d: add [rax], al; add [rax-0x75], cl; add eax, 0x152da9; call qword ptr [rax]; 
0x0000000003a2cd: add [rax], al; add [rax-0x75], cl; add eax, 0x1b2c29; mov [rax], rdx; ret; 
0x00000000036abd: add [rax], al; add [rax-0x75], cl; add eax, 0x1b8c79; ret; 
0x0000000002debd: add [rax], al; add [rax-0x75], cl; add eax, 0x1c1839; ret; 
0x0000000002dead: add [rax], al; add [rax-0x75], cl; add eax, 0x1c1841; ret; 
0x0000000007cf14: add [rax], al; add [rax-0x75], cl; and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x0000000013901d: add [rax], al; add [rax-0x75], cl; and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000014ce16: add [rax], al; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x000000000c6ff0: add [rax], al; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax; 
0x0000000013f7b5: add [rax], al; add [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000010068b: add [rax], al; add [rax-0x75], cl; and al, 0xb0; ret; 
0x000000000e7b2d: add [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x0000000013de60: add [rax], al; add [rax-0x75], cl; je short 0x000000000013de8b; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x0000000009a085: add [rax], al; add [rax-0x75], cl; jg short 0x000000000009a0d4; mov rsi, rbp; call rax; 
0x000000000f8a2e: add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000013990d: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x000000001535dd: add [rax], al; add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000009482a: add [rax], al; add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x000000000947fa: add [rax], al; add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x0000000013f948: add [rax], al; add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000084dfd: add [rax], al; add [rax-0x77], cl; clc; ret; 
0x0000000017710d: add [rax], al; add [rax-0x77], cl; clc; vzeroupper; ret; 
0x000000000927fa: add [rax], al; add [rax-0x77], cl; cmp eax, 0x162084; mov [rdi+0x18], rax; ret; 
0x000000000788cb: add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38]; 
0x0000000004640d: add [rax], al; add [rax-0x77], cl; fisttp word ptr [rax+0xf], st; mov esi, 0x83480143; ret; 
0x00000000080dc5: add [rax], al; add [rax-0x77], cl; fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x00000000110c8a: add [rax], al; add [rax-0x77], cl; fucomip st, st(0); ret far; 
0x000000000879ed: add [rax], al; add [rax-0x77], cl; ja short 0x0000000000087a04; xor eax, eax; ret; 
0x000000000ef033: add [rax], al; add [rax-0x77], cl; loop 0x00000000000ef023; cmp esp, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x0000000014eb0d: add [rax], al; add [rax-0x77], cl; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000013a6d7: add [rax], al; add [rax-0x77], cl; or [rax-0x75], r9b; mov [rsi+0x10], rax; ret; 
0x000000001448fd: add [rax], al; add [rax-0x77], cl; out 0x41, eax; call rax; 
0x000000000767ad: add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x000000000811e0: add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90]; 
0x0000000014303d: add [rax], al; add [rax-0x77], cl; out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x0000000013e548: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000013a7d7: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30]; 
0x00000000076c06: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000009a15d: add [rax], al; add [rax-0x77], cl; out dx, eax; call rax; 
0x000000001398d1: add [rax], al; add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000008da14: add [rax], al; add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000008e65d: add [rax], al; add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000004f727: add [rax], al; add [rax-0x77], cl; ret far; 
0x00000000055917: add [rax], al; add [rax-0x77], cl; ret; 
0x000000000469cf: add [rax], al; add [rax-0x77], cl; ret; 
0x000000001922d5: add [rax], al; add [rax-0x77], cl; ror dword ptr [rax+0x9], cl; ret far; 
0x0000000017e46a: add [rax], al; add [rax-0x77], cl; shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x0000000013911d: add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x00000000192564: add [rax], al; add [rax-0x7ab70000], al; ret; 
0x000000000c73ad: add [rax], al; add [rax-0x7b], cl; div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall; 
0x0000000014d04d: add [rax], al; add [rax-0x7b], cl; div byte ptr [rbx+rcx-0x17]; test byte ptr [rsi], 0xf0; jmp qword ptr [rsi+0xf]; 
0x000000000b4b1d: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rbp+0x4], cl; mov rax, rdi; ret; 
0x00000000143251: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rbp-0x19], 0x5b; ret; 
0x00000000077201: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000772c1: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000040fcc: add [rax], al; add [rax-0x7c3faff1], dl; loopne 0x0000000000040fde; ret; 
0x0000000008858e: add [rax], al; add [rax-0x7cfb8bfe], ch; and al, 0x2; xor eax, eax; ret; 
0x0000000009896a: add [rax], al; add [rax-0x7d], cl; jmp qword ptr [rax]; 
0x00000000037f5d: add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000003a0ee: add [rax], al; add [rax-0x7d], cl; sti; or al, 0x75; ret; 
0x0000000006cefd: add [rax], al; add [rax-0x8a743], al; jmp qword ptr [rax]; 
0x0000000014bc9c: add [rax], al; add [rax-0xb9417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc8c: add [rax], al; add [rax-0xc7417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000005c2cb: add [rax], al; add [rax], al; add [rax+0x10], bh; ret; 
0x000000000ff21b: add [rax], al; add [rax], al; add [rax+0x10], bh; syscall; 
0x0000000017c4da: add [rax], al; add [rax], al; add [rax+0x1478d48], dl; ret; 
0x000000000879db: add [rax], al; add [rax], al; add [rax+0x16], bh; ret; 
0x000000000b1caa: add [rax], al; add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+0x1]; ret; 
0x0000000009191b: add [rax], al; add [rax], al; add [rax+0x18], bh; syscall; 
0x0000000009a1db: add [rax], al; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000d7c8b: add [rax], al; add [rax], al; add [rax+0x27], bh; syscall; 
0x0000000013ad3b: add [rax], al; add [rax], al; add [rax+0x2], bh; ret; 
0x0000000008a96b: add [rax], al; add [rax], al; add [rax+0x3], bh; ret; 
0x000000000d736b: add [rax], al; add [rax], al; add [rax+0x3b], bh; syscall; 
0x0000000010b1cb: add [rax], al; add [rax], al; add [rax+0x40], bh; syscall; 
0x00000000145a4a: add [rax], al; add [rax], al; add [rax+0x4284783], dl; mov eax, 0x1; ret; 
0x000000000861ca: add [rax], al; add [rax], al; add [rax+0x48478b48], dl; mov fs:[0x300], rax; ret; 
0x0000000004058c: add [rax], al; add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret; 
0x0000000005c14b: add [rax], al; add [rax], al; add [rax+0x52], bh; syscall; 
0x000000000f977b: add [rax], al; add [rax], al; add [rax+0x5a], bh; syscall; 
0x00000000187f7a: add [rax], al; add [rax], al; add [rax+0x66178966], dl; mov [rdi+r8-0x2], edx; ret; 
0x000000000d7cab: add [rax], al; add [rax], al; add [rax+0x66], bh; syscall; 
0x0000000004055c: add [rax], al; add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret; 
0x000000000d7ccb: add [rax], al; add [rax], al; add [rax+0x68], bh; syscall; 
0x000000000d7cbb: add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall; 
0x000000000d7cdb: add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall; 
0x000000000d7c9b: add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall; 
0x000000000d7ceb: add [rax], al; add [rax], al; add [rax+0x73], bh; syscall; 
0x00000000116d3a: add [rax], al; add [rax], al; add [rax+0x77ca3948], dl; add eax, 0xfe45c6e9; call qword ptr [rax-0x18]; 
0x000000000b0e7b: add [rax], al; add [rax], al; add [rax+0x78d4837], cl; ret; 
0x000000000eff9b: add [rax], al; add [rax], al; add [rax+0x8e], bh; syscall; 
0x00000000108ffb: add [rax], al; add [rax], al; add [rax+0xa6], bh; syscall; 
0x000000000ffb3b: add [rax], al; add [rax], al; add [rax+0xaa], bh; syscall; 
0x0000000008f66b: add [rax], al; add [rax], al; add [rax+0xb], bh; ret; 
0x000000000ff11b: add [rax], al; add [rax], al; add [rax+0xc], bh; syscall; 
0x000000000f018b: add [rax], al; add [rax], al; add [rax+0xcb], bh; syscall; 
0x0000000010a32b: add [rax], al; add [rax], al; add [rax+0xea], bh; syscall; 
0x00000000093f5b: add [rax], al; add [rax], al; add [rax+0xf5], bh; syscall; 
0x0000000010e92b: add [rax], al; add [rax], al; add [rax+0xf], cl; mov esi, 0x83480153; ret; 
0x0000000010058b: add [rax], al; add [rax], al; add [rax-0x1], bh; add rsp, 0x48; ret; 
0x0000000007d1db: add [rax], al; add [rax], al; add [rax-0x1], bh; pop rbp; ret; 
0x000000001230bb: add [rax], al; add [rax], al; add [rax-0x1], bh; pop rbx; ret; 
0x0000000007c80b: add [rax], al; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014bc6a: add [rax], al; add [rax], al; add [rax-0x1ab417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc5a: add [rax], al; add [rax], al; add [rax-0x1b0417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc4a: add [rax], al; add [rax], al; add [rax-0x1b4417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc7a: add [rax], al; add [rax], al; add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc2a: add [rax], al; add [rax], al; add [rax-0x1c6417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc3a: add [rax], al; add [rax], al; add [rax-0x1cc417], dl; jmp qword ptr [rsi+0x2e]; 
0x000000000a18fa: add [rax], al; add [rax], al; add [rax-0x2c30417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000009d9cb: add [rax], al; add [rax], al; add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret; 
0x00000000040a8a: add [rax], al; add [rax], al; add [rax-0x3f28f09a], dl; and eax, 0x8; ret; 
0x0000000010ba9b: add [rax], al; add [rax], al; add [rax-0x42], cl; ret; 
0x00000000091e6a: add [rax], al; add [rax], al; add [rax-0x6d9417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000002d3fb: add [rax], al; add [rax], al; add [rax-0x73], cl; add eax, 0x181bef; ret; 
0x0000000002d40b: add [rax], al; add [rax], al; add [rax-0x73], cl; add eax, 0x183a80; ret; 
0x000000000c5d6b: add [rax], al; add [rax], al; add [rax-0x73], cl; clc; ret; 
0x000000000c5d7b: add [rax], al; add [rax], al; add [rax-0x73], cl; cld; ret; 
0x000000000c5d5b: add [rax], al; add [rax], al; add [rax-0x73], cl; hlt; ret; 
0x000000000ea468: add [rax], al; add [rax], al; add [rax-0x73], cl; ret; 
0x0000000009a02b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x152da9; call qword ptr [rax]; 
0x0000000002debb: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x1c1839; ret; 
0x0000000002deab: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x1c1841; ret; 
0x00000000100689: add [rax], al; add [rax], al; add [rax-0x75], cl; and al, 0xb0; ret; 
0x000000000e7b2b: add [rax], al; add [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x00000000084dfb: add [rax], al; add [rax], al; add [rax-0x77], cl; clc; ret; 
0x0000000009a15b: add [rax], al; add [rax], al; add [rax-0x77], cl; out dx, eax; call rax; 
0x000000000c79cb: add [rax], al; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000192562: add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret; 
0x00000000040fca: add [rax], al; add [rax], al; add [rax-0x7c3faff1], dl; loopne 0x0000000000040fde; ret; 
0x0000000003a03b: add [rax], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000006cefb: add [rax], al; add [rax], al; add [rax-0x8a743], al; jmp qword ptr [rax]; 
0x0000000014bc9a: add [rax], al; add [rax], al; add [rax-0xb9417], dl; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc8a: add [rax], al; add [rax], al; add [rax-0xc7417], dl; jmp qword ptr [rsi+0x2e]; 
0x000000000ea466: add [rax], al; add [rax], al; add [rax], al; add [rax-0x73], cl; ret; 
0x000000001340e3: add [rax], al; add [rax], al; add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x0000000013ae3c: add [rax], al; add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000133a7c: add [rax], al; add [rax], al; add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x00000000086901: add [rax], al; add [rax], al; add [rax], al; ret; 
0x0000000008e0df: add [rax], al; add [rax], al; add [rax], al; xor eax, eax; ret; 
0x00000000030e9b: add [rax], al; add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x0000000009d7f9: add [rax], al; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x000000001204eb: add [rax], al; add [rax], al; add [rbp+rcx*4-0x43], cl; sar bl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000554bb: add [rax], al; add [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000af8bb: add [rax], al; add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x0000000016995b: add [rax], al; add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x0000000013e99f: add [rax], al; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000008778b: add [rax], al; add [rax], al; add [rbx+0x6890447], cl; xor eax, eax; ret; 
0x000000000d20bb: add [rax], al; add [rax], al; add [rbx+0xb7401fe], al; xor eax, eax; ret; 
0x00000000087eeb: add [rax], al; add [rax], al; add [rbx+0xb7420ff], al; ret; 
0x00000000042e9b: add [rax], al; add [rax], al; add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x0000000011226b: add [rax], al; add [rax], al; add [rbx-0x7cb7c7ad], cl; ret; 
0x000000000b696b: add [rax], al; add [rax], al; add [rbx-0x7cb7fb85], cl; ret; 
0x000000000b40ab: add [rax], al; add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000016426b: add [rax], al; add [rax], al; add [rcx+0x3518911], cl; ret; 
0x00000000121c6b: add [rax], al; add [rax], al; add [rcx+0x39], al; ret far; 
0x0000000013ae3d: add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x000000001330ad: add [rax], al; add [rax], al; add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x000000000842cb: add [rax], al; add [rax], al; add [rcx-0x17f3db8c], cl; xchg edi, eax; ret; 
0x000000000f85db: add [rax], al; add [rax], al; add [rcx-0x3fcefb89], cl; ret; 
0x0000000003e92b: add [rax], al; add [rax], al; add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret; 
0x0000000003a7fb: add [rax], al; add [rax], al; add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret; 
0x00000000084e77: add [rax], al; add [rax], al; add [rdi+0x16b88e05], al; add [rbx+0x97f01f8], al; ret; 
0x000000000783c7: add [rax], al; add [rax], al; add [rdi+0x1782fe05], al; add [rbx+0x97f01f8], al; ret; 
0x00000000133a7d: add [rax], al; add [rax], al; add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x00000000186e9b: add [rax], al; add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x00000000164219: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x000000000b0859: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x0000000010a259: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x134; syscall; 
0x000000000f9df9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x15; syscall; 
0x000000000c9b59: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x24; syscall; 
0x00000000093a99: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x3; syscall; 
0x0000000010b2e9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x43; syscall; 
0x000000000fb369: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x57; syscall; 
0x000000000fb2a9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x58; syscall; 
0x0000000010a139: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x63; syscall; 
0x00000000109059: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x7a; syscall; 
0x00000000109d79: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x7d; syscall; 
0x00000000109269: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x87; syscall; 
0x000000000ff039: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x8c; syscall; 
0x00000000102c19: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x95; syscall; 
0x000000001003d9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x99; syscall; 
0x00000000109ec9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xb1; syscall; 
0x0000000010a079: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xb4; syscall; 
0x00000000105419: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc2; syscall; 
0x00000000105479: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc3; syscall; 
0x00000000105359: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc4; syscall; 
0x00000000105509: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc5; syscall; 
0x00000000109f29: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xfe; syscall; 
0x00000000084da9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xffffffff; ret; 
0x000000000d2e79: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, [rdi]; ret; 
0x00000000084de9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret; 
0x0000000018b649: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov rax, rdi; ret; 
0x0000000002d159: add [rax], al; add [rax], al; add [rsi-0x70], ah; ret; 
0x000000000c4b19: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000c5a79: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret; 
0x0000000007689b: add [rax], al; add [rax], al; add al, ch; ret far; 
0x000000000b092b: add [rax], al; add [rax], al; add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000b093b: add [rax], al; add [rax], al; add bl, dh; movq [rdi], mm0; ret; 
0x0000000009192b: add [rax], al; add [rax], al; add cl, ch; imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x0000000014388b: add [rax], al; add [rax], al; add cl, ch; imul edi, edx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000d6e1d: add [rax], al; add [rax], al; add cl, ch; paddw mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x000000000831fb: add [rax], al; add [rax], al; add cl, ch; ret far; 
0x00000000145b3c: add [rax], al; add [rax], al; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000005c2bc: add [rax], al; add [rax], al; add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x000000000c5fac: add [rax], al; add [rax], al; add rax, 0x3; ret; 
0x000000000863ae: add [rax], al; add [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000100a0c: add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000000406bc: add [rax], al; add [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000a4bfc: add [rax], al; add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000a4c0c: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a4c1c: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x00000000186e9c: add [rax], al; add [rax], al; bsr eax, eax; add rax, rdi; ret; 
0x000000000a50cc: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a50dc: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50ec: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x00000000139104: add [rax], al; add [rax], al; call qword ptr [rax+0x28]; 
0x00000000145bee: add [rax], al; add [rax], al; call r8; 
0x00000000123938: add [rax], al; add [rax], al; call rax; 
0x000000000902db: add [rax], al; add [rax], al; cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008fcd7: add [rax], al; add [rax], al; cmova eax, edx; ret; 
0x0000000010af67: add [rax], al; add [rax], al; cmovb rax, rdx; ret; 
0x0000000008a983: add [rax], al; add [rax], al; cmove eax, edx; ret; 
0x00000000085e99: add [rax], al; add [rax], al; cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c499: add [rax], al; add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d8e: add [rax], al; add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c5: add [rax], al; add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x0000000009de97: add [rax], al; add [rax], al; cmove rax, rdx; ret; 
0x000000000d90de: add [rax], al; add [rax], al; cmovne rax, rdi; ret; 
0x00000000149bb1: add [rax], al; add [rax], al; cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000092882: add [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x000000001109c8: add [rax], al; add [rax], al; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x0000000013744b: add [rax], al; add [rax], al; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x000000000983dc: add [rax], al; add [rax], al; cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x00000000087eec: add [rax], al; add [rax], al; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x00000000083a8c: add [rax], al; add [rax], al; cmp qword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x00000000040260: add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000010b16a: add [rax], al; add [rax], al; jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x0000000017c4ec: add [rax], al; add [rax], al; lea rax, [rdi+0x2]; ret; 
0x0000000017c4fc: add [rax], al; add [rax], al; lea rax, [rdi+0x3]; ret; 
0x0000000017c50c: add [rax], al; add [rax], al; lea rax, [rdi+0x4]; ret; 
0x0000000017c51c: add [rax], al; add [rax], al; lea rax, [rdi+0x5]; ret; 
0x0000000017c52c: add [rax], al; add [rax], al; lea rax, [rdi+0x6]; ret; 
0x0000000017c53c: add [rax], al; add [rax], al; lea rax, [rdi+0x8]; ret; 
0x0000000017c54c: add [rax], al; add [rax], al; lea rax, [rdi+0x9]; ret; 
0x0000000017c55c: add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret; 
0x0000000017c56c: add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret; 
0x0000000017c57c: add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret; 
0x0000000017c58c: add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret; 
0x0000000017c59c: add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret; 
0x000000000c5d7c: add [rax], al; add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000c5d6c: add [rax], al; add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000c5d5c: add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret; 
0x0000000002d3fc: add [rax], al; add [rax], al; lea rax, [rip+0x181bef]; ret; 
0x0000000002d40c: add [rax], al; add [rax], al; lea rax, [rip+0x183a80]; ret; 
0x0000000008979a: add [rax], al; add [rax], al; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000a1574: add [rax], al; add [rax], al; mov [rax], ecx; ret; 
0x00000000115333: add [rax], al; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x0000000009234c: add [rax], al; add [rax], al; mov [rcx+0x20], rdx; ret; 
0x0000000016426c: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000016425c: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000016423c: add [rax], al; add [rax], al; mov [rcx], edx; ret; 
0x000000001642cc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642dc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x000000001642ac: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x000000001642ec: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000016429c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000001642bc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x000000001642fc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000016427c: add [rax], al; add [rax], al; mov [rcx], rdx; ret; 
0x000000000879ec: add [rax], al; add [rax], al; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000001340e5: add [rax], al; add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x000000000f85dc: add [rax], al; add [rax], al; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x000000000b08ac: add [rax], al; add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000b0e7c: add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000af87c: add [rax], al; add [rax], al; mov [rdi], dh; ret; 
0x00000000187f5c: add [rax], al; add [rax], al; mov [rdi], dl; ret; 
0x0000000017615c: add [rax], al; add [rax], al; mov [rdi], dx; vzeroupper; ret; 
0x000000000a163c: add [rax], al; add [rax], al; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b089c: add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000b090c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b091c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000b08ec: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000b08dc: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000b08fc: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x00000000187f9c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x000000000b08bc: add [rax], al; add [rax], al; mov [rdi], rdx; ret; 
0x000000000a148c: add [rax], al; add [rax], al; mov [rdi], si; add rax, rdi; ret; 
0x000000000a160c: add [rax], al; add [rax], al; mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x000000000927f9: add [rax], al; add [rax], al; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x0000000013a731: add [rax], al; add [rax], al; mov [rsi+0x10], rax; ret; 
0x0000000013f946: add [rax], al; add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000142ba2: add [rax], al; add [rax], al; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000a154c: add [rax], al; add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x0000000010b832: add [rax], al; add [rax], al; mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x0000000012491c: add [rax], al; add [rax], al; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x000000000df2fc: add [rax], al; add [rax], al; mov byte ptr [rdi+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000df32c: add [rax], al; add [rax], al; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000001327e3: add [rax], al; add [rax], al; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x0000000013278c: add [rax], al; add [rax], al; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x00000000132735: add [rax], al; add [rax], al; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326de: add [rax], al; add [rax], al; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x0000000006defc: add [rax], al; add [rax], al; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x00000000087ebc: add [rax], al; add [rax], al; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000946f6: add [rax], al; add [rax], al; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x00000000093cdc: add [rax], al; add [rax], al; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x0000000013a71c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a70c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6fc: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6ec: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x000000000731ab: add [rax], al; add [rax], al; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000142d15: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142be5: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c25: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c65: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000074914: add [rax], al; add [rax], al; mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x000000000b055c: add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000005c2cc: add [rax], al; add [rax], al; mov eax, 0x10; ret; 
0x000000000ff21c: add [rax], al; add [rax], al; mov eax, 0x10; syscall; 
0x000000000879dc: add [rax], al; add [rax], al; mov eax, 0x16; ret; 
0x0000000009191c: add [rax], al; add [rax], al; mov eax, 0x18; syscall; 
0x000000000fc3a7: add [rax], al; add [rax], al; mov eax, 0x1; pop rbx; ret; 
0x0000000005208c: add [rax], al; add [rax], al; mov eax, 0x1; ret; 
0x000000000d7c8c: add [rax], al; add [rax], al; mov eax, 0x27; syscall; 
0x00000000052278: add [rax], al; add [rax], al; mov eax, 0x2; ret; 
0x0000000008a96c: add [rax], al; add [rax], al; mov eax, 0x3; ret; 
0x000000000d736c: add [rax], al; add [rax], al; mov eax, 0x3b; syscall; 
0x0000000004164c: add [rax], al; add [rax], al; mov eax, 0x3e; syscall; 
0x0000000010b1cc: add [rax], al; add [rax], al; mov eax, 0x40; syscall; 
0x0000000005c14c: add [rax], al; add [rax], al; mov eax, 0x52; syscall; 
0x000000000f995c: add [rax], al; add [rax], al; mov eax, 0x53; syscall; 
0x000000000fb24c: add [rax], al; add [rax], al; mov eax, 0x56; syscall; 
0x000000000f977c: add [rax], al; add [rax], al; mov eax, 0x5a; syscall; 
0x000000000d7cac: add [rax], al; add [rax], al; mov eax, 0x66; syscall; 
0x000000000d7ccc: add [rax], al; add [rax], al; mov eax, 0x68; syscall; 
0x000000000d7cbc: add [rax], al; add [rax], al; mov eax, 0x6b; syscall; 
0x000000000d7cdc: add [rax], al; add [rax], al; mov eax, 0x6c; syscall; 
0x000000000d7c9c: add [rax], al; add [rax], al; mov eax, 0x6e; syscall; 
0x000000000d7cec: add [rax], al; add [rax], al; mov eax, 0x73; syscall; 
0x000000000d7eec: add [rax], al; add [rax], al; mov eax, 0x7c; syscall; 
0x000000000eff9c: add [rax], al; add [rax], al; mov eax, 0x8e; syscall; 
0x00000000108ffc: add [rax], al; add [rax], al; mov eax, 0xa6; syscall; 
0x000000000ffb3c: add [rax], al; add [rax], al; mov eax, 0xaa; syscall; 
0x0000000008f66c: add [rax], al; add [rax], al; mov eax, 0xb; ret; 
0x0000000008b4b4: add [rax], al; add [rax], al; mov eax, 0xba; syscall; 
0x000000000ff11c: add [rax], al; add [rax], al; mov eax, 0xc; syscall; 
0x0000000008c17c: add [rax], al; add [rax], al; mov eax, 0xca; syscall; 
0x000000000f018c: add [rax], al; add [rax], al; mov eax, 0xcb; syscall; 
0x0000000010a32c: add [rax], al; add [rax], al; mov eax, 0xea; syscall; 
0x00000000093f5c: add [rax], al; add [rax], al; mov eax, 0xf5; syscall; 
0x0000000010058c: add [rax], al; add [rax], al; mov eax, 0xffffffff; add rsp, 0x48; ret; 
0x0000000007d1dc: add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x000000001230bc: add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000007c80c: add [rax], al; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000043ffb: add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret; 
0x0000000012f71c: add [rax], al; add [rax], al; mov eax, [rdi+0x20]; ret; 
0x00000000145a6c: add [rax], al; add [rax], al; mov eax, [rdi+0x28]; ret; 
0x0000000007fb7c: add [rax], al; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret; 
0x00000000041e1c: add [rax], al; add [rax], al; mov eax, [rip+0x1ab39e]; ret; 
0x0000000015986c: add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000140df1: add [rax], al; add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x0000000012e216: add [rax], al; add [rax], al; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x0000000007b23e: add [rax], al; add [rax], al; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x000000000840b0: add [rax], al; add [rax], al; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000001377ee: add [rax], al; add [rax], al; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000836e1: add [rax], al; add [rax], al; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x0000000014ef9c: add [rax], al; add [rax], al; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x000000001340da: add [rax], al; add [rax], al; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000145e24: add [rax], al; add [rax], al; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000101373: add [rax], al; add [rax], al; mov qword ptr [rdi+0x8], 0x0; ret; 
0x0000000008fc5c: add [rax], al; add [rax], al; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000084ea7: add [rax], al; add [rax], al; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x0000000010bcea: add [rax], al; add [rax], al; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x00000000108eae: add [rax], al; add [rax], al; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000101c0e: add [rax], al; add [rax], al; mov qword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x000000000ee146: add [rax], al; add [rax], al; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x000000000ee14e: add [rax], al; add [rax], al; mov qword ptr [rsi+0x8], 0x0; ret; 
0x00000000145bdc: add [rax], al; add [rax], al; mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000145be5: add [rax], al; add [rax], al; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000089791: add [rax], al; add [rax], al; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x0000000008607c: add [rax], al; add [rax], al; mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x00000000109d4c: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x0000000010923c: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000f95bc: add [rax], al; add [rax], al; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x0000000006f62c: add [rax], al; add [rax], al; mov r14d, 0x1; jmp rax; 
0x0000000006f614: add [rax], al; add [rax], al; mov r14d, 0x1; mov r11d, 0x1; jmp rax; 
0x000000001454bc: add [rax], al; add [rax], al; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000f2f6c: add [rax], al; add [rax], al; mov r9, rbx; mov r8, rax; call r14; 
0x00000000074a6c: add [rax], al; add [rax], al; mov r9d, 0x1; mov r10d, 0x1; jmp rax; 
0x000000000c5fdc: add [rax], al; add [rax], al; mov rax, 0x2; ret; 
0x000000000c5fec: add [rax], al; add [rax], al; mov rax, 0x3; ret; 
0x000000000c5ffc: add [rax], al; add [rax], al; mov rax, 0x4; ret; 
0x000000000c600c: add [rax], al; add [rax], al; mov rax, 0x5; ret; 
0x000000000c601c: add [rax], al; add [rax], al; mov rax, 0x6; ret; 
0x000000000c602c: add [rax], al; add [rax], al; mov rax, 0x7; ret; 
0x000000000904fc: add [rax], al; add [rax], al; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000c69ac: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x00000000123634: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000008424c: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000014c4ac: add [rax], al; add [rax], al; mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x000000000856cc: add [rax], al; add [rax], al; mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x00000000105644: add [rax], al; add [rax], al; mov rax, [rax+0x60]; ret; 
0x0000000013990c: add [rax], al; add [rax], al; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001454dc: add [rax], al; add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x000000000948bc: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x0000000009483c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x0000000009480c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf6c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862bc: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x0000000009a02c: add [rax], al; add [rax], al; mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x00000000036abc: add [rax], al; add [rax], al; mov rax, [rip+0x1b8c79]; ret; 
0x0000000002debc: add [rax], al; add [rax], al; mov rax, [rip+0x1c1839]; ret; 
0x0000000002deac: add [rax], al; add [rax], al; mov rax, [rip+0x1c1841]; ret; 
0x0000000014ce15: add [rax], al; add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000013f7b4: add [rax], al; add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000010068a: add [rax], al; add [rax], al; mov rax, [rsp-0x50]; ret; 
0x0000000008fcac: add [rax], al; add [rax], al; mov rax, fs:[0x10]; ret; 
0x000000001330ae: add [rax], al; add [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x00000000084dfc: add [rax], al; add [rax], al; mov rax, rdi; ret; 
0x0000000017710c: add [rax], al; add [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000131f5c: add [rax], al; add [rax], al; mov rcx, r15; call rbp; 
0x0000000013ae3e: add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000143965: add [rax], al; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000009a15c: add [rax], al; add [rax], al; mov rdi, rbp; call rax; 
0x0000000014303c: add [rax], al; add [rax], al; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000001596ac: add [rax], al; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b092c: add [rax], al; add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000b093c: add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret; 
0x00000000133a7e: add [rax], al; add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x000000001599bc: add [rax], al; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000015994c: add [rax], al; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000000f9987: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb397: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb2d7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x0000000010a167: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e67: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa437: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa497: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f87: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1f7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a287: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2b7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2e7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x000000000fa467: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f0057: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000010a357: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102bb7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x000000000fa407: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x21; syscall; 
0x0000000010aa77: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010a547: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x33; syscall; 
0x000000000fa587: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fb3c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb307: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f97a7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadc7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadf7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d6737: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x64; syscall; 
0x00000000109fe7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7e87: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7eb7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f17: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f47: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f77: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x78; syscall; 
0x00000000109087: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109da7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a197: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000effc7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000efff7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f0027: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f0087: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00b7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00e7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c47: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c77: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102ca7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109d07: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a0a7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff67: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x00000000100407: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x00000000100437: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102ab7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000108f47: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f17: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000109dd7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109e07: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000010a317: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000001054a7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x00000000105387: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000109e37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109f57: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109fb7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000138f27: add [rax], al; add [rax], al; nop [rax+rax]; ret; 
0x00000000164208: add [rax], al; add [rax], al; nop [rax]; mov [rcx], dl; ret; 
0x000000000b0848: add [rax], al; add [rax], al; nop [rax]; mov [rdi], dl; ret; 
0x000000001091b8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x122; syscall; 
0x00000000138d98: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x1; ret; 
0x000000000c9b88: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x26; syscall; 
0x000000000fe599: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x3; syscall; 
0x000000001012a8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012d8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x4d; syscall; 
0x000000000fad99: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fed68: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x62; syscall; 
0x000000000f96b8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000ff078: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x8d; syscall; 
0x00000000109cd8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x9e; syscall; 
0x000000000fff39: add [rax], al; add [rax], al; nop [rax]; mov eax, 0xa3; syscall; 
0x00000000109028: add [rax], al; add [rax], al; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000099e28: add [rax], al; add [rax], al; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000041468: add [rax], al; add [rax], al; nop [rax]; mov rax, 0xf; syscall; 
0x00000000084dc8: add [rax], al; add [rax], al; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x000000000af1f8: add [rax], al; add [rax], al; nop [rax]; mov rax, rdi; ret; 
0x00000000086628: add [rax], al; add [rax], al; nop [rax]; ret; 
0x000000000a5169: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret; 
0x00000000089468: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret; 
0x0000000017c4db: add [rax], al; add [rax], al; nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4cb: add [rax], al; add [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000b086b: add [rax], al; add [rax], al; nop; mov [rdi-0x1], edx; ret; 
0x000000000b087b: add [rax], al; add [rax], al; nop; mov [rdi], edx; ret; 
0x0000000014389b: add [rax], al; add [rax], al; nop; mov eax, 0x2; ret; 
0x0000000010b12b: add [rax], al; add [rax], al; nop; mov eax, 0x44; syscall; 
0x00000000041a9b: add [rax], al; add [rax], al; nop; mov eax, 0x83; syscall; 
0x00000000102a8b: add [rax], al; add [rax], al; nop; mov eax, 0xb; syscall; 
0x0000000014ef8b: add [rax], al; add [rax], al; nop; mov eax, 0xffffffff; ret; 
0x000000000c5fcb: add [rax], al; add [rax], al; nop; mov rax, 0x1; ret; 
0x00000000115cdb: add [rax], al; add [rax], al; nop; ret; 
0x00000000145a7b: add [rax], al; add [rax], al; nop; xor eax, eax; ret; 
0x0000000017c30b: add [rax], al; add [rax], al; nop; xor rax, rax; ret; 
0x0000000004058d: add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret; 
0x0000000004055d: add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000009d7fa: add [rax], al; add [rax], al; pop rbp; pop r12; ret; 
0x00000000141f74: add [rax], al; add [rax], al; pop rbp; ret; 
0x0000000003726a: add [rax], al; add [rax], al; pop rbx; ret; 
0x000000000d6f2c: add [rax], al; add [rax], al; pop rdi; mov eax, 0x3a; syscall; 
0x0000000002d67c: add [rax], al; add [rax], al; ret; 
0x00000000123862: add [rax], al; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000087e71: add [rax], al; add [rax], al; syscall; 
0x0000000018cbec: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbdc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6dc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6cc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6ac: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbfc: add [rax], al; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d12c: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d35c: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x00000000188cac: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188c7c: add [rax], al; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000187fac: add [rax], al; add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001755ee: add [rax], al; add [rax], al; vzeroupper; ret; 
0x0000000016421a: add [rax], al; add [rax], al; xchg ax, ax; mov [rcx], dx; ret; 
0x000000000b085a: add [rax], al; add [rax], al; xchg ax, ax; mov [rdi], dx; ret; 
0x0000000010a25a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000f9dfa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x15; syscall; 
0x000000000c9b5a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x24; syscall; 
0x00000000093a9a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x3; syscall; 
0x0000000010b2ea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x43; syscall; 
0x000000000fb36a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2aa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a13a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x63; syscall; 
0x0000000010905a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109d7a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7d; syscall; 
0x0000000010926a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x87; syscall; 
0x000000000ff03a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x8c; syscall; 
0x00000000102c1a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x95; syscall; 
0x000000001003da: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x99; syscall; 
0x00000000109eca: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a07a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb4; syscall; 
0x0000000010541a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc2; syscall; 
0x0000000010547a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc3; syscall; 
0x0000000010535a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc4; syscall; 
0x0000000010550a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f2a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xfe; syscall; 
0x00000000084daa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000d2e7a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, [rdi]; ret; 
0x00000000084dea: add [rax], al; add [rax], al; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x0000000018b64a: add [rax], al; add [rax], al; xchg ax, ax; mov rax, rdi; ret; 
0x0000000002d15a: add [rax], al; add [rax], al; xchg ax, ax; ret; 
0x000000000c4b1a: add [rax], al; add [rax], al; xchg ax, ax; xor eax, eax; ret; 
0x000000000c5a7a: add [rax], al; add [rax], al; xchg ax, ax; xor rax, rax; ret; 
0x0000000008e310: add [rax], al; add [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x000000000ed54c: add [rax], al; add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x0000000009a873: add [rax], al; add [rax], al; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x00000000041b98: add [rax], al; add [rax], al; xor eax, eax; ret; 
0x000000001701bc: add [rax], al; add [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000002d1fc: add [rax], al; add [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000b4cec: add [rax], al; add [rax], al; xor edx, edx; mov eax, edx; ret; 
0x0000000006f63c: add [rax], al; add [rax], al; xor r13d, r13d; mov edx, 0x1; jmp rax; 
0x0000000014575c: add [rax], al; add [rax], al; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000080ab4: add [rax], al; add [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x000000000df1cc: add [rax], al; add [rax], al; xor r9d, r9d; mov eax, r9d; ret; 
0x000000000c5d8c: add [rax], al; add [rax], al; xor rax, rax; ret; 
0x0000000008a97f: add [rax], al; add [rax], bh; cmove eax, edx; ret; 
0x0000000009b2d1: add [rax], al; add [rax], dl; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1b1: add [rax], al; add [rax], dl; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac41: add [rax], al; add [rax], dl; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x00000000143029: add [rax], al; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x0000000014301e: add [rax], al; add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000142fb7: add [rax], al; add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x0000000010b16b: add [rax], al; add [rbp+0x18], dh; mov eax, 0x47; syscall; 
0x000000000fcee7: add [rax], al; add [rbp+0x31], al; in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x0000000006f63d: add [rax], al; add [rbp+0x31], al; in eax, dx; mov edx, 0x1; jmp rax; 
0x000000000df1cd: add [rax], al; add [rbp+0x31], al; leave; mov eax, r9d; ret; 
0x00000000030e9d: add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x000000000883b6: add [rax], al; add [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x00000000192523: add [rax], al; add [rbp+0x39], cl; ret; 
0x000000001090c8: add [rax], al; add [rbp+0x411975c0], al; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x00000000041e80: add [rax], al; add [rbp+0x414975c0], al; mov edx, 0x8; mov eax, 0x80; syscall; 
0x0000000002d60f: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x0000000005a5bb: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000004187c: add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x000000000ff398: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x127; syscall; 
0x000000000ff448: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000d6888: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0xf7; syscall; 
0x00000000149f97: add [rax], al; add [rbp+0x482b78c0], al; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000408ff: add [rax], al; add [rbp+0xc], dh; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000139d40: add [rax], al; add [rbp+rcx*4+0x4c], cl; and al, 0x30; call qword ptr [rax]; 
0x000000000e7db5: add [rax], al; add [rbp+rcx*4+0x65], cl; or [rax-0x77], cl; ret; 
0x000000001204ed: add [rax], al; add [rbp+rcx*4-0x43], cl; sar bl, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000125602: add [rax], al; add [rbp+rcx*4-0x74], cl; ret; 
0x00000000085bc7: add [rax], al; add [rbp+rcx+0x48], dh; mov eax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x0000000012275d: add [rax], al; add [rbp-0x1f7cf6b9], cl; clc; add eax, 0x10; ret; 
0x0000000002d14e: add [rax], al; add [rbp-0x3c], dh; ret; 
0x00000000087ca6: add [rax], al; add [rbp-0x3dbaf040], al; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000873a2: add [rax], al; add [rbp-0x3dbaf040], al; ret; 
0x000000000f9b84: add [rax], al; add [rbp-0x47ba8a40], al; add [rcx], eax; add [rax], al; syscall; 
0x000000000ff2f5: add [rax], al; add [rbp-0x47eb8a40], al; adc al, 0x0; add [rax], al; syscall; 
0x000000000ff255: add [rax], al; add [rbp-0x47eb8a40], al; adc eax, [rax]; add [rax], al; syscall; 
0x000000000f9d35: add [rax], al; add [rbp-0x47eb8a40], al; add [rax], eax; add [rax], al; syscall; 
0x000000000fa355: add [rax], al; add [rbp-0x47eb8a40], al; add eax, [rax]; add [rax], al; syscall; 
0x000000000d69b5: add [rax], al; add [rbp-0x47eb8a40], al; and al, [rax]; add [rax], al; syscall; 
0x00000000102af5: add [rax], al; add [rbp-0x47eb8a40], al; sbb al, [rax]; add [rax], al; syscall; 
0x0000000010a485: add [rax], al; add [rbp-0x47eb8a40], al; sub al, [rax]; add [rax], al; syscall; 
0x0000000010a3b5: add [rax], al; add [rbp-0x47eb8a40], al; sub eax, [rax]; add [rax], al; syscall; 
0x00000000109575: add [rax], al; add [rbp-0x47eb8a40], al; xor [rcx], al; add [rax], al; syscall; 
0x000000000f7f88: add [rax], al; add [rbp-0x47ee8a40], al; adc [rax], eax; add [rax], al; syscall; 
0x00000000109358: add [rax], al; add [rbp-0x47ee8a40], al; adc al, 0x1; add [rax], al; syscall; 
0x000000000f8038: add [rax], al; add [rbp-0x47ee8a40], al; adc al, [rax]; add [rax], al; syscall; 
0x000000001094b8: add [rax], al; add [rbp-0x47ee8a40], al; adc eax, [rcx]; add [rax], al; syscall; 
0x0000000010ad08: add [rax], al; add [rbp-0x47ee8a40], al; and [rcx], al; add [rax], al; syscall; 
0x000000000d2298: add [rax], al; add [rbp-0x47ee8a40], al; out 0x0, al; add [rax], al; syscall; 
0x0000000010a968: add [rax], al; add [rbp-0x47ee8a40], al; sub al, 0x0; add [rax], al; syscall; 
0x0000000010adb8: add [rax], al; add [rbp-0x47ee8a40], al; sub eax, [rcx]; add [rax], al; syscall; 
0x0000000010ae68: add [rax], al; add [rbp-0x47ee8a40], al; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000008febd: add [rax], al; add [rbp-0x76f38701], al; cmp eax, 0x1648e6; xor eax, eax; ret; 
0x000000000554bd: add [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000331ce: add [rax], al; add [rbp-0x77], cl; ret; 
0x0000000008ebf6: add [rax], al; add [rbp-0x7b], al; inc dword ptr [rdi+rcx+0x45]; jmp far fword ptr [rax-0xff88afe]; 
0x000000000e728b: add [rax], al; add [rbp-0x7b], al; ror byte ptr [rdi], 0x8e; ret far; 
0x00000000186e8e: add [rax], al; add [rbx+0x14840c0], al; clc; ret; 
0x000000001705c8: add [rax], al; add [rbx+0x14840c0], al; clc; vzeroupper; ret; 
0x0000000007fb7d: add [rax], al; add [rbx+0x2002507], cl; add [rax], al; ret; 
0x000000000824bd: add [rax], al; add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000000b058d: add [rax], al; add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000b0ebd: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000af8bd: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x0000000016995d: add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x000000000e48a0: add [rax], al; add [rbx+0x5b010447], al; pop rbp; pop r12; ret; 
0x00000000041fe2: add [rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000002d475: add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000076727: add [rax], al; add [rbx+0x5d], bl; ret; 
0x000000000806fd: add [rax], al; add [rbx+0x5e8c107], cl; and eax, 0x1; ret; 
0x00000000087a92: add [rax], al; add [rbx+0x67602fe], al; ret; 
0x0000000008778d: add [rax], al; add [rbx+0x6890447], cl; xor eax, eax; ret; 
0x000000000f8f02: add [rax], al; add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000d20bd: add [rax], al; add [rbx+0xb7401fe], al; xor eax, eax; ret; 
0x00000000087eed: add [rax], al; add [rbx+0xb7420ff], al; ret; 
0x0000000008fc8d: add [rax], al; add [rbx+0xb7701fe], al; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000087ecd: add [rax], al; add [rbx+0xb7701fe], al; mov [rdi], esi; xor eax, eax; ret; 
0x000000001597fd: add [rax], al; add [rbx+0xe8b0156], cl; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x0000000015978d: add [rax], al; add [rbx+0xe8b0256], cl; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x0000000015971d: add [rax], al; add [rbx+0xe8b0356], cl; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x0000000017b888: add [rax], al; add [rbx+rax-0x9], bh; fadd st, st(3); ret; 
0x0000000010440d: add [rax], al; add [rbx+rcx*4+0x42], cl; adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret; 
0x00000000042e9d: add [rax], al; add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x000000000d1b22: add [rax], al; add [rbx+rcx*4+0x74], cl; ret; 
0x0000000004306d: add [rax], al; add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret; 
0x000000000f269b: add [rax], al; add [rbx+rcx*4-0x73], cl; cmp dh, 0xff; jmp far fword ptr [rdx]; 
0x000000000e0362: add [rax], al; add [rbx-0x157cfe15], al; add [rax+0x63], ecx; ret; 
0x000000000e0363: add [rax], al; add [rbx-0x157cfe15], al; add [rax+0x63], ecx; ret; 
0x00000000085b7e: add [rax], al; add [rbx-0x17], bl; sbb [rdi-0x6], esp; jmp qword ptr [rsi+0xf]; 
0x00000000140c27: add [rax], al; add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000131fc3: add [rax], al; add [rbx-0x3d], bl; lea rdi, [rbx+0x8]; call rsi; 
0x0000000008e785: add [rax], al; add [rbx-0x3d], bl; nop [rax+rax]; ret; 
0x00000000105319: add [rax], al; add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x0000000013a64d: add [rax], al; add [rbx-0x3f7acfb9], cl; jne short 0x000000000013a6b0; mov dword ptr [rsi], 0x0; ret; 
0x00000000145b3d: add [rax], al; add [rbx-0x47fbd7b9], al; add [rax], eax; add [rax], al; ret; 
0x0000000008779d: add [rax], al; add [rbx-0x73ef7b9], cl; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x00000000140c04: add [rax], al; add [rbx-0x7637f100], cl; ror byte ptr [rcx-0x77], 0x0; mov eax, 0x1; ret; 
0x00000000122f5a: add [rax], al; add [rbx-0x77bffe12], al; ja short 0x0000000000122f65; ret; 
0x000000000fc7dc: add [rax], al; add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret; 
0x0000000006c67d: add [rax], al; add [rbx-0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x0000000009e386: add [rax], al; add [rbx-0x7ab7dbbc], cl; ror byte ptr [rdi], 0x85; ret far; 
0x000000000d7c05: add [rax], al; add [rbx-0x7af0fd08], al; ret far; 
0x000000000f2089: add [rax], al; add [rbx-0x7bf00208], al; ret far; 
0x0000000014a4dd: add [rax], al; add [rbx-0x7c99fa17], al; stc; add esi, [rsi+0x7]; ret; 
0x0000000011226d: add [rax], al; add [rbx-0x7cb7c7ad], cl; ret; 
0x000000000b696d: add [rax], al; add [rbx-0x7cb7fb85], cl; ret; 
0x00000000174ba1: add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x0000000006bbdd: add [rax], al; add [rbx-0x88f63], cl; jmp far fword ptr [rcx]; 
0x00000000071b74: add [rax], al; add [rbx-0x8ef43], al; call qword ptr [rax]; 
0x000000000d118d: add [rax], al; add [rbx-0xf743], cl; dec dword ptr [rdi]; ret; 
0x0000000010ce8d: add [rax], al; add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000004e809: add [rax], al; add [rcx+0x1], cl; ret; 
0x00000000190f35: add [rax], al; add [rcx+0x29], cl; ret far; 
0x0000000016426d: add [rax], al; add [rcx+0x3518911], cl; ret; 
0x00000000121c6d: add [rax], al; add [rcx+0x39], al; ret far; 
0x000000000e92c9: add [rax], al; add [rcx+0x39], al; ret; 
0x0000000002d5be: add [rax], al; add [rcx+0x5c], al; pop r13; pop r14; jmp rax; 
0x000000001156a1: add [rax], al; add [rcx+0x5c], al; pop rbp; ret; 
0x00000000073983: add [rax], al; add [rcx+0x63], cl; add al, 0x83; add rax, rcx; jmp rax; 
0x00000000088638: add [rax], al; add [rcx+0xcab8de], cl; add [rax], al; syscall; 
0x000000000870ac: add [rax], al; add [rcx+0xeab8c7], cl; add [rax], al; mov esi, [r9+0x10]; syscall; 
0x00000000140bc7: add [rax], al; add [rcx+0xf], al; adc [rax], ebx; ret; 
0x00000000140347: add [rax], al; add [rcx+0xf], al; adc [rax], ecx; ret; 
0x00000000140357: add [rax], al; add [rcx+0xf], al; adc [rax], edx; ret; 
0x00000000140ba7: add [rax], al; add [rcx+0xf], al; adc [rax], esp; ret; 
0x00000000070cca: add [rax], al; add [rcx+0xf], al; mov dh, 0x47; or al, 0x83; ret; 
0x00000000050149: add [rax], al; add [rcx+0xf], al; ret; 
0x0000000009e485: add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret; 
0x0000000003c70f: add [rax], al; add [rcx+0xf], cl; ret far; 
0x000000000fe1a9: add [rax], al; add [rcx+rax*2+0x3d], dh; add [rax+0xa740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000093dce: add [rax], al; add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x00000000092c57: add [rax], al; add [rcx+rcx*4-0x10], al; syscall; 
0x00000000143966: add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000088ce9: add [rax], al; add [rcx+rcx*4-0x11], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000078172: add [rax], al; add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000fdabe: add [rax], al; add [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x00000000092ffc: add [rax], al; add [rcx+rcx*4-0x18], al; syscall; 
0x0000000013ae3f: add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000014be6b: add [rax], al; add [rcx+rcx*4-0x19], cl; call rax; 
0x0000000008f499: add [rax], al; add [rcx+rcx*4-0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000007cd85: add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [r13+0x80]; 
0x0000000007cf83: add [rax], al; add [rcx+rcx*4-0x1], cl; call qword ptr [rbp+0x80]; 
0x0000000008716c: add [rax], al; add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x00000000077a33: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000078f15: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078daf: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000f98af: add [rax], al; add [rcx+rcx*4-0x20], al; pop r12; pop r13; ret; 
0x0000000012fefc: add [rax], al; add [rcx+rcx*4-0x20], al; syscall; 
0x0000000007fdc8: add [rax], al; add [rcx+rcx*4-0x30], al; syscall; 
0x0000000003f85b: add [rax], al; add [rcx+rcx*4-0x30], cl; ret; 
0x00000000088272: add [rax], al; add [rcx+rcx*4-0x31], cl; mov eax, 0xca; syscall; 
0x00000000088fd2: add [rax], al; add [rcx+rcx*4-0x31], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f943: add [rax], al; add [rcx+rcx*4-0x38], al; ret; 
0x00000000086dec: add [rax], al; add [rcx+rcx*4-0x38], al; syscall; 
0x00000000088949: add [rax], al; add [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x000000000902c4: add [rax], al; add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall; 
0x00000000101818: add [rax], al; add [rcx+rcx*4-0x40], al; add rsp, 0x8; ret; 
0x00000000036beb: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret; 
0x000000000c7629: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x0000000007fb3b: add [rax], al; add [rcx+rcx*4-0x40], al; ret; 
0x00000000089999: add [rax], al; add [rcx+rcx*4-0x40], al; syscall; 
0x000000001330af: add [rax], al; add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x00000000131f5d: add [rax], al; add [rcx+rcx*4-0x7], cl; call rbp; 
0x000000000985c3: add [rax], al; add [rcx+rdi+0x25], cl; ret; 
0x00000000103aff: add [rax], al; add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x00000000056ff3: add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x000000000842cd: add [rax], al; add [rcx-0x17f3db8c], cl; xchg edi, eax; ret; 
0x000000000886c2: add [rax], al; add [rcx-0x3076b322], cl; mov eax, 0xca; syscall; 
0x00000000104e1d: add [rax], al; add [rcx-0x38c6b708], cl; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x0000000004cc10: add [rax], al; add [rcx-0x39], cl; ret; 
0x00000000104e81: add [rax], al; add [rcx-0x3b7cb728], cl; or byte ptr [rax-0x77], 0xe2; syscall; 
0x0000000008ae60: add [rax], al; add [rcx-0x3c3fcefa], cl; nop [rax+rax]; mov eax, 0x3; ret; 
0x000000000f85dd: add [rax], al; add [rcx-0x3fcefb89], cl; ret; 
0x0000000006f62d: add [rax], al; add [rcx-0x42], al; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f61b: add [rax], al; add [rcx-0x45], al; add [rax], eax; add [rax], al; jmp rax; 
0x00000000074a73: add [rax], al; add [rcx-0x46], al; add [rax], eax; add [rax], al; jmp rax; 
0x00000000142468: add [rax], al; add [rcx-0x73], cl; jb short 0x0000000000142477; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x000000000870b3: add [rax], al; add [rcx-0x75], al; jno short 0x00000000000870ca; syscall; 
0x0000000008711b: add [rax], al; add [rcx-0x75], al; jno short 0x0000000000087132; syscall; 
0x00000000140969: add [rax], al; add [rcx-0x75], cl; jo short 0x00000000001409b9; mov edi, ebp; call qword ptr [rax+0x20]; 
0x0000000014574a: add [rax], al; add [rcx-0x76b7d7b9], cl; ja short 0x000000000014576c; mov eax, r8d; ret; 
0x00000000122787: add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x00000000122fcc: add [rax], al; add [rcx-0x77], al; ret far; 
0x00000000059326: add [rax], al; add [rcx-0x77], al; ret; 
0x000000000e06fd: add [rax], al; add [rcx-0x77], al; rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret; 
0x0000000003e92d: add [rax], al; add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret; 
0x0000000019188c: add [rax], al; add [rcx-0x77], cl; ret; 
0x0000000003c56f: add [rax], al; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000004f0cf: add [rax], al; add [rcx-0x7d], cl; ret; 
0x00000000123cef: add [rax], al; add [rcx-0x877b], cl; jmp qword ptr [rsi+0x44]; 
0x000000000350ad: add [rax], al; add [rcx-0xa], al; ret; 
0x000000001743f7: add [rax], al; add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x000000000f11d0: add [rax], al; add [rcx], al; mov edx, 0x2; cmove eax, edx; ret; 
0x000000000c78dd: add [rax], al; add [rcx], bh; ret far; 
0x000000000c0b05: add [rax], al; add [rcx], bh; ret; 
0x000000000384aa: add [rax], al; add [rcx], ch; ret far; 
0x000000000ca4e5: add [rax], al; add [rcx], ch; shr dword ptr [rcx], 0x1; enter 0x4789, 0x18; ret; 
0x000000000e3444: add [rax], al; add [rcx], dh; idiv byte ptr [rcx]; ret far; 
0x00000000076bff: add [rax], al; add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x000000000d2c39: add [rax], al; add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x0000000008042b: add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000003a7fd: add [rax], al; add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret; 
0x000000000818b9: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x00000000087805: add [rax], al; add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x000000000008787e; ret; 
0x000000000e08d5: add [rax], al; add [rcx], dh; sar byte ptr [rax], 0xe; je 0x00000000000e083d; ret; 
0x0000000011d5c6: add [rax], al; add [rcx], dh; shr al, 0x70; ret far; 
0x00000000043b0c: add [rax], al; add [rcx], dh; test byte ptr [rcx+rcx*4-0x31], 0x41; call rbp; 
0x000000001870ca: add [rax], al; add [rdi+0x11], dh; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x0000000017ec37: add [rax], al; add [rdi+0x14], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x00000000084e79: add [rax], al; add [rdi+0x16b88e05], al; add [rbx+0x97f01f8], al; ret; 
0x00000000082f81: add [rax], al; add [rdi+0x16d78605], al; add [rbx+0x317f01f8], al; add rsp, 0x8; ret; 
0x000000000783c9: add [rax], al; add [rdi+0x1782fe05], al; add [rbx+0x97f01f8], al; ret; 
0x0000000008a029: add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x0000000005c2f7: add [rax], al; add [rdi+0x1f88307], al; jg short 0x000000000005c308; ret; 
0x00000000145a5e: add [rax], al; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x000000000c57e2: add [rax], al; add [rdi+0x2], bh; neg eax; ret; 
0x000000001285de: add [rax], al; add [rdi+0x5], bh; ret; 
0x00000000156f98: add [rax], al; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9; 
0x0000000017ebe7: add [rax], al; add [rdi+0x6d], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017e322: add [rax], al; add [rdi+0x9], bh; neg eax; ret; 
0x0000000010277f: add [rax], al; add [rdi+0xf38e005], al; add [rbx+0x337f01f8], al; pop rbp; ret; 
0x00000000128625: add [rax], al; add [rdi-0x42], bh; mov eax, 0x1; ret; 
0x000000000d6f2d: add [rax], al; add [rdi-0x48], bl; cmp al, [rax]; add [rax], al; syscall; 
0x00000000040a71: add [rax], al; add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret; 
0x00000000133a7f: add [rax], al; add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x00000000140bb7: add [rax], al; add [rdi], cl; adc [rdi+0x20], edx; ret; 
0x00000000140333: add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x0000000013dc60: add [rax], al; add [rdi], cl; adc [rdx], ecx; ret; 
0x000000000f8e5a: add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x00000000142bee: add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000000942d7: add [rax], al; add [rdi], cl; adc [rsp+0x50], eax; syscall; 
0x00000000142f10: add [rax], al; add [rdi], cl; adc [rsp+0xb8], ecx; call rax; 
0x00000000142fba: add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x0000000008a355: add [rax], al; add [rdi], cl; add eax, 0xfffc41e9; call qword ptr [rax+0x2444894c]; 
0x00000000140c67: add [rax], al; add [rdi], cl; enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x00000000140b6f: add [rax], al; add [rdi], cl; enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x0000000015994d: add [rax], al; add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret; 
0x000000001599bd: add [rax], al; add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret; 
0x0000000003e8e5: add [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000113bad: add [rax], al; add [rdi], cl; mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x0000000003dc7d: add [rax], al; add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000006e6a1: add [rax], al; add [rdi], cl; mov dh, 0x58; add [rax-0x7bf0d505], eax; call qword ptr [rdx]; 
0x0000000011330d: add [rax], al; add [rdi], cl; mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x0000000003317d: add [rax], al; add [rdi], cl; mov dh, 0xc; xor al, [rcx-0x77]; ret far; 
0x00000000186ead: add [rax], al; add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x000000000a50dd: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a50ed: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000a50cd: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x00000000186e9d: add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x000000001705dd: add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000a4c1d: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c0d: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bfd: add [rax], al; add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000cfde3: add [rax], al; add [rdi], cl; ret; 
0x0000000013fbd8: add [rax], al; add [rdi], cl; xchg edi, eax; ret; 
0x0000000007816d: add [rax], al; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000829c2: add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000007d89f: add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000f11d1: add [rax], al; add [rdx+0x2], edi; cmove eax, edx; ret; 
0x000000000b38dd: add [rax], al; add [rdx+0x30178816], cl; in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000d83d9: add [rax], al; add [rdx+0x7d00], bh; cmove rax, rdx; ret; 
0x000000000d83bf: add [rax], al; add [rdx+0xfde8], bh; cmove rax, rdx; ret; 
0x00000000045cc8: add [rax], al; add [rdx+rdx*8+0x48c1450f], al; add esp, 0x8; ret; 
0x000000000947a5: add [rax], al; add [rdx], al; jbe short 0x00000000000947b0; ret; 
0x000000000b4fa1: add [rax], al; add [rdx], al; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x000000000c7343: add [rax], al; add [rdx], ch; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x000000000fe740: add [rax], al; add [rip+0x410000], dil; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x0000000008e20e: add [rax], al; add [rsi+0x1], bh; mov eax, 0xca; syscall; 
0x000000000feb1e: add [rax], al; add [rsi+0x5409], bh; mov eax, 0x10; syscall; 
0x000000000feb53: add [rax], al; add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000948d6: add [rax], al; add [rsi+0x5], dh; ret; 
0x000000000867e7: add [rax], al; add [rsi+0x80], bh; mov eax, 0xca; syscall; 
0x0000000014eaa5: add [rax], al; add [rsi+0x80], bh; syscall; 
0x000000000898ea: add [rax], al; add [rsi+0x81], bh; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x000000000868a5: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x0000000012fef7: add [rax], al; add [rsi+0x81], bh; mov eax, r12d; syscall; 
0x00000000092ff7: add [rax], al; add [rsi+0x81], bh; mov eax, r13d; syscall; 
0x0000000013f18c: add [rax], al; add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000a4ffa: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a4ff9: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x0000000007b1a9: add [rax], al; add [rsi-0x1], bh; call qword ptr [rax+0x18]; 
0x0000000008201f: add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x0000000016421b: add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x0000000016424b: add [rax], al; add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000b085b: add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x000000000b088b: add [rax], al; add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000009045b: add [rax], al; add [rsi-0x70], ah; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000af88b: add [rax], al; add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a25b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x134; syscall; 
0x000000000f9dfb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x15; syscall; 
0x000000000c9b5b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x24; syscall; 
0x00000000093a9b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x3; syscall; 
0x0000000010b2eb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x43; syscall; 
0x000000000fb36b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x57; syscall; 
0x000000000fb2ab: add [rax], al; add [rsi-0x70], ah; mov eax, 0x58; syscall; 
0x0000000010a13b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x63; syscall; 
0x0000000010905b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x7a; syscall; 
0x00000000109d7b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x7d; syscall; 
0x0000000010926b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x87; syscall; 
0x000000000ff03b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x8c; syscall; 
0x00000000102c1b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x95; syscall; 
0x000000001003db: add [rax], al; add [rsi-0x70], ah; mov eax, 0x99; syscall; 
0x00000000109ecb: add [rax], al; add [rsi-0x70], ah; mov eax, 0xb1; syscall; 
0x0000000010a07b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xb4; syscall; 
0x0000000010541b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc2; syscall; 
0x0000000010547b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc3; syscall; 
0x0000000010535b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc4; syscall; 
0x0000000010550b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc5; syscall; 
0x00000000109f2b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xfe; syscall; 
0x00000000084dab: add [rax], al; add [rsi-0x70], ah; mov eax, 0xffffffff; ret; 
0x000000000fe82b: add [rax], al; add [rsi-0x70], ah; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000d2e7b: add [rax], al; add [rsi-0x70], ah; mov eax, [rdi]; ret; 
0x00000000117d0b: add [rax], al; add [rsi-0x70], ah; mov eax, edi; bswap eax; ret; 
0x000000000fe7cb: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000010a04b: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a10b: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053eb: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000084deb: add [rax], al; add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret; 
0x0000000018b64b: add [rax], al; add [rsi-0x70], ah; mov rax, rdi; ret; 
0x0000000004076b: add [rax], al; add [rsi-0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000002d15b: add [rax], al; add [rsi-0x70], ah; ret; 
0x0000000018dc0b: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de7b: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018723b: add [rax], al; add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b38cb: add [rax], al; add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c4b1b: add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000c5a7b: add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret; 
0x0000000013dcc2: add [rax], al; add [rsi-0x77], ah; insb [rdi], dx; mov eax, 0x1; ret; 
0x000000000be366: add [rax], al; add [rsp+rax+0x44], dh; mov eax, eax; ret; 
0x00000000110e8f: add [rax], al; add ah, [rcx]; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x000000000df0c4: add [rax], al; add al, 0x0; add al, ch; xchg edx, eax; ret; 
0x0000000013dba0: add [rax], al; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x00000000142f0d: add [rax], al; add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm1; call rax; 
0x00000000117d41: add [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000012acd9: add [rax], al; add al, ch; iretd; fdivp st(7), st; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000f59d3: add [rax], al; add al, ch; jge short 0x00000000000f5a42; dec dword ptr [rcx-0x77]; ret; 
0x0000000014de69: add [rax], al; add al, ch; jmp rbx; 
0x0000000014a3af: add [rax], al; add al, ch; jns short 0x000000000014a37a; clc; jmp qword ptr [rsi+0xf]; 
0x0000000005b666: add [rax], al; add al, ch; mov [0xd8c48148000015], al; add [rax], al; ret; 
0x0000000007a496: add [rax], al; add al, ch; mov [0xd8c48148fffea0], al; add [rax], al; ret; 
0x00000000094912: add [rax], al; add al, ch; mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x000000001178ee: add [rax], al; add al, ch; mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x000000000c179a: add [rax], al; add al, ch; outsb dx, [rsi]; ret; 
0x0000000005611d: add [rax], al; add al, ch; ret far; 
0x0000000006e475: add [rax], al; add al, ch; ret; 
0x0000000007a6f9: add [rax], al; add al, ch; sysenter; 
0x0000000008b18d: add [rax], al; add al, dh; cmpxchg [rsp-0x8], rdx; ret; 
0x0000000005217f: add [rax], al; add bh, al; add al, [rdx]; sar bh, 0xff; ret; 
0x00000000071590: add [rax], al; add bh, al; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000013dbaa: add [rax], al; add bh, bh; loope 0x000000000013db40; ret; 
0x0000000007720d: add [rax], al; add bh, bh; loopne 0x000000000007725b; mov eax, 0xffffffff; ret; 
0x000000000c713a: add [rax], al; add bh, dh; fisttp dword ptr [rax+0x63], st; ret; 
0x000000000e0843: add [rax], al; add bh, dh; ret; 
0x000000000d91fa: add [rax], al; add bl, al; mov eax, 0xffffffff; ret; 
0x000000000d9246: add [rax], al; add bl, al; nop [rax+rax]; call qword ptr [rdx+0x40]; 
0x0000000013a713: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a703: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6f3: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000013ad42: add [rax], al; add bl, al; nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000008f662: add [rax], al; add bl, al; nop [rax+rax]; mov eax, 0xb; ret; 
0x000000000c5fd4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000c5fe4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000c5ff4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000c6004: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000c6014: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000c6024: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 0x7; ret; 
0x0000000008fca2: add [rax], al; add bl, al; nop [rax+rax]; mov rax, fs:[0x10]; ret; 
0x0000000008661d: add [rax], al; add bl, al; nop [rax+rax]; nop [rax]; ret; 
0x00000000099e12: add [rax], al; add bl, al; nop [rax+rax]; ret; 
0x000000001055b3: add [rax], al; add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x00000000138da2: add [rax], al; add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x0000000013ab20: add [rax], al; add bl, al; nop [rax]; lea rdx, [rip+0xb2071]; jmp qword ptr [rdx+rax*8]; 
0x0000000008b4ad: add [rax], al; add bl, al; nop [rax]; mov eax, 0xba; syscall; 
0x00000000145a65: add [rax], al; add bl, al; nop [rax]; mov eax, [rdi+0x28]; ret; 
0x0000000014c29d: add [rax], al; add bl, al; nop [rax]; xor eax, eax; ret; 
0x00000000140c8b: add [rax], al; add bl, al; nop; xor eax, eax; ret; 
0x0000000009a1e2: add [rax], al; add bl, al; ret; 
0x0000000018d34b: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000185f7e: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d9cc: add [rax], al; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000122f6a: add [rax], al; add bl, al; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x00000000040261: add [rax], al; add bl, bl; insb [rdi], dx; and al, 0xe8; ret; 
0x0000000014752d: add [rax], al; add bl, ch; fdivr st, dword ptr [rax-0x1]; ret; 
0x0000000008b4ea: add [rax], al; add bl, ch; mov cl, 0x90; ret; 
0x000000000cd4f9: add [rax], al; add bl, ch; mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x00000000041b79: add [rax], al; add bl, ch; ret far; 
0x000000000b897b: add [rax], al; add bl, ch; ret; 
0x00000000185d0f: add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x0000000018cbed: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbdd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6dd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6cd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6ad: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbfd: add [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d12d: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d35d: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d0cf: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000188cad: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188c7d: add [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000000b4af5: add [rax], al; add bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x000000000b092d: add [rax], al; add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000b093d: add [rax], al; add bl, dh; movq [rdi], mm0; ret; 
0x000000000f8ee2: add [rax], al; add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000132d48: add [rax], al; add bl, dl; loopne 0x0000000000132d45; rol byte ptr [rcx-0x80], 0x1; jmp qword ptr [rcx]; 
0x000000000c1b6e: add [rax], al; add byte ptr [rcx+rcx*4+0x42], 0x4; mov [rdx], eax; xor eax, eax; ret; 
0x000000000b4fa2: add [rax], al; add cl, [rax-0x73]; add eax, 0x10924; cmovne rax, rdx; ret; 
0x000000000eb02d: add [rax], al; add cl, al; call far fword ptr [rax]; 
0x000000000f6fd2: add [rax], al; add cl, ch; cmp edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001364e2: add [rax], al; add cl, ch; fdivr st, st(7); jmp qword ptr [rsi+0xf]; 
0x00000000074b2a: add [rax], al; add cl, ch; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000f7de7: add [rax], al; add cl, ch; idiv edi; call qword ptr [rax+0x49ff894c]; 
0x0000000009192d: add [rax], al; add cl, ch; imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x0000000014388d: add [rax], al; add cl, ch; imul edi, edx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000001088dd: add [rax], al; add cl, ch; imul edi, esi, 0xffffffff; jmp far fword ptr [rcx+0x400000]; 
0x00000000072057: add [rax], al; add cl, ch; imul edi, esp, 0xffffffff; call qword ptr [rax+0x4cc98949]; 
0x000000001359c2: add [rax], al; add cl, ch; jrcxz 0x00000000001359c8; jmp qword ptr [rsi+0xf]; 
0x000000001386f2: add [rax], al; add cl, ch; mov dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000014ee4d: add [rax], al; add cl, ch; or ecx, edi; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000d6e1f: add [rax], al; add cl, ch; paddw mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x00000000134479: add [rax], al; add cl, ch; psubb mm7, mm7; jmp qword ptr [rsi+0x66]; 
0x000000000c16e2: add [rax], al; add cl, ch; push rsi; cli; jmp qword ptr [rsi+0xf]; 
0x0000000003608a: add [rax], al; add cl, ch; ret far; 
0x00000000064956: add [rax], al; add cl, ch; ret; 
0x0000000009753a: add [rax], al; add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000182e0f: add [rax], al; add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001386d9: add [rax], al; add cl, ch; scasd [rdi]; mov ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x0000000006836a: add [rax], al; add cl, ch; scasd [rdi]; ret; 
0x00000000088158: add [rax], al; add cl, ch; xor [rax], al; add [rax+0x16], bh; ret; 
0x000000000947a6: add [rax], al; add dh, [rsi+0x5]; ret; 
0x000000000a154d: add [rax], al; add dh, al; add [rax], al; ret; 
0x0000000012491d: add [rax], al; add dh, al; add eax, [rax]; pop rbx; ret; 
0x000000000df32d: add [rax], al; add dh, al; or [r10], r11b; mov eax, 0x2; ret; 
0x00000000072afd: add [rax], al; add dh, al; test [rax], esp; idiv edi; jmp qword ptr [rax]; 
0x0000000008618b: add [rax], al; add dh, al; xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x000000000cbc31: add [rax], al; add dh, dh; ret; 
0x000000000406bd: add [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000446f2: add [rax], al; add dl, dh; movups xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000145b3e: add [rax], al; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000005c2be: add [rax], al; add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x00000000186e8f: add [rax], al; add eax, 0x40; add rax, rdi; ret; 
0x000000001705c9: add [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000001743f8: add [rax], al; add eax, ecx; vzeroupper; ret; 
0x0000000012756d: add [rax], al; add edx, 0x1; syscall; 
0x0000000008e91c: add [rax], al; add esi, 0x1; syscall; 
0x000000000c5fae: add [rax], al; add rax, 0x3; ret; 
0x000000000f2f65: add [rax], al; add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x000000000a49d3: add [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000731a2: add [rax], al; add rax, rdi; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000186e44: add [rax], al; add rax, rdi; ret; 
0x00000000170578: add [rax], al; add rax, rdi; vzeroupper; ret; 
0x0000000013e6f1: add [rax], al; add rdi, 0x10; jmp rcx; 
0x00000000140b21: add [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000140291: add [rax], al; add rdi, 0x68; jmp rcx; 
0x0000000013dba4: add [rax], al; add rdi, 0xc8; jmp rcx; 
0x00000000186e3b: add [rax], al; add rdx, rax; jl 0x0000000000186f20; add rax, rdi; ret; 
0x0000000013f6d2: add [rax], al; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000128e2e: add [rax], al; add rsp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000417da: add [rax], al; add rsp, 0x108; ret; 
0x00000000144a7e: add [rax], al; add rsp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x000000000863b0: add [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000091dd1: add [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000c0d5e: add [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000009109a: add [rax], al; add rsp, 0x110; pop rbp; ret; 
0x00000000041372: add [rax], al; add rsp, 0x148; ret; 
0x0000000014a4a1: add [rax], al; add rsp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000080c9f: add [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000c74f5: add [rax], al; add rsp, 0x18; ret; 
0x000000000f958f: add [rax], al; add rsp, 0x190; pop rbx; ret; 
0x000000000fa2dc: add [rax], al; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000410f3: add [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000007db45: add [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000f9251: add [rax], al; add rsp, 0x28; ret; 
0x0000000013c20e: add [rax], al; add rsp, 0x30; mov eax, 0x3; pop rbx; ret; 
0x00000000192490: add [rax], al; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000055631: add [rax], al; add rsp, 0x440; mov rax, rbp; pop rbp; ret; 
0x00000000149b5b: add [rax], al; add rsp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000f9a41: add [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000fa172: add [rax], al; add rsp, 0x68; ret; 
0x000000000f9b9c: add [rax], al; add rsp, 0x78; ret; 
0x00000000101854: add [rax], al; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000009ded6: add [rax], al; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000013ada0: add [rax], al; add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002df17: add [rax], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000040436: add [rax], al; add rsp, 0x8; ret; 
0x000000000fe25d: add [rax], al; add rsp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x00000000081230: add [rax], al; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000d868a: add [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000004e194: add [rax], al; add rsp, 0xd8; ret; 
0x000000000406be: add [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000040a0e: add [rax], al; addss xmm0, xmm0; ret; 
0x0000000008e5c6: add [rax], al; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x0000000008a94b: add [rax], al; and eax, 0x10; jne short 0x000000000008a958; ret; 
0x0000000017a191: add [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000108a44: add [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000087a1e: add [rax], al; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000003a98b: add [rax], al; and eax, esi; ret; 
0x0000000017aa63: add [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000017a196: add [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000004460b: add [rax], al; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret; 
0x0000000008dfec: add [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000a4bfe: add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000a4c0e: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a4c1e: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000aa680: add [rax], al; bsf rax, rdx; ret; 
0x000000000c62c1: add [rax], al; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000186eae: add [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x00000000186ebe: add [rax], al; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000186ece: add [rax], al; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000186e9e: add [rax], al; bsr eax, eax; add rax, rdi; ret; 
0x000000001705de: add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000a50ce: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a50de: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50ee: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000000aa364: add [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x000000000aa3f2: add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x00000000140c68: add [rax], al; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000140b70: add [rax], al; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x0000000013de4b: add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000052286: add [rax], al; bts rdx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x0000000005209e: add [rax], al; bts rdx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x00000000080e4f: add [rax], al; call qword ptr [r12+0x80]; 
0x00000000142ca5: add [rax], al; call qword ptr [rax+0x18]; 
0x0000000013908b: add [rax], al; call qword ptr [rax+0x28]; 
0x0000000014c4b5: add [rax], al; call qword ptr [rax+0x48]; 
0x0000000014c52d: add [rax], al; call qword ptr [rax+0x50]; 
0x0000000007b091: add [rax], al; call qword ptr [rax+0x68]; 
0x000000000f8a36: add [rax], al; call qword ptr [rax+0x88]; 
0x00000000141e5d: add [rax], al; call qword ptr [rax]; 
0x000000000fb9b0: add [rax], al; call qword ptr [rbp+0x40]; 
0x00000000192dc6: add [rax], al; call qword ptr [rbx]; 
0x000000000d924e: add [rax], al; call qword ptr [rdx+0x40]; 
0x0000000013a355: add [rax], al; call qword ptr [rsp+0x2a08]; 
0x00000000130d1b: add [rax], al; call qword ptr [rsp+0x30]; 
0x00000000103b1f: add [rax], al; call r12; 
0x0000000003683c: add [rax], al; call r15; 
0x00000000145bf0: add [rax], al; call r8; 
0x00000000043666: add [rax], al; call rax; 
0x000000000c7211: add [rax], al; call rbp; 
0x000000001326ee: add [rax], al; call rbx; 
0x0000000013a2ab: add [rax], al; call rcx; 
0x0000000008d157: add [rax], al; clc; inc dword ptr [rcx+0x39]; ret far; 
0x000000000902dd: add [rax], al; cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008fcd9: add [rax], al; cmova eax, edx; ret; 
0x000000000948ef: add [rax], al; cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x00000000123342: add [rax], al; cmovb eax, edx; ret; 
0x0000000010af69: add [rax], al; cmovb rax, rdx; ret; 
0x000000000f0132: add [rax], al; cmovbe rsi, r8; syscall; 
0x0000000009044e: add [rax], al; cmove eax, ecx; ret; 
0x00000000087abf: add [rax], al; cmove eax, edx; ret; 
0x000000000d2115: add [rax], al; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000085e9b: add [rax], al; cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c49b: add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d90: add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c7: add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x0000000009aee2: add [rax], al; cmove rax, rdx; ret; 
0x000000000b54b8: add [rax], al; cmove rax, rdx; ret; 
0x000000000c58a1: add [rax], al; cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000e0892: add [rax], al; cmovne eax, edx; pop rbx; ret; 
0x0000000009069e: add [rax], al; cmovne esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000000d90e0: add [rax], al; cmovne rax, rdi; ret; 
0x00000000149bb3: add [rax], al; cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000092884: add [rax], al; cmovne rax, rdx; ret; 
0x000000000ffa26: add [rax], al; cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x000000001109ca: add [rax], al; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x00000000168186: add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000013744d: add [rax], al; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x000000000983de: add [rax], al; cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x000000000862fe: add [rax], al; cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x0000000013efbe: add [rax], al; cmp dword ptr [rsi+0x10], 0xc; je short 0x000000000013efd0; xor eax, eax; ret; 
0x000000000f115c: add [rax], al; cmp dx, 0x2; je short 0x00000000000f1168; ret; 
0x00000000086286: add [rax], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b6: add [rax], al; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x00000000144a1e: add [rax], al; cmp eax, 0x1; jne short 0x0000000000144a11; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x000000000d9238: add [rax], al; cmp eax, 0x4000; sete al; add rsp, 0x98; ret; 
0x0000000017dc48: add [rax], al; cmp eax, ecx; jne 0x000000000017dd05; xor eax, eax; ret; 
0x00000000087eee: add [rax], al; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x0000000009aeaa: add [rax], al; cmp esi, 0x120; je short 0x000000000009aeb8; ret; 
0x0000000009af1a: add [rax], al; cmp esi, 0x120; je short 0x000000000009af28; ret; 
0x0000000009b14a: add [rax], al; cmp esi, 0x120; je short 0x000000000009b158; ret; 
0x0000000009baca: add [rax], al; cmp esi, 0x120; je short 0x000000000009bad8; ret; 
0x0000000009d36a: add [rax], al; cmp esi, 0x120; je short 0x000000000009d378; ret; 
0x0000000009d3ea: add [rax], al; cmp esi, 0x120; je short 0x000000000009d3f8; ret; 
0x000000000a16ba: add [rax], al; cmp esi, 0x120; je short 0x00000000000a16c8; ret; 
0x000000000b4eca: add [rax], al; cmp esi, 0x120; je short 0x00000000000b4ed8; ret; 
0x000000000b4f3a: add [rax], al; cmp esi, 0x120; je short 0x00000000000b4f48; ret; 
0x000000000b512a: add [rax], al; cmp esi, 0x120; je short 0x00000000000b5138; ret; 
0x000000000b522a: add [rax], al; cmp esi, 0x120; je short 0x00000000000b5238; ret; 
0x000000000b547a: add [rax], al; cmp esi, 0x120; je short 0x00000000000b5488; ret; 
0x000000000d20be: add [rax], al; cmp esi, 0x1; je short 0x00000000000d20d0; xor eax, eax; ret; 
0x00000000087a93: add [rax], al; cmp esi, 0x2; jbe short 0x0000000000087aa0; ret; 
0x0000000007b075: add [rax], al; cmp qword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x0000000011130e: add [rax], al; cmp qword ptr [rdi+0x10], 0x0; je short 0x0000000000111320; xor eax, eax; ret; 
0x0000000008763e: add [rax], al; cmp qword ptr [rdi+0x28], 0x0; je short 0x0000000000087650; xor eax, eax; ret; 
0x00000000083a8e: add [rax], al; cmp qword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x000000000d851e: add [rax], al; cmp rax, 0x517b; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x00000000087ba3: add [rax], al; cmp rdx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x000000000880ee: add [rax], al; cmp rdx, rbp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x00000000116c8e: add [rax], al; cmp rdx, rcx; ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x00000000087be3: add [rax], al; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x0000000008a9fc: add [rax], al; cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x000000000403b6: add [rax], al; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x00000000040262: add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000087baa: add [rax], al; ja short 0x0000000000087bb0; ret; 
0x00000000087bea: add [rax], al; ja short 0x0000000000087bf0; ret; 
0x00000000117c45: add [rax], al; ja short 0x0000000000117c51; mov rax, rdi; sar rax, 0x6; ret; 
0x0000000017ec38: add [rax], al; ja short 0x000000000017ec50; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ebe8: add [rax], al; ja short 0x000000000017ec59; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ec6b: add [rax], al; ja short 0x000000000017ec80; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x000000001870cb: add [rax], al; ja short 0x00000000001870e0; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x00000000094867: add [rax], al; jbe short 0x0000000000094870; ret; 
0x000000000948a7: add [rax], al; jbe short 0x00000000000948b0; ret; 
0x000000000948d7: add [rax], al; jbe short 0x00000000000948e0; ret; 
0x000000000897e3: add [rax], al; je 0x00000000000898c5; call rax; 
0x000000000c5c74: add [rax], al; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x000000001752dd: add [rax], al; je 0x0000000000175420; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000018a0ed: add [rax], al; je 0x000000000018a230; mov byte ptr [rdi], 0x0; ret; 
0x00000000085bc8: add [rax], al; je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x0000000008e408: add [rax], al; je short 0x000000000008e418; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009aaf2: add [rax], al; je short 0x000000000009aac9; ret; 
0x0000000009aeb0: add [rax], al; je short 0x000000000009aeb8; ret; 
0x0000000009aefa: add [rax], al; je short 0x000000000009aec7; ret; 
0x0000000009af20: add [rax], al; je short 0x000000000009af28; ret; 
0x0000000009af6a: add [rax], al; je short 0x000000000009af37; ret; 
0x0000000009b150: add [rax], al; je short 0x000000000009b158; ret; 
0x0000000009b19a: add [rax], al; je short 0x000000000009b167; ret; 
0x0000000009bad0: add [rax], al; je short 0x000000000009bad8; ret; 
0x0000000009d370: add [rax], al; je short 0x000000000009d378; ret; 
0x0000000009d3f0: add [rax], al; je short 0x000000000009d3f8; ret; 
0x0000000009d43a: add [rax], al; je short 0x000000000009d407; ret; 
0x000000000a16c0: add [rax], al; je short 0x00000000000a16c8; ret; 
0x000000000a170a: add [rax], al; je short 0x00000000000a16d7; ret; 
0x000000000b4ed0: add [rax], al; je short 0x00000000000b4ed8; ret; 
0x000000000b4f1a: add [rax], al; je short 0x00000000000b4ee7; ret; 
0x000000000b4f40: add [rax], al; je short 0x00000000000b4f48; ret; 
0x000000000b4f8a: add [rax], al; je short 0x00000000000b4f57; ret; 
0x000000000b50ba: add [rax], al; je short 0x00000000000b508a; ret; 
0x000000000b5130: add [rax], al; je short 0x00000000000b5138; ret; 
0x000000000b517a: add [rax], al; je short 0x00000000000b5147; ret; 
0x000000000b5230: add [rax], al; je short 0x00000000000b5238; ret; 
0x000000000b527a: add [rax], al; je short 0x00000000000b5247; ret; 
0x000000000b5480: add [rax], al; je short 0x00000000000b5488; ret; 
0x000000000b666a: add [rax], al; je short 0x00000000000b663a; ret; 
0x000000000be367: add [rax], al; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x000000000c5d24: add [rax], al; je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x000000000fe1b2: add [rax], al; je short 0x00000000000fe1c0; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000103b00: add [rax], al; je short 0x0000000000103b35; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000103b90: add [rax], al; je short 0x0000000000103bc5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000174bbd: add [rax], al; je short 0x0000000000174c40; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000017595d: add [rax], al; je short 0x00000000001759e0; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000018765d: add [rax], al; je short 0x00000000001876e0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x0000000018883d: add [rax], al; je short 0x00000000001888c0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018976d: add [rax], al; je short 0x00000000001897f0; mov byte ptr [rdi], 0x0; ret; 
0x000000000c57e3: add [rax], al; jg short 0x00000000000c57e9; neg eax; ret; 
0x00000000128626: add [rax], al; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285df: add [rax], al; jg short 0x00000000001285e8; ret; 
0x0000000017e323: add [rax], al; jg short 0x000000000017e330; neg eax; ret; 
0x0000000017b889: add [rax], al; jl short 0x000000000017b890; neg eax; ret; 
0x00000000085685: add [rax], al; jmp qword ptr [rax+0x28]; 
0x000000000856d5: add [rax], al; jmp qword ptr [rax+0x30]; 
0x00000000085c45: add [rax], al; jmp qword ptr [rax+0x38]; 
0x0000000014c66d: add [rax], al; jmp qword ptr [rax+0x58]; 
0x0000000002d561: add [rax], al; jmp rax; 
0x0000000013dbab: add [rax], al; jmp rcx; 
0x000000000e0912: add [rax], al; jne 0x00000000000e083d; ret; 
0x00000000170b08: add [rax], al; jne 0x0000000000170830; ret; 
0x00000000177d7d: add [rax], al; jne 0x0000000000177ae0; ret; 
0x0000000017f408: add [rax], al; jne 0x000000000017f130; ret; 
0x00000000185c5d: add [rax], al; jne 0x00000000001859c0; ret; 
0x0000000002d14f: add [rax], al; jne short 0x000000000002d117; ret; 
0x00000000040900: add [rax], al; jne short 0x0000000000040910; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000045cfd: add [rax], al; jne short 0x0000000000045d1f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004846d: add [rax], al; jne short 0x000000000004848f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004ac1d: add [rax], al; jne short 0x000000000004ac3f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000525ed: add [rax], al; jne short 0x000000000005260f; xor eax, eax; add rsp, 0x8; ret; 
0x00000000086da3: add [rax], al; jne short 0x0000000000086d88; pop rbx; ret; 
0x0000000008b356: add [rax], al; jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x000000000983e5: add [rax], al; jne short 0x00000000000983f0; ret; 
0x0000000009aa5b: add [rax], al; jne short 0x000000000009aa10; ret; 
0x0000000009ab6b: add [rax], al; jne short 0x000000000009ab20; ret; 
0x0000000009ac0b: add [rax], al; jne short 0x000000000009abc0; ret; 
0x0000000009afdb: add [rax], al; jne short 0x000000000009af90; ret; 
0x0000000009b10b: add [rax], al; jne short 0x000000000009b0c0; ret; 
0x0000000009bfbb: add [rax], al; jne short 0x000000000009bf70; ret; 
0x0000000009c04b: add [rax], al; jne short 0x000000000009c000; ret; 
0x000000000b705d: add [rax], al; jne short 0x00000000000b707f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b966d: add [rax], al; jne short 0x00000000000b968f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000bbb7d: add [rax], al; jne short 0x00000000000bbb9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000c1c7d: add [rax], al; jne short 0x00000000000c1c9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000d8403: add [rax], al; jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x000000000d8524: add [rax], al; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x0000000010b16c: add [rax], al; jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x00000000186dc2: add [rax], al; kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x0000000012275e: add [rax], al; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000001599f9: add [rax], al; lea r11, [rip+0x60cfe]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b34ae: add [rax], al; lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b161e: add [rax], al; lea r11, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff6e: add [rax], al; lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018f433: add [rax], al; lea r9, [rip+0x2b878]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x00000000139989: add [rax], al; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000139d41: add [rax], al; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000017c4ee: add [rax], al; lea rax, [rdi+0x2]; ret; 
0x0000000017c4fe: add [rax], al; lea rax, [rdi+0x3]; ret; 
0x0000000017c50e: add [rax], al; lea rax, [rdi+0x4]; ret; 
0x0000000017c51e: add [rax], al; lea rax, [rdi+0x5]; ret; 
0x0000000017c52e: add [rax], al; lea rax, [rdi+0x6]; ret; 
0x0000000017c46a: add [rax], al; lea rax, [rdi+0x7]; ret; 
0x0000000017c53e: add [rax], al; lea rax, [rdi+0x8]; ret; 
0x0000000017c54e: add [rax], al; lea rax, [rdi+0x9]; ret; 
0x0000000017c55e: add [rax], al; lea rax, [rdi+0xa]; ret; 
0x0000000017c56e: add [rax], al; lea rax, [rdi+0xb]; ret; 
0x0000000017c57e: add [rax], al; lea rax, [rdi+0xc]; ret; 
0x0000000017c58e: add [rax], al; lea rax, [rdi+0xd]; ret; 
0x0000000017c59e: add [rax], al; lea rax, [rdi+0xe]; ret; 
0x0000000017c4bd: add [rax], al; lea rax, [rdi+0xf]; ret; 
0x000000000a9f29: add [rax], al; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000c5bfb: add [rax], al; lea rax, [rdi-0x10]; ret; 
0x000000000c5d7e: add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000c5d6e: add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000c5d5e: add [rax], al; lea rax, [rdi-0xc]; ret; 
0x00000000039646: add [rax], al; lea rax, [rip+0x175e46]; ret; 
0x0000000002d3fe: add [rax], al; lea rax, [rip+0x181bef]; ret; 
0x0000000002d40e: add [rax], al; lea rax, [rip+0x183a80]; ret; 
0x000000000447be: add [rax], al; lea rax, [rip+0x1abc4f]; add rsp, 0x8; ret; 
0x000000000b554f: add [rax], al; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b664a: add [rax], al; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b509a: add [rax], al; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x0000000009bb9f: add [rax], al; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x000000000b665e: add [rax], al; lea rax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b4f0e: add [rax], al; lea rax, [rip+0xd6c09]; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f7e: add [rax], al; lea rax, [rip+0xd6e19]; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b50ae: add [rax], al; lea rax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b516e: add [rax], al; lea rax, [rip+0xd7349]; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b526e: add [rax], al; lea rax, [rip+0xd7c19]; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000a16fe: add [rax], al; lea rax, [rip+0xe5589]; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x0000000009d42e: add [rax], al; lea rax, [rip+0xeb7e9]; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x0000000009aae6: add [rax], al; lea rax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aeee: add [rax], al; lea rax, [rip+0xee9c9]; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009af5e: add [rax], al; lea rax, [rip+0xf06f9]; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b18e: add [rax], al; lea rax, [rip+0xf0789]; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x000000001032ec: add [rax], al; lea rax, [rip+0xf2dcb]; add rsp, 0x18; ret; 
0x00000000102da4: add [rax], al; lea rax, [rip+0xf32d3]; add rsp, 0x8; ret; 
0x00000000073b93: add [rax], al; lea rax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000006ecf1: add [rax], al; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000ea527: add [rax], al; lea rbx, [rip+0xc18e4]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x0000000008d068: add [rax], al; lea rcx, [rip+0x11c807]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c379: add [rax], al; lea rcx, [rip+0x11d2be]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b68f: add [rax], al; lea rcx, [rip+0x11dde8]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000075e7d: add [rax], al; lea rcx, [rip+0x1331ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000007583c: add [rax], al; lea rcx, [rip+0x1335ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c6b8: add [rax], al; lea rcx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000080d5b: add [rax], al; lea rcx, [rip+0x16e1fc]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000018f5ca: add [rax], al; lea rcx, [rip+0x2b74d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000014caa4: add [rax], al; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x00000000086f5d: add [rax], al; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000898f0: add [rax], al; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x00000000089758: add [rax], al; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x000000000c6fe9: add [rax], al; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x0000000008962f: add [rax], al; lea rdx, [rbx+0x638]; syscall; 
0x0000000009afa8: add [rax], al; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000009c2d4: add [rax], al; lea rdx, [rip+0x18163]; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb4: add [rax], al; lea rdx, [rip+0x18563]; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc94: add [rax], al; lea rdx, [rip+0x187a3]; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000018ffee: add [rax], al; lea rdx, [rip+0x2ad59]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000116034: add [rax], al; lea rdx, [rip+0x610e3]; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f14: add [rax], al; lea rdx, [rip+0x61223]; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df4: add [rax], al; lea rdx, [rip+0x61343]; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000115fd4: add [rax], al; lea rdx, [rip+0x68373]; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb4: add [rax], al; lea rdx, [rip+0x684b3]; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d94: add [rax], al; lea rdx, [rip+0x685d3]; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x00000000115f70: add [rax], al; lea rdx, [rip+0x69527]; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e50: add [rax], al; lea rdx, [rip+0x69667]; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d30: add [rax], al; lea rdx, [rip+0x69787]; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116014: add [rax], al; lea rdx, [rip+0x70423]; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef4: add [rax], al; lea rdx, [rip+0x70563]; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd4: add [rax], al; lea rdx, [rip+0x70683]; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x0000000009ab38: add [rax], al; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000009b066: add [rax], al; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x000000000f5987: add [rax], al; lea rdx, [rip+0xb6eb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009c14c: add [rax], al; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0ac: add [rax], al; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009c19c: add [rax], al; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0fc: add [rax], al; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009b0d8: add [rax], al; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x000000000b5517: add [rax], al; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x0000000009c018: add [rax], al; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000000dd6fe: add [rax], al; lea rdx, [rip+0xce23d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dbb5e: add [rax], al; lea rdx, [rip+0xcfc6d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d8aaa: add [rax], al; lea rdx, [rip+0xd28e1]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x0000000009c314: add [rax], al; lea rdx, [rip+0xdae33]; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef4: add [rax], al; lea rdx, [rip+0xdb233]; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd4: add [rax], al; lea rdx, [rip+0xdb473]; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bb67: add [rax], al; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009aaa9: add [rax], al; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009c2b4: add [rax], al; lea rdx, [rip+0xe20c3]; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be94: add [rax], al; lea rdx, [rip+0xe24c3]; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc74: add [rax], al; lea rdx, [rip+0xe2703]; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009c250: add [rax], al; lea rdx, [rip+0xe3277]; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be30: add [rax], al; lea rdx, [rip+0xe3677]; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc10: add [rax], al; lea rdx, [rip+0xe38b7]; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009c2f4: add [rax], al; lea rdx, [rip+0xea173]; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bed4: add [rax], al; lea rdx, [rip+0xea573]; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb4: add [rax], al; lea rdx, [rip+0xea7b3]; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x000000000b4d9d: add [rax], al; lea rdx, [rip+0xf579a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b6617: add [rax], al; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x00000000115db4: add [rax], al; lea rdx, [rip-0x6198d]; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115ed4: add [rax], al; lea rdx, [rip-0x61aad]; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ff4: add [rax], al; lea rdx, [rip-0x61bed]; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x0000000014c329: add [rax], al; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x000000000fe60e: add [rax], al; lea rdx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000142469: add [rax], al; lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x0000000008979c: add [rax], al; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000946b5: add [rax], al; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000089ecb: add [rax], al; lea rsi, [rip+0x11f52c]; syscall; 
0x0000000006493e: add [rax], al; lea rsi, [rip+0x1431b9]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000081468: add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000007c9d0: add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x00000000077287: add [rax], al; lea rsi, [rsp+0x8]; call rax; 
0x00000000086415: add [rax], al; lock cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x000000000865a4: add [rax], al; lock cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x0000000008b18e: add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000040722: add [rax], al; loopne 0x0000000000040765; or rax, rdx; movq xmm0, rax; ret; 
0x000000000d6ef5: add [rax], al; mov [rax+0x2d8], rdi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000d6efc: add [rax], al; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x0000000005c2a8: add [rax], al; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x000000000a1576: add [rax], al; mov [rax], ecx; ret; 
0x00000000085bb8: add [rax], al; mov [rax], rdx; pop rbx; ret; 
0x00000000115335: add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x000000000d2a5d: add [rax], al; mov [rbx+0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000013de45: add [rax], al; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x0000000009234e: add [rax], al; mov [rcx+0x20], rdx; ret; 
0x0000000016426e: add [rax], al; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x0000000016425e: add [rax], al; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x0000000016423e: add [rax], al; mov [rcx], edx; ret; 
0x000000001642ce: add [rax], al; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642de: add [rax], al; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x000000001642ae: add [rax], al; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x000000001642ee: add [rax], al; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x0000000016429e: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000001642be: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x000000001642fe: add [rax], al; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x0000000016427e: add [rax], al; mov [rcx], rdx; ret; 
0x000000000879ee: add [rax], al; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000fec35: add [rax], al; mov [rdi+0x16], ax; ret; 
0x0000000008f6ac: add [rax], al; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000861ee: add [rax], al; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000001340e7: add [rax], al; mov [rdi+0x1f8], rax; ret; 
0x0000000014574b: add [rax], al; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x0000000013be27: add [rax], al; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000f85de: add [rax], al; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x000000000861b4: add [rax], al; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000008bfec: add [rax], al; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000052290: add [rax], al; mov [rdi+0x8], rdx; ret; 
0x00000000122788: add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x000000000b08ae: add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000b0e7e: add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000af87e: add [rax], al; mov [rdi], dh; ret; 
0x00000000187f5e: add [rax], al; mov [rdi], dl; ret; 
0x0000000017616e: add [rax], al; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000017615e: add [rax], al; mov [rdi], dx; vzeroupper; ret; 
0x000000000a163e: add [rax], al; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b089e: add [rax], al; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x00000000187f8e: add [rax], al; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000000b090e: add [rax], al; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b091e: add [rax], al; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000b08ee: add [rax], al; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000b08de: add [rax], al; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000b08fe: add [rax], al; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x00000000187f9e: add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000017618e: add [rax], al; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000520a8: add [rax], al; mov [rdi], rdx; ret; 
0x000000000a148e: add [rax], al; mov [rdi], si; add rax, rdi; ret; 
0x000000000a160e: add [rax], al; mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x0000000013dcc3: add [rax], al; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x000000000770e4: add [rax], al; mov [rdx+0xe0], rcx; ret; 
0x0000000009482b: add [rax], al; mov [rip+0x158b0c], rax; ret; 
0x000000000947fb: add [rax], al; mov [rip+0x158b44], rax; ret; 
0x000000000947db: add [rax], al; mov [rip+0x158b89], eax; ret; 
0x000000000927fb: add [rax], al; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x0000000013a678: add [rax], al; mov [rsi+0x10], rax; ret; 
0x00000000044923: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000044972: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x0000000013a687: add [rax], al; mov [rsi+0x8], eax; ret; 
0x0000000013a698: add [rax], al; mov [rsi+0x8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x0000000013a6d8: add [rax], al; mov [rsi+0x8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000013a640: add [rax], al; mov [rsi+0x8], rax; ret; 
0x000000000449b4: add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x0000000008fe5d: add [rax], al; mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000008ae61: add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x000000001055dd: add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000013f949: add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000007caa1: add [rax], al; mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x000000000f873c: add [rax], al; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000093dcf: add [rax], al; mov [rsp+0x38], r12d; syscall; 
0x00000000142ba4: add [rax], al; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d64: add [rax], al; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000125405: add [rax], al; mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r12; call rax; 
0x00000000142fa8: add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142efe: add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x0000000004020f: add [rax], al; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000016657e: add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x0000000016224e: add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x0000000008618c: add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x000000000a154e: add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x0000000010b834: add [rax], al; mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x0000000012491e: add [rax], al; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x000000000df2fe: add [rax], al; mov byte ptr [rdi+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000df32e: add [rax], al; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df33e: add [rax], al; mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x0000000018a0f3: add [rax], al; mov byte ptr [rdi], 0x0; ret; 
0x000000001752e3: add [rax], al; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000000df2f3: add [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x0000000013283c: add [rax], al; mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x00000000132835: add [rax], al; mov byte ptr [rip+0xc5b7c], 0x0; mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000001327ec: add [rax], al; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x000000001327e5: add [rax], al; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x00000000132795: add [rax], al; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013278e: add [rax], al; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013273e: add [rax], al; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x00000000132737: add [rax], al; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326e7: add [rax], al; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x000000001326e0: add [rax], al; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x0000000006f4c6: add [rax], al; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000006defe: add [rax], al; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x000000000af89e: add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x0000000013dcde: add [rax], al; mov dword ptr [r8+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000086e31: add [rax], al; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000133a76: add [rax], al; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x0000000010b82a: add [rax], al; mov dword ptr [rbp-0x690], 0x0; mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x0000000008e6f5: add [rax], al; mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000013ae36: add [rax], al; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000082168: add [rax], al; mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret; 
0x0000000014036e: add [rax], al; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000087ebe: add [rax], al; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000052180: add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000946f8: add [rax], al; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x00000000093cde: add [rax], al; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x0000000013a71e: add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a70e: add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6fe: add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6ee: add [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x00000000142c95: add [rax], al; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000142c9d: add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000142cc9: add [rax], al; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000142cd1: add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000145bd6: add [rax], al; mov dword ptr [rsp+0x28], 0x0; mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x000000000731ad: add [rax], al; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000142b9c: add [rax], al; mov dword ptr [rsp+0x30], 0x0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d17: add [rax], al; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d5c: add [rax], al; mov dword ptr [rsp+0x30], 0x2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142be7: add [rax], al; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c27: add [rax], al; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c67: add [rax], al; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000006f4b6: add [rax], al; mov dword ptr [rsp+0x38], 0x1; jmp rax; 
0x0000000006def6: add [rax], al; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x0000000006f566: add [rax], al; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000007493e: add [rax], al; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x0000000006f69e: add [rax], al; mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x00000000074916: add [rax], al; mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x00000000143017: add [rax], al; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000143022: add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000008c176: add [rax], al; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x00000000142fb0: add [rax], al; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142f06: add [rax], al; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x0000000010065a: add [rax], al; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000fc38a: add [rax], al; mov dword ptr fs:[rax], 0x24; mov eax, 0x1; pop rbx; ret; 
0x0000000014b27e: add [rax], al; mov dword ptr fs:[rdx], 0x16; add rsp, 0x18; ret; 
0x000000000b0e8e: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b1cbe: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000b055e: add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000008a980: add [rax], al; mov eax, 0x0; cmove eax, edx; ret; 
0x000000000f998e: add [rax], al; mov eax, 0x102; syscall; 
0x000000000fb39e: add [rax], al; mov eax, 0x107; syscall; 
0x0000000005c2ce: add [rax], al; mov eax, 0x10; ret; 
0x000000000fea2b: add [rax], al; mov eax, 0x10; syscall; 
0x000000000fb2de: add [rax], al; mov eax, 0x10a; syscall; 
0x000000000f98be: add [rax], al; mov eax, 0x10c; syscall; 
0x0000000010a16e: add [rax], al; mov eax, 0x110; syscall; 
0x0000000008975f: add [rax], al; mov eax, 0x111; syscall; 
0x000000001090d3: add [rax], al; mov eax, 0x119; syscall; 
0x0000000010a1ce: add [rax], al; mov eax, 0x11b; syscall; 
0x00000000109e6e: add [rax], al; mov eax, 0x123; syscall; 
0x000000000fa43e: add [rax], al; mov eax, 0x124; syscall; 
0x000000000fa49e: add [rax], al; mov eax, 0x125; syscall; 
0x00000000109f8e: add [rax], al; mov eax, 0x126; syscall; 
0x0000000010a1fe: add [rax], al; mov eax, 0x12c; syscall; 
0x000000001000ee: add [rax], al; mov eax, 0x132; syscall; 
0x0000000010a28e: add [rax], al; mov eax, 0x13f; syscall; 
0x0000000010b5d0: add [rax], al; mov eax, 0x14; syscall; 
0x0000000010a2be: add [rax], al; mov eax, 0x14a; syscall; 
0x0000000010a2ee: add [rax], al; mov eax, 0x14b; syscall; 
0x00000000087aba: add [rax], al; mov eax, 0x16; cmove eax, edx; ret; 
0x00000000087bde: add [rax], al; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x000000000879de: add [rax], al; mov eax, 0x16; ret; 
0x000000000fa46e: add [rax], al; mov eax, 0x16; syscall; 
0x0000000009191e: add [rax], al; mov eax, 0x18; syscall; 
0x000000000d20ac: add [rax], al; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000c57de: add [rax], al; mov eax, 0x1; jg short 0x00000000000c57e9; neg eax; ret; 
0x0000000017e31e: add [rax], al; mov eax, 0x1; jg short 0x000000000017e330; neg eax; ret; 
0x000000000fc391: add [rax], al; mov eax, 0x1; pop rbx; ret; 
0x0000000005208e: add [rax], al; mov eax, 0x1; ret; 
0x0000000010a35e: add [rax], al; mov eax, 0x1b4; syscall; 
0x00000000102bbe: add [rax], al; mov eax, 0x1b; syscall; 
0x00000000102b8e: add [rax], al; mov eax, 0x1c; syscall; 
0x00000000131e9f: add [rax], al; mov eax, 0x1d; pop rbx; ret; 
0x0000000010b2be: add [rax], al; mov eax, 0x1e; syscall; 
0x000000000d84a6: add [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000fa3de: add [rax], al; mov eax, 0x20; syscall; 
0x000000000fa40e: add [rax], al; mov eax, 0x21; syscall; 
0x00000000131e80: add [rax], al; mov eax, 0x22; pop rbx; ret; 
0x000000000d692e: add [rax], al; mov eax, 0x25; syscall; 
0x000000000d7c8e: add [rax], al; mov eax, 0x27; syscall; 
0x0000000010aa7e: add [rax], al; mov eax, 0x29; syscall; 
0x0000000005227a: add [rax], al; mov eax, 0x2; ret; 
0x0000000010aa4e: add [rax], al; mov eax, 0x30; syscall; 
0x0000000010a44e: add [rax], al; mov eax, 0x31; syscall; 
0x0000000010a5ae: add [rax], al; mov eax, 0x32; syscall; 
0x0000000010a54e: add [rax], al; mov eax, 0x33; syscall; 
0x0000000010a51e: add [rax], al; mov eax, 0x34; syscall; 
0x000000000d6eca: add [rax], al; mov eax, 0x38; syscall; 
0x0000000008a96e: add [rax], al; mov eax, 0x3; ret; 
0x000000000d736e: add [rax], al; mov eax, 0x3b; syscall; 
0x0000000004164e: add [rax], al; mov eax, 0x3e; syscall; 
0x0000000010b1ce: add [rax], al; mov eax, 0x40; syscall; 
0x000000000fe618: add [rax], al; mov eax, 0x48; syscall; 
0x000000000fa20e: add [rax], al; mov eax, 0x49; syscall; 
0x000000000fa55e: add [rax], al; mov eax, 0x50; syscall; 
0x000000000fa58e: add [rax], al; mov eax, 0x51; syscall; 
0x0000000005c14e: add [rax], al; mov eax, 0x52; syscall; 
0x000000000f995e: add [rax], al; mov eax, 0x53; syscall; 
0x000000000fb3ce: add [rax], al; mov eax, 0x54; syscall; 
0x000000000fb24e: add [rax], al; mov eax, 0x56; syscall; 
0x000000000fb30e: add [rax], al; mov eax, 0x59; syscall; 
0x000000000f977e: add [rax], al; mov eax, 0x5a; syscall; 
0x000000000f97ae: add [rax], al; mov eax, 0x5b; syscall; 
0x000000000fadce: add [rax], al; mov eax, 0x5d; syscall; 
0x000000000fadfe: add [rax], al; mov eax, 0x5e; syscall; 
0x000000000d673e: add [rax], al; mov eax, 0x64; syscall; 
0x000000000d7cae: add [rax], al; mov eax, 0x66; syscall; 
0x00000000109fee: add [rax], al; mov eax, 0x67; syscall; 
0x000000000d7cce: add [rax], al; mov eax, 0x68; syscall; 
0x000000000d7cbe: add [rax], al; mov eax, 0x6b; syscall; 
0x000000000d7cde: add [rax], al; mov eax, 0x6c; syscall; 
0x000000000d7e8e: add [rax], al; mov eax, 0x6d; syscall; 
0x000000000d7c9e: add [rax], al; mov eax, 0x6e; syscall; 
0x000000000d7ebe: add [rax], al; mov eax, 0x6f; syscall; 
0x000000000d7f1e: add [rax], al; mov eax, 0x70; syscall; 
0x000000000d7cee: add [rax], al; mov eax, 0x73; syscall; 
0x000000000d7f4e: add [rax], al; mov eax, 0x76; syscall; 
0x000000000d7f7e: add [rax], al; mov eax, 0x78; syscall; 
0x0000000010908e: add [rax], al; mov eax, 0x7b; syscall; 
0x000000000d7eee: add [rax], al; mov eax, 0x7c; syscall; 
0x00000000109dae: add [rax], al; mov eax, 0x7e; syscall; 
0x00000000041683: add [rax], al; mov eax, 0x7f; syscall; 
0x00000000041e8b: add [rax], al; mov eax, 0x80; syscall; 
0x000000000416bf: add [rax], al; mov eax, 0x82; syscall; 
0x0000000010a19e: add [rax], al; mov eax, 0x86; syscall; 
0x000000000eff9e: add [rax], al; mov eax, 0x8e; syscall; 
0x000000000effce: add [rax], al; mov eax, 0x8f; syscall; 
0x0000000008962a: add [rax], al; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000000efffe: add [rax], al; mov eax, 0x90; syscall; 
0x000000000f002e: add [rax], al; mov eax, 0x91; syscall; 
0x000000000f008e: add [rax], al; mov eax, 0x92; syscall; 
0x000000000f00be: add [rax], al; mov eax, 0x93; syscall; 
0x000000000f00ee: add [rax], al; mov eax, 0x94; syscall; 
0x00000000102c4e: add [rax], al; mov eax, 0x96; syscall; 
0x00000000102c7e: add [rax], al; mov eax, 0x97; syscall; 
0x00000000102cae: add [rax], al; mov eax, 0x98; syscall; 
0x00000000109d0e: add [rax], al; mov eax, 0x9a; syscall; 
0x0000000010a0ae: add [rax], al; mov eax, 0x9b; syscall; 
0x000000000fff6e: add [rax], al; mov eax, 0xa1; syscall; 
0x0000000010002e: add [rax], al; mov eax, 0xa2; syscall; 
0x00000000108ffe: add [rax], al; mov eax, 0xa6; syscall; 
0x0000000010040e: add [rax], al; mov eax, 0xa7; syscall; 
0x0000000010043e: add [rax], al; mov eax, 0xa8; syscall; 
0x00000000102abe: add [rax], al; mov eax, 0xa; syscall; 
0x000000000ffb3e: add [rax], al; mov eax, 0xaa; syscall; 
0x00000000108f4e: add [rax], al; mov eax, 0xac; syscall; 
0x00000000108f1e: add [rax], al; mov eax, 0xad; syscall; 
0x00000000109dde: add [rax], al; mov eax, 0xae; syscall; 
0x00000000109e0e: add [rax], al; mov eax, 0xb0; syscall; 
0x0000000008f66e: add [rax], al; mov eax, 0xb; ret; 
0x0000000008b40e: add [rax], al; mov eax, 0xba; syscall; 
0x000000001054ae: add [rax], al; mov eax, 0xc6; syscall; 
0x0000000010538e: add [rax], al; mov eax, 0xc7; syscall; 
0x000000000ff11e: add [rax], al; mov eax, 0xc; syscall; 
0x0000000008dfe7: add [rax], al; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000867ed: add [rax], al; mov eax, 0xca; syscall; 
0x0000000008684e: add [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000088b6e: add [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008fcc4: add [rax], al; mov eax, 0xcb; syscall; 
0x0000000008aa4c: add [rax], al; mov eax, 0xcc; syscall; 
0x00000000109e3e: add [rax], al; mov eax, 0xd5; syscall; 
0x00000000041522: add [rax], al; mov eax, 0xd; syscall; 
0x00000000109d3e: add [rax], al; mov eax, 0xe4; syscall; 
0x000000000946b0: add [rax], al; mov eax, 0xe; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000050028: add [rax], al; mov eax, 0xe; syscall; 
0x0000000010a32e: add [rax], al; mov eax, 0xea; syscall; 
0x00000000093f5e: add [rax], al; mov eax, 0xf5; syscall; 
0x00000000109f5e: add [rax], al; mov eax, 0xfd; syscall; 
0x00000000109fbe: add [rax], al; mov eax, 0xff; syscall; 
0x000000001290e5: add [rax], al; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x0000000010058e: add [rax], al; mov eax, 0xffffffff; add rsp, 0x48; ret; 
0x0000000005bc2d: add [rax], al; mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x000000000d75e2: add [rax], al; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000003f8bc: add [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x000000001230be: add [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000002d8ec: add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000010531a: add [rax], al; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x00000000043ffd: add [rax], al; mov eax, [rax+0x58]; ret; 
0x0000000016995e: add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x000000000f8e7e: add [rax], al; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c56fe: add [rax], al; mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000c57e0; ret; 
0x0000000012f71e: add [rax], al; mov eax, [rdi+0x20]; ret; 
0x000000000c575e: add [rax], al; mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000c57e0; ret; 
0x00000000145a6e: add [rax], al; mov eax, [rdi+0x28]; ret; 
0x000000000c569e: add [rax], al; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x0000000008778e: add [rax], al; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000007fb7e: add [rax], al; mov eax, [rdi]; and eax, 0x200; ret; 
0x000000000806fe: add [rax], al; mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x00000000094a9e: add [rax], al; mov eax, [rip+0x160716]; test eax, eax; jne short 0x0000000000094ab0; ret; 
0x00000000041e1e: add [rax], al; mov eax, [rip+0x1ab39e]; ret; 
0x0000000008feab: add [rax], al; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000014c374: add [rax], al; mov eax, [rsp+0xc]; add rsp, 0x30; pop rbx; ret; 
0x00000000104e82: add [rax], al; mov eax, ebx; add rsp, 0xffffffffffffff80; mov rdx, rsp; syscall; 
0x000000000d6f76: add [rax], al; mov eax, edx; syscall; 
0x000000000f9c8e: add [rax], al; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x0000000007fdc9: add [rax], al; mov eax, r10d; syscall; 
0x000000000f98b0: add [rax], al; mov eax, r12d; pop r12; pop r13; ret; 
0x0000000014ce01: add [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000014b7c2: add [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000012fefd: add [rax], al; mov eax, r12d; syscall; 
0x00000000092ffd: add [rax], al; mov eax, r13d; syscall; 
0x00000000092c58: add [rax], al; mov eax, r14d; syscall; 
0x00000000101819: add [rax], al; mov eax, r8d; add rsp, 0x8; ret; 
0x00000000036bec: add [rax], al; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000041a10: add [rax], al; mov eax, r8d; pop rbx; ret; 
0x0000000007fb3c: add [rax], al; mov eax, r8d; ret; 
0x0000000008999a: add [rax], al; mov eax, r8d; syscall; 
0x0000000008f944: add [rax], al; mov eax, r9d; ret; 
0x00000000086ded: add [rax], al; mov eax, r9d; syscall; 
0x000000000af8be: add [rax], al; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x0000000008a02a: add [rax], al; mov edi, 0x1; mov eax, 0xe; syscall; 
0x00000000050389: add [rax], al; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000130e93: add [rax], al; mov edi, [rax]; call qword ptr [rsp+0x38]; 
0x00000000121af8: add [rax], al; mov edi, [rbp-0x50]; syscall; 
0x00000000089624: add [rax], al; mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x0000000012191e: add [rax], al; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x0000000008fcbe: add [rax], al; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x0000000012188e: add [rax], al; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x000000000940a8: add [rax], al; mov edi, [rsp+0x10]; syscall; 
0x00000000109128: add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x00000000093feb: add [rax], al; mov edi, [rsp+0x8]; syscall; 
0x000000000870ad: add [rax], al; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x000000000435cb: add [rax], al; mov edi, ebp; call rax; 
0x0000000007816e: add [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008a97b: add [rax], al; mov edx, 0x16; mov eax, 0x0; cmove eax, edx; ret; 
0x000000000829c3: add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000007d8a0: add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007497e: add [rax], al; mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x000000000d8534: add [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d83da: add [rax], al; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8428: add [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000109186: add [rax], al; mov edx, 0x8; syscall; 
0x000000000d83c0: add [rax], al; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000af8ae: add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000007ccbc: add [rax], al; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000008169c: add [rax], al; mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000008e20f: add [rax], al; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000001398cd: add [rax], al; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000feb1f: add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000feb54: add [rax], al; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000867e8: add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000008aa47: add [rax], al; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x0000000014eaa6: add [rax], al; mov esi, 0x80; syscall; 
0x000000000898eb: add [rax], al; mov esi, 0x81; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x000000000868a6: add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef8: add [rax], al; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff8: add [rax], al; mov esi, 0x81; mov eax, r13d; syscall; 
0x0000000004167e: add [rax], al; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x0000000013f18d: add [rax], al; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000007b1aa: add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000082020: add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x00000000084455: add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000140df3: add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000087e64: add [rax], al; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x000000000870b4: add [rax], al; mov esi, [r9+0x10]; syscall; 
0x0000000004361c: add [rax], al; mov esi, ebp; mov rdi, r13; call rax; 
0x00000000088639: add [rax], al; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000881f1: add [rax], al; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000886c3: add [rax], al; mov esi, ebx; mov rdi, r9; mov eax, 0xca; syscall; 
0x0000000007af24: add [rax], al; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x00000000086794: add [rax], al; mov fs:[0x2f8], rdi; ret; 
0x00000000086261: add [rax], al; mov fs:[0x300], rdi; ret; 
0x00000000043d83: add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000003aa39: add [rax], al; mov fs:[rdx], rax; ret; 
0x000000001330a5: add [rax], al; mov qword ptr [r8+0xd0], 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x0000000009a86e: add [rax], al; mov qword ptr [r8], 0x0; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x0000000012e218: add [rax], al; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x0000000010bce4: add [rax], al; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000007b240: add [rax], al; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000007b238: add [rax], al; mov qword ptr [rax+0x50], 0x0; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000012e210: add [rax], al; mov qword ptr [rax+0x8], 0x0; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x000000000840b2: add [rax], al; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000001377e8: add [rax], al; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000001377f0: add [rax], al; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000836e3: add [rax], al; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x000000000836db: add [rax], al; mov qword ptr [rbx+0x58], 0x0; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x0000000014ef9e: add [rax], al; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x000000001340d1: add [rax], al; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001340dc: add [rax], al; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000145e26: add [rax], al; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000101375: add [rax], al; mov qword ptr [rdi+0x8], 0x0; ret; 
0x0000000008fc5e: add [rax], al; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000084ea9: add [rax], al; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x0000000014a618: add [rax], al; mov qword ptr [rip+0xb24bb], 0x0; add rsp, 0x8; ret; 
0x0000000010bcec: add [rax], al; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000010b93e: add [rax], al; mov qword ptr [rip+0xe1ad5], 0x0; add rsp, 0x8; ret; 
0x0000000010b90d: add [rax], al; mov qword ptr [rip+0xe1b06], 0x3; add rsp, 0x8; ret; 
0x00000000108eb0: add [rax], al; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000101c10: add [rax], al; mov qword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x00000000100a03: add [rax], al; mov qword ptr [rip+0xf54d0], 0x0; add rsp, 0x8; ret; 
0x000000000ee148: add [rax], al; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a72b: add [rax], al; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x000000000ee150: add [rax], al; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a670: add [rax], al; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x00000000145bde: add [rax], al; mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000145be7: add [rax], al; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x000000001418ff: add [rax], al; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x00000000141908: add [rax], al; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000008978a: add [rax], al; mov qword ptr [rsp+0x58], 0x0; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000089793: add [rax], al; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000123931: add [rax], al; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000014ce0e: add [rax], al; mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000008607e: add [rax], al; mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x000000000d73ce: add [rax], al; mov r10, r12; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000fae2e: add [rax], al; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fb27e: add [rax], al; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb33e: add [rax], al; mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000109d4e: add [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x0000000010923e: add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000010a22e: add [rax], al; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010981e: add [rax], al; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000fdf8e: add [rax], al; mov r10, rcx; mov eax, 0x28; syscall; 
0x0000000010aaae: add [rax], al; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010a57e: add [rax], al; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a01e: add [rax], al; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109efe: add [rax], al; mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0de: add [rax], al; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010553e: add [rax], al; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054de: add [rax], al; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053be: add [rax], al; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000010544e: add [rax], al; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000102bee: add [rax], al; mov r10, rcx; mov eax, 0xd8; syscall; 
0x0000000010b28e: add [rax], al; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000109e9e: add [rax], al; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000074a74: add [rax], al; mov r10d, 0x1; jmp rax; 
0x0000000005005d: add [rax], al; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000092c52: add [rax], al; mov r10d, 0x8; mov eax, r14d; syscall; 
0x000000000f95be: add [rax], al; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x0000000010917e: add [rax], al; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000006f61c: add [rax], al; mov r11d, 0x1; jmp rax; 
0x0000000006f62e: add [rax], al; mov r14d, 0x1; jmp rax; 
0x0000000006f616: add [rax], al; mov r14d, 0x1; mov r11d, 0x1; jmp rax; 
0x00000000092c4c: add [rax], al; mov r14d, 0xe; mov r10d, 0x8; mov eax, r14d; syscall; 
0x000000000c7206: add [rax], al; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x00000000128ade: add [rax], al; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000007fb36: add [rax], al; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000008eed6: add [rax], al; mov r8d, 0x23; mov eax, r8d; ret; 
0x00000000085cfc: add [rax], al; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x0000000007b038: add [rax], al; mov r8d, [rsp+0x8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x000000000feb59: add [rax], al; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000416ee: add [rax], al; mov r8d, eax; mov eax, 0x82; syscall; 
0x000000000f2f6e: add [rax], al; mov r9, rbx; mov r8, rax; call r14; 
0x00000000074926: add [rax], al; mov r9d, 0x1; jmp rax; 
0x00000000074a6e: add [rax], al; mov r9d, 0x1; mov r10d, 0x1; jmp rax; 
0x0000000007328e: add [rax], al; mov r9d, 0x1; xor r10d, r10d; jmp rax; 
0x000000000e06fe: add [rax], al; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000c5fde: add [rax], al; mov rax, 0x2; ret; 
0x000000000c5fee: add [rax], al; mov rax, 0x3; ret; 
0x000000000c5ffe: add [rax], al; mov rax, 0x4; ret; 
0x000000000c600e: add [rax], al; mov rax, 0x5; ret; 
0x000000000c601e: add [rax], al; mov rax, 0x6; ret; 
0x000000000c602e: add [rax], al; mov rax, 0x7; ret; 
0x00000000040586: add [rax], al; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret; 
0x000000000904fe: add [rax], al; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000c69ae: add [rax], al; mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x00000000123636: add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000413ac: add [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000013e542: add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000014096a: add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000140e58: add [rax], al; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000007d1ce: add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x0000000013aeac: add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000014c4ae: add [rax], al; mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x0000000014c526: add [rax], al; mov rax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x0000000008567e: add [rax], al; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x000000000856ce: add [rax], al; mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x0000000014c666: add [rax], al; mov rax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x00000000085716: add [rax], al; mov rax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x0000000014c6a5: add [rax], al; mov rax, [rax+0x60]; jmp rax; 
0x000000001055c6: add [rax], al; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105646: add [rax], al; mov rax, [rax+0x60]; ret; 
0x00000000083ff5: add [rax], al; mov rax, [rax+0x68]; test rax, rax; jne short 0x0000000000083ff0; ret; 
0x0000000008571d: add [rax], al; mov rax, [rax+0x8]; jmp rax; 
0x00000000043e80: add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x0000000013f26e: add [rax], al; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000014545e: add [rax], al; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013a7cf: add [rax], al; mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013990e: add [rax], al; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000142dde: add [rax], al; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000139062: add [rax], al; mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000013901e: add [rax], al; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001404b0: add [rax], al; mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000013de5a: add [rax], al; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000014186e: add [rax], al; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x000000000897d5: add [rax], al; mov rax, [rcx+0x640]; mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x0000000016996e: add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000008775e: add [rax], al; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000008783e: add [rax], al; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000013915e: add [rax], al; mov rax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000009304e: add [rax], al; mov rax, [rdi+0x78]; ret; 
0x0000000014487e: add [rax], al; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x00000000141921: add [rax], al; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000001454ce: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000001454de: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x00000000144a2e: add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x0000000013ff1e: add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000144fd6: add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000144a8e: add [rax], al; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000144aee: add [rax], al; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000009485e: add [rax], al; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000948ce: add [rax], al; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x000000000948be: add [rax], al; mov rax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x0000000009484e: add [rax], al; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x0000000009483e: add [rax], al; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x0000000009480e: add [rax], al; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf7e: add [rax], al; mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x0000000008bf6e: add [rax], al; mov rax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862ee: add [rax], al; mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862de: add [rax], al; mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862ce: add [rax], al; mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x000000000862be: add [rax], al; mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x0000000009481e: add [rax], al; mov rax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x0000000007fc0f: add [rax], al; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faef: add [rax], al; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x000000000d2266: add [rax], al; mov rax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f6: add [rax], al; mov rax, [rip+0x11ac11]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000c750b: add [rax], al; mov rax, [rip+0x1258fc]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009a02e: add [rax], al; mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x00000000093efe: add [rax], al; mov rax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a7e: add [rax], al; mov rax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000091036: add [rax], al; mov rax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000906ae: add [rax], al; mov rax, [rip+0x15c759]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000007ff1e: add [rax], al; mov rax, [rip+0x16cee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041df6: add [rax], al; mov rax, [rip+0x1ab011]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041db6: add [rax], al; mov rax, [rip+0x1ab051]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c16: add [rax], al; mov rax, [rip+0x1ab1f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004140e: add [rax], al; mov rax, [rip+0x1ab9f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004139e: add [rax], al; mov rax, [rip+0x1aba69]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000003f84e: add [rax], al; mov rax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a2ce: add [rax], al; mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x00000000036abe: add [rax], al; mov rax, [rip+0x1b8c79]; ret; 
0x0000000002d66e: add [rax], al; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002debe: add [rax], al; mov rax, [rip+0x1c1839]; ret; 
0x0000000002deae: add [rax], al; mov rax, [rip+0x1c1841]; ret; 
0x0000000014ef4e: add [rax], al; mov rax, [rip+0x9deb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec0e: add [rax], al; mov rax, [rip+0x9e1f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d05e: add [rax], al; mov rax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000001426d6: add [rax], al; mov rax, [rip+0xaa751]; pop rbx; ret; 
0x0000000014252e: add [rax], al; mov rax, [rip+0xaa891]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000128f3e: add [rax], al; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000117fbe: add [rax], al; mov rax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x0000000010a38e: add [rax], al; mov rax, [rip+0xe2a79]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000109a4e: add [rax], al; mov rax, [rip+0xe33b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a16: add [rax], al; mov rax, [rip+0xe33f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099de: add [rax], al; mov rax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109986: add [rax], al; mov rax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109936: add [rax], al; mov rax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e6: add [rax], al; mov rax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109746: add [rax], al; mov rax, [rip+0xe36c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109716: add [rax], al; mov rax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104e56: add [rax], al; mov rax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001038ae: add [rax], al; mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010bffe: add [rax], al; mov rax, [rip+0xea2f1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x0000000010067e: add [rax], al; mov rax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000010051e: add [rax], al; mov rax, [rip+0xec8e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff13e: add [rax], al; mov rax, [rip+0xedcc9]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000fea06: add [rax], al; mov rax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9be: add [rax], al; mov rax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fc21e: add [rax], al; mov rax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9676: add [rax], al; mov rax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f92be: add [rax], al; mov rax, [rip+0xf3b49]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000003a95e: add [rax], al; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000014ce17: add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x000000000c6ff1: add [rax], al; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x00000000044716: add [rax], al; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000013ab82: add [rax], al; mov rax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000138e33: add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000010068c: add [rax], al; mov rax, [rsp-0x50]; ret; 
0x00000000191c56: add [rax], al; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000014ca9b: add [rax], al; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008fcae: add [rax], al; mov rax, fs:[0x10]; ret; 
0x00000000055766: add [rax], al; mov rax, r10; add rsp, 0x20; ret; 
0x0000000003f85c: add [rax], al; mov rax, r10; ret; 
0x00000000108b5b: add [rax], al; mov rax, r12; pop r12; ret; 
0x0000000005ba22: add [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x000000001330b0: add [rax], al; mov rax, r8; add rsp, 0x8; ret; 
0x0000000014a471: add [rax], al; mov rax, r8; pop rbp; ret; 
0x0000000011620e: add [rax], al; mov rax, r8; ret; 
0x00000000055638: add [rax], al; mov rax, rbp; pop rbp; ret; 
0x00000000105210: add [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000043e0e: add [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000084dfe: add [rax], al; mov rax, rdi; ret; 
0x0000000017710e: add [rax], al; mov rax, rdi; vzeroupper; ret; 
0x000000000af8fe: add [rax], al; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x00000000085da5: add [rax], al; mov rcx, [rsp+0x38]; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x00000000131f5e: add [rax], al; mov rcx, r15; call rbp; 
0x000000000b453f: add [rax], al; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000139033: add [rax], al; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000085876: add [rax], al; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x358]; 
0x000000000f8a2f: add [rax], al; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000897dc: add [rax], al; mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x0000000009a086: add [rax], al; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x000000000423f2: add [rax], al; mov rdi, [rsp+0x8]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000130d13: add [rax], al; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x0000000013ae5c: add [rax], al; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000013ae40: add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000013b007: add [rax], al; mov rdi, r12; call qword ptr [rbx]; 
0x0000000014be6d: add [rax], al; mov rdi, r12; call rax; 
0x0000000008f49a: add [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000143967: add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000088cea: add [rax], al; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000007cd86: add [rax], al; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007cf84: add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000008716d: add [rax], al; mov rdi, r15; mov eax, r9d; syscall; 
0x0000000008894a: add [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000088273: add [rax], al; mov rdi, r9; mov eax, 0xca; syscall; 
0x00000000088fd3: add [rax], al; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000085906: add [rax], al; mov rdi, rax; call qword ptr [rbx+0x358]; 
0x0000000013e549: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013a7d8: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000076c07: add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000009a15e: add [rax], al; mov rdi, rbp; call rax; 
0x00000000141e4c: add [rax], al; mov rdi, rbp; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000001398d2: add [rax], al; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000008da15: add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000008e65e: add [rax], al; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000008f816: add [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000829c8: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000008221f: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x0000000007e625: add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000013a032: add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000140dfa: add [rax], al; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x0000000007d8a5: add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000760ad: add [rax], al; mov rdi, rbx; call r8; 
0x00000000075b87: add [rax], al; mov rdi, rbx; call rax; 
0x00000000080dc6: add [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x000000001448fe: add [rax], al; mov rdi, rsp; call r8; 
0x0000000014303e: add [rax], al; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x00000000085bd7: add [rax], al; mov rdx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000085ca6: add [rax], al; mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000082b9b: add [rax], al; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x00000000085bb1: add [rax], al; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x000000000770dd: add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000af8ee: add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000a15ee: add [rax], al; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x0000000010a6fe: add [rax], al; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x00000000110f9b: add [rax], al; mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000a146e: add [rax], al; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret; 
0x00000000085eb5: add [rax], al; mov rdx, [rsp+0x28]; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x0000000007261d: add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc2b: add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000077a34: add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000078f16: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078db0: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000fdabf: add [rax], al; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000006d326: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c421: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000007077e: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000006e0a8: add [rax], al; mov rdx, r13; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x000000000742cd: add [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006f6e5: add [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e330: add [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000011c706: add [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000004241e: add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx; 
0x0000000006c54d: add [rax], al; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000788cc: add [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000073395: add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000074695: add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000071c33: add [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006e159: add [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000014eb0e: add [rax], al; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x000000000fdd59: add [rax], al; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000075505: add [rax], al; mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000895fc: add [rax], al; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x000000000f8a28: add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000fe020: add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000ffeda: add [rax], al; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x0000000013de61: add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000070154: add [rax], al; mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000130d0b: add [rax], al; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x0000000006dcec: add [rax], al; mov rsi, [rsp]; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000072fb8: add [rax], al; mov rsi, [rsp]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000111d50: add [rax], al; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000078173: add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000081c05: add [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000139113: add [rax], al; mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000111b2c: add [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000011f946: add [rax], al; mov rsi, r15; mov rdi, r12; call rbp; 
0x000000000424e6: add [rax], al; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx; 
0x000000000902c5: add [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000014bcdc: add [rax], al; mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000141431: add [rax], al; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000112e21: add [rax], al; mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000c752e: add [rax], al; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x000000000767ae: add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x00000000080f47: add [rax], al; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x000000000d785c: add [rax], al; mov rsp, rbx; mov rbx, [rbp-0x8]; leave; ret; 
0x000000000b4af6: add [rax], al; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b092e: add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000b093e: add [rax], al; movdqu [rdi], xmm0; ret; 
0x0000000013dc46: add [rax], al; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x000000000af97e: add [rax], al; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x0000000014033e: add [rax], al; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000133a6e: add [rax], al; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000000f8ee3: add [rax], al; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000ac3a0: add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000446c6: add [rax], al; movsd xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000156f99: add [rax], al; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000073984: add [rax], al; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x000000000389b6: add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx; 
0x0000000006bb8d: add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000140348: add [rax], al; movups [r8], xmm1; ret; 
0x00000000140358: add [rax], al; movups [r8], xmm2; ret; 
0x00000000140bc8: add [rax], al; movups [r8], xmm3; ret; 
0x00000000140ba8: add [rax], al; movups [r8], xmm4; ret; 
0x00000000133a80: add [rax], al; movups [rax+0xb0], xmm3; ret; 
0x000000000f9588: add [rax], al; movups [rbx+0xf0], xmm7; add rsp, 0x190; pop rbx; ret; 
0x00000000140bb8: add [rax], al; movups [rdi+0x20], xmm2; ret; 
0x00000000140334: add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x0000000013dc61: add [rax], al; movups [rdx], xmm1; ret; 
0x00000000132843: add [rax], al; movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000000f8e4f: add [rax], al; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e5b: add [rax], al; movups [rsi+0x70], xmm7; ret; 
0x0000000013db7a: add [rax], al; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000142bef: add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000942d8: add [rax], al; movups [rsp+0x50], xmm0; syscall; 
0x00000000142f11: add [rax], al; movups [rsp+0xb8], xmm1; call rax; 
0x00000000142fbb: add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x00000000128d96: add [rax], al; movzx eax, al; pop rbp; ret; 
0x00000000128eca: add [rax], al; movzx eax, al; pop rbx; ret; 
0x00000000073afe: add [rax], al; movzx eax, byte ptr [rax+rcx]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000018a823: add [rax], al; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000018a854: add [rax], al; movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000018a5d0: add [rax], al; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000017a2fe: add [rax], al; movzx eax, byte ptr [rdi-0x1]; movzx ecx, byte ptr [rsi-0x1]; sub eax, ecx; ret; 
0x0000000017a0b1: add [rax], al; movzx eax, byte ptr [rdi-0x1]; movzx edx, byte ptr [rsi-0x1]; sub eax, edx; ret; 
0x0000000017d82e: add [rax], al; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x0000000017d81e: add [rax], al; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017d80e: add [rax], al; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d7fe: add [rax], al; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7ee: add [rax], al; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7de: add [rax], al; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x0000000017945e: add [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000f859e: add [rax], al; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x000000000a493e: add [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001888ce: add [rax], al; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000000ecadd: add [rax], al; movzx edx, byte ptr [r15+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx; 
0x00000000187e4e: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001599be: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000017606e: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x0000000004e2a2: add [rax], al; movzx edx, dl; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x00000000187e5e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x0000000018a2fe: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000015994e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000174c3e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x0000000005bc1f: add [rax], al; neg eax; ret; 
0x000000000f9989: add [rax], al; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb399: add [rax], al; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb2d9: add [rax], al; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x0000000010a169: add [rax], al; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1c9: add [rax], al; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e69: add [rax], al; nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa439: add [rax], al; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa499: add [rax], al; nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f89: add [rax], al; nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1f9: add [rax], al; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a289: add [rax], al; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2b9: add [rax], al; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2e9: add [rax], al; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x000000000fa469: add [rax], al; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f0059: add [rax], al; nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000010a359: add [rax], al; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102bb9: add [rax], al; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x000000000fa409: add [rax], al; nop [rax+rax]; mov eax, 0x21; syscall; 
0x0000000010aa79: add [rax], al; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010a549: add [rax], al; nop [rax+rax]; mov eax, 0x33; syscall; 
0x0000000010b1c5: add [rax], al; nop [rax+rax]; mov eax, 0x40; syscall; 
0x000000000fa589: add [rax], al; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fb3c9: add [rax], al; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb309: add [rax], al; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f97a9: add [rax], al; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadc9: add [rax], al; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadf9: add [rax], al; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d6739: add [rax], al; nop [rax+rax]; mov eax, 0x64; syscall; 
0x00000000109fe9: add [rax], al; nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7e89: add [rax], al; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7eb9: add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f19: add [rax], al; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f49: add [rax], al; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f79: add [rax], al; nop [rax+rax]; mov eax, 0x78; syscall; 
0x00000000109089: add [rax], al; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109da9: add [rax], al; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a199: add [rax], al; nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000effc9: add [rax], al; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000efff9: add [rax], al; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f0029: add [rax], al; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f0089: add [rax], al; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00b9: add [rax], al; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00e9: add [rax], al; nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c49: add [rax], al; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c79: add [rax], al; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102ca9: add [rax], al; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109d09: add [rax], al; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a0a9: add [rax], al; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff69: add [rax], al; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x00000000108ff5: add [rax], al; nop [rax+rax]; mov eax, 0xa6; syscall; 
0x00000000100409: add [rax], al; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x00000000100439: add [rax], al; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102ab9: add [rax], al; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000108f49: add [rax], al; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f19: add [rax], al; nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000109dd9: add [rax], al; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109e09: add [rax], al; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000010a319: add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000001054a9: add [rax], al; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x00000000105389: add [rax], al; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000109e39: add [rax], al; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d39: add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000093f56: add [rax], al; nop [rax+rax]; mov eax, 0xf5; syscall; 
0x00000000109f59: add [rax], al; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109fb9: add [rax], al; nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000041679: add [rax], al; nop [rax+rax]; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x000000000fae29: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fb279: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb339: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000010a229: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010aaa9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010a579: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a019: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109ef9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0d9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000105539: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054d9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053b9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000105449: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000102be9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000109e99: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000139905: add [rax], al; nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000002d669: add [rax], al; nop [rax+rax]; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x00000000128f39: add [rax], al; nop [rax+rax]; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000116209: add [rax], al; nop [rax+rax]; mov rax, r8; ret; 
0x0000000018a224: add [rax], al; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000041a93: add [rax], al; nop [rax+rax]; nop; mov eax, 0x83; syscall; 
0x00000000138f29: add [rax], al; nop [rax+rax]; ret; 
0x000000000388c4: add [rax], al; nop [rax+rax]; ret; 
0x00000000188c74: add [rax], al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000002d1f4: add [rax], al; nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000a4e3b: add [rax], al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x0000000016420a: add [rax], al; nop [rax]; mov [rcx], dl; ret; 
0x000000000b084a: add [rax], al; nop [rax]; mov [rdi], dl; ret; 
0x000000000b054a: add [rax], al; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000946ea: add [rax], al; nop [rax]; mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x0000000007490f: add [rax], al; nop [rax]; mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x000000001091ba: add [rax], al; nop [rax]; mov eax, 0x122; syscall; 
0x00000000138d9a: add [rax], al; nop [rax]; mov eax, 0x1; ret; 
0x000000000c9b8a: add [rax], al; nop [rax]; mov eax, 0x26; syscall; 
0x000000000fe59b: add [rax], al; nop [rax]; mov eax, 0x3; syscall; 
0x000000001012aa: add [rax], al; nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012da: add [rax], al; nop [rax]; mov eax, 0x4d; syscall; 
0x000000000fad9b: add [rax], al; nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fed6a: add [rax], al; nop [rax]; mov eax, 0x62; syscall; 
0x000000000f96ba: add [rax], al; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000ff07a: add [rax], al; nop [rax]; mov eax, 0x8d; syscall; 
0x00000000109cda: add [rax], al; nop [rax]; mov eax, 0x9e; syscall; 
0x000000000fff3b: add [rax], al; nop [rax]; mov eax, 0xa3; syscall; 
0x0000000010902a: add [rax], al; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000099e2a: add [rax], al; nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000007fb4a: add [rax], al; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret; 
0x0000000015914a: add [rax], al; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000084e9a: add [rax], al; nop [rax]; mov qword ptr [rip+0x16b865], 0x0; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x0000000005c17a: add [rax], al; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000010978a: add [rax], al; nop [rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000fdb6b: add [rax], al; nop [rax]; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000004146a: add [rax], al; nop [rax]; mov rax, 0xf; syscall; 
0x0000000014570a: add [rax], al; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x00000000084dca: add [rax], al; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x0000000003a9ca: add [rax], al; nop [rax]; mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a9aa: add [rax], al; nop [rax]; mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x000000000af1fa: add [rax], al; nop [rax]; mov rax, rdi; ret; 
0x0000000015341a: add [rax], al; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x000000001592da: add [rax], al; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x0000000015925a: add [rax], al; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000008662a: add [rax], al; nop [rax]; ret; 
0x00000000188e1b: add [rax], al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x0000000008946a: add [rax], al; nop [rax]; xor eax, eax; ret; 
0x000000000a516b: add [rax], al; nop [rax]; xor eax, eax; ret; 
0x0000000017420b: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000017894a: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000898ab: add [rax], al; nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000010b31a: add [rax], al; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000145a4d: add [rax], al; nop; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000017c4dd: add [rax], al; nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4cd: add [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000016422d: add [rax], al; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000016428d: add [rax], al; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000000b086d: add [rax], al; nop; mov [rdi-0x1], edx; ret; 
0x00000000187f7d: add [rax], al; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000b087d: add [rax], al; nop; mov [rdi], edx; ret; 
0x000000000b08cd: add [rax], al; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x0000000014389d: add [rax], al; nop; mov eax, 0x2; ret; 
0x0000000010b12d: add [rax], al; nop; mov eax, 0x44; syscall; 
0x00000000041a9d: add [rax], al; nop; mov eax, 0x83; syscall; 
0x00000000102a8d: add [rax], al; nop; mov eax, 0xb; syscall; 
0x0000000014ef8d: add [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000084afd: add [rax], al; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000117d1d: add [rax], al; nop; mov eax, edi; rol ax, 0x8; ret; 
0x000000000f90dd: add [rax], al; nop; mov r10, rcx; mov eax, 0x142; syscall; 
0x0000000010532d: add [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x000000000f92fd: add [rax], al; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000c5fcd: add [rax], al; nop; mov rax, 0x1; ret; 
0x000000000861cd: add [rax], al; nop; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000001763cd: add [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x00000000040fcd: add [rax], al; nop; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000040a8d: add [rax], al; nop; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x00000000115cdd: add [rax], al; nop; ret; 
0x00000000145a7d: add [rax], al; nop; xor eax, eax; ret; 
0x0000000017c30d: add [rax], al; nop; xor rax, rax; ret; 
0x00000000128f29: add [rax], al; not eax; shr eax, 0x1f; ret; 
0x0000000009b9f2: add [rax], al; or [rax-0x73], cl; add eax, 0x18394; cmove rax, rdx; ret; 
0x0000000004058f: add [rax], al; or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret; 
0x0000000004055f: add [rax], al; or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret; 
0x00000000052177: add [rax], al; or byte ptr [rcx-0x77], 0x0; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000ca151: add [rax], al; or byte ptr [rdi], 0x85; add byte ptr [rcx], 0x0; add [rbx-0x12f6b], cl; jmp far fword ptr [rbx]; 
0x0000000010184e: add [rax], al; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000008119e: add [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000087a9e: add [rax], al; or dword ptr [rdi+0x8], 0x40; xor eax, eax; mov [rdi+0x4], esi; ret; 
0x0000000008e59e: add [rax], al; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x0000000005b13f: add [rax], al; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000401b1: add [rax], al; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000a4b49: add [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a5020: add [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x0000000002d5bf: add [rax], al; pop r12; pop r13; pop r14; jmp rax; 
0x000000001156a2: add [rax], al; pop r12; pop rbp; ret; 
0x0000000013adef: add [rax], al; pop rbp; jmp rcx; 
0x0000000002d610: add [rax], al; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000005a5bc: add [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000004187d: add [rax], al; pop rbp; pop r12; ret; 
0x00000000055620: add [rax], al; pop rbp; ret; 
0x0000000002d476: add [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000076728: add [rax], al; pop rbx; pop rbp; ret; 
0x0000000003726c: add [rax], al; pop rbx; ret; 
0x000000000d6f2e: add [rax], al; pop rdi; mov eax, 0x3a; syscall; 
0x0000000014c43c: add [rax], al; push 0x0; call qword ptr [rax+0x338]; 
0x000000000c7344: add [rax], al; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x0000000014c3fb: add [rax], al; push 0x2; call qword ptr [rax+0x338]; 
0x0000000013981a: add [rax], al; push qword ptr [rip+0x7fb66]; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000139d3a: add [rax], al; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000002d67e: add [rax], al; ret; 
0x0000000013a349: add [rax], al; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x00000000117d42: add [rax], al; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000002d125: add [rax], al; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x00000000123864: add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013e963: add [rax], al; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000d923c: add [rax], al; sete al; add rsp, 0x98; ret; 
0x000000000c4776: add [rax], al; setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x0000000018c263: add [rax], al; setl al; neg eax; or eax, 0x1; ret; 
0x000000000f11f6: add [rax], al; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000000d85ca: add [rax], al; setne al; ret; 
0x00000000041c08: add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x0000000014cff1: add [rax], al; shl rdx, cl; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000008631b: add [rax], al; shr eax, 0xb; and eax, 0x1; mov [rip+0x16a42b], eax; ret; 
0x000000000f84e6: add [rax], al; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000007e346: add [rax], al; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e406: add [rax], al; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x0000000017a19c: add [rax], al; sub eax, ecx; ret; 
0x0000000014a4de: add [rax], al; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x000000000ca4e6: add [rax], al; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret; 
0x000000000ff052: add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000122f5b: add [rax], al; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000000b42c1: add [rax], al; sub rax, rdx; ret; 
0x00000000084386: add [rax], al; sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x0000000007b766: add [rax], al; sub rcx, rax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000004d75c: add [rax], al; sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x00000000041475: add [rax], al; syscall; 
0x0000000017c4b4: add [rax], al; test ah, 0x40; jne 0x000000000017c5a0; lea rax, [rdi+0xf]; ret; 
0x0000000017c462: add [rax], al; test al, 0x40; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x000000000c5bf3: add [rax], al; test al, 0xf0; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x00000000084214: add [rax], al; test byte ptr [rbp], 0x80; jne short 0x0000000000084240; pop rbp; ret; 
0x0000000017c3d5: add [rax], al; test dh, 0x40; jne 0x000000000017c310; lea rax, [rdi+0xf]; ret; 
0x0000000017c41b: add [rax], al; test dh, 0x4; jne 0x000000000017c310; lea rax, [rdi+0xb]; ret; 
0x00000000045ce6: add [rax], al; test dil, dil; cmovne eax, ecx; add rsp, 0x8; ret; 
0x0000000017c352: add [rax], al; test dl, 0x40; jne short 0x000000000017c310; lea rax, [rdi+0x7]; ret; 
0x0000000017c380: add [rax], al; test dl, 0x4; jne short 0x000000000017c310; lea rax, [rdi+0x3]; ret; 
0x00000000045cc9: add [rax], al; test dl, dl; cmovne eax, ecx; add rsp, 0x8; ret; 
0x000000000873a3: add [rax], al; test eax, eax; cmovne eax, edx; ret; 
0x0000000013a5af: add [rax], al; test eax, eax; je short 0x000000000013a5c0; xor eax, eax; ret; 
0x00000000044a26: add [rax], al; test eax, eax; jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x00000000093f99: add [rax], al; test eax, eax; jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x00000000094059: add [rax], al; test eax, eax; jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x000000000d2299: add [rax], al; test eax, eax; jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d67d9: add [rax], al; test eax, eax; jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d69b6: add [rax], al; test eax, eax; jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000f7f89: add [rax], al; test eax, eax; jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f8039: add [rax], al; test eax, eax; jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f9b85: add [rax], al; test eax, eax; jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c96: add [rax], al; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d36: add [rax], al; test eax, eax; jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa186: add [rax], al; test eax, eax; jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa356: add [rax], al; test eax, eax; jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4d6: add [rax], al; test eax, eax; jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fd9f6: add [rax], al; test eax, eax; jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdfc9: add [rax], al; test eax, eax; jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe3a7: add [rax], al; test eax, eax; jne short 0x00000000000fe3b0; pop rbp; ret; 
0x000000000fe449: add [rax], al; test eax, eax; jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4f9: add [rax], al; test eax, eax; jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000ff256: add [rax], al; test eax, eax; jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2f6: add [rax], al; test eax, eax; jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000fffa6: add [rax], al; test eax, eax; jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x00000000100066: add [rax], al; test eax, eax; jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000102af6: add [rax], al; test eax, eax; jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x000000001092a9: add [rax], al; test eax, eax; jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x00000000109359: add [rax], al; test eax, eax; jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x00000000109409: add [rax], al; test eax, eax; jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094b9: add [rax], al; test eax, eax; jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x00000000109576: add [rax], al; test eax, eax; jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3b6: add [rax], al; test eax, eax; jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a486: add [rax], al; test eax, eax; jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a6a9: add [rax], al; test eax, eax; jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a766: add [rax], al; test eax, eax; jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a8c6: add [rax], al; test eax, eax; jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a969: add [rax], al; test eax, eax; jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad09: add [rax], al; test eax, eax; jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adb9: add [rax], al; test eax, eax; jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae69: add [rax], al; test eax, eax; jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afc9: add [rax], al; test eax, eax; jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b079: add [rax], al; test eax, eax; jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x000000000d88b3: add [rax], al; test edi, edi; js short 0x00000000000d88c0; ret; 
0x0000000010960e: add [rax], al; test edx, edx; je short 0x0000000000109640; mov eax, 0x145; syscall; 
0x00000000077202: add [rax], al; test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000772c2: add [rax], al; test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000d2148: add [rax], al; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000d21ac: add [rax], al; test rax, rax; je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x000000000f91a9: add [rax], al; test rax, rax; je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x0000000012916c: add [rax], al; test rax, rax; je short 0x0000000000129178; ret; 
0x00000000133a8e: add [rax], al; test rax, rax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x00000000143252: add [rax], al; test rax, rax; jne short 0x0000000000143240; pop rbx; ret; 
0x000000000b4b1e: add [rax], al; test rdx, rdx; jne short 0x00000000000b4b29; mov rax, rdi; ret; 
0x000000000c73ae: add [rax], al; test rsi, rsi; jne short 0x00000000000c73e0; mov eax, 0x60; syscall; 
0x00000000185d10: add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000016fff0: add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000018cbee: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbde: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6de: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6ce: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6ae: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbfe: add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d12e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d13e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d14e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d15e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018d0d0: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000188cae: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185efe: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185d6e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185d7e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d8e: add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000178ee7: add [rax], al; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001898fe: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x0000000018990e: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x0000000018991e: add [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x00000000187fae: add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001755f0: add [rax], al; vzeroupper; ret; 
0x0000000004365a: add [rax], al; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x0000000005c2f8: add [rax], al; xchg [rdi], eax; cmp eax, 0x1; jg short 0x000000000005c308; ret; 
0x00000000084e7a: add [rax], al; xchg [rip+0x16b88e], eax; cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x000000000783ca: add [rax], al; xchg [rip+0x1782fe], eax; cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x0000000016421c: add [rax], al; xchg ax, ax; mov [rcx], dx; ret; 
0x0000000016424c: add [rax], al; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000b085c: add [rax], al; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000b088c: add [rax], al; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000009045c: add [rax], al; xchg ax, ax; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000af88c: add [rax], al; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a25c: add [rax], al; xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000f9dfc: add [rax], al; xchg ax, ax; mov eax, 0x15; syscall; 
0x000000000c9b5c: add [rax], al; xchg ax, ax; mov eax, 0x24; syscall; 
0x00000000093a9c: add [rax], al; xchg ax, ax; mov eax, 0x3; syscall; 
0x0000000010b2ec: add [rax], al; xchg ax, ax; mov eax, 0x43; syscall; 
0x000000000fb36c: add [rax], al; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2ac: add [rax], al; xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a13c: add [rax], al; xchg ax, ax; mov eax, 0x63; syscall; 
0x0000000010905c: add [rax], al; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109d7c: add [rax], al; xchg ax, ax; mov eax, 0x7d; syscall; 
0x0000000010926c: add [rax], al; xchg ax, ax; mov eax, 0x87; syscall; 
0x000000000ff03c: add [rax], al; xchg ax, ax; mov eax, 0x8c; syscall; 
0x00000000102c1c: add [rax], al; xchg ax, ax; mov eax, 0x95; syscall; 
0x000000001003dc: add [rax], al; xchg ax, ax; mov eax, 0x99; syscall; 
0x00000000109ecc: add [rax], al; xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a07c: add [rax], al; xchg ax, ax; mov eax, 0xb4; syscall; 
0x0000000010541c: add [rax], al; xchg ax, ax; mov eax, 0xc2; syscall; 
0x0000000010547c: add [rax], al; xchg ax, ax; mov eax, 0xc3; syscall; 
0x0000000010535c: add [rax], al; xchg ax, ax; mov eax, 0xc4; syscall; 
0x0000000010550c: add [rax], al; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f2c: add [rax], al; xchg ax, ax; mov eax, 0xfe; syscall; 
0x00000000084dac: add [rax], al; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000fe82c: add [rax], al; xchg ax, ax; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000d2e7c: add [rax], al; xchg ax, ax; mov eax, [rdi]; ret; 
0x00000000117d0c: add [rax], al; xchg ax, ax; mov eax, edi; bswap eax; ret; 
0x000000000fe7cc: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000010a04c: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a10c: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053ec: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000084dec: add [rax], al; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x0000000018b64c: add [rax], al; xchg ax, ax; mov rax, rdi; ret; 
0x0000000004076c: add [rax], al; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000002d15c: add [rax], al; xchg ax, ax; ret; 
0x0000000018dc0c: add [rax], al; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de7c: add [rax], al; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018723c: add [rax], al; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b38cc: add [rax], al; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c4b1c: add [rax], al; xchg ax, ax; xor eax, eax; ret; 
0x000000000c5a7c: add [rax], al; xchg ax, ax; xor rax, rax; ret; 
0x000000000408bc: add [rax], al; xor bl, 0xf; adc [rdi], eax; movd xmm0, esi; ret; 
0x0000000008e5a3: add [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x000000000889aa: add [rax], al; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x0000000008e312: add [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x0000000008645d: add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x0000000003a7fe: add [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000e08d6: add [rax], al; xor eax, eax; cmp [rsi], cl; je 0x00000000000e083d; ret; 
0x0000000008fe96: add [rax], al; xor eax, eax; cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x0000000008a98e: add [rax], al; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000009a875: add [rax], al; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x00000000087806: add [rax], al; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x000000000d2c3a: add [rax], al; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000005bbe5: add [rax], al; xor eax, eax; pop rbp; ret; 
0x000000000443c1: add [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000009922b: add [rax], al; xor eax, eax; pop rbx; ret; 
0x00000000041b9a: add [rax], al; xor eax, eax; ret; 
0x000000000fe79e: add [rax], al; xor eax, eax; syscall; 
0x0000000007fb5e: add [rax], al; xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x0000000007fb6e: add [rax], al; xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x0000000016fe7e: add [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000446a6: add [rax], al; xor eax, ecx; ret; 
0x00000000139980: add [rax], al; xor ecx, ecx; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000008a3f0: add [rax], al; xor edi, edi; mov eax, 0x8f; syscall; 
0x0000000002d1fe: add [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x00000000102a4b: add [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000c7536: add [rax], al; xor edi, edi; syscall; 
0x0000000009ad66: add [rax], al; xor edx, edx; mov eax, edx; ret; 
0x0000000007d076: add [rax], al; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000815c8: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x000000000818ba: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000081de2: add [rax], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000b4361: add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000084703: add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000d20f8: add [rax], al; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000007cf7d: add [rax], al; xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000081815: add [rax], al; xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007cd7f: add [rax], al; xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c00: add [rax], al; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000043b0d: add [rax], al; xor esi, esi; mov rdi, r9; call r13; 
0x00000000076913: add [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000073294: add [rax], al; xor r10d, r10d; jmp rax; 
0x00000000128a3e: add [rax], al; xor r10d, r10d; mov eax, r10d; ret; 
0x000000000883b7: add [rax], al; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000006dff6: add [rax], al; xor r11d, r11d; mov r14d, 0x1; jmp rax; 
0x00000000074983: add [rax], al; xor r12d, r12d; jmp rax; 
0x0000000006f63e: add [rax], al; xor r13d, r13d; mov edx, 0x1; jmp rax; 
0x0000000014575e: add [rax], al; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000080ab6: add [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x000000000df1ce: add [rax], al; xor r9d, r9d; mov eax, r9d; ret; 
0x000000000c57ee: add [rax], al; xor rax, rax; ret; 
0x00000000086853: add [rax], al; xor sil, 0x80; syscall; 
0x00000000087d93: add [rax], al; xor sil, 0x81; syscall; 
0x0000000018128c: add [rax], al; xtest; je short 0x0000000000181297; vzeroall; ret; 
0x00000000183784: add [rax], al; xtest; je short 0x000000000018378f; vzeroall; ret; 
0x0000000008a981: add [rax], bh; cmove eax, edx; ret; 
0x000000001109c6: add [rax], bh; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x00000000137449: add [rax], bh; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x0000000018ca5f: add [rax], bh; setl al; neg eax; or eax, 0x1; ret; 
0x0000000009aa59: add [rax], cl; add [rax], al; jne short 0x000000000009aa10; ret; 
0x0000000009ab69: add [rax], cl; add [rax], al; jne short 0x000000000009ab20; ret; 
0x0000000009ac09: add [rax], cl; add [rax], al; jne short 0x000000000009abc0; ret; 
0x0000000009afd9: add [rax], cl; add [rax], al; jne short 0x000000000009af90; ret; 
0x0000000009b109: add [rax], cl; add [rax], al; jne short 0x000000000009b0c0; ret; 
0x0000000009bfb9: add [rax], cl; add [rax], al; jne short 0x000000000009bf70; ret; 
0x0000000009c049: add [rax], cl; add [rax], al; jne short 0x000000000009c000; ret; 
0x000000000b554d: add [rax], cl; add [rax], al; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b6648: add [rax], cl; add [rax], al; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b5098: add [rax], cl; add [rax], al; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x0000000009bb9d: add [rax], cl; add [rax], al; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x0000000003a643: add [rax], cl; add [rax], al; ret; 
0x000000000b5060: add [rax], cl; lea rax, [rip+0x10d37]; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x0000000009b9f3: add [rax], cl; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x000000000b6610: add [rax], cl; lea rax, [rip+0xfbc7]; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x0000000008b375: add [rax], cl; xor eax, eax; mov [rdi], ecx; ret; 
0x0000000005bbd8: add [rax], dl; add [rax], al; pop rbp; ret; 
0x0000000003a723: add [rax], dl; add [rax], al; ret; 
0x0000000005bbe3: add [rax], dl; add [rax], al; xor eax, eax; pop rbp; ret; 
0x000000000b65de: add [rax], dl; add al, ch; sub bh, [rdi]; clc; jmp qword ptr [rsi+0x2e]; 
0x0000000009b2d3: add [rax], dl; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1b3: add [rax], dl; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac43: add [rax], dl; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x000000000d84a5: add [rax], eax; add [rax+0x20], bh; cmove rax, rdx; ret; 
0x000000000f8742: add [rax], eax; add [rax+0xe], bh; syscall; 
0x000000000aa363: add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000447bd: add [rax], eax; add [rax-0x73], cl; add eax, 0x1abc4f; add rsp, 0x8; ret; 
0x00000000044715: add [rax], eax; add [rax-0x75], cl; and al, 0x8; add rsp, 0x18; ret; 
0x0000000013a7ce: add [rax], eax; add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000080f46: add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90]; 
0x000000000929e5: add [rax], eax; add [rax-0x77], cl; ret; 
0x000000000b453e: add [rax], eax; add [rax-0x77], cl; shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x000000000fdd58: add [rax], eax; add [rax-0x77], cl; xor esi, esi; syscall; 
0x0000000016860d: add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000098893: add [rax], eax; add [rax-0x7d], cl; call far fword ptr [rdi]; 
0x0000000018f41d: add [rax], eax; add [rax-0x7d], cl; ret far; 
0x000000000e0c56: add [rax], eax; add [rax-0x7d], cl; ret; 
0x0000000014efa2: add [rax], eax; add [rax], al; add [rax-0x1], bh; ret; 
0x000000001276fe: add [rax], eax; add [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000d20af: add [rax], eax; add [rax], al; add rsp, 0x8; ret; 
0x00000000080e4d: add [rax], eax; add [rax], al; call qword ptr [r12+0x80]; 
0x00000000142ca3: add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x00000000139089: add [rax], eax; add [rax], al; call qword ptr [rax+0x28]; 
0x000000000fb9ae: add [rax], eax; add [rax], al; call qword ptr [rbp+0x40]; 
0x00000000103b1d: add [rax], eax; add [rax], al; call r12; 
0x000000000c589f: add [rax], eax; add [rax], al; cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000c5c72: add [rax], eax; add [rax], al; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x000000000c5d22: add [rax], eax; add [rax], al; je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x000000000c57e1: add [rax], eax; add [rax], al; jg short 0x00000000000c57e9; neg eax; ret; 
0x0000000017e321: add [rax], eax; add [rax], al; jg short 0x000000000017e330; neg eax; ret; 
0x0000000017b887: add [rax], eax; add [rax], al; jl short 0x000000000017b890; neg eax; ret; 
0x0000000006dffd: add [rax], eax; add [rax], al; jmp rax; 
0x0000000013be25: add [rax], eax; add [rax], al; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000520a6: add [rax], eax; add [rax], al; mov [rdi], rdx; ret; 
0x00000000094829: add [rax], eax; add [rax], al; mov [rip+0x158b0c], rax; ret; 
0x000000000947f9: add [rax], eax; add [rax], al; mov [rip+0x158b44], rax; ret; 
0x000000000947d9: add [rax], eax; add [rax], al; mov [rip+0x158b89], eax; ret; 
0x0000000013a676: add [rax], eax; add [rax], al; mov [rsi+0x10], rax; ret; 
0x000000000449b2: add [rax], eax; add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x000000000df2f1: add [rax], eax; add [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x0000000005217e: add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000142c93: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000142c9b: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000142cc7: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000142ccf: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000073c94: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000143015: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000143020: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000013dce4: add [rax], eax; add [rax], al; mov eax, 0x1; ret; 
0x000000000868c8: add [rax], eax; add [rax], al; mov eax, 0xca; syscall; 
0x00000000088b6c: add [rax], eax; add [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008a02d: add [rax], eax; add [rax], al; mov eax, 0xe; syscall; 
0x00000000101817: add [rax], eax; add [rax], al; mov eax, r8d; add rsp, 0x8; ret; 
0x0000000007fb3a: add [rax], eax; add [rax], al; mov eax, r8d; ret; 
0x000000000df1bf: add [rax], eax; add [rax], al; mov eax, r9d; ret; 
0x0000000008e20d: add [rax], eax; add [rax], al; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000000feb1d: add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000868a4: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef6: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff6: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000088637: add [rax], eax; add [rax], al; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000010bce2: add [rax], eax; add [rax], al; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000014a616: add [rax], eax; add [rax], al; mov qword ptr [rip+0xb24bb], 0x0; add rsp, 0x8; ret; 
0x00000000074a72: add [rax], eax; add [rax], al; mov r10d, 0x1; jmp rax; 
0x0000000006f61a: add [rax], eax; add [rax], al; mov r11d, 0x1; jmp rax; 
0x0000000013aeaa: add [rax], eax; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000143ce5: add [rax], eax; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000007cf82: add [rax], eax; add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000088948: add [rax], eax; add [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000088271: add [rax], eax; add [rax], al; mov rdi, r9; mov eax, 0xca; syscall; 
0x0000000008181a: add [rax], eax; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x000000000829c6: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000007d8a3: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000760ab: add [rax], eax; add [rax], al; mov rdi, rbx; call r8; 
0x00000000075b85: add [rax], eax; add [rax], al; mov rdi, rbx; call rax; 
0x00000000073982: add [rax], eax; add [rax], al; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000140346: add [rax], eax; add [rax], al; movups [r8], xmm1; ret; 
0x00000000140356: add [rax], eax; add [rax], al; movups [r8], xmm2; ret; 
0x00000000140bc6: add [rax], eax; add [rax], al; movups [r8], xmm3; ret; 
0x00000000140ba6: add [rax], eax; add [rax], al; movups [r8], xmm4; ret; 
0x00000000140bb6: add [rax], eax; add [rax], al; movups [rdi+0x20], xmm2; ret; 
0x00000000140332: add [rax], eax; add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x0000000013dc5f: add [rax], eax; add [rax], al; movups [rdx], xmm1; ret; 
0x00000000142d1d: add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142fb9: add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm2; call rax; 
0x0000000007b157: add [rax], eax; add [rax], al; pop rbp; pop r12; ret; 
0x00000000144a85: add [rax], eax; add [rax], al; pop rbp; ret; 
0x00000000077967: add [rax], eax; add [rax], al; pop rbx; pop rbp; ret; 
0x000000000f8379: add [rax], eax; add [rax], al; pop rbx; ret; 
0x0000000005048f: add [rax], eax; add [rax], al; ret; 
0x0000000013e961: add [rax], eax; add [rax], al; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000f9d3d: add [rax], eax; add [rax], al; syscall; 
0x000000000d88b1: add [rax], eax; add [rax], al; test edi, edi; js short 0x00000000000d88c0; ret; 
0x0000000005c2b1: add [rax], eax; add [rax], al; xor eax, eax; ret; 
0x00000000073292: add [rax], eax; add [rax], al; xor r10d, r10d; jmp rax; 
0x00000000074981: add [rax], eax; add [rax], al; xor r12d, r12d; jmp rax; 
0x0000000009b9f1: add [rax], eax; add [rax], cl; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x0000000005b77c: add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000cbf77: add [rax], eax; add [rbp+0x6b], al; ret; 
0x000000000e867b: add [rax], eax; add [rbp-0x77], cl; in eax, 0x8d; add [r9-0x76f7dbbc], r9d; ret; 
0x000000000a47c8: add [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000008cc6e: add [rax], eax; add [rbx+0x16061905], cl; add [rcx], bh; ret; 
0x0000000005b13e: add [rax], eax; add [rbx+0x28907c8], al; mov eax, 0x1; ret; 
0x00000000091f12: add [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000ef32b: add [rax], eax; add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret; 
0x00000000149835: add [rax], eax; add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff65e924048b49], al; jmp qword ptr [rsi+0xf]; 
0x000000000ca157: add [rax], eax; add [rbx-0x12f6b], cl; jmp far fword ptr [rbx]; 
0x00000000093714: add [rax], eax; add [rbx-0x3f7c77bb], cl; add [rcx-0x7cb777bb], ecx; ret; 
0x00000000126784: add [rax], eax; add [rbx-0x45343], al; call qword ptr [rax]; 
0x000000000dc659: add [rax], eax; add [rbx-0x7bf0c207], al; ret; 
0x000000000f873b: add [rax], eax; add [rcx+0x1482484], cl; add [rax], al; mov eax, 0xe; syscall; 
0x000000000318e8: add [rax], eax; add [rcx+0x39], cl; ret far; 
0x00000000081c04: add [rax], eax; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000006d325: add [rax], eax; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000013b006: add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x0000000014ce00: add [rax], eax; add [rcx+rcx*4-0x20], al; pop r12; ret; 
0x0000000007af23: add [rax], eax; add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x00000000041a0e: add [rax], eax; add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x0000000014a470: add [rax], eax; add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x0000000004361b: add [rax], eax; add [rcx-0x1076b312], cl; call rax; 
0x000000000cfd49: add [rax], eax; add [rcx-0x11f43], al; jmp far fword ptr [rax]; 
0x000000000f0f18: add [rax], eax; add [rcx-0x73], al; jmp qword ptr [r14+0xf]; 
0x00000000132d56: add [rax], eax; add [rcx], ah; fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x000000000e868e: add [rax], eax; add [rcx], bh; ret; 
0x0000000007cf7c: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000081814: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007d075: add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x00000000084702: add [rax], eax; add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58]; 
0x00000000076912: add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000017ec6a: add [rax], eax; add [rdi+0x11], dh; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x00000000050388: add [rax], eax; add [rdi+0x2], bh; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000ffa25: add [rax], eax; add [rdi], cl; add al, 0x24; add rsp, 0x18; ret; 
0x00000000128d95: add [rax], eax; add [rdi], cl; mov dh, 0xc0; pop rbp; ret; 
0x00000000128ec9: add [rax], eax; add [rdi], cl; mov dh, 0xc0; pop rbx; ret; 
0x000000000389b5: add [rax], eax; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x00000000109185: add [rax], eax; add [rdx+0x8], bh; syscall; 
0x000000001398cc: add [rax], eax; add [rsi+0x4], bh; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000084454: add [rax], eax; add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000008cc7c: add [rax], eax; add bh, dh; ret; 
0x000000001641fc: add [rax], eax; add bl, al; ret; 
0x000000001704e0: add [rax], eax; add ch, al; std; xlat [rbx]; ret; 
0x00000000186da9: add [rax], eax; add ch, al; sti; xchg ebx, eax; ret; 
0x000000000446c5: add [rax], eax; add dl, dh; movups xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000005b1d7: add [rax], eax; add rsp, 0xd8; ret; 
0x00000000130bc5: add [rax], eax; call qword ptr [rsp+0x18]; 
0x0000000009b9fa: add [rax], eax; cmove rax, rdx; ret; 
0x0000000009ac4a: add [rax], eax; cmovne rax, rdx; ret; 
0x0000000004f806: add [rax], eax; jne short 0x000000000004f800; pop rbx; ret; 
0x0000000009c2db: add [rax], eax; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009bebb: add [rax], eax; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc9b: add [rax], eax; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd57: add [rax], eax; lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x000000000b5067: add [rax], eax; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x0000000009abd8: add [rax], eax; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009bf88: add [rax], eax; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x0000000009aa28: add [rax], eax; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x00000000137448: add [rax], eax; mov eax, 0x0; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x000000000d83d5: add [rax], eax; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x00000000130a64: add [rax], eax; mov edi, [rbx]; call qword ptr [rsp+0x28]; 
0x00000000130e8b: add [rax], eax; mov rax, [rsp+0x80]; mov edi, [rax]; call qword ptr [rsp+0x38]; 
0x0000000011c8c9: add [rax], eax; pop r12; pop r13; ret; 
0x00000000044930: add [rax], eax; ret; 
0x0000000011f0ea: add [rax], eax; test rax, rax; je short 0x000000000011f0f6; mov rdi, rbx; call rax; 
0x0000000011f3fa: add [rax], eax; test rax, rax; je short 0x000000000011f406; mov rdi, rbx; call rax; 
0x0000000011f4aa: add [rax], eax; test rax, rax; je short 0x000000000011f4ba; lea rdi, [rip+0xd7728]; call rax; 
0x000000001754c7: add [rax], eax; vzeroupper; ret; 
0x00000000130ad3: add [rax], eax; xor edi, edi; call qword ptr [rsp+0x28]; 
0x00000000130ecb: add [rax], eax; xor edi, edi; call qword ptr [rsp+0x38]; 
0x000000000b648f: add [rax], edx; add al, ch; jns short 0x00000000000b64d5; clc; jmp qword ptr [rsi+0xf]; 
0x0000000006f56b: add [rax], r8; add [rax], al; jmp rax; 
0x0000000006defb: add [rax], r8b; add [rax], al; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x00000000145a5d: add [rax], r8b; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x00000000128e2d: add [rax], r8b; add rsp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000f9250: add [rax], r8b; add rsp, 0x28; ret; 
0x000000000fa171: add [rax], r8b; add rsp, 0x68; ret; 
0x0000000009ded5: add [rax], r8b; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000014d0e5: add [rax], r8b; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000192785: add [rax], r8b; add rsp, 0x8; ret; 
0x00000000040a0d: add [rax], r8b; addss xmm0, xmm0; ret; 
0x0000000008e5c5: add [rax], r8b; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000087a1d: add [rax], r8b; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000186ebd: add [rax], r8b; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000186ecd: add [rax], r8b; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000052285: add [rax], r8b; bts rdx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x00000000192dc5: add [rax], r8b; call qword ptr [rbx]; 
0x000000000d924d: add [rax], r8b; call qword ptr [rdx+0x40]; 
0x000000000862fd: add [rax], r8b; cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x00000000144a1d: add [rax], r8b; cmp eax, 0x1; jne short 0x0000000000144a11; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000011130d: add [rax], r8b; cmp qword ptr [rdi+0x10], 0x0; je short 0x0000000000111320; xor eax, eax; ret; 
0x0000000008763d: add [rax], r8b; cmp qword ptr [rdi+0x28], 0x0; je short 0x0000000000087650; xor eax, eax; ret; 
0x000000000880ed: add [rax], r8b; cmp rdx, rbp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x000000000403b5: add [rax], r8b; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x000000000b161d: add [rax], r8b; lea r11, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff6d: add [rax], r8b; lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000039645: add [rax], r8b; lea rax, [rip+0x175e46]; ret; 
0x0000000009aae5: add [rax], r8b; lea rax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x00000000187f8d: add [rax], r8b; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x0000000017618d: add [rax], r8b; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000df33d: add [rax], r8b; mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x0000000006f4c5: add [rax], r8b; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000013dcdd: add [rax], r8b; mov dword ptr [r8+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000014036d: add [rax], r8b; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000008949d: add [rax], r8b; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000006f4b5: add [rax], r8b; mov dword ptr [rsp+0x38], 0x1; jmp rax; 
0x0000000006f565: add [rax], r8b; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000007493d: add [rax], r8b; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x0000000006f69d: add [rax], r8b; mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x0000000014b27d: add [rax], r8b; mov dword ptr fs:[rdx], 0x16; add rsp, 0x18; ret; 
0x000000000f998d: add [rax], r8b; mov eax, 0x102; syscall; 
0x000000000fb39d: add [rax], r8b; mov eax, 0x107; syscall; 
0x0000000008f65d: add [rax], r8b; mov eax, 0x10; ret; 
0x000000000fb2dd: add [rax], r8b; mov eax, 0x10a; syscall; 
0x000000000f98bd: add [rax], r8b; mov eax, 0x10c; syscall; 
0x0000000010a16d: add [rax], r8b; mov eax, 0x110; syscall; 
0x0000000010a1cd: add [rax], r8b; mov eax, 0x11b; syscall; 
0x00000000109e6d: add [rax], r8b; mov eax, 0x123; syscall; 
0x000000000fa43d: add [rax], r8b; mov eax, 0x124; syscall; 
0x000000000fa49d: add [rax], r8b; mov eax, 0x125; syscall; 
0x00000000109f8d: add [rax], r8b; mov eax, 0x126; syscall; 
0x0000000010a1fd: add [rax], r8b; mov eax, 0x12c; syscall; 
0x000000001000ed: add [rax], r8b; mov eax, 0x132; syscall; 
0x0000000010a28d: add [rax], r8b; mov eax, 0x13f; syscall; 
0x0000000010a2bd: add [rax], r8b; mov eax, 0x14a; syscall; 
0x0000000010a2ed: add [rax], r8b; mov eax, 0x14b; syscall; 
0x00000000087bdd: add [rax], r8b; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x00000000087edd: add [rax], r8b; mov eax, 0x16; ret; 
0x000000000fa46d: add [rax], r8b; mov eax, 0x16; syscall; 
0x000000000f005d: add [rax], r8b; mov eax, 0x18; syscall; 
0x0000000017e31d: add [rax], r8b; mov eax, 0x1; jg short 0x000000000017e330; neg eax; ret; 
0x000000000d91f5: add [rax], r8b; mov eax, 0x1; ret; 
0x0000000010a35d: add [rax], r8b; mov eax, 0x1b4; syscall; 
0x00000000102bbd: add [rax], r8b; mov eax, 0x1b; syscall; 
0x00000000102b8d: add [rax], r8b; mov eax, 0x1c; syscall; 
0x0000000010b2bd: add [rax], r8b; mov eax, 0x1e; syscall; 
0x000000000fa3dd: add [rax], r8b; mov eax, 0x20; syscall; 
0x000000000fa40d: add [rax], r8b; mov eax, 0x21; syscall; 
0x000000000d692d: add [rax], r8b; mov eax, 0x25; syscall; 
0x0000000010aa7d: add [rax], r8b; mov eax, 0x29; syscall; 
0x000000000ede75: add [rax], r8b; mov eax, 0x2; ret; 
0x0000000010aa4d: add [rax], r8b; mov eax, 0x30; syscall; 
0x0000000010a44d: add [rax], r8b; mov eax, 0x31; syscall; 
0x0000000010a5ad: add [rax], r8b; mov eax, 0x32; syscall; 
0x0000000010a54d: add [rax], r8b; mov eax, 0x33; syscall; 
0x0000000010a51d: add [rax], r8b; mov eax, 0x34; syscall; 
0x000000000fa20d: add [rax], r8b; mov eax, 0x49; syscall; 
0x000000000fa55d: add [rax], r8b; mov eax, 0x50; syscall; 
0x000000000fa58d: add [rax], r8b; mov eax, 0x51; syscall; 
0x000000000fb3cd: add [rax], r8b; mov eax, 0x54; syscall; 
0x000000000fb30d: add [rax], r8b; mov eax, 0x59; syscall; 
0x000000000f97ad: add [rax], r8b; mov eax, 0x5b; syscall; 
0x000000000fadcd: add [rax], r8b; mov eax, 0x5d; syscall; 
0x000000000fadfd: add [rax], r8b; mov eax, 0x5e; syscall; 
0x000000000d673d: add [rax], r8b; mov eax, 0x64; syscall; 
0x00000000109fed: add [rax], r8b; mov eax, 0x67; syscall; 
0x000000000d7e8d: add [rax], r8b; mov eax, 0x6d; syscall; 
0x000000000d7ebd: add [rax], r8b; mov eax, 0x6f; syscall; 
0x000000000d7f1d: add [rax], r8b; mov eax, 0x70; syscall; 
0x000000000d7f4d: add [rax], r8b; mov eax, 0x76; syscall; 
0x000000000d7f7d: add [rax], r8b; mov eax, 0x78; syscall; 
0x0000000010908d: add [rax], r8b; mov eax, 0x7b; syscall; 
0x00000000109dad: add [rax], r8b; mov eax, 0x7e; syscall; 
0x0000000010a19d: add [rax], r8b; mov eax, 0x86; syscall; 
0x000000000effcd: add [rax], r8b; mov eax, 0x8f; syscall; 
0x000000000efffd: add [rax], r8b; mov eax, 0x90; syscall; 
0x000000000f002d: add [rax], r8b; mov eax, 0x91; syscall; 
0x000000000f008d: add [rax], r8b; mov eax, 0x92; syscall; 
0x000000000f00bd: add [rax], r8b; mov eax, 0x93; syscall; 
0x000000000f00ed: add [rax], r8b; mov eax, 0x94; syscall; 
0x00000000102c4d: add [rax], r8b; mov eax, 0x96; syscall; 
0x00000000102c7d: add [rax], r8b; mov eax, 0x97; syscall; 
0x00000000102cad: add [rax], r8b; mov eax, 0x98; syscall; 
0x00000000109d0d: add [rax], r8b; mov eax, 0x9a; syscall; 
0x0000000010a0ad: add [rax], r8b; mov eax, 0x9b; syscall; 
0x000000000fff6d: add [rax], r8b; mov eax, 0xa1; syscall; 
0x0000000010002d: add [rax], r8b; mov eax, 0xa2; syscall; 
0x0000000010040d: add [rax], r8b; mov eax, 0xa7; syscall; 
0x0000000010043d: add [rax], r8b; mov eax, 0xa8; syscall; 
0x00000000102abd: add [rax], r8b; mov eax, 0xa; syscall; 
0x00000000108f4d: add [rax], r8b; mov eax, 0xac; syscall; 
0x00000000108f1d: add [rax], r8b; mov eax, 0xad; syscall; 
0x00000000109ddd: add [rax], r8b; mov eax, 0xae; syscall; 
0x00000000109e0d: add [rax], r8b; mov eax, 0xb0; syscall; 
0x0000000008b40d: add [rax], r8b; mov eax, 0xba; syscall; 
0x000000001054ad: add [rax], r8b; mov eax, 0xc6; syscall; 
0x0000000010538d: add [rax], r8b; mov eax, 0xc7; syscall; 
0x00000000109e3d: add [rax], r8b; mov eax, 0xd5; syscall; 
0x00000000109d3d: add [rax], r8b; mov eax, 0xe4; syscall; 
0x00000000109f5d: add [rax], r8b; mov eax, 0xfd; syscall; 
0x00000000109fbd: add [rax], r8b; mov eax, 0xff; syscall; 
0x00000000041e55: add [rax], r8b; mov eax, 0xffffffff; ret; 
0x000000000f8e7d: add [rax], r8b; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000d6f75: add [rax], r8b; mov eax, edx; syscall; 
0x0000000012191d: add [rax], r8b; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x0000000008fcbd: add [rax], r8b; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x0000000012188d: add [rax], r8b; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000079cc5: add [rax], r8b; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000007497d: add [rax], r8b; mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x000000000af8ad: add [rax], r8b; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000004167d: add [rax], r8b; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x000000000fae2d: add [rax], r8b; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fb27d: add [rax], r8b; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb33d: add [rax], r8b; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000010a22d: add [rax], r8b; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010981d: add [rax], r8b; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000fdf8d: add [rax], r8b; mov r10, rcx; mov eax, 0x28; syscall; 
0x0000000010aaad: add [rax], r8b; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010a57d: add [rax], r8b; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a01d: add [rax], r8b; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109efd: add [rax], r8b; mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0dd: add [rax], r8b; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010553d: add [rax], r8b; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054dd: add [rax], r8b; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053bd: add [rax], r8b; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000010544d: add [rax], r8b; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000102bed: add [rax], r8b; mov r10, rcx; mov eax, 0xd8; syscall; 
0x0000000010b28d: add [rax], r8b; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000109e9d: add [rax], r8b; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000010917d: add [rax], r8b; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x00000000128add: add [rax], r8b; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000007fb35: add [rax], r8b; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000008eed5: add [rax], r8b; mov r8d, 0x23; mov eax, r8d; ret; 
0x00000000074925: add [rax], r8b; mov r9d, 0x1; jmp rax; 
0x0000000007328d: add [rax], r8b; mov r9d, 0x1; xor r10d, r10d; jmp rax; 
0x00000000040585: add [rax], r8b; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret; 
0x0000000014c525: add [rax], r8b; mov rax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x0000000008567d: add [rax], r8b; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x0000000014c665: add [rax], r8b; mov rax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x00000000085715: add [rax], r8b; mov rax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x000000001055c5: add [rax], r8b; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000008775d: add [rax], r8b; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x0000000009304d: add [rax], r8b; mov rax, [rdi+0x78]; ret; 
0x0000000014487d: add [rax], r8b; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x000000001454cd: add [rax], r8b; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x00000000144a2d: add [rax], r8b; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x00000000144fd5: add [rax], r8b; mov rax, [rdi+0x8]; lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000144a8d: add [rax], r8b; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000144aed: add [rax], r8b; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000009485d: add [rax], r8b; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000948cd: add [rax], r8b; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x0000000009484d: add [rax], r8b; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x0000000008bf7d: add [rax], r8b; mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x000000000862ed: add [rax], r8b; mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862dd: add [rax], r8b; mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862cd: add [rax], r8b; mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x0000000009481d: add [rax], r8b; mov rax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x000000000d2265: add [rax], r8b; mov rax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f5: add [rax], r8b; mov rax, [rip+0x11ac11]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000093efd: add [rax], r8b; mov rax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a7d: add [rax], r8b; mov rax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000091035: add [rax], r8b; mov rax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c15: add [rax], r8b; mov rax, [rip+0x1ab1f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004140d: add [rax], r8b; mov rax, [rip+0x1ab9f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000002d66d: add [rax], r8b; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000014d05d: add [rax], r8b; mov rax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000001426d5: add [rax], r8b; mov rax, [rip+0xaa751]; pop rbx; ret; 
0x0000000014252d: add [rax], r8b; mov rax, [rip+0xaa891]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000128f3d: add [rax], r8b; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000117fbd: add [rax], r8b; mov rax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x0000000010a38d: add [rax], r8b; mov rax, [rip+0xe2a79]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000001099dd: add [rax], r8b; mov rax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109985: add [rax], r8b; mov rax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109935: add [rax], r8b; mov rax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e5: add [rax], r8b; mov rax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109745: add [rax], r8b; mov rax, [rip+0xe36c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109715: add [rax], r8b; mov rax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104e55: add [rax], r8b; mov rax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001038ad: add [rax], r8b; mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010067d: add [rax], r8b; mov rax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000010051d: add [rax], r8b; mov rax, [rip+0xec8e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fea05: add [rax], r8b; mov rax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9bd: add [rax], r8b; mov rax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fc21d: add [rax], r8b; mov rax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9675: add [rax], r8b; mov rax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000003a95d: add [rax], r8b; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000055765: add [rax], r8b; mov rax, r10; add rsp, 0x20; ret; 
0x0000000011620d: add [rax], r8b; mov rax, r8; ret; 
0x000000000b0b1d: add [rax], r8b; mov rax, rdi; ret; 
0x00000000085875: add [rax], r8b; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x358]; 
0x00000000085905: add [rax], r8b; mov rdi, rax; call qword ptr [rbx+0x358]; 
0x000000000af8ed: add [rax], r8b; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000a15ed: add [rax], r8b; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000a146d: add [rax], r8b; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret; 
0x0000000007077d: add [rax], r8b; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000004241d: add [rax], r8b; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx; 
0x000000000424e5: add [rax], r8b; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx; 
0x000000000c752d: add [rax], r8b; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x0000000013dc45: add [rax], r8b; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x0000000014033d: add [rax], r8b; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x0000000017d82d: add [rax], r8b; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x0000000017d81d: add [rax], r8b; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017d80d: add [rax], r8b; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d7fd: add [rax], r8b; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7ed: add [rax], r8b; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7dd: add [rax], r8b; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x000000000f859d: add [rax], r8b; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x0000000017606d: add [rax], r8b; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x00000000187e5d: add [rax], r8b; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x0000000018a2fd: add [rax], r8b; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000087a9d: add [rax], r8b; or dword ptr [rdi+0x8], 0x40; xor eax, eax; mov [rdi+0x4], esi; ret; 
0x0000000008e59d: add [rax], r8b; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x0000000013950d: add [rax], r8b; pop rbp; ret; 
0x0000000006451d: add [rax], r8b; ret; 
0x0000000007e345: add [rax], r8b; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e405: add [rax], r8b; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x00000000084385: add [rax], r8b; sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x0000000007b765: add [rax], r8b; sub rcx, rax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000010960d: add [rax], r8b; test edx, edx; je short 0x0000000000109640; mov eax, 0x145; syscall; 
0x00000000133a8d: add [rax], r8b; test rax, rax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x0000000018d13d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d14d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d15d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000185efd: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185d6d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185d7d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d8d: add [rax], r8b; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001898fd: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x0000000018990d: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x0000000018991d: add [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001017f5: add [rax], r8b; xor eax, eax; add rsp, 0x8; ret; 
0x0000000008a98d: add [rax], r8b; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000100915: add [rax], r8b; xor eax, eax; pop rbp; ret; 
0x00000000043515: add [rax], r8b; xor eax, eax; ret; 
0x000000000fe79d: add [rax], r8b; xor eax, eax; syscall; 
0x0000000016fe7d: add [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x0000000009ad65: add [rax], r8b; xor edx, edx; mov eax, edx; ret; 
0x00000000128a3d: add [rax], r8b; xor r10d, r10d; mov eax, r10d; ret; 
0x0000000006dff5: add [rax], r8b; xor r11d, r11d; mov r14d, 0x1; jmp rax; 
0x0000000011771d: add [rax], r8b; xor r8d, r8d; mov rax, r8; ret; 
0x000000000c57ed: add [rax], r8b; xor rax, rax; ret; 
0x000000000f8741: add [rax], rax; add [rax+0xe], bh; syscall; 
0x00000000129163: add [rbp+0x12], dh; mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x0000000000129178; ret; 
0x0000000012f9f0: add [rbp+0x13], dh; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x00000000084e31: add [rbp+0x14], dh; mov [rip+0x16b8dd], rbx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x00000000040541: add [rbp+0x14], dh; mov rax, 0xfffffffffffff; test rdx, rax; je short 0x0000000000040558; ret; 
0x0000000010b16d: add [rbp+0x18], dh; mov eax, 0x47; syscall; 
0x00000000103cb2: add [rbp+0x1b], esi; ret; 
0x000000000d8404: add [rbp+0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000bb544: add [rbp+0x1d8e0fdb], al; add eax, [rax]; add [rbp+0x6348ff43], cl; ret far; 
0x00000000131ec0: add [rbp+0x1d], esi; ret; 
0x00000000045cfe: add [rbp+0x1e], dh; xor eax, eax; add rsp, 0x8; ret; 
0x0000000008e5b6: add [rbp+0x1f], esi; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x0000000008a944: add [rbp+0x2f], dh; mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x000000000008a958; ret; 
0x00000000138eb0: add [rbp+0x310b75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000006dff7: add [rbp+0x31], al; fild st, dword ptr [rcx-0x42]; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006e2b3: add [rbp+0x31], al; imul al; ret far; 
0x000000000fcee9: add [rbp+0x31], al; in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x0000000006f63f: add [rbp+0x31], al; in eax, dx; mov edx, 0x1; jmp rax; 
0x000000001370d6: add [rbp+0x31], al; jmp qword ptr [rbx+rax*4+0x38]; 
0x00000000116b93: add [rbp+0x31], al; jmp qword ptr [rbx+rax*4+0x39]; 
0x000000000398f6: add [rbp+0x31], al; jmp qword ptr [rdi+rax*8]; 
0x000000000df1cf: add [rbp+0x31], al; leave; mov eax, r9d; ret; 
0x00000000128a3f: add [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x30], cl; ret; 
0x00000000030e9f: add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret; 
0x000000000faebf: add [rbp+0x31], al; ror byte ptr [rax-0x7d], 0xc4; mov rax, r8; pop rbp; ret; 
0x0000000005bef1: add [rbp+0x31], al; ror byte ptr [rbp+rcx*4+0x35], 0xa4; jge short 0x000000000005bf10; add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x0000000008b97b: add [rbp+0x31], al; ror byte ptr [rcx+0x48f631ca], cl; mov edi, ebp; mov eax, r15d; syscall; 
0x000000000ca3ce: add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x0000000010b31e: add [rbp+0x31], al; sar byte ptr [rax+0x1d], cl; syscall; 
0x0000000008689e: add [rbp+0x31], al; sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000088632: add [rbp+0x31], al; sar byte ptr [rdx+0x1], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000883b8: add [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x0000000008e735: add [rbp+0x31], al; sar byte ptr [rdx+0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000086f56: add [rbp+0x31], al; sar byte ptr [rsi+0x81], cl; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000002dd57: add [rbp+0x31], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x000000000b5ac2: add [rbp+0x31], eax; shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x20]; call r13; 
0x00000000113ddb: add [rbp+0x32], dh; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000016992b: add [rbp+0x32], esi; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x00000000125183: add [rbp+0x39], cl; ret; 
0x000000000979c9: add [rbp+0x39], ecx; ret far; 
0x00000000043e2a: add [rbp+0x3], dh; pop rbx; ret; 
0x00000000103c80: add [rbp+0x3d], esi; ret; 
0x0000000009f0a2: add [rbp+0x40ea75c0], eax; or [rdi], dh; mov eax, r8d; ret; 
0x00000000145d8f: add [rbp+0x410c75d2], al; mov eax, 0x1; mov eax, r8d; ret; 
0x000000001090ca: add [rbp+0x411975c0], al; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x000000000fdab6: add [rbp+0x412575c0], al; mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000041e82: add [rbp+0x414975c0], al; mov edx, 0x8; mov eax, 0x80; syscall; 
0x0000000002d611: add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x0000000005c614: add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000005a5bd: add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000004187e: add [rbp+0x41], bl; pop rsp; ret; 
0x000000000ff39a: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x127; syscall; 
0x000000000ff44a: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000d688a: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0xf7; syscall; 
0x0000000010a80a: add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5ea: add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000041628: add [rbp+0x480b75c0], al; add esp, 0x8; ret; 
0x000000000f8f60: add [rbp+0x480b75c0], al; mov eax, [rsp]; add rsp, 0x18; ret; 
0x00000000091076: add [rbp+0x480d78c0], al; add esp, 0x110; pop rbp; ret; 
0x00000000120395: add [rbp+0x480e74ff], al; mov eax, [rip+0xdc8c7]; ret; 
0x0000000013cceb: add [rbp+0x481074d2], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000091f73: add [rbp+0x481078c0], al; add esp, 0x110; pop rbp; ret; 
0x0000000010bb62: add [rbp+0x481174db], al; movsxd ebx, ebx; mov [rip+0xe18af], rbx; pop rbx; ret; 
0x0000000014a180: add [rbp+0x482478c0], al; mov eax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000149f99: add [rbp+0x482b78c0], al; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000fae91: add [rbp+0x483a75c0], al; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x00000000139239: add [rbp+0x486274c0], al; mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139bf2: add [rbp+0x48a474c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139bcb: add [rbp+0x48cb74c0], al; mov dword ptr [rsp+0x8], 0x0; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000ca3b6: add [rbp+0x4c0d75c0], al; mov eax, eax; add rsp, 0x8; ret; 
0x0000000008620c: add [rbp+0x4c0f74f6], al; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000095c0f: add [rbp+0x4e], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000014b3c9: add [rbp+0x58d48c0], al; sbb eax, 0x48000b17; cmovne eax, edx; add rsp, 0x8; ret; 
0x0000000006ece7: add [rbp+0x5a3ce043], ecx; jbe 0x000000000006f668; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000fe3a8: add [rbp+0x5d0375c0], al; ret; 
0x000000000413d1: add [rbp+0x5d0a75c0], al; ret; 
0x0000000006ecbc: add [rbp+0x63480013], dl; add al, 0x88; add rax, rsi; jmp rax; 
0x000000000bb54c: add [rbp+0x6348ff43], cl; ret far; 
0x0000000014c349: add [rbp+0x6], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000cbf79: add [rbp+0x6b], al; ret; 
0x000000000983e6: add [rbp+0x7], dh; ret; 
0x00000000090487: add [rbp+0x8], dh; and eax, 0x38; cmp eax, 0x8; je short 0x0000000000090493; ret; 
0x0000000008614d: add [rbp+0x8], dh; and edx, 0x38; cmp edx, 0x8; je short 0x0000000000086159; ret; 
0x000000000d8525: add [rbp+0x8], dh; mov eax, 0x40; ret; 
0x0000000008f605: add [rbp+0x8], esi; xor eax, eax; ret; 
0x000000001901e7: add [rbp+0x9], cl; ret far; 
0x0000000003ae62: add [rbp+0xb], dh; add rsp, 0x18; ret; 
0x00000000084b22: add [rbp+0xb], dh; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x000000000911aa: add [rbp+0xb], dh; xor eax, eax; pop rbp; ret; 
0x00000000040901: add [rbp+0xc], dh; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000128eb0: add [rbp+0xd], dh; xor eax, eax; add rsp, 0x100; pop rbx; ret; 
0x0000000003ee43: add [rbp+0xf], al; mov dh, 0xdb; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000005d802: add [rbp+0xf], al; mov dh, 0xe4; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x000000000e2861: add [rbp+0xf], al; mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x00000000128945: add [rbp+0xf], bl; mov dh, 0xc0; pop r12; pop r13; ret; 
0x00000000050e0f: add [rbp+0xf], cl; lodsd [rsi]; ret; 
0x00000000050cff: add [rbp+0xf], cl; movsd [rdi], [rsi]; ret; 
0x0000000005c0be: add [rbp+0xf], esi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000040908: add [rbp+rax-0x3d], dh; nop [rax]; and esi, 0x80000000; movd xmm0, esi; ret; 
0x0000000015310f: add [rbp+rcx*4+0x1d], cl; imul ebp, [rbp+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549cf: add [rbp+rcx*4+0x1d], cl; imul edx, [rsi+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fbf: add [rbp+rcx*4+0x1d], cl; mov ecx, 0x4900066e; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155c2f: add [rbp+rcx*4+0x1d], cl; or [rsi+rax], eax; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b161f: add [rbp+rcx*4+0x1d], cl; sbb [rdi+rcx+0xc634900], ecx; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000015325f: add [rbp+rcx*4+0x1d], cl; sbb [rsi+rax], ebp; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151a74: add [rbp+rcx*4+0x1d], cl; test [rbp+0x634f0006], al; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x0000000015598f: add [rbp+rcx*4+0x1d], cl; test eax, 0x49000646; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bcf: add [rbp+rcx*4+0x1d], cl; test eax, 0x49000672; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000070352: add [rbp+rcx*4+0x2c], cl; test [rax], eax; add [rax], al; add [rax+0x29], cl; ret; 
0x00000000059d06: add [rbp+rcx*4+0x2d], cl; stosb [rdi]; stc; adc eax, 0x358d4c00; call far fword ptr [rcx+0x15]; 
0x00000000059d0d: add [rbp+rcx*4+0x35], cl; call far fword ptr [rcx+0x15]; 
0x000000000c7349: add [rbp+rcx*4+0x44], cl; and al, 0x40; call qword ptr [rax+0x338]; 
0x00000000133c6f: add [rbp+rcx*4+0x47], cl; or [rcx], dh; rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x0000000000133c80; ret; 
0x000000000df22f: add [rbp+rcx*4+0x49], al; add [rcx+rcx*4-0x38], eax; ret; 
0x0000000013998a: add [rbp+rcx*4+0x4c], cl; and al, 0x18; call qword ptr [rax]; 
0x0000000013970a: add [rbp+rcx*4+0x4c], cl; and al, 0x1c; call qword ptr [rax]; 
0x000000000b5ac7: add [rbp+rcx*4+0x4c], cl; and al, 0x20; call r13; 
0x00000000139d42: add [rbp+rcx*4+0x4c], cl; and al, 0x30; call qword ptr [rax]; 
0x000000000b5c8c: add [rbp+rcx*4+0x4c], ecx; and al, 0x20; call rbx; 
0x0000000007de8c: add [rbp+rcx*4+0x4d], cl; enter 0x894c, 0xf9; mov rdi, r14; xor r8d, r8d; call r12; 
0x0000000012b7da: add [rbp+rcx*4+0x5], cl; mov dh, 0x1c; or [rax], al; add rdi, r8; jmp rdi; 
0x000000000e7db7: add [rbp+rcx*4+0x65], cl; or [rax-0x77], cl; ret; 
0x00000000129ab9: add [rbp+rcx*4+0x6c], ecx; ret; 
0x0000000008ce94: add [rbp+rcx*4+0x7f], cl; adc [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000001204ef: add [rbp+rcx*4-0x43], cl; sar bl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000d6ec4: add [rbp+rcx*4-0x70], ecx; rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x00000000125604: add [rbp+rcx*4-0x74], cl; ret; 
0x000000001255fc: add [rbp+rcx*4-0x7c], ecx; add byte ptr [rax], 0x0; add [rbp+rcx*4-0x74], cl; ret; 
0x00000000085bc9: add [rbp+rcx+0x48], dh; mov eax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x0000000008802e: add [rbp+rdx*2+0x48], esi; add esp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000fe748: add [rbp+rdx-0x48], dh; add [rcx], eax; add [rax], al; syscall; 
0x00000000144a22: add [rbp-0x14], esi; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000009ccb3: add [rbp-0x16], esi; ret; 
0x0000000010ed75: add [rbp-0x172b8701], al; shl dword ptr [rbp+0x5c7fffe], 0x1; jmp rsi; 
0x0000000019305b: add [rbp-0x17], bl; cmp bh, ch; jmp qword ptr [rsi+0xf]; 
0x00000000091092: add [rbp-0x1a], esi; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000000df227: add [rbp-0x1d14feb8], cl; nop [rax]; lea r9d, [rcx+0x1]; mov eax, r9d; ret; 
0x00000000091f92: add [rbp-0x1d], esi; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000000c3e9f: add [rbp-0x1e71f025], al; add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x0000000008b357: add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x0000000005048b: add [rbp-0x1e], esi; mov eax, 0x1; ret; 
0x0000000012275f: add [rbp-0x1f7cf6b9], cl; clc; add eax, 0x10; ret; 
0x00000000086da4: add [rbp-0x1f], dh; pop rbx; ret; 
0x0000000002d140: add [rbp-0x2c], dh; mov rdx, [rip+0x1bfd3e]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x00000000100ad9: add [rbp-0x2d], esi; mov rax, r8; ret; 
0x0000000009a232: add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x000000000584d7: add [rbp-0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000008f6bd: add [rbp-0x30], esi; mov eax, 0x10; ret; 
0x0000000002d150: add [rbp-0x3c], dh; ret; 
0x00000000144a88: add [rbp-0x3d], bl; nop [rax+rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000087ca8: add [rbp-0x3dbaf040], al; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000873a4: add [rbp-0x3dbaf040], al; ret; 
0x0000000014cf82: add [rbp-0x3eb7fbb9], cl; loopne 0x000000000014cf8f; lea rax, [rax+rdx+0x4]; ret; 
0x0000000002d8ce: add [rbp-0x3f6af040], al; add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000013cbd8: add [rbp-0x3f6af040], al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000005c131: add [rbp-0x3f6af040], al; movzx eax, al; neg eax; pop rbp; ret; 
0x000000000fb23b: add [rbp-0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x000000000416b7: add [rbp-0x41e38a40], al; or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x000000000f9b86: add [rbp-0x47ba8a40], al; add [rcx], eax; add [rax], al; syscall; 
0x000000000ff2f7: add [rbp-0x47eb8a40], al; adc al, 0x0; add [rax], al; syscall; 
0x000000000ff257: add [rbp-0x47eb8a40], al; adc eax, [rax]; add [rax], al; syscall; 
0x000000000f9d37: add [rbp-0x47eb8a40], al; add [rax], eax; add [rax], al; syscall; 
0x000000000fa357: add [rbp-0x47eb8a40], al; add eax, [rax]; add [rax], al; syscall; 
0x000000000d69b7: add [rbp-0x47eb8a40], al; and al, [rax]; add [rax], al; syscall; 
0x00000000102af7: add [rbp-0x47eb8a40], al; sbb al, [rax]; add [rax], al; syscall; 
0x0000000010a487: add [rbp-0x47eb8a40], al; sub al, [rax]; add [rax], al; syscall; 
0x0000000010a3b7: add [rbp-0x47eb8a40], al; sub eax, [rax]; add [rax], al; syscall; 
0x00000000109577: add [rbp-0x47eb8a40], al; xor [rcx], al; add [rax], al; syscall; 
0x000000000f7f8a: add [rbp-0x47ee8a40], al; adc [rax], eax; add [rax], al; syscall; 
0x0000000010935a: add [rbp-0x47ee8a40], al; adc al, 0x1; add [rax], al; syscall; 
0x000000000f803a: add [rbp-0x47ee8a40], al; adc al, [rax]; add [rax], al; syscall; 
0x000000001094ba: add [rbp-0x47ee8a40], al; adc eax, [rcx]; add [rax], al; syscall; 
0x0000000010ad0a: add [rbp-0x47ee8a40], al; and [rcx], al; add [rax], al; syscall; 
0x000000000d229a: add [rbp-0x47ee8a40], al; out 0x0, al; add [rax], al; syscall; 
0x0000000010a96a: add [rbp-0x47ee8a40], al; sub al, 0x0; add [rax], al; syscall; 
0x0000000010adba: add [rbp-0x47ee8a40], al; sub eax, [rcx]; add [rax], al; syscall; 
0x0000000010ae6a: add [rbp-0x47ee8a40], al; xor eax, [rcx]; add [rax], al; syscall; 
0x000000000b50a2: add [rbp-0x4a], dh; ret; 
0x0000000009aa5c: add [rbp-0x4f], dh; ret; 
0x0000000008f6b6: add [rbp-0x57fb8b37], al; add [rbp-0x30], esi; mov eax, 0x10; ret; 
0x000000000d9642: add [rbp-0x587af040], al; add al, [rax]; add [rbx-0x2d773], al; call qword ptr [rax]; 
0x0000000009bba7: add [rbp-0x5a], dh; ret; 
0x0000000002db7f: add [rbp-0x73], cl; jmp qword ptr [esp+eax*2-0x75]; 
0x0000000018f822: add [rbp-0x73], cl; push rcx; dec byte ptr [rax-0x77]; ret far; 
0x0000000008e428: add [rbp-0x7420812e], al; add eax, 0x15ee61; mov [rsi], eax; xor eax, eax; ret; 
0x000000000fead4: add [rbp-0x74f68740], al; and al, 0xc; add rsp, 0x18; ret; 
0x0000000018e3b6: add [rbp-0x76b23fb6], cl; ret far; 
0x000000000f7d9f: add [rbp-0x76b7febd], cl; ret; 
0x0000000008febf: add [rbp-0x76f38701], al; cmp eax, 0x1648e6; xor eax, eax; ret; 
0x000000000ff518: add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff688: add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000e867d: add [rbp-0x77], cl; in eax, 0x8d; add [r9-0x76f7dbbc], r9d; ret; 
0x000000000d73cf: add [rbp-0x77], cl; loop 0x00000000000d741c; lea esi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000554bf: add [rbp-0x77], cl; ret far; 
0x000000000331d0: add [rbp-0x77], cl; ret; 
0x00000000128adf: add [rbp-0x77], cl; ror byte ptr [rcx+rcx*4-0x30], 0x1; mov byte ptr [r8], 0x0; ret; 
0x0000000014c364: add [rbp-0x77], dh; and al, 0xc; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x000000000eb3d7: add [rbp-0x7b], al; in al, 0x74; ret; 
0x0000000008ebf8: add [rbp-0x7b], al; inc dword ptr [rdi+rcx+0x45]; jmp far fword ptr [rax-0xff88afe]; 
0x000000000e728d: add [rbp-0x7b], al; ror byte ptr [rdi], 0x8e; ret far; 
0x000000000f8444: add [rbp-0x7b], al; shl byte ptr [rbp-0x1c], 0x8b; push rbx; add al, 0xeb; ret; 
0x0000000003720f: add [rbp-0x7cf38b0a], al; inc byte ptr [rbx]; je short 0x0000000000037220; ret; 
0x00000000131c33: add [rbp-0x7e], esi; ret; 
0x00000000091eef: add [rbp-0x7eb38a40], al; ret far; 
0x0000000012490b: add [rbp-0x7ffa8140], al; cmp ebp, [rsi]; je short 0x0000000000124920; pop rbx; ret; 
0x0000000004f807: add [rbp-0xa], dh; pop rbx; ret; 
0x000000000efed0: add [rbx+0x105f710d], cl; add [rcx+0x5b595a0a], cl; ret; 
0x0000000008617f: add [rbx+0x107401ff], al; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x00000000186e90: add [rbx+0x14840c0], al; clc; ret; 
0x000000001705ca: add [rbx+0x14840c0], al; clc; vzeroupper; ret; 
0x0000000016b9b9: add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x00000000159802: add [rbx+0x157890e], ecx; mov [rdi], ecx; ret; 
0x0000000008cc70: add [rbx+0x16061905], cl; add [rcx], bh; ret; 
0x00000000102714: add [rbx+0x167f01f8], al; pop rbp; pop r12; pop r13; ret; 
0x00000000084e3a: add [rbx+0x16b8d205], al; add [rcx], al; pop rbx; ret; 
0x0000000007e29f: add [rbx+0x1789cfe2], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010b5c7: add [rbx+0x197520fa], eax; mov edx, 0x40; mov eax, 0x14; syscall; 
0x00000000149ff1: add [rbx+0x197f01f8], al; add rsp, 0x8; ret; 
0x0000000012f121: add [rbx+0x197f01f8], al; pop rbx; ret; 
0x00000000041e0e: add [rbx+0x1ab3b205], cl; add bl, al; nop [rax+rax]; mov eax, [rip+0x1ab39e]; ret; 
0x0000000008aabf: add [rbx+0x1b7f01f8], al; mov eax, r12d; pop r12; ret; 
0x000000000e92c3: add [rbx+0x1be01e9], eax; add [rax], al; add [rcx+0x39], al; ret; 
0x00000000192ebe: add [rbx+0x1c7f01f8], al; pop rbx; ret; 
0x0000000008e47f: add [rbx+0x1cf8c107], cl; and eax, 0x3; mov [rsi], eax; xor eax, eax; ret; 
0x000000000441dd: add [rbx+0x1d7f01f8], al; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000008948e: add [rbx+0x1e08307], cl; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c84ec: add [rbx+0x1e7f01f8], al; add rsp, 0x8; ret; 
0x0000000010ee3c: add [rbx+0x1e7f01fa], al; add rsp, 0x18; ret; 
0x0000000008e49f: add [rbx+0x1ef8c107], cl; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e48f: add [rbx+0x1fe8c107], cl; mov [rsi], eax; xor eax, eax; ret; 
0x0000000007fb7f: add [rbx+0x2002507], cl; add [rax], al; ret; 
0x00000000044059: add [rbx+0x217f01f8], al; pop rbp; ret; 
0x0000000014a0c8: add [rbx+0x227f01f8], al; mov rax, r12; pop r12; ret; 
0x000000000434b8: add [rbx+0x227f01f8], al; xor eax, eax; pop rbx; ret; 
0x000000001328d7: add [rbx+0x237f01f8], al; add rsp, 0x8; ret; 
0x00000000044166: add [rbx+0x247f01fa], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000009849d: add [rbx+0x257f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000005b140: add [rbx+0x28907c8], al; mov eax, 0x1; ret; 
0x00000000145aec: add [rbx+0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000fe63f: add [rbx+0x2b0247c], al; mov eax, [rsp-0x4c]; jne short 0x00000000000fe605; neg eax; ret; 
0x0000000012e51f: add [rbx+0x2b7f01f8], al; pop rbp; ret; 
0x000000000cfddd: add [rbx+0x2b802fb], al; add [rax], al; add [rdi], cl; ret; 
0x00000000089625: add [rbx+0x2d0bb], cl; add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x0000000008fcbf: add [rbx+0x2d0bf], cl; add [rax+0xcb], bh; syscall; 
0x0000000014a04c: add [rbx+0x2e7f01f8], al; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000fe697: add [rbx+0x2f8247c], al; mov eax, [rsp-0x4]; jne short 0x00000000000fe664; neg eax; ret; 
0x000000000b391f: add [rbx+0x30178916], cl; in eax, dx; mov [rdi+0x4], ch; ret; 
0x0000000005c2bf: add [rbx+0x31010442], al; rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000002dd54: add [rbx+0x314500d0], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x00000000082f89: add [rbx+0x317f01f8], al; add rsp, 0x8; ret; 
0x0000000011e71f: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000824bf: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000086ad8: add [rbx+0x327f01f8], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000102787: add [rbx+0x337f01f8], al; pop rbp; ret; 
0x000000000e9940: add [rbx+0x34801e8], al; test [rax+rax*4], ah; add al, [rax]; add [rax-0x73], cl; ret; 
0x000000000b0eee: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000b1d2e: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000af8df: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x00000000086287: add [rbx+0x37401f8], al; ret; 
0x000000000326f3: add [rbx+0x394907e0], eax; ret; 
0x0000000012191f: add [rbx+0x3b83b], cl; add [rax], al; syscall; 
0x0000000012188f: add [rbx+0x3b83f], cl; add [rax], al; syscall; 
0x000000000d7e58: add [rbx+0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000b1cff: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000b058f: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000c569f: add [rbx+0x463b0447], cl; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x000000000c56cf: add [rbx+0x463b0c47], cl; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x0000000017e22f: add [rbx+0x463bfc47], cl; cld; jne 0x000000000017e320; ret; 
0x000000000b0ebf: add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000af8bf: add [rbx+0x477880e], cl; mov [rdi], ecx; ret; 
0x000000001665ae: add [rbx+0x48028901], cl; lea eax, [rdx+0x3]; ret; 
0x0000000016995f: add [rbx+0x48028901], cl; mov eax, edi; ret; 
0x0000000004170d: add [rbx+0x48082444], cl; add esp, 0x18; ret; 
0x0000000008feac: add [rbx+0x480c2444], cl; add esp, 0x18; ret; 
0x0000000014c375: add [rbx+0x480c2444], cl; add esp, 0x30; pop rbx; ret; 
0x0000000013ff42: add [rbx+0x48102444], cl; lea edx, [rip+0x6ebd2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000002d1c3: add [rbx+0x4814247c], cl; mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000001766ff: add [rbx+0x48178916], cl; lea eax, [rdi+0x3]; vzeroupper; ret; 
0x000000000b1cee: add [rbx+0x48178916], cl; lea eax, [rdi+0x4]; ret; 
0x000000000b011f: add [rbx+0x49178916], cl; sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x0000000018b1bf: add [rbx+0x49178916], cl; sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000001232e9: add [rbx+0x49], bl; add edx, eax; mov eax, edx; mov [r9], r10; ret; 
0x0000000013c8e7: add [rbx+0x4b8b1443], cl; adc [rbx-0x76b6f7ad], cl; ret; 
0x000000000fc2d0: add [rbx+0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000015418e: add [rbx+0x4e8bf956], cl; cld; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153f8e: add [rbx+0x4e8bfa56], cl; cld; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153d8e: add [rbx+0x4e8bfb56], cl; cld; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000017b650: add [rbx+0x4f3bfc4e], cl; cld; jne 0x000000000017b886; xor eax, eax; ret; 
0x0000000004d7ca: add [rbx+0x507f01f8], al; add rsp, 0x10; pop rbx; ret; 
0x0000000011f492: add [rbx+0x507f01f8], al; add rsp, 0x8; ret; 
0x0000000012756e: add [rbx+0x50f01c2], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000015914e: add [rbx+0x5789fc56], cl; cld; ret; 
0x00000000098cc6: add [rbx+0x57f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000e48a2: add [rbx+0x5b010447], al; pop rbp; pop r12; ret; 
0x000000000916a6: add [rbx+0x5d], bl; mov eax, r12d; pop r12; ret; 
0x000000000519b7: add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000041fe4: add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000002d477: add [rbx+0x5d], bl; pop r12; ret; 
0x00000000076729: add [rbx+0x5d], bl; ret; 
0x000000000e48a6: add [rbx+0x5d], ebx; pop r12; ret; 
0x000000000806ff: add [rbx+0x5e8c107], cl; and eax, 0x1; ret; 
0x00000000131fb7: add [rbx+0x627f01f8], al; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000e0368: add [rbx+0x634801ea], eax; ret; 
0x00000000131b95: add [rbx+0x634807e6], al; add al, 0xb1; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x000000000affa9: add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000087676: add [rbx+0x64], bl; mov eax, [rax]; ret; 
0x00000000145a6f: add [rbx+0x66c32847], cl; nop [rax+rax]; nop; xor eax, eax; ret; 
0x0000000008a94c: add [rbx+0x67510e0], al; ret; 
0x00000000087a94: add [rbx+0x67602fe], al; ret; 
0x0000000008778f: add [rbx+0x6890447], cl; xor eax, eax; ret; 
0x000000000dcbf7: add [rbx+0x745d087b], al; push 0xffffffffffffff8b; or [r8-0x7d], cl; ret; 
0x00000000144f7f: add [rbx+0x748d4802], cl; and al, 0x18; mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000001449df: add [rbx+0x748d4806], cl; and al, 0x8; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000865ef: add [rbx+0x75c08507], cl; or cl, [rdi]; add ebp, edx; xor eax, eax; ret; 
0x0000000007fb4e: add [rbx+0x8042507], cl; add [rax], al; ret; 
0x000000000f95e2: add [rbx+0x87426f8], al; mov eax, r9d; ret; 
0x000000000f8f04: add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000d71fa: add [rbx+0x87f01f8], al; pop rbx; ret; 
0x00000000108e8a: add [rbx+0x87f01f8], al; ret; 
0x00000000123101: add [rbx+0x97401f8], al; test eax, eax; jne short 0x0000000000123120; mov eax, r8d; ret; 
0x000000000783d1: add [rbx+0x97f01f8], al; ret; 
0x000000000862ff: add [rbx+0xb74013f], al; ret; 
0x0000000008e58f: add [rbx+0xb7401fe], al; mov eax, 0x16; ret; 
0x000000000d208f: add [rbx+0xb7401fe], al; xor eax, eax; ret; 
0x0000000013f7cf: add [rbx+0xb74023e], al; mov eax, 0x1; ret; 
0x00000000087eef: add [rbx+0xb7420ff], al; ret; 
0x000000001144ae: add [rbx+0xb7456ff], al; mov eax, 0x7; ret; 
0x0000000008fc8f: add [rbx+0xb7701fe], al; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000087ecf: add [rbx+0xb7701fe], al; mov [rdi], esi; xor eax, eax; ret; 
0x0000000008fc6f: add [rbx+0xb7702fe], al; mov [rdi], esi; xor eax, eax; ret; 
0x000000000fd87f: add [rbx+0xb7704fa], al; mov [rsi+0x66], dx; xor eax, eax; ret; 
0x0000000010bd77: add [rbx+0xc], dh; mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000012038f: add [rbx+0xd695a3d], cl; add [rbp+0x480e74ff], al; mov eax, [rip+0xdc8c7]; ret; 
0x0000000010ed6f: add [rbx+0xde7123d], cl; add [rbp-0x172b8701], al; shl dword ptr [rbp+0x5c7fffe], 0x1; jmp rsi; 
0x0000000008e4af: add [rbx+0xdff2507], cl; add [rdi], cl; mov [rsi], eax; xor eax, eax; ret; 
0x000000001597ff: add [rbx+0xe8b0156], cl; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x0000000015978f: add [rbx+0xe8b0256], cl; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x0000000015971f: add [rbx+0xe8b0356], cl; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x000000000d8636: add [rbx+rax*4+0x38], ah; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000014b26f: add [rbx+rax*4+0x3a], ah; sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x0000000017b88a: add [rbx+rax-0x9], bh; fadd st, st(3); ret; 
0x00000000085c9d: add [rbx+rcx*4+0x12], cl; mov rax, [rax+0x340]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x000000000f6665: add [rbx+rcx*4+0x1c], cl; and al, 0x48; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008a055: add [rbx+rcx*4+0x1d], cl; ret; 
0x00000000109630: add [rbx+rcx*4+0x2], ah; cmp eax, 0x26; je short 0x0000000000109674; mov eax, r8d; ret; 
0x0000000010440f: add [rbx+rcx*4+0x42], cl; adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret; 
0x0000000007b039: add [rbx+rcx*4+0x44], al; and al, 0x8; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x000000000f9c8f: add [rbx+rcx*4+0x4], ah; and eax, 0x18; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x00000000032543: add [rbx+rcx*4+0x4c], cl; and al, 0x38; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x000000001397c5: add [rbx+rcx*4+0x5], cl; ret far; 
0x000000000ef32d: add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret; 
0x00000000042e47: add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret; 
0x000000000d1b24: add [rbx+rcx*4+0x74], cl; ret; 
0x0000000004306f: add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret; 
0x0000000003c569: add [rbx+rcx*4-0x44], cl; and al, 0xd0; add [rax], al; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000009ed93: add [rbx+rcx*4-0x54], cl; and al, 0xa8; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000004e803: add [rbx+rcx*4-0x6c], cl; and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x000000000f269d: add [rbx+rcx*4-0x73], cl; cmp dh, 0xff; jmp far fword ptr [rdx]; 
0x000000000f95df: add [rbx+rcx*4], ah; cmp eax, 0x26; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x00000000044b0e: add [rbx+rcx*4], ah; cmp eax, 0x4; je short 0x0000000000044ad8; mov eax, 0xffffffff; ret; 
0x000000000ed566: add [rbx+rcx*4], cl; mov [rax], rdi; mov rax, r8; ret; 
0x000000000806c3: add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x000000001155ea: add [rbx+rcx-0x3d], dh; xchg ax, ax; xor eax, eax; ret; 
0x000000000879c2: add [rbx+rcx-0x7b], esi; div byte ptr [rbp+0x17]; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x00000000149837: add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff65e924048b49], al; jmp qword ptr [rsi+0xf]; 
0x000000000ca159: add [rbx-0x12f6b], cl; jmp far fword ptr [rbx]; 
0x00000000144a1f: add [rbx-0x138afe08], al; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x000000000e0365: add [rbx-0x157cfe15], al; add [rax+0x63], ecx; ret; 
0x00000000085b80: add [rbx-0x17], bl; sbb [rdi-0x6], esp; jmp qword ptr [rsi+0xf]; 
0x000000000d964a: add [rbx-0x2d773], al; call qword ptr [rax]; 
0x000000000f8c07: add [rbx-0x2dcef787], cl; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x00000000110c0c: add [rbx-0x2f], esi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000001403b7: add [rbx-0x37f0a7b9], cl; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x0000000014038f: add [rbx-0x37f0b7b9], cl; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x00000000140c46: add [rbx-0x37f0efc0], cl; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x00000000140c7e: add [rbx-0x37f0f3c0], cl; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x000000001403a2: add [rbx-0x37f0fe18], al; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x00000000140c29: add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000101339: add [rbx-0x387c0f19], al; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000131e96: add [rbx-0x389bdff5], al; add [rip-0x48000000], bl; sbb eax, 0x5b000000; ret; 
0x0000000007d2a7: add [rbx-0x3b7cb7fe], cl; sbb [rbx+0x5d], bl; ret; 
0x00000000131fc5: add [rbx-0x3d], bl; lea rdi, [rbx+0x8]; call rsi; 
0x000000001038a7: add [rbx-0x3d], bl; nop [rax+rax]; mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000008e787: add [rbx-0x3d], bl; nop [rax+rax]; ret; 
0x000000001427b2: add [rbx-0x3d], bl; nop [rax]; mov rax, [rip+0xaa619]; pop rbx; ret; 
0x00000000142742: add [rbx-0x3d], bl; nop [rax]; mov rax, [rip+0xaa879]; pop rbx; ret; 
0x00000000044b11: add [rbx-0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x0000000010531b: add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x0000000013a64f: add [rbx-0x3f7acfb9], cl; jne short 0x000000000013a6b0; mov dword ptr [rsi], 0x0; ret; 
0x00000000129b26: add [rbx-0x3f7ae7c0], cl; jne short 0x0000000000129b30; ret; 
0x00000000093716: add [rbx-0x3f7c77bb], cl; add [rcx-0x7cb777bb], ecx; ret; 
0x00000000126786: add [rbx-0x45343], al; call qword ptr [rax]; 
0x000000001269f6: add [rbx-0x45763], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000001260ec: add [rbx-0x46363], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x00000000127356: add [rbx-0x47373], cl; jmp qword ptr [rbx+rcx*4+0x18]; 
0x00000000145b3f: add [rbx-0x47fbd7b9], al; add [rax], eax; add [rax], al; ret; 
0x00000000129e98: add [rbx-0x49f0fe0d], al; ret; 
0x0000000006a7f8: add [rbx-0x5574b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x00000000064b06: add [rbx-0x55763], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000000685dc: add [rbx-0x55773], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x00000000061139: add [rbx-0x5ef43], cl; jmp qword ptr [rcx+rcx*4+0x38]; 
0x0000000005db02: add [rbx-0x5ef4b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000005cf41: add [rbx-0x5ef73], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x0000000005f3f5: add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000063e38: add [rbx-0x63f7b], ecx; dec dword ptr [rax-0x7d]; ret; 
0x0000000006e809: add [rbx-0x67b7df18], al; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x000000000df34f: add [rbx-0x688bfb1f], al; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x00000000113e1d: add [rbx-0x6a417c8], cl; bnd jmp qword ptr [rsi+0x66]; 
0x0000000010192b: add [rbx-0x6af00008], al; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000000dc201: add [rbx-0x6bf0a301], al; ret; 
0x0000000011f2b5: add [rbx-0x70f0fe06], al; test eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x0000000008aff3: add [rbx-0x70f0fe08], al; ret; 
0x00000000085b30: add [rbx-0x72b7f7bd], cl; adc eax, 0x1236c1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008776f: add [rbx-0x72ef7b9], cl; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008779f: add [rbx-0x73ef7b9], cl; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x00000000044b0b: add [rbx-0x749bffe6], eax; add [rbx-0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x00000000043e84: add [rbx-0x75], bl; pop rax; ret; 
0x000000001665bf: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x0000000016227f: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000140c06: add [rbx-0x7637f100], cl; ror byte ptr [rcx-0x77], 0x0; mov eax, 0x1; ret; 
0x000000000c0bf7: add [rbx-0x76b30383], cl; out 0x89, al; ret; 
0x000000000929c8: add [rbx-0x76b7ffab], cl; ret far; 
0x00000000122f5c: add [rbx-0x77bffe12], al; ja short 0x0000000000122f65; ret; 
0x000000000fc7de: add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret; 
0x00000000075d87: add [rbx-0x77cdf18], al; sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000006e3c1: add [rbx-0x78f0d008], al; call qword ptr [rax+rax]; 
0x0000000006c67f: add [rbx-0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x000000000fe83f: add [rbx-0x7a3fcee9], cl; sar byte ptr [rax+0x8], cl; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000009e388: add [rbx-0x7ab7dbbc], cl; ror byte ptr [rdi], 0x85; ret far; 
0x0000000006dacc: add [rbx-0x7af00008], al; ret far; 
0x00000000065249: add [rbx-0x7af09108], al; mov es, [rdi]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000067399: add [rbx-0x7af09e08], al; sub [rax], eax; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000d7c07: add [rbx-0x7af0fd08], al; ret far; 
0x000000000f208b: add [rbx-0x7bf00208], al; ret far; 
0x000000000dc1f8: add [rbx-0x7bf0a201], al; add al, 0x0; add [rbx-0x6bf0a301], al; ret; 
0x000000000dc65b: add [rbx-0x7bf0c207], al; ret; 
0x0000000008947f: add [rbx-0x7c072ef9], cl; loopne 0x0000000000089488; mov [rsi], eax; xor eax, eax; ret; 
0x0000000014a4df: add [rbx-0x7c99fa17], al; stc; add esi, [rsi+0x7]; ret; 
0x0000000011226f: add [rbx-0x7cb7c7ad], cl; ret; 
0x000000000b696f: add [rbx-0x7cb7fb85], cl; ret; 
0x000000000b51e6: add [rbx-0x7cb7fb8d], cl; ret; 
0x0000000005a3a7: add [rbx-0x7cb7fbbd], cl; ret; 
0x000000000501e7: add [rbx-0x7cb7fe40], al; ror dword ptr [rax], 0x41; cmp ebx, eax; jne short 0x00000000000501b0; ret; 
0x0000000018763a: add [rbx-0x7cf0f706], al; in al, dx; add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x00000000174ba3: add [rbx-0x7cf0fb06], al; ret; 
0x0000000006bbdf: add [rbx-0x88f63], cl; jmp far fword ptr [rcx]; 
0x000000000717f2: add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x000000000717e4: add [rbx-0x8b37b], cl; inc dword ptr [rbp-0x37af040]; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x00000000071b76: add [rbx-0x8ef43], al; call qword ptr [rax]; 
0x00000000071adf: add [rbx-0x8ef43], eax; call qword ptr [rax]; 
0x000000001265d4: add [rbx-0x9363], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000000b568b: add [rbx-0x9], ebp; call qword ptr [rax+0x8c48348]; 
0x0000000003bd9d: add [rbx-0xb373], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x00000000050ea2: add [rbx-0xd], esi; mov rax, rdx; ret; 
0x000000000d118f: add [rbx-0xf743], cl; dec dword ptr [rdi]; ret; 
0x000000001014ab: add [rbx], ah; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000012c403: add [rbx], al; add [rax], al; add cl, ch; ret; 
0x000000000861bf: add [rbx], al; add [rax], al; ret; 
0x0000000010057d: add [rbx], al; and al, 0x38; add rsp, 0x48; ret; 
0x000000000911f1: add [rbx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000090ac1: add [rbx], cl; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000072055: add [rbx], ebp; add [rax], al; add cl, ch; imul edi, esp, 0xffffffff; call qword ptr [rax+0x4cc98949]; 
0x000000000df29f: add [rbx], edi; jl short 0x00000000000df310; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x0000000010d057: add [rcx+0x104e23c1], cl; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000010ce8f: add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000000a145f: add [rcx+0x146348c2], cl; xchg ecx, eax; add rdx, rcx; jmp rdx; 
0x000000000501b8: add [rcx+0x146348c2], cl; xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000cfad7: add [rcx+0x146348c6], cl; mov bh, 0x48; add edx, edi; jmp rdx; 
0x000000000a1532: add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; jmp rdx; 
0x0000000013a6bb: add [rcx+0x146349c1], cl; mov [rcx+rax-0x3e], cl; jmp rdx; 
0x000000000a15df: add [rcx+0x146349c2], cl; nop; add rdx, r8; jmp rdx; 
0x000000000f873d: add [rcx+0x1482484], cl; add [rax], al; mov eax, 0xe; syscall; 
0x0000000014032c: add [rcx+0x1847c7f0], cl; add [rax], eax; add [rax], al; movups [rdi+0x8], xmm0; ret; 
0x0000000010011f: add [rcx+0x1969befa], cl; adc ch, [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000004e80b: add [rcx+0x1], cl; ret; 
0x00000000041e4b: add [rcx+0x1ab37615], ecx; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000013dcd2: add [rcx+0x1b802], cl; add [rax], al; ret; 
0x000000000c9bd5: add [rcx+0x1eb850c7], al; add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+0x7]; ret; 
0x00000000058917: add [rcx+0x21], cl; ret; 
0x000000000c0ba7: add [rcx+0x295d5bd8], cl; rol byte ptr [rcx+0x5c], 0x1; pop r13; pop r14; ret; 
0x0000000016a8b5: add [rcx+0x29], cl; ret far; 
0x0000000007cfaf: add [rcx+0x2b], cl; adc [r8+0x1], r9b; ret; 
0x000000001665f1: add [rcx+0x3418b02], ecx; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000ac4a6: add [rcx+0x3418b02], ecx; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x000000000cfb3f: add [rcx+0x346348c6], cl; mov bh, 0x48; add esi, edi; jmp rsi; 
0x0000000016426f: add [rcx+0x3518911], cl; ret; 
0x00000000139feb: add [rcx+0x35de8ef], cl; cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000000a04dd: add [rcx+0x38], eax; ret; 
0x00000000121c6f: add [rcx+0x39], al; ret far; 
0x0000000008d163: add [rcx+0x39], al; ret; 
0x000000000318ea: add [rcx+0x39], cl; ret far; 
0x000000000975fe: add [rcx+0x39], cl; ret; 
0x000000000e06de: add [rcx+0x39], eax; shl dword ptr [rbp-0x34], 0x44; mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret; 
0x000000000a0df6: add [rcx+0x39], ecx; ret far; 
0x00000000032bdf: add [rcx+0x39], ecx; ret; 
0x000000000c5881: add [rcx+0x39], ecx; shl byte ptr [rbp-0x17], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x00000000086d96: add [rcx+0x40ca83c2], cl; lock cmpxchg [r8+0x308], edx; jne short 0x0000000000086d88; pop rbx; ret; 
0x0000000014a410: add [rcx+0x415d5bd8], cl; pop rsp; pop r13; pop r14; ret; 
0x000000001665d1: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000ac486: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x00000000115682: add [rcx+0x433b1843], ecx; sbb al, 0x74; adc ebx, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x000000001665c1: add [rcx+0x4418a02], ecx; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000ac466: add [rcx+0x4418a02], ecx; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000000cfab1: add [rcx+0x46348ca], cl; xchg esi, eax; add rax, rsi; jmp rax; 
0x00000000140312: add [rcx+0x46348f2], cl; xchg ecx, eax; add rax, rcx; jmp rax; 
0x000000000d86e8: add [rcx+0x46348f6], cl; mov dl, 0x48; add eax, edx; jmp rax; 
0x0000000010b210: add [rcx+0x46349d1], cl; mov [rcx+rax-0x40], cl; jmp rax; 
0x00000000125406: add [rcx+0x4808244c], cl; mov eax, [rsp]; mov rdi, r12; call rax; 
0x00000000085d04: add [rcx+0x52], al; call rax; 
0x000000000b089f: add [rcx+0x57896617], cl; add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000efed6: add [rcx+0x5b595a0a], cl; ret; 
0x0000000002d5c0: add [rcx+0x5c], al; pop r13; pop r14; jmp rax; 
0x000000001032a0: add [rcx+0x5c], al; pop r13; ret; 
0x000000001156a3: add [rcx+0x5c], al; pop rbp; ret; 
0x0000000007dd19: add [rcx+0x5c], eax; pop r13; pop r14; ret; 
0x00000000130771: add [rcx+0x5c], eax; pop r13; ret; 
0x0000000010326b: add [rcx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000008e036: add [rcx+0x5f740447], ecx; xor eax, eax; ret; 
0x00000000151aee: add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000073985: add [rcx+0x63], cl; add al, 0x83; add rax, rcx; jmp rax; 
0x0000000017944c: add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000af738: add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018f43b: add [rcx+0x63], cl; or al, 0x99; add rcx, r9; jmp rcx; 
0x000000000ebccd: add [rcx+0x63], cl; rol byte ptr [rcx+0x29], 0x1; ret; 
0x000000000f89d4: add [rcx+0x63], ecx; test [rax], r8d; add rax, r13; jmp rax; 
0x000000000c0b26: add [rcx+0x75db85c2], cl; fisttp dword ptr [rcx+0x295d5bd8], st; rol byte ptr [rcx+0x5c], 0x1; ret; 
0x0000000003a7ef: add [rcx+0x7fe083f8], cl; ret; 
0x000000000fe149: add [rcx+0x9], cl; enter 0x774, 0x31; ror byte ptr [rax+0x39], 0xca; je short 0x00000000000fe160; ret; 
0x0000000010421f: add [rcx+0x9], ecx; ret far; 
0x0000000004dfa8: add [rcx+0x9], ecx; rol byte ptr [rbx-0x248adb07], 0x4c; mov eax, eax; ret; 
0x0000000008863a: add [rcx+0xcab8de], cl; add [rax], al; syscall; 
0x000000000870ae: add [rcx+0xeab8c7], cl; add [rax], al; mov esi, [r9+0x10]; syscall; 
0x00000000140bc9: add [rcx+0xf], al; adc [rax], ebx; ret; 
0x00000000140349: add [rcx+0xf], al; adc [rax], ecx; ret; 
0x00000000140359: add [rcx+0xf], al; adc [rax], edx; ret; 
0x00000000140ba9: add [rcx+0xf], al; adc [rax], esp; ret; 
0x00000000070ccc: add [rcx+0xf], al; mov dh, 0x47; or al, 0x83; ret; 
0x0000000005014b: add [rcx+0xf], al; ret; 
0x0000000009e487: add [rcx+0xf], al; xchg ebp, eax; ret; 
0x0000000008e59f: add [rcx+0xf], al; xor byte ptr [rcx], 0xc0; ret; 
0x0000000003c711: add [rcx+0xf], cl; ret far; 
0x000000000f55e2: add [rcx+0xf], eax; xchg ebp, eax; mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70]; 
0x00000000145dc1: add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x000000000f8dea: add [rcx+0xf], ecx; ret; 
0x000000001284c1: add [rcx+0xfc085c2], ecx; test [rcx+rax], ah; add [rbp-0x77], cl; ret far; 
0x000000000fe1ac: add [rcx+rax*2+0x3d], dh; add [rax+0xa740000], al; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000000f89d9: add [rcx+rax-0x18], cl; jmp rax; 
0x0000000012b7e1: add [rcx+rax-0x39], cl; jmp rdi; 
0x0000000012861d: add [rcx+rbp-0x37], ecx; cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285d6: add [rcx+rbp-0x37], ecx; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000f4b3a: add [rcx+rbx*2+0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000413e6: add [rcx+rcx*4+0x2], ah; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000132755: add [rcx+rcx*4+0x2d], cl; ret; 
0x0000000003f090: add [rcx+rcx*4+0x40], cl; adc [rax-0x77], cl; cmp [rcx+rcx*4+0x48], cl; or cl, ch; ret; 
0x00000000093dd0: add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x000000000a14b6: add [rcx+rcx*4+0x7], al; add rax, rdi; ret; 
0x00000000092c59: add [rcx+rcx*4-0x10], al; syscall; 
0x00000000143968: add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000088ceb: add [rcx+rcx*4-0x11], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000083c2a: add [rcx+rcx*4-0x11], ecx; call qword ptr [rax+0x18]; 
0x00000000111d51: add [rcx+rcx*4-0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000010b6c0: add [rcx+rcx*4-0x12], cl; mov edi, r12d; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x00000000078174: add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000081c06: add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000008169d: add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x000000000fdac0: add [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x000000000b5fa6: add [rcx+rcx*4-0x16], cl; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000006d327: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c422: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000006b66f: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013be96: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x0000000006e0a9: add [rcx+rcx*4-0x16], cl; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x000000000b5e6a: add [rcx+rcx*4-0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x0000000011f93f: add [rcx+rcx*4-0x17], cl; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x0000000013bf4f: add [rcx+rcx*4-0x17], cl; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x00000000092ffe: add [rcx+rcx*4-0x18], al; syscall; 
0x0000000013ae5d: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000013ae41: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000013b008: add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x0000000014be6e: add [rcx+rcx*4-0x19], cl; call rax; 
0x0000000011f8ab: add [rcx+rcx*4-0x19], cl; call rbp; 
0x0000000011fb8f: add [rcx+rcx*4-0x19], cl; call rbx; 
0x0000000008f49b: add [rcx+rcx*4-0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000423e6: add [rcx+rcx*4-0x19], ecx; call rbx; 
0x0000000007cd87: add [rcx+rcx*4-0x1], cl; call qword ptr [r13+0x80]; 
0x0000000007cf85: add [rcx+rcx*4-0x1], cl; call qword ptr [rbp+0x80]; 
0x0000000008716e: add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x000000000d217e: add [rcx+rcx*4-0x1a], cl; mov edi, ebp; mov eax, 0xe5; syscall; 
0x000000000fa07f: add [rcx+rcx*4-0x1e], al; mov eax, 0x10d; syscall; 
0x0000000008b3e3: add [rcx+rcx*4-0x1e], al; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000007ccbd: add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007261e: add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc2c: add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000077a35: add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000078f17: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078db1: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000b622a: add [rcx+rcx*4-0x1f], cl; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x000000000f98b1: add [rcx+rcx*4-0x20], al; pop r12; pop r13; ret; 
0x0000000014ce02: add [rcx+rcx*4-0x20], al; pop r12; ret; 
0x0000000010ed61: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; pop r13; ret; 
0x0000000014b7c3: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x0000000005a3cd: add [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000012fefe: add [rcx+rcx*4-0x20], al; syscall; 
0x0000000010048b: add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000003e155: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000005ba23: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x00000000094dee: add [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000111b2d: add [rcx+rcx*4-0x2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000011f947: add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x000000000424e7: add [rcx+rcx*4-0x2], cl; mov rdi, r12; mov rdx, rbp; call rbx; 
0x0000000007fdca: add [rcx+rcx*4-0x30], al; syscall; 
0x00000000055767: add [rcx+rcx*4-0x30], cl; add rsp, 0x20; ret; 
0x0000000003f85d: add [rcx+rcx*4-0x30], cl; ret; 
0x00000000088274: add [rcx+rcx*4-0x31], cl; mov eax, 0xca; syscall; 
0x00000000088fd4: add [rcx+rcx*4-0x31], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f945: add [rcx+rcx*4-0x38], al; ret; 
0x00000000086dee: add [rcx+rcx*4-0x38], al; syscall; 
0x000000000a11dc: add [rcx+rcx*4-0x38], cl; ret; 
0x000000000df233: add [rcx+rcx*4-0x38], eax; ret; 
0x0000000008894b: add [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x0000000007af25: add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x000000000902c6: add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall; 
0x0000000007fdbf: add [rcx+rcx*4-0x3e], cl; mov rsi, rbx; mov edi, 0x2; mov eax, r10d; syscall; 
0x0000000010181a: add [rcx+rcx*4-0x40], al; add rsp, 0x8; ret; 
0x00000000036bed: add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret; 
0x00000000041a11: add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x0000000007b9c0: add [rcx+rcx*4-0x40], al; ret; 
0x0000000008999b: add [rcx+rcx*4-0x40], al; syscall; 
0x00000000101bca: add [rcx+rcx*4-0x40], cl; add rsp, 0x8; ret; 
0x0000000014a472: add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x0000000003e78f: add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000101439: add [rcx+rcx*4-0x40], cl; ret; 
0x0000000010c9be: add [rcx+rcx*4-0x40], eax; ret; 
0x000000001233a4: add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+0x2], 0x0; ret; 
0x0000000011c707: add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x00000000131f5f: add [rcx+rcx*4-0x7], cl; call rbp; 
0x000000000d3864: add [rcx+rcx*4-0x8], cl; call rax; 
0x00000000139114: add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000013a33f: add [rcx+rcx*4-0xa], cl; mov rdi, [rsp+0x2a00]; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x000000000f8732: add [rcx+rcx*4-0xe], cl; mov [rsp+0x138], r13; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000429d7: add [rcx+rcx*4-0xe], cl; mov rax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000b6156: add [rcx+rcx*4-0xe], cl; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000b653a: add [rcx+rcx*4-0xe], cl; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x000000000742ce: add [rcx+rcx*4-0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006f6e6: add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e331: add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x000000000b6417: add [rcx+rcx*4-0xe], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000586b8: add [rcx+rcx*4-0xf], cl; call qword ptr [rax+r8*8]; 
0x0000000013127e: add [rcx+rcx*8+0x7880cd75], eax; jmp far fword ptr [rsi]; 
0x00000000123104: add [rcx+rcx-0x7b], esi; shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret; 
0x000000000985c5: add [rcx+rdi+0x25], cl; ret; 
0x00000000103c79: add [rcx+rdi+0x41], esi; test byte ptr [rdx+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x000000000436c9: add [rcx+rdi-0x1d], cl; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x00000000103b01: add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12; 
0x0000000004361d: add [rcx-0x1076b312], cl; call rax; 
0x00000000043dee: add [rcx-0x1086608], cl; shl rdx, 0x20; or rax, rdx; ret; 
0x00000000056ff6: add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x000000000cfd4b: add [rcx-0x11f43], al; jmp far fword ptr [rax]; 
0x000000000842cf: add [rcx-0x17f3db8c], cl; xchg edi, eax; ret; 
0x000000000df1ba: add [rcx-0x1d], edi; mov r9d, 0x1; mov eax, r9d; ret; 
0x0000000004460c: add [rcx-0x1e], al; jg short 0x0000000000044655; mov [rax], edx; mov [rsi], edx; ret; 
0x0000000008c657: add [rcx-0x2dceba0e], cl; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x000000000886c4: add [rcx-0x3076b322], cl; mov eax, 0xca; syscall; 
0x0000000004431e: add [rcx-0x38], edi; xor eax, eax; ret; 
0x00000000104e1f: add [rcx-0x38c6b708], cl; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x0000000013dcdf: add [rcx-0x39], al; add al, 0x1; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000f457a: add [rcx-0x39], cl; add [r8], r8b; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000004cc13: add [rcx-0x39], cl; ret; 
0x00000000104e83: add [rcx-0x3b7cb728], cl; or byte ptr [rax-0x77], 0xe2; syscall; 
0x0000000008ae62: add [rcx-0x3c3fcefa], cl; nop [rax+rax]; mov eax, 0x3; ret; 
0x00000000089494: add [rcx-0x3c3fcefa], ecx; nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000f963e: add [rcx-0x3ec6b738], cl; jne short 0x00000000000f9678; mov r10d, ecx; mov eax, 0x103; syscall; 
0x0000000008f6ad: add [rcx-0x3fcee7b9], cl; ret; 
0x0000000008bca4: add [rcx-0x3fcef7b9], cl; add rsp, 0x10; pop rbx; ret; 
0x0000000008bfed: add [rcx-0x3fcef7b9], cl; ret; 
0x0000000008c9cb: add [rcx-0x3fcef7b9], ecx; add rsp, 0x10; pop rbx; ret; 
0x000000000f85df: add [rcx-0x3fcefb89], cl; ret; 
0x0000000006f62f: add [rcx-0x42], al; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f617: add [rcx-0x42], al; add [rax], eax; add [rax], al; mov r11d, 0x1; jmp rax; 
0x0000000008fe5e: add [rcx-0x4577bffa], cl; jno short 0x000000000008fe6f; add [rax], al; xor eax, eax; ret; 
0x0000000006f61d: add [rcx-0x45], al; add [rax], eax; add [rax], al; jmp rax; 
0x00000000074a75: add [rcx-0x46], al; add [rax], eax; add [rax], al; jmp rax; 
0x0000000005005e: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x00000000092c53: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, r14d; syscall; 
0x00000000074927: add [rcx-0x47], al; add [rax], eax; add [rax], al; jmp rax; 
0x00000000074a6f: add [rcx-0x47], al; add [rax], eax; add [rax], al; mov r10d, 0x1; jmp rax; 
0x0000000007328f: add [rcx-0x47], al; add [rax], eax; add [rax], al; xor r10d, r10d; jmp rax; 
0x0000000007fb37: add [rcx-0x48], al; add [rax], eax; add [rax], al; mov eax, r8d; ret; 
0x0000000008eed7: add [rcx-0x48], al; and eax, [rax]; add [rax], al; mov eax, r8d; ret; 
0x000000000f0f1a: add [rcx-0x73], al; jmp qword ptr [r14+0xf]; 
0x00000000096779: add [rcx-0x73], cl; dec dword ptr [r9-0x7b]; ret; 
0x000000000dc61a: add [rcx-0x73], cl; insd [rdi], dx; add al, 0x83; call far fword ptr [rbp+0xf]; 
0x0000000014246a: add [rcx-0x73], cl; jb short 0x0000000000142477; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x00000000075a39: add [rcx-0x73], ecx; push rbx; add ecx, ebp; ret; 
0x000000000b4dc3: add [rcx-0x74b7ffed], eax; xor al, 0x1; add [rax], al; ret; 
0x000000000870b5: add [rcx-0x75], al; jno short 0x00000000000870ca; syscall; 
0x0000000008711d: add [rcx-0x75], al; jno short 0x0000000000087132; syscall; 
0x00000000087e65: add [rcx-0x75], al; jo short 0x0000000000087e76; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x0000000013dd5f: add [rcx-0x75], al; xor byte ptr [rax+rax-0x37f10000], 0x89; ror byte ptr [rax-0x77], 0x2; mov eax, 0x1; ret; 
0x000000001403cf: add [rcx-0x75], cl; add [rdi], cl; enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x0000000003104a: add [rcx-0x75], cl; add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret; 
0x000000000428b0: add [rcx-0x75], cl; cmp al, 0x24; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x00000000139034: add [rcx-0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000014096b: add [rcx-0x75], cl; jo short 0x00000000001409b9; mov edi, ebp; call qword ptr [rax+0x20]; 
0x000000000b57f0: add [rcx-0x75], ecx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx; 
0x000000000b57ef: add [rcx-0x75], rcx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx; 
0x0000000014574c: add [rcx-0x76b7d7b9], cl; ja short 0x000000000014576c; mov eax, r8d; ret; 
0x00000000122789: add [rcx-0x76b7f3a9], cl; ret; 
0x000000000e8683: add [rcx-0x76f7dbbc], ecx; ret; 
0x000000000ac456: add [rcx-0x776b7fe], ecx; ret; 
0x000000001640a1: add [rcx-0x776b7fe], ecx; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x00000000060e20: add [rcx-0x77], al; fmul st, dword ptr [rbx-0x61f63]; jmp qword ptr [rbx+rcx*4]; 
0x000000000527f0: add [rcx-0x77], al; ret far; 
0x000000000343ad: add [rcx-0x77], al; ret; 
0x000000000e06ff: add [rcx-0x77], al; rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret; 
0x0000000010917f: add [rcx-0x77], al; sar byte ptr [rax+0x121], cl; mov edx, 0x8; syscall; 
0x000000000a1240: add [rcx-0x77], cl; adc ecx, [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000a11d9: add [rcx-0x77], cl; add [rcx+rcx*4-0x38], cl; ret; 
0x0000000003e92f: add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret; 
0x0000000014c809: add [rcx-0x77], cl; fmul st, dword ptr [rcx+rcx*4-0x1a]; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000132b12: add [rcx-0x77], cl; jmp qword ptr [rsi+0x2e]; 
0x0000000019188e: add [rcx-0x77], cl; ret; 
0x0000000012cdff: add [rcx-0x77], cl; test byte ptr [rcx-0x276b72a], 0xe8; ret; 
0x000000001281be: add [rcx-0x77], eax; ret; 
0x00000000046aa1: add [rcx-0x77], ecx; fld st, qword ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x0000000007a1db: add [rcx-0x77], ecx; push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x0000000005dd3b: add [rcx-0x77], ecx; push rbp; or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret; 
0x0000000005dc2d: add [rcx-0x77], ecx; push rsi; or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret; 
0x0000000006bfc7: add [rcx-0x77], ecx; push rsi; sub dh, al; add [rcx-0x7d], cl; ret; 
0x00000000051830: add [rcx-0x77], ecx; push rsp; ret; 
0x0000000009f788: add [rcx-0x77], ecx; ret far; 
0x0000000008befa: add [rcx-0x77cf7a9], cl; and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000037236: add [rcx-0x77cf7bd], ecx; std; je short 0x0000000000037258; pop rbx; ret; 
0x0000000004e87c: add [rcx-0x78], eax; add ecx, [rcx-0x7d]; ret; 
0x00000000192569: add [rcx-0x7b], cl; ret; 
0x0000000009371c: add [rcx-0x7cb777bb], ecx; ret; 
0x000000000ea036: add [rcx-0x7d], al; cld; jmp qword ptr [rsi+0xf]; 
0x0000000006c7d2: add [rcx-0x7d], al; in al, dx; add [rax-0x8a743], eax; jmp qword ptr [rax]; 
0x0000000005e915: add [rcx-0x7d], al; jmp far fword ptr [rax]; 
0x000000000570fc: add [rcx-0x7d], al; out dx, eax; add [rax+0x39], ecx; ret; 
0x0000000018f69f: add [rcx-0x7d], al; ret far; 
0x0000000003c571: add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000004f0d1: add [rcx-0x7d], cl; ret; 
0x0000000010421b: add [rcx-0x7d], ecx; enter 0x4901, 0x9; ret far; 
0x000000000d2989: add [rcx-0x7d], ecx; jmp qword ptr [rbp+rsi*2-0x38]; 
0x00000000033323: add [rcx-0x7d], ecx; ret; 
0x000000000a0a9c: add [rcx-0x7d], rcx; ret; 
0x0000000008d150: add [rcx-0x7e3d763f], cl; loope 0x000000000008d158; add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x0000000017418b: add [rcx-0x876b730], cl; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000123cf1: add [rcx-0x877b], cl; jmp qword ptr [rsi+0x44]; 
0x000000000350af: add [rcx-0xa], al; ret; 
0x000000001290e2: add [rcx], ah; add [rax], al; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000127d16: add [rcx], ah; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000132d58: add [rcx], ah; fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x00000000094828: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x000000000947f8: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x00000000142fb8: add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x00000000086e39: add [rcx], al; add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x0000000003a989: add [rcx], al; add [rax], al; and eax, esi; ret; 
0x000000000ffa24: add [rcx], al; add [rax], al; cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x000000000fec33: add [rcx], al; add [rax], al; mov [rdi+0x16], ax; ret; 
0x000000000d84a4: add [rcx], al; add [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000128d94: add [rcx], al; add [rax], al; movzx eax, al; pop rbp; ret; 
0x00000000128ec8: add [rcx], al; add [rax], al; movzx eax, al; pop rbx; ret; 
0x00000000128e25: add [rcx], al; add [rax], al; pop rbp; ret; 
0x00000000128eb8: add [rcx], al; add [rax], al; pop rbx; ret; 
0x0000000003a703: add [rcx], al; add [rax], al; ret; 
0x000000000b42bf: add [rcx], al; add [rax], al; sub rax, rdx; ret; 
0x00000000128da3: add [rcx], al; add [rax], al; xor eax, eax; pop rbp; ret; 
0x00000000043902: add [rcx], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fe741: add [rcx], al; cmp eax, 0x410000; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000001743f9: add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x000000000fe746: add [rcx], al; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000000f11d2: add [rcx], al; mov edx, 0x2; cmove eax, edx; ret; 
0x00000000140e12: add [rcx], al; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x0000000013911e: add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000084e40: add [rcx], al; pop rbx; ret; 
0x00000000145a5f: add [rcx], al; push rdi; sub [rax+0x1], bh; ret; 
0x0000000010c00d: add [rcx], al; ret; 
0x000000000b4d87: add [rcx], al; xor eax, eax; ret; 
0x00000000039636: add [rcx], bh; jp short 0x0000000000039672; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x000000000c78df: add [rcx], bh; ret far; 
0x0000000008cc76: add [rcx], bh; ret; 
0x000000001005ea: add [rcx], bl; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000008e912: add [rcx], bl; test byte ptr [rbp+0x31], 0xd2; and esi, 0x80; add esi, 0x1; syscall; 
0x0000000018b904: add [rcx], ch; enter 0x3948, 0xc6; ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce67: add [rcx], ch; enter 0x3948, 0xc6; ja 0x000000000018cc27; mov eax, esi; ret; 
0x000000000384ac: add [rcx], ch; ret far; 
0x000000000cfe80: add [rcx], ch; ret; 
0x000000000ca4e7: add [rcx], ch; shr dword ptr [rcx], 0x1; enter 0x4789, 0x18; ret; 
0x0000000003f8b9: add [rcx], cl; add [rax], al; add [rax-0x1], bh; pop rbp; ret; 
0x0000000002d8e9: add [rcx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000e0ba5: add [rcx], cl; ret; 
0x000000000401b2: add [rcx], cl; ror byte ptr [rcx-0x24efdbbc], 0x1; insb [rdi], dx; and al, 0x8; ret; 
0x0000000002ee8e: add [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi+0xf]; 
0x000000000e3446: add [rcx], dh; idiv byte ptr [rcx]; ret far; 
0x0000000007cf7e: add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000081816: add [rcx], dh; idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007cd80: add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c01: add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000139981: add [rcx], dh; leave; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000d2c3b: add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x0000000013e8ca: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000008042d: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000138d7f: add [rcx], dh; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret; 
0x00000000065252: add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000191d3f: add [rcx], dh; rol byte ptr [rbp-0x7b], 0xc0; jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x000000000f8f2f: add [rcx], dh; rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0x0; add [rax], al; syscall; 
0x0000000003a7ff: add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret; 
0x000000000f11ef: add [rcx], dh; rol byte ptr [rcx+0xc0fef9], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000008e31f: add [rcx], dh; rol byte ptr [rdi+0x1fa8317], cl; jg short 0x000000000008e358; add rsp, 0x18; ret; 
0x0000000008a98f: add [rcx], dh; ror byte ptr [rax+0x39], 0xf7; sete al; ret; 
0x00000000089f85: add [rcx], dh; ror byte ptr [rax-0x77], cl; fidivr st, word ptr [rdi+0x2]; mov eax, 0xe; syscall; 
0x00000000081de3: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000815c9: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x000000000818bb: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000014acfb: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; and [rbx+0x5d], bl; pop r12; ret; 
0x000000000448ad: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000086611: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax]; ret; 
0x000000001211cf: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; xor [rbx+0x5d], bl; pop r12; ret; 
0x000000000b4362: add [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000018c5c7: add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x000000000018c547; ret; 
0x000000001785a0: add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c567: add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x000000000018c547; ret; 
0x0000000007d077: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x00000000092e2c: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000000f87cb: add [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000087807: add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x000000000008787e; ret; 
0x000000000fe79f: add [rcx], dh; ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe7b0; ret; 
0x000000000e08d7: add [rcx], dh; sar byte ptr [rax], 0xe; je 0x00000000000e083d; ret; 
0x0000000009490d: add [rcx], dh; sar byte ptr [rdi+0x1], 0xe8; mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x00000000050057: add [rcx], dh; sar byte ptr [rdi+0x2], cl; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000084704: add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58]; 
0x0000000011d5c8: add [rcx], dh; shr al, 0x70; ret far; 
0x000000000c46d9: add [rcx], dh; shr al, cl; jmp qword ptr [rdi+rdi*8]; 
0x0000000014b23b: add [rcx], dh; shr cl, 0xad; out 0xfa, eax; jmp qword ptr [rsi+0x2e]; 
0x00000000125c26: add [rcx], dh; shr cl, 0xbe; idiv bh; jmp qword ptr [rsi-0x70]; 
0x00000000076914: add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000012c7da: add [rcx], dh; test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x00000000043b0e: add [rcx], dh; test byte ptr [rcx+rcx*4-0x31], 0x41; call rbp; 
0x0000000011e4f6: add [rcx], dh; test byte ptr [rcx+rcx*4-0x9], 0xe8; out dx, eax; insb [rdi], dx; bnd jmp qword ptr [rsi-0x77]; 
0x0000000005bc2a: add [rcx], dl; add [rax], al; add [rax-0x1], bh; add rsp, 0x98; ret; 
0x000000000c5c5b: add [rcx], eax; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x000000000f9a31: add [rcx], eax; add [rax], al; syscall; 
0x0000000018df8d: add [rcx], eax; add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x0000000018df8f: add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x000000001031b5: add [rcx], eax; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000141ec5: add [rcx], ebx; rol byte ptr [rbx-0x177cfd20], 0x1; add rsp, 0x18; ret; 
0x00000000087e16: add [rcx], edi; ret; 
0x00000000099bdf: add [rcx], edx; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000005c2c3: add [rcx], esi; rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000879d3: add [rcx], esi; rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret; 
0x000000001337af: add [rcx], esi; ror byte ptr [rax-0x7d], 0xc4; adc [rbx+0x5d], bl; pop r12; ret; 
0x000000000b5c88: add [rcx], esi; shr byte ptr [rdx+0x1], cl; lea r9, [rsp+0x20]; call rbx; 
0x00000000186f96: add [rcx], esp; rol byte ptr [rbp+0xf8374c0], 0x1; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x00000000138d7e: add [rcx], sil; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret; 
0x00000000177928: add [rdi+0x10], dh; vmovdqu [rdi+rdx-0x40], ymm0; vmovdqu [rdi+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001870cc: add [rdi+0x11], dh; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x0000000017ec6c: add [rdi+0x11], dh; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x0000000017ec39: add [rdi+0x14], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000000eebac: add [rdi+0x15], dh; lea rdx, [rip+0xbd52a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b4c21: add [rdi+0x15], esi; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x00000000102717: add [rdi+0x16], edi; pop rbp; pop r12; pop r13; ret; 
0x00000000084e7b: add [rdi+0x16b88e05], al; add [rbx+0x97f01f8], al; ret; 
0x00000000082f83: add [rdi+0x16d78605], al; add [rbx+0x317f01f8], al; add rsp, 0x8; ret; 
0x000000000783cb: add [rdi+0x1782fe05], al; add [rbx+0x97f01f8], al; ret; 
0x00000000149ff4: add [rdi+0x19], edi; add rsp, 0x8; ret; 
0x000000000d2dc4: add [rdi+0x19], edi; pop rbx; pop rbp; pop r12; ret; 
0x0000000012f124: add [rdi+0x19], edi; pop rbx; ret; 
0x0000000008a02b: add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x0000000008aac2: add [rdi+0x1b], edi; mov eax, r12d; pop r12; ret; 
0x00000000192ec1: add [rdi+0x1c], edi; pop rbx; ret; 
0x00000000076720: add [rdi+0x1d], edi; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000441e0: add [rdi+0x1d], edi; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000010ee3f: add [rdi+0x1e], edi; add rsp, 0x18; ret; 
0x000000000c84ef: add [rdi+0x1e], edi; add rsp, 0x8; ret; 
0x0000000005c2f9: add [rdi+0x1f88307], al; jg short 0x000000000005c308; ret; 
0x000000000d2d4c: add [rdi+0x21], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004405c: add [rdi+0x21], edi; pop rbp; ret; 
0x0000000014a0cb: add [rdi+0x22], edi; mov rax, r12; pop r12; ret; 
0x000000000434bb: add [rdi+0x22], edi; xor eax, eax; pop rbx; ret; 
0x000000001328da: add [rdi+0x23], edi; add rsp, 0x8; ret; 
0x00000000044169: add [rdi+0x24], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000076509: add [rdi+0x24], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000001871a7: add [rdi+0x24], esi; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x000000000984a0: add [rdi+0x25], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000b4553: add [rdi+0x26], esi; jb short 0x00000000000b455d; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x00000000145a60: add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x000000001098bc: add [rdi+0x29], esi; mov eax, 0x4; syscall; 
0x0000000010995c: add [rdi+0x29], esi; mov eax, 0x6; syscall; 
0x0000000005038a: add [rdi+0x2], bh; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000c57e4: add [rdi+0x2], bh; neg eax; ret; 
0x00000000087bab: add [rdi+0x2], dh; ret; 
0x00000000133c7b: add [rdi+0x2], edi; ret; 
0x0000000010990b: add [rdi+0x2a], esi; mov eax, 0x5; syscall; 
0x0000000012e522: add [rdi+0x2b], edi; pop rbp; ret; 
0x000000001779b6: add [rdi+0x2c], esi; jb short 0x00000000001779bd; mov [rax], cl; vzeroupper; ret; 
0x000000001099b1: add [rdi+0x2c], esi; mov eax, 0x106; syscall; 
0x0000000014a04f: add [rdi+0x2e], edi; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000008e326: add [rdi+0x2f], edi; add rsp, 0x18; ret; 
0x00000000082f8c: add [rdi+0x31], edi; add rsp, 0x8; ret; 
0x00000000086adb: add [rdi+0x32], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010278a: add [rdi+0x33], edi; pop rbp; ret; 
0x0000000017ed4c: add [rdi+0x33], esi; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000007e338: add [rdi+0x35], edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000177238: add [rdi+0x3e], esi; jb short 0x0000000000177242; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000017f5c1: add [rdi+0x3f], esi; jb short 0x000000000017f5cb; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000018656d: add [rdi+0x43], esi; jb short 0x0000000000186577; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000004d7cd: add [rdi+0x50], edi; add rsp, 0x10; pop rbx; ret; 
0x0000000011f495: add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x000000001285e0: add [rdi+0x5], bh; ret; 
0x00000000098cc9: add [rdi+0x5], edi; pop rbx; pop rbp; pop r12; ret; 
0x0000000017e489: add [rdi+0x60], esi; jb short 0x000000000017e493; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x00000000192eb8: add [rdi+0x628c105], al; add [rbx+0x1c7f01f8], al; pop rbx; ret; 
0x00000000131fba: add [rdi+0x62], edi; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000a1a90: add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; jmp r10; 
0x00000000169a3c: add [rdi+0x63], cl; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c8c: add [rdi+0x63], cl; or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000156f9a: add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9; 
0x00000000151a1a: add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x0000000017ebe9: add [rdi+0x6d], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000005c2fe: add [rdi+0x7], edi; ret; 
0x00000000117c46: add [rdi+0x8], dh; mov rax, rdi; sar rax, 0x6; ret; 
0x000000000d71fd: add [rdi+0x8], edi; pop rbx; ret; 
0x00000000108e8d: add [rdi+0x8], edi; ret; 
0x0000000017e324: add [rdi+0x9], bh; neg eax; ret; 
0x000000000783d4: add [rdi+0x9], edi; ret; 
0x0000000008fc92: add [rdi+0xb], esi; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x00000000087ed2: add [rdi+0xb], esi; mov [rdi], esi; xor eax, eax; ret; 
0x000000000c0d38: add [rdi+0xd], esi; mov [rbx], rsi; add rsp, 0x10; pop rbx; ret; 
0x00000000075607: add [rdi+0xe], dh; movsxd rdi, edi; lea rax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x0000000007ee4f: add [rdi+0xe], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000102781: add [rdi+0xf38e005], al; add [rbx+0x337f01f8], al; pop rbp; ret; 
0x00000000101903: add [rdi+0xf], eax; add [rax-0x7b], cl; push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x00000000090abe: add [rdi+rax*8], ah; add [r8], al; add [rax-0x1], bh; ret; 
0x00000000041cb6: add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000100686: add [rdi+rax*8], ah; add [rax], al; add [rax], al; mov rax, [rsp-0x50]; ret; 
0x000000000d2c76: add [rdi+rax*8], ah; add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x00000000040430: add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x0000000002d8e6: add [rdi+rax*8], ah; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000ff146: add [rdi+rax*8], ah; or al, 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000009a2b6: add [rdi+rax*8], ah; or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000911ee: add [rdi+rax*8], ah; or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000001285ee: add [rdi+rax*8], ah; pop rdx; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000003f856: add [rdi+rax*8], ah; sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x000000001140ee: add [rdi+rbx*2+0x31], esi; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x000000000d83fb: add [rdi+rcx*4+0x48], dh; cmp edx, 0x2468; jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x000000000587c6: add [rdi+rcx+0x50], al; ret far; 
0x000000000ca67e: add [rdi+rcx], al; test dh, ch; adc al, 0x0; add dh, dh; ret; 
0x000000000395ea: add [rdi+rdi*8], bh; cmove eax, edx; mov [rip+0x1b6367], al; lea rax, [rip+0x1b6303]; ret; 
0x0000000009d95c: add [rdi-0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000128627: add [rdi-0x42], bh; mov eax, 0x1; ret; 
0x000000000d6f2f: add [rdi-0x48], bl; cmp al, [rax]; add [rax], al; syscall; 
0x00000000040a73: add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret; 
0x00000000133a81: add [rdi], cl; adc [rax+0xb0], ebx; ret; 
0x000000000f9589: add [rdi], cl; adc [rbx+0xf0], edi; add rsp, 0x190; pop rbx; ret; 
0x00000000140bb9: add [rdi], cl; adc [rdi+0x20], edx; ret; 
0x00000000140335: add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x0000000013dc62: add [rdi], cl; adc [rdx], ecx; ret; 
0x00000000132844: add [rdi], cl; adc [rip+0xc5b5c], esp; call rbx; 
0x000000000f8e50: add [rdi], cl; adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e5c: add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x0000000013db7b: add [rdi], cl; adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000142bf0: add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x000000000942d9: add [rdi], cl; adc [rsp+0x50], eax; syscall; 
0x00000000142f12: add [rdi], cl; adc [rsp+0xb8], ecx; call rax; 
0x00000000142fbc: add [rdi], cl; adc [rsp+0xb8], edx; call rax; 
0x000000000ffa27: add [rdi], cl; add al, 0x24; add rsp, 0x18; ret; 
0x000000000f9307: add [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi+0x7]; xor eax, eax; ret; 
0x0000000008aa52: add [rdi], cl; add eax, 0xfff0003d; push qword ptr [rsi+0x4]; neg eax; ret; 
0x0000000008a357: add [rdi], cl; add eax, 0xfffc41e9; call qword ptr [rax+0x2444894c]; 
0x0000000018128d: add [rdi], cl; add esi, edx; je short 0x0000000000181297; vzeroall; ret; 
0x00000000181e67: add [rdi], cl; add esi, edx; je short 0x0000000000181e71; vzeroall; ret; 
0x00000000182217: add [rdi], cl; add esi, edx; je short 0x0000000000182221; vzeroall; ret; 
0x00000000182ad7: add [rdi], cl; add esi, edx; je short 0x0000000000182ae1; vzeroall; ret; 
0x00000000183785: add [rdi], cl; add esi, edx; je short 0x000000000018378f; vzeroall; ret; 
0x00000000140c69: add [rdi], cl; enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x00000000140b71: add [rdi], cl; enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x000000001403f2: add [rdi], cl; enter 0x4789, 0x54; mov eax, 0x1; ret; 
0x000000001403d2: add [rdi], cl; enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x0000000013dd06: add [rdi], cl; enter 0xc089, 0x48; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000140c08: add [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 0x1; ret; 
0x0000000012d18f: add [rdi], cl; mov [rdi+rdi*8-0x1], ch; jmp qword ptr [rdi+rax*8]; 
0x0000000008e4b5: add [rdi], cl; mov [rsi], eax; xor eax, eax; ret; 
0x000000001876df: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x00000000187e5f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x0000000018a2ff: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000015994f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret; 
0x00000000174c3f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; vzeroupper; ret; 
0x0000000003a5dd: add [rdi], cl; mov bh, 0x4; js short 0x000000000003a566; loopne 0x000000000003a5ed; ret; 
0x0000000003a61d: add [rdi], cl; mov bh, 0x4; js short 0x000000000003a5a6; loopne 0x000000000003a627; ret; 
0x0000000003a6bd: add [rdi], cl; mov bh, 0x4; js short 0x000000000003a646; loopne 0x000000000003a6c9; ret; 
0x0000000003a79d: add [rdi], cl; mov bh, 0x4; js short 0x000000000003a726; loopne 0x000000000003a7a6; ret; 
0x0000000010c794: add [rdi], cl; mov bh, 0x4; js short 0x000000000010c71d; loopne 0x000000000010c7a4; ret; 
0x0000000010c8b4: add [rdi], cl; mov bh, 0x4; js short 0x000000000010c83d; loopne 0x000000000010c8bd; ret; 
0x0000000010c944: add [rdi], cl; mov bh, 0x4; js short 0x000000000010c8cd; loopne 0x000000000010c94e; ret; 
0x0000000010cc14: add [rdi], cl; mov bh, 0x4; js short 0x000000000010cb9d; loopne 0x000000000010cc20; ret; 
0x0000000012457f: add [rdi], cl; mov bh, 0x4e; adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d]; 
0x000000000f859f: add [rdi], cl; mov bh, 0x7; mov [rsi], ax; xor eax, eax; ret; 
0x000000001888cf: add [rdi], cl; mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000187e4f: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001599bf: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret; 
0x0000000017606f: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; vzeroupper; ret; 
0x0000000003e8e7: add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000017a2ff: add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx]; 
0x0000000017a0b2: add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx]; 
0x0000000017d7ff: add [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7ef: add [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x00000000113baf: add [rdi], cl; mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x0000000003dc7f: add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x000000000db77f: add [rdi], cl; mov dh, 0x53; add ecx, [rax-0x7d]; ret; 
0x0000000006e6a3: add [rdi], cl; mov dh, 0x58; add [rax-0x7bf0d505], eax; call qword ptr [rdx]; 
0x0000000011330f: add [rdi], cl; mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x0000000017945f: add [rdi], cl; mov dh, 0x7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000a531f: add [rdi], cl; mov dh, 0x7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000c908d: add [rdi], cl; mov dh, 0x7c; fadd st, dword ptr [rip-0x41c2fcb8]; ret; 
0x000000000f38ea: add [rdi], cl; mov dh, 0x9d; ret; 
0x000000000757e6: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005d46c: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d089: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x00000000128d97: add [rdi], cl; mov dh, 0xc0; pop rbp; ret; 
0x00000000128ecb: add [rdi], cl; mov dh, 0xc0; pop rbx; ret; 
0x0000000003317f: add [rdi], cl; mov dh, 0xc; xor al, [rcx-0x77]; ret far; 
0x000000000cd52e: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cd561: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000cb75a: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x0000000004e2a3: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x000000000f7452: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000a2e3f: add [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000012b604: add [rdi], cl; mov dh, 0xf0; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x0000000012b4fd: add [rdi], cl; mov dh, 0xf8; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x00000000186eaf: add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x000000001705ef: add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000186ebf: add [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; ret; 
0x000000001705ff: add [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x000000000a50df: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a50ef: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000a50cf: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x0000000017060f: add [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x00000000186e9f: add [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x000000001705df: add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x0000000006e7f2: add [rdi], cl; mov esi, 0x3d8d48c3; ret; 
0x000000000a4c1f: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c0f: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bee: add [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000a4c2f: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c3e: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4bff: add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000002ce08: add [rdi], cl; or eax, [rbx+0x10247c]; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000409af: add [rdi], cl; push rsi; add eax, 0x178779; mulss xmm0, [rip+0x1790c1]; ret; 
0x0000000004098a: add [rdi], cl; push rsi; add eax, 0x1787ae; mulss xmm0, [rip+0x1790ea]; ret; 
0x00000000040877: add [rdi], cl; push rsp; ret; 
0x0000000018c264: add [rdi], cl; pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x000000000cfde5: add [rdi], cl; ret; 
0x0000000016a8af: add [rdi], cl; sub dword ptr [rsi+0xe], 0x0; add [rcx+0x29], cl; ret far; 
0x00000000168b57: add [rdi], cl; test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x000000000eb3d1: add [rdi], cl; test al, ah; add eax, 0x85450000; in al, 0x74; ret; 
0x00000000191888: add [rdi], cl; test al, bl; add [rax], al; add [rcx-0x77], cl; ret; 
0x00000000097049: add [rdi], cl; xchg al, dh; or [rax], eax; add [rax-0x77], cl; ret; 
0x000000000331ca: add [rdi], cl; xchg bh, bl; add [rax], al; add [rbp-0x77], cl; ret; 
0x0000000002d4a6: add [rdi], cl; xchg ebp, eax; ret; 
0x0000000013fbda: add [rdi], cl; xchg edi, eax; ret; 
0x000000000e9fb5: add [rdi], cl; xchg esp, eax; ret; 
0x00000000186887: add [rdi], cl; xor dword ptr [rdx-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x0000000009050c: add [rdi], eax; ret; 
0x00000000127571: add [rdi], ecx; add eax, 0x48c48348; pop rbx; pop rbp; ret; 
0x0000000018455c: add [rdi], ecx; add esi, edx; je short 0x0000000000184566; vzeroall; ret; 
0x00000000184bbc: add [rdi], ecx; add esi, edx; je short 0x0000000000184bc6; vzeroall; ret; 
0x00000000140c2c: add [rdi], ecx; enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret; 
0x000000001403a5: add [rdi], ecx; enter 0x4789, 0x48; mov eax, 0x1; ret; 
0x000000000a1313: add [rdi], ecx; mov esi, 0xf2390714; je short 0x00000000000a1310; ret; 
0x0000000016404e: add [rdi], ecx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x00000000045268: add [rdi], ecx; test [rcx-0x7cffffff], al; jmp qword ptr [rdi+rcx]; 
0x0000000017605f: add [rdi], ecx; test [rdx+0x1], edi; add [rax], al; vzeroupper; ret; 
0x0000000018afd7: add [rdi], ecx; test [rdx+0x4], eax; add [rax], al; ret; 
0x00000000176ac7: add [rdi], ecx; test [rdx+0x4], eax; add [rax], al; vzeroupper; ret; 
0x00000000176d93: add [rdi], ecx; test [rsi+0x1], esi; add [rax], al; vzeroupper; ret; 
0x00000000187d8b: add [rdi], ecx; test [rsi+0x2], ebx; add [rax], al; ret; 
0x0000000009050b: add [rdi], rax; ret; 
0x0000000016404d: add [rdi], rcx; test [rbx+0x3], ecx; add [rax], al; ret; 
0x0000000007816f: add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000008a97c: add [rdx+0x16], bh; mov eax, 0x0; cmove eax, edx; ret; 
0x000000000829c4: add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000007d8a1: add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007497f: add [rdx+0x1], bh; xor r12d, r12d; jmp rax; 
0x0000000014c3fc: add [rdx+0x2], ch; call qword ptr [rax+0x338]; 
0x000000000f11d3: add [rdx+0x2], edi; cmove eax, edx; ret; 
0x0000000017c10c: add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000000b38df: add [rdx+0x30178816], cl; in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000d8535: add [rdx+0x40], bh; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000016223f: add [rdx+0x48028801], cl; mov eax, edi; ret; 
0x000000000ac414: add [rdx+0x48028801], ecx; mov eax, edi; ret; 
0x0000000017ba3d: add [rdx+0x4], esi; mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000000d39ff: add [rdx+0x4c], dl; mov edx, esi; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x00000000170abf: add [rdx+0x5e], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000087ab6: add [rdx+0x5f], edi; mov eax, 0x16; cmove eax, edx; ret; 
0x000000000389b7: add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x00000000105316: add [rdx+0x64], bh; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x000000000d83db: add [rdx+0x7d00], bh; cmove rax, rdx; ret; 
0x000000000d8429: add [rdx+0x7f], bh; cmovne rax, rdx; ret; 
0x00000000109187: add [rdx+0x8], bh; syscall; 
0x000000000d83c1: add [rdx+0xfde8], bh; cmove rax, rdx; ret; 
0x0000000008f6a3: add [rdx+rbp+0x64], esi; mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000002ce0f: add [rdx+rbx+0x48], dh; mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x000000000fe1b3: add [rdx+rcx+0x48], dh; mov dword ptr [rdi], 0xffffffff; ret; 
0x00000000086f43: add [rdx+rcx+0x48], esi; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000045cca: add [rdx+rdx*8+0x48c1450f], al; add esp, 0x8; ret; 
0x00000000110b29: add [rdx+rdx*8-0x49f0f58c], eax; test byte ptr [r8+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x0000000009bf1f: add [rdx-0x1], bh; bsf eax, edi; cmove eax, edx; add eax, 0x1; ret; 
0x00000000043e4e: add [rdx-0x1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000017e6ef: add [rdx-0x1f], ah; dec byte ptr [rax+0x6f]; add [rdx-0x1f], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x00000000187faf: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x0000000000187fbd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000018b3df: add [rdx-0x1f], ah; dec byte ptr [rax]; jg short 0x000000000018b3ed; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000017e6f5: add [rdx-0x1f], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x0000000017b996: add [rdx-0x2f], esp; jl short 0x000000000017b9e3; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x000000000b054e: add [rdx-0x3ce877ea], cl; nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000017e71e: add [rdx-0x3f], esp; std; jg short 0x000000000017e76e; jmp qword ptr [rdx-0x3f]; 
0x000000001867d8: add [rdx-0x3f], esp; std; sub [rdi+0x49], bh; jmp qword ptr [rdx-0x3f]; 
0x0000000017c0a3: add [rdx-0xf], esp; jl short 0x000000000017c0f0; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c1e3: add [rdx-0xf], esp; jl short 0x000000000017c230; adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x00000000131e7d: add [rdx], ah; add [rax], al; add [rax+0x22], bh; pop rbx; ret; 
0x00000000142f0e: add [rdx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], ecx; call rax; 
0x0000000003aa37: add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret; 
0x0000000003a663: add [rdx], al; add [rax], al; ret; 
0x00000000110e90: add [rdx], al; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000110fa7: add [rdx], al; call rax; 
0x000000000947a7: add [rdx], al; jbe short 0x00000000000947b0; ret; 
0x000000000b4d7e: add [rdx], al; je short 0x00000000000b4d89; or dword ptr [rip+0x1404cf], 0x1; xor eax, eax; ret; 
0x000000000b4fa3: add [rdx], al; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009bf81: add [rdx], al; lea rax, [rip+0x134b6]; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x0000000009abd1: add [rdx], al; lea rax, [rip+0x14786]; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009aa21: add [rdx], al; lea rax, [rip+0x17926]; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000009c011: add [rdx], al; lea rax, [rip+0x5946]; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x0000000009b0d1: add [rdx], al; lea rax, [rip+0x68e6]; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x0000000009afa1: add [rdx], al; lea rax, [rip+0x6966]; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000009ab31: add [rdx], al; lea rax, [rip+0x6ed6]; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x00000000111d58: add [rdx], al; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000111b34: add [rdx], al; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000111105: add [rdx], al; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000091b59: add [rdx], al; pop r12; ret; 
0x00000000091977: add [rdx], al; ret; 
0x00000000149baf: add [rdx], bh; cmovne rax, rdx; add rsp, 0x8; ret; 
0x000000001285f1: add [rdx], bl; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000003f859: add [rdx], ch; add [rax], al; add [rcx+rcx*4-0x30], cl; ret; 
0x0000000013a2a9: add [rdx], ch; add [rax], al; call rcx; 
0x0000000013a347: add [rdx], ch; add [rax], al; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x0000000014c43d: add [rdx], ch; call qword ptr [rax+0x338]; 
0x000000000c7347: add [rdx], ch; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x0000000014c741: add [rdx], ch; mov rdi, rbp; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x000000000c7345: add [rdx], ch; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x00000000110c7b: add [rdx], cl; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012301e: add [rdx], eax; pop rbx; ret; 
0x000000000b57ea: add [rdx], ebp; lea rcx, [rax+0x1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx; 
0x000000000b5929: add [rdx], ebp; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000c197f: add [rdx], ebp; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x00000000091b58: add [rdx], r8b; pop r12; ret; 
0x00000000091976: add [rdx], r8b; ret; 
0x0000000012301d: add [rdx], r8d; pop rbx; ret; 
0x000000000d9239: add [rip+0x4000], bh; sete al; add rsp, 0x98; ret; 
0x000000000fe743: add [rip+0x410000], bh; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000000fe742: add [rip+0x410000], dil; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000000401ad: add [rip+0x7fff], ah; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000169a3a: add [rip+0xc634f00], al; mov ah, [rsi+0xf]; je short 0x0000000000169a06; lea r10, [r10+r9]; jmp r10; 
0x0000000017aa5f: add [rip+0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000017aa5e: add [rip+0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000017a192: add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000108a45: add [rip-0x1000], ah; or eax, edx; ret; 
0x000000000829f5: add [rip-0x1a14208c], bl; nop [rax+rax]; xor eax, eax; ret; 
0x00000000131e9c: add [rip-0x48000000], bl; sbb eax, 0x5b000000; ret; 
0x0000000005ad1f: add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e]; 
0x00000000059bff: add [rip-0xfd517], ch; jmp qword ptr [rsi+0x2e]; 
0x0000000008e210: add [rsi+0x1], bh; mov eax, 0xca; syscall; 
0x000000000d837c: add [rsi+0x29], bh; mov eax, 0x7fffffff; cmp rdx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x0000000010465a: add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13; 
0x0000000002d3f5: add [rsi+0x2e], ah; nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000018a225: add [rsi+0x2e], ah; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000041a94: add [rsi+0x2e], ah; nop [rax+rax]; nop; mov eax, 0x83; syscall; 
0x000000000388c5: add [rsi+0x2e], ah; nop [rax+rax]; ret; 
0x00000000188c75: add [rsi+0x2e], ah; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000002d1f5: add [rsi+0x2e], ah; nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000103afc: add [rsi+0x3], bh; je short 0x0000000000103b35; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000103b8c: add [rsi+0x3], bh; je short 0x0000000000103bc5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000141e48: add [rsi+0x4], bh; mov rdi, rbp; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000001398ce: add [rsi+0x4], bh; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000feb20: add [rsi+0x5409], bh; mov eax, 0x10; syscall; 
0x000000000feb55: add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000094868: add [rsi+0x5], dh; ret; 
0x000000000867e9: add [rsi+0x80], bh; mov eax, 0xca; syscall; 
0x0000000008aa48: add [rsi+0x80], bh; mov eax, 0xcc; syscall; 
0x0000000014eaa7: add [rsi+0x80], bh; syscall; 
0x000000000898ec: add [rsi+0x81], bh; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x000000000868a7: add [rsi+0x81], bh; mov eax, 0xca; syscall; 
0x0000000012fef9: add [rsi+0x81], bh; mov eax, r12d; syscall; 
0x00000000092ff9: add [rsi+0x81], bh; mov eax, r13d; syscall; 
0x0000000014ca97: add [rsi+0x81], bh; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000004167f: add [rsi+0x8], bh; mov eax, 0x7f; syscall; 
0x0000000013f18e: add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000ac3a1: add [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x00000000040bc7: add [rsi+0xf], ah; fild st, dword ptr [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040645: add [rsi+0xf], ah; push rsi; or eax, 0x178ab2; mulsd xmm0, xmm1; ret; 
0x0000000004061f: add [rsi+0xf], ah; push rsi; or eax, 0x178ae8; mulsd xmm0, xmm1; ret; 
0x000000000404c7: add [rsi+0xf], ah; push rsp; or eax, 0x178c10; orpd xmm0, xmm1; ret; 
0x000000000a4ffc: add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a5021: add [rsi+0xf], ah; xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000000ac3a5: add [rsi+0xf], esp; adc eax, [rdx]; mov rax, rdi; ret; 
0x0000000007b1ab: add [rsi-0x1], bh; call qword ptr [rax+0x18]; 
0x0000000007c7b0: add [rsi-0x1], bh; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000082021: add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x00000000084456: add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000013a34a: add [rsi-0x3f], ah; ror byte ptr [rax], 0x66; mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x000000000e248b: add [rsi-0x3fce000c], ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000016421d: add [rsi-0x70], ah; mov [rcx], dx; ret; 
0x0000000016424d: add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000b085d: add [rsi-0x70], ah; mov [rdi], dx; ret; 
0x000000000b088d: add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000016656d: add [rsi-0x70], ah; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x0000000009045d: add [rsi-0x70], ah; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000af88d: add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a25d: add [rsi-0x70], ah; mov eax, 0x134; syscall; 
0x000000000f9dfd: add [rsi-0x70], ah; mov eax, 0x15; syscall; 
0x000000000c9b5d: add [rsi-0x70], ah; mov eax, 0x24; syscall; 
0x00000000093a9d: add [rsi-0x70], ah; mov eax, 0x3; syscall; 
0x0000000010b2ed: add [rsi-0x70], ah; mov eax, 0x43; syscall; 
0x000000000fb36d: add [rsi-0x70], ah; mov eax, 0x57; syscall; 
0x000000000fb2ad: add [rsi-0x70], ah; mov eax, 0x58; syscall; 
0x0000000010a13d: add [rsi-0x70], ah; mov eax, 0x63; syscall; 
0x0000000010905d: add [rsi-0x70], ah; mov eax, 0x7a; syscall; 
0x00000000109d7d: add [rsi-0x70], ah; mov eax, 0x7d; syscall; 
0x0000000010926d: add [rsi-0x70], ah; mov eax, 0x87; syscall; 
0x000000000ff03d: add [rsi-0x70], ah; mov eax, 0x8c; syscall; 
0x00000000102c1d: add [rsi-0x70], ah; mov eax, 0x95; syscall; 
0x000000001003dd: add [rsi-0x70], ah; mov eax, 0x99; syscall; 
0x00000000109ecd: add [rsi-0x70], ah; mov eax, 0xb1; syscall; 
0x0000000010a07d: add [rsi-0x70], ah; mov eax, 0xb4; syscall; 
0x0000000010541d: add [rsi-0x70], ah; mov eax, 0xc2; syscall; 
0x0000000010547d: add [rsi-0x70], ah; mov eax, 0xc3; syscall; 
0x0000000010535d: add [rsi-0x70], ah; mov eax, 0xc4; syscall; 
0x0000000010550d: add [rsi-0x70], ah; mov eax, 0xc5; syscall; 
0x00000000109f2d: add [rsi-0x70], ah; mov eax, 0xfe; syscall; 
0x00000000084dad: add [rsi-0x70], ah; mov eax, 0xffffffff; ret; 
0x000000000fe82d: add [rsi-0x70], ah; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000d2e7d: add [rsi-0x70], ah; mov eax, [rdi]; ret; 
0x000000000806ed: add [rsi-0x70], ah; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x00000000117d0d: add [rsi-0x70], ah; mov eax, edi; bswap eax; ret; 
0x000000000fe7cd: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000010a04d: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a10d: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053ed: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000084ded: add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret; 
0x0000000009479d: add [rsi-0x70], ah; mov rax, [rdi]; cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x00000000041cad: add [rsi-0x70], ah; mov rax, [rip+0x1ab159]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ef6d: add [rsi-0x70], ah; mov rax, [rip+0x9de99]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000012f0dd: add [rsi-0x70], ah; mov rax, [rip+0xc8161]; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000018b64d: add [rsi-0x70], ah; mov rax, rdi; ret; 
0x000000000b1e2d: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fdd: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x0000000018aa8d: add [rsi-0x70], ah; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000018a2ed: add [rsi-0x70], ah; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000004076d: add [rsi-0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000002d15d: add [rsi-0x70], ah; ret; 
0x0000000018dc0d: add [rsi-0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de7d: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018723d: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018733d: add [rsi-0x70], ah; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000b38cd: add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c4b1d: add [rsi-0x70], ah; xor eax, eax; ret; 
0x000000000c5a7d: add [rsi-0x70], ah; xor rax, rax; ret; 
0x0000000016224f: add [rsi-0x75], ah; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x00000000040210: add [rsi-0x77], ah; and al, 0xf0; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000013dcc4: add [rsi-0x77], ah; insb [rdi], dx; mov eax, 0x1; ret; 
0x000000000ac427: add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x000000000ac437: add [rsi-0x77], esp; add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret; 
0x00000000041cb9: add [rsi], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x000000001681ec: add [rsi], al; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000015a677: add [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000131ed1: add [rsi], dl; add [rax], al; add [rax+0x16], bh; ret; 
0x000000000fd899: add [rsi], dl; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000041419: add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000f95af: add [rsi], dl; add [rax], al; add [rcx+rcx*4-0x40], al; ret; 
0x0000000012f169: add [rsp+0x48], esi; add esp, 0x8; ret; 
0x000000001405c1: add [rsp+rax*8+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000be368: add [rsp+rax+0x44], dh; mov eax, eax; ret; 
0x0000000014c2e1: add [rsp+rbx+0x48], dh; mov eax, [rip+0xa0bdd]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000012f162: add [rsp+rcx+0x48], dh; add dword ptr [rax+0x10], 0x1; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x0000000014a469: add [rsp+rdx+0x48], dh; add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x0000000009d791: add [rsp+rdx+0x5b], dh; pop rbp; pop r12; ret; 
0x000000000d7d29: add [rsp+rdx-0x48], dh; imul eax, [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000d7d60; ret; 
0x000000000d8029: add [rsp+rdx-0x48], dh; ja short 0x00000000000d802f; add [rax], al; syscall; 
0x000000000ff849: add [rsp+rdx-0x48], dh; jb short 0x00000000000ff84f; add [rax], al; syscall; 
0x000000000d3d79: add [rsp+rdx-0x48], dh; je short 0x00000000000d3d7f; add [rax], al; syscall; 
0x000000000d7fb9: add [rsp+rdx-0x48], dh; jne short 0x00000000000d7fbf; add [rax], al; syscall; 
0x000000000ff7d9: add [rsp+rdx-0x48], dh; jno short 0x00000000000ff7df; add [rax], al; syscall; 
0x000000000d7d89: add [rsp+rdx-0x48], dh; push 0x0; add [rax], al; syscall; 
0x00000000110e91: add ah, [rcx]; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x0000000017e757: add ah, [rdx-0x1f]; dec byte ptr [rax+0x7f]; jg short 0x000000000017e762; vmovdqu64 [r11], zmm24; ret; 
0x0000000017c1ea: add ah, [rdx-0xf]; jl short 0x000000000017c237; adc [rsi+0x3], edx; ret; 
0x000000000ac56c: add ah, [rsi+0xf]; adc cl, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58c: add ah, [rsi+0xf]; adc cl, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5ac: add ah, [rsi+0xf]; adc cl, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0fc: add ah, [rsi+0xf]; adc cl, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac3fb: add ah, [rsi+0xf]; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000ac424: add ah, [rsi-0x75]; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret; 
0x000000001665d3: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000ac488: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x000000000ac50c: add ah, [rsi-0x75]; or [r14-0x77], spl; or [rax-0x77], cl; clc; ret; 
0x000000000b3905: add ah, [rsi-0x77]; js 0xffffffffed3b3b65; mov [rdi+0x3], ch; ret; 
0x0000000004caa8: add al, 0x0; add [rax+0x39], cl; ret; 
0x00000000114926: add al, 0x0; add [rax-0x7d], cl; ret; 
0x0000000013dcf2: add al, 0x0; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000085bc6: add al, 0x0; add [rax], al; je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x000000001418fd: add al, 0x0; add [rax], al; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x000000001398d0: add al, 0x0; add [rax], al; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000142c2d: add al, 0x0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000c6003: add al, 0x0; add [rax], al; ret; 
0x000000001098c0: add al, 0x0; add [rax], al; syscall; 
0x0000000005b7e0: add al, 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000c3ea5: add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x0000000008b355: add al, 0x0; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x000000000a44c8: add al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000014020a: add al, 0x0; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000009a398: add al, 0x0; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000dc1fe: add al, 0x0; add [rbx-0x6bf0a301], al; ret; 
0x000000000dc1ff: add al, 0x0; add [rbx-0x6bf0a301], al; ret; 
0x000000000929c6: add al, 0x0; add [rbx-0x76b7ffab], cl; ret far; 
0x0000000011f945: add al, 0x0; add [rcx+rcx*4-0x2], cl; mov rdi, r12; call rbp; 
0x0000000011c705: add al, 0x0; add [rcx+rcx*4-0x6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000018c5c5: add al, 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x000000000018c547; ret; 
0x0000000018c595: add al, 0x0; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x000000000018c547; ret; 
0x0000000012c7d8: add al, 0x0; add [rcx], dh; test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x00000000110fa5: add al, 0x0; add [rdx], al; call rax; 
0x00000000094866: add al, 0x0; add [rsi+0x5], dh; ret; 
0x000000000df0c6: add al, 0x0; add al, ch; xchg edx, eax; ret; 
0x000000000b052d: add al, 0x0; add bl, al; nop [rax+rax]; nop [rax]; ret; 
0x00000000115d75: add al, 0x0; cmovne rax, rdx; ret; 
0x0000000004170b: add al, 0x0; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000044a82: add al, 0x0; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x0000000015c5ff: add al, 0x0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016a80b: add al, 0x0; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000016a80a: add al, 0x0; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c8b: add al, 0x0; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000044209: add al, 0x0; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000004420a: add al, 0x0; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000017944b: add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000413d0: add al, 0x0; test eax, eax; jne short 0x00000000000413e0; pop rbp; ret; 
0x00000000041627: add al, 0x0; test eax, eax; jne short 0x0000000000041638; add rsp, 0x8; ret; 
0x000000000434ea: add al, 0x0; xor eax, eax; pop rbx; ret; 
0x000000000be360: add al, 0x10; cmp r8d, 0xff; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x0000000007397f: add al, 0x10; mov edx, 0x1; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000010cf85: add al, 0x10; shr eax, cl; and eax, 0x1; ret; 
0x0000000010c9b6: add al, 0x10; shr r8d, cl; and r8d, 0x1; mov eax, r8d; ret; 
0x0000000010d062: add al, 0x11; ret; 
0x000000000b4d85: add al, 0x14; add [rcx], al; xor eax, eax; ret; 
0x000000000c69a3: add al, 0x16; ret; 
0x0000000009ccab: add al, 0x17; mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x000000000009cca0; ret; 
0x000000000a2e91: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000016f698: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000018771e: add al, 0x17; ret; 
0x000000000a2e2a: add al, 0x17; sub eax, ecx; ret; 
0x0000000017671e: add al, 0x17; vzeroupper; ret; 
0x0000000013dce2: add al, 0x1; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000c56d8: add al, 0x1; add [rax], al; ret; 
0x000000000fae34: add al, 0x1; add [rax], al; syscall; 
0x0000000005c25f: add al, 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008bf04: add al, 0x1; add rsp, 0x8; ret; 
0x0000000008e25e: add al, 0x1; je 0x000000000008df8f; mov eax, 0x83; ret; 
0x00000000073e3b: add al, 0x1; lea rcx, [rip-0xdc7]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x000000000df318: add al, 0x1; mov byte ptr [rdi+0x8], 0x1; mov [rdi], al; mov eax, 0x1; ret; 
0x000000000e48a4: add al, 0x1; pop rbx; pop rbp; pop r12; ret; 
0x0000000005c2c1: add al, 0x1; xor eax, eax; ret; 
0x0000000003750e: add al, 0x24; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000100489: add al, 0x24; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x000000001448fa: add al, 0x24; add al, [rax]; add [rax], al; mov rdi, rsp; call r8; 
0x00000000040fa4: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000f8f67: add al, 0x24; add rsp, 0x18; ret; 
0x0000000010a65c: add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x000000000d22f3: add al, 0x24; add rsp, 0x28; neg eax; ret; 
0x000000000f7fed: add al, 0x24; add rsp, 0x28; ret; 
0x0000000010a722: add al, 0x24; add rsp, 0x30; pop r12; ret; 
0x00000000192061: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000010c6a4: add al, 0x24; add rsp, 0x38; ret; 
0x0000000010c705: add al, 0x24; add rsp, 0x40; ret; 
0x000000000ffefb: add al, 0x24; add rsp, 0x50; pop r12; ret; 
0x000000000fa1eb: add al, 0x24; add rsp, 0x68; ret; 
0x00000000141a46: add al, 0x24; call qword ptr [rdx+0x20]; 
0x0000000014be68: add al, 0x24; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000005c019: add al, 0x24; mov rax, [rsp+0x10]; call rax; 
0x0000000012540d: add al, 0x24; mov rdi, r12; call rax; 
0x0000000011f079: add al, 0x24; mov rdi, rbx; call rax; 
0x00000000123592: add al, 0x24; mov rdx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x000000000e0f11: add al, 0x24; pop r12; ret; 
0x0000000010ebbb: add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000008b18a: add al, 0x25; adc [rax], al; add [rax], al; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000086188: add al, 0x25; adc [rax], al; add [rax], al; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fcb3: add al, 0x25; adc [rax], al; add [rax], al; ret; 
0x00000000131f5a: add al, 0x25; add [rax], al; add [rax], al; mov rcx, r15; call rbp; 
0x0000000002d67a: add al, 0x25; add [rax], al; add [rax], al; ret; 
0x000000000861d7: add al, 0x25; add [rbx], al; add [rax], al; ret; 
0x00000000115634: add al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000002d55d: add al, 0x25; xor [rax], al; add [rax], al; jmp rax; 
0x0000000012392d: add al, 0x25; xor [rax], al; add [rax], al; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000173e27: add al, 0x2; cmovne rax, rcx; vzeroupper; ret; 
0x0000000006c294: add al, 0x2; lea rdx, [rip-0x3e0]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000013cbbc: add al, 0x2; mov [rdi-0x1], al; cmp rdi, rcx; jne short 0x000000000013cbb0; ret; 
0x0000000003a3b9: add al, 0x2; mov eax, r8d; ret; 
0x000000000f23d0: add al, 0x2; mov r9, [rbp-0x1b0]; mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x0000000013b67e: add al, 0x2; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000003a357: add al, 0x2; test eax, eax; jne short 0x000000000003a368; mov eax, r8d; ret; 
0x000000001231d1: add al, 0x2b; pop rbx; pop rbp; ret; 
0x000000000b3939: add al, 0x30; in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000b394b: add al, 0x30; in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000aa4fe: add al, 0x31; ret; 
0x0000000008b3ab: add al, 0x31; rol bl, 0x90; mov eax, 0x16; ret; 
0x000000000c9bf2: add al, 0x31; rol byte ptr [rcx-0x5c28f401], 0x0; setb al; add eax, 0x16d; ret; 
0x00000000121910: add al, 0x31; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x0000000005575f: add al, 0x32; ret; 
0x000000000aa3fa: add al, 0x37; ret; 
0x0000000018a858: add al, 0x38; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000016fcb9: add al, 0x38; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000b6686: add al, 0x39; bnd je short 0x00000000000b668f; test edx, edx; jne short 0x00000000000b6680; ret; 
0x00000000095e94: add al, 0x39; ret; 
0x000000000a12b0: add al, 0x39; shl byte ptr [rbp-0x15], 0x1; mov rax, r8; ret; 
0x000000001684e8: add al, 0x3; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000017a737: add al, 0x3; add [rax], al; xor eax, eax; ret; 
0x0000000007b75f: add al, 0x3a; ret; 
0x000000000c56a1: add al, 0x3b; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x00000000094401: add al, 0x3f; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x0000000011e7d5: add al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000be36a: add al, 0x44; mov eax, eax; ret; 
0x0000000012774e: add al, 0x48; add esp, 0x18; ret; 
0x00000000109147: add al, 0x48; add esp, 0x20; pop r12; ret; 
0x0000000010ae27: add al, 0x48; add esp, 0x28; ret; 
0x000000000f81f1: add al, 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008b10d: add al, 0x48; cmp [rdx+rdi], esi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x000000000b0edb: add al, 0x48; lea eax, [rdi+0x5]; ret; 
0x000000000b1d1b: add al, 0x48; lea eax, [rdi+0x6]; ret; 
0x0000000012917b: add al, 0x48; lea eax, [rdi+rsi+0x14]; ret; 
0x000000001665c8: add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x000000001665da: add al, 0x48; lea eax, [rdx+0x5]; ret; 
0x0000000009aaa3: add al, 0x48; lea eax, [rip+0xf435]; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x000000001640aa: add al, 0x48; lea ecx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000000b0127: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x000000000b17db: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000175f97: add al, 0x48; lea edi, [rdi+0x4]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ccb: add al, 0x48; lea edi, [rdi+0x4]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d5b: add al, 0x48; lea edi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x0000000018b1c7: add al, 0x48; lea edi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x00000000094891: add al, 0x48; lea edx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x0000000010135f: add al, 0x48; mov [rax+0x8], edi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000079567: add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret; 
0x00000000127565: add al, 0x48; mov [rbx+0x10], eax; mov eax, 0x14; add edx, 0x1; syscall; 
0x000000001594fa: add al, 0x48; mov [rdi], ecx; ret; 
0x00000000079f2e: add al, 0x48; mov [rdx+0x20], esi; mov [rcx], eax; ret; 
0x000000000ac46d: add al, 0x48; mov eax, edi; ret; 
0x000000001594f3: add al, 0x48; mov ecx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x0000000013f1e9: add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000014cf84: add al, 0x48; shl eax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x000000000aa7a4: add al, 0x48; xor eax, eax; ret; 
0x0000000013c4d8: add al, 0x48; xor eax, edx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x0000000008b371: add al, 0x49; mov [rax+rax+0x8], esi; xor eax, eax; mov [rdi], ecx; ret; 
0x000000000928ac: add al, 0x49; mov eax, [rax+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000b17f9: add al, 0x49; sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000000b016b: add al, 0x49; sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000001234c1: add al, 0x4c; lea eax, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000b592e: add al, 0x4c; lea ecx, [rsp+0x20]; call rbx; 
0x000000001155c4: add al, 0x50; shr ax, 0xe; and eax, 0x1; ret; 
0x000000000e0f0a: add al, 0x5b; pop rbp; movups [r12], xmm0; pop r12; ret; 
0x000000000f8319: add al, 0x5b; pop rbp; pop r12; ret; 
0x000000001665d6: add al, 0x66; mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000ac48b: add al, 0x66; mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x0000000006ee1b: add al, 0x6; lea rsi, [rip-0x1079]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee80: add al, 0x6; lea rsi, [rip-0x10de]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006eee3: add al, 0x6; lea rsi, [rip-0x1141]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000110b33: add al, 0x70; or [rax+rbp*8+0x44], dh; mov eax, ecx; ret; 
0x000000000b4c1c: add al, 0x73; adc eax, [rax+0x157701fa]; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x000000001871a2: add al, 0x73; and al, [rax+0x247701fa]; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x0000000017ed47: add al, 0x73; xor [rax+0x337701fa], eax; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x000000000f8f34: add al, 0x74; or [rax+0x1c], edi; syscall; 
0x0000000008e038: add al, 0x74; pop rdi; xor eax, eax; ret; 
0x000000000df352: add al, 0x74; xchg edi, eax; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000e6947: add al, 0x75; mov dh, 0x8b; pop rax; or bh, dh; ret; 
0x0000000008d389: add al, 0x75; ret; 
0x000000000fd882: add al, 0x77; or esp, [rsi-0x77]; push rsi; xor ax, ax; ret; 
0x0000000003a720: add al, 0x78; and eax, 0x1000; ret; 
0x0000000003a700: add al, 0x78; and eax, 0x100; ret; 
0x0000000003a7a0: add al, 0x78; and eax, 0x1; ret; 
0x0000000003a6e0: add al, 0x78; and eax, 0x2000; ret; 
0x0000000003a660: add al, 0x78; and eax, 0x200; ret; 
0x0000000003a620: add al, 0x78; and eax, 0x2; ret; 
0x0000000003a6a0: add al, 0x78; and eax, 0x4000; ret; 
0x0000000003a600: add al, 0x78; and eax, 0x400; ret; 
0x0000000003a6c0: add al, 0x78; and eax, 0x4; ret; 
0x0000000003a680: add al, 0x78; and eax, 0x8000; ret; 
0x0000000003a640: add al, 0x78; and eax, 0x800; ret; 
0x0000000003a5e0: add al, 0x78; and eax, 0x8; ret; 
0x0000000011601a: add al, 0x7; add [rax-0x73], cl; add eax, 0x7048c; cmove rax, rdx; ret; 
0x000000000b0278: add al, 0x7; add [rax], al; ret; 
0x00000000185d2a: add al, 0x7; cmovle rax, rcx; ret; 
0x0000000017000a: add al, 0x7; cmovle rax, rcx; vzeroupper; ret; 
0x000000000a9f2d: add al, 0x7; cmp [rax], sil; cmovne rax, rdx; ret; 
0x0000000006f688: add al, 0x7; lea rdi, [rip+0x138baf]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ebb7: add al, 0x7; lea rdi, [rip-0xe15]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ec1b: add al, 0x7; lea rdi, [rip-0xe79]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ed53: add al, 0x7; lea rdi, [rip-0xfb1]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006e811: add al, 0x7; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x0000000006df5c: add al, 0x7; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x0000000006e8bf: add al, 0x7; movsxd rax, [r9+rax*4]; add rax, rsi; mov r13d, 0x1; jmp rax; 
0x000000000aa148: add al, 0x7; ret; 
0x000000001860ea: add al, 0x7; sub eax, ecx; ret; 
0x0000000017083a: add al, 0x7; sub eax, ecx; vzeroupper; ret; 
0x00000000176dd4: add al, 0x7; vzeroupper; ret; 
0x000000000739cc: add al, 0x80; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x0000000006df60: add al, 0x80; add rax, rsi; jmp rax; 
0x00000000127f5c: add al, 0x81; add rax, r9; jmp rax; 
0x0000000005c6c3: add al, 0x81; add rax, rcx; jmp rax; 
0x0000000006e8c3: add al, 0x81; add rax, rsi; mov r13d, 0x1; jmp rax; 
0x0000000006c146: add al, 0x81; jmp far fword ptr [rdi+0xf000000]; 
0x0000000016b9bb: add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000000b4c7f: add al, 0x81; sub eax, [rcx+rsi*4]; je short 0x00000000000b4c68; ret; 
0x0000000016d293: add al, 0x81; sub eax, edx; ret; 
0x0000000002d789: add al, 0x82; add rax, rdx; jmp rax; 
0x0000000006e815: add al, 0x82; add rax, rsi; jmp rax; 
0x0000000018bd94: add al, 0x82; ret; 
0x000000000a7867: add al, 0x82; sub eax, ecx; ret; 
0x0000000008bf02: add al, 0x83; add al, 0x1; add rsp, 0x8; ret; 
0x000000000e9e9b: add al, 0x83; add rax, rbx; jmp rax; 
0x00000000073939: add al, 0x83; add rax, rcx; jmp rax; 
0x00000000073209: add al, 0x83; add rax, rdi; jmp rax; 
0x00000000088594: add al, 0x83; and al, 0x2; xor eax, eax; ret; 
0x000000000dc61e: add al, 0x83; call far fword ptr [rbp+0xf]; 
0x000000000806f4: add al, 0x83; loopne 0x00000000000806f9; ret; 
0x00000000123490: add al, 0x83; loopne 0x0000000000123513; ret; 
0x000000000f5ba6: add al, 0x84; add rax, r12; jmp rax; 
0x000000001171e3: add al, 0x85; leave; jne short 0x0000000000117198; mov rax, r8; ret; 
0x000000000b53b5: add al, 0x85; shl byte ptr [rbp-0x12], cl; xor eax, eax; ret; 
0x000000000b668a: add al, 0x85; shl byte ptr [rbp-0xf], cl; ret; 
0x0000000006ebc2: add al, 0x86; add rax, rdi; jmp rax; 
0x0000000006c29f: add al, 0x86; add rax, rdx; jmp rax; 
0x0000000005d08f: add al, 0x86; add rax, rsi; jmp rax; 
0x0000000010cf82: add al, 0x86; mov eax, [rax+rdx]; shr eax, cl; and eax, 0x1; ret; 
0x00000000073de3: add al, 0x87; add rax, rcx; jmp rax; 
0x0000000006503e: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000006ee26: add al, 0x87; add rax, rsi; jmp rax; 
0x0000000018d0ea: add al, 0x87; cmovle rax, rcx; ret; 
0x0000000018bb69: add al, 0x87; cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x0000000007496c: add al, 0x87; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x000000000738d8: add al, 0x87; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b58: add al, 0x87; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x0000000018bd3b: add al, 0x87; ret; 
0x0000000018d2c6: add al, 0x87; vzeroupper; ret; 
0x000000001665c5: add al, 0x88; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x000000000ac46a: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000010b215: add al, 0x88; add rax, r8; jmp rax; 
0x00000000073d7d: add al, 0x88; add rax, rdi; jmp rax; 
0x0000000006e6f6: add al, 0x88; add rax, rsi; jmp rax; 
0x00000000073c37: add al, 0x88; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cfa: add al, 0x88; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x0000000004456e: add al, 0x88; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret; 
0x000000001276fa: add al, 0x89; add edi, [rax+0x1]; add rsp, 0x10; pop rbx; ret; 
0x000000000b0144: add al, 0x89; cmovns eax, [rbx-0x72b7fa18]; jg short 0x00000000000b0154; jne 0x00000000000b0980; ret; 
0x000000000b3934: add al, 0x89; js 0xffffffffed3b3d93; mov [rdi+0x5], ch; ret; 
0x000000000b3945: add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x0000000007fb53: add al, 0x8; add [rax], al; ret; 
0x0000000007392e: add al, 0x8; lea rcx, [rip-0x8ba]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073aa9: add al, 0x8; lea rcx, [rip-0xa35]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073dd8: add al, 0x8; lea rcx, [rip-0xd64]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e94: add al, 0x8; lea rcx, [rip-0xe20]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x0000000010c777: add al, 0x8; mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x00000000073205: add al, 0x8; movsxd rax, [r11+rax*4]; add rax, rdi; jmp rax; 
0x000000000739c8: add al, 0x8; movsxd rax, [r8+rax*4]; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x000000000738d4: add al, 0x8; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b54: add al, 0x8; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x00000000073b02: add al, 0x8; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x000000000a2fff: add al, 0x8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000016f819: add al, 0x8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000fbf39: add al, 0x8b; adc al, 0x2; call qword ptr [rsp+0x50]; 
0x000000000ac454: add al, 0x8b; add [rcx-0x776b7fe], ecx; ret; 
0x000000000f917d: add al, 0x8b; and al, 0xc; add rsp, 0x10; pop rbp; ret; 
0x0000000010ace9: add al, 0x8b; and al, 0xc; add rsp, 0x18; ret; 
0x0000000013dc34: add al, 0x8f; add rax, rdi; jmp rax; 
0x0000000007132c: add al, 0x90; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000003a756: add al, 0x90; ret; 
0x00000000140317: add al, 0x91; add rax, rcx; jmp rax; 
0x000000000cfab6: add al, 0x96; add rax, rsi; jmp rax; 
0x000000000b5636: add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x000000000edb05: add al, 0x9; ret; 
0x0000000018f58f: add al, 0x9a; xor edi, r12d; add rax, rdx; jmp rax; 
0x0000000018f37a: add al, 0x9a; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax; 
0x0000000005d2d3: add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000008f6bb: add al, 0xa8; add [rbp-0x30], esi; mov eax, 0x10; ret; 
0x000000000e7565: add al, 0xa8; sbb [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x000000000e2781: add al, 0xa9; add rax, rcx; jmp rax; 
0x0000000010ce9a: add al, 0xa; ret; 
0x000000000d8ab5: add al, 0xaa; add rax, rdx; jmp rax; 
0x000000000b4c82: add al, 0xb1; je short 0x00000000000b4c68; ret; 
0x00000000131b9b: add al, 0xb1; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x000000000d86ed: add al, 0xb2; add rax, rdx; jmp rax; 
0x0000000006d766: add al, 0xb3; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000145a53: add al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000003a958: add al, 0xb8; ret; 
0x000000000b4da8: add al, 0xba; add rax, rdx; jmp rax; 
0x00000000072b65: add al, 0xbb; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x0000000017c512: add al, 0xc3; nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x00000000164265: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x00000000164254: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x000000000b08a5: add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000b0894: add al, 0xc3; nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x00000000090adb: add al, 0xc3; nop [rax]; mov [rdx+0x8], rax; ret; 
0x0000000017ee30: add al, 0xc5; cld; ja short 0x000000000017edf8; vzeroupper; ret; 
0x0000000017f142: add al, 0xc5; cld; ja short 0x000000000017f10a; vzeroupper; ret; 
0x0000000017f55b: add al, 0xc5; cld; ja short 0x000000000017f523; vzeroupper; ret; 
0x0000000017fd0d: add al, 0xc5; cld; ja short 0x000000000017fcd5; vzeroupper; ret; 
0x0000000018005b: add al, 0xc5; cld; ja short 0x0000000000180023; vzeroupper; ret; 
0x00000000180184: add al, 0xc5; cld; ja short 0x000000000018014c; vzeroupper; ret; 
0x00000000180511: add al, 0xc5; cld; ja short 0x00000000001804d9; vzeroupper; ret; 
0x00000000180564: add al, 0xc5; cld; ja short 0x000000000018052c; vzeroupper; ret; 
0x00000000180b86: add al, 0xc5; cld; ja short 0x0000000000180b4e; vzeroupper; ret; 
0x00000000180e0f: add al, 0xc5; cld; ja short 0x0000000000180dd7; vzeroupper; ret; 
0x00000000181292: add al, 0xc5; cld; ja short 0x000000000018125a; vzeroupper; ret; 
0x00000000181e6c: add al, 0xc5; cld; ja short 0x0000000000181e34; vzeroupper; ret; 
0x0000000018221c: add al, 0xc5; cld; ja short 0x00000000001821e4; vzeroupper; ret; 
0x000000001824c2: add al, 0xc5; cld; ja short 0x000000000018248a; vzeroupper; ret; 
0x00000000182adc: add al, 0xc5; cld; ja short 0x0000000000182aa4; vzeroupper; ret; 
0x00000000182f74: add al, 0xc5; cld; ja short 0x0000000000182f3c; vzeroupper; ret; 
0x0000000018378a: add al, 0xc5; cld; ja short 0x0000000000183752; vzeroupper; ret; 
0x0000000018408d: add al, 0xc5; cld; ja short 0x0000000000184055; vzeroupper; ret; 
0x000000001841fd: add al, 0xc5; cld; ja short 0x00000000001841c5; vzeroupper; ret; 
0x00000000184500: add al, 0xc5; cld; ja short 0x00000000001844c8; vzeroupper; ret; 
0x00000000184561: add al, 0xc5; cld; ja short 0x0000000000184529; vzeroupper; ret; 
0x00000000184b45: add al, 0xc5; cld; ja short 0x0000000000184b0d; vzeroupper; ret; 
0x00000000184bc1: add al, 0xc5; cld; ja short 0x0000000000184b89; vzeroupper; ret; 
0x000000001853d0: add al, 0xc5; cld; ja short 0x0000000000185398; vzeroupper; ret; 
0x00000000185552: add al, 0xc5; cld; ja short 0x000000000018551a; vzeroupper; ret; 
0x00000000185693: add al, 0xc5; cld; ja short 0x000000000018565b; vzeroupper; ret; 
0x000000001859d7: add al, 0xc5; cld; ja short 0x000000000018599f; vzeroupper; ret; 
0x0000000013f18a: add al, 0xc; add [rax], al; add [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000d264d: add al, 0xd0; ret; 
0x0000000019287e: add al, 0xd8; mov [r13+rbx*8], rdx; test rax, rax; je short 0x000000000019288c; call rax; 
0x00000000037f7f: add al, 0xd8; test rax, rax; je short 0x0000000000037f88; call rax; 
0x00000000037e83: add al, 0xe8; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x000000000df6b0: add al, 0xeb; ret; 
0x000000000db66c: add al, 0xeb; test [rbx-0x7cb7f3ad], cl; ret; 
0x0000000011cb53: add al, 0xf1; jmp qword ptr [rsi+0x2e]; 
0x00000000159862: add al, 0xf3; movq [rdi], mm1; ret; 
0x0000000014cfbb: add al, 0xf7; setne al; movzx eax, al; ret; 
0x00000000075616: add al, 0xf8; ret; 
0x000000000a1501: add al, 0xf; mov dh, 0x54; and al, 0x16; mov [rdi+0x6], dl; ret; 
0x000000000a15ae: add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000a1693: add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rdi+0x6], dl; ret; 
0x00000000169acd: add al, 0xf; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000000c56a4: add al, 0xf; test [rcx+rax], esi; add [rax], al; ret; 
0x0000000016845e: add al, 0xf; test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x0000000018b1cb: add al, 0xf; test [rsi+0x2], ecx; add [rax], al; ret; 
0x000000000b012b: add al, 0xf; test [rsi+0x8], ecx; add [rax], al; ret; 
0x000000000ca67f: add al, 0xf; test dh, ch; adc al, 0x0; add dh, dh; ret; 
0x0000000005e90f: add al, 0xf; xchg [rcx], ah; or [rax], al; add [rcx-0x7d], al; jmp far fword ptr [rax]; 
0x0000000017991d: add al, [rax+rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000008975e: add al, [rax]; add [rax+0x111], bh; syscall; 
0x000000000a49d2: add al, [rax]; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x000000000d6ec9: add al, [rax]; add [rax+0x38], bh; syscall; 
0x00000000089629: add al, [rax]; add [rax+0x90], bh; lea rdx, [rbx+0x638]; syscall; 
0x0000000008fcc3: add al, [rax]; add [rax+0xcb], bh; syscall; 
0x0000000003519a: add al, [rax]; add [rax-0x73], cl; add cl, [rax+0x39]; ret; 
0x00000000102da3: add al, [rax]; add [rax-0x73], cl; add eax, 0xf32d3; add rsp, 0x8; ret; 
0x000000000e9949: add al, [rax]; add [rax-0x73], cl; ret; 
0x00000000074afc: add al, [rax]; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000d6efb: add al, [rax]; add [rax-0x77], cl; mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x000000000861b3: add al, [rax]; add [rax-0x77], cl; push r8; mov fs:[0x300], rdi; ret; 
0x00000000037e06: add al, [rax]; add [rax-0x77], cl; ret; 
0x0000000016851b: add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000002ef76: add al, [rax]; add [rax-0x7d], cl; ret; 
0x00000000052119: add al, [rax]; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000013e6ef: add al, [rax]; add [rax], al; add rdi, 0x10; jmp rcx; 
0x00000000140b1f: add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x0000000014028f: add al, [rax]; add [rax], al; add rdi, 0x68; jmp rcx; 
0x0000000013dba2: add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x000000000fbcfe: add al, [rax]; add [rax], al; call qword ptr [rbp+0x40]; 
0x000000000f11d5: add al, [rax]; add [rax], al; cmove eax, edx; ret; 
0x0000000005228e: add al, [rax]; add [rax], al; mov [rdi+0x8], rdx; ret; 
0x00000000142d62: add al, [rax]; add [rax], al; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000008684c: add al, [rax]; add [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000089f8c: add al, [rax]; add [rax], al; mov eax, 0xe; syscall; 
0x0000000007fdc7: add al, [rax]; add [rax], al; mov eax, r10d; syscall; 
0x00000000092c84: add al, [rax]; add [rax], al; mov eax, r14d; syscall; 
0x000000000867e6: add al, [rax]; add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000005005b: add al, [rax]; add [rax], al; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000007cd84: add al, [rax]; add [rax], al; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c05: add al, [rax]; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008e6fa: add al, [rax]; add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000082479: add al, [rax]; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000001448fc: add al, [rax]; add [rax], al; mov rdi, rsp; call r8; 
0x00000000142f0f: add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm1; call rax; 
0x0000000005227d: add al, [rax]; add [rax], al; ret; 
0x00000000122f59: add al, [rax]; add [rax], al; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000000d20ff: add al, [rax]; add [rax], al; syscall; 
0x000000000d2c7a: add al, [rax]; add [rax], al; xor eax, eax; ret; 
0x0000000007a831: add al, [rax]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000a4648: add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000421bb: add al, [rax]; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000d9648: add al, [rax]; add [rbx-0x2d773], al; call qword ptr [rax]; 
0x0000000008169b: add al, [rax]; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000007ccbb: add al, [rax]; add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000006f6e4: add al, [rax]; add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000008f6ab: add al, [rax]; add [rcx-0x3fcee7b9], cl; ret; 
0x0000000008bca2: add al, [rax]; add [rcx-0x3fcef7b9], cl; add rsp, 0x10; pop rbx; ret; 
0x0000000008bfeb: add al, [rax]; add [rcx-0x3fcef7b9], cl; ret; 
0x00000000031048: add al, [rax]; add [rcx-0x75], cl; add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret; 
0x000000000dbcfa: add al, [rax]; add [rcx-0x77], al; ret; 
0x00000000132b10: add al, [rax]; add [rcx-0x77], cl; jmp qword ptr [rsi+0x2e]; 
0x0000000018fb4d: add al, [rax]; add [rcx-0x7d], al; ret far; 
0x0000000012db8c: add al, [rax]; add [rcx-0x7d], cl; ret; 
0x00000000081740: add al, [rax]; add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000125c24: add al, [rax]; add [rcx], dh; shr cl, 0xbe; idiv bh; jmp qword ptr [rsi-0x70]; 
0x0000000010fbc5: add al, [rax]; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000008aa46: add al, [rax]; add [rsi+0x80], bh; mov eax, 0xcc; syscall; 
0x00000000097f15: add al, [rax]; add al, ch; ret; 
0x000000000b4e6a: add al, [rax]; add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x0000000005b322: add al, [rax]; add rsp, 0xd8; ret; 
0x0000000005b323: add al, [rax]; add rsp, 0xd8; ret; 
0x0000000019260e: add al, [rax]; divss xmm0, [rip+0x2877c]; ret; 
0x000000001876f8: add al, [rax]; lea rax, [rdi+0x2]; ret; 
0x000000001766e8: add al, [rax]; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000000a123f: add al, [rax]; mov [r11], rdx; mov rax, r12; pop r12; ret; 
0x0000000016b9b8: add al, [rax]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016d2c1: add al, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d28d: add al, [rax]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x000000000d2ce3: add al, [rax]; mov rax, [rip+0x11a124]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000011f075: add al, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax; 
0x0000000011f8ee: add al, [rax]; mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000011f8aa: add al, [rax]; mov rdi, r12; call rbp; 
0x0000000011fb8e: add al, [rax]; mov rdi, r12; call rbx; 
0x0000000011f01f: add al, [rax]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x18]; 
0x0000000018fff5: add al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000018f5d1: add al, [rax]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000018f43a: add al, [rax]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x000000001233aa: add al, [rax]; ret; 
0x0000000018b1a8: add al, [rax]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x00000000174c58: add al, [rax]; vzeroupper; ret; 
0x0000000003a358: add al, [rbp+0x440b75c0]; mov eax, eax; ret; 
0x00000000123013: add al, [rbp-0x78]; dec dword ptr [rcx+r9*4+0x10]; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x0000000005c1e1: add al, [rbx+0x277426f8]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000012b312: add al, [rbx+0x283c78e0]; jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x00000000109633: add al, [rbx+0x3b7426f8]; mov eax, r8d; ret; 
0x000000000877a5: add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x0000000010bfab: add al, [rbx+0x6f74fff8]; add eax, 0x1; mov [rdx], eax; ret; 
0x000000000888df: add al, [rbx+0xb7403f8]; ret; 
0x0000000013dd1a: add al, [rbx-0x37f0fe18]; mov [r8+0xa8], eax; mov eax, 0x1; ret; 
0x000000000507ba: add al, [rbx-0x6f3cfe18]; xor eax, eax; ret; 
0x000000001032ea: add al, [rbx]; add [rax], al; lea rax, [rip+0xf2dcb]; add rsp, 0x18; ret; 
0x00000000091b5a: add al, [rcx+0x5c]; ret; 
0x00000000041609: add al, [rcx+rcx*4-0x38]; add rsp, 0xd0; ret; 
0x000000000f0181: add al, [rcx+rcx*4-0x38]; ret; 
0x0000000003a3ba: add al, [rcx+rcx*4-0x40]; ret; 
0x000000000c9be0: add al, [rcx-0x70a3d706]; add dh, [rsi+0x7]; ret; 
0x0000000004e455: add al, [rcx-0x77]; ret; 
0x000000001232b2: add al, [rcx-0x77]; sbb [rbx+0x49], bl; mov [rcx], eax; mov eax, ecx; ret; 
0x000000000f9991: add al, [rcx]; add [rax], al; syscall; 
0x000000000740f8: add al, [rcx]; ret far; 
0x000000001036f1: add al, [rcx]; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000c5f76: add al, [rdx+rdx*8-0x2e77ea8c]; and cl, 0xf; je short 0x00000000000c5fa0; ret; 
0x00000000052183: add al, [rdx]; sar bh, 0xff; ret; 
0x000000000b037a: add al, [rsi]; add [rax], al; ret; 
0x0000000015a4f7: add al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000117d43: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000117dc1: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000008d158: add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x0000000017c4f3: add al, bl; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x00000000164235: add al, bl; nop [rax+rax]; mov [rcx], edx; ret; 
0x000000000a1634: add al, bl; nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000af8a8: add al, bl; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000c5f9a: add al, bl; nop [rax]; add rax, 0x1; ret; 
0x000000000a156f: add al, bl; nop [rax]; mov [rax], ecx; ret; 
0x000000000a14b2: add al, bl; nop [rax]; mov [rdi], r8d; add rax, rdi; ret; 
0x000000000b057b: add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000087bed: add al, bl; nop; mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x0000000007fc1c: add al, bl; xchg ax, ax; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x0000000007fafc: add al, bl; xchg ax, ax; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x000000000fb5ae: add al, bpl; ret far; 
0x00000000095136: add al, ch; adc al, 0x60; cld; dec dword ptr [rax-0x7d]; ret; 
0x000000001235f8: add al, ch; adc ch, [rdi-0xf]; jmp qword ptr [rsi-0x70]; 
0x00000000092e48: add al, ch; add dl, [rbp-0x76b30007]; out dx, eax; call r12; 
0x00000000092e47: add al, ch; add dl, [rbp-0x76b30007]; out dx, eax; call r12; 
0x000000000edcc7: add al, ch; and esi, 0xfffffff3; jmp qword ptr [rsi+0xf]; 
0x000000000ff9fb: add al, ch; bts ebx, esi; jmp qword ptr [rsi+0x2e]; 
0x00000000039ddb: add al, ch; call far fword ptr [rax+0x5]; 
0x0000000005b9fb: add al, ch; call qword ptr [rax]; 
0x00000000129edb: add al, ch; call rdx; 
0x000000001790fd: add al, ch; clc; ja short 0x00000000001790c5; xor eax, eax; ret; 
0x0000000013895e: add al, ch; cld; cmp bh, ch; dec dword ptr [rax-0x77]; ret; 
0x000000000b5bce: add al, ch; cmp al, 0x49; clc; jmp qword ptr [rsi+0x2e]; 
0x0000000007f5ce: add al, ch; cmp al, 0xaf; sti; jmp qword ptr [rsi+0x66]; 
0x0000000007bdce: add al, ch; cmp al, 0xe7; sti; jmp qword ptr [rsi+0x66]; 
0x0000000006b250: add al, ch; cmp bl, [rip+0x2ebf000a]; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000097dac: add al, ch; data64 ret far; 
0x000000000b632f: add al, ch; fild st, dword ptr [rcx-0x8]; jmp qword ptr [rsi+0x2e]; 
0x000000000d45be: add al, ch; fsub st, qword ptr [rdx]; sti; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000b606f: add al, ch; fwait; clc; jmp qword ptr [rsi+0x2e]; 
0x000000000709c9: add al, ch; fwait; cld; call qword ptr [rax-0x1a76b7ab]; 
0x00000000098e7f: add al, ch; fwait; ret far; 
0x000000000e8f86: add al, ch; hlt; ret; 
0x000000001196a6: add al, ch; hlt; shl esi, 0x1; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001314bf: add al, ch; imul ebp, [rsi-0x7ab70011], 0xffffffc0; sete al; add rsp, 0x8; ret; 
0x000000000db59f: add al, ch; imul ebp, edi, 0xfffffff5; jmp qword ptr [rsi+0x66]; 
0x00000000088bae: add al, ch; in al, dx; jb short 0x0000000000088bb2; jmp qword ptr [rsi+0x66]; 
0x0000000006b51d: add al, ch; in eax, dx; out dx, eax; cld; jmp qword ptr [rsi+0x66]; 
0x0000000011a52e: add al, ch; insb [rdi], dx; ret; 
0x0000000009319d: add al, ch; insd [rdi], dx; jae short 0x000000000009319c; jmp qword ptr [rsi+0x66]; 
0x0000000008d518: add al, ch; iretd; cli; jmp qword ptr [rsi-0x70]; 
0x0000000012acdb: add al, ch; iretd; fdivp st(7), st; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000005b288: add al, ch; jb short 0x000000000005b2b5; add [rax], eax; add rsp, 0xd8; ret; 
0x0000000010c594: add al, ch; jbe short 0x000000000010c577; bnd jmp qword ptr [rsi+0xf]; 
0x000000000f59d5: add al, ch; jge short 0x00000000000f5a42; dec dword ptr [rcx-0x77]; ret; 
0x000000000928e4: add al, ch; jl short 0x00000000000928e3; jmp qword ptr [rsi+0xf]; 
0x000000000b9c8e: add al, ch; jl short 0x00000000000b9c9a; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c440b: add al, ch; jmp qword ptr [rax-0x9]; 
0x0000000014de6b: add al, ch; jmp rbx; 
0x00000000088558: add al, ch; jns short 0x000000000008855c; jmp qword ptr [rsi-0x70]; 
0x000000000b6491: add al, ch; jns short 0x00000000000b64d5; clc; jmp qword ptr [rsi+0xf]; 
0x0000000014a3b1: add al, ch; jns short 0x000000000014a37a; clc; jmp qword ptr [rsi+0xf]; 
0x0000000010f84e: add al, ch; jo short 0x000000000010f84a; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000bc1bc: add al, ch; jrcxz 0x00000000000bc1b8; jmp qword ptr [rsi+0x66]; 
0x0000000010aafa: add al, ch; lahf; out 0xfe, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000010aafb: add al, ch; lahf; out 0xfe, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000008526b: add al, ch; lahf; push rdx; sti; jmp qword ptr [rsi+0x66]; 
0x0000000009a9bd: add al, ch; lea ebx, [rcx]; stc; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000192a5e: add al, ch; lodsb [rsi]; jp short 0x0000000000192a4d; jmp qword ptr [rsi+0x2e]; 
0x0000000008a928: add al, ch; loop 0x000000000008a927; cli; jmp qword ptr [rsi-0x70]; 
0x0000000005b668: add al, ch; mov [0xd8c48148000015], al; add [rax], al; ret; 
0x0000000007a498: add al, ch; mov [0xd8c48148fffea0], al; add [rax], al; ret; 
0x00000000094914: add al, ch; mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x00000000088d10: add al, ch; mov dh, [rcx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x00000000108b7c: add al, ch; mov ds, [rcx]; jmp qword ptr [rsi+0x2e]; 
0x00000000141cff: add al, ch; mov ebx, 0x48fff95f; lea esi, [rsp+0x10]; mov edi, eax; call rbp; 
0x000000001178f0: add al, ch; mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x0000000010dc0e: add al, ch; mov esp, 0xe9fff78b; ret far; 
0x000000000d5c56: add al, ch; or al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000008df00: add al, ch; or al, dh; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000011fb76: add al, ch; or eax, 0x89480001; ret; 
0x00000000147ec1: add al, ch; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000012919c: add al, ch; outsb dx, [rsi]; adc esi, ecx; jmp qword ptr [rsi+0x2e]; 
0x000000000c179c: add al, ch; outsb dx, [rsi]; ret; 
0x000000000d8bb1: add al, ch; pop rcx; sbb esi, esi; jmp qword ptr [rsi+0xf]; 
0x000000000b76ac: add al, ch; pop rsi; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c113c: add al, ch; pop rsi; in eax, dx; sti; jmp qword ptr [rsi+0x66]; 
0x00000000052eac: add al, ch; pop rsi; jbe short 0x0000000000052eaf; jmp qword ptr [rsi+0x66]; 
0x00000000140ce2: add al, ch; push 0xffffffffebfffb96; ret far; 
0x00000000133abb: add al, ch; push 0xfffffffffffffff0; jmp qword ptr [rsi+0x2e]; 
0x00000000139ea7: add al, ch; push rbx; xchg esi, edi; jmp qword ptr [rsi+0xf]; 
0x0000000006b8b9: add al, ch; push rcx; in al, dx; cld; call qword ptr [rax-0x1a76b7ab]; 
0x000000000b5eb4: add al, ch; push rsi; clc; jmp qword ptr [rsi+0xf]; 
0x00000000146bb4: add al, ch; push rsi; cmp edi, ebp; jmp qword ptr [rsi+0xf]; 
0x000000000d4446: add al, ch; push rsp; and al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000c4639: add al, ch; rcr dword ptr [rsi-0x9], 0x1; call qword ptr [rax+0x31d18948]; 
0x0000000002d5cf: add al, ch; ret far; 
0x00000000031f47: add al, ch; ret; 
0x00000000100cba: add al, ch; shl byte ptr [rbx+0x148fff2], 0x1; ret; 
0x0000000008d560: add al, ch; stosb [rdi]; iretd; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000b65e0: add al, ch; sub bh, [rdi]; clc; jmp qword ptr [rsi+0x2e]; 
0x000000000d3e56: add al, ch; sub r15b, bl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000065745: add al, ch; syscall; 
0x0000000007a6fb: add al, ch; sysenter; 
0x000000001432c5: add al, ch; test [rax-0x5], esi; jmp qword ptr [rsi-0x7d]; 
0x0000000010ef16: add al, ch; test [rcx-0x9], bh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000142615: add al, ch; test ecx, eax; hlt; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000010e336: add al, ch; test edi, esi; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000102dde: add al, ch; test rbp, r14; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000df0c8: add al, ch; xchg edx, eax; ret; 
0x00000000149d06: add al, ch; xchg esp, eax; ret far; 
0x000000000a10bd: add al, ch; xchg r12, rax; stc; jmp qword ptr [rsi+0x2e]; 
0x000000000918aa: add al, ch; xor [rbp-0x3a170007], bh; stosb [rdi]; stc; jmp qword ptr [rsi+0x66]; 
0x000000001225d8: add al, ch; xor bh, [rdi-0xf]; jmp qword ptr [rsi-0x70]; 
0x00000000086416: add al, dh; cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x000000000865a5: add al, dh; cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x0000000008b18f: add al, dh; cmpxchg [rsp-0x8], rdx; ret; 
0x0000000009041f: add al, dh; dec dword ptr [rdi]; jne short 0x0000000000090430; xor eax, eax; ret; 
0x00000000052160: add bh, [rax+0x1]; ret; 
0x000000000413e9: add bh, [rax-0x1]; pop rbp; ret; 
0x000000000416a3: add bh, [rax-0x1]; ret; 
0x0000000017dd02: add bh, [rcx]; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x000000000b76a9: add bh, [rdi+0xf]; add al, ch; pop rsi; clc; jmp qword ptr [rsi+0x66]; 
0x0000000015ad3a: add bh, ah; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000014037f: add bh, al; add al, 0x0; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000014036f: add bh, al; add al, 0x1; add [rax], al; add [rax+0x1], bh; ret; 
0x00000000052181: add bh, al; add al, [rdx]; sar bh, 0xff; ret; 
0x000000000947b6: add bh, al; add eax, 0x158bb3; add [rax], eax; add [rax], al; ret; 
0x0000000009856a: add bh, al; add eax, 0x15cc37; add [rax], al; add [rax], al; ret; 
0x000000000946f9: add bh, al; add eax, 0x1609fc; add [rax], al; add [rax], al; ret; 
0x00000000093cdf: add bh, al; add eax, 0x160bf6; add [rax], al; add [rax], al; ret; 
0x00000000142c9e: add bh, al; and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x000000000731ae: add bh, al; and al, 0x28; and [rax], al; add [rax], al; jmp rax; 
0x00000000142c68: add bh, al; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000006f4b7: add bh, al; and al, 0x38; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f567: add bh, al; and al, 0x4c; add [rax], eax; add [rax], al; jmp rax; 
0x0000000007493f: add bh, al; and al, 0x50; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f69f: add bh, al; and al, 0x58; add [rax], eax; add [rax], al; jmp rax; 
0x00000000074917: add bh, al; and al, 0x60; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f557: add bh, al; and al, 0x64; add [rax], eax; add [rax], al; jmp rax; 
0x0000000010065b: add bh, al; and al, 0xb8; or [rax], al; add [rax], al; syscall; 
0x00000000071592: add bh, al; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000013ae37: add bh, al; xor dword ptr [rax+0x23], 0x0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000192dc7: add bh, bh; adc ecx, [rax-0x7d]; ret; 
0x0000000008001e: add bh, bh; add bl, ch; ret far; 
0x00000000040b8e: add bh, bh; jg short 0x0000000000040bda; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000f85b8: add bh, bh; jne short 0x00000000000f85c1; mov [rdi], si; xor eax, eax; ret; 
0x0000000013dbac: add bh, bh; loope 0x000000000013db40; ret; 
0x0000000006f55f: add bh, bh; loopne 0x000000000006f5c9; nop [rax+rax]; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000006f623: add bh, bh; loopne 0x000000000006f68d; nop [rax+rax]; mov r14d, 0x1; jmp rax; 
0x0000000007491f: add bh, bh; loopne 0x0000000000074989; nop [rax+rax]; mov r9d, 0x1; jmp rax; 
0x00000000074937: add bh, bh; loopne 0x00000000000749a1; nop [rax+rax]; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x00000000074a7b: add bh, bh; loopne 0x0000000000074ae5; nop; mov dword ptr [rsp+0x34], 0x1; jmp rax; 
0x0000000007720f: add bh, bh; loopne 0x000000000007725b; mov eax, 0xffffffff; ret; 
0x000000000772cf: add bh, bh; loopne 0x0000000000077339; nop [rax+rax]; xor eax, eax; ret; 
0x00000000139d3b: add bh, bh; mov ah, 0x24; enter 0x0, 0x0; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000014c4b6: add bh, bh; push rax; add rsp, 0x28; ret; 
0x0000000014c52e: add bh, bh; push rax; push rax; add rsp, 0x28; ret; 
0x000000000c4780: add bh, bh; ret; 
0x00000000142fc4: add bh, bh; ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000192889: add bh, bh; ror byte ptr [rax-0x7d], 0x1; ret; 
0x00000000139821: add bh, bh; xor eax, 0x7fb58; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000013981b: add bh, bh; xor eax, 0x7fb66; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000139704: add bh, bh; xor eax, 0x7fc75; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000007c84b: add bh, bl; jmp qword ptr [rsi-0x70]; 
0x0000000018db8f: add bh, ch; jmp qword ptr [rsi+0x66]; 
0x000000000c713c: add bh, dh; fisttp dword ptr [rax+0x63], st; ret; 
0x00000000041666: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000004169e: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000044a96: add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000009aa56: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009aa10; ret; 
0x0000000009ab66: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009ab20; ret; 
0x0000000009ac06: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009abc0; ret; 
0x0000000009afd6: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009af90; ret; 
0x0000000009b106: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009b0c0; ret; 
0x0000000009bfb6: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009bf70; ret; 
0x0000000009c046: add bh, dh; mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009c000; ret; 
0x0000000008cc7e: add bh, dh; ret; 
0x000000000b50b6: add bh, dh; rol dword ptr [rax], 0x0; add [rax+0x74], al; ret far; 
0x000000000db7b2: add bl, [r11+0x5d]; pop r12; ret; 
0x0000000013b67f: add bl, [rbx+0x5d]; mov eax, r8d; ret; 
0x000000000db7b3: add bl, [rbx+0x5d]; pop r12; ret; 
0x0000000013076c: add bl, [rbx+0x5d]; sub eax, 0x1; pop r12; pop r13; ret; 
0x00000000117c8a: add bl, [rsi-0x2]; call qword ptr [rax-0x18]; 
0x0000000013e74a: add bl, ah; out dx, al; jmp qword ptr [rsi-0x70]; 
0x0000000012862e: add bl, al; cmp r9, r10; jae short 0x00000000001285e8; mov byte ptr [r9], 0x0; ret; 
0x0000000017ed70: add bl, al; mov [rax+rdx-0x8], rcx; mov [rax], rcx; ret; 
0x0000000013a725: add bl, al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x000000000d91fc: add bl, al; mov eax, 0xffffffff; ret; 
0x0000000003964e: add bl, al; mov rax, [rsi+rax*8+0x80]; ret; 
0x00000000145a58: add bl, al; nop [rax+rax]; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x000000000406b4: add bl, al; nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000040a09: add bl, al; nop [rax+rax]; addss xmm0, xmm0; ret; 
0x000000000d9248: add bl, al; nop [rax+rax]; call qword ptr [rdx+0x40]; 
0x000000000862f8: add bl, al; nop [rax+rax]; cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x00000000087ee4: add bl, al; nop [rax+rax]; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x0000000002d406: add bl, al; nop [rax+rax]; lea rax, [rip+0x183a80]; ret; 
0x000000000879e4: add bl, al; nop [rax+rax]; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000df324: add bl, al; nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df338: add bl, al; nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x0000000013dcd9: add bl, al; nop [rax+rax]; mov dword ptr [r8+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000140369: add bl, al; nop [rax+rax]; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000013a715: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a705: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6f5: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000013ad44: add bl, al; nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000008f664: add bl, al; nop [rax+rax]; mov eax, 0xb; ret; 
0x00000000041e51: add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000041e15: add bl, al; nop [rax+rax]; mov eax, [rip+0x1ab39e]; ret; 
0x0000000008fcb8: add bl, al; nop [rax+rax]; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x000000001888d9: add bl, al; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000c5fd6: add bl, al; nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000c5fe6: add bl, al; nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000c5ff6: add bl, al; nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000c6006: add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000c6016: add bl, al; nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000c6026: add bl, al; nop [rax+rax]; mov rax, 0x7; ret; 
0x000000000904f4: add bl, al; nop [rax+rax]; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000948b6: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x00000000094849: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x00000000094833: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094803: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf78: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x000000000862e8: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862d8: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862c8: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x0000000002deb6: add bl, al; nop [rax+rax]; mov rax, [rip+0x1c1839]; ret; 
0x0000000008fca4: add bl, al; nop [rax+rax]; mov rax, fs:[0x10]; ret; 
0x000000000b1c93: add bl, al; nop [rax+rax]; mov rax, rdi; ret; 
0x0000000018b2a3: add bl, al; nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x00000000108f0e: add bl, al; nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall; 
0x0000000016864f: add bl, al; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x000000000b083f: add bl, al; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x00000000099e1f: add bl, al; nop [rax+rax]; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000084dbf: add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x0000000008661f: add bl, al; nop [rax+rax]; nop [rax]; ret; 
0x00000000138f3e: add bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x0000000008e599: add bl, al; nop [rax+rax]; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x00000000099e14: add bl, al; nop [rax+rax]; ret; 
0x00000000188ca4: add bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000138da4: add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x00000000084dd6: add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x000000001055b5: add bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x0000000013ab22: add bl, al; nop [rax]; lea rdx, [rip+0xb2071]; jmp qword ptr [rdx+rax*8]; 
0x000000000a1552: add bl, al; nop [rax]; mov [rax], si; ret; 
0x0000000014037b: add bl, al; nop [rax]; mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000008b4af: add bl, al; nop [rax]; mov eax, 0xba; syscall; 
0x00000000145a67: add bl, al; nop [rax]; mov eax, [rdi+0x28]; ret; 
0x0000000003a7eb: add bl, al; nop [rax]; mov eax, edi; and eax, 0x7f; ret; 
0x000000000862b7: add bl, al; nop [rax]; mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x0000000018de8b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018de9b: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d9db: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9eb: add bl, al; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000014c29f: add bl, al; nop [rax]; xor eax, eax; ret; 
0x000000000df2bd: add bl, al; nop; mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x000000000b4e6d: add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000b4e5d: add bl, al; nop; mov rax, [rip+0x138061]; mov rax, [rax+0x240]; ret; 
0x000000000b4e4d: add bl, al; nop; mov rax, [rip+0x138071]; mov rax, [rax+0x238]; ret; 
0x000000000b4e3d: add bl, al; nop; mov rax, [rip+0x138081]; mov rax, [rax+0x230]; ret; 
0x000000000b4e2d: add bl, al; nop; mov rax, [rip+0x138091]; mov rax, [rax+0x228]; ret; 
0x000000000b4e1d: add bl, al; nop; mov rax, [rip+0x1380a1]; mov rax, [rax+0x220]; ret; 
0x000000000b4e0d: add bl, al; nop; mov rax, [rip+0x1380b1]; mov rax, [rax+0x218]; ret; 
0x000000000b4dfd: add bl, al; nop; mov rax, [rip+0x1380c1]; mov rax, [rax+0x210]; ret; 
0x000000000b4ded: add bl, al; nop; mov rax, [rip+0x1380d1]; mov rax, [rax+0x208]; ret; 
0x000000000b4ddd: add bl, al; nop; mov rax, [rip+0x1380e1]; mov rax, [rax+0x200]; ret; 
0x000000000b4dcd: add bl, al; nop; mov rax, [rip+0x1380f1]; mov rax, [rax+0x1f8]; ret; 
0x000000000b4dbd: add bl, al; nop; mov rax, [rip+0x138101]; mov rax, [rax+0x1f0]; ret; 
0x00000000140c8d: add bl, al; nop; xor eax, eax; ret; 
0x00000000092857: add bl, al; ret; 
0x0000000018d34d: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000185f80: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d9ce: add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000017ed61: add bl, al; vmovdqu64 [rax+rdx-0x10], xmm16; vmovdqu64 [rax], xmm16; ret; 
0x0000000013dcec: add bl, al; xchg ax, ax; mov dword ptr [r8+0x4], 0x0; mov eax, 0x1; ret; 
0x000000000d845c: add bl, al; xchg ax, ax; mov eax, 0x7e; ret; 
0x00000000122f6c: add bl, al; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000403b7: add bl, bl; insb [rdi], dx; and al, 0x8; fadd st, st(0); ret; 
0x00000000040263: add bl, bl; insb [rdi], dx; and al, 0xe8; ret; 
0x0000000014752f: add bl, ch; fdivr st, dword ptr [rax-0x1]; ret; 
0x00000000092346: add bl, ch; lodsb [rsi]; nop [rax]; mov [rcx+0x20], rdx; ret; 
0x0000000008b4ec: add bl, ch; mov cl, 0x90; ret; 
0x000000000cd4fb: add bl, ch; mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x000000000c8f93: add bl, ch; or [rax-0x7d], ecx; ret; 
0x00000000099f69: add bl, ch; or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x152e69; call qword ptr [rax]; 
0x00000000127b0f: add bl, ch; pushfq; nop [rax+rax]; xor eax, eax; ret; 
0x00000000041b7b: add bl, ch; ret far; 
0x000000000b897d: add bl, ch; ret; 
0x0000000019310b: add bl, ch; test eax, 0xf9b12de8; jmp qword ptr [rsi+0x2e]; 
0x00000000040a0f: add bl, dh; addps xmm0, xmm0; ret; 
0x00000000185d11: add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x0000000016fff1: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000018cbef: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbdf: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6df: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6cf: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6bf: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x0000000018b6af: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbff: add bl, dh; bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d12f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d13f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d14f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d15f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de8f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018de9f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d0d1: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d2bf: add bl, dh; bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x00000000188caf: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185eff: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185d6f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185d7f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d8f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d9df: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9ef: add bl, dh; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000018734f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000188e1f: add bl, dh; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x00000000178ee8: add bl, dh; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001898ef: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x000000001898ff: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x0000000018990f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x0000000018991f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x0000000018b89f: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8af: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000019260f: add bl, dh; divps xmm0, [rip+0x2877c]; ret; 
0x000000000b4af7: add bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x000000000b092f: add bl, dh; movq [rdi-0x1], mm0; ret; 
0x000000000b093f: add bl, dh; movq [rdi], mm0; ret; 
0x00000000140b7f: add bl, dh; movq mm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x0000000013dc47: add bl, dh; movq mm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x000000000af97f: add bl, dh; movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x0000000013dc57: add bl, dh; movq mm1, [r8+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x00000000140b8f: add bl, dh; movq mm1, [rdi+0x30]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x0000000014033f: add bl, dh; movq mm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000133a6f: add bl, dh; movq mm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000000f8ee4: add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000409b6: add bl, dh; mulps xmm0, [rip+0x1790c1]; ret; 
0x00000000040991: add bl, dh; mulps xmm0, [rip+0x1790ea]; ret; 
0x00000000132d4a: add bl, dl; loopne 0x0000000000132d45; rol byte ptr [rcx-0x80], 0x1; jmp qword ptr [rcx]; 
0x00000000040a7e: add bl, sil; addps xmm0, xmm0; ret; 
0x0000000018b6be: add bl, sil; bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x0000000018d2be: add bl, sil; bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x0000000018d2ce: add bl, sil; bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185f8e: add bl, sil; bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000001898ee: add bl, sil; bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018b89e: add bl, sil; bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000013dc56: add bl, sil; movq mm1, [r8+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x00000000140b8e: add bl, sil; movq mm1, [rdi+0x30]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000115331: add byte ptr [r8], 0x0; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x000000000b4e69: add byte ptr [rax+0x2], 0x0; add bl, al; nop; mov rax, 0xffffffffffffffff; ret; 
0x00000000085ca3: add byte ptr [rax+0x3], 0x0; add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x0000000013dcb5: add byte ptr [rax+rax+0x42890000], 0x68; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x000000000b04fc: add byte ptr [rax+rax], 0x0; ret; 
0x0000000007fc45: add byte ptr [rax-0x17c801b], 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x000000000324db: add byte ptr [rax], 0x0; add [rax+0x39], cl; ret; 
0x000000000867eb: add byte ptr [rax], 0x0; add [rax+0xca], bh; syscall; 
0x0000000008aa4a: add byte ptr [rax], 0x0; add [rax+0xcc], bh; syscall; 
0x0000000008e65c: add byte ptr [rax], 0x0; add [rax-0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000003a0ed: add byte ptr [rax], 0x0; add [rax-0x7d], cl; sti; or al, 0x75; ret; 
0x00000000145b3b: add byte ptr [rax], 0x0; add [rax], al; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x000000000a4bfb: add byte ptr [rax], 0x0; add [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000a4c1b: add byte ptr [rax], 0x0; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50db: add byte ptr [rax], 0x0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50eb: add byte ptr [rax], 0x0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x00000000083a8b: add byte ptr [rax], 0x0; add [rax], al; cmp qword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x000000000a1573: add byte ptr [rax], 0x0; add [rax], al; mov [rax], ecx; ret; 
0x00000000115332: add byte ptr [rax], 0x0; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x0000000009234b: add byte ptr [rax], 0x0; add [rax], al; mov [rcx+0x20], rdx; ret; 
0x000000000a160b: add byte ptr [rax], 0x0; add [rax], al; mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x000000000a154b: add byte ptr [rax], 0x0; add [rax], al; mov byte ptr [rax], 0x0; ret; 
0x000000000df2fb: add byte ptr [rax], 0x0; add [rax], al; mov byte ptr [rdi+0x8], 0x15; mov eax, 0x1; ret; 
0x00000000093cdb: add byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x00000000074913: add byte ptr [rax], 0x0; add [rax], al; mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x000000000890cb: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x16; ret; 
0x00000000144f2b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x1; ret; 
0x0000000004164b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x3e; syscall; 
0x000000000f995b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x53; syscall; 
0x000000000fb24b: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x56; syscall; 
0x000000000d7eeb: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0x7c; syscall; 
0x0000000008b4b3: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0xba; syscall; 
0x000000001232cb: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000122793: add byte ptr [rax], 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000145a6b: add byte ptr [rax], 0x0; add [rax], al; mov eax, [rdi+0x28]; ret; 
0x0000000007fb7b: add byte ptr [rax], 0x0; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret; 
0x0000000015986b: add byte ptr [rax], 0x0; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000010923b: add byte ptr [rax], 0x0; add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000006f613: add byte ptr [rax], 0x0; add [rax], al; mov r14d, 0x1; mov r11d, 0x1; jmp rax; 
0x00000000074a6b: add byte ptr [rax], 0x0; add [rax], al; mov r9d, 0x1; mov r10d, 0x1; jmp rax; 
0x00000000123633: add byte ptr [rax], 0x0; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000008424b: add byte ptr [rax], 0x0; add [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000105643: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rax+0x60]; ret; 
0x0000000008bf6b: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862bb: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x00000000036abb: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rip+0x1b8c79]; ret; 
0x0000000013f7b3: add byte ptr [rax], 0x0; add [rax], al; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001596ab: add byte ptr [rax], 0x0; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000001599bb: add byte ptr [rax], 0x0; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000015994b: add byte ptr [rax], 0x0; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000141f73: add byte ptr [rax], 0x0; add [rax], al; pop rbp; ret; 
0x0000000004f7eb: add byte ptr [rax], 0x0; add [rax], al; ret; 
0x0000000018cbeb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbdb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6db: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6cb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6ab: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbfb: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d35b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x00000000188e2b: add byte ptr [rax], 0x0; add [rax], al; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000187fab: add byte ptr [rax], 0x0; add [rax], al; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x000000001755ed: add byte ptr [rax], 0x0; add [rax], al; vzeroupper; ret; 
0x0000000014c2a3: add byte ptr [rax], 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000080ab3: add byte ptr [rax], 0x0; add [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x000000000408fe: add byte ptr [rax], 0x0; add [rbp+0xc], dh; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000125600: add byte ptr [rax], 0x0; add [rbp+rcx*4-0x74], cl; ret; 
0x00000000087ca5: add byte ptr [rax], 0x0; add [rbp-0x3dbaf040], al; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x0000000008ebf5: add byte ptr [rax], 0x0; add [rbp-0x7b], al; inc dword ptr [rdi+rcx+0x45]; jmp far fword ptr [rax-0xff88afe]; 
0x0000000008716b: add byte ptr [rax], 0x0; add [rcx+rcx*4-0x1], cl; mov eax, r9d; syscall; 
0x00000000086deb: add byte ptr [rax], 0x0; add [rcx+rcx*4-0x38], al; syscall; 
0x00000000089998: add byte ptr [rax], 0x0; add [rcx+rcx*4-0x40], al; syscall; 
0x00000000087804: add byte ptr [rax], 0x0; add [rcx], dh; ror byte ptr [rdi], 0x11; jle short 0x000000000008787e; ret; 
0x000000001870c9: add byte ptr [rax], 0x0; add [rdi+0x11], dh; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x0000000017ec36: add byte ptr [rax], 0x0; add [rdi+0x14], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x00000000156f97: add byte ptr [rax], 0x0; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9; 
0x0000000017ebe6: add byte ptr [rax], 0x0; add [rdi+0x6d], dh; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001222bc: add byte ptr [rax], 0x0; add al, ch; ret far; 
0x0000000018d34a: add byte ptr [rax], 0x0; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000185f7d: add byte ptr [rax], 0x0; add bl, al; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000001088dc: add byte ptr [rax], 0x0; add cl, ch; imul edi, esi, 0xffffffff; jmp far fword ptr [rcx+0x400000]; 
0x00000000101853: add byte ptr [rax], 0x0; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000fe1b1: add byte ptr [rax], 0x0; je short 0x00000000000fe1c0; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000009b065: add byte ptr [rax], 0x0; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000003a684: add byte ptr [rax], 0x0; ret; 
0x000000000b4de9: add byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000c1b70: add byte ptr [rcx+rcx*4+0x42], 0x4; mov [rdx], eax; xor eax, eax; ret; 
0x000000000447bc: add byte ptr [rcx], 0x0; add [rax-0x73], cl; add eax, 0x1abc4f; add rsp, 0x8; ret; 
0x0000000018f41c: add byte ptr [rcx], 0x0; add [rax-0x7d], cl; ret far; 
0x000000000ca156: add byte ptr [rcx], 0x0; add [rbx-0x12f6b], cl; jmp far fword ptr [rbx]; 
0x0000000014a46f: add byte ptr [rcx], 0x0; add [rcx+rcx*4-0x40], cl; pop rbp; ret; 
0x000000000e9948: add byte ptr [rdx], 0x0; add [rax-0x73], cl; ret; 
0x00000000097f14: add byte ptr [rdx], 0x0; add al, ch; ret; 
0x00000000151dc9: add byte ptr [rsi], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000d099a: add ch, [rcx]; ret far; 
0x000000000c6dc3: add ch, [rcx]; ror dword ptr [rcx+0x1fe8c1c8], 0x29; ret; 
0x00000000070d3c: add ch, [rip-0x7d000000]; ret; 
0x000000000ed354: add ch, al; and di, di; dec dword ptr [rax-0x77]; ret; 
0x000000001704e2: add ch, al; std; xlat [rbx]; ret; 
0x00000000186d1c: add ch, al; sti; xchg ebx, eax; ret; 
0x00000000117058: add ch, cl; add dl, [rax-0xf]; jmp qword ptr [rsi-0x70]; 
0x000000001850bd: add ch, cl; or [rbx], eax; add [rax], al; xor eax, eax; ret; 
0x00000000127c77: add cl, [r8+0x39]; ret; 
0x000000000ac43c: add cl, [r8-0x76b7fdbe]; clc; ret; 
0x000000000448f7: add cl, [r8-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000ee12d: add cl, [rax+0x16893847]; mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x000000000c4810: add cl, [rax+0x29]; bnd jbe 0x00000000000c4b20; add rax, rdi; add rax, rcx; ret; 
0x000000000c4aa7: add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac7: add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae7: add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b07: add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000013cbbd: add cl, [rax+0x3948ff47]; iretd; jne short 0x000000000013cbb0; ret; 
0x000000000ff130: add cl, [rax+0x39]; clc; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x0000000012297e: add cl, [rax+0x39]; cli; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x0000000005a64d: add cl, [rax+0x39]; enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x00000000035507: add cl, [rax+0x39]; ret far; 
0x0000000003519f: add cl, [rax+0x39]; ret; 
0x000000001779ba: add cl, [rax+0x77f8c508]; ret; 
0x0000000007ce05: add cl, [rax+0xf]; scasd [rdi]; ret; 
0x0000000006c295: add cl, [rax-0x73]; adc eax, 0xfffffc20; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x00000000173e24: add cl, [rax-0x73]; add al, 0x2; cmovne rax, rcx; vzeroupper; ret; 
0x000000000b4fa4: add cl, [rax-0x73]; add eax, 0x10924; cmovne rax, rdx; ret; 
0x0000000009bf82: add cl, [rax-0x73]; add eax, 0x134b6; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x0000000009abd2: add cl, [rax-0x73]; add eax, 0x14786; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009aa22: add cl, [rax-0x73]; add eax, 0x17926; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x00000000115fa8: add cl, [rax-0x73]; add eax, 0x3b9c0; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d68: add cl, [rax-0x73]; add eax, 0x3bc20; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e88: add cl, [rax-0x73]; add eax, 0x3e4d0; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000009c012: add cl, [rax-0x73]; add eax, 0x5946; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000001160ea: add cl, [rax-0x73]; add eax, 0x68b1e; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009b0d2: add cl, [rax-0x73]; add eax, 0x68e6; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x0000000009afa2: add cl, [rax-0x73]; add eax, 0x6966; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000009ab32: add cl, [rax-0x73]; add eax, 0x6ed6; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000009b060: add cl, [rax-0x73]; add eax, 0x8098; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000009c146: add cl, [rax-0x73]; add eax, 0x9512; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a6: add cl, [rax-0x73]; add eax, 0x95a2; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb61: add cl, [rax-0x73]; add eax, 0x96e7; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009c288: add cl, [rax-0x73]; add eax, 0xb5710; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be68: add cl, [rax-0x73]; add eax, 0xb5b10; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009c196: add cl, [rax-0x73]; add eax, 0xb702; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f6: add cl, [rax-0x73]; add eax, 0xb792; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bc48: add cl, [rax-0x73]; add eax, 0xb8720; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x0000000009bd8a: add cl, [rax-0x73]; add eax, 0xe2e8e; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x000000000b5511: add cl, [rax-0x73]; add eax, 0xf1f7; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000000b00e9: add cl, [rax-0x73]; jg short 0x00000000000b00f0; jne 0x00000000000b0980; ret; 
0x000000000b179d: add cl, [rax-0x73]; jg short 0x00000000000b17a4; jne 0x00000000000b21a0; ret; 
0x00000000175f59: add cl, [rax-0x73]; jg short 0x0000000000175f60; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176c8d: add cl, [rax-0x73]; jg short 0x0000000000176c94; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d1d: add cl, [rax-0x73]; jg short 0x0000000000187d24; jne 0x0000000000187ff0; ret; 
0x0000000018b189: add cl, [rax-0x73]; jg short 0x000000000018b190; jne 0x000000000018b420; ret; 
0x0000000006bb22: add cl, [rax-0x73]; or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000166685: add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x000000001622f5: add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000162225: add cl, [rax-0x75]; or [r8-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x000000000b4c25: add cl, [rax-0x76b73cf8]; adc al, r15b; mov [rax], rcx; ret; 
0x000000000ac43d: add cl, [rax-0x76b7fdbe]; clc; ret; 
0x000000000448f8: add cl, [rax-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000ac3a9: add cl, [rax-0x77]; clc; ret; 
0x00000000111106: add cl, [rax-0x77]; out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000079b7b: add cl, [rax-0x77]; ret; 
0x00000000061bce: add cl, [rax-0x77]; test [rax-0x16000007], ebx; ret; 
0x000000000c61ff: add cl, [rax-0x7b]; ror byte ptr [rax+0xf], cl; ret; 
0x000000000643b8: add cl, [rax-0x7d]; ret; 
0x0000000018c874: add cl, [rax-0x7d]; shl dword ptr [rax+0x49], 0x39; ret far; 
0x00000000159792: add cl, [rbx+0x257890e]; mov [rdi], ecx; ret; 
0x000000000ac4a8: add cl, [rbx+0x42890341]; add ecx, [rax-0x77]; clc; ret; 
0x00000000166605: add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret; 
0x000000000ac54c: add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret; 
0x000000000fe69c: add cl, [rbx+0x75fc2444]; shl edi, 0xd8; ret; 
0x0000000018c7be: add cl, [rcx+0x39]; ret far; 
0x000000000ca3d3: add cl, [rcx+rcx*4-0x40]; add rsp, 0x8; ret; 
0x00000000088ac5: add cl, [rcx-0x2dceba3e]; mov eax, ebx; syscall; 
0x000000000884a9: add cl, [rcx-0x2dceba3e]; mov rdi, r9; mov eax, ebp; syscall; 
0x00000000087a13: add cl, [rcx-0x3fcef7b9]; ret; 
0x000000000326ef: add cl, [rcx-0x7d]; ret; 
0x00000000184b40: add cl, [rdi]; add esi, edx; je short 0x0000000000184b4a; vzeroall; ret; 
0x0000000004e451: add cl, [rdi]; mov esi, 0x89410252; ret; 
0x00000000176c91: add cl, [rdi]; test [rax+0x2], edi; add [rax], al; vzeroupper; ret; 
0x000000000ac43a: add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret; 
0x000000001665c3: add cl, [rdx+0x42880441]; add al, 0x48; lea eax, [rdx+0x4]; ret; 
0x000000000ac468: add cl, [rdx+0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x000000000ac4ec: add cl, [rdx+0x42880841]; or [rax-0x77], cl; clc; ret; 
0x00000000091097: add cl, [rip+0x48000000]; add esp, 0x110; pop rbp; ret; 
0x000000000eb02f: add cl, al; call far fword ptr [rax]; 
0x0000000010132e: add cl, al; call far fword ptr [rdi]; 
0x0000000009c1fb: add cl, bh; call far fword ptr [rbp+0x31]; 
0x00000000115ccf: add cl, ch; adc eax, 0x66fffffe; nop [rax+rax]; nop; ret; 
0x000000000f6fd4: add cl, ch; cmp edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000001364e4: add cl, ch; fdivr st, st(7); jmp qword ptr [rsi+0xf]; 
0x00000000074b2c: add cl, ch; idiv bh; jmp qword ptr [rsi+0xf]; 
0x000000000f7de9: add cl, ch; idiv edi; call qword ptr [rax+0x49ff894c]; 
0x0000000009192f: add cl, ch; imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x0000000007eabc: add cl, ch; imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000014388f: add cl, ch; imul edi, edx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000001088df: add cl, ch; imul edi, esi, 0xffffffff; jmp far fword ptr [rcx+0x400000]; 
0x00000000072059: add cl, ch; imul edi, esp, 0xffffffff; call qword ptr [rax+0x4cc98949]; 
0x000000000f3d94: add cl, ch; jno short 0x00000000000f3d8d; jmp qword ptr [rsi+0xf]; 
0x000000001359c4: add cl, ch; jrcxz 0x00000000001359c8; jmp qword ptr [rsi+0xf]; 
0x000000001386f4: add cl, ch; mov dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000014ee4f: add cl, ch; or ecx, edi; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000d6e21: add cl, ch; paddw mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x000000000f8fef: add cl, ch; pop rbx; xor esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x0000000013447b: add cl, ch; psubb mm7, mm7; jmp qword ptr [rsi+0x66]; 
0x000000000c16e4: add cl, ch; push rsi; cli; jmp qword ptr [rsi+0xf]; 
0x0000000003608c: add cl, ch; ret far; 
0x0000000003d54d: add cl, ch; ret; 
0x0000000009753c: add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000182e11: add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001927dc: add cl, ch; scasb [rdi]; add dh, bh; jmp qword ptr [rsi+0xf]; 
0x000000001386db: add cl, ch; scasd [rdi]; mov ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x0000000006836c: add cl, ch; scasd [rdi]; ret; 
0x000000000388c0: add cl, ch; stosb [rdi]; add eax, 0x2e660000; nop [rax+rax]; ret; 
0x0000000008815a: add cl, ch; xor [rax], al; add [rax+0x16], bh; ret; 
0x0000000018ec50: add cl, ch; xor ch, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000b390b: add dh, [rax]; in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000b3e77: add dh, [rbp+0x16]; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3e70; ret; 
0x000000000b3f27: add dh, [rbp+0x16]; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3f20; ret; 
0x0000000013253c: add dh, [rbp+0x19]; mov eax, r8d; ret; 
0x0000000007b089: add dh, [rbp+0x64]; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000014593e: add dh, [rbp+rbx*8-0x15]; ret; 
0x00000000188c08: add dh, [rbp-0x72]; add rax, rdx; ret; 
0x0000000013f7d1: add dh, [rbx+rcx-0x48]; add [rax], eax; add [rax], al; ret; 
0x0000000013f7d2: add dh, [rbx+rcx-0x48]; add [rax], eax; add [rax], al; ret; 
0x00000000115724: add dh, [rcx]; ror byte ptr [rax-0x75], 0x5d; clc; leave; ret; 
0x0000000018c27c: add dh, [rcx]; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x000000000018be07; ret; 
0x0000000010b363: add dh, [rdi+0x22]; mov eax, 0x1f; syscall; 
0x000000000f8f07: add dh, [rdi+0x8]; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x0000000008fc72: add dh, [rdi+0xb]; mov [rdi], esi; xor eax, eax; ret; 
0x0000000009c19a: add dh, [rdi-0x72b80000]; adc eax, 0xc24ab; cmovne rax, rdx; ret; 
0x0000000017c0ff: add dh, [rdx+0x8]; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x0000000012c6d3: add dh, [rdx+rsi+0x31]; shl byte ptr [rsi+0x39], 0xd1; je short 0x000000000012c6e0; ret; 
0x000000000947a8: add dh, [rsi+0x5]; ret; 
0x00000000087a97: add dh, [rsi+0x6]; ret; 
0x000000000c9be6: add dh, [rsi+0x7]; ret; 
0x00000000093d07: add dh, [rsi+rbp+0x48]; mov esi, ebp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x0000000010b185: add dh, [rsi-0x18]; mov rax, [rip+0xe1c81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b385: add dh, [rsi-0x22]; mov rax, [rip+0xe1a81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000088592: add dh, [rsp+rax-0x7d]; and al, 0x2; xor eax, eax; ret; 
0x00000000144a51: add dh, [rsp+rbp-0x7b]; shl byte ptr [rax+rcx+0x31], 0xc0; add rsp, 0x10; pop rbp; ret; 
0x000000000a154f: add dh, al; add [rax], al; ret; 
0x0000000013283d: add dh, al; add eax, 0xc4b5b; add [rdi], cl; adc [rip+0xc5b5c], esp; call rbx; 
0x000000001014a5: add dh, al; add eax, 0xf4b63; and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000012491f: add dh, al; add eax, [rax]; pop rbx; ret; 
0x000000000a1117: add dh, al; inc dword ptr [rax]; mov [rdi], rdx; ret; 
0x000000000df32f: add dh, al; or [r10], r11b; mov eax, 0x2; ret; 
0x000000000df33f: add dh, al; or [r8+r15*4], r11b; add al, [rax]; add [rax], al; ret; 
0x00000000072aff: add dh, al; test [rax], esp; idiv edi; jmp qword ptr [rax]; 
0x0000000008618d: add dh, al; xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x000000000c57e6: add dh, bh; fadd st, st(3); nop [rax+rax]; xor rax, rax; ret; 
0x000000001927df: add dh, bh; jmp qword ptr [rsi+0xf]; 
0x000000000fc05d: add dh, bl; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000159943: add dh, bl; movq [rdi], mm1; ret; 
0x0000000006dc4a: add dh, dh; ret; 
0x000000000b4f9d: add dh, dh; sbb byte ptr [rbp+0x2000000], 0x48; lea eax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009b2cd: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1ad: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac3d: add dh, dh; sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x0000000006f556: add dil, al; and al, 0x64; add [rax], eax; add [rax], al; jmp rax; 
0x000000000c477f: add dil, r15b; ret; 
0x0000000011705a: add dl, [rax-0xf]; jmp qword ptr [rsi-0x70]; 
0x000000000b632d: add dl, [rax]; add al, ch; fild st, dword ptr [rcx-0x8]; jmp qword ptr [rsi+0x2e]; 
0x00000000092e4a: add dl, [rbp-0x76b30007]; out dx, eax; call r12; 
0x0000000009ae4b: add dl, bh; jmp qword ptr [rsi-0x70]; 
0x000000000406bf: add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000004063d: add dl, dh; movups xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040617: add dl, dh; movups xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000446c7: add dl, dh; movups xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000040627: add dl, dh; mulps xmm0, xmm1; ret; 
0x0000000012f166: add dword ptr [rax+0x10], 0x1; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x000000000897d9: add dword ptr [rax+0x6], 0x8b480000; mov ecx, 0x648; je 0x00000000000898c5; call rax; 
0x00000000140e11: add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x0000000010c00c: add dword ptr [rax], 0x1; ret; 
0x0000000014ca99: add dword ptr [rax], 0x48640000; mov eax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000015a8b9: add dword ptr [rax], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000086f5b: add dword ptr [rax], 0x8d480000; js short 0x0000000000086f83; mov eax, 0xca; syscall; 
0x000000000898ee: add dword ptr [rax], 0x8d480000; mov eax, 0x61c; mov eax, 0xca; syscall; 
0x000000001743f6: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x000000000868c3: add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov eax, 0xca; syscall; 
0x00000000088943: add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000139119: add dword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000096256: add dword ptr [rbx], 0x0; add [rax-0x7d], cl; ret far; 
0x0000000015a5b9: add dword ptr [rbx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000009b9f9: add dword ptr [rcx], 0x0; cmove rax, rdx; ret; 
0x0000000009c2da: add dword ptr [rcx], 0x58d4800; sbb al, 0x82; add [rax], eax; cmove rax, rdx; ret; 
0x00000000145a50: add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000005c25e: add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008bf03: add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x000000000e48a3: add dword ptr [rdi+0x4], 0x1; pop rbx; pop rbp; pop r12; ret; 
0x0000000005c2c0: add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x0000000010bd82: add dword ptr [rdx+rax*2], 0x1; ret; 
0x0000000016d2c0: add dword ptr [rdx], 0x8a0c8b00; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000084e3b: add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x000000000438fd: add dword ptr [rip+0x1ac29c], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000003f835: add dword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x00000000115fe1: add dword ptr [rsi], 0x0; cmove rax, rdx; ret; 
0x00000000115fda: add dword ptr [rsi], 0x0; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000151aec: add dword ptr [rsi], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ca0: add dword ptr [rsi], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b9: add dword ptr [rsi], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000115dd9: add dword ptr [rsi], 0x7; add [rax-0x73], cl; add eax, 0x706ec; cmove rax, rdx; ret; 
0x000000000b515f: add eax, 0x1069c; cmove rax, rdx; ret; 
0x000000000b525f: add eax, 0x1082c; cmove rax, rdx; ret; 
0x000000000a15db: add eax, 0x1087dc; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000000b4fa7: add eax, 0x10924; cmovne rax, rdx; ret; 
0x000000000b4eff: add eax, 0x109fc; cmove rax, rdx; ret; 
0x000000000b223b: add eax, 0x10; lea r11, [rip+0xf810b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a1b: add eax, 0x10; lea r11, [rip+0xf974b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000122766: add eax, 0x10; ret; 
0x000000000b5064: add eax, 0x10d37; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x000000000d8022: add eax, 0x114df1; cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d7fb2: add eax, 0x114e61; cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d7d82: add eax, 0x115091; cmp byte ptr [rax], 0x0; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7d22: add eax, 0x1150f1; cmp byte ptr [rax], 0x0; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d56e9: add eax, 0x117722; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d3d72: add eax, 0x1190a1; cmp byte ptr [rax], 0x0; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d2ce7: add eax, 0x11a124; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d2cb2: add eax, 0x11a159; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2c72: add eax, 0x11a199; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d226a: add eax, 0x11aba1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21fa: add eax, 0x11ac11; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d213e: add eax, 0x11ad85; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000d7279: add eax, 0x11e532; mov rax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x000000000d71f6: add eax, 0x11e585; cmp eax, 0x1; jg short 0x00000000000d7208; pop rbx; ret; 
0x000000000c750f: add eax, 0x1258fc; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000c84e8: add eax, 0x12cf33; cmp eax, 0x1; jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x000000000858ae: add eax, 0x12dc10; pop rbx; pop rbp; pop r12; ret; 
0x00000000073d76: add eax, 0x134845; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x00000000073cf3: add eax, 0x134848; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000073c30: add eax, 0x13498b; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x0000000009bf85: add eax, 0x134b6; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x00000000071325: add eax, 0x137016; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x000000000b4e62: add eax, 0x138061; mov rax, [rax+0x240]; ret; 
0x000000000b4e52: add eax, 0x138071; mov rax, [rax+0x238]; ret; 
0x000000000b4e42: add eax, 0x138081; mov rax, [rax+0x230]; ret; 
0x000000000b4e32: add eax, 0x138091; mov rax, [rax+0x228]; ret; 
0x000000000b4e22: add eax, 0x1380a1; mov rax, [rax+0x220]; ret; 
0x000000000b4e12: add eax, 0x1380b1; mov rax, [rax+0x218]; ret; 
0x000000000b4e02: add eax, 0x1380c1; mov rax, [rax+0x210]; ret; 
0x000000000b4df2: add eax, 0x1380d1; mov rax, [rax+0x208]; ret; 
0x000000000b4de2: add eax, 0x1380e1; mov rax, [rax+0x200]; ret; 
0x000000000b4dd2: add eax, 0x1380f1; mov rax, [rax+0x1f8]; ret; 
0x000000000b4dc2: add eax, 0x138101; mov rax, [rax+0x1f0]; ret; 
0x000000000b4db2: add eax, 0x138111; mov rax, [rax+0x248]; ret; 
0x0000000006ecbb: add eax, 0x139500; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000006e6ef: add eax, 0x139a4c; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000015a7f8: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000009abd5: add eax, 0x14786; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x000000000a18bc: add eax, 0x14a3bf; mov rax, [rax+rdi*8]; ret; 
0x000000000a18dc: add eax, 0x14a5bf; mov rax, [rax+rdi*8]; ret; 
0x0000000009a2b2: add eax, 0x152b59; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009a173: add eax, 0x152c68; call qword ptr [rax]; 
0x0000000009a032: add eax, 0x152da9; call qword ptr [rax]; 
0x00000000099f72: add eax, 0x152e69; call qword ptr [rax]; 
0x00000000099221: add eax, 0x153bea; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000095c0b: add eax, 0x158050; jne short 0x0000000000095c60; add rsp, 0x10; pop rbp; ret; 
0x000000000948c5: add eax, 0x158ade; ret; 
0x000000000948b2: add eax, 0x158ae9; ret; 
0x00000000094855: add eax, 0x158afe; ret; 
0x0000000009482f: add eax, 0x158b0c; ret; 
0x00000000094845: add eax, 0x158b16; ret; 
0x000000000947ff: add eax, 0x158b44; ret; 
0x00000000094824: add eax, 0x158b47; add [rax], eax; add [rax], al; mov [rip+0x158b0c], rax; ret; 
0x000000000947f4: add eax, 0x158b77; add [rax], eax; add [rax], al; mov [rip+0x158b44], rax; ret; 
0x000000000947de: add eax, 0x158b89; ret; 
0x000000000947d4: add eax, 0x158b97; add [rax], eax; add [rax], al; mov [rip+0x158b89], eax; ret; 
0x000000000947b2: add eax, 0x158b99; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x000000000947b8: add eax, 0x158bb3; add [rax], eax; add [rax], al; ret; 
0x00000000093f02: add eax, 0x158f09; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a82: add eax, 0x159389; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000092232: add eax, 0x15abd9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000911ea: add eax, 0x15bc21; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x0000000009103a: add eax, 0x15bdd1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009121f: add eax, 0x15c070; add rsp, 0x8; ret; 
0x00000000090aba: add eax, 0x15c351; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000906b2: add eax, 0x15c759; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090622: add eax, 0x15c7e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009856c: add eax, 0x15cc37; add [rax], al; add [rax], al; ret; 
0x0000000008e42e: add eax, 0x15ee61; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094aa1: add eax, 0x160716; test eax, eax; jne short 0x0000000000094ab0; ret; 
0x000000000948f7: add eax, 0x1608c4; ret; 
0x00000000094814: add eax, 0x1609a3; ret; 
0x000000000946fb: add eax, 0x1609fc; add [rax], al; add [rax], al; ret; 
0x000000000946f1: add eax, 0x160a0a; add [rax], al; add [rax], al; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x00000000093ce1: add eax, 0x160bf6; add [rax], al; add [rax], al; ret; 
0x0000000008bf85: add eax, 0x1612f6; ret; 
0x0000000008bf74: add eax, 0x161313; ret; 
0x000000001398ca: add eax, 0x161; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000927f2: add eax, 0x162091; mov dword ptr [rdi], 0x0; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x00000000092366: add eax, 0x162515; ret; 
0x00000000087672: add eax, 0x165799; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000860aa: add eax, 0x166e19; mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x000000000862f4: add eax, 0x166f83; ret; 
0x000000000862e4: add eax, 0x166f8f; ret; 
0x000000000862d4: add eax, 0x166f9b; ret; 
0x000000000862c4: add eax, 0x166fa7; ret; 
0x00000000085bce: add eax, 0x1672f5; call qword ptr [rax+0x360]; 
0x00000000084dd2: add eax, 0x169889; ret; 
0x0000000008ae41: add eax, 0x16996a; ret; 
0x00000000085d00: add eax, 0x1699e3; push r10; call rax; 
0x00000000086e56: add eax, 0x16; and eax, 0xfffffff7; jne short 0x0000000000086e11; pop rbx; ret; 
0x00000000082c72: add eax, 0x16a1c1; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000086324: add eax, 0x16a42b; ret; 
0x00000000084ead: add eax, 0x16b862; add [rax], al; add [rax], al; ret; 
0x00000000084ea2: add eax, 0x16b865; add [rax], al; add [rax], al; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084e7d: add eax, 0x16b88e; cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x0000000007ff22: add eax, 0x16cee9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000082f85: add eax, 0x16d786; cmp eax, 0x1; jg short 0x0000000000082fc0; add rsp, 0x8; ret; 
0x000000000c9bfe: add eax, 0x16d; ret; 
0x0000000007e462: add eax, 0x16e9a9; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000007c7ac: add eax, 0x170687; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000078aca: add eax, 0x174341; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000003964a: add eax, 0x175e46; ret; 
0x00000000039632: add eax, 0x175e5e; cmp [rdx+0x38], edi; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000007560f: add eax, 0x17622c; mov rax, [rax+rdi*8]; ret; 
0x000000000783cd: add eax, 0x1782fe; cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x00000000040bcb: add eax, 0x1785a0; por xmm0, xmm1; ret; 
0x000000000409ab: add eax, 0x178770; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x000000000409b2: add eax, 0x178779; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040986: add eax, 0x178795; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x0000000004098d: add eax, 0x1787ae; mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000404c3: add eax, 0x178c28; andpd xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x000000000406b0: add eax, 0x178d3b; ret; 
0x00000000040641: add eax, 0x178d9a; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x0000000004061b: add eax, 0x178dc8; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x00000000040a05: add eax, 0x17907e; ret; 
0x000000000409ba: add eax, 0x1790c1; ret; 
0x00000000040995: add eax, 0x1790ea; ret; 
0x0000000009aa25: add eax, 0x17926; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000002d402: add eax, 0x181bef; ret; 
0x0000000009c2df: add eax, 0x1821c; cmove rax, rdx; ret; 
0x0000000009b9f7: add eax, 0x18394; cmove rax, rdx; ret; 
0x0000000002d412: add eax, 0x183a80; ret; 
0x0000000009bebf: add eax, 0x1861c; cmove rax, rdx; ret; 
0x0000000009bc9f: add eax, 0x1885c; cmove rax, rdx; ret; 
0x0000000009bd5b: add eax, 0x18d70; cmovne rax, rdx; ret; 
0x00000000100607: add eax, 0x19000ec8; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009b2d7: add eax, 0x19094; cmovne rax, rdx; ret; 
0x0000000009b1b7: add eax, 0x19114; cmovne rax, rdx; ret; 
0x00000000192c55: add eax, 0x1914e800; idiv edi; mov qword ptr [rip+0x5cf19], 0x0; add rsp, 0x8; ret; 
0x0000000009ac47: add eax, 0x195e4; cmovne rax, rdx; ret; 
0x0000000004f8a9: add eax, 0x19dfc2; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000501e8: add eax, 0x1; add rcx, 0x8; cmp r11d, eax; jne short 0x00000000000501b0; ret; 
0x0000000004f801: add eax, 0x1; cmp byte ptr [rax+0x1], 0x0; jne short 0x000000000004f800; pop rbx; ret; 
0x00000000050461: add eax, 0x1; cmp rdx, rax; jne short 0x0000000000050458; xor eax, eax; ret; 
0x00000000050549: add eax, 0x1; cmp rdx, rax; jne short 0x0000000000050540; xor eax, eax; ret; 
0x0000000010bff1: add eax, 0x1; mov [rdx], ax; ret; 
0x0000000010bff2: add eax, 0x1; mov [rdx], ax; ret; 
0x0000000010bfb1: add eax, 0x1; mov [rdx], eax; ret; 
0x000000000a1311: add eax, 0x1; movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000a1310; ret; 
0x0000000007dd17: add eax, 0x1; pop r12; pop r13; pop r14; ret; 
0x0000000009bf2b: add eax, 0x1; ret; 
0x0000000009de91: add eax, 0x1; test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000004dffc: add eax, 0x1a259f; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000586b4: add eax, 0x1a4467; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000044b32: add eax, 0x1a82d9; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000044632: add eax, 0x1a87d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004459a: add eax, 0x1a8871; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041dfa: add eax, 0x1ab011; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041dba: add eax, 0x1ab051; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d72: add eax, 0x1ab099; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d40: add eax, 0x1ab0cb; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041cb2: add eax, 0x1ab159; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000041c92: add eax, 0x1ab179; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c5a: add eax, 0x1ab1b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c1a: add eax, 0x1ab1f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041bd7: add eax, 0x1ab234; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041ba1: add eax, 0x1ab26a; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041e64: add eax, 0x1ab35b; mov eax, edx; ret; 
0x00000000041e21: add eax, 0x1ab39e; ret; 
0x00000000041e11: add eax, 0x1ab3b2; ret; 
0x0000000004144a: add eax, 0x1ab9c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041412: add eax, 0x1ab9f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000413a2: add eax, 0x1aba69; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000447c2: add eax, 0x1abc4f; add rsp, 0x8; ret; 
0x00000000040af3: add eax, 0x1ac318; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000044055: add eax, 0x1ac3ae; cmp eax, 0x1; jg short 0x0000000000044080; pop rbp; ret; 
0x00000000043ff6: add eax, 0x1ac401; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret; 
0x000000000407d5: add eax, 0x1ac636; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004042c: add eax, 0x1ac9df; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000003f8b2: add eax, 0x1ad559; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003f852: add eax, 0x1ad5b9; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a9d2: add eax, 0x1b2411; add rax, fs:[0x0]; ret; 
0x0000000003a992: add eax, 0x1b2461; add rax, fs:[0x0]; ret; 
0x0000000003a9b2: add eax, 0x1b2641; add rax, fs:[0x0]; ret; 
0x0000000003a2d2: add eax, 0x1b2c29; mov [rax], rdx; ret; 
0x0000000003a312: add eax, 0x1b2c59; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039662: add eax, 0x1b3909; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x00000000037f78: add eax, 0x1b49a3; mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x000000000395f8: add eax, 0x1b6303; ret; 
0x000000000395f1: add eax, 0x1b6367; lea rax, [rip+0x1b6303]; ret; 
0x00000000036ac2: add eax, 0x1b8c79; ret; 
0x0000000002d8e2: add eax, 0x1bf529; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002d672: add eax, 0x1bf799; add rax, fs:[0x0]; ret; 
0x0000000002dec2: add eax, 0x1c1839; ret; 
0x0000000002deb2: add eax, 0x1c1841; ret; 
0x0000000002d12d: add eax, 0x1c35b6; ret; 
0x0000000003aa36: add eax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000186eb3: add eax, 0x20; add rax, rdi; ret; 
0x000000001705f3: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000001792b0: add eax, 0x21; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x00000000174545: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000100486: add eax, 0x2404c641; add [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x0000000002fcd2: add eax, 0x2444c749; cmp [rax], al; add [rax], al; add [rax+0x1], cl; ret; 
0x000000001005f0: add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000019260b: add eax, 0x27468; divss xmm0, [rip+0x2877c]; ret; 
0x00000000192613: add eax, 0x2877c; ret; 
0x000000000ac464: add eax, 0x289018b; mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x00000000123244: add eax, 0x2; mov [r8], edx; mov [r9], rax; mov eax, ecx; ret; 
0x000000000c5f98: add eax, 0x2; ret; 
0x000000001927db: add eax, 0x2aee900; idiv edi; nop [rax+rax]; ret; 
0x000000001640d4: add eax, 0x2c5850f; add [rax], al; ret; 
0x000000000388c3: add eax, 0x2e660000; nop [rax+rax]; ret; 
0x0000000017c522: add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x00000000099dab: add eax, 0x31138948; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000168485: add eax, 0x364850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000a16ef: add eax, 0x378c; cmove rax, rdx; ret; 
0x000000000c5fb1: add eax, 0x3; ret; 
0x00000000115fab: add eax, 0x3b9c0; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d6b: add eax, 0x3bc20; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e8b: add eax, 0x3e4d0; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000014a4e2: add eax, 0x3f98366; jbe short 0x000000000014a4f0; ret; 
0x00000000129172: add eax, 0x401f0fc3; add [rax-0x3f], cl; out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x000000000948aa: add eax, 0x401f0fc3; add [rax-0x77], cl; add eax, 0x158ae9; ret; 
0x000000000947aa: add eax, 0x401f0fc3; add [rax-0x77], cl; add eax, 0x158b99; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x00000000186e91: add eax, 0x40; add rax, rdi; ret; 
0x000000001705cb: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000001156a0: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x000000001793be: add eax, 0x41; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000017461e: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000008feaa: add eax, 0x448b0000; and al, 0xc; add rsp, 0x18; ret; 
0x00000000105c9d: add eax, 0x48000000; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000044921: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000044970: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x00000000112e27: add eax, 0x48020000; mov edx, eax; call qword ptr [r12+0x28]; 
0x00000000166607: add eax, 0x48054289; lea eax, [rdx+0x8]; ret; 
0x000000001622b7: add eax, 0x48054289; mov eax, edi; ret; 
0x00000000159483: add eax, 0x480e8b48; mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000b0f86: add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd6: add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x000000000af946: add eax, 0x480f8948; mov [rdi+0x5], edx; ret; 
0x000000000b3a06: add eax, 0x480f8948; mov [rdi+0x5], edx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x0000000017bcfb: add eax, 0x487c5162; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017c280: add eax, 0x487cf162; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x00000000127573: add eax, 0x48c48348; pop rbx; pop rbp; ret; 
0x0000000016412a: add eax, 0x49f88948; sub eax, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x000000001641ac: add eax, 0x49f88948; sub eax, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x00000000145811: add eax, 0x4; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000b53b3: add eax, 0x4; test edx, edx; jne short 0x00000000000b53a8; xor eax, eax; ret; 
0x000000000c9106: add eax, 0x4a3d0348; ret; 
0x0000000002d119: add eax, 0x53552; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x00000000166688: add eax, 0x5428948; lea rax, [rdx+0xc]; ret; 
0x000000001622f8: add eax, 0x5428948; mov rax, rdi; ret; 
0x000000001640d0: add eax, 0x54a8d48; jne 0x00000000001643a0; ret; 
0x00000000168481: add eax, 0x54a8d48; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b014a: add eax, 0x57f8d48; jne 0x00000000000b0980; ret; 
0x000000000b17fe: add eax, 0x57f8d48; jne 0x00000000000b21a0; ret; 
0x0000000009c015: add eax, 0x5946; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000000f4c6a: add eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x0000000011c67b: add eax, 0x5bf08948; ret; 
0x00000000098ccb: add eax, 0x5c415d5b; ret; 
0x00000000192839: add eax, 0x5cf06; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000192c5e: add eax, 0x5cf19; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000000f4b98: add eax, 0x5d000000; pop r12; ret; 
0x00000000142f3f: add eax, 0x5d5b0000; pop r12; pop r13; ret; 
0x00000000170613: add eax, 0x60; add rax, rdi; ret; 
0x0000000017064c: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000011603f: add eax, 0x6113c; cmove rax, rdx; ret; 
0x00000000115f1f: add eax, 0x6127c; cmove rax, rdx; ret; 
0x00000000115dff: add eax, 0x6139c; cmove rax, rdx; ret; 
0x000000001160a0: add eax, 0x6182b; cmove rax, rdx; ret; 
0x0000000017935a: add eax, 0x61; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001745ca: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000192e66: add eax, 0x62541; add [rax], al; add [rax], al; ret; 
0x00000000192eba: add eax, 0x628c1; cmp eax, 0x1; jg short 0x0000000000192ee0; pop rbx; ret; 
0x00000000192f40: add eax, 0x62ebf; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000192ff7: add eax, 0x63188; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000006bb8c: add eax, 0x63480000; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000017968a: add eax, 0x63490004; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000015a1f7: add eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001930ed: add eax, 0x64152; add [rax], al; add [rax], al; pop rbx; ret; 
0x000000000b1c91: add eax, 0x66c30000; nop [rax+rax]; mov rax, rdi; ret; 
0x000000001172a5: add eax, 0x678f6; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x00000000115fdf: add eax, 0x683dc; cmove rax, rdx; ret; 
0x00000000115ebf: add eax, 0x6851c; cmove rax, rdx; ret; 
0x00000000115d9f: add eax, 0x6863c; cmove rax, rdx; ret; 
0x000000001160ed: add eax, 0x68b1e; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009b0d5: add eax, 0x68e6; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x00000000193212: add eax, 0x692cd; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001931f2: add eax, 0x692e5; add [rax], al; add [rax], al; pop rbx; ret; 
0x00000000115f7b: add eax, 0x69580; cmove rax, rdx; ret; 
0x0000000009afa5: add eax, 0x6966; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x00000000115e5b: add eax, 0x696c0; cmove rax, rdx; ret; 
0x00000000115d3b: add eax, 0x697e0; cmove rax, rdx; ret; 
0x0000000011610b: add eax, 0x69ee0; cmove rax, rdx; ret; 
0x000000000b181e: add eax, 0x6e88349; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x0000000009ab35: add eax, 0x6ed6; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000009121c: add eax, 0x70058900; rcl byte ptr [rip-0x3b7cb800], 0x8; ret; 
0x0000000011601f: add eax, 0x7048c; cmove rax, rdx; ret; 
0x00000000115eff: add eax, 0x705cc; cmove rax, rdx; ret; 
0x00000000115ddf: add eax, 0x706ec; cmove rax, rdx; ret; 
0x00000000116137: add eax, 0x70f34; cmove rax, rdx; ret; 
0x000000000d8391: add eax, 0x72f52011; cmp rdx, rax; jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x0000000013a6b7: add eax, 0x733e8; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx; 
0x00000000075639: add eax, 0x74c08566; adc [rax-0x73], ecx; adc eax, 0x1330da; add rax, rdx; ret; 
0x000000000f89cd: add eax, 0x77cf8949; sbb eax, 0x6349018b; test [rax], r8d; add rax, r13; jmp rax; 
0x0000000009d3a6: add eax, 0x78d5; cmove rax, rdx; ret; 
0x0000000009b063: add eax, 0x8098; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000012b7dd: add eax, 0x81cb6; add rdi, r8; jmp rdi; 
0x0000000012b4f9: add eax, 0x81f62; movzx edi, al; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x000000000b014e: add eax, 0x82b850f; add [rax], al; ret; 
0x000000000f65f3: add eax, 0x83480000; ret; 
0x0000000012daf9: add eax, 0x83480000; stc; add [rax-0x77], ecx; ret far; 
0x000000000f9776: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x5a], bh; syscall; 
0x000000000d7ca6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x66], bh; syscall; 
0x000000000d7cc6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x68], bh; syscall; 
0x000000000d7cb6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall; 
0x000000000d7cd6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall; 
0x000000000d7c96: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall; 
0x000000000d7ce6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x73], bh; syscall; 
0x0000000010a326: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0xea], bh; syscall; 
0x0000000016660a: add eax, 0x8428d48; ret; 
0x000000000eb3d5: add eax, 0x85450000; in al, 0x74; ret; 
0x0000000007caa0: add eax, 0x89480000; and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000149b61: add eax, 0x894c0000; loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b81: add eax, 0x894c0000; loopne 0x0000000000149bc9; pop rsp; ret; 
0x000000000a4348: add eax, 0x894d0000; ret far; 
0x00000000101bc1: add eax, 0x8; mov [rip+0xf4465], rax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b95: add eax, 0x8; mov [rip+0xf4491], rax; mov rax, r8; ret; 
0x00000000115efa: add eax, 0x8d480007; add eax, 0x705cc; cmove rax, rdx; ret; 
0x0000000009bb06: add eax, 0x8e45; cmove rax, rdx; ret; 
0x00000000190ce4: add eax, 0x94c0000; ret; 
0x0000000009c149: add eax, 0x9512; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a9: add eax, 0x95a2; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb64: add eax, 0x96e7; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x000000000b1802: add eax, 0x997850f; add [rax], al; ret; 
0x000000000b606d: add eax, 0x9be80010; clc; jmp qword ptr [rsi+0x2e]; 
0x0000000014ef72: add eax, 0x9de99; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ef52: add eax, 0x9deb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ee62: add eax, 0x9dfa9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014ec32: add eax, 0x9e1d9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec12: add eax, 0x9e1f9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebd2: add eax, 0x9e239; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebb2: add eax, 0x9e259; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb92: add eax, 0x9e279; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb72: add eax, 0x9e299; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d112: add eax, 0x9fcf9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014d062: add eax, 0x9fda9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000014c6d1: add eax, 0xa07f2; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x0000000014273e: add eax, 0xa0; pop rbx; ret; 
0x0000000014c452: add eax, 0xa0a71; jmp qword ptr [rax+0x348]; 
0x0000000014c3af: add eax, 0xa0b14; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x0000000014c2e6: add eax, 0xa0bdd; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014c2b2: add eax, 0xa0c11; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014be51: add eax, 0xa1072; call qword ptr [rax+0x360]; 
0x0000000010b20c: add eax, 0xa1e1b; mov ecx, edx; movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x0000000010af20: add eax, 0xa20bb; mov eax, [rax+rdi*4]; ret; 
0x00000000149f52: add eax, 0xa2eb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001427ae: add eax, 0xa8; pop rbx; ret; 
0x000000001431f2: add eax, 0xa9c19; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x000000001427ba: add eax, 0xaa619; pop rbx; ret; 
0x000000001426da: add eax, 0xaa751; pop rbx; ret; 
0x0000000014274a: add eax, 0xaa879; pop rbx; ret; 
0x00000000142532: add eax, 0xaa891; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000142662: add eax, 0xaa8e1; pop rbx; ret; 
0x0000000013997d: add eax, 0xae; xor ecx, ecx; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000014b3ce: add eax, 0xb171d; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000014a61c: add eax, 0xb24bb; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000014a12d: add eax, 0xb2812; cmp eax, 0x1; jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x00000000149fed: add eax, 0xb2952; cmp eax, 0x1; jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x00000000149bab: add eax, 0xb2d70; mov edx, 0x0; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000009c28b: add eax, 0xb5710; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be6b: add eax, 0xb5b10; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009c199: add eax, 0xb702; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f9: add eax, 0xb792; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bc4b: add eax, 0xb8720; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x00000000131eca: add eax, 0xbaf41; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000131e76: add eax, 0xbaf95; mov dword ptr fs:[rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x000000000c9092: add eax, 0xbe3d0348; ret; 
0x0000000018c565: add eax, 0xc0310000; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x00000000140e3f: add eax, 0xc0310000; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x0000000017a509: add eax, 0xc0310000; ret; 
0x0000000017a48a: add eax, 0xc0310000; ret; 
0x00000000083dce: add eax, 0xc0834800; add [rax+0x39], ecx; ret; 
0x000000000b5553: add eax, 0xc24a8; jne short 0x00000000000b5500; ret; 
0x000000000b664e: add eax, 0xc2a6d; jne short 0x00000000000b660b; ret; 
0x000000000c6013: add eax, 0xc3000000; nop [rax+rax]; mov rax, 0x6; ret; 
0x0000000013953a: add eax, 0xc3041; add rsp, 0x8; ret; 
0x00000000139521: add eax, 0xc305a; test eax, eax; je short 0x0000000000139530; ret; 
0x00000000129b22: add eax, 0xc3469; mov eax, [rax+0x18]; test eax, eax; jne short 0x0000000000129b30; ret; 
0x00000000138e89: add eax, 0xc3692; add rsp, 0x8; ret; 
0x000000001290db: add eax, 0xc3d30; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x000000000b509e: add eax, 0xc3e1d; jne short 0x00000000000b505b; ret; 
0x00000000128f42: add eax, 0xc40a1; mov rax, fs:[rax]; ret; 
0x0000000016668c: add eax, 0xc428d48; ret; 
0x000000000b0f8d: add eax, 0xc478d48; ret; 
0x000000000b190d: add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x00000000128667: add eax, 0xc47a4; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001285ea: add eax, 0xc4821; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000013283f: add eax, 0xc4b5b; add [rdi], cl; adc [rip+0xc5b5c], esp; call rbx; 
0x00000000127d0f: add eax, 0xc50fc; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x00000000169a3b: add eax, 0xc634f00; mov ah, [rsi+0xf]; je short 0x0000000000169a06; lea r10, [r10+r9]; jmp r10; 
0x0000000014f02f: add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; jmp r10; 
0x0000000012f9ec: add eax, 0xc78a7; jne short 0x000000000012fa06; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x0000000012f95b: add eax, 0xc7933; add ecx, ebp; ret; 
0x0000000012f11d: add eax, 0xc811e; cmp eax, 0x1; jg short 0x000000000012f140; pop rbx; ret; 
0x0000000012f0e2: add eax, 0xc8161; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x00000000133a97: add eax, 0xc8a48; add [rax], al; add [rax], al; ret; 
0x0000000012e51b: add eax, 0xc8d20; cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x0000000012e1d7: add eax, 0xc906c; test rax, rax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x000000000b55f5: add eax, 0xc95b6; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000001328d3: add eax, 0xc9bf4; cmp eax, 0x1; jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x00000000122c4b: add eax, 0xc; cmp rax, rcx; jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x000000000c9bdb: add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+0x7]; ret; 
0x0000000009d41f: add eax, 0xccdc; cmove rax, rdx; ret; 
0x000000000b1ddd: add eax, 0xd478d48; ret; 
0x0000000009ab62: add eax, 0xd4af9; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009bba3: add eax, 0xd4bb8; jne short 0x000000000009bb50; ret; 
0x00000000117fc2: add eax, 0xd4e89; add rax, fs:[0x0]; ret; 
0x0000000011778a: add eax, 0xd5681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b6662: add eax, 0xd6519; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b4f12: add eax, 0xd6c09; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f82: add eax, 0xd6e19; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b50b2: add eax, 0xd7289; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b5172: add eax, 0xd7349; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x0000000011f48e: add eax, 0xd77a5; cmp eax, 0x1; jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x000000000b5272: add eax, 0xd7c19; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000b54d3: add eax, 0xd8768; cmove rax, rdx; ret; 
0x0000000009aad7: add eax, 0xd90e4; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x0000000009aa52: add eax, 0xd9c19; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afd2: add eax, 0xd9d09; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfb2: add eax, 0xda429; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c042: add eax, 0xda749; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b102: add eax, 0xda979; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009ac02: add eax, 0xdaae9; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000009c31f: add eax, 0xdae8c; cmove rax, rdx; ret; 
0x0000000008fccc: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x0000000009beff: add eax, 0xdb28c; cmove rax, rdx; ret; 
0x0000000009bcdf: add eax, 0xdb4cc; cmove rax, rdx; ret; 
0x00000000192d30: add eax, 0xdb854800; jne short 0x0000000000192d18; pop rbx; ret; 
0x0000000009bd40: add eax, 0xdbb9b; cmove rax, rdx; ret; 
0x0000000012039c: add eax, 0xdc8c7; ret; 
0x0000000011fc60: add eax, 0xdcfeb; add rsp, 0x8; ret; 
0x000000000b024d: add eax, 0xde88349; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x0000000010c642: add eax, 0xe0881; mov eax, [rax+0x40]; ret; 
0x0000000003e154: add eax, 0xe0894c00; pop rbp; pop r12; pop r13; ret; 
0x0000000010bd19: add eax, 0xe16fe; add [rax], al; add [rax], al; ret; 
0x0000000010bcf0: add eax, 0xe1727; add [rax], al; add [rax], al; ret; 
0x0000000010bcbf: add eax, 0xe1758; add al, [rax]; add [rax], al; ret; 
0x0000000010bc99: add eax, 0xe177e; add [rax], al; add [rax], al; ret; 
0x0000000010bcb2: add eax, 0xe17a1; mov [rdi+0x10], rax; jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010b38a: add eax, 0xe1a81; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b942: add eax, 0xe1ad5; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x0000000010b911: add eax, 0xe1b06; add eax, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x0000000010b262: add eax, 0xe1ba9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b18a: add eax, 0xe1c81; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c2bf: add eax, 0xe212c; cmove rax, rdx; ret; 
0x0000000009be9f: add eax, 0xe252c; cmove rax, rdx; ret; 
0x0000000009bc7f: add eax, 0xe276c; cmove rax, rdx; ret; 
0x0000000010a392: add eax, 0xe2a79; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000009bd8d: add eax, 0xe2e8e; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000009c25b: add eax, 0xe32d0; cmove rax, rdx; ret; 
0x00000000109a52: add eax, 0xe33b9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a1a: add eax, 0xe33f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099e2: add eax, 0xe3429; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010998a: add eax, 0xe3481; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010993a: add eax, 0xe34d1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098ea: add eax, 0xe3521; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010974a: add eax, 0xe36c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009be3b: add eax, 0xe36d0; cmove rax, rdx; ret; 
0x0000000010971a: add eax, 0xe36f1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009bc1b: add eax, 0xe3910; cmove rax, rdx; ret; 
0x0000000009bdab: add eax, 0xe4250; cmove rax, rdx; ret; 
0x000000000a1702: add eax, 0xe5589; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x00000000105632: add eax, 0xe77d9; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x00000000104e5a: add eax, 0xe7fb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104cce: add eax, 0xe81cd; mov rax, [rax]; test rax, rax; je 0x0000000000104d70; call rax; 
0x00000000104b72: add eax, 0xe8329; mov rax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x000000000f6fd1: add eax, 0xe9000000; cmp edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000134478: add eax, 0xe9000000; psubb mm7, mm7; jmp qword ptr [rsi+0x66]; 
0x0000000012d8e4: add eax, 0xe9000000; ret; 
0x000000001038b2: add eax, 0xe9559; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010387d: add eax, 0xe958e; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000010386b: add eax, 0xe95a0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000192ba9: add eax, 0xe9b251e8; dec dword ptr [rax-0x7d]; ret; 
0x0000000010306f: add eax, 0xe9d9c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c2ff: add eax, 0xea1dc; cmove rax, rdx; ret; 
0x0000000010c012: add eax, 0xea2e1; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000010c002: add eax, 0xea2f1; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000102a12: add eax, 0xea3f9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000010bd73: add eax, 0xea558; jae short 0x000000000010bd86; mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000009bedf: add eax, 0xea5dc; cmove rax, rdx; ret; 
0x0000000009bcbf: add eax, 0xea81c; cmove rax, rdx; ret; 
0x0000000009bdd7: add eax, 0xeb2a4; cmove rax, rdx; ret; 
0x0000000009d432: add eax, 0xeb7e9; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x00000000100682: add eax, 0xec789; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x00000000100522: add eax, 0xec8e9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001004f2: add eax, 0xec919; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001003c2: add eax, 0xeca49; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000108eb4: add eax, 0xed2cb; add [rax], al; add [rax], al; ret; 
0x00000000108ea9: add eax, 0xed2ce; add [rax], al; add [rax], al; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000108e86: add eax, 0xed2f5; cmp eax, 0x1; jg short 0x0000000000108e98; ret; 
0x000000000ff9bc: add eax, 0xed44f; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff92c: add eax, 0xed4df; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff9d2: add eax, 0xed4f1; mov rax, [rax+0x18]; test rax, rax; je short 0x00000000000ff9e1; ret; 
0x000000000ff842: add eax, 0xed5d1; cmp byte ptr [rax], 0x0; je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x000000000ff7d2: add eax, 0xed641; cmp byte ptr [rax], 0x0; je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff142: add eax, 0xedcc9; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000009aaea: add eax, 0xede91; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x000000000fea0a: add eax, 0xee401; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe8e5: add eax, 0xee526; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe888: add eax, 0xee583; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009aef2: add eax, 0xee9c9; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x000000000fe112: add eax, 0xeecf9; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000fe0e4: add eax, 0xeed27; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001597e9: add eax, 0xef00ff2; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000fd9c2: add eax, 0xef449; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fd892: add eax, 0xef579; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000142c6d: add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000009d3c3: add eax, 0xf06d8; cmove rax, rdx; ret; 
0x0000000009af62: add eax, 0xf06f9; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b192: add eax, 0xf0789; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x000000000fc222: add eax, 0xf0be9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009b17f: add eax, 0xf18c; cmove rax, rdx; ret; 
0x0000000009bb23: add eax, 0xf1c98; cmove rax, rdx; ret; 
0x000000000b5514: add eax, 0xf1f7; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000000b54b6: add eax, 0xf2d5; cmove rax, rdx; ret; 
0x000000001032f0: add eax, 0xf2dcb; add rsp, 0x18; ret; 
0x0000000010329c: add eax, 0xf2e5f; pop r12; pop r13; ret; 
0x00000000102da8: add eax, 0xf32d3; add rsp, 0x8; ret; 
0x00000000102d51: add eax, 0xf334a; pop rbp; pop r12; pop r13; ret; 
0x00000000116da8: add eax, 0xf371a2e9; call qword ptr [rax-0x18]; 
0x000000000f967a: add eax, 0xf3791; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f95a2: add eax, 0xf3869; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x00000000102783: add eax, 0xf38e0; cmp eax, 0x1; jg short 0x00000000001027c0; pop rbp; ret; 
0x000000000f92c2: add eax, 0xf3b49; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000009aaa6: add eax, 0xf435; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x00000000101c3b: add eax, 0xf43f0; add rsp, 0x8; ret; 
0x00000000101c14: add eax, 0xf4413; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000101bc6: add eax, 0xf4465; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b9a: add eax, 0xf4491; mov rax, r8; ret; 
0x000000001014a7: add eax, 0xf4b63; and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000100a07: add eax, 0xf54d0; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000001008c2: add eax, 0xf5619; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000009aedf: add eax, 0xf71c; cmove rax, rdx; ret; 
0x000000001597f2: add eax, 0xf7f0ff3; ret; 
0x0000000009af4f: add eax, 0xf84c; cmove rax, rdx; ret; 
0x000000001177f8: add eax, 0xf9e3e2e9; call qword ptr [rax-0x18]; 
0x000000000b4f6f: add eax, 0xfbbc; cmove rax, rdx; ret; 
0x000000000b6614: add eax, 0xfbc7; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x00000000116ce4: add eax, 0xfe1296e9; call qword ptr [rax-0x18]; 
0x00000000116cd4: add eax, 0xfe12a6e9; call qword ptr [rax-0x18]; 
0x000000001177b4: add eax, 0xfe3726e9; call qword ptr [rax-0x18]; 
0x00000000116d94: add eax, 0xfe3826e9; call qword ptr [rax-0x18]; 
0x00000000116d44: add eax, 0xfe45c6e9; call qword ptr [rax-0x18]; 
0x00000000116d54: add eax, 0xfe45e6e9; call qword ptr [rax-0x18]; 
0x00000000117c68: add eax, 0xfe5d82e9; call qword ptr [rax-0x18]; 
0x00000000117c88: add eax, 0xfe5e02e9; call qword ptr [rax-0x18]; 
0x000000001177c4: add eax, 0xfe8276e9; call qword ptr [rax-0x18]; 
0x000000001177d4: add eax, 0xfe8396e9; call qword ptr [rax-0x18]; 
0x0000000010c8ac: add eax, 0xff89000e; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000010c81c: add eax, 0xff89000e; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x000000000ed562: add eax, 0xff8c1; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000f9309: add eax, 0xfff0003d; push qword ptr [rdi+0x7]; xor eax, eax; ret; 
0x0000000008aa54: add eax, 0xfff0003d; push qword ptr [rsi+0x4]; neg eax; ret; 
0x0000000008aa0f: add eax, 0xfff0003d; push qword ptr [rsi+0x9]; neg eax; ret; 
0x00000000117289: add eax, 0xfff9d802; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x00000000115fff: add eax, 0xfff9e4cc; cmove rax, rdx; ret; 
0x00000000115edf: add eax, 0xfff9e60c; cmove rax, rdx; ret; 
0x00000000115dbf: add eax, 0xfff9e72c; cmove rax, rdx; ret; 
0x000000001160bb: add eax, 0xfff9ea00; cmovne rax, rdx; ret; 
0x0000000008a359: add eax, 0xfffc41e9; call qword ptr [rax+0x2444894c]; 
0x0000000014b3e4: add eax, 0xfffef6e9; call qword ptr [rax-0x18]; 
0x00000000141e53: add eax, 0xffff86d8; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x00000000149f74: add eax, 0xffff96e9; call qword ptr [rax-0x18]; 
0x0000000006ecf5: add eax, 0xfffff0b1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000b55d9: add eax, 0xfffff4c2; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x00000000073b97: add eax, 0xfffff4e1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000c74c2: add eax, 0xfffffee9; ret; 
0x000000000c74b2: add eax, 0xfffffef9; add rsp, 0x58; ret; 
0x000000000c73a2: add eax, 0xfffffef9; ret; 
0x000000000c7392: add eax, 0xffffff09; add rsp, 0x58; ret; 
0x000000000f2f69: add eax, [0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x00000000131f59: add eax, [0x0]; mov rcx, r15; call rbp; 
0x0000000002d679: add eax, [0x0]; ret; 
0x00000000179886: add eax, [rax+rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000c4817: add eax, [rax]; add [rax+0x1], cl; clc; add rax, rcx; ret; 
0x00000000070f12: add eax, [rax]; add [rax+0x29], cl; ret; 
0x000000000548ba: add eax, [rax]; add [rax+0x39], cl; ret; 
0x00000000091527: add eax, [rax]; add [rax-0x15], al; ret; 
0x000000000cbdb3: add eax, [rax]; add [rax-0x41], cl; ret; 
0x000000001032eb: add eax, [rax]; add [rax-0x73], cl; add eax, 0xf2dcb; add rsp, 0x18; ret; 
0x00000000085ca4: add eax, [rax]; add [rax-0x75], cl; push rbx; and [rcx+0x52], al; call rax; 
0x0000000014c402: add eax, [rax]; add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret; 
0x0000000014c6dd: add eax, [rax]; add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret; 
0x0000000014c74f: add eax, [rax]; add [rax-0x77], cl; ret; 
0x0000000014c3b9: add eax, [rax]; add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret; 
0x000000000f91a8: add eax, [rax]; add [rax-0x7b], cl; shl byte ptr [rax+rsi+0x31], 0xd2; call rax; 
0x000000001683f2: add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000096257: add eax, [rax]; add [rax-0x7d], cl; ret far; 
0x0000000005ef37: add eax, [rax]; add [rax-0x7d], cl; ret; 
0x00000000091dcf: add eax, [rax]; add [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000009195a: add eax, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x000000000d2113: add eax, [rax]; add [rax], al; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000121af6: add eax, [rax]; add [rax], al; mov edi, [rbp-0x50]; syscall; 
0x000000000829c1: add eax, [rax]; add [rax], al; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000142bed: add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000013c215: add eax, [rax]; add [rax], al; pop rbx; ret; 
0x00000000088081: add eax, [rax]; add [rax], al; ret; 
0x00000000093aa1: add eax, [rax]; add [rax], al; syscall; 
0x0000000006e2b1: add eax, [rax]; add [rbp+0x31], al; imul al; ret far; 
0x000000000bb54a: add eax, [rax]; add [rbp+0x6348ff43], cl; ret far; 
0x00000000086da2: add eax, [rax]; add [rbp-0x1f], dh; pop rbx; ret; 
0x0000000018f820: add eax, [rax]; add [rbp-0x73], cl; push rcx; dec byte ptr [rax-0x77]; ret far; 
0x0000000017385f: add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016b358: add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000014c373: add eax, [rax]; add [rbx+0x480c2444], cl; add esp, 0x30; pop rbx; ret; 
0x0000000004d5d2: add eax, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000008a94a: add eax, [rax]; add [rbx+0x67510e0], al; ret; 
0x000000000dc1f6: add eax, [rax]; add [rbx-0x7bf0a201], al; add al, 0x0; add [rbx-0x6bf0a301], al; ret; 
0x0000000008d161: add eax, [rax]; add [rcx+0x39], al; ret; 
0x0000000014b7c1: add eax, [rax]; add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x0000000018f919: add eax, [rax]; add [rcx-0x7d], al; ret far; 
0x0000000007cd7e: add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x000000000815c7: add eax, [rax]; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x00000000117c44: add eax, [rax]; add [rdi+0x8], dh; mov rax, rdi; sar rax, 0x6; ret; 
0x0000000014c3fa: add eax, [rax]; add [rdx+0x2], ch; call qword ptr [rax+0x338]; 
0x00000000111d56: add eax, [rax]; add [rdx], al; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000014c43b: add eax, [rax]; add [rdx], ch; call qword ptr [rax+0x338]; 
0x0000000014c4b4: add eax, [rax]; add bh, bh; push rax; add rsp, 0x28; ret; 
0x0000000008587f: add eax, [rax]; add bl, ch; ret far; 
0x0000000005bbd3: add eax, [rax]; add rsp, 0x1000; pop rbp; ret; 
0x0000000004d82a: add eax, [rax]; add rsp, 0x10; pop rbx; ret; 
0x00000000115fae: add eax, [rax]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d6e: add eax, [rax]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e8e: add eax, [rax]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000015e611: add eax, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000017aa88: add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d9f: add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000124921: add eax, [rax]; pop rbx; ret; 
0x0000000003afa6: add eax, [rbx+0x27770af8]; lea rdx, [rip+0x167fad]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000088937: add eax, [rbx+0x37402fa]; ret; 
0x0000000007b9bd: add eax, [rbx+rcx*4]; mov eax, r8d; ret; 
0x0000000013a76a: add eax, [rbx-0x1d7c0320]; cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x00000000164099: add eax, [rbx]; add [rax], al; ret; 
0x000000000b3f2e: add eax, [rcx+rcx*8+0x31c3ed75]; rol bl, 0x48; mov eax, edi; ret; 
0x0000000010d061: add eax, [rcx+rdx]; ret; 
0x000000000f964b: add eax, [rcx]; add [rax], al; syscall; 
0x0000000002d2ad: add eax, [rdi]; call rax; 
0x000000000c7371: add eax, [rdx+0x8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7491: add eax, [rdx+0x8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000010ce99: add eax, [rdx+rcx]; ret; 
0x00000000164199: add eax, [rdx]; add [rax], al; ret; 
0x000000000d7278: add eax, [rip+0x11e532]; mov rax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x0000000015a439: add eax, [rip+0x63490006]; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a377: add eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010057e: add eax, [rsp+0x38]; add rsp, 0x48; ret; 
0x0000000010b218: add eax, eax; jmp rax; 
0x000000000584e0: add eax, eax; mov eax, r8d; ret; 
0x000000000e07a8: add eax, eax; pop rbx; pop rbp; ret; 
0x00000000186fa4: add eax, eax; ret; 
0x000000001706f5: add eax, eax; vzeroupper; ret; 
0x000000000f89db: add eax, ebp; jmp rax; 
0x0000000006228f: add eax, ebp; ret far; 
0x000000000e9e9e: add eax, ebx; jmp rax; 
0x0000000017c503: add eax, ebx; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x00000000164274: add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000000af8e9: add eax, ebx; nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000c5fb3: add eax, ebx; nop [rax+rax]; xor rax, rax; ret; 
0x000000001236af: add eax, ecx; cmovs eax, edx; ret; 
0x0000000005c6c6: add eax, ecx; jmp rax; 
0x000000000a49d9: add eax, ecx; ret; 
0x0000000016f35e: add eax, ecx; sub rax, rdi; ret; 
0x00000000131c2e: add eax, ecx; sub rdx, 0x1; jne short 0x0000000000131bb8; ret; 
0x000000001702be: add eax, ecx; vzeroupper; ret; 
0x0000000018017e: add eax, ecx; xtest; je short 0x0000000000180189; vzeroall; ret; 
0x00000000186fa1: add eax, edi; add rax, r8; ret; 
0x000000001706f2: add eax, edi; add rax, r8; vzeroupper; ret; 
0x000000000a49d6: add eax, edi; add rax, rcx; ret; 
0x000000000a51fa: add eax, edi; add rax, rsi; ret; 
0x000000001889c8: add eax, edi; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x0000000005d2d6: add eax, edi; jmp rax; 
0x000000000a14a6: add eax, edi; mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a14c5: add eax, edi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a14dd: add eax, edi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; ret; 
0x00000000073c8e: add eax, edi; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000731a5: add eax, edi; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000739cf: add eax, edi; mov r12d, 0x1; jmp rax; 
0x000000000a1479: add eax, edi; ret; 
0x00000000178f08: add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x0000000017902f: add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x0000000016fff7: add eax, edi; vzeroupper; ret; 
0x0000000017ee2a: add eax, edi; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017fd07: add eax, edi; xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x0000000018568d: add eax, edi; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x0000000002d78c: add eax, edx; jmp rax; 
0x000000000c772e: add eax, edx; mov [rdi+0x20], rax; ret; 
0x000000001862c9: add eax, edx; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001862e4: add eax, edx; movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000186304: add eax, edx; movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000075647: add eax, edx; ret; 
0x000000000aa796: add eax, edx; sub rax, rdi; ret; 
0x000000000c61d6: add eax, edx; sub rax, rdi; shr rax, 0x2; ret; 
0x00000000174040: add eax, edx; vzeroupper; ret; 
0x00000000180b80: add eax, edx; xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x0000000008b3a4: add eax, esi; cmpxchg [rdi], rdx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x0000000005d092: add eax, esi; jmp rax; 
0x0000000006e8c6: add eax, esi; mov r13d, 0x1; jmp rax; 
0x000000000a51fd: add eax, esi; ret; 
0x0000000018a452: add eax, esi; xchg [rax], eax; ret; 
0x000000000f5ba9: add eax, esp; jmp rax; 
0x00000000168488: add eax, fs:[rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000013bdaf: add ebp, eax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x000000001446c2: add ebp, ebx; call rbp; 
0x00000000083a86: add ebp, ebx; ret far; 
0x000000000f8fdb: add ebp, ecx; ja short 0x00000000000f9012; jmp qword ptr [rsi+0x2e]; 
0x000000000d1bf3: add ebp, ecx; ret far; 
0x0000000013b759: add ebp, edx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x000000000865f7: add ebp, edx; xor eax, eax; ret; 
0x000000000f2f60: add ebx, [0x0]; add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x0000000014c6e2: add ebx, [rax+0x5a]; pop rbx; ret; 
0x00000000087a73: add ebx, [rbx+0x31]; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000083b0e: add ebx, [rbx+0x5d]; pop r12; ret; 
0x0000000014265c: add ebx, [rbx-0x3d]; nop; mov rax, [rip+0xaa8e1]; pop rbx; ret; 
0x0000000007e45e: add ebx, eax; mov rax, [rip+0x16e9a9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000010c00e: add ebx, eax; mov rax, [rip+0xea2e1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x000000000c5fa3: add ebx, eax; nop [rax+rax]; add rax, 0x3; ret; 
0x0000000017c4e3: add ebx, eax; nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x00000000122f63: add ebx, eax; nop [rax]; mov eax, 0x2; ret; 
0x0000000010c01d: add ebx, eax; nop; ret; 
0x000000000507bd: add ebx, eax; nop; xor eax, eax; ret; 
0x000000001155cc: add ebx, eax; xchg ax, ax; xor eax, eax; ret; 
0x00000000109c1f: add ebx, eax; xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x00000000108fc8: add ebx, eax; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x0000000011c68b: add ebx, ebp; fwait; xor eax, eax; ret; 
0x00000000075ac5: add ebx, ebp; ret; 
0x0000000003ee4d: add ebx, edi; jmp r11; 
0x000000001599b3: add ebx, esi; movq [rdi], mm1; ret; 
0x000000000f84e2: add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000014bcd8: add ecx, 0x180; mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x000000001285d4: add ecx, 0x1; sub rcx, r9; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x0000000006c54a: add ecx, 0x8; add [rax], al; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000501ec: add ecx, 0x8; cmp r11d, eax; jne short 0x00000000000501b0; ret; 
0x000000000ac4aa: add ecx, [r9-0x76b7fcbe]; clc; ret; 
0x00000000031082: add ecx, [rax+0x39]; ret; 
0x0000000003104d: add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret; 
0x0000000009c152: add ecx, [rax+rax]; cmovne rax, rdx; ret; 
0x00000000192dff: add ecx, [rax-0x73]; insb [rdi], dx; ret; 
0x000000000b010c: add ecx, [rax-0x73]; jg short 0x00000000000b0114; jne 0x00000000000b0980; ret; 
0x000000000b17c0: add ecx, [rax-0x73]; jg short 0x00000000000b17c8; jne 0x00000000000b21a0; ret; 
0x00000000175f7d: add ecx, [rax-0x73]; jg short 0x0000000000175f85; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cb1: add ecx, [rax-0x73]; jg short 0x0000000000176cb9; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d41: add ecx, [rax-0x73]; jg short 0x0000000000187d49; jne 0x0000000000187ff0; ret; 
0x0000000018b1ad: add ecx, [rax-0x73]; jg short 0x000000000018b1b5; jne 0x000000000018b420; ret; 
0x0000000011e63e: add ecx, [rax-0x75]; or [r8-0x7d], r9b; ret; 
0x000000000ac4ad: add ecx, [rax-0x77]; clc; ret; 
0x000000000dc271: add ecx, [rax-0x77]; fisttp qword ptr [rax-0x7d], st; ret; 
0x0000000013a868: add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000121eb3: add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x000000000db783: add ecx, [rax-0x7d]; ret; 
0x00000000159722: add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret; 
0x00000000100cb8: add ecx, [rbx]; add al, ch; shl byte ptr [rbx+0x148fff2], 0x1; ret; 
0x000000000b0ef4: add ecx, [rcx+0x357890f]; lea rax, [rdi+0x6]; ret; 
0x000000000b1d34: add ecx, [rcx+0x357890f]; lea rax, [rdi+0x7]; ret; 
0x000000000af8e4: add ecx, [rcx+0x357890f]; ret; 
0x000000000b0184: add ecx, [rcx+0x357890f]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b3964: add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x0000000002fe51: add ecx, [rcx+0x39]; ret; 
0x00000000128ba2: add ecx, [rcx-0x5ab70c2f]; add rsp, 0x188; ret; 
0x000000000ac4ab: add ecx, [rcx-0x76b7fcbe]; clc; ret; 
0x0000000004e87f: add ecx, [rcx-0x7d]; ret; 
0x0000000018b1b1: add ecx, [rdi]; test [rax+0x2], ebp; add [rax], al; ret; 
0x00000000175f81: add ecx, [rdi]; test [rax+0x2], ebx; add [rax], al; vzeroupper; ret; 
0x000000000b0110: add ecx, [rdi]; test [rcx+0x8], ebp; add [rax], al; ret; 
0x00000000168437: add ecx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000fc7e4: add ecx, [rdi]; xchg esp, eax; ret; 
0x000000000ed202: add ecx, eax; jmp rcx; 
0x00000000123489: add ecx, eax; loopne 0x0000000000123490; shr rax, 0x4; and eax, 0x7f; ret; 
0x000000001892c3: add ecx, eax; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x000000000bea3a: add ecx, ebp; ret far; 
0x00000000075a3d: add ecx, ebp; ret; 
0x000000001519bb: add ecx, ebx; jmp r9; 
0x00000000179452: add ecx, ebx; jmp rcx; 
0x0000000010375c: add ecx, ebx; ret; 
0x0000000018f441: add ecx, ecx; jmp rcx; 
0x0000000014448b: add ecx, ecx; movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x00000000115718: add ecx, ecx; sbb eax, 0x0; ret; 
0x000000000389bd: add ecx, edi; jmp rcx; 
0x0000000006bb94: add ecx, edx; jmp rcx; 
0x0000000006494c: add ecx, esi; jmp rcx; 
0x0000000013e6cd: add edi, 0x10; jmp rcx; 
0x000000000b345d: add edi, 0x10; lea r11, [rip+0xf6fad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2add: add edi, 0x10; lea r11, [rip+0xf78ad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2226: add edi, 0x10; lea r11, [rip+0xf8120]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2207: add edi, 0x10; lea r11, [rip+0xf813f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e2d: add edi, 0x10; lea r11, [rip+0xf937d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a06: add edi, 0x10; lea r11, [rip+0xf9760]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b09e7: add edi, 0x10; lea r11, [rip+0xf977f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af82d: add edi, 0x10; lea r11, [rip+0xfa7a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000093eab: add edi, 0x1; mov eax, 0xf0; syscall; 
0x00000000094106: add edi, 0x1; mov eax, 0xf1; syscall; 
0x000000000db426: add edi, 0x1; test al, al; jne short 0x00000000000db3f9; xor eax, eax; ret; 
0x000000000b3492: add edi, 0x20; lea r11, [rip+0xf6f78]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b12: add edi, 0x20; lea r11, [rip+0xf7878]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e62: add edi, 0x20; lea r11, [rip+0xf9348]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af862: add edi, 0x20; lea r11, [rip+0xfa774]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000178f26: add edi, 0x21; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174266: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000170065: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000013adeb: add edi, 0x23b0; pop rbp; jmp rcx; 
0x0000000010133d: add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000b3350: add edi, 0x30; lea r11, [rip+0xf70ba]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b29df: add edi, 0x30; lea r11, [rip+0xf79ab]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d2f: add edi, 0x30; lea r11, [rip+0xf947b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af72f: add edi, 0x30; lea r11, [rip+0xfa8a7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000178f46: add edi, 0x41; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174276: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000170075: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000070c34: add edi, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000140b24: add edi, 0x58; jmp rcx; 
0x00000000178f66: add edi, 0x61; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174286: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000170085: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000140294: add edi, 0x68; jmp rcx; 
0x0000000002d2f6: add edi, 0x8; mov [rsp+0x8], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000013dba7: add edi, 0xc8; jmp rcx; 
0x00000000173ff5: add edi, 0xffffff80; add rax, rdi; vzeroupper; ret; 
0x000000001276fc: add edi, [rax+0x1]; add rsp, 0x10; pop rbx; ret; 
0x0000000009a49e: add edi, [rax+0x1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000127aee: add edi, [rax+0x1]; ret; 
0x00000000122f57: add edi, [rax+0x2]; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x00000000127ae5: add edi, [rsi+0x30]; mov eax, [rsp-0x4]; mov [r11], eax; mov eax, 0x1; ret; 
0x00000000042a31: add edi, [rsp]; mov rdi, r12; call rcx; 
0x00000000042300: add edi, [rsp]; mov rsi, r15; call r14; 
0x00000000044afa: add edi, eax; cmp rdi, r8; jb short 0x0000000000044add; xor eax, eax; ret; 
0x0000000012b7e3: add edi, eax; jmp rdi; 
0x00000000056fee: add edi, eax; xchg r12d, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x0000000018cbf6: add edi, ebp; ret; 
0x0000000010970d: add edi, ebp; xor eax, eax; ret; 
0x00000000192674: add edi, ebx; call r12; 
0x0000000018b6e6: add edi, ebx; ret; 
0x0000000015b039: add edi, ecx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa39: add edi, edi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000008fb7b: add edi, edi; jmp qword ptr [rsi-0x70]; 
0x000000000945ac: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x00000000094559: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x00000000094509: add edi, edi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x000000001519b8: add edi, edx; add r9, r11; jmp r9; 
0x0000000003ec07: add edi, edx; jmp rdi; 
0x0000000017b4d1: add edi, edx; lea r11, [rip+0x3e866]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b457: add edi, edx; lea r11, [rip+0x3e8e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3c8: add edi, edx; lea r11, [rip+0x3e96f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1bd: add edi, edx; lea r11, [rip+0x3eb7a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08b: add edi, edx; lea r11, [rip+0x3ecac]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc5: add edi, edx; lea r11, [rip+0x3ed72]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af47: add edi, edx; lea r11, [rip+0x3edf0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeb0: add edi, edx; lea r11, [rip+0x3ee87]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb4: add edi, edx; lea r11, [rip+0x3f083]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab83: add edi, edx; lea r11, [rip+0x3f1b4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa82: add edi, edx; lea r11, [rip+0x3f2b5]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea1: add edi, edx; lea r11, [rip+0x3fd56]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e27: add edi, edx; lea r11, [rip+0x3fdd0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d98: add edi, edx; lea r11, [rip+0x3fe5f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179b8d: add edi, edx; lea r11, [rip+0x4006a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5b: add edi, edx; lea r11, [rip+0x4019c]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179995: add edi, edx; lea r11, [rip+0x40262]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179917: add edi, edx; lea r11, [rip+0x402e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179880: add edi, edx; lea r11, [rip+0x40377]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179684: add edi, edx; lea r11, [rip+0x40573]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179553: add edi, edx; lea r11, [rip+0x406a4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179444: add edi, edx; lea r11, [rip+0x407b3]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000015b41c: add edi, edx; lea r11, [rip+0x5f51b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b77: add edi, edx; lea r11, [rip+0x60dc0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1b: add edi, edx; lea r11, [rip+0x60f1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158928: add edi, edx; lea r11, [rip+0x61b0f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d1a: add edi, edx; lea r11, [rip+0x6331d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157097: add edi, edx; lea r11, [rip+0x633a0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f25: add edi, edx; lea r11, [rip+0x63512]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457b: add edi, edx; lea r11, [rip+0x65abc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544b6: add edi, edx; lea r11, [rip+0x65b81]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151bab: add edi, edx; lea r11, [rip+0x682cc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ae6: add edi, edx; lea r11, [rip+0x68391]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000018cc06: add edi, esi; ret; 
0x00000000139ff0: add edi, esp; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x0000000018cbe6: add edi, esp; ret; 
0x0000000018b6e5: add edi, r11d; ret; 
0x0000000018cbe5: add edi, r12d; ret; 
0x0000000018cbf5: add edi, r13d; ret; 
0x0000000018cc05: add edi, r14d; ret; 
0x0000000008b34e: add edx, 0x10; cmp rcx, 0x400; jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x0000000008b3a2: add edx, 0x1; lock cmpxchg [rdi], rdx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x0000000012b0f3: add edx, 0x1; rol dx, 0x8; mov [rsi+0xa], dx; ret; 
0x0000000012756f: add edx, 0x1; syscall; 
0x00000000044607: add edx, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret; 
0x00000000084aea: add edx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x0000000012333b: add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000014c518: add edx, [rax+0x8]; mov rax, rdx; add rsp, 0x28; ret; 
0x0000000014c657: add edx, [rax+0x8]; mov rax, rdx; add rsp, 0x48; ret; 
0x0000000003f83f: add edx, [rdi+0x20]; mov rax, r10; ret; 
0x0000000010af61: add edx, eax; cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x00000000170572: add edx, eax; jl 0x0000000000170660; add rax, rdi; vzeroupper; ret; 
0x00000000186e89: add edx, eax; jl 0x0000000000186f20; add eax, 0x40; add rax, rdi; ret; 
0x00000000186e3e: add edx, eax; jl 0x0000000000186f20; add rax, rdi; ret; 
0x000000000a5108: add edx, eax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x000000000a5118: add edx, eax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a5138: add edx, eax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a5158: add edx, eax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x30]; ret; 
0x00000000186ee8: add edx, eax; jl short 0x0000000000186f20; add eax, 0x20; add rax, rdi; ret; 
0x00000000186f08: add edx, eax; jl short 0x0000000000186f20; add eax, 0x60; add rax, rdi; ret; 
0x000000000a15e7: add edx, eax; jmp rdx; 
0x000000001232ec: add edx, eax; mov eax, edx; mov [r9], r10; ret; 
0x00000000051362: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000cb763: add edx, ebx; jmp rdx; 
0x0000000004e2ac: add edx, ecx; jmp rdx; 
0x000000000501c0: add edx, edi; cmp esi, 0x2f; jmp rdx; 
0x000000000a153a: add edx, edi; jmp rdx; 
0x0000000010b610: add edx, edx; mov eax, 0x14; syscall; 
0x000000000cd56a: add edx, esi; jmp rdx; 
0x0000000006bb28: add edx, esp; call qword ptr [r10+rax*8]; 
0x0000000008e91e: add esi, 0x1; syscall; 
0x0000000013f6d5: add esi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000006bb1c: add esi, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x000000000f8fb0: add esi, 0x8; cmp rsi, rdi; jne short 0x00000000000f8f90; mov eax, r8d; ret; 
0x000000000b3969: add esi, [rax]; in eax, dx; mov [rdi+0x7], ch; ret; 
0x00000000141cf3: add esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; cmp [rbx+0x5d], bl; ret; 
0x0000000012352b: add esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x0000000014a4cc: add esi, [rdi+0x11]; cmp dx, cx; sete al; ret; 
0x00000000088526: add esi, [rdi+rsi+0x45]; xor edx, edx; mov eax, r8d; syscall; 
0x0000000014a4e6: add esi, [rsi+0x7]; ret; 
0x0000000013ab1b: add esi, [rsi+0xa]; mov eax, 0x2; ret; 
0x00000000100ace: add esi, eax; call far fword ptr [rax+r8*4+0x39]; 
0x0000000013b4af: add esi, eax; cmp rsi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000004e393: add esi, eax; jmp qword ptr [rax]; 
0x0000000012b506: add esi, eax; jmp rsi; 
0x00000000145786: add esi, eax; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000df319: add esi, eax; or [r9], r8b; mov [rdi], al; mov eax, 0x1; ret; 
0x00000000109738: add esi, ebp; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x00000000042439: add esi, ebp; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000fbf86: add esi, ebx; jmp qword ptr [rbp+rax*2-0x77]; 
0x000000001598d3: add esi, ebx; movq [rdi], mm1; ret; 
0x000000001233da: add esi, ebx; movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000b44ba: add esi, ebx; movsb [rdi], [rsi]; ret; 
0x0000000014bce3: add esi, ebx; movsq [rdi], [rsi]; ret; 
0x000000000f84ea: add esi, ebx; stosq [rdi]; ret; 
0x000000000b35ba: add esi, ecx; lea r11, [rip+0xf6ed1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b359a: add esi, ecx; lea r11, [rip+0xf6ef1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3571: add esi, ecx; lea r11, [rip+0xf6f1a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b172a: add esi, ecx; lea r11, [rip+0xf8b8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b170a: add esi, ecx; lea r11, [rip+0xf8bad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16e1: add esi, ecx; lea r11, [rip+0xf8bd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b007a: add esi, ecx; lea r11, [rip+0xfa05d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b005a: add esi, ecx; lea r11, [rip+0xfa07d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0031: add esi, ecx; lea r11, [rip+0xfa0a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000017b88c: add esi, edi; fadd st, st(3); ret; 
0x000000000cfb47: add esi, edi; jmp rsi; 
0x000000001519b5: add esi, edx; add rdi, rdx; add r9, r11; jmp r9; 
0x0000000017ee2d: add esi, edx; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017f13f: add esi, edx; je short 0x000000000017f147; vzeroall; ret; 
0x0000000017f558: add esi, edx; je short 0x000000000017f560; vzeroall; ret; 
0x0000000017fd0a: add esi, edx; je short 0x000000000017fd12; vzeroall; ret; 
0x00000000180058: add esi, edx; je short 0x0000000000180060; vzeroall; ret; 
0x00000000180181: add esi, edx; je short 0x0000000000180189; vzeroall; ret; 
0x0000000018050e: add esi, edx; je short 0x0000000000180516; vzeroall; ret; 
0x00000000180561: add esi, edx; je short 0x0000000000180569; vzeroall; ret; 
0x00000000180b83: add esi, edx; je short 0x0000000000180b8b; vzeroall; ret; 
0x00000000180e0c: add esi, edx; je short 0x0000000000180e14; vzeroall; ret; 
0x0000000018128f: add esi, edx; je short 0x0000000000181297; vzeroall; ret; 
0x00000000181e69: add esi, edx; je short 0x0000000000181e71; vzeroall; ret; 
0x00000000182219: add esi, edx; je short 0x0000000000182221; vzeroall; ret; 
0x000000001824bf: add esi, edx; je short 0x00000000001824c7; vzeroall; ret; 
0x00000000182ad9: add esi, edx; je short 0x0000000000182ae1; vzeroall; ret; 
0x00000000182f71: add esi, edx; je short 0x0000000000182f79; vzeroall; ret; 
0x00000000183787: add esi, edx; je short 0x000000000018378f; vzeroall; ret; 
0x0000000018408a: add esi, edx; je short 0x0000000000184092; vzeroall; ret; 
0x000000001841fa: add esi, edx; je short 0x0000000000184202; vzeroall; ret; 
0x000000001844fd: add esi, edx; je short 0x0000000000184505; vzeroall; ret; 
0x0000000018455e: add esi, edx; je short 0x0000000000184566; vzeroall; ret; 
0x00000000184b42: add esi, edx; je short 0x0000000000184b4a; vzeroall; ret; 
0x00000000184bbe: add esi, edx; je short 0x0000000000184bc6; vzeroall; ret; 
0x000000001853cd: add esi, edx; je short 0x00000000001853d5; vzeroall; ret; 
0x0000000018554f: add esi, edx; je short 0x0000000000185557; vzeroall; ret; 
0x00000000185690: add esi, edx; je short 0x0000000000185698; vzeroall; ret; 
0x000000001859d4: add esi, edx; je short 0x00000000001859dc; vzeroall; ret; 
0x0000000015b1b4: add esi, edx; lea r11, [rip+0x5f783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b034: add esi, edx; lea r11, [rip+0x5f903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aeb4: add esi, edx; lea r11, [rip+0x5fa83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ad35: add esi, edx; lea r11, [rip+0x5fc02]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015abb4: add esi, edx; lea r11, [rip+0x5fd83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa34: add esi, edx; lea r11, [rip+0x5ff03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a8b4: add esi, edx; lea r11, [rip+0x60083]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a734: add esi, edx; lea r11, [rip+0x60203]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a5b4: add esi, edx; lea r11, [rip+0x60383]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a434: add esi, edx; lea r11, [rip+0x60503]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b4: add esi, edx; lea r11, [rip+0x60683]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a134: add esi, edx; lea r11, [rip+0x60803]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159fb4: add esi, edx; lea r11, [rip+0x60983]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159e34: add esi, edx; lea r11, [rip+0x60b03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159cb4: add esi, edx; lea r11, [rip+0x60c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001586d4: add esi, edx; lea r11, [rip+0x61d63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158554: add esi, edx; lea r11, [rip+0x61ee3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001583d4: add esi, edx; lea r11, [rip+0x62063]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158255: add esi, edx; lea r11, [rip+0x621e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001580d4: add esi, edx; lea r11, [rip+0x62363]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157f54: add esi, edx; lea r11, [rip+0x624e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157dd4: add esi, edx; lea r11, [rip+0x62663]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157c54: add esi, edx; lea r11, [rip+0x627e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157ad4: add esi, edx; lea r11, [rip+0x62963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157954: add esi, edx; lea r11, [rip+0x62ae3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001577d4: add esi, edx; lea r11, [rip+0x62c63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157654: add esi, edx; lea r11, [rip+0x62de3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001574d4: add esi, edx; lea r11, [rip+0x62f63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157354: add esi, edx; lea r11, [rip+0x630e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001571d4: add esi, edx; lea r11, [rip+0x63263]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155b90: add esi, edx; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155a40: add esi, edx; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001558f0: add esi, edx; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001557a0: add esi, edx; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155650: add esi, edx; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155500: add esi, edx; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001553b0: add esi, edx; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155110: add esi, edx; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154fc0: add esi, edx; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154e70: add esi, edx; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154d20: add esi, edx; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154bd0: add esi, edx; lea r11, [rip+0x65467]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154a80: add esi, edx; lea r11, [rip+0x655b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154930: add esi, edx; lea r11, [rip+0x65707]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015466a: add esi, edx; lea r11, [rip+0x659cd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001531c0: add esi, edx; lea r11, [rip+0x66cb7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153070: add esi, edx; lea r11, [rip+0x66e07]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152f20: add esi, edx; lea r11, [rip+0x66f57]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152dd0: add esi, edx; lea r11, [rip+0x670a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152c80: add esi, edx; lea r11, [rip+0x671f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b30: add esi, edx; lea r11, [rip+0x67347]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001529e0: add esi, edx; lea r11, [rip+0x67497]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152740: add esi, edx; lea r11, [rip+0x67737]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001525f0: add esi, edx; lea r11, [rip+0x67887]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001524a0: add esi, edx; lea r11, [rip+0x679d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152350: add esi, edx; lea r11, [rip+0x67b27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152200: add esi, edx; lea r11, [rip+0x67c77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001520b0: add esi, edx; lea r11, [rip+0x67dc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f60: add esi, edx; lea r11, [rip+0x67f17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151c9a: add esi, edx; lea r11, [rip+0x681dd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000013bc80: add esi, edx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x000000000e0864: add esi, esi; ret; 
0x0000000005bbd6: add esp, 0x1000; pop rbp; ret; 
0x0000000005bbe1: add esp, 0x1000; xor eax, eax; pop rbp; ret; 
0x0000000005ba1e: add esp, 0x1008; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000128d92: add esp, 0x100; movzx eax, al; pop rbp; ret; 
0x00000000128ec6: add esp, 0x100; movzx eax, al; pop rbx; ret; 
0x00000000128e23: add esp, 0x100; pop rbp; ret; 
0x00000000141fcc: add esp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x00000000128eb6: add esp, 0x100; pop rbx; ret; 
0x000000000b42bd: add esp, 0x100; sub rax, rdx; ret; 
0x00000000128da1: add esp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000b435d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000128f25: add esp, 0x108; not eax; shr eax, 0x1f; ret; 
0x000000000417dd: add esp, 0x108; ret; 
0x00000000144a81: add esp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x00000000131fbe: add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000f9155: add esp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000014a053: add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000943b2: add esp, 0x10; mov eax, r8d; pop rbx; ret; 
0x00000000091de7: add esp, 0x10; movzx eax, al; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807d6: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000009a2f1: add esp, 0x10; pop r12; ret; 
0x00000000144a73: add esp, 0x10; pop rbp; jmp rax; 
0x00000000037394: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x000000000863b3: add esp, 0x10; pop rbp; ret; 
0x00000000083741: add esp, 0x10; pop rbx; jmp rax; 
0x0000000005b9a3: add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x00000000085894: add esp, 0x10; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000036d0c: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000040e41: add esp, 0x10; pop rbx; ret; 
0x000000000902e3: add esp, 0x10; ret; 
0x00000000087862: add esp, 0x10; xor eax, eax; pop rbp; ret; 
0x000000000c0d51: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000014cdfd: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000009107c: add esp, 0x110; pop rbp; ret; 
0x00000000091f0f: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000014b576: add esp, 0x11b0; pop rbx; pop rbp; pop r12; ret; 
0x000000000fad49: add esp, 0x120; pop rbp; ret; 
0x00000000041a0c: add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x00000000041375: add esp, 0x148; ret; 
0x0000000014a46d: add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000128ba9: add esp, 0x188; ret; 
0x00000000123959: add esp, 0x18; mov eax, 0xfffffff6; pop rbx; pop rbp; ret; 
0x0000000007d324: add esp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000004ff67: add esp, 0x18; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000139626: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000012382b: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000005c106: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000145c5c: add esp, 0x18; movzx eax, al; ret; 
0x00000000040fa7: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae66: add esp, 0x18; ret; 
0x000000000d6992: add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000f935d: add esp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000ffbf9: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000f9592: add esp, 0x190; pop rbx; ret; 
0x0000000005b779: add esp, 0x1c0; pop rbp; pop r12; pop r13; ret; 
0x000000000fa2df: add esp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000004105d: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000109149: add esp, 0x20; pop r12; ret; 
0x000000000410f6: add esp, 0x20; pop rbp; ret; 
0x00000000083cfd: add esp, 0x20; pop rbx; jmp rax; 
0x0000000008311e: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000fa286: add esp, 0x20; pop rbx; ret; 
0x0000000005576c: add esp, 0x20; ret; 
0x00000000055757: add esp, 0x20; sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x000000000fa2c7: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000083f1f: add esp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000421b9: add esp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x00000000085ec0: add esp, 0x28; jmp rax; 
0x00000000086721: add esp, 0x28; mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000011f78b: add esp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000005bae7: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000085c37: add esp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000d22f6: add esp, 0x28; neg eax; ret; 
0x000000000866bd: add esp, 0x28; pop rbp; pop r12; ret; 
0x00000000085f79: add esp, 0x28; pop rbx; pop r12; jmp rax; 
0x0000000004d3c3: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000043ee2: add esp, 0x28; ret; 
0x0000000007a82e: add esp, 0x2b0; pop rbp; pop r12; pop r13; ret; 
0x0000000013c211: add esp, 0x30; mov eax, 0x3; pop rbx; ret; 
0x00000000192414: add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000fe048: add esp, 0x30; pop r12; ret; 
0x000000000fdad4: add esp, 0x30; pop r13; ret; 
0x00000000138e5a: add esp, 0x30; pop rbp; ret; 
0x0000000012119f: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000013c204: add esp, 0x30; pop rbx; ret; 
0x0000000014b7be: add esp, 0x328; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000085db1: add esp, 0x38; jmp rax; 
0x0000000008601d: add esp, 0x38; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000086041: add esp, 0x38; pop rbx; pop r12; jmp rax; 
0x00000000192007: add esp, 0x38; pop rbx; pop r14; ret; 
0x0000000002d6d8: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000806c7: add esp, 0x38; ret; 
0x0000000005b7dd: add esp, 0x400; pop rbp; pop r12; pop r13; ret; 
0x00000000104a88: add esp, 0x408; ret; 
0x000000000fae97: add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000c69fc: add esp, 0x40; pop rbp; ret; 
0x00000000139840: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000041a75: add esp, 0x40; pop rbx; ret; 
0x0000000010c708: add esp, 0x40; ret; 
0x0000000004df60: add esp, 0x418; ret; 
0x00000000055634: add esp, 0x440; mov rax, rbp; pop rbp; ret; 
0x0000000005561c: add esp, 0x440; pop rbp; ret; 
0x000000000fb242: add esp, 0x48; movzx eax, al; ret; 
0x00000000127575: add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000100583: add esp, 0x48; ret; 
0x000000000999d4: add esp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000ffe91: add esp, 0x50; pop r12; ret; 
0x00000000092e7a: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000149b5e: add esp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000c7380: add esp, 0x58; ret; 
0x000000000fee43: add esp, 0x60; mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000fedf0: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000f9a44: add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000eebd5: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000fa175: add esp, 0x68; ret; 
0x00000000105115: add esp, 0x78; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000f9b9f: add esp, 0x78; ret; 
0x00000000041879: add esp, 0x88; pop rbp; pop r12; ret; 
0x000000000418db: add esp, 0x88; ret; 
0x000000000e07a5: add esp, 0x8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000001231cd: add esp, 0x8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x00000000138fb1: add esp, 0x8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000008e540: add esp, 0x8; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x000000001448b1: add esp, 0x8; mov eax, 0x1; pop rbp; pop r12; ret; 
0x00000000077963: add esp, 0x8; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x00000000106664: add esp, 0x8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000fe967: add esp, 0x8; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000077981: add esp, 0x8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000007d624: add esp, 0x8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000055801: add esp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000876cd: add esp, 0x8; mov eax, r13d; pop r12; pop r13; ret; 
0x00000000087b73: add esp, 0x8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000101857: add esp, 0x8; mov eax, r8d; ret; 
0x000000000f0165: add esp, 0x8; mov eax, r9d; ret; 
0x000000000b4e9f: add esp, 0x8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000009c35d: add esp, 0x8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000d2575: add esp, 0x8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000007b310: add esp, 0x8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000009196f: add esp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x0000000002d8d5: add esp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000013aecc: add esp, 0x8; movzx eax, al; pop rbp; pop r12; ret; 
0x0000000010103a: add esp, 0x8; movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000004d866: add esp, 0x8; movzx eax, al; ret; 
0x0000000012c6aa: add esp, 0x8; movzx eax, ax; ret; 
0x00000000145d62: add esp, 0x8; not eax; shr eax, 0x1f; ret; 
0x0000000007e96f: add esp, 0x8; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000001448a6: add esp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000079436: add esp, 0x8; pop rbp; pop r12; ret; 
0x0000000014d0dc: add esp, 0x8; pop rbx; pop rbp; jmp rax; 
0x0000000013ada3: add esp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002dea1: add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000403f7: add esp, 0x8; ret; 
0x0000000014ec01: add esp, 0x8; sar eax, 0x1f; ret; 
0x00000000091011: add esp, 0x8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000084b6f: add esp, 0x8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000fe260: add esp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x0000000002d472: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000fe23c: add esp, 0x90; pop rbx; ret; 
0x0000000005bc1b: add esp, 0x98; neg eax; ret; 
0x000000000d2c11: add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000081233: add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000005bc35: add esp, 0x98; ret; 
0x000000000d2c36: add esp, 0x98; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000041b59: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000088032: add esp, 0xa0; xor eax, eax; pop rbp; ret; 
0x00000000036be8: add esp, 0xa8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000d868d: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000420de: add esp, 0xa8; ret; 
0x000000000f98ac: add esp, 0xb8; mov eax, r12d; pop r12; pop r13; ret; 
0x000000000c7626: add esp, 0xd0; mov eax, r8d; pop rbx; ret; 
0x0000000009478c: add esp, 0xd0; pop rbp; ret; 
0x000000000c765a: add esp, 0xd0; pop rbx; ret; 
0x000000000415d3: add esp, 0xd0; ret; 
0x0000000004e197: add esp, 0xd8; ret; 
0x00000000076724: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000104e0f: add esp, 0xe8; ret; 
0x00000000104e87: add esp, 0xffffff80; mov rdx, rsp; syscall; 
0x00000000188fa3: add esp, [rdx-0x4d]; push rbp; and [rdi], bh; ret; 
0x0000000018bec3: add esp, [rdx-0x4d]; push rbp; and [rdi], bl; ret; 
0x00000000042561: add esp, edi; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000105318: add fs:[rax], al; add [rbx-0x3f7abfc0], cl; cmove eax, edx; ret; 
0x000000000f59d2: add fs:[rax], al; add al, ch; jge short 0x00000000000f5a42; dec dword ptr [rcx-0x77]; ret; 
0x000000000b453d: add fs:[rax], eax; add [rax-0x77], cl; shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x0000000006f55b: add fs:[rax], eax; add [rax], al; jmp rax; 
0x000000001284c8: add fs:[rax], eax; add [rbp-0x77], cl; ret far; 
0x000000001429f0: add gs:[rax-0x7d], cl; ret; 
0x000000001215a3: add gs:[rbx+0x5d], bl; pop r12; ret; 
0x00000000094ded: add gs:[rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000012f165: add qword ptr [rax+0x10], 0x1; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x00000000139118: add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000438fc: add qword ptr [rip+0x1ac29c], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000003f834: add qword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x0000000003f83e: add r10, [rdi+0x20]; mov rax, r10; ret; 
0x000000001232eb: add r10, rax; mov eax, edx; mov [r9], r10; ret; 
0x00000000044606: add r10d, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret; 
0x0000000003ee4c: add r11, r15; jmp r11; 
0x000000001599b2: add r11d, r14d; movq [rdi], mm1; ret; 
0x0000000017c4e2: add r11d, r8d; nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x00000000042560: add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000013bdae: add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x000000001446c1: add r13, rbx; call rbp; 
0x0000000006bb1b: add r14, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x000000001233d9: add r14, r11; movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x00000000042438: add r14, r13; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000013bc7f: add r14, rdx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x00000000159942: add r14b, r11b; movq [rdi], mm1; ret; 
0x000000001598d2: add r14d, r11d; movq [rdi], mm1; ret; 
0x00000000070c33: add r15, 0x48; shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000002d2f5: add r15, 0x8; mov [rsp+0x8], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000042a30: add r15, [rsp]; mov rdi, r12; call rcx; 
0x000000000422ff: add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000008001d: add r15b, dil; add bl, ch; ret far; 
0x000000000b223a: add r8, 0x10; lea r11, [rip+0xf810b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a1a: add r8, 0x10; lea r11, [rip+0xf974b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000131f58: add r8, [0x0]; mov rcx, r15; call rbp; 
0x0000000018f81f: add r8, [r8]; add [rbp-0x73], cl; push rcx; dec byte ptr [rax-0x77]; ret far; 
0x00000000131f57: add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x000000001876f7: add r8b, [r8]; lea rax, [rdi+0x2]; ret; 
0x000000001766e7: add r8b, [r8]; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x00000000170d97: add r8b, [r8]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000170d96: add r8b, [r8]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001888d7: add r8b, [r8]; ret; 
0x0000000018b1a7: add r8b, [r8]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x00000000174c57: add r8b, [r8]; vzeroupper; ret; 
0x0000000017c4f2: add r8b, r11b; nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x000000000584df: add r8d, eax; mov eax, r8d; ret; 
0x00000000174416: add r8d, ecx; vzeroupper; ret; 
0x00000000178f48: add r8d, edi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174278: add r8d, edi; vzeroupper; ret; 
0x0000000017c502: add r8d, r11d; nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x000000001519ba: add r9, r11; jmp r9; 
0x00000000035506: add r9b, [rax+0x39]; ret far; 
0x00000000123488: add r9d, r8d; loopne 0x0000000000123490; shr rax, 0x4; and eax, 0x7f; ret; 
0x0000000014448a: add r9d, r9d; movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x0000000004f800: add rax, 0x1; cmp byte ptr [rax+0x1], 0x0; jne short 0x000000000004f800; pop rbx; ret; 
0x00000000050460: add rax, 0x1; cmp rdx, rax; jne short 0x0000000000050458; xor eax, eax; ret; 
0x00000000050548: add rax, 0x1; cmp rdx, rax; jne short 0x0000000000050540; xor eax, eax; ret; 
0x000000000a1310: add rax, 0x1; movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000a1310; ret; 
0x000000000c5fa0: add rax, 0x1; ret; 
0x0000000009de90: add rax, 0x1; test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000003aa35: add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000123243: add rax, 0x2; mov [r8], edx; mov [r9], rax; mov eax, ecx; ret; 
0x000000000c5f97: add rax, 0x2; ret; 
0x000000001640d3: add rax, 0x2c5850f; add [rax], al; ret; 
0x00000000168484: add rax, 0x364850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c5fb0: add rax, 0x3; ret; 
0x00000000145810: add rax, 0x4; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000b53b2: add rax, 0x4; test edx, edx; jne short 0x00000000000b53a8; xor eax, eax; ret; 
0x000000000d8390: add rax, 0x72f52011; cmp rdx, rax; jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x00000000101bc0: add rax, 0x8; mov [rip+0xf4465], rax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b94: add rax, 0x8; mov [rip+0xf4491], rax; mov rax, r8; ret; 
0x0000000014273d: add rax, 0xa0; pop rbx; ret; 
0x000000001427ad: add rax, 0xa8; pop rbx; ret; 
0x00000000122c4a: add rax, 0xc; cmp rax, rcx; jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x0000000010c8ab: add rax, 0xffffffffff89000e; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x000000000f2f68: add rax, [0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x0000000002d678: add rax, [0x0]; ret; 
0x0000000002d2ac: add rax, [r15]; call rax; 
0x00000000160b65: add rax, [r8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000c7370: add rax, [rdx+0x8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7490: add rax, [rdx+0x8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000d7277: add rax, [rip+0x11e532]; mov rax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x000000000f2f67: add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x0000000002d677: add rax, fs:[0x0]; ret; 
0x000000000f5ba8: add rax, r12; jmp rax; 
0x000000000f89da: add rax, r13; jmp rax; 
0x0000000010b217: add rax, r8; jmp rax; 
0x00000000186fa3: add rax, r8; ret; 
0x000000001706f4: add rax, r8; vzeroupper; ret; 
0x00000000127f5e: add rax, r9; jmp rax; 
0x000000000e9e9d: add rax, rbx; jmp rax; 
0x0000000005c6c5: add rax, rcx; jmp rax; 
0x000000000a49d8: add rax, rcx; ret; 
0x0000000016f35d: add rax, rcx; sub rax, rdi; ret; 
0x000000001702bd: add rax, rcx; vzeroupper; ret; 
0x0000000018017d: add rax, rcx; xtest; je short 0x0000000000180189; vzeroall; ret; 
0x00000000186fa0: add rax, rdi; add rax, r8; ret; 
0x000000001706f1: add rax, rdi; add rax, r8; vzeroupper; ret; 
0x000000000a49d5: add rax, rdi; add rax, rcx; ret; 
0x000000000a51f9: add rax, rdi; add rax, rsi; ret; 
0x000000001889c7: add rax, rdi; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x0000000005d2d5: add rax, rdi; jmp rax; 
0x000000000a14a5: add rax, rdi; mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a14c4: add rax, rdi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a14dc: add rax, rdi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; ret; 
0x00000000073c8d: add rax, rdi; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000731a4: add rax, rdi; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000739ce: add rax, rdi; mov r12d, 0x1; jmp rax; 
0x000000000a510b: add rax, rdi; ret; 
0x000000000a1478: add rax, rdi; ret; 
0x0000000017902e: add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000016fff6: add rax, rdi; vzeroupper; ret; 
0x0000000017ee29: add rax, rdi; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017fd06: add rax, rdi; xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x0000000018568c: add rax, rdi; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x0000000002d78b: add rax, rdx; jmp rax; 
0x000000000c772d: add rax, rdx; mov [rdi+0x20], rax; ret; 
0x000000001862c8: add rax, rdx; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000075646: add rax, rdx; ret; 
0x000000000aa795: add rax, rdx; sub rax, rdi; ret; 
0x000000000c61d5: add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000017403f: add rax, rdx; vzeroupper; ret; 
0x00000000180b7f: add rax, rdx; xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x0000000005d091: add rax, rsi; jmp rax; 
0x0000000006e8c5: add rax, rsi; mov r13d, 0x1; jmp rax; 
0x000000000a51fc: add rax, rsi; ret; 
0x0000000013b758: add rbp, rdx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x000000000f2f5f: add rbx, [0x0]; add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x000000000f2f5e: add rbx, fs:[0x0]; add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x000000001285d3: add rcx, 0x1; sub rcx, r9; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000501eb: add rcx, 0x8; cmp r11d, eax; jne short 0x00000000000501b0; ret; 
0x00000000168436: add rcx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000179451: add rcx, r11; jmp rcx; 
0x000000000ed201: add rcx, r8; jmp rcx; 
0x000000001892c2: add rcx, r8; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x0000000018f440: add rcx, r9; jmp rcx; 
0x0000000018f5d7: add rcx, rbx; jmp rcx; 
0x000000000389bc: add rcx, rdi; jmp rcx; 
0x0000000006bb93: add rcx, rdx; jmp rcx; 
0x0000000006494b: add rcx, rsi; jmp rcx; 
0x0000000013e6cc: add rdi, 0x10; jmp rcx; 
0x000000000b345c: add rdi, 0x10; lea r11, [rip+0xf6fad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2adc: add rdi, 0x10; lea r11, [rip+0xf78ad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2225: add rdi, 0x10; lea r11, [rip+0xf8120]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2206: add rdi, 0x10; lea r11, [rip+0xf813f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e2c: add rdi, 0x10; lea r11, [rip+0xf937d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a05: add rdi, 0x10; lea r11, [rip+0xf9760]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b09e6: add rdi, 0x10; lea r11, [rip+0xf977f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af82c: add rdi, 0x10; lea r11, [rip+0xfa7a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000093eaa: add rdi, 0x1; mov eax, 0xf0; syscall; 
0x00000000094104: add rdi, 0x1; mov eax, 0xf1; syscall; 
0x000000000db425: add rdi, 0x1; test al, al; jne short 0x00000000000db3f9; xor eax, eax; ret; 
0x000000000b3491: add rdi, 0x20; lea r11, [rip+0xf6f78]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b11: add rdi, 0x20; lea r11, [rip+0xf7878]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e61: add rdi, 0x20; lea r11, [rip+0xf9348]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af861: add rdi, 0x20; lea r11, [rip+0xfa774]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000170064: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000013adea: add rdi, 0x23b0; pop rbp; jmp rcx; 
0x000000000b334f: add rdi, 0x30; lea r11, [rip+0xf70ba]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b29de: add rdi, 0x30; lea r11, [rip+0xf79ab]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d2e: add rdi, 0x30; lea r11, [rip+0xf947b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af72e: add rdi, 0x30; lea r11, [rip+0xfa8a7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000170074: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000140b23: add rdi, 0x58; jmp rcx; 
0x00000000170084: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000140293: add rdi, 0x68; jmp rcx; 
0x0000000013dba6: add rdi, 0xc8; jmp rcx; 
0x00000000173ff4: add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x0000000003ec06: add rdi, r10; jmp rdi; 
0x0000000012b7e2: add rdi, r8; jmp rdi; 
0x00000000044af9: add rdi, rax; cmp rdi, r8; jb short 0x0000000000044add; xor eax, eax; ret; 
0x00000000192673: add rdi, rbx; call r12; 
0x000000000945ab: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x00000000094558: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x00000000094508: add rdi, rdi; mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x000000001519b7: add rdi, rdx; add r9, r11; jmp r9; 
0x0000000017b4d0: add rdi, rdx; lea r11, [rip+0x3e866]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b456: add rdi, rdx; lea r11, [rip+0x3e8e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3c7: add rdi, rdx; lea r11, [rip+0x3e96f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1bc: add rdi, rdx; lea r11, [rip+0x3eb7a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08a: add rdi, rdx; lea r11, [rip+0x3ecac]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc4: add rdi, rdx; lea r11, [rip+0x3ed72]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af46: add rdi, rdx; lea r11, [rip+0x3edf0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeaf: add rdi, rdx; lea r11, [rip+0x3ee87]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb3: add rdi, rdx; lea r11, [rip+0x3f083]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab82: add rdi, rdx; lea r11, [rip+0x3f1b4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa81: add rdi, rdx; lea r11, [rip+0x3f2b5]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea0: add rdi, rdx; lea r11, [rip+0x3fd56]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e26: add rdi, rdx; lea r11, [rip+0x3fdd0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d97: add rdi, rdx; lea r11, [rip+0x3fe5f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179b8c: add rdi, rdx; lea r11, [rip+0x4006a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5a: add rdi, rdx; lea r11, [rip+0x4019c]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179994: add rdi, rdx; lea r11, [rip+0x40262]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179916: add rdi, rdx; lea r11, [rip+0x402e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017987f: add rdi, rdx; lea r11, [rip+0x40377]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179683: add rdi, rdx; lea r11, [rip+0x40573]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179552: add rdi, rdx; lea r11, [rip+0x406a4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179443: add rdi, rdx; lea r11, [rip+0x407b3]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000015b41b: add rdi, rdx; lea r11, [rip+0x5f51b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b76: add rdi, rdx; lea r11, [rip+0x60dc0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1a: add rdi, rdx; lea r11, [rip+0x60f1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158927: add rdi, rdx; lea r11, [rip+0x61b0f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d19: add rdi, rdx; lea r11, [rip+0x6331d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157096: add rdi, rdx; lea r11, [rip+0x633a0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f24: add rdi, rdx; lea r11, [rip+0x63512]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457a: add rdi, rdx; lea r11, [rip+0x65abc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544b5: add rdi, rdx; lea r11, [rip+0x65b81]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151baa: add rdi, rdx; lea r11, [rip+0x682cc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ae5: add rdi, rdx; lea r11, [rip+0x68391]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000008b34d: add rdx, 0x10; cmp rcx, 0x400; jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x00000000084ae9: add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x0000000014c517: add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x28; ret; 
0x0000000014c656: add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x48; ret; 
0x000000000cb762: add rdx, r11; jmp rdx; 
0x0000000006bb27: add rdx, r12; call qword ptr [r10+rax*8]; 
0x000000000ecae8: add rdx, r14; jmp rdx; 
0x000000000a15e6: add rdx, r8; jmp rdx; 
0x00000000051361: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000004e2ab: add rdx, r9; jmp rdx; 
0x0000000010af60: add rdx, rax; cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x00000000170571: add rdx, rax; jl 0x0000000000170660; add rax, rdi; vzeroupper; ret; 
0x00000000186e87: add rdx, rax; jl 0x0000000000186f20; add eax, 0x40; add rax, rdi; ret; 
0x00000000186e3d: add rdx, rax; jl 0x0000000000186f20; add rax, rdi; ret; 
0x000000000a5106: add rdx, rax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x000000000a5117: add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a5137: add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a5157: add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x30]; ret; 
0x00000000186ee7: add rdx, rax; jl short 0x0000000000186f20; add eax, 0x20; add rax, rdi; ret; 
0x00000000186f07: add rdx, rax; jl short 0x0000000000186f20; add eax, 0x60; add rax, rdi; ret; 
0x00000000075e8a: add rdx, rcx; jmp rdx; 
0x000000000501bf: add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000a1539: add rdx, rdi; jmp rdx; 
0x000000000cd569: add rdx, rsi; jmp rdx; 
0x0000000013f6d4: add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000000f8faf: add rsi, 0x8; cmp rsi, rdi; jne short 0x00000000000f8f90; mov eax, r8d; ret; 
0x0000000012b505: add rsi, r8; jmp rsi; 
0x00000000145785: add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x00000000100acd: add rsi, rax; call far fword ptr [rax+r8*4+0x39]; 
0x0000000013b4ae: add rsi, rax; cmp rsi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x000000000b35b9: add rsi, rcx; lea r11, [rip+0xf6ed1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3599: add rsi, rcx; lea r11, [rip+0xf6ef1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3570: add rsi, rcx; lea r11, [rip+0xf6f1a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1729: add rsi, rcx; lea r11, [rip+0xf8b8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1709: add rsi, rcx; lea r11, [rip+0xf8bad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16e0: add rsi, rcx; lea r11, [rip+0xf8bd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0079: add rsi, rcx; lea r11, [rip+0xfa05d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0059: add rsi, rcx; lea r11, [rip+0xfa07d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0030: add rsi, rcx; lea r11, [rip+0xfa0a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000cfb46: add rsi, rdi; jmp rsi; 
0x000000001519b4: add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x0000000015b1b3: add rsi, rdx; lea r11, [rip+0x5f783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b033: add rsi, rdx; lea r11, [rip+0x5f903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aeb3: add rsi, rdx; lea r11, [rip+0x5fa83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ad34: add rsi, rdx; lea r11, [rip+0x5fc02]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015abb3: add rsi, rdx; lea r11, [rip+0x5fd83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa33: add rsi, rdx; lea r11, [rip+0x5ff03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a8b3: add rsi, rdx; lea r11, [rip+0x60083]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a733: add rsi, rdx; lea r11, [rip+0x60203]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a5b3: add rsi, rdx; lea r11, [rip+0x60383]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a433: add rsi, rdx; lea r11, [rip+0x60503]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b3: add rsi, rdx; lea r11, [rip+0x60683]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a133: add rsi, rdx; lea r11, [rip+0x60803]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159fb3: add rsi, rdx; lea r11, [rip+0x60983]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159e33: add rsi, rdx; lea r11, [rip+0x60b03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159cb3: add rsi, rdx; lea r11, [rip+0x60c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001586d3: add rsi, rdx; lea r11, [rip+0x61d63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158553: add rsi, rdx; lea r11, [rip+0x61ee3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001583d3: add rsi, rdx; lea r11, [rip+0x62063]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158254: add rsi, rdx; lea r11, [rip+0x621e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001580d3: add rsi, rdx; lea r11, [rip+0x62363]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157f53: add rsi, rdx; lea r11, [rip+0x624e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157dd3: add rsi, rdx; lea r11, [rip+0x62663]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157c53: add rsi, rdx; lea r11, [rip+0x627e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157ad3: add rsi, rdx; lea r11, [rip+0x62963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157953: add rsi, rdx; lea r11, [rip+0x62ae3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001577d3: add rsi, rdx; lea r11, [rip+0x62c63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157653: add rsi, rdx; lea r11, [rip+0x62de3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001574d3: add rsi, rdx; lea r11, [rip+0x62f63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157353: add rsi, rdx; lea r11, [rip+0x630e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001571d3: add rsi, rdx; lea r11, [rip+0x63263]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155b8f: add rsi, rdx; lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155a3f: add rsi, rdx; lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001558ef: add rsi, rdx; lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015579f: add rsi, rdx; lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015564f: add rsi, rdx; lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001554ff: add rsi, rdx; lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001553af: add rsi, rdx; lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015510f: add rsi, rdx; lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154fbf: add rsi, rdx; lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154e6f: add rsi, rdx; lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154d1f: add rsi, rdx; lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154bcf: add rsi, rdx; lea r11, [rip+0x65467]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154a7f: add rsi, rdx; lea r11, [rip+0x655b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015492f: add rsi, rdx; lea r11, [rip+0x65707]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154669: add rsi, rdx; lea r11, [rip+0x659cd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001531bf: add rsi, rdx; lea r11, [rip+0x66cb7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015306f: add rsi, rdx; lea r11, [rip+0x66e07]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152f1f: add rsi, rdx; lea r11, [rip+0x66f57]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152dcf: add rsi, rdx; lea r11, [rip+0x670a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152c7f: add rsi, rdx; lea r11, [rip+0x671f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b2f: add rsi, rdx; lea r11, [rip+0x67347]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001529df: add rsi, rdx; lea r11, [rip+0x67497]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015273f: add rsi, rdx; lea r11, [rip+0x67737]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001525ef: add rsi, rdx; lea r11, [rip+0x67887]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015249f: add rsi, rdx; lea r11, [rip+0x679d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015234f: add rsi, rdx; lea r11, [rip+0x67b27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001521ff: add rsi, rdx; lea r11, [rip+0x67c77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001520af: add rsi, rdx; lea r11, [rip+0x67dc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f5f: add rsi, rdx; lea r11, [rip+0x67f17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151c99: add rsi, rdx; lea r11, [rip+0x681dd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000005bbd5: add rsp, 0x1000; pop rbp; ret; 
0x0000000005bbe0: add rsp, 0x1000; xor eax, eax; pop rbp; ret; 
0x0000000005ba1d: add rsp, 0x1008; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000128d91: add rsp, 0x100; movzx eax, al; pop rbp; ret; 
0x00000000128ec5: add rsp, 0x100; movzx eax, al; pop rbx; ret; 
0x00000000128e22: add rsp, 0x100; pop rbp; ret; 
0x00000000141fcb: add rsp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x00000000128eb5: add rsp, 0x100; pop rbx; ret; 
0x000000000b42bc: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000128da0: add rsp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000b435c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000128f24: add rsp, 0x108; not eax; shr eax, 0x1f; ret; 
0x000000000417dc: add rsp, 0x108; ret; 
0x00000000144a80: add rsp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x00000000131fbd: add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000f9154: add rsp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000014a051: add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000014a052: add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000943b1: add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x00000000091de6: add rsp, 0x10; movzx eax, al; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807d5: add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000009a2f0: add rsp, 0x10; pop r12; ret; 
0x00000000144a72: add rsp, 0x10; pop rbp; jmp rax; 
0x00000000037393: add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x000000000863b2: add rsp, 0x10; pop rbp; ret; 
0x00000000083740: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000005b9a2: add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x00000000085893: add rsp, 0x10; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000036d0b: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000040e40: add rsp, 0x10; pop rbx; ret; 
0x000000000902e2: add rsp, 0x10; ret; 
0x00000000087861: add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000087860: add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x000000000c0d50: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000014cdfc: add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000009107b: add rsp, 0x110; pop rbp; ret; 
0x00000000091f0e: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000014b575: add rsp, 0x11b0; pop rbx; pop rbp; pop r12; ret; 
0x000000000fad48: add rsp, 0x120; pop rbp; ret; 
0x00000000041a0b: add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x00000000041374: add rsp, 0x148; ret; 
0x0000000014a46c: add rsp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000128ba8: add rsp, 0x188; ret; 
0x00000000123958: add rsp, 0x18; mov eax, 0xfffffff6; pop rbx; pop rbp; ret; 
0x0000000007d323: add rsp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000004ff66: add rsp, 0x18; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000139625: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000012382a: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000005c105: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000145c5b: add rsp, 0x18; movzx eax, al; ret; 
0x00000000040fa6: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae65: add rsp, 0x18; ret; 
0x000000000d6991: add rsp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000f935c: add rsp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000ffbf8: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000f9591: add rsp, 0x190; pop rbx; ret; 
0x0000000005b778: add rsp, 0x1c0; pop rbp; pop r12; pop r13; ret; 
0x000000000fa2de: add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000004105c: add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000109148: add rsp, 0x20; pop r12; ret; 
0x000000000410f5: add rsp, 0x20; pop rbp; ret; 
0x00000000083cfa: add rsp, 0x20; pop rbx; jmp rax; 
0x0000000008311d: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000fa285: add rsp, 0x20; pop rbx; ret; 
0x0000000005576b: add rsp, 0x20; ret; 
0x00000000055756: add rsp, 0x20; sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x000000000fa2c6: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000083f1c: add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000421b8: add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x00000000085ebf: add rsp, 0x28; jmp rax; 
0x00000000086720: add rsp, 0x28; mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000011f789: add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000011f78a: add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000005bae6: add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000085c36: add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000d22f5: add rsp, 0x28; neg eax; ret; 
0x000000000866bc: add rsp, 0x28; pop rbp; pop r12; ret; 
0x00000000085f78: add rsp, 0x28; pop rbx; pop r12; jmp rax; 
0x0000000004d3c2: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000043ee1: add rsp, 0x28; ret; 
0x0000000007a82d: add rsp, 0x2b0; pop rbp; pop r12; pop r13; ret; 
0x0000000013c210: add rsp, 0x30; mov eax, 0x3; pop rbx; ret; 
0x00000000192413: add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000fe047: add rsp, 0x30; pop r12; ret; 
0x000000000fdad2: add rsp, 0x30; pop r13; ret; 
0x000000000fdad3: add rsp, 0x30; pop r13; ret; 
0x00000000138e59: add rsp, 0x30; pop rbp; ret; 
0x0000000012119e: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000013c203: add rsp, 0x30; pop rbx; ret; 
0x0000000014b7bd: add rsp, 0x328; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000085dae: add rsp, 0x38; jmp rax; 
0x0000000008601c: add rsp, 0x38; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000086040: add rsp, 0x38; pop rbx; pop r12; jmp rax; 
0x00000000192005: add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000002d6d7: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000806c6: add rsp, 0x38; ret; 
0x0000000005b7dc: add rsp, 0x400; pop rbp; pop r12; pop r13; ret; 
0x00000000104a87: add rsp, 0x408; ret; 
0x000000000fae96: add rsp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000c69fb: add rsp, 0x40; pop rbp; ret; 
0x0000000013983f: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000041a74: add rsp, 0x40; pop rbx; ret; 
0x0000000010c707: add rsp, 0x40; ret; 
0x0000000004df5f: add rsp, 0x418; ret; 
0x00000000055633: add rsp, 0x440; mov rax, rbp; pop rbp; ret; 
0x0000000005561b: add rsp, 0x440; pop rbp; ret; 
0x000000000fb241: add rsp, 0x48; movzx eax, al; ret; 
0x00000000127574: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000100582: add rsp, 0x48; ret; 
0x000000000999d3: add rsp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000ffe90: add rsp, 0x50; pop r12; ret; 
0x00000000092e79: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000149b5d: add rsp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000c737f: add rsp, 0x58; ret; 
0x000000000fee42: add rsp, 0x60; mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000fedef: add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000f9a43: add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000eebd4: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000fa174: add rsp, 0x68; ret; 
0x00000000105114: add rsp, 0x78; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000f9b9e: add rsp, 0x78; ret; 
0x00000000041878: add rsp, 0x88; pop rbp; pop r12; ret; 
0x000000000418da: add rsp, 0x88; ret; 
0x000000000e07a4: add rsp, 0x8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000001231cc: add rsp, 0x8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x00000000138fb0: add rsp, 0x8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000008e53f: add rsp, 0x8; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x000000001448b0: add rsp, 0x8; mov eax, 0x1; pop rbp; pop r12; ret; 
0x00000000077962: add rsp, 0x8; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x00000000106663: add rsp, 0x8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000fe966: add rsp, 0x8; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000077980: add rsp, 0x8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000007d623: add rsp, 0x8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000808a9: add rsp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000055800: add rsp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000876cc: add rsp, 0x8; mov eax, r13d; pop r12; pop r13; ret; 
0x00000000087b72: add rsp, 0x8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000101856: add rsp, 0x8; mov eax, r8d; ret; 
0x000000000f0164: add rsp, 0x8; mov eax, r9d; ret; 
0x000000000b4e9e: add rsp, 0x8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000009c35c: add rsp, 0x8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000d2574: add rsp, 0x8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000007b30f: add rsp, 0x8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000009196e: add rsp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x0000000002d8d4: add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000013aecb: add rsp, 0x8; movzx eax, al; pop rbp; pop r12; ret; 
0x00000000101039: add rsp, 0x8; movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000004d865: add rsp, 0x8; movzx eax, al; ret; 
0x0000000012c6a9: add rsp, 0x8; movzx eax, ax; ret; 
0x00000000145d61: add rsp, 0x8; not eax; shr eax, 0x1f; ret; 
0x0000000007e96e: add rsp, 0x8; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000001448a5: add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000079435: add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000014d0db: add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x0000000013ada2: add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002dea0: add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000403f6: add rsp, 0x8; ret; 
0x0000000014ec00: add rsp, 0x8; sar eax, 0x1f; ret; 
0x00000000091010: add rsp, 0x8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000084b6e: add rsp, 0x8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000fe25f: add rsp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x0000000002d471: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000fe23b: add rsp, 0x90; pop rbx; ret; 
0x0000000005bc1a: add rsp, 0x98; neg eax; ret; 
0x000000000d2c10: add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000081232: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000005bc34: add rsp, 0x98; ret; 
0x000000000d2c35: add rsp, 0x98; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000041b58: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000088031: add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x00000000036be7: add rsp, 0xa8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000d868c: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000420dd: add rsp, 0xa8; ret; 
0x000000000f98ab: add rsp, 0xb8; mov eax, r12d; pop r12; pop r13; ret; 
0x000000000c7625: add rsp, 0xd0; mov eax, r8d; pop rbx; ret; 
0x0000000009478b: add rsp, 0xd0; pop rbp; ret; 
0x000000000c7659: add rsp, 0xd0; pop rbx; ret; 
0x000000000415d2: add rsp, 0xd0; ret; 
0x0000000004e196: add rsp, 0xd8; ret; 
0x00000000076723: add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000104e0e: add rsp, 0xe8; ret; 
0x00000000104e86: add rsp, 0xffffffffffffff80; mov rdx, rsp; syscall; 
0x000000000a1116: add sil, al; inc dword ptr [rax]; mov [rdi], rdx; ret; 
0x0000000010c00b: add word ptr [rax], 0x1; ret; 
0x0000000010bd81: add word ptr [rdx+rax*2], 0x1; ret; 
0x00000000040733: addps xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000407ab: addps xmm0, xmm0; ret; 
0x000000000406c1: addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000151f40: addr32 loopne 0x0000000000151f52; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152090: addr32 loopne 0x00000000001520a2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001521e0: addr32 loopne 0x00000000001521f2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152330: addr32 loopne 0x0000000000152342; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152480: addr32 loopne 0x0000000000152492; sub [rdi-0x10], ebp; jmp r9; 
0x000000001525d0: addr32 loopne 0x00000000001525e2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152720: addr32 loopne 0x0000000000152732; sub [rdi-0x10], ebp; jmp r9; 
0x0000000015286e: addr32 loopne 0x0000000000152880; sub [rdi-0x10], ebp; jmp r9; 
0x000000001529c0: addr32 loopne 0x00000000001529d2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152b10: addr32 loopne 0x0000000000152b22; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152c60: addr32 loopne 0x0000000000152c72; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152db0: addr32 loopne 0x0000000000152dc2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152f00: addr32 loopne 0x0000000000152f12; sub [rdi-0x10], ebp; jmp r9; 
0x00000000153050: addr32 loopne 0x0000000000153062; sub [rdi-0x10], ebp; jmp r9; 
0x000000001531a0: addr32 loopne 0x00000000001531b2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154910: addr32 loopne 0x0000000000154922; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154a60: addr32 loopne 0x0000000000154a72; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154bb0: addr32 loopne 0x0000000000154bc2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154d00: addr32 loopne 0x0000000000154d12; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154e50: addr32 loopne 0x0000000000154e62; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154fa0: addr32 loopne 0x0000000000154fb2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001550f0: addr32 loopne 0x0000000000155102; sub [rdi-0x10], ebp; jmp r9; 
0x0000000015523e: addr32 loopne 0x0000000000155250; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155390: addr32 loopne 0x00000000001553a2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001554e0: addr32 loopne 0x00000000001554f2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155630: addr32 loopne 0x0000000000155642; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155780: addr32 loopne 0x0000000000155792; sub [rdi-0x10], ebp; jmp r9; 
0x000000001558d0: addr32 loopne 0x00000000001558e2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155a20: addr32 loopne 0x0000000000155a32; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155b70: addr32 loopne 0x0000000000155b82; sub [rdi-0x10], ebp; jmp r9; 
0x00000000040732: addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000407aa: addsd xmm0, xmm0; ret; 
0x000000000406c0: addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000040a10: addss xmm0, xmm0; ret; 
0x0000000013910d: and [r11+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000007cf19: and [r11+rcx*4+0x6d], r9b; sbb [rax-0x77], cl; ret far; 
0x000000000fe184: and [r13-0x32], r14b; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x000000000a50b1: and [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000000f812f: and [r15], r9b; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x0000000013b538: and [r8+0x1], dil; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007cf47: and [r8+0x1], r9b; ret; 
0x00000000139250: and [r8-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x00000000139240: and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000139066: and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000009226e: and [r8-0x77], r9b; cmp eax, 0x162609; ret; 
0x00000000092297: and [r8-0x77], r9b; jle short 0x00000000000922bd; ret; 
0x00000000038e73: and [r8-0x77], r9b; std; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x000000000fc3a5: and [r8], al; add [rax], al; add [rax+0x1], bh; pop rbx; ret; 
0x000000000b3c86: and [r8], r14b; in eax, dx; mov [rdi+0x21], ch; ret; 
0x00000000139022: and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000083692: and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001390fa: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000013907f: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000ffed6: and [rax+0x10e], bh; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x0000000013b539: and [rax+0x1], bh; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000140bc4: and [rax+0x1], bh; movups [r8], xmm3; ret; 
0x00000000186eb5: and [rax+0x1], cl; clc; ret; 
0x000000001705f5: and [rax+0x1], cl; clc; vzeroupper; ret; 
0x0000000007cf48: and [rax+0x1], cl; ret; 
0x000000001792b2: and [rax+0x1], ecx; clc; shr rax, 0x2; vzeroupper; ret; 
0x00000000170067: and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x00000000108a9d: and [rax+0x21], cl; clc; or rax, rsi; ret; 
0x000000000de061: and [rax+0x39], cl; ret; 
0x00000000110e97: and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x000000000781d6: and [rax+0x63], ecx; ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x000000001899de: and [rax+0x9], cl; shl bl, 0x1; bsf rax, rax; add rax, rdi; ret; 
0x00000000086f62: and [rax+0xca], bh; syscall; 
0x00000000137e60: and [rax+rcx*4+0xf], dh; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000192605: and [rax+rdx-0xd], dh; movups xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x000000000811a2: and [rax-0x1], bh; pop rbx; ret; 
0x0000000006e80c: and [rax-0x68], cl; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x000000001172a2: and [rax-0x73], cl; add eax, 0x678f6; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x000000000b55f2: and [rax-0x73], cl; add eax, 0xc95b6; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000b0525: and [rax-0x73], cl; jg short 0x00000000000b054a; jne 0x00000000000b0980; ret; 
0x000000000b1c89: and [rax-0x73], cl; jg short 0x00000000000b1cae; jne 0x00000000000b21a0; ret; 
0x00000000119951: and [rax-0x75], cl; and al, 0x18; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x00000000031999: and [rax-0x75], cl; and al, 0x30; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d1: and [rax-0x75], cl; and al, 0x30; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000118b94: and [rax-0x75], cl; and al, 0x48; call qword ptr [rsp+0x68]; 
0x00000000139251: and [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x000000000366cf: and [rax-0x75], cl; je short 0x00000000000366f8; mov rdi, [rsp+0x40]; call r15; 
0x00000000141f5c: and [rax-0x75], cl; jge short 0x0000000000141f61; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000103f96: and [rax-0x75], ecx; xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x00000000144b45: and [rax-0x77], cl; adc al, 0x24; call qword ptr [rax+0x8]; 
0x0000000009226f: and [rax-0x77], cl; cmp eax, 0x162609; ret; 
0x0000000014acb4: and [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x00000000087bbc: and [rax-0x77], cl; ja short 0x0000000000087bd9; ret; 
0x000000001458e0: and [rax-0x77], cl; ja short 0x00000000001458fd; mov [rdi+0x28], edx; ret; 
0x00000000092298: and [rax-0x77], cl; jle short 0x00000000000922bd; ret; 
0x000000000d4711: and [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x48]; 
0x00000000139241: and [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000139067: and [rax-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000139c04: and [rax-0x77], cl; out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000002e83e: and [rax-0x77], cl; ret; 
0x00000000038e74: and [rax-0x77], cl; std; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x000000000fe1ea: and [rax-0x77], cl; sub r11b, r8b; mov qword ptr [rdi], 0x0; ret; 
0x0000000009228e: and [rax-0x7b], cl; shl byte ptr [rbp-0x15], 0x48; mov [rdi+0x20], eax; mov [rsi+0x20], rdi; ret; 
0x00000000064409: and [rax-0x7d], cl; ret; 
0x000000000fc3a6: and [rax], al; add [rax], al; add [rax+0x1], bh; pop rbx; ret; 
0x000000000d84a9: and [rax], al; add [rax], al; cmove rax, rdx; ret; 
0x000000000d857b: and [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x000000000731b3: and [rax], al; add [rax], al; jmp rax; 
0x0000000013a7d6: and [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000fa3e1: and [rax], al; add [rax], al; syscall; 
0x000000000a7e4e: and [rax], al; add [rbp-0x77], cl; ret far; 
0x00000000031f45: and [rax], bl; add al, ch; ret; 
0x000000000b197c: and [rax], cl; add [rax], al; ret; 
0x000000000b3c87: and [rax], dh; in eax, dx; mov [rdi+0x21], ch; ret; 
0x00000000162369: and [rax], eax; add [rax-0x7bf0ffc7], al; ret far; 
0x000000000fa411: and [rax], eax; add [rax], al; syscall; 
0x0000000015e9ae: and [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000006ac8f: and [rax], ebx; add [rbx-0x5574b], cl; jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000010b5ca: and [rbp+0x19], dh; mov edx, 0x40; mov eax, 0x14; syscall; 
0x0000000008bf00: and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000151eb5: and [rbp+rcx*4+0x1d], cl; ret; 
0x000000000911eb: and [rbp+rdx+0xc76400], edi; or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000017812d: and [rbp-0x1f], dh; vzeroupper; ret; 
0x0000000018be24: and [rbp-0x20], dh; ret; 
0x00000000188bb8: and [rbp-0x22], dh; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018bd47: and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x000000000fe185: and [rbp-0x32], dh; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x0000000018bbc7: and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000188a28: and [rbp-0x3a], dh; lea rax, [rdi+rax+0x20]; ret; 
0x0000000008aabc: and [rbp-0x77cffea], bl; add [rdi+0x1b], edi; mov eax, r12d; pop r12; ret; 
0x0000000012e51c: and [rbp-0x77cfff4], cl; add [rdi+0x2b], edi; pop rbp; ret; 
0x0000000014247e: and [rbp-0x7c], al; push qword ptr [rcx+rcx-0x75]; jl short 0x00000000001424ab; sub al, 0xe8; ret; 
0x0000000016f64b: and [rbp-0xc], ecx; jmp qword ptr [rsi+0x2e]; 
0x00000000128d4e: and [rbx*2-0x3fce128a], edi; ret; 
0x00000000075d8a: and [rbx+0x107729f8], al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000013910e: and [rbx+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000127d07: and [rbx+0x33740aff], al; mov rax, [rip+0xc50fc]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x0000000007ea8d: and [rbx+0x5d], bl; mov eax, r12d; pop r12; ret; 
0x0000000003f57d: and [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000083120: and [rbx+0x5d], bl; pop r12; ret; 
0x00000000135a09: and [rbx+0x5d], bl; pop r13; pop r14; pop r15; ret; 
0x00000000086f40: and [rbx+0xa7401fa], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000115d6c: and [rbx+rax+0x158d4800], bh; mov [rcx], edx; add al, 0x0; cmovne rax, rdx; ret; 
0x0000000007cf1a: and [rbx+rcx*4+0x6d], cl; sbb [rax-0x77], cl; ret far; 
0x000000000412b1: and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x00000000110c09: and [rbx-0x2e8cfe13], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000e7d34: and [rbx-0x7cb7fe40], al; ret; 
0x000000001055db: and [rbx], al; add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105653: and [rbx], al; add [rax], al; ret; 
0x000000001782c8: and [rbx], bh; cmp r12b, [rax]; jne 0x0000000000178111; vzeroupper; ret; 
0x000000001782c6: and [rbx], bh; cmp r12b, [rax]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c07a: and [rbx], bh; cmp r12b, [rax]; jne 0x000000000018be07; ret; 
0x0000000018c078: and [rbx], bh; cmp r12b, [rax]; jne 0x000000000018be07; ret; 
0x00000000085cab: and [rcx+0x52], al; call rax; 
0x0000000010914b: and [rcx+0x5c], al; ret; 
0x000000000b222c: and [rcx+0x634b000f], al; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b9c8b: and [rcx+0xf], bl; add al, ch; jl short 0x00000000000b9c9a; clc; jmp qword ptr [rsi+0x66]; 
0x00000000108a3f: and [rcx+0xfffe2], al; add [rip-0x1000], ah; or eax, edx; ret; 
0x000000000d441e: and [rcx+rcx*4+0x2b], esp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000139023: and [rcx+rcx*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000011b5b2: and [rcx+rcx*4-0x17], cl; mov rsi, [rsp+0x18]; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000011b112: and [rcx+rcx*4-0x17], cl; mov rsi, [rsp+0x18]; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000013e08d: and [rcx+rcx*4-0x19], cl; call rcx; 
0x000000000c148e: and [rcx+rcx*4-0x19], cl; mov rsi, [rsp+0x18]; call rbx; 
0x000000000d6221: and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000007743a: and [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x000000000c6ff7: and [rcx+rcx*4-0x2], cl; call rax; 
0x0000000003f841: and [rcx+rcx*4-0x30], cl; ret; 
0x0000000013b4aa: and [rcx-0x39feb70a], cl; cmp rsi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x00000000139717: and [rcx-0x75], cl; and al, 0x8; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000004f475: and [rcx-0x7d], cl; ret; 
0x00000000185f70: and [rcx], ah; enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000009aea8: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009aeb8; ret; 
0x0000000009af18: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009af28; ret; 
0x0000000009b148: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009b158; ret; 
0x0000000009bac8: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009bad8; ret; 
0x0000000009d368: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009d378; ret; 
0x0000000009d3e8: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x000000000009d3f8; ret; 
0x000000000a16b8: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000a16c8; ret; 
0x000000000b4ec8: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b4ed8; ret; 
0x000000000b4f38: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b4f48; ret; 
0x000000000b5128: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b5138; ret; 
0x000000000b5228: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b5238; ret; 
0x000000000b5478: and [rcx], al; add [rax], al; cmp esi, 0x120; je short 0x00000000000b5488; ret; 
0x0000000009aeae: and [rcx], al; add [rax], al; je short 0x000000000009aeb8; ret; 
0x0000000009af1e: and [rcx], al; add [rax], al; je short 0x000000000009af28; ret; 
0x0000000009b14e: and [rcx], al; add [rax], al; je short 0x000000000009b158; ret; 
0x0000000009bace: and [rcx], al; add [rax], al; je short 0x000000000009bad8; ret; 
0x0000000009d36e: and [rcx], al; add [rax], al; je short 0x000000000009d378; ret; 
0x0000000009d3ee: and [rcx], al; add [rax], al; je short 0x000000000009d3f8; ret; 
0x000000000a16be: and [rcx], al; add [rax], al; je short 0x00000000000a16c8; ret; 
0x000000000b4ece: and [rcx], al; add [rax], al; je short 0x00000000000b4ed8; ret; 
0x000000000b4f3e: and [rcx], al; add [rax], al; je short 0x00000000000b4f48; ret; 
0x000000000b512e: and [rcx], al; add [rax], al; je short 0x00000000000b5138; ret; 
0x000000000b522e: and [rcx], al; add [rax], al; je short 0x00000000000b5238; ret; 
0x000000000b547e: and [rcx], al; add [rax], al; je short 0x00000000000b5488; ret; 
0x000000000fad4b: and [rcx], al; add [rax], al; pop rbp; ret; 
0x0000000010ad10: and [rcx], al; add [rax], al; syscall; 
0x0000000007d074: and [rcx], al; add [rax], al; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000d6ec3: and [rcx], al; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000017085d: and [rcx], ch; enter 0xf8c5, 0x77; ret; 
0x0000000006e2f8: and [rcx], ch; ret; 
0x0000000014ae2e: and [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000083693: and [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000001390fb: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139080: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000109184: and [rcx], eax; add [rax], al; mov edx, 0x8; syscall; 
0x00000000178f28: and [rcx], eax; clc; shr eax, 0x2; vzeroupper; ret; 
0x00000000174268: and [rcx], eax; clc; vzeroupper; ret; 
0x00000000174426: and [rcx], eax; enter 0xf8c5, 0x77; ret; 
0x000000000f6f74: and [rdi+0x19], esi; movzx eax, al; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000b4b71: and [rdi+0xc], dh; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x00000000131e99: and [rdi+rax*8], ah; sbb eax, 0xb8000000; sbb eax, 0x5b000000; ret; 
0x0000000014d029: and [rdi+rax*8], edx; xor eax, eax; ret; 
0x0000000014d028: and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x00000000093eeb: and [rdi-0x2708ffeb], ecx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009bc4c: and [rdi-0x72b7fff5], al; adc eax, 0xbdd89; cmovne rax, rdx; ret; 
0x00000000187409: and [rdi], bh; ret; 
0x0000000018bec7: and [rdi], bl; ret; 
0x000000000d2acf: and [rdi], cl; adc [rbx], eax; add rsp, 0xd0; pop rbx; ret; 
0x000000000f8130: and [rdi], cl; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret; 
0x000000000b471e: and [rdi], cl; adc [rdi+0x30], edi; movups [r11], xmm8; ret; 
0x000000000fadb4: and [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000cddc6: and [rdi], cl; and dword ptr [rbx+0x48fffff6], 0x1; ret; 
0x00000000189143: and [rdi], cl; mov dh, 0x54; cmp ah, [rax]; sub eax, edx; ret; 
0x000000000b1c8d: and [rdi], cl; test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b0529: and [rdi], cl; test [rax+0x4], edx; add [rax], al; ret; 
0x0000000017c45d: and [rdi], cl; test [rax+rax+0x40a80000], edi; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x000000000dc9dd: and [rdi], cl; test [rsi+rsi*8-0x1], ch; dec dword ptr [rcx-0x16e7dbbc]; ret far; 
0x000000000b4af1: and [rdi], cl; xchg [rcx-0xd000000], edx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x0000000003d54b: and [rdi], dl; add cl, ch; ret; 
0x00000000041c50: and [rdi], eax; xor eax, eax; ret; 
0x00000000084eee: and [rdi], ecx; mov dh, 0x0; ret; 
0x00000000132d52: and [rdi], ecx; test [rdi+0x21000001], dl; fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x00000000041c4f: and [rdi], rax; xor eax, eax; ret; 
0x00000000087aec: and [rdx+0x10], ecx; pop rbx; ret; 
0x00000000087aeb: and [rdx+0x10], rcx; pop rbx; ret; 
0x000000000b5ac0: and [rdx+0x1], ch; xor r8d, r8d; push 0x0; lea r9, [rsp+0x20]; call r13; 
0x0000000010e333: and [rdx+0x64e8000e], eax; test edi, esi; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000017c0c8: and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x000000000b4e2a: and [rdx], al; add [rax], al; ret; 
0x0000000009319b: and [rdx], edx; add al, ch; insd [rdi], dx; jae short 0x000000000009319c; jmp qword ptr [rsi+0x66]; 
0x000000001098eb: and [rip-0x389bfff2], esi; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000742cb: and [rip-0x76b40000], ecx; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000001418fb: and [rsi+0x4], bh; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x000000000a50b2: and [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x0000000018b68e: and [rsi+0xf], dh; test eax, eax; je short 0x000000000018b700; tzcnt eax, eax; ret; 
0x00000000158196: and [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000186144: and [rsi], bh; ret; 
0x0000000009c2ba: and [rsi], cl; add [rax-0x73], cl; add eax, 0xe212c; cmove rax, rdx; ret; 
0x0000000010ad7c: and [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000b035b: and [rsi], eax; add [rax], al; ret; 
0x00000000158017: and [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000012427b: and [rsi], esp; idiv bh; nop; ret; 
0x00000000101491: and [rsp+rbp*8-0x3a], dh; inc dword ptr [rax]; mov rax, r8; ret; 
0x000000001144e1: and [rsp+rcx+0x5b], dh; ret; 
0x0000000014253a: and ah, [rdx+0x4864000b]; mov [rax], edx; ret; 
0x0000000007e89e: and ah, bl; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000acc61: and al, 0x0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000009d7b4: and al, 0x0; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000007b08e: and al, 0x0; add [rax], al; call qword ptr [rax+0x68]; 
0x000000000fc38f: and al, 0x0; add [rax], al; mov eax, 0x1; pop rbx; ret; 
0x0000000007b1a7: and al, 0x0; add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000007d1cb: and al, 0x0; add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x000000000c9b61: and al, 0x0; add [rax], al; syscall; 
0x000000000d8402: and al, 0x0; add [rbp+0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000a7a55: and al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000010048a: and al, 0x0; mov rax, r12; pop r12; ret; 
0x0000000003750f: and al, 0x0; pop rbx; pop rbp; pop r12; ret; 
0x00000000142c98: and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000073c91: and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x0000000002ce0d: and al, 0x10; add [rdx+rbx+0x48], dh; mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000085e9f: and al, 0x10; add rsp, 0x28; ret; 
0x0000000013ff27: and al, 0x10; call qword ptr [rax+0x10]; 
0x00000000139420: and al, 0x10; call qword ptr [rax]; 
0x000000001182bd: and al, 0x10; call qword ptr [rsp+0x58]; 
0x0000000005c01d: and al, 0x10; call rax; 
0x0000000007dcc7: and al, 0x10; call rbp; 
0x000000000401b6: and al, 0x10; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000013ff44: and al, 0x10; lea rdx, [rip+0x6ebd2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000a1543: and al, 0x10; mov [rax], rdx; ret; 
0x000000000a15f3: and al, 0x10; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x0000000002d379: and al, 0x10; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x000000000d681e: and al, 0x10; mov eax, 0x3d; syscall; 
0x0000000010b0c6: and al, 0x10; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fe6: and al, 0x10; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000d68d8: and al, 0x10; mov eax, 0xf7; syscall; 
0x000000000f9bf6: and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x000000000fe025: and al, 0x10; mov edi, [rsp+0x8]; syscall; 
0x0000000010aea9: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e9: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x00000000141d08: and al, 0x10; mov edi, eax; call rbp; 
0x0000000004151c: and al, 0x10; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000000ff28d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x000000000ff32d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d6f: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000010a8fd: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a79d: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000f9ccf: and al, 0x10; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x0000000010a3ef: and al, 0x10; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000044a5e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b2e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda2e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000c1984: and al, 0x10; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x000000000866fb: and al, 0x10; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000013f94d: and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000010c69b: and al, 0x10; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6fc: and al, 0x10; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x00000000139050: and al, 0x10; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x0000000011a619: and al, 0x10; mov rcx, rbp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010e5a9: and al, 0x10; mov rcx, rbp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000013df7d: and al, 0x10; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000014ce1b: and al, 0x10; mov rdi, [rsp+0x18]; call rax; 
0x0000000014cdcf: and al, 0x10; mov rdi, [rsp+0x18]; call rcx; 
0x00000000083d28: and al, 0x10; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000008146d: and al, 0x10; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x000000000b5fac: and al, 0x10; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000011b11e: and al, 0x10; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000011f57e: and al, 0x10; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x00000000074124: and al, 0x10; mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000011110c: and al, 0x10; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000426ed: and al, 0x10; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000010911e: and al, 0x10; mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x0000000010adfe: and al, 0x10; mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x0000000010a703: and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x0000000010a855: and al, 0x10; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a635: and al, 0x10; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000013de78: and al, 0x10; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000040191: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x000000000940ac: and al, 0x10; syscall; 
0x0000000007caa5: and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000110fa0: and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax; 
0x0000000011995d: and al, 0x14; call qword ptr [rsp+0x58]; 
0x000000000a14fc: and al, 0x14; mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x00000000041fc9: and al, 0x14; mov edi, r12d; mov eax, 0x81; syscall; 
0x000000000903c3: and al, 0x14; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000009309d: and al, 0x14; mov rdx, r12; mov eax, 0x81; syscall; 
0x0000000002d1c6: and al, 0x14; mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000ff3e2: and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff492: and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000ffee3: and al, 0x14; syscall; 
0x000000000a1505: and al, 0x16; mov [rdi+0x6], dl; ret; 
0x00000000145be2: and al, 0x18; add [rax], al; add [rax], al; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000142ca0: and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18]; 
0x0000000006f4ce: and al, 0x18; add [rax], eax; add [rax], al; jmp rax; 
0x00000000142ccc: and al, 0x18; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x000000000fe4ad: and al, 0x18; add rsp, 0x28; ret; 
0x00000000085d94: and al, 0x18; add rsp, 0x38; ret; 
0x00000000142bad: and al, 0x18; call qword ptr [rax+0x18]; 
0x000000001398d9: and al, 0x18; call qword ptr [rax]; 
0x00000000030443: and al, 0x18; call rax; 
0x000000000b5fb5: and al, 0x18; call rbx; 
0x0000000014cdd5: and al, 0x18; call rcx; 
0x00000000114efe: and al, 0x18; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x000000000a1473: and al, 0x18; mov [rdi], rdx; add rax, rdi; ret; 
0x00000000144f85: and al, 0x18; mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000f9bfa: and al, 0x18; mov eax, 0x101; syscall; 
0x000000000fe48f: and al, 0x18; mov eax, 0x115; syscall; 
0x0000000010ad4f: and al, 0x18; mov eax, 0x120; syscall; 
0x0000000010a9bc: and al, 0x18; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010b00f: and al, 0x18; mov eax, 0x45; syscall; 
0x000000000ffedf: and al, 0x18; mov edi, [rsp+0x14]; syscall; 
0x0000000011b5b9: and al, 0x18; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x00000000109399: and al, 0x18; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000001182b3: and al, 0x18; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000141953: and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000014191c: and al, 0x18; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x00000000119954: and al, 0x18; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x000000001182af: and al, 0x18; mov r8, [rsp+0x18]; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000144f89: and al, 0x18; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000d3a06: and al, 0x18; mov rax, [rsp+0x10]; call rax; 
0x000000000c1322: and al, 0x18; mov rcx, r13; mov rdx, rbp; call rbx; 
0x000000000c1989: and al, 0x18; mov rdi, [rax]; call r13; 
0x0000000011b119: and al, 0x18; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000013de66: and al, 0x18; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000000b6541: and al, 0x18; mov rdi, rbp; mov r9, r15; call rbx; 
0x0000000002d1cb: and al, 0x18; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000b6231: and al, 0x18; mov rdx, r14; mov rdi, rbp; call rbx; 
0x0000000013941b: and al, 0x18; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010b0c1: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fe1: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000309d1: and al, 0x18; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x0000000011a152: and al, 0x18; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x0000000002dce8: and al, 0x18; xor r8d, r8d; call rbx; 
0x000000000b6a0e: and al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000fa441: and al, 0x1; add [rax], al; syscall; 
0x000000000423e5: and al, 0x1; mov rdi, r12; call rbx; 
0x0000000013970d: and al, 0x1c; call qword ptr [rax]; 
0x000000000d68d3: and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000094199: and al, 0x1c; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x0000000014c362: and al, 0x1f; add [rbp-0x77], dh; and al, 0xc; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000110e99: and al, 0x1f; call qword ptr [r12+0x28]; 
0x00000000085982: and al, 0x1f; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c32e: and al, 0x1f; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x00000000145beb: and al, 0x20; add [rax], al; add [rax], al; call r8; 
0x0000000008598c: and al, 0x20; call qword ptr [r12+0x350]; 
0x0000000014c338: and al, 0x20; call qword ptr [rbx+0x350]; 
0x000000000b5aca: and al, 0x20; call r13; 
0x0000000002ff96: and al, 0x20; call rax; 
0x000000000b5932: and al, 0x20; call rbx; 
0x00000000110e95: and al, 0x20; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x000000000ffed5: and al, 0x20; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x000000001418fa: and al, 0x20; mov esi, 0x4; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000011994f: and al, 0x20; mov rcx, [rsp+0x18]; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x00000000031997: and al, 0x20; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345cf: and al, 0x20; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000118b92: and al, 0x20; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000013e08b: and al, 0x20; mov rdi, r12; call rcx; 
0x000000000c148d: and al, 0x20; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x000000000366cd: and al, 0x20; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x000000000d6220: and al, 0x20; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000c6ff5: and al, 0x20; mov rsi, r15; call rax; 
0x000000000d4710: and al, 0x20; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000999d0: and al, 0x24; add rsp, 0x50; mov rax, r12; pop r12; ret; 
0x0000000014c9cb: and al, 0x24; call rax; 
0x0000000014190c: and al, 0x28; add [rax], al; add [rax], al; call qword ptr [rax+0x28]; 
0x0000000014c347: and al, 0x28; add [rbp+0x6], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000731b0: and al, 0x28; and [rax], al; add [rax], al; jmp rax; 
0x0000000014c36e: and al, 0x28; call qword ptr [rbx+0x358]; 
0x000000000309e0: and al, 0x28; call rax; 
0x000000000b57f7: and al, 0x28; call rbx; 
0x000000000fb9a7: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf7: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc77: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x000000000fc11a: and al, 0x28; lea rcx, [rsp+0x38]; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000085987: and al, 0x28; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c333: and al, 0x28; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x0000000010950b: and al, 0x28; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000fe01b: and al, 0x28; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000014c9c1: and al, 0x28; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x00000000085eba: and al, 0x28; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x0000000013de99: and al, 0x28; mov rdi, r12; call rcx; 
0x00000000130d02: and al, 0x28; mov rdx, [rsp+0xa0]; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x0000000011f8f3: and al, 0x28; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000001448fb: and al, 0x2; add [rax], al; add [rax-0x77], cl; out 0x41, eax; call rax; 
0x00000000088596: and al, 0x2; xor eax, eax; ret; 
0x00000000142d1a: and al, 0x30; add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c2a: and al, 0x30; add al, 0x0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c6a: and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000142bea: and al, 0x30; add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000139d45: and al, 0x30; call qword ptr [rax]; 
0x000000000942d2: and al, 0x30; mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x00000000093dc9: and al, 0x30; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000013de95: and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x0000000007c9d5: and al, 0x30; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000011b5bd: and al, 0x30; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000314f1: and al, 0x30; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000033e7b: and al, 0x30; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000003199c: and al, 0x30; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d4: and al, 0x30; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000100577: and al, 0x30; sldt [rbx]; and al, 0x38; add rsp, 0x48; ret; 
0x0000000004178e: and al, 0x31; ror byte ptr [rax-0x7d], 0xec; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000074a81: and al, 0x34; add [rax], eax; add [rax], al; jmp rax; 
0x0000000006f4b9: and al, 0x38; add [rax], eax; add [rax], al; jmp rax; 
0x0000000010057f: and al, 0x38; add rsp, 0x48; ret; 
0x00000000119959: and al, 0x38; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x00000000085da9: and al, 0x38; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x000000001412bc: and al, 0x38; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000003323e: and al, 0x38; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x00000000032546: and al, 0x38; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x000000000fc11e: and al, 0x38; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000119087: and al, 0x38; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x00000000142ba9: and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000fbf30: and al, 0x38; movzx eax, al; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x000000001396fd: and al, 0x38; push qword ptr [rip+0x7fc83]; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000093dd3: and al, 0x38; syscall; 
0x00000000093dd4: and al, 0x38; syscall; 
0x0000000013a867: and al, 0x3; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000142450: and al, 0x3a; call qword ptr [rax]; 
0x0000000006ecfb: and al, 0x40; add [rax], eax; add [rax], al; jmp rax; 
0x000000000c734c: and al, 0x40; call qword ptr [rax+0x338]; 
0x000000000366d8: and al, 0x40; call r15; 
0x00000000036834: and al, 0x40; lea r8, [rsp+0x98]; call r15; 
0x000000000942ce: and al, 0x40; mov [rsp+0x30], eax; mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x00000000033249: and al, 0x40; mov rax, [rsp+0x28]; call rax; 
0x0000000013e087: and al, 0x40; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140e47: and al, 0x40; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x000000001182b8: and al, 0x40; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000314f7: and al, 0x40; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000070159: and al, 0x40; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000142d69: and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000ffe7a: and al, 0x40; test eax, eax; jne short 0x00000000000ffea0; mov eax, 0x10e; syscall; 
0x0000000014be47: and al, 0x40; test rax, rax; je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x000000000fa508: and al, 0x41; mov eax, eax; mov eax, 0x55; syscall; 
0x000000001095ac: and al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000010a4bc: and al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000009d6c4: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000e0f12: and al, 0x41; pop rsp; ret; 
0x0000000012e29b: and al, 0x44; mov eax, eax; ret; 
0x000000001390e7: and al, 0x45; test edi, edi; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000f8740: and al, 0x48; add [rax], eax; add [rax+0xe], bh; syscall; 
0x00000000083768: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x00000000040fa5: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000f8f68: and al, 0x48; add esp, 0x18; ret; 
0x0000000010a65d: and al, 0x48; add esp, 0x20; pop r12; ret; 
0x000000000d22f4: and al, 0x48; add esp, 0x28; neg eax; ret; 
0x0000000007650b: and al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000f7fee: and al, 0x48; add esp, 0x28; ret; 
0x0000000010a723: and al, 0x48; add esp, 0x30; pop r12; ret; 
0x00000000192062: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x0000000010c6a5: and al, 0x48; add esp, 0x38; ret; 
0x0000000010c706: and al, 0x48; add esp, 0x40; ret; 
0x000000000999d2: and al, 0x48; add esp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000ffefc: and al, 0x48; add esp, 0x50; pop r12; ret; 
0x000000000fa1ec: and al, 0x48; add esp, 0x68; ret; 
0x0000000012f16b: and al, 0x48; add esp, 0x8; ret; 
0x0000000013f952: and al, 0x48; call qword ptr [rax+0x28]; 
0x00000000118b97: and al, 0x48; call qword ptr [rsp+0x68]; 
0x00000000032551: and al, 0x48; call r15; 
0x0000000002d3c4: and al, 0x48; lea edi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3ab: and al, 0x48; lea edi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x00000000103e3f: and al, 0x48; mov [rsp+0x10], ebx; call rax; 
0x00000000085ad2: and al, 0x48; mov [rsp+0x8], esi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x0000000014c2bd: and al, 0x48; mov eax, [rax+0x330]; jmp rax; 
0x0000000005c01a: and al, 0x48; mov eax, [rsp+0x10]; call rax; 
0x0000000014a184: and al, 0x48; mov eax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x000000000fa62d: and al, 0x48; mov edi, [rsp]; mov eax, 0x4f; syscall; 
0x0000000008161a: and al, 0x48; mov edi, ebp; call rax; 
0x00000000083b8b: and al, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000080c8b: and al, 0x48; mov edi, ebx; call qword ptr [rbp+0x80]; 
0x0000000011f07a: and al, 0x48; mov edi, ebx; call rax; 
0x00000000140e4c: and al, 0x48; mov edi, ebx; call rcx; 
0x0000000013a29f: and al, 0x48; mov edi, ebx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x00000000123593: and al, 0x48; mov edx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000072fbd: and al, 0x48; mov edx, ebx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000d4ad1: and al, 0x48; mov esi, ebp; call qword ptr [rsp+0x48]; 
0x00000000139038: and al, 0x48; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000314fc: and al, 0x48; mov rax, [rsp+0x20]; call rax; 
0x000000000366d3: and al, 0x48; mov rdi, [rsp+0x40]; call r15; 
0x0000000003682f: and al, 0x48; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000033244: and al, 0x48; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x000000000c6bb2: and al, 0x48; mov rsi, rdx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x000000000f6669: and al, 0x48; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000012774b: and al, 0x4; add rsp, 0x18; ret; 
0x00000000109145: and al, 0x4; add rsp, 0x20; pop r12; ret; 
0x0000000010ae25: and al, 0x4; add rsp, 0x28; ret; 
0x0000000013f1e8: and al, 0x4; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000010912c: and al, 0x4; syscall; 
0x0000000006f569: and al, 0x4c; add [rax], eax; add [rax], al; jmp rax; 
0x000000000b57f4: and al, 0x4c; lea ecx, [rsp+0x28]; call rbx; 
0x00000000125a53: and al, 0x4c; mov edi, esi; call rdx; 
0x0000000012540e: and al, 0x4c; mov edi, esp; call rax; 
0x00000000042a33: and al, 0x4c; mov edi, esp; call rcx; 
0x0000000006dcf1: and al, 0x4c; mov edx, ebp; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000428b4: and al, 0x4c; mov edx, esi; mov rax, [rsp+0x8]; call rax; 
0x00000000139176: and al, 0x4c; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000042302: and al, 0x4c; mov esi, edi; call r14; 
0x00000000074941: and al, 0x50; add [rax], eax; add [rax], al; jmp rax; 
0x0000000013906e: and al, 0x50; call qword ptr [rax+0x20]; 
0x000000000366c8: and al, 0x50; mov rcx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000003254c: and al, 0x50; mov rdi, [rsp+0x48]; call r15; 
0x00000000033e81: and al, 0x50; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000002ff8d: and al, 0x50; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309d7: and al, 0x50; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x000000000942dc: and al, 0x50; syscall; 
0x0000000006f6a1: and al, 0x58; add [rax], eax; add [rax], al; jmp rax; 
0x000000000ed351: and al, 0x58; add ch, al; and di, di; dec dword ptr [rax-0x77]; ret; 
0x000000000319a7: and al, 0x58; call r14; 
0x0000000002ff92: and al, 0x58; mov rax, [rsp+0x20]; call rax; 
0x000000000309dc: and al, 0x58; mov rax, [rsp+0x28]; call rax; 
0x00000000140e2b: and al, 0x58; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000003043a: and al, 0x58; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f40: and al, 0x58; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x0000000013fa7c: and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000000c6bba: and al, 0x58; mov rdi, rbp; call rbx; 
0x000000000c6bb9: and al, 0x58; mov rdi, rbp; call rbx; 
0x000000000c6cb5: and al, 0x58; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000c6cb4: and al, 0x58; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000c7b53: and al, 0x5b; pop rbp; pop r12; ret; 
0x0000000009e13b: and al, 0x5d; pop r12; pop r13; pop r14; ret; 
0x0000000008421b: and al, 0x5d; ret; 
0x00000000089797: and al, 0x60; add [rax], al; add [rax], al; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000731a8: and al, 0x60; add [rax], al; add [rax], al; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000074919: and al, 0x60; add [rax], eax; add [rax], al; jmp rax; 
0x000000000d3788: and al, 0x60; call r12; 
0x000000000345df: and al, 0x60; call r13; 
0x00000000114e3c: and al, 0x60; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x000000000c71fe: and al, 0x60; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x0000000013f14c: and al, 0x60; mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000003043f: and al, 0x60; mov rax, [rsp+0x18]; call rax; 
0x00000000030f45: and al, 0x60; mov rax, [rsp+0x20]; call rax; 
0x000000000319a2: and al, 0x60; mov rdi, [rsp+0x58]; call r14; 
0x0000000006f559: and al, 0x64; add [rax], eax; add [rax], al; jmp rax; 
0x000000000b3d6c: and al, 0x67; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000074931: and al, 0x68; add [rax], eax; add [rax], al; jmp rax; 
0x000000000345da: and al, 0x68; mov rdi, [rsp+0x60]; call r13; 
0x000000000d3780: and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000030435: and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f3b: and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x00000000139167: and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000013e02f: and al, 0x68; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000157d17: and al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000089ec1: and al, 0x6f; add [rax-0x77], cl; fidivr st, dword ptr [rax+0xe]; lea rsi, [rip+0x11f52c]; syscall; 
0x000000000b5e76: and al, 0x70; call rbx; 
0x00000000139415: and al, 0x70; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000014983b: and al, 0x72; mov [0xffff65e924048b49], al; jmp qword ptr [rsi+0xf]; 
0x0000000004dfae: and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret; 
0x00000000139410: and al, 0x78; mov r8, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x00000000140e0c: and al, 0x78; mov rdi, rbx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x000000000b0258: and al, 0x7; add [rax], al; ret; 
0x0000000005c014: and al, 0x7; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x000000000324da: and al, 0x80; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000e9947: and al, 0x80; add al, [rax]; add [rax-0x73], cl; ret; 
0x00000000101e63: and al, 0x83; ret; 
0x000000000e377e: and al, 0x85; rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret; 
0x0000000004e807: and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000006e473: and al, 0x88; add [rax], al; add al, ch; ret; 
0x00000000041b77: and al, 0x88; add [rax], al; add bl, ch; ret far; 
0x000000000b6b0c: and al, 0x89; ret; 
0x00000000123935: and al, 0x8; add [rax], al; add [rax], al; call rax; 
0x00000000123597: and al, 0x8; add rsp, 0x10; pop rbp; ret; 
0x000000000441a3: and al, 0x8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae7e: and al, 0x8; add rsp, 0x18; ret; 
0x00000000083d2d: and al, 0x8; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000044a86: and al, 0x8; add rsp, 0x28; ret; 
0x000000000fe044: and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x000000000fdb2b: and al, 0x8; add rsp, 0x30; pop r13; ret; 
0x0000000002d6d4: and al, 0x8; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000009400a: and al, 0x8; add rsp, 0x38; ret; 
0x0000000007c7bb: and al, 0x8; call qword ptr [rax+0x18]; 
0x000000001452f7: and al, 0x8; call qword ptr [rax+0x40]; 
0x00000000145359: and al, 0x8; call qword ptr [rax+0x48]; 
0x0000000013b35f: and al, 0x8; call qword ptr [rax]; 
0x0000000002ce15: and al, 0x8; call qword ptr [rsp]; 
0x0000000002d1d2: and al, 0x8; call rax; 
0x0000000011f58a: and al, 0x8; call rbp; 
0x0000000002d37d: and al, 0x8; cmovne rdi, r15; call rsi; 
0x000000000806bc: and al, 0x8; cmp qword ptr [rax+0x30], 0x0; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x000000000403ba: and al, 0x8; fadd st, st(0); ret; 
0x0000000004031a: and al, 0x8; fscale; fstp st(1), st; ret; 
0x0000000004028c: and al, 0x8; fsubrp; ret; 
0x0000000005c010: and al, 0x8; mov [rsp+0x7], r9b; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x0000000013b37e: and al, 0x8; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000010939d: and al, 0x8; mov eax, 0x114; syscall; 
0x00000000109123: and al, 0x8; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x000000000fe53e: and al, 0x8; mov eax, 0x11d; syscall; 
0x000000000ff3e7: and al, 0x8; mov eax, 0x127; syscall; 
0x000000000ff497: and al, 0x8; mov eax, 0x128; syscall; 
0x0000000010ae03: and al, 0x8; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000001095b2: and al, 0x8; mov eax, 0x130; syscall; 
0x000000000ff294: and al, 0x8; mov eax, 0x13; syscall; 
0x00000000044a66: and al, 0x8; mov eax, 0x13e; syscall; 
0x000000000ff334: and al, 0x8; mov eax, 0x14; syscall; 
0x000000000f9d76: and al, 0x8; mov eax, 0x1; syscall; 
0x00000000102b36: and al, 0x8; mov eax, 0x1a; syscall; 
0x0000000010a4c2: and al, 0x8; mov eax, 0x2a; syscall; 
0x0000000010a904: and al, 0x8; mov eax, 0x2e; syscall; 
0x0000000010a7a4: and al, 0x8; mov eax, 0x2f; syscall; 
0x00000000108fb9: and al, 0x8; mov eax, 0x38; syscall; 
0x000000000fa1ce: and al, 0x8; mov eax, 0x48; syscall; 
0x000000000fda36: and al, 0x8; mov eax, 0x7; syscall; 
0x000000000d681a: and al, 0x8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe48b: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad4b: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b00b: and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x0000000010944a: and al, 0x8; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fcb: and al, 0x8; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f807b: and al, 0x8; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x00000000089753: and al, 0x8; mov esi, 0x18; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x000000000416e9: and al, 0x8; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000013ab86: and al, 0x8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000013b382: and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144b3b: and al, 0x8; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000144c0b: and al, 0x8; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x0000000010c69f: and al, 0x8; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c700: and al, 0x8; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000014be64: and al, 0x8; mov rax, [rsp]; mov esi, 0x40; mov rdi, r12; call rax; 
0x00000000125408: and al, 0x8; mov rax, [rsp]; mov rdi, r12; call rax; 
0x00000000130a35: and al, 0x8; mov rcx, rax; call r12; 
0x00000000085ad6: and al, 0x8; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x0000000011a157: and al, 0x8; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000866f6: and al, 0x8; mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000013971a: and al, 0x8; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000007cb00: and al, 0x8; mov rdi, r15; call rax; 
0x0000000007b03c: and al, 0x8; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x00000000138e37: and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013b425: and al, 0x8; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000144b04: and al, 0x8; mov rdi, rbp; call qword ptr [rax]; 
0x00000000139054: and al, 0x8; mov rdi, rbp; call rcx; 
0x000000000d377a: and al, 0x8; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x000000000fdb0a: and al, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000110a95: and al, 0x8; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12; 
0x00000000042847: and al, 0x8; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000423f7: and al, 0x8; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000006f022: and al, 0x8; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e62e: and al, 0x8; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000009409f: and al, 0x8; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000000d5ef1: and al, 0x8; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000002d2fc: and al, 0x8; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x000000000429dd: and al, 0x8; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000081d25: and al, 0x8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000ffd96: and al, 0x8; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000401bb: and al, 0x8; ret; 
0x0000000012494c: and al, 0x8; sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x00000000093fef: and al, 0x8; syscall; 
0x0000000013241b: and al, 0x8; test rdi, rdi; jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x000000000f9cd6: and al, 0x8; xor eax, eax; syscall; 
0x0000000010a85a: and al, 0x8; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a63a: and al, 0x8; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000031924: and al, 0x90; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000e9295: and al, 0x98; add [rax], al; add [rax+0x63], cl; ret; 
0x0000000009e384: and al, 0x98; add [rax], al; add [rbx-0x7ab7dbbc], cl; ror byte ptr [rdi], 0x85; ret far; 
0x000000000b4fa8: and al, 0x9; add [rax], eax; cmovne rax, rdx; ret; 
0x0000000004f0cd: and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret; 
0x000000000e7289: and al, 0xa0; add [rax], al; add [rbp-0x7b], al; ror byte ptr [rdi], 0x8e; ret far; 
0x000000000d2ce8: and al, 0xa1; adc [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000deb70: and al, 0xa4; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000009ed97: and al, 0xa8; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000eb8f3: and al, 0xb0; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000fe613: and al, 0xb0; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000100690: and al, 0xb0; ret; 
0x000000000e868c: and al, 0xb4; add [rax], eax; add [rcx], bh; ret; 
0x000000000fe646: and al, 0xb4; jne short 0x00000000000fe605; neg eax; ret; 
0x000000000f7fcf: and al, 0xb8; adc [rax], eax; add [rax], al; syscall; 
0x000000000f807f: and al, 0xb8; adc al, [rax]; add [rax], al; syscall; 
0x0000000008a027: and al, 0xb8; add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x000000000eb02b: and al, 0xb8; add [rax], al; add cl, al; call far fword ptr [rax]; 
0x0000000010065d: and al, 0xb8; or [rax], al; add [rax], al; syscall; 
0x000000000d22dd: and al, 0xb8; out 0x0, al; add [rax], al; syscall; 
0x0000000010a6fa: and al, 0xb8; sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000014a53d: and al, 0xb; add al, ch; ret far; 
0x0000000014be69: and al, 0xbe; add [rax], al; add [rcx+rcx*4-0x19], cl; call rax; 
0x000000000e894b: and al, 0xc0; add [rax], al; add al, ch; ret far; 
0x0000000010b234: and al, 0xc0; lea rax, [rsp-0x30]; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x000000000f3def: and al, 0xc2; pop rbx; pop rbp; pop r12; ret; 
0x00000000139d3e: and al, 0xc8; add [rax], al; add [rbp+rcx*4+0x4c], cl; and al, 0x30; call qword ptr [rax]; 
0x000000000fe5ee: and al, 0xc8; cmp esi, 0x9; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x0000000010b23e: and al, 0xc8; mov eax, 0x42; syscall; 
0x00000000100654: and al, 0xc8; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000fea26: and al, 0xc8; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x0000000008c179: and al, 0xc; add [rax], al; add [rax], al; mov eax, 0xca; syscall; 
0x000000000b5555: and al, 0xc; add [rbp-0x5a], dh; ret; 
0x00000000141ec3: and al, 0xc; add [rcx], ebx; rol byte ptr [rbx-0x177cfd20], 0x1; add rsp, 0x18; ret; 
0x000000000f917f: and al, 0xc; add rsp, 0x10; pop rbp; ret; 
0x000000000441e5: and al, 0xc; add rsp, 0x18; ret; 
0x000000000d68f6: and al, 0xc; add rsp, 0x28; ret; 
0x0000000014c377: and al, 0xc; add rsp, 0x30; pop rbx; ret; 
0x000000000f9ab9: and al, 0xc; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c18: and al, 0xc; add rsp, 0x78; ret; 
0x0000000014556f: and al, 0xc; call qword ptr [rax+0x40]; 
0x000000000a15a9: and al, 0xc; mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a168e: and al, 0xc; mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a14e4: and al, 0xc; mov [rdi+0x4], dx; ret; 
0x00000000145596: and al, 0xc; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000010aead: and al, 0xc; mov eax, 0x133; syscall; 
0x0000000010a3f6: and al, 0xc; mov eax, 0x2b; syscall; 
0x000000001092ed: and al, 0xc; mov eax, 0xe8; syscall; 
0x000000000fe53a: and al, 0xc; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000d22d9: and al, 0xc; mov edi, [rsp]; mov eax, 0xe6; syscall; 
0x000000001419d3: and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000000fa37f: and al, 0xc; mov r8d, eax; mov eax, 0x3; syscall; 
0x000000000fffcf: and al, 0xc; mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000010008f: and al, 0xc; mov r8d, eax; mov eax, 0x4b; syscall; 
0x000000000fa1c7: and al, 0xc; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000145599: and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000014534c: and al, 0xc; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000145434: and al, 0xc; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x0000000014c368: and al, 0xc; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000083763: and al, 0xc; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000fa503: and al, 0xc; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x00000000103e36: and al, 0xc; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x00000000145307: and al, 0xc; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145377: and al, 0xc; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000011f8a8: and al, 0xca; add al, [rax]; mov rdi, r12; call rbp; 
0x0000000003c56d: and al, 0xd0; add [rax], al; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x0000000010b239: and al, 0xd0; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x000000001097e4: and al, 0xe0; mov [rsp-0x18], rcx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x0000000004025d: and al, 0xe8; add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000402d4: and al, 0xe8; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000a1592: and al, 0xe8; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x00000000040382: and al, 0xe8; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001097e8: and al, 0xe8; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000052204: and al, 0xe8; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040e3a: and al, 0xe8; mov al, [0x5b10c483480014f0]; ret; 
0x00000000117be2: and al, 0xe8; mov eax, 0x83; syscall; 
0x0000000011e071: and al, 0xe8; mov ecx, 0x48ffffeb; add esp, 0x18; ret; 
0x0000000014397c: and al, 0xe8; mov esi, 0x85ffff6b; shl byte ptr [rdx+rdi+0x48], 0x8b; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000000440ff: and al, 0xe8; ret far; 
0x0000000004021a: and al, 0xe8; ret; 
0x000000000f5e50: and al, 0xe9; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x000000000fe9d3: and al, 0xe9; mov rdx, r8; mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x0000000009be9a: and al, 0xe; add [rax-0x73], cl; add eax, 0xe252c; cmove rax, rdx; ret; 
0x0000000010a934: and al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000a15b2: and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000a1697: and al, 0xe; mov [rdi+0x6], dl; ret; 
0x000000000fe9d9: and al, 0xeb; mov eax, 0x10; syscall; 
0x000000000a1599: and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000a1676: and al, 0xec; mov [rdi+0x4], dx; ret; 
0x00000000040bb1: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000402cf: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040386: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040213: and al, 0xf0; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000c6a20: and al, 0xf0; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000a1582: and al, 0xf0; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000001097ed: and al, 0xf0; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000040258: and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000055238: and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000c6a26: and al, 0xf0; movsd xmm0, [rsp-0x10]; ret; 
0x000000000c6a2b: and al, 0xf0; ret; 
0x000000000a1589: and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000a14cc: and al, 0xf4; mov [rdi+0x4], dl; ret; 
0x000000000fe69a: and al, 0xf8; add cl, [rbx+0x75fc2444]; shl edi, 0xd8; ret; 
0x000000000a1563: and al, 0xf8; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000fe66b: and al, 0xf8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000008b195: and al, 0xf8; ret; 
0x000000000404b5: and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000008b183: and al, 0xf8; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000041518: and al, 0xf; adc [rsp+0x10], edi; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x000000000a156b: and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000000a14ae: and al, 0xfa; mov [rdi+0x2], dl; ret; 
0x000000000d4449: and al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000040315: and al, 0xfc; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x000000000fe69e: and al, 0xfc; jne short 0x00000000000fe664; neg eax; ret; 
0x00000000127ae9: and al, 0xfc; mov [r11], eax; mov eax, 0x1; ret; 
0x0000000004085c: and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000041119: and al, 0xfe; fldcw [rsp-0x2]; ret; 
0x0000000004111d: and al, 0xfe; ret; 
0x000000001871a4: and al, [rax+0x247701fa]; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x000000000410f1: and al, [rax]; add [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000040434: and al, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x00000000131e7e: and al, [rax]; add [rax], al; mov eax, 0x22; pop rbx; ret; 
0x00000000131e83: and al, [rax]; add [rax], al; pop rbx; ret; 
0x000000000d69bd: and al, [rax]; add [rax], al; syscall; 
0x000000000a7bfe: and al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000139112: and al, [rax]; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000013911c: and al, [rax]; add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x0000000013cbfa: and al, [rbx-0x3f7b0000]; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x000000000cd4f5: and al, [rcx-0x43]; sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x000000001091c1: and al, [rcx]; add [rax], al; syscall; 
0x0000000018b1fa: and al, [rdx]; add [rax], al; ret; 
0x00000000111b07: and al, ch; ret; 
0x00000000040252: and ax, 0x8000; mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000157e96: and ax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010b365: and bh, [rax+0x1f]; syscall; 
0x000000000d2d7a: and bh, [rbx]; sti; jmp qword ptr [rsi-0x70]; 
0x0000000018716d: and bh, [rcx-0x1]; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x00000000070d3a: and bh, al; add ch, [rip-0x7d000000]; ret; 
0x0000000006f4cc: and bh, al; and al, 0x18; add [rax], eax; add [rax], al; jmp rax; 
0x000000000940c1: and bh, bh; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x000000000d45c1: and bh, bl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000018d138: and bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000185d68: and bl, al; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000000a50e7: and bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x000000000b0837: and bl, al; nop [rax]; ret; 
0x00000000185eaf: and bl, al; xor eax, eax; ret; 
0x0000000008ae3b: and bl, ch; fwait; xchg ax, ax; mov eax, [rip+0x16996a]; ret; 
0x000000000b082b: and bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b082a: and bl, r14b; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b4e29: and byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000001055da: and byte ptr [rax], 0x3; add [rax], al; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105652: and byte ptr [rax], 0x3; add [rax], al; ret; 
0x00000000099efc: and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx; 
0x0000000009b9ef: and byte ptr [rcx+rax+0x48080000], 0x8d; add eax, 0x18394; cmove rax, rdx; ret; 
0x000000000ee140: and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0x0; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000018db8b: and byte ptr [rdx-0x5f], 0xc5; add bh, ch; jmp qword ptr [rsi+0x66]; 
0x00000000040255: and byte ptr [rsi-0x77], 0x44; and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000009b05e: and ch, 0x2; lea rax, [rip+0x8098]; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000007fc46: and ch, 0x7f; cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x000000000b54aa: and ch, 0x8; lea rdx, [rip+0xc294c]; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f63: and ch, 0x8; lea rdx, [rip+0xc3163]; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5153: and ch, 0x8; lea rdx, [rip+0xc33b3]; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5253: and ch, 0x8; lea rdx, [rip+0xc3a63]; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef3: and ch, 0x8; lea rdx, [rip+0xc3b43]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000a16e3: and ch, 0x8; lea rdx, [rip+0xcece3]; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x0000000009d39a: and ch, 0x8; lea rdx, [rip+0xd2ecc]; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009bafa: and ch, 0x8; lea rdx, [rip+0xd44bc]; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009d413: and ch, 0x8; lea rdx, [rip+0xd6a23]; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x0000000009b173: and ch, 0x8; lea rdx, [rip+0xd8ed3]; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed3: and ch, 0x8; lea rdx, [rip+0xd9343]; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af43: and ch, 0x8; lea rdx, [rip+0xd9453]; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x000000000c5f92: and ch, 0xf; je short 0x00000000000c5fb0; add rax, 0x2; ret; 
0x00000000170453: and ch, al; std; xlat [rbx]; ret; 
0x000000000c5f7d: and cl, 0xf; je short 0x00000000000c5fa0; ret; 
0x000000000b55e2: and cl, [rax+rax]; cmove rax, rdx; ret; 
0x00000000079a35: and cl, [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000014a0cd: and cl, [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000a532d: and cl, [rcx-0x77]; ret; 
0x000000000c51f9: and cl, ch; sar ebx, 0xff; call qword ptr [rax+0x166f0ff3]; 
0x000000000c53b9: and cl, ch; sar esi, 0xff; call qword ptr [rax+0xf6f0ff3]; 
0x000000001172a0: and dh, 0x20; lea rax, [rip+0x678f6]; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x000000000b55f0: and dh, 0x20; lea rax, [rip+0xc95b6]; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000001160e8: and dh, 0x2; lea rax, [rip+0x68b1e]; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009c144: and dh, 0x2; lea rax, [rip+0x9512]; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a4: and dh, 0x2; lea rax, [rip+0x95a2]; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb5f: and dh, 0x2; lea rax, [rip+0x96e7]; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009c194: and dh, 0x2; lea rax, [rip+0xb702]; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f4: and dh, 0x2; lea rax, [rip+0xb792]; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bd88: and dh, 0x2; lea rax, [rip+0xe2e8e]; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x000000000b550f: and dh, 0x2; lea rax, [rip+0xf1f7]; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x00000000117284: and dh, 0x8; lea rax, [rip-0x627fe]; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x000000000b55d4: and dh, 0x8; lea rax, [rip-0xb3e]; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x000000000ba088: and dh, bh; inc dword ptr [rbp+0x1]; dec dword ptr [rax-0x7d]; ret; 
0x0000000007ee7b: and dh, bl; cli; call qword ptr [rax+0x2000ba]; 
0x0000000004110f: and di, 0xf0c0; or edi, eax; mov [rsp-0x2], di; fldcw [rsp-0x2]; ret; 
0x000000000ed356: and di, di; dec dword ptr [rax-0x77]; ret; 
0x00000000070d39: and dil, al; add ch, [rip-0x7d000000]; ret; 
0x000000000cddc8: and dword ptr [rbx+0x48fffff6], 0x1; ret; 
0x0000000007b68c: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007b6e8: and dword ptr [rbx], 0xffffffef; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000087ac8: and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x000000000879c9: and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x0000000003a673: and dword ptr [rdi], 0x6348001b; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000008e584: and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x0000000008e5c8: and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x000000000806e0: and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000010a88b: and dword ptr [rip-0x2708fff2], 0x48028964; mov eax, 0xffffffff; ret; 
0x000000000f2f62: and eax, 0x0; add rax, fs:[0x0]; mov r9, rbx; mov r8, rax; call r14; 
0x000000000f2f6b: and eax, 0x0; mov r9, rbx; mov r8, rax; call r14; 
0x00000000131f5b: and eax, 0x0; mov rcx, r15; call rbp; 
0x0000000002d67b: and eax, 0x0; ret; 
0x0000000003a722: and eax, 0x1000; ret; 
0x0000000005b13c: and eax, 0x100; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000003a702: and eax, 0x100; ret; 
0x000000000fe833: and eax, 0x100f; ret; 
0x0000000008a94d: and eax, 0x10; jne short 0x000000000008a958; ret; 
0x0000000014caa1: and eax, 0x10; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008b18b: and eax, 0x10; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000086189: and eax, 0x10; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fcb4: and eax, 0x10; ret; 
0x00000000178e01: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000085aca: and eax, 0x1673f9; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x0000000008597a: and eax, 0x167549; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x00000000044a23: and eax, 0x18; test eax, eax; jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x00000000093f96: and eax, 0x18; test eax, eax; jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x00000000094056: and eax, 0x18; test eax, eax; jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x000000000d2296: and eax, 0x18; test eax, eax; jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d67d6: and eax, 0x18; test eax, eax; jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d69b3: and eax, 0x18; test eax, eax; jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000f7f86: and eax, 0x18; test eax, eax; jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f8036: and eax, 0x18; test eax, eax; jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f9b82: and eax, 0x18; test eax, eax; jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c93: and eax, 0x18; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d33: and eax, 0x18; test eax, eax; jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa183: and eax, 0x18; test eax, eax; jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa353: and eax, 0x18; test eax, eax; jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4d3: and eax, 0x18; test eax, eax; jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fd9f3: and eax, 0x18; test eax, eax; jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdfc6: and eax, 0x18; test eax, eax; jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe446: and eax, 0x18; test eax, eax; jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4f6: and eax, 0x18; test eax, eax; jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000ff253: and eax, 0x18; test eax, eax; jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2f3: and eax, 0x18; test eax, eax; jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000fffa3: and eax, 0x18; test eax, eax; jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x00000000100063: and eax, 0x18; test eax, eax; jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000102af3: and eax, 0x18; test eax, eax; jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x000000001092a6: and eax, 0x18; test eax, eax; jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x00000000109356: and eax, 0x18; test eax, eax; jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x00000000109406: and eax, 0x18; test eax, eax; jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094b6: and eax, 0x18; test eax, eax; jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x00000000109573: and eax, 0x18; test eax, eax; jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3b3: and eax, 0x18; test eax, eax; jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a483: and eax, 0x18; test eax, eax; jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a6a6: and eax, 0x18; test eax, eax; jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a763: and eax, 0x18; test eax, eax; jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a8c3: and eax, 0x18; test eax, eax; jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a966: and eax, 0x18; test eax, eax; jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad06: and eax, 0x18; test eax, eax; jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adb6: and eax, 0x18; test eax, eax; jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae66: and eax, 0x18; test eax, eax; jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afc6: and eax, 0x18; test eax, eax; jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b076: and eax, 0x18; test eax, eax; jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x000000001005e7: and eax, 0x19000ec8; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000099849: and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000086320: and eax, 0x1; mov [rip+0x16a42b], eax; ret; 
0x00000000087753: and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000010c9bc: and eax, 0x1; mov eax, r8d; ret; 
0x0000000003a7a2: and eax, 0x1; ret; 
0x000000000436c5: and eax, 0x1ac006; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x0000000003a6e2: and eax, 0x2000; ret; 
0x0000000003a662: and eax, 0x200; ret; 
0x0000000007db2a: and eax, 0x28c48348; pop rbx; pop rbp; ret; 
0x0000000003a622: and eax, 0x2; ret; 
0x00000000141ec8: and eax, 0x2; sub eax, 0x1; add rsp, 0x18; ret; 
0x000000000507b8: and eax, 0x2; sub eax, 0x1; ret; 
0x0000000008f6a9: and eax, 0x2d0; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000008bfe9: and eax, 0x2d0; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000008e0dc: and eax, 0x2f0; add [rax], al; add [rax], al; xor eax, eax; ret; 
0x000000000861eb: and eax, 0x2f8; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000000861b1: and eax, 0x2f8; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000000861f8: and eax, 0x2f8; ret; 
0x000000000861be: and eax, 0x300; ret; 
0x00000000115635: and eax, 0x30; call rax; 
0x0000000002d55e: and eax, 0x30; jmp rax; 
0x00000000043d80: and eax, 0x30; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000012392e: and eax, 0x30; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000002d5bc: and eax, 0x30; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002d60d: and eax, 0x30; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d122: and eax, 0x30; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x000000000771ff: and eax, 0x30; test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000772bf: and eax, 0x30; test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000043657: and eax, 0x30; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x0000000009048a: and eax, 0x38; cmp eax, 0x8; je short 0x0000000000090493; ret; 
0x0000000008e485: and eax, 0x3; mov [rsi], eax; xor eax, eax; ret; 
0x0000000010973f: and eax, 0x3; ret; 
0x0000000003a6a2: and eax, 0x4000; ret; 
0x0000000003a602: and eax, 0x400; ret; 
0x000000000fe73f: and eax, 0x410000; cmp eax, 0x410000; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x00000000079cc2: and eax, 0x441f0f; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000c7377: and eax, 0x48ffffff; cmove eax, edx; add rsp, 0x58; ret; 
0x0000000003a6c2: and eax, 0x4; ret; 
0x0000000004dffe: and eax, 0x4c6001a; adc [rax], al; ret; 
0x00000000108e82: and eax, 0x587d089; cmc; ror byte ptr [rsi], cl; add [rbx+0x87f01f8], al; ret; 
0x000000000984a2: and eax, 0x5c415d5b; ret; 
0x0000000003a974: and eax, 0x6348001b; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000a79be: and eax, 0x634f0010; or al, 0x8a; lea r10, [r10+r9]; jmp r10; 
0x00000000192e67: and eax, 0x6; add [rax], al; ret; 
0x0000000006502f: and eax, 0x7753f883; lea rdi, [eip+0x142d80]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000012b314: and eax, 0x78; cmp al, 0x28; jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x0000000003a7f2: and eax, 0x7f; ret; 
0x000000000401ae: and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000521a0: and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x0000000003a682: and eax, 0x8000; ret; 
0x0000000003a642: and eax, 0x800; ret; 
0x0000000007fb52: and eax, 0x804; ret; 
0x00000000040774: and eax, 0x80; ret; 
0x00000000040253: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000003a5e2: and eax, 0x8; ret; 
0x000000000fdaba: and eax, 0x8b841; add [rax], al; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000fe557: and eax, 0x8bfff87c; and al, 0x8; add rsp, 0x28; ret; 
0x0000000008c1ba: and eax, 0x8d481077; or eax, 0x11d3e4; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008de91: and eax, 0x8d482877; adc eax, 0x11bc15; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000086283: and eax, 0x972; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b3: and eax, 0x972; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x00000000092344: and eax, 0xaceb0016; nop [rax]; mov [rcx+0x20], rdx; ret; 
0x00000000132847: and eax, 0xc5b5c; call rbx; 
0x000000000d704a: and eax, 0xc; pop r14; ret; 
0x00000000110a22: and eax, 0xce0d8b4c; ret; 
0x0000000008e55a: and eax, 0xcfffffff; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000c9086: and eax, 0xd2058b48; ret; 
0x0000000010a88c: and eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000619c1: and eax, 0xe9ffffeb; sahf; mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000d9235: and eax, 0xf000; cmp eax, 0x4000; sete al; add rsp, 0x98; ret; 
0x0000000008e4b2: and eax, 0xf000dff; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e5f6: and eax, 0xf0fff000; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000f11e4: and eax, 0xf; ret; 
0x0000000017aa60: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000008e405: and eax, 0xfff; je short 0x000000000008e418; mov [rsi], eax; xor eax, eax; ret; 
0x0000000017a193: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000fe879: and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x00000000108a46: and eax, 0xfffff000; or eax, edx; ret; 
0x00000000117d52: and eax, 0xffffff; ret; 
0x000000001005ed: and eax, 0xfffffff0; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000086e59: and eax, 0xfffffff7; jne short 0x0000000000086e11; pop rbx; ret; 
0x00000000122763: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x0000000013a76b: and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x00000000087a20: and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000894be: and eax, 0xfffffffd; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x00000000103ca8: and eax, 0xfffffffe; mov rsi, [rax+0x8]; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x0000000006dc5b: and eax, [r8]; add dh, dh; ret; 
0x0000000013ae3b: and eax, [rax]; add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000008eeda: and eax, [rax]; add [rax], al; mov eax, r8d; ret; 
0x0000000008f942: and eax, [rax]; add [rax], al; mov eax, r9d; ret; 
0x0000000015e805: and eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000013ae5b: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000013aeb2: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28]; 
0x0000000006dc5c: and eax, [rax]; add dh, dh; ret; 
0x00000000109e71: and eax, [rcx]; add [rax], al; syscall; 
0x00000000116019: and eax, [rdi+rax]; add [rax-0x73], cl; add eax, 0x7048c; cmove rax, rdx; ret; 
0x0000000014cfba: and eax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x00000000041c86: and eax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000164179: and eax, [rdx]; add [rax], al; ret; 
0x00000000041da9: and eax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000157e97: and eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000004085b: and eax, [rsp-0x4]; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000404b4: and eax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000aa35e: and eax, ecx; je 0x00000000000aa520; bsr rax, rax; add rax, rdi; ret; 
0x00000000185f71: and eax, ecx; je short 0x0000000000185f81; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d33e: and eax, ecx; je short 0x000000000018d34e; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018da61: and eax, ecx; je short 0x000000000018da71; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018df0e: and eax, ecx; je short 0x000000000018df1e; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000110e92: and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000055231: and eax, ecx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000004012f: and eax, ecx; ret; 
0x0000000018df85: and eax, edi; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret; 
0x00000000108a9f: and eax, edi; or rax, rsi; ret; 
0x0000000004071a: and eax, edx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x00000000040574: and eax, edx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000004046f: and eax, edx; ret; 
0x00000000040bb5: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000003a98d: and eax, esi; ret; 
0x000000001260e9: and ebp, [rbp+0xc]; add [rbx-0x46363], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x0000000009d419: and ebp, [rdx+0xd]; add [rax-0x73], cl; add eax, 0xccdc; cmove rax, rdx; ret; 
0x0000000007b68d: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007b6e9: and ebp, edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000005a37e: and ebp, edi; jmp qword ptr [rsi+0x2e]; 
0x000000000c1f39: and ebp, esi; clc; dec dword ptr [rax-0x7d]; ret; 
0x000000000e08ef: and ebx, 0x8; je short 0x00000000000e0877; pop rbx; ret; 
0x00000000079874: and ebx, [rbx+0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000012f5a9: and ebx, [rbx+0x5d]; pop r12; ret; 
0x00000000099832: and ecx, 0x2; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x000000000446a2: and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000df350: and ecx, 0x4; je short 0x00000000000df2ec; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x0000000009aaa1: and ecx, 0x4; lea rax, [rip+0xf435]; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x000000000e088e: and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x0000000017aa65: and ecx, 0xff; sub eax, ecx; ret; 
0x0000000017a198: and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000172319: and ecx, [rcx+0x634f0004]; or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000009c49b: and ecx, [rcx+rcx*4-0x30]; pop rbx; pop rbp; pop r12; ret; 
0x000000001014ac: and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000010d05a: and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000010aa64: and ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa3c: and ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000175e17: and ecx, ebp; ret; 
0x000000000406a3: and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x000000000405fb: and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x000000000f118a: and ecx, esi; cmp ecx, [rax-0xc]; jne short 0x00000000000f1180; mov eax, [rdx+0x8]; ret; 
0x00000000192603: and edi, 0x20; je short 0x0000000000192618; movss xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x00000000041110: and edi, 0xc709f0c0; mov [rsp-0x2], di; fldcw [rsp-0x2]; ret; 
0x0000000003a802: and edi, 0xffffff80; sete al; ret; 
0x0000000010133a: and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000006d75e: and edi, 0xfffffff0; mov [rax], rdi; movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b5d: and edi, 0xfffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x000000000dc02d: and edi, eax; or al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000094005: and edi, edi; dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x38; ret; 
0x000000000ed357: and edi, edi; dec dword ptr [rax-0x77]; ret; 
0x00000000048402: and edi, edi; jmp qword ptr [rsi+0x66]; 
0x000000000e088b: and edx, 0x1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000041a6e: and edx, 0x1; mov [rbx+0x8], edx; add rsp, 0x40; pop rbx; ret; 
0x00000000115fa6: and edx, 0x2; lea rax, [rip+0x3b9c0]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d66: and edx, 0x2; lea rax, [rip+0x3bc20]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e86: and edx, 0x2; lea rax, [rip+0x3e4d0]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000009c286: and edx, 0x2; lea rax, [rip+0xb5710]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be66: and edx, 0x2; lea rax, [rip+0xb5b10]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009bc46: and edx, 0x2; lea rax, [rip+0xb8720]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x00000000086150: and edx, 0x38; cmp edx, 0x8; je short 0x0000000000086159; ret; 
0x00000000088934: and edx, 0x3; cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x00000000088935: and edx, 0x3; cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x0000000004460d: and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret; 
0x000000000402fb: and edx, 0x7fffffff; or edx, esi; je 0x0000000000040250; ret; 
0x00000000040839: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000117d3f: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000117dbd: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000feb8b: and edx, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000108a40: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000009982f: and edx, 0xfffffff8; and ecx, 0x2; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x0000000013a76e: and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000000b0d8d: and edx, [rdi+rcx+0xc634900]; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000040593: and edx, eax; mov [rdi], rdx; ret; 
0x000000000408d2: and edx, eax; movd xmm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret; 
0x00000000040528: and edx, eax; movq xmm0, rdx; ret; 
0x00000000191e6e: and edx, eax; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000009aea6: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009aeb8; ret; 
0x0000000009af16: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009af28; ret; 
0x0000000009b146: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009b158; ret; 
0x0000000009bac6: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009bad8; ret; 
0x0000000009d366: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009d378; ret; 
0x0000000009d3e6: and esi, 0x120; cmp esi, 0x120; je short 0x000000000009d3f8; ret; 
0x000000000a16b6: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a16c8; ret; 
0x000000000b4ec6: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b4ed8; ret; 
0x000000000b4f36: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b4f48; ret; 
0x000000000b5126: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5138; ret; 
0x000000000b5226: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5238; ret; 
0x000000000b5476: and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5488; ret; 
0x0000000009c2d0: and esi, 0x200; lea rdx, [rip+0x18163]; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb0: and esi, 0x200; lea rdx, [rip+0x18563]; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc90: and esi, 0x200; lea rdx, [rip+0x187a3]; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x00000000116030: and esi, 0x200; lea rdx, [rip+0x610e3]; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f10: and esi, 0x200; lea rdx, [rip+0x61223]; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df0: and esi, 0x200; lea rdx, [rip+0x61343]; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000115fd0: and esi, 0x200; lea rdx, [rip+0x68373]; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb0: and esi, 0x200; lea rdx, [rip+0x684b3]; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d90: and esi, 0x200; lea rdx, [rip+0x685d3]; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x00000000115f6c: and esi, 0x200; lea rdx, [rip+0x69527]; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e4c: and esi, 0x200; lea rdx, [rip+0x69667]; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d2c: and esi, 0x200; lea rdx, [rip+0x69787]; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116010: and esi, 0x200; lea rdx, [rip+0x70423]; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef0: and esi, 0x200; lea rdx, [rip+0x70563]; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd0: and esi, 0x200; lea rdx, [rip+0x70683]; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x0000000009c310: and esi, 0x200; lea rdx, [rip+0xdae33]; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef0: and esi, 0x200; lea rdx, [rip+0xdb233]; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd0: and esi, 0x200; lea rdx, [rip+0xdb473]; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009c2b0: and esi, 0x200; lea rdx, [rip+0xe20c3]; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be90: and esi, 0x200; lea rdx, [rip+0xe24c3]; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc70: and esi, 0x200; lea rdx, [rip+0xe2703]; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009c24c: and esi, 0x200; lea rdx, [rip+0xe3277]; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be2c: and esi, 0x200; lea rdx, [rip+0xe3677]; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc0c: and esi, 0x200; lea rdx, [rip+0xe38b7]; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009c2f0: and esi, 0x200; lea rdx, [rip+0xea173]; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bed0: and esi, 0x200; lea rdx, [rip+0xea573]; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb0: and esi, 0x200; lea rdx, [rip+0xea7b3]; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x00000000115db0: and esi, 0x200; lea rdx, [rip-0x6198d]; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115ed0: and esi, 0x200; lea rdx, [rip-0x61aad]; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ff0: and esi, 0x200; lea rdx, [rip-0x61bed]; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x00000000131b96: and esi, 0x7; movsxd rax, [rcx+rsi*4]; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x000000000408e0: and esi, 0x80000000; mov [rdi], esi; ret; 
0x00000000040910: and esi, 0x80000000; movd xmm0, esi; ret; 
0x000000000408b9: and esi, 0x80000000; movss [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000b554b: and esi, 0x800; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b6646: and esi, 0x800; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b5096: and esi, 0x800; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x0000000009bb9b: and esi, 0x800; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x00000000040967: and esi, 0x807fffff; shl edi, 0x17; or esi, edi; movd xmm0, esi; ret; 
0x0000000008e918: and esi, 0x80; add esi, 0x1; syscall; 
0x0000000008b768: and esi, 0x80; syscall; 
0x0000000008cd8b: and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000521fc: and esi, 0xd6097fff; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000fe78b: and esi, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000117d68: and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000edcc9: and esi, 0xfffffff3; jmp qword ptr [rsi+0xf]; 
0x0000000013a86c: and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000000894d9: and esi, 0xfffffffe; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000ff0f1: and esi, [rcx]; neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41]; 
0x0000000003a3b0: and esi, [rdi+0x10]; lea rdx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x0000000010ce92: and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x000000000aa5e2: and esi, eax; je 0x00000000000aa520; bsr rax, rsi; add rax, rdi; ret; 
0x000000000aa3ec: and esi, ecx; je 0x00000000000aa520; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000001227ce: and esi, esi; ret; 
0x00000000109c24: and esp, 0xfffffff0; mov rdi, r8; call rdx; 
0x00000000162368: and fs:[rax], eax; add [rax-0x7bf0ffc7], al; ret far; 
0x000000000b0836: and r11b, r8b; nop [rax]; ret; 
0x0000000010c9bb: and r8d, 0x1; mov eax, r8d; ret; 
0x0000000010aac6: and r9d, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000103ca7: and rax, 0xfffffffffffffffe; mov rsi, [rax+0x8]; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x0000000014cfb9: and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x00000000041c85: and rax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000041da8: and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000404b3: and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000aa35d: and rax, rcx; je 0x00000000000aa520; bsr rax, rax; add rax, rdi; ret; 
0x00000000055230: and rax, rcx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000018df84: and rax, rdi; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret; 
0x00000000108a9e: and rax, rdi; or rax, rsi; ret; 
0x00000000040719: and rax, rdx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x00000000040573: and rax, rdx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000040bb4: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000406a2: and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x000000000405fa: and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000006d75d: and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b5c: and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000115fa5: and rdx, 0x2; lea rax, [rip+0x3b9c0]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d65: and rdx, 0x2; lea rax, [rip+0x3bc20]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e85: and rdx, 0x2; lea rax, [rip+0x3e4d0]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000009c285: and rdx, 0x2; lea rax, [rip+0xb5710]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be65: and rdx, 0x2; lea rax, [rip+0xb5b10]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009bc45: and rdx, 0x2; lea rax, [rip+0xb8720]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x0000000009982e: and rdx, 0xfffffffffffffff8; and ecx, 0x2; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x00000000191e6d: and rdx, r8; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000191e6c: and rdx, r8; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000040592: and rdx, rax; mov [rdi], rdx; ret; 
0x00000000040527: and rdx, rax; movq xmm0, rdx; ret; 
0x000000000aa5e1: and rsi, rax; je 0x00000000000aa520; bsr rax, rsi; add rax, rdi; ret; 
0x000000000aa3eb: and rsi, rcx; je 0x00000000000aa520; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x00000000109c23: and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x0000000004087b: andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x000000000404c0: andpd xmm0, [rip+0x178c28]; andpd xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x00000000040636: andpd xmm1, [rip+0x178aa2]; movsd xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040610: andpd xmm1, [rip+0x178ac8]; movsd xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000404c8: andpd xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x000000000409a9: andps xmm0, [rip+0x178770]; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040984: andps xmm0, [rip+0x178795]; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000404c1: andps xmm0, [rip+0x178c28]; andpd xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x00000000040878: andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000040637: andps xmm1, [rip+0x178aa2]; movsd xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040611: andps xmm1, [rip+0x178ac8]; movsd xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000404c9: andps xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x0000000007c340: bnd call qword ptr [rax+0x70]; 
0x00000000082ba6: bnd call qword ptr [rbp+0x70]; 
0x00000000152fec: bnd jb short 0x0000000000152ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015309c: bnd jb short 0x00000000001530a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001559bc: bnd jb short 0x00000000001559c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155a6c: bnd jb short 0x0000000000155a77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000075500: bnd jbe 0x00000000000755c0; mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000c4813: bnd jbe 0x00000000000c4b20; add rax, rdi; add rax, rcx; ret; 
0x000000000c4aaa: bnd jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4aca: bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4aea: bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b0a: bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x00000000040302: bnd je 0x0000000000040250; ret; 
0x000000000a1319: bnd je short 0x00000000000a1310; ret; 
0x000000000a134d: bnd je short 0x00000000000a1340; ret; 
0x000000000b6688: bnd je short 0x00000000000b668f; test edx, edx; jne short 0x00000000000b6680; ret; 
0x000000000d6752: bnd je short 0x00000000000d6768; cmp rax, 0xffffffffffffffff; mov edx, 0x0; cmove rax, rdx; ret; 
0x000000000fd316: bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000101dff: bnd jmp qword ptr [rsi+0x2e]; 
0x000000000fd396: bnd jmp qword ptr [rsi+0x41]; 
0x000000000fd5f0: bnd jmp qword ptr [rsi+0x45]; 
0x00000000102563: bnd jmp qword ptr [rsi+0x66]; 
0x00000000100a38: bnd jmp qword ptr [rsi+0xf]; 
0x0000000011e4ff: bnd jmp qword ptr [rsi-0x77]; 
0x000000000fd253: bnd jmp qword ptr [rsi-0x7d]; 
0x000000000cd56b: bnd jmp rdx; 
0x0000000018722c: bsf eax, eax; add rax, rcx; ret; 
0x000000001702ba: bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000a4cda: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000001889c4: bsf eax, eax; add rax, rdi; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x000000000a4c00: bsf eax, eax; add rax, rdi; ret; 
0x0000000016fff3: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000188e72: bsf eax, eax; add rax, rdx; ret; 
0x0000000017403c: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000170061: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000170071: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000170081: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000173ff1: bsf eax, eax; add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x00000000185e88: bsf eax, eax; cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d260: bsf eax, eax; cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d96e: bsf eax, eax; cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018de0b: bsf eax, eax; cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbc1: bsf eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd41: bsf eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd16: bsf eax, eax; cmp esi, [rdi+rax*4+0x40]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb81: bsf eax, eax; cmp esi, [rdi+rax*4+0x60]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bd31: bsf eax, eax; cmp esi, [rdi+rax*4]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x0000000018bd8a: bsf eax, eax; cmp esi, [rdx+rax*4]; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x0000000018b914: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000174661: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000188a21: bsf eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188bb1: bsf eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188b89: bsf eax, eax; cmp sil, [rdi+rax+0x40]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x000000001889e1: bsf eax, eax; cmp sil, [rdi+rax+0x60]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188ba1: bsf eax, eax; cmp sil, [rdi+rax]; jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x00000000188c02: bsf eax, eax; cmp sil, [rdx+rax]; jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000170051: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000179171: bsf eax, eax; lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179161: bsf eax, eax; lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179151: bsf eax, eax; lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179131: bsf eax, eax; lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x0000000018cbf1: bsf eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbe1: bsf eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6e1: bsf eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6d1: bsf eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6c1: bsf eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x0000000018b6b1: bsf eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cc01: bsf eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x000000000a4c10: bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a4c20: bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a4bf0: bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x0000000018d131: bsf eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d141: bsf eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d151: bsf eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d161: bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de91: bsf eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018dea1: bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018de67: bsf eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x0000000018bb64: bsf eax, eax; lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x0000000018d0d3: bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d2c1: bsf eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x0000000018c480: bsf eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x00000000185d61: bsf eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185f01: bsf eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000000a4b4f: bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x00000000185d71: bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185ed9: bsf eax, eax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000185d81: bsf eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d91: bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d9e1: bsf eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9f1: bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000018d9c4: bsf eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x00000000187327: bsf eax, eax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000187351: bsf eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000187341: bsf eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000aa143: bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001860f0: bsf eax, eax; movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000186101: bsf eax, eax; movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x000000001860e1: bsf eax, eax; movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000001898e8: bsf eax, eax; ret; 
0x00000000178eea: bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000174421: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x00000000174411: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x00000000174401: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000001743f1: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000001898f1: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x00000000189901: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x00000000189911: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x00000000189921: bsf eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x0000000018c381: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c391: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a1: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c371: bsf eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x00000000170399: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000173fd9: bsf eax, eax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000001703c1: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000174001: bsf eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000001703b1: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000017018d: bsf eax, eax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000001701e1: bsf eax, eax; sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x0000000018b8a1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8b1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018ce01: bsf eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cde1: bsf eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000a4c30: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c40: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c50: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c60: bsf eax, eax; sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x00000000174246: bsf eax, eax; vzeroupper; ret; 
0x000000001824bb: bsf eax, eax; xtest; je short 0x00000000001824c7; vzeroall; ret; 
0x0000000009bf25: bsf eax, edi; cmove eax, edx; add eax, 0x1; ret; 
0x0000000009bf38: bsf eax, edi; cmove rax, rdx; add eax, 0x1; ret; 
0x000000000aa636: bsf eax, edx; ret; 
0x000000000c6076: bsf eax, edx; shr rax, 0x2; ret; 
0x000000000a2ffa: bsf ecx, ecx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000186151: bsf ecx, ecx; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x000000000a30c0: bsf ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000189175: bsf ecx, esi; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x0000000018913c: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000018915c: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x000000000a2e8c: bsf edx, eax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000188ef5: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x00000000188f15: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x00000000188f35: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x00000000188ed7: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000aa792: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000c61d2: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000b3431: bsf edx, edx; lea r11, [rip+0xf6fd9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33f9: bsf edx, edx; lea r11, [rip+0xf7011]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33d4: bsf edx, edx; lea r11, [rip+0xf7036]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33b7: bsf edx, edx; lea r11, [rip+0xf7053]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab1: bsf edx, edx; lea r11, [rip+0xf78d9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a79: bsf edx, edx; lea r11, [rip+0xf7911]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a54: bsf edx, edx; lea r11, [rip+0xf7936]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a37: bsf edx, edx; lea r11, [rip+0xf7953]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b150d: bsf edx, edx; lea r11, [rip+0xf8d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b14e4: bsf edx, edx; lea r11, [rip+0xf8d52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e01: bsf edx, edx; lea r11, [rip+0xf93a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dc9: bsf edx, edx; lea r11, [rip+0xf93e1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0da4: bsf edx, edx; lea r11, [rip+0xf9406]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d87: bsf edx, edx; lea r11, [rip+0xf9423]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe6d: bsf edx, edx; lea r11, [rip+0xfa1e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe44: bsf edx, edx; lea r11, [rip+0xfa212]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af801: bsf edx, edx; lea r11, [rip+0xfa7d5]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7c9: bsf edx, edx; lea r11, [rip+0xfa80d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a4: bsf edx, edx; lea r11, [rip+0xfa832]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af787: bsf edx, edx; lea r11, [rip+0xfa84f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000a2e21: bsf edx, edx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001899e3: bsf rax, rax; add rax, rdi; ret; 
0x00000000188b88: bsf rax, rax; cmp sil, [rdi+rax+0x40]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188e08: bsf rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185ed8: bsf rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000187326: bsf rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000000aa260: bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000170398: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000173fd8: bsf rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000017018c: bsf rax, rax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x0000000009bf37: bsf rax, rdi; cmove rax, rdx; add eax, 0x1; ret; 
0x000000000aa682: bsf rax, rdx; ret; 
0x000000000c60c2: bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000a2ff9: bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000a30bf: bsf rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000a2e8b: bsf rdx, rax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000aa791: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000c61d1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000b3430: bsf rdx, rdx; lea r11, [rip+0xf6fd9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33f8: bsf rdx, rdx; lea r11, [rip+0xf7011]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33d3: bsf rdx, rdx; lea r11, [rip+0xf7036]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33b6: bsf rdx, rdx; lea r11, [rip+0xf7053]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab0: bsf rdx, rdx; lea r11, [rip+0xf78d9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a78: bsf rdx, rdx; lea r11, [rip+0xf7911]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a53: bsf rdx, rdx; lea r11, [rip+0xf7936]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a36: bsf rdx, rdx; lea r11, [rip+0xf7953]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b150c: bsf rdx, rdx; lea r11, [rip+0xf8d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b14e3: bsf rdx, rdx; lea r11, [rip+0xf8d52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e00: bsf rdx, rdx; lea r11, [rip+0xf93a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dc8: bsf rdx, rdx; lea r11, [rip+0xf93e1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0da3: bsf rdx, rdx; lea r11, [rip+0xf9406]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d86: bsf rdx, rdx; lea r11, [rip+0xf9423]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe6c: bsf rdx, rdx; lea r11, [rip+0xfa1e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe43: bsf rdx, rdx; lea r11, [rip+0xfa212]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af800: bsf rdx, rdx; lea r11, [rip+0xfa7d5]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7c8: bsf rdx, rdx; lea r11, [rip+0xfa80d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a3: bsf rdx, rdx; lea r11, [rip+0xfa832]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af786: bsf rdx, rdx; lea r11, [rip+0xfa84f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000a2e20: bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x00000000186eb0: bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x000000001705f0: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000186ec0: bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000170600: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000170610: bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000186f9d: bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x000000001706ee: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x000000000a51f6: bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x000000000a5026: bsr eax, eax; add rax, rdi; ret; 
0x000000001704ff: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000a50d0: bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a50e0: bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50f0: bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x0000000018d00d: bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018ba8d: bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x00000000174191: bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000aa5eb: bsr eax, esi; add rax, rdi; ret; 
0x000000000aa4f9: bsr esi, esi; lea rax, [rcx+rsi]; ret; 
0x000000000aa3f5: bsr esi, esi; lea rax, [rdi+rsi]; ret; 
0x000000000aa366: bsr rax, rax; add rax, rdi; ret; 
0x000000000aa5ea: bsr rax, rsi; add rax, rdi; ret; 
0x000000000aa4f6: bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000aa4f8: bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000aa3f4: bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x0000000013dd1e: bswap eax; mov [r8+0xa8], eax; mov eax, 0x1; ret; 
0x0000000013dd7b: bswap eax; mov [r8+0xb4], eax; mov eax, 0x1; ret; 
0x0000000013dd4b: bswap eax; mov [r8+0xb8], eax; mov eax, 0x1; ret; 
0x0000000013b519: bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10]; 
0x000000001403a6: bswap eax; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x000000001403f3: bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x000000001403d3: bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x00000000140c6a: bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000140b72: bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x00000000140c2d: bswap eax; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000140393: bswap eax; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x0000000013dd07: bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 0x1; ret; 
0x00000000117d12: bswap eax; ret; 
0x000000001404a5: bswap ebp; call qword ptr [rax+0x18]; 
0x0000000013de4d: bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x000000001457b1: bswap edx; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000001457e1: bswap edx; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000140391: bswap rax; mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x000000001404a4: bswap rbp; call qword ptr [rax+0x18]; 
0x000000000fe236: bt ecx, edx; jb short 0x00000000000fe258; add rsp, 0x90; pop rbx; ret; 
0x000000000fe235: bt rcx, rdx; jb short 0x00000000000fe258; add rsp, 0x90; pop rbx; ret; 
0x00000000040490: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000004048f: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000018b6a1: bts eax, esi; tzcnt eax, eax; ret; 
0x00000000179114: bts eax, esi; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001743e1: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000ff9fd: bts ebx, esi; jmp qword ptr [rsi+0x2e]; 
0x00000000052289: bts edx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x000000000520a1: bts edx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x000000000aa953: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000018b6a0: bts rax, rsi; tzcnt eax, eax; ret; 
0x00000000179113: bts rax, rsi; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001743e0: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000052288: bts rdx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x000000000520a0: bts rdx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x000000000aa952: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000001860ce: bzhi eax, eax, edx; jne short 0x00000000001860e0; ret; 
0x0000000018d4ae: bzhi eax, eax, edx; jne short 0x000000000018d4c0; ret; 
0x00000000188a4c: bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a0c: bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbdc: bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbac: bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000187173: bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x00000000170a63: bzhi edx, eax, edx; jne 0x0000000000170830; xor eax, eax; vzeroupper; ret; 
0x00000000177d27: bzhi edx, eax, edx; jne 0x0000000000177ae0; xor eax, eax; vzeroupper; ret; 
0x0000000017ed15: bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000005cea5: call far fword ptr [eax]; 
0x0000000006c6a1: call far fword ptr [rax+0x44]; 
0x00000000071a25: call far fword ptr [rax+0x48]; 
0x0000000011c95f: call far fword ptr [rax+0x4c]; 
0x00000000103328: call far fword ptr [rax+0x4c]; 
0x00000000039ddd: call far fword ptr [rax+0x5]; 
0x0000000004040b: call far fword ptr [rax+0x5a]; 
0x000000000edf80: call far fword ptr [rax+0x5a]; 
0x00000000100ad0: call far fword ptr [rax+r8*4+0x39]; 
0x00000000100b27: call far fword ptr [rax+r9*2-0x73]; 
0x00000000100ad1: call far fword ptr [rax+rax*4+0x39]; 
0x000000000f1a16: call far fword ptr [rax+rax]; 
0x00000000100b28: call far fword ptr [rax+rcx*2-0x73]; 
0x0000000005cea6: call far fword ptr [rax]; 
0x0000000009c1fd: call far fword ptr [rbp+0x31]; 
0x00000000043362: call far fword ptr [rbp+0x41]; 
0x0000000003f65c: call far fword ptr [rbp+0x4c]; 
0x000000000dc1fa: call far fword ptr [rbp+0xf]; 
0x0000000003f8c2: call far fword ptr [rbp-0x3d]; 
0x0000000004f879: call far fword ptr [rbx+0x31]; 
0x000000000d79e4: call far fword ptr [rbx+0x41]; 
0x00000000078ece: call far fword ptr [rbx+0x44]; 
0x00000000192e62: call far fword ptr [rbx+0x48]; 
0x000000000fd667: call far fword ptr [rbx+0x4c]; 
0x000000000771ca: call far fword ptr [rbx+0x4c]; 
0x000000000369a3: call far fword ptr [rbx+0x5d]; 
0x000000000dc212: call far fword ptr [rbx+0xf]; 
0x00000000041a8e: call far fword ptr [rbx-0x17]; 
0x000000000811a7: call far fword ptr [rbx-0x3d]; 
0x00000000043e53: call far fword ptr [rbx-0x7b]; 
0x0000000002d070: call far fword ptr [rbx]; 
0x00000000059d11: call far fword ptr [rcx+0x15]; 
0x000000000d06c2: call far fword ptr [rcx+0x25ffc148]; 
0x0000000012b3e0: call far fword ptr [rcx+0x4c]; 
0x000000000c7cc4: call far fword ptr [rcx+0x5e]; 
0x000000000defc2: call far fword ptr [rdi+0x41]; 
0x000000001019bd: call far fword ptr [rdi+0x4c]; 
0x000000000cd502: call far fword ptr [rdi+0xf]; 
0x000000000dc203: call far fword ptr [rdi+rcx-0x6c]; 
0x00000000124e39: call far fword ptr [rdi+rcx]; 
0x00000000042d5a: call far fword ptr [rdi]; 
0x0000000009adb4: call far fword ptr [rdx+0x31]; 
0x000000000c7bf1: call far fword ptr [rdx+0x59]; 
0x00000000103404: call far fword ptr [rdx+0x5e]; 
0x0000000005660d: call far fword ptr [rdx-0x77]; 
0x000000000a83ae: call far fword ptr [rdx]; 
0x000000000de73d: call far fword ptr [rsi+0x5f]; 
0x0000000011d753: call far fword ptr [rsi+0x5f]; 
0x000000000cd4e2: call far fword ptr [rsi+0x75]; 
0x00000000127e18: call far fword ptr [rsp+rsi*2+0x34]; 
0x000000000da7bb: call far fword ptr [rsp+rsi*2-0xf]; 
0x000000001252d0: call far fword ptr [rsp+rsi*2]; 
0x0000000006bb2a: call qword ptr [r10+rax*8]; 
0x000000000d997f: call qword ptr [r12+0x20]; 
0x000000000d9740: call qword ptr [r12+0x28]; 
0x000000000d9989: call qword ptr [r12+0x30]; 
0x0000000008598e: call qword ptr [r12+0x350]; 
0x00000000085a74: call qword ptr [r12+0x358]; 
0x0000000006c555: call qword ptr [r12+0x38]; 
0x000000000eead1: call qword ptr [r12+0x40]; 
0x000000000829cd: call qword ptr [r12+0x48]; 
0x00000000076d66: call qword ptr [r12+0x60]; 
0x00000000080dd1: call qword ptr [r12+0x78]; 
0x00000000080e51: call qword ptr [r12+0x80]; 
0x00000000082224: call qword ptr [r12+0x88]; 
0x0000000007f119: call qword ptr [r13+0x10]; 
0x0000000008202a: call qword ptr [r13+0x18]; 
0x0000000006b1a1: call qword ptr [r13+0x38]; 
0x00000000078d91: call qword ptr [r13+0x58]; 
0x0000000007e62a: call qword ptr [r13+0x60]; 
0x0000000007cd8b: call qword ptr [r13+0x80]; 
0x0000000002d3b5: call qword ptr [r14+0x328]; 
0x0000000006e164: call qword ptr [r14+0x38]; 
0x0000000007caad: call qword ptr [r14+0x80]; 
0x0000000007c9da: call qword ptr [r14+0x90]; 
0x000000000849bd: call qword ptr [r15+0x18]; 
0x00000000077a3f: call qword ptr [r15+0x38]; 
0x000000000816a7: call qword ptr [r15+0x80]; 
0x0000000002f13d: call qword ptr [r15]; 
0x00000000085a5e: call qword ptr [rax+0x107d8b48]; 
0x0000000013916c: call qword ptr [rax+0x10]; 
0x000000000989ee: call qword ptr [rax+0x10c48348]; 
0x000000001265fe: call qword ptr [rax+0x10ec8148]; 
0x0000000002e33e: call qword ptr [rax+0x14673945]; 
0x000000000c51fe: call qword ptr [rax+0x166f0ff3]; 
0x0000000018153e: call qword ptr [rax+0x166ffec5]; 
0x00000000125bae: call qword ptr [rax+0x16b60f41]; 
0x0000000008936e: call qword ptr [rax+0x16b8]; 
0x00000000181f0e: call qword ptr [rax+0x1789168b]; 
0x000000000979be: call qword ptr [rax+0x18598b48]; 
0x0000000007b1b1: call qword ptr [rax+0x18]; 
0x000000001903fe: call qword ptr [rax+0x1b9]; 
0x000000000dc4ae: call qword ptr [rax+0x1c24448b]; 
0x000000000dd5fe: call qword ptr [rax+0x1c48349]; 
0x000000000d3b0e: call qword ptr [rax+0x1c68348]; 
0x0000000007ee7e: call qword ptr [rax+0x2000ba]; 
0x000000000717ae: call qword ptr [rax+0x20758b48]; 
0x00000000138e3d: call qword ptr [rax+0x20]; 
0x00000000090cbe: call qword ptr [rax+0x217b8d48]; 
0x000000000f474e: call qword ptr [rax+0x242c8348]; 
0x000000000518de: call qword ptr [rax+0x24348b48]; 
0x00000000192c1e: call qword ptr [rax+0x243c8b49]; 
0x00000000124f3e: call qword ptr [rax+0x24446348]; 
0x00000000074fae: call qword ptr [rax+0x2444894c]; 
0x000000000faa8e: call qword ptr [rax+0x24448b48]; 
0x00000000120b1e: call qword ptr [rax+0x24448d48]; 
0x000000000cec8e: call qword ptr [rax+0x24448d49]; 
0x0000000012ccde: call qword ptr [rax+0x2444b70f]; 
0x00000000113ede: call qword ptr [rax+0x2444c748]; 
0x0000000006fd3e: call qword ptr [rax+0x244c894c]; 
0x000000000909de: call qword ptr [rax+0x2454894c]; 
0x0000000004c16e: call qword ptr [rax+0x245c394c]; 
0x0000000007597e: call qword ptr [rax+0x245c894c]; 
0x000000000dc52e: call qword ptr [rax+0x246c394c]; 
0x000000000faace: call qword ptr [rax+0x246c8948]; 
0x000000000e7afe: call qword ptr [rax+0x246c8b48]; 
0x00000000032cfe: call qword ptr [rax+0x24748b48]; 
0x000000000d389e: call qword ptr [rax+0x24bc8348]; 
0x000000000efcee: call qword ptr [rax+0x2843c7]; 
0x00000000125cde: call qword ptr [rax+0x28568b48]; 
0x0000000013908d: call qword ptr [rax+0x28]; 
0x0000000009d8fe: call qword ptr [rax+0x28c48348]; 
0x0000000012c12e: call qword ptr [rax+0x2c2444c7]; 
0x000000001788fe: call qword ptr [rax+0x2c75c839]; 
0x0000000013a779: call qword ptr [rax+0x30]; 
0x0000000013947e: call qword ptr [rax+0x30be]; 
0x00000000190f5e: call qword ptr [rax+0x3145f631]; 
0x00000000045c0e: call qword ptr [rax+0x31c88949]; 
0x000000000c463e: call qword ptr [rax+0x31d18948]; 
0x000000000c734e: call qword ptr [rax+0x338]; 
0x0000000014c3b7: call qword ptr [rax+0x340]; 
0x000000000860b3: call qword ptr [rax+0x358]; 
0x00000000085bd3: call qword ptr [rax+0x360]; 
0x0000000007598e: call qword ptr [rax+0x3843c748]; 
0x0000000013aa4e: call qword ptr [rax+0x38738b48]; 
0x0000000006cbae: call qword ptr [rax+0x38778b49]; 
0x0000000006b679: call qword ptr [rax+0x38]; 
0x000000001251ce: call qword ptr [rax+0x39058b48]; 
0x0000000018fd9e: call qword ptr [rax+0x3eec148]; 
0x0000000007b37e: call qword ptr [rax+0x40788348]; 
0x000000001452f9: call qword ptr [rax+0x40]; 
0x0000000016465e: call qword ptr [rax+0x416f0ff3]; 
0x0000000012b73e: call qword ptr [rax+0x41d06348]; 
0x0000000003267e: call qword ptr [rax+0x41d78945]; 
0x0000000018158e: call qword ptr [rax+0x420eb70f]; 
0x000000001646de: call qword ptr [rax+0x44318b48]; 
0x0000000004fa5e: call qword ptr [rax+0x44ea8944]; 
0x000000000de21e: call qword ptr [rax+0x45b60f]; 
0x000000000cb2ce: call qword ptr [rax+0x45be0f49]; 
0x00000000064cae: call qword ptr [rax+0x4608d4c]; 
0x00000000114c5e: call qword ptr [rax+0x48038b48]; 
0x00000000038dae: call qword ptr [rax+0x48108b49]; 
0x0000000007197e: call qword ptr [rax+0x4817048d]; 
0x0000000014715e: call qword ptr [rax+0x4847d83]; 
0x0000000003aefe: call qword ptr [rax+0x48555441]; 
0x0000000007b51e: call qword ptr [rax+0x487d8348]; 
0x00000000146f1e: call qword ptr [rax+0x48887d8b]; 
0x00000000056e8e: call qword ptr [rax+0x48944589]; 
0x0000000008e1eb: call qword ptr [rax+0x48]; 
0x000000000ea99e: call qword ptr [rax+0x48c38948]; 
0x0000000007c61e: call qword ptr [rax+0x48c7894c]; 
0x000000000f213e: call qword ptr [rax+0x48e28948]; 
0x000000000f10de: call qword ptr [rax+0x48ef8948]; 
0x0000000006fe9e: call qword ptr [rax+0x48f2b60f]; 
0x0000000009611e: call qword ptr [rax+0x48f63145]; 
0x000000000df51e: call qword ptr [rax+0x48f78941]; 
0x000000000dd62e: call qword ptr [rax+0x49a05d8b]; 
0x000000000f7dee: call qword ptr [rax+0x49ff894c]; 
0x00000000147e6e: call qword ptr [rax+0x4a2605c7]; 
0x0000000008bbce: call qword ptr [rax+0x4c74864]; 
0x0000000007205e: call qword ptr [rax+0x4cc98949]; 
0x0000000012b67e: call qword ptr [rax+0x4cee8944]; 
0x0000000009639e: call qword ptr [rax+0x4cef894c]; 
0x0000000008ac3e: call qword ptr [rax+0x4cf2894c]; 
0x0000000003caee: call qword ptr [rax+0x4cfe894c]; 
0x0000000003feee: call qword ptr [rax+0x4dd58948]; 
0x0000000005acce: call qword ptr [rax+0x4ec8341]; 
0x000000001017ae: call qword ptr [rax+0x503d8348]; 
0x0000000014c52f: call qword ptr [rax+0x50]; 
0x0000000010696e: call qword ptr [rax+0x51058b48]; 
0x0000000012fc3e: call qword ptr [rax+0x5125894c]; 
0x0000000007e9be: call qword ptr [rax+0x53555441]; 
0x00000000113d8e: call qword ptr [rax+0x53d58955]; 
0x000000000910de: call qword ptr [rax+0x54415541]; 
0x000000000799ce: call qword ptr [rax+0x55415641]; 
0x000000000d611e: call qword ptr [rax+0x56415741]; 
0x00000000078dbb: call qword ptr [rax+0x58]; 
0x0000000013b2ce: call qword ptr [rax+0x5ba]; 
0x000000000fcd3e: call qword ptr [rax+0x5c2444c7]; 
0x0000000014df6e: call qword ptr [rax+0x5f3d8d48]; 
0x000000000d9e9e: call qword ptr [rax+0x60858b48]; 
0x0000000002e2ae: call qword ptr [rax+0x60bd8b4c]; 
0x000000000e906e: call qword ptr [rax+0x642444c7]; 
0x0000000008a2be: call qword ptr [rax+0x64ba058b]; 
0x00000000180e9e: call qword ptr [rax+0x660eb70f]; 
0x00000000040cce: call qword ptr [rax+0x66d0f748]; 
0x0000000008318e: call qword ptr [rax+0x68538b48]; 
0x0000000007b093: call qword ptr [rax+0x68]; 
0x0000000013048e: call qword ptr [rax+0x693d8d48]; 
0x00000000132e7e: call qword ptr [rax+0x6ba]; 
0x000000000da85e: call qword ptr [rax+0x6f3d8d48]; 
0x0000000018323e: call qword ptr [rax+0x6f7ea1c4]; 
0x0000000007c341: call qword ptr [rax+0x70]; 
0x0000000009fcbe: call qword ptr [rax+0x7148d49]; 
0x0000000012797e: call qword ptr [rax+0x7406fd83]; 
0x00000000047ace: call qword ptr [rax+0x74c08548]; 
0x00000000130e3e: call qword ptr [rax+0x74dd3948]; 
0x000000000370ae: call qword ptr [rax+0x76148d48]; 
0x00000000134fee: call qword ptr [rax+0x77c13948]; 
0x0000000013430e: call qword ptr [rax+0x77e2394c]; 
0x000000000f650e: call qword ptr [rax+0x7d80]; 
0x00000000114e8e: call qword ptr [rax+0x7ff8341]; 
0x0000000018f66e: call qword ptr [rax+0x7fffba]; 
0x000000000815cf: call qword ptr [rax+0x80]; 
0x000000000f145e: call qword ptr [rax+0x8244439]; 
0x0000000007673e: call qword ptr [rax+0x8244489]; 
0x000000000b6eae: call qword ptr [rax+0x82444c7]; 
0x0000000009a17e: call qword ptr [rax+0x8468b49]; 
0x0000000006f40e: call qword ptr [rax+0x84f8b49]; 
0x0000000013dfbe: call qword ptr [rax+0x87b8348]; 
0x0000000006c21e: call qword ptr [rax+0x87e8b48]; 
0x000000000f8a38: call qword ptr [rax+0x88]; 
0x0000000013902a: call qword ptr [rax+0x8]; 
0x000000000828de: call qword ptr [rax+0x8b841]; 
0x000000000ed87e: call qword ptr [rax+0x8bf]; 
0x000000000a19ae: call qword ptr [rax+0x8c48348]; 
0x000000001017be: call qword ptr [rax+0x8ec8348]; 
0x00000000081472: call qword ptr [rax+0x90]; 
0x00000000038abe: call qword ptr [rax+0x9e3d48]; 
0x00000000100b4e: call qword ptr [rax+0x9ff42c6]; 
0x00000000056e3e: call qword ptr [rax+0xb60f41]; 
0x000000001333ae: call qword ptr [rax+0xb885c7]; 
0x000000000ff0fe: call qword ptr [rax+0xd3b8364]; 
0x000000001725ce: call qword ptr [rax+0xea8149]; 
0x0000000016f3ee: call qword ptr [rax+0xf003e80]; 
0x0000000004ebae: call qword ptr [rax+0xf01f983]; 
0x0000000012b5ee: call qword ptr [rax+0xf0342f6]; 
0x000000000acc8e: call qword ptr [rax+0xf11280f]; 
0x000000000371ee: call qword ptr [rax+0xf2e66c3]; 
0x0000000006f72e: call qword ptr [rax+0xf2ff883]; 
0x0000000003cd6e: call qword ptr [rax+0xf4cf980]; 
0x000000000c53be: call qword ptr [rax+0xf6f0ff3]; 
0x0000000006e1be: call qword ptr [rax+0xff68545]; 
0x000000001469ae: call qword ptr [rax+0xff6854d]; 
0x000000000586bc: call qword ptr [rax+r8*8]; 
0x000000000586bd: call qword ptr [rax+rax*8]; 
0x0000000006e3c7: call qword ptr [rax+rax]; 
0x000000000818ce: call qword ptr [rax-0x126418]; 
0x0000000009cabe: call qword ptr [rax-0x141676b7]; 
0x000000000d28ae: call qword ptr [rax-0x161bcebb]; 
0x000000000e5b4e: call qword ptr [rax-0x162776b8]; 
0x000000000f2c8e: call qword ptr [rax-0x162b76bf]; 
0x0000000005e85e: call qword ptr [rax-0x170876b4]; 
0x00000000111ede: call qword ptr [rax-0x171876b4]; 
0x0000000014c85e: call qword ptr [rax-0x172876b8]; 
0x0000000011685e: call qword ptr [rax-0x173876b4]; 
0x00000000142b5e: call qword ptr [rax-0x177e76b8]; 
0x000000000e0dce: call qword ptr [rax-0x17c574b8]; 
0x000000001402ee: call qword ptr [rax-0x17ff8275]; 
0x00000000116dac: call qword ptr [rax-0x18]; 
0x0000000002d055: call qword ptr [rax-0x18]; 
0x0000000006b8be: call qword ptr [rax-0x1a76b7ab]; 
0x0000000013db1e: call qword ptr [rax-0x1f7ba39]; 
0x0000000008418e: call qword ptr [rax-0x26fa72b8]; 
0x00000000104d8e: call qword ptr [rax-0x27137eb8]; 
0x000000000b9b5e: call qword ptr [rax-0x2dce24cf]; 
0x0000000018fb9e: call qword ptr [rax-0x36ce3877]; 
0x000000000387be: call qword ptr [rax-0x378274b8]; 
0x0000000017fbce: call qword ptr [rax-0x3991063b]; 
0x0000000009944e: call qword ptr [rax-0x3a3418]; 
0x0000000011712e: call qword ptr [rax-0x3c3f76b4]; 
0x000000000405d2: call qword ptr [rax-0x3d]; 
0x0000000017ef5e: call qword ptr [rax-0x3e28023b]; 
0x00000000084d6e: call qword ptr [rax-0x3f38b8]; 
0x0000000017efce: call qword ptr [rax-0x3f43f00d]; 
0x00000000119bfe: call qword ptr [rax-0x3fcea8bf]; 
0x0000000011286e: call qword ptr [rax-0x401176b8]; 
0x00000000076cae: call qword ptr [rax-0x41fb3380]; 
0x0000000011d23e: call qword ptr [rax-0x42bf]; 
0x0000000011ebbe: call qword ptr [rax-0x42f7a3a]; 
0x0000000014ca8e: call qword ptr [rax-0x452dcebb]; 
0x00000000041f4e: call qword ptr [rax-0x46ea74b8]; 
0x0000000019174e: call qword ptr [rax-0x47eb7]; 
0x0000000007bdee: call qword ptr [rax-0x48]; 
0x0000000002ec3e: call qword ptr [rax-0x56c272b8]; 
0x0000000005d35e: call qword ptr [rax-0x56fa74b8]; 
0x000000000598ee: call qword ptr [rax-0x5f6a74b8]; 
0x0000000014859e: call qword ptr [rax-0x5f8a9cb4]; 
0x00000000041f6e: call qword ptr [rax-0x6162dcf]; 
0x0000000009756e: call qword ptr [rax-0x66fa74b8]; 
0x000000001410de: call qword ptr [rax-0x71db7b0a]; 
0x000000000c78fe: call qword ptr [rax-0x76319cb8]; 
0x000000001313ee: call qword ptr [rax-0x76b6a8bf]; 
0x0000000009a52e: call qword ptr [rax-0x76b6aabf]; 
0x0000000004277e: call qword ptr [rax-0x76b7a8bf]; 
0x00000000143ebe: call qword ptr [rax-0x76bea8bf]; 
0x0000000007d30e: call qword ptr [rax-0x76df377d]; 
0x0000000013f60e: call qword ptr [rax-0x76f874bf]; 
0x0000000005679e: call qword ptr [rax-0x771876b4]; 
0x000000001154be: call qword ptr [rax-0x77427cb8]; 
0x00000000036cae: call qword ptr [rax-0x77c27cb8]; 
0x0000000018156e: call qword ptr [rax-0x77e949f1]; 
0x0000000005bdbe: call qword ptr [rax-0x78c272b8]; 
0x000000000f146e: call qword ptr [rax-0x7bf0367c]; 
0x000000001122ce: call qword ptr [rax-0x7cb7f878]; 
0x0000000017f9de: call qword ptr [rax-0x7e2d76b7]; 
0x000000000760de: call qword ptr [rax-0x7f2e76b7]; 
0x0000000003b6be: call qword ptr [rax-0x7f8274b8]; 
0x0000000012427e: call qword ptr [rax-0x7fe0f03d]; 
0x000000000fc1fe: call qword ptr [rax-0x83776bf]; 
0x0000000006e75e: call qword ptr [rax-0x85417]; 
0x0000000005ae0e: call qword ptr [rax-0x900cebb]; 
0x000000000d748e: call qword ptr [rax-0xd76b6ab]; 
0x000000000b5d8e: call qword ptr [rax-0xefa72b8]; 
0x00000000105dce: call qword ptr [rax-0xefa74b8]; 
0x0000000005b9fd: call qword ptr [rax]; 
0x0000000007f11a: call qword ptr [rbp+0x10]; 
0x0000000008202b: call qword ptr [rbp+0x18]; 
0x0000000007ae0f: call qword ptr [rbp+0x20]; 
0x0000000007b684: call qword ptr [rbp+0x30]; 
0x0000000006b1a2: call qword ptr [rbp+0x38]; 
0x000000000fb9b2: call qword ptr [rbp+0x40]; 
0x0000000005b9f3: call qword ptr [rbp+0x48]; 
0x0000000014a15e: call qword ptr [rbp+0x48]; 
0x00000000051e1f: call qword ptr [rbp+0x49]; 
0x0000000004fade: call qword ptr [rbp+0x4c]; 
0x00000000082fd8: call qword ptr [rbp+0x53]; 
0x00000000078d92: call qword ptr [rbp+0x58]; 
0x0000000007e62b: call qword ptr [rbp+0x60]; 
0x00000000078fd0: call qword ptr [rbp+0x68]; 
0x00000000081c0d: call qword ptr [rbp+0x70]; 
0x000000000eeba8: call qword ptr [rbp+0x77000000]; 
0x0000000007cd8c: call qword ptr [rbp+0x80]; 
0x00000000080f4f: call qword ptr [rbp+0x90]; 
0x000000000fe391: call qword ptr [rbp-0x43]; 
0x0000000007691a: call qword ptr [rbx+0x10]; 
0x0000000007af2c: call qword ptr [rbx+0x18]; 
0x00000000111b39: call qword ptr [rbx+0x28]; 
0x0000000014c33a: call qword ptr [rbx+0x350]; 
0x0000000008587c: call qword ptr [rbx+0x358]; 
0x0000000006c8eb: call qword ptr [rbx+0x38]; 
0x00000000081b17: call qword ptr [rbx+0x40]; 
0x000000000cdd35: call qword ptr [rbx+0x48924924]; 
0x00000000083ccf: call qword ptr [rbx+0x48]; 
0x00000000120679: call qword ptr [rbx+0x4c]; 
0x0000000005124f: call qword ptr [rbx+0x4d]; 
0x000000000807cd: call qword ptr [rbx+0x60]; 
0x00000000076c0c: call qword ptr [rbx+0x80]; 
0x000000000823c0: call qword ptr [rbx+0x88]; 
0x000000000767b6: call qword ptr [rbx+0x90]; 
0x000000000717f8: call qword ptr [rbx+0xf]; 
0x000000001268c2: call qword ptr [rbx-0x18]; 
0x0000000005befe: call qword ptr [rbx-0x59]; 
0x000000000436d0: call qword ptr [rbx]; 
0x000000001136c4: call qword ptr [rcx+0x28]; 
0x0000000006bc36: call qword ptr [rcx+0x38]; 
0x00000000113bf5: call qword ptr [rcx+0x4864000d]; 
0x0000000006d76f: call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d770: call qword ptr [rcx+rax*8-0x40]; 
0x0000000002d303: call qword ptr [rcx]; 
0x000000000849be: call qword ptr [rdi+0x18]; 
0x00000000077a40: call qword ptr [rdi+0x38]; 
0x000000000816a8: call qword ptr [rdi+0x80]; 
0x0000000002f137: call qword ptr [rdi]; 
0x00000000142472: call qword ptr [rdx+0x10]; 
0x00000000141a48: call qword ptr [rdx+0x20]; 
0x000000000d9250: call qword ptr [rdx+0x40]; 
0x0000000006bb2b: call qword ptr [rdx+rax*8]; 
0x0000000014335d: call qword ptr [rdx-0x76b6fff6]; 
0x0000000006e6ad: call qword ptr [rdx]; 
0x0000000002d3b6: call qword ptr [rsi+0x328]; 
0x0000000006e165: call qword ptr [rsi+0x38]; 
0x000000001144b1: call qword ptr [rsi+0x74]; 
0x0000000007caae: call qword ptr [rsi+0x80]; 
0x0000000007c9db: call qword ptr [rsi+0x90]; 
0x00000000108e36: call qword ptr [rsi-0x72b7fff6]; 
0x00000000056419: call qword ptr [rsi]; 
0x0000000011c711: call qword ptr [rsp+0x18]; 
0x000000000d9980: call qword ptr [rsp+0x20]; 
0x000000000d9741: call qword ptr [rsp+0x28]; 
0x0000000013a357: call qword ptr [rsp+0x2a08]; 
0x000000000d998a: call qword ptr [rsp+0x30]; 
0x0000000008598f: call qword ptr [rsp+0x350]; 
0x00000000085a75: call qword ptr [rsp+0x358]; 
0x0000000006c556: call qword ptr [rsp+0x38]; 
0x000000000eead2: call qword ptr [rsp+0x40]; 
0x000000000829ce: call qword ptr [rsp+0x48]; 
0x000000000fbf3d: call qword ptr [rsp+0x50]; 
0x000000001182bf: call qword ptr [rsp+0x58]; 
0x00000000076d67: call qword ptr [rsp+0x60]; 
0x00000000118b99: call qword ptr [rsp+0x68]; 
0x00000000080dd2: call qword ptr [rsp+0x78]; 
0x00000000080e52: call qword ptr [rsp+0x80]; 
0x00000000082225: call qword ptr [rsp+0x88]; 
0x0000000013bea1: call qword ptr [rsp+0x8]; 
0x0000000002ce17: call qword ptr [rsp]; 
0x00000000130b91: call r10; 
0x000000000f23e3: call r11; 
0x0000000002e07b: call r12; 
0x000000000345e1: call r13; 
0x0000000002ed77: call r14; 
0x0000000002d261: call r15; 
0x000000000760b2: call r8; 
0x0000000002d1d5: call rax; 
0x0000000002df08: call rbp; 
0x0000000002dced: call rbx; 
0x00000000042a37: call rcx; 
0x0000000002d262: call rdi; 
0x00000000086c0f: call rdx; 
0x0000000002d384: call rsi; 
0x0000000002e07c: call rsp; 
0x000000001506b7: cdq; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000014becf: cdq; adc esi, ebp; jmp qword ptr [rsi+0x2e]; 
0x0000000018f43f: cdq; add rcx, r9; jmp rcx; 
0x0000000018f5d6: cdq; add rcx, rbx; jmp rcx; 
0x000000000d34b1: cdq; cmc; jmp qword ptr [rsi+0x2e]; 
0x000000000d2a0a: cdq; cmc; jmp qword ptr [rsi-0x70]; 
0x00000000109073: cdq; cmp eax, 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000043df2: cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x00000000043e04: cdq; idiv rsi; ret; 
0x00000000103269: cdq; ltr [rcx+0x5d]; pop r12; pop r13; ret; 
0x00000000093f73: cdq; mov ss, [rip+0x64d8f700]; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000144429: cdq; nop [rax+rax]; ret; 
0x0000000004406b: cdq; ret; 
0x000000000b73c2: cdq; stc; dec dword ptr [rax-0x7d]; ret; 
0x00000000052c27: cdq; std; jmp qword ptr [rsi+0xf]; 
0x00000000043dc2: cdq; xor eax, edx; sub eax, edx; ret; 
0x00000000043dd4: cdq; xor rax, rdx; sub rax, rdx; ret; 
0x000000000878f0: cdqe; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000145843: cdqe; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x0000000006e80d: cdqe; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x0000000006df58: cdqe; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x0000000013e95e: clc; add [rax+0x1], edi; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x000000000f8e59: clc; add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret; 
0x0000000009af50: clc; add [rax], al; cmove rax, rdx; ret; 
0x0000000005c0bd: clc; add [rbp+0xf], esi; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000144a21: clc; add [rbp-0x14], esi; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x00000000123103: clc; add [rcx+rcx-0x7b], esi; shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret; 
0x00000000149ff3: clc; add [rdi+0x19], edi; add rsp, 0x8; ret; 
0x0000000012f123: clc; add [rdi+0x19], edi; pop rbx; ret; 
0x0000000008aac1: clc; add [rdi+0x1b], edi; mov eax, r12d; pop r12; ret; 
0x00000000192ec0: clc; add [rdi+0x1c], edi; pop rbx; ret; 
0x000000000441df: clc; add [rdi+0x1d], edi; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000c84ee: clc; add [rdi+0x1e], edi; add rsp, 0x8; ret; 
0x0000000004405b: clc; add [rdi+0x21], edi; pop rbp; ret; 
0x0000000014a0ca: clc; add [rdi+0x22], edi; mov rax, r12; pop r12; ret; 
0x000000000434ba: clc; add [rdi+0x22], edi; xor eax, eax; pop rbx; ret; 
0x000000001328d9: clc; add [rdi+0x23], edi; add rsp, 0x8; ret; 
0x000000001098bb: clc; add [rdi+0x29], esi; mov eax, 0x4; syscall; 
0x0000000010995b: clc; add [rdi+0x29], esi; mov eax, 0x6; syscall; 
0x00000000133c7a: clc; add [rdi+0x2], edi; ret; 
0x0000000010990a: clc; add [rdi+0x2a], esi; mov eax, 0x5; syscall; 
0x0000000012e521: clc; add [rdi+0x2b], edi; pop rbp; ret; 
0x00000000082f8b: clc; add [rdi+0x31], edi; add rsp, 0x8; ret; 
0x00000000102789: clc; add [rdi+0x33], edi; pop rbp; ret; 
0x0000000004d7cc: clc; add [rdi+0x50], edi; add rsp, 0x10; pop rbx; ret; 
0x0000000011f494: clc; add [rdi+0x50], edi; add rsp, 0x8; ret; 
0x0000000005c2fd: clc; add [rdi+0x7], edi; ret; 
0x000000000d71fc: clc; add [rdi+0x8], edi; pop rbx; ret; 
0x00000000108e8c: clc; add [rdi+0x8], edi; ret; 
0x000000000783d3: clc; add [rdi+0x9], edi; ret; 
0x000000000877a4: clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x0000000007ce04: clc; add cl, [rax+0xf]; scasd [rdi]; ret; 
0x00000000079b7a: clc; add cl, [rax-0x77]; ret; 
0x000000000c61fe: clc; add cl, [rax-0x7b]; ror byte ptr [rax+0xf], cl; ret; 
0x000000000fe69b: clc; add cl, [rbx+0x75fc2444]; shl edi, 0xd8; ret; 
0x0000000013253b: clc; add dh, [rbp+0x19]; mov eax, r8d; ret; 
0x0000000010b362: clc; add dh, [rdi+0x22]; mov eax, 0x1f; syscall; 
0x0000000012c6d2: clc; add dh, [rdx+rsi+0x31]; shl byte ptr [rsi+0x39], 0xd1; je short 0x000000000012c6e0; ret; 
0x00000000100675: clc; add dh, [rsi+0x7]; ret; 
0x00000000122765: clc; add eax, 0x10; ret; 
0x000000000fc7e3: clc; add ecx, [rdi]; xchg esp, eax; ret; 
0x00000000115717: clc; add ecx, ecx; sbb eax, 0x0; ret; 
0x0000000013ab1a: clc; add esi, [rsi+0xa]; mov eax, 0x2; ret; 
0x00000000186fa2: clc; add rax, r8; ret; 
0x000000001706f3: clc; add rax, r8; vzeroupper; ret; 
0x000000000a49d7: clc; add rax, rcx; ret; 
0x000000000a51fb: clc; add rax, rsi; ret; 
0x0000000008beff: clc; and [rbp+0x4], esi; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000087774: clc; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000003a7f1: clc; and eax, 0x7f; ret; 
0x00000000117d51: clc; and eax, 0xffffff; ret; 
0x00000000099831: clc; and ecx, 0x2; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x00000000117d11: clc; bswap eax; ret; 
0x000000000a19ad: clc; call qword ptr [rax+0x8c48348]; 
0x000000000b5d8c: clc; call qword ptr [rax-0xefa72b8]; 
0x000000000d3867: clc; call rax; 
0x00000000043dc1: clc; cdq; xor eax, edx; sub eax, edx; ret; 
0x000000000d68f2: clc; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000001225f1: clc; cmc; je short 0x00000000001225e8; pop rbx; ret; 
0x000000000554af: clc; cmovb r8, rdi; mov rax, r8; ret; 
0x0000000017e216: clc; cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x00000000115712: clc; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x00000000179ffc: clc; cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b62c: clc; cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x0000000017aa08: clc; cmp rcx, rax; jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b848: clc; cmp rcx, rax; jne short 0x000000000017b873; xor eax, eax; ret; 
0x00000000104e21: clc; cmp rdi, rax; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x000000001889c9: clc; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x00000000043e02: clc; cqo; idiv rsi; ret; 
0x00000000043dd2: clc; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000009d948: clc; dec dword ptr [rax+0x29]; ret; 
0x000000000f7fe9: clc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000f9cef: clc; dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x28; ret; 
0x0000000009cce1: clc; dec dword ptr [rax-0x77]; ret; 
0x000000000c1f3b: clc; dec dword ptr [rax-0x7d]; ret; 
0x000000000fa37b: clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x3; syscall; 
0x000000000fffcb: clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000010008b: clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000102b50: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fda51: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fdb28: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x000000000fa39d: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000f9c15: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x78; ret; 
0x000000000fe4aa: clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x0000000006da6d: clc; dec dword ptr [rdi]; test [rbp+0x36e9ffff], ecx; loop 0x000000000006da78; jmp qword ptr [rsi+0xf]; 
0x0000000005d3e4: clc; dec dword ptr [rdi]; test [rbp-0x76ffff9d], ebx; ret; 
0x00000000083889: clc; dec dword ptr [rdi]; test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000192a5b: clc; enter 0x1, 0xe8; lodsb [rsi]; jp short 0x0000000000192a4d; jmp qword ptr [rsi+0x2e]; 
0x000000000694ad: clc; imul ecx, [rdi], 0x1a9f85; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000008d159: clc; inc dword ptr [rcx+0x39]; ret far; 
0x00000000170011: clc; ja short 0x000000000016ffd7; xor eax, eax; ret; 
0x00000000170663: clc; ja short 0x0000000000170629; nop [rax+rax]; xor eax, eax; ret; 
0x00000000173c32: clc; ja short 0x0000000000173bf8; xor eax, eax; vzeroupper; ret; 
0x00000000173dc2: clc; ja short 0x0000000000173d88; xor eax, eax; vzeroupper; ret; 
0x000000001743d8: clc; ja short 0x000000000017439e; xor eax, eax; ret; 
0x00000000174581: clc; ja short 0x0000000000174547; mov rax, r8; vzeroupper; ret; 
0x00000000174625: clc; ja short 0x00000000001745eb; mov rax, r8; vzeroupper; ret; 
0x000000001756d4: clc; ja short 0x000000000017569a; nop [rax+rax]; vzeroupper; ret; 
0x00000000176e7d: clc; ja short 0x0000000000176e43; mov [rdi], dl; vzeroupper; ret; 
0x00000000177e54: clc; ja short 0x0000000000177e1a; xor eax, eax; ret; 
0x00000000178ab1: clc; ja short 0x0000000000178a77; xor eax, eax; vzeroupper; ret; 
0x00000000178c51: clc; ja short 0x0000000000178c17; xor eax, eax; vzeroupper; ret; 
0x000000001790ff: clc; ja short 0x00000000001790c5; xor eax, eax; ret; 
0x00000000179315: clc; ja short 0x00000000001792db; mov rax, r8; vzeroupper; ret; 
0x000000001793c9: clc; ja short 0x000000000017938f; mov rax, r8; vzeroupper; ret; 
0x000000000ff133: clc; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x0000000015280c: clc; jb short 0x0000000000152817; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001528bc: clc; jb short 0x00000000001528c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001551dc: clc; jb short 0x00000000001551e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015528c: clc; jb short 0x0000000000155297; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000074bd4: clc; jbe short 0x0000000000074bd2; dec dword ptr [rax-0x77]; ret; 
0x00000000080c89: clc; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000005c1e3: clc; je short 0x000000000005c20e; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000f95e4: clc; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x00000000109635: clc; je short 0x0000000000109674; mov eax, r8d; ret; 
0x000000000b5bd1: clc; jmp qword ptr [rsi+0x2e]; 
0x000000000b76b0: clc; jmp qword ptr [rsi+0x66]; 
0x000000000b76af: clc; jmp qword ptr [rsi+0x66]; 
0x0000000009c1e5: clc; jmp qword ptr [rsi+0xf]; 
0x0000000005d2d7: clc; jmp rax; 
0x0000000017e219: clc; jne 0x000000000017e320; ret; 
0x0000000005081a: clc; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x00000000156e06: clc; lea r11, [rip+0x63232]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156c50: clc; lea r11, [rip+0x633e8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154342: clc; lea r11, [rip+0x65b36]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154268: clc; lea r11, [rip+0x65c10]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000187ebf: clc; lea rax, [rdi+r8]; ret; 
0x00000000176e0f: clc; lea rax, [rdi+r8]; vzeroupper; ret; 
0x000000000d75cc: clc; leave; ret; 
0x000000000a1564: clc; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000b4c2d: clc; mov [rax], rcx; ret; 
0x000000001779d3: clc; mov [rax], rcx; vzeroupper; ret; 
0x00000000153407: clc; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153d5b: clc; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f5b: clc; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015415b: clc; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001533eb: clc; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153423: clc; mov [rdi-0x8], rdx; ret; 
0x00000000153d77: clc; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158cc6: clc; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000153f77: clc; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158c36: clc; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000154177: clc; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158ba6: clc; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000a14a7: clc; mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a14c6: clc; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a14de: clc; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; ret; 
0x00000000187eb7: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x0000000018a357: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b307: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000001760d7: clc; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x0000000017ba0b: clc; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000000b456a: clc; mov [rdi], rsi; ret; 
0x0000000018a35f: clc; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000017552f: clc; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000101435: clc; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000073c8f: clc; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000731a6: clc; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x000000000fe66c: clc; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000739d0: clc; mov r12d, 0x1; jmp rax; 
0x0000000018df86: clc; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret; 
0x000000000b4562: clc; mov rsi, [rsi]; mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x0000000012b500: clc; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x0000000008b765: clc; not esi; and esi, 0x80; syscall; 
0x000000000644b9: clc; or [rax-0x1], edi; jbe short 0x0000000000064490; mov [rdi], rsi; ret; 
0x000000000702b9: clc; or [rax-0x1], edi; jbe short 0x0000000000070290; mov [rdi], rsi; ret; 
0x00000000075d19: clc; or [rax-0x1], edi; jbe short 0x0000000000075cf0; mov [rdi], rsi; ret; 
0x0000000005570a: clc; or [rdi-0x2e], esi; mov rax, r8; ret; 
0x00000000162364: clc; or [rdi], cl; xchg [rcx], ah; add [rax-0x7bf0ffc7], al; ret far; 
0x000000000dc02e: clc; or al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000091955: clc; or al, 0x75; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091d02: clc; or al, 0x75; sub [rax+0x3], edi; add rsp, 0x8; ret; 
0x00000000117d6f: clc; or eax, esi; bswap eax; ret; 
0x00000000170ab2: clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000108aa0: clc; or rax, rsi; ret; 
0x00000000095c94: clc; push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x00000000077291: clc; push qword ptr [rbx+rcx+0x48]; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000005c1cb: clc; push qword ptr [rcx+rcx+0x44]; mov eax, eax; ret; 
0x0000000010bfee: clc; push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x0000000010ace6: clc; push qword ptr [rsp+rax-0x75]; and al, 0xc; add rsp, 0x18; ret; 
0x00000000040632: clc; ret far; 
0x00000000050cdb: clc; ret; 
0x00000000117d21: clc; rol ax, 0x8; ret; 
0x00000000117c4b: clc; sar rax, 0x6; ret; 
0x000000000dd14a: clc; sbb [rcx], bh; ret; 
0x00000000050d49: clc; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000117dd1: clc; shr eax, 0x18; ret; 
0x00000000178f09: clc; shr eax, 0x2; vzeroupper; ret; 
0x000000000c61da: clc; shr rax, 0x2; ret; 
0x00000000179030: clc; shr rax, 0x2; vzeroupper; ret; 
0x0000000003723b: clc; std; je short 0x0000000000037258; pop rbx; ret; 
0x000000000ed564: clc; str [rbx+rcx*4]; mov [rax], rdi; mov rax, r8; ret; 
0x00000000075d8c: clc; sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000163e50: clc; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x00000000164046: clc; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x00000000164068: clc; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x0000000016408e: clc; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x000000001640a6: clc; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000001640cc: clc; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x000000001640ee: clc; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x0000000016410c: clc; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x00000000163de8: clc; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x0000000016412e: clc; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x0000000016414e: clc; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x0000000016416e: clc; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x0000000016418e: clc; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000001641b0: clc; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000001641d0: clc; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x000000001641f0: clc; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x000000000404b7: clc; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000008b988: clc; syscall; 
0x000000000f029b: clc; test esi, eax; jne short 0x00000000000f0278; mov eax, [rdi+0x14]; ret; 
0x0000000016fff8: clc; vzeroupper; ret; 
0x000000001448f6: clc; xor eax, eax; mov dword ptr [rsp], 0x2; mov rdi, rsp; call r8; 
0x0000000008b184: clc; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000017ee2b: clc; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017fd08: clc; xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x0000000018568e: clc; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x000000000d845a: cld; add [rax], al; ret; 
0x0000000015aaf7: cld; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000013a76d: cld; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000009519b: cld; call far fword ptr [rax+0x48]; 
0x0000000013a86e: cld; call qword ptr [rax+0x30]; 
0x0000000006c21d: cld; call qword ptr [rax+0x87e8b48]; 
0x0000000006b8bd: cld; call qword ptr [rax-0x1a76b7ab]; 
0x00000000138960: cld; cmp bh, ch; dec dword ptr [rax-0x77]; ret; 
0x0000000017e231: cld; cmp eax, [rsi-0x4]; jne 0x000000000017e320; ret; 
0x0000000017e311: cld; cmp eax, [rsi-0x4]; jne short 0x000000000017e320; xor eax, eax; ret; 
0x0000000017dae0: cld; cmp eax, ecx; jne 0x000000000017dcf0; xor eax, eax; ret; 
0x0000000017b652: cld; cmp ecx, [rdi-0x4]; jne 0x000000000017b886; xor eax, eax; ret; 
0x0000000017a025: cld; cmp ecx, eax; jne 0x000000000017aa3f; xor eax, eax; ret; 
0x0000000009513a: cld; dec dword ptr [rax-0x7d]; ret; 
0x00000000139ff1: cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x00000000040317: cld; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x000000000e99c7: cld; idiv bh; inc dword ptr [rcx+0x39]; ret; 
0x00000000122060: cld; inc dword ptr [rcx]; add [rax+0x29], cl; ret; 
0x0000000017ee32: cld; ja short 0x000000000017edf8; vzeroupper; ret; 
0x0000000017f144: cld; ja short 0x000000000017f10a; vzeroupper; ret; 
0x0000000017f55d: cld; ja short 0x000000000017f523; vzeroupper; ret; 
0x0000000017fd0f: cld; ja short 0x000000000017fcd5; vzeroupper; ret; 
0x0000000018005d: cld; ja short 0x0000000000180023; vzeroupper; ret; 
0x00000000180186: cld; ja short 0x000000000018014c; vzeroupper; ret; 
0x00000000180513: cld; ja short 0x00000000001804d9; vzeroupper; ret; 
0x00000000180566: cld; ja short 0x000000000018052c; vzeroupper; ret; 
0x00000000180b88: cld; ja short 0x0000000000180b4e; vzeroupper; ret; 
0x00000000180e11: cld; ja short 0x0000000000180dd7; vzeroupper; ret; 
0x00000000181294: cld; ja short 0x000000000018125a; vzeroupper; ret; 
0x00000000181e6e: cld; ja short 0x0000000000181e34; vzeroupper; ret; 
0x0000000018221e: cld; ja short 0x00000000001821e4; vzeroupper; ret; 
0x000000001824c4: cld; ja short 0x000000000018248a; vzeroupper; ret; 
0x00000000182ade: cld; ja short 0x0000000000182aa4; vzeroupper; ret; 
0x00000000182f76: cld; ja short 0x0000000000182f3c; vzeroupper; ret; 
0x0000000018378c: cld; ja short 0x0000000000183752; vzeroupper; ret; 
0x0000000018408f: cld; ja short 0x0000000000184055; vzeroupper; ret; 
0x000000001841ff: cld; ja short 0x00000000001841c5; vzeroupper; ret; 
0x00000000184502: cld; ja short 0x00000000001844c8; vzeroupper; ret; 
0x00000000184563: cld; ja short 0x0000000000184529; vzeroupper; ret; 
0x00000000184b47: cld; ja short 0x0000000000184b0d; vzeroupper; ret; 
0x00000000184bc3: cld; ja short 0x0000000000184b89; vzeroupper; ret; 
0x000000001853d2: cld; ja short 0x0000000000185398; vzeroupper; ret; 
0x00000000185554: cld; ja short 0x000000000018551a; vzeroupper; ret; 
0x00000000185695: cld; ja short 0x000000000018565b; vzeroupper; ret; 
0x000000001859d9: cld; ja short 0x000000000018599f; vzeroupper; ret; 
0x000000001522cc: cld; jb short 0x00000000001522d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015237c: cld; jb short 0x0000000000152387; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154c9c: cld; jb short 0x0000000000154ca7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154d4c: cld; jb short 0x0000000000154d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000000d31a1: cld; jmp qword ptr [rsi+0x2e]; 
0x0000000006b521: cld; jmp qword ptr [rsi+0x66]; 
0x000000000d91e8: cld; jmp qword ptr [rsi+0xf]; 
0x0000000017b655: cld; jne 0x000000000017b886; xor eax, eax; ret; 
0x0000000017e234: cld; jne 0x000000000017e320; ret; 
0x000000000fe6a0: cld; jne short 0x00000000000fe664; neg eax; ret; 
0x0000000017e314: cld; jne short 0x000000000017e320; xor eax, eax; ret; 
0x0000000013a770: cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x00000000187e9d: cld; lea rax, [rdi+r8]; ret; 
0x00000000176ded: cld; lea rax, [rdi+r8]; vzeroupper; ret; 
0x00000000127aeb: cld; mov [r11], eax; mov eax, 0x1; ret; 
0x000000000b4c35: cld; mov [rax], ecx; ret; 
0x000000001779de: cld; mov [rax], ecx; vzeroupper; ret; 
0x000000001457b5: cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000001535ca: cld; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537aa: cld; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x0000000015398a: cld; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b6a: cld; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b92: cld; mov [rdi-0x4], edx; ret; 
0x00000000153d94: cld; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153f94: cld; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000154194: cld; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x000000001535e6: cld; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158ed5: cld; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x000000001537c6: cld; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158e55: cld; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x000000001539a6: cld; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158dd5: cld; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000153b86: cld; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158d55: cld; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000187e96: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x0000000018a336: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b2f6: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x000000001760b6: cld; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x0000000017ba1d: cld; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000000b4578: cld; mov [rdi], esi; ret; 
0x0000000018a33d: cld; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000017550d: cld; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000000b4572: cld; mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x00000000115628: cld; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000042562: cld; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000009d29e: cld; or [rax+0xf], cl; ret; 
0x000000000717ef: cld; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x0000000014d114: cld; or [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000dbb64: cld; or al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000115590: cld; out 0xff, eax; jmp qword ptr [rsi+0x66]; 
0x00000000088af8: cld; ret; 
0x0000000004085e: cld; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000018713b: cld; vmovdqu64 [rax+rdx-0x60], ymm16; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ecde: cld; vmovdqu64 [rax+rdx-0xc0], zmm16; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x00000000186a21: cld; vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x0000000017e976: cld; vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017bb8d: cld; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b953: cld; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017c07b: cld; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x000000001760bd: cld; vzeroupper; ret; 
0x00000000131ebf: cli; add [rbp+0x1d], esi; ret; 
0x000000000b4c20: cli; add [rdi+0x15], esi; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x0000000010ee3e: cli; add [rdi+0x1e], edi; add rsp, 0x18; ret; 
0x000000001871a6: cli; add [rdi+0x24], esi; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x0000000008e325: cli; add [rdi+0x2f], edi; add rsp, 0x18; ret; 
0x0000000017ed4b: cli; add [rdi+0x33], esi; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000017c10b: cli; add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x0000000017ba3c: cli; add [rdx+0x4], esi; mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000000f8f33: cli; add al, 0x74; or [rax+0x1c], edi; syscall; 
0x0000000017c0fe: cli; add dh, [rdx+0x8]; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x0000000015ac77: cli; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000144b44: cli; and [rax-0x77], cl; adc al, 0x24; call qword ptr [rax+0x8]; 
0x0000000010b5c9: cli; and [rbp+0x19], dh; mov edx, 0x40; mov eax, 0x14; syscall; 
0x000000000b4b70: cli; and [rdi+0xc], dh; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x0000000017c0c7: cli; and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000007ee7d: cli; call qword ptr [rax+0x2000ba]; 
0x0000000007e9bd: cli; call qword ptr [rax+0x53555441]; 
0x0000000009326e: cli; call qword ptr [rbp+0x48]; 
0x000000000501c1: cli; cmp esi, 0x2f; jmp rdx; 
0x00000000080ae3: cli; dec dword ptr [rax-0x77]; ret; 
0x000000000d69f1: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d68f3: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000d6839: cli; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x000000000d69d7: cli; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x000000000f639e: cli; dec dword ptr [rcx-0x77]; ret; 
0x0000000007445a: cli; emms; loop 0x0000000000074448; ret; 
0x0000000014d8a9: cli; inc dword ptr [rbp-0x727af040]; or [rax], eax; add [rax-0x7d], cl; ret; 
0x000000000b4b94: cli; ja short 0x00000000000b4ba5; movdqu [rdi+rdx-0x20], xmm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x00000000187095: cli; ja short 0x00000000001870b0; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x00000000187045: cli; ja short 0x00000000001870b9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x00000000122981: cli; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x0000000015256c: cli; jb short 0x0000000000152577; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015261c: cli; jb short 0x0000000000152627; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154f3c: cli; jb short 0x0000000000154f47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154fec: cli; jb short 0x0000000000154ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000017c0b4: cli; jb short 0x000000000017c0c6; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x00000000174cab: cli; jg short 0x0000000000174cc5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000017548b: cli; jg short 0x00000000001754a5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x00000000175a4b: cli; jg short 0x0000000000175a65; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x000000001760fc: cli; jg short 0x0000000000176116; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x000000001761a1: cli; jg short 0x00000000001761ab; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x00000000176ed1: cli; jg short 0x0000000000176edb; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x0000000017724e: cli; jg short 0x0000000000177258; vmovdqu [rdi+rdx-0x10], xmm1; vzeroupper; ret; 
0x000000001779c8: cli; jg short 0x00000000001779cb; vzeroupper; ret; 
0x0000000017b9f7: cli; jg short 0x000000000017ba01; vmovdqu [r9-0x10], xmm1; ret; 
0x0000000017c0d6: cli; jg short 0x000000000017c0e0; vmovdqu [rsi-0x10], xmm0; ret; 
0x00000000086c81: cli; jmp qword ptr [rax+rcx*2-0x39]; 
0x00000000086097: cli; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000007e5a0: cli; jmp qword ptr [rsi+0x2e]; 
0x00000000082d33: cli; jmp qword ptr [rsi+0x66]; 
0x00000000085b84: cli; jmp qword ptr [rsi+0xf]; 
0x000000000c16e7: cli; jmp qword ptr [rsi+0xf]; 
0x0000000008a92c: cli; jmp qword ptr [rsi-0x70]; 
0x000000000a153b: cli; jmp rdx; 
0x0000000009a9e2: cli; loope 0x000000000009a9e4; jmp qword ptr [rsi+0x2e]; 
0x000000000a156c: cli; mov [rax+0x2], dl; ret; 
0x000000000a14af: cli; mov [rdi+0x2], dl; ret; 
0x00000000153f98: cli; mov [rdi-0x4], ecx; ret; 
0x00000000153f92: cli; mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000100121: cli; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000ffd17: cli; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000011c70a: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000a5348: cli; movzx edx, dl; sub eax, edx; ret; 
0x0000000017c0e0: cli; or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x00000000040952: cli; push rax; ret; 
0x000000000d8386: cli; push rbx; pop rax; jne short 0x00000000000d8390; ret; 
0x000000000d85df: cli; push rsp; push rbx; setne al; ret; 
0x000000000b4b32: cli; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001778b9: cli; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x0000000003963e: cli; ret; 
0x000000000c9bdd: cli; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000c9bf0; ret; 
0x0000000008610f: cli; setae al; ret; 
0x000000000c9be2: cli; sub [rdi+rcx*4+0x2], bl; jbe short 0x00000000000c9bf0; ret; 
0x000000000df2b1: cli; sub eax, 0x47c6f075; or [rsi], dl; mov eax, 0x1; ret; 
0x000000000aa678: cli; test rdx, rdx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa838: cli; test rdx, rdx; je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000aa6d9: cli; test rdx, rdx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8a8: cli; test rdx, rdx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x0000000017be5d: cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x00000000128d0c: cli; xor dh, [rsi-0x30]; xor eax, eax; ret; 
0x00000000159a21: clts; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000089ed1: cmc; adc [rax], eax; syscall; 
0x0000000015b422: cmc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000c5f91: cmc; and ch, 0xf; je short 0x00000000000c5fb0; add rax, 0x2; ret; 
0x00000000103327: cmc; call far fword ptr [rax+0x4c]; 
0x00000000103403: cmc; call far fword ptr [rdx+0x5e]; 
0x00000000138e85: cmc; dec dword ptr [rax-0x73]; add eax, 0xc3692; add rsp, 0x8; ret; 
0x000000000d2963: cmc; dec dword ptr [rax-0x77]; ret; 
0x00000000102de2: cmc; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000d9ac0: cmc; inc dword ptr [rcx-0x80]; jl short 0x00000000000d9acd; jmp far fword ptr [rdi]; 
0x000000000d9abe: cmc; inc dword ptr [rcx-0x80]; jl short 0x00000000000d9acd; jmp far fword ptr [rdi]; 
0x00000000152bfc: cmc; jb short 0x0000000000152c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152cac: cmc; jb short 0x0000000000152cb7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001555cc: cmc; jb short 0x00000000001555d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015567c: cmc; jb short 0x0000000000155687; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001225f2: cmc; je short 0x00000000001225e8; pop rbx; ret; 
0x000000000cffa0: cmc; jmp far fword ptr [rcx]; 
0x000000000d5623: cmc; jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000d35f0: cmc; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000000d34b2: cmc; jmp qword ptr [rsi+0x2e]; 
0x000000000db5a3: cmc; jmp qword ptr [rsi+0x66]; 
0x000000000d2a0c: cmc; jmp qword ptr [rsi-0x70]; 
0x00000000188a4f: cmc; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a0f: cmc; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbdf: cmc; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbaf: cmc; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000187176: cmc; leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed18: cmc; leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000d85c8: cmc; lodsd [rsi]; add [rax], al; setne al; ret; 
0x0000000018909b: cmc; loopne 0x0000000000189101; mov bl, 0x5d; and [rdi], bh; ret; 
0x0000000018a798: cmc; loopne 0x000000000018a7fe; mov bl, 0x5d; and [rdi], bh; ret; 
0x0000000018bfbb: cmc; loopne 0x000000000018c021; mov bl, 0x5d; and [rdi], bl; ret; 
0x0000000018c738: cmc; loopne 0x000000000018c79e; mov bl, 0x5d; and [rdi], bl; ret; 
0x00000000158dda: cmc; mov [rdi-0x4], ecx; ret; 
0x0000000015381d: cmc; mov [rdi-0x4], edx; ret; 
0x00000000158dd3: cmc; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x000000001539a2: cmc; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000017d822: cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000006e847: cmc; or eax, 0xbe0f0000; ret; 
0x00000000108e87: cmc; ror byte ptr [rsi], cl; add [rbx+0x87f01f8], al; ret; 
0x0000000002d8e4: cmc; sbb eax, [rax]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000017d827: cmc; sub eax, edx; ret; 
0x000000000902df: cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008b400: cmova eax, edx; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000948f2: cmova eax, edx; mov [rip+0x1608c4], rax; ret; 
0x0000000008fcdb: cmova eax, edx; ret; 
0x000000000d2e4d: cmova edx, eax; mov eax, 0xd9; syscall; 
0x000000000948f1: cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x000000000d2e4c: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000853c9: cmovae eax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x0000000007bef0: cmovae eax, [rdx+0x8]; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000000853c8: cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x0000000007beef: cmovae rax, [rdx+0x8]; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x000000000554b1: cmovb eax, edi; mov rax, r8; ret; 
0x0000000010af6c: cmovb eax, edx; ret; 
0x0000000018b91a: cmovb eax, esi; ret; 
0x0000000017941a: cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174667: cmovb eax, esi; vzeroupper; ret; 
0x0000000018a338: cmovb ecx, [rcx+0x42fc0754]; mov byte ptr [rdi+rax], 0x0; ret; 
0x00000000175508: cmovb ecx, [rcx+0x42fc0754]; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x00000000187e98: cmovb ecx, [rcx+0x4afc0754]; lea eax, [rdi+rax]; ret; 
0x00000000176de8: cmovb ecx, [rcx+0x4afc0754]; lea eax, [rdi+rax]; vzeroupper; ret; 
0x000000000554b0: cmovb r8, rdi; mov rax, r8; ret; 
0x0000000010af6b: cmovb rax, rdx; ret; 
0x00000000086108: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000008aa0b: cmovbe esi, eax; syscall; 
0x00000000086107: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000008aa0a: cmovbe rsi, r8; syscall; 
0x00000000085e9e: cmove eax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c49e: cmove eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d93: cmove eax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000000d2118: cmove eax, eax; mov eax, r8d; ret; 
0x000000000c6204: cmove eax, ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001004ca: cmove eax, ebx; pop rbx; ret; 
0x00000000090450: cmove eax, ecx; ret; 
0x0000000009bf28: cmove eax, edx; add eax, 0x1; ret; 
0x000000000c737c: cmove eax, edx; add rsp, 0x58; ret; 
0x0000000011167a: cmove eax, edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000395ed: cmove eax, edx; mov [rip+0x1b6367], al; lea rax, [rip+0x1b6303]; ret; 
0x0000000003a20b: cmove eax, edx; ret; 
0x000000000fee26: cmove esp, eax; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000fee25: cmove r12, rax; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000d2117: cmove r8d, eax; mov eax, r8d; ret; 
0x00000000085e9d: cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c49d: cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d92: cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000000c6203: cmove rax, rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001004c9: cmove rax, rbx; pop rbx; ret; 
0x0000000009bf3b: cmove rax, rdx; add eax, 0x1; ret; 
0x000000000c737b: cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000003a20a: cmove rax, rdx; ret; 
0x000000000c58a4: cmovg eax, eax; mov eax, r8d; ret; 
0x0000000007aaab: cmovg eax, edx; test rax, rax; jne short 0x000000000007aaa0; mov rax, r8; ret; 
0x000000000833fb: cmovg eax, edx; test rax, rax; jne short 0x00000000000833f0; mov rax, r8; ret; 
0x000000000770d5: cmovg edx, ecx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000007aaaa: cmovg r8, rdx; test rax, rax; jne short 0x000000000007aaa0; mov rax, r8; ret; 
0x000000000833fa: cmovg r8, rdx; test rax, rax; jne short 0x00000000000833f0; mov rax, r8; ret; 
0x000000000c58a3: cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000770d4: cmovg rdx, rcx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000018773a: cmovl ecx, [rcx+0x48f9174c]; lea eax, [rdi+rdx]; ret; 
0x0000000017673a: cmovl ecx, [rcx+0x48f9174c]; lea eax, [rdi+rdx]; vzeroupper; ret; 
0x000000000d57f9: cmovle eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000185d2d: cmovle eax, ecx; ret; 
0x0000000017000d: cmovle eax, ecx; vzeroupper; ret; 
0x00000000185d2c: cmovle rax, rcx; ret; 
0x0000000017000c: cmovle rax, rcx; vzeroupper; ret; 
0x0000000012774a: cmovne eax, [rsp+0x4]; add rsp, 0x18; ret; 
0x000000000df5ac: cmovne eax, eax; mov eax, r8d; ret; 
0x00000000045ccd: cmovne eax, ecx; add rsp, 0x8; ret; 
0x0000000007de10: cmovne eax, ecx; ret; 
0x00000000173e2a: cmovne eax, ecx; vzeroupper; ret; 
0x0000000018050a: cmovne eax, ecx; xtest; je short 0x0000000000180516; vzeroall; ret; 
0x000000001844f9: cmovne eax, ecx; xtest; je short 0x0000000000184505; vzeroall; ret; 
0x0000000009d73f: cmovne eax, edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009e16a: cmovne eax, edi; ret; 
0x00000000149bb6: cmovne eax, edx; add rsp, 0x8; ret; 
0x00000000087cab: cmovne eax, edx; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000e0894: cmovne eax, edx; pop rbx; ret; 
0x000000000873a7: cmovne eax, edx; ret; 
0x000000000aa4f1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x0000000002d381: cmovne edi, edi; call rsi; 
0x0000000007fc4c: cmovne edx, ecx; mov [rdi], edx; ret; 
0x000000000906a0: cmovne esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000000aa4f5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x000000000df5ab: cmovne r8d, eax; mov eax, r8d; ret; 
0x0000000007de0e: cmovne rax, rcx; ret; 
0x00000000173e29: cmovne rax, rcx; vzeroupper; ret; 
0x00000000180509: cmovne rax, rcx; xtest; je short 0x0000000000180516; vzeroall; ret; 
0x000000001844f8: cmovne rax, rcx; xtest; je short 0x0000000000184505; vzeroall; ret; 
0x0000000009d73e: cmovne rax, rdi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009e169: cmovne rax, rdi; ret; 
0x00000000149bb5: cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000092886: cmovne rax, rdx; ret; 
0x000000000aa4f0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x0000000002d380: cmovne rdi, r15; call rsi; 
0x000000000aa4f4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x00000000051e52: cmovns eax, [rbx+0x14e8f0e0]; idiv bh; dec ecx; ret; 
0x000000001109cd: cmovns eax, [rbx+0x28]; pop rbx; ret; 
0x000000000d9400: cmovns eax, [rbx+0x394810c1]; ret; 
0x000000000b04f1: cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000b0519; jne 0x00000000000b0980; ret; 
0x000000000b038f: cmovns eax, [rbx-0x72b7e818]; jg short 0x00000000000b03af; jne 0x00000000000b0980; ret; 
0x000000000b030d: cmovns eax, [rbx-0x72b7ec18]; jg short 0x00000000000b0329; jne 0x00000000000b0980; ret; 
0x000000000b199b: cmovns eax, [rbx-0x72b7ef18]; jg short 0x00000000000b19b4; jne 0x00000000000b21a0; ret; 
0x000000000b01c8: cmovns eax, [rbx-0x72b7f618]; jg short 0x00000000000b01da; jne 0x00000000000b0980; ret; 
0x000000000b0146: cmovns eax, [rbx-0x72b7fa18]; jg short 0x00000000000b0154; jne 0x00000000000b0980; ret; 
0x0000000004136c: cmovns eax, [rsp+0xa0]; add rsp, 0x148; ret; 
0x000000000ffa28: cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x000000000ff058: cmovns eax, edx; ret; 
0x000000000b038e: cmovns r8, [r11-0x72b7e818]; jg short 0x00000000000b03af; jne 0x00000000000b0980; ret; 
0x000000000b030c: cmovns r8, [r11-0x72b7ec18]; jg short 0x00000000000b0329; jne 0x00000000000b0980; ret; 
0x000000000b199a: cmovns r8d, [r11-0x72b7ef18]; jg short 0x00000000000b19b4; jne 0x00000000000b21a0; ret; 
0x000000001109cc: cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x0000000004136b: cmovns rax, [rsp+0xa0]; add rsp, 0x148; ret; 
0x0000000018a35a: cmovp ecx, [rcx+0x42f80754]; mov byte ptr [rdi+rax], 0x0; ret; 
0x0000000017552a: cmovp ecx, [rcx+0x42f80754]; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x00000000187eba: cmovp ecx, [rcx+0x4af80754]; lea eax, [rdi+rax]; ret; 
0x00000000176e0a: cmovp ecx, [rcx+0x4af80754]; lea eax, [rdi+rax]; vzeroupper; ret; 
0x00000000183aba: cmovp ecx, [rcx-0x1607f8ac]; sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000149d8d: cmovp edi, ebx; dec dword ptr [rax-0x77]; ret; 
0x00000000128d1a: cmovs eax, [rbp-0x474d8a37]; add [rax], eax; add [rax], al; ret; 
0x00000000144b50: cmovs eax, [rbx+0x314518c4]; rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x00000000092e78: cmovs eax, [rbx+0x5d5b50c4]; pop r12; ret; 
0x000000000b56e0: cmovs eax, [rbx+0x5d5b58c4]; pop r12; pop r13; ret; 
0x0000000008e630: cmovs eax, [rbx-0x3fcebf3c]; pop rbx; pop rbp; pop r12; ret; 
0x0000000002e837: cmovs eax, [rbx-0x76b30f20]; and [rax-0x77], cl; ret; 
0x0000000006d75c: cmovs eax, [rbx-0x76b70f19]; cmp [rsi+0x63], cl; add al, 0xb3; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b5b: cmovs eax, [rbx-0x76b70f19]; cmp [rsi+0x63], cl; add al, 0xbb; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x000000000f214b: cmovs eax, [rbx-0x76b70f20]; ret; 
0x0000000002d470: cmovs eax, [rcx+0x90c4]; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000002fd5c: cmovs eax, edx; ret; 
0x000000000b1975: cmovs ecx, [rbp-0x7af0f081]; and [rax], cl; add [rax], al; ret; 
0x000000000b0291: cmovs ecx, [rbp-0x7af0f081]; in al, 0x6; add [rax], al; ret; 
0x0000000017ba05: cmovs ecx, [rbx+0x498b4836]; clc; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000000fb414: cmovs ecx, [rbx+0x7394806]; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x00000000095e8d: cmovs ecx, [rbx-0x173ef7be]; add al, 0x39; ret; 
0x00000000139997: cmovs ecx, [rbx-0x76b7f7bb]; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000092848: cmovs ecx, [rbx-0x7ab7e7c0]; shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x000000001171de: cmovs ecx, [rcx+0x44a89f0]; test ecx, ecx; jne short 0x0000000000117198; mov rax, r8; ret; 
0x000000000b3a49: cmovs ecx, [rcx-0x12cff8a9]; mov [rdi+0xf], ch; ret; 
0x000000000b3a29: cmovs ecx, [rcx-0x12cff9a9]; mov [rdi+0xe], ch; ret; 
0x000000000b3a09: cmovs ecx, [rcx-0x12cffaa9]; mov [rdi+0xd], ch; ret; 
0x000000000af969: cmovs ecx, [rcx-0x6f3cf8a9]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b1939: cmovs ecx, [rcx-0x72b7f9a9]; or eax, 0xee88349; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000001458d8: cmovs ecx, [rcx-0x76b7f7b9]; ja short 0x0000000000145901; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000115568: cmovs edi, [rcx]; js short 0x0000000000115575; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x000000000ee126: cmp [r11-0x377c0620], r8b; add cl, [rax+0x16893847]; mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x000000000c57c6: cmp [r11], r15b; cmp [rbp+0x13], r14b; ret; 
0x00000000139162: cmp [r13+r9*4+0x6c], r9b; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000009a85a: cmp [r8+0x8], rsi; jb short 0x000000000009a870; mov [r8], rsi; mov rax, rdi; ret; 
0x000000000df218: cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x00000000114be3: cmp [r8-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x0000000011063d: cmp [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000139ff5: cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000000b544b: cmp [r9], edx; jne short 0x00000000000b53e5; test edx, edx; jne short 0x00000000000b5430; ret; 
0x0000000012f9aa: cmp [rax+0x10], edi; jne short 0x000000000012f9a0; ret; 
0x0000000012f9a9: cmp [rax+0x10], rdi; jne short 0x000000000012f9a0; ret; 
0x00000000090ad7: cmp [rax+0x18], ecx; je short 0x0000000000090ae0; ret; 
0x00000000090ad6: cmp [rax+0x18], rcx; je short 0x0000000000090ae0; ret; 
0x000000000a4c37: cmp [rax+0x1], cl; clc; ret; 
0x00000000071c42: cmp [rax+0x39], cl; ret; 
0x000000000df5a3: cmp [rax+0x4], esi; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret; 
0x0000000011556a: cmp [rax+0x8], edi; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x0000000009a85b: cmp [rax+0x8], esi; jb short 0x000000000009a870; mov [r8], rsi; mov rax, rdi; ret; 
0x00000000115569: cmp [rax+0x8], rdi; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x0000000009e47f: cmp [rax+0xdb24bc], al; add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret; 
0x00000000094404: cmp [rax+0xe2], bh; syscall; 
0x000000000df219: cmp [rax+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x00000000151517: cmp [rax+rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000016aae7: cmp [rax+rax], ecx; add [rbp-0x77], cl; ret far; 
0x00000000101342: cmp [rax-0x1], bh; ret; 
0x0000000011088c: cmp [rax-0x3c41f0e8], cl; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000103f7f: cmp [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret; 
0x00000000085dab: cmp [rax-0x75], cl; add rsp, 0x38; jmp rax; 
0x0000000007c7b8: cmp [rax-0x75], cl; and al, 0x8; call qword ptr [rax+0x18]; 
0x00000000032548: cmp [rax-0x75], cl; je short 0x0000000000032571; push rax; mov rdi, [rsp+0x48]; call r15; 
0x00000000033240: cmp [rax-0x75], cl; je short 0x0000000000033269; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x0000000009b48c: cmp [rax-0x77], cl; fmul st, dword ptr [rax-0x77]; ret far; 
0x00000000119088: cmp [rax-0x77], cl; out dx, al; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x0000000004dac2: cmp [rax-0x77], cl; ret far; 
0x00000000140186: cmp [rax-0x77], cl; ret; 
0x00000000114be4: cmp [rax-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000138e4d: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000013abc1: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x0000000013dbde: cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x000000001402cb: cmp [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x000000000014033e; call rax; 
0x00000000140cbb: cmp [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000140d1e; call rax; 
0x0000000003c158: cmp [rax-0x7d], cl; ret; 
0x00000000189142: cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000016f843: cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000a4c26: cmp [rax], ah; ret; 
0x0000000007f088: cmp [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret far; 
0x0000000002fcd7: cmp [rax], al; add [rax], al; add [rax+0x1], cl; ret; 
0x000000000d6ecd: cmp [rax], al; add [rax], al; syscall; 
0x00000000083a93: cmp [rax], al; je short 0x0000000000083aa0; ret; 
0x000000000d3d78: cmp [rax], al; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d7d28: cmp [rax], al; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d7d88: cmp [rax], al; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7fb8: cmp [rax], al; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d8028: cmp [rax], al; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000ff7d8: cmp [rax], al; je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff848: cmp [rax], al; je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x000000001431f9: cmp [rax], bl; je short 0x0000000000143200; ret; 
0x000000000a9f30: cmp [rax], dh; cmovne rax, rdx; ret; 
0x000000000a50f6: cmp [rax], dh; ret; 
0x000000000a4c16: cmp [rax], dl; ret; 
0x0000000010b3c7: cmp [rax], eax; je short 0x000000000010b3d0; ret; 
0x00000000100ad4: cmp [rax], eax; lea rax, [rcx+0x1]; jne short 0x0000000000100aaf; mov rax, r8; ret; 
0x0000000002dec3: cmp [rax], ebx; sbb al, 0x0; ret; 
0x000000000a4c15: cmp [rax], r10b; ret; 
0x00000000189141: cmp [rax], r12b; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000016f842: cmp [rax], r12b; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000a4c25: cmp [rax], r12b; ret; 
0x000000000a50f5: cmp [rax], r14b; ret; 
0x000000000a9f2f: cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000c57ca: cmp [rbp+0x13], dh; ret; 
0x000000000c57c9: cmp [rbp+0x13], r14b; ret; 
0x00000000089991: cmp [rbp+0x31], eax; shl byte ptr [rcx], cl; sar byte ptr [rsi+0x80], cl; mov eax, r8d; syscall; 
0x0000000012daf3: cmp [rbp+0x69840fff], al; add eax, 0x83480000; stc; add [rax-0x77], ecx; ret far; 
0x00000000155303: cmp [rbp+0x6], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001370d3: cmp [rbp+0xb], ebx; add [rbp+0x31], al; jmp qword ptr [rbx+rax*4+0x38]; 
0x00000000139163: cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000940d3: cmp [rbp-0x2708ffeb], ecx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000713ec: cmp [rbp-0x8d0], eax; jbe 0x0000000000071e80; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000713eb: cmp [rbp-0x8d0], rax; jbe 0x0000000000071e80; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000104658: cmp [rbp], ebx; jbe short 0x0000000000104688; mov rsi, r12; mov rdi, r14; call r13; 
0x00000000104657: cmp [rbp], rbx; jbe short 0x0000000000104688; mov rsi, r12; mov rdi, r14; call r13; 
0x0000000009048c: cmp [rbx+0x17408f8], al; ret; 
0x00000000086152: cmp [rbx+0x17408fa], al; ret; 
0x00000000192009: cmp [rbx+0x41], bl; pop rsi; ret; 
0x00000000086043: cmp [rbx+0x41], bl; pop rsp; jmp rax; 
0x0000000007832b: cmp [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000c6b86: cmp [rbx+0x5d], bl; pop r12; sub rax, rdx; ret; 
0x0000000002d6da: cmp [rbx+0x5d], bl; ret; 
0x00000000104adf: cmp [rbx+0x5d], ebx; pop r12; ret; 
0x00000000127dd4: cmp [rbx-0x10], al; dec dword ptr [rax-0x77]; ret; 
0x00000000102ad3: cmp [rbx-0x2708fff2], esp; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ee127: cmp [rbx-0x377c0620], al; add cl, [rax+0x16893847]; mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x0000000012e4a5: cmp [rbx-0x43c63dc4], ecx; ret; 
0x0000000005ce0c: cmp [rbx-0x5ff43], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000005fa87: cmp [rbx-0x61f4b], cl; dec dword ptr [rax-0x7d]; ret; 
0x000000000c57c7: cmp [rbx], bh; cmp [rbp+0x13], r14b; ret; 
0x00000000115e93: cmp [rbx], edi; add al, 0x0; cmovne rax, rdx; ret; 
0x0000000002d5cc: cmp [rcx+0x18], ch; add al, ch; ret far; 
0x0000000007b0cb: cmp [rcx+0x5d5b7453], cl; pop r12; ret; 
0x00000000152543: cmp [rcx+0x6], edi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000005f917: cmp [rcx+0xf], al; mov dh, 0x45; add [rax-0x7d], cl; ret; 
0x0000000003f097: cmp [rcx+rcx*4+0x48], cl; or cl, ch; ret; 
0x00000000139ff6: cmp [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x20]; 
0x0000000007e540: cmp [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000008601f: cmp [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x0000000007a1e2: cmp [rcx+rcx*4-0x38], al; ret; 
0x00000000141f55: cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20]; 
0x000000000fc120: cmp [rcx+rcx*4-0x3a], cl; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000000ed56c: cmp [rcx+rcx*4-0x40], cl; ret; 
0x000000000dc600: cmp [rcx-0x77], al; ret; 
0x0000000005c1c6: cmp [rcx-0x77], eax; rol byte ptr [rbx+0x974fff8], 0x44; mov eax, eax; ret; 
0x00000000120e85: cmp [rcx-0xa], al; ret; 
0x00000000103c7b: cmp [rcx-0xa], eax; or [rcx], al; jne short 0x0000000000103cc0; ret; 
0x000000000f873a: cmp [rcx], al; add [rax], al; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000389b4: cmp [rcx], al; add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx; 
0x00000000168189: cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b1864: cmp [rcx], cl; add [rax], al; ret; 
0x00000000121550: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000110860: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000b544c: cmp [rcx], edx; jne short 0x00000000000b53e5; test edx, edx; jne short 0x00000000000b5430; ret; 
0x000000000853c5: cmp [rdi+0x10], eax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x000000000853c4: cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x0000000012c6fa: cmp [rdi+0x14], eax; sete al; movzx eax, al; ret; 
0x000000000fe18d: cmp [rdi+0x28], eax; sete al; ret; 
0x000000000fe18c: cmp [rdi+0x28], rax; sete al; ret; 
0x0000000012c758: cmp [rdi+0x4], eax; sete al; movzx eax, al; ret; 
0x000000000f01e8: cmp [rdi+0x4], edx; ja short 0x00000000000f01f3; setne al; movzx eax, al; ret; 
0x0000000008a977: cmp [rdi+0x628], edi; mov edx, 0x16; mov eax, 0x0; cmove eax, edx; ret; 
0x0000000008a976: cmp [rdi+0x628], rdi; mov edx, 0x16; mov eax, 0x0; cmove eax, edx; ret; 
0x000000000c566b: cmp [rdi+0xc], ecx; jne 0x00000000000c57e0; xor eax, eax; ret; 
0x00000000142baa: cmp [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000102785: cmp [rdi], cl; add [rbx+0x337f01f8], al; pop rbp; ret; 
0x000000000fbf32: cmp [rdi], cl; mov dh, 0xc0; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x00000000179edd: cmp [rdi], dl; ret; 
0x00000000090afe: cmp [rdi], eax; je short 0x0000000000090b10; sbb eax, eax; or eax, 0x1; ret; 
0x000000000fb419: cmp [rdi], eax; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x00000000090afd: cmp [rdi], rax; je short 0x0000000000090b10; sbb eax, eax; or eax, 0x1; ret; 
0x000000000fb418: cmp [rdi], rax; seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x00000000039637: cmp [rdx+0x38], edi; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000007de0d: cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x0000000007de0b: cmp [rdx+0x48], r8; cmovne eax, ecx; ret; 
0x00000000092267: cmp [rdx+0x68], ecx; jge short 0x0000000000092289; mov [rdi+0x20], rax; mov [rip+0x162609], rdi; ret; 
0x0000000007beec: cmp [rdx+0x8], eax; cmovae rax, [rdx+0x8]; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x0000000007beeb: cmp [rdx+0x8], rax; cmovae rax, [rdx+0x8]; sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x0000000002d14b: cmp [rdx+0xd8], eax; jne short 0x000000000002d117; ret; 
0x0000000002d14a: cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x0000000008b10f: cmp [rdx+rdi], esi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x0000000008b10e: cmp [rdx+rdi], rsi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x00000000102bd3: cmp [rdx-0x2708fff2], esp; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b4e5a: cmp [rdx], al; add [rax], al; ret; 
0x0000000009282d: cmp [rdx], ecx; jl short 0x0000000000092820; je short 0x0000000000092844; xor eax, eax; ret; 
0x0000000009287d: cmp [rdx], edi; jl short 0x0000000000092870; mov edx, 0x0; cmovne rax, rdx; ret; 
0x000000000f89cc: cmp [rip+0x77cf8949], eax; sbb eax, 0x6349018b; test [rax], r8d; add rax, r13; jmp rax; 
0x0000000012f9eb: cmp [rip+0xc78a7], eax; jne short 0x000000000012fa06; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x0000000012f9ea: cmp [rip+0xc78a7], rax; jne short 0x000000000012fa06; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x000000000fe878: cmp [rip-0x1010], ah; or esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000001098d3: cmp [rip-0x2708fff2], esi; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000039639: cmp [rsi+0x13], dh; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000006d763: cmp [rsi+0x63], cl; add al, 0xb3; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b62: cmp [rsi+0x63], cl; add al, 0xbb; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x000000001091d3: cmp [rsi+rcx], edi; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000d8578: cmp [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d8448: cmp [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000d8639: cmp [rsi], ah; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x00000000089634: cmp [rsi], al; add [rax], al; syscall; 
0x0000000008a3ee: cmp [rsi], al; add [rax], al; xor edi, edi; mov eax, 0x8f; syscall; 
0x0000000009bc16: cmp [rsi], cl; add [rax-0x73], cl; add eax, 0xe3910; cmove rax, rdx; ret; 
0x000000001095e4: cmp [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000109544: cmp [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000e08da: cmp [rsi], cl; je 0x00000000000e083d; ret; 
0x0000000010947c: cmp [rsi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000012d18c: cmp ah, 0xb; add [rdi], cl; mov [rdi+rdi*8-0x1], ch; jmp qword ptr [rdi+rax*8]; 
0x000000001782cb: cmp ah, [rax]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c07d: cmp ah, [rax]; jne 0x000000000018be07; ret; 
0x00000000189147: cmp ah, [rax]; sub eax, edx; ret; 
0x0000000016f848: cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000108fd4: cmp al, 0x0; add [rax], al; syscall; 
0x000000000b4dd9: cmp al, 0x1; add [rax], al; ret; 
0x0000000005c1b9: cmp al, 0x1; add [rax], al; syscall; 
0x00000000101490: cmp al, 0x20; je short 0x0000000000101480; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000083767: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000b57f3: cmp al, 0x24; lea r9, [rsp+0x28]; call rbx; 
0x00000000085ad1: cmp al, 0x24; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x0000000010944d: cmp al, 0x24; mov eax, 0x116; syscall; 
0x000000000f7fce: cmp al, 0x24; mov eax, 0x11; syscall; 
0x000000000f807e: cmp al, 0x24; mov eax, 0x12; syscall; 
0x0000000010a6f9: cmp al, 0x24; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000000fa630: cmp al, 0x24; mov eax, 0x4f; syscall; 
0x000000000d22dc: cmp al, 0x24; mov eax, 0xe6; syscall; 
0x000000000fa507: cmp al, 0x24; mov r8d, eax; mov eax, 0x55; syscall; 
0x0000000014c2bc: cmp al, 0x24; mov rax, [rax+0x330]; jmp rax; 
0x000000000fa62c: cmp al, 0x24; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x00000000042a32: cmp al, 0x24; mov rdi, r12; call rcx; 
0x000000000428b3: cmp al, 0x24; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x00000000139175: cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000042301: cmp al, 0x24; mov rsi, r15; call r14; 
0x000000000d4ad0: cmp al, 0x24; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000139037: cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001390e6: cmp al, 0x24; test r15d, r15d; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000861bd: cmp al, 0x25; add [rbx], al; add [rax], al; ret; 
0x000000001322e7: cmp al, 0x25; xor [rax], al; add [rax], al; call rax; 
0x0000000012b317: cmp al, 0x28; jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x0000000017b633: cmp al, 0x2; add [rax], al; xor eax, eax; ret; 
0x0000000009ad1d: cmp al, 0x3; je short 0x000000000009ad30; movsx edx, al; mov eax, edx; ret; 
0x000000000db407: cmp al, 0x3f; jne short 0x00000000000db421; mov eax, 0x1; ret; 
0x0000000013f03c: cmp al, 0x48; add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x0000000007ae0b: cmp al, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x000000000b5bd0: cmp al, 0x49; clc; jmp qword ptr [rsi+0x2e]; 
0x0000000008b113: cmp al, 0x4c; mov eax, eax; ret; 
0x000000000b0440: cmp al, 0x5; add [rax], al; ret; 
0x0000000006eceb: cmp al, 0x5a; jbe 0x000000000006f668; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000128d4f: cmp al, 0x5d; jbe short 0x0000000000128d40; xor eax, eax; ret; 
0x00000000128dcf: cmp al, 0x5d; jbe short 0x0000000000128dc0; xor eax, eax; ret; 
0x00000000128e6f: cmp al, 0x5d; jbe short 0x0000000000128e60; xor eax, eax; ret; 
0x00000000128eff: cmp al, 0x5d; jbe short 0x0000000000128ef0; xor eax, eax; ret; 
0x00000000193059: cmp al, 0x6; add [rbp-0x17], bl; cmp bh, ch; jmp qword ptr [rsi+0xf]; 
0x000000000df21a: cmp al, 0x80; je short 0x00000000000df230; mov eax, r9d; ret; 
0x0000000003ec04: cmp al, 0x82; add rdi, r10; jmp rdi; 
0x00000000178297: cmp al, 0xa; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000017871d: cmp al, 0xa; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c04b: cmp al, 0xa; jne 0x000000000018be07; ret; 
0x0000000018c7d1: cmp al, 0xa; jne 0x000000000018c547; ret; 
0x0000000007f5d0: cmp al, 0xaf; sti; jmp qword ptr [rsi+0x66]; 
0x0000000007bdd0: cmp al, 0xe7; sti; jmp qword ptr [rsi+0x66]; 
0x000000001091d4: cmp al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000109154: cmp al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000178294: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000017871a: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c048: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x000000000018be07; ret; 
0x0000000018c7ce: cmp al, 0xe; cmp edi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x000000000f461c: cmp al, 0xf; xchg ebp, eax; ret; 
0x00000000078ba3: cmp al, 0xfb; jmp qword ptr [rsi+0xf]; 
0x000000000d20fd: cmp al, 0xfd; add al, [rax]; add [rax], al; syscall; 
0x000000000a1902: cmp al, 0xfd; jmp qword ptr [rsi+0x2e]; 
0x000000000395eb: cmp al, 0xff; cmove eax, edx; mov [rip+0x1b6367], al; lea rax, [rip+0x1b6303]; ret; 
0x000000000d6f32: cmp al, [rax]; add [rax], al; syscall; 
0x00000000111b2b: cmp al, [rax]; add [rcx+rcx*4-0x2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x000000000d2121: cmp al, [rcx+rcx*4-0x40]; ret; 
0x00000000176cd2: cmp al, [rdx]; add [rax], al; vzeroupper; ret; 
0x0000000017db8e: cmp al, [rsi-0x1]; jne 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017dce6: cmp al, [rsi-0x1]; jne short 0x000000000017dd05; xor eax, eax; ret; 
0x00000000084380: cmp al, bl; nop [rax+rax]; sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x00000000113e1f: cmp al, ch; pop rbx; stc; bnd jmp qword ptr [rsi+0x66]; 
0x000000000fd314: cmp al, dh; bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000a4bf6: cmp al, dh; ret; 
0x000000000a4bf5: cmp al, r14b; ret; 
0x0000000010bfec: cmp ax, 0xffff; je short 0x000000000010c020; add eax, 0x1; mov [rdx], ax; ret; 
0x000000001337fb: cmp bh, 0xff; call qword ptr [rax-0x48]; 
0x00000000040196: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x0000000009287e: cmp bh, [rdi+rbp*8-0x46]; add [rax], al; add [rax], al; cmovne rax, rdx; ret; 
0x00000000116cfa: cmp bh, bh; call qword ptr [rax-0x18]; 
0x000000001396fe: cmp bh, bh; xor eax, 0x7fc83; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000078e1e: cmp bh, bl; jmp qword ptr [rsi+0x2e]; 
0x00000000078e1f: cmp bh, bl; jmp qword ptr [rsi+0x2e]; 
0x00000000138961: cmp bh, ch; dec dword ptr [rax-0x77]; ret; 
0x0000000019305f: cmp bh, ch; jmp qword ptr [rsi+0xf]; 
0x0000000019305e: cmp bh, ch; jmp qword ptr [rsi+0xf]; 
0x00000000103d38: cmp bl, [rbx+0x5d]; ret; 
0x0000000014b272: cmp bl, [rcx]; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x0000000014b2ba: cmp bl, [rcx]; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000006b252: cmp bl, [rip+0x2ebf000a]; add [rax], al; add [rax-0x77], cl; ret; 
0x00000000144909: cmp bl, al; nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000806c9: cmp bl, al; nop [rax+rax]; ret; 
0x0000000004f804: cmp byte ptr [rax+0x1], 0x0; jne short 0x000000000004f800; pop rbx; ret; 
0x0000000013dd32: cmp byte ptr [rax+0xf000000], 0xc8; mov eax, eax; mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000004f7e1: cmp byte ptr [rax-0x1], 0x2f; jne short 0x000000000004f7d8; pop rbx; ret; 
0x000000000930cf: cmp byte ptr [rax-0x1], 0x5b; pop rbp; pop r12; ret; 
0x000000000d3d77: cmp byte ptr [rax], 0x0; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d7d27: cmp byte ptr [rax], 0x0; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d7d87: cmp byte ptr [rax], 0x0; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7fb7: cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d8027: cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000ff7d7: cmp byte ptr [rax], 0x0; je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff847: cmp byte ptr [rax], 0x0; je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x00000000168188: cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b4e59: cmp byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000124910: cmp byte ptr [rbx], 0x2e; je short 0x0000000000124920; pop rbx; ret; 
0x000000000897d0: cmp byte ptr [rcx+0x970], 0x0; mov rax, [rcx+0x640]; mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x0000000010b3c6: cmp byte ptr [rcx], 0x0; je short 0x000000000010b3d0; ret; 
0x00000000100ad3: cmp byte ptr [rcx], 0x0; lea rax, [rcx+0x1]; jne short 0x0000000000100aaf; mov rax, r8; ret; 
0x00000000185ea6: cmp byte ptr [rcx], 0xc2; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d986: cmp byte ptr [rcx], 0xc2; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x00000000040859: cmp byte ptr [rdi+0x23], 0x44; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000013744f: cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x0000000003ae60: cmp byte ptr [rdi], 0x0; jne short 0x000000000003ae70; add rsp, 0x18; ret; 
0x0000000003aea0: cmp byte ptr [rdi], 0x0; jne short 0x000000000003aeb0; add rsp, 0x18; ret; 
0x00000000043e28: cmp byte ptr [rdi], 0x0; jne short 0x0000000000043e30; pop rbx; ret; 
0x00000000094100: cmp byte ptr [rdi], 0x2f; jne short 0x0000000000094148; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x000000000983e0: cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x0000000014c360: cmp byte ptr [rsp+0x1f], 0x0; je short 0x000000000014c34c; mov [rsp+0xc], eax; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000141bbd: cmp byte ptr [rsp+0x8], 0x0; setne al; add rsp, 0x78; ret; 
0x00000000151dea: cmp ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000009de4f: cmp cl, 0x3d; jne short 0x000000000009de16; mov rax, r10; ret; 
0x000000001093cb: cmp cl, [r14]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000016f3d5: cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000b525a: cmp cl, [rax+rax]; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x00000000143985: cmp cl, [rax-0x75]; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000000e0c81: cmp cl, [rax-0x7d]; ret; 
0x000000000bf810: cmp cl, [rbp-0x77]; ret; 
0x000000000f931c: cmp cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d4ef1: cmp cl, [rdi]; test [rdi+0xf000000], bh; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000004f9bc: cmp cl, [rdi]; xchg esp, eax; ret; 
0x0000000010931c: cmp cl, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001093cc: cmp cl, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000ee141: cmp cl, bh; mov dword ptr [rsi], 0x0; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000007f191: cmp cl, ch; jns short 0x000000000007f16f; std; jmp qword ptr [rsi+0xf]; 
0x00000000108895: cmp cl, ch; ret; 
0x0000000002d3f2: cmp cl, cl; or al, 0x0; nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000014a4e3: cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x0000000005212d: cmp cx, 0x7fff; jne short 0x0000000000052118; mov eax, 0x1; ret; 
0x0000000012c6d8: cmp cx, dx; je short 0x000000000012c6e0; ret; 
0x000000000f26a1: cmp dh, 0xff; jmp far fword ptr [rdx]; 
0x000000000c7fe2: cmp dh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x0000000003f7d1: cmp dh, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000001889cb: cmp dh, [rax]; jne short 0x00000000001889f1; ret; 
0x0000000008b111: cmp dh, [rbp+0x3c]; mov rax, r8; ret; 
0x00000000043e25: cmp dh, [rcx]; rol byte ptr [rax+0x375003f], 0x5b; ret; 
0x00000000127f54: cmp dh, [rdi+0x11]; movzx eax, al; movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x00000000188a25: cmp dh, [rdi+rax+0x20]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188bb5: cmp dh, [rdi+rax+0x20]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188b8d: cmp dh, [rdi+rax+0x40]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x000000001889e5: cmp dh, [rdi+rax+0x60]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x60]; ret; 
0x00000000173c03: cmp dh, [rdi+rax]; jne short 0x0000000000173c35; add rax, rdi; vzeroupper; ret; 
0x00000000173da1: cmp dh, [rdi+rax]; jne short 0x0000000000173dc5; add rax, rdi; vzeroupper; ret; 
0x00000000188ba5: cmp dh, [rdi+rax]; jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x00000000188c06: cmp dh, [rdx+rax]; jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000173e22: cmp dh, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000116d97: cmp dh, bh; call qword ptr [rax-0x18]; 
0x00000000116d96: cmp dh, bh; call qword ptr [rax-0x18]; 
0x0000000008e504: cmp dh, bh; ret; 
0x000000000e87bc: cmp dh, dh; ret; 
0x000000000b4c1f: cmp dl, 0x1; ja short 0x00000000000b4c39; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x0000000017ed4a: cmp dl, 0x1; ja short 0x000000000017ed82; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x000000001871a5: cmp dl, 0x1; ja short 0x00000000001871ce; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x0000000017ba3b: cmp dl, 0x1; jb short 0x000000000017ba44; mov cl, [rsi]; mov [rdi], cl; ret; 
0x0000000017c10a: cmp dl, 0x1; jb short 0x000000000017c111; mov [rdi], cl; ret; 
0x0000000017c0c6: cmp dl, 0x20; jb short 0x000000000017c0d5; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000017c0fd: cmp dl, 0x2; jb short 0x000000000017c10a; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000000df2b0: cmp dl, 0x2d; jne short 0x00000000000df2a5; mov byte ptr [rdi+0x8], 0x16; mov eax, 0x1; ret; 
0x00000000128d0b: cmp dl, 0x32; jbe short 0x0000000000128ce0; xor eax, eax; ret; 
0x0000000017c0b3: cmp dl, 0x40; jb short 0x000000000017c0c6; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0f2: cmp dl, 0x4; jb short 0x000000000017c0fd; mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x0000000011c651: cmp dl, 0x5; jbe 0x000000000011c5c5; xor eax, eax; pop rbx; ret; 
0x000000000df282: cmp dl, 0x5e; jne short 0x00000000000df2b0; mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x0000000017c0df: cmp dl, 0x8; jb short 0x000000000017c0ee; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x00000000040e62: cmp dl, cl; adc al, 0x0; add rsp, 0x10; pop rbx; ret; 
0x0000000007b078: cmp dword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x000000000806c0: cmp dword ptr [rax+0x30], 0x0; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x0000000013ae2a: cmp dword ptr [rax+0x31000023], 0xfffffff6; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000001431f8: cmp dword ptr [rax], 0x18; je short 0x0000000000143200; ret; 
0x000000000d8577: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d8447: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000d8638: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000009108b: cmp dword ptr [rbp-0x7c9bffeb], 0xe675013a; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000001109c3: cmp dword ptr [rbx+0x28], 0x0; mov eax, 0x0; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x00000000111311: cmp dword ptr [rdi+0x10], 0x0; je short 0x0000000000111320; xor eax, eax; ret; 
0x000000000f11cd: cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x0000000007fb26: cmp dword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x00000000087641: cmp dword ptr [rdi+0x28], 0x0; je short 0x0000000000087650; xor eax, eax; ret; 
0x00000000083a91: cmp dword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x00000000085bc3: cmp dword ptr [rdi+0x460], 0x0; je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x000000001155e8: cmp dword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x00000000086300: cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x000000000922d5: cmp dword ptr [rdi], 0x2; mov [rdx+0x8], rax; mov [rdx+0x10], rcx; je short 0x0000000000092303; ret; 
0x00000000115714: cmp dword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x0000000014b271: cmp dword ptr [rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x0000000014b2b9: cmp dword ptr [rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000013efc0: cmp dword ptr [rsi+0x10], 0xc; je short 0x000000000013efd0; xor eax, eax; ret; 
0x000000000d2231: cmp dword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000d2268; mov eax, 0xe3; syscall; 
0x000000001037cd: cmp dword ptr [rsi], 0x0; mov rbx, rsi; je short 0x00000000001037e0; pop rbx; ret; 
0x0000000013f7d0: cmp dword ptr [rsi], 0x2; je short 0x000000000013f7e0; mov eax, 0x1; ret; 
0x0000000002ce0b: cmp dword ptr [rsp+0x10], 0x0; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000014c345: cmp dword ptr [rsp+0x28], 0x0; jne short 0x000000000014c352; add rsp, 0x30; pop rbx; ret; 
0x000000000fe640: cmp dword ptr [rsp-0x50], 0x2; mov eax, [rsp-0x4c]; jne short 0x00000000000fe605; neg eax; ret; 
0x000000000fe698: cmp dword ptr [rsp-0x8], 0x2; mov eax, [rsp-0x4]; jne short 0x00000000000fe664; neg eax; ret; 
0x000000001431f7: cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x000000000d8576: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d8446: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000d8637: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000014b270: cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x0000000014b2b8: cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x000000000f115e: cmp dx, 0x2; je short 0x00000000000f1168; ret; 
0x0000000014a4cf: cmp dx, cx; sete al; ret; 
0x000000000a152e: cmp eax, 0x108865; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000074965: cmp eax, 0x133cd6; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x0000000006f68c: cmp eax, 0x138baf; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000065037: cmp eax, 0x142d80; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000005d7fe: cmp eax, 0x14a1ad; movzx r12d, r12b; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x000000000983e1: cmp eax, 0x15cdc1; add [rbp+0x7], dh; ret; 
0x000000000927ff: cmp eax, 0x162084; mov [rdi+0x18], rax; ret; 
0x00000000092272: cmp eax, 0x162609; ret; 
0x0000000003ee3f: cmp eax, 0x164194; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000008fec5: cmp eax, 0x1648e6; xor eax, eax; ret; 
0x0000000002d3c7: cmp eax, 0x181bf4; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3ae: cmp eax, 0x181c27; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000001763b1: cmp eax, 0x1; ja 0x0000000000176080; je 0x0000000000176070; vzeroupper; ret; 
0x0000000017628d: cmp eax, 0x1; ja 0x0000000000176160; je 0x0000000000176150; vzeroupper; ret; 
0x00000000176fbd: cmp eax, 0x1; ja 0x0000000000176e90; je 0x0000000000176e80; vzeroupper; ret; 
0x00000000188203: cmp eax, 0x1; ja 0x0000000000187e60; je 0x0000000000187e50; mov rax, rdi; ret; 
0x000000001880bd: cmp eax, 0x1; ja 0x0000000000187f70; je 0x0000000000187f60; ret; 
0x0000000018a533: cmp eax, 0x1; ja 0x000000000018a300; je 0x000000000018a2f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018b633: cmp eax, 0x1; ja 0x000000000018b2c0; je 0x000000000018b2b0; ret; 
0x0000000018b4ed: cmp eax, 0x1; ja 0x000000000018b3a0; je 0x000000000018b390; ret; 
0x000000001098ba: cmp eax, 0x1; ja short 0x00000000001098e8; mov eax, 0x4; syscall; 
0x00000000109909: cmp eax, 0x1; ja short 0x0000000000109938; mov eax, 0x5; syscall; 
0x0000000010995a: cmp eax, 0x1; ja short 0x0000000000109988; mov eax, 0x6; syscall; 
0x00000000086288: cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b8: cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x0000000013a637: cmp eax, 0x1; je short 0x000000000013a660; mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x00000000043b06: cmp eax, 0x1; jg 0x0000000000043be8; xor esi, esi; mov rdi, r9; call r13; 
0x000000000434b9: cmp eax, 0x1; jg short 0x00000000000434e0; xor eax, eax; pop rbx; ret; 
0x0000000004405a: cmp eax, 0x1; jg short 0x0000000000044080; pop rbp; ret; 
0x000000000441de: cmp eax, 0x1; jg short 0x0000000000044200; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000004d7cb: cmp eax, 0x1; jg short 0x000000000004d820; add rsp, 0x10; pop rbx; ret; 
0x0000000005c2fc: cmp eax, 0x1; jg short 0x000000000005c308; ret; 
0x000000000783d2: cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x00000000082f8a: cmp eax, 0x1; jg short 0x0000000000082fc0; add rsp, 0x8; ret; 
0x00000000084e82: cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x0000000008aac0: cmp eax, 0x1; jg short 0x000000000008aae0; mov eax, r12d; pop r12; ret; 
0x000000000c84ed: cmp eax, 0x1; jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x000000000d71fb: cmp eax, 0x1; jg short 0x00000000000d7208; pop rbx; ret; 
0x00000000102788: cmp eax, 0x1; jg short 0x00000000001027c0; pop rbp; ret; 
0x00000000108e8b: cmp eax, 0x1; jg short 0x0000000000108e98; ret; 
0x0000000011f493: cmp eax, 0x1; jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x0000000012e520: cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x0000000012f122: cmp eax, 0x1; jg short 0x000000000012f140; pop rbx; ret; 
0x000000001328d8: cmp eax, 0x1; jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x00000000133c79: cmp eax, 0x1; jg short 0x0000000000133c80; ret; 
0x00000000149ff2: cmp eax, 0x1; jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x0000000014a0c9: cmp eax, 0x1; jg short 0x000000000014a0f0; mov rax, r12; pop r12; ret; 
0x0000000014a132: cmp eax, 0x1; jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x00000000192ebf: cmp eax, 0x1; jg short 0x0000000000192ee0; pop rbx; ret; 
0x0000000005c0bc: cmp eax, 0x1; jne short 0x000000000005c0d0; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000144a20: cmp eax, 0x1; jne short 0x0000000000144a11; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000013e95d: cmp eax, 0x1; mov eax, 0x1; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x00000000145c55: cmp eax, 0x1; sete al; add rsp, 0x18; movzx eax, al; ret; 
0x00000000145dbf: cmp eax, 0x1; sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000947a4: cmp eax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x0000000008befe: cmp eax, 0x21; jne short 0x000000000008bf07; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x0000000005c1e2: cmp eax, 0x26; je short 0x000000000005c20e; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000f95e3: cmp eax, 0x26; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x00000000109634: cmp eax, 0x26; je short 0x0000000000109674; mov eax, r8d; ret; 
0x00000000075d8b: cmp eax, 0x29; ja short 0x0000000000075da0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000010b361: cmp eax, 0x2; ja short 0x000000000010b388; mov eax, 0x1f; syscall; 
0x00000000100674: cmp eax, 0x2; jbe short 0x0000000000100680; ret; 
0x0000000013253a: cmp eax, 0x2; jne short 0x0000000000132558; mov eax, r8d; ret; 
0x00000000144a11: cmp eax, 0x2; sete al; movzx eax, al; ret; 
0x0000000013ab19: cmp eax, 0x3; jbe short 0x000000000013ab28; mov eax, 0x2; ret; 
0x000000000888e0: cmp eax, 0x3; je short 0x00000000000888f0; ret; 
0x00000000088990: cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x000000000d923a: cmp eax, 0x4000; sete al; add rsp, 0x98; ret; 
0x00000000094864: cmp eax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000fe744: cmp eax, 0x410000; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000000fe03e: cmp eax, 0x448b48ff; and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x000000000fe03f: cmp eax, 0x448b48ff; and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x000000000dd703: cmp eax, 0x48000ce2; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000073c3c: cmp eax, 0x48fffff4; add eax, ecx; jmp rax; 
0x00000000044b12: cmp eax, 0x4; je short 0x0000000000044ad8; mov eax, 0xffffffff; ret; 
0x000000000d8521: cmp eax, 0x517b; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000d8551: cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d84d5: cmp eax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000073b8c: cmp eax, 0x5a; jbe 0x0000000000074950; lea rax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000012f1a7: cmp eax, 0x61e80008; mov bl, 0xf0; call qword ptr [rax+0x53555441]; 
0x0000000013dc2b: cmp eax, 0x70eb0; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x00000000144d72: cmp eax, 0x7402f883; sub [rbp+0x310c74c0], eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x000000000948e9: cmp eax, 0x7; mov eax, 0x10; cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x000000000fe1ae: cmp eax, 0x8000; je short 0x00000000000fe1c0; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x0000000012b7d6: cmp eax, 0x81cbd; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x0000000012b600: cmp eax, 0x81e6f; movzx esi, al; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x0000000009de8d: cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000ca67d: cmp eax, 0x840f0400; out dx, al; adc al, 0x0; add dh, dh; ret; 
0x000000000d6a3f: cmp eax, 0x85ffffb8; shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x0000000009048d: cmp eax, 0x8; je short 0x0000000000090493; ret; 
0x000000000e075d: cmp eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000055709: cmp eax, 0x9; ja short 0x00000000000556e0; mov rax, r8; ret; 
0x000000000644b8: cmp eax, 0x9; mov eax, 0xffffffff; jbe short 0x0000000000064490; mov [rdi], rsi; ret; 
0x000000000702b8: cmp eax, 0x9; mov eax, 0xffffffff; jbe short 0x0000000000070290; mov [rdi], rsi; ret; 
0x00000000075d18: cmp eax, 0x9; mov eax, 0xffffffff; jbe short 0x0000000000075cf0; mov [rdi], rsi; ret; 
0x000000000948d4: cmp eax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x0000000014aec1: cmp eax, 0xa2662; test edi, edi; jns short 0x000000000014aed0; ret; 
0x000000000f8ad7: cmp eax, 0xb6bad; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000d8503: cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000045cf9: cmp eax, 0xc00; jne short 0x0000000000045d1f; xor eax, eax; add rsp, 0x8; ret; 
0x00000000048469: cmp eax, 0xc00; jne short 0x000000000004848f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004ac19: cmp eax, 0xc00; jne short 0x000000000004ac3f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000525e9: cmp eax, 0xc00; jne short 0x000000000005260f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b7059: cmp eax, 0xc00; jne short 0x00000000000b707f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b9669: cmp eax, 0xc00; jne short 0x00000000000b968f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000bbb79: cmp eax, 0xc00; jne short 0x00000000000bbb9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000c1c79: cmp eax, 0xc00; jne short 0x00000000000c1c9f; xor eax, eax; add rsp, 0x8; ret; 
0x00000000091954: cmp eax, 0xc; jne short 0x0000000000091987; mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000919b6: cmp eax, 0xc; jne short 0x00000000000919e7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091a04: cmp eax, 0xc; jne short 0x0000000000091a37; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091a54: cmp eax, 0xc; jne short 0x0000000000091a87; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091aa4: cmp eax, 0xc; jne short 0x0000000000091ad7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091ba4: cmp eax, 0xc; jne short 0x0000000000091bd7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091bf4: cmp eax, 0xc; jne short 0x0000000000091c27; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091c44: cmp eax, 0xc; jne short 0x0000000000091c77; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091c94: cmp eax, 0xc; jne short 0x0000000000091cc7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091d01: cmp eax, 0xc; jne short 0x0000000000091d2f; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091d54: cmp eax, 0xc; jne short 0x0000000000091d87; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091e24: cmp eax, 0xc; jne short 0x0000000000091e57; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091e94: cmp eax, 0xc; jne short 0x0000000000091ec7; mov eax, 0x3; add rsp, 0x8; ret; 
0x000000001322db: cmp eax, 0xca1e0; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000120391: cmp eax, 0xd695a; test edi, edi; je short 0x00000000001203a8; mov rax, [rip+0xdc8c7]; ret; 
0x0000000011f4b3: cmp eax, 0xd7728; call rax; 
0x00000000109074: cmp eax, 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109014: cmp eax, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109044: cmp eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f90fc: cmp eax, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000cfad3: cmp eax, 0xdb490; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cfb3b: cmp eax, 0xdb614; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000cd52a: cmp eax, 0xdd475; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000149d03: cmp eax, 0xe8000b2c; xchg esp, eax; ret far; 
0x000000000d8531: cmp eax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000006e7ef: cmp eax, 0xf00000e; mov esi, 0x3d8d48c3; ret; 
0x00000000101902: cmp eax, 0xf4701; test rdi, rdi; jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x000000000be363: cmp eax, 0xff; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x000000000948a4: cmp eax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x00000000074970: cmp eax, 0xffffe708; add rax, rdi; jmp rax; 
0x000000000f9b93: cmp eax, 0xfffff000; ja 0x00000000000f9c20; add rsp, 0x78; ret; 
0x0000000004168d: cmp eax, 0xfffff000; ja short 0x0000000000041698; ret; 
0x000000000416c9: cmp eax, 0xfffff000; ja short 0x0000000000041720; ret; 
0x00000000044a34: cmp eax, 0xfffff000; ja short 0x0000000000044a90; ret; 
0x0000000005c158: cmp eax, 0xfffff000; ja short 0x000000000005c160; ret; 
0x0000000005c18b: cmp eax, 0xfffff000; ja short 0x000000000005c198; ret; 
0x00000000086d4b: cmp eax, 0xfffff000; ja short 0x0000000000086d58; ret; 
0x0000000008e74b: cmp eax, 0xfffff000; ja short 0x000000000008e758; ret; 
0x00000000090a92: cmp eax, 0xfffff000; ja short 0x0000000000090aa0; xor eax, eax; ret; 
0x00000000093aa8: cmp eax, 0xfffff000; ja short 0x0000000000093ab0; ret; 
0x00000000093eb6: cmp eax, 0xfffff000; ja short 0x0000000000093ee8; ret; 
0x00000000093f68: cmp eax, 0xfffff000; ja short 0x0000000000093f70; ret; 
0x00000000093fa7: cmp eax, 0xfffff000; ja short 0x0000000000094018; ret; 
0x00000000094067: cmp eax, 0xfffff000; ja short 0x00000000000940d0; ret; 
0x00000000094113: cmp eax, 0xfffff000; ja short 0x0000000000094120; mov eax, r8d; ret; 
0x00000000094519: cmp eax, 0xfffff000; ja short 0x0000000000094528; ret; 
0x00000000094569: cmp eax, 0xfffff000; ja short 0x0000000000094578; ret; 
0x000000000945bc: cmp eax, 0xfffff000; ja short 0x00000000000945c8; ret; 
0x000000000c72a8: cmp eax, 0xfffff000; ja short 0x00000000000c72b0; ret; 
0x000000000c73bd: cmp eax, 0xfffff000; ja short 0x00000000000c73c8; ret; 
0x000000000c753d: cmp eax, 0xfffff000; ja short 0x00000000000c7548; ret; 
0x000000000c9b68: cmp eax, 0xfffff000; ja short 0x00000000000c9b70; ret; 
0x000000000c9b98: cmp eax, 0xfffff000; ja short 0x00000000000c9ba0; ret; 
0x000000000d2242: cmp eax, 0xfffff000; ja short 0x00000000000d2250; ret; 
0x000000000d2e58: cmp eax, 0xfffff000; ja short 0x00000000000d2e60; ret; 
0x000000000d3d84: cmp eax, 0xfffff000; ja short 0x00000000000d3db8; ret; 
0x000000000d67e7: cmp eax, 0xfffff000; ja short 0x00000000000d6848; ret; 
0x000000000d689a: cmp eax, 0xfffff000; ja short 0x00000000000d6900; ret; 
0x000000000d69c4: cmp eax, 0xfffff000; ja short 0x00000000000d6a00; ret; 
0x000000000d6f7d: cmp eax, 0xfffff000; ja short 0x00000000000d6fa0; hlt; mov eax, esi; syscall; 
0x000000000d7d34: cmp eax, 0xfffff000; ja short 0x00000000000d7d60; ret; 
0x000000000d7d94: cmp eax, 0xfffff000; ja short 0x00000000000d7dc0; ret; 
0x000000000d7fc4: cmp eax, 0xfffff000; ja short 0x00000000000d8000; ret; 
0x000000000d8034: cmp eax, 0xfffff000; ja short 0x00000000000d8070; ret; 
0x000000000f00f8: cmp eax, 0xfffff000; ja short 0x00000000000f0100; ret; 
0x000000000f0198: cmp eax, 0xfffff000; ja short 0x00000000000f01a0; ret; 
0x000000000f7f97: cmp eax, 0xfffff000; ja short 0x00000000000f7ff8; ret; 
0x000000000f8047: cmp eax, 0xfffff000; ja short 0x00000000000f80a8; ret; 
0x000000000f90eb: cmp eax, 0xfffff000; ja short 0x00000000000f90f8; ret; 
0x000000000f930a: cmp eax, 0xfffff000; ja short 0x00000000000f9318; xor eax, eax; ret; 
0x000000000f9652: cmp eax, 0xfffff000; ja short 0x00000000000f9660; ret; 
0x000000000f9698: cmp eax, 0xfffff000; ja short 0x00000000000f96a0; ret; 
0x000000000f96c8: cmp eax, 0xfffff000; ja short 0x00000000000f96d0; ret; 
0x000000000f9c9f: cmp eax, 0xfffff000; ja short 0x00000000000f9d00; ret; 
0x000000000f9d44: cmp eax, 0xfffff000; ja short 0x00000000000f9da0; ret; 
0x000000000f9dd8: cmp eax, 0xfffff000; ja short 0x00000000000f9de0; ret; 
0x000000000f9e08: cmp eax, 0xfffff000; ja short 0x00000000000f9e10; ret; 
0x000000000fa364: cmp eax, 0xfffff000; ja short 0x00000000000fa3b0; ret; 
0x000000000fa4e4: cmp eax, 0xfffff000; ja short 0x00000000000fa530; ret; 
0x000000000fda04: cmp eax, 0xfffff000; ja short 0x00000000000fda60; ret; 
0x000000000fdacc: cmp eax, 0xfffff000; ja short 0x00000000000fdb38; add rsp, 0x30; pop r13; ret; 
0x000000000fdfd7: cmp eax, 0xfffff000; ja short 0x00000000000fe050; ret; 
0x000000000fe08b: cmp eax, 0xfffff000; ja short 0x00000000000fe098; ret; 
0x000000000fe0c0: cmp eax, 0xfffff000; ja short 0x00000000000fe0d0; ret; 
0x000000000fe457: cmp eax, 0xfffff000; ja short 0x00000000000fe4b8; ret; 
0x000000000fe507: cmp eax, 0xfffff000; ja short 0x00000000000fe568; ret; 
0x000000000fe5a8: cmp eax, 0xfffff000; ja short 0x00000000000fe5b0; ret; 
0x000000000fe5fe: cmp eax, 0xfffff000; ja short 0x00000000000fe628; ret; 
0x000000000fe65d: cmp eax, 0xfffff000; ja short 0x00000000000fe680; ret; 
0x000000000fe6e5: cmp eax, 0xfffff000; ja short 0x00000000000fe718; ret; 
0x000000000fe753: cmp eax, 0xfffff000; ja short 0x00000000000fe788; ret; 
0x000000000fe7a5: cmp eax, 0xfffff000; ja short 0x00000000000fe7b0; ret; 
0x000000000fe7db: cmp eax, 0xfffff000; ja short 0x00000000000fe7e8; ret; 
0x000000000fe808: cmp eax, 0xfffff000; ja short 0x00000000000fe810; ret; 
0x000000000fe9e4: cmp eax, 0xfffff000; ja short 0x00000000000fe9f0; ret; 
0x000000000feb2e: cmp eax, 0xfffff000; ja short 0x00000000000feb88; ret; 
0x000000000fed01: cmp eax, 0xfffff000; ja short 0x00000000000fed10; ret; 
0x000000000fed42: cmp eax, 0xfffff000; ja short 0x00000000000fed50; ret; 
0x000000000fed78: cmp eax, 0xfffff000; ja short 0x00000000000fed80; ret; 
0x000000000ff264: cmp eax, 0xfffff000; ja short 0x00000000000ff2c0; ret; 
0x000000000ff304: cmp eax, 0xfffff000; ja short 0x00000000000ff360; ret; 
0x000000000ff3aa: cmp eax, 0xfffff000; ja short 0x00000000000ff410; ret; 
0x000000000ff45a: cmp eax, 0xfffff000; ja short 0x00000000000ff4c0; ret; 
0x000000000ff7e4: cmp eax, 0xfffff000; ja short 0x00000000000ff820; ret; 
0x000000000ff854: cmp eax, 0xfffff000; ja short 0x00000000000ff890; ret; 
0x000000000ff8d5: cmp eax, 0xfffff000; ja short 0x00000000000ff918; ret; 
0x000000000ff965: cmp eax, 0xfffff000; ja short 0x00000000000ff9a8; ret; 
0x000000000ffe89: cmp eax, 0xfffff000; ja short 0x00000000000fff08; add rsp, 0x50; pop r12; ret; 
0x000000000fffb4: cmp eax, 0xfffff000; ja short 0x0000000000100000; ret; 
0x00000000100074: cmp eax, 0xfffff000; ja short 0x00000000001000c0; ret; 
0x00000000100134: cmp eax, 0xfffff000; ja short 0x0000000000100140; ret; 
0x000000001012b8: cmp eax, 0xfffff000; ja short 0x00000000001012c0; ret; 
0x000000001012e8: cmp eax, 0xfffff000; ja short 0x00000000001012f0; ret; 
0x00000000102a03: cmp eax, 0xfffff000; ja short 0x0000000000102a70; pop rbx; pop rbp; ret; 
0x00000000102b04: cmp eax, 0xfffff000; ja short 0x0000000000102b60; ret; 
0x00000000104e2f: cmp eax, 0xfffff000; ja short 0x0000000000104e40; ret; 
0x00000000109008: cmp eax, 0xfffff000; ja short 0x0000000000109010; ret; 
0x00000000109038: cmp eax, 0xfffff000; ja short 0x0000000000109040; ret; 
0x000000001090dd: cmp eax, 0xfffff000; ja short 0x0000000000109150; ret; 
0x00000000109190: cmp eax, 0xfffff000; ja short 0x00000000001091a0; ret; 
0x000000001092b7: cmp eax, 0xfffff000; ja short 0x0000000000109318; ret; 
0x00000000109367: cmp eax, 0xfffff000; ja short 0x00000000001093c8; ret; 
0x00000000109417: cmp eax, 0xfffff000; ja short 0x0000000000109478; ret; 
0x000000001094c7: cmp eax, 0xfffff000; ja short 0x0000000000109540; ret; 
0x00000000109584: cmp eax, 0xfffff000; ja short 0x00000000001095e0; ret; 
0x00000000109648: cmp eax, 0xfffff000; ja short 0x0000000000109688; mov r8d, eax; mov eax, r8d; ret; 
0x000000001096b0: cmp eax, 0xfffff000; ja short 0x00000000001096c0; ret; 
0x00000000109768: cmp eax, 0xfffff000; ja short 0x0000000000109770; ret; 
0x0000000010979b: cmp eax, 0xfffff000; ja short 0x00000000001097a8; ret; 
0x000000001097fb: cmp eax, 0xfffff000; ja short 0x0000000000109808; ret; 
0x0000000010982b: cmp eax, 0xfffff000; ja short 0x0000000000109838; ret; 
0x0000000010985b: cmp eax, 0xfffff000; ja short 0x0000000000109868; ret; 
0x00000000109888: cmp eax, 0xfffff000; ja short 0x0000000000109890; ret; 
0x000000001098c7: cmp eax, 0xfffff000; ja short 0x00000000001098d0; ret; 
0x00000000109916: cmp eax, 0xfffff000; ja short 0x0000000000109920; ret; 
0x00000000109967: cmp eax, 0xfffff000; ja short 0x0000000000109970; ret; 
0x000000001099bc: cmp eax, 0xfffff000; ja short 0x00000000001099c8; ret; 
0x0000000010a3c4: cmp eax, 0xfffff000; ja short 0x000000000010a420; ret; 
0x0000000010a494: cmp eax, 0xfffff000; ja short 0x000000000010a4f0; ret; 
0x0000000010a58b: cmp eax, 0xfffff000; ja short 0x000000000010a598; ret; 
0x0000000010a5fd: cmp eax, 0xfffff000; ja short 0x000000000010a668; ret; 
0x0000000010a6b7: cmp eax, 0xfffff000; ja short 0x000000000010a730; ret; 
0x0000000010a774: cmp eax, 0xfffff000; ja short 0x000000000010a7d0; ret; 
0x0000000010a81d: cmp eax, 0xfffff000; ja short 0x000000000010a888; ret; 
0x0000000010a8d4: cmp eax, 0xfffff000; ja short 0x000000000010a930; ret; 
0x0000000010a977: cmp eax, 0xfffff000; ja short 0x000000000010a9f0; ret; 
0x0000000010aa2b: cmp eax, 0xfffff000; ja short 0x000000000010aa38; ret; 
0x0000000010ad17: cmp eax, 0xfffff000; ja short 0x000000000010ad78; ret; 
0x0000000010adc7: cmp eax, 0xfffff000; ja short 0x000000000010ae30; ret; 
0x0000000010ae77: cmp eax, 0xfffff000; ja short 0x000000000010aed8; ret; 
0x0000000010afd7: cmp eax, 0xfffff000; ja short 0x000000000010b038; ret; 
0x0000000010b087: cmp eax, 0xfffff000; ja short 0x000000000010b0f8; ret; 
0x0000000010b138: cmp eax, 0xfffff000; ja short 0x000000000010b140; ret; 
0x0000000010b178: cmp eax, 0xfffff000; ja short 0x000000000010b1a0; ret; 
0x0000000010b1d8: cmp eax, 0xfffff000; ja short 0x000000000010b1e0; ret; 
0x0000000010b249: cmp eax, 0xfffff000; ja short 0x000000000010b278; ret; 
0x0000000010b29b: cmp eax, 0xfffff000; ja short 0x000000000010b2a8; ret; 
0x0000000010b2c8: cmp eax, 0xfffff000; ja short 0x000000000010b2d0; ret; 
0x0000000010b2f8: cmp eax, 0xfffff000; ja short 0x000000000010b300; ret; 
0x0000000010b32b: cmp eax, 0xfffff000; ja short 0x000000000010b338; ret; 
0x0000000010b36e: cmp eax, 0xfffff000; ja short 0x000000000010b3a8; ret; 
0x00000000116c9a: cmp eax, 0xfffff000; ja short 0x0000000000116ca8; ret; 
0x0000000014eb20: cmp eax, 0xfffff000; ja short 0x000000000014eb30; ret; 
0x0000000008aa10: cmp eax, 0xfffff000; jbe short 0x000000000008aa20; neg eax; ret; 
0x0000000008aa55: cmp eax, 0xfffff000; jbe short 0x000000000008aa60; neg eax; ret; 
0x000000000902d5: cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008fcd1: cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x00000000041658: cmp eax, 0xfffff001; jae short 0x0000000000041660; ret; 
0x00000000041aa8: cmp eax, 0xfffff001; jae short 0x0000000000041ab0; ret; 
0x00000000050032: cmp eax, 0xfffff001; jae short 0x000000000005003c; xor eax, eax; ret; 
0x000000000d6718: cmp eax, 0xfffff001; jae short 0x00000000000d6720; ret; 
0x000000000d6938: cmp eax, 0xfffff001; jae short 0x00000000000d6940; ret; 
0x000000000d6f39: cmp eax, 0xfffff001; jae short 0x00000000000d6f41; ret; 
0x000000000d7378: cmp eax, 0xfffff001; jae short 0x00000000000d7380; ret; 
0x000000000d7cf8: cmp eax, 0xfffff001; jae short 0x00000000000d7d00; ret; 
0x000000000d7e68: cmp eax, 0xfffff001; jae short 0x00000000000d7e70; ret; 
0x000000000d7e98: cmp eax, 0xfffff001; jae short 0x00000000000d7ea0; ret; 
0x000000000d7ef8: cmp eax, 0xfffff001; jae short 0x00000000000d7f00; ret; 
0x000000000d7f28: cmp eax, 0xfffff001; jae short 0x00000000000d7f30; ret; 
0x000000000d7f58: cmp eax, 0xfffff001; jae short 0x00000000000d7f60; ret; 
0x000000000d7f88: cmp eax, 0xfffff001; jae short 0x00000000000d7f90; ret; 
0x000000000effa8: cmp eax, 0xfffff001; jae short 0x00000000000effb0; ret; 
0x000000000effd8: cmp eax, 0xfffff001; jae short 0x00000000000effe0; ret; 
0x000000000f0008: cmp eax, 0xfffff001; jae short 0x00000000000f0010; ret; 
0x000000000f0038: cmp eax, 0xfffff001; jae short 0x00000000000f0040; ret; 
0x000000000f0068: cmp eax, 0xfffff001; jae short 0x00000000000f0070; ret; 
0x000000000f0098: cmp eax, 0xfffff001; jae short 0x00000000000f00a0; ret; 
0x000000000f00c8: cmp eax, 0xfffff001; jae short 0x00000000000f00d0; ret; 
0x000000000f9788: cmp eax, 0xfffff001; jae short 0x00000000000f9790; ret; 
0x000000000f97b8: cmp eax, 0xfffff001; jae short 0x00000000000f97c0; ret; 
0x000000000f9968: cmp eax, 0xfffff001; jae short 0x00000000000f9970; ret; 
0x000000000f9998: cmp eax, 0xfffff001; jae short 0x00000000000f99a0; ret; 
0x000000000fa218: cmp eax, 0xfffff001; jae short 0x00000000000fa220; ret; 
0x000000000fa3e8: cmp eax, 0xfffff001; jae short 0x00000000000fa3f0; ret; 
0x000000000fa418: cmp eax, 0xfffff001; jae short 0x00000000000fa420; ret; 
0x000000000fa448: cmp eax, 0xfffff001; jae short 0x00000000000fa450; ret; 
0x000000000fa478: cmp eax, 0xfffff001; jae short 0x00000000000fa480; ret; 
0x000000000fa4a8: cmp eax, 0xfffff001; jae short 0x00000000000fa4b0; ret; 
0x000000000fa568: cmp eax, 0xfffff001; jae short 0x00000000000fa570; ret; 
0x000000000fa598: cmp eax, 0xfffff001; jae short 0x00000000000fa5a0; ret; 
0x000000000fada8: cmp eax, 0xfffff001; jae short 0x00000000000fadb0; ret; 
0x000000000fadd8: cmp eax, 0xfffff001; jae short 0x00000000000fade0; ret; 
0x000000000fae08: cmp eax, 0xfffff001; jae short 0x00000000000fae10; ret; 
0x000000000fae3b: cmp eax, 0xfffff001; jae short 0x00000000000fae43; ret; 
0x000000000fb258: cmp eax, 0xfffff001; jae short 0x00000000000fb260; ret; 
0x000000000fb28b: cmp eax, 0xfffff001; jae short 0x00000000000fb293; ret; 
0x000000000fb2b8: cmp eax, 0xfffff001; jae short 0x00000000000fb2c0; ret; 
0x000000000fb2e8: cmp eax, 0xfffff001; jae short 0x00000000000fb2f0; ret; 
0x000000000fb318: cmp eax, 0xfffff001; jae short 0x00000000000fb320; ret; 
0x000000000fb34b: cmp eax, 0xfffff001; jae short 0x00000000000fb353; ret; 
0x000000000fb378: cmp eax, 0xfffff001; jae short 0x00000000000fb380; ret; 
0x000000000fb3a8: cmp eax, 0xfffff001; jae short 0x00000000000fb3b0; ret; 
0x000000000fb3d8: cmp eax, 0xfffff001; jae short 0x00000000000fb3e0; ret; 
0x000000000fdf9b: cmp eax, 0xfffff001; jae short 0x00000000000fdfa3; ret; 
0x000000000ff088: cmp eax, 0xfffff001; jae short 0x00000000000ff090; ret; 
0x000000000ff228: cmp eax, 0xfffff001; jae short 0x00000000000ff230; ret; 
0x000000000ffb48: cmp eax, 0xfffff001; jae short 0x00000000000ffb50; ret; 
0x000000000ffc58: cmp eax, 0xfffff001; jae short 0x00000000000ffc60; ret; 
0x000000000fff48: cmp eax, 0xfffff001; jae short 0x00000000000fff50; ret; 
0x000000000fff78: cmp eax, 0xfffff001; jae short 0x00000000000fff80; ret; 
0x00000000100038: cmp eax, 0xfffff001; jae short 0x0000000000100040; ret; 
0x000000001000f8: cmp eax, 0xfffff001; jae short 0x0000000000100100; ret; 
0x000000001003e8: cmp eax, 0xfffff001; jae short 0x00000000001003f0; ret; 
0x00000000100418: cmp eax, 0xfffff001; jae short 0x0000000000100420; ret; 
0x00000000100448: cmp eax, 0xfffff001; jae short 0x0000000000100450; ret; 
0x0000000010287a: cmp eax, 0xfffff001; jae short 0x0000000000102882; ret; 
0x00000000102a98: cmp eax, 0xfffff001; jae short 0x0000000000102aa0; ret; 
0x00000000102ac8: cmp eax, 0xfffff001; jae short 0x0000000000102ad0; ret; 
0x00000000102b98: cmp eax, 0xfffff001; jae short 0x0000000000102ba0; ret; 
0x00000000102bc8: cmp eax, 0xfffff001; jae short 0x0000000000102bd0; ret; 
0x00000000102bfb: cmp eax, 0xfffff001; jae short 0x0000000000102c03; ret; 
0x00000000102c28: cmp eax, 0xfffff001; jae short 0x0000000000102c30; ret; 
0x00000000102c58: cmp eax, 0xfffff001; jae short 0x0000000000102c60; ret; 
0x00000000102c88: cmp eax, 0xfffff001; jae short 0x0000000000102c90; ret; 
0x00000000102cb8: cmp eax, 0xfffff001; jae short 0x0000000000102cc0; ret; 
0x0000000010533b: cmp eax, 0xfffff001; jae short 0x0000000000105343; ret; 
0x00000000105368: cmp eax, 0xfffff001; jae short 0x0000000000105370; ret; 
0x00000000105398: cmp eax, 0xfffff001; jae short 0x00000000001053a0; ret; 
0x000000001053cb: cmp eax, 0xfffff001; jae short 0x00000000001053d3; ret; 
0x000000001053fb: cmp eax, 0xfffff001; jae short 0x0000000000105403; ret; 
0x00000000105428: cmp eax, 0xfffff001; jae short 0x0000000000105430; ret; 
0x0000000010545b: cmp eax, 0xfffff001; jae short 0x0000000000105463; ret; 
0x00000000105488: cmp eax, 0xfffff001; jae short 0x0000000000105490; ret; 
0x000000001054b8: cmp eax, 0xfffff001; jae short 0x00000000001054c0; ret; 
0x000000001054eb: cmp eax, 0xfffff001; jae short 0x00000000001054f3; ret; 
0x00000000105518: cmp eax, 0xfffff001; jae short 0x0000000000105520; ret; 
0x0000000010554b: cmp eax, 0xfffff001; jae short 0x0000000000105553; ret; 
0x00000000108f28: cmp eax, 0xfffff001; jae short 0x0000000000108f30; ret; 
0x00000000108f58: cmp eax, 0xfffff001; jae short 0x0000000000108f60; ret; 
0x00000000109068: cmp eax, 0xfffff001; jae short 0x0000000000109070; ret; 
0x00000000109098: cmp eax, 0xfffff001; jae short 0x00000000001090a0; ret; 
0x000000001091c8: cmp eax, 0xfffff001; jae short 0x00000000001091d0; ret; 
0x0000000010924b: cmp eax, 0xfffff001; jae short 0x0000000000109253; ret; 
0x00000000109278: cmp eax, 0xfffff001; jae short 0x0000000000109280; ret; 
0x00000000109ce8: cmp eax, 0xfffff001; jae short 0x0000000000109cf0; ret; 
0x00000000109d18: cmp eax, 0xfffff001; jae short 0x0000000000109d20; ret; 
0x00000000109d5b: cmp eax, 0xfffff001; jae short 0x0000000000109d63; ret; 
0x00000000109d88: cmp eax, 0xfffff001; jae short 0x0000000000109d90; ret; 
0x00000000109db8: cmp eax, 0xfffff001; jae short 0x0000000000109dc0; ret; 
0x00000000109de8: cmp eax, 0xfffff001; jae short 0x0000000000109df0; ret; 
0x00000000109e18: cmp eax, 0xfffff001; jae short 0x0000000000109e20; ret; 
0x00000000109e48: cmp eax, 0xfffff001; jae short 0x0000000000109e50; ret; 
0x00000000109e78: cmp eax, 0xfffff001; jae short 0x0000000000109e80; ret; 
0x00000000109eab: cmp eax, 0xfffff001; jae short 0x0000000000109eb3; ret; 
0x00000000109ed8: cmp eax, 0xfffff001; jae short 0x0000000000109ee0; ret; 
0x00000000109f0b: cmp eax, 0xfffff001; jae short 0x0000000000109f13; ret; 
0x00000000109f38: cmp eax, 0xfffff001; jae short 0x0000000000109f40; ret; 
0x00000000109f68: cmp eax, 0xfffff001; jae short 0x0000000000109f70; ret; 
0x00000000109f98: cmp eax, 0xfffff001; jae short 0x0000000000109fa0; ret; 
0x00000000109fc8: cmp eax, 0xfffff001; jae short 0x0000000000109fd0; ret; 
0x00000000109ff8: cmp eax, 0xfffff001; jae short 0x000000000010a000; ret; 
0x0000000010a02b: cmp eax, 0xfffff001; jae short 0x000000000010a033; ret; 
0x0000000010a05b: cmp eax, 0xfffff001; jae short 0x000000000010a063; ret; 
0x0000000010a088: cmp eax, 0xfffff001; jae short 0x000000000010a090; ret; 
0x0000000010a0b8: cmp eax, 0xfffff001; jae short 0x000000000010a0c0; ret; 
0x0000000010a0eb: cmp eax, 0xfffff001; jae short 0x000000000010a0f3; ret; 
0x0000000010a11b: cmp eax, 0xfffff001; jae short 0x000000000010a123; ret; 
0x0000000010a148: cmp eax, 0xfffff001; jae short 0x000000000010a150; ret; 
0x0000000010a178: cmp eax, 0xfffff001; jae short 0x000000000010a180; ret; 
0x0000000010a1a8: cmp eax, 0xfffff001; jae short 0x000000000010a1b0; ret; 
0x0000000010a1d8: cmp eax, 0xfffff001; jae short 0x000000000010a1e0; ret; 
0x0000000010a208: cmp eax, 0xfffff001; jae short 0x000000000010a210; ret; 
0x0000000010a23b: cmp eax, 0xfffff001; jae short 0x000000000010a243; ret; 
0x0000000010a268: cmp eax, 0xfffff001; jae short 0x000000000010a270; ret; 
0x0000000010a298: cmp eax, 0xfffff001; jae short 0x000000000010a2a0; ret; 
0x0000000010a2c8: cmp eax, 0xfffff001; jae short 0x000000000010a2d0; ret; 
0x0000000010a2f8: cmp eax, 0xfffff001; jae short 0x000000000010a300; ret; 
0x0000000010a338: cmp eax, 0xfffff001; jae short 0x000000000010a340; ret; 
0x0000000010a368: cmp eax, 0xfffff001; jae short 0x000000000010a370; ret; 
0x0000000010a458: cmp eax, 0xfffff001; jae short 0x000000000010a460; ret; 
0x0000000010a528: cmp eax, 0xfffff001; jae short 0x000000000010a530; ret; 
0x0000000010a558: cmp eax, 0xfffff001; jae short 0x000000000010a560; ret; 
0x0000000010a5b8: cmp eax, 0xfffff001; jae short 0x000000000010a5c0; ret; 
0x0000000010aa58: cmp eax, 0xfffff001; jae short 0x000000000010aa60; ret; 
0x0000000010aa88: cmp eax, 0xfffff001; jae short 0x000000000010aa90; ret; 
0x0000000010aabb: cmp eax, 0xfffff001; jae short 0x000000000010aac3; ret; 
0x0000000006ed57: cmp eax, 0xfffff04f; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ec1f: cmp eax, 0xfffff187; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ebbb: cmp eax, 0xfffff1eb; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x00000000073c88: cmp eax, 0xfffff3f0; add rax, rdi; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000073b5c: cmp eax, 0xfffff51c; add rax, rdi; jmp rax; 
0x000000000738dc: cmp eax, 0xfffff79c; add rax, rdi; jmp rax; 
0x000000001156ec: cmp eax, 0xffffff1f; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000fdd69: cmp eax, 0xffffffa1; je short 0x00000000000fdd78; neg eax; ret; 
0x000000000fdf69: cmp eax, 0xffffffa1; je short 0x00000000000fdf78; neg eax; ret; 
0x000000000d210f: cmp eax, 0xffffffea; mov eax, 0x3; cmove r8d, eax; mov eax, r8d; ret; 
0x000000001225f0: cmp eax, 0xfffffff5; je short 0x00000000001225e8; pop rbx; ret; 
0x000000000a522f: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000003723a: cmp eax, 0xfffffffd; je short 0x0000000000037258; pop rbx; ret; 
0x0000000005c1ca: cmp eax, 0xffffffff; je short 0x000000000005c1d8; mov eax, r8d; ret; 
0x00000000077290: cmp eax, 0xffffffff; je short 0x00000000000772a0; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000095c93: cmp eax, 0xffffffff; je short 0x0000000000095ca0; add rsp, 0x8; ret; 
0x0000000010ace5: cmp eax, 0xffffffff; je short 0x000000000010acee; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000010bfed: cmp eax, 0xffffffff; je short 0x000000000010c020; add eax, 0x1; mov [rdx], ax; ret; 
0x0000000010bfac: cmp eax, 0xffffffff; je short 0x000000000010c020; add eax, 0x1; mov [rdx], eax; ret; 
0x000000000d6756: cmp eax, 0xffffffff; mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000014d09a: cmp eax, 0xffffffff; sete dl; mov [rbx], edx; pop rbx; ret; 
0x0000000010192c: cmp eax, 0xffffffff; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000018656a: cmp eax, [rax+0x437701fa]; jb short 0x0000000000186577; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x00000000115e94: cmp eax, [rax+rax]; cmovne rax, rdx; ret; 
0x000000000d7371: cmp eax, [rax]; add [rax], al; syscall; 
0x0000000010ace1: cmp eax, [rbp-0x1]; inc dword ptr [rbx+0x474fff8]; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000006c543: cmp eax, [rbp-0x8b8]; jae 0x000000000006ce10; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000007fed4: cmp eax, [rbx+0x267402fa]; mov eax, 0xffffffff; test edx, edx; je short 0x000000000007fee8; ret; 
0x000000000802b4: cmp eax, [rbx+0x267402fa]; mov eax, 0xffffffff; test edx, edx; je short 0x00000000000802c8; ret; 
0x00000000129ab6: cmp eax, [rbx-0x72b3fe18]; insb [rdi], dx; ret; 
0x00000000058544: cmp eax, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000109638: cmp eax, [rcx+rcx*4-0x40]; ret; 
0x000000001029f4: cmp eax, [rcx-0x77]; fimul st, dword ptr [rax-0x77]; out dx, eax; mov eax, 0x9; syscall; 
0x0000000018a0f1: cmp eax, [rcx]; add [rax], al; mov byte ptr [rdi], 0x0; ret; 
0x000000001752e1: cmp eax, [rcx]; add [rax], al; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x00000000044741: cmp eax, [rcx]; add [rax], al; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000076911: cmp eax, [rcx]; add [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000081ec5: cmp eax, [rdi+0x10]; jae short 0x0000000000081ed0; movzx eax, byte ptr [rax]; ret; 
0x0000000010bcb1: cmp eax, [rip+0xe17a1]; mov [rdi+0x10], rax; jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010bd72: cmp eax, [rip+0xea558]; jae short 0x000000000010bd86; mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000000c56ee: cmp eax, [rsi+0x10]; jne 0x00000000000c57e0; ret; 
0x000000000c5703: cmp eax, [rsi+0x14]; jne 0x00000000000c57e0; ret; 
0x000000000c5718: cmp eax, [rsi+0x18]; jne 0x00000000000c57e0; ret; 
0x000000000c5733: cmp eax, [rsi+0x1c]; jne 0x00000000000c57e0; ret; 
0x000000000c574e: cmp eax, [rsi+0x20]; jne 0x00000000000c57e0; ret; 
0x000000000c5763: cmp eax, [rsi+0x24]; jne short 0x00000000000c57e0; ret; 
0x000000000c5778: cmp eax, [rsi+0x28]; jne short 0x00000000000c57e0; ret; 
0x000000000c5783: cmp eax, [rsi+0x2c]; jne short 0x00000000000c57e0; ret; 
0x000000000c579e: cmp eax, [rsi+0x30]; jne short 0x00000000000c57e0; ret; 
0x000000000c57b3: cmp eax, [rsi+0x34]; jne short 0x00000000000c57e0; ret; 
0x000000000c57c8: cmp eax, [rsi+0x38]; jne short 0x00000000000c57e0; ret; 
0x000000000c57d3: cmp eax, [rsi+0x3c]; jne short 0x00000000000c57e0; ret; 
0x000000000df2a0: cmp eax, [rsi+0x40]; jl short 0x00000000000df310; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000c56a3: cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x000000000c56b8: cmp eax, [rsi+0x8]; jne 0x00000000000c57e0; ret; 
0x000000000c56d3: cmp eax, [rsi+0xc]; jne 0x00000000000c57e0; ret; 
0x0000000018d53a: cmp eax, [rsi+rcx*4+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177b65: cmp eax, [rsi+rcx+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x0000000017e1ea: cmp eax, [rsi-0x10]; jne 0x000000000017e320; ret; 
0x0000000017e233: cmp eax, [rsi-0x4]; jne 0x000000000017e320; ret; 
0x0000000017e313: cmp eax, [rsi-0x4]; jne short 0x000000000017e320; xor eax, eax; ret; 
0x0000000017e218: cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x0000000017e203: cmp eax, [rsi-0xc]; jne 0x000000000017e320; ret; 
0x000000000c568d: cmp eax, [rsi]; jne 0x00000000000c57e0; ret; 
0x000000000d0291: cmp eax, eax; cmc; jmp far fword ptr [rcx]; 
0x000000000c5883: cmp eax, eax; jne short 0x00000000000c5870; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000018dbf4: cmp eax, ebp; sti; xchg ebx, eax; ret; 
0x0000000007c9ca: cmp eax, ebx; jae 0x000000000007d0b0; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x000000000c5a67: cmp eax, ecx; ja short 0x00000000000c5a80; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000007b9ba: cmp eax, ecx; jae short 0x000000000007b9c1; mov r8d, [rax]; mov eax, r8d; ret; 
0x000000000767a8: cmp eax, ecx; jbe 0x00000000000768a0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007690d: cmp eax, ecx; jbe 0x0000000000076a50; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x000000000788c6: cmp eax, ecx; jbe 0x0000000000078950; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x0000000007d070: cmp eax, ecx; jbe 0x000000000007d198; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x0000000007d89a: cmp eax, ecx; jbe 0x000000000007d970; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007e61f: cmp eax, ecx; jbe 0x000000000007e780; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f93f: cmp eax, ecx; jbe 0x000000000007fa90; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000080f41: cmp eax, ecx; jbe 0x00000000000810e0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x000000000818b4: cmp eax, ecx; jbe 0x0000000000081960; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008201a: cmp eax, ecx; jbe 0x0000000000082100; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x00000000082219: cmp eax, ecx; jbe 0x0000000000082350; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000083e22: cmp eax, ecx; jbe 0x0000000000083ed8; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000006b197: cmp eax, ecx; jbe short 0x000000000006b1f8; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000070326: cmp eax, ecx; jbe short 0x00000000000703a0; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000076d5f: cmp eax, ecx; jbe short 0x0000000000076db8; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000078fc9: cmp eax, ecx; jbe short 0x000000000007900a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000007ae08: cmp eax, ecx; jbe short 0x000000000007ae48; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b67d: cmp eax, ecx; jbe short 0x000000000007b6b0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007b717: cmp eax, ecx; jbe short 0x000000000007b730; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007f110: cmp eax, ecx; jbe short 0x000000000007f158; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x000000000807c9: cmp eax, ecx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x000000000809b7: cmp eax, ecx; jbe short 0x0000000000080a18; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000080bdc: cmp eax, ecx; jbe short 0x0000000000080c40; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000823b9: cmp eax, ecx; jbe short 0x00000000000823f8; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x00000000083652: cmp eax, ecx; jbe short 0x00000000000836b0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x00000000083ad6: cmp eax, ecx; jbe short 0x0000000000083b40; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000083b88: cmp eax, ecx; jbe short 0x0000000000083bb0; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084298: cmp eax, ecx; jbe short 0x00000000000842d0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008432f: cmp eax, ecx; jbe short 0x0000000000084350; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000017dae2: cmp eax, ecx; jne 0x000000000017dcf0; xor eax, eax; ret; 
0x0000000017dc4a: cmp eax, ecx; jne 0x000000000017dd05; xor eax, eax; ret; 
0x00000000122c4f: cmp eax, ecx; jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x000000000c589c: cmp eax, ecx; mov eax, 0x1; cmovg r8d, eax; mov eax, r8d; ret; 
0x0000000017dd03: cmp eax, ecx; sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x000000000554ae: cmp eax, edi; cmovb r8, rdi; mov rax, r8; ret; 
0x000000000ff132: cmp eax, edi; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x00000000080c88: cmp eax, edi; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000c599b: cmp eax, edx; ja 0x00000000000c5a80; add rax, rdi; add rax, rcx; ret; 
0x00000000084eeb: cmp eax, edx; jae short 0x0000000000084f10; movzx eax, byte ptr [rax]; ret; 
0x00000000145853: cmp eax, edx; jae short 0x0000000000145860; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000a1399: cmp eax, edx; je short 0x00000000000a1380; mov rax, r8; ret; 
0x00000000142659: cmp eax, edx; je short 0x0000000000142660; pop rbx; ret; 
0x000000001426c9: cmp eax, edx; je short 0x00000000001426d8; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x00000000142739: cmp eax, edx; je short 0x0000000000142748; add rax, 0xa0; pop rbx; ret; 
0x000000001427a9: cmp eax, edx; je short 0x00000000001427b8; add rax, 0xa8; pop rbx; ret; 
0x000000000a12b1: cmp eax, edx; jne short 0x00000000000a12a0; mov rax, r8; ret; 
0x00000000133b03: cmp eax, edx; jne short 0x0000000000133af0; mov rax, r8; add rsp, 0x8; ret; 
0x000000000d84a1: cmp eax, edx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000003a201: cmp eax, edx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000007b75a: cmp eax, esi; ja short 0x000000000007b750; lea eax, [rdx+rdi]; ret; 
0x0000000008437a: cmp eax, esi; ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x00000000110669: cmp eax, esi; jb short 0x0000000000110678; mov eax, 0x1; ret; 
0x0000000009cdc9: cmp eax, esi; jne short 0x000000000009cdc0; mov rax, r8; ret; 
0x000000000a127d: cmp eax, esi; jne short 0x00000000000a1270; mov rax, r8; ret; 
0x000000000a13d1: cmp eax, esi; jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x000000001229ba: cmp eax, esi; jne short 0x0000000000122990; mov [r8], rdi; xor eax, eax; ret; 
0x000000000a1398: cmp eax, r10d; je short 0x00000000000a1380; mov rax, r8; ret; 
0x0000000015abb9: cmp ebp, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000389af: cmp ebp, 0xc; ja 0x0000000000038af0; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx; 
0x000000001265d1: cmp ebp, [rax+0xc]; add [rbx-0x9363], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x00000000124911: cmp ebp, [rsi]; je short 0x0000000000124920; pop rbx; ret; 
0x0000000007af1e: cmp ebp, eax; jbe 0x000000000007b030; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x000000000849b1: cmp ebp, eax; jbe short 0x0000000000084a10; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18]; 
0x0000000008444f: cmp ebp, ecx; jbe 0x0000000000084568; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x000000000501f0: cmp ebx, eax; jne short 0x00000000000501b0; ret; 
0x000000000f8368: cmp ebx, eax; pop rbx; setl al; ret; 
0x00000000192dbf: cmp ebx, ebp; jae short 0x0000000000192dd3; nop [rax+rax]; call qword ptr [rbx]; 
0x000000001045cc: cmp ebx, edi; jae short 0x0000000000104600; mov rsi, r12; mov rdi, r15; call r13; 
0x000000000436cb: cmp ebx, esp; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x000000001099af: cmp ecx, 0x1; ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x0000000004dfac: cmp ecx, 0x24; jne short 0x000000000004df8c; mov rax, r8; ret; 
0x0000000014a4e4: cmp ecx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x0000000017e464: cmp ecx, 0x3f; jbe 0x000000000017e50a; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000017721c: cmp ecx, 0x3f; jbe short 0x0000000000177297; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000017f5a5: cmp ecx, 0x3f; jbe short 0x000000000017f621; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000186551: cmp ecx, 0x3f; jbe short 0x00000000001865d1; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000008b352: cmp ecx, 0x400; jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x0000000006bb86: cmp ecx, 0x7; ja 0x000000000006c170; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000070c96: cmp ecx, 0x7; ja 0x0000000000071230; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000408fc: cmp ecx, 0x80; jne short 0x0000000000040910; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x000000000f11f2: cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000005212e: cmp ecx, 0xe4757fff; mov eax, 0x1; ret; 
0x00000000128622: cmp ecx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285db: cmp ecx, 0xff; jg short 0x00000000001285e8; ret; 
0x00000000050818: cmp ecx, 0xfffffff8; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x000000001096a3: cmp ecx, 0xffffffff; je short 0x00000000001096d8; mov eax, 0x149; syscall; 
0x000000000b4ef9: cmp ecx, [r8+r8]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x0000000014c296: cmp ecx, [rax+0x28]; jae short 0x000000000014c280; mov eax, 0x1; ret; 
0x000000000b4efa: cmp ecx, [rax+rax]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x00000000128664: cmp ecx, [rax-0x75]; add eax, 0xc47a4; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000000823bc: cmp ecx, [rax-0x77]; out dx, eax; call qword ptr [rbx+0x88]; 
0x0000000002de28: cmp ecx, [rax-0x7d]; ret; 
0x000000000f118c: cmp ecx, [rax-0xc]; jne short 0x00000000000f1180; mov eax, [rdx+0x8]; ret; 
0x000000000406b1: cmp ecx, [rbp+0x66c30017]; nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000128c80: cmp ecx, [rbx-0x3f7aefb9]; jne short 0x0000000000128c90; pop rbx; ret; 
0x0000000017b654: cmp ecx, [rdi-0x4]; jne 0x000000000017b886; xor eax, eax; ret; 
0x000000001782c9: cmp ecx, [rdx+rdi+0x20]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c07b: cmp ecx, [rdx+rdi+0x20]; jne 0x000000000018be07; ret; 
0x000000001782f8: cmp ecx, [rdx+rdi+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x000000001782f6: cmp ecx, [rdx+rdi+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c0aa: cmp ecx, [rdx+rdi+0x40]; jne 0x000000000018be07; ret; 
0x0000000018c0a8: cmp ecx, [rdx+rdi+0x40]; jne 0x000000000018be07; ret; 
0x0000000017875e: cmp ecx, [rdx+rdi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000017875f: cmp ecx, [rdx+rdi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c810: cmp ecx, [rdx+rdi]; jne 0x000000000018c547; ret; 
0x0000000018c811: cmp ecx, [rdx+rdi]; jne 0x000000000018c547; ret; 
0x0000000018d4de: cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4f4: cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6cc: cmp ecx, [rsi+rax*4-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6ec: cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4c9: cmp ecx, [rsi+rax*4]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177b0a: cmp ecx, [rsi+rax+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x00000000177b2a: cmp ecx, [rsi+rax+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x0000000018d6b1: cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177cb0: cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x00000000177cec: cmp ecx, [rsi+rax-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x00000000177ccc: cmp ecx, [rsi+rax-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x00000000177ae9: cmp ecx, [rsi+rax]; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x0000000017812a: cmp ecx, [rsi+rdx+0x20]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be21: cmp ecx, [rsi+rdx+0x20]; jne short 0x000000000018be07; ret; 
0x00000000178149: cmp ecx, [rsi+rdx+0x40]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be40: cmp ecx, [rsi+rdx+0x40]; jne short 0x000000000018be07; ret; 
0x0000000017816a: cmp ecx, [rsi+rdx+0x60]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be61: cmp ecx, [rsi+rdx+0x60]; jne short 0x000000000018be07; ret; 
0x0000000017848f: cmp ecx, [rsi+rdx]; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178987: cmp ecx, [rsi+rdx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c282: cmp ecx, [rsi+rdx]; jne 0x000000000018be07; ret; 
0x0000000018c5cd: cmp ecx, [rsi+rdx]; jne 0x000000000018c547; ret; 
0x000000001785a6: cmp ecx, [rsi+rdx]; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c56d: cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x00000000109257: cmp ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000177de6: cmp ecx, [rsi]; je short 0x0000000000177d90; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000185cc6: cmp ecx, [rsi]; je short 0x0000000000185c70; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d7a6: cmp ecx, [rsi]; je short 0x000000000018d750; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000178964: cmp ecx, [rsi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018ca84: cmp ecx, [rsi]; jne 0x000000000018c547; ret; 
0x000000000811db: cmp ecx, eax; jae 0x00000000000812b0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x00000000179fff: cmp ecx, eax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017a027: cmp ecx, eax; jne 0x000000000017aa3f; xor eax, eax; ret; 
0x0000000017b62f: cmp ecx, eax; jne 0x000000000017b873; xor eax, eax; ret; 
0x000000000e06e0: cmp ecx, eax; jne short 0x00000000000e06b0; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000f9643: cmp ecx, eax; jne short 0x00000000000f9678; mov r10d, ecx; mov eax, 0x103; syscall; 
0x0000000017aa0b: cmp ecx, eax; jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b84b: cmp ecx, eax; jne short 0x000000000017b873; xor eax, eax; ret; 
0x0000000017b87f: cmp ecx, eax; jne short 0x000000000017b886; xor eax, eax; ret; 
0x000000000507b4: cmp ecx, eax; sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x00000000128ace: cmp ecx, edi; jg short 0x0000000000128a8d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000128631: cmp ecx, edx; jae short 0x00000000001285e8; mov byte ptr [r9], 0x0; ret; 
0x0000000012c6d9: cmp ecx, edx; je short 0x000000000012c6e0; ret; 
0x0000000010af64: cmp ecx, edx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x0000000017464e: cmp ecx, esi; jb 0x0000000000174444; mov rax, r8; vzeroupper; ret; 
0x00000000179401: cmp ecx, esi; jb 0x0000000000179184; mov rax, r8; vzeroupper; ret; 
0x000000001274e4: cmp ecx, esi; jmp qword ptr [rsi+0xf]; 
0x00000000086180: cmp edi, 0x1; je short 0x0000000000086195; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fe9a: cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x00000000087ef0: cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x00000000086e60: cmp edi, 0x21; je short 0x0000000000086e70; ret; 
0x00000000117c41: cmp edi, 0x3ff; ja short 0x0000000000117c51; mov rax, rdi; sar rax, 0x6; ret; 
0x000000001144b0: cmp edi, 0x56; je short 0x00000000001144c0; mov eax, 0x7; ret; 
0x0000000010c9ce: cmp edi, 0x9; setbe r8b; mov eax, r8d; ret; 
0x000000000c9bf5: cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x00000000083892: cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000f6fd6: cmp edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000121921: cmp edi, [rax+0x3]; syscall; 
0x0000000017841c: cmp edi, [rdx+rcx+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c233: cmp edi, [rdx+rcx+0x40]; jne 0x000000000018be07; ret; 
0x00000000178296: cmp edi, [rdx+rcx]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000017871c: cmp edi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c04a: cmp edi, [rdx+rcx]; jne 0x000000000018be07; ret; 
0x0000000018c7d0: cmp edi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x00000000044afd: cmp edi, eax; jb short 0x0000000000044add; xor eax, eax; ret; 
0x00000000104e23: cmp edi, eax; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x00000000146bb7: cmp edi, ebp; jmp qword ptr [rsi+0xf]; 
0x00000000078cf4: cmp edi, ebx; jmp qword ptr [rsi+0xf]; 
0x000000000d2d7b: cmp edi, ebx; jmp qword ptr [rsi-0x70]; 
0x000000000584ca: cmp edi, ecx; ja short 0x00000000000584b0; mov eax, r8d; ret; 
0x00000000123217: cmp edi, ecx; ja short 0x0000000000123204; mov eax, 0xffffffff; ret; 
0x000000000b4539: cmp edi, ecx; jb 0x00000000000b46a5; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000013cbc2: cmp edi, ecx; jne short 0x000000000013cbb0; ret; 
0x000000000b44b7: cmp edi, edx; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x00000000105626: cmp edi, edx; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x0000000008a993: cmp edi, esi; sete al; ret; 
0x0000000017ec67: cmp edx, 0x100; ja short 0x000000000017ec80; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x000000000d83d1: cmp edx, 0x11954; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8424: cmp edx, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000188836: cmp edx, 0x1; ja 0x00000000001888d0; je short 0x00000000001888c0; mov byte ptr [rdi], 0x0; ret; 
0x00000000189766: cmp edx, 0x1; ja 0x0000000000189800; je short 0x00000000001897f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018a0e6: cmp edx, 0x1; ja 0x000000000018a240; je 0x000000000018a230; mov byte ptr [rdi], 0x0; ret; 
0x000000000435c4: cmp edx, 0x1; jg 0x00000000000436e8; mov edi, ebp; call rax; 
0x0000000004365f: cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x00000000043615: cmp edx, 0x1; jg 0x0000000000043730; mov esi, ebp; mov rdi, r13; call rax; 
0x0000000011f2b6: cmp edx, 0x1; jg 0x000000000011f368; add rsp, 0x10; pop rbp; ret; 
0x0000000008e324: cmp edx, 0x1; jg short 0x000000000008e358; add rsp, 0x18; ret; 
0x0000000010ee3d: cmp edx, 0x1; jg short 0x000000000010ee60; add rsp, 0x18; ret; 
0x00000000131ebe: cmp edx, 0x1; jne short 0x0000000000131ee0; ret; 
0x000000000d85fe: cmp edx, 0x1badface; setne al; ret; 
0x000000000d8619: cmp edx, 0x1cd1; setne al; ret; 
0x000000000b4aef: cmp edx, 0x20; ja 0x00000000000b4b89; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b4b6f: cmp edx, 0x20; ja short 0x00000000000b4b80; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x0000000010b5c8: cmp edx, 0x20; jne short 0x000000000010b5e6; mov edx, 0x40; mov eax, 0x14; syscall; 
0x000000000d83ff: cmp edx, 0x2468; jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x000000000c9be1: cmp edx, 0x28f5c28; jbe short 0x00000000000c9bf0; ret; 
0x00000000088938: cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x000000000f115f: cmp edx, 0x2; je short 0x00000000000f1168; ret; 
0x0000000005bc14: cmp edx, 0x2; setne al; add rsp, 0x98; neg eax; ret; 
0x00000000087ba6: cmp edx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x000000000b4b93: cmp edx, 0x40; ja short 0x00000000000b4ba5; movdqu [rdi+rdx-0x20], xmm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x00000000187094: cmp edx, 0x40; ja short 0x00000000001870b0; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x00000000187044: cmp edx, 0x40; ja short 0x00000000001870b9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000000fd880: cmp edx, 0x4; ja short 0x00000000000fd890; mov [rsi+0x66], dx; xor eax, eax; ret; 
0x000000000f8f32: cmp edx, 0x4; je short 0x00000000000f8f40; mov eax, 0x1c; syscall; 
0x000000000d85de: cmp edx, 0x5346544e; setne al; ret; 
0x000000000d840e: cmp edx, 0x54190100; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8385: cmp edx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x0000000015aeb9: cmp edx, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000d2e41: cmp edx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000117d45: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000017ec34: cmp edx, 0x80; ja short 0x000000000017ec50; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ebe4: cmp edx, 0x80; ja short 0x000000000017ec59; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001870c7: cmp edx, 0x80; ja short 0x00000000001870e0; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x00000000086153: cmp edx, 0x8; je short 0x0000000000086159; ret; 
0x000000000d85c6: cmp edx, 0xadf5; setne al; ret; 
0x000000000d83b7: cmp edx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x0000000007b1a0: cmp edx, [rax+0x18]; jbe short 0x000000000007b1c4; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000185ea7: cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185e8b: cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d277: cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d263: cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d987: cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d971: cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018de27: cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018de0e: cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000050465: cmp edx, eax; jne short 0x0000000000050458; xor eax, eax; ret; 
0x0000000005054d: cmp edx, eax; jne short 0x0000000000050540; xor eax, eax; ret; 
0x000000000d8397: cmp edx, eax; jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x0000000018d0e6: cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x00000000185d26: cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000170006: cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000001228f9: cmp edx, eax; sbb eax, eax; ret; 
0x000000000880f1: cmp edx, ebp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x000000000815c2: cmp edx, ebx; jae 0x00000000000818e0; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000081462: cmp edx, ebx; jae 0x0000000000081918; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x000000000c58c1: cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret; 
0x00000000116c91: cmp edx, ecx; ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x00000000055682: cmp edx, ecx; jae short 0x0000000000055668; mov rax, r8; ret; 
0x000000000a1348: cmp edx, ecx; je short 0x00000000000a1340; cmp edx, esi; je short 0x00000000000a1340; ret; 
0x000000000fe152: cmp edx, ecx; je short 0x00000000000fe160; ret; 
0x0000000016f588: cmp edx, ecx; jle 0x000000000016f630; ret; 
0x0000000016f325: cmp edx, ecx; jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x0000000016f326: cmp edx, ecx; jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x0000000014a4d0: cmp edx, ecx; sete al; ret; 
0x00000000122980: cmp edx, edi; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x0000000008610e: cmp edx, edi; setae al; ret; 
0x000000000a1318: cmp edx, esi; je short 0x00000000000a1310; ret; 
0x000000000a134c: cmp edx, esi; je short 0x00000000000a1340; ret; 
0x000000000b6687: cmp edx, esi; je short 0x00000000000b668f; test edx, edx; jne short 0x00000000000b6680; ret; 
0x0000000014ebd3: cmp edx, esp; or [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000009aeac: cmp esi, 0x120; je short 0x000000000009aeb8; ret; 
0x0000000009af1c: cmp esi, 0x120; je short 0x000000000009af28; ret; 
0x0000000009b14c: cmp esi, 0x120; je short 0x000000000009b158; ret; 
0x0000000009bacc: cmp esi, 0x120; je short 0x000000000009bad8; ret; 
0x0000000009d36c: cmp esi, 0x120; je short 0x000000000009d378; ret; 
0x0000000009d3ec: cmp esi, 0x120; je short 0x000000000009d3f8; ret; 
0x000000000a16bc: cmp esi, 0x120; je short 0x00000000000a16c8; ret; 
0x000000000b4ecc: cmp esi, 0x120; je short 0x00000000000b4ed8; ret; 
0x000000000b4f3c: cmp esi, 0x120; je short 0x00000000000b4f48; ret; 
0x000000000b512c: cmp esi, 0x120; je short 0x00000000000b5138; ret; 
0x000000000b522c: cmp esi, 0x120; je short 0x00000000000b5238; ret; 
0x000000000b547c: cmp esi, 0x120; je short 0x00000000000b5488; ret; 
0x00000000087ed0: cmp esi, 0x1; ja short 0x0000000000087ee0; mov [rdi], esi; xor eax, eax; ret; 
0x0000000008fc90: cmp esi, 0x1; ja short 0x000000000008fca0; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x0000000008e590: cmp esi, 0x1; je short 0x000000000008e5a0; mov eax, 0x16; ret; 
0x000000000d2090: cmp esi, 0x1; je short 0x00000000000d20a0; xor eax, eax; ret; 
0x000000000d20c0: cmp esi, 0x1; je short 0x00000000000d20d0; xor eax, eax; ret; 
0x0000000008e5b4: cmp esi, 0x1; jne short 0x000000000008e5d8; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000087ab4: cmp esi, 0x1; mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x0000000007fc49: cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000008fc70: cmp esi, 0x2; ja short 0x000000000008fc80; mov [rdi], esi; xor eax, eax; ret; 
0x000000000f8f05: cmp esi, 0x2; ja short 0x00000000000f8f12; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x00000000087a95: cmp esi, 0x2; jbe short 0x0000000000087aa0; ret; 
0x000000000501c2: cmp esi, 0x2f; jmp rdx; 
0x0000000014a4ca: cmp esi, 0x3; ja short 0x000000000014a4e0; cmp dx, cx; sete al; ret; 
0x00000000037214: cmp esi, 0x3; je short 0x0000000000037220; ret; 
0x00000000087be6: cmp esi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x0000000008a9ff: cmp esi, 0x7fffffff; mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x000000000f0124: cmp esi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall; 
0x0000000012333e: cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000fe5f1: cmp esi, 0x9; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x000000000fe650: cmp esi, 0x9; je short 0x00000000000fe668; mov eax, 0x48; syscall; 
0x0000000018945b: cmp esi, 0xc829ffff; ret; 
0x0000000013df8e: cmp esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000013a2ca: cmp esi, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000178b07: cmp esi, [r15+rax]; jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x0000000018bb6b: cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x000000000dc027: cmp esi, [rdi+0x26]; lea rdx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d2237: cmp esi, [rdi+0x2e]; mov eax, 0xe3; syscall; 
0x0000000010ee39: cmp esi, [rdi+0xe]; add [rbx+0x1e7f01fa], al; add rsp, 0x18; ret; 
0x0000000018bbc4: cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd44: cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd19: cmp esi, [rdi+rax*4+0x40]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb84: cmp esi, [rdi+rax*4+0x60]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bd34: cmp esi, [rdi+rax*4]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x00000000178a82: cmp esi, [rdi+rax]; jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x00000000178c26: cmp esi, [rdi+rax]; jne short 0x0000000000178c54; add rax, rdi; vzeroupper; ret; 
0x0000000013b4b2: cmp esi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000018bd8d: cmp esi, [rdx+rax*4]; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x00000000178cb1: cmp esi, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000178325: cmp esi, [rdx+rcx+0x60]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c0d4: cmp esi, [rdx+rcx+0x60]; jne 0x000000000018be07; ret; 
0x000000001787db: cmp esi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c88a: cmp esi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x0000000018b918: cmp esi, eax; cmovb eax, esi; ret; 
0x00000000179418: cmp esi, eax; cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174665: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x0000000018b908: cmp esi, eax; ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce6b: cmp esi, eax; ja 0x000000000018cc27; mov eax, esi; ret; 
0x0000000018b840: cmp esi, eax; jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b80e: cmp esi, eax; jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8c6: cmp esi, eax; jb short 0x000000000018b8d4; sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018b88c: cmp esi, eax; jb short 0x000000000018b8d4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x00000000081bff: cmp esi, eax; jbe 0x0000000000081d18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000f8fb4: cmp esi, edi; jne short 0x00000000000f8f90; mov eax, r8d; ret; 
0x00000000139701: cmp esp, 0x7; add bh, bh; xor eax, 0x7fc75; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000ef03a: cmp esp, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x0000000007e9bb: cmp esp, edx; cli; call qword ptr [rax+0x53555441]; 
0x0000000007b077: cmp qword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x000000000806bf: cmp qword ptr [rax+0x30], 0x0; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x000000001109c2: cmp qword ptr [rbx+0x28], 0x0; mov eax, 0x0; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x00000000111310: cmp qword ptr [rdi+0x10], 0x0; je short 0x0000000000111320; xor eax, eax; ret; 
0x0000000007fb25: cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x00000000087640: cmp qword ptr [rdi+0x28], 0x0; je short 0x0000000000087650; xor eax, eax; ret; 
0x00000000083a90: cmp qword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x00000000085bc2: cmp qword ptr [rdi+0x460], 0x0; je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x000000001155e7: cmp qword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x00000000115713: cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d2230: cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000d2268; mov eax, 0xe3; syscall; 
0x000000001037cc: cmp qword ptr [rsi], 0x0; mov rbx, rsi; je short 0x00000000001037e0; pop rbx; ret; 
0x0000000014c344: cmp qword ptr [rsp+0x28], 0x0; jne short 0x000000000014c352; add rsp, 0x30; pop rbx; ret; 
0x000000000501ef: cmp r11d, eax; jne short 0x00000000000501b0; ret; 
0x000000001782ca: cmp r12b, [rax]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c07c: cmp r12b, [rax]; jne 0x000000000018be07; ret; 
0x00000000081bfe: cmp r14, rax; jbe 0x0000000000081d18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000c5882: cmp r8, rax; jne short 0x00000000000c5870; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000554ad: cmp r8, rdi; cmovb r8, rdi; mov rax, r8; ret; 
0x000000001763b0: cmp r8d, 0x1; ja 0x0000000000176080; je 0x0000000000176070; vzeroupper; ret; 
0x0000000017628c: cmp r8d, 0x1; ja 0x0000000000176160; je 0x0000000000176150; vzeroupper; ret; 
0x00000000176fbc: cmp r8d, 0x1; ja 0x0000000000176e90; je 0x0000000000176e80; vzeroupper; ret; 
0x00000000188202: cmp r8d, 0x1; ja 0x0000000000187e60; je 0x0000000000187e50; mov rax, rdi; ret; 
0x000000001880bc: cmp r8d, 0x1; ja 0x0000000000187f70; je 0x0000000000187f60; ret; 
0x0000000018a532: cmp r8d, 0x1; ja 0x000000000018a300; je 0x000000000018a2f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018b632: cmp r8d, 0x1; ja 0x000000000018b2c0; je 0x000000000018b2b0; ret; 
0x0000000018b4ec: cmp r8d, 0x1; ja 0x000000000018b3a0; je 0x000000000018b390; ret; 
0x000000001098b9: cmp r8d, 0x1; ja short 0x00000000001098e8; mov eax, 0x4; syscall; 
0x00000000109908: cmp r8d, 0x1; ja short 0x0000000000109938; mov eax, 0x5; syscall; 
0x00000000109959: cmp r8d, 0x1; ja short 0x0000000000109988; mov eax, 0x6; syscall; 
0x00000000100673: cmp r8d, 0x2; jbe short 0x0000000000100680; ret; 
0x00000000045cf8: cmp r8d, 0xc00; jne short 0x0000000000045d1f; xor eax, eax; add rsp, 0x8; ret; 
0x00000000048468: cmp r8d, 0xc00; jne short 0x000000000004848f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004ac18: cmp r8d, 0xc00; jne short 0x000000000004ac3f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000525e8: cmp r8d, 0xc00; jne short 0x000000000005260f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b7058: cmp r8d, 0xc00; jne short 0x00000000000b707f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b9668: cmp r8d, 0xc00; jne short 0x00000000000b968f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000bbb78: cmp r8d, 0xc00; jne short 0x00000000000bbb9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000c1c78: cmp r8d, 0xc00; jne short 0x00000000000c1c9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000be362: cmp r8d, 0xff; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x00000000128630: cmp r9, r10; jae short 0x00000000001285e8; mov byte ptr [r9], 0x0; ret; 
0x000000001099ae: cmp r9d, 0x1; ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x000000000e06df: cmp r9d, eax; jne short 0x00000000000e06b0; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x00000000128acd: cmp r9d, edi; jg short 0x0000000000128a8d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x0000000005c0bb: cmp rax, 0x1; jne short 0x000000000005c0d0; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000145c54: cmp rax, 0x1; sete al; add rsp, 0x18; movzx eax, al; ret; 
0x00000000145dbe: cmp rax, 0x1; sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000947a3: cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x00000000094863: cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000d8520: cmp rax, 0x517b; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000d8550: cmp rax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d84d4: cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000948e8: cmp rax, 0x7; mov eax, 0x10; cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x00000000055708: cmp rax, 0x9; ja short 0x00000000000556e0; mov rax, r8; ret; 
0x000000000948d3: cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x000000000d8502: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d8501: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d8530: cmp rax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000948a3: cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x000000000f9b92: cmp rax, 0xfffffffffffff000; ja 0x00000000000f9c20; add rsp, 0x78; ret; 
0x0000000004168c: cmp rax, 0xfffffffffffff000; ja short 0x0000000000041698; ret; 
0x000000000416c8: cmp rax, 0xfffffffffffff000; ja short 0x0000000000041720; ret; 
0x00000000044a33: cmp rax, 0xfffffffffffff000; ja short 0x0000000000044a90; ret; 
0x0000000005c157: cmp rax, 0xfffffffffffff000; ja short 0x000000000005c160; ret; 
0x0000000005c18a: cmp rax, 0xfffffffffffff000; ja short 0x000000000005c198; ret; 
0x00000000086d4a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000086d58; ret; 
0x0000000008e74a: cmp rax, 0xfffffffffffff000; ja short 0x000000000008e758; ret; 
0x00000000090a91: cmp rax, 0xfffffffffffff000; ja short 0x0000000000090aa0; xor eax, eax; ret; 
0x00000000093aa7: cmp rax, 0xfffffffffffff000; ja short 0x0000000000093ab0; ret; 
0x00000000093eb5: cmp rax, 0xfffffffffffff000; ja short 0x0000000000093ee8; ret; 
0x00000000093f67: cmp rax, 0xfffffffffffff000; ja short 0x0000000000093f70; ret; 
0x00000000093fa6: cmp rax, 0xfffffffffffff000; ja short 0x0000000000094018; ret; 
0x00000000094066: cmp rax, 0xfffffffffffff000; ja short 0x00000000000940d0; ret; 
0x00000000094518: cmp rax, 0xfffffffffffff000; ja short 0x0000000000094528; ret; 
0x00000000094568: cmp rax, 0xfffffffffffff000; ja short 0x0000000000094578; ret; 
0x000000000945bb: cmp rax, 0xfffffffffffff000; ja short 0x00000000000945c8; ret; 
0x000000000c72a7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000c72b0; ret; 
0x000000000c73bc: cmp rax, 0xfffffffffffff000; ja short 0x00000000000c73c8; ret; 
0x000000000c753c: cmp rax, 0xfffffffffffff000; ja short 0x00000000000c7548; ret; 
0x000000000c9b67: cmp rax, 0xfffffffffffff000; ja short 0x00000000000c9b70; ret; 
0x000000000c9b97: cmp rax, 0xfffffffffffff000; ja short 0x00000000000c9ba0; ret; 
0x000000000d2241: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d2250; ret; 
0x000000000d2e57: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d2e60; ret; 
0x000000000d3d83: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d3db8; ret; 
0x000000000d67e6: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d6848; ret; 
0x000000000d6899: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d6900; ret; 
0x000000000d69c3: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d6a00; ret; 
0x000000000d6f7c: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d6fa0; hlt; mov eax, esi; syscall; 
0x000000000d7d33: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d7d60; ret; 
0x000000000d7d93: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d7dc0; ret; 
0x000000000d7fc3: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d8000; ret; 
0x000000000d8033: cmp rax, 0xfffffffffffff000; ja short 0x00000000000d8070; ret; 
0x000000000f00f7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f0100; ret; 
0x000000000f0197: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f01a0; ret; 
0x000000000f7f96: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f7ff8; ret; 
0x000000000f8046: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f80a8; ret; 
0x000000000f90ea: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f90f8; ret; 
0x000000000f9651: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f9660; ret; 
0x000000000f9697: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f96a0; ret; 
0x000000000f96c7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f96d0; ret; 
0x000000000f9c9e: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f9d00; ret; 
0x000000000f9d43: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f9da0; ret; 
0x000000000f9dd7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f9de0; ret; 
0x000000000f9e07: cmp rax, 0xfffffffffffff000; ja short 0x00000000000f9e10; ret; 
0x000000000fa363: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fa3b0; ret; 
0x000000000fa4e3: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fa530; ret; 
0x000000000fda03: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fda60; ret; 
0x000000000fdacb: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fdb38; add rsp, 0x30; pop r13; ret; 
0x000000000fdfd6: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe050; ret; 
0x000000000fe08a: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe098; ret; 
0x000000000fe0bf: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe0d0; ret; 
0x000000000fe456: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe4b8; ret; 
0x000000000fe506: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe568; ret; 
0x000000000fe5a7: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe5b0; ret; 
0x000000000fe5fd: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe628; ret; 
0x000000000fe65c: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe680; ret; 
0x000000000fe6e4: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe718; ret; 
0x000000000fe752: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe788; ret; 
0x000000000fe7a4: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe7b0; ret; 
0x000000000fe7da: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe7e8; ret; 
0x000000000fe807: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe810; ret; 
0x000000000fe9e3: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe9f0; ret; 
0x000000000feb2d: cmp rax, 0xfffffffffffff000; ja short 0x00000000000feb88; ret; 
0x000000000fed00: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fed10; ret; 
0x000000000fed41: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fed50; ret; 
0x000000000fed77: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fed80; ret; 
0x000000000ff263: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff2c0; ret; 
0x000000000ff303: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff360; ret; 
0x000000000ff3a9: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff410; ret; 
0x000000000ff459: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff4c0; ret; 
0x000000000ff7e3: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff820; ret; 
0x000000000ff853: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff890; ret; 
0x000000000ff8d4: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff918; ret; 
0x000000000ff964: cmp rax, 0xfffffffffffff000; ja short 0x00000000000ff9a8; ret; 
0x000000000ffe88: cmp rax, 0xfffffffffffff000; ja short 0x00000000000fff08; add rsp, 0x50; pop r12; ret; 
0x000000000fffb3: cmp rax, 0xfffffffffffff000; ja short 0x0000000000100000; ret; 
0x00000000100073: cmp rax, 0xfffffffffffff000; ja short 0x00000000001000c0; ret; 
0x00000000100133: cmp rax, 0xfffffffffffff000; ja short 0x0000000000100140; ret; 
0x000000001012b7: cmp rax, 0xfffffffffffff000; ja short 0x00000000001012c0; ret; 
0x000000001012e7: cmp rax, 0xfffffffffffff000; ja short 0x00000000001012f0; ret; 
0x00000000102a02: cmp rax, 0xfffffffffffff000; ja short 0x0000000000102a70; pop rbx; pop rbp; ret; 
0x00000000102b03: cmp rax, 0xfffffffffffff000; ja short 0x0000000000102b60; ret; 
0x00000000104e2e: cmp rax, 0xfffffffffffff000; ja short 0x0000000000104e40; ret; 
0x00000000109007: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109010; ret; 
0x00000000109037: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109040; ret; 
0x000000001090dc: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109150; ret; 
0x0000000010918f: cmp rax, 0xfffffffffffff000; ja short 0x00000000001091a0; ret; 
0x000000001092b6: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109318; ret; 
0x00000000109366: cmp rax, 0xfffffffffffff000; ja short 0x00000000001093c8; ret; 
0x00000000109416: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109478; ret; 
0x000000001094c6: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109540; ret; 
0x00000000109583: cmp rax, 0xfffffffffffff000; ja short 0x00000000001095e0; ret; 
0x00000000109647: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109688; mov r8d, eax; mov eax, r8d; ret; 
0x000000001096af: cmp rax, 0xfffffffffffff000; ja short 0x00000000001096c0; ret; 
0x00000000109767: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109770; ret; 
0x0000000010979a: cmp rax, 0xfffffffffffff000; ja short 0x00000000001097a8; ret; 
0x000000001097fa: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109808; ret; 
0x0000000010982a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109838; ret; 
0x0000000010985a: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109868; ret; 
0x00000000109887: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109890; ret; 
0x000000001098c6: cmp rax, 0xfffffffffffff000; ja short 0x00000000001098d0; ret; 
0x00000000109915: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109920; ret; 
0x00000000109966: cmp rax, 0xfffffffffffff000; ja short 0x0000000000109970; ret; 
0x000000001099bb: cmp rax, 0xfffffffffffff000; ja short 0x00000000001099c8; ret; 
0x0000000010a3c3: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a420; ret; 
0x0000000010a493: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a4f0; ret; 
0x0000000010a58a: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a598; ret; 
0x0000000010a5fc: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a668; ret; 
0x0000000010a6b6: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a730; ret; 
0x0000000010a773: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a7d0; ret; 
0x0000000010a81c: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a888; ret; 
0x0000000010a8d3: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a930; ret; 
0x0000000010a976: cmp rax, 0xfffffffffffff000; ja short 0x000000000010a9f0; ret; 
0x0000000010aa2a: cmp rax, 0xfffffffffffff000; ja short 0x000000000010aa38; ret; 
0x0000000010ad16: cmp rax, 0xfffffffffffff000; ja short 0x000000000010ad78; ret; 
0x0000000010adc6: cmp rax, 0xfffffffffffff000; ja short 0x000000000010ae30; ret; 
0x0000000010ae76: cmp rax, 0xfffffffffffff000; ja short 0x000000000010aed8; ret; 
0x0000000010afd6: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b038; ret; 
0x0000000010b086: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b0f8; ret; 
0x0000000010b137: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b140; ret; 
0x0000000010b177: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b1a0; ret; 
0x0000000010b1d7: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b1e0; ret; 
0x0000000010b248: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b278; ret; 
0x0000000010b29a: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b2a8; ret; 
0x0000000010b2c7: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b2d0; ret; 
0x0000000010b2f7: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b300; ret; 
0x0000000010b32a: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b338; ret; 
0x0000000010b36d: cmp rax, 0xfffffffffffff000; ja short 0x000000000010b3a8; ret; 
0x00000000116c99: cmp rax, 0xfffffffffffff000; ja short 0x0000000000116ca8; ret; 
0x0000000014eb1f: cmp rax, 0xfffffffffffff000; ja short 0x000000000014eb30; ret; 
0x00000000041657: cmp rax, 0xfffffffffffff001; jae short 0x0000000000041660; ret; 
0x00000000041aa7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000041ab0; ret; 
0x00000000050031: cmp rax, 0xfffffffffffff001; jae short 0x000000000005003c; xor eax, eax; ret; 
0x000000000d6717: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d6720; ret; 
0x000000000d6937: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d6940; ret; 
0x000000000d7377: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7380; ret; 
0x000000000d7cf7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7d00; ret; 
0x000000000d7e67: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7e70; ret; 
0x000000000d7e97: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7ea0; ret; 
0x000000000d7ef7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7f00; ret; 
0x000000000d7f27: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7f30; ret; 
0x000000000d7f57: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7f60; ret; 
0x000000000d7f87: cmp rax, 0xfffffffffffff001; jae short 0x00000000000d7f90; ret; 
0x000000000effa7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000effb0; ret; 
0x000000000effd7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000effe0; ret; 
0x000000000f0007: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f0010; ret; 
0x000000000f0037: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f0040; ret; 
0x000000000f0067: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f0070; ret; 
0x000000000f0097: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f00a0; ret; 
0x000000000f00c7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f00d0; ret; 
0x000000000f9787: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f9790; ret; 
0x000000000f97b7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f97c0; ret; 
0x000000000f9967: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f9970; ret; 
0x000000000f9997: cmp rax, 0xfffffffffffff001; jae short 0x00000000000f99a0; ret; 
0x000000000fa217: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa220; ret; 
0x000000000fa3e7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa3f0; ret; 
0x000000000fa417: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa420; ret; 
0x000000000fa447: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa450; ret; 
0x000000000fa477: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa480; ret; 
0x000000000fa4a7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa4b0; ret; 
0x000000000fa567: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa570; ret; 
0x000000000fa597: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fa5a0; ret; 
0x000000000fada7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fadb0; ret; 
0x000000000fadd7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fade0; ret; 
0x000000000fae07: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fae10; ret; 
0x000000000fae3a: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fae43; ret; 
0x000000000fb257: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb260; ret; 
0x000000000fb28a: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb293; ret; 
0x000000000fb2b7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb2c0; ret; 
0x000000000fb2e7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb2f0; ret; 
0x000000000fb317: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb320; ret; 
0x000000000fb34a: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb353; ret; 
0x000000000fb377: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb380; ret; 
0x000000000fb3a7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb3b0; ret; 
0x000000000fb3d7: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fb3e0; ret; 
0x000000000fdf9a: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fdfa3; ret; 
0x000000000ff087: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ff090; ret; 
0x000000000ff227: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ff230; ret; 
0x000000000ffb47: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ffb50; ret; 
0x000000000ffc57: cmp rax, 0xfffffffffffff001; jae short 0x00000000000ffc60; ret; 
0x000000000fff47: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fff50; ret; 
0x000000000fff77: cmp rax, 0xfffffffffffff001; jae short 0x00000000000fff80; ret; 
0x00000000100037: cmp rax, 0xfffffffffffff001; jae short 0x0000000000100040; ret; 
0x000000001000f7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000100100; ret; 
0x000000001003e7: cmp rax, 0xfffffffffffff001; jae short 0x00000000001003f0; ret; 
0x00000000100417: cmp rax, 0xfffffffffffff001; jae short 0x0000000000100420; ret; 
0x00000000100447: cmp rax, 0xfffffffffffff001; jae short 0x0000000000100450; ret; 
0x00000000102879: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102882; ret; 
0x00000000102a97: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102aa0; ret; 
0x00000000102ac7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102ad0; ret; 
0x00000000102b97: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102ba0; ret; 
0x00000000102bc7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102bd0; ret; 
0x00000000102bfa: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102c03; ret; 
0x00000000102c27: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102c30; ret; 
0x00000000102c57: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102c60; ret; 
0x00000000102c87: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102c90; ret; 
0x00000000102cb7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000102cc0; ret; 
0x0000000010533a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105343; ret; 
0x00000000105367: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105370; ret; 
0x00000000105397: cmp rax, 0xfffffffffffff001; jae short 0x00000000001053a0; ret; 
0x000000001053ca: cmp rax, 0xfffffffffffff001; jae short 0x00000000001053d3; ret; 
0x000000001053fa: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105403; ret; 
0x00000000105427: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105430; ret; 
0x0000000010545a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105463; ret; 
0x00000000105487: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105490; ret; 
0x000000001054b7: cmp rax, 0xfffffffffffff001; jae short 0x00000000001054c0; ret; 
0x000000001054ea: cmp rax, 0xfffffffffffff001; jae short 0x00000000001054f3; ret; 
0x00000000105517: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105520; ret; 
0x0000000010554a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000105553; ret; 
0x00000000108f27: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108f30; ret; 
0x00000000108f57: cmp rax, 0xfffffffffffff001; jae short 0x0000000000108f60; ret; 
0x00000000109067: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109070; ret; 
0x00000000109097: cmp rax, 0xfffffffffffff001; jae short 0x00000000001090a0; ret; 
0x000000001091c7: cmp rax, 0xfffffffffffff001; jae short 0x00000000001091d0; ret; 
0x0000000010924a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109253; ret; 
0x00000000109277: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109280; ret; 
0x00000000109ce7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109cf0; ret; 
0x00000000109d17: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109d20; ret; 
0x00000000109d5a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109d63; ret; 
0x00000000109d87: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109d90; ret; 
0x00000000109db7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109dc0; ret; 
0x00000000109de7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109df0; ret; 
0x00000000109e17: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109e20; ret; 
0x00000000109e47: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109e50; ret; 
0x00000000109e77: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109e80; ret; 
0x00000000109eaa: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109eb3; ret; 
0x00000000109ed7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109ee0; ret; 
0x00000000109f0a: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109f13; ret; 
0x00000000109f37: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109f40; ret; 
0x00000000109f67: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109f70; ret; 
0x00000000109f97: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109fa0; ret; 
0x00000000109fc7: cmp rax, 0xfffffffffffff001; jae short 0x0000000000109fd0; ret; 
0x00000000109ff7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a000; ret; 
0x0000000010a02a: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a033; ret; 
0x0000000010a05a: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a063; ret; 
0x0000000010a087: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a090; ret; 
0x0000000010a0b7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a0c0; ret; 
0x0000000010a0ea: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a0f3; ret; 
0x0000000010a11a: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a123; ret; 
0x0000000010a147: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a150; ret; 
0x0000000010a177: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a180; ret; 
0x0000000010a1a7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a1b0; ret; 
0x0000000010a1d7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a1e0; ret; 
0x0000000010a207: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a210; ret; 
0x0000000010a23a: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a243; ret; 
0x0000000010a267: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a270; ret; 
0x0000000010a297: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a2a0; ret; 
0x0000000010a2c7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a2d0; ret; 
0x0000000010a2f7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a300; ret; 
0x0000000010a337: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a340; ret; 
0x0000000010a367: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a370; ret; 
0x0000000010a457: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a460; ret; 
0x0000000010a527: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a530; ret; 
0x0000000010a557: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a560; ret; 
0x0000000010a5b7: cmp rax, 0xfffffffffffff001; jae short 0x000000000010a5c0; ret; 
0x0000000010aa57: cmp rax, 0xfffffffffffff001; jae short 0x000000000010aa60; ret; 
0x0000000010aa87: cmp rax, 0xfffffffffffff001; jae short 0x000000000010aa90; ret; 
0x0000000010aaba: cmp rax, 0xfffffffffffff001; jae short 0x000000000010aac3; ret; 
0x00000000095c92: cmp rax, 0xffffffffffffffff; je short 0x0000000000095ca0; add rsp, 0x8; ret; 
0x000000000d6755: cmp rax, 0xffffffffffffffff; mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000006c542: cmp rax, [rbp-0x8b8]; jae 0x000000000006ce10; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000081ec4: cmp rax, [rdi+0x10]; jae short 0x0000000000081ed0; movzx eax, byte ptr [rax]; ret; 
0x0000000010bcb0: cmp rax, [rip+0xe17a1]; mov [rdi+0x10], rax; jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010bd71: cmp rax, [rip+0xea558]; jae short 0x000000000010bd86; mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x0000000007c9c9: cmp rax, rbx; jae 0x000000000007d0b0; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x000000000c5a66: cmp rax, rcx; ja short 0x00000000000c5a80; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000007b9b9: cmp rax, rcx; jae short 0x000000000007b9c1; mov r8d, [rax]; mov eax, r8d; ret; 
0x000000000767a7: cmp rax, rcx; jbe 0x00000000000768a0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007690c: cmp rax, rcx; jbe 0x0000000000076a50; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x000000000788c5: cmp rax, rcx; jbe 0x0000000000078950; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x0000000007d06f: cmp rax, rcx; jbe 0x000000000007d198; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x0000000007d899: cmp rax, rcx; jbe 0x000000000007d970; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007e61e: cmp rax, rcx; jbe 0x000000000007e780; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f93e: cmp rax, rcx; jbe 0x000000000007fa90; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000080f40: cmp rax, rcx; jbe 0x00000000000810e0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x000000000818b3: cmp rax, rcx; jbe 0x0000000000081960; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000082019: cmp rax, rcx; jbe 0x0000000000082100; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x00000000082218: cmp rax, rcx; jbe 0x0000000000082350; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000083e21: cmp rax, rcx; jbe 0x0000000000083ed8; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000006b196: cmp rax, rcx; jbe short 0x000000000006b1f8; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000070325: cmp rax, rcx; jbe short 0x00000000000703a0; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000076d5e: cmp rax, rcx; jbe short 0x0000000000076db8; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000078fc8: cmp rax, rcx; jbe short 0x000000000007900a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000007ae07: cmp rax, rcx; jbe short 0x000000000007ae48; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b67c: cmp rax, rcx; jbe short 0x000000000007b6b0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007b716: cmp rax, rcx; jbe short 0x000000000007b730; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007f10f: cmp rax, rcx; jbe short 0x000000000007f158; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x000000000807c8: cmp rax, rcx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x000000000809b6: cmp rax, rcx; jbe short 0x0000000000080a18; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000080bdb: cmp rax, rcx; jbe short 0x0000000000080c40; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000823b8: cmp rax, rcx; jbe short 0x00000000000823f8; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x00000000083651: cmp rax, rcx; jbe short 0x00000000000836b0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x00000000083ad5: cmp rax, rcx; jbe short 0x0000000000083b40; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000083b87: cmp rax, rcx; jbe short 0x0000000000083bb0; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084297: cmp rax, rcx; jbe short 0x00000000000842d0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000008432e: cmp rax, rcx; jbe short 0x0000000000084350; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000122c4e: cmp rax, rcx; jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x000000000ff131: cmp rax, rdi; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x00000000080c87: cmp rax, rdi; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000c599a: cmp rax, rdx; ja 0x00000000000c5a80; add rax, rdi; add rax, rcx; ret; 
0x00000000084eea: cmp rax, rdx; jae short 0x0000000000084f10; movzx eax, byte ptr [rax]; ret; 
0x00000000142658: cmp rax, rdx; je short 0x0000000000142660; pop rbx; ret; 
0x000000001426c8: cmp rax, rdx; je short 0x00000000001426d8; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x00000000142738: cmp rax, rdx; je short 0x0000000000142748; add rax, 0xa0; pop rbx; ret; 
0x000000001427a8: cmp rax, rdx; je short 0x00000000001427b8; add rax, 0xa8; pop rbx; ret; 
0x00000000133b02: cmp rax, rdx; jne short 0x0000000000133af0; mov rax, r8; add rsp, 0x8; ret; 
0x000000000d849e: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d849f: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000003a200: cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000007b759: cmp rax, rsi; ja short 0x000000000007b750; lea eax, [rdx+rdi]; ret; 
0x00000000084379: cmp rax, rsi; ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x00000000110668: cmp rax, rsi; jb short 0x0000000000110678; mov eax, 0x1; ret; 
0x0000000009cdc8: cmp rax, rsi; jne short 0x000000000009cdc0; mov rax, r8; ret; 
0x0000000007af1d: cmp rbp, rax; jbe 0x000000000007b030; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x000000000849b0: cmp rbp, rax; jbe short 0x0000000000084a10; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18]; 
0x0000000008444e: cmp rbp, rcx; jbe 0x0000000000084568; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x000000000436ca: cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x000000000f8367: cmp rbx, rax; pop rbx; setl al; ret; 
0x00000000192dbe: cmp rbx, rbp; jae short 0x0000000000192dd3; nop [rax+rax]; call qword ptr [rbx]; 
0x000000001045cb: cmp rbx, rdi; jae short 0x0000000000104600; mov rsi, r12; mov rdi, r15; call r13; 
0x0000000008b351: cmp rcx, 0x400; jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x00000000128621: cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285da: cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x00000000050817: cmp rcx, 0xfffffffffffffff8; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x0000000014c295: cmp rcx, [rax+0x28]; jae short 0x000000000014c280; mov eax, 0x1; ret; 
0x000000000811da: cmp rcx, rax; jae 0x00000000000812b0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x00000000179ffe: cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b62e: cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x000000000f9642: cmp rcx, rax; jne short 0x00000000000f9678; mov r10d, ecx; mov eax, 0x103; syscall; 
0x0000000017aa0a: cmp rcx, rax; jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b84a: cmp rcx, rax; jne short 0x000000000017b873; xor eax, eax; ret; 
0x000000000507b3: cmp rcx, rax; sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x0000000010af63: cmp rcx, rdx; mov edx, 0x0; cmovb rax, rdx; ret; 
0x0000000017464d: cmp rcx, rsi; jb 0x0000000000174444; mov rax, r8; vzeroupper; ret; 
0x00000000179400: cmp rcx, rsi; jb 0x0000000000179184; mov rax, r8; vzeroupper; ret; 
0x00000000117c40: cmp rdi, 0x3ff; ja short 0x0000000000117c51; mov rax, rdi; sar rax, 0x6; ret; 
0x00000000044afc: cmp rdi, r8; jb short 0x0000000000044add; xor eax, eax; ret; 
0x000000000b4538: cmp rdi, r9; jb 0x00000000000b46a5; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000104e22: cmp rdi, rax; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x0000000013cbc1: cmp rdi, rcx; jne short 0x000000000013cbb0; ret; 
0x000000000b44b6: cmp rdi, rdx; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x00000000105625: cmp rdi, rdx; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x0000000008a992: cmp rdi, rsi; sete al; ret; 
0x0000000017ec66: cmp rdx, 0x100; ja short 0x000000000017ec80; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x000000000d83d0: cmp rdx, 0x11954; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8423: cmp rdx, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000d85fd: cmp rdx, 0x1badface; setne al; ret; 
0x000000000d8618: cmp rdx, 0x1cd1; setne al; ret; 
0x000000000b4aee: cmp rdx, 0x20; ja 0x00000000000b4b89; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b4b6e: cmp rdx, 0x20; ja short 0x00000000000b4b80; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000d83fe: cmp rdx, 0x2468; jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x00000000087ba5: cmp rdx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x000000000b4b92: cmp rdx, 0x40; ja short 0x00000000000b4ba5; movdqu [rdi+rdx-0x20], xmm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x00000000187093: cmp rdx, 0x40; ja short 0x00000000001870b0; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x00000000187043: cmp rdx, 0x40; ja short 0x00000000001870b9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000000d85dd: cmp rdx, 0x5346544e; setne al; ret; 
0x000000000d840d: cmp rdx, 0x54190100; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8384: cmp rdx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x000000000d2e40: cmp rdx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000017ec33: cmp rdx, 0x80; ja short 0x000000000017ec50; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ebe3: cmp rdx, 0x80; ja short 0x000000000017ec59; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x000000001870c6: cmp rdx, 0x80; ja short 0x00000000001870e0; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x000000000d85c5: cmp rdx, 0xadf5; setne al; ret; 
0x000000000d83b6: cmp rdx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x0000000007b19f: cmp rdx, [rax+0x18]; jbe short 0x000000000007b1c4; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000050464: cmp rdx, rax; jne short 0x0000000000050458; xor eax, eax; ret; 
0x0000000005054c: cmp rdx, rax; jne short 0x0000000000050540; xor eax, eax; ret; 
0x000000000d8396: cmp rdx, rax; jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x000000001228f8: cmp rdx, rax; sbb eax, eax; ret; 
0x000000000880f0: cmp rdx, rbp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x000000000815c1: cmp rdx, rbx; jae 0x00000000000818e0; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x000000000815c0: cmp rdx, rbx; jae 0x00000000000818e0; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000081461: cmp rdx, rbx; jae 0x0000000000081918; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000081460: cmp rdx, rbx; jae 0x0000000000081918; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000116c90: cmp rdx, rcx; ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x00000000055681: cmp rdx, rcx; jae short 0x0000000000055668; mov rax, r8; ret; 
0x000000000fe151: cmp rdx, rcx; je short 0x00000000000fe160; ret; 
0x0000000012297f: cmp rdx, rdi; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x0000000008610d: cmp rdx, rdi; setae al; ret; 
0x00000000087be5: cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x0000000008a9fe: cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x000000000f0123: cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall; 
0x0000000013b4b1: cmp rsi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000018b917: cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000179417: cmp rsi, rax; cmovb eax, esi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174664: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000018b907: cmp rsi, rax; ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce6a: cmp rsi, rax; ja 0x000000000018cc27; mov eax, esi; ret; 
0x000000000f8fb3: cmp rsi, rdi; jne short 0x00000000000f8f90; mov eax, r8d; ret; 
0x0000000014a4c9: cmp si, 0x3; ja short 0x000000000014a4e0; cmp dx, cx; sete al; ret; 
0x000000001889ca: cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x00000000188a24: cmp sil, [rdi+rax+0x20]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188bb4: cmp sil, [rdi+rax+0x20]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188b8c: cmp sil, [rdi+rax+0x40]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x000000001889e4: cmp sil, [rdi+rax+0x60]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x60]; ret; 
0x00000000173c02: cmp sil, [rdi+rax]; jne short 0x0000000000173c35; add rax, rdi; vzeroupper; ret; 
0x00000000173d9f: cmp sil, [rdi+rax]; jne short 0x0000000000173dc5; add rax, rdi; vzeroupper; ret; 
0x00000000188ba4: cmp sil, [rdi+rax]; jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x00000000188c05: cmp sil, [rdx+rax]; jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000173e21: cmp sil, [rdx+rax]; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000116cd6: cmpsb [rsi], [rdi]; adc bh, dh; call qword ptr [rax-0x18]; 
0x0000000017a489: cmpsb [rsi], [rdi]; add eax, 0xc0310000; ret; 
0x0000000007edbe: cmpsb [rsi], [rdi]; fdivp st(2), st; jmp qword ptr [rsi+0x2e]; 
0x000000000c4646: cmpsb [rsi], [rdi]; fdivp st(7), st; jmp qword ptr [rsi+0xf]; 
0x000000000b9616: cmpsb [rsi], [rdi]; loopne 0x00000000000b9618; jmp qword ptr [rsi+0xf]; 
0x000000000b0036: cmpsb [rsi], [rdi]; mov al, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x00000000062793: cmpsb [rsi], [rdi]; mov cl, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000009c01e: cmpsb [rsi], [rdi]; or al, 0x0; cmovne rax, rdx; ret; 
0x000000001427bc: cmpsb [rsi], [rdi]; or al, [rax]; pop rbx; ret; 
0x0000000009bba9: cmpsb [rsi], [rdi]; ret; 
0x000000000d91e6: cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x00000000177de9: cmpsb [rsi], [rdi]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001392d6: cmpsb [rsi], [rdi]; sub eax, 0x8948ffef; ret; 
0x0000000010a066: cmpsb [rsi], [rdi]; sub eax, 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d9647: cmpsd [rsi], [rdi]; add al, [rax]; add [rbx-0x2d773], al; call qword ptr [rax]; 
0x0000000005d2d4: cmpsd [rsi], [rdi]; add rax, rdi; jmp rax; 
0x00000000173c8d: cmpsd [rsi], [rdi]; add rax, rdi; vzeroupper; ret; 
0x000000000acc60: cmpsd [rsi], [rdi]; and al, 0x0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000001027d2: cmpsd [rsi], [rdi]; bnd jmp qword ptr [rsi+0x66]; 
0x00000000168a75: cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000013b41d: cmpsd [rsi], [rdi]; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000116319: cmpsd [rsi], [rdi]; mov rax, r9; ret; 
0x000000001426dc: cmpsd [rsi], [rdi]; or al, [rax]; pop rbx; ret; 
0x0000000009c044: cmpsd [rsi], [rdi]; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x000000000af7f2: cmpsd [rsi], [rdi]; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000001027d1: cmpsq [rsi], [rdi]; bnd jmp qword ptr [rsi+0x66]; 
0x0000000009c043: cmpsq [rsi], [rdi]; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x00000000086d9d: cmpxchg [r8+0x308], edx; jne short 0x0000000000086d88; pop rbx; ret; 
0x00000000086d9e: cmpxchg [rax+0x308], edx; jne short 0x0000000000086d88; pop rbx; ret; 
0x000000000911a7: cmpxchg [rbp], edx; jne short 0x00000000000911b8; xor eax, eax; pop rbp; ret; 
0x000000000911a6: cmpxchg [rbp], rdx; jne short 0x00000000000911b8; xor eax, eax; pop rbp; ret; 
0x0000000009060c: cmpxchg [rdi], ecx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x00000000090448: cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000086418: cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x0000000008b3a7: cmpxchg [rdi], edx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x0000000008e0d3: cmpxchg [rdi], edx; jne short 0x000000000008e0ba; mov qword ptr fs:[0x2f0], 0x0; xor eax, eax; ret; 
0x000000000911dd: cmpxchg [rdi], edx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x000000000865a7: cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x0000000009060b: cmpxchg [rdi], rcx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x0000000008b3a6: cmpxchg [rdi], rdx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x000000000911dc: cmpxchg [rdi], rdx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x0000000008b192: cmpxchg [rsp-0x8], edx; ret; 
0x0000000008b191: cmpxchg [rsp-0x8], rdx; ret; 
0x00000000043e03: cqo; idiv rsi; ret; 
0x00000000043dd3: cqo; xor rax, rdx; sub rax, rdx; ret; 
0x00000000109c88: cvtdq2ps xmm3, [rbp+0x41]; pop rsp; pop r13; pop r14; ret; 
0x000000000e9296: cwde; add [rax], al; add [rax+0x63], cl; ret; 
0x000000000d2c13: cwde; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x00000000081235: cwde; add [rax], al; add [rbx+0x5d], bl; ret; 
0x0000000009e385: cwde; add [rax], al; add [rbx-0x7ab7dbbc], cl; ror byte ptr [rdi], 0x85; ret far; 
0x000000000d2c38: cwde; add [rax], al; add [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x000000000d9245: cwde; add [rax], al; add bl, al; nop [rax+rax]; call qword ptr [rdx+0x40]; 
0x0000000009b064: cwde; add byte ptr [rax], 0x0; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x00000000178e5b: cwde; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000878f1: cwde; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000145844: cwde; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x00000000133a84: cwde; mov al, 0x0; add [rax], al; ret; 
0x000000001426c4: cwde; mov al, [0x480b74d03948000b]; sub eax, 0xffffff80; pop rbx; ret; 
0x0000000006e80e: cwde; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x0000000006df59: cwde; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x000000000b5637: cwde; pop rbx; pop rbp; pop r12; ret; 
0x00000000085676: data16 push 0xc; nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x0000000004301e: data16 ret far; 
0x0000000004a638: data64 ret far; 
0x00000000099208: dec byte ptr [rax+0x21]; ficomp st, word ptr [rbx-0x17]; outsb dx, [rsi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000017e6f2: dec byte ptr [rax+0x6f]; add [rdx-0x1f], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x0000000017e6f8: dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x0000000017bfb2: dec byte ptr [rax+0x6f]; pop rcx; jmp qword ptr [rdx-0x2f]; 
0x0000000017ece1: dec byte ptr [rax+0x7f]; adc bpl, r15b; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ecf1: dec byte ptr [rax+0x7f]; adc dil, r15b; rep ret; 
0x0000000017ece9: dec byte ptr [rax+0x7f]; adc sil, r15b; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017e753: dec byte ptr [rax+0x7f]; ja short 0x000000000017e75a; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [r11], zmm24; ret; 
0x0000000017e588: dec byte ptr [rax+0x7f]; je short 0x000000000017e5a4; std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x0000000017e75a: dec byte ptr [rax+0x7f]; jg short 0x000000000017e762; vmovdqu64 [r11], zmm24; ret; 
0x0000000017e590: dec byte ptr [rax+0x7f]; jl short 0x000000000017e5ac; cld; ret; 
0x0000000017e693: dec byte ptr [rax+0x7f]; jns short 0x000000000017e696; vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x0000000017e69a: dec byte ptr [rax+0x7f]; std; vmovdqu64 [r11], zmm20; ret; 
0x00000000103d46: dec byte ptr [rax+0x9]; ret; 
0x00000000043df4: dec byte ptr [rax-0x3f]; loop 0x0000000000043e19; or rax, rdx; ret; 
0x0000000014c2b9: dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x330]; jmp rax; 
0x00000000103caa: dec byte ptr [rax-0x75]; jo short 0x0000000000103cb7; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x00000000081b13: dec byte ptr [rax-0x77]; out dx, eax; call qword ptr [rbx+0x40]; 
0x000000000c6cb9: dec byte ptr [rax-0x77]; out dx, eax; call rbx; 
0x0000000018f826: dec byte ptr [rax-0x77]; ret far; 
0x0000000017e4c1: dec byte ptr [rax]; jg short 0x000000000017e4cc; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000017ed6d: dec byte ptr [rax]; jg short 0x000000000017ed71; ret; 
0x0000000017ed65: dec byte ptr [rax]; jg short 0x000000000017edad; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x00000000186588: dec byte ptr [rax]; jg short 0x0000000000186593; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x000000001871b9: dec byte ptr [rax]; jg short 0x00000000001871bd; ret; 
0x000000001871b1: dec byte ptr [rax]; jg short 0x00000000001871f9; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x00000000187763: dec byte ptr [rax]; jg short 0x000000000018777e; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000187ee0: dec byte ptr [rax]; jg short 0x0000000000187efb; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x00000000187fb2: dec byte ptr [rax]; jg short 0x0000000000187fbd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000188933: dec byte ptr [rax]; jg short 0x000000000018894e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000189863: dec byte ptr [rax]; jg short 0x000000000018987e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000018a2a3: dec byte ptr [rax]; jg short 0x000000000018a2be; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000018a380: dec byte ptr [rax]; jg short 0x000000000018a39b; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b330: dec byte ptr [rax]; jg short 0x000000000018b34b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x0000000018b3e2: dec byte ptr [rax]; jg short 0x000000000018b3ed; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000092c80: dec byte ptr [rcx+0x2bfc3]; add [rax], al; mov eax, r14d; syscall; 
0x0000000011f94a: dec byte ptr [rcx+rcx*4-0x19]; call rbp; 
0x000000000424ea: dec byte ptr [rcx+rcx*4-0x19]; mov rdx, rbp; call rbx; 
0x0000000006cc2f: dec byte ptr [rcx+rcx*4-0x9]; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719bf: dec byte ptr [rcx+rcx*4-0x9]; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x00000000103d68: dec byte ptr [rcx-0x77]; adc [r9+0x9], cl; ror dword ptr [rcx+rcx*4+0x48], 0x1; or bl, ch; ret; 
0x000000000fe5f2: dec byte ptr [rcx]; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x000000000fe651: dec byte ptr [rcx]; je short 0x00000000000fe668; mov eax, 0x48; syscall; 
0x000000000b4580: dec byte ptr [rdi]; mov bh, 0x36; mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x00000000187e81: dec byte ptr [rdx-0x73]; add al, 0x7; ret; 
0x00000000176dd1: dec byte ptr [rdx-0x73]; add al, 0x7; vzeroupper; ret; 
0x000000001599fe: dec byte ptr [rsi+rax]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017a302: dec dword ptr [r15]; mov dh, 0x4e; jmp far fword ptr [rcx]; 
0x00000000038649: dec dword ptr [r15]; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000017a0b5: dec dword ptr [r15]; mov dh, 0x56; jmp far fword ptr [rcx]; 
0x0000000013cbbf: dec dword ptr [r8+0x39]; iretd; jne short 0x000000000013cbb0; ret; 
0x000000000bb54e: dec dword ptr [r8+0x63]; ret far; 
0x00000000064ec4: dec dword ptr [r8+0x63]; ret; 
0x0000000009677c: dec dword ptr [r9-0x7b]; ret; 
0x0000000014cf7f: dec dword ptr [r9]; add [rbp-0x3eb7fbb9], cl; loopne 0x000000000014cf8f; lea rax, [rax+rdx+0x4]; ret; 
0x000000000738e0: dec dword ptr [rax+0x1]; clc; jmp rax; 
0x00000000073c8c: dec dword ptr [rax+0x1]; clc; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000065a16: dec dword ptr [rax+0x1]; ret far; 
0x000000000cddcc: dec dword ptr [rax+0x1]; ret; 
0x00000000100c2e: dec dword ptr [rax+0x1]; ret; 
0x0000000005522f: dec dword ptr [rax+0x21]; enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000006ccb1: dec dword ptr [rax+0x29]; ret far; 
0x0000000009d949: dec dword ptr [rax+0x29]; ret; 
0x0000000007b9b8: dec dword ptr [rax+0x39]; enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret; 
0x0000000004dd71: dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x0000000013cbc0: dec dword ptr [rax+0x39]; iretd; jne short 0x000000000013cbb0; ret; 
0x000000000b7d1e: dec dword ptr [rax+0x39]; ret far; 
0x0000000003eccf: dec dword ptr [rax+0x39]; ret; 
0x00000000084b9c: dec dword ptr [rax+0x63]; adc r11b, r13b; ret; 
0x0000000006ebbf: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdi; jmp rax; 
0x0000000006c29c: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdx; jmp rax; 
0x00000000064aed: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rsi; jmp rax; 
0x00000000073de0: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rcx; jmp rax; 
0x0000000006ee23: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rsi; jmp rax; 
0x000000000eebf1: dec dword ptr [rax+0x63]; add al, 0xba; add rax, rdx; jmp rax; 
0x0000000012b7d3: dec dword ptr [rax+0x63]; cmp eax, 0x81cbd; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x0000000010bb7c: dec dword ptr [rax+0x63]; fisttp dword ptr [rax-0x77], st; sbb eax, 0xe1899; pop rbx; ret; 
0x000000000bb54f: dec dword ptr [rax+0x63]; ret far; 
0x00000000064ec5: dec dword ptr [rax+0x63]; ret; 
0x000000000aa5e9: dec dword ptr [rax+0xf]; mov ebp, 0xf80148c6; ret; 
0x00000000064dff: dec dword ptr [rax+0xf]; ret; 
0x00000000041c4b: dec dword ptr [rax-0x2d]; ror byte ptr [rax+0x21], 0x7; xor eax, eax; ret; 
0x00000000064be1: dec dword ptr [rax-0x39]; ret; 
0x000000001156f0: dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x00000000108a99: dec dword ptr [rax-0x3f]; loopne 0x0000000000108abe; and rax, rdi; or rax, rsi; ret; 
0x0000000006e866: dec dword ptr [rax-0x68]; movzx eax, byte ptr [rdi+rax]; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x0000000008e2b7: dec dword ptr [rax-0x73]; adc eax, 0x11b959; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d747: dec dword ptr [rax-0x73]; adc eax, 0x11c1b9; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c80c: dec dword ptr [rax-0x73]; adc eax, 0x11cebc; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008bb14: dec dword ptr [rax-0x73]; adc eax, 0x11d9f4; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000064cdc: dec dword ptr [rax-0x73]; adc eax, 0x143028; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000141e57: dec dword ptr [rax-0x73]; adc eax, 0x2ab1; call qword ptr [rax]; 
0x0000000011728d: dec dword ptr [rax-0x73]; adc eax, 0x605ab; cmove rax, rdx; ret; 
0x000000000b55dd: dec dword ptr [rax-0x73]; adc eax, 0xc226b; cmove rax, rdx; ret; 
0x00000000187771: dec dword ptr [rax-0x73]; add al, 0x17; ret; 
0x000000000db7af: dec dword ptr [rax-0x73]; add bl, [r11+0x5d]; pop r12; ret; 
0x000000000a18b9: dec dword ptr [rax-0x73]; add eax, 0x14a3bf; mov rax, [rax+rdi*8]; ret; 
0x000000000a18d9: dec dword ptr [rax-0x73]; add eax, 0x14a5bf; mov rax, [rax+rdi*8]; ret; 
0x0000000007560c: dec dword ptr [rax-0x73]; add eax, 0x17622c; mov rax, [rax+rdi*8]; ret; 
0x0000000010af1d: dec dword ptr [rax-0x73]; add eax, 0xa20bb; mov eax, [rax+rdi*4]; ret; 
0x00000000138e86: dec dword ptr [rax-0x73]; add eax, 0xc3692; add rsp, 0x8; ret; 
0x00000000115ffc: dec dword ptr [rax-0x73]; add eax, 0xfff9e4cc; cmove rax, rdx; ret; 
0x00000000115edc: dec dword ptr [rax-0x73]; add eax, 0xfff9e60c; cmove rax, rdx; ret; 
0x00000000115dbc: dec dword ptr [rax-0x73]; add eax, 0xfff9e72c; cmove rax, rdx; ret; 
0x000000001160b8: dec dword ptr [rax-0x73]; add eax, 0xfff9ea00; cmovne rax, rdx; ret; 
0x00000000056816: dec dword ptr [rax-0x73]; lea ebp, [rdi+rdi*8-0x1]; jmp qword ptr [rsi+0xf]; 
0x000000000db69f: dec dword ptr [rax-0x73]; or [r11+0x5d], bl; pop r12; ret; 
0x00000000125a4f: dec dword ptr [rax-0x75]; adc al, 0x24; mov rdi, r14; call rdx; 
0x0000000016455a: dec dword ptr [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x0000000010a659: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x000000000d22f0: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; neg eax; ret; 
0x000000000f7fea: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000010a71f: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x30; pop r12; ret; 
0x000000001256c9: dec dword ptr [rax-0x75]; add al, 0x24; mov rdi, r12; call rax; 
0x00000000061bcb: dec dword ptr [rax-0x75]; add cl, [rax-0x77]; test [rax-0x16000007], ebx; ret; 
0x000000000d2caf: dec dword ptr [rax-0x75]; add eax, 0x11a159; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2c6f: dec dword ptr [rax-0x75]; add eax, 0x11a199; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x0000000009a2af: dec dword ptr [rax-0x75]; add eax, 0x152b59; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009a170: dec dword ptr [rax-0x75]; add eax, 0x152c68; call qword ptr [rax]; 
0x0000000010c63f: dec dword ptr [rax-0x75]; add eax, 0xe0881; mov eax, [rax+0x40]; ret; 
0x0000000010306c: dec dword ptr [rax-0x75]; add eax, 0xe9d9c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe10f: dec dword ptr [rax-0x75]; add eax, 0xeecf9; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000001412b9: dec dword ptr [rax-0x75]; and al, 0x38; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000013fa79: dec dword ptr [rax-0x75]; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000003ae7b: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x18; ret; 
0x000000000f9cf0: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x28; ret; 
0x000000000fe041: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x30; pop r12; ret; 
0x00000000094007: dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x38; ret; 
0x0000000007c7b5: dec dword ptr [rax-0x75]; cmp [rax-0x75], cl; and al, 0x8; call qword ptr [rax+0x18]; 
0x00000000145e45: dec dword ptr [rax-0x75]; cmp [rax-0x77], cl; ret; 
0x000000000f139d: dec dword ptr [rax-0x75]; je short 0x00000000000f13c6; or [rcx], dh; rol byte ptr [rcx-0x77], cl; ret; 
0x0000000008cacc: dec dword ptr [rax-0x75]; jl short 0x000000000008caf5; or bl, ch; ret far; 
0x0000000014049d: dec dword ptr [rax-0x75]; jo short 0x000000000014042c; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x0000000013a889: dec dword ptr [rax-0x75]; or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000081ebf: dec dword ptr [rax-0x75]; or [r8+0x3b], r9b; adc [r11+0x6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000008385f: dec dword ptr [rax-0x75]; or [r8+0x3b], r9b; adc [r15], r9b; or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000142fd8: dec dword ptr [rax-0x75]; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28]; 
0x00000000139c4a: dec dword ptr [rax-0x75]; or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x000000000d75e8: dec dword ptr [rax-0x75]; pop rbp; clc; leave; ret; 
0x00000000141a3f: dec dword ptr [rax-0x75]; push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x00000000103e3b: dec dword ptr [rax-0x77]; adc al, 0x24; mov [rsp+0x10], rbx; call rax; 
0x00000000092363: dec dword ptr [rax-0x77]; add eax, 0x162515; ret; 
0x0000000011fc5d: dec dword ptr [rax-0x77]; add eax, 0xdcfeb; add rsp, 0x8; ret; 
0x00000000101c38: dec dword ptr [rax-0x77]; add eax, 0xf43f0; add rsp, 0x8; ret; 
0x00000000130a32: dec dword ptr [rax-0x77]; and al, 0x8; mov rcx, rax; call r12; 
0x00000000188211: dec dword ptr [rax-0x77]; clc; ret; 
0x000000001770ff: dec dword ptr [rax-0x77]; clc; vzeroupper; ret; 
0x0000000011fb87: dec dword ptr [rax-0x77]; fucomip st, st(0); mov dword ptr [rdx], 0xe7894c00; call rbx; 
0x00000000072804: dec dword ptr [rax-0x77]; fucomip st, st(0); ret; 
0x00000000082026: dec dword ptr [rax-0x77]; out dx, eax; call qword ptr [r13+0x18]; 
0x00000000093bd1: dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x0000000003b4c9: dec dword ptr [rax-0x77]; ret far; 
0x000000001374eb: dec dword ptr [rax-0x77]; ret; 
0x00000000039233: dec dword ptr [rax-0x77]; ret; 
0x0000000019225b: dec dword ptr [rax-0x77]; rol dword ptr [rbp+0x31], cl; ror byte ptr [rax+0x9], cl; ret far; 
0x0000000019227f: dec dword ptr [rax-0x77]; ror dword ptr [rax+0x9], cl; ret far; 
0x000000000fa8e2: dec dword ptr [rax-0x77]; ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x000000000fa8e1: dec dword ptr [rax-0x77]; ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x00000000087662: dec dword ptr [rax-0x77]; sub [r8-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x00000000065132: dec dword ptr [rax-0x77]; test [rax+0x31fffffa], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000007f769: dec dword ptr [rax-0x77]; vpacksswb xmm2, xmm2, xmm5; cli; jmp qword ptr [rsi+0x2e]; 
0x00000000079669: dec dword ptr [rax-0x77]; vpaddw xmm6, xmm2, [rdx]; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000077699: dec dword ptr [rax-0x77]; vpsrlw xmm1, xmm2, [rdi-0x5]; jmp qword ptr [rsi+0x2e]; 
0x0000000007facc: dec dword ptr [rax-0x77]; vpunpcklqdq xmm2, xmm2, xmm2; cli; jmp qword ptr [rsi+0x2e]; 
0x00000000192293: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret far; 
0x0000000007710a: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x00000000168a6f: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000168a29: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000014269a: dec dword ptr [rax-0x7b]; shl byte ptr [rbp+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x00000000142632: dec dword ptr [rax-0x7b]; shl byte ptr [rcx+rcx*8+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x00000000043c9e: dec dword ptr [rax-0x7b]; shl byte ptr [rsp+rbp*2+0x48], 0x89; sub [rax-0x77], cl; ret; 
0x00000000093b95: dec dword ptr [rax-0x7d]; in al, dx; sbb byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000142813: dec dword ptr [rax-0x7d]; mov eax, 0xe0; add [rax-0x77], cl; ret; 
0x00000000121eaf: dec dword ptr [rax-0x7d]; out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x00000000039b49: dec dword ptr [rax-0x7d]; ret; 
0x00000000094afd: dec dword ptr [rax-0x9]; fisttp dword ptr [rax+0x21], st; ret; 
0x00000000056fec: dec dword ptr [rbp+0x45c70142]; xchg esp, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x000000000b0b08: dec dword ptr [rbp+rcx*4+0x1d]; rcl byte ptr [rbp+0x634b000f], 0x1; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b000d: dec dword ptr [rbp+rcx*4+0x1d]; ret far; 
0x000000000e8e4d: dec dword ptr [rbp-0x45170090]; js short 0x00000000000e8e54; jmp far fword ptr [rax-0x257bf0ff]; 
0x0000000003e413: dec dword ptr [rbp-0x73]; je short 0x000000000003e41e; add [rax-0x9], ecx; ror byte ptr [rax+0x1], 0x1; ret; 
0x0000000018e96f: dec dword ptr [rbp-0x76b23fb6]; ret far; 
0x000000000d06f7: dec dword ptr [rbp-0x77]; fnsave [rcx]; test byte ptr [rbp+0x1b8db], 0x0; add [rdi], cl; ret; 
0x000000000cfb81: dec dword ptr [rbp-0x77]; ret; 
0x000000000fa37c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x3; syscall; 
0x000000000fffcc: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000010008c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000109143: dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop r12; ret; 
0x0000000010ae23: dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x000000001095ce: dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret; 
0x000000000fda52: dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fdb29: dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x0000000011f377: dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x000000000d69f2: dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d68f4: dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000f9ab7: dec dword ptr [rbx+0x480c2444]; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c16: dec dword ptr [rbx+0x480c2444]; add esp, 0x78; ret; 
0x000000000fa500: dec dword ptr [rbx+0x480c2474]; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x000000000940c3: dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x000000000fe4ab: dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000b6b94: dec dword ptr [rbx+0xeb8087b]; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000d1b40: dec dword ptr [rbx+rcx*4+0x6d]; adc [rax-0x77], cl; ret; 
0x0000000004affe: dec dword ptr [rbx+rcx*4+0x7d]; add [rax-0x39], cl; ret; 
0x0000000005fcc0: dec dword ptr [rbx+rcx*4+0xd]; rcr qword ptr [rax], 0x1; add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000001494c1: dec dword ptr [rbx-0x1537b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x000000000b5814: dec dword ptr [rbx-0x16f3dbbc]; ret; 
0x0000000008e030: dec dword ptr [rbx-0x177cfbb9]; add [rcx+0x5f740447], ecx; xor eax, eax; ret; 
0x000000000d9589: dec dword ptr [rbx-0x2d77b]; jmp far fword ptr [rcx+0x810]; 
0x0000000007b4dd: dec dword ptr [rbx-0x3b7cb7fe]; or [rbx+0x5d], bl; ret; 
0x00000000065059: dec dword ptr [rbx-0x55763]; jmp qword ptr [rcx+rcx*4+0x18]; 
0x0000000006115d: dec dword ptr [rbx-0x5ef7b]; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000005dffd: dec dword ptr [rbx-0x61f43]; dec dword ptr [rax-0x77]; ret; 
0x000000000dcc67: dec dword ptr [rbx-0x72b7f3bd]; imul ecx, [rax+rcx*2], 0xffffff83; ret; 
0x0000000008913f: dec dword ptr [rbx-0x76cfdbbc]; ret; 
0x00000000088e38: dec dword ptr [rbx-0x76f7dbbc]; ret; 
0x000000001432c2: dec dword ptr [rbx-0x7a17ff83]; jo short 0x00000000001432c5; jmp qword ptr [rsi-0x7d]; 
0x000000000b6dcf: dec dword ptr [rbx-0x7cb7fb85]; ret; 
0x000000000d69d8: dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x000000000e4105: dec dword ptr [rcx+0x39]; ret far; 
0x000000000a1658: dec dword ptr [rcx+0x54b60f17]; and al, 0xf4; mov [rdi+0x4], dl; ret; 
0x000000000a1670: dec dword ptr [rcx+0x54b70f17]; and al, 0xec; mov [rdi+0x4], dx; ret; 
0x00000000073936: dec dword ptr [rcx+0x63]; add al, 0x83; add rax, rcx; jmp rax; 
0x000000000f8c4b: dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000000f8d56: dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x0000000018b90f: dec dword ptr [rcx+0xff3c3f0]; mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x00000000123016: dec dword ptr [rcx+r9*4+0x10]; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x00000000123017: dec dword ptr [rcx+rcx*4+0x10]; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x00000000092e4d: dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x000000000f8ad1: dec dword ptr [rcx+rcx*4-0x12]; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000001446bb: dec dword ptr [rcx+rcx*4-0x1]; xor eax, eax; add r13, rbx; call rbp; 
0x0000000014590c: dec dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbx; call rcx; 
0x0000000014a0fa: dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x00000000102de3: dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000787f2: dec dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x0000000009ae81: dec dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000057495: dec dword ptr [rcx+rcx*4-0x3e]; mov rsi, r13; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x00000000174655: dec dword ptr [rcx+rcx*4-0x40]; vzeroupper; ret; 
0x00000000184085: dec dword ptr [rcx+rcx*4-0x40]; xtest; je short 0x0000000000184092; vzeroall; ret; 
0x000000001853c8: dec dword ptr [rcx+rcx*4-0x40]; xtest; je short 0x00000000001853d5; vzeroall; ret; 
0x000000001447fa: dec dword ptr [rcx+rcx*4-0xa]; mov rdi, r12; call r13; 
0x0000000010490f: dec dword ptr [rcx-0x11961711]; jmp qword ptr [rsi+0xf]; 
0x0000000010492f: dec dword ptr [rcx-0x11b61711]; jmp qword ptr [rsi+0xf]; 
0x000000000dc9e3: dec dword ptr [rcx-0x16e7dbbc]; ret far; 
0x00000000036ce1: dec dword ptr [rcx-0x3b7cb7fd]; adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000061bc5: dec dword ptr [rcx-0x51f7b]; dec dword ptr [rax-0x75]; add cl, [rax-0x77]; test [rax-0x16000007], ebx; ret; 
0x0000000005cc3b: dec dword ptr [rcx-0x6c373]; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000d23f1: dec dword ptr [rcx-0x72b2bfbd]; je short 0x00000000000d241d; and [rax-0x7d], cl; ret; 
0x00000000139ff2: dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x0000000019266e: dec dword ptr [rcx-0x75]; jge short 0x0000000000192683; add rdi, rbx; call r12; 
0x0000000012c1e5: dec dword ptr [rcx-0x75]; or [r8-0x7d], r9b; ret; 
0x00000000113677: dec dword ptr [rcx-0x75]; sub [rax-0x77], r9b; ret; 
0x00000000113678: dec dword ptr [rcx-0x75]; sub [rax-0x77], r9b; ret; 
0x0000000002d3c0: dec dword ptr [rcx-0x75]; xor al, 0x24; lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3a7: dec dword ptr [rcx-0x75]; xor al, 0x24; lea rdi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000ecf6b: dec dword ptr [rcx-0x76bfdbbc]; ret; 
0x000000000dc7b3: dec dword ptr [rcx-0x77]; fisttp qword ptr [rbx-0x7cb7fbbd], st; ret; 
0x000000000de3bc: dec dword ptr [rcx-0x77]; fmul st, qword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x000000000f59d9: dec dword ptr [rcx-0x77]; ret; 
0x00000000054d8c: dec dword ptr [rcx-0x77]; ret; 
0x0000000009677d: dec dword ptr [rcx-0x7b]; ret; 
0x00000000075a6f: dec dword ptr [rcx-0x7d]; ret; 
0x00000000057d16: dec dword ptr [rcx-0xf743]; inc dword ptr [rax-0x13343]; jmp qword ptr [rdi-0x75]; 
0x0000000014cf80: dec dword ptr [rcx]; add [rbp-0x3eb7fbb9], cl; loopne 0x000000000014cf8f; lea rax, [rax+rdx+0x4]; ret; 
0x00000000170ab0: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000113099: dec dword ptr [rcx]; ret; 
0x0000000010c9cf: dec dword ptr [rcx]; setbe r8b; mov eax, r8d; ret; 
0x000000001252c7: dec dword ptr [rdi+rcx]; test [rcx-0x7cfffff8], al; call far fword ptr [rsp+rsi*2]; 
0x00000000108a42: dec dword ptr [rdi]; add [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x000000001859d2: dec dword ptr [rdi]; add esi, edx; je short 0x00000000001859dc; vzeroall; ret; 
0x00000000127749: dec dword ptr [rdi]; and al, 0x4; add rsp, 0x18; ret; 
0x00000000090421: dec dword ptr [rdi]; jne short 0x0000000000090430; xor eax, eax; ret; 
0x00000000040de0: dec dword ptr [rdi]; mov [rcx-0x7f000000], cs; sti; push rax; ret; 
0x0000000003a816: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a79f; loopne 0x000000000003a81f; ret; 
0x0000000003a826: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a7af; loopne 0x000000000003a836; ret; 
0x0000000003a856: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a7df; loopne 0x000000000003a860; ret; 
0x0000000003a8e6: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000003a86f; loopne 0x000000000003a8f2; ret; 
0x0000000010d0dd: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000010d066; loopne 0x000000000010d0ed; ret; 
0x0000000010d1dd: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000010d166; loopne 0x000000000010d1e6; ret; 
0x0000000010d25d: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000010d1e6; loopne 0x000000000010d267; ret; 
0x0000000010d4dd: dec dword ptr [rdi]; mov bh, 0x4; js short 0x000000000010d466; loopne 0x000000000010d4e9; ret; 
0x000000000cb540: dec dword ptr [rdi]; mov dh, 0x45; add [rax-0x7d], cl; ret; 
0x0000000017a303: dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx]; 
0x0000000003864a: dec dword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000017a0b6: dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx]; 
0x00000000113b8f: dec dword ptr [rdi]; mov dh, 0x73; add [rax-0x73], ecx; add [r8-0x77], rcx; ret far; 
0x00000000128e1e: dec dword ptr [rdi]; mov dh, 0xc0; add rsp, 0x100; pop rbp; ret; 
0x00000000186fe9: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000001706ed: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000a51f5: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000009bf24: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x000000000d0ccc: dec dword ptr [rdi]; ret; 
0x000000001770f9: dec dword ptr [rdi]; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x0000000006da6e: dec dword ptr [rdi]; test [rbp+0x36e9ffff], ecx; loop 0x000000000006da78; jmp qword ptr [rsi+0xf]; 
0x0000000005d3e5: dec dword ptr [rdi]; test [rbp-0x76ffff9d], ebx; ret; 
0x0000000006079b: dec dword ptr [rdi]; test [rcx-0x16000023], cl; nop; sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000008388a: dec dword ptr [rdi]; test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x0000000017db8f: dec dword ptr [rdi]; test [rsi+0x1], ebp; add [rax], al; xor eax, eax; ret; 
0x0000000006bbd9: dec dword ptr [rdi]; test al, dl; add [rax], al; add [rbx-0x88f63], cl; jmp far fword ptr [rcx]; 
0x000000001207c7: dec dword ptr [rdi]; test dl, bl; add [rax], al; add [rcx-0xa], al; ret; 
0x000000000bf785: dec dword ptr [rdi]; test ecx, esp; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000713f1: dec dword ptr [rdi]; xchg [rax+0x4800000a], cl; mov edx, ebx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000f9b97: dec dword ptr [rdi]; xchg [rdx+0x48000000], eax; add esp, 0x78; ret; 
0x000000000f317f: dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000124236: dec dword ptr [rdi]; xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f58b], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000005d2d0: dec dword ptr [rdx+0x63]; add al, 0xa7; add rax, rdi; jmp rax; 
0x00000000187eeb: dec dword ptr [rdx-0x73]; add al, 0x7; ret; 
0x0000000008e4b3: dec dword ptr [rip+0x6890f00]; xor eax, eax; ret; 
0x000000000ca79c: dec dword ptr [rip-0x3f49f100]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c4637: dec dword ptr [rsi]; add al, ch; rcr dword ptr [rsi-0x9], 0x1; call qword ptr [rax+0x31d18948]; 
0x00000000051e36: dec ecx; ret; 
0x0000000008e55d: dec edi; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000879c6: div byte ptr [rbp+0x17]; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x0000000007db28: div byte ptr [rbp+0x25]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000052115: div byte ptr [rbp+0x28]; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000000c73b2: div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall; 
0x0000000007b868: div byte ptr [rbp+0x45]; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x000000000aa7a2: div byte ptr [rbp+0x4]; xor rax, rax; ret; 
0x00000000104537: div byte ptr [rbp+0x6]; ret; 
0x00000000041185: div byte ptr [rbp+0x8]; mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000008e581: div byte ptr [rbp+0xc]; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x000000000fe8d6: div byte ptr [rbp-0x21]; or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x0000000005212a: div byte ptr [rbp-0xf]; cmp cx, 0x7fff; jne short 0x0000000000052118; mov eax, 0x1; ret; 
0x0000000014d052: div byte ptr [rbx+rcx-0x17]; test byte ptr [rsi], 0xf0; jmp qword ptr [rsi+0xf]; 
0x000000000d91e2: div byte ptr [rcx+rbx-0x17]; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000ee312: div byte ptr [rcx+rbx-0x17]; jbe short 0x00000000000ee2e0; cli; jmp qword ptr [rsi+0xf]; 
0x00000000041a8c: div byte ptr [rcx]; call far fword ptr [rbx-0x17]; 
0x0000000002ee90: div byte ptr [rcx]; jmp qword ptr [rsi+0xf]; 
0x0000000008620e: div byte ptr [rdi+rcx+0x4c]; mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000152aac: div byte ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000010b35b: div byte ptr [rdx+rax*2-0x73]; inc dword ptr [rbx+0x227702f8]; mov eax, 0x1f; syscall; 
0x000000000fe0b5: div byte ptr [rdx+rbp-0x48]; sbb [rcx], al; add [rax], al; syscall; 
0x00000000037211: div byte ptr [rsp+rcx-0x7d]; inc byte ptr [rbx]; je short 0x0000000000037220; ret; 
0x00000000086e5b: div dword ptr [rbp-0x4d]; pop rbx; ret; 
0x0000000007953e: div dword ptr [rbx]; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000152c85: div dword ptr [rcx+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015295d: div dword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000000b5515: div ecx; add [rax], al; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000000584dd: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000086b4f: div ecx; mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000050e9d: div esi; sub rcx, 0x1; jae short 0x0000000000050e98; mov rax, rdx; ret; 
0x0000000015295c: div qword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000086b4e: div rcx; mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000050e9c: div rsi; sub rcx, 0x1; jae short 0x0000000000050e98; mov rax, rdx; ret; 
0x00000000192611: divps xmm0, [rip+0x2877c]; ret; 
0x00000000192610: divss xmm0, [rip+0x2877c]; ret; 
0x0000000007208b: emms; loop 0x0000000000072056; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000007445b: emms; loop 0x0000000000074448; ret; 
0x0000000012089a: emms; mov esp, 0xfffec8e9; jmp qword ptr [rsi+0xf]; 
0x0000000013db9e: enter 0x0, 0x0; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx; 
0x0000000013dbe8: enter 0x0, 0x0; call rax; 
0x0000000013dba9: enter 0x0, 0x0; jmp rcx; 
0x000000000e0910: enter 0x0, 0x0; jne 0x00000000000e083d; ret; 
0x00000000139d3f: enter 0x0, 0x0; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x00000000142fae: enter 0x0, 0x0; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142f04: enter 0x0, 0x0; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x00000000139d38: enter 0x0, 0x0; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000013f6d0: enter 0x1, 0x0; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000192a5c: enter 0x1, 0xe8; lodsb [rsi]; jp short 0x0000000000192a4d; jmp qword ptr [rsi+0x2e]; 
0x0000000017f13d: enter 0x10f, 0xd6; je short 0x000000000017f147; vzeroall; ret; 
0x0000000018017f: enter 0x10f, 0xd6; je short 0x0000000000180189; vzeroall; ret; 
0x0000000008d06e: enter 0x11, 0x48; movsxd edx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008ce92: enter 0x11, 0x4c; lea edi, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d6f44: enter 0x115e, 0x0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000083739: enter 0x1476, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000081b0b: enter 0x1476, 0x4c; mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x000000000c5a68: enter 0x1577, 0x48; sub edi, 0x10; add rax, rdi; ret; 
0x00000000040614: enter 0x178a, 0x0; movsd xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x0000000004061c: enter 0x178d, 0x0; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000c589d: enter 0x1b8, 0x0; add [rax], al; cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000fea27: enter 0x1be, 0x54; add [rax], al; mov eax, 0x10; syscall; 
0x0000000013f7cc: enter 0x1f0f, 0x0; cmp dword ptr [rsi], 0x2; je short 0x000000000013f7e0; mov eax, 0x1; ret; 
0x00000000187d24: enter 0x2, 0x0; ret; 
0x0000000011f9ec: enter 0x2, 0x4c; mov edi, esp; call rbp; 
0x000000000781d4: enter 0x2176, 0x48; movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000079a33: enter 0x2276, 0x48; mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000083b89: enter 0x2476, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x0000000017dd00: enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x0000000005215e: enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000016f35f: enter 0x2948, 0xf8; ret; 
0x00000000044ae4: enter 0x2948, 0xfe; syscall; 
0x00000000117f27: enter 0x2e3c, 0x75; xor [rcx-0x7d], cl; ret; 
0x0000000007b67e: enter 0x2f76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x000000000df214: enter 0x3145, 0xc9; cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x0000000003f5e8: enter 0x3148, 0xd0; movzx edx, byte ptr [rdi]; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x000000000a2e2d: enter 0x31c3, 0xc0; ret; 
0x00000000084299: enter 0x3476, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x00000000079988: enter 0x3576, 0x4c; mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007b9bb: enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret; 
0x0000000013b8e8: enter 0x389, 0x48; add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000f9641: enter 0x3948, 0xc1; jne short 0x00000000000f9678; mov r10d, ecx; mov eax, 0x103; syscall; 
0x0000000018b906: enter 0x3948, 0xc6; ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce69: enter 0x3948, 0xc6; ja 0x000000000018cc27; mov eax, esi; ret; 
0x000000000823ba: enter 0x3b76, 0x48; mov edi, ebp; call qword ptr [rbx+0x88]; 
0x0000000007ae09: enter 0x3c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000078fca: enter 0x3d76, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x000000000703f8: enter 0x415d, 0x5c; pop r13; pop r14; ret; 
0x00000000080b1c: enter 0x4176, 0x48; mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000140c6b: enter 0x4289, 0x10; mov eax, 0x1; ret; 
0x00000000140b73: enter 0x4289, 0xc; mov eax, 0x1; ret; 
0x0000000010b240: enter 0x42b8, 0x0; add [rax], al; syscall; 
0x0000000007f111: enter 0x4476, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x000000000ca4eb: enter 0x4789, 0x18; ret; 
0x000000001403a7: enter 0x4789, 0x48; mov eax, 0x1; ret; 
0x000000001403f4: enter 0x4789, 0x54; mov eax, 0x1; ret; 
0x000000001403d4: enter 0x4789, 0x58; mov eax, 0x1; ret; 
0x000000001236b0: enter 0x480f, 0xc2; ret; 
0x00000000173fd6: enter 0x48f3, 0xf; mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x0000000010421e: enter 0x4901, 0x9; ret far; 
0x000000000829bb: enter 0x4a76, 0x31; idiv byte ptr [rcx+0x3]; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000110e93: enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x000000000b1bd4: enter 0x5, 0x0; ret; 
0x00000000076d60: enter 0x5576, 0x48; mov edi, ebx; call qword ptr [r12+0x60]; 
0x000000001177f6: enter 0x577, 0xe9; loop 0x00000000001177df; stc; call qword ptr [rax-0x18]; 
0x000000000809b8: enter 0x5d76, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000006b198: enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000080bdd: enter 0x6076, 0xba; add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000011562f: enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000002d558: enter 0x6411, 0x48; xor eax, [0x30]; jmp rax; 
0x00000000043d7a: enter 0x6411, 0x48; xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000123928: enter 0x6411, 0x48; xor eax, [0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000100656: enter 0x65b8, 0x0; add [rax], al; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000083ad7: enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x000000000f0184: enter 0x66c3, 0x2e; nop [rax+rax]; mov eax, 0xcb; syscall; 
0x00000000082473: enter 0x6a76, 0x31; idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000078d85: enter 0x7076, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000077509: enter 0x7476, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000070327: enter 0x7676, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x000000000fe14c: enter 0x774, 0x31; ror byte ptr [rax+0x39], 0xca; je short 0x00000000000fe160; ret; 
0x000000000415d1: enter 0x8148, 0xc4; rol byte ptr [rax], 0x1; add [rax], al; ret; 
0x00000000131c2f: enter 0x8348, 0xea; add [rbp-0x7e], esi; ret; 
0x000000000aa35f: enter 0x840f, 0xba; add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000007d071: enter 0x860f, 0x20; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000007690e: enter 0x860f, 0x3b; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x000000000788c7: enter 0x860f, 0x82; add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38]; 
0x0000000007d89b: enter 0x860f, 0xce; add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008201b: enter 0x860f, 0xde; add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x00000000088ac4: enter 0x8902, 0xc2; xor r10d, r10d; mov eax, ebx; syscall; 
0x000000000884a8: enter 0x8902, 0xc2; xor r10d, r10d; mov rdi, r9; mov eax, ebp; syscall; 
0x0000000005b142: enter 0x8907, 0x2; mov eax, 0x1; ret; 
0x000000000fec2d: enter 0x8930, 0x47; or [rax+0x100], bh; mov [rdi+0x16], ax; ret; 
0x0000000013dd7c: enter 0x8941, 0x80; mov ah, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x0000000013dd4c: enter 0x8941, 0x80; mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret; 
0x0000000013dd1f: enter 0x8941, 0x80; test al, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x0000000004057a: enter 0x8948, 0x7; subsd xmm0, xmm1; ret; 
0x00000000050d46: enter 0x894c, 0x47; clc; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cd2: enter 0x894c, 0x7; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000050ddc: enter 0x894c, 0x7; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x0000000007de8f: enter 0x894c, 0xf9; mov rdi, r14; xor r8d, r8d; call r12; 
0x000000000b5d9c: enter 0x8b48, 0x5; ret far; 
0x00000000102871: enter 0x8b4c, 0x4c; and al, 0x8; syscall; 
0x00000000108fb5: enter 0x8b4c, 0x54; and al, 0x8; mov eax, 0x38; syscall; 
0x00000000055232: enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000005a650: enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x00000000145842: enter 0x9848, 0x48; mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x00000000109c11: enter 0xb3b8, 0x1; add [rax], al; syscall; 
0x0000000017dd04: enter 0xc019, 0x83; fdivr st, st(7); ret; 
0x0000000013dd08: enter 0xc089, 0x48; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000140394: enter 0xc089, 0x49; mov [rax], eax; mov eax, 0x1; ret; 
0x000000000c5f72: enter 0xc148, 0xe8; add al, [rdx+rdx*8-0x2e77ea8c]; and cl, 0xf; je short 0x00000000000c5fa0; ret; 
0x0000000009764d: enter 0xc148, 0xe8; or [rbx-0x7eb7a440], eax; stc; jmp far fword ptr [rcx]; 
0x00000000097660: enter 0xc148, 0xe8; or al, 0x83; shr byte ptr [rsi+0x48], 0x81; stc; jmp far fword ptr [rdi+0x2f760000]; 
0x0000000018ca6b: enter 0xc301, 0x66; nop; xor eax, eax; ret; 
0x000000000f997e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb38e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb2ce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x0000000010a15e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e5e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa42e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa48e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f7e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1ee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a27e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2ae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2de: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x000000000fa45e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f004e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000010a34e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102bae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x000000000fa3fe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall; 
0x0000000010aa6e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010a53e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall; 
0x000000000fa57e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fb3be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb2fe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f979e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadbe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d672e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall; 
0x00000000109fde: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7e7e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7eae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f0e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f6e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall; 
0x0000000010907e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109d9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a18e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000effbe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000effee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f001e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f007e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00ae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00de: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c6e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102c9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109cfe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a09e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff5e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x000000001003fe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x0000000010042e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102aae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000108f3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000109dce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109dfe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000010a30e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; 
0x0000000010549e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x0000000010537e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000109e2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109f4e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109fae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall; 
0x0000000010a251: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000fb361: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2a1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a131: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall; 
0x00000000109d71: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall; 
0x00000000109261: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall; 
0x00000000102c11: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall; 
0x00000000109ec1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a071: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall; 
0x00000000105411: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall; 
0x00000000105471: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall; 
0x00000000105351: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall; 
0x00000000105501: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f21: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall; 
0x0000000018d33f: enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000185f72: enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000000cd382: enter 0xc931, 0xe9; sar di, 0x1; jmp qword ptr [rsi+0xf]; 
0x000000000520c1: enter 0xd348, 0xe2; mov [rdi], rdx; mov [rsi], eax; mov eax, 0x1; ret; 
0x00000000122c50: enter 0xde75, 0x44; mov eax, eax; ret; 
0x000000001005e8: enter 0xe, 0x19; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100524: enter 0xe, 0x64; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014031b: enter 0xe0ff, 0x66; nop; xor eax, eax; ret; 
0x000000000a9f81: enter 0xf66, 0xeb; ret; 
0x0000000004081a: enter 0xf8c1, 0x1f; not eax; and eax, edx; ret; 
0x0000000016f9a0: enter 0xf8c5, 0x77; ret; 
0x0000000017aa5a: enter 0xfc3, 0x1f; add [rip+0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000fe5f0: enter 0xfe83, 0x9; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x0000000014a089: enter 0xfff3, 0x48; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000ee317: enter 0xfffa, 0x66; nop [rax+rax]; xor eax, eax; ret; 
0x0000000014ec33: fabs; or [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000b5453: fadd st(3), st; ret; 
0x0000000018c594: fadd st, dword ptr [rax+rax]; add [rcx], dh; ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x000000000018c547; ret; 
0x0000000002d14d: fadd st, dword ptr [rax]; add [rax], al; jne short 0x000000000002d117; ret; 
0x0000000009a084: fadd st, dword ptr [rax]; add [rax], al; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x0000000013a030: fadd st, dword ptr [rax]; add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000770db: fadd st, dword ptr [rax]; add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000004e199: fadd st, dword ptr [rax]; add [rax], al; ret; 
0x00000000102bf4: fadd st, dword ptr [rax]; add [rax], al; syscall; 
0x000000000fb422: fadd st, dword ptr [rax]; ret; 
0x0000000005bb74: fadd st, dword ptr [rbp-0x7b]; shl byte ptr [rbp+0x6], 0x5b; ret; 
0x00000000146625: fadd st, dword ptr [rbx+0x14807e0]; ret; 
0x0000000018ca69: fadd st, dword ptr [rbx+0x66c301c8]; nop; xor eax, eax; ret; 
0x00000000147fe0: fadd st, dword ptr [rbx-0x76b7f820]; ret; 
0x00000000168414: fadd st, dword ptr [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000df553: fadd st, dword ptr [rcx+0x5e]; pop r15; ret; 
0x000000000f8fb7: fadd st, dword ptr [rcx+rcx*4-0x40]; ret; 
0x000000000d6efa: fadd st, dword ptr [rdx]; add [rax], al; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000c9091: fadd st, dword ptr [rip-0x41c2fcb8]; ret; 
0x00000000141e54: fadd st, dword ptr [rsi-0x72b70001]; adc eax, 0x2ab1; call qword ptr [rax]; 
0x000000000fa170: fadd st, qword ptr [rax+rax]; add rsp, 0x68; ret; 
0x000000001160e7: fadd st, qword ptr [rax-0x72b7fd1a]; add eax, 0x68b1e; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009bd87: fadd st, qword ptr [rax-0x72b7fd1a]; add eax, 0xe2e8e; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000010b294: fadd st, qword ptr [rax]; add [rax], al; syscall; 
0x000000000a15dc: fadd st, qword ptr [rdi-0x3d76fff0]; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000000403f4: fadd st, st(0); add rsp, 0x8; ret; 
0x000000000403bc: fadd st, st(0); ret; 
0x00000000085c3e: fadd st, st(3); mov rax, [rax+0x370]; jmp qword ptr [rax+0x38]; 
0x00000000085711: fadd st, st(3); nop [rax+rax]; mov rax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x00000000093049: fadd st, st(3); nop [rax+rax]; mov rax, [rdi+0x78]; ret; 
0x0000000017e328: fadd st, st(3); nop [rax+rax]; ret; 
0x000000000c57e8: fadd st, st(3); nop [rax+rax]; xor rax, rax; ret; 
0x000000000d22fa: fadd st, st(3); nop [rax]; mov eax, 0x16; ret; 
0x00000000109237: fadd st, st(3); nop [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000017b88e: fadd st, st(3); ret; 
0x00000000141f6d: fbld st, tbyte ptr [rbx+0x1f0fffee]; add byte ptr [rax], 0x0; add [rax], al; pop rbp; ret; 
0x00000000173d8b: fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x000000000858b0: fcom st, qword ptr [rdx]; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000fd26d: fcomip st, st(0); bnd jmp qword ptr [rsi-0x7d]; 
0x0000000010c597: fcomip st, st(2); jmp qword ptr [rsi+0xf]; 
0x0000000005c13b: fcomp st, dword ptr [rbp-0x3d]; xchg ax, ax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000009e167: fcomp st, dword ptr [rbx+0x48]; cmovne eax, edi; ret; 
0x000000000f9093: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000116188: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret; 
0x000000000803dd: fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x000000000c0b2e: fcomp st, dword ptr [rbx+0x5d]; sub eax, edx; pop r12; ret; 
0x00000000105214: fcomp st, dword ptr [rbx-0x3d]; nop [rax+rax]; ret; 
0x0000000011c8c3: fcomp st, qword ptr [rbx+0x31]; rcr byte ptr [rbp-0x3a], 0x1; add [rcx+0x5c], al; pop r13; ret; 
0x0000000007ee7c: fdivp st(2), st; call qword ptr [rax+0x2000ba]; 
0x0000000007edbf: fdivp st(2), st; jmp qword ptr [rsi+0x2e]; 
0x0000000012acde: fdivp st(7), st; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000c466f: fdivp st(7), st; jmp qword ptr [rsi+0x2e]; 
0x000000000c4647: fdivp st(7), st; jmp qword ptr [rsi+0xf]; 
0x0000000011d752: fdivr st(3), st; call far fword ptr [rsi+0x5f]; 
0x0000000012b31a: fdivr st, dword ptr [rax+0x1]; ret; 
0x00000000147531: fdivr st, dword ptr [rax-0x1]; ret; 
0x0000000011728b: fdivr st, st(1); dec dword ptr [rax-0x73]; adc eax, 0x605ab; cmove rax, rdx; ret; 
0x0000000013e966: fdivr st, st(7); add rsp, 0x8; ret; 
0x000000001364e6: fdivr st, st(7); jmp qword ptr [rsi+0xf]; 
0x0000000016818d: fdivr st, st(7); ret; 
0x000000000af05e: fdivr st, st(7); xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x0000000018cbd7: ffreep st(3); nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000016f721: ffreep st(5); std; xlat [rbx]; ret far; 
0x000000000b54a9: fiadd st, dword ptr [rax-0x72b7f71b]; adc eax, 0xc294c; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x0000000009d399: fiadd st, dword ptr [rax-0x72b7f71b]; adc eax, 0xd2ecc; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009baf9: fiadd st, dword ptr [rax-0x72b7f71b]; adc eax, 0xd44bc; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x00000000186e42: fiadd st, dword ptr [rax]; add [rax], al; add rax, rdi; ret; 
0x000000000897e7: fiadd st, dword ptr [rax]; add [rax], al; call rax; 
0x00000000176d32: fiadd st, dword ptr [rcx]; add [rax], al; vzeroupper; ret; 
0x0000000008201e: fiadd st, word ptr [rax]; add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x000000000942d6: fiadd st, word ptr [rax]; add [rax], al; movups [rsp+0x50], xmm0; syscall; 
0x000000000941a1: fiadd st, word ptr [rax]; add [rax], al; syscall; 
0x0000000008f788: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000b6645: fiadd st, word ptr [rcx+0x800e6]; add [rax-0x73], cl; add eax, 0xc2a6d; jne short 0x00000000000b660b; ret; 
0x000000000b5095: fiadd st, word ptr [rcx+0x800e6]; add [rax-0x73], cl; add eax, 0xc3e1d; jne short 0x00000000000b505b; ret; 
0x00000000122c52: fiadd st, word ptr [rcx+rcx*4-0x40]; ret; 
0x00000000041ee9: fiadd st, word ptr [rcx-0x77]; rol byte ptr [rcx-0x46], 0x8; add [rax], al; add [rax+0x80], bh; syscall; 
0x00000000175ffe: fiadd st, word ptr [rcx]; add [rax], al; vzeroupper; ret; 
0x00000000044920: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x0000000004496f: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x0000000014170a: fiadd st, word ptr [rsi]; add [rax-0x77], cl; ret; 
0x0000000007c9ce: fiadd st, word ptr [rsi]; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000003133d: ficom st, word ptr [rdi]; add al, ch; ret far; 
0x0000000005f3f3: ficomp st, dword ptr [rax]; add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000009920b: ficomp st, word ptr [rbx-0x17]; outsb dx, [rsi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000011569d: ficomp st, word ptr [rbx-0x48]; add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x00000000075642: fidiv st, dword ptr [rax]; adc eax, [rax]; add rax, rdx; ret; 
0x0000000018aaaf: fidiv st, dword ptr [rbx-0x32]; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000089ec7: fidivr st, dword ptr [rax+0xe]; lea rsi, [rip+0x11f52c]; syscall; 
0x000000000902d4: fidivr st, dword ptr [rip-0x1000]; mov eax, 0x0; cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008fcd0: fidivr st, dword ptr [rip-0x1000]; mov eax, 0x0; cmova eax, edx; ret; 
0x00000000084e2e: fidivr st, word ptr [rax+0x14750016]; mov [rip+0x16b8dd], rbx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x0000000008863c: fidivr st, word ptr [rax+0xca]; syscall; 
0x000000000f5b9b: fidivr st, word ptr [rbx*1-0x49f0f089]; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; jmp rax; 
0x00000000112e25: fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000089f8a: fidivr st, word ptr [rdi+0x2]; mov eax, 0xe; syscall; 
0x0000000007fdc5: fidivr st, word ptr [rdi+0x2]; mov eax, r10d; syscall; 
0x000000000881f4: fidivr st, word ptr [rdx+0x7fffffff]; xor sil, 0x81; syscall; 
0x0000000004f9b8: fild st, dword ptr [rax+0xf3a007d]; xchg esp, eax; ret; 
0x0000000009e483: fild st, dword ptr [rax]; add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret; 
0x0000000008826c: fild st, dword ptr [rbp+0x31]; sar byte ptr [rdx+0x1], cl; mov rdi, r9; mov eax, 0xca; syscall; 
0x000000000f4614: fild st, dword ptr [rbp-0x7b]; rol byte ptr [rbx+rcx*4+0x7c], 0x24; cmp al, 0xf; xchg ebp, eax; ret; 
0x0000000006dffa: fild st, dword ptr [rcx-0x42]; add [rax], eax; add [rax], al; jmp rax; 
0x000000000b6331: fild st, dword ptr [rcx-0x8]; jmp qword ptr [rsi+0x2e]; 
0x00000000040bca: fild st, dword ptr [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040314: fild st, dword ptr [rsp-0x4]; fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x000000000c6a1e: fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000945b5: fild st, word ptr [rax]; add [rax], al; syscall; 
0x000000000dc023: fild st, word ptr [rbx+0x26773bf8]; lea rdx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000aa955: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000c63d5: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000007dad2: fimul st, dword ptr [rax-0x77]; je short 0x000000000007dafb; or al, ch; ret; 
0x00000000072fc0: fimul st, dword ptr [rax-0x77]; out dx, eax; call qword ptr [r12+0x38]; 
0x000000001029f7: fimul st, dword ptr [rax-0x77]; out dx, eax; mov eax, 0x9; syscall; 
0x0000000007fcee: fimul st, dword ptr [rax-0x77]; ret; 
0x0000000003fc69: fimul st, dword ptr [rax-0x7d]; ret; 
0x00000000071c37: fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006e15d: fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000788d0: fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38]; 
0x00000000080b21: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000073399: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000074699: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000006c551: fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x000000000ff364: fimul st, dword ptr [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b387: fimul st, word ptr [rax-0x75]; add eax, 0xe1a81; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013f1d6: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x00000000142de6: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x0000000011f023: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x18]; 
0x000000000bf2d0: fimul st, word ptr [rax-0x77]; ret; 
0x0000000005071c: fimul st, word ptr [rbp+0x11]; ret far; 
0x000000000886c6: fimul st, word ptr [rcx+rcx*4-0x31]; mov eax, 0xca; syscall; 
0x0000000014ef54: fimul st, word ptr [rcx]; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000009adb1: fist dword ptr [rcx+rdi*8], st; call far fword ptr [rdx+0x31]; 
0x00000000080e4b: fistp qword ptr [rdx+0x1], st; call qword ptr [r12+0x80]; 
0x000000000ff2c3: fisttp dword ptr [r14], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000c6dd3: fisttp dword ptr [rax+0x1], st; ret; 
0x00000000094b00: fisttp dword ptr [rax+0x21], st; ret; 
0x000000000c713e: fisttp dword ptr [rax+0x63], st; ret; 
0x00000000052b53: fisttp dword ptr [rax-0x39], st; ret; 
0x0000000018bd49: fisttp dword ptr [rax-0x73], st; xchg [rax], r12d; ret; 
0x000000000512c1: fisttp dword ptr [rax-0x77], st; ret; 
0x0000000010bb7f: fisttp dword ptr [rax-0x77], st; sbb eax, 0xe1899; pop rbx; ret; 
0x0000000010bb69: fisttp dword ptr [rax-0x77], st; sbb eax, 0xe18af; pop rbx; ret; 
0x000000000c0b2c: fisttp dword ptr [rcx+0x295d5bd8], st; rol byte ptr [rcx+0x5c], 0x1; ret; 
0x0000000004dfb0: fisttp dword ptr [rcx+rcx*4-0x40], st; ret; 
0x00000000033878: fisttp dword ptr [rcx-0x7d], st; ret; 
0x0000000003ee47: fisttp dword ptr [rdi+0x63], st; sbb al, 0x9f; add r11, r15; jmp r11; 
0x00000000125a49: fisttp dword ptr [rdi], st; mov [rbx+0x48fffffa], dh; mov edx, [rsp]; mov rdi, r14; call rdx; 
0x000000000bb546: fisttp dword ptr [rdi], st; mov ds, [rip-0x72fffffd]; dec dword ptr [r8+0x63]; ret far; 
0x000000000c3ea1: fisttp dword ptr [rdi], st; mov fs, cx; add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x0000000004dd74: fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x00000000040bc2: fisttp dword ptr [rip+0x178598], st; pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x000000000ff234: fisttp dword ptr [rsi], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ff2c4: fisttp dword ptr [rsi], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000ddbf8: fisttp qword ptr [rax+rax], st; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000018bbb2: fisttp qword ptr [rax-0x73], st; test [rdi+0x80], al; ret; 
0x00000000103f9c: fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x00000000047515: fisttp qword ptr [rax-0x77], st; ret; 
0x000000000dc274: fisttp qword ptr [rax-0x7d], st; ret; 
0x000000000dc7b6: fisttp qword ptr [rbx-0x7cb7fbbd], st; ret; 
0x0000000014c2e7: fisttp qword ptr [rbx], st; or al, [rax]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x000000000b4ce2: fisttp qword ptr [rcx+0x2e66c3d0], st; nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x000000000ff094: fisttp qword ptr [rsi], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ff064: fisttp qword ptr [rsi], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001701e7: fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x0000000007c33d: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rax+0x70]; 
0x00000000082ba3: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rbp+0x70]; 
0x00000000046412: fisttp word ptr [rax+0xf], st; mov esi, 0x83480143; ret; 
0x0000000009222f: fisttp word ptr [rax-0x75], st; add eax, 0x15abd9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f1a50: fisttp word ptr [rax-0x77], st; ret; 
0x0000000003e932: fisttp word ptr [rax-0x7d], st; ret; 
0x0000000005135e: fisttp word ptr [rax], st; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000e51f4: fisttp word ptr [rbx-0x74f3dbbc], st; pop rbp; or al, 0x1; ret; 
0x0000000012b765: fisttp word ptr [rcx+rcx*4+0x5d], st; mov al, [0xfff59de898558944]; call far fword ptr [rdi+0x4c]; 
0x00000000130b8d: fisttp word ptr [rcx+rcx*4-0x17], st; call r10; 
0x000000000a12f8: fisttp word ptr [rcx+rcx*4-0x40], st; ret; 
0x00000000080dca: fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x000000000f639d: fisttp word ptr [rcx-0x6], st; dec dword ptr [rcx-0x77]; ret; 
0x0000000003ffe9: fisttp word ptr [rcx-0x77], st; fsub st(0), st; ret; 
0x00000000032730: fisttp word ptr [rcx-0x7d], st; ret; 
0x0000000003dc59: fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000fe8d8: fisttp word ptr [rip-0x80000000], st; mov [rdi], eax; xor eax, eax; ret; 
0x000000000f9150: fisub st, dword ptr [rcx+rcx*4+0x10]; add rsp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000178921: fisubr st, word ptr [rcx]; enter 0xf8c5, 0x77; ret; 
0x0000000015c5fe: fld st, dword ptr [rax+rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000d2e51: fld st, dword ptr [rax]; add [rax], al; syscall; 
0x00000000043b0b: fld st, dword ptr [rax]; add [rax], al; xor esi, esi; mov rdi, r9; call r13; 
0x000000000b554a: fld st, dword ptr [rcx+0x800e6]; add [rax-0x73], cl; add eax, 0xc24a8; jne short 0x00000000000b5500; ret; 
0x0000000009bb9a: fld st, dword ptr [rcx+0x800e6]; add [rax-0x73], cl; add eax, 0xd4bb8; jne short 0x000000000009bb50; ret; 
0x00000000044633: fld st, dword ptr [rdi-0x389bffe6]; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000192d2f: fld st, dword ptr [rip-0x247ab800]; jne short 0x0000000000192d18; pop rbx; ret; 
0x0000000010c81b: fld st, dword ptr [rip-0x76fff2]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x000000000c599f: fld st, qword ptr [rax]; add [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000fdb74: fld st, qword ptr [rax]; add [rax], al; syscall; 
0x00000000192883: fld st, qword ptr [rax]; test rax, rax; je short 0x000000000019288c; call rax; 
0x00000000046aa4: fld st, qword ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x0000000012fef1: fld st, qword ptr [rbp+0x31]; sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000151c9f: fld st, qword ptr [rcx+0x63490006]; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000469f2: fld st, qword ptr [rcx-0x77]; ret; 
0x00000000040286: fld st, st(0); fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x0000000003f5f2: fld st, st(3); nop [rax]; xor eax, eax; ret; 
0x00000000072217: fld st, tbyte ptr [rcx]; ret; 
0x000000000403b8: fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x00000000040318: fld st, tbyte ptr [rsp+0x8]; fscale; fstp st(1), st; ret; 
0x0000000004028a: fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x000000000401b9: fld st, tbyte ptr [rsp+0x8]; ret; 
0x000000000402d2: fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040218: fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000136a77: fld1; ret; 
0x00000000092233: fldcw [rbx-0x389bffeb]; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000b3437: fldcw [rdi+0xf]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000011c01b: fldcw [rdx+0x7ce8000d]; test al, 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000004111b: fldcw [rsp-0x2]; ret; 
0x00000000102c33: fldenv [rcx-0x2708fff2]; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000006278b: fldenv [rdi-0x49f00001]; shr cl, 0x1; cmpsb [rsi], [rdi]; mov cl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000c49a9: fldenv [rsi+0xf]; jbe short 0x00000000000c49fd; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a4b39: fldenv [rsi+0xf]; je short 0x00000000000a4b8d; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a4e17: fldenv [rsi+0xf]; je short 0x00000000000a4e6b; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a4a31: fldenv [rsi+0xf]; xlat [rbx]; ret; 
0x0000000010a933: fldenv [rsi+rcx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000009d420: fmul st(4), st; add [rax], al; cmove rax, rdx; ret; 
0x00000000050784: fmul st, dword ptr [rax+0x11]; rcr byte ptr [rbp+0x5b], 0x1; ret; 
0x000000000ed7dd: fmul st, dword ptr [rax+0x63]; ret far; 
0x0000000009b48f: fmul st, dword ptr [rax-0x77]; ret far; 
0x000000000db3b6: fmul st, dword ptr [rax-0x7d]; ret; 
0x00000000032701: fmul st, dword ptr [rax-0x7d]; rol byte ptr [rax+rcx*2], 0x39; ret; 
0x00000000146622: fmul st, dword ptr [rax-0x9]; fadd st, dword ptr [rbx+0x14807e0]; ret; 
0x00000000060e23: fmul st, dword ptr [rbx-0x61f63]; jmp qword ptr [rbx+rcx*4]; 
0x0000000013eedf: fmul st, dword ptr [rbx]; add [rax-0x77], cl; in eax, 0x89; ret; 
0x0000000013eede: fmul st, dword ptr [rbx]; add [rax-0x77], cl; in eax, 0x89; ret; 
0x00000000132d5a: fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x0000000014c80c: fmul st, dword ptr [rcx+rcx*4-0x1a]; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000141ad0: fmul st, dword ptr [rcx+rcx*4-0xa]; call qword ptr [rax]; 
0x00000000130946: fmul st, dword ptr [rcx+rcx*4-0xf]; mov rdi, r13; call r12; 
0x00000000040818: fmul st, dword ptr [rcx]; enter 0xf8c1, 0x1f; not eax; and eax, edx; ret; 
0x000000000d75c8: fmul st, qword ptr [rax-0x75]; pop rbp; clc; leave; ret; 
0x000000000d32bb: fmul st, qword ptr [rax-0x7d]; ret; 
0x0000000013bc64: fmul st, qword ptr [rcx+rcx*4+0x65]; push 0xffffffffffff70e9; jmp qword ptr [rsi-0x70]; 
0x000000000de3bf: fmul st, qword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000004acd8: fmulp; pop r13; pop r14; pop r15; ret; 
0x000000000d06fa: fnsave [rcx]; test byte ptr [rbp+0x1b8db], 0x0; add [rdi], cl; ret; 
0x000000000b2ab7: fnstcw [rax+0xf]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000001522a3: fnstcw [rbx+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000105433: fnstcw [rcx+0xe]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000403ef: fnstcw [rdx+0xe]; jne short 0x0000000000040400; fadd st, st(0); add rsp, 0x8; ret; 
0x0000000011b863: fnstenv [rcx+0x34e8000d]; mov al, 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000084e37: fnstsw [rax+0x5830016]; sar byte ptr [rax+0x5b010016], cl; ret; 
0x000000000403c6: fnstsw ax; fstp st(0), st; and eax, 0x200; ret; 
0x000000000cb55f: fptan; or eax, 0xc0b60f00; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000014208f: frstor [rcx-0x76b70012]; ret; 
0x0000000005a37d: frstor [rcx]; std; jmp qword ptr [rsi+0x2e]; 
0x0000000004031c: fscale; fstp st(1), st; ret; 
0x000000000df64e: fst dword ptr [rax+0xcb85b], st; add [rax], al; pop rbp; pop r12; ret; 
0x0000000008bb19: fst dword ptr [rcx], st; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000008b695: fst qword ptr [rcx], st; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x000000000c0b96: fstp dword ptr [rbx+0x31], st; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000012f646: fstp dword ptr [rbx+0x5d], st; pop r12; pop r13; pop r14; ret; 
0x0000000009d95e: fstp dword ptr [rbx+0x5d], st; pop r12; ret; 
0x000000000c6a24: fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000403c8: fstp st(0), st; and eax, 0x200; ret; 
0x0000000004031e: fstp st(1), st; ret; 
0x00000000040288: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x000000000402d6: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040216: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000016f3d4: fstp tbyte ptr [rdx], st; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000005b321: fstp tbyte ptr [rsi], st; add al, [rax]; add rsp, 0xd8; ret; 
0x00000000040380: fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000003ffec: fsub st(0), st; ret; 
0x000000000a1c2f: fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x0000000013e74b: fsub st(6), st; jmp qword ptr [rsi-0x70]; 
0x00000000041668: fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000416a0: fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000044a98: fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000149386: fsub st, dword ptr [rcx-0x7e17fffa]; adc edi, ebp; call qword ptr [rax-0x1a76b7ab]; 
0x000000000403c9: fsub st, dword ptr [rip+0x200]; ret; 
0x000000000ab004: fsub st, dword ptr [rsi+0xf]; xlat [rbx]; ret; 
0x0000000005cb8d: fsub st, dword ptr [rsi-0x70]; mov eax, r8d; ret; 
0x000000000d45c0: fsub st, qword ptr [rdx]; sti; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000aa09c: fsub st, qword ptr [rsi+0xf]; xlat [rbx]; ret; 
0x00000000037260: fsubp st(0), st; sbb dl, [rcx+rdx]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000044342: fsubp st(3), st; movsb [rdi], [rsi]; nop [rax]; mov eax, 0xffffffff; ret; 
0x000000000c6a22: fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret; 
0x000000000c0c10: fsubr st, dword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x1; pop r12; pop r13; ret; 
0x0000000016fe73: fsubr st, qword ptr [rcx]; enter 0xf8c5, 0x77; ret; 
0x0000000014ead9: fsubr st, st(5); inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000004028e: fsubrp; ret; 
0x000000000e99c5: fucomi st, st(1); cld; idiv bh; inc dword ptr [rcx+0x39]; ret; 
0x00000000101e5a: fucomip st, st(0); adc byte ptr [rax-0x3f7a0001], 0x74; and al, 0x83; ret; 
0x0000000011fb8a: fucomip st, st(0); mov dword ptr [rdx], 0xe7894c00; call rbx; 
0x00000000110c8f: fucomip st, st(0); ret far; 
0x00000000072807: fucomip st, st(0); ret; 
0x000000000771c5: fucomip st, st(0); test [rcx-0x5], edx; call far fword ptr [rbx+0x4c]; 
0x00000000145940: fucomp st, st(3); ret; 
0x0000000004f0ce: fwait; add [rax], al; add [rcx-0x7d], cl; ret; 
0x00000000035199: fwait; add al, [rax]; add [rax-0x73], cl; add cl, [rax+0x39]; ret; 
0x000000001502ae: fwait; add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; jmp r10; 
0x000000000b73c1: fwait; cdq; stc; dec dword ptr [rax-0x7d]; ret; 
0x000000000b6071: fwait; clc; jmp qword ptr [rsi+0x2e]; 
0x000000000709cb: fwait; cld; call qword ptr [rax-0x1a76b7ab]; 
0x00000000103401: fwait; jle short 0x00000000001033f9; call far fword ptr [rdx+0x5e]; 
0x0000000014bc31: fwait; jrcxz 0x000000000014bc33; jmp qword ptr [rsi+0x2e]; 
0x000000000f3d91: fwait; mov bh, 0xb; add cl, ch; jno short 0x00000000000f3d8d; jmp qword ptr [rsi+0xf]; 
0x0000000012ff38: fwait; pop rbx; pop rbp; pop r12; ret; 
0x0000000007759e: fwait; push rax; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000098e81: fwait; ret far; 
0x0000000008ae3d: fwait; xchg ax, ax; mov eax, [rip+0x16996a]; ret; 
0x0000000011c68d: fwait; xor eax, eax; ret; 
0x000000000403c4: fxam; fnstsw ax; fstp st(0), st; and eax, 0x200; ret; 
0x0000000004042d: fxch; sbb al, [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000131ca5: fxtract; inc dword ptr [rbp+0x4c0c78c0]; mov eax, esp; pop r12; ret; 
0x00000000064939: hint-not-taken ja 0x0000000000064ca0; lea rsi, [rip+0x1431b9]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000075e22: hint-not-taken ja short 0x0000000000075e44; lea rsi, [rip+0x13314c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000df2e9: hint-not-taken je short 0x00000000000df330; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000124912: hint-not-taken je short 0x0000000000124920; pop rbx; ret; 
0x0000000017723a: hint-taken jb short 0x0000000000177242; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000016df99: hlt; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000093dcd: hlt; add [rax], al; add [rcx+rcx*4+0x64], al; and al, 0x38; syscall; 
0x0000000009aaa8: hlt; add [rax], al; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000015b277: hlt; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016ee99: hlt; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000117e25: hlt; call far fword ptr [rax+0x4c]; 
0x0000000016f3eb: hlt; call qword ptr [rax+0xf003e80]; 
0x000000000e0dcd: hlt; call qword ptr [rax-0x17c574b8]; 
0x0000000009cce0: hlt; clc; dec dword ptr [rax-0x77]; ret; 
0x0000000017e201: hlt; cmp eax, [rsi-0xc]; jne 0x000000000017e320; ret; 
0x000000000a134b: hlt; cmp edx, esi; je short 0x00000000000a1340; ret; 
0x000000000dd8f2: hlt; dec dword ptr [rax-0x77]; ret; 
0x000000000e5e92: hlt; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000000e0cff: hlt; dec dword ptr [rax-0x7d]; ret; 
0x00000000131ca6: hlt; inc dword ptr [rbp+0x4c0c78c0]; mov eax, esp; pop r12; ret; 
0x00000000152d4c: hlt; jb short 0x0000000000152d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152dfc: hlt; jb short 0x0000000000152e07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015571c: hlt; jb short 0x0000000000155727; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001557cc: hlt; jb short 0x00000000001557d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000142619: hlt; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001331af: hlt; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001331ae: hlt; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000f17c4: hlt; jmp qword ptr [rsi+0x2e]; 
0x000000000e0970: hlt; jmp qword ptr [rsi+0x66]; 
0x000000000f3d98: hlt; jmp qword ptr [rsi+0xf]; 
0x0000000014d10c: hlt; jmp qword ptr [rsi-0x70]; 
0x0000000014d10b: hlt; jmp qword ptr [rsi-0x70]; 
0x0000000012a256: hlt; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000017e204: hlt; jne 0x000000000017e320; ret; 
0x000000000f118d: hlt; jne short 0x00000000000f1180; mov eax, [rdx+0x8]; ret; 
0x000000001019a8: hlt; js short 0x00000000001019aa; inc dword ptr [rbx-0x7bf00008]; ret far; 
0x000000000a158a: hlt; mov [rax+0x4], dl; ret; 
0x000000000a14cd: hlt; mov [rdi+0x4], dl; ret; 
0x00000000158d5a: hlt; mov [rdi-0x4], ecx; ret; 
0x00000000153a0d: hlt; mov [rdi-0x4], edx; ret; 
0x000000000d6f84: hlt; mov eax, esi; syscall; 
0x00000000158d53: hlt; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000153b82: hlt; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000016f61b: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000017d812: hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x000000000e248d: hlt; push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000437b0: hlt; ret; 
0x000000001196a8: hlt; shl esi, 0x1; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000017d817: hlt; sub eax, edx; ret; 
0x00000000141ad3: idiv bh; adc [rbp+0x31], al; call far fword ptr [rdx+0x59]; 
0x000000000c0d4e: idiv bh; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000011645c: idiv bh; add rsp, 0xd8; ret; 
0x000000000979bc: idiv bh; call qword ptr [rax+0x18598b48]; 
0x0000000014df6c: idiv bh; call qword ptr [rax+0x5f3d8d48]; 
0x000000000e906c: idiv bh; call qword ptr [rax+0x642444c7]; 
0x000000000da85c: idiv bh; call qword ptr [rax+0x6f3d8d48]; 
0x000000000cddca: idiv bh; dec dword ptr [rax+0x1]; ret; 
0x000000000eceeb: idiv bh; dec dword ptr [rax+0x39]; ret; 
0x00000000072802: idiv bh; dec dword ptr [rax-0x77]; fucomip st, st(0); ret; 
0x000000000c90a5: idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x000000001432c0: idiv bh; dec dword ptr [rbx-0x7a17ff83]; jo short 0x00000000001432c5; jmp qword ptr [rsi-0x7d]; 
0x000000000dc9e1: idiv bh; dec dword ptr [rcx-0x16e7dbbc]; ret far; 
0x00000000051e59: idiv bh; dec ecx; ret; 
0x0000000013ae50: idiv bh; inc dword ptr [rbp+0x481974c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000000e99c8: idiv bh; inc dword ptr [rcx+0x39]; ret; 
0x0000000008d7fb: idiv bh; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000000f5e52: idiv bh; jmp qword ptr [rsi+0x2e]; 
0x000000000872f1: idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000088b22: idiv bh; jmp qword ptr [rsi+0x66]; 
0x000000000475c4: idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000074b2e: idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000125c2b: idiv bh; jmp qword ptr [rsi-0x70]; 
0x0000000011f376: idiv bh; mov eax, [rsp+0xc]; add rsp, 0x10; pop rbp; ret; 
0x000000000c0cfb: idiv bh; nop [rax]; pop rbp; ret; 
0x0000000012427d: idiv bh; nop; ret; 
0x0000000012427c: idiv bh; nop; ret; 
0x000000001172a6: idiv byte ptr [rax+0x6]; add [rax-0x73], cl; adc eax, 0x6fd4f; cmovne rax, rdx; ret; 
0x000000000829bf: idiv byte ptr [rcx+0x3]; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000e3448: idiv byte ptr [rcx]; ret far; 
0x000000000d6ebf: idiv byte ptr [rdi+0x1200011]; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x00000000110fa3: idiv byte ptr [rdi+0x2000004]; call rax; 
0x000000000f87d0: idiv byte ptr [rdi+0x2]; mov eax, 0xe; syscall; 
0x0000000010b166: idiv byte ptr [rdi+0x7]; mov edx, 0x0; jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x0000000007cf80: idiv byte ptr [rdx+0x1]; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000081818: idiv byte ptr [rdx+0x1]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007cd82: idiv byte ptr [rdx+0x2]; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c03: idiv byte ptr [rdx+0x2]; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000082477: idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000002fd56: idiv byte ptr [rdx-0x1]; cmovs eax, edx; ret; 
0x0000000018ecfe: idiv dil; jmp qword ptr [rsi+0xf]; 
0x00000000104a85: idiv edi; add rsp, 0x408; ret; 
0x0000000006c69f: idiv edi; call far fword ptr [rax+0x44]; 
0x00000000071a23: idiv edi; call far fword ptr [rax+0x48]; 
0x0000000007197c: idiv edi; call qword ptr [rax+0x4817048d]; 
0x000000000f7deb: idiv edi; call qword ptr [rax+0x49ff894c]; 
0x000000000f7dec: idiv edi; call qword ptr [rax+0x49ff894c]; 
0x0000000011712c: idiv edi; call qword ptr [rax-0x3c3f76b4]; 
0x000000001154bc: idiv edi; call qword ptr [rax-0x77427cb8]; 
0x00000000071596: idiv edi; call qword ptr [rax]; 
0x000000000717f6: idiv edi; call qword ptr [rbx+0xf]; 
0x00000000070fb3: idiv edi; call rax; 
0x000000000738de: idiv edi; dec dword ptr [rax+0x1]; clc; jmp rax; 
0x00000000073933: idiv edi; dec dword ptr [rcx+0x63]; add al, 0x83; add rax, rcx; jmp rax; 
0x0000000006c699: idiv edi; inc dword ptr [rax-0x8ac43]; call far fword ptr [rax+0x44]; 
0x000000000717e8: idiv edi; inc dword ptr [rbp-0x37af040]; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x0000000006d9c6: idiv edi; inc dword ptr [rbx-0x7af00008]; xor ebx, 0xd9e9ffff; loop 0x000000000006d9d5; jmp qword ptr [rsi+0xf]; 
0x0000000006ca2b: idiv edi; inc dword ptr [rcx]; ret far; 
0x0000000006bbe3: idiv edi; jmp far fword ptr [rcx]; 
0x0000000006c686: idiv edi; jmp qword ptr [rax]; 
0x000000000716c3: idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000c546e: idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000003cf4f: idiv edi; jmp qword ptr [rsi+0xf]; 
0x0000000009917b: idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000b835a: idiv edi; jmp qword ptr [rsi-0x70]; 
0x0000000006d7c2: idiv edi; jmp qword ptr [rsi-0x77]; 
0x0000000010086d: idiv edi; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000010ad6a: idiv edi; mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000109142: idiv edi; mov eax, [rsp+0x4]; add rsp, 0x20; pop r12; ret; 
0x0000000010ae22: idiv edi; mov eax, [rsp+0x4]; add rsp, 0x28; ret; 
0x000000001095cd: idiv edi; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000109308: idiv edi; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x00000000192835: idiv edi; mov qword ptr [rip+0x5cf06], 0x0; add rsp, 0x8; ret; 
0x00000000192c5a: idiv edi; mov qword ptr [rip+0x5cf19], 0x0; add rsp, 0x8; ret; 
0x00000000101813: idiv edi; mov r8d, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x000000001093b9: idiv edi; mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x00000000109530: idiv edi; mov rax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x0000000010b0e6: idiv edi; mov rax, [rsp+0x8]; add rsp, 0x38; ret; 
0x0000000010a658: idiv edi; mov rax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x00000000109468: idiv edi; mov rax, [rsp]; add rsp, 0x28; ret; 
0x0000000010a71e: idiv edi; mov rax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x00000000192781: idiv edi; nop [rax+rax]; add rsp, 0x8; ret; 
0x000000001927e0: idiv edi; nop [rax+rax]; ret; 
0x000000000c9b52: idiv edi; nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x00000000108ea2: idiv edi; nop [rax]; mov dword ptr [rip+0xed2ce], 0x0; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000142471: idiv edi; push rdx; adc [rcx-0x75], cl; or [rcx+r9*4-0x9], r9b; call qword ptr [rax+0x20]; 
0x000000000d69f0: idiv edx; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d69d6: idiv edx; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000043e06: idiv esi; ret; 
0x00000000043df3: idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x000000000d69d5: idiv r10d; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x00000000191466: idiv r15; jmp qword ptr [rsi+0xf]; 
0x000000000ba93a: idiv r15; jmp qword ptr [rsi-0x70]; 
0x000000000979bb: idiv r15b; call qword ptr [rax+0x18598b48]; 
0x00000000088b21: idiv r15b; jmp qword ptr [rsi+0x66]; 
0x000000000bf136: idiv r15b; jmp qword ptr [rsi+0xf]; 
0x000000000717e7: idiv rdi; inc dword ptr [rbp-0x37af040]; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x00000000043e05: idiv rsi; ret; 
0x000000000d6a3d: imul al; cmp eax, 0x85ffffb8; shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x0000000004227a: imul al; jo short 0x00000000000422ad; add [rax], al; add rsp, 0x8; ret; 
0x0000000003fccd: imul al; pop rbp; ret; 
0x00000000054d87: imul al; push rbx; jne short 0x0000000000054d89; dec dword ptr [rcx-0x77]; ret; 
0x000000000fc35f: imul al; ret far; 
0x0000000006e2b6: imul al; ret far; 
0x0000000010ac67: imul al; ret; 
0x00000000117cad: imul al; sub eax, 0x48fff146; add esp, 0x8; ret; 
0x0000000009afa6: imul ax, [rax], 0x4800; lea edx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000012d9a7: imul bh; jmp qword ptr [rsi+0xf]; 
0x0000000018a611: imul eax, [rax+rax], 0x0; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000000d7d2d: imul eax, [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000d7d60; ret; 
0x000000000a47c7: imul eax, [rcx], 0x894d0000; ret far; 
0x000000000a41c7: imul eax, [rdi], 0x894d0000; ret far; 
0x000000000dd6fc: imul eax, [rdx], 0x8d480000; adc eax, 0xce23d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000117781: imul eax, [rip+0x1f0ffffc], 0x0; mov rax, [rip+0xd5681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000017bcfa: imul eax, [rip+0x487c5162], 0x62067111; push rcx; jl short 0x000000000017bd4f; adc [rcx+0x7], edi; ret; 
0x0000000012daf8: imul eax, [rip-0x7cb80000], 0x894801f9; ret far; 
0x0000000010c78b: imul eax, [rsi], 0xff89000e; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x00000000100576: imul eax, [rsp+0x30], 0xf4240; add eax, [rsp+0x38]; add rsp, 0x48; ret; 
0x000000000f9c13: imul eax, ebp, 0x448bfff8; and al, 0xc; add rsp, 0x78; ret; 
0x00000000086b56: imul eax, ecx; lea rax, [rax+rdx+0x4000]; ret; 
0x000000000423e0: imul eax, edi; lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x0000000018df92: imul eax, edi; shr rax, 0x38; ret; 
0x000000000df2a4: imul eax, esi, 0x47; or [rcx], al; mov eax, 0x1; ret; 
0x00000000039268: imul eax; mov [0x8948e7894cffff2e], al; ret; 
0x000000000fc9fa: imul eax; nop; std; dec dword ptr [rax-0x77]; ret; 
0x0000000011e4fb: imul eax; out dx, eax; insb [rdi], dx; bnd jmp qword ptr [rsi-0x77]; 
0x00000000044712: imul eax; push 0x48000001; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000d561f: imul eax; sub ebp, [rbp-0xb]; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000059f06: imul ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000145aed: imul ebp, [rax], 0x5b; pop rbp; pop r12; ret; 
0x000000000fa5a3: imul ebp, [rax], 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000153113: imul ebp, [rbp+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010a2a3: imul ebp, [rbx], 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000014d0f1: imul ebp, [rdi], 0xfffffffa; jmp qword ptr [rsi+0x2e]; 
0x000000001314c1: imul ebp, [rsi-0x7ab70011], 0xffffffc0; sete al; add rsp, 0x8; ret; 
0x00000000109fa3: imul ebp, [rsi], 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000db5a1: imul ebp, edi, 0xfffffff5; jmp qword ptr [rsi+0x66]; 
0x000000000f13b1: imul ebp, esi, 0xffffffff; inc dword ptr [rcx+0x39]; ret; 
0x00000000110980: imul ebx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010b1a3: imul ebx, [rsi+rcx], 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000102d13: imul ebx, [rsi-0x7cb7fff1], 0x415d10c4; pop rsp; pop r13; ret; 
0x000000000927da: imul ebx, esi, 0x2de80011; jge short 0x00000000000927dc; jmp qword ptr [rsi+0x66]; 
0x000000001404a3: imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x00000000085fa5: imul ecx, [rax+rax], 0x48; mov [rbx+0x20], eax; pop rbx; ret; 
0x000000000dcc6d: imul ecx, [rax+rcx*2], 0xffffff83; ret; 
0x000000000ec9d9: imul ecx, [rax-0x75], 0x42; adc [rax+0x39], cl; ret; 
0x000000001108e0: imul ecx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009a370: imul ecx, [rax], 0x5b; pop rbp; pop r12; ret; 
0x000000000f8ad9: imul ecx, [rbx], 0x0; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000150de7: imul ecx, [rbx], 0x894d0000; ret far; 
0x0000000007cf44: imul ecx, [rcx+0x2b], 0x47; and [rax+0x1], cl; ret; 
0x00000000141606: imul ecx, [rcx-0x75], 0x89486047; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000016adb7: imul ecx, [rcx], 0x894d0000; ret far; 
0x000000000d7ea3: imul ecx, [rdi+0x11], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000694ae: imul ecx, [rdi], 0x1a9f85; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000d3861: imul ecx, [rdx-0x76b3fff9], 0xfffffff8; call rax; 
0x000000000a3ec7: imul ecx, [rdx], 0x894d0000; ret far; 
0x000000000f00a3: imul ecx, ebp, 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000091931: imul ecx, esi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000f01a3: imul ecx, esp, 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000087e9a: imul edi, 0x9066ffff; xor eax, eax; ret; 
0x00000000086c27: imul edi, 0xffffffff; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000c69d1: imul edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000a1c31: imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x0000000007eabe: imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000004395a: imul edi, 0xffffffff; xor r8d, r8d; mov rax, r8; ret; 
0x00000000151a71: imul edi, [rcx-0x72b3fff7], 0x1d; test [rbp+0x634f0006], al; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x000000001053a3: imul edi, [rdx+0xe], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001090a3: imul edi, [rip-0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x000000001091a3: imul edi, [rsi+rcx], 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000017bb93: imul edi, ebp, 0x487c5162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b959: imul edi, ebp, 0x487cd162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x0000000003542e: imul edi, ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x00000000116d31: imul edi, ebx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000422fc: imul edi, ebx; add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000006c34b: imul edi, ecx, 0xffffffff; inc dword ptr [rcx]; ret; 
0x00000000143891: imul edi, edx, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000001088e1: imul edi, esi, 0xffffffff; jmp far fword ptr [rcx+0x400000]; 
0x0000000007205b: imul edi, esp, 0xffffffff; call qword ptr [rax+0x4cc98949]; 
0x00000000110930: imul edx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a38c7: imul edx, [rax], 0x894d0000; ret far; 
0x000000000a35c7: imul edx, [rbx], 0x894d0000; ret far; 
0x000000001549d3: imul edx, [rsi+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000a32c7: imul edx, [rsi], 0x894d0000; ret far; 
0x000000000c6998: imul edx; sar rdx, 0x7; sub rdx, rcx; lea rax, [rsi+rdx]; ret; 
0x000000000b3d41: imul esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000f9da3: imul esi, [rax], 0xd8f7000f; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000df629: imul esi, [rcx+rsi], 0xffffffc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000f99a3: imul esi, [rdi+rcx], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f96a3: imul esi, [rdi], 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9ba3: imul esi, [rdx], 0xd8f70012; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000129b23: imul esi, [rsp+rcx], 0x18408b00; test eax, eax; jne short 0x0000000000129b30; ret; 
0x0000000018b694: imul esi, ebx, 0xf; mov esp, 0xc031c3c0; ret; 
0x000000000cb757: imul esi, ecx, 0xb60f000d; ror byte ptr [rcx+0x63], cl; adc al, 0x93; add rdx, r11; jmp rdx; 
0x0000000014bca1: imul esi, esp, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000102aa3: imul esp, [rbx-0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x0000000015e804: imul esp, [rbx], 0x894d0000; ret far; 
0x00000000102ba3: imul esp, [rdx-0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x000000000422fb: imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x00000000086b55: imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x000000000423df: imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x0000000018df91: imul rax, rdi; shr rax, 0x38; ret; 
0x000000000c6997: imul rdx; sar rdx, 0x7; sub rdx, rcx; lea rax, [rsi+rdx]; ret; 
0x00000000140968: in al, 0x0; add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000017e238: in al, 0x0; add [rax], al; ret; 
0x000000000d21c9: in al, 0x0; add [rax], al; syscall; 
0x000000000ea52c: in al, 0x18; or al, 0x0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x00000000115e8d: in al, 0x3; add [rax-0x73], cl; adc eax, 0x43b39; cmovne rax, rdx; ret; 
0x0000000014ce31: in al, 0x48; add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000013b3d6: in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000005d806: in al, 0x4a; movsxd eax, [rdi]; add rax, rdi; jmp rax; 
0x00000000153a06: in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x0000000005d2c9: in al, 0x4c; mov ecx, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000006b19d: in al, 0x4c; mov edx, esp; call qword ptr [r13+0x38]; 
0x0000000003afd5: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000009ba86: in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x00000000085901: in al, 0x66; nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x358]; 
0x000000000b0298: in al, 0x6; add [rax], al; ret; 
0x000000000d335d: in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x000000000eb3da: in al, 0x74; ret; 
0x00000000104add: in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret; 
0x000000000c5d06: in al, 0x75; test al, 0xf0; jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000f8449: in al, 0x8b; push rbx; add al, 0xeb; ret; 
0x0000000009aad8: in al, 0x90; or eax, 0x8c5f600; jne short 0x000000000009aaa1; ret; 
0x0000000009ac48: in al, 0x95; add [rax], eax; cmovne rax, rdx; ret; 
0x00000000052133: in al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000008c1c0: in al, 0xd3; adc [rax], eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000012f3fc: in al, 0xe8; iretq; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000012f4d4: in al, 0xe8; jbe short 0x000000000012f4a6; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000fceec: in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000000fe9f4: in al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000109c25: in al, 0xf0; mov rdi, r8; call rdx; 
0x00000000158d39: in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000115ffa: in al, 0xf9; dec dword ptr [rax-0x73]; add eax, 0xfff9e4cc; cmove rax, rdx; ret; 
0x000000000c5cbd: in al, 0xf; test [rax+rax-0xf580000], ebp; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x0000000009a245: in al, 0xf; test eax, ebp; sub edi, ecx; call far fword ptr [rbx+0x5d]; 
0x00000000074fac: in al, 0xff; call qword ptr [rax+0x2444894c]; 
0x000000000528aa: in al, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x0000000014bc52: in al, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000060527: in al, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000002de9b: in al, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000009888a: in al, dx; adc [rax-0x7d], cl; call qword ptr [rax]; 
0x000000000d3c91: in al, dx; adc al, ch; sbb [rbp], cl; add [rax-0x77], cl; ret; 
0x0000000006c7d5: in al, dx; add [rax-0x8a743], eax; jmp qword ptr [rax]; 
0x00000000187640: in al, dx; add [rax], al; add [rbx-0x7cf0fb06], al; ret; 
0x0000000017b091: in al, dx; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000006b8bc: in al, dx; cld; call qword ptr [rax-0x1a76b7ab]; 
0x000000000930ce: in al, dx; cmp byte ptr [rax-0x1], 0x5b; pop rbp; pop r12; ret; 
0x0000000004496e: in al, dx; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x00000000088bb0: in al, dx; jb short 0x0000000000088bb2; jmp qword ptr [rsi+0x66]; 
0x00000000104b1e: in al, dx; jmp qword ptr [rsi+0x66]; 
0x0000000015912f: in al, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000018bd38: in al, dx; lea rax, [rdi+rax*4]; ret; 
0x000000000a159a: in al, dx; mov [rax+0x4], dx; ret; 
0x000000000a1677: in al, dx; mov [rdi+0x4], dx; ret; 
0x00000000153a0a: in al, dx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000101493: in al, dx; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000073370: in al, dx; mov ch, 0x17; add [rax-0x77], cl; ret; 
0x00000000037e80: in al, dx; mov rax, [rax+r13*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x00000000144a24: in al, dx; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x00000000159139: in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000001933cc: in al, dx; or [rbx+rcx*4+0x2d], cl; ret far; 
0x00000000085e10: in al, dx; or [rcx+0x4c], dl; mov ecx, edx; call rax; 
0x000000000a16ea: in al, dx; or al, 0x0; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x00000000127dd1: in al, dx; or al, ch; cmp [rbx-0x10], al; dec dword ptr [rax-0x77]; ret; 
0x0000000008a95a: in al, dx; or al, ch; pop rdi; ret; 
0x00000000080ade: in al, dx; or al, ch; sub esi, [rsi-0x76b70006]; ret; 
0x000000000f9d90: in al, dx; ret; 
0x0000000008fea2: in al, dx; sbb [rcx-0x17f3dbbc], cl; ret; 
0x00000000093b98: in al, dx; sbb byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000041793: in al, dx; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000d2186: in eax, 0x0; add [rax], al; syscall; 
0x000000000d20f6: in eax, 0x0; add [rax], al; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x000000000d71f8: in eax, 0x11; add [rbx+0x87f01f8], al; pop rbx; ret; 
0x0000000009b05f: in eax, 0x2; lea rax, [rip+0x8098]; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000009ab5f: in eax, 0x48; lea eax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009aa4f: in eax, 0x48; lea eax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afcf: in eax, 0x48; lea eax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfaf: in eax, 0x48; lea eax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c03f: in eax, 0x48; lea eax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b0ff: in eax, 0x48; lea eax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009abff: in eax, 0x48; lea eax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x00000000153816: in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000080305: in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000016f71f: in eax, 0x74; ffreep st(5); std; xlat [rbx]; ret far; 
0x00000000178190: in eax, 0x76; ffreep st(5); std; xlat [rbx]; ret far; 
0x0000000007fc47: in eax, 0x7f; cmp esi, 0x2; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000014c366: in eax, 0x89; and al, 0xc; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x0000000013eee4: in eax, 0x89; ret; 
0x000000000b54ab: in eax, 0x8; lea rdx, [rip+0xc294c]; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f64: in eax, 0x8; lea rdx, [rip+0xc3163]; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5154: in eax, 0x8; lea rdx, [rip+0xc33b3]; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5254: in eax, 0x8; lea rdx, [rip+0xc3a63]; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef4: in eax, 0x8; lea rdx, [rip+0xc3b43]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000a16e4: in eax, 0x8; lea rdx, [rip+0xcece3]; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x0000000009d39b: in eax, 0x8; lea rdx, [rip+0xd2ecc]; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009bafb: in eax, 0x8; lea rdx, [rip+0xd44bc]; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009d414: in eax, 0x8; lea rdx, [rip+0xd6a23]; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x0000000009b174: in eax, 0x8; lea rdx, [rip+0xd8ed3]; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed4: in eax, 0x8; lea rdx, [rip+0xd9343]; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af44: in eax, 0x8; lea rdx, [rip+0xd9453]; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x000000000e8680: in eax, 0x8d; add [r9-0x76f7dbbc], r9d; ret; 
0x0000000014c29a: in eax, 0xb8; add [rax], eax; add [rax], al; ret; 
0x000000000403c5: in eax, 0xdf; loopne 0x00000000000403a6; fsub st, dword ptr [rip+0x200]; ret; 
0x000000000cebdb: in eax, 0xe8; call rsi; 
0x000000000cf73b: in eax, 0xe8; lahf; ret far; 
0x000000000fe814: in eax, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000010ddc2: in eax, 0xf1; jmp qword ptr [rbp+rax*2-0x77]; 
0x00000000158db9: in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000115eda: in eax, 0xf9; dec dword ptr [rax-0x73]; add eax, 0xfff9e60c; cmove rax, rdx; ret; 
0x00000000117856: in eax, 0xf9; jmp qword ptr [rsi+0xf]; 
0x00000000117857: in eax, 0xf9; jmp qword ptr [rsi+0xf]; 
0x000000000c5f93: in eax, 0xf; je short 0x00000000000c5fb0; add rax, 0x2; ret; 
0x0000000007e59f: in eax, 0xfa; jmp qword ptr [rsi+0x2e]; 
0x0000000007287e: in eax, 0xff; inc dword ptr [rcx-0x5]; jg short 0x0000000000072897; test [rbx-0x7c00001b], dh; ret; 
0x0000000014bc71: in eax, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000549e0: in eax, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000008e4fe: in eax, dx; adc eax, 0x7fc33900; cmp dh, bh; ret; 
0x000000001255fb: in eax, dx; add [rbp+rcx*4-0x7c], ecx; add byte ptr [rax], 0x0; add [rbp+rcx*4-0x74], cl; ret; 
0x00000000046aa0: in eax, dx; add [rcx-0x77], ecx; fld st, qword ptr [rbp+0x1]; dec dword ptr [rax-0x77]; ret; 
0x0000000017af4d: in eax, dx; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000bea39: in eax, dx; add ecx, ebp; ret far; 
0x0000000010375b: in eax, dx; add ecx, ebx; ret; 
0x00000000109c22: in eax, dx; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x0000000013de50: in eax, dx; call qword ptr [rax+0x18]; 
0x00000000168a2f: in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000168b5f: in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x0000000014eada: in eax, dx; inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000014d1d0: in eax, dx; inc dword ptr [rcx-0x80]; jl short 0x000000000014d1dd; jmp far fword ptr [rdi]; 
0x0000000009a16a: in eax, dx; jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x000000000d319f: in eax, dx; jns short 0x00000000000d319e; jmp qword ptr [rsi+0x2e]; 
0x000000001591af: in eax, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000000b40a2: in eax, dx; lea rax, [rcx-0x1]; ret; 
0x000000000b3a69: in eax, dx; mov [rdi+0x10], ch; ret; 
0x000000000b3a7f: in eax, dx; mov [rdi+0x11], ch; ret; 
0x000000000b3aa1: in eax, dx; mov [rdi+0x12], ch; ret; 
0x000000000b3abf: in eax, dx; mov [rdi+0x13], ch; ret; 
0x000000000b3adf: in eax, dx; mov [rdi+0x14], ch; ret; 
0x000000000b3b05: in eax, dx; mov [rdi+0x15], ch; ret; 
0x000000000b3b21: in eax, dx; mov [rdi+0x16], ch; ret; 
0x000000000b3b41: in eax, dx; mov [rdi+0x17], ch; ret; 
0x000000000b3b61: in eax, dx; mov [rdi+0x18], ch; ret; 
0x000000000b3b87: in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000b38e5: in eax, dx; mov [rdi+0x1], ch; ret; 
0x000000000b3ba9: in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000b3bc7: in eax, dx; mov [rdi+0x1b], ch; ret; 
0x000000000b3be7: in eax, dx; mov [rdi+0x1c], ch; ret; 
0x000000000b3c03: in eax, dx; mov [rdi+0x1d], ch; ret; 
0x000000000b3c23: in eax, dx; mov [rdi+0x1e], ch; ret; 
0x000000000b3c43: in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000b3c63: in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000b3c89: in eax, dx; mov [rdi+0x21], ch; ret; 
0x000000000b38f7: in eax, dx; mov [rdi+0x2], ch; ret; 
0x000000000b390d: in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000b3cd9: in eax, dx; mov [rdi+0x40], ch; ret; 
0x000000000b3925: in eax, dx; mov [rdi+0x4], ch; ret; 
0x000000000b393b: in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000b394d: in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000b396b: in eax, dx; mov [rdi+0x7], ch; ret; 
0x000000000b3977: in eax, dx; mov [rdi+0x8], ch; ret; 
0x000000000b398d: in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000b39af: in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000b39cd: in eax, dx; mov [rdi+0xb], ch; ret; 
0x000000000b39ed: in eax, dx; mov [rdi+0xc], ch; ret; 
0x000000000b3a0f: in eax, dx; mov [rdi+0xd], ch; ret; 
0x000000000b3a2f: in eax, dx; mov [rdi+0xe], ch; ret; 
0x000000000b3a4f: in eax, dx; mov [rdi+0xf], ch; ret; 
0x0000000015381a: in eax, dx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x000000000b38d1: in eax, dx; mov [rdi], ch; ret; 
0x0000000006f642: in eax, dx; mov edx, 0x1; jmp rax; 
0x0000000007aab2: in eax, dx; mov rax, r8; ret; 
0x000000001591b9: in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000000e277e: in eax, dx; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e2713: in eax, dx; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x00000000099729: in eax, dx; or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx]; 
0x0000000006b51f: in eax, dx; out dx, eax; cld; jmp qword ptr [rsi+0x66]; 
0x00000000108fcb: in eax, dx; pop rax; pop rdi; call rax; 
0x000000000b3e82: in eax, dx; ret; 
0x0000000019277f: in eax, dx; sbb eax, 0x1f0ffff7; add [rax], r8b; add rsp, 0x8; ret; 
0x000000000c113f: in eax, dx; sti; jmp qword ptr [rsi+0x66]; 
0x000000000b41f2: in eax, dx; sub rax, 0x1; ret; 
0x0000000009a1d2: in eax, dx; xor eax, eax; ret; 
0x000000000f11f4: inc al; add [rax], al; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000017c107: inc bl; cmp dl, 0x1; jb short 0x000000000017c111; mov [rdi], cl; ret; 
0x00000000187f88: inc bl; nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000000ff8bd: inc byte ptr [rax+0x1d740038]; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x000000000ff94d: inc byte ptr [rax+0x1d740038]; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x00000000109f31: inc byte ptr [rax]; add [rax], al; syscall; 
0x00000000179d9e: inc byte ptr [rbx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000014a4cb: inc byte ptr [rbx]; ja short 0x000000000014a4e0; cmp dx, cx; sete al; ret; 
0x00000000037215: inc byte ptr [rbx]; je short 0x0000000000037220; ret; 
0x00000000103c53: inc byte ptr [rcx-0x77]; ret far; 
0x0000000018b21e: inc byte ptr [rcx]; add [rax], al; ret; 
0x00000000087ed1: inc byte ptr [rcx]; ja short 0x0000000000087ee0; mov [rdi], esi; xor eax, eax; ret; 
0x0000000008fc91: inc byte ptr [rcx]; ja short 0x000000000008fca0; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x0000000008e591: inc byte ptr [rcx]; je short 0x000000000008e5a0; mov eax, 0x16; ret; 
0x000000000d2091: inc byte ptr [rcx]; je short 0x00000000000d20a0; xor eax, eax; ret; 
0x000000000d20c1: inc byte ptr [rcx]; je short 0x00000000000d20d0; xor eax, eax; ret; 
0x0000000008e5b5: inc byte ptr [rcx]; jne short 0x000000000008e5d8; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x00000000087ab5: inc byte ptr [rcx]; mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x000000000783ce: inc byte ptr [rdx-0x77cffe9]; add [rdi+0x9], edi; ret; 
0x0000000007fc4a: inc byte ptr [rdx]; cmovne edx, ecx; mov [rdi], edx; ret; 
0x0000000008fc71: inc byte ptr [rdx]; ja short 0x000000000008fc80; mov [rdi], esi; xor eax, eax; ret; 
0x000000000f8f06: inc byte ptr [rdx]; ja short 0x00000000000f8f12; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x00000000087a96: inc byte ptr [rdx]; jbe short 0x0000000000087aa0; ret; 
0x000000000f65f2: inc byte ptr [rip-0x7cb80000]; ret; 
0x00000000126833: inc dh; jmp far fword ptr [rsi]; 
0x000000000ed618: inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000057fac: inc dword ptr [rax-0x13343]; jmp qword ptr [rdi+0x75]; 
0x00000000057d1c: inc dword ptr [rax-0x13343]; jmp qword ptr [rdi-0x75]; 
0x0000000003bc3d: inc dword ptr [rax-0x76b7bcc8]; ret; 
0x000000000db768: inc dword ptr [rax-0x76b7ffc8]; ret; 
0x0000000008e27d: inc dword ptr [rax-0x80]; test byte ptr [rdi+0x31d23145], 0xd2; mov eax, 0xca; syscall; 
0x0000000006c69b: inc dword ptr [rax-0x8ac43]; call far fword ptr [rax+0x44]; 
0x0000000005e848: inc dword ptr [rax]; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000123ced: inc dword ptr [rax]; add [rax], al; add [rcx-0x877b], cl; jmp qword ptr [rsi+0x44]; 
0x00000000068368: inc dword ptr [rax]; add [rax], al; add cl, ch; scasd [rdi]; ret; 
0x0000000017aa61: inc dword ptr [rax]; add [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000be365: inc dword ptr [rax]; add [rax], al; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x00000000128624: inc dword ptr [rax]; add [rax], al; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285dd: inc dword ptr [rax]; add [rax], al; jg short 0x00000000001285e8; ret; 
0x000000000d8589: inc dword ptr [rax]; add [rax], al; ret; 
0x0000000017aa67: inc dword ptr [rax]; add [rax], al; sub eax, ecx; ret; 
0x00000000109fc1: inc dword ptr [rax]; add [rax], al; syscall; 
0x00000000058915: inc dword ptr [rax]; add [rcx+0x21], cl; ret; 
0x000000000948a6: inc dword ptr [rax]; add [rsi+0x5], dh; ret; 
0x000000000eeed8: inc dword ptr [rax]; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000a1119: inc dword ptr [rax]; mov [rdi], rdx; ret; 
0x0000000010b83b: inc dword ptr [rax]; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x00000000117d6c: inc dword ptr [rax]; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000101437: inc dword ptr [rax]; mov rax, r8; ret; 
0x000000001014b1: inc dword ptr [rax]; ret; 
0x000000000ffa20: inc dword ptr [rbp+0x100b8c0]; add [rax], al; cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x000000000b7ac2: inc dword ptr [rbp+0x1]; dec dword ptr [rax-0x7d]; ret; 
0x000000000f55ea: inc dword ptr [rbp+0x1]; jmp qword ptr [rsi-0x70]; 
0x0000000012db86: inc dword ptr [rbp+0x21840fc0]; add al, [rax]; add [rcx-0x7d], cl; ret; 
0x000000000f0160: inc dword ptr [rbp+0x31]; leave; add rsp, 0x8; mov eax, r9d; ret; 
0x000000000f015f: inc dword ptr [rbp+0x31]; leave; add rsp, 0x8; mov eax, r9d; ret; 
0x000000000f308e: inc dword ptr [rbp+0x31]; rol byte ptr [rbx-0x76b7f502], cl; rol dword ptr [rdi+rcx+0x44], 0x1; ret far; 
0x0000000010183a: inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x77], 0x5; ret; 
0x0000000014eadb: inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000008e208: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+0x1], cl; mov esi, 0x1; mov eax, 0xca; syscall; 
0x00000000100482: inc dword ptr [rbp+0x410579c0]; mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x000000000d6a42: inc dword ptr [rbp+0x480975c0]; add esp, 0x8; ret; 
0x00000000149f21: inc dword ptr [rbp+0x480a78c0]; add esp, 0x8; pop rbp; pop r12; ret; 
0x0000000013ae52: inc dword ptr [rbp+0x481974c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000143981: inc dword ptr [rbp+0x483a74c0]; mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000013a027: inc dword ptr [rbp+0x48ba74c0]; mov eax, [rsp+0xd8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000141602: inc dword ptr [rbp+0x496974c0]; mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000131ca7: inc dword ptr [rbp+0x4c0c78c0]; mov eax, esp; pop r12; ret; 
0x00000000142b44: inc dword ptr [rbp+0x5b0775db]; pop rbp; pop r12; ret; 
0x000000000f4b91: inc dword ptr [rbp+0x5ba774c0]; mov eax, 0x5; pop rbp; pop r12; ret; 
0x0000000004e0c2: inc dword ptr [rbp+0x5d0974c0]; ret; 
0x00000000085e95: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c495: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d8a: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c1: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, rbx; pop rbx; ret; 
0x000000000717ea: inc dword ptr [rbp-0x37af040]; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x00000000085c30: inc dword ptr [rbp-0x3f6af040]; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x000000001452ad: inc dword ptr [rbp-0x3f6af040]; add rsp, 0x8; movzx eax, al; ret; 
0x0000000004d85f: inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; movzx eax, al; ret; 
0x0000000014a544: inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; ret; 
0x000000000da19a: inc dword ptr [rbp-0x727af040]; or [rax], eax; add [rax-0x7d], cl; ret; 
0x0000000004a635: inc dword ptr [rbp-0x73]; data64 ret far; 
0x000000001429ed: inc dword ptr [rbp-0x75]; add gs:[rax-0x7d], cl; ret; 
0x00000000104ada: inc dword ptr [rbp-0x7b]; in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret; 
0x00000000060433: inc dword ptr [rbp-0x7b]; ror byte ptr [rdi], cl; test [rbx], ch; ret far; 
0x00000000101e5f: inc dword ptr [rbp-0x7cdb8b40]; ret; 
0x0000000010b35f: inc dword ptr [rbx+0x227702f8]; mov eax, 0x1f; syscall; 
0x0000000010ace4: inc dword ptr [rbx+0x474fff8]; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000fec2b: inc dword ptr [rbx+0x478930c8]; or [rax+0x100], bh; mov [rdi+0x16], ax; ret; 
0x0000000013cfd9: inc dword ptr [rbx+0x7ee8ffcf]; lahf; stc; jmp qword ptr [rsi+0x2e]; 
0x000000000945ad: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x0000000009455a: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x0000000009450a: inc dword ptr [rbx+rcx*4+0x7]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x000000000c00e3: inc dword ptr [rbx-0x14fe6fbb]; ret; 
0x00000000086e55: inc dword ptr [rbx-0x1f7ce940]; div dword ptr [rbp-0x4d]; pop rbx; ret; 
0x0000000008e1df: inc dword ptr [rbx-0x1f7ce940]; test dword ptr [rdi], 0xfffe1a84; call qword ptr [rax+0x48]; 
0x000000000f8c45: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000000f8d50: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x00000000088abf: inc dword ptr [rbx-0x377c0320]; add cl, [rcx-0x2dceba3e]; mov eax, ebx; syscall; 
0x000000000884a3: inc dword ptr [rbx-0x377c0320]; add cl, [rcx-0x2dceba3e]; mov rdi, r9; mov eax, ebp; syscall; 
0x000000000f8c48: inc dword ptr [rbx-0x39760031]; mov eax, 0x75; syscall; 
0x000000000f8d53: inc dword ptr [rbx-0x39760031]; mov eax, 0x77; syscall; 
0x00000000083887: inc dword ptr [rbx-0x7af00008]; or eax, 0xe9ffffff; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x0000000006d9c8: inc dword ptr [rbx-0x7af00008]; xor ebx, 0xd9e9ffff; loop 0x000000000006d9d5; jmp qword ptr [rsi+0xf]; 
0x000000001019ab: inc dword ptr [rbx-0x7bf00008]; ret far; 
0x00000000059a3d: inc dword ptr [rbx-0x7bf0cf02]; ret; 
0x0000000003879b: inc dword ptr [rbx-0x80]; jl short 0x00000000000387d4; jmp far fword ptr [rsi]; 
0x000000001225ef: inc dword ptr [rbx-0xc8b0a08]; pop rbx; ret; 
0x000000000446a4: inc dword ptr [rbx]; add [rax], al; xor eax, ecx; ret; 
0x0000000008d15a: inc dword ptr [rcx+0x39]; ret far; 
0x000000000e99ca: inc dword ptr [rcx+0x39]; ret; 
0x0000000014511f: inc dword ptr [rcx+0x5d]; xor eax, eax; pop r14; jmp rcx; 
0x00000000117d3e: inc dword ptr [rcx+0xe2]; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000013fbd4: inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret; 
0x000000000522ca: inc dword ptr [rcx+rbp-0x40]; mov [rsi], eax; mov eax, 0x2; ret; 
0x000000001136ba: inc dword ptr [rcx+rcx*4-0x19]; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x0000000008aaeb: inc dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000012f70c: inc dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x0000000014b0ea: inc dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret; 
0x00000000076962: inc dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000087171: inc dword ptr [rcx+rcx*4-0x38]; syscall; 
0x0000000007b041: inc dword ptr [rcx+rcx*4-0x3a]; call qword ptr [rbx+0x18]; 
0x000000000402f7: inc dword ptr [rcx+rcx*4-0x3e]; and edx, 0x7fffffff; or edx, esi; je 0x0000000000040250; ret; 
0x00000000036c94: inc dword ptr [rcx+rcx*4-0x40]; pop rbp; pop r12; ret; 
0x0000000012388a: inc dword ptr [rcx+rcx*4-0x40]; pop rbx; pop rbp; ret; 
0x000000000be412: inc dword ptr [rcx+rcx*4-0x40]; pop rbx; ret; 
0x0000000005c1ec: inc dword ptr [rcx+rcx*4-0x40]; ret; 
0x00000000050023: inc dword ptr [rcx-0x46]; or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x00000000072880: inc dword ptr [rcx-0x5]; jg short 0x0000000000072897; test [rbx-0x7c00001b], dh; ret; 
0x000000000529e2: inc dword ptr [rcx-0x77]; ret far; 
0x0000000018f64f: inc dword ptr [rcx-0x7d]; ret far; 
0x0000000005a319: inc dword ptr [rcx-0x7d]; ret; 
0x0000000004dd8c: inc dword ptr [rcx-0x80]; jl short 0x000000000004ddb5; jmp far fword ptr [rdi]; 
0x0000000004de9b: inc dword ptr [rcx-0x80]; jl short 0x000000000004dec4; jmp far fword ptr [rdi]; 
0x000000000d9ac1: inc dword ptr [rcx-0x80]; jl short 0x00000000000d9acd; jmp far fword ptr [rdi]; 
0x0000000014d1d1: inc dword ptr [rcx-0x80]; jl short 0x000000000014d1dd; jmp far fword ptr [rdi]; 
0x00000000120e73: inc dword ptr [rcx-0xa]; ret; 
0x0000000017e91a: inc dword ptr [rcx-0xff3e]; jmp qword ptr [rdx-0x1f]; 
0x00000000122061: inc dword ptr [rcx]; add [rax+0x29], cl; ret; 
0x00000000086181: inc dword ptr [rcx]; je short 0x0000000000086195; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fe9b: inc dword ptr [rcx]; je short 0x000000000008fea0; ret; 
0x0000000006ca2d: inc dword ptr [rcx]; ret far; 
0x0000000006c34e: inc dword ptr [rcx]; ret; 
0x0000000010ee36: inc dword ptr [rdi+0xe773b15]; add [rbx+0x1e7f01fa], al; add rsp, 0x18; ret; 
0x0000000008ebfb: inc dword ptr [rdi+rcx+0x45]; jmp far fword ptr [rax-0xff88afe]; 
0x0000000005e90e: inc dword ptr [rdi+rcx]; xchg [rcx], ah; or [rax], al; add [rcx-0x7d], al; jmp far fword ptr [rax]; 
0x0000000018c387: inc dword ptr [rdx]; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c397: inc dword ptr [rdx]; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a7: inc dword ptr [rdx]; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c377: inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x0000000018cd45: inc dword ptr [rdx]; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce30: inc dword ptr [rdx]; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd5: inc dword ptr [rdx]; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd86: inc dword ptr [rdx]; lea rax, [rdi+rax+0x8]; ret; 
0x0000000015a7f7: inc dword ptr [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017930b: inc eax; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000017457b: inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000b42ba: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000b42b7: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000017099f: inc eax; jne short 0x00000000001709e4; vzeroupper; ret; 
0x000000001709d4: inc eax; jne short 0x0000000000170a20; vzeroupper; ret; 
0x00000000177c5f: inc eax; jne short 0x0000000000177ca4; vzeroupper; ret; 
0x00000000177c94: inc eax; jne short 0x0000000000177ce0; vzeroupper; ret; 
0x00000000040199: inc eax; shr eax, 0x1f; ret; 
0x000000000ff9b8: inc ebx; mov rax, [rip+0xed44f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff928: inc ebx; mov rax, [rip+0xed4df]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe0e0: inc ebx; mov rax, [rip+0xeed27]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b08b3: inc ebx; nop [rax+rax]; mov [rdi], rdx; ret; 
0x0000000010b2b8: inc ebx; nop [rax+rax]; mov eax, 0x1e; syscall; 
0x0000000010aa48: inc ebx; nop [rax+rax]; mov eax, 0x30; syscall; 
0x0000000010a5a8: inc ebx; nop [rax+rax]; mov eax, 0x32; syscall; 
0x000000001230b4: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000084d76: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000099e34: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000014ef94: inc ebx; nop [rax+rax]; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x00000000109818: inc ebx; nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x0000000010b288: inc ebx; nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000084d84: inc ebx; nop [rax+rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000b0934: inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000f997f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb38f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb2cf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x0000000010a15f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e5f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa42f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa48f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f7f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1ef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a27f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2af: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2df: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x000000000fa45f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f004f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000010a34f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102baf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x000000000fa3ff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall; 
0x0000000010aa6f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010a53f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall; 
0x000000000fa57f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fb3bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb2ff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f979f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadbf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d672f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall; 
0x00000000109fdf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7e7f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7eaf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f0f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f6f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall; 
0x0000000010907f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109d9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a18f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000effbf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000effef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f001f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f007f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00af: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00df: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c6f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102c9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109cff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a09f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff5f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x000000001003ff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x0000000010042f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102aaf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000108f3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000109dcf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109dff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000010a30f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; 
0x0000000010549f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x0000000010537f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000109e2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109f4f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109faf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall; 
0x000000001091b0: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall; 
0x000000000c9b80: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x26; syscall; 
0x000000001012d0: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall; 
0x000000000fed60: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall; 
0x000000000f96b0: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000ff070: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall; 
0x00000000109020: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000170b0f: inc ebx; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000b0872: inc ebx; nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x0000000014ef82: inc ebx; nop [rax+rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000084db4: inc ebx; nop [rax+rax]; ret; 
0x000000000e08c8: inc ebx; nop [rax+rax]; ret; 
0x00000000168646: inc ebx; nop [rax+rax]; ret; 
0x0000000010a252: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000f9df2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall; 
0x00000000093a92: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x3; syscall; 
0x0000000010b2e2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall; 
0x000000000fb362: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2a2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a132: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall; 
0x00000000109052: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109d72: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall; 
0x00000000109262: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall; 
0x00000000102c12: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall; 
0x000000001003d2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall; 
0x00000000109ec2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a072: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall; 
0x00000000105412: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall; 
0x00000000105472: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall; 
0x00000000105352: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall; 
0x00000000105502: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f22: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall; 
0x000000000d2e72: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret; 
0x0000000018b641: inc ebx; nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x00000000177d84: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x000000000d21e8: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x00000000084d96: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x0000000017dd09: inc ebx; nop [rax+rax]; xor eax, eax; ret; 
0x000000000fe798: inc ebx; nop [rax+rax]; xor eax, eax; syscall; 
0x000000000a1607: inc ebx; nop [rax]; mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x0000000010975a: inc ebx; nop [rax]; mov eax, 0x11f; syscall; 
0x0000000010987a: inc ebx; nop [rax]; mov eax, 0x131; syscall; 
0x000000000fe7fa: inc ebx; nop [rax]; mov eax, 0x1; syscall; 
0x000000000f968a: inc ebx; nop [rax]; mov eax, 0x89; syscall; 
0x00000000041e0a: inc ebx; nop [rax]; mov eax, [rip+0x1ab3b2]; ret; 
0x0000000010984a: inc ebx; nop [rax]; mov r10, rcx; mov eax, 0x137; syscall; 
0x0000000018b6ba: inc ebx; nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x000000001863b7: inc ebx; nop [rax]; xor eax, eax; ret; 
0x000000000a15fc: inc ebx; xchg ax, ax; mov byte ptr [rdi], 0x0; lea rax, [rdi+rax-0x1]; ret; 
0x0000000018d74c: inc ebx; xchg ax, ax; xor eax, eax; ret; 
0x000000000e091a: inc ebx; xor eax, eax; pop rbx; ret; 
0x0000000008e00d: inc ecx; call qword ptr [rbx]; 
0x00000000170971: inc ecx; jne 0x00000000001708a0; vzeroupper; ret; 
0x00000000177c25: inc ecx; jne 0x0000000000177b40; vzeroupper; ret; 
0x00000000170827: inc ecx; jne short 0x00000000001708a3; vzeroupper; ret; 
0x00000000177acb: inc ecx; jne short 0x0000000000177b43; vzeroupper; ret; 
0x00000000178f06: inc edi; add eax, edi; shr eax, 0x2; vzeroupper; ret; 
0x00000000174256: inc edi; add eax, edi; vzeroupper; ret; 
0x00000000170055: inc edi; add rax, rdi; vzeroupper; ret; 
0x0000000006ecf9: inc edi; and al, 0x40; add [rax], eax; add [rax], al; jmp rax; 
0x00000000108b59: inc esi; add [rax], al; mov rax, r12; pop r12; ret; 
0x00000000100b25: inc esi; call far fword ptr [rax+r9*2-0x73]; 
0x000000000fa8e8: inc esi; jmp far fword ptr [r15]; 
0x00000000100b41: inc esi; jmp qword ptr [rax]; 
0x000000000727e6: inc esi; test [rax], esp; idiv edi; jmp qword ptr [rax]; 
0x000000000b0933: inc r11d; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000b42b9: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000b42b6: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000170054: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000a319e: insb [rdi], dx; adc [rax], al; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000139166: insb [rdi], dx; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000403b9: insb [rdi], dx; and al, 0x8; fadd st, st(0); ret; 
0x00000000040319: insb [rdi], dx; and al, 0x8; fscale; fstp st(1), st; ret; 
0x0000000004028b: insb [rdi], dx; and al, 0x8; fsubrp; ret; 
0x000000000401ba: insb [rdi], dx; and al, 0x8; ret; 
0x000000000402d3: insb [rdi], dx; and al, 0xe8; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040219: insb [rdi], dx; and al, 0xe8; ret; 
0x0000000004111c: insb [rdi], dx; and al, 0xfe; ret; 
0x0000000011e4fe: insb [rdi], dx; bnd jmp qword ptr [rsi-0x77]; 
0x000000000f56fd: insb [rdi], dx; call far fword ptr [rax+0x5a]; 
0x000000000dc9e0: insb [rdi], dx; idiv bh; dec dword ptr [rcx-0x16e7dbbc]; ret far; 
0x0000000013dcc7: insb [rdi], dx; mov eax, 0x1; ret; 
0x000000000b4f14: insb [rdi], dx; or eax, 0xc2f700; add [rax], al; je short 0x00000000000b4ee7; ret; 
0x000000000f5d27: insb [rdi], dx; or eax, [rax]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000067cc0: insb [rdi], dx; ret far; 
0x000000001090e3: insb [rdi], dx; ret; 
0x0000000007fad1: insb [rdi], dx; sar dl, cl; jmp qword ptr [rsi+0x2e]; 
0x000000000d1b43: insd [rdi], dx; adc [rax-0x77], cl; ret; 
0x00000000046102: insd [rdi], dx; add [rax-0x39], cl; ret; 
0x000000000dc61d: insd [rdi], dx; add al, 0x83; call far fword ptr [rbp+0xf]; 
0x000000000d5622: insd [rdi], dx; cmc; jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000724df: insd [rdi], dx; ja short 0x00000000000724e2; add [rax+0x39], cl; ret; 
0x0000000009319f: insd [rdi], dx; jae short 0x000000000009319c; jmp qword ptr [rsi+0x66]; 
0x0000000010a40f: insd [rdi], dx; mov ebp, 0x448bfff7; and al, 0xc; add rsp, 0x28; ret; 
0x00000000083c22: insd [rdi], dx; movzx esi, byte ptr [r15]; lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x00000000085ee1: insd [rdi], dx; or al, 0x0; mov [rbx+0x18], rax; pop rbx; ret; 
0x000000000481e7: insd [rdi], dx; ret; 
0x00000000091795: insd [rdi], dx; sbb [rax-0x75], cl; js short 0x00000000000917a3; call qword ptr [rax]; 
0x0000000007cf1d: insd [rdi], dx; sbb [rax-0x77], cl; ret far; 
0x000000000b664f: insd [rdi], dx; sub cl, [rax+rax]; jne short 0x00000000000b660b; ret; 
0x000000001743d2: insd [rdi], dx; tzcnt eax, eax; vzeroupper; ret; 
0x0000000017ebeb: insd [rdi], dx; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x00000000123466: invd; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000b4d84: iretd; add al, 0x14; add [rcx], al; xor eax, eax; ret; 
0x000000001927da: iretd; add eax, 0x2aee900; idiv edi; nop [rax+rax]; ret; 
0x00000000043b13: iretd; call r13; 
0x0000000008d563: iretd; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000008d51a: iretd; cli; jmp qword ptr [rsi-0x70]; 
0x0000000008d51b: iretd; cli; jmp qword ptr [rsi-0x70]; 
0x000000000aa4f2: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret; 
0x00000000080c86: iretd; cmp rax, rdi; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x000000000f8c4a: iretd; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000000f8d55: iretd; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x0000000012acdd: iretd; fdivp st(7), st; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000170826: iretd; inc ecx; jne short 0x00000000001708a3; vzeroupper; ret; 
0x00000000177aca: iretd; inc ecx; jne short 0x0000000000177b43; vzeroupper; ret; 
0x000000000584cb: iretd; ja short 0x00000000000584b0; mov eax, r8d; ret; 
0x00000000123218: iretd; ja short 0x0000000000123204; mov eax, 0xffffffff; ret; 
0x000000000b453a: iretd; jb 0x00000000000b46a5; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000013cbc3: iretd; jne short 0x000000000013cbb0; ret; 
0x00000000088277: iretd; mov eax, 0xca; syscall; 
0x000000000884b1: iretd; mov eax, ebp; syscall; 
0x000000000a30c2: iretd; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000008e55e: iretd; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x0000000012f3ff: iretd; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000806e2: iretd; ret; 
0x0000000014d107: iretd; sub cl, 0x62; hlt; jmp qword ptr [rsi-0x70]; 
0x00000000108ac1: iretd; sub rsp, 0x8; call rsi; 
0x00000000088fd7: iretd; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000012f3fe: iretq; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000ed1f3: ja 0x000000000002ce7b; movzx ecx, byte ptr [rdx+0x8]; movsxd rcx, [r8+rcx*4]; add rcx, r8; jmp rcx; 
0x000000000389b2: ja 0x0000000000038af0; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx; 
0x0000000004e29e: ja 0x000000000004e3d0; movzx edx, dl; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x0000000005c6b4: ja 0x000000000005c760; lea rcx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000006493a: ja 0x0000000000064ca0; lea rsi, [rip+0x1431b9]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000006bb89: ja 0x000000000006c170; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000070c99: ja 0x0000000000071230; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000075838: ja 0x0000000000075990; lea rcx, [rip+0x1335ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000075e79: ja 0x0000000000075ff0; lea rcx, [rip+0x1331ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b68b: ja 0x000000000008b78f; lea rcx, [rip+0x11dde8]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008bb0f: ja 0x000000000008b78f; lea rdx, [rip+0x11d9f4]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c375: ja 0x000000000008c46f; lea rcx, [rip+0x11d2be]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c807: ja 0x000000000008c46f; lea rdx, [rip+0x11cebc]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d064: ja 0x000000000008d2d6; lea rcx, [rip+0x11c807]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008d742: ja 0x000000000008d2d6; lea rdx, [rip+0x11c1b9]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008e2b2: ja 0x000000000008e1ec; lea rdx, [rip+0x11b959]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b4af2: ja 0x00000000000b4b89; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b4d99: ja 0x00000000000b4e70; lea rdx, [rip+0xf579a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000c599d: ja 0x00000000000c5a80; add rax, rdi; add rax, rcx; ret; 
0x000000000d8aa6: ja 0x00000000000d8bf0; lea rdx, [rip+0xd28e1]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000dbb5a: ja 0x00000000000dbd84; lea rdx, [rip+0xcfc6d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dd6fa: ja 0x00000000000dd969; lea rdx, [rip+0xce23d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000ecad9: ja 0x00000000000eccc0; movzx edx, byte ptr [r15+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx; 
0x000000000f5983: ja 0x00000000000f5b06; lea rdx, [rip+0xb6eb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f9a3d: ja 0x00000000000f9ac8; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9b98: ja 0x00000000000f9c20; add rsp, 0x78; ret; 
0x00000000174bb9: ja 0x0000000000174c50; je short 0x0000000000174c40; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001752d9: ja 0x0000000000175430; je 0x0000000000175420; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001756c4: ja 0x00000000001754d0; je 0x00000000001754c0; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x00000000175959: ja 0x00000000001759f0; je short 0x00000000001759e0; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001763b4: ja 0x0000000000176080; je 0x0000000000176070; vzeroupper; ret; 
0x00000000176290: ja 0x0000000000176160; je 0x0000000000176150; vzeroupper; ret; 
0x000000001770f4: ja 0x0000000000176db0; je 0x0000000000176da0; mov rax, rdi; vzeroupper; ret; 
0x00000000176fc0: ja 0x0000000000176e90; je 0x0000000000176e80; vzeroupper; ret; 
0x00000000187659: ja 0x00000000001876f0; je short 0x00000000001876e0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x00000000188206: ja 0x0000000000187e60; je 0x0000000000187e50; mov rax, rdi; ret; 
0x000000001880c0: ja 0x0000000000187f70; je 0x0000000000187f60; ret; 
0x00000000188839: ja 0x00000000001888d0; je short 0x00000000001888c0; mov byte ptr [rdi], 0x0; ret; 
0x00000000189769: ja 0x0000000000189800; je short 0x00000000001897f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018a0e9: ja 0x000000000018a240; je 0x000000000018a230; mov byte ptr [rdi], 0x0; ret; 
0x0000000018a536: ja 0x000000000018a300; je 0x000000000018a2f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018b636: ja 0x000000000018b2c0; je 0x000000000018b2b0; ret; 
0x0000000018b4f0: ja 0x000000000018b3a0; je 0x000000000018b390; ret; 
0x0000000018b90a: ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce6d: ja 0x000000000018cc27; mov eax, esi; ret; 
0x0000000018f42f: ja 0x000000000018f690; lea r9, [rip+0x2b878]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x0000000018f5c6: ja 0x000000000018f777; lea rcx, [rip+0x2b74d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000018ffea: ja 0x000000000019009c; lea rdx, [rip+0x2ad59]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003a3b1: ja short 0x000000000003a3c3; lea rdx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x0000000003afaa: ja short 0x000000000003afd3; lea rdx, [rip+0x167fad]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000041692: ja short 0x0000000000041698; ret; 
0x000000000416ce: ja short 0x0000000000041720; ret; 
0x00000000044a39: ja short 0x0000000000044a90; ret; 
0x00000000050dae: ja short 0x0000000000050df9; shr ecx, cl; mov [rdi], r9; ret; 
0x000000000554ab: ja short 0x0000000000055465; cmp r8, rdi; cmovb r8, rdi; mov rax, r8; ret; 
0x0000000005570c: ja short 0x00000000000556e0; mov rax, r8; ret; 
0x000000000584cc: ja short 0x00000000000584b0; mov eax, r8d; ret; 
0x0000000005c15d: ja short 0x000000000005c160; ret; 
0x0000000005c190: ja short 0x000000000005c198; ret; 
0x0000000005c76f: ja short 0x000000000005c79b; lea rcx, [rip+0x14aa70]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000065033: ja short 0x000000000006509c; lea rdi, [rip+0x142d80]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x000000000724e0: ja short 0x00000000000724e2; add [rax+0x39], cl; ret; 
0x00000000075608: ja short 0x0000000000075618; movsxd rdi, edi; lea rax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x00000000075735: ja short 0x0000000000075768; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000075d8e: ja short 0x0000000000075da0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000075e23: ja short 0x0000000000075e44; lea rsi, [rip+0x13314c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000007b75c: ja short 0x000000000007b750; lea eax, [rdx+rdi]; ret; 
0x00000000082584: ja short 0x00000000000825b0; movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000008437c: ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x00000000086d50: ja short 0x0000000000086d58; ret; 
0x000000000879f2: ja short 0x0000000000087a04; xor eax, eax; ret; 
0x00000000087aa7: ja short 0x0000000000087aad; ret; 
0x00000000087bac: ja short 0x0000000000087bb0; ret; 
0x00000000087bbf: ja short 0x0000000000087bd9; ret; 
0x00000000087bec: ja short 0x0000000000087bf0; ret; 
0x00000000087bd8: ja short 0x0000000000087bf2; ret; 
0x00000000087bf2: ja short 0x0000000000087c14; xor eax, eax; ret; 
0x00000000087c37: ja short 0x0000000000087c45; xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000087ed3: ja short 0x0000000000087ee0; mov [rdi], esi; xor eax, eax; ret; 
0x0000000008c1bb: ja short 0x000000000008c1cd; lea rcx, [rip+0x11d3e4]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008d8e6: ja short 0x000000000008d900; lea rdx, [rip+0x11c0b1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008de92: ja short 0x000000000008debc; lea rdx, [rip+0x11bc15]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008df1c: ja short 0x000000000008df30; lea rdx, [rip+0x11bc23]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008e750: ja short 0x000000000008e758; ret; 
0x0000000008fc73: ja short 0x000000000008fc80; mov [rdi], esi; xor eax, eax; ret; 
0x0000000008fc96: ja short 0x000000000008fc9c; xor eax, eax; ret; 
0x0000000008fc93: ja short 0x000000000008fca0; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x000000000906a6: ja short 0x00000000000906b0; ret; 
0x00000000090a97: ja short 0x0000000000090aa0; xor eax, eax; ret; 
0x00000000091215: ja short 0x00000000000911d7; adc eax, 0xeea2e800; add eax, 0x70058900; rcl byte ptr [rip-0x3b7cb800], 0x8; ret; 
0x00000000093aad: ja short 0x0000000000093ab0; ret; 
0x00000000093ebb: ja short 0x0000000000093ee8; ret; 
0x00000000093f6d: ja short 0x0000000000093f70; ret; 
0x00000000093fac: ja short 0x0000000000094018; ret; 
0x0000000009406c: ja short 0x00000000000940d0; ret; 
0x00000000094118: ja short 0x0000000000094120; mov eax, r8d; ret; 
0x0000000009451e: ja short 0x0000000000094528; ret; 
0x0000000009456e: ja short 0x0000000000094578; ret; 
0x000000000945c1: ja short 0x00000000000945c8; ret; 
0x000000000947f5: ja short 0x0000000000094782; adc eax, 0x100; add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x00000000099bd9: ja short 0x0000000000099c30; lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009d95d: ja short 0x000000000009d938; pop rbx; pop rbp; pop r12; ret; 
0x000000000a18b4: ja short 0x00000000000a18c5; movsxd rdi, edi; lea rax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18d4: ja short 0x00000000000a18e5; movsxd rdi, edi; lea rax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000af8a7: ja short 0x00000000000af8ab; ret; 
0x000000000af8c3: ja short 0x00000000000af8c9; mov [rdi], ecx; ret; 
0x000000000af904: ja short 0x00000000000af90e; mov [rdi], rcx; ret; 
0x000000000af989: ja short 0x00000000000af99b; ret; 
0x000000000af9df: ja short 0x00000000000af9f5; ret; 
0x000000000afa61: ja short 0x00000000000afa7b; ret; 
0x000000000b0107: ja short 0x00000000000b010b; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b02c9: ja short 0x00000000000b02db; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x000000000b034f: ja short 0x00000000000b0365; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b03d1: ja short 0x00000000000b03eb; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000b0a67: ja short 0x00000000000b0a89; sub r8, 0x10; jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x000000000b0ea7: ja short 0x00000000000b0eab; lea rax, [rdi+0x2]; ret; 
0x000000000b0ec3: ja short 0x00000000000b0ec9; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000b0f14: ja short 0x00000000000b0f1e; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000b0ff9: ja short 0x00000000000b100b; lea rax, [rdi+0x10]; ret; 
0x000000000b106f: ja short 0x00000000000b1085; lea rax, [rdi+0x14]; ret; 
0x000000000b10f1: ja short 0x00000000000b110b; lea rax, [rdi+0x18]; ret; 
0x000000000b2b57: ja short 0x00000000000b2b5b; ret; 
0x000000000b2b73: ja short 0x00000000000b2b79; mov [rdi], ecx; ret; 
0x000000000b2bb4: ja short 0x00000000000b2bbe; mov [rdi], rcx; ret; 
0x000000000b2c39: ja short 0x00000000000b2c4b; ret; 
0x000000000b2c8f: ja short 0x00000000000b2ca5; ret; 
0x000000000b2d11: ja short 0x00000000000b2d2b; ret; 
0x000000000b3627: ja short 0x00000000000b362b; ret; 
0x000000000b3643: ja short 0x00000000000b3649; mov [rdi], ecx; ret; 
0x000000000b3684: ja short 0x00000000000b368e; mov [rdi], rcx; ret; 
0x000000000b3709: ja short 0x00000000000b371b; ret; 
0x000000000b375f: ja short 0x00000000000b3775; ret; 
0x000000000b37e1: ja short 0x00000000000b37fb; ret; 
0x000000000b4554: ja short 0x00000000000b457c; jb short 0x00000000000b455d; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000000b471d: ja short 0x00000000000b473f; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000b4b72: ja short 0x00000000000b4b80; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b4b95: ja short 0x00000000000b4ba5; movdqu [rdi+rdx-0x20], xmm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x000000000b4c22: ja short 0x00000000000b4c39; jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x000000000c0d39: ja short 0x00000000000c0d48; mov [rbx], rsi; add rsp, 0x10; pop rbx; ret; 
0x000000000c5a69: ja short 0x00000000000c5a80; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000c72ad: ja short 0x00000000000c72b0; ret; 
0x000000000c73c2: ja short 0x00000000000c73c8; ret; 
0x000000000c7542: ja short 0x00000000000c7548; ret; 
0x000000000c91a7: ja short 0x00000000000c91a4; dec dword ptr [rax+0x39]; ret; 
0x000000000c9b6d: ja short 0x00000000000c9b70; ret; 
0x000000000c9b9d: ja short 0x00000000000c9ba0; ret; 
0x000000000d2195: ja short 0x00000000000d2163; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000d2247: ja short 0x00000000000d2250; ret; 
0x000000000d2238: ja short 0x00000000000d2268; mov eax, 0xe3; syscall; 
0x000000000d2e5d: ja short 0x00000000000d2e60; ret; 
0x000000000d3d89: ja short 0x00000000000d3db8; ret; 
0x000000000d67ec: ja short 0x00000000000d6848; ret; 
0x000000000d689f: ja short 0x00000000000d6900; ret; 
0x000000000d69c9: ja short 0x00000000000d6a00; ret; 
0x000000000d6f82: ja short 0x00000000000d6fa0; hlt; mov eax, esi; syscall; 
0x000000000d7d39: ja short 0x00000000000d7d60; ret; 
0x000000000d7d99: ja short 0x00000000000d7dc0; ret; 
0x000000000d7fc9: ja short 0x00000000000d8000; ret; 
0x000000000d802d: ja short 0x00000000000d802f; add [rax], al; syscall; 
0x000000000d8039: ja short 0x00000000000d8070; ret; 
0x000000000dc028: ja short 0x00000000000dc050; lea rdx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000eebad: ja short 0x00000000000eebc4; lea rdx, [rip+0xbd52a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000f00fd: ja short 0x00000000000f0100; ret; 
0x000000000f019d: ja short 0x00000000000f01a0; ret; 
0x000000000f01eb: ja short 0x00000000000f01f3; setne al; movzx eax, al; ret; 
0x000000000f5b9f: ja short 0x00000000000f5bb0; movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax; 
0x000000000f5d21: ja short 0x00000000000f5d33; lea rcx, [rip+0xb6c56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000f6f75: ja short 0x00000000000f6f90; movzx eax, al; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000f7f9c: ja short 0x00000000000f7ff8; ret; 
0x000000000f804c: ja short 0x00000000000f80a8; ret; 
0x000000000f853a: ja short 0x00000000000f85a4; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f85e1: ja short 0x00000000000f85e7; xor eax, eax; ret; 
0x000000000f858e: ja short 0x00000000000f85f8; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f89d1: ja short 0x00000000000f89f0; mov eax, [rcx]; movsxd rax, [r13+rax*4]; add rax, r13; jmp rax; 
0x000000000f8d5a: ja short 0x00000000000f8d5c; add [rax], al; syscall; 
0x000000000f8f08: ja short 0x00000000000f8f12; mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000f8fdd: ja short 0x00000000000f9012; jmp qword ptr [rsi+0x2e]; 
0x000000000f90f0: ja short 0x00000000000f90f8; ret; 
0x000000000f91f8: ja short 0x00000000000f91c6; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000f930f: ja short 0x00000000000f9318; xor eax, eax; ret; 
0x000000000f9657: ja short 0x00000000000f9660; ret; 
0x000000000f969d: ja short 0x00000000000f96a0; ret; 
0x000000000f96cd: ja short 0x00000000000f96d0; ret; 
0x000000000f9ca4: ja short 0x00000000000f9d00; ret; 
0x000000000f9d49: ja short 0x00000000000f9da0; ret; 
0x000000000f9ddd: ja short 0x00000000000f9de0; ret; 
0x000000000f9e0d: ja short 0x00000000000f9e10; ret; 
0x000000000fa369: ja short 0x00000000000fa3b0; ret; 
0x000000000fa4e9: ja short 0x00000000000fa530; ret; 
0x000000000fd883: ja short 0x00000000000fd890; mov [rsi+0x66], dx; xor eax, eax; ret; 
0x000000000fda09: ja short 0x00000000000fda60; ret; 
0x000000000fdad1: ja short 0x00000000000fdb38; add rsp, 0x30; pop r13; ret; 
0x000000000fdfdc: ja short 0x00000000000fe050; ret; 
0x000000000fe090: ja short 0x00000000000fe098; ret; 
0x000000000fe0c5: ja short 0x00000000000fe0d0; ret; 
0x000000000fe45c: ja short 0x00000000000fe4b8; ret; 
0x000000000fe50c: ja short 0x00000000000fe568; ret; 
0x000000000fe5ad: ja short 0x00000000000fe5b0; ret; 
0x000000000fe603: ja short 0x00000000000fe628; ret; 
0x000000000fe662: ja short 0x00000000000fe680; ret; 
0x000000000fe6ea: ja short 0x00000000000fe718; ret; 
0x000000000fe758: ja short 0x00000000000fe788; ret; 
0x000000000fe7aa: ja short 0x00000000000fe7b0; ret; 
0x000000000fe7e0: ja short 0x00000000000fe7e8; ret; 
0x000000000fe80d: ja short 0x00000000000fe810; ret; 
0x000000000fe883: ja short 0x00000000000fe88d; ret; 
0x000000000fe8cc: ja short 0x00000000000fe8d6; ret; 
0x000000000fe9e9: ja short 0x00000000000fe9f0; ret; 
0x000000000feb33: ja short 0x00000000000feb88; ret; 
0x000000000fed06: ja short 0x00000000000fed10; ret; 
0x000000000fed47: ja short 0x00000000000fed50; ret; 
0x000000000fed7d: ja short 0x00000000000fed80; ret; 
0x000000000ff269: ja short 0x00000000000ff2c0; ret; 
0x000000000ff309: ja short 0x00000000000ff360; ret; 
0x000000000ff3af: ja short 0x00000000000ff410; ret; 
0x000000000ff45f: ja short 0x00000000000ff4c0; ret; 
0x000000000ff7e9: ja short 0x00000000000ff820; ret; 
0x000000000ff859: ja short 0x00000000000ff890; ret; 
0x000000000ff8da: ja short 0x00000000000ff918; ret; 
0x000000000ff95e: ja short 0x00000000000ff960; add [rax], al; syscall; 
0x000000000ff96a: ja short 0x00000000000ff9a8; ret; 
0x000000000ffe8e: ja short 0x00000000000fff08; add rsp, 0x50; pop r12; ret; 
0x000000000fffb9: ja short 0x0000000000100000; ret; 
0x00000000100079: ja short 0x00000000001000c0; ret; 
0x00000000100139: ja short 0x0000000000100140; ret; 
0x000000001012bd: ja short 0x00000000001012c0; ret; 
0x000000001012ed: ja short 0x00000000001012f0; ret; 
0x00000000101369: ja short 0x0000000000101373; ret; 
0x00000000102a08: ja short 0x0000000000102a70; pop rbx; pop rbp; ret; 
0x00000000102b09: ja short 0x0000000000102b60; ret; 
0x00000000104e34: ja short 0x0000000000104e40; ret; 
0x0000000010900d: ja short 0x0000000000109010; ret; 
0x0000000010903d: ja short 0x0000000000109040; ret; 
0x000000001090e2: ja short 0x0000000000109150; ret; 
0x00000000109195: ja short 0x00000000001091a0; ret; 
0x000000001092bc: ja short 0x0000000000109318; ret; 
0x0000000010936c: ja short 0x00000000001093c8; ret; 
0x0000000010941c: ja short 0x0000000000109478; ret; 
0x000000001094cc: ja short 0x0000000000109540; ret; 
0x00000000109589: ja short 0x00000000001095e0; ret; 
0x0000000010964d: ja short 0x0000000000109688; mov r8d, eax; mov eax, r8d; ret; 
0x000000001096b5: ja short 0x00000000001096c0; ret; 
0x0000000010976d: ja short 0x0000000000109770; ret; 
0x000000001097a0: ja short 0x00000000001097a8; ret; 
0x00000000109800: ja short 0x0000000000109808; ret; 
0x00000000109830: ja short 0x0000000000109838; ret; 
0x00000000109860: ja short 0x0000000000109868; ret; 
0x0000000010988d: ja short 0x0000000000109890; ret; 
0x000000001098cc: ja short 0x00000000001098d0; ret; 
0x000000001098bd: ja short 0x00000000001098e8; mov eax, 0x4; syscall; 
0x0000000010991b: ja short 0x0000000000109920; ret; 
0x0000000010990c: ja short 0x0000000000109938; mov eax, 0x5; syscall; 
0x0000000010996c: ja short 0x0000000000109970; ret; 
0x0000000010995d: ja short 0x0000000000109988; mov eax, 0x6; syscall; 
0x000000001099c1: ja short 0x00000000001099c8; ret; 
0x000000001099b2: ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x0000000010a3c9: ja short 0x000000000010a420; ret; 
0x0000000010a499: ja short 0x000000000010a4f0; ret; 
0x0000000010a590: ja short 0x000000000010a598; ret; 
0x0000000010a602: ja short 0x000000000010a668; ret; 
0x0000000010a6bc: ja short 0x000000000010a730; ret; 
0x0000000010a779: ja short 0x000000000010a7d0; ret; 
0x0000000010a822: ja short 0x000000000010a888; ret; 
0x0000000010a8d9: ja short 0x000000000010a930; ret; 
0x0000000010a97c: ja short 0x000000000010a9f0; ret; 
0x0000000010aa30: ja short 0x000000000010aa38; ret; 
0x0000000010ad1c: ja short 0x000000000010ad78; ret; 
0x0000000010adcc: ja short 0x000000000010ae30; ret; 
0x0000000010ae7c: ja short 0x000000000010aed8; ret; 
0x0000000010af19: ja short 0x000000000010af28; movzx edi, di; lea rax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x0000000010afdc: ja short 0x000000000010b038; ret; 
0x0000000010b08c: ja short 0x000000000010b0f8; ret; 
0x0000000010b13d: ja short 0x000000000010b140; ret; 
0x0000000010b17d: ja short 0x000000000010b1a0; ret; 
0x0000000010b1dd: ja short 0x000000000010b1e0; ret; 
0x0000000010b24e: ja short 0x000000000010b278; ret; 
0x0000000010b2a0: ja short 0x000000000010b2a8; ret; 
0x0000000010b2cd: ja short 0x000000000010b2d0; ret; 
0x0000000010b2fd: ja short 0x000000000010b300; ret; 
0x0000000010b330: ja short 0x000000000010b338; ret; 
0x0000000010b364: ja short 0x000000000010b388; mov eax, 0x1f; syscall; 
0x0000000010b373: ja short 0x000000000010b3a8; ret; 
0x0000000010ee3a: ja short 0x000000000010ee4a; add [rbx+0x1e7f01fa], al; add rsp, 0x18; ret; 
0x00000000116c9f: ja short 0x0000000000116ca8; ret; 
0x00000000116c93: ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x00000000117c47: ja short 0x0000000000117c51; mov rax, rdi; sar rax, 0x6; ret; 
0x0000000011f490: ja short 0x000000000011f49f; add [rbx+0x507f01f8], al; add rsp, 0x8; ret; 
0x00000000122f62: ja short 0x0000000000122f65; ret; 
0x00000000123219: ja short 0x0000000000123204; mov eax, 0xffffffff; ret; 
0x00000000127f55: ja short 0x0000000000127f68; movzx eax, al; movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x00000000138d71: ja short 0x0000000000138dbb; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000013b4b5: ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000013b488: ja short 0x000000000013b4a0; sub rcx, rsi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x00000000145752: ja short 0x000000000014576c; mov eax, r8d; ret; 
0x0000000014578a: ja short 0x00000000001457a4; mov rax, r8; ret; 
0x000000001458e3: ja short 0x00000000001458fd; mov [rdi+0x28], edx; ret; 
0x000000001458df: ja short 0x0000000000145901; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000145e1f: ja short 0x0000000000145e39; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x0000000014a4cd: ja short 0x000000000014a4e0; cmp dx, cx; sete al; ret; 
0x0000000014eb25: ja short 0x000000000014eb30; ret; 
0x00000000152694: ja short 0x000000000015269c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152746: ja short 0x000000000015274e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016fe78: ja short 0x000000000016fe3d; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000170012: ja short 0x000000000016ffd7; xor eax, eax; ret; 
0x000000001701b3: ja short 0x0000000000170178; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000170654: ja short 0x0000000000170619; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000170664: ja short 0x0000000000170629; nop [rax+rax]; xor eax, eax; ret; 
0x00000000173c33: ja short 0x0000000000173bf8; xor eax, eax; vzeroupper; ret; 
0x00000000173dc3: ja short 0x0000000000173d88; xor eax, eax; vzeroupper; ret; 
0x000000001743d9: ja short 0x000000000017439e; xor eax, eax; ret; 
0x00000000174582: ja short 0x0000000000174547; mov rax, r8; vzeroupper; ret; 
0x00000000174626: ja short 0x00000000001745eb; mov rax, r8; vzeroupper; ret; 
0x000000001756d5: ja short 0x000000000017569a; nop [rax+rax]; vzeroupper; ret; 
0x0000000017614a: ja short 0x000000000017610f; nop [rax]; mov [rdi], dl; vzeroupper; ret; 
0x00000000176154: ja short 0x0000000000176119; nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x00000000176e7e: ja short 0x0000000000176e43; mov [rdi], dl; vzeroupper; ret; 
0x00000000176e84: ja short 0x0000000000176e49; nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x00000000177105: ja short 0x00000000001770ca; nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000177239: ja short 0x0000000000177279; jb short 0x0000000000177242; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000017746b: ja short 0x00000000001774ad; vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret; 
0x000000001778f9: ja short 0x0000000000177910; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x00000000177899: ja short 0x0000000000177919; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x00000000177929: ja short 0x000000000017793b; vmovdqu [rdi+rdx-0x40], ymm0; vmovdqu [rdi+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001779bf: ja short 0x0000000000177984; vmovdqu [rax+rdx-0x10], xmm0; vmovdqu [rax], xmm0; vzeroupper; ret; 
0x000000001779cd: ja short 0x0000000000177992; mov [rax+rdx-0x8], rcx; mov [rax], rcx; vzeroupper; ret; 
0x000000001779d9: ja short 0x000000000017799e; mov [rax+rdx-0x4], ecx; mov [rax], ecx; vzeroupper; ret; 
0x000000001779e3: ja short 0x00000000001779a8; mov [rax+rdx-0x2], cx; mov [rax], cx; vzeroupper; ret; 
0x000000001779b7: ja short 0x00000000001779e5; jb short 0x00000000001779bd; mov [rax], cl; vzeroupper; ret; 
0x00000000177e55: ja short 0x0000000000177e1a; xor eax, eax; ret; 
0x00000000178013: ja short 0x0000000000177fd8; nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x00000000178ab2: ja short 0x0000000000178a77; xor eax, eax; vzeroupper; ret; 
0x00000000178c52: ja short 0x0000000000178c17; xor eax, eax; vzeroupper; ret; 
0x00000000178e9b: ja short 0x0000000000178e60; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000179100: ja short 0x00000000001790c5; xor eax, eax; ret; 
0x00000000179316: ja short 0x00000000001792db; mov rax, r8; vzeroupper; ret; 
0x000000001793ca: ja short 0x000000000017938f; mov rax, r8; vzeroupper; ret; 
0x00000000179885: ja short 0x000000000017988a; add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017be63: ja short 0x000000000017be5e; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017e48a: ja short 0x000000000017e4ec; jb short 0x000000000017e493; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000017e756: ja short 0x000000000017e75a; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [r11], zmm24; ret; 
0x0000000017ec3a: ja short 0x000000000017ec50; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ebea: ja short 0x000000000017ec59; vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017ec6d: ja short 0x000000000017ec80; vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x0000000017ed4d: ja short 0x000000000017ed82; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000017ee33: ja short 0x000000000017edf8; vzeroupper; ret; 
0x0000000017f145: ja short 0x000000000017f10a; vzeroupper; ret; 
0x0000000017f55e: ja short 0x000000000017f523; vzeroupper; ret; 
0x0000000017f5a9: ja short 0x000000000017f5f3; mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x0000000017f5c2: ja short 0x000000000017f603; jb short 0x000000000017f5cb; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000017fd10: ja short 0x000000000017fcd5; vzeroupper; ret; 
0x0000000018005e: ja short 0x0000000000180023; vzeroupper; ret; 
0x00000000180187: ja short 0x000000000018014c; vzeroupper; ret; 
0x00000000180514: ja short 0x00000000001804d9; vzeroupper; ret; 
0x00000000180567: ja short 0x000000000018052c; vzeroupper; ret; 
0x00000000180b89: ja short 0x0000000000180b4e; vzeroupper; ret; 
0x00000000180e12: ja short 0x0000000000180dd7; vzeroupper; ret; 
0x00000000181295: ja short 0x000000000018125a; vzeroupper; ret; 
0x00000000181e6f: ja short 0x0000000000181e34; vzeroupper; ret; 
0x0000000018221f: ja short 0x00000000001821e4; vzeroupper; ret; 
0x000000001824c5: ja short 0x000000000018248a; vzeroupper; ret; 
0x00000000182adf: ja short 0x0000000000182aa4; vzeroupper; ret; 
0x00000000182f77: ja short 0x0000000000182f3c; vzeroupper; ret; 
0x0000000018378d: ja short 0x0000000000183752; vzeroupper; ret; 
0x00000000184090: ja short 0x0000000000184055; vzeroupper; ret; 
0x00000000184200: ja short 0x00000000001841c5; vzeroupper; ret; 
0x00000000184503: ja short 0x00000000001844c8; vzeroupper; ret; 
0x00000000184564: ja short 0x0000000000184529; vzeroupper; ret; 
0x00000000184b48: ja short 0x0000000000184b0d; vzeroupper; ret; 
0x00000000184bc4: ja short 0x0000000000184b89; vzeroupper; ret; 
0x000000001853d3: ja short 0x0000000000185398; vzeroupper; ret; 
0x00000000185555: ja short 0x000000000018551a; vzeroupper; ret; 
0x00000000185696: ja short 0x000000000018565b; vzeroupper; ret; 
0x000000001859da: ja short 0x000000000018599f; vzeroupper; ret; 
0x0000000018656e: ja short 0x00000000001865b3; jb short 0x0000000000186577; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000018680d: ja short 0x0000000000186811; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [r11], ymm24; ret; 
0x00000000187096: ja short 0x00000000001870b0; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x00000000187046: ja short 0x00000000001870b9; vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x000000001870cd: ja short 0x00000000001870e0; vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x000000001871a8: ja short 0x00000000001871ce; jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x0000000018b540: ja short 0x000000000018b544; sub r8, 0x20; jb 0x000000000018b125; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x00000000192412: ja short 0x000000000019245c; add esp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000064cd7: jae 0x00000000000649d7; lea rdx, [rip+0x143028]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000006c549: jae 0x000000000006ce10; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000007ccb8: jae 0x000000000007cfa0; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007c9cc: jae 0x000000000007d0b0; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x00000000080dc2: jae 0x0000000000080eb0; mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x000000000811dd: jae 0x00000000000812b0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x00000000081698: jae 0x00000000000818d0; mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x000000000815c4: jae 0x00000000000818e0; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000081464: jae 0x0000000000081918; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000082b97: jae 0x0000000000082cd0; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000001599f5: jae 0x0000000000159a90; lea r11, [rip+0x60cfe]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001880b6: jae 0x0000000000187f80; cmp r8d, 0x1; ja 0x0000000000187f70; je 0x0000000000187f60; ret; 
0x0000000018a5cc: jae 0x000000000018aa80; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000018b62c: jae 0x000000000018b2d0; cmp r8d, 0x1; ja 0x000000000018b2c0; je 0x000000000018b2b0; ret; 
0x0000000018b4e6: jae 0x000000000018b3b0; cmp r8d, 0x1; ja 0x000000000018b3a0; je 0x000000000018b390; ret; 
0x0000000007e335: jae 0x000000003586e534; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007e3f5: jae 0x000000003586e5f4; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000407d1: jae short 0x00000000000407f0; mov rax, [rip+0x1ac636]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000040aef: jae short 0x0000000000040b08; mov rax, [rip+0x1ac318]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000041189: jae short 0x00000000000411cb; xor eax, eax; pop rbx; ret; 
0x000000000411a8: jae short 0x00000000000411ea; pop rbx; ret; 
0x0000000004165d: jae short 0x0000000000041660; ret; 
0x00000000041aad: jae short 0x0000000000041ab0; ret; 
0x000000000436cd: jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x00000000050037: jae short 0x000000000005003c; xor eax, eax; ret; 
0x00000000050ea3: jae short 0x0000000000050e98; mov rax, rdx; ret; 
0x00000000055684: jae short 0x0000000000055668; mov rax, r8; ret; 
0x00000000079563: jae short 0x0000000000079570; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x0000000007969d: jae short 0x00000000000796b0; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000079f29: jae short 0x0000000000079f40; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000007a090: jae short 0x000000000007a0a0; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000007b9bc: jae short 0x000000000007b9c1; mov r8d, [rax]; mov eax, r8d; ret; 
0x0000000007c335: jae short 0x000000000007c347; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000007dcbd: jae short 0x000000000007dcff; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000007dd8c: jae short 0x000000000007dd96; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x00000000080748: jae short 0x0000000000080760; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000080782: jae short 0x0000000000080790; lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000080e44: jae short 0x0000000000080ec0; sub rsi, rdx; mov rdi, rbx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x00000000081ec8: jae short 0x0000000000081ed0; movzx eax, byte ptr [rax]; ret; 
0x00000000084eed: jae short 0x0000000000084f10; movzx eax, byte ptr [rax]; ret; 
0x0000000008721c: jae short 0x000000000008722e; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x000000000931a0: jae short 0x000000000009319c; jmp qword ptr [rsi+0x66]; 
0x0000000009a266: jae short 0x000000000009a270; pop rbx; pop rbp; pop r12; ret; 
0x000000000c4aac: jae short 0x00000000000c4af6; add eax, edi; ret; 
0x000000000d671d: jae short 0x00000000000d6720; ret; 
0x000000000d693d: jae short 0x00000000000d6940; ret; 
0x000000000d6f3e: jae short 0x00000000000d6f41; ret; 
0x000000000d737d: jae short 0x00000000000d7380; ret; 
0x000000000d7cf1: jae short 0x00000000000d7cf3; add [rax], al; syscall; 
0x000000000d7cfd: jae short 0x00000000000d7d00; ret; 
0x000000000d7e6d: jae short 0x00000000000d7e70; ret; 
0x000000000d7e9d: jae short 0x00000000000d7ea0; ret; 
0x000000000d7efd: jae short 0x00000000000d7f00; ret; 
0x000000000d7f2d: jae short 0x00000000000d7f30; ret; 
0x000000000d7f5d: jae short 0x00000000000d7f60; ret; 
0x000000000d7f8d: jae short 0x00000000000d7f90; ret; 
0x000000000effad: jae short 0x00000000000effb0; ret; 
0x000000000effdd: jae short 0x00000000000effe0; ret; 
0x000000000f000d: jae short 0x00000000000f0010; ret; 
0x000000000f003d: jae short 0x00000000000f0040; ret; 
0x000000000f006d: jae short 0x00000000000f0070; ret; 
0x000000000f009d: jae short 0x00000000000f00a0; ret; 
0x000000000f00cd: jae short 0x00000000000f00d0; ret; 
0x000000000f978d: jae short 0x00000000000f9790; ret; 
0x000000000f97bd: jae short 0x00000000000f97c0; ret; 
0x000000000f996d: jae short 0x00000000000f9970; ret; 
0x000000000f999d: jae short 0x00000000000f99a0; ret; 
0x000000000fa21d: jae short 0x00000000000fa220; ret; 
0x000000000fa3ed: jae short 0x00000000000fa3f0; ret; 
0x000000000fa41d: jae short 0x00000000000fa420; ret; 
0x000000000fa44d: jae short 0x00000000000fa450; ret; 
0x000000000fa47d: jae short 0x00000000000fa480; ret; 
0x000000000fa4ad: jae short 0x00000000000fa4b0; ret; 
0x000000000fa56d: jae short 0x00000000000fa570; ret; 
0x000000000fa59d: jae short 0x00000000000fa5a0; ret; 
0x000000000fadad: jae short 0x00000000000fadb0; ret; 
0x000000000faddd: jae short 0x00000000000fade0; ret; 
0x000000000fae0d: jae short 0x00000000000fae10; ret; 
0x000000000fae40: jae short 0x00000000000fae43; ret; 
0x000000000fb25d: jae short 0x00000000000fb260; ret; 
0x000000000fb290: jae short 0x00000000000fb293; ret; 
0x000000000fb2bd: jae short 0x00000000000fb2c0; ret; 
0x000000000fb2ed: jae short 0x00000000000fb2f0; ret; 
0x000000000fb31d: jae short 0x00000000000fb320; ret; 
0x000000000fb350: jae short 0x00000000000fb353; ret; 
0x000000000fb37d: jae short 0x00000000000fb380; ret; 
0x000000000fb3ad: jae short 0x00000000000fb3b0; ret; 
0x000000000fb3dd: jae short 0x00000000000fb3e0; ret; 
0x000000000fdfa0: jae short 0x00000000000fdfa3; ret; 
0x000000000ff08d: jae short 0x00000000000ff090; ret; 
0x000000000ff22d: jae short 0x00000000000ff230; ret; 
0x000000000ffb4d: jae short 0x00000000000ffb50; ret; 
0x000000000ffc5d: jae short 0x00000000000ffc60; ret; 
0x000000000fff4d: jae short 0x00000000000fff50; ret; 
0x000000000fff7d: jae short 0x00000000000fff80; ret; 
0x0000000010003d: jae short 0x0000000000100040; ret; 
0x000000001000fd: jae short 0x0000000000100100; ret; 
0x000000001003ed: jae short 0x00000000001003f0; ret; 
0x0000000010041d: jae short 0x0000000000100420; ret; 
0x0000000010044d: jae short 0x0000000000100450; ret; 
0x0000000010287f: jae short 0x0000000000102882; ret; 
0x00000000102a9d: jae short 0x0000000000102aa0; ret; 
0x00000000102acd: jae short 0x0000000000102ad0; ret; 
0x00000000102b9d: jae short 0x0000000000102ba0; ret; 
0x00000000102bcd: jae short 0x0000000000102bd0; ret; 
0x00000000102c00: jae short 0x0000000000102c03; ret; 
0x00000000102c2d: jae short 0x0000000000102c30; ret; 
0x00000000102c5d: jae short 0x0000000000102c60; ret; 
0x00000000102c8d: jae short 0x0000000000102c90; ret; 
0x00000000102cbd: jae short 0x0000000000102cc0; ret; 
0x000000001045ce: jae short 0x0000000000104600; mov rsi, r12; mov rdi, r15; call r13; 
0x00000000105340: jae short 0x0000000000105343; ret; 
0x0000000010536d: jae short 0x0000000000105370; ret; 
0x0000000010539d: jae short 0x00000000001053a0; ret; 
0x000000001053d0: jae short 0x00000000001053d3; ret; 
0x00000000105400: jae short 0x0000000000105403; ret; 
0x0000000010542d: jae short 0x0000000000105430; ret; 
0x00000000105460: jae short 0x0000000000105463; ret; 
0x0000000010548d: jae short 0x0000000000105490; ret; 
0x000000001054bd: jae short 0x00000000001054c0; ret; 
0x000000001054f0: jae short 0x00000000001054f3; ret; 
0x0000000010551d: jae short 0x0000000000105520; ret; 
0x00000000105550: jae short 0x0000000000105553; ret; 
0x00000000108f2d: jae short 0x0000000000108f30; ret; 
0x00000000108f5d: jae short 0x0000000000108f60; ret; 
0x0000000010906d: jae short 0x0000000000109070; ret; 
0x0000000010909d: jae short 0x00000000001090a0; ret; 
0x000000001091cd: jae short 0x00000000001091d0; ret; 
0x00000000109250: jae short 0x0000000000109253; ret; 
0x0000000010927d: jae short 0x0000000000109280; ret; 
0x00000000109ced: jae short 0x0000000000109cf0; ret; 
0x00000000109d1d: jae short 0x0000000000109d20; ret; 
0x00000000109d60: jae short 0x0000000000109d63; ret; 
0x00000000109d8d: jae short 0x0000000000109d90; ret; 
0x00000000109dbd: jae short 0x0000000000109dc0; ret; 
0x00000000109ded: jae short 0x0000000000109df0; ret; 
0x00000000109e1d: jae short 0x0000000000109e20; ret; 
0x00000000109e4d: jae short 0x0000000000109e50; ret; 
0x00000000109e7d: jae short 0x0000000000109e80; ret; 
0x00000000109eb0: jae short 0x0000000000109eb3; ret; 
0x00000000109edd: jae short 0x0000000000109ee0; ret; 
0x00000000109f10: jae short 0x0000000000109f13; ret; 
0x00000000109f3d: jae short 0x0000000000109f40; ret; 
0x00000000109f6d: jae short 0x0000000000109f70; ret; 
0x00000000109f9d: jae short 0x0000000000109fa0; ret; 
0x00000000109fcd: jae short 0x0000000000109fd0; ret; 
0x00000000109ffd: jae short 0x000000000010a000; ret; 
0x0000000010a030: jae short 0x000000000010a033; ret; 
0x0000000010a060: jae short 0x000000000010a063; ret; 
0x0000000010a08d: jae short 0x000000000010a090; ret; 
0x0000000010a0bd: jae short 0x000000000010a0c0; ret; 
0x0000000010a0f0: jae short 0x000000000010a0f3; ret; 
0x0000000010a120: jae short 0x000000000010a123; ret; 
0x0000000010a14d: jae short 0x000000000010a150; ret; 
0x0000000010a17d: jae short 0x000000000010a180; ret; 
0x0000000010a1ad: jae short 0x000000000010a1b0; ret; 
0x0000000010a1dd: jae short 0x000000000010a1e0; ret; 
0x0000000010a20d: jae short 0x000000000010a210; ret; 
0x0000000010a240: jae short 0x000000000010a243; ret; 
0x0000000010a26d: jae short 0x000000000010a270; ret; 
0x0000000010a29d: jae short 0x000000000010a2a0; ret; 
0x0000000010a2cd: jae short 0x000000000010a2d0; ret; 
0x0000000010a2fd: jae short 0x000000000010a300; ret; 
0x0000000010a33d: jae short 0x000000000010a340; ret; 
0x0000000010a36d: jae short 0x000000000010a370; ret; 
0x0000000010a45d: jae short 0x000000000010a460; ret; 
0x0000000010a52d: jae short 0x000000000010a530; ret; 
0x0000000010a55d: jae short 0x000000000010a560; ret; 
0x0000000010a5bd: jae short 0x000000000010a5c0; ret; 
0x0000000010aa5d: jae short 0x000000000010aa60; ret; 
0x0000000010aa8d: jae short 0x000000000010aa90; ret; 
0x0000000010aac0: jae short 0x000000000010aac3; ret; 
0x0000000010bd78: jae short 0x000000000010bd86; mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x00000000110c0d: jae short 0x0000000000110be0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000115567: jae short 0x0000000000115578; cmp [rax+0x8], rdi; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x00000000122982: jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x000000001234bc: jae short 0x00000000001234c7; shl rsi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x00000000128633: jae short 0x00000000001285e8; mov byte ptr [r9], 0x0; ret; 
0x000000001390ec: jae short 0x0000000000139136; mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000139b67: jae short 0x0000000000139b79; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x00000000139c03: jae short 0x0000000000139c25; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000013aff6: jae short 0x000000000013b008; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b030: jae short 0x000000000013b042; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000013f276: jae short 0x000000000013f290; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001425d9: jae short 0x0000000000142578; out dx, al; jmp qword ptr [rax+rcx*2-0x39]; 
0x00000000145855: jae short 0x0000000000145860; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000014c299: jae short 0x000000000014c280; mov eax, 0x1; ret; 
0x0000000014cdcc: jae short 0x000000000014ce16; mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x00000000152a84: jae short 0x0000000000152a8c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b35: jae short 0x0000000000152b3e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016f61a: jae short 0x000000000016f610; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000179689: jae short 0x0000000000179690; add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000018aab0: jae short 0x000000000018aa80; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000192dc1: jae short 0x0000000000192dd3; nop [rax+rax]; call qword ptr [rbx]; 
0x000000000b0b03: jb 0x00000000000aff70; lea r11, [rip+0xf95d0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0008: jb 0x00000000000aff70; lea r11, [rip+0xfa0cb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a6d: jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x000000000b2323: jb 0x00000000000b1620; lea r11, [rip+0xf7f90]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16b8: jb 0x00000000000b1620; lea r11, [rip+0xf8bfb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b228d: jb 0x00000000000b16d9; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x000000000b3d63: jb 0x00000000000b34b0; lea r11, [rip+0xf6724]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3548: jb 0x00000000000b34b0; lea r11, [rip+0xf6f3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3ccd: jb 0x00000000000b3569; movdqu [rdi+0x30], xmm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000b453b: jb 0x00000000000b46a5; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000174650: jb 0x0000000000174444; mov rax, r8; vzeroupper; ret; 
0x000000001755e0: jb 0x00000000001753c5; vmovdqu [rdi+0x60], ymm7; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x000000001762e0: jb 0x0000000000175ef5; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x00000000177010: jb 0x0000000000176c25; vmovdqu [rdi+0x60], ymm7; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x00000000179403: jb 0x0000000000179184; mov rax, r8; vzeroupper; ret; 
0x00000000188116: jb 0x0000000000187cb5; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x0000000018a446: jb 0x000000000018a1d5; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000018b546: jb 0x000000000018b125; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x0000000004170a: jb short 0x0000000000041756; add al, 0x0; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000044aff: jb short 0x0000000000044add; xor eax, eax; ret; 
0x0000000005b28a: jb short 0x000000000005b2b5; add [rax], eax; add rsp, 0xd8; ret; 
0x00000000079f31: jb short 0x0000000000079f53; mov [rcx], eax; ret; 
0x0000000007a098: jb short 0x000000000007a0ba; mov [rcx], eax; ret; 
0x0000000007fef4: jb short 0x000000000007ff20; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x000000000802d4: jb short 0x0000000000080310; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x00000000086284: jb short 0x000000000008628f; add [rax], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b4: jb short 0x00000000000867bf; add [rax], al; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x00000000088bb1: jb short 0x0000000000088bb2; jmp qword ptr [rsi+0x66]; 
0x0000000009326d: jb short 0x0000000000093269; call qword ptr [rbp+0x48]; 
0x0000000009a85e: jb short 0x000000000009a870; mov [r8], rsi; mov rax, rdi; ret; 
0x0000000009a8af: jb short 0x000000000009a8b8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000affee: jb short 0x00000000000aff70; lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affd1: jb short 0x00000000000aff70; lea r11, [rip+0xfa106]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affa1: jb short 0x00000000000aff70; lea r11, [rip+0xfa136]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b169e: jb short 0x00000000000b1620; lea r11, [rip+0xf8c19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1681: jb short 0x00000000000b1620; lea r11, [rip+0xf8c36]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1651: jb short 0x00000000000b1620; lea r11, [rip+0xf8c66]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b182a: jb short 0x00000000000b1835; add [rax], al; ret; 
0x000000000b352e: jb short 0x00000000000b34b0; lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3511: jb short 0x00000000000b34b0; lea r11, [rip+0xf6f7a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34e1: jb short 0x00000000000b34b0; lea r11, [rip+0xf6faa]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b44b9: jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x000000000b4555: jb short 0x00000000000b455d; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000000b4556: jb short 0x00000000000b455d; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000000b4c24: jb short 0x00000000000b4c28; mov [rax], cl; ret; 
0x000000000b5036: jb short 0x00000000000b502f; call far fword ptr [rdx+0x31]; 
0x000000000b50b4: jb short 0x00000000000b50c3; add bh, dh; rol dword ptr [rax], 0x0; add [rax+0x74], al; ret far; 
0x000000000be40b: jb short 0x00000000000be3b0; mov r8d, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x000000000d8395: jb short 0x00000000000d83df; cmp edx, eax; jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x000000000f01cb: jb short 0x00000000000f01d5; setne al; movzx eax, al; neg eax; ret; 
0x000000000fb9f8: jb short 0x00000000000fb9f7; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000fe239: jb short 0x00000000000fe258; add rsp, 0x90; pop rbx; ret; 
0x000000000ff134: jb short 0x00000000000ff140; xor eax, eax; ret; 
0x000000000ff84d: jb short 0x00000000000ff84f; add [rax], al; syscall; 
0x0000000010bcbb: jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010c083: jb short 0x000000000010c08d; seta al; movzx eax, al; neg eax; ret; 
0x0000000010ce93: jb short 0x000000000010cea5; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000010d6a3: jb short 0x000000000010d6b5; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000010d6f3: jb short 0x000000000010d705; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000011066b: jb short 0x0000000000110678; mov eax, 0x1; ret; 
0x0000000013b4b9: jb short 0x000000000013b4db; ret; 
0x0000000013b4b3: jb short 0x000000000013b4dd; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000014246d: jb short 0x0000000000142477; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x0000000014be52: jb short 0x000000000014be64; or al, [rax]; call qword ptr [rax+0x360]; 
0x00000000151ede: jb short 0x0000000000151ee7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000151f3c: jb short 0x0000000000151f4b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151f8e: jb short 0x0000000000151f97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000151fea: jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x0000000015202e: jb short 0x0000000000152037; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015208c: jb short 0x000000000015209b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001520de: jb short 0x00000000001520e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015213a: jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x0000000015217e: jb short 0x0000000000152187; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001521dc: jb short 0x00000000001521eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015222e: jb short 0x0000000000152237; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015228a: jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x000000001522ce: jb short 0x00000000001522d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015232c: jb short 0x000000000015233b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015237e: jb short 0x0000000000152387; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001523da: jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x0000000015241e: jb short 0x0000000000152427; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015247c: jb short 0x000000000015248b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001524ce: jb short 0x00000000001524d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015252a: jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x0000000015256e: jb short 0x0000000000152577; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001525cc: jb short 0x00000000001525db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015261e: jb short 0x0000000000152627; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015267a: jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x000000001526be: jb short 0x00000000001526c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015271c: jb short 0x000000000015272b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015276e: jb short 0x0000000000152777; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001527ca: jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x0000000015280e: jb short 0x0000000000152817; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015286a: jb short 0x0000000000152880; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001528be: jb short 0x00000000001528c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015291a: jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x0000000015295e: jb short 0x0000000000152967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001529bc: jb short 0x00000000001529cb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152a0e: jb short 0x0000000000152a17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152a6a: jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152aae: jb short 0x0000000000152ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152b0c: jb short 0x0000000000152b1b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152b5e: jb short 0x0000000000152b67; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152bba: jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152bd4: jb short 0x0000000000152bdc; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bfe: jb short 0x0000000000152c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152c5c: jb short 0x0000000000152c6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152cae: jb short 0x0000000000152cb7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152d0a: jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152d4e: jb short 0x0000000000152d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152dac: jb short 0x0000000000152dbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152dfe: jb short 0x0000000000152e07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152e5a: jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152e9e: jb short 0x0000000000152ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152e9c: jb short 0x0000000000152ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152efc: jb short 0x0000000000152f0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152f4c: jb short 0x0000000000152f57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152f4e: jb short 0x0000000000152f57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152faa: jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x00000000152fee: jb short 0x0000000000152ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015304c: jb short 0x000000000015305b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015309e: jb short 0x00000000001530a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001530fa: jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x0000000015313e: jb short 0x0000000000153147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015319c: jb short 0x00000000001531ab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001531ee: jb short 0x00000000001531f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015324a: jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x000000001548ae: jb short 0x00000000001548b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015490c: jb short 0x000000000015491b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015495e: jb short 0x0000000000154967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001549ba: jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x000000001549fe: jb short 0x0000000000154a07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154a5c: jb short 0x0000000000154a6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154aae: jb short 0x0000000000154ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154b0a: jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154b4e: jb short 0x0000000000154b57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154bac: jb short 0x0000000000154bbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154bfe: jb short 0x0000000000154c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154c5a: jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154c9e: jb short 0x0000000000154ca7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154cfc: jb short 0x0000000000154d0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154d4e: jb short 0x0000000000154d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154daa: jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154dee: jb short 0x0000000000154df7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154e4c: jb short 0x0000000000154e5b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154e9e: jb short 0x0000000000154ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154efa: jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000154f3e: jb short 0x0000000000154f47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154f9c: jb short 0x0000000000154fab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154fee: jb short 0x0000000000154ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015504a: jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x0000000015508e: jb short 0x0000000000155097; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001550ec: jb short 0x00000000001550fb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015513e: jb short 0x0000000000155147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015519a: jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001551de: jb short 0x00000000001551e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015523a: jb short 0x0000000000155250; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015528e: jb short 0x0000000000155297; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001552ea: jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x0000000015532e: jb short 0x0000000000155337; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015538c: jb short 0x000000000015539b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001553de: jb short 0x00000000001553e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015543a: jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x0000000015547e: jb short 0x0000000000155487; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001554dc: jb short 0x00000000001554eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015552e: jb short 0x0000000000155537; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015558a: jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x000000001555ce: jb short 0x00000000001555d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015562c: jb short 0x000000000015563b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015567e: jb short 0x0000000000155687; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001556da: jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x0000000015571e: jb short 0x0000000000155727; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015577c: jb short 0x000000000015578b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001557ce: jb short 0x00000000001557d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015582a: jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x0000000015586e: jb short 0x0000000000155877; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015586c: jb short 0x0000000000155877; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001558cc: jb short 0x00000000001558db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000015591e: jb short 0x0000000000155927; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015591c: jb short 0x0000000000155927; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015597a: jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x000000001559be: jb short 0x00000000001559c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155a1c: jb short 0x0000000000155a2b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155a6e: jb short 0x0000000000155a77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155aca: jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155b0e: jb short 0x0000000000155b17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155b6c: jb short 0x0000000000155b7b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155bbe: jb short 0x0000000000155bc7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155c1a: jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x0000000016857a: jb short 0x000000000016857e; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001702b2: jb short 0x00000000001702ab; rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000170ac0: jb short 0x0000000000170b20; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000017723b: jb short 0x0000000000177242; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000001779b9: jb short 0x00000000001779bd; mov [rax], cl; vzeroupper; ret; 
0x0000000017afca: jb short 0x000000000017afb9; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ba3e: jb short 0x000000000017ba44; mov cl, [rsi]; mov [rdi], cl; ret; 
0x0000000017c0b5: jb short 0x000000000017c0c6; vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0c9: jb short 0x000000000017c0d5; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000017c0e2: jb short 0x000000000017c0ee; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x0000000017c0f5: jb short 0x000000000017c0fd; mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x0000000017c100: jb short 0x000000000017c10a; mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x0000000017c10d: jb short 0x000000000017c111; mov [rdi], cl; ret; 
0x0000000017e48c: jb short 0x000000000017e493; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x0000000017ed4f: jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000017f3c0: jb short 0x000000000017f420; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000017f5c4: jb short 0x000000000017f5cb; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x00000000186360: jb short 0x00000000001863c0; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000018656f: jb short 0x0000000000186577; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000001871aa: jb short 0x00000000001871ae; mov [rax], cl; ret; 
0x0000000018b842: jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b810: jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8c9: jb short 0x000000000018b8d4; sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018b88e: jb short 0x000000000018b8d4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018cd3e: jb short 0x000000000018cd4d; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cd7f: jb short 0x000000000018cd4d; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000018ce29: jb short 0x000000000018ce38; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdce: jb short 0x000000000018ce38; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000006d322: jbe 0x000000000006d4ed; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc27: jbe 0x000000000006d78e; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000006c41d: jbe 0x000000000006d7a6; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000006e155: jbe 0x000000000006f220; mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x0000000006dce8: jbe 0x000000000006f428; mov rsi, [rsp]; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006eced: jbe 0x000000000006f668; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000006f6e1: jbe 0x000000000006f970; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e0a4: jbe 0x000000000006fc41; mov rdx, r13; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000006e32c: jbe 0x000000000006fc55; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000070150: jbe 0x0000000000070228; mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000713f2: jbe 0x0000000000071e80; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000000720cb: jbe 0x00000000000729b6; mov rdx, rbx; mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000071c2f: jbe 0x0000000000072a08; mov rdx, rbx; mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000072263: jbe 0x0000000000072c60; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000072619: jbe 0x0000000000072e2e; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000073391: jbe 0x0000000000074468; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000072fb4: jbe 0x00000000000747a0; mov rsi, [rsp]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000073b8f: jbe 0x0000000000074950; lea rax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000074af9: jbe 0x0000000000074dd0; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000742c9: jbe 0x0000000000074ff0; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000074691: jbe 0x0000000000075118; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000075501: jbe 0x00000000000755c0; mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000767aa: jbe 0x00000000000768a0; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000007690f: jbe 0x0000000000076a50; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x00000000076bfc: jbe 0x0000000000076cd7; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000077a30: jbe 0x0000000000077ae0; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x000000000788c8: jbe 0x0000000000078950; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000078f12: jbe 0x0000000000078ff0; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007af20: jbe 0x000000000007b030; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x0000000007ca9d: jbe 0x000000000007d090; mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007cd7b: jbe 0x000000000007d172; xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x0000000007cf79: jbe 0x000000000007d17c; xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000007d072: jbe 0x000000000007d198; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x0000000007d89c: jbe 0x000000000007d970; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000007e621: jbe 0x000000000007e780; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f941: jbe 0x000000000007fa90; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000080f43: jbe 0x00000000000810e0; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x0000000008173d: jbe 0x000000000008194c; xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000081811: jbe 0x0000000000081956; xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x000000000818b6: jbe 0x0000000000081960; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000081c01: jbe 0x0000000000081d18; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000081dde: jbe 0x0000000000081e90; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000008201c: jbe 0x0000000000082100; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x0000000008221b: jbe 0x0000000000082350; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000083e24: jbe 0x0000000000083ed8; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000084451: jbe 0x0000000000084568; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x000000000846ff: jbe 0x0000000000084820; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000a49cf: jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000c4814: jbe 0x00000000000c4b20; add rax, rdi; add rax, rcx; ret; 
0x0000000011c654: jbe 0x000000000011c5c5; xor eax, eax; pop rbx; ret; 
0x0000000017e467: jbe 0x000000000017e50a; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000018a81f: jbe 0x000000000018aa80; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000018a850: jbe 0x000000000018aa80; movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000003963a: jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x00000000041e4e: jbe short 0x0000000000041e03; sbb al, [rax]; ret; 
0x00000000052eaf: jbe short 0x0000000000052eaf; jmp qword ptr [rsi+0x66]; 
0x000000000644c0: jbe short 0x0000000000064490; mov [rdi], rsi; ret; 
0x0000000006b199: jbe short 0x000000000006b1f8; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000000702c0: jbe short 0x0000000000070290; mov [rdi], rsi; ret; 
0x00000000070329: jbe short 0x0000000000070373; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000070328: jbe short 0x00000000000703a0; movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000074bd5: jbe short 0x0000000000074bd2; dec dword ptr [rax-0x77]; ret; 
0x00000000075d20: jbe short 0x0000000000075cf0; mov [rdi], rsi; ret; 
0x00000000076d61: jbe short 0x0000000000076db8; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x0000000007750a: jbe short 0x0000000000077580; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x000000000781d5: jbe short 0x00000000000781f8; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000078d86: jbe short 0x0000000000078df8; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078fcb: jbe short 0x000000000007900a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000079989: jbe short 0x00000000000799c0; mov rdx, r13; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000079a34: jbe short 0x0000000000079a58; mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000079d35: jbe short 0x0000000000079d58; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000007ae0a: jbe short 0x000000000007ae48; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b1a3: jbe short 0x000000000007b1c4; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000007b67f: jbe short 0x000000000007b6b0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007b719: jbe short 0x000000000007b730; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000007f112: jbe short 0x000000000007f158; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x000000000807cb: jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x000000000809b9: jbe short 0x0000000000080a18; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000080b1d: jbe short 0x0000000000080b60; mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000080bde: jbe short 0x0000000000080c40; mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000080c8a: jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000081b0c: jbe short 0x0000000000081b22; mov rdx, r12; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x000000000823bb: jbe short 0x00000000000823f8; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x00000000082474: jbe short 0x00000000000824e0; xor esi, esi; mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000083654: jbe short 0x00000000000836b0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000008373a: jbe short 0x0000000000083750; mov rax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000083ad8: jbe short 0x0000000000083b40; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000083b8a: jbe short 0x0000000000083bb0; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000083c21: jbe short 0x0000000000083c90; movzx esi, byte ptr [r15]; lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x00000000083cf6: jbe short 0x0000000000083d08; mov rax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000008429a: jbe short 0x00000000000842d0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000084331: jbe short 0x0000000000084350; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x000000000849b3: jbe short 0x0000000000084a10; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18]; 
0x000000000877fe: jbe short 0x0000000000087860; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000087a98: jbe short 0x0000000000087aa0; ret; 
0x000000000880f3: jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000008aa15: jbe short 0x000000000008aa20; neg eax; ret; 
0x0000000008aa5a: jbe short 0x000000000008aa60; neg eax; ret; 
0x000000000947a9: jbe short 0x00000000000947b0; ret; 
0x00000000094869: jbe short 0x0000000000094870; ret; 
0x000000000948a9: jbe short 0x00000000000948b0; ret; 
0x000000000948d9: jbe short 0x00000000000948e0; ret; 
0x0000000009d729: jbe short 0x000000000009d749; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a4927: jbe short 0x00000000000a4934; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000000a4c36: jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c46: jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c56: jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c66: jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c49ac: jbe short 0x00000000000c49fd; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000c4a4e: jbe short 0x00000000000c4a9f; adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000c4aab: jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4acb: jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4aeb: jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b0b: jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c9be7: jbe short 0x00000000000c9bf0; ret; 
0x000000000d7f51: jbe short 0x00000000000d7f53; add [rax], al; syscall; 
0x000000000ee316: jbe short 0x00000000000ee2e0; cli; jmp qword ptr [rsi+0xf]; 
0x000000000f853e: jbe short 0x00000000000f85a0; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f858a: jbe short 0x00000000000f85ec; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8e53: jbe short 0x00000000000f8eb5; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8edc: jbe short 0x00000000000f8f3e; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000fdd67: jbe short 0x00000000000fdd88; cmp eax, 0xffffffa1; je short 0x00000000000fdd78; neg eax; ret; 
0x000000000fdf67: jbe short 0x00000000000fdf88; cmp eax, 0xffffffa1; je short 0x00000000000fdf78; neg eax; ret; 
0x000000000feb76: jbe short 0x00000000000feb70; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x00000000100677: jbe short 0x0000000000100680; ret; 
0x0000000010465b: jbe short 0x0000000000104688; mov rsi, r12; mov rdi, r14; call r13; 
0x00000000109306: jbe short 0x00000000001092d6; idiv edi; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x0000000010b186: jbe short 0x000000000010b170; mov rax, [rip+0xe1c81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b386: jbe short 0x000000000010b366; mov rax, [rip+0xe1a81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b72f: jbe short 0x000000000010b6f0; mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall; 
0x0000000010c596: jbe short 0x000000000010c577; bnd jmp qword ptr [rsi+0xf]; 
0x0000000010ef14: jbe short 0x000000000010ef24; add al, ch; test [rcx-0x9], bh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001172c6: jbe short 0x00000000001172ab; stc; jmp qword ptr [rsi+0xf]; 
0x00000000128d0e: jbe short 0x0000000000128ce0; xor eax, eax; ret; 
0x00000000128d51: jbe short 0x0000000000128d40; xor eax, eax; ret; 
0x00000000128dd1: jbe short 0x0000000000128dc0; xor eax, eax; ret; 
0x00000000128e71: jbe short 0x0000000000128e60; xor eax, eax; ret; 
0x00000000128f01: jbe short 0x0000000000128ef0; xor eax, eax; ret; 
0x0000000012f4d6: jbe short 0x000000000012f4a6; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000013ab1c: jbe short 0x000000000013ab28; mov eax, 0x2; ret; 
0x0000000014a4e7: jbe short 0x000000000014a4f0; ret; 
0x00000000151947: jbe short 0x0000000000151954; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000001527e4: jbe short 0x00000000001527ec; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016b717: jbe short 0x000000000016b724; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x00000000170161: jbe short 0x00000000001701c0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001701a9: jbe short 0x00000000001701c0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000176d96: jbe short 0x0000000000176d99; add [rax], al; vzeroupper; ret; 
0x00000000177220: jbe short 0x000000000017726a; mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x0000000017721f: jbe short 0x0000000000177297; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000177d74: jbe short 0x0000000000177d47; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x00000000177dc9: jbe short 0x0000000000177de2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x00000000177fb4: jbe short 0x0000000000178020; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000178009: jbe short 0x0000000000178020; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000017f5a8: jbe short 0x000000000017f621; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x00000000185c54: jbe short 0x0000000000185c27; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x00000000185ca9: jbe short 0x0000000000185cc2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x00000000185ea9: jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185e8d: jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000186554: jbe short 0x00000000001865d1; mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000018aa28: jbe short 0x000000000018aa80; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000018b68f: jbe short 0x000000000018b6a0; test eax, eax; je short 0x000000000018b700; tzcnt eax, eax; ret; 
0x0000000018cbaf: jbe short 0x000000000018cbc0; test eax, eax; je short 0x000000000018cc20; tzcnt eax, eax; ret; 
0x0000000018d279: jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d265: jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d989: jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d973: jbe short 0x000000000018d991; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018de29: jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018de10: jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000013fa74: je 0x000000000002d05c; mov rax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000040303: je 0x0000000000040250; ret; 
0x000000000883b3: je 0x0000000000088458; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x000000000897e5: je 0x00000000000898c5; call rax; 
0x0000000008e260: je 0x000000000008df8f; mov eax, 0x83; ret; 
0x0000000009a082: je 0x000000000009a160; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x000000000a51f0: je 0x00000000000a5170; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x000000000aa360: je 0x00000000000aa520; bsr rax, rax; add rax, rdi; ret; 
0x000000000aa5e4: je 0x00000000000aa520; bsr rax, rsi; add rax, rdi; ret; 
0x000000000aa3ee: je 0x00000000000aa520; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x000000000aa67c: je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa83c: je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000c5c76: je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x000000000c5c94: je 0x00000000000c5bd5; test al, 0xf0; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c62bd: je 0x00000000000c6360; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000e08c3: je 0x00000000000e083d; ret; 
0x000000000ea523: je 0x00000000000eb21c; lea rbx, [rip+0xc18e4]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000fee90: je 0x00000000000fede8; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000104cd9: je 0x0000000000104d70; call rax; 
0x00000000110f97: je 0x0000000000111060; mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x0000000011c674: je 0x000000000011c5ef; mov [rsi+0x5], al; mov rax, rsi; pop rbx; ret; 
0x0000000013905e: je 0x000000000013912e; mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x0000000013902f: je 0x000000000013912e; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000139c45: je 0x0000000000139b9b; mov rax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000013a2be: je 0x000000000013a151; mov rdi, rbx; call rax; 
0x0000000013b003: je 0x000000000013b11e; mov rdi, r12; call qword ptr [rbx]; 
0x0000000013de56: je 0x000000000013dfe0; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000013e53e: je 0x000000000013e650; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013f280: je 0x000000000013f1f8; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000001404ac: je 0x0000000000140630; mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000140966: je 0x0000000000140a50; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001412b4: je 0x0000000000140d75; mov rax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000140e54: je 0x00000000001413bd; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000141946: je 0x000000000014188e; mov rax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000014186a: je 0x0000000000141940; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000164555: je 0x0000000000164100; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000016ffec: je 0x0000000000170090; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000174035: je 0x0000000000173ee4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000174384: je 0x00000000001742a4; tzcnt eax, eax; vzeroupper; ret; 
0x000000001752df: je 0x0000000000175420; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001756ca: je 0x00000000001754c0; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x000000001763ba: je 0x0000000000176070; vzeroupper; ret; 
0x00000000176296: je 0x0000000000176150; vzeroupper; ret; 
0x000000001770fa: je 0x0000000000176da0; mov rax, rdi; vzeroupper; ret; 
0x00000000176fc6: je 0x0000000000176e80; vzeroupper; ret; 
0x00000000177e2c: je 0x0000000000177ee0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000178ee3: je 0x0000000000178f80; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000179094: je 0x0000000000178f84; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000001790f1: je 0x0000000000179180; tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000185d0c: je 0x0000000000185da0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000186fe4: je 0x0000000000186f20; bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x0000000018820c: je 0x0000000000187e50; mov rax, rdi; ret; 
0x000000001880c6: je 0x0000000000187f60; ret; 
0x00000000188c5d: je 0x0000000000188ce0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000188e6b: je 0x0000000000188ce4; tzcnt eax, eax; add rax, rdx; ret; 
0x00000000189a29: je 0x0000000000189947; tzcnt eax, eax; ret; 
0x0000000018a0ef: je 0x000000000018a230; mov byte ptr [rdi], 0x0; ret; 
0x0000000018a53c: je 0x000000000018a2f0; mov byte ptr [rdi], 0x0; ret; 
0x0000000018b63c: je 0x000000000018b2b0; ret; 
0x0000000018b4f6: je 0x000000000018b390; ret; 
0x0000000018c4b1: je 0x000000000018c3c7; tzcnt eax, eax; ret; 
0x0000000018d0cc: je 0x000000000018d180; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d7ec: je 0x000000000018d880; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dc6c: je 0x000000000018dd20; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000002ce10: je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000002d1ca: je short 0x000000000002d1f0; sbb [rax-0x75], cl; adc [rax-0x75], cl; and al, 0x8; call rax; 
0x0000000002d25a: je short 0x000000000002d288; mov rsi, r12; mov edi, ebp; call r15; 
0x0000000002fe4f: je short 0x000000000002fe62; add ecx, [rcx+0x39]; ret; 
0x0000000002ff8c: je short 0x000000000002ffb2; push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x00000000030439: je short 0x000000000003045f; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x000000000309d6: je short 0x00000000000309fc; push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x00000000030f3f: je short 0x0000000000030f65; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x000000000314f6: je short 0x000000000003151c; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000003254b: je short 0x0000000000032571; push rax; mov rdi, [rsp+0x48]; call r15; 
0x00000000033243: je short 0x0000000000033269; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x00000000033e80: je short 0x0000000000033ea6; push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000035240: je short 0x0000000000035266; push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x000000000366d2: je short 0x00000000000366f8; mov rdi, [rsp+0x40]; call r15; 
0x0000000003682e: je short 0x0000000000036854; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000037212: je short 0x0000000000037220; cmp esi, 0x3; je short 0x0000000000037220; ret; 
0x00000000037217: je short 0x0000000000037220; ret; 
0x0000000003723d: je short 0x0000000000037258; pop rbx; ret; 
0x00000000037e88: je short 0x0000000000037e8c; call rax; 
0x00000000037f84: je short 0x0000000000037f88; call rax; 
0x00000000038e7b: je short 0x0000000000038e7f; call rax; 
0x0000000003ae5e: je short 0x000000000003ae65; cmp byte ptr [rdi], 0x0; jne short 0x000000000003ae70; add rsp, 0x18; ret; 
0x0000000003ae9e: je short 0x000000000003aea5; cmp byte ptr [rdi], 0x0; jne short 0x000000000003aeb0; add rsp, 0x18; ret; 
0x0000000003e2f8: je short 0x000000000003e31e; or [rdx-0x73], cl; jl short 0x000000000003e33c; add al, ch; ret far; 
0x0000000003e416: je short 0x000000000003e41e; add [rax-0x9], ecx; ror byte ptr [rax+0x1], 0x1; ret; 
0x00000000040551: je short 0x0000000000040558; ret; 
0x00000000040909: je short 0x0000000000040910; ret; 
0x00000000041b93: je short 0x0000000000041b9f; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000041bc3: je short 0x0000000000041bd5; mov rax, 0xfffffffe7fffffff; mov [rdi], rax; xor eax, eax; ret; 
0x00000000041e47: je short 0x0000000000041e60; lea edx, [rax+0x1]; mov [rip+0x1ab376], edx; ret; 
0x00000000043f00: je short 0x0000000000043f08; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x00000000044b15: je short 0x0000000000044ad8; mov eax, 0xffffffff; ret; 
0x0000000004d828: je short 0x000000000004d7ba; add eax, [rax]; add rsp, 0x10; pop rbx; ret; 
0x0000000004dac0: je short 0x000000000004dae6; cmp [rax-0x77], cl; ret far; 
0x0000000004e0c5: je short 0x000000000004e0d0; pop rbp; ret; 
0x0000000004f7df: je short 0x000000000004f7e7; cmp byte ptr [rax-0x1], 0x2f; jne short 0x000000000004f7d8; pop rbx; ret; 
0x000000000555a4: je short 0x000000000005561f; mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x0000000005c1cd: je short 0x000000000005c1d8; mov eax, r8d; ret; 
0x0000000005c1b6: je short 0x000000000005c1f8; mov eax, 0x13c; syscall; 
0x0000000005c1e5: je short 0x000000000005c20e; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000005c1e4: je short 0x000000000005c20e; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000070158: je short 0x000000000007017e; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000007563d: je short 0x0000000000075650; lea rdx, [rip+0x1330da]; add rax, rdx; ret; 
0x00000000077207: je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000077240: je short 0x0000000000077253; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x00000000077293: je short 0x00000000000772a0; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000077280: je short 0x00000000000772a0; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x000000000772c7: je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007750b: je short 0x0000000000077559; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000077860: je short 0x00000000000778b5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007ab9d: je short 0x000000000007ab8b; ret far; 
0x0000000007b07c: je short 0x000000000007b080; ret; 
0x0000000007b0ce: je short 0x000000000007b12b; pop rbp; pop r12; ret; 
0x0000000007b153: je short 0x000000000007b1b1; mov eax, 0x1; pop rbp; pop r12; ret; 
0x0000000007b757: je short 0x000000000007b768; cmp rax, rsi; ja short 0x000000000007b750; lea eax, [rdx+rdi]; ret; 
0x0000000007c9d4: je short 0x000000000007c9fa; xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x0000000007dad5: je short 0x000000000007dafb; or al, ch; ret; 
0x0000000007e456: je short 0x000000000007e460; mov eax, [rdi+0x70]; test eax, eax; js short 0x000000000007e460; ret; 
0x0000000007f820: je short 0x000000000007f875; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007fee1: je short 0x000000000007fee8; ret; 
0x0000000007fed8: je short 0x000000000007ff00; mov eax, 0xffffffff; test edx, edx; je short 0x000000000007fee8; ret; 
0x000000000802c1: je short 0x00000000000802c8; ret; 
0x000000000802b8: je short 0x00000000000802e0; mov eax, 0xffffffff; test edx, edx; je short 0x00000000000802c8; ret; 
0x000000000806c4: je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x00000000080d3f: je short 0x0000000000080d48; pop rbx; ret; 
0x0000000008146c: je short 0x0000000000081492; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x00000000083a95: je short 0x0000000000083aa0; ret; 
0x000000000840ab: je short 0x00000000000840bc; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x000000000842d1: je short 0x00000000000842f7; or al, 0xe8; xchg edi, eax; ret; 
0x00000000084377: je short 0x0000000000084388; cmp rax, rsi; ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x00000000085a6b: je short 0x0000000000085a91; sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x00000000085ad5: je short 0x0000000000085afb; or [rax-0x75], cl; jge short 0x0000000000085aec; call qword ptr [r12+0x358]; 
0x00000000085af4: je short 0x0000000000085b01; mov rdi, r14; call qword ptr [r12+0x358]; 
0x00000000085bca: je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x00000000085e0c: je short 0x0000000000085e20; sub rsp, 0x8; push rcx; mov rcx, r10; call rax; 
0x00000000086156: je short 0x0000000000086159; ret; 
0x00000000086183: je short 0x0000000000086195; mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008620f: je short 0x0000000000086220; mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000008628b: je short 0x0000000000086290; ret; 
0x000000000862a5: je short 0x00000000000862b8; mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x00000000086303: je short 0x0000000000086310; ret; 
0x000000000867bb: je short 0x00000000000867c0; ret; 
0x00000000086c0d: je short 0x0000000000086be0; call rdx; 
0x00000000086e63: je short 0x0000000000086e70; ret; 
0x00000000086f44: je short 0x0000000000086f50; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000087645: je short 0x0000000000087650; xor eax, eax; ret; 
0x0000000008766a: je short 0x0000000000087670; xor eax, eax; pop rbx; ret; 
0x00000000087a0f: je short 0x0000000000087a20; or eax, 0x2; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000087ef3: je short 0x0000000000087f00; ret; 
0x0000000008802f: je short 0x0000000000088086; add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000882f1: je short 0x0000000000088309; xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000088527: je short 0x0000000000088560; xor r10d, r10d; mov eax, r8d; syscall; 
0x00000000088593: je short 0x0000000000088599; or dword ptr [rdi+0x24], 0x2; xor eax, eax; ret; 
0x00000000088741: je short 0x0000000000088759; xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x000000000888e3: je short 0x00000000000888f0; ret; 
0x0000000008893b: je short 0x0000000000088940; ret; 
0x00000000088993: je short 0x00000000000889a0; ret; 
0x000000000889d2: je short 0x00000000000889d3; jmp qword ptr [rsi+0x66]; 
0x0000000008e03a: je short 0x000000000008e09b; xor eax, eax; ret; 
0x0000000008e40a: je short 0x000000000008e418; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e593: je short 0x000000000008e5a0; mov eax, 0x16; ret; 
0x0000000008e775: je short 0x000000000008e790; push rbx; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x0000000008e7a4: je short 0x000000000008e7b0; xor eax, eax; ret; 
0x0000000008f6ba: je short 0x000000000008f6c0; test al, 0x1; jne short 0x000000000008f690; mov eax, 0x10; ret; 
0x0000000008f6a4: je short 0x000000000008f6d0; mov eax, fs:[0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000008fe9d: je short 0x000000000008fea0; ret; 
0x00000000090490: je short 0x0000000000090493; ret; 
0x0000000009064b: je short 0x0000000000090658; xor eax, eax; add rsp, 0x8; ret; 
0x00000000090ada: je short 0x0000000000090ae0; ret; 
0x00000000090b00: je short 0x0000000000090b10; sbb eax, eax; or eax, 0x1; ret; 
0x000000000922e0: je short 0x0000000000092303; ret; 
0x00000000092831: je short 0x0000000000092844; xor eax, eax; ret; 
0x00000000092847: je short 0x0000000000092858; mov rax, [rax+0x18]; test rax, rax; jne short 0x0000000000092840; ret; 
0x00000000093d08: je short 0x0000000000093d38; mov rsi, rbp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000093fe5: je short 0x000000000009400b; adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x00000000094a0c: je short 0x0000000000094a15; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000095c96: je short 0x0000000000095ca0; add rsp, 0x8; ret; 
0x00000000096798: je short 0x00000000000967af; add [rax+0x39], cl; ret; 
0x00000000098562: je short 0x000000000009856b; mov [rip+0x15cc45], rdx; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x00000000099839: je short 0x0000000000099840; ret; 
0x0000000009a18d: je short 0x000000000009a19c; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000009a2ee: je short 0x000000000009a32b; add rsp, 0x10; pop r12; ret; 
0x0000000009aaf4: je short 0x000000000009aac9; ret; 
0x0000000009ad1f: je short 0x000000000009ad30; movsx edx, al; mov eax, edx; ret; 
0x0000000009aeb2: je short 0x000000000009aeb8; ret; 
0x0000000009aefc: je short 0x000000000009aec7; ret; 
0x0000000009af22: je short 0x000000000009af28; ret; 
0x0000000009af6c: je short 0x000000000009af37; ret; 
0x0000000009b152: je short 0x000000000009b158; ret; 
0x0000000009b19c: je short 0x000000000009b167; ret; 
0x0000000009bad2: je short 0x000000000009bad8; ret; 
0x0000000009d372: je short 0x000000000009d378; ret; 
0x0000000009d3f2: je short 0x000000000009d3f8; ret; 
0x0000000009d43c: je short 0x000000000009d407; ret; 
0x0000000009d792: je short 0x000000000009d7a8; pop rbx; pop rbp; pop r12; ret; 
0x0000000009de4d: je short 0x000000000009de54; cmp cl, 0x3d; jne short 0x000000000009de16; mov rax, r10; ret; 
0x000000000a127b: je short 0x00000000000a1281; cmp eax, esi; jne short 0x00000000000a1270; mov rax, r8; ret; 
0x000000000a12af: je short 0x00000000000a12b5; cmp eax, edx; jne short 0x00000000000a12a0; mov rax, r8; ret; 
0x000000000a131a: je short 0x00000000000a1310; ret; 
0x000000000a134a: je short 0x00000000000a1340; cmp edx, esi; je short 0x00000000000a1340; ret; 
0x000000000a134e: je short 0x00000000000a1340; ret; 
0x000000000a139b: je short 0x00000000000a1380; mov rax, r8; ret; 
0x000000000a13cf: je short 0x00000000000a13e0; cmp eax, esi; jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x000000000a16c2: je short 0x00000000000a16c8; ret; 
0x000000000a170c: je short 0x00000000000a16d7; ret; 
0x000000000a4b3c: je short 0x00000000000a4b8d; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a4bde: je short 0x00000000000a4c2f; adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000a4cd8: je short 0x00000000000a4cf0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000a4e1a: je short 0x00000000000a4e6b; xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000a50b0: je short 0x00000000000a5101; and [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000000a519c: je short 0x00000000000a5170; bsr eax, eax; add rax, rdi; ret; 
0x000000000aa141: je short 0x00000000000aa150; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000000aa634: je short 0x00000000000aa63a; bsf eax, edx; ret; 
0x000000000aa6dd: je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8ac: je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x000000000af868: je short 0x00000000000af811; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b45e3: je short 0x00000000000b45fc; ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x40], edi; ret; 
0x000000000b4c84: je short 0x00000000000b4c68; ret; 
0x000000000b4ce1: je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x000000000b4d80: je short 0x00000000000b4d89; or dword ptr [rip+0x1404cf], 0x1; xor eax, eax; ret; 
0x000000000b4ed2: je short 0x00000000000b4ed8; ret; 
0x000000000b4f1c: je short 0x00000000000b4ee7; ret; 
0x000000000b4f42: je short 0x00000000000b4f48; ret; 
0x000000000b4f8c: je short 0x00000000000b4f57; ret; 
0x000000000b50bc: je short 0x00000000000b508a; ret; 
0x000000000b5132: je short 0x00000000000b5138; ret; 
0x000000000b517c: je short 0x00000000000b5147; ret; 
0x000000000b5232: je short 0x00000000000b5238; ret; 
0x000000000b527c: je short 0x00000000000b5247; ret; 
0x000000000b5482: je short 0x00000000000b5488; ret; 
0x000000000b6230: je short 0x00000000000b6256; sbb [rcx+rcx*4-0xe], cl; mov rdi, rbp; call rbx; 
0x000000000b6540: je short 0x00000000000b6566; sbb [rax-0x77], cl; out dx, eax; mov r9, r15; call rbx; 
0x000000000b666c: je short 0x00000000000b663a; ret; 
0x000000000b6689: je short 0x00000000000b668f; test edx, edx; jne short 0x00000000000b6680; ret; 
0x000000000b8f56: je short 0x00000000000b8f7c; push 0xffffffffffff7fe9; jmp qword ptr [rsi-0x70]; 
0x000000000b9944: je short 0x00000000000b993f; dec dword ptr [rax-0x7d]; ret; 
0x000000000bda56: je short 0x00000000000bda7c; push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70]; 
0x000000000be369: je short 0x00000000000be36f; mov eax, r8d; ret; 
0x000000000c1321: je short 0x00000000000c1347; sbb [rcx+rcx*4-0x17], cl; mov rdx, rbp; call rbx; 
0x000000000c46d0: je short 0x00000000000c46f6; sbb [rbp+rcx*4+0x5], cl; mov byte ptr [rdx-0x2dceffee], 0xe8; jmp qword ptr [rdi+rdi*8]; 
0x000000000c5689: je short 0x00000000000c56a0; mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000c57e0; ret; 
0x000000000c56b3: je short 0x00000000000c56d0; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000c57e0; ret; 
0x000000000c56e9: je short 0x00000000000c5700; mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000c57e0; ret; 
0x000000000c5713: je short 0x00000000000c5730; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000c57e0; ret; 
0x000000000c5749: je short 0x00000000000c5760; mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000c57e0; ret; 
0x000000000c5773: je short 0x00000000000c5780; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000c57e0; ret; 
0x000000000c5799: je short 0x00000000000c57b0; mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000c57e0; ret; 
0x000000000c57c3: je short 0x00000000000c57d0; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000c57e0; ret; 
0x000000000c5d26: je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x000000000c5d34: je short 0x00000000000c5d90; test al, 0xf0; jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c5f79: je short 0x00000000000c5f90; mov cl, dl; and cl, 0xf; je short 0x00000000000c5fa0; ret; 
0x000000000c5f80: je short 0x00000000000c5fa0; ret; 
0x000000000c5f95: je short 0x00000000000c5fb0; add rax, 0x2; ret; 
0x000000000c6074: je short 0x00000000000c607e; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000c611d: je short 0x00000000000c6130; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c60c0: je short 0x00000000000c6140; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c632c: je short 0x00000000000c6350; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c6bb1: je short 0x00000000000c6bd7; mov rsi, rdx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x000000000c6cb0: je short 0x00000000000c6ce0; mov [rsp+0x58], r12; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000d2093: je short 0x00000000000d20a0; xor eax, eax; ret; 
0x000000000d20c3: je short 0x00000000000d20d0; xor eax, eax; ret; 
0x000000000d214d: je short 0x00000000000d2180; call rax; 
0x000000000d21b1: je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x000000000d22d8: je short 0x00000000000d22fe; or al, 0x8b; cmp al, 0x24; mov eax, 0xe6; syscall; 
0x000000000d23f7: je short 0x00000000000d241d; and [rax-0x7d], cl; ret; 
0x000000000d26a7: je short 0x00000000000d26d4; pop rbx; pop rbp; pop r12; ret; 
0x000000000d335e: je short 0x00000000000d3375; mov rbx, r13; mov rdi, rbp; call r12; 
0x000000000d3d7d: je short 0x00000000000d3d7f; add [rax], al; syscall; 
0x000000000d3d7a: je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d6753: je short 0x00000000000d6768; cmp rax, 0xffffffffffffffff; mov edx, 0x0; cmove rax, rdx; ret; 
0x000000000d7284: je short 0x00000000000d7288; call rax; 
0x000000000d72ef: je short 0x00000000000d72ce; call rax; 
0x000000000d7d2a: je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d7d8a: je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7fba: je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d802a: je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d83fc: je short 0x00000000000d838d; cmp rdx, 0x2468; jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x000000000d85f9: je short 0x00000000000d862a; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x000000000d8614: je short 0x00000000000d862a; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000d85c1: je short 0x00000000000d862a; xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x000000000d995c: je short 0x00000000000d9968; mov rdi, rbx; call r15; 
0x000000000d9957: je short 0x00000000000d9971; test r15, r15; je short 0x00000000000d9968; mov rdi, rbx; call r15; 
0x000000000db405: je short 0x00000000000db40b; cmp al, 0x3f; jne short 0x00000000000db421; mov eax, 0x1; ret; 
0x000000000df21c: je short 0x00000000000df230; mov eax, r9d; ret; 
0x000000000df353: je short 0x00000000000df2ec; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000df2ea: je short 0x00000000000df330; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x000000000e032e: je short 0x00000000000e0369; ret; 
0x000000000e075c: je short 0x00000000000e079b; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000e08f2: je short 0x00000000000e0877; pop rbx; ret; 
0x000000000e08ed: je short 0x00000000000e0897; and ebx, 0x8; je short 0x00000000000e0877; pop rbx; ret; 
0x000000000ebccb: je short 0x00000000000ebca2; add [rcx+0x63], cl; rol byte ptr [rcx+0x29], 0x1; ret; 
0x000000000eda29: je short 0x00000000000eda4f; adc al, ch; jmp rbp; 
0x000000000eea8c: je short 0x00000000000eea98; mov rdi, rbx; call r15; 
0x000000000eea87: je short 0x00000000000eeaa1; test r15, r15; je short 0x00000000000eea98; mov rdi, rbx; call r15; 
0x000000000f1162: je short 0x00000000000f1168; ret; 
0x000000000f1157: je short 0x00000000000f1198; mov eax, 0xf; cmp dx, 0x2; je short 0x00000000000f1168; ret; 
0x000000000f13a0: je short 0x00000000000f13c6; or [rcx], dh; rol byte ptr [rcx-0x77], cl; ret; 
0x000000000f8f35: je short 0x00000000000f8f40; mov eax, 0x1c; syscall; 
0x000000000f912b: je short 0x00000000000f9160; xor edx, edx; xor esi, esi; mov rdi, rbp; call rax; 
0x000000000f917c: je short 0x00000000000f9182; mov eax, [rsp+0xc]; add rsp, 0x10; pop rbp; ret; 
0x000000000f91ae: je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x000000000f935a: je short 0x00000000000f9370; add rsp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000f95e6: je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x000000000f95e5: je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x000000000f9bf5: je short 0x00000000000f9c1b; adc [rbx-0x47e7db84], cl; add [rcx], eax; add [rax], al; syscall; 
0x000000000f9cce: je short 0x00000000000f9cf4; adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x000000000fa628: je short 0x00000000000fa5fc; mov [rsp], rdi; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x000000000fb9a6: je short 0x00000000000fb9cc; sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbc76: je short 0x00000000000fbc9c; sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbcf6: je short 0x00000000000fbd1c; sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x000000000fc368: je short 0x00000000000fc39a; mov [rbx+0x20], rax; xor eax, eax; pop rbx; ret; 
0x000000000fdd6c: je short 0x00000000000fdd78; neg eax; ret; 
0x000000000fdf6c: je short 0x00000000000fdf78; neg eax; ret; 
0x000000000fe0b6: je short 0x00000000000fe0e2; mov eax, 0x118; syscall; 
0x000000000fe14d: je short 0x00000000000fe156; xor eax, eax; cmp rdx, rcx; je short 0x00000000000fe160; ret; 
0x000000000fe154: je short 0x00000000000fe160; ret; 
0x000000000fe1b4: je short 0x00000000000fe1c0; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000000fe1ad: je short 0x00000000000fe1f0; cmp eax, 0x8000; je short 0x00000000000fe1c0; mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x000000000fe2fa: je short 0x00000000000fe308; add rsp, 0x90; pop rbx; ret; 
0x000000000fe539: je short 0x00000000000fe55f; or al, 0x8b; jl short 0x00000000000fe563; or [rax+0x11d], bh; syscall; 
0x000000000fe5f4: je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x000000000fe653: je short 0x00000000000fe668; mov eax, 0x48; syscall; 
0x000000000fe749: je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x000000000ff3e6: je short 0x00000000000ff40c; or [rax+0x127], bh; syscall; 
0x000000000ff496: je short 0x00000000000ff4bc; or [rax+0x128], bh; syscall; 
0x000000000ff7da: je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff84a: je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x000000000ff8c1: je short 0x00000000000ff8e0; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x000000000ff951: je short 0x00000000000ff970; mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x000000000ff9de: je short 0x00000000000ff9e1; ret; 
0x000000001008be: je short 0x00000000001008d8; mov [rip+0xf5619], rax; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000010135e: je short 0x0000000000101364; mov [rax+0x8], rdi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000101393: je short 0x0000000000101398; mov [rax], rdx; ret; 
0x00000000101492: je short 0x0000000000101480; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000101b92: je short 0x0000000000101b9f; add rax, 0x8; mov [rip+0xf4491], rax; mov rax, r8; ret; 
0x000000001029f3: je short 0x0000000000102a30; mov r10d, ebx; mov rdi, rbp; mov eax, 0x9; syscall; 
0x000000001037d3: je short 0x00000000001037e0; pop rbx; ret; 
0x000000001037d2: je short 0x00000000001037e0; pop rbx; ret; 
0x00000000103b02: je short 0x0000000000103b35; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000103b92: je short 0x0000000000103bc5; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000103c7a: je short 0x0000000000103cb5; test byte ptr [r10+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x00000000103f95: je short 0x0000000000103fb8; mov rsi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x00000000104533: je short 0x000000000010453a; test rsi, rsi; jne short 0x0000000000104540; ret; 
0x00000000104553: je short 0x000000000010455a; test rsi, rsi; jne short 0x0000000000104560; ret; 
0x00000000104b7d: je short 0x0000000000104bb0; call rax; 
0x0000000010520d: je short 0x0000000000105200; mov byte ptr [rax], 0x0; mov rax, rbx; pop rbx; ret; 
0x00000000105623: je short 0x0000000000105630; cmp rdi, rdx; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x00000000108af5: je short 0x0000000000108b05; mov rsi, r8; mov rdi, rbp; call r12; 
0x00000000108fc7: je short 0x0000000000108fca; ret; 
0x00000000109122: je short 0x0000000000109148; or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x00000000109398: je short 0x00000000001093be; sbb [rbx-0x47f7db84], cl; adc al, 0x1; add [rax], al; syscall; 
0x00000000109612: je short 0x0000000000109640; mov eax, 0x145; syscall; 
0x00000000109636: je short 0x0000000000109674; mov eax, r8d; ret; 
0x00000000109637: je short 0x0000000000109674; mov eax, r8d; ret; 
0x000000001096a6: je short 0x00000000001096d8; mov eax, 0x149; syscall; 
0x00000000109c1e: je short 0x0000000000109c21; ret; 
0x00000000109c0d: je short 0x0000000000109c36; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x0000000010ace8: je short 0x000000000010acee; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000010ad4a: je short 0x000000000010ad70; or [rbx-0x47e7db84], cl; and [rcx], al; add [rax], al; syscall; 
0x0000000010ae02: je short 0x000000000010ae28; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x0000000010aea8: je short 0x000000000010aece; adc [rbx-0x47f3db84], cl; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000010b0c5: je short 0x000000000010b0eb; adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x0000000010b3c9: je short 0x000000000010b3d0; ret; 
0x0000000010b60e: je short 0x000000000010b619; add edx, edx; mov eax, 0x14; syscall; 
0x0000000010bb65: je short 0x000000000010bb78; movsxd rbx, ebx; mov [rip+0xe18af], rbx; pop rbx; ret; 
0x0000000010bff0: je short 0x000000000010c020; add eax, 0x1; mov [rdx], ax; ret; 
0x0000000010bfaf: je short 0x000000000010c020; add eax, 0x1; mov [rdx], eax; ret; 
0x0000000010eba0: je short 0x000000000010ebb8; pop rbx; pop rbp; pop r12; ret; 
0x00000000110a94: je short 0x0000000000110aba; or [rcx+rcx*4-0x16], cl; mov rcx, r14; mov rdi, rbx; call r12; 
0x00000000110b36: je short 0x0000000000110b20; mov eax, r9d; ret; 
0x00000000111315: je short 0x0000000000111320; xor eax, eax; ret; 
0x000000001144b3: je short 0x00000000001144c0; mov eax, 0x7; ret; 
0x000000001144e2: je short 0x00000000001144f0; pop rbx; ret; 
0x000000001144d1: je short 0x0000000000114500; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x000000001155eb: je short 0x00000000001155f8; ret; 
0x00000000116d6c: je short 0x0000000000116d78; add rsp, 0x8; ret; 
0x00000000117756: je short 0x0000000000117756; jmp qword ptr [rsi+0xf]; 
0x00000000117757: je short 0x0000000000117756; jmp qword ptr [rsi+0xf]; 
0x0000000011b118: je short 0x000000000011b13e; sbb [rax-0x75], cl; jl short 0x000000000011b143; adc [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x0000000011b5b8: je short 0x000000000011b5de; sbb [rbx+0x4c30247c], cl; mov edx, esp; call qword ptr [rsp+0x48]; 
0x0000000011f0ef: je short 0x000000000011f0f6; mov rdi, rbx; call rax; 
0x0000000011f3ff: je short 0x000000000011f406; mov rdi, rbx; call rax; 
0x0000000011f4af: je short 0x000000000011f4ba; lea rdi, [rip+0xd7728]; call rax; 
0x00000000120398: je short 0x00000000001203a8; mov rax, [rip+0xdc8c7]; ret; 
0x000000001225f3: je short 0x00000000001225e8; pop rbx; ret; 
0x00000000123105: je short 0x0000000000123110; test eax, eax; jne short 0x0000000000123120; mov eax, r8d; ret; 
0x00000000124913: je short 0x0000000000124920; pop rbx; ret; 
0x00000000127d0b: je short 0x0000000000127d40; mov rax, [rip+0xc50fc]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x000000001281bc: je short 0x00000000001281e2; add [rcx-0x77], eax; ret; 
0x000000001286a3: je short 0x0000000000128665; lea rax, [rdx+0x2]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000128663: je short 0x00000000001286a0; mov rax, [rip+0xc47a4]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000129171: je short 0x0000000000129178; ret; 
0x0000000012c6db: je short 0x000000000012c6e0; ret; 
0x0000000012c6d4: je short 0x000000000012c708; xor eax, eax; cmp cx, dx; je short 0x000000000012c6e0; ret; 
0x0000000012e1df: je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x0000000012e29a: je short 0x000000000012e2c0; mov eax, r8d; ret; 
0x0000000012f163: je short 0x000000000012f171; add qword ptr [rax+0x10], 0x1; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x0000000012f16a: je short 0x000000000012f190; add rsp, 0x8; ret; 
0x0000000012f9a7: je short 0x000000000012f9af; cmp [rax+0x10], rdi; jne short 0x000000000012f9a0; ret; 
0x00000000131eba: je short 0x0000000000131ec8; xor eax, eax; cmp edx, 0x1; jne short 0x0000000000131ee0; ret; 
0x000000001322d7: je short 0x00000000001322ef; mov rdi, [rip+0xca1e0]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000133a93: je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x00000000138e52: je short 0x0000000000138e59; mov rdi, rbp; call rax; 
0x0000000013904f: je short 0x0000000000139075; adc [rax-0x75], cl; and al, 0x8; mov rdi, rbp; call rcx; 
0x000000001390eb: je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000139171: je short 0x00000000001391bb; mov rdi, [r12]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000139259: je short 0x0000000000139260; mov rdi, rbp; call rax; 
0x0000000013923c: je short 0x00000000001392a0; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139370: je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f9: je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000139528: je short 0x0000000000139530; ret; 
0x00000000139bce: je short 0x0000000000139b9b; mov qword ptr [rsp+0x8], 0x0; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139bf5: je short 0x0000000000139b9b; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013a02a: je short 0x0000000000139fe6; mov rax, [rsp+0xd8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000013a04c: je short 0x000000000013a053; mov rdi, rbx; call rax; 
0x0000000013a3af: je short 0x000000000013a3b6; mov rdi, rbx; call rax; 
0x0000000013a5b3: je short 0x000000000013a5c0; xor eax, eax; ret; 
0x0000000013a63a: je short 0x000000000013a660; mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x0000000013a66a: je short 0x000000000013a680; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000013a866: je short 0x000000000013a88c; add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013a8db: je short 0x000000000013a901; add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013abc6: je short 0x000000000013abcd; mov rdi, r13; call rax; 
0x0000000013ae55: je short 0x000000000013ae70; mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000013b34d: je short 0x000000000013b378; add rsp, 0x10; pop rbx; ret; 
0x0000000013b37d: je short 0x000000000013b3a3; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013b41c: je short 0x000000000013b3c5; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000013b3e0: je short 0x000000000013b3f2; mov rax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013b424: je short 0x000000000013b44a; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000013ccee: je short 0x000000000013cd00; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013cdae: je short 0x000000000013cdc0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013ce5e: je short 0x000000000013ce70; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013dbe3: je short 0x000000000013dbee; lea rdi, [rbp+0xc8]; call rax; 
0x0000000013de65: je short 0x000000000013de8b; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x0000000013de94: je short 0x000000000013deba; xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x0000000013df79: je short 0x000000000013df3b; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000013e086: je short 0x000000000013e0ac; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x0000000013e566: je short 0x000000000013e56d; mov rdi, rbp; call rax; 
0x0000000013e72e: je short 0x000000000013e737; lea rdi, [r12+0x10]; call rax; 
0x0000000013efc4: je short 0x000000000013efd0; xor eax, eax; ret; 
0x0000000013f1df: je short 0x000000000013f1f8; mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f1e7: je short 0x000000000013f20d; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000013f28c: je short 0x000000000013f2b2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000013f7a1: je short 0x000000000013f7a8; mov rdi, rbp; call rax; 
0x0000000013f7d3: je short 0x000000000013f7e0; mov eax, 0x1; ret; 
0x0000000013f912: je short 0x000000000013f919; mov rdi, r13; call rax; 
0x000000001402d0: je short 0x00000000001402d8; lea rdi, [rbp+0x68]; call rax; 
0x00000000140498: je short 0x00000000001404be; or [rbp-0x74b70098], cl; jo short 0x000000000014042c; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x000000001404b8: je short 0x00000000001404de; sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x000000001404e7: je short 0x000000000014050d; xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x000000001405c2: je short 0x0000000000140588; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000001406be: je short 0x00000000001406e4; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140985: je short 0x000000000014098c; mov rdi, rbp; call rax; 
0x00000000140cc0: je short 0x0000000000140cc8; lea rdi, [rbp+0x58]; call rax; 
0x00000000140e46: je short 0x0000000000140e6c; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x00000000141605: je short 0x0000000000141670; mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000001419cb: je short 0x0000000000141a15; mov eax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000001419ca: je short 0x0000000000141a40; mov rax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x00000000141f51: je short 0x0000000000141f61; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000142636: je short 0x0000000000142601; mov fs:[rbx], rax; pop rbx; ret; 
0x000000001425ff: je short 0x0000000000142608; pop rbx; ret; 
0x0000000014269e: je short 0x000000000014265d; mov fs:[rbx], rax; pop rbx; ret; 
0x0000000014265b: je short 0x0000000000142660; pop rbx; ret; 
0x000000001426cb: je short 0x00000000001426d8; sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x0000000014273b: je short 0x0000000000142748; add rax, 0xa0; pop rbx; ret; 
0x000000001427ab: je short 0x00000000001427b8; add rax, 0xa8; pop rbx; ret; 
0x000000001431fb: je short 0x0000000000143200; ret; 
0x000000001432de: je short 0x00000000001432e7; lea rdi, [r12+0x10]; call rax; 
0x00000000143917: je short 0x0000000000143920; lea rdi, [r12+0x10]; call rax; 
0x00000000143984: je short 0x00000000001439c0; mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000014493d: je short 0x0000000000144970; add rsp, 0x10; pop rbx; ret; 
0x00000000144975: je short 0x000000000014499b; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000001449ad: je short 0x00000000001449e0; add rsp, 0x10; pop rbx; ret; 
0x000000001449e4: je short 0x0000000000144a0a; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144a0f: je short 0x0000000000144a30; cmp eax, 0x2; sete al; movzx eax, al; ret; 
0x00000000144a56: je short 0x0000000000144a60; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000144b03: je short 0x0000000000144b29; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144afb: je short 0x0000000000144b51; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000144b66: je short 0x0000000000144b8c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000144bd3: je short 0x0000000000144bf9; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144bcb: je short 0x0000000000144c21; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000144c36: je short 0x0000000000144c5c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000144c9d: je short 0x0000000000144cd0; add rsp, 0x10; pop rbx; ret; 
0x00000000144cd6: je short 0x0000000000144cfc; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144d0d: je short 0x0000000000144d40; add rsp, 0x10; pop rbx; ret; 
0x00000000144d45: je short 0x0000000000144d6b; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144d8e: je short 0x0000000000144db4; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144dfe: je short 0x0000000000144e24; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144e5d: je short 0x0000000000144e90; add rsp, 0x10; pop rbx; ret; 
0x00000000144e96: je short 0x0000000000144ebc; or [rbp-0x3f6af02e], al; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144ecd: je short 0x0000000000144f00; add rsp, 0x10; pop rbx; ret; 
0x00000000144f05: je short 0x0000000000144f2b; or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144f84: je short 0x0000000000144faa; sbb [rax-0x77], cl; and al, 0x18; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000145306: je short 0x000000000014532c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x000000001452fe: je short 0x0000000000145362; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145376: je short 0x000000000014539c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001453f6: je short 0x000000000014541c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x000000001453ee: je short 0x000000000014544a; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145466: je short 0x000000000014548c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001454b1: je short 0x00000000001454e0; mov eax, r8d; ret; 
0x00000000145501: je short 0x0000000000145530; mov eax, r8d; ret; 
0x0000000014555d: je short 0x0000000000145590; add rsp, 0x10; pop rbx; ret; 
0x00000000145595: je short 0x00000000001455bb; or al, 0x89; and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000001455cd: je short 0x0000000000145600; add rsp, 0x10; pop rbx; ret; 
0x00000000145605: je short 0x000000000014562b; or al, 0x89; and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000014563d: je short 0x0000000000145670; add rsp, 0x10; pop rbx; ret; 
0x00000000145675: je short 0x000000000014569b; or al, 0x89; and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000001456ad: je short 0x00000000001456e0; add rsp, 0x10; pop rbx; ret; 
0x000000001456e5: je short 0x000000000014570b; or al, 0x89; and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000145c08: je short 0x0000000000145c0c; xor eax, eax; sub rsp, 0xffffffffffffff80; pop rbx; ret; 
0x0000000014a46a: je short 0x000000000014a480; add rsp, 0x180; mov rax, r8; pop rbp; ret; 
0x0000000014b274: je short 0x000000000014b280; add rsp, 0x18; ret; 
0x0000000014b2bc: je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000014be4d: je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x0000000014c2e2: je short 0x000000000014c300; mov rax, [rip+0xa0bdd]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014c365: je short 0x000000000014c34c; mov [rsp+0xc], eax; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x000000001529e6: je short 0x00000000001529ee; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000169a43: je short 0x0000000000169a06; lea r10, [r10+r9]; jmp r10; 
0x0000000016a715: je short 0x000000000016a718; xchg edx, eax; sub eax, edx; ret; 
0x0000000016a813: je short 0x000000000016a7d6; lea r10, [r10+r9]; jmp r10; 
0x0000000016b6fa: je short 0x000000000016b6fd; xchg edx, eax; sub eax, edx; ret; 
0x0000000016b853: je short 0x000000000016b816; lea r10, [r10+r9]; jmp r10; 
0x0000000016d423: je short 0x000000000016d3e6; lea r10, [r10+r9]; jmp r10; 
0x0000000016f358: je short 0x000000000016f330; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000016f4a0: je short 0x000000000016f480; xor eax, eax; ret; 
0x00000000170043: je short 0x0000000000170090; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000170291: je short 0x0000000000170310; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001702b7: je short 0x0000000000170314; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x00000000170451: je short 0x00000000001704b2; and ch, al; std; xlat [rbx]; ret; 
0x0000000017053f: je short 0x00000000001705a0; and ch, al; std; xlat [rbx]; ret; 
0x0000000017069a: je short 0x0000000000170660; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000170aff: je short 0x0000000000170ad2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x00000000170b59: je short 0x0000000000170b72; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x00000000170b95: je short 0x0000000000170b9c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000170c93: je short 0x0000000000170c56; lea r10, [r10+r9]; jmp r10; 
0x00000000172323: je short 0x00000000001722e6; lea r10, [r10+r9]; jmp r10; 
0x00000000173e78: je short 0x0000000000173ee0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001741cf: je short 0x0000000000174184; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001741f4: je short 0x0000000000174210; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000174243: je short 0x00000000001742a0; tzcnt eax, eax; vzeroupper; ret; 
0x000000001743d1: je short 0x0000000000174440; tzcnt eax, eax; vzeroupper; ret; 
0x00000000174bbf: je short 0x0000000000174c40; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000017595f: je short 0x00000000001759e0; mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x0000000017664f: je short 0x00000000001766d0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; vzeroupper; ret; 
0x00000000177de8: je short 0x0000000000177d90; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177e86: je short 0x0000000000177ee0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000178e5a: je short 0x0000000000178df4; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000178e8f: je short 0x0000000000178ea0; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x0000000017a7c7: je short 0x000000000017a7cb; add [rax], al; xor eax, eax; ret; 
0x0000000017e1e5: je short 0x000000000017e200; mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x000000000017e320; ret; 
0x0000000017e213: je short 0x000000000017e230; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x0000000017e58b: je short 0x000000000017e5a4; std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x0000000017ee2f: je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017f141: je short 0x000000000017f147; vzeroall; ret; 
0x0000000017f3ff: je short 0x000000000017f3d2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x0000000017f459: je short 0x000000000017f472; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x0000000017f495: je short 0x000000000017f49c; sbb eax, eax; or eax, 0x1; ret; 
0x0000000017f55a: je short 0x000000000017f560; vzeroall; ret; 
0x0000000017fc51: je short 0x000000000017fcb2; and ch, al; std; xlat [rbx]; ret; 
0x0000000017fd0c: je short 0x000000000017fd12; vzeroall; ret; 
0x0000000017fd4f: je short 0x000000000017fdb0; and ch, al; std; xlat [rbx]; ret; 
0x0000000018005a: je short 0x0000000000180060; vzeroall; ret; 
0x00000000180183: je short 0x0000000000180189; vzeroall; ret; 
0x00000000180510: je short 0x0000000000180516; vzeroall; ret; 
0x00000000180563: je short 0x0000000000180569; vzeroall; ret; 
0x00000000180b85: je short 0x0000000000180b8b; vzeroall; ret; 
0x00000000180e0e: je short 0x0000000000180e14; vzeroall; ret; 
0x00000000181291: je short 0x0000000000181297; vzeroall; ret; 
0x00000000181e6b: je short 0x0000000000181e71; vzeroall; ret; 
0x0000000018221b: je short 0x0000000000182221; vzeroall; ret; 
0x000000001824c1: je short 0x00000000001824c7; vzeroall; ret; 
0x00000000182adb: je short 0x0000000000182ae1; vzeroall; ret; 
0x00000000182f73: je short 0x0000000000182f79; vzeroall; ret; 
0x00000000183789: je short 0x000000000018378f; vzeroall; ret; 
0x0000000018408c: je short 0x0000000000184092; vzeroall; ret; 
0x000000001841fc: je short 0x0000000000184202; vzeroall; ret; 
0x000000001844ff: je short 0x0000000000184505; vzeroall; ret; 
0x00000000184560: je short 0x0000000000184566; vzeroall; ret; 
0x00000000184b44: je short 0x0000000000184b4a; vzeroall; ret; 
0x00000000184bc0: je short 0x0000000000184bc6; vzeroall; ret; 
0x000000001853cf: je short 0x00000000001853d5; vzeroall; ret; 
0x00000000185551: je short 0x0000000000185557; vzeroall; ret; 
0x00000000185692: je short 0x0000000000185698; vzeroall; ret; 
0x000000001859d6: je short 0x00000000001859dc; vzeroall; ret; 
0x00000000185cc8: je short 0x0000000000185c70; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000185d56: je short 0x0000000000185da0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000185f73: je short 0x0000000000185f81; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000186435: je short 0x000000000018643c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000186652: je short 0x000000000018666b; std; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x00000000186f9b: je short 0x0000000000186f20; bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x00000000186f4d: je short 0x0000000000186f20; bsr eax, eax; add rax, rdi; ret; 
0x00000000187201: je short 0x0000000000187280; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000187229: je short 0x0000000000187284; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000018765f: je short 0x00000000001876e0; mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x0000000018883f: je short 0x00000000001888c0; mov byte ptr [rdi], 0x0; ret; 
0x00000000188a26: je short 0x0000000000188a2f; and [rbp-0x3a], dh; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188b8e: je short 0x0000000000188b97; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188bb6: je short 0x0000000000188bbf; and [rbp-0x22], dh; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018976f: je short 0x00000000001897f0; mov byte ptr [rdi], 0x0; ret; 
0x000000001898e5: je short 0x0000000000189940; tzcnt eax, eax; ret; 
0x0000000018b693: je short 0x000000000018b700; tzcnt eax, eax; ret; 
0x0000000018bacf: je short 0x000000000018ba84; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000018baf4: je short 0x000000000018bb00; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000018bbc5: je short 0x000000000018bb4e; and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd1a: je short 0x000000000018bca3; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bd45: je short 0x000000000018bcce; and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018be05: je short 0x000000000018be0f; setl al; neg eax; or eax, 0x1; ret; 
0x0000000018c365: je short 0x000000000018c3c0; tzcnt eax, eax; ret; 
0x0000000018c545: je short 0x000000000018c54f; setl al; neg eax; or eax, 0x1; ret; 
0x0000000018cbb3: je short 0x000000000018cc20; tzcnt eax, eax; ret; 
0x0000000018d04f: je short 0x000000000018d004; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018d074: je short 0x000000000018d080; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018d11c: je short 0x000000000018d180; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d340: je short 0x000000000018d34e; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018d7a8: je short 0x000000000018d750; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d836: je short 0x000000000018d880; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018da63: je short 0x000000000018da71; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018dac1: je short 0x000000000018db40; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dae9: je short 0x000000000018db44; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000018dcbc: je short 0x000000000018dd20; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018df10: je short 0x000000000018df1e; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000191ebd: je short 0x0000000000191ee3; adc [rcx-0x77], cl; ret; 
0x0000000019260d: je short 0x0000000000192611; add bl, dh; divps xmm0, [rip+0x2877c]; ret; 
0x00000000192606: je short 0x0000000000192618; movss xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x00000000192888: je short 0x000000000019288c; call rax; 
0x000000001929b3: je short 0x00000000001929bc; call rax; 
0x000000001929aa: je short 0x00000000001929c1; mov rax, [rdi+0x20]; test rax, rax; je short 0x00000000001929bc; call rax; 
0x000000000435c7: jg 0x00000000000436e8; mov edi, ebp; call rax; 
0x00000000043662: jg 0x0000000000043710; call rax; 
0x00000000043618: jg 0x0000000000043730; mov esi, ebp; mov rdi, r13; call rax; 
0x00000000043b09: jg 0x0000000000043be8; xor esi, esi; mov rdi, r9; call r13; 
0x0000000011f2b9: jg 0x000000000011f368; add rsp, 0x10; pop rbp; ret; 
0x0000000002db68: jg short 0x000000000002daed; ret far; 
0x0000000003afb0: jg short 0x000000000003afc8; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000040300: jg short 0x000000000004030b; bnd je 0x0000000000040250; ret; 
0x0000000004085a: jg short 0x000000000004087f; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000004096b: jg short 0x00000000000408ed; shl edi, 0x17; or esi, edi; movd xmm0, esi; ret; 
0x00000000040907: jg short 0x0000000000040909; je short 0x0000000000040910; ret; 
0x00000000040b90: jg short 0x0000000000040bda; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000412b4: jg short 0x00000000000412de; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000041314: jg short 0x000000000004133e; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000041686: jg short 0x0000000000041688; add [rax], al; syscall; 
0x000000000434bc: jg short 0x00000000000434e0; xor eax, eax; pop rbx; ret; 
0x0000000004405d: jg short 0x0000000000044080; pop rbp; ret; 
0x0000000004416a: jg short 0x0000000000044190; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000441e1: jg short 0x0000000000044200; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x00000000044612: jg short 0x0000000000044655; mov [rax], edx; mov [rsi], edx; ret; 
0x0000000004d763: jg short 0x000000000004d775; syscall; 
0x0000000004d7ce: jg short 0x000000000004d820; add rsp, 0x10; pop rbx; ret; 
0x000000000521a3: jg short 0x00000000000521a5; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000052131: jg short 0x00000000000521a8; in al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000005c2ff: jg short 0x000000000005c308; ret; 
0x00000000072886: jg short 0x0000000000072897; test [rbx-0x7c00001b], dh; ret; 
0x0000000007650a: jg short 0x0000000000076530; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000076721: jg short 0x0000000000076740; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000783d5: jg short 0x00000000000783e0; ret; 
0x0000000007e339: jg short 0x000000000007e370; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007e3f9: jg short 0x000000000007e430; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007ee50: jg short 0x000000000007ee60; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007fc48: jg short 0x000000000007fbcd; inc byte ptr [rdx]; cmovne edx, ecx; mov [rdi], edx; ret; 
0x00000000082f8d: jg short 0x0000000000082fc0; add rsp, 0x8; ret; 
0x00000000084e85: jg short 0x0000000000084e90; ret; 
0x000000000860b1: jg short 0x00000000000860c3; call qword ptr [rax+0x358]; 
0x00000000086adc: jg short 0x0000000000086b10; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000881f9: jg short 0x000000000008823b; xor dh, 0x81; syscall; 
0x0000000008aa09: jg short 0x000000000008aa54; cmovbe esi, eax; syscall; 
0x0000000008aac3: jg short 0x000000000008aae0; mov eax, r12d; pop r12; ret; 
0x0000000008ce97: jg short 0x000000000008cea9; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008e327: jg short 0x000000000008e358; add rsp, 0x18; ret; 
0x0000000008e463: jg short 0x000000000008e470; mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x0000000008e77d: jg short 0x000000000008e787; call qword ptr [rbx]; 
0x0000000008eca5: jg short 0x000000000008ecef; mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f4c2: jg short 0x000000000008f50c; mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f738: jg short 0x000000000008f786; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008fb1e: jg short 0x000000000008fb68; mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000984a1: jg short 0x00000000000984c8; pop rbx; pop rbp; pop r12; ret; 
0x00000000098cca: jg short 0x0000000000098cd1; pop rbx; pop rbp; pop r12; ret; 
0x0000000009a08a: jg short 0x000000000009a0d4; mov rsi, rbp; call rax; 
0x000000000a575d: jg short 0x00000000000a57a6; adc [rax], al; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000af976: jg short 0x00000000000af97f; ret; 
0x000000000af986: jg short 0x00000000000af98f; mov [rdi+0x10], dh; ret; 
0x000000000af99a: jg short 0x00000000000af9a3; mov [rdi+0x10], cx; ret; 
0x000000000af9b9: jg short 0x00000000000af9c2; mov [rdi+0xf], ecx; ret; 
0x000000000af9c9: jg short 0x00000000000af9d2; mov [rdi+0x10], ecx; ret; 
0x000000000af9d9: jg short 0x00000000000af9e2; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000af9fa: jg short 0x00000000000afa03; mov [rdi+0xe], rcx; ret; 
0x000000000afa1a: jg short 0x00000000000afa23; mov [rdi+0xf], rcx; ret; 
0x000000000afa3a: jg short 0x00000000000afa43; mov [rdi+0x10], rcx; ret; 
0x000000000afa5a: jg short 0x00000000000afa63; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa7e: jg short 0x00000000000afa87; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000afa9d: jg short 0x00000000000afaa6; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000afabd: jg short 0x00000000000afac6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000afadb: jg short 0x00000000000afae4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000afafb: jg short 0x00000000000afb04; movdqu [rdi+0xe], xmm2; ret; 
0x000000000afb1b: jg short 0x00000000000afb24; movdqu [rdi+0xf], xmm2; ret; 
0x000000000afb3b: jg short 0x00000000000afb44; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b00c8: jg short 0x00000000000b00cb; jne 0x00000000000b0980; ret; 
0x000000000b00ec: jg short 0x00000000000b00f0; jne 0x00000000000b0980; ret; 
0x000000000b010f: jg short 0x00000000000b0114; jne 0x00000000000b0980; ret; 
0x000000000b012a: jg short 0x00000000000b0130; jne 0x00000000000b0980; ret; 
0x000000000b014d: jg short 0x00000000000b0154; jne 0x00000000000b0980; ret; 
0x000000000b0172: jg short 0x00000000000b017a; jne 0x00000000000b0980; ret; 
0x000000000b0190: jg short 0x00000000000b0199; jne 0x00000000000b0980; ret; 
0x000000000b01ac: jg short 0x00000000000b01b6; jne 0x00000000000b0980; ret; 
0x000000000b01cf: jg short 0x00000000000b01da; jne 0x00000000000b0980; ret; 
0x000000000b01f4: jg short 0x00000000000b0200; jne 0x00000000000b0980; ret; 
0x000000000b0212: jg short 0x00000000000b021f; jne 0x00000000000b0980; ret; 
0x000000000b0232: jg short 0x00000000000b0240; jne 0x00000000000b0980; ret; 
0x000000000b0254: jg short 0x00000000000b0263; jne 0x00000000000b0980; ret; 
0x000000000b0274: jg short 0x00000000000b0284; jne 0x00000000000b0980; ret; 
0x000000000b0294: jg short 0x00000000000b02a5; jne 0x00000000000b0980; ret; 
0x000000000b02a6: jg short 0x00000000000b02af; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b02ae: jg short 0x00000000000b02c0; jne 0x00000000000b0980; ret; 
0x000000000b02d1: jg short 0x00000000000b02e4; jne 0x00000000000b0980; ret; 
0x000000000b02f6: jg short 0x00000000000b030a; jne 0x00000000000b0980; ret; 
0x000000000b0314: jg short 0x00000000000b0329; jne 0x00000000000b0980; ret; 
0x000000000b0334: jg short 0x00000000000b034a; jne 0x00000000000b0980; ret; 
0x000000000b0357: jg short 0x00000000000b036e; jne 0x00000000000b0980; ret; 
0x000000000b0376: jg short 0x00000000000b038e; jne 0x00000000000b0980; ret; 
0x000000000b0396: jg short 0x00000000000b03af; jne 0x00000000000b0980; ret; 
0x000000000b03b6: jg short 0x00000000000b03d0; jne 0x00000000000b0980; ret; 
0x000000000b03d9: jg short 0x00000000000b03f4; jne 0x00000000000b0980; ret; 
0x000000000b040e: jg short 0x00000000000b042a; jne 0x00000000000b0980; ret; 
0x000000000b043c: jg short 0x00000000000b0459; jne 0x00000000000b0980; ret; 
0x000000000b046c: jg short 0x00000000000b048a; jne 0x00000000000b0980; ret; 
0x000000000b0498: jg short 0x00000000000b04b7; jne 0x00000000000b0980; ret; 
0x000000000b04c8: jg short 0x00000000000b04e8; jne 0x00000000000b0980; ret; 
0x000000000b048f: jg short 0x00000000000b04e8; or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b04f8: jg short 0x00000000000b0519; jne 0x00000000000b0980; ret; 
0x000000000b04ef: jg short 0x00000000000b0548; cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000b0519; jne 0x00000000000b0980; ret; 
0x000000000b0528: jg short 0x00000000000b054a; jne 0x00000000000b0980; ret; 
0x000000000b0646: jg short 0x00000000000b064f; ret; 
0x000000000b0659: jg short 0x00000000000b0662; mov [rdi+0x10], cl; ret; 
0x000000000b066a: jg short 0x00000000000b0673; mov [rdi+0x10], cx; ret; 
0x000000000b0689: jg short 0x00000000000b0692; mov [rdi+0xf], ecx; ret; 
0x000000000b0699: jg short 0x00000000000b06a2; mov [rdi+0x10], ecx; ret; 
0x000000000b06ac: jg short 0x00000000000b06b5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000b06ca: jg short 0x00000000000b06d3; mov [rdi+0xe], rcx; ret; 
0x000000000b06ea: jg short 0x00000000000b06f3; mov [rdi+0xf], rcx; ret; 
0x000000000b070a: jg short 0x00000000000b0713; mov [rdi+0x10], rcx; ret; 
0x000000000b072d: jg short 0x00000000000b0736; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b074e: jg short 0x00000000000b0757; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b076d: jg short 0x00000000000b0776; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b078d: jg short 0x00000000000b0796; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b07ab: jg short 0x00000000000b07b4; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b07cb: jg short 0x00000000000b07d4; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b07eb: jg short 0x00000000000b07f4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b080b: jg short 0x00000000000b0814; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b082e: jg short 0x00000000000b0837; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b0942: jg short 0x00000000000b094b; ret; 
0x000000000b0932: jg short 0x00000000000b097b; inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000b09ed: jg short 0x00000000000b0986; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a76: jg short 0x00000000000b0aa8; ret; 
0x000000000b0fe6: jg short 0x00000000000b0fef; lea rax, [rdi+0xf]; ret; 
0x000000000b0ff6: jg short 0x00000000000b0fff; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000b100a: jg short 0x00000000000b1013; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1029: jg short 0x00000000000b1032; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b1049: jg short 0x00000000000b1052; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1069: jg short 0x00000000000b1072; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000b108a: jg short 0x00000000000b1093; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b10aa: jg short 0x00000000000b10b3; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b10ca: jg short 0x00000000000b10d3; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b10ea: jg short 0x00000000000b10f3; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000b110e: jg short 0x00000000000b1117; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b112d: jg short 0x00000000000b1136; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b114d: jg short 0x00000000000b1156; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b116b: jg short 0x00000000000b1174; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b118b: jg short 0x00000000000b1194; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b11ab: jg short 0x00000000000b11b4; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b116f: jg short 0x00000000000b11c8; or eax, 0x1c478d48; ret; 
0x000000000b11cb: jg short 0x00000000000b11d4; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b177b: jg short 0x00000000000b177e; jne 0x00000000000b21a0; ret; 
0x000000000b17a0: jg short 0x00000000000b17a4; jne 0x00000000000b21a0; ret; 
0x000000000b17c3: jg short 0x00000000000b17c8; jne 0x00000000000b21a0; ret; 
0x000000000b17de: jg short 0x00000000000b17e4; jne 0x00000000000b21a0; ret; 
0x000000000b1801: jg short 0x00000000000b1808; jne 0x00000000000b21a0; ret; 
0x000000000b1826: jg short 0x00000000000b182e; jne 0x00000000000b21a0; ret; 
0x000000000b1844: jg short 0x00000000000b184d; jne 0x00000000000b21a0; ret; 
0x000000000b1860: jg short 0x00000000000b186a; jne 0x00000000000b21a0; ret; 
0x000000000b1883: jg short 0x00000000000b188e; jne 0x00000000000b21a0; ret; 
0x000000000b18a8: jg short 0x00000000000b18b4; jne 0x00000000000b21a0; ret; 
0x000000000b18d6: jg short 0x00000000000b18e3; jne 0x00000000000b21a0; ret; 
0x000000000b18f6: jg short 0x00000000000b1904; jne 0x00000000000b21a0; ret; 
0x000000000b1918: jg short 0x00000000000b1927; jne 0x00000000000b21a0; ret; 
0x000000000b1948: jg short 0x00000000000b1958; jne 0x00000000000b21a0; ret; 
0x000000000b1978: jg short 0x00000000000b1989; jne 0x00000000000b21a0; ret; 
0x000000000b19a2: jg short 0x00000000000b19b4; jne 0x00000000000b21a0; ret; 
0x000000000b19c5: jg short 0x00000000000b19d8; jne 0x00000000000b21a0; ret; 
0x000000000b19ea: jg short 0x00000000000b19fe; jne 0x00000000000b21a0; ret; 
0x000000000b1a18: jg short 0x00000000000b1a2d; jne 0x00000000000b21a0; ret; 
0x000000000b1a48: jg short 0x00000000000b1a5e; jne 0x00000000000b21a0; ret; 
0x000000000b1a7b: jg short 0x00000000000b1a92; jne 0x00000000000b21a0; ret; 
0x000000000b1aaa: jg short 0x00000000000b1ac2; jne 0x00000000000b21a0; ret; 
0x000000000b1ada: jg short 0x00000000000b1af3; jne 0x00000000000b21a0; ret; 
0x000000000b1b0a: jg short 0x00000000000b1b24; jne 0x00000000000b21a0; ret; 
0x000000000b1b3d: jg short 0x00000000000b1b58; jne 0x00000000000b21a0; ret; 
0x000000000b1b72: jg short 0x00000000000b1b8e; jne 0x00000000000b21a0; ret; 
0x000000000b1ba0: jg short 0x00000000000b1bbd; jne 0x00000000000b21a0; ret; 
0x000000000b1bd0: jg short 0x00000000000b1bee; jne 0x00000000000b21a0; ret; 
0x000000000b1bfc: jg short 0x00000000000b1c1b; jne 0x00000000000b21a0; ret; 
0x000000000b1c2c: jg short 0x00000000000b1c4c; jne 0x00000000000b21a0; ret; 
0x000000000b1c5c: jg short 0x00000000000b1c7d; jne 0x00000000000b21a0; ret; 
0x000000000b1c8c: jg short 0x00000000000b1cae; jne 0x00000000000b21a0; ret; 
0x000000000b1e36: jg short 0x00000000000b1e3f; lea rax, [rdi+0x10]; ret; 
0x000000000b1e49: jg short 0x00000000000b1e52; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b1e6a: jg short 0x00000000000b1e73; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000b1e89: jg short 0x00000000000b1e92; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea9: jg short 0x00000000000b1eb2; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000b1ecc: jg short 0x00000000000b1ed5; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000b1eea: jg short 0x00000000000b1ef3; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f0a: jg short 0x00000000000b1f13; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f2a: jg short 0x00000000000b1f33; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000b1f4d: jg short 0x00000000000b1f56; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b1f6e: jg short 0x00000000000b1f77; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f8d: jg short 0x00000000000b1f96; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1fad: jg short 0x00000000000b1fb6; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fcb: jg short 0x00000000000b1fd4; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1feb: jg short 0x00000000000b1ff4; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b200b: jg short 0x00000000000b2014; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b1fcf: jg short 0x00000000000b2028; or eax, 0x1d478d48; ret; 
0x000000000b202b: jg short 0x00000000000b2034; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000b204e: jg short 0x00000000000b2057; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b2162: jg short 0x00000000000b216b; ret; 
0x000000000b2152: jg short 0x00000000000b219b; inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000b2296: jg short 0x00000000000b22c8; lea rax, [rdi+0x40]; ret; 
0x000000000b2295: jg short 0x00000000000b2316; xor [rax-0x73], cl; ret; 
0x000000000b232d: jg short 0x00000000000b233e; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2c26: jg short 0x00000000000b2c2f; ret; 
0x000000000b2c36: jg short 0x00000000000b2c3f; mov [rdi+0x10], dh; ret; 
0x000000000b2c4a: jg short 0x00000000000b2c53; mov [rdi+0x10], cx; ret; 
0x000000000b2c69: jg short 0x00000000000b2c72; mov [rdi+0xf], ecx; ret; 
0x000000000b2c79: jg short 0x00000000000b2c82; mov [rdi+0x10], ecx; ret; 
0x000000000b2c89: jg short 0x00000000000b2c92; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000b2caa: jg short 0x00000000000b2cb3; mov [rdi+0xe], rcx; ret; 
0x000000000b2cca: jg short 0x00000000000b2cd3; mov [rdi+0xf], rcx; ret; 
0x000000000b2cea: jg short 0x00000000000b2cf3; mov [rdi+0x10], rcx; ret; 
0x000000000b2d0a: jg short 0x00000000000b2d13; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000b2d2e: jg short 0x00000000000b2d37; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b2d4d: jg short 0x00000000000b2d56; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b2d6d: jg short 0x00000000000b2d76; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b2d8b: jg short 0x00000000000b2d94; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b2dab: jg short 0x00000000000b2db4; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b2dcb: jg short 0x00000000000b2dd4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b2deb: jg short 0x00000000000b2df4; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b36f6: jg short 0x00000000000b36ff; ret; 
0x000000000b3706: jg short 0x00000000000b370f; mov [rdi+0x10], dh; ret; 
0x000000000b371a: jg short 0x00000000000b3723; mov [rdi+0x10], cx; ret; 
0x000000000b3739: jg short 0x00000000000b3742; mov [rdi+0xf], ecx; ret; 
0x000000000b3749: jg short 0x00000000000b3752; mov [rdi+0x10], ecx; ret; 
0x000000000b3759: jg short 0x00000000000b3762; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000b377a: jg short 0x00000000000b3783; mov [rdi+0xe], rcx; ret; 
0x000000000b379a: jg short 0x00000000000b37a3; mov [rdi+0xf], rcx; ret; 
0x000000000b37ba: jg short 0x00000000000b37c3; mov [rdi+0x10], rcx; ret; 
0x000000000b37da: jg short 0x00000000000b37e3; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000b37fe: jg short 0x00000000000b3807; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b381d: jg short 0x00000000000b3826; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b383d: jg short 0x00000000000b3846; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b385b: jg short 0x00000000000b3864; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b387b: jg short 0x00000000000b3884; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b389b: jg short 0x00000000000b38a4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b38bb: jg short 0x00000000000b38c4; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b3a66: jg short 0x00000000000b3a6f; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000b3a79: jg short 0x00000000000b3a82; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000b3a9a: jg short 0x00000000000b3aa3; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b3ab9: jg short 0x00000000000b3ac2; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000b3ad9: jg short 0x00000000000b3ae2; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000b3b1a: jg short 0x00000000000b3b23; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b3b3a: jg short 0x00000000000b3b43; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000b3b5a: jg short 0x00000000000b3b63; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b3bfb: jg short 0x00000000000b3c04; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000b3c1b: jg short 0x00000000000b3c24; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000b3c3b: jg short 0x00000000000b3c44; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000b3c5b: jg short 0x00000000000b3c64; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000b3c3f: jg short 0x00000000000b3c98; wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000b3c5f: jg short 0x00000000000b3cb8; adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000b3c82: jg short 0x00000000000b3cdb; adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000b3cd6: jg short 0x00000000000b3d08; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000b3cd5: jg short 0x00000000000b3d56; xor [rax], dh; in eax, dx; mov [rdi+0x40], ch; ret; 
0x000000000b4721: jg short 0x00000000000b4753; movups [r11], xmm8; ret; 
0x000000000b4b00: jg short 0x00000000000b4b09; ret; 
0x000000000b4b7c: jg short 0x00000000000b4b85; ret; 
0x000000000b4bf4: jg short 0x00000000000b4c3a; adc al, dl; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bfa: jg short 0x00000000000b4c40; adc al, ah; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4c00: jg short 0x00000000000b4c46; adc al, dh; rep ret; 
0x000000000b76aa: jg short 0x00000000000b76bb; add al, ch; pop rsi; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c57e5: jg short 0x00000000000c57e9; neg eax; ret; 
0x000000000c84f0: jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x000000000d2d4d: jg short 0x00000000000d2d70; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d2dc5: jg short 0x00000000000d2de0; pop rbx; pop rbp; pop r12; ret; 
0x000000000d2e4b: jg short 0x00000000000d2e95; cmova edx, eax; mov eax, 0xd9; syscall; 
0x000000000d71fe: jg short 0x00000000000d7208; pop rbx; ret; 
0x000000000d83be: jg short 0x00000000000d83c0; add [rax], al; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000d8383: jg short 0x00000000000d83cd; cmp edx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x000000000d83d8: jg short 0x00000000000d83da; add [rax], al; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d8415: jg short 0x00000000000d8417; add [rax], al; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d842b: jg short 0x00000000000d842d; add [rax], al; cmovne rax, rdx; ret; 
0x000000000d8426: jg short 0x00000000000d843b; add [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000d844b: jg short 0x00000000000d844d; add [rax], al; cmovne rax, rdx; ret; 
0x000000000f8543: jg short 0x00000000000f85bd; movups [rsi+0x70], xmm7; ret; 
0x000000000f8597: jg short 0x00000000000f8611; ret; 
0x00000000102718: jg short 0x0000000000102730; pop rbp; pop r12; pop r13; ret; 
0x0000000010278b: jg short 0x00000000001027c0; pop rbp; ret; 
0x00000000104e44: jg short 0x0000000000104e54; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000108e8e: jg short 0x0000000000108e98; ret; 
0x0000000010b167: jg short 0x000000000010b170; mov edx, 0x0; jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x0000000010ee40: jg short 0x000000000010ee60; add rsp, 0x18; ret; 
0x00000000117c34: jg short 0x0000000000117c5e; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000011f496: jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x000000001225db: jg short 0x00000000001225ce; jmp qword ptr [rsi-0x70]; 
0x00000000123493: jg short 0x0000000000123458; nop [rax]; mov eax, 0xffffffff; ret; 
0x000000001236bc: jg short 0x0000000000123681; xchg ax, ax; xor eax, eax; ret; 
0x000000001236ae: jg short 0x00000000001236b1; enter 0x480f, 0xc2; ret; 
0x00000000128628: jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285e1: jg short 0x00000000001285e8; ret; 
0x00000000128ad0: jg short 0x0000000000128a8d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x0000000012e523: jg short 0x000000000012e550; pop rbp; ret; 
0x0000000012f125: jg short 0x000000000012f140; pop rbx; ret; 
0x00000000131fbb: jg short 0x000000000013201f; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000001328db: jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x00000000133c7c: jg short 0x0000000000133c80; ret; 
0x0000000013e942: jg short 0x000000000013e984; mov eax, [rdi]; test eax, eax; jne short 0x000000000013e950; ret; 
0x000000001434d2: jg short 0x0000000000143514; mov eax, [rdi]; test eax, eax; jne short 0x00000000001434e0; ret; 
0x00000000149ff5: jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x0000000014a050: jg short 0x000000000014a080; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000014a0cc: jg short 0x000000000014a0f0; mov rax, r12; pop r12; ret; 
0x0000000014a135: jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x0000000014a2f0: jg short 0x000000000014a320; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000014c3f2: jg short 0x000000000014c3fc; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x0000000014c433: jg short 0x000000000014c43d; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x00000000151eba: jg short 0x0000000000151ec2; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f66: jg short 0x0000000000151f6e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151fe4: jg short 0x0000000000151fa6; movaps [rdi+0x10], xmm3; jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x00000000151ffe: jg short 0x0000000000152000; lea r11, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152134: jg short 0x00000000001520f6; movaps [rdi+0x10], xmm3; jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x0000000015214e: jg short 0x0000000000152150; lea r11, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152284: jg short 0x0000000000152246; movaps [rdi+0x10], xmm3; jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x0000000015229e: jg short 0x00000000001522a0; lea r11, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523d4: jg short 0x0000000000152396; movaps [rdi+0x10], xmm3; jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x000000001523ee: jg short 0x00000000001523f0; lea r11, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152524: jg short 0x00000000001524e6; movaps [rdi+0x10], xmm3; jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x0000000015253e: jg short 0x0000000000152540; lea r11, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152674: jg short 0x0000000000152636; movaps [rdi+0x10], xmm3; jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x0000000015268e: jg short 0x0000000000152690; lea r11, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527c4: jg short 0x0000000000152786; movaps [rdi+0x10], xmm3; jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x000000001527de: jg short 0x00000000001527e0; lea r11, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152895: jg short 0x0000000000152897; lea r11, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152914: jg short 0x00000000001528d6; movaps [rdi+0x10], xmm3; jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x0000000015292e: jg short 0x0000000000152930; lea r11, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a64: jg short 0x0000000000152a26; movaps [rdi+0x10], xmm3; jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152a7e: jg short 0x0000000000152a80; lea r11, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bb4: jg short 0x0000000000152b76; movaps [rdi+0x10], xmm3; jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152bce: jg short 0x0000000000152bd0; lea r11, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d04: jg short 0x0000000000152cc6; movaps [rdi+0x10], xmm3; jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152d1e: jg short 0x0000000000152d20; lea r11, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e54: jg short 0x0000000000152e16; movaps [rdi+0x10], xmm3; jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152e6e: jg short 0x0000000000152e70; lea r11, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fa4: jg short 0x0000000000152f66; movaps [rdi+0x10], xmm3; jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x00000000152fbe: jg short 0x0000000000152fc0; lea r11, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001530f4: jg short 0x00000000001530b6; movaps [rdi+0x10], xmm3; jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x0000000015310e: jg short 0x0000000000153110; lea r11, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153244: jg short 0x0000000000153206; movaps [rdi+0x10], xmm3; jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x0000000015325e: jg short 0x0000000000153260; lea r11, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153bc9: jg short 0x0000000000153c1a; ret; 
0x00000000153c10: jg short 0x0000000000153c59; mov ebx, 0x4f7f0ff3; ret far; 
0x00000000153c15: jg short 0x0000000000153c66; ret far; 
0x00000000153c4f: jg short 0x0000000000153c98; ret; 
0x00000000153c8f: jg short 0x0000000000153cd8; ret far; 
0x000000001549b4: jg short 0x0000000000154976; movaps [rdi+0x10], xmm3; jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x000000001549ce: jg short 0x00000000001549d0; lea r11, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b04: jg short 0x0000000000154ac6; movaps [rdi+0x10], xmm3; jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154b1e: jg short 0x0000000000154b20; lea r11, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c54: jg short 0x0000000000154c16; movaps [rdi+0x10], xmm3; jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154c6e: jg short 0x0000000000154c70; lea r11, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154da4: jg short 0x0000000000154d66; movaps [rdi+0x10], xmm3; jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154dbe: jg short 0x0000000000154dc0; lea r11, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154ef4: jg short 0x0000000000154eb6; movaps [rdi+0x10], xmm3; jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000154f0e: jg short 0x0000000000154f10; lea r11, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155044: jg short 0x0000000000155006; movaps [rdi+0x10], xmm3; jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x0000000015505e: jg short 0x0000000000155060; lea r11, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155194: jg short 0x0000000000155156; movaps [rdi+0x10], xmm3; jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001551ae: jg short 0x00000000001551b0; lea r11, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155265: jg short 0x0000000000155267; lea r11, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001552e4: jg short 0x00000000001552a6; movaps [rdi+0x10], xmm3; jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x000000001552fe: jg short 0x0000000000155300; lea r11, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155434: jg short 0x00000000001553f6; movaps [rdi+0x10], xmm3; jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x0000000015544e: jg short 0x0000000000155450; lea r11, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155584: jg short 0x0000000000155546; movaps [rdi+0x10], xmm3; jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x0000000015559e: jg short 0x00000000001555a0; lea r11, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556d4: jg short 0x0000000000155696; movaps [rdi+0x10], xmm3; jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x000000001556ee: jg short 0x00000000001556f0; lea r11, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155824: jg short 0x00000000001557e6; movaps [rdi+0x10], xmm3; jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x0000000015583e: jg short 0x0000000000155840; lea r11, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155974: jg short 0x0000000000155936; movaps [rdi+0x10], xmm3; jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x0000000015598e: jg short 0x0000000000155990; lea r11, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155ac4: jg short 0x0000000000155a86; movaps [rdi+0x10], xmm3; jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155ade: jg short 0x0000000000155ae0; lea r11, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155c14: jg short 0x0000000000155bd6; movaps [rdi+0x10], xmm3; jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x00000000155c2e: jg short 0x0000000000155c30; lea r11, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156599: jg short 0x00000000001565ea; ret; 
0x000000001565e0: jg short 0x0000000000156629; mov ebx, 0x4f7f0ff3; ret far; 
0x000000001565e5: jg short 0x0000000000156636; ret far; 
0x0000000015661f: jg short 0x0000000000156668; ret; 
0x0000000015665f: jg short 0x00000000001566a8; ret far; 
0x00000000158b88: jg short 0x0000000000158bd1; loope 0x0000000000158b7f; movq [rdi-0x10], mm1; ret; 
0x00000000158c18: jg short 0x0000000000158c61; loop 0x0000000000158c0f; movq [rdi-0x10], mm1; ret; 
0x00000000158c8f: jg short 0x0000000000158cd8; ret; 
0x00000000158ca8: jg short 0x0000000000158cf1; jrcxz 0x0000000000158c9f; movq [rdi-0x10], mm1; ret; 
0x00000000158d38: jg short 0x0000000000158d81; in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000158db8: jg short 0x0000000000158e01; in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x00000000158e38: jg short 0x0000000000158e81; out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x00000000158eb8: jg short 0x0000000000158f01; out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x00000000159095: jg short 0x00000000001590de; mov ebx, 0x46f00ff2; ret far; 
0x0000000015909f: jg short 0x00000000001590e8; ret far; 
0x00000000159138: jg short 0x0000000000159181; in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x000000001591b8: jg short 0x0000000000159201; in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159248: jg short 0x0000000000159291; out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x000000001592c8: jg short 0x0000000000159311; out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015933c: jg short 0x0000000000159345; ret; 
0x00000000159396: jg short 0x00000000001593a7; ret; 
0x00000000159391: jg short 0x00000000001593da; psllq mm1, [rdi]; jg short 0x00000000001593a7; ret; 
0x00000000159406: jg short 0x0000000000159417; ret; 
0x00000000159476: jg short 0x0000000000159487; ret; 
0x00000000159471: jg short 0x00000000001594ba; or eax, 0xf7f0ff3; ret; 
0x000000001594e6: jg short 0x00000000001594f7; ret; 
0x000000001594e1: jg short 0x000000000015952a; or al, 0xf3; movq [rdi], mm1; ret; 
0x00000000159556: jg short 0x0000000000159567; ret; 
0x00000000159551: jg short 0x000000000015959a; or esi, ebx; movq [rdi], mm1; ret; 
0x000000001595c6: jg short 0x00000000001595d7; ret; 
0x000000001595c1: jg short 0x000000000015960a; or dh, bl; movq [rdi], mm1; ret; 
0x00000000159636: jg short 0x0000000000159647; ret; 
0x00000000159631: jg short 0x000000000015967a; or ebx, esi; movq [rdi], mm1; ret; 
0x000000001596a6: jg short 0x00000000001596b7; ret; 
0x000000001596a1: jg short 0x00000000001596ea; or bl, dh; movq [rdi], mm1; ret; 
0x00000000159716: jg short 0x0000000000159727; ret; 
0x00000000159786: jg short 0x0000000000159797; ret; 
0x000000001597f6: jg short 0x0000000000159807; ret; 
0x000000001597f1: jg short 0x000000000015983a; add eax, 0xf7f0ff3; ret; 
0x00000000159866: jg short 0x0000000000159877; ret; 
0x00000000159861: jg short 0x00000000001598aa; add al, 0xf3; movq [rdi], mm1; ret; 
0x000000001598d6: jg short 0x00000000001598e7; ret; 
0x000000001598d1: jg short 0x000000000015991a; add esi, ebx; movq [rdi], mm1; ret; 
0x00000000159946: jg short 0x0000000000159957; ret; 
0x00000000159941: jg short 0x000000000015998a; add dh, bl; movq [rdi], mm1; ret; 
0x000000001599b6: jg short 0x00000000001599c7; ret; 
0x000000001599b1: jg short 0x00000000001599fa; add ebx, esi; movq [rdi], mm1; ret; 
0x0000000015b6a8: jg short 0x000000000015b6f1; loope 0x000000000015b69f; movq [rdi-0x10], mm1; ret; 
0x0000000015b738: jg short 0x000000000015b781; loop 0x000000000015b72f; movq [rdi-0x10], mm1; ret; 
0x0000000015b7af: jg short 0x000000000015b7f8; ret; 
0x0000000015b7c8: jg short 0x000000000015b811; jrcxz 0x000000000015b7bf; movq [rdi-0x10], mm1; ret; 
0x0000000015b858: jg short 0x000000000015b8a1; in al, 0xf3; movq [rdi-0x10], mm1; ret; 
0x0000000015b8d8: jg short 0x000000000015b921; in eax, 0xf3; movq [rdi-0x10], mm1; ret; 
0x0000000015b958: jg short 0x000000000015b9a1; out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x0000000015b9d8: jg short 0x000000000015ba21; out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x0000000015bbb5: jg short 0x000000000015bbfe; mov ebx, 0x46f00ff2; ret far; 
0x0000000015bbbf: jg short 0x000000000015bc08; ret far; 
0x0000000015bc58: jg short 0x000000000015bca1; in al, dx; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015bcd8: jg short 0x000000000015bd21; in eax, dx; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015bd68: jg short 0x000000000015bdb1; out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015bde8: jg short 0x000000000015be31; out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015be5c: jg short 0x000000000015be65; ret; 
0x0000000015beb6: jg short 0x000000000015bec7; ret; 
0x0000000015beb1: jg short 0x000000000015befa; psllq mm1, [rdi]; jg short 0x000000000015bec7; ret; 
0x0000000015bf26: jg short 0x000000000015bf37; ret; 
0x0000000015bf96: jg short 0x000000000015bfa7; ret; 
0x0000000015bf91: jg short 0x000000000015bfda; or eax, 0xf7f0ff3; ret; 
0x0000000015c006: jg short 0x000000000015c017; ret; 
0x0000000015c001: jg short 0x000000000015c04a; or al, 0xf3; movq [rdi], mm1; ret; 
0x0000000015c076: jg short 0x000000000015c087; ret; 
0x0000000015c071: jg short 0x000000000015c0ba; or esi, ebx; movq [rdi], mm1; ret; 
0x0000000015c0e6: jg short 0x000000000015c0f7; ret; 
0x0000000015c0e1: jg short 0x000000000015c12a; or dh, bl; movq [rdi], mm1; ret; 
0x0000000015c156: jg short 0x000000000015c167; ret; 
0x0000000015c151: jg short 0x000000000015c19a; or ebx, esi; movq [rdi], mm1; ret; 
0x0000000015c1c6: jg short 0x000000000015c1d7; ret; 
0x0000000015c1c1: jg short 0x000000000015c20a; or bl, dh; movq [rdi], mm1; ret; 
0x0000000015c236: jg short 0x000000000015c247; ret; 
0x0000000015c2a6: jg short 0x000000000015c2b7; ret; 
0x0000000015c316: jg short 0x000000000015c327; ret; 
0x0000000015c311: jg short 0x000000000015c35a; add eax, 0xf7f0ff3; ret; 
0x0000000015c386: jg short 0x000000000015c397; ret; 
0x0000000015c381: jg short 0x000000000015c3ca; add al, 0xf3; movq [rdi], mm1; ret; 
0x0000000015c3f6: jg short 0x000000000015c407; ret; 
0x0000000015c3f1: jg short 0x000000000015c43a; add esi, ebx; movq [rdi], mm1; ret; 
0x0000000015c466: jg short 0x000000000015c477; ret; 
0x0000000015c461: jg short 0x000000000015c4aa; add dh, bl; movq [rdi], mm1; ret; 
0x0000000015c4d6: jg short 0x000000000015c4e7; ret; 
0x0000000015c4d1: jg short 0x000000000015c51a; add ebx, esi; movq [rdi], mm1; ret; 
0x0000000016f580: jg short 0x000000000016f590; pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x000000000016f630; ret; 
0x000000001703b7: jg short 0x0000000000170401; add eax, edi; vzeroupper; ret; 
0x00000000174357: jg short 0x00000000001743a1; add eax, edi; vzeroupper; ret; 
0x00000000174557: jg short 0x00000000001745a1; add eax, edi; vzeroupper; ret; 
0x00000000174a52: jg short 0x0000000000174a68; pextrw edi, mm5, 0x74; ret far; 
0x00000000174cac: jg short 0x0000000000174cc5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x00000000174ccc: jg short 0x0000000000174ce5; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000017512d: jg short 0x0000000000175143; pextrw edi, mm5, 0x74; ret far; 
0x0000000017548c: jg short 0x00000000001754a5; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x000000001754ac: jg short 0x00000000001754c5; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000017554d: jg short 0x0000000000175566; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000017556d: jg short 0x0000000000175586; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001755e9: jg short 0x000000000017564b; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x000000001757f2: jg short 0x0000000000175808; pextrw edi, mm5, 0x74; ret far; 
0x00000000175a4c: jg short 0x0000000000175a65; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x00000000175a6c: jg short 0x0000000000175a85; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x00000000175bed: jg short 0x0000000000175c03; pextrw edi, mm5, 0x74; ret far; 
0x00000000175dae: jg short 0x0000000000175db1; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000175f5c: jg short 0x0000000000175f60; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000175f80: jg short 0x0000000000175f85; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000175f9a: jg short 0x0000000000175fa0; jne 0x00000000001761e0; vzeroupper; ret; 
0x000000001760fd: jg short 0x0000000000176116; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000017611d: jg short 0x0000000000176136; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x0000000017613e: jg short 0x0000000000176157; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x000000001761a2: jg short 0x00000000001761ab; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x000000001762e9: jg short 0x000000000017634b; vzeroupper; ret; 
0x000000001764e2: jg short 0x00000000001764f8; pextrw edi, mm5, 0x74; ret far; 
0x0000000017675c: jg short 0x0000000000176775; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000017677c: jg short 0x0000000000176795; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001768fd: jg short 0x0000000000176913; pextrw edi, mm5, 0x74; ret far; 
0x00000000176ac6: jg short 0x0000000000176ac9; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000176c90: jg short 0x0000000000176c94; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000176cb4: jg short 0x0000000000176cb9; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000176cce: jg short 0x0000000000176cd4; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000176e2d: jg short 0x0000000000176e46; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x00000000176e4d: jg short 0x0000000000176e66; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x00000000176ed2: jg short 0x0000000000176edb; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x00000000177019: jg short 0x000000000017707b; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x00000000177173: jg short 0x000000000017717c; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001771cf: jg short 0x00000000001771d8; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x0000000017724f: jg short 0x0000000000177258; vmovdqu [rdi+rdx-0x10], xmm1; vzeroupper; ret; 
0x000000001773e1: jg short 0x0000000000177406; vzeroupper; ret; 
0x000000001773db: jg short 0x000000000017741e; mov al, [0x77f8c5237f7ec1c4]; ret; 
0x000000001773d6: jg short 0x0000000000177451; rol ch, 0x7e; jg short 0x000000000017741e; mov al, [0x77f8c5237f7ec1c4]; ret; 
0x00000000177475: jg short 0x000000000017747a; vzeroupper; ret; 
0x00000000177470: jg short 0x00000000001774d2; vmovdqu [r11], ymm8; vzeroupper; ret; 
0x000000001778a4: jg short 0x00000000001778ad; vzeroupper; ret; 
0x00000000177904: jg short 0x000000000017790d; vzeroupper; ret; 
0x000000001779c9: jg short 0x00000000001779cb; vzeroupper; ret; 
0x0000000017798a: jg short 0x00000000001779d0; adc al, al; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000177990: jg short 0x00000000001779d6; adc al, ah; vzeroupper; ret; 
0x000000001779c3: jg short 0x0000000000177a09; adc al, dh; vmovdqu [rax], xmm0; vzeroupper; ret; 
0x00000000179047: jg short 0x0000000000179091; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x000000001792c7: jg short 0x0000000000179311; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x0000000017b9c0: jg short 0x000000000017b9c9; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x0000000017b9e4: jg short 0x000000000017b9ed; vmovdqu [r9-0x20], ymm1; ret; 
0x0000000017b9f8: jg short 0x000000000017ba01; vmovdqu [r9-0x10], xmm1; ret; 
0x0000000017be6a: jg short 0x000000000017be64; ret; 
0x0000000017c0d7: jg short 0x000000000017c0e0; vmovdqu [rsi-0x10], xmm0; ret; 
0x0000000017c0cd: jg short 0x000000000017c0e6; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000017c0d1: jg short 0x000000000017c129; loopne 0x000000000017c098; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x0000000017e325: jg short 0x000000000017e330; neg eax; ret; 
0x0000000017e3ab: jg short 0x000000000017e3b5; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e417: jg short 0x000000000017e421; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e4a6: jg short 0x000000000017e4af; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000017e4c3: jg short 0x000000000017e4cc; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000017e5b7: jg short 0x000000000017e5c1; vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x0000000017e6a2: jg short 0x000000000017e6c8; ret; 
0x0000000017e69b: jg short 0x000000000017e6df; std; vmovdqu64 [r11], zmm20; ret; 
0x0000000017e68d: jg short 0x000000000017e701; jmp qword ptr [rdx-0x1f]; 
0x0000000017e75d: jg short 0x000000000017e762; vmovdqu64 [r11], zmm24; ret; 
0x0000000017e762: jg short 0x000000000017e768; ret; 
0x0000000017e722: jg short 0x000000000017e76e; jmp qword ptr [rdx-0x3f]; 
0x0000000017ebf7: jg short 0x000000000017ec01; ret; 
0x0000000017ec47: jg short 0x000000000017ec51; ret; 
0x0000000017ed22: jg short 0x000000000017ed25; ret; 
0x0000000017ece2: jg short 0x000000000017ed29; adc ch, bh; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ecea: jg short 0x000000000017ed31; adc dh, bh; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ecf2: jg short 0x000000000017ed39; adc bh, bh; rep ret; 
0x0000000017ed60: jg short 0x000000000017ed62; ret; 
0x0000000017ed21: jg short 0x000000000017ed6c; jg short 0x000000000017ed25; ret; 
0x0000000017ed6f: jg short 0x000000000017ed71; ret; 
0x0000000017ed58: jg short 0x000000000017ed9e; adc bh, bh; vmovdqu64 [rax], ymm16; ret; 
0x0000000017ed67: jg short 0x000000000017edad; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x000000001800ba: jg short 0x0000000000180100; adc al, al; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001800c0: jg short 0x0000000000180106; adc al, ah; vzeroupper; ret; 
0x00000000180c92: jg short 0x0000000000180ca8; pextrw edi, mm5, 0x74; ret far; 
0x000000001810bd: jg short 0x00000000001810d3; pextrw edi, mm5, 0x74; ret far; 
0x00000000181cf2: jg short 0x0000000000181d08; pextrw edi, mm5, 0x74; ret far; 
0x000000001820a2: jg short 0x00000000001820b8; pextrw edi, mm5, 0x74; ret far; 
0x0000000018291d: jg short 0x0000000000182933; pextrw edi, mm5, 0x74; ret far; 
0x000000001835bd: jg short 0x00000000001835d3; pextrw edi, mm5, 0x74; ret far; 
0x00000000186499: jg short 0x00000000001864a2; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000186505: jg short 0x000000000018650e; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000018658a: jg short 0x0000000000186593; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000018667f: jg short 0x0000000000186688; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x0000000018676a: jg short 0x000000000018678f; ret; 
0x00000000186763: jg short 0x00000000001867a6; std; vmovdqu64 [r11], ymm20; ret; 
0x00000000186755: jg short 0x00000000001867c8; jmp qword ptr [rdx-0x1f]; 
0x00000000186814: jg short 0x0000000000186819; vmovdqu64 [r11], ymm24; ret; 
0x0000000018681a: jg short 0x000000000018681f; ret; 
0x000000001867dd: jg short 0x0000000000186828; jmp qword ptr [rdx-0x3f]; 
0x00000000187055: jg short 0x000000000018705e; ret; 
0x000000001870a5: jg short 0x00000000001870ae; ret; 
0x00000000187180: jg short 0x0000000000187182; ret; 
0x00000000187140: jg short 0x0000000000187186; adc ch, bh; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x00000000187148: jg short 0x000000000018718e; adc dh, bh; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x00000000187150: jg short 0x0000000000187196; adc bh, bh; rep ret; 
0x0000000018717e: jg short 0x00000000001871a9; jg short 0x0000000000187182; ret; 
0x000000001871bb: jg short 0x00000000001871bd; ret; 
0x000000001871b3: jg short 0x00000000001871f9; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x0000000018754b: jg short 0x00000000001875cc; jmp qword ptr [rdx-0x1f]; 
0x00000000187765: jg short 0x000000000018777e; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000187795: jg short 0x00000000001877ae; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000187a15: jg short 0x0000000000187a96; jmp qword ptr [rdx-0x1f]; 
0x00000000187b5e: jg short 0x0000000000187b61; jne 0x0000000000187ff0; ret; 
0x00000000187d20: jg short 0x0000000000187d24; jne 0x0000000000187ff0; ret; 
0x00000000187d44: jg short 0x0000000000187d49; jne 0x0000000000187ff0; ret; 
0x00000000187d5e: jg short 0x0000000000187d64; jne 0x0000000000187ff0; ret; 
0x00000000187ee2: jg short 0x0000000000187efb; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x00000000187f12: jg short 0x0000000000187f2b; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x00000000187f44: jg short 0x0000000000187f5d; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x00000000187f4a: jg short 0x0000000000187fab; add [rax-0x72b7bfb1], ecx; ret; 
0x00000000187fb4: jg short 0x0000000000187fbd; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000188121: jg short 0x0000000000188126; lea rax, [rdi+0x80]; ret; 
0x0000000018872b: jg short 0x00000000001887ac; jmp qword ptr [rdx-0x1f]; 
0x00000000188935: jg short 0x000000000018894e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000188965: jg short 0x000000000018897e; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x0000000018965b: jg short 0x00000000001896dc; jmp qword ptr [rdx-0x1f]; 
0x00000000189865: jg short 0x000000000018987e; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000189895: jg short 0x00000000001898ae; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000189fc5: jg short 0x000000000018a046; jmp qword ptr [rdx-0x1f]; 
0x0000000018a2a5: jg short 0x000000000018a2be; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000018a2d5: jg short 0x000000000018a2ee; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x0000000018a382: jg short 0x000000000018a39b; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018a3b2: jg short 0x000000000018a3cb; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018a3e4: jg short 0x000000000018a3fd; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000018a451: jg short 0x000000000018a456; mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000018a450: jg short 0x000000000018a4d1; add eax, esi; xchg [rax], eax; ret; 
0x0000000018ae95: jg short 0x000000000018af16; jmp qword ptr [rdx-0x1f]; 
0x0000000018afd6: jg short 0x000000000018afd9; jne 0x000000000018b420; ret; 
0x0000000018b18c: jg short 0x000000000018b190; jne 0x000000000018b420; ret; 
0x0000000018b1b0: jg short 0x000000000018b1b5; jne 0x000000000018b420; ret; 
0x0000000018b1ca: jg short 0x000000000018b1d0; jne 0x000000000018b420; ret; 
0x0000000018b332: jg short 0x000000000018b34b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x0000000018b352: jg short 0x000000000018b36b; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x0000000018b374: jg short 0x000000000018b38d; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x0000000018b3e4: jg short 0x000000000018b3ed; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000018b551: jg short 0x000000000018b556; ret; 
0x00000000192ec2: jg short 0x0000000000192ee0; pop rbx; ret; 
0x00000000043d8b: jge short 0x0000000000043d95; call rax; 
0x0000000004f9ba: jge short 0x000000000004f9bc; cmp cl, [rdi]; xchg esp, eax; ret; 
0x0000000005bef9: jge short 0x000000000005bf10; add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x000000000650b8: jge short 0x00000000000650d2; add [rbx-0x55763], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x0000000007eaba: jge short 0x000000000007eabc; add cl, ch; imul edi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000829f4: jge short 0x00000000000829f6; sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret; 
0x0000000008587a: jge short 0x000000000008588c; call qword ptr [rbx+0x358]; 
0x00000000085a72: jge short 0x0000000000085a84; call qword ptr [r12+0x358]; 
0x00000000085ada: jge short 0x0000000000085aec; call qword ptr [r12+0x358]; 
0x0000000009226a: jge short 0x0000000000092289; mov [rdi+0x20], rax; mov [rip+0x162609], rdi; ret; 
0x000000000927e0: jge short 0x00000000000927dc; jmp qword ptr [rsi+0x66]; 
0x000000000946cf: jge short 0x000000000009474d; stc; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x000000000b005f: jge short 0x00000000000b0001; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e33: jge short 0x00000000000b0dc8; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000f59d7: jge short 0x00000000000f5a42; dec dword ptr [rcx-0x77]; ret; 
0x000000000fb9a2: jge short 0x00000000000fb9bc; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbc72: jge short 0x00000000000fbc8c; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x000000000fbcf2: jge short 0x00000000000fbd0c; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x00000000103c21: jge short 0x0000000000103c23; call rbx; 
0x00000000103c18: jge short 0x0000000000103c2a; test rdi, rdi; jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x00000000104038: jge short 0x0000000000103ff2; mov [rbp-0x40], r9; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x00000000109d81: jge short 0x0000000000109d83; add [rax], al; syscall; 
0x00000000121afb: jge short 0x0000000000121aad; syscall; 
0x00000000122753: jge short 0x0000000000122746; jmp qword ptr [rsi+0x2e]; 
0x00000000132743: jge short 0x0000000000132751; add [rax], al; call rbx; 
0x0000000013936b: jge short 0x000000000013936d; test rdi, rdi; je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f4: jge short 0x00000000001394f6; test rdi, rdi; je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000013af4f: jge short 0x000000000013aefa; add [rax], al; mov rax, r12; pop r12; ret; 
0x0000000013bdac: jge short 0x000000000013bdae; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x000000001402d4: jge short 0x000000000014033e; call rax; 
0x00000000140cc4: jge short 0x0000000000140d1e; call rax; 
0x00000000141f5f: jge short 0x0000000000141f61; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001520b6: jge short 0x00000000001520be; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152154: jge short 0x000000000015215c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000170292: jge short 0x0000000000170287; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000186143: jge short 0x0000000000186165; ret; 
0x00000000187202: jge short 0x00000000001871f7; bsf eax, eax; add rax, rdi; ret; 
0x00000000188c5f: jge short 0x0000000000188c61; add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dac2: jge short 0x000000000018dab7; bsf eax, eax; add rax, rdi; ret; 
0x00000000192671: jge short 0x0000000000192683; add rdi, rbx; call r12; 
0x000000001705c5: jl 0x0000000000170660; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000170574: jl 0x0000000000170660; add rax, rdi; vzeroupper; ret; 
0x00000000186e8b: jl 0x0000000000186f20; add eax, 0x40; add rax, rdi; ret; 
0x00000000186e40: jl 0x0000000000186f20; add rax, rdi; ret; 
0x0000000002ce0c: jl short 0x000000000002ce32; adc [rax], al; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000002ff91: jl short 0x000000000002ffb7; pop rax; mov rax, [rsp+0x20]; call rax; 
0x000000000309db: jl short 0x0000000000030a01; pop rax; mov rax, [rsp+0x28]; call rax; 
0x000000000314fb: jl short 0x0000000000031521; mov rax, [rsp+0x20]; call rax; 
0x000000000319a6: jl short 0x00000000000319cc; pop rax; call r14; 
0x00000000032550: jl short 0x0000000000032576; call r15; 
0x00000000033248: jl short 0x000000000003326e; mov rax, [rsp+0x28]; call rax; 
0x00000000033e85: jl short 0x0000000000033eab; mov rax, [rsp+0x20]; call rax; 
0x00000000035245: jl short 0x000000000003526b; mov rax, [rsp+0x20]; call rax; 
0x000000000366d7: jl short 0x00000000000366fd; call r15; 
0x00000000036833: jl short 0x0000000000036859; lea r8, [rsp+0x98]; call r15; 
0x0000000003879e: jl short 0x00000000000387d4; jmp far fword ptr [rsi]; 
0x0000000003e2fd: jl short 0x000000000003e33c; add al, ch; ret far; 
0x000000000416e8: jl short 0x000000000004170e; or [rsi+0x8], bh; mov r8d, eax; mov eax, 0x82; syscall; 
0x00000000044a65: jl short 0x0000000000044a8b; or [rax+0x13e], bh; syscall; 
0x0000000004da71: jl short 0x000000000004da97; jmp far fword ptr [rdi]; 
0x0000000004da97: jl short 0x000000000004dabd; jmp far fword ptr [rdi]; 
0x0000000004dd8f: jl short 0x000000000004ddb5; jmp far fword ptr [rdi]; 
0x0000000004de9e: jl short 0x000000000004dec4; jmp far fword ptr [rdi]; 
0x0000000005bcd2: jl short 0x000000000005bce9; jmp far fword ptr [rdi]; 
0x00000000074651: jl short 0x000000000007464e; dec dword ptr [rax-0x77]; ret; 
0x0000000007ec92: jl short 0x000000000007ec93; jmp qword ptr [rsi+0x2e]; 
0x0000000008cacf: jl short 0x000000000008caf5; or bl, ch; ret far; 
0x0000000009282f: jl short 0x0000000000092820; je short 0x0000000000092844; xor eax, eax; ret; 
0x0000000009287f: jl short 0x0000000000092870; mov edx, 0x0; cmovne rax, rdx; ret; 
0x000000000928e6: jl short 0x00000000000928e3; jmp qword ptr [rsi+0xf]; 
0x000000000928e7: jl short 0x00000000000928e3; jmp qword ptr [rsi+0xf]; 
0x000000000946d0: jl short 0x00000000000946cb; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x000000000a510a: jl short 0x00000000000a5170; add rax, rdi; ret; 
0x000000000a511a: jl short 0x00000000000a5170; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a513a: jl short 0x00000000000a5170; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a515a: jl short 0x00000000000a5170; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b9c90: jl short 0x00000000000b9c9a; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c9090: jl short 0x00000000000c906a; add eax, 0xbe3d0348; ret; 
0x000000000d470f: jl short 0x00000000000d4735; and [rax-0x77], cl; out dx, al; call qword ptr [rsp+0x48]; 
0x000000000d5ef0: jl short 0x00000000000d5f16; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x000000000d621f: jl short 0x00000000000d6245; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x000000000d681d: jl short 0x00000000000d6843; adc [rax+0x3d], bh; syscall; 
0x000000000d7ef1: jl short 0x00000000000d7ef3; add [rax], al; syscall; 
0x000000000d9ac4: jl short 0x00000000000d9acd; jmp far fword ptr [rdi]; 
0x000000000df2a1: jl short 0x00000000000df310; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000e0cf9: jl short 0x00000000000e0d0b; or al, ch; mov r14b, 0xf4; dec dword ptr [rax-0x7d]; ret; 
0x000000000e5af2: jl short 0x00000000000e5b18; sbb cl, ch; ret far; 
0x000000000e9c7d: jl short 0x00000000000e9ca3; or al, ch; ret far; 
0x000000000f461a: jl short 0x00000000000f4640; cmp al, 0xf; xchg ebp, eax; ret; 
0x000000000f56f4: jl short 0x00000000000f571a; sbb [rcx-0x17efdbbc], cl; push rax; insb [rdi], dx; call far fword ptr [rax+0x5a]; 
0x000000000f9bf9: jl short 0x00000000000f9c1f; sbb [rax+0x101], bh; syscall; 
0x000000000f9d75: jl short 0x00000000000f9d9b; or [rax+0x1], bh; syscall; 
0x000000000fa1cd: jl short 0x00000000000fa1f3; or [rax+0x48], bh; syscall; 
0x000000000fa37e: jl short 0x00000000000fa3a4; or al, 0x41; mov eax, eax; mov eax, 0x3; syscall; 
0x000000000fc8dc: jl short 0x00000000000fc8e4; jmp far fword ptr [rdi]; 
0x000000000fd63c: jl short 0x00000000000fd64f; jmp far fword ptr [rdi]; 
0x000000000fda35: jl short 0x00000000000fda5b; or [rax+0x7], bh; syscall; 
0x000000000fdb09: jl short 0x00000000000fdb2f; or [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x000000000fe4a9: jl short 0x00000000000fe4a3; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000fe48e: jl short 0x00000000000fe4b4; sbb [rax+0x115], bh; syscall; 
0x000000000fe558: jl short 0x00000000000fe552; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fe53d: jl short 0x00000000000fe563; or [rax+0x11d], bh; syscall; 
0x000000000fe699: jl short 0x00000000000fe6bf; clc; add cl, [rbx+0x75fc2444]; shl edi, 0xd8; ret; 
0x000000000ff293: jl short 0x00000000000ff2b9; or [rax+0x13], bh; syscall; 
0x000000000ff333: jl short 0x00000000000ff359; or [rax+0x14], bh; syscall; 
0x000000000fffce: jl short 0x00000000000ffff4; or al, 0x41; mov eax, eax; mov eax, 0x4a; syscall; 
0x0000000010008e: jl short 0x00000000001000b4; or al, 0x41; mov eax, eax; mov eax, 0x4b; syscall; 
0x00000000102b35: jl short 0x0000000000102b5b; or [rax+0x1a], bh; syscall; 
0x00000000108fc5: jl short 0x0000000000108fda; je short 0x0000000000108fca; ret; 
0x0000000010939c: jl short 0x00000000001093c2; or [rax+0x114], bh; syscall; 
0x000000001095b1: jl short 0x00000000001095d7; or [rax+0x130], bh; syscall; 
0x00000000109c1c: jl short 0x0000000000109c36; je short 0x0000000000109c21; ret; 
0x0000000010a3f5: jl short 0x000000000010a41b; or al, 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x0000000010a4c1: jl short 0x000000000010a4e7; or [rax+0x2a], bh; syscall; 
0x0000000010a7a3: jl short 0x000000000010a7c9; or [rax+0x2f], bh; syscall; 
0x0000000010a903: jl short 0x000000000010a929; or [rax+0x2e], bh; syscall; 
0x0000000010ad4e: jl short 0x000000000010ad74; sbb [rax+0x120], bh; syscall; 
0x0000000010aeac: jl short 0x000000000010aed2; or al, 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000010b00e: jl short 0x000000000010b034; sbb [rax+0x45], bh; syscall; 
0x0000000010e5b0: jl short 0x000000000010e5d6; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000010ecf3: jl short 0x000000000010ecf1; jmp qword ptr [rsi+0xf]; 
0x0000000010f950: jl short 0x000000000010f976; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x00000000115715: jl short 0x00000000001156e1; clc; add ecx, ecx; sbb eax, 0x0; ret; 
0x0000000011a61f: jl short 0x000000000011a645; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000011acf0: jl short 0x000000000011ad16; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000011b11d: jl short 0x000000000011b143; adc [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x0000000011b5bc: jl short 0x000000000011b5e2; xor [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x0000000011c120: jl short 0x000000000011c146; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000011c3bf: jl short 0x000000000011c3e5; and [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000011f8f2: jl short 0x000000000011f918; sub [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x000000001201d0: jl short 0x00000000001201f6; or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x00000000132793: jl short 0x00000000001327a1; add [rax], al; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013906d: jl short 0x0000000000139093; push rax; call qword ptr [rax+0x20]; 
0x000000001410f0: jl short 0x0000000000141116; push 0xffffffffeeb260e8; dec dword ptr [rax-0x77]; ret; 
0x00000000141bbe: jl short 0x0000000000141be4; or [rax], al; setne al; add rsp, 0x78; ret; 
0x00000000142485: jl short 0x00000000001424ab; sub al, 0xe8; ret; 
0x0000000014d1d4: jl short 0x000000000014d1dd; jmp far fword ptr [rdi]; 
0x00000000152206: jl short 0x000000000015220e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017062a: jl short 0x0000000000170660; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000017064a: jl short 0x0000000000170660; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000175e15: jl short 0x0000000000175e2e; and ecx, ebp; ret; 
0x00000000175f60: jl short 0x0000000000175f64; add [rax], al; vzeroupper; ret; 
0x0000000017841a: jl short 0x000000000017842a; cmp edi, [rdx+rcx+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000017841e: jl short 0x000000000017842a; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000017b88b: jl short 0x000000000017b890; neg eax; ret; 
0x0000000017b956: jl short 0x000000000017b9a0; adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017b95d: jl short 0x000000000017b9a7; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x0000000017b964: jl short 0x000000000017b9ae; adc [rcx-0x1], edi; ret; 
0x0000000017b992: jl short 0x000000000017b9dc; adc [rdi+0x1], ecx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017b999: jl short 0x000000000017b9e3; adc [rcx-0x2], edx; vmovups [r9-0x40], zmm3; ret; 
0x0000000017b9a0: jl short 0x000000000017b9ea; adc [rcx-0x1], ebx; ret; 
0x0000000017bb90: jl short 0x000000000017bbda; adc [rcx-0x3], ebp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017bb97: jl short 0x000000000017bbe1; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x0000000017bb9e: jl short 0x000000000017bbe8; adc [rcx-0x1], edi; ret; 
0x0000000017bcf7: jl short 0x000000000017bd41; adc [rcx+0x5], ebp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcfe: jl short 0x000000000017bd48; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bd05: jl short 0x000000000017bd4f; adc [rcx+0x7], edi; ret; 
0x0000000017be59: jl short 0x000000000017bea3; adc [rdi-0x6], ebp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be60: jl short 0x000000000017beaa; adc [rdi-0x7], esi; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be67: jl short 0x000000000017beb1; adc [rdi-0x8], edi; ret; 
0x0000000017c07e: jl short 0x000000000017c0c8; adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c085: jl short 0x000000000017c0cf; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c08c: jl short 0x000000000017c0d6; adc [rsi-0x1], edx; ret; 
0x0000000017c09f: jl short 0x000000000017c0e9; adc [rdi+0x1], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0a6: jl short 0x000000000017c0f0; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0ad: jl short 0x000000000017c0f7; adc [rsi-0x1], edx; ret; 
0x0000000017c0ba: jl short 0x000000000017c104; adc [rdi], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0c0: jl short 0x000000000017c10a; adc [rsi-0x1], edx; ret; 
0x0000000017c187: jl short 0x000000000017c1d1; adc [rsi-0x3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c18e: jl short 0x000000000017c1d8; adc [rsi-0x2], edx; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c195: jl short 0x000000000017c1df; adc [rsi-0x1], edx; ret; 
0x0000000017c1df: jl short 0x000000000017c229; adc [rsi+0x1], edx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1e6: jl short 0x000000000017c230; adc [rsi+0x2], edx; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1ed: jl short 0x000000000017c237; adc [rsi+0x3], edx; ret; 
0x0000000017c27c: jl short 0x000000000017c2c6; adc [rsi+0x5], edx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c283: jl short 0x000000000017c2cd; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c28a: jl short 0x000000000017c2d4; adc [rsi+0x7], edx; ret; 
0x0000000017e593: jl short 0x000000000017e5ac; cld; ret; 
0x000000001837f5: jl short 0x000000000018380e; and ecx, ebp; ret; 
0x0000000018665a: jl short 0x0000000000186673; cld; ret; 
0x00000000186eea: jl short 0x0000000000186f20; add eax, 0x20; add rax, rdi; ret; 
0x00000000186f0a: jl short 0x0000000000186f20; add eax, 0x60; add rax, rdi; ret; 
0x00000000187d89: jl short 0x0000000000187da2; add [rdi], ecx; test [rsi+0x2], ebx; add [rax], al; ret; 
0x0000000018b2a0: jl short 0x000000000018b2a3; add [rax], al; ret; 
0x0000000018c231: jl short 0x000000000018c241; cmp edi, [rdx+rcx+0x40]; jne 0x000000000018be07; ret; 
0x0000000018c235: jl short 0x000000000018c241; jne 0x000000000018be07; ret; 
0x0000000018f495: jl short 0x000000000018f4bb; adc [rcx-0x7d], al; ret far; 
0x00000000192614: jl short 0x000000000019259d; add al, [rax]; ret; 
0x0000000016f58a: jle 0x000000000016f630; ret; 
0x0000000003724a: jle short 0x0000000000037270; sub eax, 0x1; mov [rdx+0x8], eax; pop rbx; ret; 
0x0000000004048d: jle short 0x0000000000040451; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000008780c: jle short 0x000000000008787e; ret; 
0x0000000008e42b: jle short 0x000000000008e40c; mov eax, [rip+0x15ee61]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009229b: jle short 0x00000000000922bd; ret; 
0x000000000aa67e: jle short 0x00000000000aa680; add [rax], al; bsf rax, rdx; ret; 
0x000000000c60c1: jle short 0x00000000000c610b; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000d837d: jle short 0x00000000000d83a8; mov eax, 0x7fffffff; cmp rdx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x000000000d8461: jle short 0x00000000000d8463; add [rax], al; ret; 
0x000000000d85d8: jle short 0x00000000000d85f0; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x000000000f8547: jle short 0x00000000000f85b9; ret; 
0x000000000f8593: jle short 0x00000000000f8605; movups [rdi+0x78], xmm7; ret; 
0x000000000f8e5f: jle short 0x00000000000f8ed1; ret; 
0x000000000f8ee8: jle short 0x00000000000f8f5a; movups [rdi+0xf8], xmm7; ret; 
0x00000000103402: jle short 0x00000000001033f9; call far fword ptr [rdx+0x5e]; 
0x00000000109db1: jle short 0x0000000000109db3; add [rax], al; syscall; 
0x0000000012490e: jle short 0x0000000000124915; cmp byte ptr [rbx], 0x2e; je short 0x0000000000124920; pop rbx; ret; 
0x00000000127ae6: jle short 0x0000000000127b18; mov eax, [rsp-0x4]; mov [r11], eax; mov eax, 0x1; ret; 
0x0000000013cfde: jle short 0x000000000013cf7f; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000152004: jle short 0x000000000015200c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016d5c0: jle short 0x000000000016d5c4; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000016f328: jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x000000001773da: jle short 0x000000000017745b; mov al, [0x77f8c5237f7ec1c4]; ret; 
0x000000000fa8eb: jmp far fword ptr [r15]; 
0x0000000008ebfe: jmp far fword ptr [r8-0xff88afe]; 
0x0000000005cda6: jmp far fword ptr [rax+0x11850f80]; 
0x000000000af016: jmp far fword ptr [rax+0x16850f10]; 
0x000000000af004: jmp far fword ptr [rax+0x18850f08]; 
0x00000000118a3d: jmp far fword ptr [rax+0x1]; 
0x000000000af028: jmp far fword ptr [rax+0x24850f20]; 
0x000000000fd6ca: jmp far fword ptr [rax+0x27850f01]; 
0x0000000006d279: jmp far fword ptr [rax+0x2840f10]; 
0x00000000124ef7: jmp far fword ptr [rax+0x28840f01]; 
0x0000000012227b: jmp far fword ptr [rax+0x2f850f02]; 
0x0000000008a3c0: jmp far fword ptr [rax+0x311e7540]; 
0x000000000af03a: jmp far fword ptr [rax+0x32850f40]; 
0x00000000146e75: jmp far fword ptr [rax+0x412e7501]; 
0x000000000e761a: jmp far fword ptr [rax+0x41597408]; 
0x000000000e8db4: jmp far fword ptr [rax+0x45840f01]; 
0x000000000f1cda: jmp far fword ptr [rax+0x48417580]; 
0x000000000e85e4: jmp far fword ptr [rax+0x54850f10]; 
0x000000000e697a: jmp far fword ptr [rax+0x56840f08]; 
0x00000000072593: jmp far fword ptr [rax+0x75840f10]; 
0x000000000aeff2: jmp far fword ptr [rax+0xa850f04]; 
0x000000000aefe0: jmp far fword ptr [rax+0xc850f02]; 
0x000000000e8e55: jmp far fword ptr [rax-0x257bf0ff]; 
0x00000000075bed: jmp far fword ptr [rax-0x38f38bfe]; 
0x000000000e8575: jmp far fword ptr [rax-0x3c7af0ff]; 
0x000000000c5c99: jmp far fword ptr [rax-0x417af010]; 
0x0000000008fa37: jmp far fword ptr [rax-0x457bf0ff]; 
0x0000000008ebb1: jmp far fword ptr [rax-0x607bf0ff]; 
0x0000000008f3d7: jmp far fword ptr [rax-0x627bf0ff]; 
0x00000000141e15: jmp far fword ptr [rax-0x70]; 
0x0000000012ef4d: jmp far fword ptr [rax-0x717af0ff]; 
0x0000000008938d: jmp far fword ptr [rax-0x72f58aff]; 
0x0000000008ecc6: jmp far fword ptr [rax-0x766d8bff]; 
0x0000000012d29a: jmp far fword ptr [rax-0x87bf0ff]; 
0x0000000008ebff: jmp far fword ptr [rax-0xff88afe]; 
0x0000000005e918: jmp far fword ptr [rax]; 
0x00000000056ca8: jmp far fword ptr [rbp+0x7f]; 
0x0000000011fe55: jmp far fword ptr [rbp+0xd]; 
0x0000000003a1e5: jmp far fword ptr [rbx]; 
0x00000000082e00: jmp far fword ptr [rcx+0x202]; 
0x000000001088e4: jmp far fword ptr [rcx+0x400000]; 
0x000000000d958f: jmp far fword ptr [rcx+0x810]; 
0x000000000ea2c5: jmp far fword ptr [rcx-0x101]; 
0x000000001490e1: jmp far fword ptr [rcx-0x36]; 
0x00000000046d72: jmp far fword ptr [rcx]; 
0x0000000005b8ad: jmp far fword ptr [rdi+0x1f0f0001]; 
0x0000000009766b: jmp far fword ptr [rdi+0x2f760000]; 
0x0000000006c148: jmp far fword ptr [rdi+0xf000000]; 
0x00000000064d09: jmp far fword ptr [rdi+rcx-0x7c]; 
0x0000000009973e: jmp far fword ptr [rdi-0x78f10000]; 
0x0000000002effd: jmp far fword ptr [rdi]; 
0x000000000f23c4: jmp far fword ptr [rdx]; 
0x0000000009cdc6: jmp far fword ptr [rdx]; 
0x000000000387a0: jmp far fword ptr [rsi]; 
0x0000000004f9ae: jmp far fword ptr [rsp+rsi*2]; 
0x0000000017a306: jmp far tbyte ptr [rcx]; 
0x0000000002db82: jmp qword ptr [esp+eax*2-0x75]; 
0x0000000017be39: jmp qword ptr [r10+0x71]; 
0x0000000017e6fb: jmp qword ptr [r10-0x1f]; 
0x0000000017bdf1: jmp qword ptr [r10-0x2f]; 
0x0000000017e724: jmp qword ptr [r10-0x3f]; 
0x0000000017bd80: jmp qword ptr [r10-0xf]; 
0x000000000ace33: jmp qword ptr [r14+0x66]; 
0x000000000ab138: jmp qword ptr [r14+0xf]; 
0x0000000013f6d8: jmp qword ptr [rax+0x18]; 
0x00000000085687: jmp qword ptr [rax+0x28]; 
0x000000000856d7: jmp qword ptr [rax+0x30]; 
0x0000000014c457: jmp qword ptr [rax+0x348]; 
0x00000000085c47: jmp qword ptr [rax+0x38]; 
0x000000001454d4: jmp qword ptr [rax+0x40]; 
0x000000001454e4: jmp qword ptr [rax+0x48]; 
0x0000000014c66f: jmp qword ptr [rax+0x58]; 
0x0000000017092b: jmp qword ptr [rax+0x73]; 
0x00000000144a34: jmp qword ptr [rax+0x8]; 
0x0000000005e1b6: jmp qword ptr [rax+rax]; 
0x0000000002e8bb: jmp qword ptr [rax+rcx*2+0x33]; 
0x000000000f2578: jmp qword ptr [rax+rcx*2+0x3]; 
0x00000000086c82: jmp qword ptr [rax+rcx*2-0x39]; 
0x000000000374d2: jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000009188a: jmp qword ptr [rax+rcx*2-0x77]; 
0x000000000c440d: jmp qword ptr [rax-0x9]; 
0x0000000003ee21: jmp qword ptr [rax]; 
0x000000000619d5: jmp qword ptr [rbp+0x31]; 
0x0000000006282b: jmp qword ptr [rbp+0x48]; 
0x000000000466d7: jmp qword ptr [rbp+0xf]; 
0x000000000fc0cf: jmp qword ptr [rbp+rax*2-0x75]; 
0x0000000005d28b: jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000fbf87: jmp qword ptr [rbp+rax*2-0x77]; 
0x000000000d298c: jmp qword ptr [rbp+rsi*2-0x38]; 
0x00000000060a41: jmp qword ptr [rbp-0x45]; 
0x00000000107535: jmp qword ptr [rbp-0x76b7fff6]; 
0x000000000679af: jmp qword ptr [rbp]; 
0x00000000148f8f: jmp qword ptr [rbx+0x6b]; 
0x0000000013ba80: jmp qword ptr [rbx+0xf]; 
0x000000000d8445: jmp qword ptr [rbx+rax*4+0x38]; 
0x00000000116b96: jmp qword ptr [rbx+rax*4+0x39]; 
0x00000000137775: jmp qword ptr [rbx+rax*4+0x3a]; 
0x000000000959ac: jmp qword ptr [rbx+rax*4+0x3c]; 
0x000000000f2407: jmp qword ptr [rbx+rax*4+0x3f]; 
0x00000000077784: jmp qword ptr [rbx+rcx*4+0x10]; 
0x000000000fa9f9: jmp qword ptr [rbx+rcx*4+0x13]; 
0x0000000008be4b: jmp qword ptr [rbx+rcx*4+0x14]; 
0x00000000064a5d: jmp qword ptr [rbx+rcx*4+0x18]; 
0x0000000005d31b: jmp qword ptr [rbx+rcx*4+0x3]; 
0x000000000649e4: jmp qword ptr [rbx+rcx*4+0x8]; 
0x000000000778c2: jmp qword ptr [rbx+rcx*4+0xa]; 
0x000000001493db: jmp qword ptr [rbx+rcx*4+0xb]; 
0x0000000005e6fa: jmp qword ptr [rbx+rcx*4]; 
0x000000000c6b0e: jmp qword ptr [rbx]; 
0x0000000005ed98: jmp qword ptr [rcx+rax*2-0x75]; 
0x00000000042bf6: jmp qword ptr [rcx+rax*2-0x77]; 
0x0000000011d02b: jmp qword ptr [rcx+rcx*2-0x75]; 
0x00000000120c4b: jmp qword ptr [rcx+rcx*4+0x10]; 
0x0000000013d1f4: jmp qword ptr [rcx+rcx*4+0x13]; 
0x00000000064b0c: jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000000f960e: jmp qword ptr [rcx+rcx*4+0x1]; 
0x00000000041606: jmp qword ptr [rcx+rcx*4+0x2]; 
0x00000000098b40: jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000005db08: jmp qword ptr [rcx+rcx*4+0x30]; 
0x0000000006113f: jmp qword ptr [rcx+rcx*4+0x38]; 
0x000000000f8dac: jmp qword ptr [rcx+rcx*4+0x3]; 
0x000000000d87f8: jmp qword ptr [rcx+rcx*4+0x5d]; 
0x0000000003bda3: jmp qword ptr [rcx+rcx*4+0x8]; 
0x0000000002c69d: jmp qword ptr [rcx-0x76b7fffb]; 
0x00000000086e61: jmp qword ptr [rcx]; 
0x0000000004429e: jmp qword ptr [rdi+0x1000041]; 
0x0000000010b450: jmp qword ptr [rdi+0x6d]; 
0x00000000057fb2: jmp qword ptr [rdi+0x75]; 
0x000000000ff574: jmp qword ptr [rdi+rax*8+0x1]; 
0x000000000f22a7: jmp qword ptr [rdi+rax*8+0x3]; 
0x000000000d8ff2: jmp qword ptr [rdi+rax*8+0x45]; 
0x000000000398f9: jmp qword ptr [rdi+rax*8]; 
0x00000000045270: jmp qword ptr [rdi+rcx]; 
0x0000000006285d: jmp qword ptr [rdi+rdi*2]; 
0x000000000c46dd: jmp qword ptr [rdi+rdi*8]; 
0x00000000057d22: jmp qword ptr [rdi-0x75]; 
0x0000000017bcd2: jmp qword ptr [rdx+0x51]; 
0x0000000017e78f: jmp qword ptr [rdx+0x61]; 
0x0000000017be33: jmp qword ptr [rdx+0x71]; 
0x0000000013ab2f: jmp qword ptr [rdx+rax*8]; 
0x0000000017e3a7: jmp qword ptr [rdx-0x1f]; 
0x0000000017bdeb: jmp qword ptr [rdx-0x2f]; 
0x0000000017e718: jmp qword ptr [rdx-0x3f]; 
0x0000000018814e: jmp qword ptr [rdx-0x4d]; 
0x00000000107e4a: jmp qword ptr [rdx-0x72b7fff6]; 
0x000000001862a7: jmp qword ptr [rdx-0xd]; 
0x0000000017b931: jmp qword ptr [rdx-0xf]; 
0x00000000049f8d: jmp qword ptr [rdx]; 
0x0000000002d531: jmp qword ptr [rsi+0x2e]; 
0x000000000f8fdf: jmp qword ptr [rsi+0x2e]; 
0x00000000059d39: jmp qword ptr [rsi+0x3d]; 
0x000000000c8058: jmp qword ptr [rsi+0x41]; 
0x000000000b40f3: jmp qword ptr [rsi+0x44]; 
0x000000000fd5f1: jmp qword ptr [rsi+0x45]; 
0x0000000002ea13: jmp qword ptr [rsi+0x66]; 
0x000000000f0210: jmp qword ptr [rsi+0x66]; 
0x000000000edccb: jmp qword ptr [rsi+0xf]; 
0x0000000002d3d9: jmp qword ptr [rsi+0xf]; 
0x00000000145e4d: jmp qword ptr [rsi+rbp*8-0x1]; 
0x000000001225b2: jmp qword ptr [rsi-0x39]; 
0x000000000f2fcc: jmp qword ptr [rsi-0x3f]; 
0x0000000002de9d: jmp qword ptr [rsi-0x70]; 
0x0000000006d7c4: jmp qword ptr [rsi-0x77]; 
0x000000000cc8d5: jmp qword ptr [rsi-0x7b]; 
0x00000000036e24: jmp qword ptr [rsi-0x7d]; 
0x000000000756ff: jmp qword ptr [rsi-0x7f]; 
0x0000000004419d: jmp qword ptr [rsi]; 
0x0000000002db83: jmp qword ptr [rsp+rax*2-0x75]; 
0x0000000008290f: jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000fb98c: jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000a1a99: jmp r10; 
0x0000000003ee4f: jmp r11; 
0x000000001519bd: jmp r9; 
0x0000000002d563: jmp rax; 
0x000000000eda2d: jmp rbp; 
0x0000000003ee50: jmp rbx; 
0x000000000389bf: jmp rcx; 
0x0000000003ec09: jmp rdi; 
0x000000000412be: jmp rdx; 
0x000000000cfb49: jmp rsi; 
0x0000000009a246: jne 0x000000000002ce34; pop rbx; pop rbp; pop r12; ret; 
0x0000000008a3e5: jne 0x0000000000089e8f; lea rsi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x0000000008df58: jne 0x000000000008e040; mov eax, 0x1; ret; 
0x0000000008e256: jne 0x000000000008e14a; sub dword ptr [rdi+0x4], 0x1; je 0x000000000008df8f; mov eax, 0x83; ret; 
0x0000000009a16b: jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x000000000a4b45: jne 0x00000000000a4c20; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a4bb7: jne 0x00000000000a4c60; xor eax, eax; ret; 
0x000000000a501c: jne 0x00000000000a50d0; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000ac39b: jne 0x00000000000ac4a5; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000aed6b: jne 0x00000000000aee75; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000b009f: jne 0x00000000000b0001; lea r11, [rip+0xfa034]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b00ca: jne 0x00000000000b0980; ret; 
0x000000000b174f: jne 0x00000000000b16b1; lea r11, [rip+0xf8b64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b177d: jne 0x00000000000b21a0; ret; 
0x000000000b35df: jne 0x00000000000b3541; lea r11, [rip+0xf6ea8]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c49b5: jne 0x00000000000c4a90; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000c4a27: jne 0x00000000000c4b00; xor eax, eax; ret; 
0x000000000c568f: jne 0x00000000000c57e0; ret; 
0x000000000c566e: jne 0x00000000000c57e0; xor eax, eax; ret; 
0x000000000c5bf7: jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c5bef: jne 0x00000000000c5d70; test al, 0xf0; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000e0914: jne 0x00000000000e083d; ret; 
0x0000000012b7ce: jne 0x000000000012b52c; movsxd rdi, [rip+0x81cbd]; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x0000000013a7cb: jne 0x000000000013a910; mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000142fd3: jne 0x0000000000142f32; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000163df1: jne 0x00000000001643a0; ret; 
0x00000000168182: jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000016fa93: jne 0x000000000016f980; sub eax, ecx; vzeroupper; ret; 
0x0000000016ffac: jne 0x000000000016fe50; sub eax, ecx; vzeroupper; ret; 
0x00000000170b0a: jne 0x0000000000170830; ret; 
0x00000000170a68: jne 0x0000000000170830; xor eax, eax; vzeroupper; ret; 
0x00000000170973: jne 0x00000000001708a0; vzeroupper; ret; 
0x00000000175db0: jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac8: jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000177d7f: jne 0x0000000000177ae0; ret; 
0x00000000177d2c: jne 0x0000000000177ae0; xor eax, eax; vzeroupper; ret; 
0x00000000177c27: jne 0x0000000000177b40; vzeroupper; ret; 
0x00000000178299: jne 0x0000000000178111; vzeroupper; ret; 
0x000000001784fc: jne 0x0000000000178430; sub eax, ecx; vzeroupper; ret; 
0x0000000017871f: jne 0x0000000000178575; vzeroupper; ret; 
0x00000000178a17: jne 0x0000000000178900; sub eax, ecx; vzeroupper; ret; 
0x0000000017a607: jne 0x000000000017aa33; movzx eax, byte ptr [rdi-0x1]; movzx ecx, byte ptr [rsi-0x1]; sub eax, ecx; ret; 
0x0000000017a0ad: jne 0x000000000017aa33; movzx eax, byte ptr [rdi-0x1]; movzx edx, byte ptr [rsi-0x1]; sub eax, edx; ret; 
0x0000000017a001: jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017a0f8: jne 0x000000000017aa3f; movzx eax, byte ptr [rdi-0x1]; movzx edx, byte ptr [rsi-0x1]; sub eax, edx; ret; 
0x0000000017a029: jne 0x000000000017aa3f; xor eax, eax; ret; 
0x0000000017a2fa: jne 0x000000000017aa4a; movzx eax, byte ptr [rdi-0x1]; movzx ecx, byte ptr [rsi-0x1]; sub eax, ecx; ret; 
0x0000000017a18d: jne 0x000000000017aa60; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000017b631: jne 0x000000000017b873; xor eax, eax; ret; 
0x0000000017b657: jne 0x000000000017b886; xor eax, eax; ret; 
0x0000000017c420: jne 0x000000000017c310; lea rax, [rdi+0xb]; ret; 
0x0000000017c3d9: jne 0x000000000017c310; lea rax, [rdi+0xf]; ret; 
0x0000000017c37c: jne 0x000000000017c4f0; test dl, 0x4; jne short 0x000000000017c310; lea rax, [rdi+0x3]; ret; 
0x0000000017c45e: jne 0x000000000017c520; test al, 0x40; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x0000000017c465: jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x0000000017c34d: jne 0x000000000017c530; test dl, 0x40; jne short 0x000000000017c310; lea rax, [rdi+0x7]; ret; 
0x0000000017c417: jne 0x000000000017c560; test dh, 0x4; jne 0x000000000017c310; lea rax, [rdi+0xb]; ret; 
0x0000000017c4b0: jne 0x000000000017c590; test ah, 0x40; jne 0x000000000017c5a0; lea rax, [rdi+0xf]; ret; 
0x0000000017c4b8: jne 0x000000000017c5a0; lea rax, [rdi+0xf]; ret; 
0x0000000017c3d0: jne 0x000000000017c5a0; test dh, 0x40; jne 0x000000000017c310; lea rax, [rdi+0xf]; ret; 
0x0000000017dae4: jne 0x000000000017dcf0; xor eax, eax; ret; 
0x0000000017dc44: jne 0x000000000017dd05; cmp eax, ecx; jne 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017db91: jne 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017e1ed: jne 0x000000000017e320; ret; 
0x0000000017f40a: jne 0x000000000017f130; ret; 
0x00000000181288: jne 0x00000000001816f0; xtest; je short 0x0000000000181297; vzeroall; ret; 
0x00000000183780: jne 0x0000000000183bc0; xtest; je short 0x000000000018378f; vzeroall; ret; 
0x00000000185c5f: jne 0x00000000001859c0; ret; 
0x000000001863b2: jne 0x00000000001860e0; ret; 
0x0000000018623d: jne 0x0000000000186120; ret; 
0x00000000186096: jne 0x0000000000186123; ret; 
0x00000000186dbe: jne 0x0000000000186eb0; kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x00000000187b60: jne 0x0000000000187ff0; ret; 
0x00000000189459: jne 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018ac16: jne 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018afd8: jne 0x000000000018b420; ret; 
0x0000000018c04d: jne 0x000000000018be07; ret; 
0x0000000018c322: jne 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018c5d0: jne 0x000000000018c547; ret; 
0x0000000018cb6d: jne 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000018d747: jne 0x000000000018d4c0; ret; 
0x0000000018d61d: jne 0x000000000018d500; ret; 
0x0000000018d470: jne 0x000000000018d503; ret; 
0x00000000191d45: jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x0000000018b690: jne 0xfffffffff3842b56; bsf eax, eax; ret; 
0x0000000018cbb0: jne 0xfffffffff3844076; bsf eax, eax; ret; 
0x0000000002d141: jne short 0x000000000002d117; mov rdx, [rip+0x1bfd3e]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x0000000002d151: jne short 0x000000000002d117; ret; 
0x0000000003a35b: jne short 0x000000000003a368; mov eax, r8d; ret; 
0x0000000003ae63: jne short 0x000000000003ae70; add rsp, 0x18; ret; 
0x0000000003aea3: jne short 0x000000000003aeb0; add rsp, 0x18; ret; 
0x0000000003f5f1: jne short 0x000000000003f5cc; ret; 
0x0000000003f837: jne short 0x000000000003f820; mov r10d, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x00000000040428: jne short 0x00000000000403f6; mov rax, [rip+0x1ac9df]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000403f2: jne short 0x0000000000040400; fadd st, st(0); add rsp, 0x8; ret; 
0x00000000040542: jne short 0x0000000000040558; mov rax, 0xfffffffffffff; test rdx, rax; je short 0x0000000000040558; ret; 
0x000000000407a8: jne short 0x00000000000407b0; addsd xmm0, xmm0; ret; 
0x000000000408b7: jne short 0x00000000000408d0; and esi, 0x80000000; movss [rdi], xmm0; movd xmm0, esi; ret; 
0x00000000040902: jne short 0x0000000000040910; test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000040ac4: jne short 0x0000000000040ad0; addss xmm0, xmm0; ret; 
0x00000000041186: jne short 0x0000000000041190; mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000413d4: jne short 0x00000000000413e0; pop rbp; ret; 
0x0000000004162b: jne short 0x0000000000041638; add rsp, 0x8; ret; 
0x000000000416ba: jne short 0x00000000000416d8; mov esi, 0x8; mov eax, 0x82; syscall; 
0x00000000041d3c: jne short 0x0000000000041d58; mov rax, [rip+0x1ab0cb]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041e85: jne short 0x0000000000041ed0; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x000000000426e8: jne short 0x00000000000426d0; mov rsi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000428af: jne short 0x00000000000428b1; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x00000000043dab: jne short 0x0000000000043d70; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000043e2b: jne short 0x0000000000043e30; pop rbx; ret; 
0x00000000044a2a: jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x00000000045cff: jne short 0x0000000000045d1f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004846f: jne short 0x000000000004848f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004ac1f: jne short 0x000000000004ac3f; xor eax, eax; add rsp, 0x8; ret; 
0x0000000004dfaf: jne short 0x000000000004df8c; mov rax, r8; ret; 
0x0000000004dff8: jne short 0x000000000004dfe0; lea rax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000004f7e5: jne short 0x000000000004f7d8; pop rbx; ret; 
0x0000000004f808: jne short 0x000000000004f800; pop rbx; ret; 
0x000000000501f2: jne short 0x00000000000501b0; ret; 
0x00000000050486: jne short 0x0000000000050441; sub rdx, 0x1; jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x00000000050467: jne short 0x0000000000050458; xor eax, eax; ret; 
0x0000000005048c: jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x0000000005056e: jne short 0x0000000000050530; sub rdx, 0x1; jne short 0x0000000000050558; mov eax, 0x1; ret; 
0x0000000005054f: jne short 0x0000000000050540; xor eax, eax; ret; 
0x00000000050574: jne short 0x0000000000050558; mov eax, 0x1; ret; 
0x0000000005081b: jne short 0x0000000000050808; mov rax, rdx; ret; 
0x00000000052088: jne short 0x00000000000520b0; mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000052132: jne short 0x0000000000052118; mov eax, 0x1; ret; 
0x0000000005212b: jne short 0x000000000005211e; cmp cx, 0x7fff; jne short 0x0000000000052118; mov eax, 0x1; ret; 
0x00000000052116: jne short 0x0000000000052140; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x00000000052274: jne short 0x00000000000522e0; mov dword ptr [rsi], 0x0; mov eax, 0x2; ret; 
0x000000000525ef: jne short 0x000000000005260f; xor eax, eax; add rsp, 0x8; ret; 
0x00000000054d8a: jne short 0x0000000000054d89; dec dword ptr [rcx-0x77]; ret; 
0x0000000005bb78: jne short 0x000000000005bb80; pop rbx; ret; 
0x0000000005c0bf: jne short 0x000000000005c0d0; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000006ecef: jne short 0x000000000006ecfa; add [rax], al; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000007aab1: jne short 0x000000000007aaa0; mov rax, r8; ret; 
0x0000000007b08a: jne short 0x000000000007b0f0; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000007b869: jne short 0x000000000007b8b0; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007db29: jne short 0x000000000007db50; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000007de08: jne short 0x000000000007de18; mov eax, [rdx+0x4c]; cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x00000000082a13: jne short 0x0000000000082a20; xor eax, eax; ret; 
0x000000000831f3: jne short 0x0000000000083200; ret; 
0x00000000083401: jne short 0x00000000000833f0; mov rax, r8; ret; 
0x00000000083ffe: jne short 0x0000000000083ff0; ret; 
0x0000000008421a: jne short 0x0000000000084240; pop rbp; ret; 
0x00000000084341: jne short 0x00000000000842ff; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000084ae6: jne short 0x0000000000084ad8; ret; 
0x00000000084b23: jne short 0x0000000000084b30; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x00000000084e32: jne short 0x0000000000084e48; mov [rip+0x16b8dd], rbx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x0000000008614e: jne short 0x0000000000086158; and edx, 0x38; cmp edx, 0x8; je short 0x0000000000086159; ret; 
0x000000000863a6: jne short 0x00000000000863b2; mov dword ptr [rip+0x166ec6], 0x0; add rsp, 0x10; pop rbp; ret; 
0x0000000008641b: jne short 0x0000000000086453; xor eax, eax; ret; 
0x000000000865f4: jne short 0x0000000000086600; xend; xor eax, eax; ret; 
0x00000000086c04: jne short 0x0000000000086be0; mov rdx, [rbp]; test rdx, rdx; je short 0x0000000000086be0; call rdx; 
0x00000000086da5: jne short 0x0000000000086d88; pop rbx; ret; 
0x00000000086e5c: jne short 0x0000000000086e11; pop rbx; ret; 
0x000000000879c7: jne short 0x00000000000879e0; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x00000000088933: jne short 0x0000000000088927; and edx, 0x3; cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x00000000088970: jne short 0x0000000000088971; jmp qword ptr [rsi+0x66]; 
0x0000000008a3c2: jne short 0x000000000008a3e3; xor edi, edi; mov eax, 0x91; syscall; 
0x0000000008a950: jne short 0x000000000008a958; ret; 
0x0000000008a945: jne short 0x000000000008a976; mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x000000000008a958; ret; 
0x0000000008b112: jne short 0x000000000008b150; mov rax, r8; ret; 
0x0000000008b358: jne short 0x000000000008b33c; mov eax, 0xb; ret; 
0x0000000008b3aa: jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x0000000008bf01: jne short 0x000000000008bf07; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x0000000008bfe4: jne short 0x000000000008bff3; mov eax, fs:[0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000008c011: jne short 0x000000000008c01c; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x0000000008df54: jne short 0x000000000008df5e; test eax, eax; jne 0x000000000008e040; mov eax, 0x1; ret; 
0x0000000008e0d6: jne short 0x000000000008e0ba; mov qword ptr fs:[0x2f0], 0x0; xor eax, eax; ret; 
0x0000000008e30c: jne short 0x000000000008e320; mov dword ptr [rdi], 0x0; xor eax, eax; add rsp, 0x18; ret; 
0x0000000008e582: jne short 0x000000000008e590; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x0000000008e5b7: jne short 0x000000000008e5d8; or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x0000000008f602: jne short 0x000000000008f5d2; test al, 0x1; jne short 0x000000000008f610; xor eax, eax; ret; 
0x0000000008f606: jne short 0x000000000008f610; xor eax, eax; ret; 
0x0000000008f6be: jne short 0x000000000008f690; mov eax, 0x10; ret; 
0x00000000090423: jne short 0x0000000000090430; xor eax, eax; ret; 
0x00000000090488: jne short 0x0000000000090492; and eax, 0x38; cmp eax, 0x8; je short 0x0000000000090493; ret; 
0x0000000009060f: jne short 0x0000000000090618; xor eax, eax; ret; 
0x00000000091093: jne short 0x000000000009107b; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000000911ab: jne short 0x00000000000911b8; xor eax, eax; pop rbp; ret; 
0x000000000911e0: jne short 0x00000000000911d3; xor eax, eax; ret; 
0x00000000091957: jne short 0x0000000000091987; mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000919b9: jne short 0x00000000000919e7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091a07: jne short 0x0000000000091a37; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091a57: jne short 0x0000000000091a87; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091aa7: jne short 0x0000000000091ad7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091ba7: jne short 0x0000000000091bd7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091bf7: jne short 0x0000000000091c27; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091c47: jne short 0x0000000000091c77; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091c97: jne short 0x0000000000091cc7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091d04: jne short 0x0000000000091d2f; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091d57: jne short 0x0000000000091d87; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091dcc: jne short 0x0000000000091dff; mov eax, 0x3; add rsp, 0x10; pop rbx; ret; 
0x00000000091e27: jne short 0x0000000000091e57; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091e97: jne short 0x0000000000091ec7; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091f93: jne short 0x0000000000091f78; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x00000000092293: jne short 0x0000000000092280; mov [rdi+0x20], rax; mov [rsi+0x20], rdi; ret; 
0x00000000092850: jne short 0x0000000000092840; ret; 
0x000000000928ab: jne short 0x00000000000928b1; mov rax, [r8+0x18]; mov [rdi+0x18], rax; ret; 
0x00000000093ea7: jne short 0x0000000000093ec0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x00000000093f9d: jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x0000000009405d: jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x00000000094103: jne short 0x0000000000094148; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x00000000094aa8: jne short 0x0000000000094ab0; ret; 
0x00000000095c10: jne short 0x0000000000095c60; add rsp, 0x10; pop rbp; ret; 
0x000000000983e7: jne short 0x00000000000983f0; ret; 
0x00000000098430: jne short 0x0000000000098418; pop rbx; pop rbp; pop r12; ret; 
0x0000000009a1d1: jne short 0x000000000009a1c0; xor eax, eax; ret; 
0x0000000009a233: jne short 0x000000000009a208; mov rdi, rsi; call rax; 
0x0000000009a28d: jne short 0x000000000009a280; mov eax, r8d; ret; 
0x0000000009aa5d: jne short 0x000000000009aa10; ret; 
0x0000000009aa4e: jne short 0x000000000009aa35; lea rax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009aadf: jne short 0x000000000009aaa1; ret; 
0x0000000009aad3: jne short 0x000000000009aab6; lea rax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x0000000009ab6d: jne short 0x000000000009ab20; ret; 
0x0000000009ab5e: jne short 0x000000000009ab45; lea rax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009ac0d: jne short 0x000000000009abc0; ret; 
0x0000000009abfe: jne short 0x000000000009abe5; lea rax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000009afdd: jne short 0x000000000009af90; ret; 
0x0000000009afce: jne short 0x000000000009afb5; lea rax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009b10d: jne short 0x000000000009b0c0; ret; 
0x0000000009b0fe: jne short 0x000000000009b0e5; lea rax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009bba8: jne short 0x000000000009bb50; ret; 
0x0000000009bb99: jne short 0x000000000009bb74; and esi, 0x800; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x0000000009bfbd: jne short 0x000000000009bf70; ret; 
0x0000000009bfae: jne short 0x000000000009bf95; lea rax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c04d: jne short 0x000000000009c000; ret; 
0x0000000009c03e: jne short 0x000000000009c025; lea rax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009ccb4: jne short 0x000000000009cca0; ret; 
0x0000000009cdcb: jne short 0x000000000009cdc0; mov rax, r8; ret; 
0x0000000009de52: jne short 0x000000000009de16; mov rax, r10; ret; 
0x0000000009f0a5: jne short 0x000000000009f091; or [rdi], sil; mov eax, r8d; ret; 
0x000000000a110e: jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x000000000a11d5: jne short 0x00000000000a11c0; mov byte ptr [rdi], 0x0; mov [r8], rax; mov rax, r9; ret; 
0x000000000a127f: jne short 0x00000000000a1270; mov rax, r8; ret; 
0x000000000a12b3: jne short 0x00000000000a12a0; mov rax, r8; ret; 
0x000000000a12f7: jne short 0x00000000000a12d8; mov rax, r8; ret; 
0x000000000a1396: jne short 0x00000000000a1380; cmp eax, r10d; je short 0x00000000000a1380; mov rax, r8; ret; 
0x000000000a13d3: jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x000000000a1426: jne short 0x00000000000a1408; mov rax, r8; ret; 
0x000000000a30ec: jne short 0x00000000000a30d0; xor eax, eax; sub eax, ecx; ret; 
0x000000000a4be7: jne short 0x00000000000a4c40; xor eax, eax; ret; 
0x000000000a4e23: jne short 0x00000000000a4e70; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a508a: jne short 0x00000000000a5100; xor eax, eax; ret; 
0x000000000a50b9: jne short 0x00000000000a5130; xor eax, eax; ret; 
0x000000000aa7a3: jne short 0x00000000000aa7a9; xor rax, rax; ret; 
0x000000000b3e81: jne short 0x00000000000b3e70; ret; 
0x000000000b3e78: jne short 0x00000000000b3e90; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3e70; ret; 
0x000000000b3f31: jne short 0x00000000000b3f20; ret; 
0x000000000b3f28: jne short 0x00000000000b3f40; movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3f20; ret; 
0x000000000b40a1: jne short 0x00000000000b4090; lea rax, [rcx-0x1]; ret; 
0x000000000b41f1: jne short 0x00000000000b41e0; sub rax, 0x1; ret; 
0x000000000b4b23: jne short 0x00000000000b4b29; mov rax, rdi; ret; 
0x000000000b50a3: jne short 0x00000000000b505b; ret; 
0x000000000b5094: jne short 0x00000000000b5074; and esi, 0x800; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x000000000b52c1: jne short 0x00000000000b5298; mov rax, r8; ret; 
0x000000000b53b8: jne short 0x00000000000b53a8; xor eax, eax; ret; 
0x000000000b544e: jne short 0x00000000000b53e5; test edx, edx; jne short 0x00000000000b5430; ret; 
0x000000000b5452: jne short 0x00000000000b5430; ret; 
0x000000000b5558: jne short 0x00000000000b5500; ret; 
0x000000000b5549: jne short 0x00000000000b5524; and esi, 0x800; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b6653: jne short 0x00000000000b660b; ret; 
0x000000000b6644: jne short 0x00000000000b6624; and esi, 0x800; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b668d: jne short 0x00000000000b6680; ret; 
0x000000000b705f: jne short 0x00000000000b707f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000b966f: jne short 0x00000000000b968f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000bbb7f: jne short 0x00000000000bbb9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000c10d1: jne short 0x00000000000c1136; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000c1c7f: jne short 0x00000000000c1c9f; xor eax, eax; add rsp, 0x8; ret; 
0x000000000c4a57: jne short 0x00000000000c4ac0; xor eax, eax; ret; 
0x000000000c5766: jne short 0x00000000000c57e0; ret; 
0x000000000c5885: jne short 0x00000000000c5870; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000c5d0b: jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c5d07: jne short 0x00000000000c5d70; test al, 0xf0; jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c6213: jne short 0x00000000000c6219; xor rax, rax; ret; 
0x000000000c73b3: jne short 0x00000000000c73e0; mov eax, 0x60; syscall; 
0x000000000ca3b9: jne short 0x00000000000ca3c8; mov rax, r8; add rsp, 0x8; ret; 
0x000000000cd52b: jne short 0x00000000000cd501; or eax, 0xd1b60f00; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000d21bb: jne short 0x00000000000d2210; xor eax, eax; add rsp, 0x8; ret; 
0x000000000d229d: jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d2727: jne short 0x00000000000d2710; pop rbx; pop rbp; pop r12; ret; 
0x000000000d67dd: jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d688d: jne short 0x00000000000d68a8; xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000d69ba: jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000d6a45: jne short 0x00000000000d6a50; add rsp, 0x8; ret; 
0x000000000d7fbd: jne short 0x00000000000d7fbf; add [rax], al; syscall; 
0x000000000d838b: jne short 0x00000000000d8390; ret; 
0x000000000d8399: jne short 0x00000000000d840d; mov eax, 0x7d00; ret; 
0x000000000d8405: jne short 0x00000000000d8423; mov eax, 0xfffa; ret; 
0x000000000d8526: jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000d90c0: jne short 0x00000000000d909f; xor eax, eax; ret; 
0x000000000db42b: jne short 0x00000000000db3f9; xor eax, eax; ret; 
0x000000000db409: jne short 0x00000000000db421; mov eax, 0x1; ret; 
0x000000000df2b3: jne short 0x00000000000df2a5; mov byte ptr [rdi+0x8], 0x16; mov eax, 0x1; ret; 
0x000000000df285: jne short 0x00000000000df2b0; mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x000000000e06e2: jne short 0x00000000000e06b0; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000ee1f0: jne short 0x00000000000ee1cf; xor eax, eax; ret; 
0x000000000f029e: jne short 0x00000000000f0278; mov eax, [rdi+0x14]; ret; 
0x000000000f11cb: jne short 0x00000000000f1164; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x000000000f118f: jne short 0x00000000000f1180; mov eax, [rdx+0x8]; ret; 
0x000000000f3d4b: jne short 0x00000000000f3d30; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f4deb: jne short 0x00000000000f4de0; call far fword ptr [rax+0x5a]; 
0x000000000f7f8d: jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f803d: jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f85ba: jne short 0x00000000000f85c1; mov [rdi], si; xor eax, eax; ret; 
0x000000000f8c4f: jne short 0x00000000000f8c51; add [rax], al; syscall; 
0x000000000f8f63: jne short 0x00000000000f8f70; mov rax, [rsp]; add rsp, 0x18; ret; 
0x000000000f8fb6: jne short 0x00000000000f8f90; mov eax, r8d; ret; 
0x000000000f9645: jne short 0x00000000000f9678; mov r10d, ecx; mov eax, 0x103; syscall; 
0x000000000f9b89: jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c9a: jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d3a: jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa18a: jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa2c4: jne short 0x00000000000fa325; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000fa35a: jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4da: jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fae94: jne short 0x00000000000faed0; add rsp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000fd9fa: jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdab9: jne short 0x00000000000fdae0; mov r8d, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000fdfcd: jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe186: jne short 0x00000000000fe156; mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x000000000fe3ab: jne short 0x00000000000fe3b0; pop rbp; ret; 
0x000000000fe44d: jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4fd: jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000fe649: jne short 0x00000000000fe605; neg eax; ret; 
0x000000000fe6a1: jne short 0x00000000000fe664; neg eax; ret; 
0x000000000fe8d7: jne short 0x00000000000fe8b8; or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x000000000feb1a: jne short 0x00000000000feb40; mov edx, 0x1; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000ff25a: jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2fa: jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000ff39d: jne short 0x00000000000ff3b8; xor r8d, r8d; mov eax, 0x127; syscall; 
0x000000000ff44d: jne short 0x00000000000ff468; xor r8d, r8d; mov eax, 0x128; syscall; 
0x000000000ff8ce: jne short 0x00000000000ff8d0; add [rax], al; syscall; 
0x000000000ffe7f: jne short 0x00000000000ffea0; mov eax, 0x10e; syscall; 
0x000000000fffaa: jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x0000000010006a: jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000100a8a: jne short 0x0000000000100a50; xor eax, eax; pop rbp; ret; 
0x00000000100ada: jne short 0x0000000000100aaf; mov rax, r8; ret; 
0x0000000010190a: jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x00000000102afa: jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x00000000103b14: jne short 0x0000000000103b48; mov rdi, rbp; mov edx, r13d; mov esi, 0x1; call r12; 
0x00000000103ba4: jne short 0x0000000000103bd8; mov rdi, rbp; mov rdx, r13; mov esi, 0x1; call r12; 
0x00000000103c1d: jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x00000000103c81: jne short 0x0000000000103cc0; ret; 
0x00000000103cb3: jne short 0x0000000000103cd0; ret; 
0x00000000104538: jne short 0x0000000000104540; ret; 
0x00000000104558: jne short 0x0000000000104560; ret; 
0x00000000104ade: jne short 0x0000000000104b19; pop rbx; pop rbp; pop r12; ret; 
0x00000000104e25: jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x000000001055a8: jne short 0x0000000000105598; mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105628: jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x000000001090cd: jne short 0x00000000001090e8; mov r9d, 0x8; mov eax, 0x119; syscall; 
0x000000001092ad: jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x0000000010935d: jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x0000000010940d: jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094bd: jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x0000000010957a: jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3ba: jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a48a: jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a5ed: jne short 0x000000000010a608; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000010a6ad: jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a76a: jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a80d: jne short 0x000000000010a828; xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a8ca: jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a96d: jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad0d: jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adbd: jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae6d: jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afcd: jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b07d: jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x0000000010b16e: jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x0000000010b5cb: jne short 0x000000000010b5e6; mov edx, 0x40; mov eax, 0x14; syscall; 
0x0000000010ce1c: jne short 0x000000000010ce28; mov eax, r8d; ret; 
0x0000000010ce86: jne short 0x000000000010ce90; ret; 
0x0000000010d04f: jne short 0x000000000010d058; ret; 
0x0000000010d69d: jne short 0x000000000010d6a0; ret; 
0x0000000010d6ea: jne short 0x000000000010d6f0; ret; 
0x0000000010d89f: jne short 0x000000000010d8a8; ret; 
0x0000000011081a: jne short 0x0000000000110828; pop rbx; pop rbp; pop r12; ret; 
0x00000000113ddc: jne short 0x0000000000113e10; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000114018: jne short 0x0000000000114000; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000011556d: jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x000000001155e5: jne short 0x00000000001155f0; cmp qword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x000000001156e8: jne short 0x00000000001156ba; lea rdi, [rip-0xe1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000115723: jne short 0x0000000000115727; xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000116318: jne short 0x00000000001162c1; mov rax, r9; ret; 
0x000000001171e7: jne short 0x0000000000117198; mov rax, r8; ret; 
0x0000000011f375: jne short 0x000000000011f36d; dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x0000000011f3e3: jne short 0x000000000011f3d0; pop rbx; ret; 
0x00000000120c05: jne short 0x0000000000120c06; call far fword ptr [rdi+0x41]; 
0x00000000121aef: jne short 0x0000000000121ae0; mov fs:[rbx], r14d; mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x000000001229bc: jne short 0x0000000000122990; mov [r8], rdi; xor eax, eax; ret; 
0x00000000122c51: jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x00000000123109: jne short 0x0000000000123120; mov eax, r8d; ret; 
0x0000000012423c: jne short 0x0000000000124248; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000128a34: jne short 0x0000000000128a16; mov eax, r10d; ret; 
0x00000000128c86: jne short 0x0000000000128c90; pop rbx; ret; 
0x00000000128d1e: jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x00000000128eb1: jne short 0x0000000000128ec0; xor eax, eax; add rsp, 0x100; pop rbx; ret; 
0x00000000129164: jne short 0x0000000000129178; mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x0000000000129178; ret; 
0x00000000129b2c: jne short 0x0000000000129b30; ret; 
0x00000000129b6c: jne short 0x0000000000129b58; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012b319: jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x0000000012f0ea: jne short 0x000000000012f0f0; ret; 
0x0000000012f9ad: jne short 0x000000000012f9a0; ret; 
0x0000000012f9f1: jne short 0x000000000012fa06; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x0000000012ff37: jne short 0x000000000012fed4; pop rbx; pop rbp; pop r12; ret; 
0x00000000131c34: jne short 0x0000000000131bb8; ret; 
0x00000000131ec1: jne short 0x0000000000131ee0; ret; 
0x00000000132420: jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x0000000013253d: jne short 0x0000000000132558; mov eax, r8d; ret; 
0x00000000133b05: jne short 0x0000000000133af0; mov rax, r8; add rsp, 0x8; ret; 
0x00000000139716: jne short 0x0000000000139738; mov rax, [r12+0x8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000139996: jne short 0x00000000001399a7; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013a655: jne short 0x000000000013a6b0; mov dword ptr [rsi], 0x0; ret; 
0x0000000013cbc4: jne short 0x000000000013cbb0; ret; 
0x0000000013e948: jne short 0x000000000013e950; ret; 
0x00000000142b47: jne short 0x0000000000142b50; pop rbx; pop rbp; pop r12; ret; 
0x00000000143257: jne short 0x0000000000143240; pop rbx; ret; 
0x000000001434d8: jne short 0x00000000001434e0; ret; 
0x00000000144488: jne short 0x0000000000144460; add r9d, r9d; movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x00000000144a23: jne short 0x0000000000144a11; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x00000000145d92: jne short 0x0000000000145da0; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000145dd2: jne short 0x0000000000145de0; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000149fc7: jne short 0x0000000000149f90; xor eax, eax; add rsp, 0x18; ret; 
0x0000000014a1a7: jne short 0x000000000014a174; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x0000000014a207: jne short 0x000000000014a1d4; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x0000000014c34a: jne short 0x000000000014c352; add rsp, 0x30; pop rbx; ret; 
0x0000000014cdcb: jne short 0x000000000014ce40; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x0000000014d08e: jne short 0x000000000014d098; pop rbx; ret; 
0x0000000015289b: jne short 0x00000000001528a3; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152933: jne short 0x000000000015293c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000016992c: jne short 0x0000000000169960; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000016f49c: jne short 0x000000000016f508; test esi, esi; je short 0x000000000016f480; xor eax, eax; ret; 
0x0000000016f99d: jne short 0x000000000016f980; sub eax, ecx; vzeroupper; ret; 
0x0000000016fe72: jne short 0x000000000016fe50; sub eax, ecx; vzeroupper; ret; 
0x00000000170829: jne short 0x00000000001708a3; vzeroupper; ret; 
0x000000001709a1: jne short 0x00000000001709e4; vzeroupper; ret; 
0x000000001709d6: jne short 0x0000000000170a20; vzeroupper; ret; 
0x00000000173c06: jne short 0x0000000000173c35; add rax, rdi; vzeroupper; ret; 
0x00000000173da4: jne short 0x0000000000173dc5; add rax, rdi; vzeroupper; ret; 
0x00000000177acd: jne short 0x0000000000177b43; vzeroupper; ret; 
0x00000000177c61: jne short 0x0000000000177ca4; vzeroupper; ret; 
0x00000000177c96: jne short 0x0000000000177ce0; vzeroupper; ret; 
0x0000000017812e: jne short 0x0000000000178111; vzeroupper; ret; 
0x00000000178242: jne short 0x000000000017827f; ret far; 
0x00000000178372: jne short 0x00000000001783af; ret far; 
0x0000000017844b: jne short 0x0000000000178430; sub eax, ecx; vzeroupper; ret; 
0x000000001785a9: jne short 0x0000000000178575; vzeroupper; ret; 
0x000000001786bf: jne short 0x00000000001786fc; ret far; 
0x00000000178822: jne short 0x000000000017885f; ret far; 
0x00000000178920: jne short 0x0000000000178900; sub eax, ecx; vzeroupper; ret; 
0x00000000178a85: jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x00000000178c2a: jne short 0x0000000000178c54; add rax, rdi; vzeroupper; ret; 
0x0000000017aa0d: jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017aa4c: jne short 0x000000000017aa60; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000017b84d: jne short 0x000000000017b873; xor eax, eax; ret; 
0x0000000017b881: jne short 0x000000000017b886; xor eax, eax; ret; 
0x0000000017c385: jne short 0x000000000017c310; lea rax, [rdi+0x3]; ret; 
0x0000000017c356: jne short 0x000000000017c310; lea rax, [rdi+0x7]; ret; 
0x0000000017c302: jne short 0x000000000017c314; nop [rax+rax]; nop; xor rax, rax; ret; 
0x0000000017d7b4: jne short 0x000000000017d830; movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x0000000017dd01: jne short 0x000000000017dd05; cmp eax, ecx; sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x0000000017dce9: jne short 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017e316: jne short 0x000000000017e320; xor eax, eax; ret; 
0x00000000184692: jne short 0x00000000001846cf; ret far; 
0x000000001847c2: jne short 0x00000000001847ff; ret far; 
0x00000000184cff: jne short 0x0000000000184d3c; ret far; 
0x00000000184e62: jne short 0x0000000000184e9f; ret far; 
0x000000001860d3: jne short 0x00000000001860e0; ret; 
0x00000000186276: jne short 0x00000000001862c4; ret; 
0x000000001862b7: jne short 0x00000000001862e0; ret; 
0x00000000188a29: jne short 0x00000000001889f1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188a51: jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x000000001889e9: jne short 0x00000000001889f1; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188a11: jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x000000001889cd: jne short 0x00000000001889f1; ret; 
0x00000000188c09: jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000188bb9: jne short 0x0000000000188b99; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188b90: jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188ba8: jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x000000001892fd: jne short 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018aa72: jne short 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018bbc8: jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbe1: jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb88: jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bbb1: jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bb6d: jne short 0x000000000018bb90; ret; 
0x0000000018bd48: jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd1c: jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bd37: jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x0000000018bd90: jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x0000000018be25: jne short 0x000000000018be07; ret; 
0x0000000018c25b: jne short 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018c570: jne short 0x000000000018c547; ret; 
0x0000000018ca50: jne short 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000018d4b3: jne short 0x000000000018d4c0; ret; 
0x0000000018d656: jne short 0x000000000018d6a4; ret; 
0x0000000018d697: jne short 0x000000000018d6c0; ret; 
0x0000000018d9bd: jne short 0x000000000018d9f0; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x0000000018dbf3: jne short 0x000000000018dc30; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018de60: jne short 0x000000000018dea0; kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x00000000192004: jne short 0x0000000000192053; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000192206: jne short 0x0000000000192231; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000192411: jne short 0x000000000019248a; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000192725: jne short 0x000000000019270d; pop rbx; ret; 
0x00000000192a3e: jne short 0x0000000000192a20; pop rbx; pop rbp; pop r12; ret; 
0x00000000192b16: jne short 0x0000000000192b00; pop rbx; pop rbp; pop r12; ret; 
0x00000000192b61: jne short 0x0000000000192b38; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000192c9b: jne short 0x0000000000192c85; pop rbx; ret; 
0x00000000192d35: jne short 0x0000000000192d18; pop rbx; ret; 
0x00000000192e17: jne short 0x0000000000192e08; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000193027: jne short 0x0000000000193030; pop rbp; ret; 
0x000000001931ee: jne short 0x00000000001931e0; mov qword ptr [rip+0x692e5], 0x0; pop rbx; ret; 
0x0000000004459b: jno short 0x0000000000044525; sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000050ca4: jno short 0x0000000000050cef; shl ecx, cl; mov [rdi], r9; ret; 
0x00000000079f2d: jno short 0x0000000000079f33; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000007a094: jno short 0x000000000007a09a; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x000000000870b8: jno short 0x00000000000870ca; syscall; 
0x00000000087120: jno short 0x0000000000087132; syscall; 
0x00000000088d13: jno short 0x0000000000088d14; jmp qword ptr [rsi+0x2e]; 
0x0000000008fe64: jno short 0x000000000008fe6f; add [rax], al; xor eax, eax; ret; 
0x00000000091eed: jno short 0x0000000000091ef5; add [rbp-0x7eb38a40], al; ret far; 
0x000000000b4695: jno short 0x00000000000b4687; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000b4e53: jno short 0x00000000000b4dd5; adc eax, [rax]; mov rax, [rax+0x238]; ret; 
0x000000000f3d97: jno short 0x00000000000f3d8d; jmp qword ptr [rsi+0xf]; 
0x000000000f3d96: jno short 0x00000000000f3d8d; jmp qword ptr [rsi+0xf]; 
0x000000000ff7dd: jno short 0x00000000000ff7df; add [rax], al; syscall; 
0x0000000010f6d9: jno short 0x000000000010f6d2; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000111375: jno short 0x0000000000111379; cmovne eax, edx; ret; 
0x00000000116dab: jno short 0x0000000000116da0; call qword ptr [rax-0x18]; 
0x0000000013ab2b: jno short 0x000000000013ab4d; or eax, [rax]; jmp qword ptr [rdx+rax*8]; 
0x00000000140cdb: jno short 0x0000000000140c93; out dx, al; call qword ptr [rax-0x17ff8275]; 
0x0000000014c453: jno short 0x000000000014c45f; or al, [rax]; jmp qword ptr [rax+0x348]; 
0x00000000152c86: jno short 0x0000000000152c8e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d24: jno short 0x0000000000152d2c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017a2be: jno short 0x000000000017a2c7; add [rax], al; xor eax, eax; ret; 
0x0000000017b960: jno short 0x000000000017b960; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb9a: jno short 0x000000000017bb9a; vmovups [r9-0x40], zmm15; ret; 
0x0000000017bd01: jno short 0x000000000017bd09; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017be58: jno short 0x000000000017bed6; adc [rdi-0x6], rbp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be5f: jno short 0x000000000017bedd; adc [rdi-0x7], rsi; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be66: jno short 0x000000000017bee4; adc [rdi-0x8], rdi; ret; 
0x0000000017e68f: jno short 0x000000000017e690; vmovdqu64 [rcx-0x80], zmm23; vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x00000000186756: jno short 0x0000000000186757; vmovdqu64 [rcx-0x40], ymm23; vmovdqu64 [rcx-0x60], ymm24; vmovdqu64 [r11], ymm20; ret; 
0x000000000417d4: jnp 0x0000000000843c5e; add [rax], al; add rsp, 0x108; ret; 
0x00000000041827: jnp 0x0000000000843cb1; add [rax], al; add rsp, 0x108; ret; 
0x0000000005c0c0: jnp 0x000000004811e50a; add esp, 0x18; ret; 
0x00000000072148: jnp short 0x000000000007214a; add [rax+0x39], cl; ret; 
0x00000000082954: jnp short 0x0000000000082951; jmp qword ptr [rsi+0xf]; 
0x00000000087220: jnp short 0x000000000008722a; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x000000000880f7: jnp short 0x0000000000088101; call qword ptr [rbx]; 
0x00000000099fc0: jnp short 0x000000000009a00a; call rcx; 
0x0000000009a193: jnp short 0x000000000009a1dd; mov rsi, r14; call rax; 
0x0000000009a20a: jnp short 0x000000000009a254; call rax; 
0x000000000b0d35: jnp short 0x00000000000b0ccb; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b54ce: jnp short 0x00000000000b54dd; add [rax-0x73], cl; add eax, 0xd8768; cmove rax, rdx; ret; 
0x000000000d8522: jnp short 0x00000000000d8575; add [rax], al; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000fb514: jnp short 0x00000000000fb52e; lea rcx, [rbx+0x28]; mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000100a01: jnp short 0x0000000000100a08; add [rax], al; mov qword ptr [rip+0xf54d0], 0x0; add rsp, 0x8; ret; 
0x00000000109091: jnp short 0x0000000000109093; add [rax], al; syscall; 
0x000000001109c4: jnp short 0x00000000001109ee; add [rax], bh; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x0000000011d751: jnp short 0x000000000011d72f; call far fword ptr [rsi+0x5f]; 
0x0000000011f3de: jnp short 0x000000000011f428; test rdi, rdi; jne short 0x000000000011f3d0; pop rbx; ret; 
0x00000000131fca: jnp short 0x0000000000131fd4; call rsi; 
0x000000001522a4: jnp short 0x00000000001522ac; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152356: jnp short 0x000000000015235e; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000186555: jnp short 0x000000000018659f; mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x000000000f8102: jns 0x000000004398c933; or [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000008e4b6: jns 0xffffffffc3c915c2; nop [rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000b3966: jns 0xffffffffed3b3cc3; mov [rdi+0x7], ch; ret; 
0x000000000b39c8: jns 0xffffffffed3b4125; mov [rdi+0xb], ch; ret; 
0x000000000b39e8: jns 0xffffffffed3b4245; mov [rdi+0xc], ch; ret; 
0x00000000036ac3: jns short 0x0000000000036a51; sbb eax, [rax]; ret; 
0x00000000041c93: jns short 0x0000000000041c46; sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004431f: jns short 0x00000000000442e9; xor eax, eax; ret; 
0x000000000555a5: jns short 0x000000000005556d; or [r8], r8b; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000619be: jns short 0x00000000000619cf; test [rip-0x16000015], ah; sahf; mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000722e5: jns short 0x00000000000722e7; add [rax+0x39], cl; ret; 
0x0000000007f193: jns short 0x000000000007f16f; std; jmp qword ptr [rsi+0xf]; 
0x0000000008855a: jns short 0x000000000008855c; jmp qword ptr [rsi-0x70]; 
0x000000000943fd: jns short 0x0000000000094405; lea rax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x00000000096b31: jns short 0x0000000000096b48; add [rcx+0x39], cl; ret far; 
0x0000000009aa27: jns short 0x000000000009aa2a; add [rax-0x73], cl; adc eax, 0xff8f; cmovne rax, rdx; ret; 
0x0000000009aa26: jns short 0x000000000009aa2a; add [rax-0x73], cl; adc eax, 0xff8f; cmovne rax, rdx; ret; 
0x0000000009b103: jns short 0x000000000009b0ae; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x0000000009be73: jns short 0x000000000009be25; or eax, [rax]; cmovne rax, rdx; ret; 
0x0000000009c1e3: jns short 0x000000000009c1e3; clc; jmp qword ptr [rsi+0xf]; 
0x0000000009c293: jns short 0x000000000009c241; or eax, [rax]; cmovne rax, rdx; ret; 
0x000000000b29e6: jns short 0x00000000000b29f7; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a3e: jns short 0x00000000000b2a4f; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a5b: jns short 0x00000000000b2a6c; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a5a: jns short 0x00000000000b2a6c; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a80: jns short 0x00000000000b2a91; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b4699: jns short 0x00000000000b467b; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000b6493: jns short 0x00000000000b64d5; clc; jmp qword ptr [rsi+0xf]; 
0x000000000d1553: jns short 0x00000000000d1502; cmc; jmp far fword ptr [rcx]; 
0x000000000d31a0: jns short 0x00000000000d319e; jmp qword ptr [rsi+0x2e]; 
0x000000000d7e61: jns short 0x00000000000d7e63; add [rax], al; syscall; 
0x000000000df1bb: jns short 0x00000000000df1a0; mov r9d, 0x1; mov eax, r9d; ret; 
0x000000000f8c09: jns short 0x00000000000f8c13; xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x00000000100485: jns short 0x000000000010048c; mov byte ptr [r12], 0x0; mov rax, r12; pop r12; ret; 
0x00000000105434: jns short 0x0000000000105444; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105467: jns short 0x0000000000105477; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105494: jns short 0x00000000001054a4; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001054c3: jns short 0x00000000001054d4; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001054f7: jns short 0x0000000000105507; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105574: jns short 0x0000000000105584; add [rax-0x7d], cl; call qword ptr [rax]; 
0x0000000010ef19: jns short 0x000000000010ef12; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000117e23: jns short 0x0000000000117e59; hlt; call far fword ptr [rax+0x4c]; 
0x0000000012f8b6: jns short 0x000000000012f8c4; add [rax-0x77], cl; or [r8-0x77], cl; ret far; 
0x0000000013b4d3: jns short 0x000000000013b4e3; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000014274b: jns short 0x00000000001426f5; or al, [rax]; pop rbx; ret; 
0x0000000014a3b3: jns short 0x000000000014a37a; clc; jmp qword ptr [rsi+0xf]; 
0x0000000014aec8: jns short 0x000000000014aed0; ret; 
0x0000000014eb93: jns short 0x000000000014eb77; or [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001524a6: jns short 0x00000000001524ae; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152544: jns short 0x000000000015254c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001773d7: jns short 0x0000000000177399; vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret; 
0x0000000017b967: jns short 0x000000000017b968; ret; 
0x0000000017bba1: jns short 0x000000000017bba2; ret; 
0x0000000017bd08: jns short 0x000000000017bd11; ret; 
0x0000000017e696: jns short 0x000000000017e696; vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x0000000018675d: jns short 0x000000000018675d; vmovdqu64 [rcx-0x60], ymm24; vmovdqu64 [r11], ymm20; ret; 
0x000000000405f4: jo 0x0000000034e4c742; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000003a952: jo short 0x000000000003a99d; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x000000000415c8: jo short 0x0000000000041632; movups [r8+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x0000000004227c: jo short 0x00000000000422ad; add [rax], al; add rsp, 0x8; ret; 
0x000000000475c1: jo short 0x00000000000475ac; leave; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000005c774: jo short 0x000000000005c720; adc al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000075509: jo short 0x0000000000075523; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000078d87: jo short 0x0000000000078dd5; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007ab27: jo short 0x000000000007ab39; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007b8a6: jo short 0x000000000007b8e8; mov [rax], rdx; xor eax, eax; ret; 
0x00000000085683: jo short 0x0000000000085688; add [rax], al; jmp qword ptr [rax+0x28]; 
0x000000000856d3: jo short 0x00000000000856d8; add [rax], al; jmp qword ptr [rax+0x30]; 
0x0000000008571b: jo short 0x0000000000085720; add [rax], al; mov rax, [rax+0x8]; jmp rax; 
0x00000000085c43: jo short 0x0000000000085c48; add [rax], al; jmp qword ptr [rax+0x38]; 
0x00000000086e9c: jo short 0x0000000000086eae; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x0000000008780d: jo short 0x00000000000877d2; nop; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000087e68: jo short 0x0000000000087e76; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000089600: jo short 0x000000000008960a; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000097347: jo short 0x00000000000972cc; ret; 
0x0000000009a85c: jo short 0x000000000009a866; jb short 0x000000000009a870; mov [r8], rsi; mov rax, rdi; ret; 
0x0000000009bd5c: jo short 0x000000000009bceb; add [rax], eax; cmovne rax, rdx; ret; 
0x000000000b3357: jo short 0x00000000000b3368; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33be: jo short 0x00000000000b33cf; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33db: jo short 0x00000000000b33ec; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33da: jo short 0x00000000000b33ec; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3400: jo short 0x00000000000b3411; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c8147: jo short 0x00000000000c8151; add rsp, 0x10; pop rbp; ret; 
0x000000000d7f21: jo short 0x00000000000d7f23; add [rax], al; syscall; 
0x000000000df5a4: jo short 0x00000000000df5aa; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret; 
0x000000000e090b: jo short 0x00000000000e093e; shl dh, 0x82; enter 0x0, 0x0; jne 0x00000000000e083d; ret; 
0x000000000f8594: jo short 0x00000000000f85a5; adc [rdi+0x78], edi; ret; 
0x000000000f8ee9: jo short 0x00000000000f8efa; adc [rdi+0xf8], edi; ret; 
0x000000000fe1e5: jo short 0x00000000000fe230; mov [rdi+0x20], edx; mov [rdi+0x28], rax; ret; 
0x00000000100650: jo short 0x000000000010065a; mov [rsp-0x38], rax; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000103cad: jo short 0x0000000000103cb7; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x0000000010f850: jo short 0x000000000010f84a; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000110b34: jo short 0x0000000000110b3e; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x000000001333a8: jo short 0x00000000001333b9; test [rsi+rdi*8-0x1], al; call qword ptr [rax+0xb885c7]; 
0x00000000139417: jo short 0x0000000000139461; mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000013f6cc: jo short 0x000000000013f70e; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000001404a0: jo short 0x000000000014042c; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x000000001404b4: jo short 0x00000000001404ff; mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000014096e: jo short 0x00000000001409b9; mov edi, ebp; call qword ptr [rax+0x20]; 
0x000000001432c8: jo short 0x00000000001432c5; jmp qword ptr [rsi-0x7d]; 
0x0000000014c4b3: jo short 0x000000000014c4b8; add [rax], al; call qword ptr [rax+0x48]; 
0x0000000014c52b: jo short 0x000000000014c530; add [rax], al; call qword ptr [rax+0x50]; 
0x0000000014c66b: jo short 0x000000000014c670; add [rax], al; jmp qword ptr [rax+0x58]; 
0x0000000014c6a3: jo short 0x000000000014c6a8; add [rax], al; mov rax, [rax+0x60]; jmp rax; 
0x00000000152dd6: jo short 0x0000000000152dde; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e74: jo short 0x0000000000152e7c; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000039638: jp short 0x0000000000039672; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x000000000403f0: jp short 0x0000000000040400; jne short 0x0000000000040400; fadd st, st(0); add rsp, 0x8; ret; 
0x000000000407a6: jp short 0x00000000000407b0; jne short 0x00000000000407b0; addsd xmm0, xmm0; ret; 
0x00000000040ac2: jp short 0x0000000000040ad0; jne short 0x0000000000040ad0; addss xmm0, xmm0; ret; 
0x00000000080e45: jp short 0x0000000000080e8f; sub esi, edx; mov rdi, rbx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x00000000086931: jp short 0x000000000008693b; mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000000b3516: jp short 0x00000000000b3587; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c8e0d: jp short 0x00000000000c8e0a; dec dword ptr [rax+0x39]; ret; 
0x000000000d31c0: jp short 0x00000000000d31be; jmp qword ptr [rsi+0x2e]; 
0x00000000105347: jp short 0x0000000000105357; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105374: jp short 0x0000000000105384; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001053a4: jp short 0x00000000001053b4; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001053d6: jp short 0x00000000001053e7; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001053d7: jp short 0x00000000001053e7; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105407: jp short 0x0000000000105417; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000109061: jp short 0x0000000000109063; add [rax], al; syscall; 
0x000000001144d5: jp short 0x0000000000114527; mov rsi, rdx; call rax; 
0x0000000012069d: jp short 0x000000000012069e; call far fword ptr [rdx+0x59]; 
0x0000000012f86a: jp short 0x000000000012f878; add [rax+0x39], cl; ret far; 
0x00000000137612: jp short 0x000000000013765e; dec dword ptr [rax-0x77]; ret; 
0x0000000013b48f: jp short 0x000000000013b4e9; mov [rdx+0x68], rcx; ret; 
0x000000001523f4: jp short 0x00000000001523fc; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000176062: jp short 0x0000000000176065; add [rax], al; vzeroupper; ret; 
0x0000000017b1c2: jp short 0x000000000017b1af; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000187224: jp short 0x000000000018721d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000018dae4: jp short 0x000000000018dadd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x00000000192a61: jp short 0x0000000000192a4d; jmp qword ptr [rsi+0x2e]; 
0x000000000436cc: jrcxz 0x0000000000043741; or al, 0x90; call qword ptr [rbx]; 
0x0000000004598f: jrcxz 0x00000000000459a0; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000004dd6f: jrcxz 0x000000000004dd6e; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x0000000006d934: jrcxz 0x000000000006d935; jmp qword ptr [rsi+0xf]; 
0x00000000072a44: jrcxz 0x0000000000072a45; jmp qword ptr [rsi+0xf]; 
0x00000000072af2: jrcxz 0x0000000000072af4; jmp qword ptr [rsi+0x2e]; 
0x0000000007e7c2: jrcxz 0x000000000007e7be; jmp qword ptr [rsi+0x2e]; 
0x0000000007e89f: jrcxz 0x000000000007e89b; jmp qword ptr [rsi+0x2e]; 
0x00000000082a25: jrcxz 0x0000000000082a27; dec dword ptr [rax+0x39]; ret; 
0x00000000091f94: jrcxz 0x0000000000091ffa; mov dword ptr [rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x0000000009d7f4: jrcxz 0x000000000009d851; mov qword ptr [rbp], 0x0; pop rbp; pop r12; ret; 
0x000000000a139c: jrcxz 0x00000000000a13ea; mov eax, eax; ret; 
0x000000000a16e9: jrcxz 0x00000000000a16d7; or al, 0x0; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x000000000bc1be: jrcxz 0x00000000000bc1b8; jmp qword ptr [rsi+0x66]; 
0x000000000d223b: jrcxz 0x00000000000d223d; add [rax], al; syscall; 
0x000000000d2726: jrcxz 0x00000000000d279d; out 0x5b, eax; pop rbp; pop r12; ret; 
0x000000000df1bc: jrcxz 0x00000000000df1ff; mov ecx, 0x1; mov eax, r9d; ret; 
0x000000000e08f0: jrcxz 0x00000000000e08fa; je short 0x00000000000e0877; pop rbx; ret; 
0x000000000ec83a: jrcxz 0x00000000000ec7c5; sub [rcx+0x63], cl; ret far; 
0x000000000edf7f: jrcxz 0x00000000000edf74; call far fword ptr [rax+0x5a]; 
0x000000000f3d4c: jrcxz 0x00000000000f3d96; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000001172c7: jrcxz 0x00000000001172c2; jmp qword ptr [rsi+0xf]; 
0x000000001177fb: jrcxz 0x00000000001177f6; call qword ptr [rax-0x18]; 
0x00000000117f25: jrcxz 0x0000000000117f9a; enter 0x2e3c, 0x75; xor [rcx-0x7d], cl; ret; 
0x00000000132d5e: jrcxz 0x0000000000132d69; ret; 
0x000000001359c6: jrcxz 0x00000000001359c8; jmp qword ptr [rsi+0xf]; 
0x00000000140b54: jrcxz 0x0000000000140b5c; add [rcx+0x46348f2], cl; xchg ecx, eax; add rax, rcx; jmp rax; 
0x0000000014bc32: jrcxz 0x000000000014bc33; jmp qword ptr [rsi+0x2e]; 
0x0000000014bc42: jrcxz 0x000000000014bc43; jmp qword ptr [rsi+0x2e]; 
0x00000000153bd7: jrcxz 0x0000000000153c25; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153c1f: jrcxz 0x0000000000153c6d; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153c5d: jrcxz 0x0000000000153cab; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153c99: jrcxz 0x0000000000153ce7; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153cd3: jrcxz 0x0000000000153d21; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153d0b: jrcxz 0x0000000000153d59; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153d33: jrcxz 0x0000000000153d81; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001565a7: jrcxz 0x00000000001565f5; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001565ef: jrcxz 0x000000000015663d; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015662d: jrcxz 0x000000000015667b; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156669: jrcxz 0x00000000001566b7; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001566a3: jrcxz 0x00000000001566f1; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001566db: jrcxz 0x0000000000156729; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156703: jrcxz 0x0000000000156751; mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158ca9: jrcxz 0x0000000000158c9f; movq [rdi-0x10], mm1; ret; 
0x0000000015b7c9: jrcxz 0x000000000015b7bf; movq [rdi-0x10], mm1; ret; 
0x0000000017844c: jrcxz 0x0000000000178477; enter 0xf8c5, 0x77; ret; 
0x000000000423ee: js 0x0000000000042730; mov rdi, [rsp+0x8]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000d8686: js 0x00000000000d8758; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000001256c4: js 0x0000000000125503; mov rax, [rsp]; mov rdi, r12; call rax; 
0x00000000125a4a: js 0x0000000000125503; mov rdx, [rsp]; mov rdi, r14; call rdx; 
0x00000000125401: js 0x0000000000125b60; mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r12; call rax; 
0x000000000af8a5: js 0x0000000066cdfb22; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000b2b55: js 0x0000000066ce2dd2; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000b3625: js 0x0000000066ce38a2; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000b3908: js 0xffffffffed3b3b65; mov [rdi+0x3], ch; ret; 
0x000000000b3936: js 0xffffffffed3b3d93; mov [rdi+0x5], ch; ret; 
0x000000000b3988: js 0xffffffffed3b41e5; mov [rdi+0x9], ch; ret; 
0x0000000003a5e1: js short 0x000000000003a566; loopne 0x000000000003a5ed; ret; 
0x0000000003a621: js short 0x000000000003a5a6; loopne 0x000000000003a627; ret; 
0x0000000003a6c1: js short 0x000000000003a646; loopne 0x000000000003a6c9; ret; 
0x0000000003a641: js short 0x000000000003a668; add [rax], cl; add [rax], al; ret; 
0x0000000003a661: js short 0x000000000003a688; add [rdx], al; add [rax], al; ret; 
0x0000000003a6e1: js short 0x000000000003a708; add [rax], ah; add [rax], al; ret; 
0x0000000003a7a1: js short 0x000000000003a726; loopne 0x000000000003a7a6; ret; 
0x0000000003a701: js short 0x000000000003a728; add [rcx], al; add [rax], al; ret; 
0x0000000003a721: js short 0x000000000003a748; add [rax], dl; add [rax], al; ret; 
0x0000000003a81a: js short 0x000000000003a79f; loopne 0x000000000003a81f; ret; 
0x0000000003a82a: js short 0x000000000003a7af; loopne 0x000000000003a836; ret; 
0x0000000003a85a: js short 0x000000000003a7df; loopne 0x000000000003a860; ret; 
0x0000000003a8ea: js short 0x000000000003a86f; loopne 0x000000000003a8f2; ret; 
0x0000000003a86a: js short 0x000000000003a891; add [rax], cl; add [rax], al; ret; 
0x0000000003a88a: js short 0x000000000003a8b1; add [rdx], al; add [rax], al; ret; 
0x0000000003a8fa: js short 0x000000000003a921; add [rax], ah; add [rax], al; ret; 
0x0000000003a91a: js short 0x000000000003a941; add [rcx], al; add [rax], al; ret; 
0x0000000003a93a: js short 0x000000000003a961; add [rax], dl; add [rax], al; ret; 
0x0000000003a962: js short 0x000000000003a9ad; movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x000000000415ce: js short 0x0000000000041614; mov eax, ecx; add rsp, 0xd0; ret; 
0x000000000415cd: js short 0x0000000000041647; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000417d3: js short 0x00000000000417e4; mov eax, [rsp+0x80]; add rsp, 0x108; ret; 
0x00000000041826: js short 0x0000000000041837; mov eax, [rsp+0x80]; add rsp, 0x108; ret; 
0x00000000044764: js short 0x0000000000044767; add [rax], al; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000004f805: js short 0x000000000004f808; add [rbp-0xa], dh; pop rbx; ret; 
0x0000000007b8a2: js short 0x000000000007b8b4; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007e45d: js short 0x000000000007e460; ret; 
0x000000000806c1: js short 0x00000000000806f3; add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x00000000082d31: js short 0x0000000000082cd3; cli; jmp qword ptr [rsi+0x66]; 
0x00000000086ea0: js short 0x0000000000086eaa; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000086f61: js short 0x0000000000086f83; mov eax, 0xca; syscall; 
0x0000000008fec2: js short 0x000000000008fed0; mov [rip+0x1648e6], edi; xor eax, eax; ret; 
0x00000000091079: js short 0x0000000000091088; add rsp, 0x110; pop rbp; ret; 
0x00000000091799: js short 0x00000000000917a3; call qword ptr [rax]; 
0x00000000091f76: js short 0x0000000000091f88; add rsp, 0x110; pop rbp; ret; 
0x000000000b2aa2: js short 0x00000000000b2ab3; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab8: js short 0x00000000000b2ac9; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ae4: js short 0x00000000000b2af5; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b19: js short 0x00000000000b2b2a; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b18: js short 0x00000000000b2b92; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3498: js short 0x00000000000b3509; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000d7f81: js short 0x00000000000d7f83; add [rax], al; syscall; 
0x000000000d88b7: js short 0x00000000000d88c0; ret; 
0x000000000e8e53: js short 0x00000000000e8e54; jmp far fword ptr [rax-0x257bf0ff]; 
0x000000000f8365: js short 0x00000000000f8378; cmp rbx, rax; pop rbx; setl al; ret; 
0x000000000f8544: js short 0x00000000000f8555; adc [rsi+0x70], edi; ret; 
0x000000000fe846: js short 0x00000000000fe850; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000fead7: js short 0x00000000000feae2; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000ffe8f: js short 0x00000000000ffed9; add esp, 0x50; pop r12; ret; 
0x00000000100574: js short 0x0000000000100590; imul eax, [rsp+0x30], 0xf4240; add eax, [rsp+0x38]; add rsp, 0x48; ret; 
0x00000000100671: js short 0x0000000000100679; cmp r8d, 0x2; jbe short 0x0000000000100680; ret; 
0x00000000101362: js short 0x000000000010136c; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x000000001019a9: js short 0x00000000001019aa; inc dword ptr [rbx-0x7bf00008]; ret far; 
0x00000000105117: js short 0x0000000000105165; mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000105177: js short 0x00000000001051c5; mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000105524: js short 0x0000000000105534; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000105557: js short 0x0000000000105567; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000001055f4: js short 0x0000000000105604; add [rax-0x7d], cl; call qword ptr [rax]; 
0x0000000010c798: js short 0x000000000010c71d; loopne 0x000000000010c7a4; ret; 
0x0000000010c8b8: js short 0x000000000010c83d; loopne 0x000000000010c8bd; ret; 
0x0000000010c948: js short 0x000000000010c8cd; loopne 0x000000000010c94e; ret; 
0x0000000010ca68: js short 0x000000000010ca8f; add [rdx], al; add [rax], al; ret; 
0x0000000010cc18: js short 0x000000000010cb9d; loopne 0x000000000010cc20; ret; 
0x0000000010cca8: js short 0x000000000010cccf; add [rax], ah; add [rax], al; ret; 
0x0000000010cd30: js short 0x000000000010cd57; add [rcx], al; add [rax], al; ret; 
0x0000000010cdc8: js short 0x000000000010cdef; add [rax], dl; add [rax], al; ret; 
0x0000000010d0e1: js short 0x000000000010d066; loopne 0x000000000010d0ed; ret; 
0x0000000010d1e1: js short 0x000000000010d166; loopne 0x000000000010d1e6; ret; 
0x0000000010d261: js short 0x000000000010d1e6; loopne 0x000000000010d267; ret; 
0x0000000010d361: js short 0x000000000010d388; add [rdx], al; add [rax], al; ret; 
0x0000000010d4e1: js short 0x000000000010d466; loopne 0x000000000010d4e9; ret; 
0x0000000010d561: js short 0x000000000010d588; add [rax], ah; add [rax], al; ret; 
0x0000000010d5d9: js short 0x000000000010d600; add [rcx], al; add [rax], al; ret; 
0x0000000010d651: js short 0x000000000010d678; add [rax], dl; add [rax], al; ret; 
0x00000000113676: js short 0x000000000011366a; dec dword ptr [rcx-0x75]; sub [rax-0x77], r9b; ret; 
0x0000000011556b: js short 0x0000000000115575; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x000000001172a7: js short 0x00000000001172af; add [rax-0x73], cl; adc eax, 0x6fd4f; cmovne rax, rdx; ret; 
0x00000000123628: js short 0x0000000000123638; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000012b316: js short 0x000000000012b354; sub [rbp-0x28], dh; mov eax, 0x1; ret; 
0x0000000012f9ab: js short 0x000000000012f9bd; jne short 0x000000000012f9a0; ret; 
0x0000000012f9ee: js short 0x000000000012f9fc; add [rbp+0x13], dh; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x0000000012f9f7: js short 0x000000000012fa05; add [rcx+rcx*4-0x40], al; ret; 
0x00000000131caa: js short 0x0000000000131cb8; mov rax, r12; pop r12; ret; 
0x00000000139412: js short 0x0000000000139460; mov eax, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x00000000140e0d: js short 0x0000000000140e57; mov edi, ebx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x00000000149f24: js short 0x0000000000149f30; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000149f9c: js short 0x0000000000149fc9; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000014a183: js short 0x000000000014a1a9; mov rax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x0000000014a1e3: js short 0x000000000014a209; mov rax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x0000000014caa8: js short 0x000000000014cac6; mov eax, 0xca; syscall; 
0x000000001525f6: js short 0x00000000001525fe; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000176c94: js short 0x0000000000176c98; add [rax], al; vzeroupper; ret; 
0x00000000188a0e: js short 0x0000000000188a05; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x00000000188a4e: js short 0x0000000000188a45; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018bbae: js short 0x000000000018bba5; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bbde: js short 0x000000000018bbd5; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d007: js short 0x000000000018cf92; ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000018f438: js short 0x000000000018f3f2; add al, [rax]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x000000001898df: kmovd eax, k0; test eax, eax; je short 0x0000000000189940; tzcnt eax, eax; ret; 
0x0000000018c35f: kmovd eax, k0; test eax, eax; je short 0x000000000018c3c0; tzcnt eax, eax; ret; 
0x0000000018c47b: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x00000000188cc5: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188c95: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000186dc4: kmovd eax, k1; bsr eax, eax; add rax, rdi; ret; 
0x000000001860ca: kmovd eax, k1; bzhi eax, eax, edx; jne short 0x00000000001860e0; ret; 
0x0000000018d4aa: kmovd eax, k1; bzhi eax, eax, edx; jne short 0x000000000018d4c0; ret; 
0x000000001863ac: kmovd eax, k1; test eax, eax; jne 0x00000000001860e0; ret; 
0x0000000018d741: kmovd eax, k1; test eax, eax; jne 0x000000000018d4c0; ret; 
0x00000000186270: kmovd eax, k1; test eax, eax; jne short 0x00000000001862c4; ret; 
0x000000001862b1: kmovd eax, k1; test eax, eax; jne short 0x00000000001862e0; ret; 
0x0000000018d650: kmovd eax, k1; test eax, eax; jne short 0x000000000018d6a4; ret; 
0x0000000018d691: kmovd eax, k1; test eax, eax; jne short 0x000000000018d6c0; ret; 
0x0000000018de62: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x0000000018de61: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x0000000018dbf5: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018d9bf: kmovd eax, k3; tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x00000000188a48: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a08: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbd8: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bba8: kmovd ecx, k1; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000186234: kmovd ecx, k1; mov rdi, rdx; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d614: kmovd ecx, k1; mov rdi, rdx; test ecx, ecx; jne 0x000000000018d500; ret; 
0x00000000186090: kmovd ecx, k1; test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d46a: kmovd ecx, k1; test ecx, ecx; jne 0x000000000018d503; ret; 
0x00000000187178: kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1a: kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000001899fc: kmovq rax, k0; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188cc0: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188c90: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018c477: kunpckbw k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x000000001899f7: kunpckdq k0, k1, k0; kmovq rax, k0; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000003ee4b: lahf; add r11, r15; jmp r11; 
0x0000000004dffd: lahf; and eax, 0x4c6001a; adc [rax], al; ret; 
0x000000000a79bd: lahf; and eax, 0x634f0010; or al, 0x8a; lea r10, [r10+r9]; jmp r10; 
0x0000000010aafd: lahf; out 0xfe, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000008526d: lahf; push rdx; sti; jmp qword ptr [rsi+0x66]; 
0x000000000cf73d: lahf; ret far; 
0x0000000018b6c7: lahf; ret; 
0x00000000072b6b: lahf; sbb [rax], al; call qword ptr [rcx+r8*8-0x40]; 
0x000000000694b1: lahf; sbb al, [rax]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000179157: lahf; shr eax, 0x2; vzeroupper; ret; 
0x0000000013cfdf: lahf; stc; jmp qword ptr [rsi+0x2e]; 
0x0000000015932c: lddqu xmm0, [rsi+0x10]; movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000001599a6: lddqu xmm0, [rsi+0x1]; lddqu xmm1, [rsi]; movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159936: lddqu xmm0, [rsi+0x2]; lddqu xmm1, [rsi]; movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001598c6: lddqu xmm0, [rsi+0x3]; lddqu xmm1, [rsi]; movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159856: lddqu xmm0, [rsi+0x4]; lddqu xmm1, [rsi]; movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001597e6: lddqu xmm0, [rsi+0x5]; lddqu xmm1, [rsi]; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159776: lddqu xmm0, [rsi+0x6]; lddqu xmm1, [rsi]; movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159706: lddqu xmm0, [rsi+0x7]; lddqu xmm1, [rsi]; movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159696: lddqu xmm0, [rsi+0x8]; lddqu xmm1, [rsi]; movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159626: lddqu xmm0, [rsi+0x9]; lddqu xmm1, [rsi]; movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001595b6: lddqu xmm0, [rsi+0xa]; lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159546: lddqu xmm0, [rsi+0xb]; lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001594d6: lddqu xmm0, [rsi+0xc]; lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159466: lddqu xmm0, [rsi+0xd]; lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001593f6: lddqu xmm0, [rsi+0xe]; lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000159386: lddqu xmm0, [rsi+0xf]; lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x00000000158b16: lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000001592bc: lddqu xmm0, [rsi-0x11]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015923c: lddqu xmm0, [rsi-0x12]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001591ac: lddqu xmm0, [rsi-0x13]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015912c: lddqu xmm0, [rsi-0x14]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001590ac: lddqu xmm0, [rsi-0x15]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x0000000015902c: lddqu xmm0, [rsi-0x16]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158fac: lddqu xmm0, [rsi-0x17]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158f2c: lddqu xmm0, [rsi-0x18]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158eac: lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158e2c: lddqu xmm0, [rsi-0x1a]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158dac: lddqu xmm0, [rsi-0x1b]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158d2c: lddqu xmm0, [rsi-0x1c]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158c9c: lddqu xmm0, [rsi-0x1d]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158c0c: lddqu xmm0, [rsi-0x1e]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b7c: lddqu xmm0, [rsi-0x1f]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b0c: lddqu xmm0, [rsi-0x20]; movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x00000000159336: lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000001592c1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159241: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001591b1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159131: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001590b1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159031: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158fb1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158f31: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158eb1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158e31: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158db1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158d31: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158ca1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158c11: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b81: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001599ab: lddqu xmm1, [rsi]; movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015993b: lddqu xmm1, [rsi]; movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001598cb: lddqu xmm1, [rsi]; movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015985b: lddqu xmm1, [rsi]; movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001597eb: lddqu xmm1, [rsi]; movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015977b: lddqu xmm1, [rsi]; movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015970b: lddqu xmm1, [rsi]; movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015969b: lddqu xmm1, [rsi]; movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015962b: lddqu xmm1, [rsi]; movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001595bb: lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015954b: lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001594db: lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015946b: lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001593fb: lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015938b: lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000012301b: lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x0000000008ae5c: lea eax, [rax*8+0x6]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000f11fb: lea eax, [rax+rax*8+0x5]; ret; 
0x00000000091b57: lea eax, [rax+rax+0x2]; pop r12; ret; 
0x00000000091975: lea eax, [rax+rax+0x2]; ret; 
0x000000000c477e: lea eax, [rax+rax-0x1]; ret; 
0x000000000b5635: lea eax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x00000000179174: lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179164: lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179154: lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179134: lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x0000000004456d: lea eax, [rax+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret; 
0x000000000a4c14: lea eax, [rax+rdi+0x10]; ret; 
0x000000000a4c24: lea eax, [rax+rdi+0x20]; ret; 
0x000000000a50f4: lea eax, [rax+rdi+0x30]; ret; 
0x000000000a4bf4: lea eax, [rax+rdi-0x10]; ret; 
0x000000000d264c: lea eax, [rax+rdx*8]; ret; 
0x00000000086b5a: lea eax, [rax+rdx+0x4000]; ret; 
0x0000000014cf8b: lea eax, [rax+rdx+0x4]; ret; 
0x000000001222bb: lea eax, [rax-0x18000000]; ret far; 
0x0000000006f302: lea eax, [rax]; add [rax+0x39], cl; ret; 
0x0000000018d472: lea eax, [rax]; add [rax], al; ret; 
0x000000000ff081: lea eax, [rax]; add [rax], al; syscall; 
0x000000000db7b1: lea eax, [rbx+0x2]; pop rbx; pop rbp; pop r12; ret; 
0x000000000db6a1: lea eax, [rbx+0x8]; pop rbx; pop rbp; pop r12; ret; 
0x000000001231d0: lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x00000000100ad7: lea eax, [rcx+0x1]; jne short 0x0000000000100aaf; mov rax, r8; ret; 
0x0000000012301c: lea eax, [rcx+rax+0x2]; pop rbx; ret; 
0x0000000018cbf4: lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbe4: lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6e4: lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6d4: lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6c4: lea eax, [rcx+rax-0x61]; ret; 
0x0000000018b6b4: lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cc04: lea eax, [rcx+rax-0x9]; ret; 
0x000000000aa4fd: lea eax, [rcx+rsi]; ret; 
0x0000000007b76f: lea eax, [rcx-0x1]; ret; 
0x0000000009bd56: lea eax, [rcx]; add [rax-0x73], cl; add eax, 0x18d70; cmovne rax, rdx; ret; 
0x000000000b0ffc: lea eax, [rdi+0x10]; ret; 
0x000000000b19bc: lea eax, [rdi+0x10]; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x000000000b1011: lea eax, [rdi+0x11]; ret; 
0x000000000b19e1: lea eax, [rdi+0x11]; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b102f: lea eax, [rdi+0x12]; ret; 
0x000000000b1a0f: lea eax, [rdi+0x12]; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b104f: lea eax, [rdi+0x13]; ret; 
0x000000000b1a3f: lea eax, [rdi+0x13]; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b1072: lea eax, [rdi+0x14]; ret; 
0x000000000b1a72: lea eax, [rdi+0x14]; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b1091: lea eax, [rdi+0x15]; ret; 
0x000000000b1aa1: lea eax, [rdi+0x15]; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b10b1: lea eax, [rdi+0x16]; ret; 
0x000000000b1ad1: lea eax, [rdi+0x16]; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b10d1: lea eax, [rdi+0x17]; ret; 
0x000000000b1b01: lea eax, [rdi+0x17]; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b10f4: lea eax, [rdi+0x18]; ret; 
0x000000000b1b34: lea eax, [rdi+0x18]; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x000000000b1119: lea eax, [rdi+0x19]; ret; 
0x000000000b1b69: lea eax, [rdi+0x19]; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b0e97: lea eax, [rdi+0x1]; ret; 
0x000000000b1797: lea eax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000187d17: lea eax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x000000001766d7: lea eax, [rdi+0x1]; vzeroupper; ret; 
0x000000000b1137: lea eax, [rdi+0x1a]; ret; 
0x000000000b1b97: lea eax, [rdi+0x1a]; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b1157: lea eax, [rdi+0x1b]; ret; 
0x000000000b1bc7: lea eax, [rdi+0x1b]; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b1173: lea eax, [rdi+0x1c]; ret; 
0x000000000b1bf3: lea eax, [rdi+0x1c]; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b1193: lea eax, [rdi+0x1d]; ret; 
0x000000000b1c23: lea eax, [rdi+0x1d]; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b11b3: lea eax, [rdi+0x1e]; ret; 
0x000000000b1c53: lea eax, [rdi+0x1e]; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000000b11d3: lea eax, [rdi+0x1f]; ret; 
0x000000000b1c83: lea eax, [rdi+0x1f]; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x000000000b2033: lea eax, [rdi+0x20]; ret; 
0x000000000b0eaa: lea eax, [rdi+0x2]; ret; 
0x000000000b17ba: lea eax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000187d3b: lea eax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x000000001766eb: lea eax, [rdi+0x2]; vzeroupper; ret; 
0x000000000b0eb5: lea eax, [rdi+0x3]; ret; 
0x000000000b17d5: lea eax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000187d55: lea eax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x00000000176705: lea eax, [rdi+0x3]; vzeroupper; ret; 
0x000000000b2299: lea eax, [rdi+0x40]; ret; 
0x00000000187f51: lea eax, [rdi+0x41]; ret; 
0x00000000176e79: lea eax, [rdi+0x41]; vzeroupper; ret; 
0x000000000b0ec8: lea eax, [rdi+0x4]; ret; 
0x0000000014cf83: lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x000000000b17f8: lea eax, [rdi+0x4]; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000000b0edd: lea eax, [rdi+0x5]; ret; 
0x000000000b181d: lea eax, [rdi+0x5]; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x000000000b0efb: lea eax, [rdi+0x6]; ret; 
0x000000000b183b: lea eax, [rdi+0x6]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x000000000b0f07: lea eax, [rdi+0x7]; ret; 
0x000000000b1857: lea eax, [rdi+0x7]; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x00000000188124: lea eax, [rdi+0x80]; ret; 
0x0000000017701c: lea eax, [rdi+0x80]; vzeroupper; ret; 
0x000000000b0f1a: lea eax, [rdi+0x8]; ret; 
0x000000000b187a: lea eax, [rdi+0x8]; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x00000000122760: lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000b0f2f: lea eax, [rdi+0x9]; ret; 
0x000000000b189f: lea eax, [rdi+0x9]; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x000000000b0f4d: lea eax, [rdi+0xa]; ret; 
0x000000000b18cd: lea eax, [rdi+0xa]; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x000000000b0f6d: lea eax, [rdi+0xb]; ret; 
0x000000000b18ed: lea eax, [rdi+0xb]; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x000000000b0f8f: lea eax, [rdi+0xc]; ret; 
0x000000000b190f: lea eax, [rdi+0xc]; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000000b0faf: lea eax, [rdi+0xd]; ret; 
0x000000000b193f: lea eax, [rdi+0xd]; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000b0fcf: lea eax, [rdi+0xe]; ret; 
0x000000000b196f: lea eax, [rdi+0xe]; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x000000000b0fe9: lea eax, [rdi+0xf]; ret; 
0x000000000b1999: lea eax, [rdi+0xf]; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x0000000018bbcb: lea eax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbe4: lea eax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb8b: lea eax, [rdi+rax*4+0x60]; ret; 
0x0000000018bbb4: lea eax, [rdi+rax*4+0x80]; ret; 
0x0000000018de95: lea eax, [rdi+rax*4+0xa0]; ret; 
0x0000000018dea5: lea eax, [rdi+rax*4+0xc0]; ret; 
0x0000000018de6b: lea eax, [rdi+rax*4+0xe0]; ret; 
0x0000000018d011: lea eax, [rdi+rax*4-0x20]; ret; 
0x0000000018d0e9: lea eax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x0000000018bb68: lea eax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x0000000018bd3a: lea eax, [rdi+rax*4]; ret; 
0x0000000018d2c5: lea eax, [rdi+rax*4]; vzeroupper; ret; 
0x000000000a4c49: lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c399: lea eax, [rdi+rax+0x18]; ret; 
0x000000000a4c59: lea eax, [rdi+rax+0x20]; ret; 
0x00000000185f05: lea eax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001228f4: lea eax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000a4b53: lea eax, [rdi+rax+0x30]; ret; 
0x00000000185d75: lea eax, [rdi+rax+0x40]; ret; 
0x00000000185edd: lea eax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000185d85: lea eax, [rdi+rax+0x60]; ret; 
0x00000000185d95: lea eax, [rdi+rax+0x80]; ret; 
0x0000000018c379: lea eax, [rdi+rax+0x8]; ret; 
0x0000000018d9e5: lea eax, [rdi+rax+0xa0]; ret; 
0x0000000018d9f5: lea eax, [rdi+rax+0xc0]; ret; 
0x0000000018d9c8: lea eax, [rdi+rax+0xe0]; ret; 
0x000000000a1626: lea eax, [rdi+rax-0x1]; mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a1655: lea eax, [rdi+rax-0x1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a166d: lea eax, [rdi+rax-0x1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+0x4], dx; ret; 
0x000000000a15f9: lea eax, [rdi+rax-0x1]; ret; 
0x0000000018ba91: lea eax, [rdi+rax-0x20]; ret; 
0x00000000174195: lea eax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001841f5: lea eax, [rdi+rax-0x20]; xtest; je short 0x0000000000184202; vzeroall; ret; 
0x0000000018554a: lea eax, [rdi+rax-0x20]; xtest; je short 0x0000000000185557; vzeroall; ret; 
0x0000000018732b: lea eax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000187355: lea eax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000187345: lea eax, [rdi+rax-0x80]; vzeroupper; ret; 
0x00000000185d29: lea eax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000170009: lea eax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000a9f2c: lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000aa147: lea eax, [rdi+rax]; ret; 
0x00000000176dd3: lea eax, [rdi+rax]; vzeroupper; ret; 
0x00000000094400: lea eax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x0000000018771d: lea eax, [rdi+rdx]; ret; 
0x0000000017671d: lea eax, [rdi+rdx]; vzeroupper; ret; 
0x0000000012917d: lea eax, [rdi+rsi+0x14]; ret; 
0x000000001234c3: lea eax, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000aa3f9: lea eax, [rdi+rsi]; ret; 
0x000000000c5bfe: lea eax, [rdi-0x10]; ret; 
0x000000000c5d81: lea eax, [rdi-0x4]; ret; 
0x000000000c5d71: lea eax, [rdi-0x8]; ret; 
0x000000000c5d61: lea eax, [rdi-0xc]; ret; 
0x000000000b0e83: lea eax, [rdi]; ret; 
0x000000000b1773: lea eax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000187b56: lea eax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x00000000176655: lea eax, [rdi]; vzeroupper; ret; 
0x00000000180e09: lea eax, [rdi]; xtest; je short 0x0000000000180e14; vzeroall; ret; 
0x00000000166587: lea eax, [rdx+0x1]; ret; 
0x000000001286a6: lea eax, [rdx+0x2]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000016659d: lea eax, [rdx+0x2]; ret; 
0x000000001665b5: lea eax, [rdx+0x3]; ret; 
0x000000001665cb: lea eax, [rdx+0x4]; ret; 
0x000000001665dd: lea eax, [rdx+0x5]; ret; 
0x000000001665fb: lea eax, [rdx+0x6]; ret; 
0x000000001689c2: lea eax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000166507: lea eax, [rdx+0x7]; ret; 
0x0000000016660d: lea eax, [rdx+0x8]; ret; 
0x0000000016662d: lea eax, [rdx+0x9]; ret; 
0x0000000016664d: lea eax, [rdx+0xa]; ret; 
0x0000000016666d: lea eax, [rdx+0xb]; ret; 
0x0000000016668f: lea eax, [rdx+0xc]; ret; 
0x000000001666af: lea eax, [rdx+0xd]; ret; 
0x00000000168917: lea eax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001666cf: lea eax, [rdx+0xe]; ret; 
0x0000000016655f: lea eax, [rdx+0xf]; ret; 
0x0000000018bd93: lea eax, [rdx+rax*4]; ret; 
0x00000000173e26: lea eax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000000f23cf: lea eax, [rdx+rax]; mov r9, [rbp-0x1b0]; mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x0000000013b67d: lea eax, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000007b75d: lea eax, [rdx+rdi]; ret; 
0x0000000007b75e: lea eax, [rdx+rdi]; ret; 
0x00000000177ded: lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177aef: lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x000000001859cf: lea eax, [rdx+rdx-0x1]; xtest; je short 0x00000000001859dc; vzeroall; ret; 
0x0000000005575e: lea eax, [rdx+rsi]; ret; 
0x00000000099836: lea eax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x00000000041e60: lea eax, [rdx-0x1]; mov [rip+0x1ab35b], eax; mov eax, edx; ret; 
0x00000000166575: lea eax, [rdx]; ret; 
0x000000000b515e: lea eax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b525e: lea eax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000a15da: lea eax, [rip+0x1087dc]; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000000b4fa6: lea eax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x000000000b4efe: lea eax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000b5063: lea eax, [rip+0x10d37]; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x000000000858ad: lea eax, [rip+0x12dc10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000073d75: lea eax, [rip+0x134845]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x00000000073cf2: lea eax, [rip+0x134848]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000073c2f: lea eax, [rip+0x13498b]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x0000000009bf84: lea eax, [rip+0x134b6]; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x00000000071324: lea eax, [rip+0x137016]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000006ecba: lea eax, [rip+0x139500]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000006e6ee: lea eax, [rip+0x139a4c]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000009abd4: lea eax, [rip+0x14786]; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x000000000a18bb: lea eax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18db: lea eax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x00000000095c0a: lea eax, [rip+0x158050]; jne short 0x0000000000095c60; add rsp, 0x10; pop rbp; ret; 
0x000000001398c9: lea eax, [rip+0x161]; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000039649: lea eax, [rip+0x175e46]; ret; 
0x00000000039631: lea eax, [rip+0x175e5e]; cmp [rdx+0x38], edi; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000007560e: lea eax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x0000000009aa24: lea eax, [rip+0x17926]; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000002d401: lea eax, [rip+0x181bef]; ret; 
0x0000000009c2de: lea eax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009b9f6: lea eax, [rip+0x18394]; cmove rax, rdx; ret; 
0x0000000002d411: lea eax, [rip+0x183a80]; ret; 
0x0000000009bebe: lea eax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc9e: lea eax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd5a: lea eax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x0000000009b2d6: lea eax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1b6: lea eax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac46: lea eax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x0000000004dffb: lea eax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000447c1: lea eax, [rip+0x1abc4f]; add rsp, 0x8; ret; 
0x00000000037f77: lea eax, [rip+0x1b49a3]; mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x000000000395f7: lea eax, [rip+0x1b6303]; ret; 
0x000000000a16ee: lea eax, [rip+0x378c]; cmove rax, rdx; ret; 
0x00000000115faa: lea eax, [rip+0x3b9c0]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d6a: lea eax, [rip+0x3bc20]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e8a: lea eax, [rip+0x3e4d0]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000002d118: lea eax, [rip+0x53552]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x0000000009c014: lea eax, [rip+0x5946]; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x0000000011603e: lea eax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f1e: lea eax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115dfe: lea eax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x0000000011609f: lea eax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x000000001172a4: lea eax, [rip+0x678f6]; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x00000000115fde: lea eax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115ebe: lea eax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d9e: lea eax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160ec: lea eax, [rip+0x68b1e]; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009b0d4: lea eax, [rip+0x68e6]; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x00000000115f7a: lea eax, [rip+0x69580]; cmove rax, rdx; ret; 
0x0000000009afa4: lea eax, [rip+0x6966]; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x00000000115e5a: lea eax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d3a: lea eax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x0000000011610a: lea eax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000009ab34: lea eax, [rip+0x6ed6]; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000011601e: lea eax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115efe: lea eax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dde: lea eax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x00000000116136: lea eax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x0000000013a6b6: lea eax, [rip+0x733e8]; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx; 
0x0000000009d3a5: lea eax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009b062: lea eax, [rip+0x8098]; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000012b7dc: lea eax, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x0000000012b4f8: lea eax, [rip+0x81f62]; movzx edi, al; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x0000000009bb05: lea eax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009c148: lea eax, [rip+0x9512]; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a8: lea eax, [rip+0x95a2]; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb63: lea eax, [rip+0x96e7]; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000010b20b: lea eax, [rip+0xa1e1b]; mov ecx, edx; movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x0000000010af1f: lea eax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x0000000013997c: lea eax, [rip+0xae]; xor ecx, ecx; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000014b3cd: lea eax, [rip+0xb171d]; cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000149baa: lea eax, [rip+0xb2d70]; mov edx, 0x0; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000009c28a: lea eax, [rip+0xb5710]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be6a: lea eax, [rip+0xb5b10]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009c198: lea eax, [rip+0xb702]; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f8: lea eax, [rip+0xb792]; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bc4a: lea eax, [rip+0xb8720]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x000000000b5552: lea eax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b664d: lea eax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x00000000138e88: lea eax, [rip+0xc3692]; add rsp, 0x8; ret; 
0x000000000b509d: lea eax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x000000000b55f4: lea eax, [rip+0xc95b6]; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x0000000009d41e: lea eax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x0000000009ab61: lea eax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009bba2: lea eax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x000000000b6661: lea eax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b4f11: lea eax, [rip+0xd6c09]; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f81: lea eax, [rip+0xd6e19]; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b50b1: lea eax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b5171: lea eax, [rip+0xd7349]; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b5271: lea eax, [rip+0xd7c19]; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000b54d2: lea eax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009aad6: lea eax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x0000000009aa51: lea eax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afd1: lea eax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfb1: lea eax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c041: lea eax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b101: lea eax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009ac01: lea eax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000009c31e: lea eax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009befe: lea eax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcde: lea eax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bd3f: lea eax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x0000000009c2be: lea eax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be9e: lea eax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc7e: lea eax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009bd8c: lea eax, [rip+0xe2e8e]; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000009c25a: lea eax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be3a: lea eax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc1a: lea eax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009bdaa: lea eax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x000000000a1701: lea eax, [rip+0xe5589]; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x0000000009c2fe: lea eax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bede: lea eax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcbe: lea eax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x0000000009bdd6: lea eax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x0000000009d431: lea eax, [rip+0xeb7e9]; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x0000000009aae9: lea eax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aef1: lea eax, [rip+0xee9c9]; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009d3c2: lea eax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009af61: lea eax, [rip+0xf06f9]; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b191: lea eax, [rip+0xf0789]; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x0000000009b17e: lea eax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009bb22: lea eax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x000000000b5513: lea eax, [rip+0xf1f7]; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000000b54b5: lea eax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000001032ef: lea eax, [rip+0xf2dcb]; add rsp, 0x18; ret; 
0x0000000010329b: lea eax, [rip+0xf2e5f]; pop r12; pop r13; ret; 
0x00000000102da7: lea eax, [rip+0xf32d3]; add rsp, 0x8; ret; 
0x00000000102d50: lea eax, [rip+0xf334a]; pop rbp; pop r12; pop r13; ret; 
0x0000000009aaa5: lea eax, [rip+0xf435]; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009aede: lea eax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af4e: lea eax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x000000000b4f6e: lea eax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b6613: lea eax, [rip+0xfbc7]; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x000000000c74b1: lea eax, [rip-0x107]; add rsp, 0x58; ret; 
0x000000000c73a1: lea eax, [rip-0x107]; ret; 
0x000000000c74c1: lea eax, [rip-0x117]; ret; 
0x000000001160ba: lea eax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x00000000115dbe: lea eax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115ede: lea eax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ffe: lea eax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x00000000117288: lea eax, [rip-0x627fe]; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x00000000141e52: lea eax, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x00000000073b96: lea eax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000b55d8: lea eax, [rip-0xb3e]; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000006ecf4: lea eax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000c7391: lea eax, [rip-0xf7]; add rsp, 0x58; ret; 
0x0000000010cf81: lea eax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 0x1; ret; 
0x000000000c69a2: lea eax, [rsi+rdx]; ret; 
0x0000000010b35d: lea eax, [rsi-0x1]; cmp eax, 0x2; ja short 0x000000000010b388; mov eax, 0x1f; syscall; 
0x000000000c734b: lea eax, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x00000000036837: lea eax, [rsp+0x98]; call r15; 
0x0000000010b238: lea eax, [rsp-0x30]; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x0000000014049b: lea ebp, [rax-0x1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x0000000014395f: lea ebp, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000143cdd: lea ebp, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000056819: lea ebp, [rdi+rdi*8-0x1]; jmp qword ptr [rsi+0xf]; 
0x0000000014142c: lea ebp, [rsp+0x148]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000139165: lea ebp, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000013e02d: lea ebp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000009a9bf: lea ebx, [rcx]; stc; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000083c28: lea ebx, [rdi+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x0000000017b4d4: lea ebx, [rip+0x3e866]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b45a: lea ebx, [rip+0x3e8e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3cb: lea ebx, [rip+0x3e96f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1c0: lea ebx, [rip+0x3eb7a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08e: lea ebx, [rip+0x3ecac]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc8: lea ebx, [rip+0x3ed72]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af4a: lea ebx, [rip+0x3edf0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeb3: lea ebx, [rip+0x3ee87]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb7: lea ebx, [rip+0x3f083]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab86: lea ebx, [rip+0x3f1b4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa85: lea ebx, [rip+0x3f2b5]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea4: lea ebx, [rip+0x3fd56]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e2a: lea ebx, [rip+0x3fdd0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d9b: lea ebx, [rip+0x3fe5f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179b90: lea ebx, [rip+0x4006a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5e: lea ebx, [rip+0x4019c]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179998: lea ebx, [rip+0x40262]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017991a: lea ebx, [rip+0x402e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179883: lea ebx, [rip+0x40377]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179687: lea ebx, [rip+0x40573]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179556: lea ebx, [rip+0x406a4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179447: lea ebx, [rip+0x407b3]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000015b5d2: lea ebx, [rip+0x5f128]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b274: lea ebx, [rip+0x5f486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b41f: lea ebx, [rip+0x5f51b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b0f4: lea ebx, [rip+0x5f606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b1b7: lea ebx, [rip+0x5f783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015af74: lea ebx, [rip+0x5f786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b037: lea ebx, [rip+0x5f903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015adf4: lea ebx, [rip+0x5f906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aeb7: lea ebx, [rip+0x5fa83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ac74: lea ebx, [rip+0x5fa86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ad38: lea ebx, [rip+0x5fc02]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aaf4: lea ebx, [rip+0x5fc06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015abb7: lea ebx, [rip+0x5fd83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a974: lea ebx, [rip+0x5fd86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa37: lea ebx, [rip+0x5ff03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a7f4: lea ebx, [rip+0x5ff06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a8b7: lea ebx, [rip+0x60083]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a674: lea ebx, [rip+0x60086]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a737: lea ebx, [rip+0x60203]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a4f4: lea ebx, [rip+0x60206]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a5b7: lea ebx, [rip+0x60383]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a374: lea ebx, [rip+0x60386]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a437: lea ebx, [rip+0x60503]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a1f4: lea ebx, [rip+0x60506]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b7: lea ebx, [rip+0x60683]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a074: lea ebx, [rip+0x60686]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a137: lea ebx, [rip+0x60803]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ef4: lea ebx, [rip+0x60806]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159fb7: lea ebx, [rip+0x60983]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159d74: lea ebx, [rip+0x60986]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159bfb: lea ebx, [rip+0x60aff]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159e37: lea ebx, [rip+0x60b03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159cb7: lea ebx, [rip+0x60c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001599fc: lea ebx, [rip+0x60cfe]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b7a: lea ebx, [rip+0x60dc0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1e: lea ebx, [rip+0x60f1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ad0: lea ebx, [rip+0x610ea]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000159a69: lea ebx, [rip+0x61111]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000158abe: lea ebx, [rip+0x6173c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158794: lea ebx, [rip+0x61a66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015892b: lea ebx, [rip+0x61b0f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158614: lea ebx, [rip+0x61be6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001586d7: lea ebx, [rip+0x61d63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158494: lea ebx, [rip+0x61d66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158557: lea ebx, [rip+0x61ee3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158314: lea ebx, [rip+0x61ee6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001583d7: lea ebx, [rip+0x62063]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158194: lea ebx, [rip+0x62066]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158258: lea ebx, [rip+0x621e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158014: lea ebx, [rip+0x621e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001580d7: lea ebx, [rip+0x62363]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157e94: lea ebx, [rip+0x62366]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157f57: lea ebx, [rip+0x624e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157d14: lea ebx, [rip+0x624e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157dd7: lea ebx, [rip+0x62663]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157b94: lea ebx, [rip+0x62666]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157c57: lea ebx, [rip+0x627e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157a14: lea ebx, [rip+0x627e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157ad7: lea ebx, [rip+0x62963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157894: lea ebx, [rip+0x62966]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157957: lea ebx, [rip+0x62ae3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157714: lea ebx, [rip+0x62ae6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001577d7: lea ebx, [rip+0x62c63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157594: lea ebx, [rip+0x62c66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157657: lea ebx, [rip+0x62de3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157414: lea ebx, [rip+0x62de6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001574d7: lea ebx, [rip+0x62f63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157294: lea ebx, [rip+0x62f66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015711b: lea ebx, [rip+0x630df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157357: lea ebx, [rip+0x630e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156ec5: lea ebx, [rip+0x63175]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156e08: lea ebx, [rip+0x63232]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001571d7: lea ebx, [rip+0x63263]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f3b: lea ebx, [rip+0x632bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d1d: lea ebx, [rip+0x6331d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015709a: lea ebx, [rip+0x633a0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156c52: lea ebx, [rip+0x633e8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f28: lea ebx, [rip+0x63512]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156ff0: lea ebx, [rip+0x636ca]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000156f8e: lea ebx, [rip+0x636ec]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000155c31: lea ebx, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155b93: lea ebx, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155ae1: lea ebx, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155a43: lea ebx, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155991: lea ebx, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001558f3: lea ebx, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155841: lea ebx, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001557a3: lea ebx, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556f1: lea ebx, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155653: lea ebx, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001555a1: lea ebx, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155503: lea ebx, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155451: lea ebx, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001553b3: lea ebx, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155301: lea ebx, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155268: lea ebx, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551b1: lea ebx, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155113: lea ebx, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155061: lea ebx, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154fc3: lea ebx, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f11: lea ebx, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154e73: lea ebx, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dc1: lea ebx, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154d23: lea ebx, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c71: lea ebx, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154bd3: lea ebx, [rip+0x65467]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b21: lea ebx, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154a83: lea ebx, [rip+0x655b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549d1: lea ebx, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154933: lea ebx, [rip+0x65707]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154887: lea ebx, [rip+0x657b3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154796: lea ebx, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d7: lea ebx, [rip+0x65963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015466d: lea ebx, [rip+0x659cd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457e: lea ebx, [rip+0x65abc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154344: lea ebx, [rip+0x65b36]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544b9: lea ebx, [rip+0x65b81]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015426a: lea ebx, [rip+0x65c10]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154446: lea ebx, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543ec: lea ebx, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000153261: lea ebx, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001531c3: lea ebx, [rip+0x66cb7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153111: lea ebx, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153073: lea ebx, [rip+0x66e07]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fc1: lea ebx, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152f23: lea ebx, [rip+0x66f57]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e71: lea ebx, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152dd3: lea ebx, [rip+0x670a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d21: lea ebx, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152c83: lea ebx, [rip+0x671f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bd1: lea ebx, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b33: lea ebx, [rip+0x67347]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a81: lea ebx, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001529e3: lea ebx, [rip+0x67497]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152931: lea ebx, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152898: lea ebx, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527e1: lea ebx, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152743: lea ebx, [rip+0x67737]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152691: lea ebx, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001525f3: lea ebx, [rip+0x67887]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152541: lea ebx, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001524a3: lea ebx, [rip+0x679d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523f1: lea ebx, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152353: lea ebx, [rip+0x67b27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001522a1: lea ebx, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152203: lea ebx, [rip+0x67c77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152151: lea ebx, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001520b3: lea ebx, [rip+0x67dc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152001: lea ebx, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f63: lea ebx, [rip+0x67f17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151eb7: lea ebx, [rip+0x67fc3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc6: lea ebx, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d07: lea ebx, [rip+0x68173]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151c9d: lea ebx, [rip+0x681dd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151bae: lea ebx, [rip+0x682cc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ae9: lea ebx, [rip+0x68391]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151a76: lea ebx, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a15: lea ebx, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000000ea52a: lea ebx, [rip+0xc18e4]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000cb755: lea ebx, [rip+0xdf169]; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x000000000b3d6a: lea ebx, [rip+0xf6724]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35e6: lea ebx, [rip+0xf6ea8]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35bd: lea ebx, [rip+0xf6ed1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b359d: lea ebx, [rip+0xf6ef1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3574: lea ebx, [rip+0xf6f1a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b354f: lea ebx, [rip+0xf6f3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3531: lea ebx, [rip+0xf6f5d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34b1: lea ebx, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3496: lea ebx, [rip+0xf6f78]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3514: lea ebx, [rip+0xf6f7a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34e4: lea ebx, [rip+0xf6faa]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3461: lea ebx, [rip+0xf6fad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3435: lea ebx, [rip+0xf6fd9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b341f: lea ebx, [rip+0xf6fef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33fd: lea ebx, [rip+0xf7011]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33d8: lea ebx, [rip+0xf7036]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33bb: lea ebx, [rip+0xf7053]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3354: lea ebx, [rip+0xf70ba]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b16: lea ebx, [rip+0xf7878]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ae1: lea ebx, [rip+0xf78ad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab5: lea ebx, [rip+0xf78d9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a9f: lea ebx, [rip+0xf78ef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a7d: lea ebx, [rip+0xf7911]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a58: lea ebx, [rip+0xf7936]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a3b: lea ebx, [rip+0xf7953]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b29e3: lea ebx, [rip+0xf79ab]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b232a: lea ebx, [rip+0xf7f90]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b223f: lea ebx, [rip+0xf810b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b222a: lea ebx, [rip+0xf8120]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b220b: lea ebx, [rip+0xf813f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1756: lea ebx, [rip+0xf8b64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b172d: lea ebx, [rip+0xf8b8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b170d: lea ebx, [rip+0xf8bad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16e4: lea ebx, [rip+0xf8bd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16bf: lea ebx, [rip+0xf8bfb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16a1: lea ebx, [rip+0xf8c19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1621: lea ebx, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1684: lea ebx, [rip+0xf8c36]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1654: lea ebx, [rip+0xf8c66]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b153f: lea ebx, [rip+0xf8cfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1511: lea ebx, [rip+0xf8d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b14e8: lea ebx, [rip+0xf8d52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e66: lea ebx, [rip+0xf9348]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e31: lea ebx, [rip+0xf937d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e05: lea ebx, [rip+0xf93a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0def: lea ebx, [rip+0xf93bf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dcd: lea ebx, [rip+0xf93e1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0da8: lea ebx, [rip+0xf9406]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d8b: lea ebx, [rip+0xf9423]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d33: lea ebx, [rip+0xf947b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0b0a: lea ebx, [rip+0xf95d0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a1f: lea ebx, [rip+0xf974b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a0a: lea ebx, [rip+0xf9760]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b09eb: lea ebx, [rip+0xf977f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b00a6: lea ebx, [rip+0xfa034]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b007d: lea ebx, [rip+0xfa05d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b005d: lea ebx, [rip+0xfa07d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0034: lea ebx, [rip+0xfa0a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b000f: lea ebx, [rip+0xfa0cb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afff1: lea ebx, [rip+0xfa0e9]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff71: lea ebx, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affd4: lea ebx, [rip+0xfa106]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affa4: lea ebx, [rip+0xfa136]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe9f: lea ebx, [rip+0xfa1bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe71: lea ebx, [rip+0xfa1e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe48: lea ebx, [rip+0xfa212]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af866: lea ebx, [rip+0xfa774]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af831: lea ebx, [rip+0xfa7a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af805: lea ebx, [rip+0xfa7d5]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ef: lea ebx, [rip+0xfa7eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7cd: lea ebx, [rip+0xfa80d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a8: lea ebx, [rip+0xfa832]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af78b: lea ebx, [rip+0xfa84f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af733: lea ebx, [rip+0xfa8a7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b57ee: lea ecx, [rax+0x1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx; 
0x000000000b592d: lea ecx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x0000000012e51d: lea ecx, [rax+rax]; cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x000000001326d4: lea ecx, [rax+rax]; mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x00000000090607: lea ecx, [rax-0x1]; lock cmpxchg [rdi], rcx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x000000000fb9aa: lea ecx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcfa: lea ecx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc7a: lea ecx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000007de8e: lea ecx, [rbp-0x38]; mov rcx, r15; mov rdi, r14; xor r8d, r8d; call r12; 
0x000000000fb517: lea ecx, [rbx+0x28]; mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000760a7: lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b81: lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x000000000b172f: lea ecx, [rbx+0x634b000f]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000151a20: lea ecx, [rbx+rcx]; jmp r9; 
0x000000000af73e: lea ecx, [rbx+rcx]; jmp rcx; 
0x0000000006bb24: lea ecx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000014c9c6: lea ecx, [rbx+rsi]; mov esi, [rsp+0x24]; call rax; 
0x000000000df231: lea ecx, [rcx+0x1]; mov eax, r9d; ret; 
0x00000000151ee1: lea ecx, [rcx-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000128a2f: lea ecx, [rdi+0x1]; test al, al; jne short 0x0000000000128a16; mov eax, r10d; ret; 
0x0000000003bd9f: lea ecx, [rdi+rdi*8-0x1]; jmp qword ptr [rcx+rcx*4+0x8]; 
0x0000000010973a: lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x000000000f68ec: lea ecx, [rdi]; add [rax-0x7d], cl; ret; 
0x000000000b14eb: lea ecx, [rdi]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000ca4e1: lea ecx, [rdx*8]; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret; 
0x00000000163e56: lea ecx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x000000001681e7: lea ecx, [rdx+0x10]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000016404c: lea ecx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x000000001683ec: lea ecx, [rdx+0x1]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000080724: lea ecx, [rdx+0x1]; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret; 
0x0000000016406e: lea ecx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x0000000016840f: lea ecx, [rdx+0x2]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164094: lea ecx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x00000000168435: lea ecx, [rdx+0x3]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001640ac: lea ecx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x0000000016845d: lea ecx, [rdx+0x4]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000079566: lea ecx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000001640d2: lea ecx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x00000000168483: lea ecx, [rdx+0x5]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001640f4: lea ecx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x000000001684b5: lea ecx, [rdx+0x6]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164112: lea ecx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x000000001684e3: lea ecx, [rdx+0x7]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000163dee: lea ecx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x0000000016817f: lea ecx, [rdx+0x8]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164134: lea ecx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x00000000168515: lea ecx, [rdx+0x9]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164154: lea ecx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x00000000168545: lea ecx, [rdx+0xa]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164174: lea ecx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x00000000168575: lea ecx, [rdx+0xb]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164194: lea ecx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000001685a5: lea ecx, [rdx+0xc]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641b6: lea ecx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000001685d7: lea ecx, [rdx+0xd]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641d6: lea ecx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x00000000168607: lea ecx, [rdx+0xe]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641f6: lea ecx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x00000000168637: lea ecx, [rdx+0xf]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000010ce7e: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d695: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e2: lea ecx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x00000000169ac7: lea ecx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000000a145a: lea ecx, [rip+0x108914]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008d06b: lea ecx, [rip+0x11c807]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c37c: lea ecx, [rip+0x11d2be]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c1be: lea ecx, [rip+0x11d3e4]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b692: lea ecx, [rip+0x11dde8]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000075e80: lea ecx, [rip+0x1331ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000757e1: lea ecx, [rip+0x13354d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000007583f: lea ecx, [rip+0x1335ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c772: lea ecx, [rip+0x14aa70]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c6bb: lea ecx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000080d5e: lea ecx, [rip+0x16e1fc]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000173b4e: lea ecx, [rip+0x2196c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000017246d: lea ecx, [rip+0x2304d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001721a9: lea ecx, [rip+0x23311]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000170d94: lea ecx, [rip+0x24726]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016f24e: lea ecx, [rip+0x2626c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016d5bd: lea ecx, [rip+0x27efd]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016d289: lea ecx, [rip+0x28231]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016b9b4: lea ecx, [rip+0x29b06]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000018f5cd: lea ecx, [rip+0x2b74d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000018f436: lea ecx, [rip+0x2b878]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x00000000140b51: lea ecx, [rip+0x6e3ed]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x0000000014030d: lea ecx, [rip+0x6ebf1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x0000000012b63d: lea ecx, [rip+0x81e41]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000f5d24: lea ecx, [rip+0xb6c56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000e2775: lea ecx, [rip+0xc941d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x00000000073931: lea ecx, [rip-0x8ba]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073aac: lea ecx, [rip-0xa35]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073c3a: lea ecx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cfd: lea ecx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000073ddb: lea ecx, [rip-0xd64]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e3e: lea ecx, [rip-0xdc7]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e97: lea ecx, [rip-0xe20]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x0000000014c438: lea ecx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f7: lea ecx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x0000000010d05e: lea ecx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000010d047: lea ecx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d897: lea ecx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d8a8; ret; 
0x0000000007dcc6: lea ecx, [rsp+0x10]; call rbp; 
0x000000001398d8: lea ecx, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013970c: lea ecx, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000b5ac9: lea ecx, [rsp+0x20]; call r13; 
0x000000000b5931: lea ecx, [rsp+0x20]; call rbx; 
0x000000000b57f6: lea ecx, [rsp+0x28]; call rbx; 
0x00000000139d44: lea ecx, [rsp+0x30]; call qword ptr [rax]; 
0x000000000fc11d: lea ecx, [rsp+0x38]; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000000fbf2f: lea ecx, [rsp+0x38]; movzx eax, al; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x0000000014244f: lea ecx, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000ffe79: lea ecx, [rsp+0x40]; test eax, eax; jne short 0x00000000000ffea0; mov eax, 0x10e; syscall; 
0x000000000b5e75: lea ecx, [rsp+0x70]; call rbx; 
0x00000000111100: lea edi, [r13+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000014caa7: lea edi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x00000000086f60: lea edi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000d6ef1: lea edi, [rax+0x2e0]; mov [rax+0x2d8], rdi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000898f3: lea edi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x0000000012297b: lea edi, [rax+rcx+0x2]; cmp rdx, rdi; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x00000000111101: lea edi, [rbp+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000140cc3: lea edi, [rbp+0x58]; call rax; 
0x000000001402d3: lea edi, [rbp+0x68]; call rax; 
0x0000000013dbe6: lea edi, [rbp+0xc8]; call rax; 
0x0000000008975b: lea edi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x00000000131fc9: lea edi, [rbx+0x8]; call rsi; 
0x000000000d20fc: lea edi, [rdi*8+0x2]; syscall; 
0x000000000b02ad: lea edi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b19a1: lea edi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x0000000008ce96: lea edi, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b02d0: lea edi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x000000000b19c4: lea edi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x000000000b02f5: lea edi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b19e9: lea edi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b0313: lea edi, [rdi+0x13]; jne 0x00000000000b0980; ret; 
0x000000000b1a17: lea edi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b0333: lea edi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b1a47: lea edi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b0356: lea edi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1a7a: lea edi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b0375: lea edi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b1aa9: lea edi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b0395: lea edi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b1ad9: lea edi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b03b5: lea edi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b1b09: lea edi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b03d8: lea edi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000b1b3c: lea edi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x000000000b00c7: lea edi, [rdi+0x1]; jne 0x00000000000b0980; ret; 
0x000000000b177a: lea edi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000175dad: lea edi, [rdi+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac5: lea edi, [rdi+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187b5d: lea edi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018afd5: lea edi, [rdi+0x1]; jne 0x000000000018b420; ret; 
0x000000000b040d: lea edi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b1b71: lea edi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b043b: lea edi, [rdi+0x1b]; jne 0x00000000000b0980; ret; 
0x000000000b1b9f: lea edi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b046b: lea edi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b1bcf: lea edi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b0497: lea edi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b1bfb: lea edi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b04c7: lea edi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b1c2b: lea edi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b04f7: lea edi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b1c5b: lea edi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000000b0527: lea edi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b1c8b: lea edi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x000000000b00eb: lea edi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x000000000b179f: lea edi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000175f5b: lea edi, [rdi+0x2]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176c8f: lea edi, [rdi+0x2]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d1f: lea edi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x0000000018b18b: lea edi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x000000000b010e: lea edi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b17c2: lea edi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000175f7f: lea edi, [rdi+0x3]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cb3: lea edi, [rdi+0x3]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d43: lea edi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x0000000018b1af: lea edi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x000000000b0129: lea edi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x000000000b17dd: lea edi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000175f99: lea edi, [rdi+0x4]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ccd: lea edi, [rdi+0x4]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d5d: lea edi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x0000000018b1c9: lea edi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000000b014c: lea edi, [rdi+0x5]; jne 0x00000000000b0980; ret; 
0x000000000b1800: lea edi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000000b0171: lea edi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b1825: lea edi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x000000000b018f: lea edi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b1843: lea edi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x000000000b01ab: lea edi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000b185f: lea edi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x000000000b01ce: lea edi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000000b1882: lea edi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x000000000b01f3: lea edi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b18a7: lea edi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x000000000b0211: lea edi, [rdi+0xb]; jne 0x00000000000b0980; ret; 
0x000000000b18d5: lea edi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x000000000b0231: lea edi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b18f5: lea edi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x000000000b0253: lea edi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b1917: lea edi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000000b0273: lea edi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b1947: lea edi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000b0293: lea edi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b1977: lea edi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x00000000175fc4: lea edi, [rdi+rdx+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cf8: lea edi, [rdi+rdx+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d88: lea edi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1f4: lea edi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x00000000088988: lea edi, [rdi+rsi*4+0x10]; lock xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x00000000151fe3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x00000000152133: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x00000000152283: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x000000001523d3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x00000000152523: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x00000000152673: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x000000001527c3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x00000000152913: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x00000000152a63: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152bb3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152d03: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152e53: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152fa3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x000000001530f3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x00000000153243: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x000000001549b3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x00000000154b03: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154c53: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154da3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154ef3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000155043: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x00000000155193: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001552e3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x00000000155433: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x00000000155583: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x000000001556d3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x00000000155823: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x00000000155973: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x00000000155ac3: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155c13: lea edi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x000000000a152d: lea edi, [rip+0x108865]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000074964: lea edi, [rip+0x133cd6]; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x0000000006f68b: lea edi, [rip+0x138baf]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000065036: lea edi, [rip+0x142d80]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000005d7fd: lea edi, [rip+0x14a1ad]; movzx r12d, r12b; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000003ee3e: lea edi, [rip+0x164194]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000002d3c6: lea edi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3ad: lea edi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000013dc2a: lea edi, [rip+0x70eb0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x0000000012b5ff: lea edi, [rip+0x81e6f]; movzx esi, al; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x000000000f8ad6: lea edi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000011f4b2: lea edi, [rip+0xd7728]; call rax; 
0x000000000cfad2: lea edi, [rip+0xdb490]; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cfb3a: lea edi, [rip+0xdb614]; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000cd529: lea edi, [rip+0xdd475]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000007496f: lea edi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x000000000738db: lea edi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b5b: lea edi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x00000000073c87: lea edi, [rip-0xc10]; add rax, rdi; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x0000000006ebba: lea edi, [rip-0xe15]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x000000001156eb: lea edi, [rip-0xe1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000006ec1e: lea edi, [rip-0xe79]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ed56: lea edi, [rip-0xfb1]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000013e731: lea edi, [rsp+0x10]; call rax; 
0x0000000008598a: lea edi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c336: lea edi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x0000000013906c: lea edi, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x000000000c720c: lea edi, [rsp+0x88]; call rbp; 
0x000000000c6fec: lea edi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x0000000007a1d9: lea edx, [rax+0x1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000008074b: lea edx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000094893: lea edx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x00000000041e49: lea edx, [rax+0x1]; mov [rip+0x1ab376], edx; ret; 
0x000000000d6ec6: lea edx, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000007b86c: lea edx, [rax+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x000000000911d8: lea edx, [rax-0x1]; lock cmpxchg [rdi], rdx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x000000000dd97f: lea edx, [rax-0x7717fff3]; ret far; 
0x000000000760a3: lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b7d: lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x00000000089632: lea edx, [rbx+0x638]; syscall; 
0x00000000151af4: lea edx, [rbx+rdx]; jmp rdx; 
0x00000000040a6c: lea edx, [rcx+rdx-0x7e]; or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret; 
0x000000000d2646: lea edx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x0000000003a3b4: lea edx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x000000000a1a96: lea edx, [rdx+rcx]; jmp r10; 
0x0000000010ce96: lea edx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x00000000151ee8: lea edx, [rdx-0x40]; jmp r9; 
0x000000000a79bb: lea edx, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a575b: lea edx, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a319b: lea edx, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a8b: lea edx, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000b506a: lea edx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x00000000099bdc: lea edx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009afab: lea edx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000008e2b9: lea edx, [rip+0x11b959]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008de95: lea edx, [rip+0x11bc15]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008df1f: lea edx, [rip+0x11bc23]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d8e9: lea edx, [rip+0x11c0b1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d749: lea edx, [rip+0x11c1b9]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008ce8f: lea edx, [rip+0x11c8d3]; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c80e: lea edx, [rip+0x11cebc]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008bb16: lea edx, [rip+0x11d9f4]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000085b35: lea edx, [rip+0x1236c1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000075640: lea edx, [rip+0x1330da]; add rax, rdx; ret; 
0x00000000064cde: lea edx, [rip+0x143028]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d467: lea edx, [rip+0x14a493]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003ebf9: lea edx, [rip+0x1643a1]; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x0000000002d77f: lea edx, [rip+0x16687b]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003afad: lea edx, [rip+0x167fad]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009c2d7: lea edx, [rip+0x18163]; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb7: lea edx, [rip+0x18563]; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc97: lea edx, [rip+0x187a3]; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd53: lea edx, [rip+0x18df7]; lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x00000000173ba7: lea edx, [rip+0x21913]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000173b82: lea edx, [rip+0x21938]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721f7: lea edx, [rip+0x232c3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721dd: lea edx, [rip+0x232dd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f2a7: lea edx, [rip+0x26213]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f282: lea edx, [rip+0x26238]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2d7: lea edx, [rip+0x281e3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2bd: lea edx, [rip+0x281fd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000141e59: lea edx, [rip+0x2ab1]; call qword ptr [rax]; 
0x0000000018fff1: lea edx, [rip+0x2ad59]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000160b87: lea edx, [rip+0x34933]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000160b62: lea edx, [rip+0x34958]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015e627: lea edx, [rip+0x36e93]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015e60d: lea edx, [rip+0x36ead]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000115fb1: lea edx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d71: lea edx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e91: lea edx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x00000000172317: lea edx, [rip+0x48923]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c87: lea edx, [rip+0x49f73]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015e76b: lea edx, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016d417: lea edx, [rip+0x4c7a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5fb: lea edx, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016b847: lea edx, [rip+0x4e333]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000016a807: lea edx, [rip+0x4f333]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000169a37: lea edx, [rip+0x500c3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000001502ab: lea edx, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f02b: lea edx, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000011728f: lea edx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x00000000116037: lea edx, [rip+0x610e3]; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f17: lea edx, [rip+0x61223]; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df7: lea edx, [rip+0x61343]; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000116098: lea edx, [rip+0x617d2]; lea rax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x000000000940d4: lea edx, [rip+0x64d8f700]; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000009401c: lea edx, [rip+0x64d8f700]; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000115fd7: lea edx, [rip+0x68373]; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb7: lea edx, [rip+0x684b3]; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d97: lea edx, [rip+0x685d3]; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160f3: lea edx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x00000000115f73: lea edx, [rip+0x69527]; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e53: lea edx, [rip+0x69667]; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d33: lea edx, [rip+0x69787]; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116103: lea edx, [rip+0x69e87]; lea rax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000013ff48: lea edx, [rip+0x6ebd2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000001172ab: lea edx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x00000000116017: lea edx, [rip+0x70423]; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef7: lea edx, [rip+0x70563]; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd7: lea edx, [rip+0x70683]; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x0000000011612f: lea edx, [rip+0x70eeb]; lea rax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x00000000139985: lea edx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013ab29: lea edx, [rip+0xb2071]; jmp qword ptr [rdx+rax*8]; 
0x000000000b4f98: lea edx, [rip+0xb4392]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009ab3b: lea edx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000009b069: lea edx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x000000000f6660: lea edx, [rip+0xb63da]; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f60da: lea edx, [rip+0xb68ec]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f598a: lea edx, [rip+0xb6eb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000142652: lea edx, [rip+0xba108]; cmp rax, rdx; je short 0x0000000000142660; pop rbx; ret; 
0x00000000142538: lea edx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x0000000009c291: lea edx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be71: lea edx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x000000000eebb0: lea edx, [rip+0xbd52a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000eebea: lea edx, [rip+0xbd748]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x0000000009bc51: lea edx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x0000000009c14f: lea edx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0af: lea edx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x000000000b55df: lea edx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000009c19f: lea edx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0ff: lea edx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x000000000b54ae: lea edx, [rip+0xc294c]; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f67: lea edx, [rip+0xc3163]; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5157: lea edx, [rip+0xc33b3]; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5257: lea edx, [rip+0xc3a63]; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef7: lea edx, [rip+0xc3b43]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x0000000009abdb: lea edx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009b0db: lea edx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x000000000b551a: lea edx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x0000000009bf8b: lea edx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x000000000e270a: lea edx, [rip+0xc93b0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000e285c: lea edx, [rip+0xc93c2]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000009c01b: lea edx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000000dd701: lea edx, [rip+0xce23d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000a16e7: lea edx, [rip+0xcece3]; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x000000000dc02b: lea edx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dbb61: lea edx, [rip+0xcfc6d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b55fb: lea edx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000d8eda: lea edx, [rip+0xd28a0]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x000000000d8aad: lea edx, [rip+0xd28e1]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000d86e3: lea edx, [rip+0xd2c57]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x0000000009d39e: lea edx, [rip+0xd2ecc]; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009b1a8: lea edx, [rip+0xd4242]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009b2c8: lea edx, [rip+0xd4252]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009bafe: lea edx, [rip+0xd44bc]; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009ac38: lea edx, [rip+0xd4682]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x0000000009d417: lea edx, [rip+0xd6a23]; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x000000000b54cb: lea edx, [rip+0xd7bcf]; lea rax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009b177: lea edx, [rip+0xd8ed3]; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed7: lea edx, [rip+0xd9343]; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af47: lea edx, [rip+0xd9453]; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x0000000009c317: lea edx, [rip+0xdae33]; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef7: lea edx, [rip+0xdb233]; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd7: lea edx, [rip+0xdb473]; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bd38: lea edx, [rip+0xdbb42]; lea rax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x000000000cb55d: lea edx, [rip+0xdf2d9]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000ca79a: lea edx, [rip+0xdff44]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c9fdd: lea edx, [rip+0xe06d1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009bb6a: lea edx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009aaac: lea edx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009c2b7: lea edx, [rip+0xe20c3]; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be97: lea edx, [rip+0xe24c3]; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc77: lea edx, [rip+0xe2703]; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009bd93: lea edx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000009c253: lea edx, [rip+0xe3277]; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be33: lea edx, [rip+0xe3677]; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc13: lea edx, [rip+0xe38b7]; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009bda3: lea edx, [rip+0xe41f7]; lea rax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x0000000009d3bb: lea edx, [rip+0xe9e1f]; lea rax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009c2f7: lea edx, [rip+0xea173]; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bb1b: lea edx, [rip+0xea1bf]; lea rax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x0000000009bed7: lea edx, [rip+0xea573]; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb7: lea edx, [rip+0xea7b3]; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x0000000009bdcf: lea edx, [rip+0xeb25b]; lea rax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x000000000a9ec7: lea edx, [rip+0xeb5f3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a9ea2: lea edx, [rip+0xeb618]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a7877: lea edx, [rip+0xedc43]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a785d: lea edx, [rip+0xedc5d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000b4da0: lea edx, [rip+0xf579a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b661a: lea edx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x0000000009aa2b: lea edx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000007132f: lea edx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000009b9e8: lea edx, [rip-0x2ae]; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x0000000006c297: lea edx, [rip-0x3e0]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x000000001160b3: lea edx, [rip-0x61579]; lea rax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x00000000115db7: lea edx, [rip-0x6198d]; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115ed7: lea edx, [rip-0x61aad]; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ff7: lea edx, [rip-0x61bed]; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x000000000c7375: lea edx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7495: lea edx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000b44b3: lea edx, [rsi+rcx]; cmp rdi, rdx; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x00000000141951: lea edx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000014191a: lea edx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x00000000094197: lea edx, [rsp+0x1c]; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x00000000085980: lea edx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c32c: lea edx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x000000001418f8: lea edx, [rsp+0x20]; mov esi, 0x4; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x000000001419d1: lea edx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000000fea24: lea edx, [rsp-0x38]; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x000000000fe611: lea edx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000fe669: lea edx, [rsp-0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000013a864: lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013a771: lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x000000000643b2: lea esi, [rax-0x77000005]; add cl, [rax-0x7d]; ret; 
0x0000000008a3ec: lea esi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x000000001156e7: lea esi, [rbp-0x30]; lea rdi, [rip-0xe1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013f275: lea esi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000007dcbc: lea esi, [rbx+0x40]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000007dd8b: lea esi, [rbx+0x8]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000008979f: lea esi, [rbx+0x8f0]; syscall; 
0x00000000079f2c: lea esi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000138d70: lea esi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000014246c: lea esi, [rdx+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x000000000946b8: lea esi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000089ece: lea esi, [rip+0x11f52c]; syscall; 
0x00000000075e26: lea esi, [rip+0x13314c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000064941: lea esi, [rip+0x1431b9]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000005d084: lea esi, [rip+0x14a66a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000f744d: lea esi, [rip+0xb5735]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000ddbf5: lea esi, [rip+0xcddc9]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000d73d4: lea esi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000cfaac: lea esi, [rip+0xdb2ca]; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x000000000cd55c: lea esi, [rip+0xdd62e]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000006ee1e: lea esi, [rip-0x1079]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee83: lea esi, [rip-0x10de]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006eee6: lea esi, [rip-0x1141]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000050385: lea esi, [rsi+0x128]; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000b44c4: lea esi, [rsi+rcx-0x1]; std; rep movsb [rdi], [rsi]; cld; ret; 
0x0000000013ff25: lea esi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000141d06: lea esi, [rsp+0x10]; mov edi, eax; call rbp; 
0x0000000008146b: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000144fdd: lea esi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000144f83: lea esi, [rsp+0x18]; mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000085985: lea esi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c331: lea esi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x0000000007c9d3: lea esi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000013a865: lea esi, [rsp+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013f1e6: lea esi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000140e0a: lea esi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x000000001452f5: lea esi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x0000000013b35d: lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000007728a: lea esi, [rsp+0x8]; call rax; 
0x0000000013b37c: lea esi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013b423: lea esi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000144b02: lea esi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000142fa3: lea esi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x0000000014556d: lea esi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x00000000145594: lea esi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000145305: lea esi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145375: lea esi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000117be0: lea esi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000000d56ce: lea esp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000013ae32: lea esp, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000423e4: lea esp, [rcx+rax]; mov rdi, r12; call rbx; 
0x000000000436c4: lea esp, [rip+0x1ac006]; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x000000000a1a95: lea r10, [r10+r9]; jmp r10; 
0x000000000d6ec5: lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000a79ba: lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a575a: lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a319a: lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a8a: lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000003ebf8: lea r10, [rip+0x1643a1]; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x00000000172316: lea r10, [rip+0x48923]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c86: lea r10, [rip+0x49f73]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015e76a: lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016d416: lea r10, [rip+0x4c7a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5fa: lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000016b846: lea r10, [rip+0x4e333]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000016a806: lea r10, [rip+0x4f333]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000169a36: lea r10, [rip+0x500c3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000001502aa: lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f02a: lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000017b4d3: lea r11, [rip+0x3e866]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b459: lea r11, [rip+0x3e8e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3ca: lea r11, [rip+0x3e96f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1bf: lea r11, [rip+0x3eb7a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08d: lea r11, [rip+0x3ecac]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc7: lea r11, [rip+0x3ed72]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af49: lea r11, [rip+0x3edf0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeb2: lea r11, [rip+0x3ee87]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb6: lea r11, [rip+0x3f083]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab85: lea r11, [rip+0x3f1b4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa84: lea r11, [rip+0x3f2b5]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea3: lea r11, [rip+0x3fd56]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e29: lea r11, [rip+0x3fdd0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d9a: lea r11, [rip+0x3fe5f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179b8f: lea r11, [rip+0x4006a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5d: lea r11, [rip+0x4019c]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179997: lea r11, [rip+0x40262]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179919: lea r11, [rip+0x402e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179882: lea r11, [rip+0x40377]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179686: lea r11, [rip+0x40573]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179555: lea r11, [rip+0x406a4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179446: lea r11, [rip+0x407b3]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000015b5d1: lea r11, [rip+0x5f128]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b273: lea r11, [rip+0x5f486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b41e: lea r11, [rip+0x5f51b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b0f3: lea r11, [rip+0x5f606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b1b6: lea r11, [rip+0x5f783]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015af73: lea r11, [rip+0x5f786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b036: lea r11, [rip+0x5f903]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015adf3: lea r11, [rip+0x5f906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aeb6: lea r11, [rip+0x5fa83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ac73: lea r11, [rip+0x5fa86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ad37: lea r11, [rip+0x5fc02]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aaf3: lea r11, [rip+0x5fc06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015abb6: lea r11, [rip+0x5fd83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a973: lea r11, [rip+0x5fd86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa36: lea r11, [rip+0x5ff03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a7f3: lea r11, [rip+0x5ff06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a8b6: lea r11, [rip+0x60083]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a673: lea r11, [rip+0x60086]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a736: lea r11, [rip+0x60203]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a4f3: lea r11, [rip+0x60206]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a5b6: lea r11, [rip+0x60383]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a373: lea r11, [rip+0x60386]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a436: lea r11, [rip+0x60503]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a1f3: lea r11, [rip+0x60506]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b6: lea r11, [rip+0x60683]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a073: lea r11, [rip+0x60686]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a136: lea r11, [rip+0x60803]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ef3: lea r11, [rip+0x60806]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159fb6: lea r11, [rip+0x60983]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159d73: lea r11, [rip+0x60986]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159bfa: lea r11, [rip+0x60aff]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159e36: lea r11, [rip+0x60b03]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159cb6: lea r11, [rip+0x60c83]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001599fb: lea r11, [rip+0x60cfe]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b79: lea r11, [rip+0x60dc0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1d: lea r11, [rip+0x60f1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159acf: lea r11, [rip+0x610ea]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000159a68: lea r11, [rip+0x61111]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000158abd: lea r11, [rip+0x6173c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158793: lea r11, [rip+0x61a66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015892a: lea r11, [rip+0x61b0f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158613: lea r11, [rip+0x61be6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001586d6: lea r11, [rip+0x61d63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158493: lea r11, [rip+0x61d66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158556: lea r11, [rip+0x61ee3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158313: lea r11, [rip+0x61ee6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001583d6: lea r11, [rip+0x62063]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158193: lea r11, [rip+0x62066]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158257: lea r11, [rip+0x621e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158013: lea r11, [rip+0x621e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001580d6: lea r11, [rip+0x62363]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157e93: lea r11, [rip+0x62366]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157f56: lea r11, [rip+0x624e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157d13: lea r11, [rip+0x624e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157dd6: lea r11, [rip+0x62663]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157b93: lea r11, [rip+0x62666]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157c56: lea r11, [rip+0x627e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157a13: lea r11, [rip+0x627e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157ad6: lea r11, [rip+0x62963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157893: lea r11, [rip+0x62966]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157956: lea r11, [rip+0x62ae3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157713: lea r11, [rip+0x62ae6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001577d6: lea r11, [rip+0x62c63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157593: lea r11, [rip+0x62c66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157656: lea r11, [rip+0x62de3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157413: lea r11, [rip+0x62de6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001574d6: lea r11, [rip+0x62f63]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157293: lea r11, [rip+0x62f66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015711a: lea r11, [rip+0x630df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157356: lea r11, [rip+0x630e3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156ec3: lea r11, [rip+0x63175]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156e07: lea r11, [rip+0x63232]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001571d6: lea r11, [rip+0x63263]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f3a: lea r11, [rip+0x632bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d1c: lea r11, [rip+0x6331d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157099: lea r11, [rip+0x633a0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156c51: lea r11, [rip+0x633e8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f27: lea r11, [rip+0x63512]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156fef: lea r11, [rip+0x636ca]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000156f8d: lea r11, [rip+0x636ec]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000155c30: lea r11, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155b92: lea r11, [rip+0x644a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155ae0: lea r11, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155a42: lea r11, [rip+0x645f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155990: lea r11, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001558f2: lea r11, [rip+0x64747]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155840: lea r11, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001557a2: lea r11, [rip+0x64897]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556f0: lea r11, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155652: lea r11, [rip+0x649e7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001555a0: lea r11, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155502: lea r11, [rip+0x64b37]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155450: lea r11, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001553b2: lea r11, [rip+0x64c87]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155300: lea r11, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155267: lea r11, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551b0: lea r11, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155112: lea r11, [rip+0x64f27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155060: lea r11, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154fc2: lea r11, [rip+0x65077]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f10: lea r11, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154e72: lea r11, [rip+0x651c7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dc0: lea r11, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154d22: lea r11, [rip+0x65317]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c70: lea r11, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154bd2: lea r11, [rip+0x65467]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b20: lea r11, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154a82: lea r11, [rip+0x655b7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549d0: lea r11, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154932: lea r11, [rip+0x65707]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154886: lea r11, [rip+0x657b3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154794: lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d5: lea r11, [rip+0x65963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015466c: lea r11, [rip+0x659cd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457d: lea r11, [rip+0x65abc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154343: lea r11, [rip+0x65b36]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544b8: lea r11, [rip+0x65b81]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154269: lea r11, [rip+0x65c10]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154445: lea r11, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543eb: lea r11, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000153260: lea r11, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001531c2: lea r11, [rip+0x66cb7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153110: lea r11, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153072: lea r11, [rip+0x66e07]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fc0: lea r11, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152f22: lea r11, [rip+0x66f57]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e70: lea r11, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152dd2: lea r11, [rip+0x670a7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d20: lea r11, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152c82: lea r11, [rip+0x671f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bd0: lea r11, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b32: lea r11, [rip+0x67347]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a80: lea r11, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001529e2: lea r11, [rip+0x67497]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152930: lea r11, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152897: lea r11, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527e0: lea r11, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152742: lea r11, [rip+0x67737]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152690: lea r11, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001525f2: lea r11, [rip+0x67887]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152540: lea r11, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001524a2: lea r11, [rip+0x679d7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523f0: lea r11, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152352: lea r11, [rip+0x67b27]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001522a0: lea r11, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152202: lea r11, [rip+0x67c77]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152150: lea r11, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001520b2: lea r11, [rip+0x67dc7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152000: lea r11, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f62: lea r11, [rip+0x67f17]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151eb6: lea r11, [rip+0x67fc3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc4: lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d05: lea r11, [rip+0x68173]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151c9c: lea r11, [rip+0x681dd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151bad: lea r11, [rip+0x682cc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ae8: lea r11, [rip+0x68391]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151a75: lea r11, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a14: lea r11, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000000cb754: lea r11, [rip+0xdf169]; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x000000000b3d69: lea r11, [rip+0xf6724]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35e5: lea r11, [rip+0xf6ea8]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35bc: lea r11, [rip+0xf6ed1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b359c: lea r11, [rip+0xf6ef1]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3573: lea r11, [rip+0xf6f1a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b354e: lea r11, [rip+0xf6f3f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3530: lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34b0: lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3495: lea r11, [rip+0xf6f78]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3513: lea r11, [rip+0xf6f7a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34e3: lea r11, [rip+0xf6faa]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3460: lea r11, [rip+0xf6fad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3434: lea r11, [rip+0xf6fd9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b341e: lea r11, [rip+0xf6fef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33fc: lea r11, [rip+0xf7011]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33d7: lea r11, [rip+0xf7036]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33ba: lea r11, [rip+0xf7053]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3353: lea r11, [rip+0xf70ba]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b15: lea r11, [rip+0xf7878]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ae0: lea r11, [rip+0xf78ad]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab4: lea r11, [rip+0xf78d9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a9e: lea r11, [rip+0xf78ef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a7c: lea r11, [rip+0xf7911]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a57: lea r11, [rip+0xf7936]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a3a: lea r11, [rip+0xf7953]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b29e2: lea r11, [rip+0xf79ab]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2329: lea r11, [rip+0xf7f90]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b223e: lea r11, [rip+0xf810b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2229: lea r11, [rip+0xf8120]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b220a: lea r11, [rip+0xf813f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1755: lea r11, [rip+0xf8b64]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b172c: lea r11, [rip+0xf8b8d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b170c: lea r11, [rip+0xf8bad]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16e3: lea r11, [rip+0xf8bd6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16be: lea r11, [rip+0xf8bfb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16a0: lea r11, [rip+0xf8c19]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1620: lea r11, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1683: lea r11, [rip+0xf8c36]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1653: lea r11, [rip+0xf8c66]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b153e: lea r11, [rip+0xf8cfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1510: lea r11, [rip+0xf8d29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b14e7: lea r11, [rip+0xf8d52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e65: lea r11, [rip+0xf9348]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e30: lea r11, [rip+0xf937d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e04: lea r11, [rip+0xf93a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dee: lea r11, [rip+0xf93bf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dcc: lea r11, [rip+0xf93e1]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0da7: lea r11, [rip+0xf9406]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d8a: lea r11, [rip+0xf9423]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d32: lea r11, [rip+0xf947b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0b09: lea r11, [rip+0xf95d0]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a1e: lea r11, [rip+0xf974b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a09: lea r11, [rip+0xf9760]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b09ea: lea r11, [rip+0xf977f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b00a5: lea r11, [rip+0xfa034]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b007c: lea r11, [rip+0xfa05d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b005c: lea r11, [rip+0xfa07d]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0033: lea r11, [rip+0xfa0a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b000e: lea r11, [rip+0xfa0cb]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afff0: lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff70: lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affd3: lea r11, [rip+0xfa106]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affa3: lea r11, [rip+0xfa136]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe9e: lea r11, [rip+0xfa1bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe70: lea r11, [rip+0xfa1e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe47: lea r11, [rip+0xfa212]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af865: lea r11, [rip+0xfa774]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af830: lea r11, [rip+0xfa7a9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af804: lea r11, [rip+0xfa7d5]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ee: lea r11, [rip+0xfa7eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7cc: lea r11, [rip+0xfa80d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a7: lea r11, [rip+0xfa832]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af78a: lea r11, [rip+0xfa84f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af732: lea r11, [rip+0xfa8a7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000013ae31: lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000423e3: lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x000000000436c3: lea r12, [rip+0x1ac006]; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x0000000014395e: lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000143cdc: lea r13, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000139164: lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000008ce95: lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003ee3d: lea r15, [rip+0x164194]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000013906b: lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x000000001234c2: lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000f23ce: lea r8, [rdx+rax]; mov r9, [rbp-0x1b0]; mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x000000000a15d9: lea r8, [rip+0x1087dc]; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000001398c8: lea r8, [rip+0x161]; mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013a6b5: lea r8, [rip+0x733e8]; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx; 
0x0000000012b7db: lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x0000000012b4f7: lea r8, [rip+0x81f62]; movzx edi, al; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x0000000010b20a: lea r8, [rip+0xa1e1b]; mov ecx, edx; movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x0000000013997b: lea r8, [rip+0xae]; xor ecx, ecx; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000141e51: lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000000c734a: lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x00000000036835: lea r8, [rsp+0x98]; call r15; 
0x0000000013b67c: lea r8d, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000151a1f: lea r9, [r11+r9]; jmp r9; 
0x0000000014c9c5: lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x0000000014c9c4: lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x00000000151ee0: lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000007de8d: lea r9, [rbp-0x38]; mov rcx, r15; mov rdi, r14; xor r8d, r8d; call r12; 
0x0000000018f435: lea r9, [rip+0x2b878]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x0000000007dcc5: lea r9, [rsp+0x10]; call rbp; 
0x000000001398d7: lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013970b: lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000b5ac8: lea r9, [rsp+0x20]; call r13; 
0x000000000b5930: lea r9, [rsp+0x20]; call rbx; 
0x000000000b57f5: lea r9, [rsp+0x28]; call rbx; 
0x00000000139d43: lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000014244e: lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000ffe78: lea r9, [rsp+0x40]; test eax, eax; jne short 0x00000000000ffea0; mov eax, 0x10e; syscall; 
0x000000000b5e74: lea r9, [rsp+0x70]; call rbx; 
0x000000000df230: lea r9d, [rcx+0x1]; mov eax, r9d; ret; 
0x0000000005575d: lea rax, [r10+rsi]; ret; 
0x0000000004456c: lea rax, [r8+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret; 
0x000000000d8641: lea rax, [rax+rax-0x1]; ret; 
0x000000000b5634: lea rax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x000000000a4c13: lea rax, [rax+rdi+0x10]; ret; 
0x000000000a4c23: lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50f3: lea rax, [rax+rdi+0x30]; ret; 
0x000000000a4bf3: lea rax, [rax+rdi-0x10]; ret; 
0x000000000d264b: lea rax, [rax+rdx*8]; ret; 
0x00000000086b59: lea rax, [rax+rdx+0x4000]; ret; 
0x0000000014cf8a: lea rax, [rax+rdx+0x4]; ret; 
0x000000000db7b0: lea rax, [rbx+0x2]; pop rbx; pop rbp; pop r12; ret; 
0x000000000db6a0: lea rax, [rbx+0x8]; pop rbx; pop rbp; pop r12; ret; 
0x00000000100ad6: lea rax, [rcx+0x1]; jne short 0x0000000000100aaf; mov rax, r8; ret; 
0x000000000aa4fc: lea rax, [rcx+rsi]; ret; 
0x000000000b40a3: lea rax, [rcx-0x1]; ret; 
0x000000000b0ffb: lea rax, [rdi+0x10]; ret; 
0x000000000b19bb: lea rax, [rdi+0x10]; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x000000000b1010: lea rax, [rdi+0x11]; ret; 
0x000000000b19e0: lea rax, [rdi+0x11]; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b102e: lea rax, [rdi+0x12]; ret; 
0x000000000b1a0e: lea rax, [rdi+0x12]; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b104e: lea rax, [rdi+0x13]; ret; 
0x000000000b1a3e: lea rax, [rdi+0x13]; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b1071: lea rax, [rdi+0x14]; ret; 
0x000000000b1a71: lea rax, [rdi+0x14]; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b1090: lea rax, [rdi+0x15]; ret; 
0x000000000b1aa0: lea rax, [rdi+0x15]; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b10b0: lea rax, [rdi+0x16]; ret; 
0x000000000b1ad0: lea rax, [rdi+0x16]; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b10d0: lea rax, [rdi+0x17]; ret; 
0x000000000b1b00: lea rax, [rdi+0x17]; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b10f3: lea rax, [rdi+0x18]; ret; 
0x000000000b1b33: lea rax, [rdi+0x18]; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x000000000b1118: lea rax, [rdi+0x19]; ret; 
0x000000000b1b68: lea rax, [rdi+0x19]; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b0e96: lea rax, [rdi+0x1]; ret; 
0x000000000b1796: lea rax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000187d16: lea rax, [rdi+0x1]; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x000000001766d6: lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000b1136: lea rax, [rdi+0x1a]; ret; 
0x000000000b1b96: lea rax, [rdi+0x1a]; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b1156: lea rax, [rdi+0x1b]; ret; 
0x000000000b1bc6: lea rax, [rdi+0x1b]; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b1172: lea rax, [rdi+0x1c]; ret; 
0x000000000b1bf2: lea rax, [rdi+0x1c]; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b1192: lea rax, [rdi+0x1d]; ret; 
0x000000000b1c22: lea rax, [rdi+0x1d]; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b11b2: lea rax, [rdi+0x1e]; ret; 
0x000000000b1c52: lea rax, [rdi+0x1e]; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000000b11d2: lea rax, [rdi+0x1f]; ret; 
0x000000000b1c82: lea rax, [rdi+0x1f]; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x000000000b2032: lea rax, [rdi+0x20]; ret; 
0x000000000b0ea9: lea rax, [rdi+0x2]; ret; 
0x000000000b17b9: lea rax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000187d3a: lea rax, [rdi+0x2]; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x000000001766ea: lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000000b0eb4: lea rax, [rdi+0x3]; ret; 
0x000000000b17d4: lea rax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000187d54: lea rax, [rdi+0x3]; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x00000000176704: lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000b2298: lea rax, [rdi+0x40]; ret; 
0x00000000187f4e: lea rax, [rdi+0x41]; ret; 
0x00000000176e76: lea rax, [rdi+0x41]; vzeroupper; ret; 
0x000000000b0ec7: lea rax, [rdi+0x4]; ret; 
0x000000000b17f7: lea rax, [rdi+0x4]; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000000b0edc: lea rax, [rdi+0x5]; ret; 
0x000000000b181c: lea rax, [rdi+0x5]; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x000000000b0efa: lea rax, [rdi+0x6]; ret; 
0x000000000b183a: lea rax, [rdi+0x6]; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x000000000b0f06: lea rax, [rdi+0x7]; ret; 
0x000000000b1856: lea rax, [rdi+0x7]; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x00000000188123: lea rax, [rdi+0x80]; ret; 
0x0000000017701b: lea rax, [rdi+0x80]; vzeroupper; ret; 
0x000000000b0f19: lea rax, [rdi+0x8]; ret; 
0x000000000b1879: lea rax, [rdi+0x8]; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x000000000b0f2e: lea rax, [rdi+0x9]; ret; 
0x000000000b189e: lea rax, [rdi+0x9]; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x000000000b0f4c: lea rax, [rdi+0xa]; ret; 
0x000000000b18cc: lea rax, [rdi+0xa]; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x000000000b0f6c: lea rax, [rdi+0xb]; ret; 
0x000000000b18ec: lea rax, [rdi+0xb]; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x000000000b0f8e: lea rax, [rdi+0xc]; ret; 
0x000000000b190e: lea rax, [rdi+0xc]; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000000b0fae: lea rax, [rdi+0xd]; ret; 
0x000000000b193e: lea rax, [rdi+0xd]; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000b0fce: lea rax, [rdi+0xe]; ret; 
0x000000000b196e: lea rax, [rdi+0xe]; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x000000000b0fe8: lea rax, [rdi+0xf]; ret; 
0x000000000b1998: lea rax, [rdi+0xf]; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x00000000187e82: lea rax, [rdi+r8]; ret; 
0x00000000176dd2: lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018bbca: lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbe3: lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb8a: lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bbb3: lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de94: lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018dea4: lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018de6a: lea rax, [rdi+rax*4+0xe0]; ret; 
0x0000000018d010: lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018d0e8: lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x0000000018bb67: lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x0000000018bd39: lea rax, [rdi+rax*4]; ret; 
0x0000000018d2c4: lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x000000000a4c48: lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce32: lea rax, [rdi+rax+0x18]; ret; 
0x000000000a4c58: lea rax, [rdi+rax+0x20]; ret; 
0x00000000185f04: lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x000000001228f3: lea rax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000a4b52: lea rax, [rdi+rax+0x30]; ret; 
0x00000000185d74: lea rax, [rdi+rax+0x40]; ret; 
0x00000000185edc: lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000185d84: lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d94: lea rax, [rdi+rax+0x80]; ret; 
0x0000000018cd88: lea rax, [rdi+rax+0x8]; ret; 
0x0000000018d9e4: lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9f4: lea rax, [rdi+rax+0xc0]; ret; 
0x0000000018d9c7: lea rax, [rdi+rax+0xe0]; ret; 
0x000000000a1625: lea rax, [rdi+rax-0x1]; mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a1654: lea rax, [rdi+rax-0x1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a166c: lea rax, [rdi+rax-0x1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+0x4], dx; ret; 
0x000000000a15f8: lea rax, [rdi+rax-0x1]; ret; 
0x0000000018ba90: lea rax, [rdi+rax-0x20]; ret; 
0x00000000174194: lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000001841f4: lea rax, [rdi+rax-0x20]; xtest; je short 0x0000000000184202; vzeroall; ret; 
0x00000000185549: lea rax, [rdi+rax-0x20]; xtest; je short 0x0000000000185557; vzeroall; ret; 
0x0000000018732a: lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000187354: lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000187344: lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x00000000185d28: lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000170008: lea rax, [rdi+rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000a9f2b: lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000aa146: lea rax, [rdi+rax]; ret; 
0x000000000943ff: lea rax, [rdi+rdi]; mov edi, [rax]; mov eax, 0xe2; syscall; 
0x0000000018771c: lea rax, [rdi+rdx]; ret; 
0x0000000017671c: lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000012917c: lea rax, [rdi+rsi+0x14]; ret; 
0x000000000aa3f8: lea rax, [rdi+rsi]; ret; 
0x000000000c5d39: lea rax, [rdi-0x10]; ret; 
0x000000000c5bfd: lea rax, [rdi-0x10]; ret; 
0x000000000c5d80: lea rax, [rdi-0x4]; ret; 
0x000000000c5d70: lea rax, [rdi-0x8]; ret; 
0x000000000c5d60: lea rax, [rdi-0xc]; ret; 
0x000000000b0e82: lea rax, [rdi]; ret; 
0x000000000b1772: lea rax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000187b55: lea rax, [rdi]; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x00000000176654: lea rax, [rdi]; vzeroupper; ret; 
0x00000000180e08: lea rax, [rdi]; xtest; je short 0x0000000000180e14; vzeroall; ret; 
0x00000000166586: lea rax, [rdx+0x1]; ret; 
0x000000001286a5: lea rax, [rdx+0x2]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000016659c: lea rax, [rdx+0x2]; ret; 
0x000000001665b4: lea rax, [rdx+0x3]; ret; 
0x000000001665ca: lea rax, [rdx+0x4]; ret; 
0x000000001665dc: lea rax, [rdx+0x5]; ret; 
0x000000001665fa: lea rax, [rdx+0x6]; ret; 
0x000000001689c1: lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000166506: lea rax, [rdx+0x7]; ret; 
0x0000000016660c: lea rax, [rdx+0x8]; ret; 
0x0000000016662c: lea rax, [rdx+0x9]; ret; 
0x0000000016664c: lea rax, [rdx+0xa]; ret; 
0x0000000016666c: lea rax, [rdx+0xb]; ret; 
0x0000000016668e: lea rax, [rdx+0xc]; ret; 
0x000000001666ae: lea rax, [rdx+0xd]; ret; 
0x00000000168916: lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001666ce: lea rax, [rdx+0xe]; ret; 
0x0000000016655e: lea rax, [rdx+0xf]; ret; 
0x0000000018bd92: lea rax, [rdx+rax*4]; ret; 
0x00000000173e25: lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000099835: lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x00000000166574: lea rax, [rdx]; ret; 
0x000000000b515d: lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b525d: lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4fa5: lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x000000000b4efd: lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000b5062: lea rax, [rip+0x10d37]; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x000000000858ac: lea rax, [rip+0x12dc10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000073d74: lea rax, [rip+0x134845]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x00000000073cf1: lea rax, [rip+0x134848]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000073c2e: lea rax, [rip+0x13498b]; movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x0000000009bf83: lea rax, [rip+0x134b6]; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x00000000071323: lea rax, [rip+0x137016]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000006ecb9: lea rax, [rip+0x139500]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000006e6ed: lea rax, [rip+0x139a4c]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000009abd3: lea rax, [rip+0x14786]; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x000000000a18ba: lea rax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18da: lea rax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x00000000095c09: lea rax, [rip+0x158050]; jne short 0x0000000000095c60; add rsp, 0x10; pop rbp; ret; 
0x00000000039648: lea rax, [rip+0x175e46]; ret; 
0x00000000039630: lea rax, [rip+0x175e5e]; cmp [rdx+0x38], edi; jbe short 0x000000000003964f; mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000007560d: lea rax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x0000000009aa23: lea rax, [rip+0x17926]; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000002d400: lea rax, [rip+0x181bef]; ret; 
0x0000000009c2dd: lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009b9f5: lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x0000000002d410: lea rax, [rip+0x183a80]; ret; 
0x0000000009bebd: lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc9d: lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd59: lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x0000000009b2d5: lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1b5: lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac45: lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x0000000004dffa: lea rax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000447c0: lea rax, [rip+0x1abc4f]; add rsp, 0x8; ret; 
0x00000000037f76: lea rax, [rip+0x1b49a3]; mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x000000000395f6: lea rax, [rip+0x1b6303]; ret; 
0x000000000a16ed: lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x00000000115fa9: lea rax, [rip+0x3b9c0]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d69: lea rax, [rip+0x3bc20]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e89: lea rax, [rip+0x3e4d0]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000002d117: lea rax, [rip+0x53552]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x0000000009c013: lea rax, [rip+0x5946]; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x0000000011603d: lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f1d: lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115dfd: lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x0000000011609e: lea rax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x000000001172a3: lea rax, [rip+0x678f6]; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x00000000115fdd: lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115ebd: lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d9d: lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160eb: lea rax, [rip+0x68b1e]; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009b0d3: lea rax, [rip+0x68e6]; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x00000000115f79: lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x0000000009afa3: lea rax, [rip+0x6966]; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x00000000115e59: lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d39: lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116109: lea rax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000009ab33: lea rax, [rip+0x6ed6]; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000011601d: lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115efd: lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115ddd: lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x00000000116135: lea rax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x0000000009d3a4: lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009b061: lea rax, [rip+0x8098]; lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x0000000009bb04: lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009c147: lea rax, [rip+0x9512]; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a7: lea rax, [rip+0x95a2]; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb62: lea rax, [rip+0x96e7]; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000010af1e: lea rax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x0000000014b3cc: lea rax, [rip+0xb171d]; cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000149ba9: lea rax, [rip+0xb2d70]; mov edx, 0x0; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000009c289: lea rax, [rip+0xb5710]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be69: lea rax, [rip+0xb5b10]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009c197: lea rax, [rip+0xb702]; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f7: lea rax, [rip+0xb792]; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bc49: lea rax, [rip+0xb8720]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x000000000b5551: lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x000000000b664c: lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x00000000138e87: lea rax, [rip+0xc3692]; add rsp, 0x8; ret; 
0x000000000b509c: lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x000000000b55f3: lea rax, [rip+0xc95b6]; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x0000000009d41d: lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x0000000009ab60: lea rax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009bba1: lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x000000000b6660: lea rax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b4f10: lea rax, [rip+0xd6c09]; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f80: lea rax, [rip+0xd6e19]; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b50b0: lea rax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b5170: lea rax, [rip+0xd7349]; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b5270: lea rax, [rip+0xd7c19]; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000b54d1: lea rax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009aad5: lea rax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x0000000009aa50: lea rax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afd0: lea rax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfb0: lea rax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c040: lea rax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b100: lea rax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009ac00: lea rax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000009c31d: lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009befd: lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcdd: lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bd3e: lea rax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x0000000009c2bd: lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be9d: lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc7d: lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009bd8b: lea rax, [rip+0xe2e8e]; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000009c259: lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be39: lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc19: lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009bda9: lea rax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x000000000a1700: lea rax, [rip+0xe5589]; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x0000000009c2fd: lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bedd: lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcbd: lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x0000000009bdd5: lea rax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x0000000009d430: lea rax, [rip+0xeb7e9]; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x0000000009aae8: lea rax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aef0: lea rax, [rip+0xee9c9]; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009d3c1: lea rax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009af60: lea rax, [rip+0xf06f9]; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b190: lea rax, [rip+0xf0789]; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x0000000009b17d: lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009bb21: lea rax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x000000000b5512: lea rax, [rip+0xf1f7]; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000000b54b4: lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000001032ee: lea rax, [rip+0xf2dcb]; add rsp, 0x18; ret; 
0x0000000010329a: lea rax, [rip+0xf2e5f]; pop r12; pop r13; ret; 
0x00000000102da6: lea rax, [rip+0xf32d3]; add rsp, 0x8; ret; 
0x00000000102d4f: lea rax, [rip+0xf334a]; pop rbp; pop r12; pop r13; ret; 
0x0000000009aaa4: lea rax, [rip+0xf435]; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009aedd: lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af4d: lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x000000000b4f6d: lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b6612: lea rax, [rip+0xfbc7]; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x000000000c74b0: lea rax, [rip-0x107]; add rsp, 0x58; ret; 
0x000000000c73a0: lea rax, [rip-0x107]; ret; 
0x000000000c74c0: lea rax, [rip-0x117]; ret; 
0x000000001160b9: lea rax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x00000000115dbd: lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115edd: lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ffd: lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x00000000117287: lea rax, [rip-0x627fe]; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x00000000073b95: lea rax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000b55d7: lea rax, [rip-0xb3e]; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000006ecf3: lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000c7390: lea rax, [rip-0xf7]; add rsp, 0x58; ret; 
0x0000000010cf80: lea rax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 0x1; ret; 
0x000000000c69a1: lea rax, [rsi+rdx]; ret; 
0x0000000010b237: lea rax, [rsp-0x30]; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x0000000014142b: lea rbp, [rsp+0x148]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013e02c: lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000083c27: lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x000000000ea529: lea rbx, [rip+0xc18e4]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000af73d: lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b57ed: lea rcx, [rax+0x1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx; 
0x000000000b592c: lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x00000000090606: lea rcx, [rax-0x1]; lock cmpxchg [rdi], rcx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x000000000fb9a9: lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf9: lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc79: lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x000000000fb516: lea rcx, [rbx+0x28]; mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000760a6: lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b80: lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000006bb23: lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000128a2e: lea rcx, [rdi+0x1]; test al, al; jne short 0x0000000000128a16; mov eax, r10d; ret; 
0x00000000163e55: lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x000000001681e6: lea rcx, [rdx+0x10]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000016404b: lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x000000001683eb: lea rcx, [rdx+0x1]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000080723: lea rcx, [rdx+0x1]; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret; 
0x0000000016406d: lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x0000000016840e: lea rcx, [rdx+0x2]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164093: lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x00000000168434: lea rcx, [rdx+0x3]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001640ab: lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x0000000016845c: lea rcx, [rdx+0x4]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000079565: lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000001640d1: lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x00000000168482: lea rcx, [rdx+0x5]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001640f3: lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x000000001684b4: lea rcx, [rdx+0x6]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164111: lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x000000001684e2: lea rcx, [rdx+0x7]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000163ded: lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x0000000016817e: lea rcx, [rdx+0x8]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164133: lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x00000000168514: lea rcx, [rdx+0x9]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164153: lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x00000000168544: lea rcx, [rdx+0xa]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164173: lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x00000000168574: lea rcx, [rdx+0xb]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164193: lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000001685a4: lea rcx, [rdx+0xc]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641b5: lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000001685d6: lea rcx, [rdx+0xd]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641d5: lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x00000000168606: lea rcx, [rdx+0xe]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001641f5: lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x00000000168636: lea rcx, [rdx+0xf]; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000010ce7d: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d694: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e1: lea rcx, [rdx+rcx*4]; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x00000000169ac6: lea rcx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000000a1459: lea rcx, [rip+0x108914]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008d06a: lea rcx, [rip+0x11c807]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c37b: lea rcx, [rip+0x11d2be]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c1bd: lea rcx, [rip+0x11d3e4]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b691: lea rcx, [rip+0x11dde8]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000075e7f: lea rcx, [rip+0x1331ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000757e0: lea rcx, [rip+0x13354d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000757df: lea rcx, [rip+0x13354d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000007583e: lea rcx, [rip+0x1335ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c771: lea rcx, [rip+0x14aa70]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c6ba: lea rcx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000080d5d: lea rcx, [rip+0x16e1fc]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000173b4d: lea rcx, [rip+0x2196c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000017246c: lea rcx, [rip+0x2304d]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001721a8: lea rcx, [rip+0x23311]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000170d93: lea rcx, [rip+0x24726]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016f24d: lea rcx, [rip+0x2626c]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016d5bc: lea rcx, [rip+0x27efd]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016d288: lea rcx, [rip+0x28231]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016b9b3: lea rcx, [rip+0x29b06]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000018f5cc: lea rcx, [rip+0x2b74d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x00000000140b50: lea rcx, [rip+0x6e3ed]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x0000000014030c: lea rcx, [rip+0x6ebf1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x0000000012b63c: lea rcx, [rip+0x81e41]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000f5d23: lea rcx, [rip+0xb6c56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000e2774: lea rcx, [rip+0xc941d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x00000000073930: lea rcx, [rip-0x8ba]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073aab: lea rcx, [rip-0xa35]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073c39: lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cfc: lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x00000000073dda: lea rcx, [rip-0xd64]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e3d: lea rcx, [rip-0xdc7]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e96: lea rcx, [rip-0xe20]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x0000000014c437: lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f6: lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x0000000010d05d: lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x0000000010d046: lea rcx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d896: lea rcx, [rsi+rcx*4]; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d8a8; ret; 
0x000000000fc11c: lea rcx, [rsp+0x38]; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000000fbf2e: lea rcx, [rsp+0x38]; movzx eax, al; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x00000000065034: lea rdi, [eip+0x142d80]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000013e730: lea rdi, [r12+0x10]; call rax; 
0x0000000014caa6: lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x00000000086f5f: lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000d6ef0: lea rdi, [rax+0x2e0]; mov [rax+0x2d8], rdi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000898f2: lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x0000000012297a: lea rdi, [rax+rcx+0x2]; cmp rdx, rdi; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x00000000140cc2: lea rdi, [rbp+0x58]; call rax; 
0x000000001402d2: lea rdi, [rbp+0x68]; call rax; 
0x0000000013dbe5: lea rdi, [rbp+0xc8]; call rax; 
0x0000000008975a: lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x00000000131fc8: lea rdi, [rbx+0x8]; call rsi; 
0x000000000b02ac: lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b19a0: lea rdi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x000000000b02cf: lea rdi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x000000000b19c3: lea rdi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x000000000b02f4: lea rdi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b19e8: lea rdi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b0312: lea rdi, [rdi+0x13]; jne 0x00000000000b0980; ret; 
0x000000000b1a16: lea rdi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b0332: lea rdi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b1a46: lea rdi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b0355: lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1a79: lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b0374: lea rdi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b1aa8: lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b0394: lea rdi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b1ad8: lea rdi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b03b4: lea rdi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b1b08: lea rdi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b03d7: lea rdi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000b1b3b: lea rdi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x000000000b00c6: lea rdi, [rdi+0x1]; jne 0x00000000000b0980; ret; 
0x000000000b1779: lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000175dac: lea rdi, [rdi+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac4: lea rdi, [rdi+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187b5c: lea rdi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018afd4: lea rdi, [rdi+0x1]; jne 0x000000000018b420; ret; 
0x000000000b040c: lea rdi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b1b70: lea rdi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b043a: lea rdi, [rdi+0x1b]; jne 0x00000000000b0980; ret; 
0x000000000b1b9e: lea rdi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b046a: lea rdi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b1bce: lea rdi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b0496: lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b1bfa: lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b04c6: lea rdi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b1c2a: lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b04f6: lea rdi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b1c5a: lea rdi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000000b0526: lea rdi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b1c8a: lea rdi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x000000000b00ea: lea rdi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x000000000b179e: lea rdi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000175f5a: lea rdi, [rdi+0x2]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176c8e: lea rdi, [rdi+0x2]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d1e: lea rdi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x0000000018b18a: lea rdi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x000000000b010d: lea rdi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b17c1: lea rdi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000175f7e: lea rdi, [rdi+0x3]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cb2: lea rdi, [rdi+0x3]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d42: lea rdi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x0000000018b1ae: lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x000000000b0128: lea rdi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x000000000b17dc: lea rdi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000175f98: lea rdi, [rdi+0x4]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ccc: lea rdi, [rdi+0x4]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d5c: lea rdi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x0000000018b1c8: lea rdi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000000b014b: lea rdi, [rdi+0x5]; jne 0x00000000000b0980; ret; 
0x000000000b17ff: lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000000b0170: lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b1824: lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x000000000b018e: lea rdi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b1842: lea rdi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x000000000b01aa: lea rdi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000b185e: lea rdi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x000000000b01cd: lea rdi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000000b1881: lea rdi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x000000000b01f2: lea rdi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b18a6: lea rdi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x000000000b0210: lea rdi, [rdi+0xb]; jne 0x00000000000b0980; ret; 
0x000000000b18d4: lea rdi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x000000000b0230: lea rdi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b18f4: lea rdi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x000000000b0252: lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b1916: lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000000b0272: lea rdi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b1946: lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000b0292: lea rdi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b1976: lea rdi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x00000000175fc3: lea rdi, [rdi+rdx+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cf7: lea rdi, [rdi+rdx+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d87: lea rdi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1f3: lea rdi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x00000000088987: lea rdi, [rdi+rsi*4+0x10]; lock xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x00000000151fe2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x00000000152132: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x00000000152282: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x000000001523d2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x00000000152522: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x00000000152672: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x000000001527c2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x00000000152912: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x00000000152a62: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152bb2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152d02: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152e52: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152fa2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x000000001530f2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x00000000153242: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x000000001549b2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x00000000154b02: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154c52: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154da2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154ef2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000155042: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x00000000155192: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001552e2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x00000000155432: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x00000000155582: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x000000001556d2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x00000000155822: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x00000000155972: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x00000000155ac2: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155c12: lea rdi, [rdi-0x40]; movaps [rdi+0x10], xmm3; jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x000000000a152c: lea rdi, [rip+0x108865]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000074963: lea rdi, [rip+0x133cd6]; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x0000000006f68a: lea rdi, [rip+0x138baf]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000065035: lea rdi, [rip+0x142d80]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000005d7fc: lea rdi, [rip+0x14a1ad]; movzx r12d, r12b; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000002d3c5: lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3ac: lea rdi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000013dc29: lea rdi, [rip+0x70eb0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x0000000012b5fe: lea rdi, [rip+0x81e6f]; movzx esi, al; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x000000000f8ad5: lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000011f4b1: lea rdi, [rip+0xd7728]; call rax; 
0x000000000cfad1: lea rdi, [rip+0xdb490]; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cfb39: lea rdi, [rip+0xdb614]; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000cd527: lea rdi, [rip+0xdd475]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000007496e: lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x000000000738da: lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b5a: lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x00000000073c86: lea rdi, [rip-0xc10]; add rax, rdi; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x0000000006ebb9: lea rdi, [rip-0xe15]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x000000001156ea: lea rdi, [rip-0xe1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000006ec1d: lea rdi, [rip-0xe79]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ed55: lea rdi, [rip-0xfb1]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x00000000085989: lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c335: lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x000000000c720b: lea rdi, [rsp+0x88]; call rbp; 
0x000000000c6feb: lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x00000000151af3: lea rdx, [r11+rdx]; jmp rdx; 
0x0000000007b86a: lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007a1d8: lea rdx, [rax+0x1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x0000000008074a: lea rdx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000094892: lea rdx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x000000000911d7: lea rdx, [rax-0x1]; lock cmpxchg [rdi], rdx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x000000000760a2: lea rdx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b7c: lea rdx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x00000000089631: lea rdx, [rbx+0x638]; syscall; 
0x000000000d2645: lea rdx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x0000000003a3b3: lea rdx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x0000000010ce95: lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x00000000151ee7: lea rdx, [rdx-0x40]; jmp r9; 
0x000000000b5069: lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x00000000099bdb: lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009afaa: lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000008e2b8: lea rdx, [rip+0x11b959]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008de94: lea rdx, [rip+0x11bc15]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008df1e: lea rdx, [rip+0x11bc23]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d8e8: lea rdx, [rip+0x11c0b1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008d748: lea rdx, [rip+0x11c1b9]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008ce8e: lea rdx, [rip+0x11c8d3]; lea r15, [rdi+0x10]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c80d: lea rdx, [rip+0x11cebc]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008bb15: lea rdx, [rip+0x11d9f4]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000085b34: lea rdx, [rip+0x1236c1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000007563f: lea rdx, [rip+0x1330da]; add rax, rdx; ret; 
0x00000000064cdd: lea rdx, [rip+0x143028]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d466: lea rdx, [rip+0x14a493]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000002d77e: lea rdx, [rip+0x16687b]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003afac: lea rdx, [rip+0x167fad]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009c2d6: lea rdx, [rip+0x18163]; lea rax, [rip+0x1821c]; cmove rax, rdx; ret; 
0x0000000009beb6: lea rdx, [rip+0x18563]; lea rax, [rip+0x1861c]; cmove rax, rdx; ret; 
0x0000000009bc96: lea rdx, [rip+0x187a3]; lea rax, [rip+0x1885c]; cmove rax, rdx; ret; 
0x0000000009bd52: lea rdx, [rip+0x18df7]; lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x00000000173ba6: lea rdx, [rip+0x21913]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000173b81: lea rdx, [rip+0x21938]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721f6: lea rdx, [rip+0x232c3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000001721dc: lea rdx, [rip+0x232dd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f2a6: lea rdx, [rip+0x26213]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016f281: lea rdx, [rip+0x26238]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2d6: lea rdx, [rip+0x281e3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000016d2bc: lea rdx, [rip+0x281fd]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000141e58: lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x0000000018fff0: lea rdx, [rip+0x2ad59]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000160b86: lea rdx, [rip+0x34933]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000160b61: lea rdx, [rip+0x34958]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015e626: lea rdx, [rip+0x36e93]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015e60c: lea rdx, [rip+0x36ead]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000115fb0: lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x00000000115d70: lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e90: lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x0000000011728e: lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x00000000116036: lea rdx, [rip+0x610e3]; lea rax, [rip+0x6113c]; cmove rax, rdx; ret; 
0x00000000115f16: lea rdx, [rip+0x61223]; lea rax, [rip+0x6127c]; cmove rax, rdx; ret; 
0x00000000115df6: lea rdx, [rip+0x61343]; lea rax, [rip+0x6139c]; cmove rax, rdx; ret; 
0x00000000116097: lea rdx, [rip+0x617d2]; lea rax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x00000000115fd6: lea rdx, [rip+0x68373]; lea rax, [rip+0x683dc]; cmove rax, rdx; ret; 
0x00000000115eb6: lea rdx, [rip+0x684b3]; lea rax, [rip+0x6851c]; cmove rax, rdx; ret; 
0x00000000115d96: lea rdx, [rip+0x685d3]; lea rax, [rip+0x6863c]; cmove rax, rdx; ret; 
0x000000001160f2: lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x00000000115f72: lea rdx, [rip+0x69527]; lea rax, [rip+0x69580]; cmove rax, rdx; ret; 
0x00000000115e52: lea rdx, [rip+0x69667]; lea rax, [rip+0x696c0]; cmove rax, rdx; ret; 
0x00000000115d32: lea rdx, [rip+0x69787]; lea rax, [rip+0x697e0]; cmove rax, rdx; ret; 
0x00000000116102: lea rdx, [rip+0x69e87]; lea rax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000013ff47: lea rdx, [rip+0x6ebd2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000001172aa: lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x00000000116016: lea rdx, [rip+0x70423]; lea rax, [rip+0x7048c]; cmove rax, rdx; ret; 
0x00000000115ef6: lea rdx, [rip+0x70563]; lea rax, [rip+0x705cc]; cmove rax, rdx; ret; 
0x00000000115dd6: lea rdx, [rip+0x70683]; lea rax, [rip+0x706ec]; cmove rax, rdx; ret; 
0x0000000011612e: lea rdx, [rip+0x70eeb]; lea rax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x00000000139984: lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013ab28: lea rdx, [rip+0xb2071]; jmp qword ptr [rdx+rax*8]; 
0x000000000b4f97: lea rdx, [rip+0xb4392]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009ab3a: lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x0000000009b068: lea rdx, [rip+0xb51a1]; cmovne rax, rdx; ret; 
0x000000000f665f: lea rdx, [rip+0xb63da]; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f60d9: lea rdx, [rip+0xb68ec]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f5989: lea rdx, [rip+0xb6eb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000142651: lea rdx, [rip+0xba108]; cmp rax, rdx; je short 0x0000000000142660; pop rbx; ret; 
0x00000000142537: lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x0000000009c290: lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be70: lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x000000000eebaf: lea rdx, [rip+0xbd52a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000eebe9: lea rdx, [rip+0xbd748]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x0000000009bc50: lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x0000000009c14e: lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0ae: lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x000000000b55de: lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000009c19e: lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0fe: lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x000000000b54ad: lea rdx, [rip+0xc294c]; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f66: lea rdx, [rip+0xc3163]; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5156: lea rdx, [rip+0xc33b3]; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5256: lea rdx, [rip+0xc3a63]; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef6: lea rdx, [rip+0xc3b43]; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x0000000009abda: lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009b0da: lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x000000000b5519: lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x0000000009bf8a: lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x000000000e2709: lea rdx, [rip+0xc93b0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000e285b: lea rdx, [rip+0xc93c2]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000009c01a: lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000000dd700: lea rdx, [rip+0xce23d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000a16e6: lea rdx, [rip+0xcece3]; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x000000000dc029: lea rdx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dc02a: lea rdx, [rip+0xcf823]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000dbb60: lea rdx, [rip+0xcfc6d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b55fa: lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000d8ed9: lea rdx, [rip+0xd28a0]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x000000000d8aac: lea rdx, [rip+0xd28e1]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000d86e2: lea rdx, [rip+0xd2c57]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x0000000009d39d: lea rdx, [rip+0xd2ecc]; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009b1a7: lea rdx, [rip+0xd4242]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009b2c7: lea rdx, [rip+0xd4252]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009bafd: lea rdx, [rip+0xd44bc]; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009ac37: lea rdx, [rip+0xd4682]; test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x0000000009d416: lea rdx, [rip+0xd6a23]; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x000000000b54ca: lea rdx, [rip+0xd7bcf]; lea rax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009b176: lea rdx, [rip+0xd8ed3]; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed6: lea rdx, [rip+0xd9343]; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af46: lea rdx, [rip+0xd9453]; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x0000000009c316: lea rdx, [rip+0xdae33]; lea rax, [rip+0xdae8c]; cmove rax, rdx; ret; 
0x0000000009bef6: lea rdx, [rip+0xdb233]; lea rax, [rip+0xdb28c]; cmove rax, rdx; ret; 
0x0000000009bcd6: lea rdx, [rip+0xdb473]; lea rax, [rip+0xdb4cc]; cmove rax, rdx; ret; 
0x0000000009bd37: lea rdx, [rip+0xdbb42]; lea rax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x000000000cb55c: lea rdx, [rip+0xdf2d9]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000ca799: lea rdx, [rip+0xdff44]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c9fdc: lea rdx, [rip+0xe06d1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000009bb69: lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009aaab: lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009c2b6: lea rdx, [rip+0xe20c3]; lea rax, [rip+0xe212c]; cmove rax, rdx; ret; 
0x0000000009be96: lea rdx, [rip+0xe24c3]; lea rax, [rip+0xe252c]; cmove rax, rdx; ret; 
0x0000000009bc76: lea rdx, [rip+0xe2703]; lea rax, [rip+0xe276c]; cmove rax, rdx; ret; 
0x0000000009bd92: lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x0000000009c252: lea rdx, [rip+0xe3277]; lea rax, [rip+0xe32d0]; cmove rax, rdx; ret; 
0x0000000009be32: lea rdx, [rip+0xe3677]; lea rax, [rip+0xe36d0]; cmove rax, rdx; ret; 
0x0000000009bc12: lea rdx, [rip+0xe38b7]; lea rax, [rip+0xe3910]; cmove rax, rdx; ret; 
0x0000000009bda2: lea rdx, [rip+0xe41f7]; lea rax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x0000000009d3ba: lea rdx, [rip+0xe9e1f]; lea rax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009c2f6: lea rdx, [rip+0xea173]; lea rax, [rip+0xea1dc]; cmove rax, rdx; ret; 
0x0000000009bb1a: lea rdx, [rip+0xea1bf]; lea rax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x0000000009bed6: lea rdx, [rip+0xea573]; lea rax, [rip+0xea5dc]; cmove rax, rdx; ret; 
0x0000000009bcb6: lea rdx, [rip+0xea7b3]; lea rax, [rip+0xea81c]; cmove rax, rdx; ret; 
0x0000000009bdce: lea rdx, [rip+0xeb25b]; lea rax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x000000000a9ec6: lea rdx, [rip+0xeb5f3]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a9ea1: lea rdx, [rip+0xeb618]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a7876: lea rdx, [rip+0xedc43]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000a785c: lea rdx, [rip+0xedc5d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x000000000b4d9f: lea rdx, [rip+0xf579a]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000b6619: lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x0000000009aa2a: lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000007132e: lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000009b9e7: lea rdx, [rip-0x2ae]; test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x0000000006c296: lea rdx, [rip-0x3e0]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x000000001160b2: lea rdx, [rip-0x61579]; lea rax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x00000000115db6: lea rdx, [rip-0x6198d]; lea rax, [rip-0x618d4]; cmove rax, rdx; ret; 
0x00000000115ed6: lea rdx, [rip-0x61aad]; lea rax, [rip-0x619f4]; cmove rax, rdx; ret; 
0x00000000115ff6: lea rdx, [rip-0x61bed]; lea rax, [rip-0x61b34]; cmove rax, rdx; ret; 
0x000000000c7374: lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7494: lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000b44b2: lea rdx, [rsi+rcx]; cmp rdi, rdx; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x00000000141950: lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x00000000141919: lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x00000000094196: lea rdx, [rsp+0x1c]; mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x0000000008597f: lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c32b: lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x000000001418f7: lea rdx, [rsp+0x20]; mov esi, 0x4; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x000000001419d0: lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000000fea23: lea rdx, [rsp-0x38]; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x000000000fe610: lea rdx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000fe668: lea rdx, [rsp-0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000014246b: lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x0000000008a3eb: lea rsi, [rbp+0x638]; xor edi, edi; mov eax, 0x8f; syscall; 
0x000000001156e6: lea rsi, [rbp-0x30]; lea rdi, [rip-0xe1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013f274: lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000007dcbb: lea rsi, [rbx+0x40]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000007dd8a: lea rsi, [rbx+0x8]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000008979e: lea rsi, [rbx+0x8f0]; syscall; 
0x00000000079f2b: lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000138d6f: lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x000000000946b7: lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000089ecd: lea rsi, [rip+0x11f52c]; syscall; 
0x00000000075e25: lea rsi, [rip+0x13314c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000064940: lea rsi, [rip+0x1431b9]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000005d083: lea rsi, [rip+0x14a66a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000f744c: lea rsi, [rip+0xb5735]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000ddbf4: lea rsi, [rip+0xcddc9]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000d73d3: lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000cfaab: lea rsi, [rip+0xdb2ca]; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x000000000cd55b: lea rsi, [rip+0xdd62e]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000006ee1d: lea rsi, [rip-0x1079]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee82: lea rsi, [rip-0x10de]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006eee5: lea rsi, [rip-0x1141]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000050384: lea rsi, [rsi+0x128]; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000b44c3: lea rsi, [rsi+rcx-0x1]; std; rep movsb [rdi], [rsi]; cld; ret; 
0x0000000013ff24: lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000141d05: lea rsi, [rsp+0x10]; mov edi, eax; call rbp; 
0x0000000008146a: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90]; 
0x00000000144fdc: lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000144f82: lea rsi, [rsp+0x18]; mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000085984: lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c330: lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x0000000007c9d2: lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000013f1e5: lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000140e09: lea rsi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x000000001452f4: lea rsi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x0000000013b35c: lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000077289: lea rsi, [rsp+0x8]; call rax; 
0x0000000013b37b: lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013b422: lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000144b01: lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000142fa2: lea rsi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x0000000014556c: lea rsi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x00000000145593: lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000145304: lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145374: lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000117bdf: lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x000000000d56cd: lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x00000000151687: leave; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000011f8ed: leave; add al, [rax]; mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000016b357: leave; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016f35c: leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000f0163: leave; add rsp, 0x8; mov eax, r9d; ret; 
0x00000000040731: leave; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x00000000188a4b: leave; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a0b: leave; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbdb: leave; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbab: leave; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000000b4366: leave; cmove rax, rdx; ret; 
0x000000000df217: leave; cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x00000000109043: leave; cmp eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000018d0e5: leave; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x00000000185d25: leave; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000128620: leave; cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285d9: leave; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000c90a4: leave; idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x000000000475c3: leave; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000018f442: leave; jmp rcx; 
0x0000000018623c: leave; jne 0x0000000000186120; ret; 
0x00000000186095: leave; jne 0x0000000000186123; ret; 
0x0000000018d61c: leave; jne 0x000000000018d500; ret; 
0x0000000018d46f: leave; jne 0x000000000018d503; ret; 
0x000000000a110d: leave; jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x000000000b3e80: leave; jne short 0x00000000000b3e70; ret; 
0x000000000b3f30: leave; jne short 0x00000000000b3f20; ret; 
0x000000000b41f0: leave; jne short 0x00000000000b41e0; sub rax, 0x1; ret; 
0x000000000b52c0: leave; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x0000000010ce85: leave; jne short 0x000000000010ce90; ret; 
0x0000000010d69c: leave; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e9: leave; jne short 0x000000000010d6f0; ret; 
0x000000001171e6: leave; jne short 0x0000000000117198; mov rax, r8; ret; 
0x00000000128d1d: leave; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x00000000188a50: leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a10: leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbe0: leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbb0: leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000007e7c1: leave; jrcxz 0x000000000007e7be; jmp qword ptr [rsi+0x2e]; 
0x00000000187177: leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed19: leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000a79b9: leave; lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a5759: leave; lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a3199: leave; lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a89: leave; lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015e769: leave; lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5f9: leave; lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001502a9: leave; lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f029: leave; lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000139983: leave; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000090446: leave; lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x000000000af061: leave; mov [rax], cl; mov rax, rdi; ret; 
0x0000000014448f: leave; mov byte ptr [rsi+r9], 0x0; ret; 
0x000000000df1d2: leave; mov eax, r9d; ret; 
0x00000000142637: leave; mov fs:[rbx], rax; pop rbx; ret; 
0x0000000014c812: leave; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000186237: leave; mov rdi, rdx; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d617: leave; mov rdi, rdx; test ecx, ecx; jne 0x000000000018d500; ret; 
0x0000000003682b: leave; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x0000000014448c: leave; movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x000000000a2ffc: leave; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000186153: leave; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x0000000002d3f3: leave; or al, 0x0; nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000004acd9: leave; pop r13; pop r14; pop r15; ret; 
0x00000000051e37: leave; ret; 
0x0000000004042e: leave; sbb al, [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000115719: leave; sbb eax, 0x0; ret; 
0x00000000186093: leave; test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d46d: leave; test ecx, ecx; jne 0x000000000018d503; ret; 
0x0000000018717b: leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1e: leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000002dd5c: leave; xor edx, edx; push rax; call rbx; 
0x0000000010a811: leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5f1: leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000767ac: lock add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x000000000d9237: lock add [rax], al; cmp eax, 0x4000; sete al; add rsp, 0x98; ret; 
0x0000000009050a: lock add [rdi], rax; ret; 
0x000000000fe438: lock and [rax-0x77], cl; ret; 
0x00000000086d9b: lock cmpxchg [r8+0x308], edx; jne short 0x0000000000086d88; pop rbx; ret; 
0x000000000911a5: lock cmpxchg [rbp], rdx; jne short 0x00000000000911b8; xor eax, eax; pop rbp; ret; 
0x00000000090447: lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000086417: lock cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x0000000008e0d2: lock cmpxchg [rdi], edx; jne short 0x000000000008e0ba; mov qword ptr fs:[0x2f0], 0x0; xor eax, eax; ret; 
0x000000000865a6: lock cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x0000000009060a: lock cmpxchg [rdi], rcx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x0000000008b3a5: lock cmpxchg [rdi], rdx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x000000000911db: lock cmpxchg [rdi], rdx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x0000000008b190: lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000011fc5c: lock dec dword ptr [rax-0x77]; add eax, 0xdcfeb; add rsp, 0x8; ret; 
0x0000000011faf1: lock dec dword ptr [rax-0x77]; ret; 
0x00000000121203: lock dec dword ptr [rax-0x7d]; ret; 
0x000000001237e9: lock dec dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000090420: lock dec dword ptr [rdi]; jne short 0x0000000000090430; xor eax, eax; ret; 
0x0000000009704c: lock or [rax], eax; add [rax-0x77], cl; ret; 
0x0000000008898c: lock xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x000000000888d9: lock xadd [rdi], eax; shr eax, 0x2; cmp eax, 0x3; je short 0x00000000000888f0; ret; 
0x00000000092144: lock xor [rdx], dl; add al, ch; ret; 
0x000000000d21fc: lodsb [rsi]; adc [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000009ed96: lodsb [rsi]; and al, 0xa8; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000d16b3: lodsb [rsi]; cmc; jmp far fword ptr [rcx]; 
0x00000000192a60: lodsb [rsi]; jp short 0x0000000000192a4d; jmp qword ptr [rsi+0x2e]; 
0x00000000092348: lodsb [rsi]; nop [rax]; mov [rcx+0x20], rdx; ret; 
0x0000000009c294: lodsb [rsi]; or eax, [rax]; cmovne rax, rdx; ret; 
0x0000000006943c: lodsb [rsi]; sbb al, [rax]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000014bd54: lodsb [rsi]; shr dword ptr [rax-0x1], 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000091443: lodsb [rsi]; stc; dec dword ptr [rax-0x77]; ret; 
0x00000000043da0: lodsb [rsi]; test esi, edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000c74f4: lodsd [rsi]; add [rax], al; add rsp, 0x18; ret; 
0x000000000d85c9: lodsd [rsi]; add [rax], al; setne al; ret; 
0x0000000018fff4: lodsd [rsi]; add al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000014f02e: lodsd [rsi]; add eax, 0xc634f00; mov cl, [rdi-0x73]; adc al, 0xa; jmp r10; 
0x000000000d1554: lodsd [rsi]; cmc; jmp far fword ptr [rcx]; 
0x00000000050ddb: lodsd [rsi]; enter 0x894c, 0x7; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000000f8ad8: lodsd [rsi]; imul ecx, [rbx], 0x0; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000018bbe2: lodsd [rsi]; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000005d7ff: lodsd [rsi]; mov eax, [0x634ae4b60f450014]; add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000012b117: lodsd [rsi]; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x000000001232c8: lodsd [rsi]; nop [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000014b23f: lodsd [rsi]; out 0xfa, eax; jmp qword ptr [rsi+0x2e]; 
0x000000001400e3: lodsd [rsi]; out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x0000000007197a: lodsd [rsi]; push rax; idiv edi; call qword ptr [rax+0x4817048d]; 
0x00000000050e12: lodsd [rsi]; ret; 
0x00000000041a6f: loop 0x0000000000041a72; mov [rbx+0x8], edx; add rsp, 0x40; pop rbx; ret; 
0x00000000043df7: loop 0x0000000000043e19; or rax, rdx; ret; 
0x0000000005048d: loop 0x0000000000050447; add [rax], eax; add [rax], al; ret; 
0x00000000050575: loop 0x000000000005052f; add [rax], eax; add [rax], al; ret; 
0x000000000520c4: loop 0x000000000005210e; mov [rdi], edx; mov [rsi], eax; mov eax, 0x1; ret; 
0x00000000055685: loop 0x00000000000556d3; mov eax, eax; ret; 
0x000000000584cd: loop 0x0000000000058513; mov eax, eax; ret; 
0x0000000006b1a0: loop 0x000000000006b1e3; call qword ptr [rbp+0x38]; 
0x0000000006bb21: loop 0x000000000006bb25; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x0000000006bb29: loop 0x000000000006bb6c; call qword ptr [rdx+rax*8]; 
0x0000000006bc2f: loop 0x000000000006bc7d; mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000006c21c: loop 0x000000000006c21a; call qword ptr [rax+0x87e8b48]; 
0x0000000006d9d4: loop 0x000000000006d9d5; jmp qword ptr [rsi+0xf]; 
0x0000000006da76: loop 0x000000000006da78; jmp qword ptr [rsi+0xf]; 
0x0000000006da77: loop 0x000000000006da78; jmp qword ptr [rsi+0xf]; 
0x00000000070c39: loop 0x0000000000070c3d; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000070c41: loop 0x0000000000070c84; call qword ptr [rdx+rax*8]; 
0x0000000007208d: loop 0x0000000000072056; test [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000007226b: loop 0x00000000000722b9; mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000072621: loop 0x000000000007266f; mov esi, ebp; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x00000000072bc3: loop 0x0000000000072bc4; jmp qword ptr [rsi+0x2e]; 
0x0000000007445d: loop 0x0000000000074448; ret; 
0x0000000007750e: loop 0x0000000000077558; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000077a38: loop 0x0000000000077a86; mov esi, esi; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000078a40: loop 0x0000000000078a9d; pop r12; pop r13; jmp rax; 
0x00000000078d8a: loop 0x0000000000078dd4; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078db4: loop 0x0000000000078dfe; mov esi, ebp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000078f1a: loop 0x0000000000078f64; mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007ccc0: loop 0x000000000007cd0a; mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007e9bc: loop 0x000000000007e9b8; call qword ptr [rax+0x53555441]; 
0x000000000809bd: loop 0x0000000000080a0b; mov esi, ebp; call qword ptr [r14+0x38]; 
0x00000000081b10: loop 0x0000000000081b5e; mov esi, edi; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x00000000086151: loop 0x000000000008618b; cmp edx, 0x8; je short 0x0000000000086159; ret; 
0x00000000088936: loop 0x000000000008893b; cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x0000000008a92a: loop 0x000000000008a927; cli; jmp qword ptr [rsi-0x70]; 
0x0000000008b359: loop 0x000000000008b313; or eax, [rax]; add [rax], al; ret; 
0x0000000008b3e6: loop 0x000000000008b371; out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000008b483: loop 0x000000000008b40e; out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000008d048: loop 0x000000000008d07b; ror byte ptr [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000008df5a: loop 0x000000000008df5c; add [rax], al; mov eax, 0x1; ret; 
0x0000000008e0d7: loop 0x000000000008e13d; mov qword ptr [0x2f0], 0x0; xor eax, eax; ret; 
0x00000000094406: loop 0x0000000000094408; add [rax], al; syscall; 
0x00000000099830: loop 0x000000000009982a; and ecx, 0x2; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x0000000009a916: loop 0x000000000009a959; pop rsp; pop r13; ret; 
0x0000000009a92f: loop 0x000000000009a972; pop rsp; pop r13; ret; 
0x0000000009bc47: loop 0x000000000009bc4b; lea rax, [rip+0xb8720]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x0000000009be67: loop 0x000000000009be6b; lea rax, [rip+0xb5b10]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009c287: loop 0x000000000009c28b; lea rax, [rip+0xb5710]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x000000000a153d: loop 0x00000000000a15a5; nop; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000a30ed: loop 0x00000000000a3120; shr byte ptr [rcx], 0xc8; ret; 
0x000000000aa25b: loop 0x00000000000aa28d; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x000000000b039a: loop 0x00000000000b03a1; add [rax], al; ret; 
0x000000000b4c85: loop 0x00000000000b4c4a; nop [rax+rax]; xor eax, eax; ret; 
0x000000000cc464: loop 0x00000000000cc465; jmp qword ptr [rsi-0x7f]; 
0x000000000d1973: loop 0x00000000000d1974; jmp qword ptr [rsi+0x2e]; 
0x000000000d1994: loop 0x00000000000d1995; jmp qword ptr [rsi+0xf]; 
0x000000000d73d2: loop 0x00000000000d741c; lea esi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000dd704: loop 0x00000000000dd712; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000e088c: loop 0x00000000000e088f; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x000000000ebd6b: loop 0x00000000000ebd6c; jmp qword ptr [rsi-0x70]; 
0x000000000ee091: loop 0x00000000000ee086; call far fword ptr [rax+0x5a]; 
0x000000000ef038: loop 0x00000000000ef023; cmp esp, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x000000000f9a27: loop 0x00000000000f9a71; mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000feb8c: loop 0x00000000000feb9c; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000108a41: loop 0x0000000000108a42; sldt [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000115d67: loop 0x0000000000115d6b; lea rax, [rip+0x3bc20]; lea rdx, [rip+0x41189]; cmovne rax, rdx; ret; 
0x00000000115e87: loop 0x0000000000115e8b; lea rax, [rip+0x3e4d0]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x00000000115fa7: loop 0x0000000000115fab; lea rax, [rip+0x3b9c0]; lea rdx, [rip+0x40f29]; cmovne rax, rdx; ret; 
0x000000001177fa: loop 0x00000000001177df; stc; call qword ptr [rax-0x18]; 
0x00000000117d40: loop 0x0000000000117d42; add [rax], al; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000123339: loop 0x000000000012333f; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000001359ae: loop 0x00000000001359af; jmp qword ptr [rsi+0x66]; 
0x00000000135a45: loop 0x0000000000135a46; call far fword ptr [rax+0x5a]; 
0x0000000013a76f: loop 0x000000000013a76d; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000013affa: loop 0x000000000013b048; mov edi, esi; call qword ptr [rax+0x10]; 
0x0000000013b034: loop 0x000000000013b082; mov edi, esi; call qword ptr [rax+0x20]; 
0x0000000013bf55: loop 0x000000000013bf9f; mov esi, ebp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000013c4d7: loop 0x000000000013c4dd; xor rax, rdx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x0000000014cff5: loop 0x000000000014d03f; or [rdi+rax*8], edx; xor eax, eax; ret; 
0x0000000014eb34: loop 0x000000000014eb3f; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000014eb74: loop 0x000000000014eb7f; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014eb94: loop 0x000000000014eb9f; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014ebb4: loop 0x000000000014ebbf; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014ebd4: loop 0x000000000014ebdf; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000153dd7: loop 0x0000000000153e25; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153e1f: loop 0x0000000000153e6d; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153e5d: loop 0x0000000000153eab; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153e95: loop 0x0000000000153ee3; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153ed3: loop 0x0000000000153f21; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f0b: loop 0x0000000000153f59; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f33: loop 0x0000000000153f81; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001567a7: loop 0x00000000001567f5; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001567ef: loop 0x000000000015683d; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015682d: loop 0x000000000015687b; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156865: loop 0x00000000001568b3; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001568a3: loop 0x00000000001568f1; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001568db: loop 0x0000000000156929; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156903: loop 0x0000000000156951; mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158c19: loop 0x0000000000158c0f; movq [rdi-0x10], mm1; ret; 
0x0000000015b739: loop 0x000000000015b72f; movq [rdi-0x10], mm1; ret; 
0x00000000050ca7: loope 0x0000000000050cf5; mov [rdi], ecx; ret; 
0x00000000050cd8: loope 0x0000000000050d26; mov [rdi-0x8], ecx; ret; 
0x00000000050d4d: loope 0x0000000000050d9b; mov [rdi-0x10], ecx; ret; 
0x0000000006bb8b: loope 0x000000000006bb92; add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000076a7e: loope 0x0000000000076ada; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000086da6: loope 0x0000000000086e03; ret; 
0x0000000008d156: loope 0x000000000008d158; add al, bh; inc dword ptr [rcx+0x39]; ret far; 
0x0000000009452b: loope 0x00000000000944b5; adc eax, 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094512: loope 0x0000000000094514; add [rax], al; syscall; 
0x0000000009490b: loope 0x000000000009491e; add [rcx], dh; sar byte ptr [rdi+0x1], 0xe8; mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x00000000097daa: loope 0x0000000000097dbd; add al, ch; data64 ret far; 
0x00000000099833: loope 0x0000000000099837; lea rax, [rdx-0x10]; je short 0x0000000000099840; ret; 
0x0000000009a9e3: loope 0x000000000009a9e4; jmp qword ptr [rsi+0x2e]; 
0x0000000009aaa2: loope 0x000000000009aaa8; lea rax, [rip+0xf435]; lea rdx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000009aad4: loope 0x000000000009ab1e; lea eax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x000000000af875: loope 0x00000000000af8dd; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b0b19: loope 0x00000000000b0b81; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b0dcf: loope 0x00000000000b0d64; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e75: loope 0x00000000000b0edd; nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000b2339: loope 0x00000000000b23a1; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b2b25: loope 0x00000000000b2b8d; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b35f5: loope 0x00000000000b365d; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b3d79: loope 0x00000000000b3de1; nop [rax+rax]; ret; 
0x000000000b4de3: loope 0x00000000000b4d65; adc eax, [rax]; mov rax, [rax+0x200]; ret; 
0x000000000b622d: loope 0x00000000000b6277; mov esi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x000000000bbb27: loope 0x00000000000bbb28; jmp qword ptr [rsi+0xf]; 
0x000000000c5f7e: loope 0x00000000000c5f8f; je short 0x00000000000c5fa0; ret; 
0x000000000d470a: loope 0x00000000000d4758; mov edx, ebp; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000d4aca: loope 0x00000000000d4b18; mov edx, ebp; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000d8aaf: loope 0x00000000000d8ad9; or eax, 0x4634800; stosb [rdi]; add rax, rdx; jmp rax; 
0x000000000df351: loope 0x00000000000df357; je short 0x00000000000df2ec; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000e0862: loope 0x00000000000e0863; add esi, esi; ret; 
0x000000000f7fe8: loope 0x00000000000f7fe2; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000fa39b: loope 0x00000000000fa35a; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x0000000010012a: loope 0x000000000010012a; mov eax, 0xa9; syscall; 
0x00000000119083: loope 0x00000000001190cd; mov edx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x0000000011a14e: loope 0x000000000011a198; mov edx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x0000000011f9eb: loope 0x000000000011f9b5; add al, [rax]; mov rdi, r12; call rbp; 
0x0000000013dbae: loope 0x000000000013db40; ret; 
0x00000000142212: loope 0x000000000014225c; mov edx, ebp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x00000000142663: loope 0x000000000014260d; or al, [rax]; pop rbx; ret; 
0x00000000147f2b: loope 0x0000000000147f6e; out dx, al; dec dword ptr [rax-0x77]; ret; 
0x0000000014ec14: loope 0x000000000014ec1f; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014ec34: loope 0x000000000014ec3f; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000153fd7: loope 0x0000000000154025; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015401f: loope 0x000000000015406d; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015405d: loope 0x00000000001540ab; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154095: loope 0x00000000001540e3; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001540d3: loope 0x0000000000154121; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x0000000015410b: loope 0x0000000000154159; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154133: loope 0x0000000000154181; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001569a7: loope 0x00000000001569f5; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001569ef: loope 0x0000000000156a3d; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156a2d: loope 0x0000000000156a7b; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156a65: loope 0x0000000000156ab3; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156aa3: loope 0x0000000000156af1; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156adb: loope 0x0000000000156b29; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000156b03: loope 0x0000000000156b51; mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158b89: loope 0x0000000000158b7f; movq [rdi-0x10], mm1; ret; 
0x0000000015b6a9: loope 0x000000000015b69f; movq [rdi-0x10], mm1; ret; 
0x000000001641bb: loope 0x00000000001641be; add [rax], al; ret; 
0x0000000016f99e: loope 0x000000000016f9c9; enter 0xf8c5, 0x77; ret; 
0x00000000176783: loope 0x00000000001767cd; lea eax, [rdi+rdx]; vzeroupper; ret; 
0x0000000017c4bb: loope 0x000000000017c4bd; add [rax], al; lea rax, [rdi+0xf]; ret; 
0x0000000017e3a9: loope 0x000000000017e3a9; jg short 0x000000000017e3b5; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e415: loope 0x000000000017e415; jg short 0x000000000017e421; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e4a3: loope 0x000000000017e4a3; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000017e4c0: loope 0x000000000017e4c0; or [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000017e68b: loope 0x000000000017e68b; jg short 0x000000000017e701; jmp qword ptr [rdx-0x1f]; 
0x0000000017e6f1: loope 0x000000000017e6f1; outsd dx, [rsi]; add [rdx-0x1f], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x0000000017e6f7: loope 0x000000000017e6f7; outsd dx, [rsi]; jmp qword ptr [r10-0x1f]; 
0x0000000017ebf5: loope 0x000000000017ebf5; jg short 0x000000000017ec01; ret; 
0x0000000017ec45: loope 0x000000000017ec45; jg short 0x000000000017ec51; ret; 
0x0000000017ece8: loope 0x000000000017ece8; jg short 0x000000000017ed31; adc dh, bh; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ecf0: loope 0x000000000017ecf0; jg short 0x000000000017ed39; adc bh, bh; rep ret; 
0x0000000017ed1b: loope 0x000000000017ed18; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000017ed55: loope 0x000000000017ed55; sub [rdi+0x44], bh; adc bh, bh; vmovdqu64 [rax], ymm16; ret; 
0x0000000017ed5d: loope 0x000000000017ed5d; sub [rdi], bh; ret; 
0x0000000017ed64: loope 0x000000000017ed64; or [rdi+0x44], bh; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x0000000017ed6c: loope 0x000000000017ed6c; or [rdi], bh; ret; 
0x0000000017ed20: loope 0x000000000017eda1; jg short 0x000000000017ed25; ret; 
0x00000000186496: loope 0x0000000000186496; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000186502: loope 0x0000000000186502; sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000186587: loope 0x0000000000186587; or [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x00000000186752: loope 0x0000000000186752; sub [rdi+0x71], bh; jmp qword ptr [rdx-0x1f]; 
0x000000001867b7: loope 0x00000000001867b7; sub [rdi+0x49], ch; jmp qword ptr [rdx-0x1f]; 
0x00000000187052: loope 0x0000000000187052; sub [rdi+0x7], bh; ret; 
0x000000001870a2: loope 0x00000000001870a2; sub [rdi+0x7], bh; ret; 
0x00000000187145: loope 0x0000000000187145; sub [rdi+0x44], bh; adc dh, bh; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000018714d: loope 0x000000000018714d; sub [rdi+0x44], bh; adc bh, bh; rep ret; 
0x000000001871b0: loope 0x00000000001871b0; or [rdi+0x44], bh; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x000000001871b8: loope 0x00000000001871b8; or [rdi], bh; ret; 
0x0000000018717d: loope 0x00000000001871fe; sub [rdi], edi; ret; 
0x00000000187548: loope 0x0000000000187548; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x00000000187762: loope 0x0000000000187762; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000187792: loope 0x0000000000187792; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000187a12: loope 0x0000000000187a12; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x00000000187edf: loope 0x0000000000187edf; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x00000000187f0f: loope 0x0000000000187f0f; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x00000000187f47: loope 0x0000000000187f47; sub [rdi+0x5f], bh; add [rax-0x72b7bfb1], ecx; ret; 
0x00000000187fb1: loope 0x0000000000187fb1; or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000188728: loope 0x0000000000188728; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x00000000188932: loope 0x0000000000188932; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000188962: loope 0x0000000000188962; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000188e02: loope 0x0000000000188e24; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018909a: loope 0x0000000000189091; loopne 0x0000000000189101; mov bl, 0x5d; and [rdi], bh; ret; 
0x00000000189658: loope 0x0000000000189658; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x00000000189862: loope 0x0000000000189862; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000189892: loope 0x0000000000189892; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000189fc2: loope 0x0000000000189fc2; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x0000000018a2a2: loope 0x000000000018a2a2; or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000018a2d2: loope 0x000000000018a2d2; sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x0000000018a37f: loope 0x000000000018a37f; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018a3af: loope 0x000000000018a3af; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018a44d: loope 0x000000000018a44d; sub [rdi+0x7f], bh; add eax, esi; xchg [rax], eax; ret; 
0x0000000018a797: loope 0x000000000018a78e; loopne 0x000000000018a7fe; mov bl, 0x5d; and [rdi], bh; ret; 
0x0000000018ae92: loope 0x000000000018ae92; sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x0000000018b32f: loope 0x000000000018b32f; or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x0000000018b34f: loope 0x000000000018b34f; sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x0000000018b371: loope 0x000000000018b371; sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x0000000018b3e1: loope 0x000000000018b3e1; or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000018bfba: loope 0x000000000018bfb1; loopne 0x000000000018c021; mov bl, 0x5d; and [rdi], bl; ret; 
0x0000000018c737: loope 0x000000000018c72e; loopne 0x000000000018c79e; mov bl, 0x5d; and [rdi], bl; ret; 
0x0000000018d681: loope 0x000000000018d681; sub [rdi+0x4c], ch; xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x00000000192d36: loope 0x0000000000192d93; ret; 
0x000000000373bd: loopne 0x000000000003741c; pop r12; pop r13; ret; 
0x0000000003743f: loopne 0x000000000003749e; pop r12; pop r13; ret; 
0x0000000003a5e3: loopne 0x000000000003a5ed; ret; 
0x0000000003a623: loopne 0x000000000003a627; ret; 
0x0000000003a6c3: loopne 0x000000000003a6c9; ret; 
0x0000000003a7a3: loopne 0x000000000003a7a6; ret; 
0x0000000003a81c: loopne 0x000000000003a81f; ret; 
0x0000000003a82c: loopne 0x000000000003a836; ret; 
0x0000000003a85c: loopne 0x000000000003a860; ret; 
0x0000000003a7f3: loopne 0x000000000003a874; ret; 
0x0000000003a8ec: loopne 0x000000000003a8f2; ret; 
0x0000000003af3c: loopne 0x000000000003af99; pop rbp; pop r12; ret; 
0x0000000003afda: loopne 0x000000000003b01d; pop rsp; ret; 
0x0000000003e158: loopne 0x000000000003e1b7; pop r12; pop r13; ret; 
0x000000000403c7: loopne 0x00000000000403a6; fsub st, dword ptr [rip+0x200]; ret; 
0x000000000405f8: loopne 0x000000000004062e; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x00000000040724: loopne 0x0000000000040765; or rax, rdx; movq xmm0, rax; ret; 
0x00000000040a95: loopne 0x0000000000040a9f; ret; 
0x00000000040fd4: loopne 0x0000000000040fde; ret; 
0x00000000041c0c: loopne 0x0000000000041c56; or [rdi], eax; xor eax, eax; ret; 
0x00000000041c84: loopne 0x0000000000041cce; and eax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000041ec3: loopne 0x0000000000041f20; pop rbp; pop r12; ret; 
0x00000000041f2d: loopne 0x0000000000041f8a; pop rbp; pop r12; ret; 
0x0000000004340c: loopne 0x0000000000043469; pop rbp; pop r12; pop r13; ret; 
0x00000000043807: loopne 0x0000000000043864; pop rbp; pop r12; ret; 
0x000000000439f4: loopne 0x0000000000043a53; pop r12; pop r13; pop r14; ret; 
0x000000000440e7: loopne 0x000000000004412a; pop rsp; ret; 
0x0000000004d246: loopne 0x000000000004d248; jmp qword ptr [rsi+0xf]; 
0x0000000004ff6c: loopne 0x000000000004ffcb; pop r12; ret; 
0x000000000507b9: loopne 0x00000000000507bd; sub eax, 0x1; ret; 
0x00000000055806: loopne 0x0000000000055863; pop r12; ret; 
0x000000000558a6: loopne 0x0000000000055903; pop r12; ret; 
0x000000000558cd: loopne 0x000000000005592a; pop r12; ret; 
0x000000000558ea: loopne 0x0000000000055947; pop r12; ret; 
0x00000000058547: loopne 0x00000000000585a4; pop rbp; pop r12; ret; 
0x0000000005a3d0: loopne 0x000000000005a42d; pop rbp; pop r12; ret; 
0x0000000005a491: loopne 0x000000000005a4ee; pop rbp; pop r12; ret; 
0x0000000005a70a: loopne 0x000000000005a767; pop r12; ret; 
0x0000000005a74a: loopne 0x000000000005a7a7; pop r12; ret; 
0x0000000005ba26: loopne 0x000000000005ba85; pop r12; ret; 
0x0000000005ba7c: loopne 0x000000000005badb; pop r12; ret; 
0x0000000005ba98: loopne 0x000000000005baf7; pop r12; ret; 
0x0000000005baec: loopne 0x000000000005bb49; pop r12; ret; 
0x0000000005bb01: loopne 0x000000000005bb5e; pop r12; ret; 
0x0000000005bb31: loopne 0x000000000005bb8e; pop r12; ret; 
0x0000000006f4c1: loopne 0x000000000006f529; nop [rax+rax]; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000006f561: loopne 0x000000000006f5c9; nop [rax+rax]; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000006f625: loopne 0x000000000006f68d; nop [rax+rax]; mov r14d, 0x1; jmp rax; 
0x0000000006f699: loopne 0x000000000006f701; nop [rax+rax]; mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x00000000072d8b: loopne 0x0000000000072d8c; jmp qword ptr [rsi-0x70]; 
0x0000000007492f: loopne 0x00000000000748f8; and al, 0x68; add [rax], eax; add [rax], al; jmp rax; 
0x00000000074921: loopne 0x0000000000074989; nop [rax+rax]; mov r9d, 0x1; jmp rax; 
0x00000000074939: loopne 0x00000000000749a1; nop [rax+rax]; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x00000000074979: loopne 0x00000000000749e1; nop [rax+rax]; mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x00000000074a7d: loopne 0x0000000000074ae5; nop; mov dword ptr [rsp+0x34], 0x1; jmp rax; 
0x00000000076157: loopne 0x00000000000761b4; pop rbp; pop r12; ret; 
0x00000000076965: loopne 0x00000000000769c2; pop rbp; pop r12; ret; 
0x00000000076da6: loopne 0x0000000000076e03; pop r12; ret; 
0x00000000076edc: loopne 0x0000000000076f39; pop rbp; pop r12; ret; 
0x000000000770e9: loopne 0x00000000000770eb; add [rax], al; ret; 
0x0000000007720c: loopne 0x000000000007720e; add [rax], al; jmp rax; 
0x00000000077248: loopne 0x000000000007724a; add [rax], al; call rax; 
0x00000000077211: loopne 0x000000000007725b; mov eax, 0xffffffff; ret; 
0x00000000077285: loopne 0x0000000000077287; add [rax], al; lea rsi, [rsp+0x8]; call rax; 
0x000000000772cc: loopne 0x00000000000772ce; add [rax], al; jmp rax; 
0x000000000772d1: loopne 0x0000000000077339; nop [rax+rax]; xor eax, eax; ret; 
0x000000000773de: loopne 0x000000000007743d; pop r12; pop r13; ret; 
0x0000000007743d: loopne 0x000000000007749c; pop r12; pop r13; ret; 
0x00000000077746: loopne 0x00000000000777a3; pop rbp; pop r12; ret; 
0x000000000787d2: loopne 0x0000000000078831; pop r12; pop r13; ret; 
0x000000000787f5: loopne 0x0000000000078854; pop r12; pop r13; ret; 
0x00000000078ed2: loopne 0x0000000000078f31; pop r12; pop r13; pop r14; ret; 
0x00000000079395: loopne 0x00000000000793f2; pop rbp; pop r12; ret; 
0x00000000079505: loopne 0x0000000000079562; pop r12; ret; 
0x000000000795f5: loopne 0x0000000000079652; pop rbp; pop r12; ret; 
0x0000000007995a: loopne 0x00000000000799b9; pop r12; pop r13; pop r14; ret; 
0x00000000079a02: loopne 0x0000000000079a45; pop rsp; pop r13; pop r14; ret; 
0x00000000079a4b: loopne 0x0000000000079aaa; pop r12; pop r13; pop r14; ret; 
0x00000000079df2: loopne 0x0000000000079e4f; pop rbp; pop r12; ret; 
0x00000000079ec4: loopne 0x0000000000079f21; pop rbp; pop r12; ret; 
0x00000000079fd6: loopne 0x000000000007a033; pop rbp; pop r12; pop r13; ret; 
0x0000000007a135: loopne 0x000000000007a192; pop rbp; pop r12; pop r13; ret; 
0x0000000007a5bc: loopne 0x000000000007a619; pop rbp; pop r12; pop r13; ret; 
0x0000000007b08f: loopne 0x000000000007b091; add [rax], al; call qword ptr [rax+0x68]; 
0x0000000007b1a8: loopne 0x000000000007b1aa; add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000007b5dd: loopne 0x000000000007b63c; pop r12; pop r13; pop r14; ret; 
0x0000000007b62f: loopne 0x000000000007b672; pop rsp; pop r13; pop r14; ret; 
0x0000000007d1cc: loopne 0x000000000007d1ce; add [rax], al; mov rax, [rax+0x20]; jmp rax; 
0x0000000007d1d5: loopne 0x000000000007d23d; nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007d629: loopne 0x000000000007d688; pop r12; ret; 
0x0000000007d641: loopne 0x000000000007d6a0; pop r12; ret; 
0x0000000007d66f: loopne 0x000000000007d6ce; pop r12; ret; 
0x0000000007e1fe: loopne 0x000000000007e25b; pop rbp; pop r12; pop r13; ret; 
0x0000000007e34e: loopne 0x000000000007e351; ret; 
0x0000000007e40e: loopne 0x000000000007e411; ret; 
0x0000000007e4e8: loopne 0x000000000007e545; pop rbp; pop r12; ret; 
0x0000000007e543: loopne 0x000000000007e5a0; pop rbp; pop r12; ret; 
0x0000000007e6f0: loopne 0x000000000007e74d; pop rbp; pop r12; pop r13; ret; 
0x0000000007e917: loopne 0x000000000007e976; pop r12; ret; 
0x0000000007e975: loopne 0x000000000007e9b8; pop rsp; ret; 
0x0000000007ea2f: loopne 0x000000000007ea8c; pop rbp; pop r12; ret; 
0x0000000007ea92: loopne 0x000000000007ead5; pop rsp; ret; 
0x0000000007ec6a: loopne 0x000000000007ecc7; pop rbp; pop r12; pop r13; ret; 
0x0000000007ed08: loopne 0x000000000007ed65; pop rbp; pop r12; ret; 
0x0000000007ed63: loopne 0x000000000007edc0; pop rbp; pop r12; ret; 
0x0000000007f397: loopne 0x000000000007f3f6; pop r12; pop r13; pop r14; ret; 
0x0000000007f3f2: loopne 0x000000000007f44f; pop rbp; pop r12; ret; 
0x0000000007fa0d: loopne 0x000000000007fa6a; pop rbp; pop r12; pop r13; ret; 
0x000000000800ba: loopne 0x0000000000080117; pop rbp; pop r12; ret; 
0x000000000806f6: loopne 0x00000000000806f9; ret; 
0x00000000080706: loopne 0x0000000000080709; ret; 
0x000000000808b0: loopne 0x000000000008090d; pop r12; ret; 
0x00000000080912: loopne 0x000000000008096f; pop rbp; pop r12; ret; 
0x00000000080948: loopne 0x000000000008098b; pop rsp; ret; 
0x00000000080957: loopne 0x000000000008099a; pop rsp; ret; 
0x000000000809ff: loopne 0x0000000000080a5e; pop r12; pop r13; pop r14; ret; 
0x00000000080d67: loopne 0x0000000000080d69; add [rax], al; pop rbx; ret; 
0x000000000822fa: loopne 0x0000000000082357; pop rbp; pop r12; ret; 
0x00000000083db6: loopne 0x0000000000083e15; pop r12; pop r13; pop r14; ret; 
0x00000000085f5d: loopne 0x0000000000085fba; pop r12; ret; 
0x00000000086022: loopne 0x000000000008607f; pop r12; ret; 
0x00000000086321: loopne 0x0000000000086324; mov [rip+0x16a42b], eax; ret; 
0x00000000086e5a: loopne 0x0000000000086e53; jne short 0x0000000000086e11; pop rbx; ret; 
0x00000000087601: loopne 0x000000000008765e; pop rbp; pop r12; pop r13; ret; 
0x00000000087754: loopne 0x0000000000087757; mov [rsi], eax; xor eax, eax; ret; 
0x00000000087776: loopne 0x0000000000087779; mov [rsi], eax; xor eax, eax; ret; 
0x000000000877a7: loopne 0x00000000000877aa; mov [rsi], eax; xor eax, eax; ret; 
0x00000000087a21: loopne 0x0000000000087a20; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000089485: loopne 0x0000000000089488; mov [rsi], eax; xor eax, eax; ret; 
0x00000000089493: loopne 0x0000000000089496; mov [rsi], eax; xor eax, eax; ret; 
0x000000000894bf: loopne 0x00000000000894be; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x0000000008975d: loopne 0x0000000000089761; add [rax], al; mov eax, 0x111; syscall; 
0x0000000008a94e: loopne 0x000000000008a960; jne short 0x000000000008a958; ret; 
0x0000000008aac7: loopne 0x000000000008ab0a; pop rsp; ret; 
0x0000000008aaee: loopne 0x000000000008ab31; pop rsp; ret; 
0x0000000008af35: loopne 0x000000000008af92; pop rbp; pop r12; pop r13; ret; 
0x0000000008af66: loopne 0x000000000008afa9; pop rsp; pop r13; ret; 
0x0000000008b003: loopne 0x000000000008b060; pop rbp; pop r12; pop r13; ret; 
0x0000000008b0a5: loopne 0x000000000008b104; pop r12; pop r13; ret; 
0x0000000008b370: loopne 0x000000000008b376; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x0000000008df2d: loopne 0x000000000008df95; nop; mov eax, 0x16; ret; 
0x0000000008e486: loopne 0x000000000008e48b; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e4a6: loopne 0x000000000008e4a9; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008fd10: loopne 0x000000000008fd6d; pop rbp; pop r12; pop r13; ret; 
0x0000000008ff96: loopne 0x000000000008fff3; pop rbp; pop r12; pop r13; ret; 
0x0000000008ffc9: loopne 0x000000000009000c; pop rsp; pop r13; ret; 
0x0000000009005f: loopne 0x00000000000900bc; pop rbp; pop r12; pop r13; ret; 
0x0000000009007d: loopne 0x00000000000900dc; pop r12; pop r13; ret; 
0x0000000009048b: loopne 0x00000000000904c5; cmp eax, 0x8; je short 0x0000000000090493; ret; 
0x00000000090e8e: loopne 0x0000000000090eed; pop r12; ret; 
0x00000000090efa: loopne 0x0000000000090f59; pop r12; ret; 
0x00000000091650: loopne 0x00000000000916ad; pop rbp; pop r12; ret; 
0x000000000916ab: loopne 0x00000000000916ee; pop rsp; ret; 
0x00000000092010: loopne 0x000000000009206d; pop rbp; pop r12; ret; 
0x000000000921ac: loopne 0x0000000000092209; pop r12; ret; 
0x000000000931ca: loopne 0x0000000000093227; pop rbp; pop r12; ret; 
0x00000000093233: loopne 0x0000000000093290; pop rbp; pop r12; ret; 
0x00000000093d2c: loopne 0x0000000000093d8b; pop r12; pop r13; ret; 
0x0000000009442e: loopne 0x000000000009448d; pop r12; ret; 
0x00000000094479: loopne 0x00000000000944d8; pop r12; ret; 
0x000000000944b0: loopne 0x000000000009450f; pop r12; ret; 
0x00000000094562: loopne 0x0000000000094564; add [rax], al; syscall; 
0x00000000094c0c: loopne 0x0000000000094c6b; pop r12; pop r13; ret; 
0x00000000094e07: loopne 0x0000000000094e4a; pop rsp; ret; 
0x00000000094df1: loopne 0x0000000000094e4e; pop rbp; pop r12; ret; 
0x000000000956d0: loopne 0x000000000009572d; pop rbp; pop r12; ret; 
0x0000000009984a: loopne 0x000000000009984d; cmovne rax, rdx; ret; 
0x000000000999d9: loopne 0x0000000000099a1c; pop rsp; ret; 
0x00000000099c53: loopne 0x0000000000099cb0; pop rbp; pop r12; ret; 
0x00000000099d56: loopne 0x0000000000099db3; pop rbp; pop r12; ret; 
0x0000000009a80f: loopne 0x000000000009a86e; pop r12; pop r13; pop r14; ret; 
0x0000000009ae84: loopne 0x000000000009aee1; pop rbp; pop r12; ret; 
0x0000000009ba8a: loopne 0x000000000009bacd; pop rsp; pop r13; ret; 
0x0000000009ba6f: loopne 0x000000000009bace; pop r12; pop r13; ret; 
0x0000000009c362: loopne 0x000000000009c3bf; pop r12; ret; 
0x0000000009c37d: loopne 0x000000000009c3da; pop r12; ret; 
0x0000000009d567: loopne 0x000000000009d5aa; pop rsp; ret; 
0x0000000009d553: loopne 0x000000000009d5b0; pop rbp; pop r12; ret; 
0x000000000a1173: loopne 0x00000000000a11d0; pop r12; ret; 
0x000000000a118d: loopne 0x00000000000a11ea; pop r12; ret; 
0x000000000a1246: loopne 0x00000000000a1289; pop rsp; ret; 
0x000000000a1427: loopne 0x00000000000a1475; mov eax, eax; ret; 
0x000000000a1951: loopne 0x00000000000a19b0; pop r12; pop r13; pop r14; ret; 
0x000000000b049c: loopne 0x00000000000b04a2; add [rax], al; ret; 
0x000000000b45e0: loopne 0x00000000000b45f1; adc [rdi+rdx-0x30], esi; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b469a: loopne 0x00000000000b46e0; movups [rcx-0x30], xmm0; movups [r11], xmm4; ret; 
0x000000000b48c3: loopne 0x00000000000b48d4; adc [rdi+rdx-0x10], ebx; ret; 
0x000000000b4a6b: loopne 0x00000000000b4a7c; adc [rdi+rdx-0x10], ebx; ret; 
0x000000000b4b9d: loopne 0x00000000000b4b92; movq [rdi+rdx-0x10], mm0; ret; 
0x000000000b4bfd: loopne 0x00000000000b4bf2; movq [rax+rdx-0x10], mm0; rep ret; 
0x000000000b4dae: loopne 0x00000000000b4d40; mov rax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x000000000b4ea4: loopne 0x00000000000b4f03; pop r12; ret; 
0x000000000b4ff3: loopne 0x00000000000b5050; pop rbp; pop r12; ret; 
0x000000000b5104: loopne 0x00000000000b5163; pop r12; pop r13; pop r14; ret; 
0x000000000b9617: loopne 0x00000000000b9618; jmp qword ptr [rsi+0xf]; 
0x000000000be117: loopne 0x00000000000be118; jmp qword ptr [rsi+0xf]; 
0x000000000c1df2: loopne 0x00000000000c1e00; add [rax-0x39], cl; ret; 
0x000000000c68c7: loopne 0x00000000000c6924; pop r12; ret; 
0x000000000c68f7: loopne 0x00000000000c6954; pop r12; ret; 
0x000000000c6909: loopne 0x00000000000c6966; pop r12; ret; 
0x000000000c7a4f: loopne 0x00000000000c7a92; pop rsp; pop r13; pop r14; ret; 
0x000000000c7a38: loopne 0x00000000000c7a97; pop r12; pop r13; pop r14; ret; 
0x000000000d278b: loopne 0x00000000000d27e8; pop rbp; pop r12; ret; 
0x000000000d27b7: loopne 0x00000000000d27fa; pop rsp; ret; 
0x000000000d2827: loopne 0x00000000000d2886; pop r12; pop r13; pop r14; ret; 
0x000000000d28c7: loopne 0x00000000000d290a; pop rsp; pop r13; pop r14; ret; 
0x000000000d2b7c: loopne 0x00000000000d2bd9; pop rbp; pop r12; ret; 
0x000000000d2e19: loopne 0x00000000000d2e76; pop rbp; pop r12; ret; 
0x000000000d2e3a: loopne 0x00000000000d2e97; pop rbp; pop r12; ret; 
0x000000000d3d2e: loopne 0x00000000000d3d8b; pop rbp; pop r12; ret; 
0x000000000d3d5c: loopne 0x00000000000d3db9; pop rbp; pop r12; ret; 
0x000000000d3e2d: loopne 0x00000000000d3e8a; pop rbp; pop r12; ret; 
0x000000000d3e61: loopne 0x00000000000d3ebe; pop rbp; pop r12; ret; 
0x000000000d4584: loopne 0x00000000000d45e1; pop rbp; pop r12; ret; 
0x000000000d45cd: loopne 0x00000000000d462a; pop rbp; pop r12; ret; 
0x000000000d58cd: loopne 0x00000000000d592a; pop rbp; pop r12; ret; 
0x000000000d5901: loopne 0x00000000000d595e; pop rbp; pop r12; ret; 
0x000000000d5d94: loopne 0x00000000000d5df1; pop rbp; pop r12; ret; 
0x000000000d5ddd: loopne 0x00000000000d5e3a; pop rbp; pop r12; ret; 
0x000000000d6ad5: loopne 0x00000000000d6b32; pop rbp; pop r12; pop r13; ret; 
0x000000000d6f01: loopne 0x00000000000d6f05; add [rax], al; mov eax, 0x111; syscall; 
0x000000000d704b: loopne 0x00000000000d7059; pop r14; ret; 
0x000000000e0449: loopne 0x00000000000e04a6; pop rbp; pop r12; pop r13; ret; 
0x000000000e2e01: loopne 0x00000000000e2e60; pop r12; pop r13; pop r14; ret; 
0x000000000e5ed6: loopne 0x00000000000e5f35; pop r12; ret; 
0x000000000e5f5b: loopne 0x00000000000e5fba; pop r12; ret; 
0x000000000e5f6c: loopne 0x00000000000e5fcb; pop r12; ret; 
0x000000000edb41: loopne 0x00000000000edba0; pop r12; pop r13; pop r14; ret; 
0x000000000edb92: loopne 0x00000000000edbd5; pop rsp; pop r13; pop r14; ret; 
0x000000000edc0c: loopne 0x00000000000edc69; pop rbp; pop r12; pop r13; ret; 
0x000000000f11e5: loopne 0x00000000000f11f6; ret; 
0x000000000f8098: loopne 0x00000000000f8092; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000f98b4: loopne 0x00000000000f98f7; pop rsp; pop r13; ret; 
0x000000000f98db: loopne 0x00000000000f991e; pop rsp; pop r13; ret; 
0x000000000facb3: loopne 0x00000000000fad12; pop r12; pop r13; ret; 
0x000000000facda: loopne 0x00000000000fad39; pop r12; pop r13; ret; 
0x000000000fbf38: loopne 0x00000000000fbf3e; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x000000000fc56f: loopne 0x00000000000fc5cc; pop rbp; pop r12; pop r13; ret; 
0x000000000fcd8e: loopne 0x00000000000fce09; sbb eax, 0xffff03e9; jmp qword ptr [rsi+0x2e]; 
0x000000000fd496: loopne 0x00000000000fd4f5; pop r12; pop r13; pop r14; ret; 
0x000000000fd66c: loopne 0x00000000000fd6cb; pop r12; pop r13; pop r14; ret; 
0x000000000fed14: loopne 0x00000000000fed24; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fed54: loopne 0x00000000000fed64; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fed84: loopne 0x00000000000fed94; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fedf5: loopne 0x00000000000fee38; pop rsp; ret; 
0x000000000fee27: loopne 0x00000000000fee72; add esp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000fee2f: loopne 0x00000000000fee72; pop rsp; ret; 
0x000000000fee4b: loopne 0x00000000000fee8e; pop rsp; ret; 
0x000000000fee9c: loopne 0x00000000000feedf; pop rsp; ret; 
0x000000000ff191: loopne 0x00000000000ff1ee; pop rbp; pop r12; ret; 
0x000000000ff1e5: loopne 0x00000000000ff242; pop rbp; pop r12; ret; 
0x000000000ff213: loopne 0x00000000000ff256; pop rsp; ret; 
0x0000000010048e: loopne 0x00000000001004d1; pop rsp; ret; 
0x000000001005ee: loopne 0x00000000001005e0; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010060e: loopne 0x0000000000100600; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010070b: loopne 0x0000000000100768; pop rbp; pop r12; ret; 
0x000000001007d0: loopne 0x000000000010082d; pop r12; ret; 
0x000000001007e3: loopne 0x0000000000100840; pop r12; ret; 
0x0000000010081c: loopne 0x0000000000100879; pop r12; ret; 
0x0000000010114e: loopne 0x00000000001011ad; pop r12; pop r13; pop r14; ret; 
0x0000000010131e: loopne 0x0000000000101310; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001018ee: loopne 0x000000000010194b; pop rbp; pop r12; ret; 
0x00000000101e7a: loopne 0x0000000000101ed7; pop r12; pop r13; pop rbp; ret; 
0x00000000102784: loopne 0x00000000001027be; sldt [rbx+0x337f01f8]; pop rbp; ret; 
0x0000000010281e: loopne 0x000000000010287b; pop r12; ret; 
0x00000000102852: loopne 0x00000000001028af; pop r12; ret; 
0x000000001028f3: loopne 0x0000000000102950; pop rbp; pop r12; ret; 
0x00000000102de6: loopne 0x0000000000102e29; pop rsp; ret; 
0x0000000010332c: loopne 0x0000000000103388; pop r12; ret; 
0x00000000103b3a: loopne 0x0000000000103b99; pop r12; pop r13; jmp rax; 
0x00000000103bca: loopne 0x0000000000103c29; pop r12; pop r13; jmp rax; 
0x00000000103ca9: loopne 0x0000000000103ca9; mov rsi, [rax+0x8]; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x00000000104f05: loopne 0x0000000000104f64; pop r12; pop r13; pop r14; ret; 
0x0000000010509b: loopne 0x00000000001050f8; pop rbp; pop r12; pop r13; ret; 
0x000000001050b5: loopne 0x0000000000105114; pop r12; pop r13; ret; 
0x00000000108a9c: loopne 0x0000000000108abe; and rax, rdi; or rax, rsi; ret; 
0x00000000108b5f: loopne 0x0000000000108ba2; pop rsp; ret; 
0x00000000109740: loopne 0x0000000000109745; ret; 
0x000000001097e5: loopne 0x000000000010982f; mov [rsp-0x18], ecx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x0000000010c77e: loopne 0x000000000010c781; ret; 
0x0000000010c79a: loopne 0x000000000010c7a4; ret; 
0x0000000010c80e: loopne 0x000000000010c811; ret; 
0x0000000010c89e: loopne 0x000000000010c8a1; ret; 
0x0000000010c8ba: loopne 0x000000000010c8bd; ret; 
0x0000000010c92e: loopne 0x000000000010c931; ret; 
0x0000000010c94a: loopne 0x000000000010c94e; ret; 
0x0000000010c9bd: loopne 0x000000000010c9c0; mov eax, r8d; ret; 
0x0000000010ca4e: loopne 0x000000000010ca51; ret; 
0x0000000010cade: loopne 0x000000000010cae1; ret; 
0x0000000010cb6e: loopne 0x000000000010cb71; ret; 
0x0000000010cbfe: loopne 0x000000000010cc01; ret; 
0x0000000010cc1a: loopne 0x000000000010cc20; ret; 
0x0000000010cc8e: loopne 0x000000000010cc91; ret; 
0x0000000010cd19: loopne 0x000000000010cd1c; ret; 
0x0000000010cdae: loopne 0x000000000010cdb1; ret; 
0x0000000010cf8a: loopne 0x000000000010cf8d; ret; 
0x0000000010d0d0: loopne 0x000000000010d0d3; ret; 
0x0000000010d0e3: loopne 0x000000000010d0ed; ret; 
0x0000000010d150: loopne 0x000000000010d153; ret; 
0x0000000010d1d0: loopne 0x000000000010d1d3; ret; 
0x0000000010d1e3: loopne 0x000000000010d1e6; ret; 
0x0000000010d250: loopne 0x000000000010d253; ret; 
0x0000000010d263: loopne 0x000000000010d267; ret; 
0x0000000010d2cf: loopne 0x000000000010d2d2; mov eax, r8d; ret; 
0x0000000010d350: loopne 0x000000000010d353; ret; 
0x0000000010d3d0: loopne 0x000000000010d3d3; ret; 
0x0000000010d450: loopne 0x000000000010d453; ret; 
0x0000000010d4d0: loopne 0x000000000010d4d3; ret; 
0x0000000010d4e3: loopne 0x000000000010d4e9; ret; 
0x0000000010d550: loopne 0x000000000010d553; ret; 
0x0000000010d5cd: loopne 0x000000000010d5d0; ret; 
0x0000000010d640: loopne 0x000000000010d643; ret; 
0x0000000010d7ea: loopne 0x000000000010d7ed; ret; 
0x0000000010d91d: loopne 0x000000000010d97a; pop rbp; pop r12; ret; 
0x0000000010d951: loopne 0x000000000010d9ae; pop rbp; pop r12; ret; 
0x0000000010e474: loopne 0x000000000010e4d1; pop rbp; pop r12; ret; 
0x0000000010e4bd: loopne 0x000000000010e51a; pop rbp; pop r12; ret; 
0x0000000010ed64: loopne 0x000000000010edc3; pop r12; pop r13; ret; 
0x0000000010eeed: loopne 0x000000000010ef4a; pop rbp; pop r12; ret; 
0x0000000010ef21: loopne 0x000000000010ef7e; pop rbp; pop r12; ret; 
0x0000000010f814: loopne 0x000000000010f871; pop rbp; pop r12; ret; 
0x0000000010f85d: loopne 0x000000000010f8ba; pop rbp; pop r12; ret; 
0x0000000010ffbc: loopne 0x000000000011001b; pop r12; pop r13; pop r14; ret; 
0x00000000110641: loopne 0x000000000011069e; pop rbp; pop r12; ret; 
0x0000000011065a: loopne 0x00000000001106b7; pop rbp; pop r12; ret; 
0x000000001113e5: loopne 0x0000000000111442; pop r12; ret; 
0x00000000111702: loopne 0x0000000000111761; pop r12; pop r13; pop r14; ret; 
0x00000000114ff3: loopne 0x0000000000114feb; ret; 
0x000000001155cb: loopne 0x00000000001155ce; ret; 
0x00000000116f2f: loopne 0x0000000000116f8c; pop rbp; pop r12; ret; 
0x00000000116f57: loopne 0x0000000000116f9a; pop rsp; ret; 
0x00000000116f7f: loopne 0x0000000000116fc2; pop rsp; ret; 
0x000000001170b7: loopne 0x00000000001170b2; jmp qword ptr [rsi+0xf]; 
0x00000000117e2a: loopne 0x0000000000117e86; pop r12; ret; 
0x0000000011944a: loopne 0x00000000001194a7; pop rbp; pop r12; ret; 
0x00000000119471: loopne 0x00000000001194ce; pop rbp; pop r12; ret; 
0x0000000011966d: loopne 0x00000000001196ca; pop rbp; pop r12; ret; 
0x000000001196b5: loopne 0x0000000000119712; pop rbp; pop r12; ret; 
0x00000000119dea: loopne 0x0000000000119e47; pop rbp; pop r12; ret; 
0x00000000119e11: loopne 0x0000000000119e6e; pop rbp; pop r12; ret; 
0x0000000011a00d: loopne 0x000000000011a06a; pop rbp; pop r12; ret; 
0x0000000011a055: loopne 0x000000000011a0b2; pop rbp; pop r12; ret; 
0x0000000011a83d: loopne 0x000000000011a89a; pop rbp; pop r12; ret; 
0x0000000011a871: loopne 0x000000000011a8ce; pop rbp; pop r12; ret; 
0x0000000011aa5a: loopne 0x000000000011aab7; pop rbp; pop r12; ret; 
0x0000000011aa9d: loopne 0x000000000011aafa; pop rbp; pop r12; ret; 
0x0000000011b83d: loopne 0x000000000011b89a; pop rbp; pop r12; ret; 
0x0000000011b871: loopne 0x000000000011b8ce; pop rbp; pop r12; ret; 
0x0000000011ba5a: loopne 0x000000000011bab7; pop rbp; pop r12; ret; 
0x0000000011ba9d: loopne 0x000000000011bafa; pop rbp; pop r12; ret; 
0x0000000011bb0d: loopne 0x000000000011bb6a; pop rbp; pop r12; ret; 
0x0000000011bb41: loopne 0x000000000011bb9e; pop rbp; pop r12; ret; 
0x0000000011bfea: loopne 0x000000000011c047; pop rbp; pop r12; ret; 
0x0000000011c02d: loopne 0x000000000011c08a; pop rbp; pop r12; ret; 
0x0000000011c964: loopne 0x000000000011c9c0; pop r12; ret; 
0x0000000011cabc: loopne 0x000000000011cb19; pop rbp; pop r12; pop r13; ret; 
0x0000000011e7d3: loopne 0x000000000011e7da; pop r12; pop r13; pop r14; ret; 
0x0000000011f790: loopne 0x000000000011f7ed; pop r12; ret; 
0x0000000011f7da: loopne 0x000000000011f837; pop r12; ret; 
0x0000000011f8ec: loopne 0x000000000011f8b7; add al, [rax]; mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000011fe94: loopne 0x000000000011fef1; pop rbp; pop r12; ret; 
0x0000000011fedd: loopne 0x000000000011ff3a; pop rbp; pop r12; ret; 
0x0000000011ff4d: loopne 0x000000000011ffaa; pop rbp; pop r12; ret; 
0x0000000011ff81: loopne 0x000000000011ffde; pop rbp; pop r12; ret; 
0x00000000122764: loopne 0x000000000012275e; add eax, 0x10; ret; 
0x0000000012271f: loopne 0x0000000000122762; pop rsp; ret; 
0x0000000012270d: loopne 0x000000000012276c; pop r12; ret; 
0x0000000012348b: loopne 0x0000000000123490; shr rax, 0x4; and eax, 0x7f; ret; 
0x00000000123492: loopne 0x0000000000123513; ret; 
0x000000001237cf: loopne 0x000000000012382c; pop rbp; pop r12; ret; 
0x000000001237ed: loopne 0x000000000012384a; pop rbp; pop r12; ret; 
0x00000000125836: loopne 0x0000000000125861; ret; 
0x00000000128707: loopne 0x0000000000128766; pop r12; pop r13; pop r14; ret; 
0x00000000128a35: loopne 0x0000000000128a7b; mov eax, edx; ret; 
0x0000000012ac43: loopne 0x000000000012aca0; pop rbp; pop r12; pop r13; ret; 
0x0000000012ac62: loopne 0x000000000012acbf; pop rbp; pop r12; pop r13; ret; 
0x0000000012b315: loopne 0x000000000012b38f; cmp al, 0x28; jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x0000000012e0f4: loopne 0x000000000012e153; pop r12; pop r13; pop r14; ret; 
0x0000000012e185: loopne 0x000000000012e1e4; pop r12; pop r13; pop r14; ret; 
0x0000000012e687: loopne 0x000000000012e6e4; pop rbp; pop r12; pop r13; ret; 
0x0000000012e70a: loopne 0x000000000012e769; pop r12; pop r13; ret; 
0x0000000012e7d0: loopne 0x000000000012e82f; pop r12; pop r13; ret; 
0x0000000012f3cd: loopne 0x000000000012f42a; pop rbp; pop r12; pop r13; ret; 
0x0000000012f4a0: loopne 0x000000000012f4fd; pop rbp; pop r12; pop r13; ret; 
0x0000000012f545: loopne 0x000000000012f5a4; pop r12; ret; 
0x0000000012f70f: loopne 0x000000000012f76e; pop r12; pop r13; ret; 
0x000000001315ba: loopne 0x0000000000131617; pop rbp; pop r12; pop r13; ret; 
0x00000000131cae: loopne 0x0000000000131cf1; pop rsp; ret; 
0x000000001322dc: loopne 0x000000000013227f; or al, 0x0; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000001324fd: loopne 0x000000000013255a; pop rbp; pop r12; pop r13; ret; 
0x00000000132517: loopne 0x0000000000132574; pop rbp; pop r12; pop r13; ret; 
0x00000000132d4c: loopne 0x0000000000132d45; rol byte ptr [rcx-0x80], 0x1; jmp qword ptr [rcx]; 
0x0000000013389b: loopne 0x00000000001338f8; pop rbp; pop r12; ret; 
0x00000000133ce2: loopne 0x0000000000133d3f; pop rbp; pop r12; ret; 
0x0000000013962b: loopne 0x0000000000139688; pop r12; ret; 
0x00000000139c2b: loopne 0x0000000000139c75; mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000013a76c: loopne 0x000000000013a76a; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000013af55: loopne 0x000000000013af98; pop rsp; ret; 
0x0000000013cf14: loopne 0x000000000013cf71; pop rbp; pop r12; pop r13; ret; 
0x0000000013cf4f: loopne 0x000000000013cfac; pop rbp; pop r12; pop r13; ret; 
0x0000000013e20e: loopne 0x000000000013e26b; pop rbp; pop r12; pop r13; ret; 
0x0000000013e7ed: loopne 0x000000000013e84c; pop r12; pop r13; pop r14; ret; 
0x0000000013e93b: loopne 0x000000000013e99a; pop r12; ret; 
0x0000000014031d: loopne 0x0000000000140385; nop; xor eax, eax; ret; 
0x00000000141ec9: loopne 0x0000000000141ecd; sub eax, 0x1; add rsp, 0x18; ret; 
0x0000000014234a: loopne 0x00000000001423a9; pop r12; ret; 
0x00000000142364: loopne 0x00000000001423c3; pop r12; ret; 
0x00000000142817: loopne 0x0000000000142819; add [rax], al; add [rax-0x77], cl; ret; 
0x0000000014339d: loopne 0x00000000001433fc; pop r12; pop r13; pop r14; ret; 
0x000000001434cb: loopne 0x000000000014352a; pop r12; ret; 
0x000000001435c6: loopne 0x0000000000143623; pop rbp; pop r12; pop r13; ret; 
0x000000001437b3: loopne 0x0000000000143812; pop r12; pop r13; pop r14; ret; 
0x0000000014755b: loopne 0x00000000001475b8; pop rbp; pop r12; ret; 
0x000000001475b9: loopne 0x0000000000147616; pop rbp; pop r12; ret; 
0x0000000014916f: loopne 0x00000000001491b2; pop rsp; pop r13; pop r14; ret; 
0x0000000014919c: loopne 0x00000000001491fb; pop r12; pop r13; pop r14; ret; 
0x00000000149b66: loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b86: loopne 0x0000000000149bc9; pop rsp; ret; 
0x0000000014a058: loopne 0x000000000014a09b; pop rsp; ret; 
0x0000000014a092: loopne 0x000000000014a0d5; pop rsp; ret; 
0x0000000014a0d0: loopne 0x000000000014a113; pop rsp; ret; 
0x0000000014a0fe: loopne 0x000000000014a141; pop rsp; ret; 
0x0000000014a265: loopne 0x000000000014a2c4; pop r12; ret; 
0x0000000014a2f8: loopne 0x000000000014a33b; pop rsp; ret; 
0x0000000014a332: loopne 0x000000000014a375; pop rsp; ret; 
0x0000000014aa6e: loopne 0x000000000014aacd; pop r12; pop r13; pop r14; ret; 
0x0000000014b0b6: loopne 0x000000000014b115; pop r12; pop r13; ret; 
0x0000000014b0ee: loopne 0x000000000014b14d; pop r12; pop r13; ret; 
0x0000000014b320: loopne 0x000000000014b363; pop rsp; pop r13; pop r14; ret; 
0x0000000014b3a5: loopne 0x000000000014b404; pop r12; pop r13; pop r14; ret; 
0x0000000014b6ac: loopne 0x000000000014b70b; pop r12; ret; 
0x0000000014b6c5: loopne 0x000000000014b724; pop r12; ret; 
0x0000000014b7c6: loopne 0x000000000014b825; pop r12; ret; 
0x0000000014bbd3: loopne 0x000000000014bc30; pop r12; ret; 
0x0000000014bc20: loopne 0x000000000014bc7d; pop r12; ret; 
0x0000000014ce05: loopne 0x000000000014ce48; pop rsp; ret; 
0x0000000014ce3b: loopne 0x000000000014ce7e; pop rsp; ret; 
0x0000000014cf88: loopne 0x000000000014cf8f; lea rax, [rax+rdx+0x4]; ret; 
0x00000000151f41: loopne 0x0000000000151f52; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152091: loopne 0x00000000001520a2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001521e1: loopne 0x00000000001521f2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152331: loopne 0x0000000000152342; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152481: loopne 0x0000000000152492; sub [rdi-0x10], ebp; jmp r9; 
0x000000001525d1: loopne 0x00000000001525e2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152721: loopne 0x0000000000152732; sub [rdi-0x10], ebp; jmp r9; 
0x0000000015286f: loopne 0x0000000000152880; sub [rdi-0x10], ebp; jmp r9; 
0x000000001529c1: loopne 0x00000000001529d2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152b11: loopne 0x0000000000152b22; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152c61: loopne 0x0000000000152c72; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152db1: loopne 0x0000000000152dc2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000152f01: loopne 0x0000000000152f12; sub [rdi-0x10], ebp; jmp r9; 
0x00000000153051: loopne 0x0000000000153062; sub [rdi-0x10], ebp; jmp r9; 
0x000000001531a1: loopne 0x00000000001531b2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001532ae: loopne 0x00000000001532fd; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532ec: loopne 0x000000000015333b; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153324: loopne 0x0000000000153373; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x00000000153362: loopne 0x00000000001533b1; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x0000000015339a: loopne 0x00000000001533e9; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x000000001533c2: loopne 0x0000000000153411; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000154911: loopne 0x0000000000154922; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154a61: loopne 0x0000000000154a72; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154bb1: loopne 0x0000000000154bc2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154d01: loopne 0x0000000000154d12; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154e51: loopne 0x0000000000154e62; sub [rdi-0x10], ebp; jmp r9; 
0x00000000154fa1: loopne 0x0000000000154fb2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001550f1: loopne 0x0000000000155102; sub [rdi-0x10], ebp; jmp r9; 
0x0000000015523f: loopne 0x0000000000155250; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155391: loopne 0x00000000001553a2; sub [rdi-0x10], ebp; jmp r9; 
0x000000001554e1: loopne 0x00000000001554f2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155631: loopne 0x0000000000155642; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155781: loopne 0x0000000000155792; sub [rdi-0x10], ebp; jmp r9; 
0x000000001558d1: loopne 0x00000000001558e2; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155a21: loopne 0x0000000000155a32; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155b71: loopne 0x0000000000155b82; sub [rdi-0x10], ebp; jmp r9; 
0x00000000155c7e: loopne 0x0000000000155ccd; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x00000000155cbc: loopne 0x0000000000155d0b; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000155cf4: loopne 0x0000000000155d43; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x00000000155d32: loopne 0x0000000000155d81; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000155d6a: loopne 0x0000000000155db9; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000155d92: loopne 0x0000000000155de1; mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000158b0f: loopne 0x0000000000158b05; movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x0000000015b62f: loopne 0x000000000015b625; movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x0000000016860c: loopne 0x000000000016860f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000170a2f: loopne 0x0000000000170a5a; enter 0xf8c5, 0x77; ret; 
0x00000000175575: loopne 0x00000000001755b9; mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x00000000176e55: loopne 0x0000000000176ea1; lea eax, [rdi+rax]; vzeroupper; ret; 
0x0000000017991c: loopne 0x0000000000179920; add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b45c: loopne 0x000000000017b446; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017c0d3: loopne 0x000000000017c098; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x0000000017f556: loopne 0x000000000017f567; add esi, edx; je short 0x000000000017f560; vzeroall; ret; 
0x00000000180056: loopne 0x0000000000180067; add esi, edx; je short 0x0000000000180060; vzeroall; ret; 
0x000000001841f8: loopne 0x0000000000184209; add esi, edx; je short 0x0000000000184202; vzeroall; ret; 
0x0000000018554d: loopne 0x000000000018555e; add esi, edx; je short 0x0000000000185557; vzeroall; ret; 
0x0000000018909c: loopne 0x0000000000189101; mov bl, 0x5d; and [rdi], bh; ret; 
0x000000001899dd: loopne 0x00000000001899ff; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000018a799: loopne 0x000000000018a7fe; mov bl, 0x5d; and [rdi], bh; ret; 
0x0000000018b7c6: loopne 0x000000000018b7e8; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000018bafd: loopne 0x000000000018bac2; nop; xor eax, eax; ret; 
0x0000000018bfbc: loopne 0x000000000018c021; mov bl, 0x5d; and [rdi], bl; ret; 
0x0000000018c460: loopne 0x000000000018c46a; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018c739: loopne 0x000000000018c79e; mov bl, 0x5d; and [rdi], bl; ret; 
0x0000000018ccf6: loopne 0x000000000018cd00; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018d07d: loopne 0x000000000018d042; nop; xor eax, eax; ret; 
0x0000000018d9cb: loopne 0x000000000018d9cd; add [rax], al; ret; 
0x0000000018de6e: loopne 0x000000000018de70; add [rax], al; ret; 
0x00000000192419: loopne 0x000000000019245c; pop rsp; ret; 
0x00000000192498: loopne 0x00000000001924db; pop rsp; ret; 
0x00000000192a3f: loopne 0x0000000000192a9c; pop rbp; pop r12; ret; 
0x00000000193391: loopne 0x00000000001933ee; pop r12; ret; 
0x000000001933b2: loopne 0x000000000019340f; pop r12; ret; 
0x00000000101aaf: ltr [r11+0x5d]; pop r12; pop r13; ret; 
0x00000000102d54: ltr [rbp+0x41]; pop rsp; pop r13; ret; 
0x00000000101ab0: ltr [rbx+0x5d]; pop r12; pop r13; ret; 
0x0000000010326a: ltr [rcx+0x5d]; pop r12; pop r13; ret; 
0x000000000861f6: mov [0x2f8], edi; ret; 
0x000000000861f5: mov [0x2f8], rdi; ret; 
0x000000000861d6: mov [0x300], eax; ret; 
0x000000000861bc: mov [0x300], edi; ret; 
0x000000000861d5: mov [0x300], rax; ret; 
0x000000000861bb: mov [0x300], rdi; ret; 
0x0000000005beef: mov [0x358d4cc031450003], al; movsb [rdi], [rsi]; jge short 0x000000000005bf10; add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x000000000fa379: mov [0x410c247c8bfff8bd], eax; mov eax, eax; mov eax, 0x3; syscall; 
0x0000000009c0aa: mov [0x43b158d48000095], al; or al, 0x0; cmovne rax, rdx; ret; 
0x00000000102ba4: mov [0x48018964d8f7000e], al; or eax, 0xffffffff; ret; 
0x00000000102aa4: mov [0x48018964d8f7000e], eax; or eax, 0xffffffff; ret; 
0x000000000918c9: mov [0x4864001f0fffffff], eax; mov eax, [0x10]; ret; 
0x0000000014eb68: mov [0x48c318c48348fffa], al; mov eax, [rip+0x9e299]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000037f79: mov [0x48d8048b48001b49], eax; test eax, eax; je short 0x0000000000037f88; call rax; 
0x00000000064cd5: mov [0x48fffffcfa830fc2], eax; lea edx, [rip+0x143028]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000037e79: mov [0x4aec1c894b001b4a], eax; mov eax, [rax+rbp*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x0000000016d419: mov [0x668a0c634f0004c7], eax; pcmpeqb mm0, mm1; lea r10, [r10+r9]; jmp r10; 
0x000000000b4b6a: mov [0x7720fa8348000000], al; or al, 0xf3; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x0000000010c014: mov [0x8318408b48000e], al; add ebx, eax; nop; ret; 
0x0000000016854a: mov [0x8348013880000002], al; fdivr st, st(7); ret; 
0x0000000010c004: mov [0x836618408b48000e], al; add [rcx], al; ret; 
0x000000001506ae: mov [0x840fc9854d000012], al; cdq; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000009bc99: mov [0x885c058d48000187], eax; add [rax], eax; cmove rax, rdx; ret; 
0x000000000916a2: mov [0x89445d5b00000638], eax; loopne 0x00000000000916ee; pop rsp; ret; 
0x000000000be40c: mov [0x8944ffffffffb841], eax; rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x0000000003926a: mov [0x8948e7894cffff2e], al; ret; 
0x000000000afe4b: mov [0x8d49930c6349000f], al; or al, 0xb; jmp rcx; 
0x000000000fe237: mov [0x90c481481d72d1], eax; add [rax], al; pop rbx; ret; 
0x00000000081dbf: mov [0x95158d48000000d8], eax; ret far; 
0x00000000086281: mov [0x972], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b1: mov [0x972], al; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x0000000005b66a: mov [0xd8c48148000015], al; add [rax], al; ret; 
0x0000000007a49a: mov [0xd8c48148fffea0], al; add [rax], al; ret; 
0x000000001048ea: mov [0xd8c48148fffffd], al; add [rax], al; ret; 
0x0000000010b74d: mov [0xe78944ce894c9066], al; mov eax, ebx; syscall; 
0x000000000ca772: mov [0xf00000826830fd1], eax; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000113e1a: mov [0xf95be8388b000d91], al; bnd jmp qword ptr [rsi+0x66]; 
0x00000000116daa: mov [0xfffaece850fff371], al; jmp qword ptr [rsi+0x2e]; 
0x0000000013213e: mov [0xfffdb8858b48ffef], al; jmp qword ptr [rax+rcx*2+0x33]; 
0x0000000008f652: mov [0xffff0845e8001258], al; nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000014983d: mov [0xffff65e924048b49], al; jmp qword ptr [rsi+0xf]; 
0x00000000123014: mov [r10-0x1], r8b; mov [rax], r10; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x00000000093718: mov [r11+0x458901c0], r8b; mov [rax-0x7d], cl; ret; 
0x00000000127aec: mov [r11], eax; mov eax, 0x1; ret; 
0x00000000044442: mov [r11], ebx; pop rbx; pop rbp; ret; 
0x000000000a1241: mov [r11], rdx; mov rax, r12; pop r12; ret; 
0x000000000999cd: mov [r12+0x24], eax; add rsp, 0x50; mov rax, r12; pop r12; ret; 
0x0000000013f14a: mov [r12+0x60], eax; mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000037e7d: mov [r12+r13*8], rbx; mov rax, [rax+r13*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x0000000009d6c1: mov [r12], r14; pop r12; pop r13; pop r14; ret; 
0x000000000c7b50: mov [r12], rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000192880: mov [r13+rbx*8], rdx; test rax, rax; je short 0x000000000019288c; call rax; 
0x000000001233a1: mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x0000000007a1dc: mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret; 
0x000000000fea99: mov [r8+0x34], eax; mov [r8+0x38], eax; mov eax, r9d; ret; 
0x000000000fea9d: mov [r8+0x38], eax; mov eax, r9d; ret; 
0x0000000013c4df: mov [r8+0x8], rax; ret; 
0x0000000013dd20: mov [r8+0xa8], eax; mov eax, 0x1; ret; 
0x0000000013dd7d: mov [r8+0xb4], eax; mov eax, 0x1; ret; 
0x0000000013dd4d: mov [r8+0xb8], eax; mov eax, 0x1; ret; 
0x0000000008b372: mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x0000000007fd3c: mov [r8-0x75], r9b; or cl, [rax-0x7d]; ret; 
0x0000000009371e: mov [r8-0x7d], r9b; ret; 
0x00000000140362: mov [r8], eax; mov eax, 0x1; ret; 
0x000000001232b3: mov [r8], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret; 
0x00000000123247: mov [r8], edx; mov [r9], rax; mov eax, ecx; ret; 
0x00000000044613: mov [r8], edx; mov [rsi], edx; ret; 
0x0000000005217a: mov [r8], rax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000140397: mov [r8], rax; mov eax, 0x1; ret; 
0x0000000010bd14: mov [r8], rax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc94: mov [r8], rax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x000000000a11da: mov [r8], rax; mov rax, r9; ret; 
0x000000001229be: mov [r8], rdi; xor eax, eax; ret; 
0x00000000087833: mov [r8], rdx; ret; 
0x0000000013c4dc: mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x0000000009a860: mov [r8], rsi; mov rax, rdi; ret; 
0x0000000017ba35: mov [r9-0x2], cx; ret; 
0x0000000017ba36: mov [r9-0x2], ecx; ret; 
0x0000000017ba21: mov [r9-0x4], ecx; ret; 
0x0000000017ba10: mov [r9-0x8], rcx; ret; 
0x000000001232f0: mov [r9], r10; ret; 
0x0000000012324a: mov [r9], rax; mov eax, ecx; ret; 
0x0000000007b8d1: mov [rax+0x10], ecx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007b8a1: mov [rax+0x10], edi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007aae9: mov [rax+0x10], edx; mov [rax+0x40], rcx; ret; 
0x0000000007ab26: mov [rax+0x10], esi; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007b8d0: mov [rax+0x10], rcx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007b8a0: mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007aae8: mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret; 
0x0000000007ab25: mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007b1e8: mov [rax+0x18], edx; xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x0000000007b1e7: mov [rax+0x18], rdx; xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x00000000073d7e: mov [rax+0x1], cl; clc; jmp rax; 
0x000000001233a2: mov [rax+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000095397: mov [rax+0x20], edx; add rsp, 0x8; ret; 
0x0000000007fbbc: mov [rax+0x20], edx; pop rbx; ret; 
0x00000000095396: mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000007fbbb: mov [rax+0x20], rdx; pop rbx; ret; 
0x0000000007a1dd: mov [rax+0x28], edx; mov [rax], dil; mov eax, r9d; ret; 
0x000000000a156d: mov [rax+0x2], dl; ret; 
0x000000000d6ef8: mov [rax+0x2d8], edi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000d6ef7: mov [rax+0x2d8], rdi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000d6eff: mov [rax+0x2e0], edi; mov eax, 0x111; syscall; 
0x000000000d6efe: mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000fea9a: mov [rax+0x34], eax; mov [r8+0x38], eax; mov eax, r9d; ret; 
0x000000000fea9e: mov [rax+0x38], eax; mov eax, r9d; ret; 
0x0000000007ab2a: mov [rax+0x40], ecx; mov [rax], rdx; ret; 
0x0000000007aaed: mov [rax+0x40], ecx; ret; 
0x0000000007b8a5: mov [rax+0x40], esi; mov [rax], rdx; xor eax, eax; ret; 
0x0000000007ab29: mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007aaec: mov [rax+0x40], rcx; ret; 
0x0000000007b8a4: mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret; 
0x000000000a158b: mov [rax+0x4], dl; ret; 
0x000000000a15ab: mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a159b: mov [rax+0x4], dx; ret; 
0x000000000a15ac: mov [rax+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a159c: mov [rax+0x4], edx; ret; 
0x0000000013b8ba: mov [rax+0x58], ecx; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x0000000013b8b9: mov [rax+0x58], rcx; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000000a15b4: mov [rax+0x6], dl; ret; 
0x0000000013c4e0: mov [rax+0x8], eax; ret; 
0x0000000005c2ab: mov [rax+0x8], ecx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000101361: mov [rax+0x8], edi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x0000000007ab22: mov [rax+0x8], edx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007fbb4: mov [rax+0x8], edx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x000000000c8146: mov [rax+0x8], esi; add rsp, 0x10; pop rbp; ret; 
0x0000000005c2aa: mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x00000000101360: mov [rax+0x8], rdi; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x0000000007ab21: mov [rax+0x8], rdx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x0000000007fbb3: mov [rax+0x8], rdx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x000000000c8145: mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000013dd21: mov [rax+0xa8], eax; mov eax, 0x1; ret; 
0x0000000013dd7e: mov [rax+0xb4], eax; mov eax, 0x1; ret; 
0x0000000013dd4e: mov [rax+0xb8], eax; mov eax, 0x1; ret; 
0x0000000008122c: mov [rax+0xe0], edx; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000008122b: mov [rax+0xe0], rdx; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000008b373: mov [rax+rax+0x8], esi; xor eax, eax; mov [rdi], ecx; ret; 
0x00000000085f53: mov [rax+rax-0x3b7cb800], eax; sub [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x000000000b551d: mov [rax+rax], cl; cmovne rax, rdx; ret; 
0x0000000017231a: mov [rax+rax], eax; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000000b4c39: mov [rax+rdx-0x2], cx; mov [rax], cx; ret; 
0x000000001779e5: mov [rax+rdx-0x2], cx; mov [rax], cx; vzeroupper; ret; 
0x000000000b4c3a: mov [rax+rdx-0x2], ecx; mov [rax], cx; ret; 
0x000000001779e6: mov [rax+rdx-0x2], ecx; mov [rax], cx; vzeroupper; ret; 
0x000000000b4c32: mov [rax+rdx-0x4], ecx; mov [rax], ecx; ret; 
0x000000001779db: mov [rax+rdx-0x4], ecx; mov [rax], ecx; vzeroupper; ret; 
0x000000000b4c2a: mov [rax+rdx-0x8], ecx; mov [rax], rcx; ret; 
0x000000001779d0: mov [rax+rdx-0x8], ecx; mov [rax], rcx; vzeroupper; ret; 
0x000000000b4c29: mov [rax+rdx-0x8], rcx; mov [rax], rcx; ret; 
0x000000001779cf: mov [rax+rdx-0x8], rcx; mov [rax], rcx; vzeroupper; ret; 
0x000000001457b3: mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000073cfb: mov [rax-0x73], cl; or eax, 0xfffff37a; add rax, rcx; jmp rax; 
0x00000000073c38: mov [rax-0x73], cl; or eax, 0xfffff43d; add rax, rcx; jmp rax; 
0x0000000007fd3d: mov [rax-0x75], cl; or cl, [rax-0x7d]; ret; 
0x0000000009371f: mov [rax-0x7d], cl; ret; 
0x000000000c720f: mov [rax], al; add [rax], al; call rbp; 
0x0000000013dcc1: mov [rax], al; add [rax], al; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x000000000c7204: mov [rax], al; add [rax], al; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x00000000140df8: mov [rax], al; add [rax], al; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x0000000004187b: mov [rax], al; add [rax], al; pop rbp; pop r12; ret; 
0x000000000418dd: mov [rax], al; add [rax], al; ret; 
0x00000000104e28: mov [rax], al; add [rax], al; syscall; 
0x000000000500c9: mov [rax], al; add [rax], al; xor eax, eax; ret; 
0x0000000007a1e1: mov [rax], bh; mov eax, r9d; ret; 
0x0000000005cbdf: mov [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000005cbe0: mov [rax], ch; pop rbx; pop rbp; pop r12; ret; 
0x000000000af062: mov [rax], cl; mov rax, rdi; ret; 
0x000000000b4c26: mov [rax], cl; ret; 
0x000000001779bb: mov [rax], cl; vzeroupper; ret; 
0x000000000b00f0: mov [rax], cs; add [rax], al; ret; 
0x000000000b4c3e: mov [rax], cx; ret; 
0x000000001779ea: mov [rax], cx; vzeroupper; ret; 
0x0000000007a1e0: mov [rax], dil; mov eax, r9d; ret; 
0x000000000a1530: mov [rax], dl; add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; jmp rdx; 
0x000000000a1565: mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000c5753: mov [rax], eax; add [rax], al; ret; 
0x000000000f9691: mov [rax], eax; add [rax], al; syscall; 
0x0000000005217b: mov [rax], eax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000140363: mov [rax], eax; mov eax, 0x1; ret; 
0x0000000010bd15: mov [rax], eax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc95: mov [rax], eax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x000000000a11db: mov [rax], eax; mov rax, r9; ret; 
0x00000000064514: mov [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000014eed5: mov [rax], ebx; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000001232b4: mov [rax], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret; 
0x0000000007956a: mov [rax], ecx; mov eax, [rdx]; ret; 
0x000000000a1578: mov [rax], ecx; ret; 
0x000000001779d5: mov [rax], ecx; vzeroupper; ret; 
0x00000000101341: mov [rax], edi; mov eax, 0xffffffff; ret; 
0x000000000ed56b: mov [rax], edi; mov rax, r8; ret; 
0x0000000006d762: mov [rax], edi; movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b61: mov [rax], edi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000085b5d: mov [rax], edi; pop rbx; ret; 
0x000000001229bf: mov [rax], edi; xor eax, eax; ret; 
0x000000000a145d: mov [rax], edx; add [rcx+0x146348c2], cl; xchg ecx, eax; add rdx, rcx; jmp rdx; 
0x000000000f9152: mov [rax], edx; add rsp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000108f03: mov [rax], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000123019: mov [rax], edx; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x00000000123248: mov [rax], edx; mov [r9], rax; mov eax, ecx; ret; 
0x0000000007aae6: mov [rax], edx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret; 
0x000000000c8143: mov [rax], edx; mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000044614: mov [rax], edx; mov [rsi], edx; ret; 
0x000000000a1566: mov [rax], edx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000a1584: mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000a1594: mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x00000000085b51: mov [rax], edx; pop rbx; ret; 
0x0000000003a2d8: mov [rax], edx; ret; 
0x0000000007b870: mov [rax], edx; xor eax, eax; ret; 
0x000000000ff041: mov [rax], es; add [rax], al; syscall; 
0x0000000013c4dd: mov [rax], esi; mov [r8+0x8], rax; ret; 
0x0000000010bcdc: mov [rax], esi; mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000009a861: mov [rax], esi; mov rax, rdi; ret; 
0x000000000a1559: mov [rax], esi; ret; 
0x00000000123018: mov [rax], r10; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x0000000014eed4: mov [rax], rbx; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x00000000079569: mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000000b4c2e: mov [rax], rcx; ret; 
0x000000001779d4: mov [rax], rcx; vzeroupper; ret; 
0x000000000ed56a: mov [rax], rdi; mov rax, r8; ret; 
0x0000000006d761: mov [rax], rdi; movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b60: mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000085b5c: mov [rax], rdi; pop rbx; ret; 
0x00000000108f02: mov [rax], rdx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007aae5: mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret; 
0x000000000c8142: mov [rax], rdx; mov [rax+0x8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000085b50: mov [rax], rdx; pop rbx; ret; 
0x0000000003a2d7: mov [rax], rdx; ret; 
0x0000000007b86f: mov [rax], rdx; xor eax, eax; ret; 
0x0000000010bcdb: mov [rax], rsi; mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x000000000a1558: mov [rax], si; ret; 
0x000000000e5f44: mov [rbp+0x30], eax; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000e5f43: mov [rbp+0x30], r8d; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000192881: mov [rbp+rbx*8], edx; test rax, rax; je short 0x000000000019288c; call rax; 
0x0000000010403b: mov [rbp-0x40], ecx; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x0000000010403a: mov [rbp-0x40], r9; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x0000000010b6c8: mov [rbp-0x6d0], eax; mov eax, ebx; syscall; 
0x0000000010b6c7: mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x00000000114be6: mov [rbp-0x70], eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000114ef8: mov [rbp-0x70], edx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x00000000114e36: mov [rbp-0x70], edx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x00000000114a8f: mov [rbp-0x70], edx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000114c92: mov [rbp-0x70], edx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x000000001148f4: mov [rbp-0x70], edx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x0000000011513b: mov [rbp-0x70], edx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000115338: mov [rbp-0x70], edx; mov rdx, r12; call rax; 
0x00000000114be5: mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000114ef7: mov [rbp-0x70], rdx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x00000000114e35: mov [rbp-0x70], rdx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x00000000114a8e: mov [rbp-0x70], rdx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000114c91: mov [rbp-0x70], rdx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x000000001148f3: mov [rbp-0x70], rdx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x0000000011513a: mov [rbp-0x70], rdx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000115337: mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x000000001705c6: mov [rbp-0x7d000000], ss; rol byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x00000000114bec: mov [rbp-0x80], eax; call r8; 
0x00000000114a95: mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x000000001148fa: mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x00000000114e3e: mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x0000000006c8dc: mov [rbp-0x890], ecx; mov rdx, rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c8db: mov [rbp-0x890], rcx; mov rdx, rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006cc34: mov [rbp-0x8c8], cl; mov [rbp-0x8d8], r8b; call rax; 
0x0000000006cc33: mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x0000000006cc3b: mov [rbp-0x8d8], al; call rax; 
0x0000000006cc3a: mov [rbp-0x8d8], r8b; call rax; 
0x000000000719cb: mov [rbp-0x8f0], cl; call rax; 
0x000000000719ca: mov [rbp-0x8f0], r9b; call rax; 
0x000000000719c4: mov [rbp-0x920], al; mov [rbp-0x8f0], r9b; call rax; 
0x000000000719c3: mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x000000000574a0: mov [rbp-0xd8], eax; call rax; 
0x0000000005749f: mov [rbp-0xd8], r8; call rax; 
0x00000000144aa4: mov [rbp], eax; add rsp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x0000000004d291: mov [rbp], ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000004d3bf: mov [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000008e51d: mov [rbp], ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000001215a2: mov [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000001215a1: mov [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000144aa3: mov [rbp], rax; add rsp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x0000000004d290: mov [rbp], rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000004d3be: mov [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000d50a3: mov [rbp], rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000127567: mov [rbx+0x10], eax; mov eax, 0x14; add edx, 0x1; syscall; 
0x0000000007fbd1: mov [rbx+0x10], eax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x00000000080d07: mov [rbx+0x10], eax; mov rax, rbx; pop rbx; ret; 
0x00000000085e19: mov [rbx+0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000008118f: mov [rbx+0x10], eax; xor eax, eax; pop rbx; ret; 
0x0000000011092f: mov [rbx+0x10], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000127566: mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x0000000007fbd0: mov [rbx+0x10], rax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x00000000080d06: mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000085e18: mov [rbx+0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000008118e: mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000011092e: mov [rbx+0x10], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000139c2d: mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000085cb1: mov [rbx+0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000085ee5: mov [rbx+0x18], eax; pop rbx; ret; 
0x0000000011097f: mov [rbx+0x18], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000139c2c: mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000085cb0: mov [rbx+0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000085ee4: mov [rbx+0x18], rax; pop rbx; ret; 
0x0000000011097e: mov [rbx+0x18], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000085fa9: mov [rbx+0x20], eax; pop rbx; ret; 
0x000000000fc36b: mov [rbx+0x20], eax; xor eax, eax; pop rbx; ret; 
0x000000000d2a60: mov [rbx+0x20], edx; add rsp, 0xd0; pop rbx; ret; 
0x000000000d2acd: mov [rbx+0x20], edx; movups [rbx], xmm0; add rsp, 0xd0; pop rbx; ret; 
0x00000000085fa8: mov [rbx+0x20], rax; pop rbx; ret; 
0x000000000fc36a: mov [rbx+0x20], rax; xor eax, eax; pop rbx; ret; 
0x000000000d2a5f: mov [rbx+0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000d2acc: mov [rbx+0x20], rdx; movups [rbx], xmm0; add rsp, 0xd0; pop rbx; ret; 
0x000000000fefe5: mov [rbx+0x24], eax; xor eax, eax; add rsp, 0x90; pop rbx; ret; 
0x000000000c848e: mov [rbx+0x28], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000007fbd9: mov [rbx+0x28], eax; pop rbx; ret; 
0x000000000c848d: mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000007fbd8: mov [rbx+0x28], rax; pop rbx; ret; 
0x00000000099f05: mov [rbx+0x30], eax; mov [rbx], rdi; call rcx; 
0x00000000099fb8: mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx; 
0x0000000013f03b: mov [rbx+0x3c], eax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000411a7: mov [rbx+0x40], esi; pop rbx; ret; 
0x00000000041188: mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000093719: mov [rbx+0x458901c0], al; mov [rax-0x7d], cl; ret; 
0x000000001404a2: mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x00000000099fbf: mov [rbx+0x48], edi; call rcx; 
0x00000000099fbe: mov [rbx+0x48], rdi; call rcx; 
0x00000000125a4b: mov [rbx+0x48fffffa], dh; mov edx, [rsp]; mov rdi, r14; call rdx; 
0x000000000f81ef: mov [rbx+0x4], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f8317: mov [rbx+0x4], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000007b7ba: mov [rbx+0x60], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007b7b9: mov [rbx+0x60], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007b0cc: mov [rbx+0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000c9c72: mov [rbx+0x8], dx; add rsp, 0x10; pop rbx; ret; 
0x00000000037237: mov [rbx+0x8], eax; cmp eax, 0xfffffffd; je short 0x0000000000037258; pop rbx; ret; 
0x00000000080d03: mov [rbx+0x8], eax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000008118b: mov [rbx+0x8], eax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000001108df: mov [rbx+0x8], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009a36f: mov [rbx+0x8], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000c7622: mov [rbx+0x8], ecx; add rsp, 0xd0; mov eax, r8d; pop rbx; ret; 
0x000000000c9c73: mov [rbx+0x8], edx; add rsp, 0x10; pop rbx; ret; 
0x00000000041a08: mov [rbx+0x8], edx; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x00000000041a71: mov [rbx+0x8], edx; add rsp, 0x40; pop rbx; ret; 
0x000000000c7656: mov [rbx+0x8], edx; add rsp, 0xd0; pop rbx; ret; 
0x0000000009a265: mov [rbx+0x8], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000080d02: mov [rbx+0x8], rax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000008118a: mov [rbx+0x8], rax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000001108de: mov [rbx+0x8], rbp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009a36e: mov [rbx+0x8], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000c7621: mov [rbx+0x8], rcx; add rsp, 0xd0; mov eax, r8d; pop rbx; ret; 
0x000000000c7655: mov [rbx+0x8], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000009a264: mov [rbx+0x8], rsi; pop rbx; pop rbp; pop r12; ret; 
0x00000000080c9b: mov [rbx+0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000080c9a: mov [rbx+0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000013de47: mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x0000000007db41: mov [rbx+0xc0], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000141994: mov [rbx+0xc], eax; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000080d57: mov [rbx+0xd8], ecx; lea rcx, [rip+0x16e1fc]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000080d56: mov [rbx+0xd8], rcx; lea rcx, [rip+0x16e1fc]; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x0000000010ce16: mov [rbx-0x2d7aeeec], cl; jne short 0x000000000010ce28; mov eax, r8d; ret; 
0x00000000093a83: mov [rbx-0x389bffeb], edx; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000014565c: mov [rbx], al; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000144cbc: mov [rbx], ax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x0000000013b8e9: mov [rbx], eax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000001276fb: mov [rbx], eax; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x00000000127aed: mov [rbx], eax; mov eax, 0x1; ret; 
0x0000000014c6e1: mov [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000083b0c: mov [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000014263a: mov [rbx], eax; pop rbx; ret; 
0x0000000010384c: mov [rbx], eax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000141f1a: mov [rbx], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000141c19: mov [rbx], eax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000000139b6d: mov [rbx], eax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x00000000098b42: mov [rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000d4420: mov [rbx], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000044443: mov [rbx], ebx; pop rbx; pop rbp; ret; 
0x000000000943af: mov [rbx], ecx; add rsp, 0x10; mov eax, r8d; pop rbx; ret; 
0x0000000007b1ed: mov [rbx], ecx; pop rbx; ret; 
0x00000000099f09: mov [rbx], edi; call rcx; 
0x000000001239a6: mov [rbx], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000a1242: mov [rbx], edx; mov rax, r12; pop r12; ret; 
0x00000000043d87: mov [rbx], edx; mov rdi, [rbp+0x8]; call rax; 
0x0000000014d0a0: mov [rbx], edx; pop rbx; ret; 
0x000000000c0d3c: mov [rbx], esi; add rsp, 0x10; pop rbx; ret; 
0x00000000099fbc: mov [rbx], esi; mov [rbx+0x48], rdi; call rcx; 
0x00000000121af3: mov [rbx], esi; mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x000000000773a2: mov [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000012f5a8: mov [rbx], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000012f5a7: mov [rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000121af2: mov [rbx], r14d; mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x0000000013b96b: mov [rbx], rax; add rsp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000145d23: mov [rbx], rax; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x0000000014c6e0: mov [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000142639: mov [rbx], rax; pop rbx; ret; 
0x0000000010384b: mov [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000141f19: mov [rbx], rax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000141c18: mov [rbx], rax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000000139b6c: mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x00000000099f08: mov [rbx], rdi; call rcx; 
0x000000001239a5: mov [rbx], rdx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000043d86: mov [rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x000000000c0d3b: mov [rbx], rsi; add rsp, 0x10; pop rbx; ret; 
0x00000000099fbb: mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx; 
0x00000000092351: mov [rcx+0x20], edx; ret; 
0x00000000092350: mov [rcx+0x20], rdx; ret; 
0x00000000164233: mov [rcx+0x2], dl; ret; 
0x00000000164272: mov [rcx+0x3], edx; ret; 
0x00000000164252: mov [rcx+0x4], dl; ret; 
0x00000000164262: mov [rcx+0x4], dx; ret; 
0x00000000164263: mov [rcx+0x4], edx; ret; 
0x000000001642d4: mov [rcx+0x5], edx; ret; 
0x000000001642d3: mov [rcx+0x5], rdx; ret; 
0x000000001642e4: mov [rcx+0x6], edx; ret; 
0x000000001642e3: mov [rcx+0x6], rdx; ret; 
0x000000001642b3: mov [rcx+0x7], edx; ret; 
0x000000001642f3: mov [rcx+0x7], rdx; ret; 
0x00000000164293: mov [rcx+0x8], dl; ret; 
0x000000001642a3: mov [rcx+0x8], dx; ret; 
0x000000000868f6: mov [rcx+0x8], edx; mov [rdx], rcx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000001642a4: mov [rcx+0x8], edx; ret; 
0x000000000868f5: mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x00000000164303: mov [rcx+0x8], rdx; ret; 
0x0000000013a6c1: mov [rcx+rax-0x3e], cl; jmp rdx; 
0x000000000ed200: mov [rcx+rax-0x3f], cl; jmp rcx; 
0x0000000010b216: mov [rcx+rax-0x40], cl; jmp rax; 
0x0000000017ba37: mov [rcx-0x2], ecx; ret; 
0x0000000017ba22: mov [rcx-0x4], ecx; ret; 
0x0000000009e5a1: mov [rcx-0x7d], cl; ret; 
0x00000000040de2: mov [rcx-0x7f000000], cs; sti; push rax; ret; 
0x0000000017ba11: mov [rcx-0x8], ecx; ret; 
0x00000000128bab: mov [rcx], al; add [rax], al; ret; 
0x00000000164210: mov [rcx], dl; ret; 
0x00000000164230: mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x00000000164220: mov [rcx], dx; ret; 
0x0000000013b51b: mov [rcx], eax; call qword ptr [rbx+0x10]; 
0x0000000012324b: mov [rcx], eax; mov eax, ecx; ret; 
0x0000000004166a: mov [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000079f33: mov [rcx], eax; ret; 
0x0000000007e086: mov [rcx], eax; xor eax, eax; pop rbx; ret; 
0x00000000115d73: mov [rcx], edx; add al, 0x0; cmovne rax, rdx; ret; 
0x00000000164231: mov [rcx], edx; mov [rcx+0x2], dl; ret; 
0x00000000164270: mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x00000000164250: mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x00000000164260: mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x000000001642d1: mov [rcx], edx; mov [rcx+0x5], rdx; ret; 
0x000000001642e1: mov [rcx], edx; mov [rcx+0x6], rdx; ret; 
0x000000001642b1: mov [rcx], edx; mov [rcx+0x7], edx; ret; 
0x000000001642f1: mov [rcx], edx; mov [rcx+0x7], rdx; ret; 
0x00000000164291: mov [rcx], edx; mov [rcx+0x8], dl; ret; 
0x000000001642a1: mov [rcx], edx; mov [rcx+0x8], dx; ret; 
0x000000001642c1: mov [rcx], edx; mov [rcx+0x8], edx; ret; 
0x00000000164301: mov [rcx], edx; mov [rcx+0x8], rdx; ret; 
0x000000001232f1: mov [rcx], edx; ret; 
0x0000000003a1fe: mov [rcx], esi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000007e085: mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000001642d0: mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642e0: mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x000000001642b0: mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x000000001642f0: mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x00000000164290: mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000001642a0: mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000001642c0: mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x00000000164300: mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x00000000164280: mov [rcx], rdx; ret; 
0x0000000003a1fd: mov [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000f8f22: mov [rdi+0x108], eax; xor eax, eax; ret; 
0x000000000b3a6a: mov [rdi+0x10], ch; ret; 
0x000000000b1e4b: mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b065b: mov [rdi+0x10], cl; ret; 
0x000000000b3a7b: mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000b100c: mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e6c: mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af99c: mov [rdi+0x10], cx; ret; 
0x000000000b02ec: mov [rdi+0x10], cx; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b3a9c: mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b0ff8: mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000af988: mov [rdi+0x10], dh; ret; 
0x000000000b02c8: mov [rdi+0x10], dh; sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x0000000010bcb8: mov [rdi+0x10], eax; jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000008360b: mov [rdi+0x10], eax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+0x8], rax; ret; 
0x0000000008678a: mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x000000000b100d: mov [rdi+0x10], ecx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e6d: mov [rdi+0x10], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b104b: mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1eab: mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000b10cd: mov [rdi+0x10], ecx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f2d: mov [rdi+0x10], ecx; lea rax, [rdi+0x18]; ret; 
0x000000000b106b: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000af9db: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000b1ece: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000b06ae: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000b3afe: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000b10ed: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000afa5d: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; ret; 
0x00000000050e5f: mov [rdi+0x10], ecx; ret; 
0x000000000b02ed: mov [rdi+0x10], ecx; sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b032b: mov [rdi+0x10], ecx; sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b03ad: mov [rdi+0x10], ecx; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b3a9d: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b3adb: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000b3b5d: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b1130: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f90: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000afaa0: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; ret; 
0x000000000b3bc0: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000b1f50: mov [rdi+0x10], edx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b0730: mov [rdi+0x10], edx; mov [rdi+0x18], cl; ret; 
0x000000000b3b80: mov [rdi+0x10], edx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000b1111: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f71: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000afa81: mov [rdi+0x10], edx; mov [rdi+0x18], cx; ret; 
0x000000000b3ba1: mov [rdi+0x10], edx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000b1150: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1fb0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000afac0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; ret; 
0x000000000b3be0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000d6780: mov [rdi+0x10], edx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000879f1: mov [rdi+0x10], esi; xor eax, eax; ret; 
0x00000000050e5e: mov [rdi+0x10], r9; ret; 
0x0000000010bcb7: mov [rdi+0x10], rax; jb short 0x000000000010bcd0; mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000008360a: mov [rdi+0x10], rax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+0x8], rax; ret; 
0x000000000b10cc: mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f2c: mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000b10ec: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000afa5c: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa3c: mov [rdi+0x10], rcx; ret; 
0x000000000b03ac: mov [rdi+0x10], rcx; sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b3b5c: mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b112f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f8f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000afa9f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b3bbf: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000b1f4f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b072f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b3b7f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000b1110: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f70: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000afa80: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b3ba0: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000b114f: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1faf: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000afabf: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b3bdf: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000d677f: mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000879f0: mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000f8f0a: mov [rdi+0x10c], esi; xor eax, eax; ret; 
0x000000000b3a80: mov [rdi+0x11], ch; ret; 
0x000000000b3aa2: mov [rdi+0x12], ch; ret; 
0x000000000b3ac0: mov [rdi+0x13], ch; ret; 
0x000000000b3ae0: mov [rdi+0x14], ch; ret; 
0x000000000b106e: mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000af9de: mov [rdi+0x14], dh; ret; 
0x000000000b034e: mov [rdi+0x14], dh; sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1ed1: mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000b06b1: mov [rdi+0x14], dl; ret; 
0x000000000b3b01: mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000b3b06: mov [rdi+0x15], ch; ret; 
0x000000000fec37: mov [rdi+0x16], ax; ret; 
0x000000000b3b22: mov [rdi+0x16], ch; ret; 
0x000000000fec38: mov [rdi+0x16], eax; ret; 
0x000000000b3b42: mov [rdi+0x17], ch; ret; 
0x000000000b1133: mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f93: mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000afaa3: mov [rdi+0x17], ecx; ret; 
0x000000000b0433: mov [rdi+0x17], ecx; sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b0980; ret; 
0x000000000b3bc3: mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000b3b62: mov [rdi+0x18], ch; ret; 
0x000000000b1f53: mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b0733: mov [rdi+0x18], cl; ret; 
0x000000000b3b83: mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000b1114: mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f74: mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000afa84: mov [rdi+0x18], cx; ret; 
0x000000000b0404: mov [rdi+0x18], cx; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b3ba4: mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000b10f0: mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000afa60: mov [rdi+0x18], dh; ret; 
0x000000000b03d0: mov [rdi+0x18], dh; sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000835e3: mov [rdi+0x18], eax; mov [rdi+0x8], rax; ret; 
0x0000000007fef7: mov [rdi+0x18], eax; mov [rsi], rax; xor eax, eax; ret; 
0x000000001457b7: mov [rdi+0x18], eax; mov eax, r8d; ret; 
0x000000000861f1: mov [rdi+0x18], eax; mov fs:[0x2f8], rdi; ret; 
0x000000000fe1e0: mov [rdi+0x18], eax; mov rax, [rsi+0x70]; mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x00000000092805: mov [rdi+0x18], eax; ret; 
0x0000000008f6ae: mov [rdi+0x18], eax; xor eax, eax; ret; 
0x000000000b1115: mov [rdi+0x18], ecx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f75: mov [rdi+0x18], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1153: mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1fb3: mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x0000000008360f: mov [rdi+0x18], ecx; mov [rdi+0x48], rdx; mov [rdi+0x8], rax; ret; 
0x000000000afa85: mov [rdi+0x18], ecx; ret; 
0x000000000b0405: mov [rdi+0x18], ecx; sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b0463: mov [rdi+0x18], ecx; sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b3ba5: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000b3be3: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x00000000145849: mov [rdi+0x18], edx; mov eax, r8d; ret; 
0x000000000d6788: mov [rdi+0x18], edx; ret; 
0x000000001458e2: mov [rdi+0x18], esi; mov [rdi+0x28], edx; ret; 
0x00000000145e1e: mov [rdi+0x18], esi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000145751: mov [rdi+0x18], esi; mov eax, r8d; ret; 
0x00000000145789: mov [rdi+0x18], esi; mov rax, r8; ret; 
0x00000000087bbe: mov [rdi+0x18], esi; ret; 
0x000000000835e1: mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x0000000007fef6: mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret; 
0x000000001457b6: mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000861f0: mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000000fe1df: mov [rdi+0x18], rax; mov rax, [rsi+0x70]; mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x00000000092804: mov [rdi+0x18], rax; ret; 
0x0000000008360e: mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+0x8], rax; ret; 
0x00000000145848: mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x000000000d6787: mov [rdi+0x18], rdx; ret; 
0x000000001458e1: mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000145e1d: mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000145750: mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x00000000145788: mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x00000000087bbd: mov [rdi+0x18], rsi; ret; 
0x000000000b3b88: mov [rdi+0x19], ch; ret; 
0x000000000b38e6: mov [rdi+0x1], ch; ret; 
0x00000000122f61: mov [rdi+0x1], dh; ret; 
0x000000001598e7: mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x000000001598e8: mov [rdi+0x1], edx; mov [rdi], cx; ret; 
0x00000000159805: mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000159648: mov [rdi+0x1], edx; mov [rdi], rcx; ret; 
0x00000000159647: mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000122f60: mov [rdi+0x1], sil; ret; 
0x000000000b3baa: mov [rdi+0x1a], ch; ret; 
0x000000000b3bc8: mov [rdi+0x1b], ch; ret; 
0x000000000b3be8: mov [rdi+0x1c], ch; ret; 
0x0000000008ee04: mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x000000000b3c04: mov [rdi+0x1d], ch; ret; 
0x000000000b3c24: mov [rdi+0x1e], ch; ret; 
0x000000001340ea: mov [rdi+0x1f8], eax; ret; 
0x000000001340e9: mov [rdi+0x1f8], rax; ret; 
0x000000000b3c44: mov [rdi+0x1f], ch; ret; 
0x000000000b3c64: mov [rdi+0x20], ch; ret; 
0x000000000b0835: mov [rdi+0x20], cl; ret; 
0x000000000b3c85: mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x0000000009226d: mov [rdi+0x20], eax; mov [rip+0x162609], rdi; ret; 
0x00000000092296: mov [rdi+0x20], eax; mov [rsi+0x20], rdi; ret; 
0x000000000c7731: mov [rdi+0x20], eax; ret; 
0x0000000013be2e: mov [rdi+0x20], ecx; ret; 
0x00000000087bba: mov [rdi+0x20], edx; mov [rdi+0x18], rsi; ret; 
0x000000000fe1e8: mov [rdi+0x20], edx; mov [rdi+0x28], rax; ret; 
0x000000001458de: mov [rdi+0x20], esi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000087bf1: mov [rdi+0x20], esi; xor eax, eax; ret; 
0x0000000009226c: mov [rdi+0x20], rax; mov [rip+0x162609], rdi; ret; 
0x00000000092295: mov [rdi+0x20], rax; mov [rsi+0x20], rdi; ret; 
0x000000000c7730: mov [rdi+0x20], rax; ret; 
0x0000000013be2d: mov [rdi+0x20], rcx; ret; 
0x00000000087bb9: mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x000000000fe1e7: mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x000000001458dd: mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000087bf0: mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x000000000b3c8a: mov [rdi+0x21], ch; ret; 
0x00000000145782: mov [rdi+0x28], eax; add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x0000000014574d: mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x000000000fe1ec: mov [rdi+0x28], eax; ret; 
0x000000001458e5: mov [rdi+0x28], edx; ret; 
0x000000000fe1eb: mov [rdi+0x28], rax; ret; 
0x000000000b38f8: mov [rdi+0x2], ch; ret; 
0x000000000b0ea6: mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000af8a6: mov [rdi+0x2], dh; ret; 
0x000000000b0106: mov [rdi+0x2], dh; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b1cd9: mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000a14b0: mov [rdi+0x2], dl; ret; 
0x000000000b3909: mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x00000000159795: mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x000000001595d8: mov [rdi+0x2], edx; mov [rdi], rcx; ret; 
0x000000001595d7: mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000000e06e5: mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret; 
0x000000000e06e4: mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000e06e9: mov [rdi+0x30], ecx; ret; 
0x0000000013be2a: mov [rdi+0x30], edx; mov [rdi+0x20], rcx; ret; 
0x000000000e06e8: mov [rdi+0x30], r9d; ret; 
0x0000000013be29: mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000ee12e: mov [rdi+0x38], al; mov [rsi], edx; mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x000000000b390e: mov [rdi+0x3], ch; ret; 
0x000000001233d8: mov [rdi+0x3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000b0ef7: mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000b1d37: mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x00000000159725: mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x00000000159568: mov [rdi+0x3], edx; mov [rdi], rcx; ret; 
0x000000000af8e7: mov [rdi+0x3], edx; ret; 
0x000000000b0187: mov [rdi+0x3], edx; sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b3967: mov [rdi+0x3], edx; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x00000000159567: mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000b3cda: mov [rdi+0x40], ch; ret; 
0x00000000187f4d: mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x00000000176e75: mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret; 
0x0000000018a3ed: mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x00000000175595: mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x0000000018b37d: mov [rdi+0x40], cl; ret; 
0x00000000176145: mov [rdi+0x40], cl; vzeroupper; ret; 
0x000000001403a8: mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x000000000861aa: mov [rdi+0x48], eax; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000000fe43b: mov [rdi+0x48], eax; ret; 
0x000000000835df: mov [rdi+0x48], edx; mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x00000000083613: mov [rdi+0x48], edx; mov [rdi+0x8], rax; ret; 
0x000000000861a9: mov [rdi+0x48], rax; mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000000fe43a: mov [rdi+0x48], rax; ret; 
0x000000000835dc: mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x00000000083612: mov [rdi+0x48], rdx; mov [rdi+0x8], rax; ret; 
0x000000000449f4: mov [rdi+0x4], ax; xor eax, eax; ret; 
0x000000000b3926: mov [rdi+0x4], ch; ret; 
0x000000000b0ec2: mov [rdi+0x4], dh; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000af8c2: mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000b1d07: mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000a14ce: mov [rdi+0x4], dl; ret; 
0x000000000b3937: mov [rdi+0x4], dl; xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000b0ed8: mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000b1d18: mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000a14fe: mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x000000000a1690: mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a14e6: mov [rdi+0x4], dx; ret; 
0x000000000b0168: mov [rdi+0x4], dx; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b3948: mov [rdi+0x4], dx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x0000000008e037: mov [rdi+0x4], eax; je short 0x000000000008e09b; xor eax, eax; ret; 
0x000000000449f5: mov [rdi+0x4], eax; xor eax, eax; ret; 
0x000000000b0ed9: mov [rdi+0x4], edx; lea rax, [rdi+0x5]; ret; 
0x000000000b1d19: mov [rdi+0x4], edx; lea rax, [rdi+0x6]; ret; 
0x000000001594f8: mov [rdi+0x4], edx; mov [rdi], rcx; ret; 
0x000000000a14ff: mov [rdi+0x4], edx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x000000000a1691: mov [rdi+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a14e7: mov [rdi+0x4], edx; ret; 
0x000000000b0169: mov [rdi+0x4], edx; sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b3949: mov [rdi+0x4], edx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x00000000087aa6: mov [rdi+0x4], esi; ret; 
0x0000000008fc95: mov [rdi+0x4], esi; xor eax, eax; ret; 
0x000000001594f7: mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000000861b7: mov [rdi+0x50], eax; mov fs:[0x300], rdi; ret; 
0x000000000fe433: mov [rdi+0x50], edx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x000000000861b6: mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x000000000fe432: mov [rdi+0x50], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x000000001403f5: mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x00000000086257: mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000001403d5: mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x000000000b393c: mov [rdi+0x5], ch; ret; 
0x000000000b0f8b: mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000b1ddb: mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x00000000159488: mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000af94b: mov [rdi+0x5], edx; ret; 
0x000000000b024b: mov [rdi+0x5], edx; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b3a0b: mov [rdi+0x5], edx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000b0f8a: mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dda: mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x00000000159487: mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000af94a: mov [rdi+0x5], rdx; ret; 
0x000000000b024a: mov [rdi+0x5], rdx; sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b3a0a: mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000b394e: mov [rdi+0x6], ch; ret; 
0x000000000a1507: mov [rdi+0x6], dl; ret; 
0x000000000b0fab: mov [rdi+0x6], edx; lea rax, [rdi+0xd]; ret; 
0x000000000b1dfb: mov [rdi+0x6], edx; lea rax, [rdi+0xe]; ret; 
0x00000000159418: mov [rdi+0x6], edx; mov [rdi], rcx; ret; 
0x000000000af95b: mov [rdi+0x6], edx; ret; 
0x000000000b026b: mov [rdi+0x6], edx; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b3a2b: mov [rdi+0x6], edx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000b0faa: mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000b1dfa: mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x00000000159417: mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000af95a: mov [rdi+0x6], rdx; ret; 
0x000000000b026a: mov [rdi+0x6], rdx; sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b3a2a: mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000b396c: mov [rdi+0x7], ch; ret; 
0x000000000b0f49: mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000b1d99: mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000b0fcb: mov [rdi+0x7], edx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e1b: mov [rdi+0x7], edx; lea rax, [rdi+0xf]; ret; 
0x000000001593a8: mov [rdi+0x7], edx; mov [rdi], rcx; ret; 
0x000000000af929: mov [rdi+0x7], edx; ret; 
0x000000000b0209: mov [rdi+0x7], edx; sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b0980; ret; 
0x000000000b028b: mov [rdi+0x7], edx; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b39c9: mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000b3a4b: mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000b0fca: mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e1a: mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000001593a7: mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000af96a: mov [rdi+0x7], rdx; ret; 
0x000000000b028a: mov [rdi+0x7], rdx; sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b3a4a: mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000b3978: mov [rdi+0x8], ch; ret; 
0x000000000b0f13: mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000af903: mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000b1d59: mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000b05d9: mov [rdi+0x8], dl; ret; 
0x000000000b3989: mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000b0f2a: mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d7a: mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000af91a: mov [rdi+0x8], dx; ret; 
0x000000000b01ea: mov [rdi+0x8], dx; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b39aa: mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x00000000145e1a: mov [rdi+0x8], eax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x000000001458da: mov [rdi+0x8], eax; mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x000000000fec2f: mov [rdi+0x8], eax; mov eax, 0x100; mov [rdi+0x16], ax; ret; 
0x000000000835e7: mov [rdi+0x8], eax; ret; 
0x00000000050e58: mov [rdi+0x8], eax; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x0000000008bca5: mov [rdi+0x8], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000087a14: mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000445f9: mov [rdi+0x8], ecx; ret; 
0x00000000044624: mov [rdi+0x8], ecx; xor eax, eax; mov [rdi], r8; ret; 
0x000000000b0f2b: mov [rdi+0x8], edx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d7b: mov [rdi+0x8], edx; lea rax, [rdi+0xa]; ret; 
0x000000000b0f69: mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000b1db9: mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x00000000052312: mov [rdi+0x8], edx; mov [rsi], eax; mov eax, 0x2; ret; 
0x00000000050644: mov [rdi+0x8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000861e4: mov [rdi+0x8], edx; mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x0000000008074f: mov [rdi+0x8], edx; movzx eax, byte ptr [rax]; ret; 
0x00000000052293: mov [rdi+0x8], edx; ret; 
0x000000000b01eb: mov [rdi+0x8], edx; sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b0229: mov [rdi+0x8], edx; sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b39ab: mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000b39e9: mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x000000000906a5: mov [rdi+0x8], esi; ret; 
0x00000000050643: mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000050e57: mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000050de3: mov [rdi+0x8], r9; ret; 
0x00000000145e19: mov [rdi+0x8], rax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x000000001458d9: mov [rdi+0x8], rax; mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x000000000835e6: mov [rdi+0x8], rax; ret; 
0x000000000445f8: mov [rdi+0x8], rcx; ret; 
0x00000000044623: mov [rdi+0x8], rcx; xor eax, eax; mov [rdi], r8; ret; 
0x00000000052311: mov [rdi+0x8], rdx; mov [rsi], eax; mov eax, 0x2; ret; 
0x000000000861e3: mov [rdi+0x8], rdx; mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x0000000008074e: mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000052292: mov [rdi+0x8], rdx; ret; 
0x00000000101367: mov [rdi+0x8], rsi; ret; 
0x000000000b398e: mov [rdi+0x9], ch; ret; 
0x000000000b39b0: mov [rdi+0xa], ch; ret; 
0x000000000b39ce: mov [rdi+0xb], ch; ret; 
0x000000000b39ee: mov [rdi+0xc], ch; ret; 
0x00000000087cae: mov [rdi+0xc], eax; xor eax, eax; ret; 
0x0000000012278a: mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x000000000770d9: mov [rdi+0xd8], edx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000770d8: mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x000000000b3a10: mov [rdi+0xd], ch; ret; 
0x000000000b3a30: mov [rdi+0xe], ch; ret; 
0x000000000b108d: mov [rdi+0xe], ecx; lea rax, [rdi+0x15]; ret; 
0x000000000b1eed: mov [rdi+0xe], ecx; lea rax, [rdi+0x16]; ret; 
0x000000000af9fd: mov [rdi+0xe], ecx; ret; 
0x000000000b036d: mov [rdi+0xe], ecx; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b3b1d: mov [rdi+0xe], ecx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b108c: mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b1eec: mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000af9fc: mov [rdi+0xe], rcx; ret; 
0x000000000b036c: mov [rdi+0xe], rcx; sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b3b1c: mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b3a50: mov [rdi+0xf], ch; ret; 
0x000000000b102b: mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b1e8b: mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b10ad: mov [rdi+0xf], ecx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f0d: mov [rdi+0xf], ecx; lea rax, [rdi+0x17]; ret; 
0x000000000af9bb: mov [rdi+0xf], ecx; ret; 
0x000000000b030b: mov [rdi+0xf], ecx; sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b0980; ret; 
0x000000000b038d: mov [rdi+0xf], ecx; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b3abb: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000b3b3d: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000b10ac: mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f0c: mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000afa1c: mov [rdi+0xf], rcx; ret; 
0x000000000b038c: mov [rdi+0xf], rcx; sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b3b3c: mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x0000000005135c: mov [rdi+r11*8+0x8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000187e7c: mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x00000000176dcc: mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a31c: mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754ec: mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187f83: mov [rdi+r8-0x2], dx; ret; 
0x0000000017609c: mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000187e7d: mov [rdi+r8-0x2], edx; lea rax, [rdi+r8]; ret; 
0x00000000176dcd: mov [rdi+r8-0x2], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a31d: mov [rdi+r8-0x2], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754ed: mov [rdi+r8-0x2], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187f84: mov [rdi+r8-0x2], edx; ret; 
0x0000000017609d: mov [rdi+r8-0x2], edx; vzeroupper; ret; 
0x00000000187e99: mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x00000000176de9: mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a339: mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x00000000175509: mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187f92: mov [rdi+r8-0x4], edx; ret; 
0x000000001760b9: mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x00000000187ebb: mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x00000000176e0b: mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a35b: mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000017552b: mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187fa3: mov [rdi+r8-0x8], rdx; ret; 
0x000000001760db: mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x00000000187e7e: mov [rdi+rax-0x2], edx; lea rax, [rdi+r8]; ret; 
0x00000000176dce: mov [rdi+rax-0x2], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a31e: mov [rdi+rax-0x2], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754ee: mov [rdi+rax-0x2], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187f85: mov [rdi+rax-0x2], edx; ret; 
0x0000000017609e: mov [rdi+rax-0x2], edx; vzeroupper; ret; 
0x00000000187e9a: mov [rdi+rax-0x4], edx; lea rax, [rdi+r8]; ret; 
0x00000000176dea: mov [rdi+rax-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a33a: mov [rdi+rax-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000017550a: mov [rdi+rax-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187f93: mov [rdi+rax-0x4], edx; ret; 
0x000000001760ba: mov [rdi+rax-0x4], edx; vzeroupper; ret; 
0x00000000187ebc: mov [rdi+rax-0x8], edx; lea rax, [rdi+r8]; ret; 
0x00000000176e0c: mov [rdi+rax-0x8], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a35c: mov [rdi+rax-0x8], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000017552c: mov [rdi+rax-0x8], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x00000000187fa4: mov [rdi+rax-0x8], edx; ret; 
0x000000001760dc: mov [rdi+rax-0x8], edx; vzeroupper; ret; 
0x0000000005135d: mov [rdi+rbx*8+0x8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000012d191: mov [rdi+rdi*8-0x1], ch; jmp qword ptr [rdi+rax*8]; 
0x000000000b4584: mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x000000000b4583: mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x000000000b4585: mov [rdi+rdx-0x2], ecx; mov [rdi], si; ret; 
0x00000000187718: mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x00000000176718: mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001888f8: mov [rdi+rdx-0x3], ecx; ret; 
0x00000000174c78: mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000000b4575: mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000000b4574: mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x0000000018773c: mov [rdi+rdx-0x7], ecx; lea rax, [rdi+rdx]; ret; 
0x0000000017673c: mov [rdi+rdx-0x7], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000018890c: mov [rdi+rdx-0x7], ecx; ret; 
0x00000000174c8c: mov [rdi+rdx-0x7], ecx; vzeroupper; ret; 
0x0000000018773b: mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x0000000017673b: mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x0000000018890b: mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c8b: mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000b4567: mov [rdi+rdx-0x8], ecx; mov [rdi], rsi; ret; 
0x000000000b4566: mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x000000000b4565: mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x000000001532b5: mov [rdi-0x10], ebx; mov [rdi-0x8], rcx; ret; 
0x000000001532f3: mov [rdi-0x10], ebx; mov [rdi-0x8], rdx; ret; 
0x00000000050d4f: mov [rdi-0x10], ecx; ret; 
0x000000001532b4: mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532f2: mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000050d4e: mov [rdi-0x10], r9; ret; 
0x00000000153468: mov [rdi-0x11], ebx; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153564: mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534b0: mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153467: mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153563: mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534af: mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153638: mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153637: mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153818: mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153817: mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153a08: mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153a07: mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153bd9: mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153bd8: mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153dd9: mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153dd8: mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153fd9: mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153fd8: mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001532b1: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532ef: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x000000001532b0: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532ee: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153464: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153560: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534ac: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153463: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x0000000015355f: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534ab: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000013cbbe: mov [rdi-0x1], al; cmp rdi, rcx; jne short 0x000000000013cbb0; ret; 
0x0000000015356b: mov [rdi-0x1], dl; ret; 
0x000000000b0870: mov [rdi-0x1], edx; ret; 
0x000000000b08b0: mov [rdi-0x1], rdx; ret; 
0x00000000153634: mov [rdi-0x1a], edx; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153633: mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153814: mov [rdi-0x1b], edx; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153813: mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153a04: mov [rdi-0x1c], edx; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153a03: mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153bd5: mov [rdi-0x1d], edx; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153bd4: mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153dd5: mov [rdi-0x1e], edx; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153dd4: mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153fd5: mov [rdi-0x1f], edx; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153fd4: mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001532ad: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532eb: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x000000001532ac: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rcx; ret; 
0x000000001532ea: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x000000001539bc: mov [rdi-0x2], cx; ret; 
0x000000001537d4: mov [rdi-0x2], dx; ret; 
0x000000001539bd: mov [rdi-0x2], ecx; ret; 
0x000000001537d5: mov [rdi-0x2], edx; ret; 
0x000000001539b8: mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000001539b9: mov [rdi-0x3], edx; mov [rdi-0x2], cx; ret; 
0x00000000153d99: mov [rdi-0x4], ecx; ret; 
0x0000000015346f: mov [rdi-0x4], edx; ret; 
0x00000000153d96: mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153f96: mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000154196: mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x00000000186e8c: mov [rdi-0x7d000000], cs; rol byte ptr [rax+0x48], 0x1; clc; ret; 
0x00000000050d48: mov [rdi-0x8], eax; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cda: mov [rdi-0x8], ecx; ret; 
0x000000001532f7: mov [rdi-0x8], edx; ret; 
0x00000000050d47: mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cd9: mov [rdi-0x8], r9; ret; 
0x00000000158c3b: mov [rdi-0x8], rcx; ret; 
0x000000001532b8: mov [rdi-0x8], rcx; ret; 
0x00000000153dde: mov [rdi-0x8], rdx; ret; 
0x000000001532f6: mov [rdi-0x8], rdx; ret; 
0x0000000015346c: mov [rdi-0x9], eax; mov [rdi-0x4], edx; ret; 
0x00000000153568: mov [rdi-0x9], ecx; mov [rdi-0x1], dl; ret; 
0x000000001534b4: mov [rdi-0x9], ecx; mov [rdi-0x4], edx; ret; 
0x00000000158ed8: mov [rdi-0x9], edx; mov [rdi-0x4], ecx; ret; 
0x0000000015346b: mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153567: mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534b3: mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158ed7: mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000015363c: mov [rdi-0xa], ecx; mov [rdi-0x4], edx; ret; 
0x00000000158e58: mov [rdi-0xa], edx; mov [rdi-0x4], ecx; ret; 
0x0000000015363b: mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158e57: mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x0000000015381c: mov [rdi-0xb], ecx; mov [rdi-0x4], edx; ret; 
0x00000000158dd8: mov [rdi-0xb], edx; mov [rdi-0x4], ecx; ret; 
0x0000000015381b: mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158dd7: mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000153a0c: mov [rdi-0xc], ecx; mov [rdi-0x4], edx; ret; 
0x00000000158d58: mov [rdi-0xc], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153a0b: mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000158d57: mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000153bdd: mov [rdi-0xd], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000158cc9: mov [rdi-0xd], edx; mov [rdi-0x8], rcx; ret; 
0x00000000153bdc: mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158cc8: mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000153ddd: mov [rdi-0xe], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000158c39: mov [rdi-0xe], edx; mov [rdi-0x8], rcx; ret; 
0x00000000153ddc: mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158c38: mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000153fdd: mov [rdi-0xf], ecx; mov [rdi-0x8], rdx; ret; 
0x00000000158ba9: mov [rdi-0xf], edx; mov [rdi-0x8], rcx; ret; 
0x00000000153fdc: mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158ba8: mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000df31e: mov [rdi], al; mov eax, 0x1; ret; 
0x000000000b38d2: mov [rdi], ch; ret; 
0x00000000137e62: mov [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000b455b: mov [rdi], cl; ret; 
0x000000000b1686: mov [rdi], cs; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1657: mov [rdi], cs; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1656: mov [rdi], cs; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1542: mov [rdi], cs; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0ea3: mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000af8a3: mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000b1cd6: mov [rdi], cx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000b0576: mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000b3906: mov [rdi], cx; mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x00000000187e79: mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x00000000176dc9: mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a319: mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754e9: mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018b2d9: mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x00000000176099: mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000017c102: mov [rdi], cx; mov [rsi-0x2], cx; ret; 
0x000000001876f3: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001766e3: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001888d3: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000174c53: mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000001598eb: mov [rdi], cx; ret; 
0x000000000b0e80: mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000af880: mov [rdi], dh; ret; 
0x000000000b00c0: mov [rdi], dh; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b0980; ret; 
0x000000000a1481: mov [rdi], dl; add rax, rdi; ret; 
0x000000000b1cb2: mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000176da3: mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x0000000018a2f3: mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000001754c3: mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000000b0552: mov [rdi], dl; ret; 
0x00000000176073: mov [rdi], dl; vzeroupper; ret; 
0x000000000b38e2: mov [rdi], dl; xor ch, ch; mov [rdi+0x1], ch; ret; 
0x000000000b0e93: mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000001766d3: mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000b1cc3: mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x00000000176db3: mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x00000000187f80: mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x00000000176170: mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x0000000018a303: mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001754d3: mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x000000000a14a8: mov [rdi], dx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000af893: mov [rdi], dx; ret; 
0x000000000b00e3: mov [rdi], dx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x0000000018b183: mov [rdi], dx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x00000000174c43: mov [rdi], dx; vzeroupper; ret; 
0x000000000b38f3: mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000a14b9: mov [rdi], eax; add rax, rdi; ret; 
0x00000000101365: mov [rdi], eax; mov [rdi+0x8], rsi; ret; 
0x000000000555ab: mov [rdi], eax; mov rax, rdi; ret; 
0x0000000004462a: mov [rdi], eax; ret; 
0x00000000050cd4: mov [rdi], eax; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000050dde: mov [rdi], eax; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000000449ee: mov [rdi], eax; shr rax, 0x20; mov [rdi+0x4], ax; xor eax, eax; ret; 
0x0000000004057c: mov [rdi], eax; subsd xmm0, xmm1; ret; 
0x000000000445f4: mov [rdi], eax; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x00000000041bd0: mov [rdi], eax; xor eax, eax; ret; 
0x000000000b0ec5: mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000b0f17: mov [rdi], ecx; lea rax, [rdi+0x8]; ret; 
0x000000000a1640: mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b0ea4: mov [rdi], ecx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000af8a4: mov [rdi], ecx; mov [rdi+0x2], dh; ret; 
0x000000000b1cd7: mov [rdi], ecx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000b0577: mov [rdi], ecx; mov [rdi+0x2], dl; ret; 
0x000000000b3907: mov [rdi], ecx; mov [rdi+0x2], dl; xor ch, ch; mov [rdi+0x3], ch; ret; 
0x000000000b0ef5: mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000b1d35: mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000af8e5: mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x000000000b3965: mov [rdi], ecx; mov [rdi+0x3], edx; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x000000000b1d05: mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000b0595: mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000b3935: mov [rdi], ecx; mov [rdi+0x4], dl; xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000b0ed6: mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000b1d16: mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000af8d6: mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000b3946: mov [rdi], ecx; mov [rdi+0x4], dx; xor ch, ch; mov [rdi+0x6], ch; ret; 
0x000000000b0f88: mov [rdi], ecx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd8: mov [rdi], ecx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000af948: mov [rdi], ecx; mov [rdi+0x5], rdx; ret; 
0x000000000b3a08: mov [rdi], ecx; mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000b0fa8: mov [rdi], ecx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000b1df8: mov [rdi], ecx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000af958: mov [rdi], ecx; mov [rdi+0x6], rdx; ret; 
0x000000000b3a28: mov [rdi], ecx; mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000b0f47: mov [rdi], ecx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000b1d97: mov [rdi], ecx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000af927: mov [rdi], ecx; mov [rdi+0x7], edx; ret; 
0x000000000b39c7: mov [rdi], ecx; mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000b0fc8: mov [rdi], ecx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e18: mov [rdi], ecx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000af968: mov [rdi], ecx; mov [rdi+0x7], rdx; ret; 
0x000000000b3a48: mov [rdi], ecx; mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000b1d57: mov [rdi], ecx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000b05d7: mov [rdi], ecx; mov [rdi+0x8], dl; ret; 
0x000000000b3987: mov [rdi], ecx; mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000b0f28: mov [rdi], ecx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d78: mov [rdi], ecx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000af918: mov [rdi], ecx; mov [rdi+0x8], dx; ret; 
0x000000000b39a8: mov [rdi], ecx; mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000b0f67: mov [rdi], ecx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000b1db7: mov [rdi], ecx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000af937: mov [rdi], ecx; mov [rdi+0x8], edx; ret; 
0x000000000b39e7: mov [rdi], ecx; mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x00000000187e7a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x00000000176dca: mov [rdi], ecx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a31a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754ea: mov [rdi], ecx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018b2da: mov [rdi], ecx; mov [rdi+r8-0x2], dx; ret; 
0x0000000017609a: mov [rdi], ecx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000187e97: mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x00000000176de7: mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a337: mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x00000000175507: mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018b2f7: mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x000000001760b7: mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x00000000187eb9: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x00000000176e09: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a359: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x00000000175529: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018b309: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; ret; 
0x000000001760d9: mov [rdi], ecx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x00000000187739: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x00000000176739: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000188909: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c89: mov [rdi], ecx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x0000000017c103: mov [rdi], ecx; mov [rsi-0x2], cx; ret; 
0x0000000017c0f7: mov [rdi], ecx; mov [rsi-0x4], ecx; ret; 
0x000000001876f4: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001766e4: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001888d4: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000174c54: mov [rdi], ecx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000187712: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x000000001888f2: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x00000000174c72: mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x00000000040736: mov [rdi], ecx; ret; 
0x000000000b0145: mov [rdi], ecx; sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b0980; ret; 
0x000000000b01c7: mov [rdi], ecx; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000001286b1: mov [rdi], ecx; xor eax, eax; ret; 
0x000000000a1476: mov [rdi], edx; add rax, rdi; ret; 
0x0000000007e2a3: mov [rdi], edx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004037e: mov [rdi], edx; fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000b0e94: mov [rdi], edx; lea rax, [rdi+0x1]; ret; 
0x000000001766d4: mov [rdi], edx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x000000000b1cc4: mov [rdi], edx; lea rax, [rdi+0x2]; ret; 
0x00000000176db4: mov [rdi], edx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000000b0eb2: mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x00000000176702: mov [rdi], edx; lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000b1cf2: mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000b0f04: mov [rdi], edx; lea rax, [rdi+0x7]; ret; 
0x000000000b1d44: mov [rdi], edx; lea rax, [rdi+0x8]; ret; 
0x000000000a15f6: mov [rdi], edx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b0890: mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000b08a0: mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000b0911: mov [rdi], edx; mov [rdi+0x5], rdx; ret; 
0x000000000b0921: mov [rdi], edx; mov [rdi+0x6], rdx; ret; 
0x000000000b08f1: mov [rdi], edx; mov [rdi+0x7], edx; ret; 
0x000000000b08d1: mov [rdi], edx; mov [rdi+0x8], dl; ret; 
0x000000000b08e1: mov [rdi], edx; mov [rdi+0x8], dx; ret; 
0x000000000b0901: mov [rdi], edx; mov [rdi+0x8], edx; ret; 
0x00000000187f81: mov [rdi], edx; mov [rdi+r8-0x2], dx; ret; 
0x00000000176171: mov [rdi], edx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000187f90: mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x00000000176180: mov [rdi], edx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x00000000187fa1: mov [rdi], edx; mov [rdi+r8-0x8], rdx; ret; 
0x00000000176191: mov [rdi], edx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x0000000008692d: mov [rdi], edx; mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000000520c6: mov [rdi], edx; mov [rsi], eax; mov eax, 0x1; ret; 
0x0000000018a304: mov [rdi], edx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001754d4: mov [rdi], edx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000040a75: mov [rdi], edx; movd xmm0, eax; ret; 
0x000000000a14a9: mov [rdi], edx; movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a14c7: mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000a14df: mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; ret; 
0x000000000a1671: mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+0x4], dx; ret; 
0x00000000040596: mov [rdi], edx; ret; 
0x0000000004469d: mov [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000b00e4: mov [rdi], edx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x0000000018b184: mov [rdi], edx; sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x000000000b0122: mov [rdi], edx; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x0000000018b1c2: mov [rdi], edx; sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000000b01a4: mov [rdi], edx; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000408d8: mov [rdi], edx; subss xmm0, xmm1; ret; 
0x00000000174c44: mov [rdi], edx; vzeroupper; ret; 
0x000000000b38f4: mov [rdi], edx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000b3922: mov [rdi], edx; xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000b3974: mov [rdi], edx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000000a1491: mov [rdi], esi; add rax, rdi; ret; 
0x000000000a1611: mov [rdi], esi; lea rax, [rdi+rax-0x1]; ret; 
0x0000000017ba33: mov [rdi], esi; mov [r9-0x2], cx; ret; 
0x0000000017ba1f: mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x0000000017ba0e: mov [rdi], esi; mov [r9-0x8], rcx; ret; 
0x000000000408e6: mov [rdi], esi; ret; 
0x00000000087ed5: mov [rdi], esi; xor eax, eax; ret; 
0x000000000a1480: mov [rdi], r10b; add rax, rdi; ret; 
0x00000000044629: mov [rdi], r8; ret; 
0x00000000050cd3: mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000050ddd: mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000000445f3: mov [rdi], r8; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x000000000a14b8: mov [rdi], r8d; add rax, rdi; ret; 
0x00000000050ca8: mov [rdi], r9; ret; 
0x00000000101364: mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x000000000555aa: mov [rdi], rax; mov rax, rdi; ret; 
0x0000000004057b: mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000041bcf: mov [rdi], rax; xor eax, eax; ret; 
0x000000000b0f16: mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000b0f87: mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd7: mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000af947: mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000b3a07: mov [rdi], rcx; mov [rdi+0x5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000b0fa7: mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000b1df7: mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000af957: mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000b3a27: mov [rdi], rcx; mov [rdi+0x6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000b0f46: mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000b1d96: mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000af926: mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000b39c6: mov [rdi], rcx; mov [rdi+0x7], edx; xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000b0fc7: mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e17: mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000af967: mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000000b3a47: mov [rdi], rcx; mov [rdi+0x7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000b1d56: mov [rdi], rcx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000b05d6: mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000b3986: mov [rdi], rcx; mov [rdi+0x8], dl; xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000b0f27: mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d77: mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000af917: mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000b39a7: mov [rdi], rcx; mov [rdi+0x8], dx; xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000b0f66: mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000b1db6: mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000af936: mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x000000000b39e6: mov [rdi], rcx; mov [rdi+0x8], edx; xor ch, ch; mov [rdi+0xc], ch; ret; 
0x00000000187eb8: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x00000000176e08: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000018a358: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x00000000175528: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018b308: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000001760d8: mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x00000000187738: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x00000000176738: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000188908: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c88: mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000af906: mov [rdi], rcx; ret; 
0x000000000b01c6: mov [rdi], rcx; sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000001286b0: mov [rdi], rcx; xor eax, eax; ret; 
0x000000000a1475: mov [rdi], rdx; add rax, rdi; ret; 
0x000000000b0f03: mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000b1d43: mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000a15f5: mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b0910: mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b0920: mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000b08f0: mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000b08d0: mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000b08e0: mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000b0900: mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x00000000187fa0: mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x00000000176190: mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x0000000008692c: mov [rdi], rdx; mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000000520c5: mov [rdi], rdx; mov [rsi], eax; mov eax, 0x1; ret; 
0x00000000040595: mov [rdi], rdx; ret; 
0x000000000b01a3: mov [rdi], rdx; sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000b3973: mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x0000000017ba0d: mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x000000000644c2: mov [rdi], rsi; ret; 
0x000000000a1490: mov [rdi], si; add rax, rdi; ret; 
0x000000000a1610: mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x0000000017ba32: mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000000b4589: mov [rdi], si; ret; 
0x000000000f85bc: mov [rdi], si; xor eax, eax; ret; 
0x000000000af1ea: mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x00000000140c6c: mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x000000000922dd: mov [rdx+0x10], ecx; je short 0x0000000000092303; ret; 
0x0000000010bd11: mov [rdx+0x10], ecx; mov [r8], rax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc91: mov [rdx+0x10], ecx; mov [r8], rax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x000000000922dc: mov [rdx+0x10], rcx; je short 0x0000000000092303; ret; 
0x0000000010bd10: mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc90: mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x000000000d7383: mov [rdx+0x11], ebx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ac412: mov [rdx+0x1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x00000000079f30: mov [rdx+0x20], esi; mov [rcx], eax; ret; 
0x0000000013b4b8: mov [rdx+0x20], esi; ret; 
0x00000000079f2f: mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000013b4b7: mov [rdx+0x20], rsi; ret; 
0x0000000009538f: mov [rdx+0x28], ecx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000009538e: mov [rdx+0x28], rcx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x000000000ac422: mov [rdx+0x2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x00000000166599: mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000ac43e: mov [rdx+0x2], al; mov rax, rdi; ret; 
0x000000001665f7: mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000ac4ac: mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x000000000ac452: mov [rdx+0x4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x000000001665c7: mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000ac46c: mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000001665d8: mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000ac48d: mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x000000001665d9: mov [rdx+0x4], eax; lea rax, [rdx+0x5]; ret; 
0x000000000c1b72: mov [rdx+0x4], eax; mov [rdx], eax; xor eax, eax; ret; 
0x000000000ac48e: mov [rdx+0x4], eax; mov rax, rdi; ret; 
0x000000001171e2: mov [rdx+0x4], ecx; test ecx, ecx; jne short 0x0000000000117198; mov rax, r8; ret; 
0x000000000c1b71: mov [rdx+0x4], r8d; mov [rdx], eax; xor eax, eax; ret; 
0x0000000013b48e: mov [rdx+0x58], edi; mov [rdx+0x68], rcx; ret; 
0x0000000013b48d: mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x00000000166609: mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x0000000016668b: mov [rdx+0x5], eax; lea rax, [rdx+0xc]; ret; 
0x000000001622b9: mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x0000000016668a: mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x000000001622fa: mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x0000000013dcba: mov [rdx+0x68], eax; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x0000000013b492: mov [rdx+0x68], ecx; ret; 
0x0000000013b491: mov [rdx+0x68], rcx; ret; 
0x00000000166629: mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x000000001666ab: mov [rdx+0x6], eax; lea rax, [rdx+0xd]; ret; 
0x000000001622c9: mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x000000001523f3: mov [rdx+0x6], edi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001666aa: mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x0000000016231a: mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x0000000013dcc5: mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x0000000013dcc6: mov [rdx+0x6c], eax; mov eax, 0x1; ret; 
0x00000000166649: mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x00000000168913: mov [rdx+0x7], eax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001666cb: mov [rdx+0x7], eax; lea rax, [rdx+0xe]; ret; 
0x000000000ac530: mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x00000000168912: mov [rdx+0x7], rax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000001666ca: mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x0000000016233a: mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x000000000af180: mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000ac4c2: mov [rdx+0x8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac4f0: mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000ac511: mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000c8353: mov [rdx+0x8], eax; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000166669: mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x0000000016655b: mov [rdx+0x8], eax; lea rax, [rdx+0xf]; ret; 
0x000000000922d9: mov [rdx+0x8], eax; mov [rdx+0x10], rcx; je short 0x0000000000092303; ret; 
0x000000000ac512: mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x0000000003724f: mov [rdx+0x8], eax; pop rbx; ret; 
0x00000000090ae1: mov [rdx+0x8], eax; ret; 
0x0000000010138d: mov [rdx+0x8], eax; test rax, rax; je short 0x0000000000101398; mov [rax], rdx; ret; 
0x00000000086930: mov [rdx+0x8], edi; mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000000c8352: mov [rdx+0x8], rax; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000016655a: mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x000000000922d8: mov [rdx+0x8], rax; mov [rdx+0x10], rcx; je short 0x0000000000092303; ret; 
0x0000000016222a: mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x00000000090ae0: mov [rdx+0x8], rax; ret; 
0x0000000010138c: mov [rdx+0x8], rax; test rax, rax; je short 0x0000000000101398; mov [rax], rdx; ret; 
0x0000000008692f: mov [rdx+0x8], rdi; mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000008fe62: mov [rdx+0x971], bh; xor eax, eax; ret; 
0x0000000008fe61: mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000008fe92: mov [rdx+0x972], bh; xor eax, eax; cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x0000000008fe91: mov [rdx+0x972], dil; xor eax, eax; cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x00000000140b74: mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x000000000b50b3: mov [rdx+0xd], esi; add bh, dh; rol dword ptr [rax], 0x0; add [rax+0x74], al; ret far; 
0x00000000080d65: mov [rdx+0xe0], ecx; pop rbx; ret; 
0x000000000770e7: mov [rdx+0xe0], ecx; ret; 
0x00000000080d64: mov [rdx+0xe0], rcx; pop rbx; ret; 
0x000000000770e6: mov [rdx+0xe0], rcx; ret; 
0x000000000f3dee: mov [rdx+rax*8], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000f3ded: mov [rdx+rax*8], r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000123015: mov [rdx-0x1], al; mov [rax], r10; lea eax, [r9+r8+0x2]; pop rbx; ret; 
0x00000000166572: mov [rdx], al; lea rax, [rdx]; ret; 
0x0000000008072b: mov [rdx], al; mov eax, r8d; ret; 
0x000000000ac417: mov [rdx], al; mov rax, rdi; ret; 
0x00000000166583: mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x00000000166593: mov [rdx], ax; mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000ac438: mov [rdx], ax; mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x000000000ac428: mov [rdx], ax; mov rax, rdi; ret; 
0x0000000010bff5: mov [rdx], ax; ret; 
0x000000000713f4: mov [rdx], cl; add [rax], al; mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000149b7b: mov [rdx], eax; add rsp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000ff12f: mov [rdx], eax; cmp rax, rdi; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x00000000166584: mov [rdx], eax; lea rax, [rdx+0x1]; ret; 
0x000000001665b2: mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x000000001689bf: mov [rdx], eax; lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000166504: mov [rdx], eax; lea rax, [rdx+0x7]; ret; 
0x00000000166594: mov [rdx], eax; mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000ac439: mov [rdx], eax; mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x000000001665c2: mov [rdx], eax; mov al, [rcx+0x4]; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000ac467: mov [rdx], eax; mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000001665d2: mov [rdx], eax; mov ax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000ac487: mov [rdx], eax; mov ax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x0000000005215f: mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000413e8: mov [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000416a2: mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001665f2: mov [rdx], eax; mov eax, [rcx+0x3]; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000ac4a7: mov [rdx], eax; mov eax, [rcx+0x3]; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x00000000166604: mov [rdx], eax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x000000001622b4: mov [rdx], eax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x00000000166624: mov [rdx], eax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x000000001622c4: mov [rdx], eax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x00000000166644: mov [rdx], eax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x000000001622d4: mov [rdx], eax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x00000000166664: mov [rdx], eax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x000000001622e4: mov [rdx], eax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000d6f20: mov [rdx], eax; mov eax, r8d; ret; 
0x00000000041608: mov [rdx], eax; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000f0180: mov [rdx], eax; mov eax, r9d; ret; 
0x00000000044a9a: mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000166684: mov [rdx], eax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x000000001622f4: mov [rdx], eax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x000000001666a4: mov [rdx], eax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x00000000162314: mov [rdx], eax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x000000001666c4: mov [rdx], eax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x00000000162334: mov [rdx], eax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x00000000166554: mov [rdx], eax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x00000000162224: mov [rdx], eax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x000000000ca3d2: mov [rdx], eax; mov rax, r8; add rsp, 0x8; ret; 
0x000000000ac429: mov [rdx], eax; mov rax, rdi; ret; 
0x00000000085bde: mov [rdx], eax; pop rbx; ret; 
0x0000000003aa3d: mov [rdx], eax; ret; 
0x000000000c1b75: mov [rdx], eax; xor eax, eax; ret; 
0x0000000007ae28: mov [rdx], ecx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000868fa: mov [rdx], ecx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000003a2c7: mov [rdx], ecx; mov rdx, [rax+0xc0]; mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x000000000efed7: mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x000000000d2120: mov [rdx], edi; mov eax, r8d; ret; 
0x00000000103d37: mov [rdx], edi; pop rbx; pop rbp; ret; 
0x0000000018b190: mov [rdx], es; add [rax], al; ret; 
0x00000000079433: mov [rdx], esp; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000079432: mov [rdx], r12d; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000ff12e: mov [rdx], rax; cmp rax, rdi; jb short 0x00000000000ff140; xor eax, eax; ret; 
0x000000001689be: mov [rdx], rax; lea rax, [rdx+0x7]; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000166503: mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x0000000010b3d3: mov [rdx], rax; mov eax, 0x1; ret; 
0x00000000166603: mov [rdx], rax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x000000001622b3: mov [rdx], rax; mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x00000000166623: mov [rdx], rax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x000000001622c3: mov [rdx], rax; mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x00000000166643: mov [rdx], rax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x000000001622d3: mov [rdx], rax; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x00000000166663: mov [rdx], rax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x000000001622e3: mov [rdx], rax; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x00000000166683: mov [rdx], rax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x000000001622f3: mov [rdx], rax; mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x000000001666a3: mov [rdx], rax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x00000000162313: mov [rdx], rax; mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x000000001666c3: mov [rdx], rax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x00000000162333: mov [rdx], rax; mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x00000000166553: mov [rdx], rax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x00000000162223: mov [rdx], rax; mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x000000001621d3: mov [rdx], rax; mov rax, rdi; ret; 
0x00000000085bdd: mov [rdx], rax; pop rbx; ret; 
0x0000000003aa3c: mov [rdx], rax; ret; 
0x0000000007ae27: mov [rdx], rcx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000868f9: mov [rdx], rcx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000003a2c6: mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x00000000103d36: mov [rdx], rdi; pop rbx; pop rbp; ret; 
0x000000000948c4: mov [rip+0x158ade], eax; ret; 
0x000000000948c3: mov [rip+0x158ade], rax; ret; 
0x000000000948b1: mov [rip+0x158ae9], eax; ret; 
0x000000000948b0: mov [rip+0x158ae9], rax; ret; 
0x00000000094897: mov [rip+0x158af3], edx; ret; 
0x00000000094896: mov [rip+0x158af3], rdx; ret; 
0x00000000094854: mov [rip+0x158afe], eax; ret; 
0x00000000094853: mov [rip+0x158afe], rax; ret; 
0x0000000009482e: mov [rip+0x158b0c], eax; ret; 
0x0000000009482d: mov [rip+0x158b0c], rax; ret; 
0x00000000094844: mov [rip+0x158b16], eax; ret; 
0x00000000094843: mov [rip+0x158b16], rax; ret; 
0x000000000947fe: mov [rip+0x158b44], eax; ret; 
0x000000000947fd: mov [rip+0x158b44], rax; ret; 
0x000000000947dd: mov [rip+0x158b89], eax; ret; 
0x000000000947b1: mov [rip+0x158b99], eax; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x000000000947b0: mov [rip+0x158b99], rax; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x0000000009121e: mov [rip+0x15c070], eax; add rsp, 0x8; ret; 
0x00000000098565: mov [rip+0x15cc45], edx; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x00000000098564: mov [rip+0x15cc45], rdx; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x000000000948f6: mov [rip+0x1608c4], eax; ret; 
0x000000000948f5: mov [rip+0x1608c4], rax; ret; 
0x00000000094813: mov [rip+0x1609a3], eax; ret; 
0x0000000008bf84: mov [rip+0x1612f6], eax; ret; 
0x0000000008bf83: mov [rip+0x1612f6], rax; ret; 
0x0000000008bf73: mov [rip+0x161313], eax; ret; 
0x000000000927fe: mov [rip+0x162084], edi; mov [rdi+0x18], rax; ret; 
0x000000000927fd: mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x00000000092365: mov [rip+0x162515], eax; ret; 
0x00000000092364: mov [rip+0x162515], rax; ret; 
0x00000000092271: mov [rip+0x162609], edi; ret; 
0x00000000092270: mov [rip+0x162609], rdi; ret; 
0x0000000008fec4: mov [rip+0x1648e6], edi; xor eax, eax; ret; 
0x000000000862f3: mov [rip+0x166f83], eax; ret; 
0x000000000862e3: mov [rip+0x166f8f], eax; ret; 
0x000000000862d3: mov [rip+0x166f9b], eax; ret; 
0x000000000862c3: mov [rip+0x166fa7], eax; ret; 
0x00000000086323: mov [rip+0x16a42b], eax; ret; 
0x00000000084e35: mov [rip+0x16b8dd], ebx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x00000000084e34: mov [rip+0x16b8dd], rbx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x0000000004f8a8: mov [rip+0x19dfc2], eax; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000004f8a7: mov [rip+0x19dfc2], rax; pop rbp; xor eax, eax; pop r12; ret; 
0x00000000041e63: mov [rip+0x1ab35b], eax; mov eax, edx; ret; 
0x00000000041e4c: mov [rip+0x1ab376], edx; ret; 
0x000000000395f0: mov [rip+0x1b6367], al; lea rax, [rip+0x1b6303]; ret; 
0x0000000002d12c: mov [rip+0x1c35b6], eax; ret; 
0x0000000002d12b: mov [rip+0x1c35b6], rax; ret; 
0x00000000192d2c: mov [rip+0x5d9be], ebx; test rbx, rbx; jne short 0x0000000000192d18; pop rbx; ret; 
0x00000000192d2b: mov [rip+0x5d9be], rbx; test rbx, rbx; jne short 0x0000000000192d18; pop rbx; ret; 
0x0000000009452c: mov [rip+0x64d8f700], dl; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000139539: mov [rip+0xc3041], eax; add rsp, 0x8; ret; 
0x0000000013277f: mov [rip+0xc6c93], ebp; mov qword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013277e: mov [rip+0xc6c93], rbp; mov qword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000012f9f4: mov [rip+0xc789e], ecx; mov eax, r8d; ret; 
0x0000000012f9f3: mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x00000000132728: mov [rip+0xc7d2a], ebp; mov qword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x00000000132727: mov [rip+0xc7d2a], rbp; mov qword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326d1: mov [rip+0xc8dc1], ebp; mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x000000001326d0: mov [rip+0xc8dc1], rbp; mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x0000000011fc5f: mov [rip+0xdcfeb], eax; add rsp, 0x8; ret; 
0x0000000011fc5e: mov [rip+0xdcfeb], rax; add rsp, 0x8; ret; 
0x0000000010bb81: mov [rip+0xe1899], ebx; pop rbx; ret; 
0x0000000010bb80: mov [rip+0xe1899], rbx; pop rbx; ret; 
0x0000000010bb6b: mov [rip+0xe18af], ebx; pop rbx; ret; 
0x0000000010bb6a: mov [rip+0xe18af], rbx; pop rbx; ret; 
0x00000000101c3a: mov [rip+0xf43f0], eax; add rsp, 0x8; ret; 
0x00000000101c39: mov [rip+0xf43f0], rax; add rsp, 0x8; ret; 
0x00000000101bc5: mov [rip+0xf4465], eax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101bc4: mov [rip+0xf4465], rax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b99: mov [rip+0xf4491], eax; mov rax, r8; ret; 
0x00000000101b98: mov [rip+0xf4491], rax; mov rax, r8; ret; 
0x000000001008c1: mov [rip+0xf5619], eax; mov eax, 0x1; add rsp, 0x8; ret; 
0x000000001008c0: mov [rip+0xf5619], rax; mov eax, 0x1; add rsp, 0x8; ret; 
0x00000000044571: mov [rsi+0x10], eax; mov [rsi+0x28], rax; xor eax, eax; ret; 
0x000000000ee138: mov [rsi+0x10], eax; ret; 
0x00000000044926: mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000044975: mov [rsi+0x10], eax; xor eax, eax; ret; 
0x00000000044570: mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret; 
0x000000000ee137: mov [rsi+0x10], r8; ret; 
0x0000000013a67a: mov [rsi+0x10], rax; ret; 
0x00000000044925: mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x00000000044974: mov [rsi+0x10], rax; xor eax, eax; ret; 
0x00000000116313: mov [rsi+0x1], al; test al, al; jne short 0x00000000001162c1; mov rax, r9; ret; 
0x0000000009229a: mov [rsi+0x20], edi; ret; 
0x00000000092299: mov [rsi+0x20], rdi; ret; 
0x00000000044575: mov [rsi+0x28], eax; xor eax, eax; ret; 
0x00000000080728: mov [rsi+0x28], ecx; mov [rdx], al; mov eax, r8d; ret; 
0x00000000044574: mov [rsi+0x28], rax; xor eax, eax; ret; 
0x00000000080727: mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret; 
0x0000000012346f: mov [rsi+0x3], al; xor eax, eax; ret; 
0x0000000012346e: mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x0000000011c67a: mov [rsi+0x5], al; mov rax, rsi; pop rbx; ret; 
0x000000000fd885: mov [rsi+0x66], dx; xor eax, eax; ret; 
0x000000000fd886: mov [rsi+0x66], edx; xor eax, eax; ret; 
0x000000001551b3: mov [rsi+0x6], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000013a69b: mov [rsi+0x8], eax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x0000000013a6db: mov [rsi+0x8], eax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000013a643: mov [rsi+0x8], eax; ret; 
0x000000000ee134: mov [rsi+0x8], ecx; mov [rsi+0x10], r8; ret; 
0x00000000044319: mov [rsi+0x8], edx; sub ecx, 0x1; jns short 0x00000000000442e9; xor eax, eax; ret; 
0x0000000013a69a: mov [rsi+0x8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x0000000013a6da: mov [rsi+0x8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000013a642: mov [rsi+0x8], rax; ret; 
0x000000000ee133: mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x00000000044318: mov [rsi+0x8], rdx; sub ecx, 0x1; jns short 0x00000000000442e9; xor eax, eax; ret; 
0x0000000012b0fa: mov [rsi+0xa], dx; ret; 
0x0000000012b0fb: mov [rsi+0xa], edx; ret; 
0x000000000449ad: mov [rsi+0xc], ax; mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x000000000449ae: mov [rsi+0xc], eax; mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x000000000449b6: mov [rsi+0xe], ax; xor eax, eax; ret; 
0x000000000449b7: mov [rsi+0xe], eax; xor eax, eax; ret; 
0x0000000010a183: mov [rsi+rcx], ebp; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000009ccb0: mov [rsi+rdx+0x1], al; jne short 0x000000000009cca0; ret; 
0x0000000009ccad: mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x000000000009cca0; ret; 
0x0000000017c105: mov [rsi-0x2], cx; ret; 
0x0000000017c106: mov [rsi-0x2], ecx; ret; 
0x0000000017c0f9: mov [rsi-0x4], ecx; ret; 
0x00000000076f43: mov [rsi-0x5], edx; jmp qword ptr [rsi+0xf]; 
0x00000000044967: mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x000000000f85a3: mov [rsi], ax; xor eax, eax; ret; 
0x0000000010dc0c: mov [rsi], cl; add al, ch; mov esp, 0xe9fff78b; ret far; 
0x00000000145846: mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x0000000008fe5f: mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000013be22: mov [rsi], eax; mov eax, 0x1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000520c8: mov [rsi], eax; mov eax, 0x1; ret; 
0x000000000522ce: mov [rsi], eax; mov eax, 0x2; ret; 
0x00000000044968: mov [rsi], eax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x0000000008e465: mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x0000000008782f: mov [rsi], eax; xor eax, eax; mov [r8], rdx; ret; 
0x0000000007fefb: mov [rsi], eax; xor eax, eax; ret; 
0x0000000008785f: mov [rsi], ebp; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000086934: mov [rsi], edi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000012278e: mov [rsi], edi; ret; 
0x000000001457e3: mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000ee131: mov [rsi], edx; mov [rsi+0x8], rcx; mov [rsi+0x10], r8; ret; 
0x00000000044616: mov [rsi], edx; ret; 
0x00000000145845: mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret; 
0x000000001055ae: mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000008782e: mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x0000000007fefa: mov [rsi], rax; xor eax, eax; ret; 
0x0000000008785e: mov [rsi], rbp; add rsp, 0x10; xor eax, eax; pop rbp; ret; 
0x00000000086933: mov [rsi], rdi; mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000012278d: mov [rsi], rdi; ret; 
0x000000000401b5: mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x0000000013f94c: mov [rsp+0x10], eax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000074123: mov [rsp+0x10], eax; mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000011110b: mov [rsp+0x10], eax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000103e41: mov [rsp+0x10], ebx; call rax; 
0x0000000007caa4: mov [rsp+0x10], ecx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000002d377: mov [rsp+0x10], edx; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x00000000074122: mov [rsp+0x10], r8; mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000013f94b: mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000011110a: mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000103e40: mov [rsp+0x10], rbx; call rax; 
0x0000000007caa3: mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000002d376: mov [rsp+0x10], rdx; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x000000000f8737: mov [rsp+0x138], ebp; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000f8735: mov [rsp+0x138], r13; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000f8736: mov [rsp+0x138], r13; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000f873e: mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x00000000041fc8: mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x000000000903c2: mov [rsp+0x14], eax; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x000000000903c1: mov [rsp+0x14], eax; mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x0000000009309c: mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x00000000144f88: mov [rsp+0x18], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144f87: mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000110e98: mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000110e94: mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x000000000999cf: mov [rsp+0x24], eax; add rsp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000942d0: mov [rsp+0x30], eax; mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x00000000093dc8: mov [rsp+0x30], eax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x00000000093dc7: mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000001396fb: mov [rsp+0x38], ebx; push qword ptr [rip+0x7fc83]; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000142ba7: mov [rsp+0x38], edx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000093dd2: mov [rsp+0x38], esp; syscall; 
0x00000000093dd1: mov [rsp+0x38], r12d; syscall; 
0x000000001396fa: mov [rsp+0x38], rbx; push qword ptr [rip+0x7fc83]; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000142ba6: mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000014be46: mov [rsp+0x40], eax; test rax, rax; je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x00000000142d67: mov [rsp+0x40], edx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000014be45: mov [rsp+0x40], rax; test rax, rax; je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x00000000142d66: mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000c6bb0: mov [rsp+0x48], esi; mov rsi, rdx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x000000000c6baf: mov [rsp+0x48], rsi; mov rsi, rdx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x000000000c6bb8: mov [rsp+0x58], esp; mov rdi, rbp; call rbx; 
0x000000000c6cb3: mov [rsp+0x58], esp; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000c6bb7: mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x000000000c6cb1: mov [rsp+0x58], r12; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000c6cb2: mov [rsp+0x58], r12; mov rsi, r15; mov rdi, rbp; call rbx; 
0x0000000013f14b: mov [rsp+0x60], eax; mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000005c013: mov [rsp+0x7], cl; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x0000000005c012: mov [rsp+0x7], r9b; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x000000000c7201: mov [rsp+0x88], eax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x000000000c7200: mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x0000000002d37c: mov [rsp+0x8], eax; cmovne rdi, r15; call rsi; 
0x0000000013b381: mov [rsp+0x8], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144b3a: mov [rsp+0x8], eax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000144c0a: mov [rsp+0x8], eax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000130a34: mov [rsp+0x8], eax; mov rcx, rax; call r12; 
0x00000000089751: mov [rsp+0x8], ebx; mov esi, 0x18; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x00000000125407: mov [rsp+0x8], ecx; mov rax, [rsp]; mov rdi, r12; call rax; 
0x0000000007caff: mov [rsp+0x8], ecx; mov rdi, r15; call rax; 
0x0000000006f021: mov [rsp+0x8], ecx; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e62d: mov [rsp+0x8], ecx; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000145357: mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x0000000002d2fa: mov [rsp+0x8], edx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000132419: mov [rsp+0x8], edx; test rdi, rdi; jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x00000000085ad4: mov [rsp+0x8], esi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000110a93: mov [rsp+0x8], esi; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12; 
0x0000000002d37b: mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x0000000013b380: mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144b39: mov [rsp+0x8], rax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000144c09: mov [rsp+0x8], rax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000130a33: mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x00000000089750: mov [rsp+0x8], rbx; mov esi, 0x18; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x0000000007cafe: mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000007cafd: mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x0000000006f020: mov [rsp+0x8], rcx; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e62c: mov [rsp+0x8], rcx; mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000002d2f9: mov [rsp+0x8], rdx; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000132418: mov [rsp+0x8], rdx; test rdi, rdi; jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x00000000085ad3: mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000110a92: mov [rsp+0x8], rsi; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12; 
0x0000000013a34f: mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x0000000013a350: mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x00000000142fab: mov [rsp+0xc8], edx; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142f01: mov [rsp+0xc8], edx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x00000000142faa: mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142f00: mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x00000000145598: mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000014534b: mov [rsp+0xc], eax; mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000145433: mov [rsp+0xc], eax; mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x0000000014c367: mov [rsp+0xc], eax; mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000103e35: mov [rsp+0xc], eax; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x00000000103e34: mov [rsp+0xc], r8d; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x000000000c6fe4: mov [rsp+0xd0], eax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x000000000c6fe3: mov [rsp+0xd0], rax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x00000000037e7e: mov [rsp+rbp*8], ebx; mov rax, [rax+r13*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x000000000402cd: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040384: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040211: mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040256: mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000402ce: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000040385: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040212: mov [rsp-0x10], eax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001097ec: mov [rsp-0x10], eax; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000040257: mov [rsp-0x10], eax; mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000055237: mov [rsp-0x10], eax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000191e74: mov [rsp-0x10], edx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000052208: mov [rsp-0x10], esi; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001097eb: mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000055236: mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000191e73: mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000052207: mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000fe9d8: mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x000000000fe9d0: mov [rsp-0x17], dx; mov rdx, r8; mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x000000000fe9d1: mov [rsp-0x17], edx; mov rdx, r8; mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x00000000052203: mov [rsp-0x18], eax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001097e7: mov [rsp-0x18], ecx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000052202: mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000001097e6: mov [rsp-0x18], rcx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000001097e2: mov [rsp-0x20], edx; mov [rsp-0x18], rcx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000001097e1: mov [rsp-0x20], rdx; mov [rsp-0x18], rcx; mov [rsp-0x10], r8; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000041116: mov [rsp-0x2], di; fldcw [rsp-0x2]; ret; 
0x00000000041117: mov [rsp-0x2], edi; fldcw [rsp-0x2]; ret; 
0x000000000fe5ed: mov [rsp-0x38], eax; cmp esi, 0x9; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x0000000010b23d: mov [rsp-0x38], eax; mov eax, 0x42; syscall; 
0x00000000100653: mov [rsp-0x38], eax; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000fe5ec: mov [rsp-0x38], rax; cmp esi, 0x9; je short 0x00000000000fe610; mov eax, 0x48; syscall; 
0x0000000010b23c: mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x00000000100652: mov [rsp-0x38], rax; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x0000000010b233: mov [rsp-0x40], eax; lea rax, [rsp-0x30]; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x0000000010b232: mov [rsp-0x40], rax; lea rax, [rsp-0x30]; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x0000000008b181: mov [rsp-0x8], edi; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000008b180: mov [rsp-0x8], rdi; xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000141a45: mov [rsp], eax; call qword ptr [rdx+0x20]; 
0x0000000005c018: mov [rsp], eax; mov rax, [rsp+0x10]; call rax; 
0x000000000c7b51: mov [rsp], ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000081618: mov [rsp], ecx; mov rdi, rbp; call rax; 
0x00000000085ad0: mov [rsp], edi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x000000000fa62b: mov [rsp], edi; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x00000000144b47: mov [rsp], edx; call qword ptr [rax+0x8]; 
0x00000000103e3d: mov [rsp], edx; mov [rsp+0x10], rbx; call rax; 
0x0000000009d6c2: mov [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x0000000005c017: mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x00000000141a44: mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000081617: mov [rsp], rcx; mov rdi, rbp; call rax; 
0x00000000081616: mov [rsp], rcx; mov rdi, rbp; call rax; 
0x00000000085acf: mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x000000000fa62a: mov [rsp], rdi; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x00000000144b46: mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000103e3c: mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x0000000013dd80: mov ah, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x0000000010a081: mov ah, 0x0; add [rax], al; syscall; 
0x000000000f8c13: mov ah, 0x1; add [rax], al; syscall; 
0x0000000013a2a7: mov ah, 0x24; add [rdx], ch; add [rax], al; call rcx; 
0x00000000139d3d: mov ah, 0x24; enter 0x0, 0x0; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x00000000139d36: mov ah, 0x24; enter 0x0, 0x0; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x000000000434e8: mov ah, 0x33; add al, 0x0; xor eax, eax; pop rbx; ret; 
0x0000000009bcda: mov ah, 0xd; add [rax-0x73], cl; add eax, 0xdb4cc; cmove rax, rdx; ret; 
0x000000000cfad5: mov ah, 0xd; add [rcx+0x146348c6], cl; mov bh, 0x48; add edx, edi; jmp rdx; 
0x0000000017ab88: mov ah, 0xf1; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000100c2d: mov ah, 0xf2; dec dword ptr [rax+0x1]; ret; 
0x0000000010ad69: mov ah, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x00000000099570: mov ah, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000000693c7: mov ah, 0xff; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000693c8: mov ah, 0xff; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000169a40: mov ah, [rsi+0xf]; je short 0x0000000000169a06; lea r10, [r10+r9]; jmp r10; 
0x0000000016a810: mov ah, [rsi+0xf]; je short 0x000000000016a7d6; lea r10, [r10+r9]; jmp r10; 
0x0000000016b850: mov ah, [rsi+0xf]; je short 0x000000000016b816; lea r10, [r10+r9]; jmp r10; 
0x0000000016d420: mov ah, [rsi+0xf]; je short 0x000000000016d3e6; lea r10, [r10+r9]; jmp r10; 
0x000000000f8adf: mov al, 0x0; add [rax], al; call qword ptr [rax+0x88]; 
0x00000000133a74: mov al, 0x0; add [rax], al; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x000000000f8a26: mov al, 0x0; add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000133a85: mov al, 0x0; add [rax], al; ret; 
0x00000000109e11: mov al, 0x0; add [rax], al; syscall; 
0x0000000016863c: mov al, 0x1; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000013ae34: mov al, 0x23; add [rax], al; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000013aded: mov al, 0x23; add [rax], al; pop rbp; jmp rcx; 
0x000000000fe643: mov al, 0x2; mov eax, [rsp-0x4c]; jne short 0x00000000000fe605; neg eax; ret; 
0x000000000b04cc: mov al, 0x4; add [rax], al; ret; 
0x000000000b00cc: mov al, 0x8; add [rax], al; ret; 
0x000000000fe614: mov al, 0xbe; adc [rax], al; add [rax], al; mov eax, 0x48; syscall; 
0x00000000101dfe: mov al, 0xf2; jmp qword ptr [rsi+0x2e]; 
0x0000000012f8db: mov al, 0xf5; jmp qword ptr [rsi-0x70]; 
0x0000000011b869: mov al, 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000010b0e5: mov al, 0xf7; dec dword ptr [rax-0x75]; and al, 0x8; add rsp, 0x38; ret; 
0x000000000bf6d5: mov al, 0xf; test cl, bl; add [rax], al; add [rbp-0x77], cl; ret; 
0x0000000007f433: mov al, 0xfb; jmp qword ptr [rsi+0x2e]; 
0x0000000012b105: mov al, 0xff; jmp qword ptr [rsi-0x3f]; 
0x00000000041370: mov al, [0x148c48148000000]; add [rax], al; ret; 
0x0000000014273f: mov al, [0x1f0fc35b000000]; mov rax, [rip+0xaa879]; pop rbx; ret; 
0x0000000007b073: mov al, [0x30788348000000]; je short 0x000000000007b080; ret; 
0x000000000e61dc: mov al, [0x38840fc084ffffe6]; add eax, [rax]; add [rax-0x7d], cl; ret; 
0x0000000003823e: mov al, [0x401f0ffffffebce9]; add [rax+0x63], cl; ret; 
0x0000000007b5d9: mov al, [0x415c415de0894c5b]; pop rbp; pop r14; ret; 
0x000000000d8edc: mov al, [0x46348f689000d28]; mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000142735: mov al, [0x480b74d03948000b]; add eax, 0xa0; pop rbx; ret; 
0x000000001426c5: mov al, [0x480b74d03948000b]; sub eax, 0xffffff80; pop rbx; ret; 
0x0000000007fc0d: mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x000000000d2a5b: mov al, [0x4820538948000000]; add esp, 0xd0; pop rbx; ret; 
0x0000000007faed: mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x0000000007d1c1: mov al, [0x485def8948000000]; mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000015709c: mov al, [0x4993146349000633]; lea edx, [rbx+rdx]; jmp rdx; 
0x00000000040e3c: mov al, [0x5b10c483480014f0]; ret; 
0x00000000142102: mov al, [0x5d5bc08944000000]; pop r12; pop r13; pop r14; ret; 
0x00000000038234: mov al, [0x658b4c4d74003880]; mov al, [0x401f0ffffffebce9]; add [rax+0x63], cl; ret; 
0x000000001773dc: mov al, [0x77f8c5237f7ec1c4]; ret; 
0x000000000f8a2d: mov al, [0x80bb8b48000000]; add [rax], al; call qword ptr [rax+0x88]; 
0x0000000008974c: mov al, [0x8245c8948fffb12]; mov esi, 0x18; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x0000000007034f: mov al, [0x852c8d4c000000]; add [rax], al; add [rax+0x29], cl; ret; 
0x0000000008913c: mov al, [0x893024448bfffff8]; ret; 
0x000000000afff4: mov al, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x000000000aff74: mov al, [0x8d49930c6349000f]; or al, 0xb; jmp rcx; 
0x000000000e728a: mov al, [0x8e0fc08545000000]; ret far; 
0x0000000009ed90: mov al, [0xa824ac8b4c000000]; add [rax], al; add [rax-0x77], cl; ret far; 
0x0000000010386c: mov al, [0xc00c764000e95]; add [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000770e2: mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x00000000132a00: mov al, [0xe8000c9ad03d8d48]; ret; 
0x00000000068365: mov al, [0xe900000000fffffa]; scasd [rdi]; ret; 
0x0000000014c73e: mov al, [0xef8948006a000003]; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x0000000018de98: mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d9e8: mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000013907a: mov al, [0xf63120438b480000]; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x00000000177987: mov al, [0xfec5c010447ffec5]; jg short 0x00000000001779d6; adc al, ah; vzeroupper; ret; 
0x000000001800b7: mov al, [0xfec5c010447ffec5]; jg short 0x0000000000180106; adc al, ah; vzeroupper; ret; 
0x0000000012b769: mov al, [0xfff59de898558944]; call far fword ptr [rdi+0x4c]; 
0x000000000ea734: mov al, [0xfff842e902000000]; jmp qword ptr [rsi-0x70]; 
0x000000000f96c1: mov al, [rax]; add [rax], al; syscall; 
0x00000000168462: mov al, [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000166596: mov al, [rcx+0x2]; mov [rdx+0x2], al; lea rax, [rdx+0x2]; ret; 
0x000000000ac43b: mov al, [rcx+0x2]; mov [rdx+0x2], al; mov rax, rdi; ret; 
0x000000001665c4: mov al, [rcx+0x4]; mov [rdx+0x4], al; lea rax, [rdx+0x4]; ret; 
0x000000000ac469: mov al, [rcx+0x4]; mov [rdx+0x4], al; mov rax, rdi; ret; 
0x000000000ac4ed: mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x00000000166570: mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000ac415: mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x000000000d3862: mov al, [rdi]; add [rcx+rcx*4-0x8], cl; call rax; 
0x00000000187d62: mov al, [rdx]; add [rax], al; ret; 
0x00000000170c90: mov al, ch; stc; je short 0x0000000000170c56; lea r10, [r10+r9]; jmp r10; 
0x00000000172320: mov al, ch; stc; je short 0x00000000001722e6; lea r10, [r10+r9]; jmp r10; 
0x0000000003823d: mov al, gs:[0x401f0ffffffebce9]; add [rax+0x63], cl; ret; 
0x000000001665d4: mov ax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000ac489: mov ax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x000000000ac50d: mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x00000000166580: mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x000000000ac425: mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x0000000009c19b: mov bh, 0x0; add [rax-0x73], cl; adc eax, 0xc24ab; cmovne rax, rdx; ret; 
0x0000000009c0fb: mov bh, 0x0; add [rax-0x73], cl; adc eax, 0xc253b; cmovne rax, rdx; ret; 
0x0000000008898a: mov bh, 0x10; lock xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x000000001876e1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000001766d1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x00000000187e61: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x00000000176db1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x0000000018a301: mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001754d1: mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000159951: mov bh, 0x16; mov [rdi], dx; ret; 
0x00000000174c41: mov bh, 0x16; mov [rdi], dx; vzeroupper; ret; 
0x00000000041664: mov bh, 0x1a; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000004169c: mov bh, 0x1a; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000018f5d0: mov bh, 0x2; add [rax+0x63], cl; sbb al, 0x99; add rcx, rbx; jmp rcx; 
0x0000000018f584: mov bh, 0x2; add [rax-0x7d], cl; ret far; 
0x000000000b4582: mov bh, 0x36; mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x0000000003a3b6: mov bh, 0x44; mov eax, [rdx+rax]; mov eax, r8d; ret; 
0x0000000012b60b: mov bh, 0x48; add ecx, edi; jmp rcx; 
0x000000000cfadd: mov bh, 0x48; add edx, edi; jmp rdx; 
0x000000000cfb45: mov bh, 0x48; add esi, edi; jmp rsi; 
0x0000000017c358: mov bh, 0x48; lea eax, [rdi+0x7]; ret; 
0x0000000003a5df: mov bh, 0x4; js short 0x000000000003a566; loopne 0x000000000003a5ed; ret; 
0x0000000003a61f: mov bh, 0x4; js short 0x000000000003a5a6; loopne 0x000000000003a627; ret; 
0x0000000003a6bf: mov bh, 0x4; js short 0x000000000003a646; loopne 0x000000000003a6c9; ret; 
0x0000000003a63f: mov bh, 0x4; js short 0x000000000003a668; add [rax], cl; add [rax], al; ret; 
0x0000000003a65f: mov bh, 0x4; js short 0x000000000003a688; add [rdx], al; add [rax], al; ret; 
0x0000000003a6df: mov bh, 0x4; js short 0x000000000003a708; add [rax], ah; add [rax], al; ret; 
0x0000000003a79f: mov bh, 0x4; js short 0x000000000003a726; loopne 0x000000000003a7a6; ret; 
0x0000000003a6ff: mov bh, 0x4; js short 0x000000000003a728; add [rcx], al; add [rax], al; ret; 
0x0000000003a71f: mov bh, 0x4; js short 0x000000000003a748; add [rax], dl; add [rax], al; ret; 
0x0000000003a818: mov bh, 0x4; js short 0x000000000003a79f; loopne 0x000000000003a81f; ret; 
0x0000000003a828: mov bh, 0x4; js short 0x000000000003a7af; loopne 0x000000000003a836; ret; 
0x0000000003a858: mov bh, 0x4; js short 0x000000000003a7df; loopne 0x000000000003a860; ret; 
0x0000000003a8e8: mov bh, 0x4; js short 0x000000000003a86f; loopne 0x000000000003a8f2; ret; 
0x0000000003a868: mov bh, 0x4; js short 0x000000000003a891; add [rax], cl; add [rax], al; ret; 
0x0000000003a888: mov bh, 0x4; js short 0x000000000003a8b1; add [rdx], al; add [rax], al; ret; 
0x0000000003a8f8: mov bh, 0x4; js short 0x000000000003a921; add [rax], ah; add [rax], al; ret; 
0x0000000003a918: mov bh, 0x4; js short 0x000000000003a941; add [rcx], al; add [rax], al; ret; 
0x0000000003a938: mov bh, 0x4; js short 0x000000000003a961; add [rax], dl; add [rax], al; ret; 
0x0000000010c796: mov bh, 0x4; js short 0x000000000010c71d; loopne 0x000000000010c7a4; ret; 
0x0000000010c8b6: mov bh, 0x4; js short 0x000000000010c83d; loopne 0x000000000010c8bd; ret; 
0x0000000010c946: mov bh, 0x4; js short 0x000000000010c8cd; loopne 0x000000000010c94e; ret; 
0x0000000010ca66: mov bh, 0x4; js short 0x000000000010ca8f; add [rdx], al; add [rax], al; ret; 
0x0000000010cc16: mov bh, 0x4; js short 0x000000000010cb9d; loopne 0x000000000010cc20; ret; 
0x0000000010cca6: mov bh, 0x4; js short 0x000000000010cccf; add [rax], ah; add [rax], al; ret; 
0x0000000010cd2e: mov bh, 0x4; js short 0x000000000010cd57; add [rcx], al; add [rax], al; ret; 
0x0000000010cdc6: mov bh, 0x4; js short 0x000000000010cdef; add [rax], dl; add [rax], al; ret; 
0x0000000010d0df: mov bh, 0x4; js short 0x000000000010d066; loopne 0x000000000010d0ed; ret; 
0x0000000010d1df: mov bh, 0x4; js short 0x000000000010d166; loopne 0x000000000010d1e6; ret; 
0x0000000010d25f: mov bh, 0x4; js short 0x000000000010d1e6; loopne 0x000000000010d267; ret; 
0x0000000010d35f: mov bh, 0x4; js short 0x000000000010d388; add [rdx], al; add [rax], al; ret; 
0x0000000010d4df: mov bh, 0x4; js short 0x000000000010d466; loopne 0x000000000010d4e9; ret; 
0x0000000010d55f: mov bh, 0x4; js short 0x000000000010d588; add [rax], ah; add [rax], al; ret; 
0x0000000010d5d7: mov bh, 0x4; js short 0x000000000010d600; add [rcx], al; add [rax], al; ret; 
0x0000000010d64f: mov bh, 0x4; js short 0x000000000010d678; add [rax], dl; add [rax], al; ret; 
0x000000001155c3: mov bh, 0x4; push rax; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000124581: mov bh, 0x4e; adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d]; 
0x000000000a14e2: mov bh, 0x54; and al, 0xc; mov [rdi+0x4], dx; ret; 
0x000000000a1597: mov bh, 0x54; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000a1674: mov bh, 0x54; and al, 0xec; mov [rdi+0x4], dx; ret; 
0x00000000086095: mov bh, 0x62; cli; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000144d41: mov bh, 0x6; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000145601: mov bh, 0x6; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000000f85a1: mov bh, 0x7; mov [rsi], ax; xor eax, eax; ret; 
0x000000000d34b0: mov bh, 0x99; cmc; jmp qword ptr [rsi+0x2e]; 
0x000000000f3d92: mov bh, 0xb; add cl, ch; jno short 0x00000000000f3d8d; jmp qword ptr [rsi+0xf]; 
0x0000000012c6ae: mov bh, 0xc0; ret; 
0x000000001876f1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001888d1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000174c51: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x0000000018b2d1: mov bh, 0xe; movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x000000000d0ae6: mov bh, 0xf5; jmp far fword ptr [rcx]; 
0x00000000117d84: mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000010af1c: mov bh, 0xff; lea rax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x00000000179176: mov bh, bl; shr eax, 0x2; vzeroupper; ret; 
0x0000000006cdd0: mov bl, 0x0; add [rax+0x39], cl; ret; 
0x0000000010a114: mov bl, 0x0; add [rax], al; syscall; 
0x0000000017dc4e: mov bl, 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000109c13: mov bl, 0x1; add [rax], al; syscall; 
0x00000000041ab4: mov bl, 0x1a; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000041e4f: mov bl, 0x1a; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000041e13: mov bl, 0x1a; add bl, al; nop [rax+rax]; mov eax, [rip+0x1ab39e]; ret; 
0x0000000003aa31: mov bl, 0x23; sbb eax, [rax]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x000000000b5159: mov bl, 0x33; or al, 0x0; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x00000000128634: mov bl, 0x41; mov byte ptr [rcx], 0x0; ret; 
0x0000000006d767: mov bl, 0x48; mov ecx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000188fa5: mov bl, 0x55; and [rdi], bh; ret; 
0x0000000018bec5: mov bl, 0x55; and [rdi], bl; ret; 
0x00000000086e5d: mov bl, 0x5b; ret; 
0x0000000018909f: mov bl, 0x5d; and [rdi], bh; ret; 
0x0000000018bfbf: mov bl, 0x5d; and [rdi], bl; ret; 
0x00000000095199: mov bl, 0x5f; cld; call far fword ptr [rax+0x48]; 
0x0000000018d520: mov bl, 0x62; mov bl, 0x7d; and [rdi], bl; ret; 
0x00000000179449: mov bl, 0x7; add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000187407: mov bl, 0x7d; and [rdi], bh; ret; 
0x0000000018c471: mov bl, 0x7d; and [rdi], bl; ret; 
0x00000000186142: mov bl, 0x7d; and [rsi], bh; ret; 
0x000000000f8a2c: mov bl, 0xa0; add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000012f1ac: mov bl, 0xf0; call qword ptr [rax+0x53555441]; 
0x00000000100cbd: mov bl, 0xf2; dec dword ptr [rax+0x1]; ret; 
0x0000000010ae21: mov bl, 0xf7; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x000000000bf1e4: mov bl, 0xf7; jmp qword ptr [rsi+0xf]; 
0x0000000018d050: mov bl, 0xf; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x00000000094916: mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x0000000008678e: mov byte ptr [0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x0000000008625b: mov byte ptr [0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000000a123d: mov byte ptr [r10], 0x0; mov [r11], rdx; mov rax, r12; pop r12; ret; 
0x00000000100487: mov byte ptr [r12], 0x0; mov rax, r12; pop r12; ret; 
0x0000000003750c: mov byte ptr [r12], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x000000001233a8: mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000128ad2: mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000128ae6: mov byte ptr [r8], 0x0; ret; 
0x00000000128635: mov byte ptr [r9], 0x0; ret; 
0x000000001233a9: mov byte ptr [rax+0x2], 0x0; ret; 
0x00000000093ea6: mov byte ptr [rax+0x75], 0x16; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x0000000017d867: mov byte ptr [rax+0x75], 0xc5; movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x0000000008618e: mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000004e001: mov byte ptr [rax+rdx], 0x0; ret; 
0x000000000d0ae2: mov byte ptr [rax-0x18], 0xe7; mov bh, 0xf5; jmp far fword ptr [rcx]; 
0x0000000002fd53: mov byte ptr [rax-0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000128ad3: mov byte ptr [rax], 0x0; mov rax, r10; ret; 
0x00000000108b5a: mov byte ptr [rax], 0x0; mov rax, r12; pop r12; ret; 
0x0000000010520f: mov byte ptr [rax], 0x0; mov rax, rbx; pop rbx; ret; 
0x000000000a1550: mov byte ptr [rax], 0x0; ret; 
0x00000000110cc2: mov byte ptr [rax], 0x20; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009aa58: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009aa10; ret; 
0x0000000009ab68: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009ab20; ret; 
0x0000000009ac08: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009abc0; ret; 
0x0000000009afd8: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009af90; ret; 
0x0000000009b108: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009b0c0; ret; 
0x0000000009bfb8: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009bf70; ret; 
0x0000000009c048: mov byte ptr [rax], 0x8; add [rax], al; jne short 0x000000000009c000; ret; 
0x00000000110c7a: mov byte ptr [rax], 0xa; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f85b7: mov byte ptr [rax], 0xff; jne short 0x00000000000f85c1; mov [rdi], si; xor eax, eax; ret; 
0x00000000086847: mov byte ptr [rbp+0x31], 0xd2; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000010b83d: mov byte ptr [rbp-0x689], 0x73; syscall; 
0x0000000010b836: mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x0000000005562f: mov byte ptr [rbp], 0x0; add rsp, 0x440; mov rax, rbp; pop rbp; ret; 
0x00000000106139: mov byte ptr [rbx+0x148], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000105ebf: mov byte ptr [rbx+0x88], 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000eeed5: mov byte ptr [rbx+rbp-0x1], 0x0; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000124920: mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x00000000137447: mov byte ptr [rcx], 0x0; mov eax, 0x0; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x0000000011c8c8: mov byte ptr [rcx], 0x0; pop r12; pop r13; ret; 
0x00000000128636: mov byte ptr [rcx], 0x0; ret; 
0x0000000018a2f5: mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000001754c5: mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000001876f6: mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001766e6: mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001888d6: mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000018b1a6: mov byte ptr [rdi+0x2], 0x0; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x00000000174c56: mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x0000000018a3ee: mov byte ptr [rdi+0x41], 0x0; ret; 
0x00000000175596: mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x0000000018a453: mov byte ptr [rdi+0x80], 0x0; ret; 
0x000000001755eb: mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x000000000555a6: mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000df300: mov byte ptr [rdi+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000df2b5: mov byte ptr [rdi+0x8], 0x16; mov eax, 0x1; ret; 
0x000000000df287: mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x000000000df31a: mov byte ptr [rdi+0x8], 0x1; mov [rdi], al; mov eax, 0x1; ret; 
0x000000000df2eb: mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x000000000df2a5: mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x000000000df330: mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df340: mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000df355: mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000df2c0: mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x00000000133903: mov byte ptr [rdi+0xbc], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000018a322: mov byte ptr [rdi+r8], 0x0; ret; 
0x000000001754f2: mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000018a323: mov byte ptr [rdi+rax], 0x0; ret; 
0x000000001754f3: mov byte ptr [rdi+rax], 0x0; vzeroupper; ret; 
0x00000000123116: mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000000a1600: mov byte ptr [rdi], 0x0; lea rax, [rdi+rax-0x1]; ret; 
0x00000000187661: mov byte ptr [rdi], 0x0; lea rax, [rdi]; ret; 
0x00000000176651: mov byte ptr [rdi], 0x0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000a11d7: mov byte ptr [rdi], 0x0; mov [r8], rax; mov rax, r9; ret; 
0x000000001014a3: mov byte ptr [rdi], 0x0; mov byte ptr [rip+0xf4b63], 0x23; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000188841: mov byte ptr [rdi], 0x0; ret; 
0x0000000018afcd: mov byte ptr [rdi], 0x0; sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x000000000018b420; ret; 
0x00000000174bc1: mov byte ptr [rdi], 0x0; vzeroupper; ret; 
0x00000000181e65: mov byte ptr [rdi], 0x0; xtest; je short 0x0000000000181e71; vzeroall; ret; 
0x00000000182215: mov byte ptr [rdi], 0x0; xtest; je short 0x0000000000182221; vzeroall; ret; 
0x00000000182ad5: mov byte ptr [rdi], 0x0; xtest; je short 0x0000000000182ae1; vzeroall; ret; 
0x000000000df2f5: mov byte ptr [rdi], 0x5b; ret; 
0x000000000a1118: mov byte ptr [rdx-0x1], 0x0; mov [rdi], rdx; ret; 
0x000000000c46d6: mov byte ptr [rdx-0x2dceffee], 0xe8; jmp qword ptr [rdi+rdi*8]; 
0x000000000a123e: mov byte ptr [rdx], 0x0; mov [r11], rdx; mov rax, r12; pop r12; ret; 
0x0000000013283e: mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x00000000132837: mov byte ptr [rip+0xc5b7c], 0x0; mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000001327ee: mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x000000001327e7: mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x00000000132797: mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x00000000132790: mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x00000000132740: mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x00000000132739: mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326e9: mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x000000001326e2: mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x000000001014a6: mov byte ptr [rip+0xf4b63], 0x23; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x00000000144490: mov byte ptr [rsi+r9], 0x0; ret; 
0x00000000144491: mov byte ptr [rsi+rcx], 0x0; ret; 
0x00000000101436: mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x000000001014b0: mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000006f4c8: mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000006df00: mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x00000000089ec0: mov byte ptr [rsp+0x6f], 0x0; mov rdx, rbx; mov eax, 0xe; lea rsi, [rip+0x11f52c]; syscall; 
0x00000000100488: mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x0000000003750d: mov byte ptr [rsp], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000008678d: mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x0000000008625a: mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x0000000006c697: mov ch, 0x10; idiv edi; inc dword ptr [rax-0x8ac43]; call far fword ptr [rax+0x44]; 
0x00000000073371: mov ch, 0x17; add [rax-0x77], cl; ret; 
0x000000000fad92: mov ch, 0x66; nop [rax+rax]; nop [rax]; mov eax, 0x5c; syscall; 
0x0000000017a386: mov ch, 0x6; add [rax], al; xor eax, eax; ret; 
0x00000000173d89: mov ch, 0x74; fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x00000000178c10: mov ch, 0x76; fcmovnb st, st(5); std; xlat [rbx]; ret; 
0x0000000007e59e: mov ch, 0xe5; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000017aa87: mov ch, 0xf2; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000e0dcc: mov ch, 0xf4; call qword ptr [rax-0x17c574b8]; 
0x000000001386de: mov ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000000619c7: mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000c5f90: mov ch, dh; and ch, 0xf; je short 0x00000000000c5fb0; add rax, 0x2; ret; 
0x00000000109ed1: mov cl, 0x0; add [rax], al; syscall; 
0x000000000ca3b4: mov cl, 0x12; add [rbp+0x4c0d75c0], al; mov eax, eax; add rsp, 0x8; ret; 
0x0000000004301c: mov cl, 0x15; data16 ret far; 
0x000000000d5a87: mov cl, 0x15; ret far; 
0x0000000002ed27: mov cl, 0x15; ret; 
0x00000000086419: mov cl, 0x17; jne short 0x0000000000086453; xor eax, eax; ret; 
0x0000000008b3a8: mov cl, 0x17; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x0000000008e0d4: mov cl, 0x17; jne short 0x000000000008e0ba; mov qword ptr fs:[0x2f0], 0x0; xor eax, eax; ret; 
0x000000000911de: mov cl, 0x17; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x000000000865a8: mov cl, 0x17; setne al; movzx eax, al; ret; 
0x00000000041cb4: mov cl, 0x1a; add [rdi+rax*8], ah; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000141e5b: mov cl, 0x2a; add [rax], al; call qword ptr [rax]; 
0x00000000131b9c: mov cl, 0x48; shr edx, 0x3; add rax, rcx; jmp rax; 
0x0000000016f51b: mov cl, 0x4d; hlt; call qword ptr [rax+0xf003e80]; 
0x0000000008b193: mov cl, 0x54; and al, 0xf8; ret; 
0x000000000911a8: mov cl, 0x55; add [rbp+0xb], dh; xor eax, eax; pop rbp; ret; 
0x000000000b4c83: mov cl, 0x74; loop 0x00000000000b4c4a; nop [rax+rax]; xor eax, eax; ret; 
0x000000000b4e13: mov cl, 0x80; adc eax, [rax]; mov rax, [rax+0x218]; ret; 
0x0000000008b4ee: mov cl, 0x90; ret; 
0x0000000010c592: mov cl, 0xa; add al, ch; jbe short 0x000000000010c577; bnd jmp qword ptr [rsi+0xf]; 
0x00000000041c5b: mov cl, 0xb1; sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000008d8eb: mov cl, 0xc0; adc [rax], eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000001095cb: mov cl, 0xcb; idiv edi; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000108e7b: mov cl, 0xd; call rdx; 
0x0000000014a23f: mov cl, 0xd; jmp qword ptr [rsi]; 
0x000000000440a3: mov cl, 0xd; pop rdi; ret; 
0x0000000014bce0: mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x000000000c4aa4: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac4: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae4: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b04: mov cl, 0xee; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x00000000121202: mov cl, 0xf0; dec dword ptr [rax-0x7d]; ret; 
0x00000000121223: mov cl, 0xf0; jmp qword ptr [rsi+0x2e]; 
0x0000000010b029: mov cl, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x00000000193110: mov cl, 0xf9; jmp qword ptr [rsi+0x2e]; 
0x0000000009060d: mov cl, 0xf; jne short 0x0000000000090618; xor eax, eax; ret; 
0x00000000090449: mov cl, 0xf; mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000062794: mov cl, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000133a98: mov cl, [rax+rax]; add [rax], al; add [rax], al; ret; 
0x0000000010ce80: mov cl, [rbx-0x367acef4]; jne short 0x000000000010ce90; ret; 
0x0000000010d697: mov cl, [rbx-0x367acef4]; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e4: mov cl, [rbx-0x367acef4]; jne short 0x000000000010d6f0; ret; 
0x000000000a7865: mov cl, [rbx-0x37d67dfc]; ret; 
0x000000000a1a94: mov cl, [rdi-0x73]; adc al, 0xa; jmp r10; 
0x000000000b1e44: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b0654: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000b0728: mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b0829: mov cl, [rsi+0x20]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x0000000018b36d: mov cl, [rsi+0x40]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x0000000017ba40: mov cl, [rsi]; mov [rdi], cl; ret; 
0x000000000c5f7b: mov cl, dl; and cl, 0xf; je short 0x00000000000c5fa0; ret; 
0x0000000017ba2e: mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x0000000017ba2d: mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x000000000b1004: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e64: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af994: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000afa78: mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000001539b4: mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000001598e4: mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x000000000b0ea0: mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000af8a0: mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000b0570: mov cx, [rsi]; mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x00000000081eed: mov dh, 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000080753: mov dh, 0x0; ret; 
0x00000000187e51: mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000176da1: mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x0000000018a2f1: mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000001754c1: mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000001599c1: mov dh, 0x16; mov [rdi], dl; ret; 
0x00000000176071: mov dh, 0x16; mov [rdi], dl; vzeroupper; ret; 
0x000000000a5324: mov dh, 0x16; sub eax, edx; ret; 
0x0000000003f5ed: mov dh, 0x17; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x0000000006178c: mov dh, 0x18; add [rbx-0x5ef43], cl; jmp qword ptr [rcx+rcx*4+0x38]; 
0x00000000041724: mov dh, 0x1a; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000012b7de: mov dh, 0x1c; or [rax], al; add rdi, r8; jmp rdi; 
0x0000000009bf86: mov dh, 0x34; add [rax], eax; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x0000000002d12e: mov dh, 0x35; sbb al, 0x0; ret; 
0x00000000083c25: mov dh, 0x37; lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x0000000012b311: mov dh, 0x42; add al, [rbx+0x283c78e0]; jne short 0x000000000012b2f3; mov eax, 0x1; ret; 
0x0000000003dc5b: mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x00000000189140: mov dh, 0x44; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000005f91a: mov dh, 0x45; add [rax-0x7d], cl; ret; 
0x000000000db422: mov dh, 0x47; add [rax-0x7d], ecx; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret; 
0x0000000017d821: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017a301: mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx]; 
0x0000000017a0b4: mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx]; 
0x0000000017d811: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d801: mov dh, 0x47; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7f1: mov dh, 0x47; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000006bf7e: mov dh, 0x47; or al, 0x83; ret; 
0x0000000007397e: mov dh, 0x4; adc [rdx+0x1], bh; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000013cbbb: mov dh, 0x4; add cl, [rax+0x3948ff47]; iretd; jne short 0x000000000013cbb0; ret; 
0x00000000073b01: mov dh, 0x4; or [rax+0x63], cl; add al, 0x86; add rax, rdi; jmp rax; 
0x00000000073204: mov dh, 0x4; or [rcx+0x63], cl; add al, 0x83; add rax, rdi; jmp rax; 
0x000000000ed1fa: mov dh, 0x4a; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx; 
0x00000000113bb1: mov dh, 0x4b; add [rax-0x7d], ecx; ret; 
0x0000000017a305: mov dh, 0x4e; jmp far fword ptr [rcx]; 
0x0000000003864c: mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x000000000db781: mov dh, 0x53; add ecx, [rax-0x7d]; ret; 
0x000000000a1503: mov dh, 0x54; and al, 0x16; mov [rdi+0x6], dl; ret; 
0x000000000a15b0: mov dh, 0x54; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000a1695: mov dh, 0x54; and al, 0xe; mov [rdi+0x6], dl; ret; 
0x000000000a1587: mov dh, 0x54; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000a14ca: mov dh, 0x54; and al, 0xf4; mov [rdi+0x4], dl; ret; 
0x000000000a1569: mov dh, 0x54; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000000a14ac: mov dh, 0x54; and al, 0xfa; mov [rdi+0x2], dl; ret; 
0x00000000189145: mov dh, 0x54; cmp ah, [rax]; sub eax, edx; ret; 
0x0000000016f846: mov dh, 0x54; cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000017d825: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000017d815: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x0000000017a0b8: mov dh, 0x56; jmp far fword ptr [rcx]; 
0x0000000017d805: mov dh, 0x56; sub eax, edx; ret; 
0x0000000017d7f5: mov dh, 0x56; sub eax, edx; ret; 
0x000000000ecae1: mov dh, 0x57; xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x0000000006e6a5: mov dh, 0x58; add [rax-0x7bf0d505], eax; call qword ptr [rdx]; 
0x000000000e87ba: mov dh, 0x58; cmp dh, dh; ret; 
0x0000000010b124: mov dh, 0x66; nop [rax+rax]; nop; mov eax, 0x44; syscall; 
0x00000000147ebf: mov dh, 0x6; add al, ch; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x000000001456e1: mov dh, 0x6; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000060e8b: mov dh, 0x6b; add [rax-0x7d], ecx; ret; 
0x00000000113b91: mov dh, 0x73; add [rax-0x73], ecx; add [r8-0x77], rcx; ret far; 
0x00000000113311: mov dh, 0x73; add [rax-0x7d], ecx; ret; 
0x000000000c9104: mov dh, 0x78; add eax, 0x4a3d0348; ret; 
0x00000000131c2c: mov dh, 0x7; add eax, ecx; sub rdx, 0x1; jne short 0x0000000000131bb8; ret; 
0x00000000179461: mov dh, 0x7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000a5321: mov dh, 0x7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000a2e44: mov dh, 0x7; sub eax, ecx; ret; 
0x0000000016fe94: mov dh, 0x7; sub eax, ecx; vzeroupper; ret; 
0x000000000d90bc: mov dh, 0x7; test al, al; jne short 0x00000000000d909f; xor eax, eax; ret; 
0x000000000ee1ec: mov dh, 0x7; test al, al; jne short 0x00000000000ee1cf; xor eax, eax; ret; 
0x000000000d90d9: mov dh, 0x7; test al, al; mov eax, 0x0; cmovne rax, rdi; ret; 
0x000000000c908f: mov dh, 0x7c; fadd st, dword ptr [rip-0x41c2fcb8]; ret; 
0x0000000004f0cb: mov dh, 0x84; and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret; 
0x000000000e6949: mov dh, 0x8b; pop rax; or bh, dh; ret; 
0x000000000b55f6: mov dh, 0x95; or al, 0x0; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000f38ec: mov dh, 0x9d; ret; 
0x000000000a110a: mov dh, 0xa; test cl, cl; jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x0000000010aec6: mov dh, 0xb2; idiv edi; mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x00000000128e20: mov dh, 0xc0; add rsp, 0x100; pop rbp; ret; 
0x0000000013c071: mov dh, 0xc0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000091973: mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x000000000c477c: mov dh, 0xc0; lea eax, [rax+rax-0x1]; ret; 
0x000000000d863f: mov dh, 0xc0; lea rax, [rax+rax-0x1]; ret; 
0x00000000086788: mov dh, 0xc0; mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000086255: mov dh, 0xc0; mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000000f5ba2: mov dh, 0xc0; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax; 
0x00000000127f58: mov dh, 0xc0; movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x000000000f6f78: mov dh, 0xc0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000757e8: mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000082587: mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000005d46e: mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d08b: mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000005c138: mov dh, 0xc0; neg eax; pop rbp; ret; 
0x0000000002d8d9: mov dh, 0xc0; neg eax; ret; 
0x00000000128948: mov dh, 0xc0; pop r12; pop r13; ret; 
0x0000000013bde1: mov dh, 0xc0; pop rbp; pop r12; pop r13; ret; 
0x0000000013aed0: mov dh, 0xc0; pop rbp; pop r12; ret; 
0x00000000128d99: mov dh, 0xc0; pop rbp; ret; 
0x00000000091deb: mov dh, 0xc0; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807da: mov dh, 0xc0; pop rbx; neg eax; ret; 
0x0000000010103e: mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000128ecd: mov dh, 0xc0; pop rbx; ret; 
0x00000000041c8c: mov dh, 0xc0; ret; 
0x000000000a5344: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000fb41f: mov dh, 0xc0; sbb eax, 0x0; ret; 
0x000000000fbf34: mov dh, 0xc0; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x0000000009190e: mov dh, 0xc0; sub eax, 0x2; add rsp, 0x8; ret; 
0x00000000082da0: mov dh, 0xc3; pop rbx; pop rbp; pop r12; ret; 
0x00000000144dfa: mov dh, 0xc5; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000b4b2e: mov dh, 0xc6; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x0000000002fd52: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000033181: mov dh, 0xc; xor al, [rcx-0x77]; ret far; 
0x000000000cd530: mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cd563: mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000cb75c: mov dh, 0xd2; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x0000000004e2a5: mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x000000000f7454: mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000a534a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000108a55: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000cfb3d: mov dh, 0xd; add [rcx+0x346348c6], cl; mov bh, 0x48; add esi, edi; jmp rsi; 
0x0000000003ee46: mov dh, 0xdb; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000005d2c8: mov dh, 0xe4; mov r9, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000005d805: mov dh, 0xe4; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000018f381: mov dh, 0xe7; add rax, rdx; jmp rax; 
0x000000000b4559: mov dh, 0xe; mov [rdi], cl; ret; 
0x000000000a2e41: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000016fe91: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000179464: mov dh, 0xe; sub eax, ecx; ret; 
0x000000000e277d: mov dh, 0xed; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e2712: mov dh, 0xed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x00000000140cdc: mov dh, 0xee; call qword ptr [rax-0x17ff8275]; 
0x0000000012b606: mov dh, 0xf0; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x00000000110b2f: mov dh, 0xf2; test byte ptr [r8+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x000000000e0cfe: mov dh, 0xf4; dec dword ptr [rax-0x7d]; ret; 
0x00000000117da1: mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000e2864: mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000012b4ff: mov dh, 0xf8; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x00000000090cc6: mov dh, 0xf9; dec dword ptr [rax-0x77]; ret; 
0x00000000128d19: mov dh, 0xf; test rcx, rcx; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x00000000080ae2: mov dh, 0xfa; dec dword ptr [rax-0x77]; ret; 
0x00000000117d3d: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000001386f7: mov dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001386f6: mov dh, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000088d12: mov dh, [rcx-0x1]; jmp qword ptr [rsi+0x2e]; 
0x00000000179175: mov dil, r11b; shr eax, 0x2; vzeroupper; ret; 
0x0000000010a0e4: mov dl, 0x0; add [rax], al; syscall; 
0x0000000011645a: mov dl, 0x2c; idiv bh; add rsp, 0xd8; ret; 
0x0000000016843a: mov dl, 0x3; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000010ce98: mov dl, 0x3; add al, 0xa; ret; 
0x000000000d86ee: mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000041e12: mov dl, 0xb3; sbb al, [rax]; ret; 
0x00000000128d1f: mov dl, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000009befa: mov dl, 0xd; add [rax-0x73], cl; add eax, 0xdb28c; cmove rax, rdx; ret; 
0x000000000cfaaf: mov dl, 0xd; add [rcx+0x46348ca], cl; xchg esi, eax; add rax, rsi; jmp rax; 
0x00000000192bac: mov dl, 0xe9; dec dword ptr [rax-0x7d]; ret; 
0x0000000009bdd2: mov dl, 0xe; add [rax-0x73], cl; add eax, 0xeb2a4; cmove rax, rdx; ret; 
0x000000000c4409: mov dl, 0xe; add al, ch; jmp qword ptr [rax-0x9]; 
0x000000001410f5: mov dl, 0xee; dec dword ptr [rax-0x77]; ret; 
0x000000000d104b: mov dl, 0xf5; jmp far fword ptr [rcx]; 
0x0000000010aec7: mov dl, 0xf7; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000695b3: mov dl, 0xff; jmp qword ptr [rsi+0x2e]; 
0x00000000040625: mov dl, [rdi]; add dl, dh; mulps xmm0, xmm1; ret; 
0x000000000951a2: mov dl, [rip+0x39485a00]; ret; 
0x00000000094899: mov dl, [rip-0x6f993d00]; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x0000000009489a: mov dl, [rip-0x6f993d00]; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x0000000003e152: mov dl, [rip-0x76b3fffb]; loopne 0x000000000003e1b7; pop r12; pop r13; ret; 
0x000000000b06a7: mov dl, [rsi+0x14]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000b1cd3: mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; lea rax, [rdi+0x3]; ret; 
0x000000000b0573: mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000b1d02: mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; lea rax, [rdi+0x5]; ret; 
0x000000000b0592: mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000b1d53: mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; lea rax, [rdi+0x9]; ret; 
0x000000000b05d3: mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000001535f0: mov dl, [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000000b1cb0: mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000000b0550: mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000b38e0: mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+0x1], ch; ret; 
0x00000000063f1c: mov ds, [rax]; add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000001543ee: mov ds, [rbp+0x6]; add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x00000000108b7e: mov ds, [rcx]; jmp qword ptr [rsi+0x2e]; 
0x000000000bb548: mov ds, [rip-0x72fffffd]; dec dword ptr [r8+0x63]; ret far; 
0x0000000012d140: mov ds, bx; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000008e0da: mov dword ptr [0x2f0], 0x0; xor eax, eax; ret; 
0x00000000142464: mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x000000000443bc: mov dword ptr [r11], 0x0; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000140ded: mov dword ptr [r15+0x58], 0x0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000087e5e: mov dword ptr [r8+0x10], 0x0; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x0000000013dcf0: mov dword ptr [r8+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000013dce0: mov dword ptr [r8+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000086e33: mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000881ea: mov dword ptr [r8+rdx*4+0x8], 0x0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x00000000087e6e: mov dword ptr [r8], 0x0; syscall; 
0x000000000868fd: mov dword ptr [rax+0x1018], 0x0; ret; 
0x0000000012e21b: mov dword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x00000000087e5f: mov dword ptr [rax+0x10], 0x0; mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x0000000010bce7: mov dword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000013aea4: mov dword ptr [rax+0x23b0], 0x1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000173c46: mov dword ptr [rax+0x3a], 0xe8750734; add rax, rdi; vzeroupper; ret; 
0x0000000007b233: mov dword ptr [rax+0x40], 0x0; mov qword ptr [rax+0x50], 0x0; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000007b243: mov dword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000013dcf1: mov dword ptr [rax+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000013dce1: mov dword ptr [rax+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000005c2ae: mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x0000000007b23b: mov dword ptr [rax+0x50], 0x0; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x00000000086e34: mov dword ptr [rax+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000173db6: mov dword ptr [rax+0x7343a40], 0x1480775; clc; vzeroupper; ret; 
0x00000000178c46: mov dword ptr [rax+0x7507343b], 0xf8014807; vzeroupper; ret; 
0x0000000012e213: mov dword ptr [rax+0x8], 0x0; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x00000000128c9f: mov dword ptr [rax+0x8], 0x0; pop rbx; ret; 
0x000000000840b5: mov dword ptr [rax+0x8], 0x0; ret; 
0x0000000010bcdf: mov dword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x00000000133a78: mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x0000000013309d: mov dword ptr [rax+0xc8], 0x0; mov qword ptr [r8+0xd0], 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x000000001330a8: mov dword ptr [rax+0xd0], 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x0000000016d41a: mov dword ptr [rax+rax], 0x8a0c634f; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x000000000881eb: mov dword ptr [rax+rdx*4+0x8], 0x0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000001888b6: mov dword ptr [rax-0x17], 0xffffff4c; nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000012e20c: mov dword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x000000000840ae: mov dword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x00000000100688: mov dword ptr [rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x00000000085bad: mov dword ptr [rax], 0x0; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x00000000145e5d: mov dword ptr [rax], 0x0; pop rbx; ret; 
0x00000000087e6f: mov dword ptr [rax], 0x0; syscall; 
0x0000000009a871: mov dword ptr [rax], 0x0; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x0000000005bc29: mov dword ptr [rax], 0x11; mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x000000000fa2d8: mov dword ptr [rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000131ed0: mov dword ptr [rax], 0x16; mov eax, 0x16; ret; 
0x000000000fd898: mov dword ptr [rax], 0x16; mov eax, 0x1; ret; 
0x00000000041418: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f95ae: mov dword ptr [rax], 0x16; mov eax, r8d; ret; 
0x000000000413a8: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000001038b8: mov dword ptr [rax], 0x16; ret; 
0x000000000fd9c8: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x00000000131e9b: mov dword ptr [rax], 0x1d; mov eax, 0x1d; pop rbx; ret; 
0x000000000410ef: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000040432: mov dword ptr [rax], 0x22; add rsp, 0x8; ret; 
0x00000000131e7c: mov dword ptr [rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x000000000fc38d: mov dword ptr [rax], 0x24; mov eax, 0x1; pop rbx; ret; 
0x00000000041cb8: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000010a398: mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000d2c78: mov dword ptr [rax], 0x2; xor eax, eax; ret; 
0x0000000003f858: mov dword ptr [rax], 0x2a; mov rax, r10; ret; 
0x00000000090ac0: mov dword ptr [rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000105391: mov dword ptr [rax], 0x50f0000; cmp rax, 0xfffffffffffff001; jae short 0x00000000001053a0; ret; 
0x00000000044b38: mov dword ptr [rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000001285f0: mov dword ptr [rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001290e1: mov dword ptr [rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000127d15: mov dword ptr [rax], 0x61; mov eax, 0xffffffff; ret; 
0x000000000d75de: mov dword ptr [rax], 0x7; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000003f8b8: mov dword ptr [rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002d8e8: mov dword ptr [rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000911f0: mov dword ptr [rax], 0xb; mov eax, 0xffffffff; ret; 
0x000000000ff148: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000099227: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000009a2b8: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x00000000143962: mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000008420f: mov dword ptr [rbp+0x48], 0x0; test byte ptr [rbp], 0x80; jne short 0x0000000000084240; pop rbp; ret; 
0x000000000db3d4: mov dword ptr [rbp+0x8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f55e6: mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70]; 
0x000000000944ef: mov dword ptr [rbp+rbx*8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000010b82c: mov dword ptr [rbp-0x690], 0x0; mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x00000000115330: mov dword ptr [rbp-0x80], 0x0; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x0000000009d7f7: mov dword ptr [rbp], 0x0; pop rbp; pop r12; ret; 
0x0000000013e99d: mov dword ptr [rbp], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000008e6f7: mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000037267: mov dword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000143ce2: mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000139101: mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000145ac2: mov dword ptr [rbx+0x18], 0x0; pop rbx; ret; 
0x00000000139086: mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000fc385: mov dword ptr [rbx+0x20], 0x0; mov dword ptr fs:[rax], 0x24; mov eax, 0x1; pop rbx; ret; 
0x000000000fc3a4: mov dword ptr [rbx+0x20], 0x0; mov eax, 0x1; pop rbx; ret; 
0x0000000013ae38: mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000001377eb: mov dword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000edc6b: mov dword ptr [rbx+0x28], 0x0; pop rbx; ret; 
0x000000001377f3: mov dword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000836d6: mov dword ptr [rbx+0x48], 0x0; mov qword ptr [rbx+0x58], 0x0; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x000000000836e6: mov dword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x000000000836de: mov dword ptr [rbx+0x58], 0x0; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x0000000013e9ce: mov dword ptr [rbx+0x58], 0x28; pop rbx; pop rbp; pop r12; ret; 
0x0000000008216a: mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret; 
0x0000000009a394: mov dword ptr [rbx+0x8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000f3e1a: mov dword ptr [rbx+0x8], 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000002df13: mov dword ptr [rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fe259: mov dword ptr [rbx], 0x0; add rsp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x00000000086082: mov dword ptr [rbx], 0x0; pop rbx; ret; 
0x000000000443bd: mov dword ptr [rbx], 0x0; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000178f47: mov dword ptr [rcx+0x1], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174277: mov dword ptr [rcx+0x1], 0x77f8c5f8; ret; 
0x00000000178b06: mov dword ptr [rcx+0x3b], 0xa7750734; add rax, rdi; vzeroupper; ret; 
0x00000000173c86: mov dword ptr [rcx+0x40], 0x7507343a; cmpsd [rsi], [rdi]; add rax, rdi; vzeroupper; ret; 
0x0000000011d5c0: mov dword ptr [rcx+rcx*4-0x6], 0x8be; add [rcx], dh; shr al, 0x70; ret far; 
0x000000000c7fdb: mov dword ptr [rcx-0x77], 0xe9143544; cmp dh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x0000000014efa1: mov dword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x00000000178f07: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174257: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x0000000004dfa7: mov dword ptr [rcx], 0x83c00949; stc; and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret; 
0x000000000db427: mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret; 
0x00000000038646: mov dword ptr [rcx], 0xfff4788; mov dh, 0x53; add [rax-0x7d], ecx; ret; 
0x0000000013e6ec: mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x0000000008c013: mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x000000001340c9: mov dword ptr [rdi+0x118], 0x0; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001340d4: mov dword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x0000000014032f: mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x000000001340df: mov dword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000145e29: mov dword ptr [rdi+0x20], 0x0; ret; 
0x00000000145e21: mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000140380: mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x00000000140370: mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000140dee: mov dword ptr [rdi+0x58], 0x0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000140b1c: mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x0000000014028c: mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x00000000101378: mov dword ptr [rdi+0x8], 0x0; ret; 
0x0000000005c2f3: mov dword ptr [rdi+0x8], 0x0; xchg [rdi], eax; cmp eax, 0x1; jg short 0x000000000005c308; ret; 
0x00000000122783: mov dword ptr [rdi+0x8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x0000000013db9c: mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x000000000927f7: mov dword ptr [rdi], 0x0; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x00000000101371: mov dword ptr [rdi], 0x0; mov qword ptr [rdi+0x8], 0x0; ret; 
0x00000000043f02: mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x000000000fe1f1: mov dword ptr [rdi], 0x0; ret; 
0x0000000008e30e: mov dword ptr [rdi], 0x0; xor eax, eax; add rsp, 0x18; ret; 
0x00000000041b96: mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000090460: mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x0000000013ad9c: mov dword ptr [rdi], 0x2; add rsp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x000000000fe1b7: mov dword ptr [rdi], 0xffffffff; ret; 
0x00000000052118: mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x0000000014b281: mov dword ptr [rdx], 0x16; add rsp, 0x18; ret; 
0x00000000037e05: mov dword ptr [rdx], 0x89480000; ret; 
0x00000000091096: mov dword ptr [rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x0000000011fb8c: mov dword ptr [rdx], 0xe7894c00; call rbx; 
0x00000000142465: mov dword ptr [rdx], 0xe; lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x00000000052182: mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000094823: mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x000000000947f3: mov dword ptr [rip+0x158b77], 0x1; mov [rip+0x158b44], rax; ret; 
0x000000000947d3: mov dword ptr [rip+0x158b97], 0x1; mov [rip+0x158b89], eax; ret; 
0x000000000947b7: mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x0000000009856b: mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x000000000946fa: mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x000000000946f0: mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x00000000093ce0: mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x000000000863a8: mov dword ptr [rip+0x166ec6], 0x0; add rsp, 0x10; pop rbp; ret; 
0x00000000084eac: mov dword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084ea1: mov dword ptr [rip+0x16b865], 0x0; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084e72: mov dword ptr [rip+0x16b89c], 0x0; xchg [rip+0x16b88e], eax; cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x000000000783c2: mov dword ptr [rip+0x17830c], 0x0; xchg [rip+0x1782fe], eax; cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x00000000043ff5: mov dword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000043f48: mov dword ptr [rip+0x1ac4a6], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000043e78: mov dword ptr [rip+0x1ac56e], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000192838: mov dword ptr [rip+0x5cf06], 0x0; add rsp, 0x8; ret; 
0x00000000192c5d: mov dword ptr [rip+0x5cf19], 0x0; add rsp, 0x8; ret; 
0x00000000192e65: mov dword ptr [rip+0x62541], 0x0; ret; 
0x00000000192f3f: mov dword ptr [rip+0x62ebf], 0x0; add rsp, 0x8; ret; 
0x00000000192ff6: mov dword ptr [rip+0x63188], 0x0; add rsp, 0x8; ret; 
0x000000001930ec: mov dword ptr [rip+0x64152], 0x0; pop rbx; ret; 
0x00000000193211: mov dword ptr [rip+0x692cd], 0x0; add rsp, 0x8; ret; 
0x000000001931f1: mov dword ptr [rip+0x692e5], 0x0; pop rbx; ret; 
0x000000001931b1: mov dword ptr [rip+0x69315], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000014aed9: mov dword ptr [rip+0xa2645], 0xffffffff; add rsp, 0x8; ret; 
0x0000000014a61b: mov dword ptr [rip+0xb24bb], 0x0; add rsp, 0x8; ret; 
0x0000000013282d: mov dword ptr [rip+0xc4b49], 0x0; mov byte ptr [rip+0xc5b7c], 0x0; mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000001327dd: mov dword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x00000000132786: mov dword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013272f: mov dword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x00000000133a96: mov dword ptr [rip+0xc8a48], 0x0; ret; 
0x000000001326d8: mov dword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x0000000010bd18: mov dword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bcef: mov dword ptr [rip+0xe1727], 0x0; ret; 
0x0000000010bcbe: mov dword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010bc98: mov dword ptr [rip+0xe177e], 0x0; ret; 
0x0000000010b941: mov dword ptr [rip+0xe1ad5], 0x0; add rsp, 0x8; ret; 
0x0000000010b910: mov dword ptr [rip+0xe1b06], 0x3; add rsp, 0x8; ret; 
0x00000000108eb3: mov dword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000108ea8: mov dword ptr [rip+0xed2ce], 0x0; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000101c08: mov dword ptr [rip+0xf440e], 0x0; mov qword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x00000000101c13: mov dword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x00000000100a06: mov dword ptr [rip+0xf54d0], 0x0; add rsp, 0x8; ret; 
0x000000000ee14b: mov dword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a5aa: mov dword ptr [rsi+0x10], 0x2; test eax, eax; je short 0x000000000013a5c0; xor eax, eax; ret; 
0x0000000013a72e: mov dword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x000000000ee153: mov dword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a673: mov dword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000004492b: mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x0000000005208a: mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000052089: mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000052276: mov dword ptr [rsi], 0x0; mov eax, 0x2; ret; 
0x00000000087811: mov dword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x000000000ee144: mov dword ptr [rsi], 0x0; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a657: mov dword ptr [rsi], 0x0; ret; 
0x0000000013a63c: mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x0000000013a727: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x0000000013a66c: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x0000000013a694: mov dword ptr [rsi], 0x6; mov [rsi+0x8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x0000000013a683: mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x0000000013a720: mov dword ptr [rsi], 0x8; ret; 
0x0000000013a6d4: mov dword ptr [rsi], 0x9; mov [rsi+0x8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000013a710: mov dword ptr [rsi], 0xa; ret; 
0x0000000013a700: mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6f0: mov dword ptr [rsi], 0xc; ret; 
0x00000000142b96: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d11: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d56: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142be1: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c21: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c61: mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c97: mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000142cc3: mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000073c90: mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000145be1: mov dword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000142c9f: mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000006f4cd: mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x00000000142ccb: mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000145bea: mov dword ptr [rsp+0x20], 0x0; call r8; 
0x00000000142cd3: mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000141902: mov dword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000014190b: mov dword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000014c323: mov dword ptr [rsp+0x28], 0x0; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x00000000145bd8: mov dword ptr [rsp+0x28], 0x0; mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x000000000731af: mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000142b9e: mov dword ptr [rsp+0x30], 0x0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d19: mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142d5e: mov dword ptr [rsp+0x30], 0x2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142be9: mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c29: mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c69: mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000074a80: mov dword ptr [rsp+0x34], 0x1; jmp rax; 
0x00000000139814: mov dword ptr [rsp+0x38], 0x0; push qword ptr [rip+0x7fb66]; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000006f4b8: mov dword ptr [rsp+0x38], 0x1; jmp rax; 
0x0000000007319c: mov dword ptr [rsp+0x40], 0x0; add rax, rdi; mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x0000000013f943: mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000006def0: mov dword ptr [rsp+0x40], 0x0; mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x000000000c733e: mov dword ptr [rsp+0x40], 0x0; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x0000000006ecfa: mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000013f187: mov dword ptr [rsp+0x4], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000006def8: mov dword ptr [rsp+0x4c], 0x0; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x0000000006f568: mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x00000000074940: mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x0000000008978d: mov dword ptr [rsp+0x58], 0x0; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x0000000006f6a0: mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x00000000089796: mov dword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x000000000731a7: mov dword ptr [rsp+0x60], 0x0; mov dword ptr [rsp+0x28], 0x20; jmp rax; 
0x00000000074918: mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x0000000006f558: mov dword ptr [rsp+0x64], 0x1; jmp rax; 
0x00000000074930: mov dword ptr [rsp+0x68], 0x1; jmp rax; 
0x00000000123934: mov dword ptr [rsp+0x8], 0x0; call rax; 
0x00000000139bd1: mov dword ptr [rsp+0x8], 0x0; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000012385e: mov dword ptr [rsp+0x8], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000142c8f: mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x0000000006df05: mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x0000000014300e: mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000142ef5: mov dword ptr [rsp+0xb0], 0x0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x00000000143019: mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x00000000143024: mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x0000000008c178: mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x00000000142fb2: mov dword ptr [rsp+0xd0], 0x1; movups [rsp+0xb8], xmm2; call rax; 
0x00000000142f08: mov dword ptr [rsp+0xd0], 0x2; movups [rsp+0xb8], xmm1; call rax; 
0x0000000004025c: mov dword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040209: mov dword ptr [rsp-0x18], 0x0; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000010065c: mov dword ptr [rsp-0x48], 0x8; syscall; 
0x00000000145bd1: mov dword ptr [rsp], 0x0; mov dword ptr [rsp+0x28], 0x0; mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x0000000014ce12: mov dword ptr [rsp], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000009d7b2: mov dword ptr [rsp], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x000000001448f9: mov dword ptr [rsp], 0x2; mov rdi, rsp; call r8; 
0x00000000100687: mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000005bc28: mov dword ptr fs:[rax], 0x11; mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x000000000fa2d7: mov dword ptr fs:[rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000131ecf: mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x000000000fd897: mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x00000000041417: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f95ad: mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x000000000413a7: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000001038b7: mov dword ptr fs:[rax], 0x16; ret; 
0x000000000fd9c7: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000131e9a: mov dword ptr fs:[rax], 0x1d; mov eax, 0x1d; pop rbx; ret; 
0x000000000410ee: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000040431: mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000131e7b: mov dword ptr fs:[rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x000000000fc38c: mov dword ptr fs:[rax], 0x24; mov eax, 0x1; pop rbx; ret; 
0x00000000041cb7: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000010a397: mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000d2c77: mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x0000000003f857: mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000090abf: mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000044b37: mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x000000001285ef: mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001290e0: mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000127d14: mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x000000000d75dd: mov dword ptr fs:[rax], 0x7; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000003f8b7: mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002d8e7: mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000911ef: mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x000000000ff147: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000099226: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000009a2b7: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000014b280: mov dword ptr fs:[rdx], 0x16; add rsp, 0x18; ret; 
0x00000000091095: mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000001598e0: mov dx, [rsi+0x1]; mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x000000000b0ed2: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000b1d12: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000af8d2: mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000b0f23: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d73: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000af913: mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000001537d0: mov dx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001539b0: mov dx, [rsi-0x3]; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000000b0e90: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b1cc0: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000af890: mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000b38f0: mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x00000000192561: mov eax, 0x0; add [rax-0x7ab70000], al; ret; 
0x00000000040589: mov eax, 0x0; add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret; 
0x00000000040559: mov eax, 0x0; add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret; 
0x000000000902da: mov eax, 0x0; cmova eax, edx; add rsp, 0x10; ret; 
0x0000000008fcd6: mov eax, 0x0; cmova eax, edx; ret; 
0x0000000008a982: mov eax, 0x0; cmove eax, edx; ret; 
0x00000000085e98: mov eax, 0x0; cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c498: mov eax, 0x0; cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d8d: mov eax, 0x0; cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c4: mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x000000000d90dd: mov eax, 0x0; cmovne rax, rdi; ret; 
0x000000001109c7: mov eax, 0x0; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x0000000013744a: mov eax, 0x0; cmp byte ptr [rdi], 0x0; cmovne rax, rdi; ret; 
0x0000000018c260: mov eax, 0x0; setl al; neg eax; or eax, 0x1; ret; 
0x00000000045ce3: mov eax, 0x0; test dil, dil; cmovne eax, ecx; add rsp, 0x8; ret; 
0x00000000045cc6: mov eax, 0x0; test dl, dl; cmovne eax, ecx; add rsp, 0x8; ret; 
0x000000000d73cb: mov eax, 0x1000; mov r10, r12; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000ffa23: mov eax, 0x100; cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x000000000fec32: mov eax, 0x100; mov [rdi+0x16], ax; ret; 
0x000000000f9a30: mov eax, 0x101; syscall; 
0x000000000f9990: mov eax, 0x102; syscall; 
0x000000000f964a: mov eax, 0x103; syscall; 
0x000000000fae33: mov eax, 0x104; syscall; 
0x000000000f9303: mov eax, 0x106; syscall; 
0x000000000fb3a0: mov eax, 0x107; syscall; 
0x0000000005c183: mov eax, 0x108; syscall; 
0x000000000fb283: mov eax, 0x109; syscall; 
0x000000000948ec: mov eax, 0x10; cmova rax, rdx; mov [rip+0x1608c4], rax; ret; 
0x0000000009044b: mov eax, 0x10; cmove eax, ecx; ret; 
0x00000000138fb4: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000005c2d0: mov eax, 0x10; ret; 
0x000000000fe9dc: mov eax, 0x10; syscall; 
0x000000000fb2e0: mov eax, 0x10a; syscall; 
0x000000000fb343: mov eax, 0x10b; syscall; 
0x000000000f98c0: mov eax, 0x10c; syscall; 
0x000000000fa083: mov eax, 0x10d; syscall; 
0x000000000ffed7: mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x000000000ffd1e: mov eax, 0x10e; syscall; 
0x000000000fdac4: mov eax, 0x10f; syscall; 
0x0000000010a170: mov eax, 0x110; syscall; 
0x00000000089761: mov eax, 0x111; syscall; 
0x0000000010950d: mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000001094bf: mov eax, 0x113; syscall; 
0x0000000010935f: mov eax, 0x114; syscall; 
0x000000000fe44f: mov eax, 0x115; syscall; 
0x0000000010940f: mov eax, 0x116; syscall; 
0x000000000fe083: mov eax, 0x118; syscall; 
0x00000000109125: mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x000000001090d5: mov eax, 0x119; syscall; 
0x000000000f7f8f: mov eax, 0x11; syscall; 
0x0000000010a1d0: mov eax, 0x11b; syscall; 
0x000000000fdd56: mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x000000000fe4ff: mov eax, 0x11d; syscall; 
0x00000000109793: mov eax, 0x11e; syscall; 
0x00000000109760: mov eax, 0x11f; syscall; 
0x0000000010ad0f: mov eax, 0x120; syscall; 
0x00000000109183: mov eax, 0x121; mov edx, 0x8; syscall; 
0x000000001091c0: mov eax, 0x122; syscall; 
0x00000000109e70: mov eax, 0x123; syscall; 
0x000000000fa440: mov eax, 0x124; syscall; 
0x000000000fa4a0: mov eax, 0x125; syscall; 
0x00000000109f90: mov eax, 0x126; syscall; 
0x000000000ff3a2: mov eax, 0x127; syscall; 
0x000000000ff452: mov eax, 0x128; syscall; 
0x000000000903cb: mov eax, 0x129; syscall; 
0x000000000f803f: mov eax, 0x12; syscall; 
0x0000000010ae05: mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x0000000010adbf: mov eax, 0x12b; syscall; 
0x0000000010a200: mov eax, 0x12c; syscall; 
0x00000000109d53: mov eax, 0x12d; syscall; 
0x00000000109243: mov eax, 0x12e; syscall; 
0x000000000fecf7: mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000010a233: mov eax, 0x12f; syscall; 
0x0000000010957c: mov eax, 0x130; syscall; 
0x00000000109880: mov eax, 0x131; syscall; 
0x000000001000f0: mov eax, 0x132; syscall; 
0x0000000010ae6f: mov eax, 0x133; syscall; 
0x0000000010a260: mov eax, 0x134; syscall; 
0x000000000f9167: mov eax, 0x135; syscall; 
0x00000000109823: mov eax, 0x136; syscall; 
0x00000000109853: mov eax, 0x137; syscall; 
0x000000000ff25c: mov eax, 0x13; syscall; 
0x0000000005c1b7: mov eax, 0x13c; syscall; 
0x00000000044a2c: mov eax, 0x13e; syscall; 
0x0000000010a290: mov eax, 0x13f; syscall; 
0x000000000d73da: mov eax, 0x142; syscall; 
0x00000000109614: mov eax, 0x145; syscall; 
0x000000000fe01d: mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000fdfcf: mov eax, 0x146; syscall; 
0x00000000084e2f: mov eax, 0x14750016; mov [rip+0x16b8dd], rbx; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x000000000ff522: mov eax, 0x147; syscall; 
0x000000000ff692: mov eax, 0x148; syscall; 
0x000000001096a8: mov eax, 0x149; syscall; 
0x0000000012756a: mov eax, 0x14; add edx, 0x1; syscall; 
0x0000000010b827: mov eax, 0x14; mov dword ptr [rbp-0x690], 0x0; mov byte ptr [rbp-0x68a], 0x0; mov byte ptr [rbp-0x689], 0x73; syscall; 
0x000000000ff2fc: mov eax, 0x14; syscall; 
0x0000000010a2c0: mov eax, 0x14a; syscall; 
0x0000000010a2f0: mov eax, 0x14b; syscall; 
0x000000000f95c3: mov eax, 0x14c; syscall; 
0x000000000f9e00: mov eax, 0x15; syscall; 
0x00000000084ea3: mov eax, 0x16; add [rax], al; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084ea4: mov eax, 0x16; add [rax], al; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084eaf: mov eax, 0x16; add [rax], al; ret; 
0x00000000087abc: mov eax, 0x16; cmove eax, edx; ret; 
0x00000000087a90: mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000087aa0; ret; 
0x00000000087ba0: mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x00000000087be0: mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x00000000086724: mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000008e543: mov eax, 0x16; pop rbx; pop rbp; ret; 
0x000000000879e0: mov eax, 0x16; ret; 
0x000000000fa470: mov eax, 0x16; syscall; 
0x00000000091920: mov eax, 0x18; syscall; 
0x0000000010a053: mov eax, 0x19; syscall; 
0x000000001276fd: mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x0000000014a49e: mov eax, 0x1; add rsp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000144da4: mov eax, 0x1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000df680: mov eax, 0x1; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d20ae: mov eax, 0x1; add rsp, 0x8; ret; 
0x000000000c589e: mov eax, 0x1; cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000c57e0: mov eax, 0x1; jg short 0x00000000000c57e9; neg eax; ret; 
0x0000000017e320: mov eax, 0x1; jg short 0x000000000017e330; neg eax; ret; 
0x0000000017b886: mov eax, 0x1; jl short 0x000000000017b890; neg eax; ret; 
0x00000000145748: mov eax, 0x1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x0000000013be24: mov eax, 0x1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret; 
0x000000000520a5: mov eax, 0x1; mov [rdi], rdx; ret; 
0x000000000449b1: mov eax, 0x1; mov [rsi+0xe], ax; xor eax, eax; ret; 
0x000000000df2f0: mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x0000000005217d: mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000101816: mov eax, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x0000000007fb39: mov eax, 0x1; mov eax, r8d; ret; 
0x000000001377e5: mov eax, 0x1; mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x0000000014a615: mov eax, 0x1; mov qword ptr [rip+0xb24bb], 0x0; add rsp, 0x8; ret; 
0x00000000140345: mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000140355: mov eax, 0x1; movups [r8], xmm2; ret; 
0x00000000140bc5: mov eax, 0x1; movups [r8], xmm3; ret; 
0x00000000140ba5: mov eax, 0x1; movups [r8], xmm4; ret; 
0x00000000140bb5: mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x0000000013dc5e: mov eax, 0x1; movups [rdx], xmm1; ret; 
0x0000000010184b: mov eax, 0x1; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000005a5b9: mov eax, 0x1; pop rbp; pop r12; pop r13; ret; 
0x0000000007b156: mov eax, 0x1; pop rbp; pop r12; ret; 
0x00000000144a84: mov eax, 0x1; pop rbp; ret; 
0x00000000076809: mov eax, 0x1; pop rbx; pop rbp; pop r12; ret; 
0x00000000077966: mov eax, 0x1; pop rbx; pop rbp; ret; 
0x000000000f8378: mov eax, 0x1; pop rbx; ret; 
0x000000000c5fd1: mov eax, 0x1; ret; 
0x0000000005048e: mov eax, 0x1; ret; 
0x0000000013e960: mov eax, 0x1; sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x00000000041c05: mov eax, 0x1; shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x000000000f9d3c: mov eax, 0x1; syscall; 
0x000000000d88b0: mov eax, 0x1; test edi, edi; js short 0x00000000000d88c0; ret; 
0x00000000102afc: mov eax, 0x1a; syscall; 
0x00000000109c12: mov eax, 0x1b3; syscall; 
0x000000000f8c12: mov eax, 0x1b4; syscall; 
0x00000000102bc0: mov eax, 0x1b; syscall; 
0x000000000f8f37: mov eax, 0x1c; syscall; 
0x00000000131ea1: mov eax, 0x1d; pop rbx; ret; 
0x0000000010b323: mov eax, 0x1d; syscall; 
0x0000000010b2c0: mov eax, 0x1e; syscall; 
0x0000000010b366: mov eax, 0x1f; syscall; 
0x0000000003a7c7: mov eax, 0x200; ret; 
0x000000000d84a8: mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d857a: mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d8579: mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000fa3e0: mov eax, 0x20; syscall; 
0x000000000fa410: mov eax, 0x21; syscall; 
0x00000000131e82: mov eax, 0x22; pop rbx; ret; 
0x000000000d69bc: mov eax, 0x22; syscall; 
0x0000000008eed9: mov eax, 0x23; mov eax, r8d; ret; 
0x000000000c9b60: mov eax, 0x24; syscall; 
0x000000000d6930: mov eax, 0x25; syscall; 
0x000000000c9b90: mov eax, 0x26; syscall; 
0x000000000d7c90: mov eax, 0x27; syscall; 
0x000000000fdf93: mov eax, 0x28; syscall; 
0x0000000010aa80: mov eax, 0x29; syscall; 
0x0000000005228d: mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x0000000004224f: mov eax, 0x2; pop rbx; pop rbp; pop r12; ret; 
0x0000000005227c: mov eax, 0x2; ret; 
0x000000000c5fe1: mov eax, 0x2; ret; 
0x00000000122f58: mov eax, 0x2; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x0000000010a48c: mov eax, 0x2a; syscall; 
0x0000000010a3bc: mov eax, 0x2b; syscall; 
0x0000000010a9be: mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010a815: mov eax, 0x2c; syscall; 
0x000000000d6ef9: mov eax, 0x2d8; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x0000000010a6fb: mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000010a5f5: mov eax, 0x2d; syscall; 
0x000000000d6ef2: mov eax, 0x2e0; mov [rax+0x2d8], rdi; mov [rax+0x2e0], rdi; mov eax, 0x111; syscall; 
0x000000000d6f00: mov eax, 0x2e0; mov eax, 0x111; syscall; 
0x0000000010a8cc: mov eax, 0x2e; syscall; 
0x0000000010a76c: mov eax, 0x2f; syscall; 
0x0000000010aa50: mov eax, 0x30; syscall; 
0x0000000010a450: mov eax, 0x31; syscall; 
0x0000000010a5b0: mov eax, 0x32; syscall; 
0x0000000010a550: mov eax, 0x33; syscall; 
0x0000000010a520: mov eax, 0x34; syscall; 
0x0000000010aab3: mov eax, 0x35; syscall; 
0x0000000010aa23: mov eax, 0x36; syscall; 
0x0000000010a583: mov eax, 0x37; syscall; 
0x000000000d6ecc: mov eax, 0x38; syscall; 
0x00000000091dce: mov eax, 0x3; add rsp, 0x10; pop rbx; ret; 
0x00000000091959: mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091958: mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000d2112: mov eax, 0x3; cmove r8d, eax; mov eax, r8d; ret; 
0x00000000121af5: mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x0000000013c214: mov eax, 0x3; pop rbx; ret; 
0x00000000088080: mov eax, 0x3; ret; 
0x000000000c5ff1: mov eax, 0x3; ret; 
0x00000000093aa0: mov eax, 0x3; syscall; 
0x000000000d6f31: mov eax, 0x3a; syscall; 
0x00000000130a63: mov eax, 0x3b8b0001; call qword ptr [rsp+0x28]; 
0x000000000d7370: mov eax, 0x3b; syscall; 
0x00000000108fd3: mov eax, 0x3c; syscall; 
0x000000000d67df: mov eax, 0x3d; syscall; 
0x0000000004d759: mov eax, 0x3e; sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x00000000041650: mov eax, 0x3e; syscall; 
0x000000000d6710: mov eax, 0x3f; syscall; 
0x000000000d8528: mov eax, 0x40; ret; 
0x0000000010b1d0: mov eax, 0x40; syscall; 
0x000000000fe07c: mov eax, 0x41001f0f; mov edx, ecx; mov eax, 0x118; syscall; 
0x0000000010b241: mov eax, 0x42; syscall; 
0x0000000010b2f0: mov eax, 0x43; syscall; 
0x000000000f98ae: mov eax, 0x44000000; mov eax, esp; pop r12; pop r13; ret; 
0x000000001000ea: mov eax, 0x441f0f; add [rax+0x132], bh; syscall; 
0x000000000fa3da: mov eax, 0x441f0f; add [rax+0x20], bh; syscall; 
0x0000000010a51a: mov eax, 0x441f0f; add [rax+0x34], bh; syscall; 
0x0000000010002a: mov eax, 0x441f0f; add [rax+0xa2], bh; syscall; 
0x0000000010b130: mov eax, 0x44; syscall; 
0x0000000010afcf: mov eax, 0x45; syscall; 
0x0000000010b0c8: mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x0000000010b07f: mov eax, 0x46; syscall; 
0x0000000010b170: mov eax, 0x47; syscall; 
0x000000000f598c: mov eax, 0x48000b6e; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d72e4: mov eax, 0x48001f0f; mov eax, [rax+0x10]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x000000000a1124: mov eax, 0x48001f0f; mov edx, eax; xor eax, eax; mov [rdi], rdx; ret; 
0x000000000fa18c: mov eax, 0x48; syscall; 
0x00000000192c94: mov eax, 0x48ffe996; test ebx, ebx; jne short 0x0000000000192c85; pop rbx; ret; 
0x000000000fa210: mov eax, 0x49; syscall; 
0x000000000c6001: mov eax, 0x4; ret; 
0x000000001098bf: mov eax, 0x4; syscall; 
0x000000000fffac: mov eax, 0x4a; syscall; 
0x0000000010006c: mov eax, 0x4b; syscall; 
0x0000000013ae5a: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x20]; 
0x0000000013aeb1: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x28]; 
0x000000001012b0: mov eax, 0x4c; syscall; 
0x000000000554ac: mov eax, 0x4cf83949; cmovb eax, edi; mov rax, r8; ret; 
0x000000001012e0: mov eax, 0x4d; syscall; 
0x000000000fa632: mov eax, 0x4f; syscall; 
0x000000000fa560: mov eax, 0x50; syscall; 
0x000000000fa590: mov eax, 0x51; syscall; 
0x0000000005c150: mov eax, 0x52; syscall; 
0x000000000f9960: mov eax, 0x53; syscall; 
0x000000000fb3d0: mov eax, 0x54; syscall; 
0x000000000fa4dc: mov eax, 0x55; syscall; 
0x000000000fb250: mov eax, 0x56; syscall; 
0x000000000fb370: mov eax, 0x57; syscall; 
0x00000000084e38: mov eax, 0x5830016; sar byte ptr [rax+0x5b010016], cl; ret; 
0x000000000fb2b0: mov eax, 0x58; syscall; 
0x000000000fb310: mov eax, 0x59; syscall; 
0x00000000105c9c: mov eax, 0x5; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000011569f: mov eax, 0x5; pop r12; pop rbp; ret; 
0x000000000f4b97: mov eax, 0x5; pop rbp; pop r12; ret; 
0x000000000c6011: mov eax, 0x5; ret; 
0x0000000010990e: mov eax, 0x5; syscall; 
0x000000000f9780: mov eax, 0x5a; syscall; 
0x00000000142f3e: mov eax, 0x5b000005; pop rbp; pop r12; pop r13; ret; 
0x00000000084e3e: mov eax, 0x5b010016; ret; 
0x000000000f97b0: mov eax, 0x5b; syscall; 
0x000000000fada0: mov eax, 0x5c; syscall; 
0x000000000fadd0: mov eax, 0x5d; syscall; 
0x000000000fae00: mov eax, 0x5e; syscall; 
0x000000000f9770: mov eax, 0x5f; syscall; 
0x000000000c73b5: mov eax, 0x60; syscall; 
0x000000000898f4: mov eax, 0x61c; mov eax, 0xca; syscall; 
0x000000000fed70: mov eax, 0x62; syscall; 
0x0000000018f439: mov eax, 0x63490002; or al, 0x99; add rcx, r9; jmp rcx; 
0x0000000015e76e: mov eax, 0x634f0004; or al, 0x8a; lea r10, [r10+r9]; jmp r10; 
0x0000000010a140: mov eax, 0x63; syscall; 
0x000000000d6740: mov eax, 0x64; syscall; 
0x00000000100657: mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000d7cb0: mov eax, 0x66; syscall; 
0x00000000109ff0: mov eax, 0x67; syscall; 
0x000000000d7cd0: mov eax, 0x68; syscall; 
0x000000000d7d2c: mov eax, 0x69; syscall; 
0x000000000c6021: mov eax, 0x6; ret; 
0x0000000010995f: mov eax, 0x6; syscall; 
0x000000000d7d8c: mov eax, 0x6a; syscall; 
0x000000000d7cc0: mov eax, 0x6b; syscall; 
0x000000000d7ce0: mov eax, 0x6c; syscall; 
0x000000000d7e90: mov eax, 0x6d; syscall; 
0x000000000d7ca0: mov eax, 0x6e; syscall; 
0x000000000d7ec0: mov eax, 0x6f; syscall; 
0x000000000d7f20: mov eax, 0x70; syscall; 
0x000000000ff7dc: mov eax, 0x71; syscall; 
0x000000000ff84c: mov eax, 0x72; syscall; 
0x000000000d7cf0: mov eax, 0x73; syscall; 
0x000000000d3d7c: mov eax, 0x74; syscall; 
0x0000000009bba4: mov eax, 0x75000d4b; cmpsb [rsi], [rdi]; ret; 
0x000000000d7fbc: mov eax, 0x75; syscall; 
0x000000000d7f50: mov eax, 0x76; syscall; 
0x000000000d802c: mov eax, 0x77; syscall; 
0x000000000d7f80: mov eax, 0x78; syscall; 
0x000000000d7e60: mov eax, 0x79; syscall; 
0x000000000c6031: mov eax, 0x7; ret; 
0x000000001144b5: mov eax, 0x7; ret; 
0x000000000fd9fc: mov eax, 0x7; syscall; 
0x00000000109060: mov eax, 0x7a; syscall; 
0x00000000109090: mov eax, 0x7b; syscall; 
0x000000000d7ef0: mov eax, 0x7c; syscall; 
0x000000000d839b: mov eax, 0x7d00; ret; 
0x00000000109d80: mov eax, 0x7d; syscall; 
0x000000000d8460: mov eax, 0x7e; ret; 
0x00000000109db0: mov eax, 0x7e; syscall; 
0x00000000040856: mov eax, 0x7f800000; and eax, [rsp-0x4]; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000040834: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x000000000d844a: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000d8449: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000d83d7: mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d83bd: mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x00000000041685: mov eax, 0x7f; syscall; 
0x000000000d2e47: mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000d837f: mov eax, 0x7fffffff; cmp rdx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x000000001236b8: mov eax, 0x7fffffff; ret; 
0x0000000009069b: mov eax, 0x80; cmovne esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x00000000041e8d: mov eax, 0x80; syscall; 
0x00000000087803: mov eax, 0x80; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000041fcf: mov eax, 0x81; syscall; 
0x000000000416c1: mov eax, 0x82; syscall; 
0x0000000008e266: mov eax, 0x83; ret; 
0x00000000041aa0: mov eax, 0x83; syscall; 
0x00000000101dc4: mov eax, 0x85ffffcb; ror byte ptr [rdi], 0x94; ret; 
0x0000000010a1a0: mov eax, 0x86; syscall; 
0x00000000109270: mov eax, 0x87; syscall; 
0x00000000104e27: mov eax, 0x88; syscall; 
0x000000000e93f2: mov eax, 0x89000000; ret; 
0x0000000011080f: mov eax, 0x8948fff1; ret; 
0x000000000f9690: mov eax, 0x89; syscall; 
0x000000000fdabc: mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000f9dd0: mov eax, 0x8; syscall; 
0x000000000f96c0: mov eax, 0x8a; syscall; 
0x000000000d2ce2: mov eax, 0x8b480002; add eax, 0x11a124; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010a91f: mov eax, 0x8b48fff7; and al, 0x8; add rsp, 0x28; ret; 
0x000000000ff040: mov eax, 0x8c; syscall; 
0x000000000ff080: mov eax, 0x8d; syscall; 
0x000000000effa0: mov eax, 0x8e; syscall; 
0x0000000008a3f4: mov eax, 0x8f; syscall; 
0x0000000008962c: mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000000f0000: mov eax, 0x90; syscall; 
0x0000000008a3c7: mov eax, 0x91; syscall; 
0x000000000f0090: mov eax, 0x92; syscall; 
0x000000000f00c0: mov eax, 0x93; syscall; 
0x000000000f00f0: mov eax, 0x94; syscall; 
0x00000000102c20: mov eax, 0x95; syscall; 
0x00000000102c50: mov eax, 0x96; syscall; 
0x00000000102c80: mov eax, 0x97; syscall; 
0x00000000102cb0: mov eax, 0x98; syscall; 
0x000000001003e0: mov eax, 0x99; syscall; 
0x000000000f8321: mov eax, 0x9; pop rbp; pop r12; ret; 
0x000000001029fb: mov eax, 0x9; syscall; 
0x00000000109d10: mov eax, 0x9a; syscall; 
0x0000000010a0b0: mov eax, 0x9b; syscall; 
0x00000000109ce0: mov eax, 0x9e; syscall; 
0x000000000fff70: mov eax, 0xa1; syscall; 
0x00000000100030: mov eax, 0xa2; syscall; 
0x000000000fff40: mov eax, 0xa3; syscall; 
0x000000000c7533: mov eax, 0xa4; xor edi, edi; syscall; 
0x0000000010a023: mov eax, 0xa5; syscall; 
0x00000000109000: mov eax, 0xa6; syscall; 
0x00000000100410: mov eax, 0xa7; syscall; 
0x00000000100440: mov eax, 0xa8; syscall; 
0x0000000010012c: mov eax, 0xa9; syscall; 
0x00000000102ac0: mov eax, 0xa; syscall; 
0x000000000ffb40: mov eax, 0xaa; syscall; 
0x000000000ffc50: mov eax, 0xab; syscall; 
0x00000000108f50: mov eax, 0xac; syscall; 
0x00000000108f20: mov eax, 0xad; syscall; 
0x00000000109de0: mov eax, 0xae; syscall; 
0x00000000109f03: mov eax, 0xaf; syscall; 
0x00000000109e10: mov eax, 0xb0; syscall; 
0x00000000109ed0: mov eax, 0xb1; syscall; 
0x0000000010a0e3: mov eax, 0xb2; syscall; 
0x0000000010a113: mov eax, 0xb3; syscall; 
0x0000000010a080: mov eax, 0xb4; syscall; 
0x0000000013dd50: mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret; 
0x0000000008b35a: mov eax, 0xb; ret; 
0x00000000102a90: mov eax, 0xb; syscall; 
0x0000000008b410: mov eax, 0xba; syscall; 
0x00000000109030: mov eax, 0xbb; syscall; 
0x00000000105543: mov eax, 0xbc; syscall; 
0x000000001054e3: mov eax, 0xbd; syscall; 
0x000000001053c3: mov eax, 0xbe; syscall; 
0x0000000008a028: mov eax, 0xbf000000; add [rax], eax; add [rax], al; mov eax, 0xe; syscall; 
0x000000001053f3: mov eax, 0xbf; syscall; 
0x00000000104039: mov eax, 0xc04d894c; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x000000000d6a40: mov eax, 0xc085ffff; jne short 0x00000000000d6a50; add rsp, 0x8; ret; 
0x00000000105453: mov eax, 0xc0; syscall; 
0x000000000eb02c: mov eax, 0xc1000000; call far fword ptr [rax]; 
0x00000000105333: mov eax, 0xc1; syscall; 
0x00000000105420: mov eax, 0xc2; syscall; 
0x00000000105480: mov eax, 0xc3; syscall; 
0x00000000105360: mov eax, 0xc4; syscall; 
0x00000000105510: mov eax, 0xc5; syscall; 
0x000000001054b0: mov eax, 0xc6; syscall; 
0x00000000105390: mov eax, 0xc7; syscall; 
0x000000000c72a0: mov eax, 0xc9; syscall; 
0x00000000087507: mov eax, 0xc; pop rbp; pop r12; ret; 
0x00000000087487: mov eax, 0xc; pop rbx; pop rbp; pop r12; ret; 
0x00000000087356: mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000ff120: mov eax, 0xc; syscall; 
0x0000000008dfe9: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000086681: mov eax, 0xca; syscall; 
0x000000000889a7: mov eax, 0xca; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x00000000086850: mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000087d90: mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000014eb12: mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014eb13: mov eax, 0xcb; mov esi, 0x80; syscall; 
0x00000000089605: mov eax, 0xcb; syscall; 
0x000000000f012f: mov eax, 0xcc; cmovbe rsi, r8; syscall; 
0x0000000008a9f9: mov eax, 0xcc; cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x0000000014eaa2: mov eax, 0xcc; mov esi, 0x80; syscall; 
0x0000000014eaa3: mov eax, 0xcc; mov esi, 0x80; syscall; 
0x0000000008aa4e: mov eax, 0xcc; syscall; 
0x00000000109e40: mov eax, 0xd5; syscall; 
0x00000000102bf3: mov eax, 0xd8; syscall; 
0x000000000d2e50: mov eax, 0xd9; syscall; 
0x00000000041524: mov eax, 0xd; syscall; 
0x0000000010b293: mov eax, 0xdc; syscall; 
0x000000000fdb73: mov eax, 0xdd; syscall; 
0x000000000942d5: mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x000000000941a0: mov eax, 0xde; syscall; 
0x0000000004496b: mov eax, 0xdeece66d; add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x000000000945b4: mov eax, 0xdf; syscall; 
0x00000000142816: mov eax, 0xe0; add [rax-0x77], cl; ret; 
0x00000000094561: mov eax, 0xe0; syscall; 
0x00000000094511: mov eax, 0xe1; syscall; 
0x00000000094405: mov eax, 0xe2; syscall; 
0x000000000d2239: mov eax, 0xe3; syscall; 
0x000000000d223a: mov eax, 0xe3; syscall; 
0x000000000d21c8: mov eax, 0xe4; syscall; 
0x000000000d2185: mov eax, 0xe5; syscall; 
0x000000000d20f4: mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x000000000d20f5: mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x000000000d229f: mov eax, 0xe6; syscall; 
0x00000000142584: mov eax, 0xe8000000; ret; 
0x000000001092af: mov eax, 0xe8; syscall; 
0x00000000109ea3: mov eax, 0xe9; syscall; 
0x000000000946b2: mov eax, 0xe; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x00000000089ec8: mov eax, 0xe; lea rsi, [rip+0x11f52c]; syscall; 
0x00000000089787: mov eax, 0xe; mov qword ptr [rsp+0x58], 0x0; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x0000000005002a: mov eax, 0xe; syscall; 
0x000000000870b1: mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x0000000008b3eb: mov eax, 0xea; syscall; 
0x0000000013dd33: mov eax, 0xf000000; enter 0xc089, 0x48; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000093eae: mov eax, 0xf0; syscall; 
0x00000000094109: mov eax, 0xf1; syscall; 
0x000000000940a5: mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x0000000009405f: mov eax, 0xf2; syscall; 
0x00000000093fe8: mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x00000000093f9f: mov eax, 0xf3; syscall; 
0x00000000093dcc: mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x00000000093d10: mov eax, 0xf4; syscall; 
0x00000000093f60: mov eax, 0xf5; syscall; 
0x000000000d6892: mov eax, 0xf7; syscall; 
0x00000000084e7f: mov eax, 0xf8830016; add [rdi+0x9], edi; ret; 
0x000000000f1159: mov eax, 0xf; cmp dx, 0x2; je short 0x00000000000f1168; ret; 
0x00000000041471: mov eax, 0xf; syscall; 
0x000000000c9bd9: mov eax, 0xfa89051e; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000c9bf0; ret; 
0x000000000d8458: mov eax, 0xfc17; ret; 
0x00000000109f60: mov eax, 0xfd; syscall; 
0x00000000109f30: mov eax, 0xfe; syscall; 
0x00000000142fc1: mov eax, 0xff000000; ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000000d8588: mov eax, 0xff; ret; 
0x00000000109fc0: mov eax, 0xff; syscall; 
0x000000000d8407: mov eax, 0xfffa; ret; 
0x000000000522c6: mov eax, 0xffffbfd1; sub eax, r8d; mov [rsi], eax; mov eax, 0x2; ret; 
0x00000000052158: mov eax, 0xffffc002; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000005e845: mov eax, 0xfffffb; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000123947: mov eax, 0xffffff97; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000123886: mov eax, 0xfffffff6; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000012395c: mov eax, 0xfffffff6; pop rbx; pop rbp; ret; 
0x00000000041c46: mov eax, 0xfffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000001290e7: mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x000000000c69b1: mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000100590: mov eax, 0xffffffff; add rsp, 0x48; ret; 
0x000000000d216f: mov eax, 0xffffffff; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000005bc2f: mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x00000000127745: mov eax, 0xffffffff; cmovne eax, [rsp+0x4]; add rsp, 0x18; ret; 
0x000000000df5a6: mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret; 
0x00000000041365: mov eax, 0xffffffff; cmovns rax, [rsp+0xa0]; add rsp, 0x148; ret; 
0x000000000644bb: mov eax, 0xffffffff; jbe short 0x0000000000064490; mov [rdi], rsi; ret; 
0x000000000702bb: mov eax, 0xffffffff; jbe short 0x0000000000070290; mov [rdi], rsi; ret; 
0x00000000075d1b: mov eax, 0xffffffff; jbe short 0x0000000000075cf0; mov [rdi], rsi; ret; 
0x000000000f95a8: mov eax, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x00000000036c90: mov eax, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000be40e: mov eax, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x0000000005c1e8: mov eax, 0xffffffff; mov eax, r8d; ret; 
0x000000000d6f1a: mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000d75e4: mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000123639: mov eax, 0xffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000004335e: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x0000000007b179: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000003f8be: mov eax, 0xffffffff; pop rbp; ret; 
0x00000000076834: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000421e6: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000077984: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000811a3: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000002d8ee: mov eax, 0xffffffff; ret; 
0x000000000413af: mov eax, 0xffffffff; ret; 
0x0000000007fed9: mov eax, 0xffffffff; test edx, edx; je short 0x000000000007fee8; ret; 
0x0000000007feda: mov eax, 0xffffffff; test edx, edx; je short 0x000000000007fee8; ret; 
0x000000000802ba: mov eax, 0xffffffff; test edx, edx; je short 0x00000000000802c8; ret; 
0x000000000802b9: mov eax, 0xffffffff; test edx, edx; je short 0x00000000000802c8; ret; 
0x0000000014ca9f: mov eax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008b189: mov eax, [0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000086187: mov eax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fcb2: mov eax, [0x10]; ret; 
0x000000000d3d73: mov eax, [0x1474003880001190]; mov eax, 0x74; syscall; 
0x000000000d2ce9: mov eax, [0x1600c7640011]; add [rax-0x1], bh; ret; 
0x000000000d226b: mov eax, [0x1600c7640011ab]; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000044a21: mov eax, [0x18]; test eax, eax; jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x00000000093f94: mov eax, [0x18]; test eax, eax; jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x00000000094054: mov eax, [0x18]; test eax, eax; jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x000000000d2294: mov eax, [0x18]; test eax, eax; jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d67d4: mov eax, [0x18]; test eax, eax; jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d69b1: mov eax, [0x18]; test eax, eax; jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000f7f84: mov eax, [0x18]; test eax, eax; jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f8034: mov eax, [0x18]; test eax, eax; jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f9b80: mov eax, [0x18]; test eax, eax; jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c91: mov eax, [0x18]; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d31: mov eax, [0x18]; test eax, eax; jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa181: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa351: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4d1: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fd9f1: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdfc4: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe444: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4f4: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000ff251: mov eax, [0x18]; test eax, eax; jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2f1: mov eax, [0x18]; test eax, eax; jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000fffa1: mov eax, [0x18]; test eax, eax; jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x00000000100061: mov eax, [0x18]; test eax, eax; jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000102af1: mov eax, [0x18]; test eax, eax; jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x000000001092a4: mov eax, [0x18]; test eax, eax; jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x00000000109354: mov eax, [0x18]; test eax, eax; jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x00000000109404: mov eax, [0x18]; test eax, eax; jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094b4: mov eax, [0x18]; test eax, eax; jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x00000000109571: mov eax, [0x18]; test eax, eax; jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3b1: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a481: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a6a4: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a761: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a8c1: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a964: mov eax, [0x18]; test eax, eax; jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad04: mov eax, [0x18]; test eax, eax; jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adb4: mov eax, [0x18]; test eax, eax; jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae64: mov eax, [0x18]; test eax, eax; jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afc4: mov eax, [0x18]; test eax, eax; jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b074: mov eax, [0x18]; test eax, eax; jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x000000000b4e23: mov eax, [0x220808b48001380]; add [rax], al; ret; 
0x00000000044163: mov eax, [0x247f01fa83001ac2]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000010a66b: mov eax, [0x28964d8f7000e27]; mov rax, 0xffffffffffffffff; ret; 
0x0000000010986b: mov eax, [0x28964d8f7000e35]; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe56b: mov eax, [0x28964d8f7000ee8]; mov eax, 0xffffffff; ret; 
0x0000000008f6a7: mov eax, [0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000008bfe7: mov eax, [0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000001641fb: mov eax, [0x2e6666c3c3000001]; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x000000000861e9: mov eax, [0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000000861af: mov eax, [0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000012f4cb: mov eax, [0x3145e7894cfffff3]; in al, 0xe8; jbe short 0x000000000012f4a6; out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000434e3: mov eax, [0x433b4e8001ac6]; xor eax, eax; pop rbx; ret; 
0x00000000102c34: mov eax, [0x48018964d8f7000e]; or eax, 0xffffffff; ret; 
0x0000000010a4db: mov eax, [0x480824448bfff7bc]; add esp, 0x18; ret; 
0x000000001322d1: mov eax, [0x481674c085480001]; mov edi, [rip+0xca1e0]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000001322dd: mov eax, [0x486411cfc148000c]; xor edi, [0x30]; call rax; 
0x0000000003a653: mov eax, [0x4864ff6348001b27]; mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x00000000082c74: mov eax, [0x48ffffffffbe0016]; mov edi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000142655: mov eax, [0x5b0374d03948000b]; ret; 
0x0000000005d800: mov eax, [0x634ae4b60f450014]; add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000003ebfb: mov eax, [0x634bc08945001643]; cmp al, 0x82; add rdi, r10; jmp rdi; 
0x00000000176120: mov eax, [0x77f8c5e0075c7f7e]; ret; 
0x000000001761a5: mov eax, [0x77f8c5f007447f7a]; ret; 
0x00000000176100: mov eax, [0x77f8c5f0075c7f7a]; ret; 
0x000000000affa7: mov eax, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x000000000affa6: mov eax, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x000000000afe74: mov eax, [0x8d49930c6349000f]; or al, 0xb; jmp rcx; 
0x00000000187ee5: mov eax, [0x8d4aff075c7f08fe]; add al, 0x7; ret; 
0x00000000187f15: mov eax, [0x8d4aff075c7f28fe]; add al, 0x7; ret; 
0x0000000018b327: mov eax, [0xe162ff065c6f08fe]; dec byte ptr [rax]; jg short 0x000000000018b34b; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x0000000005a76b: mov eax, [0xffffffbc41001926]; jmp qword ptr [rdi+rax*8]; 
0x0000000010ebb9: mov eax, [r12]; pop rbx; pop rbp; pop r12; ret; 
0x000000000c9fd8: mov eax, [r15+0x10]; lea rdx, [rip+0xe06d1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000013dcd0: mov eax, [r8]; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000085f75: mov eax, [rax+0x10]; add rsp, 0x28; pop rbx; pop r12; jmp rax; 
0x000000001448e2: mov eax, [rax+0x10]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000043ff0: mov eax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x0000000011564f: mov eax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000d72e9: mov eax, [rax+0x10]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x0000000010c018: mov eax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000008603d: mov eax, [rax+0x18]; add rsp, 0x38; pop rbx; pop r12; jmp rax; 
0x000000001448a2: mov eax, [rax+0x18]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x0000000010c008: mov eax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000138d77: mov eax, [rax+0x18]; jmp rax; 
0x000000000928ae: mov eax, [rax+0x18]; mov [rdi+0x18], rax; ret; 
0x0000000011562a: mov eax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000129b27: mov eax, [rax+0x18]; test eax, eax; jne short 0x0000000000129b30; ret; 
0x000000000ff9d8: mov eax, [rax+0x18]; test rax, rax; je short 0x00000000000ff9e1; ret; 
0x0000000009284a: mov eax, [rax+0x18]; test rax, rax; jne short 0x0000000000092840; ret; 
0x000000000b4dc8: mov eax, [rax+0x1f0]; ret; 
0x000000000b4dd8: mov eax, [rax+0x1f8]; ret; 
0x000000000b4de8: mov eax, [rax+0x200]; ret; 
0x000000000b4df8: mov eax, [rax+0x208]; ret; 
0x0000000007d1d1: mov eax, [rax+0x20]; jmp rax; 
0x000000000b4e08: mov eax, [rax+0x210]; ret; 
0x000000000b4e18: mov eax, [rax+0x218]; ret; 
0x000000000b4e28: mov eax, [rax+0x220]; ret; 
0x000000000b4e38: mov eax, [rax+0x228]; ret; 
0x000000000b4e48: mov eax, [rax+0x230]; ret; 
0x000000000b4e58: mov eax, [rax+0x238]; ret; 
0x0000000013aeaf: mov eax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000b4e68: mov eax, [rax+0x240]; ret; 
0x000000000b4db8: mov eax, [rax+0x248]; ret; 
0x000000000d21a8: mov eax, [rax+0x2f8]; test rax, rax; je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x00000000115570: mov eax, [rax+0x30]; ret; 
0x000000000f91a5: mov eax, [rax+0x310]; test rax, rax; je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x000000000d2144: mov eax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000001055d9: mov eax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105651: mov eax, [rax+0x320]; ret; 
0x0000000014c2bf: mov eax, [rax+0x330]; jmp rax; 
0x00000000085cf8: mov eax, [rax+0x340]; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x00000000085ca2: mov eax, [rax+0x340]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000014c4b1: mov eax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x0000000014c529: mov eax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x00000000085681: mov eax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x000000000856d1: mov eax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x00000000085c41: mov eax, [rax+0x370]; jmp qword ptr [rax+0x38]; 
0x0000000014c669: mov eax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x0000000014c6a1: mov eax, [rax+0x370]; mov rax, [rax+0x60]; jmp rax; 
0x00000000085719: mov eax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x00000000085da1: mov eax, [rax+0x370]; mov rcx, [rsp+0x38]; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x00000000085eb1: mov eax, [rax+0x370]; mov rdx, [rsp+0x28]; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x00000000141f54: mov eax, [rax+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x0000000013a2b8: mov eax, [rax+0x38]; test rax, rax; je 0x000000000013a151; mov rdi, rbx; call rax; 
0x00000000138e4c: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000138e59; mov rdi, rbp; call rax; 
0x00000000139253: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000139260; mov rdi, rbp; call rax; 
0x0000000013a046: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013a053; mov rdi, rbx; call rax; 
0x0000000013a3a9: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013a3b6; mov rdi, rbx; call rax; 
0x0000000013abc0: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013abcd; mov rdi, r13; call rax; 
0x0000000013dbdd: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013dbee; lea rdi, [rbp+0xc8]; call rax; 
0x0000000013e560: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013e56d; mov rdi, rbp; call rax; 
0x0000000013e728: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013e737; lea rdi, [r12+0x10]; call rax; 
0x0000000013f79b: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013f7a8; mov rdi, rbp; call rax; 
0x0000000013f90c: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000013f919; mov rdi, r13; call rax; 
0x000000001402ca: mov eax, [rax+0x38]; test rax, rax; je short 0x00000000001402d8; lea rdi, [rbp+0x68]; call rax; 
0x0000000014097f: mov eax, [rax+0x38]; test rax, rax; je short 0x000000000014098c; mov rdi, rbp; call rax; 
0x00000000140cba: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000140cc8; lea rdi, [rbp+0x58]; call rax; 
0x000000001432d8: mov eax, [rax+0x38]; test rax, rax; je short 0x00000000001432e7; lea rdi, [r12+0x10]; call rax; 
0x00000000143911: mov eax, [rax+0x38]; test rax, rax; je short 0x0000000000143920; lea rdi, [r12+0x10]; call rax; 
0x00000000085dad: mov eax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x0000000014026d: mov eax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000003a982: mov eax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000010c647: mov eax, [rax+0x40]; ret; 
0x0000000010531c: mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x0000000003a7e2: mov eax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a782: mov eax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000011e7d2: mov eax, [rax+0x4]; pop r12; pop r13; pop r14; ret; 
0x00000000140afd: mov eax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000003a7c2: mov eax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a752: mov eax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003aa2b: mov eax, [rax+0x58]; mov rdx, [rip+0x1b23b3]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x00000000043e86: mov eax, [rax+0x58]; ret; 
0x0000000014c6a8: mov eax, [rax+0x60]; jmp rax; 
0x000000001055c9: mov eax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105649: mov eax, [rax+0x60]; ret; 
0x00000000083ff8: mov eax, [rax+0x68]; test rax, rax; jne short 0x0000000000083ff0; ret; 
0x00000000144a6f: mov eax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x00000000085720: mov eax, [rax+0x8]; jmp rax; 
0x000000001055ab: mov eax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000002d2a4: mov eax, [rax+0x8]; mov rsi, r12; mov edi, ebp; add rax, [r15]; call rax; 
0x0000000010562b: mov eax, [rax+0x8]; ret; 
0x000000000d7331: mov eax, [rax+0x8]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x0000000009a1cb: mov eax, [rax+0x8]; test rax, rax; jne short 0x000000000009a1c0; xor eax, eax; ret; 
0x0000000009a287: mov eax, [rax+0x8]; test rax, rax; jne short 0x000000000009a280; mov eax, r8d; ret; 
0x0000000013db80: mov eax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000003966e: mov eax, [rax+0xa8]; ret; 
0x00000000086317: mov eax, [rax+0xb8]; shr eax, 0xb; and eax, 0x1; mov [rip+0x16a42b], eax; ret; 
0x0000000007b08d: mov eax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000007b1a6: mov eax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000007d1ca: mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x00000000078dac: mov eax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000011e7d1: mov eax, [rax+r12*8+0x4]; pop r12; pop r13; pop r14; ret; 
0x00000000037e82: mov eax, [rax+rbp*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x0000000019287d: mov eax, [rax+rbx*8]; mov [r13+rbx*8], rdx; test rax, rax; je short 0x000000000019288c; call rax; 
0x00000000037f7e: mov eax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x0000000010c776: mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x0000000003a7c5: mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a957: mov eax, [rax+rdi*4]; ret; 
0x0000000003a31f: mov eax, [rax+rdi*8+0x80]; ret; 
0x00000000075615: mov eax, [rax+rdi*8]; ret; 
0x0000000003a755: mov eax, [rax+rdx*4]; ret; 
0x0000000010cf84: mov eax, [rax+rdx]; shr eax, cl; and eax, 0x1; ret; 
0x0000000010c9b5: mov eax, [rax+rdx]; shr r8d, cl; and r8d, 0x1; mov eax, r8d; ret; 
0x00000000085ebd: mov eax, [rax]; add rsp, 0x28; jmp rax; 
0x000000001403f1: mov eax, [rax]; bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x000000001403d1: mov eax, [rax]; bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x000000000f95e1: mov eax, [rax]; cmp eax, 0x26; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x00000000044b10: mov eax, [rax]; cmp eax, 0x4; je short 0x0000000000044ad8; mov eax, 0xffffffff; ret; 
0x000000000ed568: mov eax, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x0000000013dcd1: mov eax, [rax]; mov [rdx], eax; mov eax, 0x1; ret; 
0x0000000003966c: mov eax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000007b9bf: mov eax, [rax]; mov eax, r8d; ret; 
0x0000000003a97f: mov eax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a7df: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77f: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a7bf: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74f: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a31c: mov eax, [rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039669: mov eax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a7dc: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77c: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a7bc: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74c: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a71c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6fc: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a79c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6dc: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a65c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a61c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a69c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5fc: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6bc: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a67c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a63c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5dc: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000001155c0: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000043e83: mov eax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000087679: mov eax, [rax]; ret; 
0x00000000086ea6: mov eax, [rax]; syscall; 
0x00000000104cd4: mov eax, [rax]; test rax, rax; je 0x0000000000104d70; call rax; 
0x000000000d727f: mov eax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x00000000104b78: mov eax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x00000000084ae1: mov eax, [rax]; test rax, rax; jne short 0x0000000000084ad8; ret; 
0x0000000014395b: mov eax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000143987: mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000139ff4: mov eax, [rbp+0x38]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000000e07b0: mov eax, [rbp+0x4c]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000139d53: mov eax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x00000000139c31: mov eax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000013a861: mov eax, [rbp+0x8]; lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013f271: mov eax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f1e2: mov eax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013b41f: mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000144afe: mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000145301: mov eax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145371: mov eax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f184: mov eax, [rbp+0x8]; mov dword ptr [rsp+0x4], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013a7d2: mov eax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013a88b: mov eax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000139c4c: mov eax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000139830: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000142fda: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000142f21: mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000013b3e3: mov eax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013f1d1: mov eax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000142de1: mov eax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000141e68: mov eax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x00000000139d32: mov eax, [rbp+0x8]; push qword ptr [rsp+0xc8]; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x0000000013e545: mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000f8acc: mov eax, [rbp-0x168]; mov rsi, r13; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000f25c8: mov eax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x00000000104042: mov eax, [rbp-0x50]; call rax; 
0x0000000002e636: mov eax, [rbp-0x60]; mov rdi, r12; call rax; 
0x000000000487d1: mov eax, [rbp-0x7cb80000]; ret; 
0x0000000014c6d7: mov eax, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x00000000085b59: mov eax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x00000000085b49: mov eax, [rbx+0x10]; mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x0000000008373d: mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000114be9: mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x0000000007fbd5: mov eax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x0000000013923f: mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139065: mov eax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000139021: mov eax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001390f9: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000013907e: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000013ae58: mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000114be2: mov eax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000083cf9: mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000009a18c: mov eax, [rbx+0x40]; je short 0x000000000009a19c; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000009a22c: mov eax, [rbx+0x40]; test byte ptr [rbx+0x50], 0x1; jne short 0x000000000009a208; mov rdi, rsi; call rax; 
0x00000000083f1b: mov eax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000014049f: mov eax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x000000001404b3: mov eax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x00000000085b31: mov eax, [rbx+0x8]; lea rdx, [rip+0x1236c1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000011564b: mov eax, [rbx+0x8]; mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013de41: mov eax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x0000000013de5d: mov eax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000014324e: mov eax, [rbx+0xe8]; test rax, rax; jne short 0x0000000000143240; pop rbx; ret; 
0x0000000014d0d9: mov eax, [rbx]; add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x00000000141933: mov eax, [rbx]; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000128c9c: mov eax, [rbx]; mov qword ptr [rax+0x8], 0x0; pop rbx; ret; 
0x00000000141871: mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x00000000087226: mov eax, [rbx]; syscall; 
0x000000001425fa: mov eax, [rbx]; test rax, rax; je short 0x0000000000142608; pop rbx; ret; 
0x000000001665f4: mov eax, [rcx+0x3]; mov [rdx+0x3], eax; lea rax, [rdx+0x6]; ret; 
0x000000000ac4a9: mov eax, [rcx+0x3]; mov [rdx+0x3], eax; mov rax, rdi; ret; 
0x000000001665d5: mov eax, [rcx+0x4]; mov [rdx+0x4], ax; lea rax, [rdx+0x5]; ret; 
0x000000000ac48a: mov eax, [rcx+0x4]; mov [rdx+0x4], ax; mov rax, rdi; ret; 
0x00000000166606: mov eax, [rcx+0x5]; mov [rdx+0x5], eax; lea rax, [rdx+0x8]; ret; 
0x000000001622b6: mov eax, [rcx+0x5]; mov [rdx+0x5], eax; mov rax, rdi; ret; 
0x00000000166687: mov eax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x000000001622f7: mov eax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x000000000897d8: mov eax, [rcx+0x640]; mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x00000000166626: mov eax, [rcx+0x6]; mov [rdx+0x6], eax; lea rax, [rdx+0x9]; ret; 
0x000000001622c6: mov eax, [rcx+0x6]; mov [rdx+0x6], eax; mov rax, rdi; ret; 
0x000000001666a7: mov eax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x00000000162317: mov eax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x00000000166646: mov eax, [rcx+0x7]; mov [rdx+0x7], eax; lea rax, [rdx+0xa]; ret; 
0x000000000ac52d: mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000001666c7: mov eax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x00000000162337: mov eax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x000000000ac50e: mov eax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x00000000166666: mov eax, [rcx+0x8]; mov [rdx+0x8], eax; lea rax, [rdx+0xb]; ret; 
0x000000000ac54d: mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x00000000166557: mov eax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x00000000162227: mov eax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x0000000016b9ba: mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000000b4c7e: mov eax, [rcx+rax*4]; sub eax, [rcx+rsi*4]; je short 0x00000000000b4c68; ret; 
0x0000000016d292: mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000166581: mov eax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x000000000ac426: mov eax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x000000001665b0: mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x000000000ac455: mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x00000000166501: mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x000000001621d1: mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x000000000f89d3: mov eax, [rcx]; movsxd rax, [r13+rax*4]; add rax, r13; jmp rax; 
0x000000000f8e80: mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c56eb: mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000c57e0; ret; 
0x000000000c9fd9: mov eax, [rdi+0x10]; lea rdx, [rip+0xe06d1]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000087761: mov eax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x000000000867ad: mov eax, [rdi+0x10]; mov fs:[0x972], al; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x00000000084b00: mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000084b28: mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x0000000007b813: mov eax, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret; 
0x00000000128c81: mov eax, [rdi+0x10]; test eax, eax; jne short 0x0000000000128c90; pop rbx; ret; 
0x000000000f8e70: mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c5700: mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000c57e0; ret; 
0x000000000f02a0: mov eax, [rdi+0x14]; ret; 
0x000000000c5715: mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000c57e0; ret; 
0x00000000087841: mov eax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000145711: mov eax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x000000000c5730: mov eax, [rdi+0x1c]; cmp eax, [rsi+0x1c]; jne 0x00000000000c57e0; ret; 
0x000000000c574b: mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000c57e0; ret; 
0x0000000013a680: mov eax, [rdi+0x20]; mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x00000000038e72: mov eax, [rdi+0x20]; mov rbp, rdi; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x0000000012f720: mov eax, [rdi+0x20]; ret; 
0x000000001929ad: mov eax, [rdi+0x20]; test rax, rax; je short 0x00000000001929bc; call rax; 
0x000000000c5760: mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000c57e0; ret; 
0x000000000853c1: mov eax, [rdi+0x28]; cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x000000000c5775: mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000c57e0; ret; 
0x00000000095393: mov eax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000013a69f: mov eax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x00000000145a70: mov eax, [rdi+0x28]; ret; 
0x0000000007fc21: mov eax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x000000000c5780: mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000c57e0; ret; 
0x0000000008a947: mov eax, [rdi+0x308]; and eax, 0x10; jne short 0x000000000008a958; ret; 
0x000000000c579b: mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000c57e0; ret; 
0x0000000013a650: mov eax, [rdi+0x30]; test eax, eax; jne short 0x000000000013a6b0; mov dword ptr [rsi], 0x0; ret; 
0x000000000c57b0: mov eax, [rdi+0x34]; cmp eax, [rsi+0x34]; jne short 0x00000000000c57e0; ret; 
0x0000000013917b: mov eax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000001390ee: mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141877: mov eax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000013903d: mov eax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000c57c5: mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000c57e0; ret; 
0x00000000139161: mov eax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x000000000c57d0: mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000c57e0; ret; 
0x0000000013a6df: mov eax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000007fb01: mov eax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x000000000835db: mov eax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x000000000861d1: mov eax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000000c56a0: mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x00000000087790: mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008627d: mov eax, [rdi+0x58]; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x00000000140e15: mov eax, [rdi+0x60]; call qword ptr [rax+0x8]; 
0x00000000140dea: mov eax, [rdi+0x60]; mov dword ptr [r15+0x58], 0x0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000141608: mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000140e5b: mov eax, [rdi+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000084df1: mov eax, [rdi+0x68]; ret; 
0x0000000007e458: mov eax, [rdi+0x70]; test eax, eax; js short 0x000000000007e460; ret; 
0x00000000093051: mov eax, [rdi+0x78]; ret; 
0x0000000005c2a4: mov eax, [rdi+0x88]; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x000000000fe830: mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000087750: mov eax, [rdi+0x8]; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x000000001448c1: mov eax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x00000000144881: mov eax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x00000000139373: mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000141924: mov eax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000013a776: mov eax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000014559d: mov eax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000013b386: mov eax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000c56b5: mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000c57e0; ret; 
0x00000000081ec1: mov eax, [rdi+0x8]; cmp rax, [rdi+0x10]; jae short 0x0000000000081ed0; movzx eax, byte ptr [rax]; ret; 
0x00000000084ee7: mov eax, [rdi+0x8]; cmp rax, rdx; jae short 0x0000000000084f10; movzx eax, byte ptr [rax]; ret; 
0x000000001454d1: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000001454e1: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x00000000144a31: mov eax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x00000000144a26: mov eax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000014194d: mov eax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x000000001419cd: mov eax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000013ff21: mov eax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000144fd9: mov eax, [rdi+0x8]; lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000001452f1: mov eax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x0000000013b359: mov eax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000145569: mov eax, [rdi+0x8]; lea rsi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x00000000142d0e: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142bde: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c1e: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c5e: mov eax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000013b3d1: mov eax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000144a6b: mov eax, [rdi+0x8]; mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x00000000086212: mov eax, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000013f6c7: mov eax, [rdi+0x8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000144af1: mov eax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000145350: mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144b3f: mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000145438: mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144c0f: mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x0000000007b071: mov eax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x000000000c56d0: mov eax, [rdi+0xc]; cmp eax, [rsi+0xc]; jne 0x00000000000c57e0; ret; 
0x00000000099841: mov eax, [rdi+rax+0x8]; sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000129167: mov eax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x0000000000129178; ret; 
0x0000000017e1e7: mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x000000000017e320; ret; 
0x0000000017e230: mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne 0x000000000017e320; ret; 
0x0000000017e310: mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne short 0x000000000017e320; xor eax, eax; ret; 
0x0000000017a024: mov eax, [rdi-0x4]; cmp ecx, eax; jne 0x000000000017aa3f; xor eax, eax; ret; 
0x0000000017e215: mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x0000000017a581: mov eax, [rdi-0x8]; cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b751: mov eax, [rdi-0x8]; cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x0000000017e200: mov eax, [rdi-0xc]; cmp eax, [rsi-0xc]; jne 0x000000000017e320; ret; 
0x00000000089490: mov eax, [rdi]; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000007fb80: mov eax, [rdi]; and eax, 0x200; ret; 
0x0000000007fb50: mov eax, [rdi]; and eax, 0x804; ret; 
0x0000000008e4b0: mov eax, [rdi]; and eax, 0xf000dff; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c568b: mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000c57e0; ret; 
0x000000000947a1: mov eax, [rdi]; cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x00000000094861: mov eax, [rdi]; cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000948d1: mov eax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x000000000948a1: mov eax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x00000000140360: mov eax, [rdi]; mov [r8], eax; mov eax, 0x1; ret; 
0x0000000010b3d1: mov eax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x00000000084aee: mov eax, [rdi]; mov [rdx], rax; ret; 
0x000000000948c1: mov eax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x00000000094851: mov eax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x00000000094841: mov eax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094811: mov eax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf81: mov eax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x0000000008bf71: mov eax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862f1: mov eax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862e1: mov eax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862d1: mov eax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x000000000862c1: mov eax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x00000000087780: mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094821: mov eax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x000000000947f1: mov eax, [rdi]; mov dword ptr [rip+0x158b77], 0x1; mov [rip+0x158b44], rax; ret; 
0x000000000947d1: mov eax, [rdi]; mov dword ptr [rip+0x158b97], 0x1; mov [rip+0x158b89], eax; ret; 
0x000000000945af: mov eax, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x0000000009455c: mov eax, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x0000000009450c: mov eax, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x00000000090ad1: mov eax, [rdi]; mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x0000000000090ae0; ret; 
0x00000000086216: mov eax, [rdi]; mov rdi, r8; jmp rax; 
0x000000000d2e80: mov eax, [rdi]; ret; 
0x0000000008c027: mov eax, [rdi]; shr eax, 0x13; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e490: mov eax, [rdi]; shr eax, 0x1f; mov [rsi], eax; xor eax, eax; ret; 
0x000000000806f0: mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x00000000080700: mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x0000000008e7a0: mov eax, [rdi]; test al, 0x2; je short 0x000000000008e7b0; xor eax, eax; ret; 
0x0000000013e943: mov eax, [rdi]; test eax, eax; jne short 0x000000000013e950; ret; 
0x000000001434d3: mov eax, [rdi]; test eax, eax; jne short 0x00000000001434e0; ret; 
0x0000000007fc12: mov eax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x000000000500bf: mov eax, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x0000000007faf2: mov eax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x0000000007de0a: mov eax, [rdx+0x4c]; cmp [rdx+0x48], eax; cmovne eax, ecx; ret; 
0x000000000f1191: mov eax, [rdx+0x8]; ret; 
0x000000000a7866: mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000003a3b8: mov eax, [rdx+rax]; mov eax, r8d; ret; 
0x0000000003a356: mov eax, [rdx+rax]; test eax, eax; jne short 0x000000000003a368; mov eax, r8d; ret; 
0x0000000003963d: mov eax, [rdx+rdi*8+0x40]; ret; 
0x0000000007d2a8: mov eax, [rdx]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007b347: mov eax, [rdx]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013dd79: mov eax, [rdx]; bswap eax; mov [r8+0xb4], eax; mov eax, 0x1; ret; 
0x0000000013dd49: mov eax, [rdx]; bswap eax; mov [r8+0xb8], eax; mov eax, 0x1; ret; 
0x00000000109632: mov eax, [rdx]; cmp eax, 0x26; je short 0x0000000000109674; mov eax, r8d; ret; 
0x00000000144f80: mov eax, [rdx]; lea rsi, [rsp+0x18]; mov [rsp+0x18], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000007956c: mov eax, [rdx]; ret; 
0x000000000d8021: mov eax, [rip+0x114df1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d7fb1: mov eax, [rip+0x114e61]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d7d81: mov eax, [rip+0x115091]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7d21: mov eax, [rip+0x1150f1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d56e8: mov eax, [rip+0x117722]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d3d71: mov eax, [rip+0x1190a1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d2ce6: mov eax, [rip+0x11a124]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d2cb1: mov eax, [rip+0x11a159]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2c71: mov eax, [rip+0x11a199]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2269: mov eax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f9: mov eax, [rip+0x11ac11]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d213d: mov eax, [rip+0x11ad85]; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000c750e: mov eax, [rip+0x1258fc]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b4e61: mov eax, [rip+0x138061]; mov rax, [rax+0x240]; ret; 
0x000000000b4e51: mov eax, [rip+0x138071]; mov rax, [rax+0x238]; ret; 
0x000000000b4e41: mov eax, [rip+0x138081]; mov rax, [rax+0x230]; ret; 
0x000000000b4e31: mov eax, [rip+0x138091]; mov rax, [rax+0x228]; ret; 
0x000000000b4e21: mov eax, [rip+0x1380a1]; mov rax, [rax+0x220]; ret; 
0x000000000b4e11: mov eax, [rip+0x1380b1]; mov rax, [rax+0x218]; ret; 
0x000000000b4e01: mov eax, [rip+0x1380c1]; mov rax, [rax+0x210]; ret; 
0x000000000b4df1: mov eax, [rip+0x1380d1]; mov rax, [rax+0x208]; ret; 
0x000000000b4de1: mov eax, [rip+0x1380e1]; mov rax, [rax+0x200]; ret; 
0x000000000b4dd1: mov eax, [rip+0x1380f1]; mov rax, [rax+0x1f8]; ret; 
0x000000000b4dc1: mov eax, [rip+0x138101]; mov rax, [rax+0x1f0]; ret; 
0x000000000b4db1: mov eax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x0000000009a2b1: mov eax, [rip+0x152b59]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009a172: mov eax, [rip+0x152c68]; call qword ptr [rax]; 
0x0000000009a031: mov eax, [rip+0x152da9]; call qword ptr [rax]; 
0x00000000099f71: mov eax, [rip+0x152e69]; call qword ptr [rax]; 
0x00000000099220: mov eax, [rip+0x153bea]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000093f01: mov eax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a81: mov eax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000092231: mov eax, [rip+0x15abd9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000911e9: mov eax, [rip+0x15bc21]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x00000000091039: mov eax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090ab9: mov eax, [rip+0x15c351]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000906b1: mov eax, [rip+0x15c759]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090621: mov eax, [rip+0x15c7e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000008e42d: mov eax, [rip+0x15ee61]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094aa0: mov eax, [rip+0x160716]; test eax, eax; jne short 0x0000000000094ab0; ret; 
0x000000000927f1: mov eax, [rip+0x162091]; mov dword ptr [rdi], 0x0; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x00000000087671: mov eax, [rip+0x165799]; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000860a9: mov eax, [rip+0x166e19]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x00000000085bcd: mov eax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x00000000084dd1: mov eax, [rip+0x169889]; ret; 
0x0000000008ae40: mov eax, [rip+0x16996a]; ret; 
0x00000000085cff: mov eax, [rip+0x1699e3]; push r10; call rax; 
0x00000000082c71: mov eax, [rip+0x16a1c1]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x0000000007ff21: mov eax, [rip+0x16cee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000007e461: mov eax, [rip+0x16e9a9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000007c7ab: mov eax, [rip+0x170687]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000078ac9: mov eax, [rip+0x174341]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000586b3: mov eax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000044b31: mov eax, [rip+0x1a82d9]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000044631: mov eax, [rip+0x1a87d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000044599: mov eax, [rip+0x1a8871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041df9: mov eax, [rip+0x1ab011]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041db9: mov eax, [rip+0x1ab051]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d71: mov eax, [rip+0x1ab099]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d3f: mov eax, [rip+0x1ab0cb]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041cb1: mov eax, [rip+0x1ab159]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000041c91: mov eax, [rip+0x1ab179]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c59: mov eax, [rip+0x1ab1b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c19: mov eax, [rip+0x1ab1f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041bd6: mov eax, [rip+0x1ab234]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041ba0: mov eax, [rip+0x1ab26a]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041e20: mov eax, [rip+0x1ab39e]; ret; 
0x00000000041e10: mov eax, [rip+0x1ab3b2]; ret; 
0x00000000041449: mov eax, [rip+0x1ab9c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041411: mov eax, [rip+0x1ab9f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000413a1: mov eax, [rip+0x1aba69]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000040af2: mov eax, [rip+0x1ac318]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000407d4: mov eax, [rip+0x1ac636]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004042b: mov eax, [rip+0x1ac9df]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000003f8b1: mov eax, [rip+0x1ad559]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003f851: mov eax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a9d1: mov eax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a991: mov eax, [rip+0x1b2461]; add rax, fs:[0x0]; ret; 
0x0000000003a9b1: mov eax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x0000000003a2d1: mov eax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x0000000003a311: mov eax, [rip+0x1b2c59]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039661: mov eax, [rip+0x1b3909]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x00000000036ac1: mov eax, [rip+0x1b8c79]; ret; 
0x0000000002d8e1: mov eax, [rip+0x1bf529]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002d671: mov eax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002dec1: mov eax, [rip+0x1c1839]; ret; 
0x0000000002deb1: mov eax, [rip+0x1c1841]; ret; 
0x0000000014ef71: mov eax, [rip+0x9de99]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ef51: mov eax, [rip+0x9deb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ee61: mov eax, [rip+0x9dfa9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014ec31: mov eax, [rip+0x9e1d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec11: mov eax, [rip+0x9e1f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebd1: mov eax, [rip+0x9e239]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebb1: mov eax, [rip+0x9e259]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb91: mov eax, [rip+0x9e279]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb71: mov eax, [rip+0x9e299]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d111: mov eax, [rip+0x9fcf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014d061: mov eax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000014c6d0: mov eax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x0000000014c451: mov eax, [rip+0xa0a71]; jmp qword ptr [rax+0x348]; 
0x0000000014c3ae: mov eax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x0000000014c2e5: mov eax, [rip+0xa0bdd]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014c2b1: mov eax, [rip+0xa0c11]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014be50: mov eax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x00000000149f51: mov eax, [rip+0xa2eb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001431f1: mov eax, [rip+0xa9c19]; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x000000001427b9: mov eax, [rip+0xaa619]; pop rbx; ret; 
0x000000001426d9: mov eax, [rip+0xaa751]; pop rbx; ret; 
0x00000000142749: mov eax, [rip+0xaa879]; pop rbx; ret; 
0x00000000142531: mov eax, [rip+0xaa891]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000142661: mov eax, [rip+0xaa8e1]; pop rbx; ret; 
0x00000000131ec9: mov eax, [rip+0xbaf41]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000131e75: mov eax, [rip+0xbaf95]; mov dword ptr fs:[rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x00000000139520: mov eax, [rip+0xc305a]; test eax, eax; je short 0x0000000000139530; ret; 
0x00000000129b21: mov eax, [rip+0xc3469]; mov eax, [rax+0x18]; test eax, eax; jne short 0x0000000000129b30; ret; 
0x000000001290da: mov eax, [rip+0xc3d30]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000128f41: mov eax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000128666: mov eax, [rip+0xc47a4]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001285e9: mov eax, [rip+0xc4821]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000127d0e: mov eax, [rip+0xc50fc]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x0000000012f0e1: mov eax, [rip+0xc8161]; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000012e1d6: mov eax, [rip+0xc906c]; test rax, rax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x00000000117fc1: mov eax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x00000000117789: mov eax, [rip+0xd5681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012039b: mov eax, [rip+0xdc8c7]; ret; 
0x0000000010c641: mov eax, [rip+0xe0881]; mov eax, [rax+0x40]; ret; 
0x0000000010b389: mov eax, [rip+0xe1a81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b261: mov eax, [rip+0xe1ba9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b189: mov eax, [rip+0xe1c81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010a391: mov eax, [rip+0xe2a79]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000109a51: mov eax, [rip+0xe33b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a19: mov eax, [rip+0xe33f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099e1: mov eax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109989: mov eax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109939: mov eax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e9: mov eax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109749: mov eax, [rip+0xe36c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109719: mov eax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000105631: mov eax, [rip+0xe77d9]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x00000000104e59: mov eax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104ccd: mov eax, [rip+0xe81cd]; mov rax, [rax]; test rax, rax; je 0x0000000000104d70; call rax; 
0x00000000104b71: mov eax, [rip+0xe8329]; mov rax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x000000001038b1: mov eax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010387c: mov eax, [rip+0xe958e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000010386a: mov eax, [rip+0xe95a0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000010306e: mov eax, [rip+0xe9d9c]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010c011: mov eax, [rip+0xea2e1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000010c001: mov eax, [rip+0xea2f1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000102a11: mov eax, [rip+0xea3f9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000100681: mov eax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x00000000100521: mov eax, [rip+0xec8e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001004f1: mov eax, [rip+0xec919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001003c1: mov eax, [rip+0xeca49]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000ff9bb: mov eax, [rip+0xed44f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff92b: mov eax, [rip+0xed4df]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff9d1: mov eax, [rip+0xed4f1]; mov rax, [rax+0x18]; test rax, rax; je short 0x00000000000ff9e1; ret; 
0x000000000ff841: mov eax, [rip+0xed5d1]; cmp byte ptr [rax], 0x0; je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x000000000ff7d1: mov eax, [rip+0xed641]; cmp byte ptr [rax], 0x0; je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff141: mov eax, [rip+0xedcc9]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000fea09: mov eax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe8e4: mov eax, [rip+0xee526]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe887: mov eax, [rip+0xee583]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe111: mov eax, [rip+0xeecf9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000fe0e3: mov eax, [rip+0xeed27]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9c1: mov eax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fd891: mov eax, [rip+0xef579]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x000000000fc221: mov eax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9679: mov eax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f95a1: mov eax, [rip+0xf3869]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x000000000f92c1: mov eax, [rip+0xf3b49]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000ed561: mov eax, [rip+0xff8c1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000fe189: mov eax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x0000000012c6f7: mov eax, [rsi+0x4]; cmp [rdi+0x14], eax; sete al; movzx eax, al; ret; 
0x0000000012c755: mov eax, [rsi+0x4]; cmp [rdi+0x4], eax; sete al; movzx eax, al; ret; 
0x000000000fe42f: mov eax, [rsi+0x50]; mov [rdi+0x50], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000010d649: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000010d5d1: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000010d1d9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000010d559: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000010d359: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000010d259: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000010d459: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000010d159: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000010d4d9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000010d3d9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000010d0d9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a931: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a911: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a811: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a8f1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a881: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a851: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a8c1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a831: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a8e1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a8a1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a861: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a821: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000000fe1e4: mov eax, [rsi+0x70]; mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x0000000014096d: mov eax, [rsi+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000003a951: mov eax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a961: mov eax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000142476: mov eax, [rsi+0x8]; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000013aff1: mov eax, [rsi+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02b: mov eax, [rsi+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x00000000142447: mov eax, [rsi+0x8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000039651: mov eax, [rsi+rax*8+0x80]; ret; 
0x000000001160ef: mov eax, [rsi]; add [rax-0x73], cl; adc eax, 0x68ac7; cmove rax, rdx; ret; 
0x00000000041da6: mov eax, [rsi]; and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000001449e0: mov eax, [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000f8f20: mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x0000000008739e: mov eax, [rsi]; mov edx, 0x16; test eax, eax; cmovne eax, edx; ret; 
0x00000000041de6: mov eax, [rsi]; or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000940c4: mov eax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000005c01c: mov eax, [rsp+0x10]; call rax; 
0x0000000013ff43: mov eax, [rsp+0x10]; lea rdx, [rip+0x6ebd2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c1983: mov eax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x0000000013df7c: mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000014ce1a: mov eax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000013de77: mov eax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000040190: mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x000000000fe4ac: mov eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000030442: mov eax, [rsp+0x18]; call rax; 
0x000000001182b2: mov eax, [rsp+0x18]; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x0000000002ff95: mov eax, [rsp+0x20]; call rax; 
0x000000000c6ff4: mov eax, [rsp+0x20]; mov rsi, r15; call rax; 
0x000000000309df: mov eax, [rsp+0x28]; call rax; 
0x000000001412bb: mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000013f951: mov eax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x00000000109144: mov eax, [rsp+0x4]; add rsp, 0x20; pop r12; ret; 
0x0000000010ae24: mov eax, [rsp+0x4]; add rsp, 0x28; ret; 
0x000000000366c7: mov eax, [rsp+0x50]; mov rcx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000013fa7b: mov eax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000139414: mov eax, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x000000000417d5: mov eax, [rsp+0x80]; add rsp, 0x108; ret; 
0x00000000130e8e: mov eax, [rsp+0x80]; mov edi, [rax]; call qword ptr [rsp+0x38]; 
0x0000000014a186: mov eax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x000000000441a2: mov eax, [rsp+0x8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae7d: mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000044a85: mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000fe043: mov eax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x000000000fdb2a: mov eax, [rsp+0x8]; add rsp, 0x30; pop r13; ret; 
0x0000000002d6d3: mov eax, [rsp+0x8]; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000094009: mov eax, [rsp+0x8]; add rsp, 0x38; ret; 
0x0000000007c7ba: mov eax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x0000000002d1d1: mov eax, [rsp+0x8]; call rax; 
0x000000000806bb: mov eax, [rsp+0x8]; cmp qword ptr [rax+0x30], 0x0; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x0000000013ab85: mov eax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000139719: mov eax, [rsp+0x8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000007b03b: mov eax, [rsp+0x8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x00000000138e36: mov eax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000042846: mov eax, [rsp+0x8]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000429dc: mov eax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000012494b: mov eax, [rsp+0x8]; sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x000000000f917e: mov eax, [rsp+0xc]; add rsp, 0x10; pop rbp; ret; 
0x0000000005c0c1: mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000d68f5: mov eax, [rsp+0xc]; add rsp, 0x28; ret; 
0x0000000014c376: mov eax, [rsp+0xc]; add rsp, 0x30; pop rbx; ret; 
0x000000000f9ab8: mov eax, [rsp+0xc]; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c17: mov eax, [rsp+0xc]; add rsp, 0x78; ret; 
0x0000000013a02d: mov eax, [rsp+0xd8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000040bb0: mov eax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000fe69d: mov eax, [rsp-0x4]; jne short 0x00000000000fe664; neg eax; ret; 
0x00000000127ae8: mov eax, [rsp-0x4]; mov [r11], eax; mov eax, 0x1; ret; 
0x000000000fe645: mov eax, [rsp-0x4c]; jne short 0x00000000000fe605; neg eax; ret; 
0x0000000010068f: mov eax, [rsp-0x50]; ret; 
0x000000000d69a0: mov eax, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000f8f66: mov eax, [rsp]; add rsp, 0x18; ret; 
0x0000000010a65b: mov eax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x000000000d22f2: mov eax, [rsp]; add rsp, 0x28; neg eax; ret; 
0x000000000f7fec: mov eax, [rsp]; add rsp, 0x28; ret; 
0x0000000010a721: mov eax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x00000000192060: mov eax, [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000010c6a3: mov eax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c704: mov eax, [rsp]; add rsp, 0x40; ret; 
0x000000000ffefa: mov eax, [rsp]; add rsp, 0x50; pop r12; ret; 
0x000000000fa1ea: mov eax, [rsp]; add rsp, 0x68; ret; 
0x0000000014be67: mov eax, [rsp]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000012540c: mov eax, [rsp]; mov rdi, r12; call rax; 
0x0000000011f078: mov eax, [rsp]; mov rdi, rbx; call rax; 
0x00000000123591: mov eax, [rsp]; mov rdx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x0000000010ebba: mov eax, [rsp]; pop rbx; pop rbp; pop r12; ret; 
0x000000000ca3bc: mov eax, eax; add rsp, 0x8; ret; 
0x000000000f2f74: mov eax, eax; call r14; 
0x00000000094111: mov eax, eax; cmp eax, 0xfffff000; ja short 0x0000000000094120; mov eax, r8d; ret; 
0x0000000005c1c8: mov eax, eax; cmp eax, 0xffffffff; je short 0x000000000005c1d8; mov eax, r8d; ret; 
0x00000000140395: mov eax, eax; mov [r8], rax; mov eax, 0x1; ret; 
0x0000000013dd09: mov eax, eax; mov [rdx], rax; mov eax, 0x1; ret; 
0x000000001233a6: mov eax, eax; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000123114: mov eax, eax; mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000001014ae: mov eax, eax; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000feb5c: mov eax, eax; mov eax, 0x10; syscall; 
0x000000000fa382: mov eax, eax; mov eax, 0x3; syscall; 
0x000000000fffd2: mov eax, eax; mov eax, 0x4a; syscall; 
0x00000000100092: mov eax, eax; mov eax, 0x4b; syscall; 
0x000000000fa50a: mov eax, eax; mov eax, 0x55; syscall; 
0x000000000416f1: mov eax, eax; mov eax, 0x82; syscall; 
0x00000000109650: mov eax, eax; mov eax, r8d; ret; 
0x000000000f9a96: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000001095ae: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000000ff290: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x000000000ff330: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d72: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000010a4be: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000010a900: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a7a0: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000fa1ca: mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000000f9cd2: mov eax, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x0000000010a3f2: mov eax, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000109395: mov eax, eax; mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000000fe536: mov eax, eax; mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000d22d5: mov eax, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall; 
0x00000000041eeb: mov eax, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000044a61: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b31: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda31: mov eax, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000f9bf1: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000010aea4: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e4: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000d6815: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe486: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad46: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b006: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000109445: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fc6: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f8076: mov eax, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000002d785: mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000003ec00: mov eax, eax; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x000000000f3fd1: mov eax, eax; pop r12; pop r13; pop r14; ret; 
0x0000000003e7d8: mov eax, eax; pop r12; ret; 
0x000000000c7d5b: mov eax, eax; pop rbp; pop r12; pop r13; ret; 
0x00000000036bef: mov eax, eax; pop rbp; pop r12; ret; 
0x000000000fae9b: mov eax, eax; pop rbp; ret; 
0x000000000df74b: mov eax, eax; pop rbx; pop r12; pop r13; ret; 
0x0000000003e791: mov eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000004396c: mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000041a13: mov eax, eax; pop rbx; ret; 
0x0000000003a35e: mov eax, eax; ret; 
0x00000000139c27: mov eax, eax; sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000008852d: mov eax, eax; syscall; 
0x00000000174585: mov eax, eax; vzeroupper; ret; 
0x00000000087c3d: mov eax, eax; xor sil, 0x80; syscall; 
0x00000000184087: mov eax, eax; xtest; je short 0x0000000000184092; vzeroall; ret; 
0x000000001853ca: mov eax, eax; xtest; je short 0x00000000001853d5; vzeroall; ret; 
0x00000000091791: mov eax, ebp; mov rbp, [rbp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000014220e: mov eax, ebp; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x0000000009a912: mov eax, ebp; mov rdx, r12; pop r12; pop r13; ret; 
0x0000000003a136: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000876d1: mov eax, ebp; pop r12; pop r13; ret; 
0x00000000090164: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000005563b: mov eax, ebp; pop rbp; ret; 
0x00000000081e2a: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000882f9: mov eax, ebp; syscall; 
0x00000000087d25: mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000050783: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000008048b: mov eax, ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000104e84: mov eax, ebx; add rsp, 0xffffffffffffff80; mov rdx, rsp; syscall; 
0x0000000014c74a: mov eax, ebx; call qword ptr [rax+0x338]; 
0x00000000130945: mov eax, ebx; mov rcx, r14; mov rdi, r13; call r12; 
0x000000000f8a21: mov eax, ebx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x0000000014c80b: mov eax, ebx; mov rsi, r12; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000141acf: mov eax, ebx; mov rsi, r14; call qword ptr [rax]; 
0x0000000009e166: mov eax, ebx; pop rbx; cmovne rax, rdi; ret; 
0x000000000803dc: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000080d0b: mov eax, ebx; pop rbx; ret; 
0x00000000088acb: mov eax, ebx; syscall; 
0x0000000005bb73: mov eax, ebx; test r8d, r8d; jne short 0x000000000005bb80; pop rbx; ret; 
0x00000000050647: mov eax, ecx; adc eax, eax; ret; 
0x000000000415d0: mov eax, ecx; add rsp, 0xd0; ret; 
0x0000000008cd89: mov eax, ecx; and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000109c10: mov eax, ecx; mov eax, 0x1b3; syscall; 
0x00000000108fb4: mov eax, ecx; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x00000000102870: mov eax, ecx; mov r9, [rsp+0x8]; syscall; 
0x000000000704a8: mov eax, ecx; pop r14; ret; 
0x0000000007a1e4: mov eax, ecx; ret; 
0x00000000044ae3: mov eax, ecx; sub rsi, rdi; syscall; 
0x00000000086df0: mov eax, ecx; syscall; 
0x0000000003a7f0: mov eax, edi; and eax, 0x7f; ret; 
0x00000000117d50: mov eax, edi; and eax, 0xffffff; ret; 
0x00000000117d10: mov eax, edi; bswap eax; ret; 
0x000000000d3866: mov eax, edi; call rax; 
0x00000000043dc0: mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x00000000104e20: mov eax, edi; cmp rdi, rax; jne short 0x0000000000104e58; mov eax, 0x88; syscall; 
0x00000000043e01: mov eax, edi; cqo; idiv rsi; ret; 
0x00000000043dd1: mov eax, edi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x00000000101434: mov eax, edi; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x0000000008b764: mov eax, edi; not esi; and esi, 0x80; syscall; 
0x00000000117d6e: mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000555ae: mov eax, edi; ret; 
0x00000000117d20: mov eax, edi; rol ax, 0x8; ret; 
0x00000000117c4a: mov eax, edi; sar rax, 0x6; ret; 
0x00000000117dd0: mov eax, edi; shr eax, 0x18; ret; 
0x00000000163e4f: mov eax, edi; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x00000000164045: mov eax, edi; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x00000000164067: mov eax, edi; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x0000000016408d: mov eax, edi; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x000000001640a5: mov eax, edi; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000001640cb: mov eax, edi; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x000000001640ed: mov eax, edi; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x0000000016410b: mov eax, edi; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x00000000163de7: mov eax, edi; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x0000000016412d: mov eax, edi; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x0000000016414d: mov eax, edi; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x0000000016416d: mov eax, edi; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x0000000016418d: mov eax, edi; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000001641af: mov eax, edi; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000001641cf: mov eax, edi; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x000000001641ef: mov eax, edi; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x0000000008b987: mov eax, edi; syscall; 
0x000000001763d1: mov eax, edi; vzeroupper; ret; 
0x000000001448f5: mov eax, edi; xor eax, eax; mov dword ptr [rsp], 0x2; mov rdi, rsp; call r8; 
0x00000000055769: mov eax, edx; add rsp, 0x20; ret; 
0x0000000014c51c: mov eax, edx; add rsp, 0x28; ret; 
0x0000000014c65b: mov eax, edx; add rsp, 0x48; ret; 
0x0000000007e34b: mov eax, edx; and eax, 0x1; ret; 
0x000000000404b1: mov eax, edx; and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000001232ee: mov eax, edx; mov [r9], r10; ret; 
0x00000000044621: mov eax, edx; mov [rdi+0x8], rcx; xor eax, eax; mov [rdi], r8; ret; 
0x000000000445f1: mov eax, edx; mov [rdi], r8; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x00000000128ae4: mov eax, edx; mov byte ptr [r8], 0x0; ret; 
0x000000001236a8: mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x00000000128ae1: mov eax, edx; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000018d008: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018ba88: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000012362b: mov eax, edx; movsxd rdx, ecx; ret; 
0x000000001117fb: mov eax, edx; pop r12; ret; 
0x0000000009c49d: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000051365: mov eax, edx; pop rbx; ret; 
0x0000000003f843: mov eax, edx; ret; 
0x0000000002d202: mov eax, edx; syscall; 
0x000000001778bd: mov eax, edx; vzeroupper; ret; 
0x00000000108e83: mov eax, edx; xchg [rip+0xed2f5], eax; cmp eax, 0x1; jg short 0x0000000000108e98; ret; 
0x000000000fea21: mov eax, esi; lea rdx, [rsp-0x38]; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x0000000014032d: mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x000000000902bf: mov eax, esi; mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000412b6: mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000013dc4c: mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x00000000140b85: mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x00000000077066: mov eax, esi; pop r12; pop r13; pop r14; ret; 
0x0000000011c67e: mov eax, esi; pop rbx; ret; 
0x0000000018b910: mov eax, esi; ret; 
0x00000000092c5b: mov eax, esi; syscall; 
0x00000000079a01: mov eax, esp; pop r12; pop r13; pop r14; ret; 
0x0000000008af65: mov eax, esp; pop r12; pop r13; ret; 
0x0000000003afd9: mov eax, esp; pop r12; ret; 
0x00000000103b39: mov eax, esp; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000373bc: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000004ff6b: mov eax, esp; pop rbp; pop r12; ret; 
0x00000000055805: mov eax, esp; pop rbx; pop r12; ret; 
0x0000000003af3b: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000010332b: mov eax, esp; pop rdx; pop r12; ret; 
0x0000000012ff00: mov eax, esp; syscall; 
0x00000000044a20: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x00000000093f93: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x00000000094053: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x000000000d2293: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d67d3: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d69b0: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000f7f83: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f8033: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f9b7f: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c90: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d30: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa180: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa350: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4d0: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fd9f0: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdfc3: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe443: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4f3: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000ff250: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2f0: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000fffa0: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x00000000100060: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000102af0: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x000000001092a3: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x00000000109353: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x00000000109403: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094b3: mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x00000000109570: mov eax, fs:[0x18]; test eax, eax; jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3b0: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a480: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a6a3: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a760: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a8c0: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a963: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad03: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adb3: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae63: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afc3: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b073: mov eax, fs:[0x18]; test eax, eax; jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x0000000008f6a6: mov eax, fs:[0x2d0]; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000008bfe6: mov eax, fs:[0x2d0]; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x0000000010ebb8: mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x000000000f95e0: mov eax, fs:[rax]; cmp eax, 0x26; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x00000000044b0f: mov eax, fs:[rax]; cmp eax, 0x4; je short 0x0000000000044ad8; mov eax, 0xffffffff; ret; 
0x00000000087678: mov eax, fs:[rax]; ret; 
0x00000000109631: mov eax, fs:[rdx]; cmp eax, 0x26; je short 0x0000000000109674; mov eax, r8d; ret; 
0x000000001117fa: mov eax, r10d; pop r12; ret; 
0x000000001117cd: mov eax, r10d; pop rbx; pop rbp; pop r12; ret; 
0x00000000128a36: mov eax, r10d; ret; 
0x0000000007fdcb: mov eax, r10d; syscall; 
0x00000000079a00: mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x0000000008af64: mov eax, r12d; pop r12; pop r13; ret; 
0x0000000007e973: mov eax, r12d; pop r12; ret; 
0x0000000008b0a3: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000004ff6a: mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000055804: mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000041ec1: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000012feff: mov eax, r12d; syscall; 
0x000000000876d0: mov eax, r13d; pop r12; pop r13; ret; 
0x00000000090163: mov eax, r13d; pop rbp; pop r12; pop r13; ret; 
0x000000000882f8: mov eax, r13d; syscall; 
0x00000000092c5a: mov eax, r14d; syscall; 
0x0000000008b763: mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000008b986: mov eax, r15d; syscall; 
0x0000000010181b: mov eax, r8d; add rsp, 0x8; ret; 
0x00000000123113: mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000000f3fd0: mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000c7d5a: mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x00000000036bee: mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000087b76: mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000041a12: mov eax, r8d; pop rbx; ret; 
0x0000000003a35d: mov eax, r8d; ret; 
0x0000000008852c: mov eax, r8d; syscall; 
0x00000000087c3c: mov eax, r8d; xor sil, 0x80; syscall; 
0x000000000415cf: mov eax, r9d; add rsp, 0xd0; ret; 
0x0000000007a1e3: mov eax, r9d; ret; 
0x00000000044ae2: mov eax, r9d; sub rsi, rdi; syscall; 
0x00000000086def: mov eax, r9d; syscall; 
0x0000000006e8c9: mov ebp, 0x1; jmp rax; 
0x00000000111102: mov ebp, 0x2000001; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000186eb1: mov ebp, 0x20c083c0; add rax, rdi; ret; 
0x000000001705f1: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x0000000014269f: mov ebp, 0x3894864; pop rbx; ret; 
0x0000000006c335: mov ebp, 0x39480000; ret; 
0x00000000186ec1: mov ebp, 0x40c083c0; add rax, rdi; ret; 
0x00000000170601: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x000000000940fa: mov ebp, 0x441f0f; add [rax+0x43752f3f], al; add rdi, 0x1; mov eax, 0xf1; syscall; 
0x0000000010917a: mov ebp, 0x441f0f; add [rcx-0x77], al; sar byte ptr [rax+0x121], cl; mov edx, 0x8; syscall; 
0x0000000010a410: mov ebp, 0x448bfff7; and al, 0xc; add rsp, 0x28; ret; 
0x000000000fa39c: mov ebp, 0x448bfff8; and al, 0xc; add rsp, 0x18; ret; 
0x000000000a50e1: mov ebp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a50f1: mov ebp, 0x448d48c0; cmp [rax], dh; ret; 
0x000000000a50d1: mov ebp, 0x448d48c0; cmp [rax], dl; ret; 
0x0000000018d00e: mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x0000000012b7d7: mov ebp, 0x4c00081c; lea eax, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x00000000170611: mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x000000000fa37a: mov ebp, 0x7c8bfff8; and al, 0xc; mov r8d, eax; mov eax, 0x3; syscall; 
0x000000001745c6: mov ebp, 0x83d72948; shl byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x0000000008aae9: mov ebp, 0x8944ffff; loopne 0x000000000008ab31; pop rsp; ret; 
0x000000000e521f: mov ebp, 0x89ffff9f; ret; 
0x000000000918ad: mov ebp, 0xc5e8fff9; stosb [rdi]; stc; jmp qword ptr [rsi+0x66]; 
0x0000000009103c: mov ebp, 0xc7640015; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000013dbe7: mov ebp, 0xc8; call rax; 
0x000000000a5101: mov ebp, 0xea8348c0; add rdx, rax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x00000000186f9e: mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000001706ef: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000a51f7: mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000a5027: mov ebp, 0xf80148c0; ret; 
0x00000000170500: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x0000000017fd04: mov ebp, 0xf80148c0; xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x000000000aa5ec: mov ebp, 0xf80148c6; ret; 
0x000000000f38e5: mov ebp, 0xfffffac2; add [rdi], cl; mov dh, 0x9d; ret; 
0x000000000f25c1: mov ebp, 0xfffffe60; push rax; mov rax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x00000000091794: mov ebp, [rbp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009a166: mov ebp, eax; test r13, r13; jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x0000000013de4f: mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000103f9b: mov ebp, ebx; mov rdi, rbp; call r12; 
0x0000000009bc53: mov ebp, ebx; or eax, [rax]; cmovne rax, rdx; ret; 
0x000000000412bc: mov ebp, ecx; jmp rdx; 
0x00000000038e76: mov ebp, edi; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x00000000077243: mov ebp, edx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000006f61f: mov ebx, 0x1; jmp rax; 
0x00000000098e7a: mov ebx, 0x1f0fffff; add al, ch; fwait; ret far; 
0x00000000089627: mov ebx, 0x2d0; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000000895f9: mov ebx, 0x2d0; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x0000000008975c: mov ebx, 0x2e0; mov eax, 0x111; syscall; 
0x000000000458cd: mov ebx, 0x39489066; ret far; 
0x00000000101811: mov ebx, 0x41fff7d5; mov eax, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x00000000159097: mov ebx, 0x46f00ff2; ret far; 
0x00000000159091: mov ebx, 0x477f0ff3; mov ebx, 0x46f00ff2; ret far; 
0x00000000073b91: mov ebx, 0x4800000d; lea eax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000138e31: mov ebx, 0x48000016; mov eax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000d2ce1: mov ebx, 0x480002b8; mov eax, [rip+0x11a124]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000141d01: mov ebx, 0x48fff95f; lea esi, [rsp+0x10]; mov edi, eax; call rbp; 
0x000000001412b6: mov ebx, 0x48fffffa; mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000fa281: mov ebx, 0x48fffffe; add esp, 0x20; pop rbx; ret; 
0x000000000afea1: mov ebx, 0x49000fa1; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000153bf3: mov ebx, 0x4e6f0ff3; ret far; 
0x00000000153c12: mov ebx, 0x4f7f0ff3; ret far; 
0x000000000f8a33: mov ebx, 0x80; call qword ptr [rax+0x88]; 
0x0000000003e8c4: mov ebx, 0x850f5f3c; out dx, eax; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000010af21: mov ebx, 0x8b000a20; add al, 0xb8; ret; 
0x0000000010a656: mov ebx, 0x8b48fff7; add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x0000000010a657: mov ebx, 0x8b48fff7; add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x0000000009bd3a: mov ebx, 0x8d48000d; add eax, 0xdbb9b; cmove rax, rdx; ret; 
0x00000000072b66: mov ebx, 0xba0d8b48; lahf; sbb [rax], al; call qword ptr [rcx+r8*8-0x40]; 
0x00000000128ad1: mov ebx, 0xc641; mov rax, r10; ret; 
0x00000000104e7f: mov ebx, 0xcc; mov eax, ebx; add rsp, 0xffffffffffffff80; mov rdx, rsp; syscall; 
0x000000001012c4: mov ebx, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f958c: mov ebx, 0xf0; add rsp, 0x190; pop rbx; ret; 
0x000000000f23dd: mov ebx, [rbp-0x1c8]; call r11; 
0x00000000115710: mov ebx, [rbp-0x8]; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d75ca: mov ebx, [rbp-0x8]; leave; ret; 
0x00000000153401: mov ebx, [rsi-0x10]; mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000140e29: mov ebx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000f6667: mov ebx, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000092c81: mov ebx, eax; mov edi, 0x2; mov eax, r14d; syscall; 
0x00000000141e64: mov ebx, eax; pop rax; mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x000000000d3361: mov ebx, ebp; mov rdi, rbp; call r12; 
0x0000000004d757: mov ebx, edi; mov eax, 0x3e; sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x0000000008e779: mov ebx, edi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000108abd: mov ebx, edi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x0000000007b085: mov ebx, edi; test byte ptr [rdi], 0x2; jne short 0x000000000007b0f0; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x000000001037d1: mov ebx, esi; je short 0x00000000001037e0; pop rbx; ret; 
0x00000000117bdb: mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x00000000074929: mov ecx, 0x1; jmp rax; 
0x000000000df1be: mov ecx, 0x1; mov eax, r9d; ret; 
0x00000000074a71: mov ecx, 0x1; mov r10d, 0x1; jmp rax; 
0x00000000073afb: mov ecx, 0x1; movzx eax, byte ptr [rax+rcx]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x00000000073291: mov ecx, 0x1; xor r10d, r10d; jmp rax; 
0x00000000050487: mov ecx, 0x1ea8348; jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x0000000008f941: mov ecx, 0x23; mov eax, r9d; ret; 
0x000000000829c0: mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000011c703: mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000006d76b: mov ecx, 0x420018f3; call qword ptr [rcx+rax*8-0x40]; 
0x00000000075503: mov ecx, 0x48000000; mov esi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000008d74b: mov ecx, 0x480011c1; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000064943: mov ecx, 0x48001431; movsxd ecx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000011e073: mov ecx, 0x48ffffeb; add esp, 0x18; ret; 
0x000000000d8eb3: mov ecx, 0x48fffff5; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000152fc3: mov ecx, 0x4900066e; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010aa1c: mov ecx, 0x49001f0f; mov edx, ecx; mov eax, 0x36; syscall; 
0x0000000008e2bc: mov ecx, 0x63480011; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000014ef53: mov ecx, 0x640009de; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000149f53: mov ecx, 0x64000a2e; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000109a53: mov ecx, 0x64000e33; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000003f853: mov ecx, 0x64001ad5; mov dword ptr [rax], 0x2a; mov rax, r10; ret; 
0x000000000897e0: mov ecx, 0x648; je 0x00000000000898c5; call rax; 
0x00000000170926: mov ecx, 0x83d72948; jmp qword ptr [rax+0x73]; 
0x000000000f0a20: mov ecx, 0x8548000b; ror byte ptr [rdi], 0x85; ret; 
0x0000000010c93b: mov ecx, 0x89000e04; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001090d0: mov ecx, 0x8; mov eax, 0x119; syscall; 
0x0000000010a877: mov ecx, 0x8b48fff7; add al, 0x24; add rsp, 0x20; pop r12; ret; 
0x0000000010a7bf: mov ecx, 0x8b48fff7; and al, 0x8; add rsp, 0x28; ret; 
0x00000000115fad: mov ecx, 0x8d480003; adc eax, 0x40f29; cmovne rax, rdx; ret; 
0x00000000151a72: mov ecx, 0x8d4c0009; sbb eax, 0x68584; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a11: mov ecx, 0x8d4c0009; sbb eax, 0x685a5; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000102a48: mov ecx, 0x9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000001004bf: mov ecx, 0xc085fff5; mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x00000000041414: mov ecx, 0xc764001a; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000010a153: mov ecx, 0xf7000e2c; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000109e53: mov ecx, 0xf7000e2f; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000109153: mov ecx, 0xf7000e3c; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000100453: mov ecx, 0xf7000ec9; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000fff53: mov ecx, 0xf7000ece; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ffb53: mov ecx, 0xf7000ed2; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000fed53: mov ecx, 0xf7000ee0; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fe053: mov ecx, 0xf7000eed; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000fa453: mov ecx, 0xf7000f29; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000d2253: mov ecx, 0xf70011ab; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000018716e: mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed0f: mov ecx, 0xffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000866fe: mov ecx, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000041602: mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000f017a: mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000086676: mov ecx, 0xffffffff; xor r8d, r8d; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000007aae2: mov ecx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret; 
0x0000000010bd0e: mov ecx, [rax]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc8e: mov ecx, [rax]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x000000000f23d3: mov ecx, [rbp-0x1b0]; mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x00000000064ae1: mov ecx, [rbp-0x5c8]; mov r10d, [rbp-0x5d8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000005d2cb: mov ecx, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x000000001136b5: mov ecx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000f25cf: mov ecx, [rbx]; call rax; 
0x0000000010ce81: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d698: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e5: mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x0000000017ba2f: mov ecx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x0000000017ba1c: mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x0000000017ba1b: mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x0000000017ba0a: mov ecx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x00000000111372: mov ecx, [rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000010b3c1: mov ecx, [rdi+0x8]; xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x000000000010b3d0; ret; 
0x000000000b52bb: mov ecx, [rdi+r8*4]; test ecx, ecx; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x000000000b52bc: mov ecx, [rdi+rax*4]; test ecx, ecx; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x00000000178126: mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be1d: mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x000000000018be07; ret; 
0x00000000178146: mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be3d: mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x000000000018be07; ret; 
0x00000000178166: mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x0000000000178111; vzeroupper; ret; 
0x0000000018be5d: mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x000000000018be07; ret; 
0x0000000017848c: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178984: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c27f: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x000000000018be07; ret; 
0x0000000018c5ca: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x000000000018c547; ret; 
0x000000001785a3: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c56a: mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x00000000151a1e: mov ecx, [rdi-0x73]; or al, 0xb; jmp r9; 
0x000000000b16c2: mov ecx, [rdi]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000178962: mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018ca82: mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x000000000018c547; ret; 
0x000000000500c3: mov ecx, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000a7863: mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x00000000090ad4: mov ecx, [rdx]; cmp [rax+0x18], rcx; je short 0x0000000000090ae0; ret; 
0x000000000d7f91: mov ecx, [rip+0x114e79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f61: mov ecx, [rip+0x114ea9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f31: mov ecx, [rip+0x114ed9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f01: mov ecx, [rip+0x114f09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7ea1: mov ecx, [rip+0x114f69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7e71: mov ecx, [rip+0x114f99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7d01: mov ecx, [rip+0x115109]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7381: mov ecx, [rip+0x115a89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6f42: mov ecx, [rip+0x115ec8]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6941: mov ecx, [rip+0x1164c9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6721: mov ecx, [rip+0x1166e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000072b68: mov ecx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d769: mov ecx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000050404: mov ecx, [rip+0x19ca06]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000500d1: mov ecx, [rip+0x19cd39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000005003d: mov ecx, [rip+0x19cdcd]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041ab1: mov ecx, [rip+0x1ab359]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041661: mov ecx, [rip+0x1ab7a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000015443f: mov ecx, [rip+0x98f9b]; lea r11, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543e5: mov ecx, [rip+0x98ff5]; lea r11, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a6f: mov ecx, [rip+0x9b96b]; lea r11, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a0e: mov ecx, [rip+0x9b9cc]; lea r11, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x0000000010aac4: mov ecx, [rip+0xe2346]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa91: mov ecx, [rip+0xe2379]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa61: mov ecx, [rip+0xe23a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a5c1: mov ecx, [rip+0xe2849]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a561: mov ecx, [rip+0xe28a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a531: mov ecx, [rip+0xe28d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a461: mov ecx, [rip+0xe29a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a371: mov ecx, [rip+0xe2a99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a341: mov ecx, [rip+0xe2ac9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a301: mov ecx, [rip+0xe2b09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2d1: mov ecx, [rip+0xe2b39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2a1: mov ecx, [rip+0xe2b69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a271: mov ecx, [rip+0xe2b99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a244: mov ecx, [rip+0xe2bc6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a211: mov ecx, [rip+0xe2bf9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1e1: mov ecx, [rip+0xe2c29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1b1: mov ecx, [rip+0xe2c59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a181: mov ecx, [rip+0xe2c89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a151: mov ecx, [rip+0xe2cb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a124: mov ecx, [rip+0xe2ce6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0f4: mov ecx, [rip+0xe2d16]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0c1: mov ecx, [rip+0xe2d49]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a091: mov ecx, [rip+0xe2d79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a064: mov ecx, [rip+0xe2da6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a034: mov ecx, [rip+0xe2dd6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a001: mov ecx, [rip+0xe2e09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fd1: mov ecx, [rip+0xe2e39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fa1: mov ecx, [rip+0xe2e69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f71: mov ecx, [rip+0xe2e99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f41: mov ecx, [rip+0xe2ec9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f14: mov ecx, [rip+0xe2ef6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109ee1: mov ecx, [rip+0xe2f29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109eb4: mov ecx, [rip+0xe2f56]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e81: mov ecx, [rip+0xe2f89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e51: mov ecx, [rip+0xe2fb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e21: mov ecx, [rip+0xe2fe9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109df1: mov ecx, [rip+0xe3019]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109dc1: mov ecx, [rip+0xe3049]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d91: mov ecx, [rip+0xe3079]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d64: mov ecx, [rip+0xe30a6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d21: mov ecx, [rip+0xe30e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109cf1: mov ecx, [rip+0xe3119]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109c37: mov ecx, [rip+0xe31d3]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109281: mov ecx, [rip+0xe3b89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109254: mov ecx, [rip+0xe3bb6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001091d1: mov ecx, [rip+0xe3c39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001090a1: mov ecx, [rip+0xe3d69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109071: mov ecx, [rip+0xe3d99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108fdb: mov ecx, [rip+0xe3e2f]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f61: mov ecx, [rip+0xe3ea9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f31: mov ecx, [rip+0xe3ed9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105554: mov ecx, [rip+0xe78b6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105521: mov ecx, [rip+0xe78e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054f4: mov ecx, [rip+0xe7916]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054c1: mov ecx, [rip+0xe7949]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105491: mov ecx, [rip+0xe7979]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105464: mov ecx, [rip+0xe79a6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105431: mov ecx, [rip+0xe79d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105404: mov ecx, [rip+0xe7a06]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053d4: mov ecx, [rip+0xe7a36]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053a1: mov ecx, [rip+0xe7a69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105371: mov ecx, [rip+0xe7a99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105344: mov ecx, [rip+0xe7ac6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102cc1: mov ecx, [rip+0xea149]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c91: mov ecx, [rip+0xea179]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c61: mov ecx, [rip+0xea1a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c31: mov ecx, [rip+0xea1d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c04: mov ecx, [rip+0xea206]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102bd1: mov ecx, [rip+0xea239]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ba1: mov ecx, [rip+0xea269]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ad1: mov ecx, [rip+0xea339]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102aa1: mov ecx, [rip+0xea369]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102883: mov ecx, [rip+0xea587]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100451: mov ecx, [rip+0xec9b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100421: mov ecx, [rip+0xec9e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001003f1: mov ecx, [rip+0xeca19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100101: mov ecx, [rip+0xecd09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100041: mov ecx, [rip+0xecdc9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff81: mov ecx, [rip+0xece89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff51: mov ecx, [rip+0xeceb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffc61: mov ecx, [rip+0xed1a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffb51: mov ecx, [rip+0xed2b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff231: mov ecx, [rip+0xedbd9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff091: mov ecx, [rip+0xedd79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fdfa4: mov ecx, [rip+0xeee66]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb3e1: mov ecx, [rip+0xf1a29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb3b1: mov ecx, [rip+0xf1a59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb381: mov ecx, [rip+0xf1a89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb354: mov ecx, [rip+0xf1ab6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb321: mov ecx, [rip+0xf1ae9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2f1: mov ecx, [rip+0xf1b19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2c1: mov ecx, [rip+0xf1b49]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb294: mov ecx, [rip+0xf1b76]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb261: mov ecx, [rip+0xf1ba9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae44: mov ecx, [rip+0xf1fc6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae11: mov ecx, [rip+0xf1ff9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fade1: mov ecx, [rip+0xf2029]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fadb1: mov ecx, [rip+0xf2059]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa5a1: mov ecx, [rip+0xf2869]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa571: mov ecx, [rip+0xf2899]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa4b1: mov ecx, [rip+0xf2959]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa481: mov ecx, [rip+0xf2989]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa451: mov ecx, [rip+0xf29b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa421: mov ecx, [rip+0xf29e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa3f1: mov ecx, [rip+0xf2a19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa221: mov ecx, [rip+0xf2be9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f99a1: mov ecx, [rip+0xf3469]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9971: mov ecx, [rip+0xf3499]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f97c1: mov ecx, [rip+0xf3649]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9791: mov ecx, [rip+0xf3679]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f00d1: mov ecx, [rip+0xfcd39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f00a1: mov ecx, [rip+0xfcd69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0071: mov ecx, [rip+0xfcd99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0041: mov ecx, [rip+0xfcdc9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0011: mov ecx, [rip+0xfcdf9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effe1: mov ecx, [rip+0xfce29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effb1: mov ecx, [rip+0xfce59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b1005: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e65: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af995: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000b1044: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000af9d4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000af9c4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000b10c5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f25: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000afa55: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa35: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000afa98: mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000afa79: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000afab8: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000c5668: mov ecx, [rsi+0xc]; cmp [rdi+0xc], ecx; jne 0x00000000000c57e0; xor eax, eax; ret; 
0x000000000b1085: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b1ee5: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000af9f5: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000b1024: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b1e84: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000af9b4: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000b10a5: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f05: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000afa15: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000001782c5: mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c077: mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x000000000018be07; ret; 
0x000000001782f5: mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c0a7: mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x000000000018be07; ret; 
0x0000000017875c: mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c80e: mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x000000000018c547; ret; 
0x00000000187714: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x00000000176714: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001888f4: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x00000000174c74: mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000000b456f: mov ecx, [rsi+rdx-0x4]; mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x00000000187734: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x00000000188904: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c84: mov ecx, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000b455f: mov ecx, [rsi+rdx-0x8]; mov rsi, [rsi]; mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x0000000018c31d: mov ecx, [rsi+rdx]; test eax, eax; jne 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018cb68: mov ecx, [rsi+rdx]; test eax, eax; jne 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000018c256: mov ecx, [rsi+rdx]; test eax, eax; jne short 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018ca4b: mov ecx, [rsi+rdx]; test eax, eax; jne short 0x000000000018ca30; sub eax, ecx; ret; 
0x000000001539b5: mov ecx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x0000000017dadf: mov ecx, [rsi-0x4]; cmp eax, ecx; jne 0x000000000017dcf0; xor eax, eax; ret; 
0x0000000017b651: mov ecx, [rsi-0x4]; cmp ecx, [rdi-0x4]; jne 0x000000000017b886; xor eax, eax; ret; 
0x0000000017a286: mov ecx, [rsi-0x4]; cmp ecx, eax; jne 0x000000000017aa3f; xor eax, eax; ret; 
0x00000000153d93: mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153f93: mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000154193: mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x00000000158ed4: mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158e54: mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158dd4: mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158d54: mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x000000000bbed1: mov ecx, [rsi-0x7]; dec dword ptr [rax-0x7d]; ret; 
0x00000000179ffb: mov ecx, [rsi-0x8]; cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b62b: mov ecx, [rsi-0x8]; cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x0000000017aa07: mov ecx, [rsi-0x8]; cmp rcx, rax; jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b847: mov ecx, [rsi-0x8]; cmp rcx, rax; jne short 0x000000000017b873; xor eax, eax; ret; 
0x00000000158cc5: mov ecx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c35: mov ecx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158ba5: mov ecx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000001535e1: mov ecx, [rsi-0x9]; mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537c1: mov ecx, [rsi-0xa]; mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x000000001539a1: mov ecx, [rsi-0xb]; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b81: mov ecx, [rsi-0xc]; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153d71: mov ecx, [rsi-0xd]; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f71: mov ecx, [rsi-0xe]; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154171: mov ecx, [rsi-0xf]; mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001598e5: mov ecx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x00000000159803: mov ecx, [rsi]; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000159645: mov ecx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x00000000159793: mov ecx, [rsi]; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x000000001595d5: mov ecx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x00000000159723: mov ecx, [rsi]; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x00000000159565: mov ecx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000b0ec0: mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; lea rax, [rdi+0x4]; ret; 
0x000000000af8c0: mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000001594f5: mov ecx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x00000000159485: mov ecx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x00000000159415: mov ecx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000001593a5: mov ecx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000b0f11: mov ecx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000af901: mov ecx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000b0ea1: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; lea rax, [rdi+0x2]; ret; 
0x000000000af8a1: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000001888f0: mov ecx, [rsi]; mov [rdi], ecx; mov ecx, [rsi+rdx-0x3]; mov [rdi+rdx-0x3], ecx; ret; 
0x000000000b0571: mov ecx, [rsi]; mov dl, [rsi+0x2]; mov [rdi], cx; mov [rdi+0x2], dl; ret; 
0x000000000b0590: mov ecx, [rsi]; mov dl, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dl; ret; 
0x000000000b05d1: mov ecx, [rsi]; mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000af8d0: mov ecx, [rsi]; mov dx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000000af911: mov ecx, [rsi]; mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000af8e0: mov ecx, [rsi]; mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x000000000af921: mov ecx, [rsi]; mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000af931: mov ecx, [rsi]; mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x0000000018b2f0: mov ecx, [rsi]; mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x00000000188901: mov ecx, [rsi]; mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x000000000af941: mov ecx, [rsi]; mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000af951: mov ecx, [rsi]; mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000af961: mov ecx, [rsi]; mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x0000000018b301: mov ecx, [rsi]; mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000014cdce: mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x000000000b5fab: mov ecx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000011f57d: mov ecx, [rsp+0x10]; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x00000000119953: mov ecx, [rsp+0x18]; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x000000000d3a05: mov ecx, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000000c1988: mov ecx, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x000000000309d0: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x0000000011994e: mov ecx, [rsp+0x20]; mov rcx, [rsp+0x18]; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x00000000031996: mov ecx, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345ce: mov ecx, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000118b91: mov ecx, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000013e08a: mov ecx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x000000000366cc: mov ecx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000013de98: mov ecx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000130d01: mov ecx, [rsp+0x28]; mov rdx, [rsp+0xa0]; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x000000000314f0: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000033e7a: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000003199b: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d3: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000085da8: mov ecx, [rsp+0x38]; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x0000000003323d: mov ecx, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x00000000032545: mov ecx, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x00000000118b96: mov ecx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000013940f: mov ecx, [rsp+0x78]; mov r8, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010c69e: mov ecx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6ff: mov ecx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x00000000139053: mov ecx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000d3779: mov ecx, [rsp+0x8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000102873: mov ecx, [rsp+0x8]; syscall; 
0x00000000140e4a: mov ecx, [rsp]; mov rdi, rbx; call rcx; 
0x0000000013a29d: mov ecx, [rsp]; mov rdi, rbx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x0000000010d058: mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret; 
0x00000000130a39: mov ecx, eax; call r12; 
0x000000000e0701: mov ecx, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000ff3de: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff48e: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000ff51a: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff68a: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000d68ce: mov ecx, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000fdb05: mov ecx, eax; mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000013a6bc: mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx; 
0x00000000130b8f: mov ecx, ebp; call r10; 
0x00000000130f4f: mov ecx, ebp; call rbx; 
0x0000000011a61c: mov ecx, ebp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000011f941: mov ecx, ebp; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x00000000141acc: mov ecx, ebp; mov r8, rbx; mov rsi, r14; call qword ptr [rax]; 
0x0000000010e5ac: mov ecx, ebp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000013bf51: mov ecx, ebp; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000d6219: mov ecx, ebp; mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d5ee9: mov ecx, ebp; mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000c1325: mov ecx, ebp; mov rdx, rbp; call rbx; 
0x0000000011b5b4: mov ecx, ebp; mov rsi, [rsp+0x18]; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000011b114: mov ecx, ebp; mov rsi, [rsp+0x18]; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000f2f71: mov ecx, ebx; mov r8, rax; call r14; 
0x000000000807c3: mov ecx, ebx; sub rcx, rdx; cmp rax, rcx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x00000000138fa0: mov ecx, ebx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x00000000131f61: mov ecx, edi; call rbp; 
0x000000000b6547: mov ecx, edi; call rbx; 
0x000000000b9893: mov ecx, edi; jmp qword ptr [rsi+0x2e]; 
0x000000000a17e3: mov ecx, edi; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000007de92: mov ecx, edi; mov rdi, r14; xor r8d, r8d; call r12; 
0x0000000010c779: mov ecx, edi; shr eax, cl; and eax, 0x1; ret; 
0x00000000085e14: mov ecx, edx; call rax; 
0x00000000123215: mov ecx, edx; cmp edi, ecx; ja short 0x0000000000123204; mov eax, 0xffffffff; ret; 
0x0000000010b211: mov ecx, edx; movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x000000000b4542: mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x00000000128ba3: mov ecx, edx; rep movsq [rdi], [rsi]; add rsp, 0x188; ret; 
0x000000000586ba: mov ecx, esi; call qword ptr [rax+r8*8]; 
0x00000000130948: mov ecx, esi; mov rdi, r13; call r12; 
0x00000000110a9b: mov ecx, esi; mov rdi, rbx; call r12; 
0x0000000002dce3: mov ecx, esi; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x0000000013dc30: mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x0000000013e6c5: mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x0000000011a14d: mov ecx, esp; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000119082: mov ecx, esp; mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x000000000d4709: mov ecx, esp; mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000d4ac9: mov ecx, esp; mov rdx, r13; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000142211: mov ecx, esp; mov rdx, rbp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x000000000b622c: mov ecx, esp; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x000000000b1758: mov ecx, fs:[rdi]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000d6ec0: mov edi, 0x1200011; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x000000000946ad: mov edi, 0x1; mov eax, 0xe; lea rsi, [rip+0x115602]; sub rsp, 0x8; syscall; 
0x0000000008a02c: mov edi, 0x1; mov eax, 0xe; syscall; 
0x00000000110e8d: mov edi, 0x2000001; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28]; 
0x00000000111d55: mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000110fa4: mov edi, 0x2000004; call rax; 
0x00000000112e26: mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000111b31: mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000089f8b: mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000007fdc6: mov edi, 0x2; mov eax, r10d; syscall; 
0x00000000092c83: mov edi, 0x2; mov eax, r14d; syscall; 
0x0000000005005a: mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000092c49: mov edi, 0x2; mov r14d, 0xe; mov r10d, 0x8; mov eax, r14d; syscall; 
0x0000000008fcc1: mov edi, 0x2d0; mov eax, 0xcb; syscall; 
0x0000000008aa44: mov edi, 0x2d0; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x0000000010b730: mov edi, 0x44ce894c; mov edi, esp; mov eax, ebx; syscall; 
0x00000000085bc4: mov edi, 0x460; add [rbp+rcx+0x48], dh; mov eax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x0000000009abdd: mov edi, 0x48000c5f; cmovne eax, edx; ret; 
0x0000000009c01d: mov edi, 0x48000ca6; cmovne eax, edx; ret; 
0x0000000009bb1d: mov edi, 0x48000ea1; lea eax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x000000000a18bd: mov edi, 0x480014a3; mov eax, [rax+rdi*8]; ret; 
0x000000000a18dd: mov edi, 0x480014a5; mov eax, [rax+rdi*8]; ret; 
0x0000000005c6bd: mov edi, 0x480014aa; movsxd eax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000fa1e7: mov edi, 0x48bfff8; and al, 0x48; add esp, 0x68; ret; 
0x0000000006eee8: mov edi, 0x48ffffee; movsxd eax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000156f3d: mov edi, 0x49000632; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b0df1: mov edi, 0x49000f93; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000170040: mov edi, 0x4b74c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000a319d: mov edi, 0x4f00106c; movsxd ecx, [rdx+rcx*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000008a978: mov edi, 0x628; mov edx, 0x16; mov eax, 0x0; cmove eax, edx; ret; 
0x00000000144cd2: mov edi, 0x748d4806; and al, 0x8; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000145591: mov edi, 0x748d4806; and al, 0xc; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000088c9d: mov edi, 0x8500002f; ror byte ptr [rdi], 0x44; ret; 
0x00000000060e1e: mov edi, 0x89410018; fmul st, dword ptr [rbx-0x61f63]; jmp qword ptr [rbx+rcx*4]; 
0x000000000fe3a6: mov edi, 0xc0850000; jne short 0x00000000000fe3b0; pop rbp; ret; 
0x00000000077247: mov edi, 0xe0; call rax; 
0x0000000007720b: mov edi, 0xe0; jmp rax; 
0x00000000077284: mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x0000000003133c: mov edi, 0xe80017de; ret far; 
0x0000000003083c: mov edi, 0xe80017e9; ret far; 
0x000000000d4ef4: mov edi, 0xf000000; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000f8e58: mov edi, 0xf8; movups [rsi+0x70], xmm7; ret; 
0x000000000f8eec: mov edi, 0xf8; ret; 
0x00000000100127: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000d6cd0: mov edi, 0xfffea0e9; jmp qword ptr [rsi+0x2e]; 
0x000000000f5140: mov edi, 0xfffeb3e9; jmp qword ptr [rsi+0x2e]; 
0x000000000f9a2b: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000ff8c8: mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x000000000ff958: mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x00000000091798: mov edi, [rax+0x8]; call qword ptr [rax]; 
0x00000000086e9f: mov edi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000130e95: mov edi, [rax]; call qword ptr [rsp+0x38]; 
0x000000000c198d: mov edi, [rax]; call r13; 
0x00000000094403: mov edi, [rax]; mov eax, 0xe2; syscall; 
0x0000000013e035: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013df81: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141874: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000013de7f: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000007c7b7: mov edi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000140e2e: mov edi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000192670: mov edi, [rbp+0x10]; add rdi, rbx; call r12; 
0x00000000085a71: mov edi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000085879: mov edi, [rbp+0x10]; call qword ptr [rbx+0x358]; 
0x00000000103c17: mov edi, [rbp+0x10]; test rdi, rdi; jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x000000000fb9a1: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf1: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc71: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000043d8a: mov edi, [rbp+0x8]; call rax; 
0x000000000f25c0: mov edi, [rbp-0x1a0]; push rax; mov rax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x00000000104037: mov edi, [rbp-0x48]; mov [rbp-0x40], r9; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x00000000121afa: mov edi, [rbp-0x50]; syscall; 
0x0000000013bdab: mov edi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x00000000103c20: mov edi, [rbp]; call rbx; 
0x00000000141f5e: mov edi, [rbp]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000013936a: mov edi, [rbp]; test rdi, rdi; je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f3: mov edi, [rbp]; test rdi, rdi; je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000fb513: mov edi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000089626: mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000000895f8: mov edi, [rbx+0x2d0]; mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x0000000009a209: mov edi, [rbx+0x48]; call rax; 
0x0000000009a192: mov edi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000011f3dd: mov edi, [rbx+0x48]; test rdi, rdi; jne short 0x000000000011f3d0; pop rbx; ret; 
0x000000000f8a32: mov edi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000880f6: mov edi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000008721f: mov edi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000130a66: mov edi, [rbx]; call qword ptr [rsp+0x28]; 
0x00000000141917: mov edi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x00000000121920: mov edi, [rbx]; mov eax, 0x3; syscall; 
0x0000000014187e: mov edi, [rbx]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000897df: mov edi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x000000000f8c08: mov edi, [rcx+0x8]; xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x000000000860b0: mov edi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x0000000004d762: mov edi, [rdi+0x10]; syscall; 
0x000000000412b3: mov edi, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000008fcc0: mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x0000000008aa42: mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x0000000008aa43: mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x0000000013e941: mov edi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x000000000013e950; ret; 
0x000000001434d1: mov edi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x00000000001434e0; ret; 
0x0000000009a089: mov edi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x0000000008e77c: mov edi, [rdi+0x8]; call qword ptr [rbx]; 
0x0000000014c432: mov edi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f1: mov edi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x00000000077246: mov edi, [rdi+0xe0]; call rax; 
0x0000000007720a: mov edi, [rdi+0xe0]; jmp rax; 
0x00000000077283: mov edi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000014c3b5: mov edi, [rdi]; call qword ptr [rax+0x340]; 
0x00000000121890: mov edi, [rdi]; mov eax, 0x3; syscall; 
0x000000001144d4: mov edi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x00000000111369: mov edi, [rdx+0x6348000d]; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000014aec0: mov edi, [rip+0xa2662]; test edi, edi; jns short 0x000000000014aed0; ret; 
0x000000001322da: mov edi, [rip+0xca1e0]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000120390: mov edi, [rip+0xd695a]; test edi, edi; je short 0x00000000001203a8; mov rax, [rip+0xdc8c7]; ret; 
0x00000000101901: mov edi, [rip+0xf4701]; test rdi, rdi; jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x00000000178419: mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c230: mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x000000000018be07; ret; 
0x00000000178293: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178719: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c047: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x000000000018be07; ret; 
0x0000000018c7cd: mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x000000001182bb: mov edi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000d681c: mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000866f9: mov edi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000011b11c: mov edi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000940aa: mov edi, [rsp+0x10]; syscall; 
0x0000000011995b: mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x0000000002d1c4: mov edi, [rsp+0x14]; mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000ffee1: mov edi, [rsp+0x14]; syscall; 
0x0000000014ce1f: mov edi, [rsp+0x18]; call rax; 
0x0000000014cdd3: mov edi, [rsp+0x18]; call rcx; 
0x000000000f9bf8: mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x000000000fe48d: mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad4d: mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b00d: mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x000000000d621e: mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d470e: mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x0000000014c36c: mov edi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x000000000fc118: mov edi, [rsp+0x28]; lea rcx, [rsp+0x38]; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000011f8f1: mov edi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000013a344: mov edi, [rsp+0x2a00]; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x0000000011b5bb: mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000366d6: mov edi, [rsp+0x40]; call r15; 
0x00000000036832: mov edi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000033247: mov edi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x0000000003254f: mov edi, [rsp+0x48]; call r15; 
0x000000000314fa: mov edi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000010912a: mov edi, [rsp+0x4]; syscall; 
0x000000000319a5: mov edi, [rsp+0x58]; call r14; 
0x0000000002ff90: mov edi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309da: mov edi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x000000000345dd: mov edi, [rsp+0x60]; call r13; 
0x0000000003043d: mov edi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f43: mov edi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x00000000083d2b: mov edi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000002ce13: mov edi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000005c00e: mov edi, [rsp+0x8]; mov [rsp+0x7], r9b; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x0000000010939b: mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000000fe53c: mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000001095b0: mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000000ff292: mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x00000000044a64: mov edi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x000000000ff332: mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d74: mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x00000000102b34: mov edi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x0000000010a4c0: mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000010a902: mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a7a2: mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000fa1cc: mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000000fda34: mov edi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000416e7: mov edi, [rsp+0x8]; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x000000000fdb08: mov edi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000423f5: mov edi, [rsp+0x8]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000d5eef: mov edi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x00000000093fed: mov edi, [rsp+0x8]; syscall; 
0x000000000f9cd4: mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x00000000130d16: mov edi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x0000000010aeab: mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x0000000010a3f4: mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x000000001092eb: mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000fa37d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x3; syscall; 
0x000000000fffcd: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4a; syscall; 
0x0000000010008d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4b; syscall; 
0x00000000083766: mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000b57f2: mov edi, [rsp]; lea r9, [rsp+0x28]; call rbx; 
0x0000000010944c: mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fcd: mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f807d: mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000010a6f8: mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000000fa62f: mov edi, [rsp]; mov eax, 0x4f; syscall; 
0x000000000d22db: mov edi, [rsp]; mov eax, 0xe6; syscall; 
0x000000000fa506: mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x0000000014c2bb: mov edi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x000000000428b2: mov edi, [rsp]; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x00000000139174: mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000d4acf: mov edi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000139036: mov edi, [rsp]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001390e5: mov edi, [rsp]; test r15d, r15d; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141f58: mov edi, eax; call qword ptr [rax+0x20]; 
0x00000000085909: mov edi, eax; call qword ptr [rbx+0x358]; 
0x00000000141d0a: mov edi, eax; call rbp; 
0x00000000109c28: mov edi, eax; call rdx; 
0x000000000d68f1: mov edi, eax; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x0000000005567f: mov edi, eax; cmp rdx, rcx; jae short 0x0000000000055668; mov rax, r8; ret; 
0x00000000086219: mov edi, eax; jmp rax; 
0x000000000c7209: mov edi, eax; lea rdi, [rsp+0x88]; call rbp; 
0x0000000002d374: mov edi, eax; mov [rsp+0x10], rdx; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x000000000d69d9: mov edi, eax; mov eax, 0x22; syscall; 
0x00000000108fd1: mov edi, eax; mov eax, 0x3c; syscall; 
0x0000000008894d: mov edi, eax; mov eax, 0xca; syscall; 
0x000000000945b2: mov edi, eax; mov eax, 0xdf; syscall; 
0x0000000009455f: mov edi, eax; mov eax, 0xe0; syscall; 
0x0000000009450f: mov edi, eax; mov eax, 0xe1; syscall; 
0x000000000870af: mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x0000000008b3e9: mov edi, eax; mov eax, 0xea; syscall; 
0x000000000b4c7c: mov edi, eax; mov eax, [rcx+rax*4]; sub eax, [rcx+rsi*4]; je short 0x00000000000b4c68; ret; 
0x00000000087d23: mov edi, eax; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000138d74: mov edi, eax; mov rax, [rax+0x18]; jmp rax; 
0x0000000018f58b: mov edi, eax; movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax; 
0x0000000008f73a: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000002d2aa: mov edi, ebp; add rax, [r15]; call rax; 
0x0000000013a86a: mov edi, ebp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000072fc2: mov edi, ebp; call qword ptr [r12+0x38]; 
0x0000000007f117: mov edi, ebp; call qword ptr [r13+0x10]; 
0x00000000082028: mov edi, ebp; call qword ptr [r13+0x18]; 
0x0000000006f02c: mov edi, ebp; call qword ptr [r13+0x38]; 
0x0000000006e162: mov edi, ebp; call qword ptr [r14+0x38]; 
0x000000000816a5: mov edi, ebp; call qword ptr [r15+0x80]; 
0x00000000083c2c: mov edi, ebp; call qword ptr [rax+0x18]; 
0x00000000138e3b: mov edi, ebp; call qword ptr [rax+0x20]; 
0x00000000139c53: mov edi, ebp; call qword ptr [rax+0x28]; 
0x0000000013a7db: mov edi, ebp; call qword ptr [rax+0x30]; 
0x0000000014c814: mov edi, ebp; call qword ptr [rax+0x338]; 
0x0000000006b677: mov edi, ebp; call qword ptr [rax+0x38]; 
0x0000000014530a: mov edi, ebp; call qword ptr [rax+0x40]; 
0x0000000013f1d8: mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000000815cd: mov edi, ebp; call qword ptr [rax+0x80]; 
0x00000000139028: mov edi, ebp; call qword ptr [rax+0x8]; 
0x00000000081470: mov edi, ebp; call qword ptr [rax+0x90]; 
0x0000000013b3ea: mov edi, ebp; call qword ptr [rax]; 
0x00000000076918: mov edi, ebp; call qword ptr [rbx+0x10]; 
0x0000000006dcf6: mov edi, ebp; call qword ptr [rbx+0x38]; 
0x00000000081b15: mov edi, ebp; call qword ptr [rbx+0x40]; 
0x00000000076c0a: mov edi, ebp; call qword ptr [rbx+0x80]; 
0x000000000823be: mov edi, ebp; call qword ptr [rbx+0x88]; 
0x000000000767b4: mov edi, ebp; call qword ptr [rbx+0x90]; 
0x0000000006e0b1: mov edi, ebp; call qword ptr [rcx+0x38]; 
0x0000000002d301: mov edi, ebp; call qword ptr [rcx]; 
0x0000000011f025: mov edi, ebp; call qword ptr [rsp+0x18]; 
0x0000000011908d: mov edi, ebp; call qword ptr [rsp+0x58]; 
0x0000000013be9f: mov edi, ebp; call qword ptr [rsp+0x8]; 
0x00000000092e4f: mov edi, ebp; call r12; 
0x0000000002d25f: mov edi, ebp; call r15; 
0x000000000435cd: mov edi, ebp; call rax; 
0x0000000004256a: mov edi, ebp; call rbx; 
0x00000000139058: mov edi, ebp; call rcx; 
0x00000000139069: mov edi, ebp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000141e4f: mov edi, ebp; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x0000000007dcc3: mov edi, ebp; lea r9, [rsp+0x10]; call rbp; 
0x000000001398d5: mov edi, ebp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000b5e72: mov edi, ebp; lea r9, [rsp+0x70]; call rbx; 
0x00000000139b6a: mov edi, ebp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x00000000093dc5: mov edi, ebp; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x000000001390ff: mov edi, ebp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139084: mov edi, ebp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000013f941: mov edi, ebp; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000014300c: mov edi, ebp; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x000000000f9165: mov edi, ebp; mov eax, 0x135; syscall; 
0x000000000ff5b2: mov edi, ebp; mov eax, 0x147; syscall; 
0x000000000ff722: mov edi, ebp; mov eax, 0x148; syscall; 
0x000000001029f9: mov edi, ebp; mov eax, 0x9; syscall; 
0x0000000008b673: mov edi, ebp; mov eax, 0xca; syscall; 
0x0000000009419e: mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000d2183: mov edi, ebp; mov eax, 0xe5; syscall; 
0x00000000093d0e: mov edi, ebp; mov eax, 0xf4; syscall; 
0x0000000008cd87: mov edi, ebp; mov eax, ecx; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000008c660: mov edi, ebp; mov eax, r13d; syscall; 
0x0000000008b761: mov edi, ebp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000008b984: mov edi, ebp; mov eax, r15d; syscall; 
0x0000000008e661: mov edi, ebp; mov eax, r8d; syscall; 
0x00000000103b17: mov edi, ebp; mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000008badd: mov edi, ebp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000012385b: mov edi, ebp; mov qword ptr [rsp+0x8], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000139c06: mov edi, ebp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000b6544: mov edi, ebp; mov r9, r15; call rbx; 
0x00000000103ba7: mov edi, ebp; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000b5fb0: mov edi, ebp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000011f585: mov edi, ebp; mov rsi, [rsp+0x8]; call rbp; 
0x0000000007d1c6: mov edi, ebp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000007ae90: mov edi, ebp; pop rbp; pop r12; jmp rax; 
0x000000000813bb: mov edi, ebp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d553: mov edi, ebp; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x0000000007b314: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x0000000013a4dd: mov edi, ebp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000139d4c: mov edi, ebp; pop rcx; mov r12d, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x0000000014c745: mov edi, ebp; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x00000000123924: mov edi, ebp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000103b05: mov edi, ebp; xor esi, esi; call r12; 
0x000000000b615b: mov edi, ebp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x00000000088ced: mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000140e0f: mov edi, ebx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x000000000829cb: mov edi, ebx; call qword ptr [r12+0x48]; 
0x00000000076d64: mov edi, ebx; call qword ptr [r12+0x60]; 
0x00000000081dea: mov edi, ebx; call qword ptr [r12+0x80]; 
0x00000000082222: mov edi, ebx; call qword ptr [r12+0x88]; 
0x00000000077513: mov edi, ebx; call qword ptr [r13+0x38]; 
0x00000000078d8f: mov edi, ebx; call qword ptr [r13+0x58]; 
0x0000000007e628: mov edi, ebx; call qword ptr [r13+0x60]; 
0x0000000007015f: mov edi, ebx; call qword ptr [r14+0x38]; 
0x000000000849bb: mov edi, ebx; call qword ptr [r15+0x18]; 
0x00000000077a3d: mov edi, ebx; call qword ptr [r15+0x38]; 
0x0000000008445d: mov edi, ebx; call qword ptr [rax+0x18]; 
0x0000000013a035: mov edi, ebx; call qword ptr [rax+0x20]; 
0x00000000140dfd: mov edi, ebx; call qword ptr [rax+0x28]; 
0x00000000078db9: mov edi, ebx; call qword ptr [rax+0x58]; 
0x0000000008365c: mov edi, ebx; call qword ptr [rbp+0x18]; 
0x0000000007ae0d: mov edi, ebx; call qword ptr [rbp+0x20]; 
0x0000000007b682: mov edi, ebx; call qword ptr [rbp+0x30]; 
0x00000000078fce: mov edi, ebx; call qword ptr [rbp+0x68]; 
0x00000000081c0b: mov edi, ebx; call qword ptr [rbp+0x70]; 
0x0000000007d8a8: mov edi, ebx; call qword ptr [rbp+0x80]; 
0x00000000080f4d: mov edi, ebx; call qword ptr [rbp+0x90]; 
0x0000000011c70f: mov edi, ebx; call qword ptr [rsp+0x18]; 
0x0000000002e079: mov edi, ebx; call r12; 
0x0000000002ed75: mov edi, ebx; call r14; 
0x000000000d995f: mov edi, ebx; call r15; 
0x000000000760b0: mov edi, ebx; call r8; 
0x00000000075b8a: mov edi, ebx; call rax; 
0x0000000002df06: mov edi, ebx; call rbp; 
0x00000000140e4e: mov edi, ebx; call rcx; 
0x00000000080e4a: mov edi, ebx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x00000000130b8c: mov edi, ebx; mov rcx, r13; call r10; 
0x00000000080dc9: mov edi, ebx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x0000000007c33c: mov edi, ebx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082ba2: mov edi, ebx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x0000000013a2a1: mov edi, ebx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x00000000043b12: mov edi, ecx; call r13; 
0x00000000088276: mov edi, ecx; mov eax, 0xca; syscall; 
0x000000000884b0: mov edi, ecx; mov eax, ebp; syscall; 
0x00000000108ac0: mov edi, ecx; sub rsp, 0x8; call rsi; 
0x00000000088fd6: mov edi, ecx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000007cd89: mov edi, edi; call qword ptr [r13+0x80]; 
0x00000000078179: mov edi, edi; call qword ptr [r14+0x38]; 
0x0000000007caab: mov edi, edi; call qword ptr [r14+0x80]; 
0x0000000007c9d8: mov edi, edi; call qword ptr [r14+0x90]; 
0x000000000781de: mov edi, edi; call qword ptr [rbp+0x38]; 
0x0000000007cf87: mov edi, edi; call qword ptr [rbp+0x80]; 
0x0000000007af2a: mov edi, edi; call qword ptr [rbx+0x18]; 
0x0000000007d07b: mov edi, edi; call qword ptr [rbx+0x80]; 
0x000000001045d4: mov edi, edi; call r13; 
0x0000000007cb04: mov edi, edi; call rax; 
0x00000000042427: mov edi, edi; call rbx; 
0x0000000007a344: mov edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000130a31: mov edi, edi; mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x00000000103e3a: mov edi, edi; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x00000000087170: mov edi, edi; mov eax, r9d; syscall; 
0x0000000007b040: mov edi, edi; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x0000000010cdbf: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000010cd27: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000010c8af: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000010cc9f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000010ca5f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000010c93f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000010cb7f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000010c81f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000010cc0f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000010caef: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000010c78f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000000d3783: mov edi, edi; mov rsi, [rsp+0x60]; call r12; 
0x000000000eebf0: mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x0000000010d64c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000010d5d4: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000010d1dc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000010d55c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000010d35c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000010d25c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000010d45c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000010d15c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000010d4dc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000010d3dc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000010d0dc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000001446bd: mov edi, edi; xor eax, eax; add r13, rbx; call rbp; 
0x00000000055706: mov edi, edx; cmp rax, 0x9; ja short 0x00000000000556e0; mov rax, r8; ret; 
0x0000000017096f: mov edi, edx; inc ecx; jne 0x00000000001708a0; vzeroupper; ret; 
0x00000000177c23: mov edi, edx; inc ecx; jne 0x0000000000177b40; vzeroupper; ret; 
0x00000000186239: mov edi, edx; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d619: mov edi, edx; test ecx, ecx; jne 0x000000000018d500; ret; 
0x00000000131f55: mov edi, esi; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000018d00b: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018ba8b: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000017418f: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x00000000085af7: mov edi, esi; call qword ptr [r12+0x358]; 
0x0000000006c553: mov edi, esi; call qword ptr [r12+0x38]; 
0x0000000013affc: mov edi, esi; call qword ptr [rax+0x10]; 
0x0000000013b036: mov edi, esi; call qword ptr [rax+0x20]; 
0x0000000006c8e9: mov edi, esi; call qword ptr [rbx+0x38]; 
0x0000000006bc34: mov edi, esi; call qword ptr [rcx+0x38]; 
0x00000000142470: mov edi, esi; call qword ptr [rdx+0x10]; 
0x00000000104661: mov edi, esi; call r13; 
0x0000000009a19d: mov edi, esi; call rax; 
0x00000000125a55: mov edi, esi; call rdx; 
0x000000000c1b31: mov edi, esi; jmp qword ptr [rsi+0x2e]; 
0x0000000006cc31: mov edi, esi; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719c1: mov edi, esi; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x0000000010403f: mov edi, esi; mov rax, [rbp-0x50]; call rax; 
0x00000000130f4c: mov edi, esi; mov rcx, r13; call rbx; 
0x0000000007de95: mov edi, esi; xor r8d, r8d; call r12; 
0x0000000013971e: mov edi, esp; call qword ptr [rax+0x20]; 
0x0000000013ae43: mov edi, esp; call qword ptr [rax+0x28]; 
0x0000000013de69: mov edi, esp; call qword ptr [rax+0x8]; 
0x0000000013b00a: mov edi, esp; call qword ptr [rbx]; 
0x000000001447ff: mov edi, esp; call r13; 
0x00000000144901: mov edi, esp; call r8; 
0x0000000002e63a: mov edi, esp; call rax; 
0x0000000011f8ad: mov edi, esp; call rbp; 
0x000000000423e8: mov edi, esp; call rbx; 
0x00000000042a35: mov edi, esp; call rcx; 
0x0000000010b6c5: mov edi, esp; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x0000000005749d: mov edi, esp; mov [rbp-0xd8], r8; call rax; 
0x000000000ffd1c: mov edi, esp; mov eax, 0x10e; syscall; 
0x000000000903c9: mov edi, esp; mov eax, 0x129; syscall; 
0x00000000041fcd: mov edi, esp; mov eax, 0x81; syscall; 
0x0000000010b735: mov edi, esp; mov eax, ebx; syscall; 
0x00000000118b8e: mov edi, esp; mov r9, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x000000001136bc: mov edi, esp; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000424ec: mov edi, esp; mov rdx, rbp; call rbx; 
0x000000000c1490: mov edi, esp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000143041: mov edi, esp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000000586ad: mov edi, esp; sub rsi, rax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000008f49d: mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000010b6c4: mov edi, r12d; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x000000000ffd1b: mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000903c8: mov edi, r12d; mov eax, 0x129; syscall; 
0x00000000041fcc: mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000010b734: mov edi, r12d; mov eax, ebx; syscall; 
0x000000001136bb: mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x00000000093dc4: mov edi, r13d; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x00000000093d0d: mov edi, r13d; mov eax, 0xf4; syscall; 
0x000000000945b1: mov edi, r8d; mov eax, 0xdf; syscall; 
0x0000000009455e: mov edi, r8d; mov eax, 0xe0; syscall; 
0x0000000009450e: mov edi, r8d; mov eax, 0xe1; syscall; 
0x0000000010af66: mov edx, 0x0; cmovb rax, rdx; ret; 
0x0000000009de96: mov edx, 0x0; cmove rax, rdx; ret; 
0x00000000149bb0: mov edx, 0x0; cmovne rax, rdx; add rsp, 0x8; ret; 
0x00000000092881: mov edx, 0x0; cmovne rax, rdx; ret; 
0x0000000010b169: mov edx, 0x0; jne short 0x000000000010b188; mov eax, 0x47; syscall; 
0x000000000a9f26: mov edx, 0x0; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x000000000d84a3: mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000078170: mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000ff04f: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000008a97d: mov edx, 0x16; mov eax, 0x0; cmove eax, edx; ret; 
0x000000000873a0: mov edx, 0x16; test eax, eax; cmovne eax, edx; ret; 
0x00000000080e4c: mov edx, 0x1; call qword ptr [r12+0x80]; 
0x000000000fb9ad: mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x0000000006f643: mov edx, 0x1; jmp rax; 
0x00000000086412: mov edx, 0x1; lock cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x000000000865a1: mov edx, 0x1; lock cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x00000000086e2e: mov edx, 0x1; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000008dfe4: mov edx, 0x1; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000868c7: mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000088b6b: mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e20c: mov edx, 0x1; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000000feb1c: mov edx, 0x1; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000feb51: mov edx, 0x1; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000898e8: mov edx, 0x1; mov esi, 0x81; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x000000000868a3: mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef5: mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff5: mov edx, 0x1; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000088636: mov edx, 0x1; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000886c0: mov edx, 0x1; mov esi, ebx; mov rdi, r9; mov eax, 0xca; syscall; 
0x0000000008f497: mov edx, 0x1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000088ce7: mov edx, 0x1; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000007cf81: mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000088947: mov edx, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000088270: mov edx, 0x1; mov rdi, r9; mov eax, 0xca; syscall; 
0x00000000088fd0: mov edx, 0x1; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000081819: mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008f813: mov edx, 0x1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000829c5: mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x0000000007d8a2: mov edx, 0x1; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000073981: mov edx, 0x1; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000014cfee: mov edx, 0x1; shl rdx, cl; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x00000000074980: mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x000000000870aa: mov edx, 0x21; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x0000000013a02b: mov edx, 0x24848b48; fadd st, dword ptr [rax]; add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000fbcfd: mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000f11d4: mov edx, 0x2; cmove eax, edx; ret; 
0x0000000008684b: mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000867e5: mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000007cd83: mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c04: mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000082478: mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000002d1f1: mov edx, 0x3c; nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000898a8: mov edx, 0x3c; nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000008f64d: mov edx, 0x3d8d4850; mov [0xffff0845e8001258], al; nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000011f943: mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x0000000010b5cd: mov edx, 0x40; mov eax, 0x14; syscall; 
0x000000000d84da: mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000072b6a: mov edx, 0x4200189f; call qword ptr [rcx+rax*8-0x40]; 
0x000000000aa362: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x000000001178f2: mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x000000000b3356: mov edx, 0x49000f70; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000002d3bd: mov edx, 0x49fffffe; mov esi, [rsp]; lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000fbc7d: mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000087502: mov edx, 0x5b000016; mov eax, 0xc; pop rbp; pop r12; ret; 
0x00000000087ab7: mov edx, 0x5f; mov eax, 0x16; cmove eax, edx; ret; 
0x0000000011136a: mov edx, 0x6348000d; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x00000000105317: mov edx, 0x64; mov eax, [rax+0x40]; test eax, eax; cmove eax, edx; ret; 
0x000000000904e2: mov edx, 0x66ffffac; nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000d83dc: mov edx, 0x7d00; cmove rax, rdx; ret; 
0x000000000d842a: mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000001236aa: mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000883bc: mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000087d8b: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e739: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000008f734: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008eca1: mov edx, 0x7fffffff; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000889b1: mov edx, 0x7fffffff; syscall; 
0x000000000881f5: mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000cd4fd: mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x0000000018fb47: mov edx, 0x830f33e2; nop; add al, [rax]; add [rcx-0x7d], al; ret far; 
0x000000000413e4: mov edx, 0x8964001a; add bh, [rax-0x1]; pop rbp; ret; 
0x00000000041e88: mov edx, 0x8; mov eax, 0x80; syscall; 
0x0000000004151f: mov edx, 0x8; mov eax, 0xd; syscall; 
0x00000000050025: mov edx, 0x8; mov eax, 0xe; syscall; 
0x00000000092c55: mov edx, 0x8; mov eax, r14d; syscall; 
0x000000000902c2: mov edx, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000109188: mov edx, 0x8; syscall; 
0x0000000010a71d: mov edx, 0x8b48fff7; add al, 0x24; add rsp, 0x30; pop r12; ret; 
0x0000000008fe63: mov edx, 0x971; xor eax, eax; ret; 
0x0000000008fe93: mov edx, 0x972; xor eax, eax; cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x000000000f9dcc: mov edx, 0xb8001f0f; or [rax], al; add [rax], al; syscall; 
0x000000000d83c2: mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000b4da9: mov edx, 0xffd00148; loopne 0x00000000000b4d40; mov rax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x00000000086de5: mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000014d01f: mov edx, 0xfffffffe; rol rdx, cl; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000009bf20: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 0x1; ret; 
0x0000000003a204: mov edx, 0xffffffff; cmove rax, rdx; ret; 
0x0000000002fd57: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000d8570: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d8440: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000ff8c3: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall; 
0x000000000ff953: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall; 
0x000000001446b7: mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp; 
0x00000000145908: mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx; 
0x000000001447f6: mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13; 
0x0000000014511b: mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx; 
0x00000000043e4f: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x00000000123640: mov edx, 0xffffffff; ret; 
0x00000000114efb: mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x00000000114e39: mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x000000000fc124: mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000007fbb8: mov edx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x00000000086ea3: mov edx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000f8add: mov edx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000003a2ca: mov edx, [rax+0xc0]; mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x00000000089603: mov edx, [rax]; mov eax, 0xcb; syscall; 
0x0000000002d1ce: mov edx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x00000000081611: mov edx, [rbp+0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000011532d: mov edx, [rbp-0x10]; mov dword ptr [rbp-0x80], 0x0; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x00000000064ae8: mov edx, [rbp-0x5d8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x00000000086c07: mov edx, [rbp]; test rdx, rdx; je short 0x0000000000086be0; call rdx; 
0x00000000085bda: mov edx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000114a92: mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000087223: mov edx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000085ca9: mov edx, [rbx+0x20]; push r10; call rax; 
0x0000000013910f: mov edx, [rbx+0x22c0]; mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000087ae8: mov edx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x0000000007c338: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082b9e: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x00000000114c95: mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x000000000f8a24: mov edx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000001148f7: mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x0000000006f68e: mov edx, [rbx]; add [rax+0x63], cl; add al, 0x87; add rax, rsi; jmp rax; 
0x000000000f23da: mov edx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x0000000011513e: mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x0000000003f83a: mov edx, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x0000000016d28f: mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016b9bd: mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000000b4cdb: mov edx, [rcx+rdx*4]; sub edx, [rcx+rsi*4]; je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x0000000010ce17: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010ce28; mov eax, r8d; ret; 
0x0000000010d04a: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d89a: mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d8a8; ret; 
0x0000000014c515: mov edx, [rcx]; add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x28; ret; 
0x0000000014c654: mov edx, [rcx]; add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x48; ret; 
0x000000000d677c: mov edx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000d6784: mov edx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000001155ff: mov edx, [rdi+0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000085b4d: mov edx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x0000000007caf8: mov edx, [rdi+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x00000000085bb4: mov edx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x00000000138d6c: mov edx, [rdi+0x5c]; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x000000000e0909: mov edx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000e083d; ret; 
0x000000000e08b7: mov edx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000e083d; ret; 
0x000000000868f2: mov edx, [rdi+0x8]; mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x00000000141a41: mov edx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000140c64: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000140b6c: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x000000000770e0: mov edx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000007fc0b: mov edx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faeb: mov edx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000130942: mov edx, [rdi]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12; 
0x00000000041d65: mov edx, [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000500c7: mov edx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000fb51d: mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000fbf3a: mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x00000000085c9f: mov edx, [rdx]; mov rax, [rax+0x340]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000094826: mov edx, [rip+0x100]; add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x000000000947f6: mov edx, [rip+0x100]; add [rax-0x77], cl; add eax, 0x158b44; ret; 
0x000000000d8071: mov edx, [rip+0x114d99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d8001: mov edx, [rip+0x114e09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7dc1: mov edx, [rip+0x115049]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7d61: mov edx, [rip+0x1150a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6a01: mov edx, [rip+0x116409]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6901: mov edx, [rip+0x116509]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6849: mov edx, [rip+0x1165c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d3db9: mov edx, [rip+0x119051]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d2e61: mov edx, [rip+0x119fa9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000d2251: mov edx, [rip+0x11abb9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d21d9: mov edx, [rip+0x11ac31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9ba1: mov edx, [rip+0x123269]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9b71: mov edx, [rip+0x123299]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c7549: mov edx, [rip+0x1258c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c73c9: mov edx, [rip+0x125a41]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c72b1: mov edx, [rip+0x125b59]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000945c9: mov edx, [rip+0x158841]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094579: mov edx, [rip+0x158891]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094529: mov edx, [rip+0x1588e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000940d1: mov edx, [rip+0x158d39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094019: mov edx, [rip+0x158df1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000093f71: mov edx, [rip+0x158e99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093ee9: mov edx, [rip+0x158f21]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093ab1: mov edx, [rip+0x159359]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c199: mov edx, [rip+0x190c71]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c161: mov edx, [rip+0x190ca9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000044a91: mov edx, [rip+0x1a8379]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000041721: mov edx, [rip+0x1ab6e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000041699: mov edx, [rip+0x1ab771]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000413e1: mov edx, [rip+0x1aba29]; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003aa2f: mov edx, [rip+0x1b23b3]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x0000000002d144: mov edx, [rip+0x1bfd3e]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x00000000094847: mov edx, [rip+0x1f0fc300]; add [rax], r8b; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x00000000094831: mov edx, [rip+0x6666c300]; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094801: mov edx, [rip+0x6666c300]; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000014eb31: mov edx, [rip+0x9e2d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000014cf7d: mov edx, [rip+0x9ff45]; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000014b2b2: mov edx, [rip+0xa1b58]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000014b26a: mov edx, [rip+0xa1ba0]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x00000000116ca9: mov edx, [rip+0xd6161]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b3a9: mov edx, [rip+0xe1a61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b339: mov edx, [rip+0xe1ad1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b301: mov edx, [rip+0xe1b09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b2d1: mov edx, [rip+0xe1b39]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b2a9: mov edx, [rip+0xe1b61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b279: mov edx, [rip+0xe1b91]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1e1: mov edx, [rip+0xe1c29]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1a1: mov edx, [rip+0xe1c69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b141: mov edx, [rip+0xe1cc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b0f9: mov edx, [rip+0xe1d11]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b039: mov edx, [rip+0xe1dd1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010aed9: mov edx, [rip+0xe1f31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ae31: mov edx, [rip+0xe1fd9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ad79: mov edx, [rip+0xe2091]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010aa39: mov edx, [rip+0xe23d1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a9f1: mov edx, [rip+0xe2419]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a931: mov edx, [rip+0xe24d9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a889: mov edx, [rip+0xe2581]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a7d1: mov edx, [rip+0xe2639]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a731: mov edx, [rip+0xe26d9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a669: mov edx, [rip+0xe27a1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a599: mov edx, [rip+0xe2871]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a4f1: mov edx, [rip+0xe2919]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a421: mov edx, [rip+0xe29e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001099c9: mov edx, [rip+0xe3441]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109971: mov edx, [rip+0xe3499]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109921: mov edx, [rip+0xe34e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001098d1: mov edx, [rip+0xe3539]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109891: mov edx, [rip+0xe3579]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109869: mov edx, [rip+0xe35a1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109839: mov edx, [rip+0xe35d1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109809: mov edx, [rip+0xe3601]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001097a9: mov edx, [rip+0xe3661]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109771: mov edx, [rip+0xe3699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001096c1: mov edx, [rip+0xe3749]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001095e1: mov edx, [rip+0xe3829]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109541: mov edx, [rip+0xe38c9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109479: mov edx, [rip+0xe3991]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001093c9: mov edx, [rip+0xe3a41]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109319: mov edx, [rip+0xe3af1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001091a1: mov edx, [rip+0xe3c69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109151: mov edx, [rip+0xe3cb9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109041: mov edx, [rip+0xe3dc9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109011: mov edx, [rip+0xe3df9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000104e41: mov edx, [rip+0xe7fc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000102b61: mov edx, [rip+0xea2a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010bd7b: mov edx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000001012f1: mov edx, [rip+0xebb19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001012c1: mov edx, [rip+0xebb49]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100699: mov edx, [rip+0xec771]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000100141: mov edx, [rip+0xeccc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001000c1: mov edx, [rip+0xecd49]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100001: mov edx, [rip+0xece09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff9a9: mov edx, [rip+0xed461]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff919: mov edx, [rip+0xed4f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff891: mov edx, [rip+0xed579]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff821: mov edx, [rip+0xed5e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff4c1: mov edx, [rip+0xed949]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff411: mov edx, [rip+0xed9f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff361: mov edx, [rip+0xedaa9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff2c1: mov edx, [rip+0xedb49]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff061: mov edx, [rip+0xedda9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed81: mov edx, [rip+0xee089]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed51: mov edx, [rip+0xee0b9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed11: mov edx, [rip+0xee0f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000feb89: mov edx, [rip+0xee281]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe9f1: mov edx, [rip+0xee419]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe811: mov edx, [rip+0xee5f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7e9: mov edx, [rip+0xee621]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7b1: mov edx, [rip+0xee659]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe789: mov edx, [rip+0xee681]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe719: mov edx, [rip+0xee6f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe681: mov edx, [rip+0xee789]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe629: mov edx, [rip+0xee7e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe5b1: mov edx, [rip+0xee859]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe569: mov edx, [rip+0xee8a1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe4b9: mov edx, [rip+0xee951]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe0d1: mov edx, [rip+0xeed39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe099: mov edx, [rip+0xeed71]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe051: mov edx, [rip+0xeedb9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fda61: mov edx, [rip+0xef3a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa531: mov edx, [rip+0xf28d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa3b1: mov edx, [rip+0xf2a59]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9e11: mov edx, [rip+0xf2ff9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9de1: mov edx, [rip+0xf3029]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9da1: mov edx, [rip+0xf3069]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9d01: mov edx, [rip+0xf3109]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f96d1: mov edx, [rip+0xf3739]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f96a1: mov edx, [rip+0xf3769]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9661: mov edx, [rip+0xf37a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9319: mov edx, [rip+0xf3af1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f90f9: mov edx, [rip+0xf3d11]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f80a9: mov edx, [rip+0xf4d61]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f7ff9: mov edx, [rip+0xf4e11]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f01a1: mov edx, [rip+0xfcc69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f0101: mov edx, [rip+0xfcd09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000086b52: mov edx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x000000001598e1: mov edx, [rsi+0x1]; mov cx, [rsi]; mov [rdi+0x1], dx; mov [rdi], cx; ret; 
0x00000000159800: mov edx, [rsi+0x1]; mov ecx, [rsi]; mov [rdi+0x1], edx; mov [rdi], ecx; ret; 
0x00000000159641: mov edx, [rsi+0x1]; mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x0000000013f6cd: mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000159790: mov edx, [rsi+0x2]; mov ecx, [rsi]; mov [rdi+0x2], edx; mov [rdi], ecx; ret; 
0x000000001595d1: mov edx, [rsi+0x2]; mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x000000000b0ef2: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x6]; ret; 
0x000000000b1d32: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; lea rax, [rdi+0x7]; ret; 
0x000000000af8e2: mov edx, [rsi+0x3]; mov [rdi], ecx; mov [rdi+0x3], edx; ret; 
0x00000000159720: mov edx, [rsi+0x3]; mov ecx, [rsi]; mov [rdi+0x3], edx; mov [rdi], ecx; ret; 
0x00000000159561: mov edx, [rsi+0x3]; mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000000b0ed3: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x5]; ret; 
0x000000000b1d13: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; lea rax, [rdi+0x6]; ret; 
0x000000000af8d3: mov edx, [rsi+0x4]; mov [rdi], ecx; mov [rdi+0x4], dx; ret; 
0x000000001594f1: mov edx, [rsi+0x4]; mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000000b0f84: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd4: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000af944: mov edx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x00000000159481: mov edx, [rsi+0x5]; mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000b0fa4: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000b1df4: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000af954: mov edx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x00000000159411: mov edx, [rsi+0x6]; mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000b0f43: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xa]; ret; 
0x000000000b1d93: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; lea rax, [rdi+0xb]; ret; 
0x000000000af923: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000b0fc4: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e14: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000af964: mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001593a1: mov edx, [rsi+0x7]; mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000b0f24: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0x9]; ret; 
0x000000000b1d74: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; lea rax, [rdi+0xa]; ret; 
0x000000000af914: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000b0f63: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xb]; ret; 
0x000000000b1db3: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; lea rax, [rdi+0xc]; ret; 
0x000000000af933: mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x00000000142461: mov edx, [rsi+0x8]; mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x00000000187e92: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x0000000018a332: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b2f2: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x000000001760b2: mov edx, [rsi+r8-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x00000000187e93: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; lea rax, [rdi+r8]; ret; 
0x0000000018a333: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b2f3: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; ret; 
0x000000001760b3: mov edx, [rsi+rax-0x4]; mov [rdi], ecx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x00000000187eb4: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x0000000018a354: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b304: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000001760d4: mov edx, [rsi+rax-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000001537d1: mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001539b1: mov edx, [rsi-0x3]; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x000000001535c8: mov edx, [rsi-0x4]; mov [rdi-0x11], r11; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537a8: mov edx, [rsi-0x4]; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153988: mov edx, [rsi-0x4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b68: mov edx, [rsi-0x4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b90: mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x000000001535e4: mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537c4: mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x000000001539a4: mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b84: mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153d90: mov edx, [rsi-0x5]; mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153f90: mov edx, [rsi-0x6]; mov ecx, [rsi-0x4]; mov [rdi-0x6], edx; mov [rdi-0x4], ecx; ret; 
0x00000000154190: mov edx, [rsi-0x7]; mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x00000000153405: mov edx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153d59: mov edx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f59: mov edx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154159: mov edx, [rsi-0x8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001533e9: mov edx, [rsi-0x8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153421: mov edx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000153d75: mov edx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f75: mov edx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154175: mov edx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158ed1: mov edx, [rsi-0x9]; mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158e51: mov edx, [rsi-0xa]; mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158dd1: mov edx, [rsi-0xb]; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158d51: mov edx, [rsi-0xc]; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158cc1: mov edx, [rsi-0xd]; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c31: mov edx, [rsi-0xe]; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158ba1: mov edx, [rsi-0xf]; mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000b0e91: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b1cc1: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x000000000af891: mov edx, [rsi]; mov [rdi], dx; ret; 
0x000000000b38f1: mov edx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000b0eb0: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x00000000176700: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; vzeroupper; ret; 
0x000000000b1cf0: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000af8b0: mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000174c60: mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x000000000b3920: mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000b0f01: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000b1d41: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000af8f1: mov edx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b3971: mov edx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000000a1541: mov edx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000a15f1: mov edx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000d68d6: mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x0000000010c699: mov edx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6fa: mov edx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000011a617: mov edx, [rsp+0x10]; mov rcx, rbp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010e5a7: mov edx, [rsp+0x10]; mov rcx, rbp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010911c: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x0000000010adfc: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x0000000010a701: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000010a853: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a633: mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000110f9e: mov edx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000ff3e0: mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff490: mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x00000000114efc: mov edx, [rsp+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x000000000a1471: mov edx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret; 
0x0000000010a9ba: mov edx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000139419: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010b0bf: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fdf: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x0000000011a150: mov edx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000d68d1: mov edx, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000ffed3: mov edx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x000000000c148b: mov edx, [rsp+0x20]; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x00000000109509: mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000fe019: mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000085eb8: mov edx, [rsp+0x28]; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x00000000119085: mov edx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x000000001182b6: mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000114e3a: mov edx, [rsp+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x000000000d377e: mov edx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000030433: mov edx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f39: mov edx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x00000000123595: mov edx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000108fb7: mov edx, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000014be62: mov edx, [rsp+0x8]; mov rax, [rsp]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000009409d: mov edx, [rsp+0x8]; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x00000000081d23: mov edx, [rsp+0x8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000ffd94: mov edx, [rsp+0x8]; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x00000000130d06: mov edx, [rsp+0xa0]; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x000000000a1580: mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000a1590: mov edx, [rsp-0x18]; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x00000000125a51: mov edx, [rsp]; mov rdi, r14; call rdx; 
0x00000000186e41: mov edx, ds; add [rax], al; add [rax+0x1], cl; clc; ret; 
0x000000000402f9: mov edx, eax; and edx, 0x7fffffff; or edx, esi; je 0x0000000000040250; ret; 
0x0000000009bf35: mov edx, eax; bsf rax, rdi; cmove rax, rdx; add eax, 0x1; ret; 
0x00000000111110: mov edx, eax; call qword ptr [r12+0x28]; 
0x00000000111b37: mov edx, eax; call qword ptr [rbx+0x28]; 
0x000000000fe9d6: mov edx, eax; mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x00000000108fb1: mov edx, eax; mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000010286d: mov edx, eax; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x00000000084ade: mov edx, eax; mov rax, [rax]; test rax, rax; jne short 0x0000000000084ad8; ret; 
0x00000000074128: mov edx, eax; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000057497: mov edx, eax; mov rsi, r13; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x00000000104f46: mov edx, eax; mov rsi, r13; xor edi, edi; mov eax, ebx; syscall; 
0x0000000013bc86: mov edx, eax; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x000000001136bf: mov edx, eax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000fe6d3: mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000013b75f: mov edx, eax; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x0000000007fdc1: mov edx, eax; mov rsi, rbx; mov edi, 0x2; mov eax, r10d; syscall; 
0x000000000e9e97: mov edx, eax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000a15e0: mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x000000000a1460: mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000501b9: mov edx, eax; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x00000000109708: mov edx, eax; or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000a1129: mov edx, eax; xor eax, eax; mov [rdi], rdx; ret; 
0x00000000088ac6: mov edx, eax; xor r10d, r10d; mov eax, ebx; syscall; 
0x000000000884aa: mov edx, eax; xor r10d, r10d; mov rdi, r9; mov eax, ebp; syscall; 
0x0000000013b517: mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10]; 
0x000000001148fe: mov edx, ebp; call rax; 
0x000000000424ef: mov edx, ebp; call rbx; 
0x000000000fdac2: mov edx, ebp; mov eax, 0x10f; syscall; 
0x000000000d621c: mov edx, ebp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d470c: mov edx, ebp; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000103b1a: mov edx, ebp; mov esi, 0x1; call r12; 
0x000000000b5fa8: mov edx, ebp; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000110a98: mov edx, ebp; mov rcx, r14; mov rdi, rbx; call r12; 
0x000000000d5eec: mov edx, ebp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d4acc: mov edx, ebp; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000426f0: mov edx, ebp; mov rdi, r12; call rbx; 
0x00000000118b8b: mov edx, ebp; mov rdi, r12; mov r9, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000006dcf3: mov edx, ebp; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000423fa: mov edx, ebp; mov rsi, r12; call rbx; 
0x00000000042564: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000006d329: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c424: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000042421: mov edx, ebp; mov rsi, r12; mov rdi, r15; call rbx; 
0x0000000008169f: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000006b671: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013be99: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x000000000ff5ad: mov edx, ebp; mov rsi, r14; mov edi, ebp; mov eax, 0x147; syscall; 
0x000000000ff71d: mov edx, ebp; mov rsi, r14; mov edi, ebp; mov eax, 0x148; syscall; 
0x0000000004243c: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000006e0ab: mov edx, ebp; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000007998c: mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000142214: mov edx, ebp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x000000000b5e6c: mov edx, ebp; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x0000000007032e: mov edx, ebx; call qword ptr [r13+0x38]; 
0x00000000114e42: mov edx, ebx; call rax; 
0x00000000089ec6: mov edx, ebx; mov eax, 0xe; lea rsi, [rip+0x11f52c]; syscall; 
0x0000000006c550: mov edx, ebx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000072fbf: mov edx, ebx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000001029f6: mov edx, ebx; mov rdi, rbp; mov eax, 0x9; syscall; 
0x000000000788cf: mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000080b20: mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000073398: mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000074698: mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000071c36: mov edx, ebx; mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006e15c: mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000001096a1: mov edx, ecx; cmp ecx, 0xffffffff; je short 0x00000000001096d8; mov eax, 0x149; syscall; 
0x000000001099ac: mov edx, ecx; cmp r9d, 0x1; ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x000000000f9648: mov edx, ecx; mov eax, 0x103; syscall; 
0x000000000fae31: mov edx, ecx; mov eax, 0x104; syscall; 
0x000000000f9301: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000005c181: mov edx, ecx; mov eax, 0x108; syscall; 
0x000000000fb281: mov edx, ecx; mov eax, 0x109; syscall; 
0x000000000fb341: mov edx, ecx; mov eax, 0x10b; syscall; 
0x000000000fe081: mov edx, ecx; mov eax, 0x118; syscall; 
0x000000000fe7d1: mov edx, ecx; mov eax, 0x11; syscall; 
0x00000000109791: mov edx, ecx; mov eax, 0x11e; syscall; 
0x00000000109d51: mov edx, ecx; mov eax, 0x12d; syscall; 
0x00000000109241: mov edx, ecx; mov eax, 0x12e; syscall; 
0x0000000010a231: mov edx, ecx; mov eax, 0x12f; syscall; 
0x00000000109821: mov edx, ecx; mov eax, 0x136; syscall; 
0x00000000109851: mov edx, ecx; mov eax, 0x137; syscall; 
0x000000000f90e1: mov edx, ecx; mov eax, 0x142; syscall; 
0x000000000f95c1: mov edx, ecx; mov eax, 0x14c; syscall; 
0x0000000010a051: mov edx, ecx; mov eax, 0x19; syscall; 
0x000000000fdf91: mov edx, ecx; mov eax, 0x28; syscall; 
0x0000000010aab1: mov edx, ecx; mov eax, 0x35; syscall; 
0x0000000010aa21: mov edx, ecx; mov eax, 0x36; syscall; 
0x0000000010a581: mov edx, ecx; mov eax, 0x37; syscall; 
0x0000000010a021: mov edx, ecx; mov eax, 0xa5; syscall; 
0x00000000109f01: mov edx, ecx; mov eax, 0xaf; syscall; 
0x0000000010a0e1: mov edx, ecx; mov eax, 0xb2; syscall; 
0x0000000010a111: mov edx, ecx; mov eax, 0xb3; syscall; 
0x00000000105541: mov edx, ecx; mov eax, 0xbc; syscall; 
0x000000001054e1: mov edx, ecx; mov eax, 0xbd; syscall; 
0x000000001053c1: mov edx, ecx; mov eax, 0xbe; syscall; 
0x000000001053f1: mov edx, ecx; mov eax, 0xbf; syscall; 
0x00000000105451: mov edx, ecx; mov eax, 0xc0; syscall; 
0x00000000105331: mov edx, ecx; mov eax, 0xc1; syscall; 
0x00000000102bf1: mov edx, ecx; mov eax, 0xd8; syscall; 
0x0000000010b291: mov edx, ecx; mov eax, 0xdc; syscall; 
0x000000000fdb71: mov edx, ecx; mov eax, 0xdd; syscall; 
0x00000000109ea1: mov edx, ecx; mov eax, 0xe9; syscall; 
0x000000000882f6: mov edx, ecx; mov eax, r13d; syscall; 
0x0000000010286a: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x00000000087d20: mov edx, ecx; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x0000000006c8e3: mov edx, ecx; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006f026: mov edx, ecx; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e632: mov edx, ecx; mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000cfab2: mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x0000000005c1b1: mov edx, ecx; test r8d, r8d; je short 0x000000000005c1f8; mov eax, 0x13c; syscall; 
0x000000000fe0b1: mov edx, ecx; test rsi, rsi; je short 0x00000000000fe0e2; mov eax, 0x118; syscall; 
0x0000000008b97f: mov edx, ecx; xor esi, esi; mov rdi, rbp; mov eax, r15d; syscall; 
0x000000000ff51d: mov edx, ecx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff68d: mov edx, ecx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x00000000100120: mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000ffd16: mov edx, edi; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000011c709: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000b4b31: mov edx, edi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001778b8: mov edx, edi; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x000000000c9bdc: mov edx, edi; ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000c9bf0; ret; 
0x000000000fdd54: mov edx, edx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000109181: mov edx, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x000000000a1533: mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000001144f3: mov edx, esi; bnd jmp qword ptr [rsi+0xf]; 
0x000000000f8734: mov edx, esi; mov [rsp+0x138], r13; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x0000000014eb11: mov edx, esi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014eaa1: mov edx, esi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000d20f3: mov edx, esi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000008aa41: mov edx, esi; mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x000000000d3a02: mov edx, esi; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000000428b6: mov edx, esi; mov rax, [rsp+0x8]; call rax; 
0x000000000429d9: mov edx, esi; mov rax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000011f582: mov edx, esi; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x000000000b6234: mov edx, esi; mov rdi, rbp; call rbx; 
0x000000000b6158: mov edx, esi; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000b653c: mov edx, esi; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x000000000742d0: mov edx, esi; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000042a2b: mov edx, esi; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx; 
0x0000000004284b: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000006f6e8: mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e333: mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000080dcc: mov edx, esi; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x00000000140313: mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x000000000fdd5c: mov edx, esi; xor esi, esi; syscall; 
0x000000000b6419: mov edx, esi; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x0000000006b19f: mov edx, esp; call qword ptr [r13+0x38]; 
0x0000000011b121: mov edx, esp; call qword ptr [rsp+0x48]; 
0x00000000114a99: mov edx, esp; call rax; 
0x000000000d73d1: mov edx, esp; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000fa081: mov edx, esp; mov eax, 0x10d; syscall; 
0x000000000930a1: mov edx, esp; mov eax, 0x81; syscall; 
0x0000000008667f: mov edx, esp; mov eax, 0xca; syscall; 
0x00000000087dd0: mov edx, esp; mov eax, ebp; xor sil, 0x80; syscall; 
0x0000000008b3e5: mov edx, esp; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000013aff9: mov edx, esp; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b033: mov edx, esp; mov rdi, r14; call qword ptr [rax+0x20]; 
0x000000000809bc: mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000072620: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc2e: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000077a37: mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081b0f: mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x000000000f9a26: mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000007ccbf: mov edx, esp; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007750d: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d89: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078db3: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000013bf54: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000009a915: mov edx, esp; pop r12; pop r13; ret; 
0x00000000078a3f: mov edx, esp; pop rbx; pop r12; pop r13; jmp rax; 
0x00000000104e8b: mov edx, esp; syscall; 
0x0000000008d047: mov edx, esp; xor edx, edx; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000fa080: mov edx, r12d; mov eax, 0x10d; syscall; 
0x0000000008667e: mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000087dcf: mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x0000000008b3e4: mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000f9a25: mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000007ccbe: mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000078a3e: mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax; 
0x00000000103b19: mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000008169e: mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x000000000402f8: mov edx, r8d; and edx, 0x7fffffff; or edx, esi; je 0x0000000000040250; ret; 
0x0000000013bc85: mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x000000000fe6d2: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000013b75e: mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x00000000109707: mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000087d1f: mov edx, r9d; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x000000000effa1: mov es, [rax]; add [rax], al; syscall; 
0x00000000185d0e: mov es, [rax]; add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000101aae: mov es, [rbp+0xf]; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000010d060: mov es, [rbx]; add al, 0x11; ret; 
0x000000000bb4d9: mov es, [rcx-0x42]; add [rax], al; add [rcx-0x39], cl; ret; 
0x0000000006524f: mov es, [rdi]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000b1b0e: mov es, [rsi]; add [rax], al; ret; 
0x000000000fe615: mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000089755: mov esi, 0x18; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x00000000103b1c: mov esi, 0x1; call r12; 
0x0000000006dffc: mov esi, 0x1; jmp rax; 
0x0000000008e211: mov esi, 0x1; mov eax, 0xca; syscall; 
0x0000000006f619: mov esi, 0x1; mov r11d, 0x1; jmp rax; 
0x000000000760a8: mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b82: mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000013a7d5: mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000100122: mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000103afd: mov esi, 0x3; je short 0x0000000000103b35; mov rdi, rbp; xor esi, esi; call r12; 
0x00000000103b8d: mov esi, 0x3; je short 0x0000000000103bc5; mov rdi, rbp; xor esi, esi; call r12; 
0x0000000006e7f4: mov esi, 0x3d8d48c3; ret; 
0x0000000014be6a: mov esi, 0x40; mov rdi, r12; call rax; 
0x000000000d692a: mov esi, 0x441f0f; add [rax+0x25], bh; syscall; 
0x000000000c5c9e: mov esi, 0x48000000; lea eax, [rdi-0x10]; ret; 
0x00000000192d2e: mov esi, 0x480005d9; test ebx, ebx; jne short 0x0000000000192d18; pop rbx; ret; 
0x0000000008c37e: mov esi, 0x480011d2; movsxd edx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000117a5e: mov esi, 0x48fff675; add esp, 0xd8; ret; 
0x0000000010a7be: mov esi, 0x48fff7b9; mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000001418fc: mov esi, 0x4; mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x00000000141e49: mov esi, 0x4; mov rdi, rbp; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000001398cf: mov esi, 0x4; mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000fea28: mov esi, 0x5401; mov eax, 0x10; syscall; 
0x000000000feb21: mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000feb56: mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000141955: mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000014191e: mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x00000000145671: mov esi, 0x748d4806; and al, 0xc; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000144d8a: mov esi, 0x748d48c5; and al, 0x8; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000584c8: mov esi, 0x77cf39ca; loop 0x0000000000058513; mov eax, eax; ret; 
0x0000000008badf: mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000008aa05: mov esi, 0x7fffffff; cmovbe rsi, r8; syscall; 
0x000000000f012a: mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall; 
0x000000000867ea: mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000008aa49: mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000089997: mov esi, 0x80; mov eax, r8d; syscall; 
0x00000000086dea: mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000008716a: mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x0000000008e65b: mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000014eaa8: mov esi, 0x80; syscall; 
0x00000000086f5a: mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000898ed: mov esi, 0x81; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x0000000008e6f2: mov esi, 0x81; mov dword ptr [rbp], 0x2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000868a8: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fefa: mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ffa: mov esi, 0x81; mov eax, r13d; syscall; 
0x0000000014ca98: mov esi, 0x81; mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x00000000046415: mov esi, 0x83480143; ret; 
0x00000000045292: mov esi, 0x83480153; ret; 
0x0000000014397e: mov esi, 0x85ffff6b; shl byte ptr [rdx+rdi+0x48], 0x8b; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x0000000008c173: mov esi, 0x87; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x0000000004e453: mov esi, 0x89410252; ret; 
0x00000000041680: mov esi, 0x8; mov eax, 0x7f; syscall; 
0x000000000416bc: mov esi, 0x8; mov eax, 0x82; syscall; 
0x000000000416eb: mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000013a88e: mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000008da12: mov esi, 0x8; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000110890: mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret; 
0x000000000a1345: mov esi, 0xca390714; je short 0x00000000000a1340; cmp edx, esi; je short 0x00000000000a1340; ret; 
0x000000001419d5: mov esi, 0xd; call qword ptr [rax+0x28]; 
0x00000000092c4f: mov esi, 0xe; mov r10d, 0x8; mov eax, r14d; syscall; 
0x000000000a1315: mov esi, 0xf2390714; je short 0x00000000000a1310; ret; 
0x0000000007b1ac: mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x000000000f8c0d: mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x0000000007c7b1: mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000082022: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x000000000849b5: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18]; 
0x00000000084457: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x00000000083656: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000007b71b: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000140df5: mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000087e66: mov esi, [r8+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x000000000870b6: mov esi, [r9+0x10]; syscall; 
0x00000000086e9b: mov esi, [rax+0x10]; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000075508: mov esi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000013f6cb: mov esi, [rax+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000010064f: mov esi, [rax+0x8]; mov [rsp-0x38], rax; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000895ff: mov esi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000103cac: mov esi, [rax+0x8]; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x00000000087e67: mov esi, [rax+0xc]; xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x000000000428ae: mov esi, [rbp]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x0000000008721b: mov esi, [rbx+0x10]; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000139b66: mov esi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000007c334: mov esi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000013aff5: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02f: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x00000000139c02: mov esi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x00000000089620: mov esi, [rbx+0x63c]; mov edi, [rbx+0x2d0]; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x000000000f8a2b: mov esi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000103f98: mov esi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x000000000870b7: mov esi, [rcx+0x10]; syscall; 
0x00000000140df6: mov esi, [rdi+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000087c35: mov esi, [rdi+0xc]; xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000178321: mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c0d0: mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x000000000018be07; ret; 
0x000000001787d8: mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c887: mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x0000000014c9c3: mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x000000000b4573: mov esi, [rsi]; mov [rdi+rdx-0x4], ecx; mov [rdi], esi; ret; 
0x000000000b4564: mov esi, [rsi]; mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x0000000017ba2c: mov esi, [rsi]; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x0000000017ba1a: mov esi, [rsi]; mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x0000000017ba07: mov esi, [rsi]; mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x0000000013941e: mov esi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010b0c4: mov esi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fe4: mov esi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000f9bf4: mov esi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x000000000fe023: mov esi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010aea7: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e7: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000ff28b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x000000000ff32b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d6d: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000010a8fb: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a79b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000f9ccd: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x0000000010a3ed: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000044a5c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b2c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda2c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x0000000013904e: mov esi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x00000000083d26: mov esi, [rsp+0x10]; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000426eb: mov esi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000b5fb3: mov esi, [rsp+0x18]; call rbx; 
0x000000000ffedd: mov esi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x0000000011b5b7: mov esi, [rsp+0x18]; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x00000000109397: mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000000c1320: mov esi, [rsp+0x18]; mov rcx, r13; mov rdx, rbp; call rbx; 
0x0000000011b117: mov esi, [rsp+0x18]; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000013de64: mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000000b653f: mov esi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x0000000002d1c9: mov esi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000b622f: mov esi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x0000000002dce6: mov esi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x0000000014c9c9: mov esi, [rsp+0x24]; call rax; 
0x000000000fb9a5: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf5: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc75: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000014c9bf: mov esi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x0000000013a2a6: mov esi, [rsp+0x2a00]; call rcx; 
0x0000000013de93: mov esi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000119957: mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x0000000013e085: mov esi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140e45: mov esi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x000000000314f5: mov esi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000070157: mov esi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000366d1: mov esi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000003682d: mov esi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000033242: mov esi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x0000000003254a: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x00000000033e7f: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000002ff8b: mov esi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309d5: mov esi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x00000000030438: mov esi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f3e: mov esi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x000000000d3786: mov esi, [rsp+0x60]; call r12; 
0x000000000c71fc: mov esi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x000000000319a0: mov esi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d8: mov esi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x0000000011f588: mov esi, [rsp+0x8]; call rbp; 
0x00000000109121: mov esi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x000000000ff3e5: mov esi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff495: mov esi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x0000000010ae01: mov esi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000000d6818: mov esi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe489: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad49: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b009: mov esi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000109448: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fc9: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f8079: mov esi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000011a155: mov esi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000866f4: mov esi, [rsp+0x8]; mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000010a706: mov esi, [rsp+0x8]; syscall; 
0x0000000010a858: mov esi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a638: mov esi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000130d0e: mov esi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x000000000fe538: mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000d22d7: mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall; 
0x000000000fa1c5: mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x00000000083761: mov esi, [rsp+0xc]; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000fa501: mov esi, [rsp+0xc]; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x0000000002d3c2: mov esi, [rsp]; lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3a9: mov esi, [rsp]; lea rdi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000940a2: mov esi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000001095aa: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000010a4ba: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000006dcef: mov esi, [rsp]; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000072fbb: mov esi, [rsp]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x0000000010ce90: mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret; 
0x0000000007b043: mov esi, eax; call qword ptr [rbx+0x18]; 
0x000000000f8c4c: mov esi, eax; mov eax, 0x75; syscall; 
0x000000000f8d57: mov esi, eax; mov eax, 0x77; syscall; 
0x000000000902c8: mov esi, eax; mov eax, 0xe; syscall; 
0x000000000fc122: mov esi, eax; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000007af27: mov esi, eax; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x00000000108af8: mov esi, eax; mov rdi, rbp; call r12; 
0x000000000cfad8: mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cfb40: mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000014bcdf: mov esi, eax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000044ade: mov esi, eax; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x00000000042a2e: mov esi, ebp; add r15, [rsp]; mov rdi, r12; call rcx; 
0x00000000080dcf: mov esi, ebp; call qword ptr [r12+0x78]; 
0x000000000809bf: mov esi, ebp; call qword ptr [r14+0x38]; 
0x0000000013916a: mov esi, ebp; call qword ptr [rax+0x10]; 
0x00000000143044: mov esi, ebp; call qword ptr [rax+0x18]; 
0x0000000013bdb4: mov esi, ebp; call qword ptr [rbp+0x40]; 
0x0000000013b762: mov esi, ebp; call qword ptr [rbx+0x40]; 
0x000000000d4713: mov esi, ebp; call qword ptr [rsp+0x48]; 
0x0000000009a08d: mov esi, ebp; call rax; 
0x000000000f8ad3: mov esi, ebp; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000111108: mov esi, ebp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000041fc6: mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009309a: mov esi, ebp; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x00000000111d53: mov esi, ebp; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000f9a29: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000008b3e7: mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000010b6c2: mov esi, ebp; mov edi, r12d; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x000000000903c6: mov esi, ebp; mov edi, r12d; mov eax, 0x129; syscall; 
0x00000000093d0b: mov esi, ebp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x000000000fb51b: mov esi, ebp; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000f9a93: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000139178: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013903a: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000013e032: mov esi, ebp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000004284e: mov esi, ebp; mov rdi, r12; call rax; 
0x0000000005749a: mov esi, ebp; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x0000000011908a: mov esi, ebp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x0000000004361e: mov esi, ebp; mov rdi, r13; call rax; 
0x00000000071c39: mov esi, ebp; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006c8e6: mov esi, ebp; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc31: mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000078176: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000007ccc2: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x000000000781db: mov esi, ebp; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000006e15f: mov esi, ebp; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000139025: mov esi, ebp; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000006f6eb: mov esi, ebp; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e336: mov esi, ebp; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000081de7: mov esi, ebp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x00000000077510: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d8c: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007998f: mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000078db6: mov esi, ebp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000081c08: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000013bf57: mov esi, ebp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x00000000104f49: mov esi, ebp; xor edi, edi; mov eax, ebx; syscall; 
0x00000000142217: mov esi, ebx; call qword ptr [rsp+0x18]; 
0x0000000008863b: mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000112e24: mov esi, ebx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000089f89: mov esi, ebx; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000007fdc4: mov esi, ebx; mov edi, 0x2; mov eax, r10d; syscall; 
0x000000000881f3: mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x00000000041ee8: mov esi, ebx; mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000140e31: mov esi, ebx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000886c5: mov esi, ebx; mov rdi, r9; mov eax, 0xca; syscall; 
0x0000000013f1d5: mov esi, ebx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000142de5: mov esi, ebx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000011f022: mov esi, ebx; mov rdi, rbp; call qword ptr [rsp+0x18]; 
0x000000001136c2: mov esi, ecx; call qword ptr [rcx+0x28]; 
0x000000000fe6d6: mov esi, ecx; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000010b732: mov esi, ecx; mov edi, r12d; mov eax, ebx; syscall; 
0x0000000006f029: mov esi, ecx; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e635: mov esi, ecx; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000042304: mov esi, edi; call r14; 
0x000000000c6ff9: mov esi, edi; call rax; 
0x000000000fecf5: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000c7531: mov esi, edi; mov eax, 0xa4; xor edi, edi; syscall; 
0x00000000092c7f: mov esi, edi; mov ebx, eax; mov edi, 0x2; mov eax, r14d; syscall; 
0x00000000111b2f: mov esi, edi; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000014c2b8: mov esi, edi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000011f949: mov esi, edi; mov rdi, r12; call rbp; 
0x000000000424e9: mov esi, edi; mov rdi, r12; mov rdx, rbp; call rbx; 
0x0000000006cc2e: mov esi, edi; mov rdi, r14; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719be: mov esi, edi; mov rdi, r14; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x00000000081b12: mov esi, edi; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x000000000c6cb8: mov esi, edi; mov rdi, rbp; call rbx; 
0x0000000013e6ca: mov esi, edx; add rdi, 0x10; jmp rcx; 
0x00000000055754: mov esi, edx; add rsp, 0x20; sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x0000000009aea4: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009aeb8; ret; 
0x0000000009af14: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009af28; ret; 
0x0000000009b144: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009b158; ret; 
0x0000000009bac4: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009bad8; ret; 
0x0000000009d364: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009d378; ret; 
0x0000000009d3e4: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x000000000009d3f8; ret; 
0x000000000a16b4: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000a16c8; ret; 
0x000000000b4ec4: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b4ed8; ret; 
0x000000000b4f34: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b4f48; ret; 
0x000000000b5124: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5138; ret; 
0x000000000b5224: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5238; ret; 
0x000000000b5474: mov esi, edx; and esi, 0x120; cmp esi, 0x120; je short 0x00000000000b5488; ret; 
0x000000001144d8: mov esi, edx; call rax; 
0x000000001098b7: mov esi, edx; cmp r8d, 0x1; ja short 0x00000000001098e8; mov eax, 0x4; syscall; 
0x00000000109906: mov esi, edx; cmp r8d, 0x1; ja short 0x0000000000109938; mov eax, 0x5; syscall; 
0x00000000109957: mov esi, edx; cmp r8d, 0x1; ja short 0x0000000000109988; mov eax, 0x6; syscall; 
0x000000000c6bb5: mov esi, edx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x0000000013e6ea: mov esi, edx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x00000000140b1a: mov esi, edx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x0000000014028a: mov esi, edx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x0000000013db9a: mov esi, edx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x000000000889af: mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x00000000101431: mov esi, edx; mov r8, rdi; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000139116: mov esi, esi; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000141ad2: mov esi, esi; call qword ptr [rax]; 
0x0000000013bc89: mov esi, esi; call qword ptr [rbp+0x40]; 
0x0000000009a196: mov esi, esi; call rax; 
0x000000000f87cf: mov esi, esi; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000000ff5b0: mov esi, esi; mov edi, ebp; mov eax, 0x147; syscall; 
0x000000000ff720: mov esi, esi; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000000ffd19: mov esi, esi; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000013a341: mov esi, esi; mov rdi, [rsp+0x2a00]; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x000000001447fc: mov esi, esi; mov rdi, r12; call r13; 
0x0000000004243f: mov esi, esi; mov rdi, r12; call rbx; 
0x0000000013ab8a: mov esi, esi; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000130a2e: mov esi, esi; mov rdi, r15; mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x00000000139c50: mov esi, esi; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000006e0ae: mov esi, esi; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000077a3a: mov esi, esi; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000011c70c: mov esi, esi; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000d86e9: mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x000000000788d2: mov esi, esp; call qword ptr [r14+0x38]; 
0x00000000144af5: mov esi, esp; call qword ptr [rax]; 
0x000000000d5ef4: mov esi, esp; call qword ptr [rsp+0x38]; 
0x0000000011f8f6: mov esi, esp; call qword ptr [rsp+0x58]; 
0x000000000423fd: mov esi, esp; call rbx; 
0x0000000013b40c: mov esi, esp; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000142cc1: mov esi, esp; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000142c8d: mov esi, esp; mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x00000000092e30: mov esi, esp; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000002d2a8: mov esi, esp; mov edi, ebp; add rax, [r15]; call rax; 
0x0000000002d2ff: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x0000000002d25d: mov esi, esp; mov edi, ebp; call r15; 
0x0000000009419c: mov esi, esp; mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000d2181: mov esi, esp; mov edi, ebp; mov eax, 0xe5; syscall; 
0x0000000013de7c: mov esi, esp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000042567: mov esi, esp; mov rdi, r13; call rbx; 
0x00000000131f52: mov esi, esp; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000006d32c: mov esi, esp; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c427: mov esi, esp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000010465e: mov esi, esp; mov rdi, r14; call r13; 
0x00000000130f49: mov esi, esp; mov rdi, r14; mov rcx, r13; call rbx; 
0x000000001045d1: mov esi, esp; mov rdi, r15; call r13; 
0x00000000042424: mov esi, esp; mov rdi, r15; call rbx; 
0x00000000080b23: mov esi, esp; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007339b: mov esi, esp; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000816a2: mov esi, esp; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000006b674: mov esi, esp; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013b3e7: mov esi, esp; mov rdi, rbp; call qword ptr [rax]; 
0x0000000007412b: mov esi, esp; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000767b1: mov esi, esp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000013be9c: mov esi, esp; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x000000000f91e3: mov esi, esp; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000080f4a: mov esi, esp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x0000000014590e: mov esi, esp; mov rdi, rbx; call rcx; 
0x00000000130b89: mov esi, esp; mov rdi, rbx; mov rcx, r13; call r10; 
0x0000000014c80e: mov esi, esp; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x0000000013ab89: mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000139c4f: mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000007b042: mov esi, r8d; call qword ptr [rbx+0x18]; 
0x0000000007af26: mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x00000000133905: mov esp, 0x0; pop rbx; pop rbp; pop r12; ret; 
0x00000000085a6f: mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x0000000018b6c2: mov esp, 0x1448dc0; lahf; ret; 
0x0000000018cbf2: mov esp, 0x1448dc0; out dx, eax; ret; 
0x000000000739d2: mov esp, 0x1; jmp rax; 
0x000000000afe45: mov esp, 0x1d8d4cd2; adc ah, [rdx+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d88: mov esp, 0x1d8d4cd2; and edx, [rdi+rcx+0xc634900]; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ca: mov esp, 0x1d8d4cd2; or eax, 0x49000fa8; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b150e: mov esp, 0x1d8d4cd2; sub [rbp+0x6349000f], ecx; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e02: mov esp, 0x1d8d4cd2; test eax, 0x49000f93; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a5: mov esp, 0x1d8d4cd2; xor ch, [rax+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000098c49: mov esp, 0x1f0fffff; add [rax-0x7d], cl; ret; 
0x00000000174422: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x00000000183e15: mov esp, 0x26de9c0; add [rax], al; xor eax, eax; ret; 
0x0000000013a345: mov esp, 0x2a0024; add [rsi-0x3f], ah; ror byte ptr [rax], 0x66; mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x00000000178eeb: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x00000000184b3c: mov esp, 0x2e8c1c0; xtest; je short 0x0000000000184b4a; vzeroall; ret; 
0x00000000188c03: mov esp, 0x343a40c0; add dh, [rbp-0x72]; add rax, rdx; ret; 
0x00000000174412: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x00000000102b8a: mov esp, 0x441f0f; add [rax+0x1c], bh; syscall; 
0x0000000010a44a: mov esp, 0x441f0f; add [rax+0x31], bh; syscall; 
0x0000000010a4dc: mov esp, 0x448bfff7; and al, 0x8; add rsp, 0x18; ret; 
0x000000000a4c21: mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c11: mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bf1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000018d132: mov esp, 0x448d48c0; xchg [rax], esp; ret; 
0x0000000018913d: mov esp, 0x44b60ff9; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000000b4f70: mov esp, 0x480000fb; cmove eax, edx; ret; 
0x0000000009bb00: mov esp, 0x48000d44; lea eax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000008c810: mov esp, 0x480011ce; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000fa523: mov esp, 0x48bfff8; and al, 0x48; add esp, 0x18; ret; 
0x0000000018bb65: mov esp, 0x48d48c0; xchg [rbx], edi; xor [rbp+0x21], dh; ret; 
0x0000000018d0d4: mov esp, 0x48d48c0; xchg ebx, eax; xor eax, eax; ret; 
0x000000000d3220: mov esp, 0x48fffff8; add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000154580: mov esp, 0x4900065a; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000177e83: mov esp, 0x5874c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000174402: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000008de98: mov esp, 0x63480011; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000c9b50: mov esp, 0x66fff709; nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x0000000018b80c: mov esp, 0x72c639c0; or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018cd3a: mov esp, 0x72c639c0; or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cdca: mov esp, 0x72c639c0; push 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b88a: mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018b83e: mov esp, 0x72c639c0; xlat [rbx]; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x00000000178a80: mov esp, 0x7343bc0; jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x0000000018d96f: mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x00000000174247: mov esp, 0x77f8c5c0; ret; 
0x00000000185ea2: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d982: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x000000001743f2: mov esp, 0x81e981c0; add [rax], al; add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x0000000018bd8b: mov esp, 0x82343bc0; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x00000000178f42: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174272: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x77f8c5f8; ret; 
0x0000000018d344: mov esp, 0x848d48c0; xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bd32: mov esp, 0x87343bc0; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x0000000018bd42: mov esp, 0x87743bc0; and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbc2: mov esp, 0x87743bc0; and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd17: mov esp, 0x87743bc0; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000179152: mov esp, 0x88448dc0; lahf; shr eax, 0x2; vzeroupper; ret; 
0x000000000940c0: mov esp, 0x8bffff20; and al, 0x10; add rsp, 0x28; ret; 
0x0000000008e53e: mov esp, 0x8c48348; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x00000000084342: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000115d6d: mov esp, 0x8d480003; adc eax, 0x41189; cmovne rax, rdx; ret; 
0x0000000017c460: mov esp, 0xa8000000; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x0000000018b697: mov esp, 0xc031c3c0; ret; 
0x0000000018c382: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c392: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c372: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x000000000a49ca: mov esp, 0xc22948c0; jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000a4c31: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c41: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c51: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c61: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x0000000009bf26: mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x0000000018b915: mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x00000000174662: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000911ec: mov esp, 0xc7640015; add [rbx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000170072: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x00000000170062: mov esp, 0xc78348c0; and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x00000000173ff2: mov esp, 0xc78348c0; or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000170052: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x0000000018722d: mov esp, 0xc80148c0; ret; 
0x000000001702bb: mov esp, 0xc80148c0; vzeroupper; ret; 
0x0000000018017b: mov esp, 0xc80148c0; xtest; je short 0x0000000000180189; vzeroall; ret; 
0x000000000c5a64: mov esp, 0xc83948ca; ja short 0x00000000000c5a80; sub rdi, 0x10; add rax, rdi; ret; 
0x000000001862c6: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000188e73: mov esp, 0xd00148c0; ret; 
0x0000000017403d: mov esp, 0xd00148c0; vzeroupper; ret; 
0x00000000180b7d: mov esp, 0xd00148c0; xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x000000000aa793: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000c61d3: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000c6fed: mov esp, 0xd024; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax; 
0x0000000003c56c: mov esp, 0xd024; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x000000000c5998: mov esp, 0xd03948d2; ja 0x00000000000c5a80; add rax, rdi; add rax, rcx; ret; 
0x000000001824bc: mov esp, 0xd6010fc0; je short 0x00000000001824c7; vzeroall; ret; 
0x000000001745f2: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001745e2: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000018b8a2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8b2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018ce02: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cde2: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000018d272: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018de22: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000099e0b: mov esp, 0xe1ebffff; mov eax, 0x16; ret; 
0x0000000010dc10: mov esp, 0xe9fff78b; ret far; 
0x00000000173fda: mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x000000001701e2: mov esp, 0xef8348c0; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x000000001703b2: mov esp, 0xef8348c0; jg short 0x0000000000170401; add eax, edi; vzeroupper; ret; 
0x00000000174352: mov esp, 0xef8348c0; jg short 0x00000000001743a1; add eax, edi; vzeroupper; ret; 
0x00000000174552: mov esp, 0xef8348c0; jg short 0x00000000001745a1; add eax, edi; vzeroupper; ret; 
0x000000001703c2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000a4cdb: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000001889c5: mov esp, 0xf80148c0; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x000000000a4c01: mov esp, 0xf80148c0; ret; 
0x0000000016fff4: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017ee27: mov esp, 0xf80148c0; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000018568a: mov esp, 0xf80148c0; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x00000000178f02: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174252: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x00000000130201: mov esp, 0xfffe67e9; jmp qword ptr [rsi+0xf]; 
0x0000000012089c: mov esp, 0xfffec8e9; jmp qword ptr [rsi+0xf]; 
0x000000000fede9: mov esp, 0xffffffff; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000085ac9: mov esp, [rip+0x1673f9]; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000085979: mov esp, [rip+0x167549]; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x00000000139d50: mov esp, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x00000000080944: mov esp, eax; mov rax, r12; pop r12; ret; 
0x000000000412b9: mov esp, eax; mov rbp, r9; jmp rdx; 
0x00000000139c09: mov esp, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000d75c7: mov esp, ebx; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000115627: mov esp, edi; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000f9f60: mov esp, edx; push rbp; push rbx; sub rsp, 0x98; syscall; 
0x0000000013b3d5: mov esp, esp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x000000000c3ea3: mov fs, cx; add al, 0x0; add [rbp+0x6348ff43], cl; ret far; 
0x000000000861f4: mov fs:[0x2f8], rdi; ret; 
0x000000000861d2: mov fs:[0x300], rax; ret; 
0x000000000861ba: mov fs:[0x300], rdi; ret; 
0x00000000086280: mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x000000000867b0: mov fs:[0x972], al; cmp eax, 0x1; je short 0x00000000000867c0; ret; 
0x0000000010133f: mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000f9151: mov fs:[rax], edx; add rsp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000014253e: mov fs:[rax], rdx; ret; 
0x000000001215a0: mov fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000098b41: mov fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000d441f: mov fs:[rbx], ebp; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012f5a6: mov fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000121af1: mov fs:[rbx], r14d; mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x00000000142638: mov fs:[rbx], rax; pop rbx; ret; 
0x00000000043d85: mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000041669: mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000003a1fc: mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000149b7a: mov fs:[rdx], eax; add rsp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000413e7: mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000416a1: mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6f1f: mov fs:[rdx], eax; mov eax, r8d; ret; 
0x00000000041607: mov fs:[rdx], eax; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000f017f: mov fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000044a99: mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000003aa3b: mov fs:[rdx], rax; ret; 
0x0000000014eb67: mov gs:[0x48c318c48348fffa], al; mov eax, [rip+0x9e299]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000a152f: mov gs:[rax], dl; add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; jmp rdx; 
0x000000000c6fe2: mov gs:[rsp+0xd0], rax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x0000000008e0d9: mov qword ptr [0x2f0], 0x0; xor eax, eax; ret; 
0x0000000014ce11: mov qword ptr [r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000009d7b1: mov qword ptr [r12], 0x0; pop rbx; pop rbp; pop r12; ret; 
0x0000000009a879: mov qword ptr [r8+0x8], 0x0; ret; 
0x0000000013309c: mov qword ptr [r8+0xc8], 0x0; mov qword ptr [r8+0xd0], 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x000000001330a7: mov qword ptr [r8+0xd0], 0x0; mov rax, r8; add rsp, 0x8; ret; 
0x0000000009a870: mov qword ptr [r8], 0x0; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x00000000086935: mov qword ptr [rax+0x1018], 0x0; ret; 
0x000000000868fc: mov qword ptr [rax+0x1018], 0x0; ret; 
0x0000000012e21a: mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x0000000010bce6: mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000007b232: mov qword ptr [rax+0x40], 0x0; mov qword ptr [rax+0x50], 0x0; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000007b242: mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000007b23a: mov qword ptr [rax+0x50], 0x0; mov qword ptr [rax+0x48], 0x0; pop rbx; ret; 
0x0000000012e212: mov qword ptr [rax+0x8], 0x0; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x00000000128c9e: mov qword ptr [rax+0x8], 0x0; pop rbx; ret; 
0x000000000840b4: mov qword ptr [rax+0x8], 0x0; ret; 
0x0000000010bcde: mov qword ptr [rax+0x8], 0x1; mov qword ptr [rax+0x10], 0x0; mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000012e20b: mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; mov qword ptr [rax+0x10], 0x0; add rsp, 0x8; ret; 
0x000000000840ad: mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x00000000085bac: mov qword ptr [rax], 0x0; mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x0000000008420e: mov qword ptr [rbp+0x48], 0x0; test byte ptr [rbp], 0x80; jne short 0x0000000000084240; pop rbp; ret; 
0x000000000db3d3: mov qword ptr [rbp+0x8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000944ee: mov qword ptr [rbp+rbx*8], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000009d7f6: mov qword ptr [rbp], 0x0; pop rbp; pop r12; ret; 
0x00000000037266: mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000145ac1: mov qword ptr [rbx+0x18], 0x0; pop rbx; ret; 
0x000000000fc384: mov qword ptr [rbx+0x20], 0x0; mov dword ptr fs:[rax], 0x24; mov eax, 0x1; pop rbx; ret; 
0x000000000fc3a3: mov qword ptr [rbx+0x20], 0x0; mov eax, 0x1; pop rbx; ret; 
0x000000001377ea: mov qword ptr [rbx+0x28], 0x0; mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000edc6a: mov qword ptr [rbx+0x28], 0x0; pop rbx; ret; 
0x000000001377f2: mov qword ptr [rbx+0x30], 0x0; pop rbx; ret; 
0x000000000836d5: mov qword ptr [rbx+0x48], 0x0; mov qword ptr [rbx+0x58], 0x0; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x000000000836e5: mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x000000000836dd: mov qword ptr [rbx+0x58], 0x0; mov qword ptr [rbx+0x50], 0x0; pop rbx; ret; 
0x0000000009a393: mov qword ptr [rbx+0x8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000f3e19: mov qword ptr [rbx+0x8], 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000002df12: mov qword ptr [rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fe258: mov qword ptr [rbx], 0x0; add rsp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x00000000086081: mov qword ptr [rbx], 0x0; pop rbx; ret; 
0x0000000014efa0: mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x000000001340c8: mov qword ptr [rdi+0x118], 0x0; mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001340d3: mov qword ptr [rdi+0x150], 0x0; mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x000000001340de: mov qword ptr [rdi+0x198], 0x0; mov [rdi+0x1f8], rax; ret; 
0x00000000145e28: mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000101377: mov qword ptr [rdi+0x8], 0x0; ret; 
0x0000000005c2f2: mov qword ptr [rdi+0x8], 0x0; xchg [rdi], eax; cmp eax, 0x1; jg short 0x000000000005c308; ret; 
0x00000000101370: mov qword ptr [rdi], 0x0; mov qword ptr [rdi+0x8], 0x0; ret; 
0x000000000fe1f0: mov qword ptr [rdi], 0x0; ret; 
0x00000000041b95: mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000fe1b6: mov qword ptr [rdi], 0xffffffffffffffff; ret; 
0x00000000084eab: mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084ea0: mov qword ptr [rip+0x16b865], 0x0; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x00000000084e71: mov qword ptr [rip+0x16b89c], 0x0; xchg [rip+0x16b88e], eax; cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x000000000783c1: mov qword ptr [rip+0x17830c], 0x0; xchg [rip+0x1782fe], eax; cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x00000000043ff4: mov qword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000043f47: mov qword ptr [rip+0x1ac4a6], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000043e77: mov qword ptr [rip+0x1ac56e], 0x0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000192837: mov qword ptr [rip+0x5cf06], 0x0; add rsp, 0x8; ret; 
0x00000000192c5c: mov qword ptr [rip+0x5cf19], 0x0; add rsp, 0x8; ret; 
0x00000000192e64: mov qword ptr [rip+0x62541], 0x0; ret; 
0x00000000192f3e: mov qword ptr [rip+0x62ebf], 0x0; add rsp, 0x8; ret; 
0x00000000192ff5: mov qword ptr [rip+0x63188], 0x0; add rsp, 0x8; ret; 
0x000000001930eb: mov qword ptr [rip+0x64152], 0x0; pop rbx; ret; 
0x00000000193210: mov qword ptr [rip+0x692cd], 0x0; add rsp, 0x8; ret; 
0x000000001931f0: mov qword ptr [rip+0x692e5], 0x0; pop rbx; ret; 
0x000000001931b0: mov qword ptr [rip+0x69315], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000014a61a: mov qword ptr [rip+0xb24bb], 0x0; add rsp, 0x8; ret; 
0x0000000013282c: mov qword ptr [rip+0xc4b49], 0x0; mov byte ptr [rip+0xc5b7c], 0x0; mov byte ptr [rip+0xc4b5b], 0x0; movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000001327dc: mov qword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x00000000132785: mov qword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013272e: mov qword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x00000000133a95: mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x000000001326d7: mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x0000000010bd17: mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bcee: mov qword ptr [rip+0xe1727], 0x0; ret; 
0x0000000010bcbd: mov qword ptr [rip+0xe1758], 0x2; ret; 
0x0000000010bc97: mov qword ptr [rip+0xe177e], 0x0; ret; 
0x0000000010b940: mov qword ptr [rip+0xe1ad5], 0x0; add rsp, 0x8; ret; 
0x0000000010b90f: mov qword ptr [rip+0xe1b06], 0x3; add rsp, 0x8; ret; 
0x00000000108eb2: mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000101c07: mov qword ptr [rip+0xf440e], 0x0; mov qword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x00000000101c12: mov qword ptr [rip+0xf4413], 0x0; add rsp, 0x8; ret; 
0x00000000100a05: mov qword ptr [rip+0xf54d0], 0x0; add rsp, 0x8; ret; 
0x000000000ee14a: mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a5a9: mov qword ptr [rsi+0x10], 0x2; test eax, eax; je short 0x000000000013a5c0; xor eax, eax; ret; 
0x0000000013a72d: mov qword ptr [rsi+0x8], 0x0; mov [rsi+0x10], rax; ret; 
0x000000000ee152: mov qword ptr [rsi+0x8], 0x0; ret; 
0x0000000013a672: mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x00000000087810: mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x00000000145be0: mov qword ptr [rsp+0x18], 0x0; mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000145be9: mov qword ptr [rsp+0x20], 0x0; call r8; 
0x00000000141901: mov qword ptr [rsp+0x20], 0x6; mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000014190a: mov qword ptr [rsp+0x28], 0x0; call qword ptr [rax+0x28]; 
0x0000000014c322: mov qword ptr [rsp+0x28], 0x0; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x00000000139813: mov qword ptr [rsp+0x38], 0x0; push qword ptr [rip+0x7fb66]; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000c733d: mov qword ptr [rsp+0x40], 0x0; push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x0000000008978c: mov qword ptr [rsp+0x58], 0x0; mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000089795: mov qword ptr [rsp+0x60], 0x0; lea rsi, [rbx+0x8f0]; syscall; 
0x00000000123933: mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000139bd0: mov qword ptr [rsp+0x8], 0x0; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000012385d: mov qword ptr [rsp+0x8], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000004025b: mov qword ptr [rsp-0x18], 0x0; fld st, tbyte ptr [rsp-0x18]; ret; 
0x00000000040208: mov qword ptr [rsp-0x18], 0x0; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret; 
0x0000000008e0d8: mov qword ptr fs:[0x2f0], 0x0; xor eax, eax; ret; 
0x0000000014ce10: mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x000000001425dd: mov qword ptr fs:[rbx], 0x0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000086080: mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x00000000085c9e: mov r10, [rdx]; mov rax, [rax+0x340]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000108fb6: mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x000000000ffd93: mov r10, [rsp+0x8]; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x000000000d73d0: mov r10, r12; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x0000000008d046: mov r10, r12; xor edx, edx; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000ff5ac: mov r10, r13; mov rsi, r14; mov edi, ebp; mov eax, 0x147; syscall; 
0x000000000ff71c: mov r10, r13; mov rsi, r14; mov edi, ebp; mov eax, 0x148; syscall; 
0x0000000010286c: mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x000000000fae30: mov r10, rcx; mov eax, 0x104; syscall; 
0x0000000005c180: mov r10, rcx; mov eax, 0x108; syscall; 
0x000000000fb280: mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb340: mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000fe7d0: mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000109790: mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000109d50: mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000109240: mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000010a230: mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000109820: mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000109850: mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000f90e0: mov r10, rcx; mov eax, 0x142; syscall; 
0x0000000010a050: mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000fdf90: mov r10, rcx; mov eax, 0x28; syscall; 
0x0000000010aab0: mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010aa20: mov r10, rcx; mov eax, 0x36; syscall; 
0x0000000010a580: mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a020: mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109f00: mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0e0: mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010a110: mov r10, rcx; mov eax, 0xb3; syscall; 
0x00000000105540: mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054e0: mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053c0: mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000001053f0: mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000105450: mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000105330: mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000102bf0: mov r10, rcx; mov eax, 0xd8; syscall; 
0x0000000010b290: mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000109ea0: mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000005c1b0: mov r10, rcx; test r8d, r8d; je short 0x000000000005c1f8; mov eax, 0x13c; syscall; 
0x000000000ff51c: mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff68c: mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000fdd53: mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000074a76: mov r10d, 0x1; jmp rax; 
0x00000000041e86: mov r10d, 0x8; mov eax, 0x80; syscall; 
0x0000000004151e: mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000050024: mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000092c54: mov r10d, 0x8; mov eax, r14d; syscall; 
0x000000000902c1: mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x00000000064ae7: mov r10d, [rbp-0x5d8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000003f839: mov r10d, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x00000000094825: mov r10d, [rip+0x100]; add [rax-0x77], cl; add eax, 0x158b0c; ret; 
0x00000000094800: mov r10d, [rip+0x6666c300]; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x000000000d68d0: mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000001029f5: mov r10d, ebx; mov rdi, rbp; mov eax, 0x9; syscall; 
0x000000001096a0: mov r10d, ecx; cmp ecx, 0xffffffff; je short 0x00000000001096d8; mov eax, 0x149; syscall; 
0x000000000f9647: mov r10d, ecx; mov eax, 0x103; syscall; 
0x000000000f9300: mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000fe080: mov r10d, ecx; mov eax, 0x118; syscall; 
0x000000000f95c0: mov r10d, ecx; mov eax, 0x14c; syscall; 
0x000000000fdb70: mov r10d, ecx; mov eax, 0xdd; syscall; 
0x000000000fe0b0: mov r10d, ecx; test rsi, rsi; je short 0x00000000000fe0e2; mov eax, 0x118; syscall; 
0x00000000109180: mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x000000000f23dc: mov r11, [rbp-0x1c8]; call r11; 
0x00000000153400: mov r11, [rsi-0x10]; mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x000000000f6666: mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000006f61e: mov r11d, 0x1; jmp rax; 
0x00000000159096: mov r11d, 0x46f00ff2; ret far; 
0x00000000153c11: mov r11d, 0x4f7f0ff3; ret far; 
0x000000000fede8: mov r12, 0xffffffffffffffff; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000085ac8: mov r12, [rip+0x1673f9]; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000085978: mov r12, [rip+0x167549]; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x00000000080943: mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000115626: mov r12, rdi; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013b3d4: mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x000000000739d1: mov r12d, 0x1; jmp rax; 
0x00000000139d4f: mov r12d, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x00000000139c08: mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000f9f5f: mov r12d, edx; push rbp; push rbx; sub rsp, 0x98; syscall; 
0x0000000009a165: mov r13, rax; test r13, r13; jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x00000000103f9a: mov r13, rbx; mov rdi, rbp; call r12; 
0x0000000006e8c8: mov r13d, 0x1; jmp rax; 
0x00000000147ebe: mov r14b, 0x6; add al, ch; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x000000000e0cfd: mov r14b, 0xf4; dec dword ptr [rax-0x7d]; ret; 
0x0000000006dffb: mov r14d, 0x1; jmp rax; 
0x0000000006f618: mov r14d, 0x1; mov r11d, 0x1; jmp rax; 
0x00000000092c4e: mov r14d, 0xe; mov r10d, 0x8; mov eax, r14d; syscall; 
0x000000000412b2: mov r15, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000c7208: mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x0000000018f5cf: mov r15b, 0x2; add [rax+0x63], cl; sbb al, 0x99; add rcx, rbx; jmp rcx; 
0x0000000010403e: mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x00000000091b36: mov r8, 0x10c4834800000003; pop rbx; pop rbp; pop r12; ret; 
0x000000000ed567: mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x0000000014c6d6: mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x00000000086211: mov r8, [rdi+0x8]; mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x000000000500be: mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000001182b1: mov r8, [rsp+0x18]; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000366c6: mov r8, [rsp+0x50]; mov rcx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x00000000139413: mov r8, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x00000000128ae0: mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000014220d: mov r8, r13; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x00000000108fb3: mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x0000000010286f: mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x000000000f2f73: mov r8, rax; call r14; 
0x0000000014c749: mov r8, rbx; call qword ptr [rax+0x338]; 
0x00000000130944: mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12; 
0x0000000014c80a: mov r8, rbx; mov rsi, r12; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000141ace: mov r8, rbx; mov rsi, r14; call qword ptr [rax]; 
0x00000000109c0f: mov r8, rcx; mov eax, 0x1b3; syscall; 
0x00000000101433: mov r8, rdi; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x000000001448f4: mov r8, rdi; xor eax, eax; mov dword ptr [rsp], 0x2; mov rdi, rsp; call r8; 
0x00000000044620: mov r8, rdx; mov [rdi+0x8], rcx; xor eax, eax; mov [rdi], r8; ret; 
0x000000000445f0: mov r8, rdx; mov [rdi], r8; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x000000000fea20: mov r8, rsi; lea rdx, [rsp-0x38]; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x000000000902be: mov r8, rsi; mov r10d, 0x8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000d73ca: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000d73c9: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xd80bb]; mov eax, 0x142; syscall; 
0x000000000f9b8a: mov r8d, 0x101; syscall; 
0x0000000014a49d: mov r8d, 0x1; add rsp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000145747: mov r8d, 0x1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret; 
0x00000000101815: mov r8d, 0x1; mov eax, r8d; add rsp, 0x8; ret; 
0x0000000007fb38: mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000010184a: mov r8d, 0x1; or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000008eed8: mov r8d, 0x23; mov eax, r8d; ret; 
0x000000000fdabb: mov r8d, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000123885: mov r8d, 0xfffffff6; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000f95a7: mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x00000000036c8f: mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000be40d: mov r8d, 0xffffffff; mov eax, r8d; pop rbx; ret; 
0x0000000005c1e7: mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000d6f19: mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000010c9b4: mov r8d, [rax+rdx]; shr r8d, cl; and r8d, 0x1; mov eax, r8d; ret; 
0x0000000007b9be: mov r8d, [rax]; mov eax, r8d; ret; 
0x0000000007b812: mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret; 
0x000000000945ae: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xdf; syscall; 
0x0000000009455b: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe0; syscall; 
0x0000000009450b: mov r8d, [rdi]; mov edi, r8d; mov eax, 0xe1; syscall; 
0x0000000003a3b7: mov r8d, [rdx+rax]; mov eax, r8d; ret; 
0x00000000085cfe: mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x0000000007b03a: mov r8d, [rsp+0x8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x00000000094110: mov r8d, eax; cmp eax, 0xfffff000; ja short 0x0000000000094120; mov eax, r8d; ret; 
0x0000000005c1c7: mov r8d, eax; cmp eax, 0xffffffff; je short 0x000000000005c1d8; mov eax, r8d; ret; 
0x000000000feb5b: mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000fa381: mov r8d, eax; mov eax, 0x3; syscall; 
0x000000000fffd1: mov r8d, eax; mov eax, 0x4a; syscall; 
0x00000000100091: mov r8d, eax; mov eax, 0x4b; syscall; 
0x000000000fa509: mov r8d, eax; mov eax, 0x55; syscall; 
0x000000000416f0: mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000010964f: mov r8d, eax; mov eax, r8d; ret; 
0x000000000f9a95: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000001095ad: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x000000000ff28f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x000000000ff32f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d71: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000010a4bd: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000010a8ff: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a79f: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000fa1c9: mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000000f9cd1: mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x0000000010a3f1: mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000109394: mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+0x8]; mov eax, 0x114; syscall; 
0x000000000fe535: mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+0x8]; mov eax, 0x11d; syscall; 
0x000000000d22d4: mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall; 
0x00000000041eea: mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000044a60: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b30: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda30: mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000f9bf0: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000010aea3: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e3: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000d6814: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe485: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad45: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b005: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000109444: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fc5: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f8075: mov r8d, eax; mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000003ebff: mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x000000000f23d2: mov r9, [rbp-0x1b0]; mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x0000000005d2ca: mov r9, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x000000000500c2: mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x00000000187733: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x00000000188903: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c83: mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000b5faa: mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x000000000d3a03: mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000000d3a04: mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000000c1987: mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x000000000309cf: mov r9, [rsp+0x18]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x0000000011994d: mov r9, [rsp+0x20]; mov rcx, [rsp+0x18]; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x00000000031995: mov r9, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345cd: mov r9, [rsp+0x20]; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000118b90: mov r9, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x000000000314ef: mov r9, [rsp+0x30]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000033e79: mov r9, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000003323c: mov r9, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x00000000032544: mov r9, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x0000000013940e: mov r9, [rsp+0x78]; mov r8, [rsp+0x70]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x00000000102872: mov r9, [rsp+0x8]; syscall; 
0x0000000002dce2: mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000b6546: mov r9, r15; call rbx; 
0x00000000141acb: mov r9, rbp; mov r8, rbx; mov rsi, r14; call qword ptr [rax]; 
0x000000000f2f70: mov r9, rbx; mov r8, rax; call r14; 
0x00000000121201: mov r9b, 0xf0; dec dword ptr [rax-0x7d]; ret; 
0x00000000074928: mov r9d, 0x1; jmp rax; 
0x000000000df1bd: mov r9d, 0x1; mov eax, r9d; ret; 
0x00000000074a70: mov r9d, 0x1; mov r10d, 0x1; jmp rax; 
0x00000000073afa: mov r9d, 0x1; movzx eax, byte ptr [rax+rcx]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x00000000073290: mov r9d, 0x1; xor r10d, r10d; jmp rax; 
0x0000000008f940: mov r9d, 0x23; mov eax, r9d; ret; 
0x000000001090cf: mov r9d, 0x8; mov eax, 0x119; syscall; 
0x000000000866fd: mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000041601: mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000f0179: mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000086675: mov r9d, 0xffffffff; xor r8d, r8d; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000e0700: mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000ff3dd: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff48d: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000d68cd: mov r9d, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000fdb04: mov r9d, eax; mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000ff519: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff689: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000c5fd0: mov rax, 0x1; ret; 
0x0000000013f319: mov rax, 0x20c4834800000001; pop rbx; pop rbp; pop r12; ret; 
0x000000000c5fe0: mov rax, 0x2; ret; 
0x000000000c5ff0: mov rax, 0x3; ret; 
0x000000000c6000: mov rax, 0x4; ret; 
0x000000000c6010: mov rax, 0x5; ret; 
0x000000000f05eb: mov rax, 0x5c415d5b00000008; pop r13; pop r14; pop r15; ret; 
0x000000000f05d4: mov rax, 0x5c415d5b0000000a; pop r13; pop r14; pop r15; ret; 
0x000000000e509b: mov rax, 0x5c415d5b0000000c; pop r13; pop r14; pop r15; ret; 
0x000000000df431: mov rax, 0x5c415d5bffffffff; pop r13; pop r14; pop r15; ret; 
0x0000000004491b: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x0000000004496a: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret; 
0x000000000c6020: mov rax, 0x6; ret; 
0x0000000005559c: mov rax, 0x7974742f7665642f; mov byte ptr [rdi+0x8], 0x0; mov [rdi], rax; mov rax, rdi; ret; 
0x000000000c6030: mov rax, 0x7; ret; 
0x00000000040b87: mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000040588: mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret; 
0x00000000040558: mov rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000052170: mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000040519: mov rax, 0x8000000000000000; movsd [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000041470: mov rax, 0xf; syscall; 
0x00000000041bc5: mov rax, 0xfffffffe7fffffff; mov [rdi], rax; xor eax, eax; ret; 
0x00000000090500: mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x00000000040544: mov rax, 0xfffffffffffff; test rdx, rax; je short 0x0000000000040558; ret; 
0x00000000041c45: mov rax, 0xfffffffffffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x000000000c69b0: mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x00000000041364: mov rax, 0xffffffffffffffff; cmovns rax, [rsp+0xa0]; add rsp, 0x148; ret; 
0x00000000123638: mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000421e5: mov rax, 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000413ae: mov rax, 0xffffffffffffffff; ret; 
0x0000000014ca9e: mov rax, [0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008b188: mov rax, [0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000086186: mov rax, [0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fcb1: mov rax, [0x10]; ret; 
0x000000000861e8: mov rax, [0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000000861ae: mov rax, [0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x00000000102cc3: mov rax, [0x48018964d8f7000e]; or eax, 0xffffffff; ret; 
0x00000000139718: mov rax, [r12+0x8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000139ff3: mov rax, [r13+0x38]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x0000000013e544: mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000014096c: mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000142475: mov rax, [r14+0x8]; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000013aff0: mov rax, [r14+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02a: mov rax, [r14+0x8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x00000000142445: mov rax, [r14+0x8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000140e14: mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x00000000140de9: mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0x0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000141607: mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000140e5a: mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000928ad: mov rax, [r8+0x18]; mov [rdi+0x18], rax; ret; 
0x00000000141f53: mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x000000001403f0: mov rax, [r8]; bswap eax; mov [rdi+0x54], eax; mov eax, 0x1; ret; 
0x000000001403d0: mov rax, [r8]; bswap eax; mov [rdi+0x58], eax; mov eax, 0x1; ret; 
0x00000000085f74: mov rax, [rax+0x10]; add rsp, 0x28; pop rbx; pop r12; jmp rax; 
0x000000001448e1: mov rax, [rax+0x10]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000043fef: mov rax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x0000000011564e: mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000d72e8: mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x0000000010c017: mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000008603b: mov rax, [rax+0x18]; add rsp, 0x38; pop rbx; pop r12; jmp rax; 
0x000000001448a1: mov rax, [rax+0x18]; add rsp, 0x8; pop rbp; pop r12; jmp rax; 
0x0000000010c007: mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000138d76: mov rax, [rax+0x18]; jmp rax; 
0x00000000115629: mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000ff9d7: mov rax, [rax+0x18]; test rax, rax; je short 0x00000000000ff9e1; ret; 
0x00000000092849: mov rax, [rax+0x18]; test rax, rax; jne short 0x0000000000092840; ret; 
0x000000000b4dc7: mov rax, [rax+0x1f0]; ret; 
0x000000000b4dd7: mov rax, [rax+0x1f8]; ret; 
0x000000000b4de7: mov rax, [rax+0x200]; ret; 
0x000000000b4df7: mov rax, [rax+0x208]; ret; 
0x0000000007d1d0: mov rax, [rax+0x20]; jmp rax; 
0x000000000b4e07: mov rax, [rax+0x210]; ret; 
0x000000000b4e17: mov rax, [rax+0x218]; ret; 
0x000000000b4e27: mov rax, [rax+0x220]; ret; 
0x000000000b4e37: mov rax, [rax+0x228]; ret; 
0x000000000b4e47: mov rax, [rax+0x230]; ret; 
0x000000000b4e57: mov rax, [rax+0x238]; ret; 
0x0000000013aeae: mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000b4e67: mov rax, [rax+0x240]; ret; 
0x000000000b4db7: mov rax, [rax+0x248]; ret; 
0x000000000d21a7: mov rax, [rax+0x2f8]; test rax, rax; je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x0000000011556f: mov rax, [rax+0x30]; ret; 
0x000000000f91a4: mov rax, [rax+0x310]; test rax, rax; je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x000000000d2143: mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000001055d8: mov rax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105650: mov rax, [rax+0x320]; ret; 
0x0000000014c2be: mov rax, [rax+0x330]; jmp rax; 
0x00000000085cf7: mov rax, [rax+0x340]; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x00000000085ca1: mov rax, [rax+0x340]; mov rdx, [rbx+0x20]; push r10; call rax; 
0x0000000014c4b0: mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x0000000014c528: mov rax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x00000000085680: mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x000000000856d0: mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x00000000085c40: mov rax, [rax+0x370]; jmp qword ptr [rax+0x38]; 
0x0000000014c668: mov rax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x0000000014c6a0: mov rax, [rax+0x370]; mov rax, [rax+0x60]; jmp rax; 
0x00000000085718: mov rax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x00000000085da0: mov rax, [rax+0x370]; mov rcx, [rsp+0x38]; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x00000000085eb0: mov rax, [rax+0x370]; mov rdx, [rsp+0x28]; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x0000000013a2b7: mov rax, [rax+0x38]; test rax, rax; je 0x000000000013a151; mov rdi, rbx; call rax; 
0x00000000138e4b: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000138e59; mov rdi, rbp; call rax; 
0x00000000139252: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000139260; mov rdi, rbp; call rax; 
0x0000000013a045: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013a053; mov rdi, rbx; call rax; 
0x0000000013a3a8: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013a3b6; mov rdi, rbx; call rax; 
0x0000000013abbf: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013abcd; mov rdi, r13; call rax; 
0x0000000013dbdc: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013dbee; lea rdi, [rbp+0xc8]; call rax; 
0x0000000013e55f: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013e56d; mov rdi, rbp; call rax; 
0x0000000013e727: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013e737; lea rdi, [r12+0x10]; call rax; 
0x0000000013f79a: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013f7a8; mov rdi, rbp; call rax; 
0x0000000013f90a: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000013f919; mov rdi, r13; call rax; 
0x000000001402c9: mov rax, [rax+0x38]; test rax, rax; je short 0x00000000001402d8; lea rdi, [rbp+0x68]; call rax; 
0x0000000014097e: mov rax, [rax+0x38]; test rax, rax; je short 0x000000000014098c; mov rdi, rbp; call rax; 
0x00000000140cb9: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000140cc8; lea rdi, [rbp+0x58]; call rax; 
0x000000001432d7: mov rax, [rax+0x38]; test rax, rax; je short 0x00000000001432e7; lea rdi, [r12+0x10]; call rax; 
0x00000000143910: mov rax, [rax+0x38]; test rax, rax; je short 0x0000000000143920; lea rdi, [r12+0x10]; call rax; 
0x00000000085dac: mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x0000000014026c: mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000003a981: mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a7e1: mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a781: mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x00000000140afc: mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000003a7c1: mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a751: mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003aa2a: mov rax, [rax+0x58]; mov rdx, [rip+0x1b23b3]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x0000000014c6a7: mov rax, [rax+0x60]; jmp rax; 
0x000000001055c8: mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105648: mov rax, [rax+0x60]; ret; 
0x00000000083ff7: mov rax, [rax+0x68]; test rax, rax; jne short 0x0000000000083ff0; ret; 
0x00000000144a6e: mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x0000000008571f: mov rax, [rax+0x8]; jmp rax; 
0x000000001055aa: mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000002d2a3: mov rax, [rax+0x8]; mov rsi, r12; mov edi, ebp; add rax, [r15]; call rax; 
0x0000000010562a: mov rax, [rax+0x8]; ret; 
0x000000000d7330: mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x0000000009a1ca: mov rax, [rax+0x8]; test rax, rax; jne short 0x000000000009a1c0; xor eax, eax; ret; 
0x0000000009a286: mov rax, [rax+0x8]; test rax, rax; jne short 0x000000000009a280; mov eax, r8d; ret; 
0x0000000013db7f: mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000007b08c: mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000007b1a5: mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x0000000007d1c9: mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x00000000078dab: mov rax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000037e81: mov rax, [rax+r13*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x0000000019287c: mov rax, [rax+rbx*8]; mov [r13+rbx*8], rdx; test rax, rax; je short 0x000000000019288c; call rax; 
0x00000000037f7d: mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x0000000003a7e3: mov rax, [rax+rdi*4+0x200]; ret; 
0x0000000003a31e: mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000075614: mov rax, [rax+rdi*8]; ret; 
0x0000000003a783: mov rax, [rax+rdx*4]; ret; 
0x00000000085ebc: mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x0000000003966b: mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a97e: mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a7de: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77e: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a7be: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74e: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a31b: mov rax, [rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039668: mov rax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a7db: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77b: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a7bb: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74b: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a71b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6fb: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a79b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6db: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a65b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a61b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a69b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5fb: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6bb: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a67b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a63b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5db: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000001155bf: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000043e82: mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000128f48: mov rax, [rax]; ret; 
0x00000000104cd3: mov rax, [rax]; test rax, rax; je 0x0000000000104d70; call rax; 
0x000000000d727e: mov rax, [rax]; test rax, rax; je short 0x00000000000d7288; call rax; 
0x00000000104b77: mov rax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x00000000084ae0: mov rax, [rax]; test rax, rax; jne short 0x0000000000084ad8; ret; 
0x00000000143959: mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0x0; mov rdi, r13; call qword ptr [rax+0x28]; 
0x00000000143986: mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000139d52: mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x00000000139c30: mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000013a860: mov rax, [rbp+0x8]; lea esi, [r12+0x3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x0000000013f270: mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f1e1: mov rax, [rbp+0x8]; lea rsi, [rsp+0x4]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013b41e: mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000144afd: mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x00000000145300: mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x00000000145370: mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f183: mov rax, [rbp+0x8]; mov dword ptr [rsp+0x4], 0xc; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013a7d1: mov rax, [rbp+0x8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013a88a: mov rax, [rbp+0x8]; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000139c4b: mov rax, [rbp+0x8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000013982f: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000142fd9: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x00000000142f20: mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000013b3e2: mov rax, [rbp+0x8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013f1d0: mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000142de0: mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000141e67: mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x00000000139d31: mov rax, [rbp+0x8]; push qword ptr [rsp+0xc8]; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x000000000f8acb: mov rax, [rbp-0x168]; mov rsi, r13; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000f25c7: mov rax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x00000000104041: mov rax, [rbp-0x50]; call rax; 
0x0000000002e635: mov rax, [rbp-0x60]; mov rdi, r12; call rax; 
0x00000000085b58: mov rax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x00000000085b48: mov rax, [rbx+0x10]; mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x0000000008373c: mov rax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000007fbd4: mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret; 
0x0000000013923e: mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139064: mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000139020: mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001390f8: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x0000000013907d: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000013ae57: mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000114be1: mov rax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000083cf8: mov rax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000009a18b: mov rax, [rbx+0x40]; je short 0x000000000009a19c; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000009a22b: mov rax, [rbx+0x40]; test byte ptr [rbx+0x50], 0x1; jne short 0x000000000009a208; mov rdi, rsi; call rax; 
0x00000000083f1a: mov rax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000014049e: mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18]; 
0x000000001404b2: mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000011564a: mov rax, [rbx+0x8]; mov rax, [rax+0x10]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000013de40: mov rax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x0000000013de5c: mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000014324d: mov rax, [rbx+0xe8]; test rax, rax; jne short 0x0000000000143240; pop rbx; ret; 
0x0000000014d0d8: mov rax, [rbx]; add rsp, 0x8; pop rbx; pop rbp; jmp rax; 
0x00000000141932: mov rax, [rbx]; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000128c9b: mov rax, [rbx]; mov qword ptr [rax+0x8], 0x0; pop rbx; ret; 
0x00000000141870: mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x000000001425f9: mov rax, [rbx]; test rax, rax; je short 0x0000000000142608; pop rbx; ret; 
0x00000000166686: mov rax, [rcx+0x5]; mov [rdx+0x5], rax; lea rax, [rdx+0xc]; ret; 
0x000000001622f6: mov rax, [rcx+0x5]; mov [rdx+0x5], rax; mov rax, rdi; ret; 
0x000000000897d7: mov rax, [rcx+0x640]; mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x000000001666a6: mov rax, [rcx+0x6]; mov [rdx+0x6], rax; lea rax, [rdx+0xd]; ret; 
0x00000000162316: mov rax, [rcx+0x6]; mov [rdx+0x6], rax; mov rax, rdi; ret; 
0x000000001666c6: mov rax, [rcx+0x7]; mov [rdx+0x7], rax; lea rax, [rdx+0xe]; ret; 
0x00000000162336: mov rax, [rcx+0x7]; mov [rdx+0x7], rax; mov rax, rdi; ret; 
0x00000000166556: mov rax, [rcx+0x8]; mov [rdx+0x8], rax; lea rax, [rdx+0xf]; ret; 
0x00000000162226: mov rax, [rcx+0x8]; mov [rdx+0x8], rax; mov rax, rdi; ret; 
0x00000000166500: mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x000000001621d0: mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x00000000087760: mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000087840: mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000145710: mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x00000000038e71: mov rax, [rdi+0x20]; mov rbp, rdi; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x000000001929ac: mov rax, [rdi+0x20]; test rax, rax; je short 0x00000000001929bc; call rax; 
0x000000000853c0: mov rax, [rdi+0x28]; cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret; 
0x00000000095392: mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 0x8; ret; 
0x0000000013a69e: mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret; 
0x0000000007fc20: mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x0000000013917a: mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000001390ed: mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141876: mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000013903c: mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000139160: mov rax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000013a6de: mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret; 
0x0000000007fb00: mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x000000000835da: mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x000000000861d0: mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x00000000084df0: mov rax, [rdi+0x68]; ret; 
0x00000000093050: mov rax, [rdi+0x78]; ret; 
0x0000000005c2a3: mov rax, [rdi+0x88]; mov [rax+0x8], rcx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x000000001448c0: mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x00000000144880: mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x00000000139372: mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000141923: mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000013a775: mov rax, [rdi+0x8]; call qword ptr [rax+0x30]; 
0x0000000014559c: mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000013b385: mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000081ec0: mov rax, [rdi+0x8]; cmp rax, [rdi+0x10]; jae short 0x0000000000081ed0; movzx eax, byte ptr [rax]; ret; 
0x00000000084ee6: mov rax, [rdi+0x8]; cmp rax, rdx; jae short 0x0000000000084f10; movzx eax, byte ptr [rax]; ret; 
0x000000001454d0: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000001454e0: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x00000000144a30: mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x00000000144a25: mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x0000000014194c: mov rax, [rdi+0x8]; lea rdx, [rsp+0x18]; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x000000001419cc: mov rax, [rdi+0x8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000013ff20: mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x00000000144fd8: mov rax, [rdi+0x8]; lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x000000001452f0: mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x0000000013b358: mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000145568: mov rax, [rdi+0x8]; lea rsi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x00000000142d0d: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142bdd: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c1d: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000142c5d: mov rax, [rdi+0x8]; mov dword ptr [rsp+0x10], 0x0; mov dword ptr [rsp+0x30], 0x5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000013b3d0: mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000144a6a: mov rax, [rdi+0x8]; mov rax, [rax+0x8]; add rsp, 0x10; pop rbp; jmp rax; 
0x0000000013f6c6: mov rax, [rdi+0x8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000144af0: mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000014534f: mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144b3e: mov rax, [rdi+0x8]; sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000145437: mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144c0e: mov rax, [rdi+0x8]; shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x0000000007b070: mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x00000000099840: mov rax, [rdi+rax+0x8]; sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000129166: mov rax, [rdi+rsi*8+0x218]; test rax, rax; je short 0x0000000000129178; ret; 
0x0000000017a580: mov rax, [rdi-0x8]; cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b750: mov rax, [rdi-0x8]; cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x000000000947a0: mov rax, [rdi]; cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x00000000094860: mov rax, [rdi]; cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000948d0: mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x000000000948a0: mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x0000000010b3d0: mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x00000000084aed: mov rax, [rdi]; mov [rdx], rax; ret; 
0x000000000948c0: mov rax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x00000000094850: mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x00000000094840: mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094810: mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf80: mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x0000000008bf70: mov rax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862f0: mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862e0: mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862d0: mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x000000000862c0: mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x00000000090680: mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094820: mov rax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x000000000947f0: mov rax, [rdi]; mov dword ptr [rip+0x158b77], 0x1; mov [rip+0x158b44], rax; ret; 
0x000000000947d0: mov rax, [rdi]; mov dword ptr [rip+0x158b97], 0x1; mov [rip+0x158b89], eax; ret; 
0x00000000090ad0: mov rax, [rdi]; mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x0000000000090ae0; ret; 
0x00000000086215: mov rax, [rdi]; mov rdi, r8; jmp rax; 
0x0000000007fc11: mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faf1: mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x0000000003963c: mov rax, [rdx+rdi*8+0x40]; ret; 
0x0000000013dd78: mov rax, [rdx]; bswap eax; mov [r8+0xb4], eax; mov eax, 0x1; ret; 
0x0000000013dd48: mov rax, [rdx]; bswap eax; mov [r8+0xb8], eax; mov eax, 0x1; ret; 
0x000000000d8020: mov rax, [rip+0x114df1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d8040; mov eax, 0x77; syscall; 
0x000000000d7fb0: mov rax, [rip+0x114e61]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7fd0; mov eax, 0x75; syscall; 
0x000000000d7d80: mov rax, [rip+0x115091]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7da0; mov eax, 0x6a; syscall; 
0x000000000d7d20: mov rax, [rip+0x1150f1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d7d40; mov eax, 0x69; syscall; 
0x000000000d56e7: mov rax, [rip+0x117722]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d3d70: mov rax, [rip+0x1190a1]; cmp byte ptr [rax], 0x0; je short 0x00000000000d3d90; mov eax, 0x74; syscall; 
0x000000000d2ce5: mov rax, [rip+0x11a124]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d2cb0: mov rax, [rip+0x11a159]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2c70: mov rax, [rip+0x11a199]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000000d2268: mov rax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f8: mov rax, [rip+0x11ac11]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000d213c: mov rax, [rip+0x11ad85]; mov rax, [rax+0x318]; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000c750d: mov rax, [rip+0x1258fc]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b4e60: mov rax, [rip+0x138061]; mov rax, [rax+0x240]; ret; 
0x000000000b4e50: mov rax, [rip+0x138071]; mov rax, [rax+0x238]; ret; 
0x000000000b4e40: mov rax, [rip+0x138081]; mov rax, [rax+0x230]; ret; 
0x000000000b4e30: mov rax, [rip+0x138091]; mov rax, [rax+0x228]; ret; 
0x000000000b4e20: mov rax, [rip+0x1380a1]; mov rax, [rax+0x220]; ret; 
0x000000000b4e10: mov rax, [rip+0x1380b1]; mov rax, [rax+0x218]; ret; 
0x000000000b4e00: mov rax, [rip+0x1380c1]; mov rax, [rax+0x210]; ret; 
0x000000000b4df0: mov rax, [rip+0x1380d1]; mov rax, [rax+0x208]; ret; 
0x000000000b4de0: mov rax, [rip+0x1380e1]; mov rax, [rax+0x200]; ret; 
0x000000000b4dd0: mov rax, [rip+0x1380f1]; mov rax, [rax+0x1f8]; ret; 
0x000000000b4dc0: mov rax, [rip+0x138101]; mov rax, [rax+0x1f0]; ret; 
0x000000000b4db0: mov rax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x0000000009a2b0: mov rax, [rip+0x152b59]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000009a171: mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x0000000009a030: mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x00000000099f70: mov rax, [rip+0x152e69]; call qword ptr [rax]; 
0x0000000009921f: mov rax, [rip+0x153bea]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000093f00: mov rax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a80: mov rax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000092230: mov rax, [rip+0x15abd9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000911e8: mov rax, [rip+0x15bc21]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x00000000091038: mov rax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090ab8: mov rax, [rip+0x15c351]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000906b0: mov rax, [rip+0x15c759]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000090620: mov rax, [rip+0x15c7e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000927f0: mov rax, [rip+0x162091]; mov dword ptr [rdi], 0x0; mov [rip+0x162084], rdi; mov [rdi+0x18], rax; ret; 
0x00000000087670: mov rax, [rip+0x165799]; pop rbx; mov eax, fs:[rax]; ret; 
0x000000000860a8: mov rax, [rip+0x166e19]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x00000000085bcc: mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x00000000084dd0: mov rax, [rip+0x169889]; ret; 
0x00000000082c70: mov rax, [rip+0x16a1c1]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x0000000007ff20: mov rax, [rip+0x16cee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000007e460: mov rax, [rip+0x16e9a9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000007c7aa: mov rax, [rip+0x170687]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000078ac8: mov rax, [rip+0x174341]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000586b2: mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000044b30: mov rax, [rip+0x1a82d9]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000044630: mov rax, [rip+0x1a87d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000044598: mov rax, [rip+0x1a8871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041df8: mov rax, [rip+0x1ab011]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041db8: mov rax, [rip+0x1ab051]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d70: mov rax, [rip+0x1ab099]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041d3e: mov rax, [rip+0x1ab0cb]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000041cb0: mov rax, [rip+0x1ab159]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000041c90: mov rax, [rip+0x1ab179]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c58: mov rax, [rip+0x1ab1b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c18: mov rax, [rip+0x1ab1f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041bd5: mov rax, [rip+0x1ab234]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041b9f: mov rax, [rip+0x1ab26a]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041448: mov rax, [rip+0x1ab9c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041410: mov rax, [rip+0x1ab9f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000413a0: mov rax, [rip+0x1aba69]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000040af1: mov rax, [rip+0x1ac318]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000407d3: mov rax, [rip+0x1ac636]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000004042a: mov rax, [rip+0x1ac9df]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x0000000003f8b0: mov rax, [rip+0x1ad559]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003f850: mov rax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003a9d0: mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a990: mov rax, [rip+0x1b2461]; add rax, fs:[0x0]; ret; 
0x0000000003a9b0: mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x0000000003a2d0: mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x0000000003a310: mov rax, [rip+0x1b2c59]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039660: mov rax, [rip+0x1b3909]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x00000000036ac0: mov rax, [rip+0x1b8c79]; ret; 
0x0000000002d8e0: mov rax, [rip+0x1bf529]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000002d670: mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002dec0: mov rax, [rip+0x1c1839]; ret; 
0x0000000002deb0: mov rax, [rip+0x1c1841]; ret; 
0x0000000014ef70: mov rax, [rip+0x9de99]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ef50: mov rax, [rip+0x9deb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ee60: mov rax, [rip+0x9dfa9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014ec30: mov rax, [rip+0x9e1d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec10: mov rax, [rip+0x9e1f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebd0: mov rax, [rip+0x9e239]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebb0: mov rax, [rip+0x9e259]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb90: mov rax, [rip+0x9e279]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb70: mov rax, [rip+0x9e299]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d110: mov rax, [rip+0x9fcf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014d060: mov rax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000014c6cf: mov rax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x0000000014c450: mov rax, [rip+0xa0a71]; jmp qword ptr [rax+0x348]; 
0x0000000014c3ad: mov rax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x0000000014c2e4: mov rax, [rip+0xa0bdd]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014c2b0: mov rax, [rip+0xa0c11]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014be4f: mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x00000000149f50: mov rax, [rip+0xa2eb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001431f0: mov rax, [rip+0xa9c19]; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x000000001427b8: mov rax, [rip+0xaa619]; pop rbx; ret; 
0x000000001426d8: mov rax, [rip+0xaa751]; pop rbx; ret; 
0x00000000142748: mov rax, [rip+0xaa879]; pop rbx; ret; 
0x00000000142530: mov rax, [rip+0xaa891]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000142660: mov rax, [rip+0xaa8e1]; pop rbx; ret; 
0x00000000131ec8: mov rax, [rip+0xbaf41]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000131e74: mov rax, [rip+0xbaf95]; mov dword ptr fs:[rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x00000000129b20: mov rax, [rip+0xc3469]; mov eax, [rax+0x18]; test eax, eax; jne short 0x0000000000129b30; ret; 
0x000000001290d8: mov rax, [rip+0xc3d30]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000128f40: mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000128665: mov rax, [rip+0xc47a4]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001285e8: mov rax, [rip+0xc4821]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000127d0d: mov rax, [rip+0xc50fc]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x0000000012f0e0: mov rax, [rip+0xc8161]; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000012e1d5: mov rax, [rip+0xc906c]; test rax, rax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x00000000117fc0: mov rax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x00000000117788: mov rax, [rip+0xd5681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012039a: mov rax, [rip+0xdc8c7]; ret; 
0x0000000010c640: mov rax, [rip+0xe0881]; mov eax, [rax+0x40]; ret; 
0x0000000010b388: mov rax, [rip+0xe1a81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b260: mov rax, [rip+0xe1ba9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b188: mov rax, [rip+0xe1c81]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010a390: mov rax, [rip+0xe2a79]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000109a50: mov rax, [rip+0xe33b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a18: mov rax, [rip+0xe33f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099e0: mov rax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109988: mov rax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109938: mov rax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e8: mov rax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109748: mov rax, [rip+0xe36c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109718: mov rax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000105630: mov rax, [rip+0xe77d9]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x00000000104e58: mov rax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104ccc: mov rax, [rip+0xe81cd]; mov rax, [rax]; test rax, rax; je 0x0000000000104d70; call rax; 
0x00000000104b70: mov rax, [rip+0xe8329]; mov rax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x000000001038b0: mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010387b: mov rax, [rip+0xe958e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000103869: mov rax, [rip+0xe95a0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000010306d: mov rax, [rip+0xe9d9c]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010c010: mov rax, [rip+0xea2e1]; mov rax, [rax+0x18]; add dword ptr [rax], 0x1; ret; 
0x0000000010c000: mov rax, [rip+0xea2f1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000102a10: mov rax, [rip+0xea3f9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000100680: mov rax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x00000000100520: mov rax, [rip+0xec8e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001004f0: mov rax, [rip+0xec919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001003c0: mov rax, [rip+0xeca49]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000ff9ba: mov rax, [rip+0xed44f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff92a: mov rax, [rip+0xed4df]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff9d0: mov rax, [rip+0xed4f1]; mov rax, [rax+0x18]; test rax, rax; je short 0x00000000000ff9e1; ret; 
0x000000000ff840: mov rax, [rip+0xed5d1]; cmp byte ptr [rax], 0x0; je short 0x00000000000ff860; mov eax, 0x72; syscall; 
0x000000000ff7d0: mov rax, [rip+0xed641]; cmp byte ptr [rax], 0x0; je short 0x00000000000ff7f0; mov eax, 0x71; syscall; 
0x000000000ff140: mov rax, [rip+0xedcc9]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000fea08: mov rax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe8e3: mov rax, [rip+0xee526]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe886: mov rax, [rip+0xee583]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe110: mov rax, [rip+0xeecf9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000fe0e2: mov rax, [rip+0xeed27]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9c0: mov rax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fd890: mov rax, [rip+0xef579]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x000000000fc220: mov rax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9678: mov rax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f95a0: mov rax, [rip+0xf3869]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret; 
0x000000000f92c0: mov rax, [rip+0xf3b49]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x000000000ed560: mov rax, [rip+0xff8c1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000fe188: mov rax, [rsi+0x28]; cmp [rdi+0x28], rax; sete al; ret; 
0x000000000fe42e: mov rax, [rsi+0x50]; mov [rdi+0x50], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000010d648: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000010d5d0: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000010d1d8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000010d558: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000010d358: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000010d258: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000010d458: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000010d158: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000010d4d8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000010d3d8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000010d0d8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a930: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a910: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a810: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a8f0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a880: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a850: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a8c0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a830: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a8e0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a8a0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a860: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a820: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000000fe1e3: mov rax, [rsi+0x70]; mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x0000000003a950: mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a960: mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x00000000039650: mov rax, [rsi+rax*8+0x80]; ret; 
0x00000000041da5: mov rax, [rsi]; and rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000041de5: mov rax, [rsi]; or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x0000000005c01b: mov rax, [rsp+0x10]; call rax; 
0x000000000c1982: mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x0000000013df7b: mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000014ce19: mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000013de76: mov rax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000030441: mov rax, [rsp+0x18]; call rax; 
0x0000000002ff94: mov rax, [rsp+0x20]; call rax; 
0x000000000c6ff3: mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x000000000309de: mov rax, [rsp+0x28]; call rax; 
0x000000001412ba: mov rax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000013f950: mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000013fa7a: mov rax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000130e8d: mov rax, [rsp+0x80]; mov edi, [rax]; call qword ptr [rsp+0x38]; 
0x0000000014a185: mov rax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x000000000441a1: mov rax, [rsp+0x8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae7c: mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000044a84: mov rax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000fe042: mov rax, [rsp+0x8]; add rsp, 0x30; pop r12; ret; 
0x0000000002d6d2: mov rax, [rsp+0x8]; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000094008: mov rax, [rsp+0x8]; add rsp, 0x38; ret; 
0x0000000007c7b9: mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x000000000428b7: mov rax, [rsp+0x8]; call rax; 
0x0000000002d1d0: mov rax, [rsp+0x8]; call rax; 
0x000000000806ba: mov rax, [rsp+0x8]; cmp qword ptr [rax+0x30], 0x0; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x0000000013ab84: mov rax, [rsp+0x8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000138e35: mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000042845: mov rax, [rsp+0x8]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000429da: mov rax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000429db: mov rax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000013a02c: mov rax, [rsp+0xd8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000040baf: mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000010068e: mov rax, [rsp-0x50]; ret; 
0x0000000013ef30: mov rax, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000f8f65: mov rax, [rsp]; add rsp, 0x18; ret; 
0x0000000010a65a: mov rax, [rsp]; add rsp, 0x20; pop r12; ret; 
0x000000000d22f1: mov rax, [rsp]; add rsp, 0x28; neg eax; ret; 
0x000000000f7feb: mov rax, [rsp]; add rsp, 0x28; ret; 
0x0000000010a720: mov rax, [rsp]; add rsp, 0x30; pop r12; ret; 
0x0000000019205f: mov rax, [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000010c6a2: mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c703: mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000014be66: mov rax, [rsp]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000012540b: mov rax, [rsp]; mov rdi, r12; call rax; 
0x0000000011f077: mov rax, [rsp]; mov rdi, rbx; call rax; 
0x00000000123590: mov rax, [rsp]; mov rdx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x0000000014ca9d: mov rax, fs:[0x10]; lea rdi, [rax+0x1c]; mov eax, 0xca; syscall; 
0x0000000008b187: mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x00000000086185: mov rax, fs:[0x10]; mov byte ptr [rax+0x972], 0x0; ret; 
0x0000000008fcb0: mov rax, fs:[0x10]; ret; 
0x000000000861e7: mov rax, fs:[0x2f8]; mov [rdi+0x18], rax; mov fs:[0x2f8], rdi; ret; 
0x000000000861ab: mov rax, fs:[0x2f8]; mov [rdi+0x50], rax; mov fs:[0x300], rdi; ret; 
0x0000000007b08b: mov rax, fs:[rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000003a31a: mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000039667: mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a7da: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a77a: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a7ba: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a74a: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret; 
0x0000000003a71a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6fa: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a79a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6da: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a65a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a61a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a69a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5fa: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6ba: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a67a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a63a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5da: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000001155be: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x00000000128f47: mov rax, fs:[rax]; ret; 
0x00000000128c9a: mov rax, fs:[rbx]; mov qword ptr [rax+0x8], 0x0; pop rbx; ret; 
0x000000001425f8: mov rax, fs:[rbx]; test rax, rax; je short 0x0000000000142608; pop rbx; ret; 
0x00000000055768: mov rax, r10; add rsp, 0x20; ret; 
0x00000000128ae3: mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x0000000009c49c: mov rax, r10; pop rbx; pop rbp; pop r12; ret; 
0x0000000003f842: mov rax, r10; ret; 
0x0000000007b62d: mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x0000000009ba88: mov rax, r12; pop r12; pop r13; ret; 
0x0000000003afd8: mov rax, r12; pop r12; ret; 
0x00000000103b38: mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000373bb: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000005ba24: mov rax, r12; pop rbp; pop r12; ret; 
0x0000000005baea: mov rax, r12; pop rbx; pop r12; ret; 
0x0000000003af3a: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000010332a: mov rax, r12; pop rdx; pop r12; ret; 
0x0000000009a911: mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x0000000003a135: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000b5380: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x00000000077065: mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x000000000d3865: mov rax, r15; call rax; 
0x000000000ca3bb: mov rax, r8; add rsp, 0x8; ret; 
0x000000001233a5: mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x000000001014ad: mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x0000000003e7d7: mov rax, r8; pop r12; ret; 
0x00000000079876: mov rax, r8; pop rbp; pop r12; ret; 
0x000000000fae99: mov rax, r8; pop rbp; ret; 
0x000000000df74a: mov rax, r8; pop rbx; pop r12; pop r13; ret; 
0x0000000003e790: mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x0000000004396b: mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000043960: mov rax, r8; ret; 
0x0000000009cdcc: mov rax, r8; ret; 
0x00000000174584: mov rax, r8; vzeroupper; ret; 
0x00000000184086: mov rax, r8; xtest; je short 0x0000000000184092; vzeroall; ret; 
0x000000001853c9: mov rax, r8; xtest; je short 0x00000000001853d5; vzeroall; ret; 
0x000000000704a7: mov rax, r9; pop r14; ret; 
0x000000000a11dd: mov rax, r9; ret; 
0x00000000091790: mov rax, rbp; mov rbp, [rbp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x0000000009b279: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000005563a: mov rax, rbp; pop rbp; ret; 
0x00000000081e29: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000008048a: mov rax, rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000f8a20: mov rax, rbx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x0000000009e165: mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000803db: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000080d0a: mov rax, rbx; pop rbx; ret; 
0x0000000005bb72: mov rax, rbx; test r8d, r8d; jne short 0x000000000005bb80; pop rbx; ret; 
0x00000000043e00: mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000043dd0: mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x000000000555ad: mov rax, rdi; ret; 
0x00000000117c49: mov rax, rdi; sar rax, 0x6; ret; 
0x00000000163e4e: mov rax, rdi; sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x00000000164044: mov rax, rdi; sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x00000000164066: mov rax, rdi; sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x0000000016408c: mov rax, rdi; sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x000000001640a4: mov rax, rdi; sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000001640ca: mov rax, rdi; sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x000000001640ec: mov rax, rdi; sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x0000000016410a: mov rax, rdi; sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x00000000163de6: mov rax, rdi; sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x0000000016412c: mov rax, rdi; sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x0000000016414c: mov rax, rdi; sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x0000000016416c: mov rax, rdi; sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x0000000016418c: mov rax, rdi; sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000001641ae: mov rax, rdi; sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000001641ce: mov rax, rdi; sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x000000001641ee: mov rax, rdi; sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x000000001763d0: mov rax, rdi; vzeroupper; ret; 
0x0000000014c51b: mov rax, rdx; add rsp, 0x28; ret; 
0x0000000014c65a: mov rax, rdx; add rsp, 0x48; ret; 
0x000000000404b0: mov rax, rdx; and rax, [rsp-0x8]; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000012362a: mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000051364: mov rax, rdx; pop rbx; ret; 
0x0000000005081d: mov rax, rdx; ret; 
0x00000000050ea4: mov rax, rdx; ret; 
0x000000001778bc: mov rax, rdx; vzeroupper; ret; 
0x0000000011c67d: mov rax, rsi; pop rbx; ret; 
0x00000000091793: mov rbp, [rbp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x000000000412bb: mov rbp, r9; jmp rdx; 
0x00000000038e75: mov rbp, rdi; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x00000000077242: mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000011570f: mov rbx, [rbp-0x8]; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d75c9: mov rbx, [rbp-0x8]; leave; ret; 
0x00000000140e28: mov rbx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000000d3360: mov rbx, r13; mov rdi, rbp; call r12; 
0x0000000004d756: mov rbx, rdi; mov eax, 0x3e; sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x0000000008e778: mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000108abc: mov rbx, rdi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x0000000007b084: mov rbx, rdi; test byte ptr [rdi], 0x2; jne short 0x000000000007b0f0; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x000000001037d0: mov rbx, rsi; je short 0x00000000001037e0; pop rbx; ret; 
0x00000000087add: mov rcx, 0xfffffffe7fffffff; mov rdx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x0000000017ed0e: mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000010bd0d: mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe16fe], 0x0; ret; 
0x0000000010bc8d: mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xe177e], 0x0; ret; 
0x0000000007aae1: mov rcx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret; 
0x00000000064ae0: mov rcx, [rbp-0x5c8]; mov r10d, [rbp-0x5d8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000001136b4: mov rcx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000f25ce: mov rcx, [rbx]; call rax; 
0x0000000017ba08: mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x0000000017ba09: mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x00000000111371: mov rcx, [rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000010b3c0: mov rcx, [rdi+0x8]; xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x000000000010b3d0; ret; 
0x00000000090ad3: mov rcx, [rdx]; cmp [rax+0x18], rcx; je short 0x0000000000090ae0; ret; 
0x000000000d7f90: mov rcx, [rip+0x114e79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f60: mov rcx, [rip+0x114ea9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f30: mov rcx, [rip+0x114ed9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f00: mov rcx, [rip+0x114f09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7ea0: mov rcx, [rip+0x114f69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7e70: mov rcx, [rip+0x114f99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7d00: mov rcx, [rip+0x115109]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7380: mov rcx, [rip+0x115a89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6f41: mov rcx, [rip+0x115ec8]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6940: mov rcx, [rip+0x1164c9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6720: mov rcx, [rip+0x1166e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000072b67: mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d768: mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000050403: mov rcx, [rip+0x19ca06]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000500d0: mov rcx, [rip+0x19cd39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000005003c: mov rcx, [rip+0x19cdcd]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041ab0: mov rcx, [rip+0x1ab359]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041660: mov rcx, [rip+0x1ab7a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000015443e: mov rcx, [rip+0x98f9b]; lea r11, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543e4: mov rcx, [rip+0x98ff5]; lea r11, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a6e: mov rcx, [rip+0x9b96b]; lea r11, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a0d: mov rcx, [rip+0x9b9cc]; lea r11, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x0000000010aac3: mov rcx, [rip+0xe2346]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa90: mov rcx, [rip+0xe2379]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa60: mov rcx, [rip+0xe23a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a5c0: mov rcx, [rip+0xe2849]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a560: mov rcx, [rip+0xe28a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a530: mov rcx, [rip+0xe28d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a460: mov rcx, [rip+0xe29a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a370: mov rcx, [rip+0xe2a99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a340: mov rcx, [rip+0xe2ac9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a300: mov rcx, [rip+0xe2b09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2d0: mov rcx, [rip+0xe2b39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2a0: mov rcx, [rip+0xe2b69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a270: mov rcx, [rip+0xe2b99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a243: mov rcx, [rip+0xe2bc6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a210: mov rcx, [rip+0xe2bf9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1e0: mov rcx, [rip+0xe2c29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1b0: mov rcx, [rip+0xe2c59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a180: mov rcx, [rip+0xe2c89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a150: mov rcx, [rip+0xe2cb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a123: mov rcx, [rip+0xe2ce6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0f3: mov rcx, [rip+0xe2d16]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0c0: mov rcx, [rip+0xe2d49]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a090: mov rcx, [rip+0xe2d79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a063: mov rcx, [rip+0xe2da6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a033: mov rcx, [rip+0xe2dd6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a000: mov rcx, [rip+0xe2e09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fd0: mov rcx, [rip+0xe2e39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fa0: mov rcx, [rip+0xe2e69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f70: mov rcx, [rip+0xe2e99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f40: mov rcx, [rip+0xe2ec9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f13: mov rcx, [rip+0xe2ef6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109ee0: mov rcx, [rip+0xe2f29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109eb3: mov rcx, [rip+0xe2f56]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e80: mov rcx, [rip+0xe2f89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e50: mov rcx, [rip+0xe2fb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e20: mov rcx, [rip+0xe2fe9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109df0: mov rcx, [rip+0xe3019]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109dc0: mov rcx, [rip+0xe3049]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d90: mov rcx, [rip+0xe3079]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d63: mov rcx, [rip+0xe30a6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d20: mov rcx, [rip+0xe30e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109cf0: mov rcx, [rip+0xe3119]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109c36: mov rcx, [rip+0xe31d3]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109280: mov rcx, [rip+0xe3b89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109253: mov rcx, [rip+0xe3bb6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001091d0: mov rcx, [rip+0xe3c39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001090a0: mov rcx, [rip+0xe3d69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109070: mov rcx, [rip+0xe3d99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108fda: mov rcx, [rip+0xe3e2f]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f60: mov rcx, [rip+0xe3ea9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f30: mov rcx, [rip+0xe3ed9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105553: mov rcx, [rip+0xe78b6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105520: mov rcx, [rip+0xe78e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054f3: mov rcx, [rip+0xe7916]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054c0: mov rcx, [rip+0xe7949]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105490: mov rcx, [rip+0xe7979]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105463: mov rcx, [rip+0xe79a6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105430: mov rcx, [rip+0xe79d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105403: mov rcx, [rip+0xe7a06]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053d3: mov rcx, [rip+0xe7a36]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053a0: mov rcx, [rip+0xe7a69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105370: mov rcx, [rip+0xe7a99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105343: mov rcx, [rip+0xe7ac6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102cc0: mov rcx, [rip+0xea149]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c90: mov rcx, [rip+0xea179]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c60: mov rcx, [rip+0xea1a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c30: mov rcx, [rip+0xea1d9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c03: mov rcx, [rip+0xea206]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102bd0: mov rcx, [rip+0xea239]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ba0: mov rcx, [rip+0xea269]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ad0: mov rcx, [rip+0xea339]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102aa0: mov rcx, [rip+0xea369]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102882: mov rcx, [rip+0xea587]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100450: mov rcx, [rip+0xec9b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100420: mov rcx, [rip+0xec9e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001003f0: mov rcx, [rip+0xeca19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100100: mov rcx, [rip+0xecd09]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100040: mov rcx, [rip+0xecdc9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff80: mov rcx, [rip+0xece89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff50: mov rcx, [rip+0xeceb9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffc60: mov rcx, [rip+0xed1a9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffb50: mov rcx, [rip+0xed2b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff230: mov rcx, [rip+0xedbd9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff090: mov rcx, [rip+0xedd79]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fdfa3: mov rcx, [rip+0xeee66]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb3e0: mov rcx, [rip+0xf1a29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb3b0: mov rcx, [rip+0xf1a59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb380: mov rcx, [rip+0xf1a89]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb353: mov rcx, [rip+0xf1ab6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb320: mov rcx, [rip+0xf1ae9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2f0: mov rcx, [rip+0xf1b19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2c0: mov rcx, [rip+0xf1b49]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb293: mov rcx, [rip+0xf1b76]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb260: mov rcx, [rip+0xf1ba9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae43: mov rcx, [rip+0xf1fc6]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae10: mov rcx, [rip+0xf1ff9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fade0: mov rcx, [rip+0xf2029]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fadb0: mov rcx, [rip+0xf2059]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa5a0: mov rcx, [rip+0xf2869]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa570: mov rcx, [rip+0xf2899]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa4b0: mov rcx, [rip+0xf2959]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa480: mov rcx, [rip+0xf2989]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa450: mov rcx, [rip+0xf29b9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa420: mov rcx, [rip+0xf29e9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa3f0: mov rcx, [rip+0xf2a19]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa220: mov rcx, [rip+0xf2be9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f99a0: mov rcx, [rip+0xf3469]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9970: mov rcx, [rip+0xf3499]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f97c0: mov rcx, [rip+0xf3649]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9790: mov rcx, [rip+0xf3679]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f00d0: mov rcx, [rip+0xfcd39]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f00a0: mov rcx, [rip+0xfcd69]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0070: mov rcx, [rip+0xfcd99]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0040: mov rcx, [rip+0xfcdc9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0010: mov rcx, [rip+0xfcdf9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effe0: mov rcx, [rip+0xfce29]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effb0: mov rcx, [rip+0xfce59]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b10c4: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f24: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000afa54: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa34: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000b1084: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b1ee4: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000af9f4: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000b10a4: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f04: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000afa14: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000b455e: mov rcx, [rsi+rdx-0x8]; mov rsi, [rsi]; mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x00000000179ffa: mov rcx, [rsi-0x8]; cmp rcx, rax; jne 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b62a: mov rcx, [rsi-0x8]; cmp rcx, rax; jne 0x000000000017b873; xor eax, eax; ret; 
0x0000000017aa06: mov rcx, [rsi-0x8]; cmp rcx, rax; jne short 0x000000000017aa33; xor eax, eax; ret; 
0x0000000017b846: mov rcx, [rsi-0x8]; cmp rcx, rax; jne short 0x000000000017b873; xor eax, eax; ret; 
0x00000000158cc3: mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158cc4: mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c33: mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c34: mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158ba4: mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000001535e0: mov rcx, [rsi-0x9]; mov edx, [rsi-0x4]; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537c0: mov rcx, [rsi-0xa]; mov edx, [rsi-0x4]; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x000000001539a0: mov rcx, [rsi-0xb]; mov edx, [rsi-0x4]; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b80: mov rcx, [rsi-0xc]; mov edx, [rsi-0x4]; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153d70: mov rcx, [rsi-0xd]; mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f70: mov rcx, [rsi-0xe]; mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154170: mov rcx, [rsi-0xf]; mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000159644: mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x000000001595d4: mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x00000000159564: mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000001594f4: mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x00000000159484: mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x00000000159414: mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000001593a4: mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x000000000b0f10: mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; lea rax, [rdi+0x8]; ret; 
0x000000000af900: mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000b05d0: mov rcx, [rsi]; mov dl, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dl; ret; 
0x000000000af910: mov rcx, [rsi]; mov dx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], dx; ret; 
0x000000000af920: mov rcx, [rsi]; mov edx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], edx; ret; 
0x000000000af930: mov rcx, [rsi]; mov edx, [rsi+0x8]; mov [rdi], rcx; mov [rdi+0x8], edx; ret; 
0x00000000188900: mov rcx, [rsi]; mov r9, [rsi+rdx-0x7]; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x000000000af940: mov rcx, [rsi]; mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x000000000af950: mov rcx, [rsi]; mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x000000000af960: mov rcx, [rsi]; mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x0000000018b300: mov rcx, [rsi]; mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000014cdcd: mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x0000000011f57c: mov rcx, [rsp+0x10]; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x00000000119952: mov rcx, [rsp+0x18]; mov esi, [rsp+0x38]; mov edi, [rsp+0x14]; call qword ptr [rsp+0x58]; 
0x0000000013e088: mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x000000000366cb: mov rcx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000013de97: mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x00000000130d00: mov rcx, [rsp+0x28]; mov rdx, [rsp+0xa0]; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x00000000035239: mov rcx, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000003199a: mov rcx, [rsp+0x30]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d2: mov rcx, [rsp+0x30]; mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x00000000085da7: mov rcx, [rsp+0x38]; mov rax, [rax+0x40]; add rsp, 0x38; jmp rax; 
0x00000000118b95: mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000010c69d: mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6fe: mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x00000000139052: mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000d3778: mov rcx, [rsp+0x8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000140e48: mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x0000000013a29c: mov rcx, [rsp]; mov rdi, rbx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x00000000111370: mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000011136f: mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x00000000085e13: mov rcx, r10; call rax; 
0x0000000011a14c: mov rcx, r12; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000119081: mov rcx, r12; mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x000000000d4708: mov rcx, r12; mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000d4ac8: mov rcx, r12; mov rdx, r13; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000142210: mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x000000000b622b: mov rcx, r12; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x00000000130b8e: mov rcx, r13; call r10; 
0x00000000130f4e: mov rcx, r13; call rbx; 
0x0000000011f940: mov rcx, r13; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp; 
0x0000000013bf50: mov rcx, r13; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000c1324: mov rcx, r13; mov rdx, rbp; call rbx; 
0x0000000011b5b3: mov rcx, r13; mov rsi, [rsp+0x18]; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000011b113: mov rcx, r13; mov rsi, [rsp+0x18]; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000586b9: mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000130947: mov rcx, r14; mov rdi, r13; call r12; 
0x00000000110a9a: mov rcx, r14; mov rdi, rbx; call r12; 
0x00000000131f60: mov rcx, r15; call rbp; 
0x0000000007de91: mov rcx, r15; mov rdi, r14; xor r8d, r8d; call r12; 
0x00000000130a38: mov rcx, rax; call r12; 
0x0000000011a61b: mov rcx, rbp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010e5ab: mov rcx, rbp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d6218: mov rcx, rbp; mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d5ee8: mov rcx, rbp; mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000807c2: mov rcx, rbx; sub rcx, rdx; cmp rax, rcx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x00000000138f9f: mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x000000000b4541: mov rcx, rdx; rep movsb [rdi], [rsi]; ret; 
0x0000000013e6c3: mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x0000000018df87: mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret; 
0x00000000108a90: mov rdi, 0xfffff00000000000; shl rax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x000000000b57f1: mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx; 
0x000000000428b1: mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x00000000139172: mov rdi, [r12]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000139035: mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x000000001390e4: mov rdi, [r12]; test r15d, r15d; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000019266f: mov rdi, [r13+0x10]; add rdi, rbx; call r12; 
0x00000000139369: mov rdi, [r13]; test rdi, rdi; je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000091797: mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x00000000086e9e: mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000c198c: mov rdi, [rax]; call r13; 
0x0000000013e034: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013df80: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141873: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000013de7e: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000007c7b6: mov rdi, [rax]; mov rax, [rsp+0x8]; call qword ptr [rax+0x18]; 
0x00000000140e2d: mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000085a70: mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000085878: mov rdi, [rbp+0x10]; call qword ptr [rbx+0x358]; 
0x00000000103c16: mov rdi, [rbp+0x10]; test rdi, rdi; jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x000000000fb9a0: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf0: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc70: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x00000000043d89: mov rdi, [rbp+0x8]; call rax; 
0x000000000f25bf: mov rdi, [rbp-0x1a0]; push rax; mov rax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x00000000104036: mov rdi, [rbp-0x48]; mov [rbp-0x40], r9; mov r15d, r14d; mov rax, [rbp-0x50]; call rax; 
0x0000000013bda9: mov rdi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x00000000103c1f: mov rdi, [rbp]; call rbx; 
0x00000000141f5d: mov rdi, [rbp]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f2: mov rdi, [rbp]; test rdi, rdi; je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000fb512: mov rdi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000009a208: mov rdi, [rbx+0x48]; call rax; 
0x0000000009a191: mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x0000000011f3dc: mov rdi, [rbx+0x48]; test rdi, rdi; jne short 0x000000000011f3d0; pop rbx; ret; 
0x000000000f8a31: mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000880f4: mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x0000000008721e: mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000141916: mov rdi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000014187d: mov rdi, [rbx]; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000897de: mov rdi, [rcx+0x648]; je 0x00000000000898c5; call rax; 
0x000000000860af: mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x0000000013e940: mov rdi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x000000000013e950; ret; 
0x000000001434d0: mov rdi, [rdi+0x40]; mov eax, [rdi]; test eax, eax; jne short 0x00000000001434e0; ret; 
0x0000000009a088: mov rdi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x0000000008e77b: mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x0000000014c431: mov rdi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f0: mov rdi, [rdi+0x8]; push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x00000000077245: mov rdi, [rdi+0xe0]; call rax; 
0x00000000077209: mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000077282: mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x0000000014c3b4: mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x000000001144d3: mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x000000001322d9: mov rdi, [rip+0xca1e0]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000101900: mov rdi, [rip+0xf4701]; test rdi, rdi; jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x000000001182b9: mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000866f8: mov rdi, [rsp+0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000011b11b: mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000014ce1e: mov rdi, [rsp+0x18]; call rax; 
0x0000000014cdd2: mov rdi, [rsp+0x18]; call rcx; 
0x0000000014c36b: mov rdi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x000000000fc116: mov rdi, [rsp+0x28]; lea rcx, [rsp+0x38]; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x0000000011f8f0: mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000013a343: mov rdi, [rsp+0x2a00]; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x000000000366d4: mov rdi, [rsp+0x40]; call r15; 
0x00000000036830: mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000033245: mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x0000000003254e: mov rdi, [rsp+0x48]; call r15; 
0x000000000314f8: mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x000000000319a4: mov rdi, [rsp+0x58]; call r14; 
0x0000000002ff8f: mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309d9: mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x000000000345dc: mov rdi, [rsp+0x60]; call r13; 
0x0000000003043c: mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f42: mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x00000000083d2a: mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000002ce12: mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x0000000005c00d: mov rdi, [rsp+0x8]; mov [rsp+0x7], r9b; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x00000000044a63: mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b33: mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda33: mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x000000000416e6: mov rdi, [rsp+0x8]; mov esi, 0x8; mov r8d, eax; mov eax, 0x82; syscall; 
0x000000000fdb07: mov rdi, [rsp+0x8]; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000423f4: mov rdi, [rsp+0x8]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000d5eee: mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x00000000130d15: mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x00000000083765: mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000fa62e: mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x000000000fa505: mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x0000000014c2ba: mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x000000000d4ace: mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x0000000013971d: mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000013ae42: mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000013de68: mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000013b009: mov rdi, r12; call qword ptr [rbx]; 
0x000000001447fe: mov rdi, r12; call r13; 
0x0000000002e639: mov rdi, r12; call rax; 
0x0000000011f8ac: mov rdi, r12; call rbp; 
0x000000000423e7: mov rdi, r12; call rbx; 
0x00000000042a34: mov rdi, r12; call rcx; 
0x0000000005749c: mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x00000000118b8d: mov rdi, r12; mov r9, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x000000000424eb: mov rdi, r12; mov rdx, rbp; call rbx; 
0x000000000c148f: mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x000000000586ac: mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000008f49c: mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000083c2b: mov rdi, r13; call qword ptr [rax+0x18]; 
0x00000000139ff7: mov rdi, r13; call qword ptr [rax+0x20]; 
0x00000000143969: mov rdi, r13; call qword ptr [rax+0x28]; 
0x0000000013ab8c: mov rdi, r13; call qword ptr [rax+0x30]; 
0x0000000011908c: mov rdi, r13; call qword ptr [rsp+0x58]; 
0x00000000092e4e: mov rdi, r13; call r12; 
0x00000000043620: mov rdi, r13; call rax; 
0x00000000042569: mov rdi, r13; call rbx; 
0x0000000007dcc2: mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x0000000013f940: mov rdi, r13; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000011f584: mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x0000000011f583: mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x00000000088cec: mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000131f54: mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x00000000085af6: mov rdi, r14; call qword ptr [r12+0x358]; 
0x0000000006c552: mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000013affb: mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b035: mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000006c8e8: mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc33: mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000014246f: mov rdi, r14; call qword ptr [rdx+0x10]; 
0x00000000104660: mov rdi, r14; call r13; 
0x0000000009a19c: mov rdi, r14; call rax; 
0x00000000125a54: mov rdi, r14; call rdx; 
0x0000000006cc30: mov rdi, r14; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719c0: mov rdi, r14; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x00000000130f4b: mov rdi, r14; mov rcx, r13; call rbx; 
0x0000000007de94: mov rdi, r14; xor r8d, r8d; call r12; 
0x0000000007cd88: mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000078178: mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000007caaa: mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007c9d7: mov rdi, r15; call qword ptr [r14+0x90]; 
0x000000000781dd: mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000007cf86: mov rdi, r15; call qword ptr [rbp+0x80]; 
0x0000000007af29: mov rdi, r15; call qword ptr [rbx+0x18]; 
0x0000000007d07a: mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000001045d3: mov rdi, r15; call r13; 
0x0000000007cb03: mov rdi, r15; call rax; 
0x00000000042426: mov rdi, r15; call rbx; 
0x00000000130a30: mov rdi, r15; mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x00000000103e39: mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x0000000008716f: mov rdi, r15; mov eax, r9d; syscall; 
0x0000000007b03f: mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x000000000d3782: mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x000000001446bc: mov rdi, r15; xor eax, eax; add r13, rbx; call rbp; 
0x00000000141f57: mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000109c27: mov rdi, r8; call rdx; 
0x00000000086218: mov rdi, r8; jmp rax; 
0x0000000008894c: mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000087d22: mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000138d72: mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000008f739: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000043b11: mov rdi, r9; call r13; 
0x00000000088275: mov rdi, r9; mov eax, 0xca; syscall; 
0x000000000884af: mov rdi, r9; mov eax, ebp; syscall; 
0x00000000088fd5: mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000085908: mov rdi, rax; call qword ptr [rbx+0x358]; 
0x0000000005567e: mov rdi, rax; cmp rdx, rcx; jae short 0x0000000000055668; mov rax, r8; ret; 
0x0000000002d373: mov rdi, rax; mov [rsp+0x10], rdx; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x00000000108fd0: mov rdi, rax; mov eax, 0x3c; syscall; 
0x000000000b4c7b: mov rdi, rax; mov eax, [rcx+rax*4]; sub eax, [rcx+rsi*4]; je short 0x00000000000b4c68; ret; 
0x0000000013a869: mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x00000000072fc1: mov rdi, rbp; call qword ptr [r12+0x38]; 
0x0000000007f116: mov rdi, rbp; call qword ptr [r13+0x10]; 
0x00000000082027: mov rdi, rbp; call qword ptr [r13+0x18]; 
0x0000000006f02b: mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e161: mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000816a4: mov rdi, rbp; call qword ptr [r15+0x80]; 
0x00000000139120: mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000138e3a: mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139c52: mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000013a7da: mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000014c813: mov rdi, rbp; call qword ptr [rax+0x338]; 
0x0000000006b676: mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000145309: mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000013f1d7: mov rdi, rbp; call qword ptr [rax+0x48]; 
0x000000000815cc: mov rdi, rbp; call qword ptr [rax+0x80]; 
0x00000000139027: mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000008146f: mov rdi, rbp; call qword ptr [rax+0x90]; 
0x0000000013b3e9: mov rdi, rbp; call qword ptr [rax]; 
0x00000000076917: mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x0000000006dcf5: mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000081b14: mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x00000000076c09: mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x000000000823bd: mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x000000000767b3: mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x0000000006e0b0: mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000011f024: mov rdi, rbp; call qword ptr [rsp+0x18]; 
0x0000000013be9e: mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x000000000d3363: mov rdi, rbp; call r12; 
0x0000000008161b: mov rdi, rbp; call rax; 
0x000000000b6235: mov rdi, rbp; call rbx; 
0x00000000093bd2: mov rdi, rbp; call rbx; 
0x00000000139057: mov rdi, rbp; call rcx; 
0x00000000139068: mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000141e4e: mov rdi, rbp; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x000000001398d4: mov rdi, rbp; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000b5e71: mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x00000000139b69: mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x000000001390fe: mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139083: mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000014300b: mov rdi, rbp; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x000000000f9164: mov rdi, rbp; mov eax, 0x135; syscall; 
0x000000001029f8: mov rdi, rbp; mov eax, 0x9; syscall; 
0x0000000008b672: mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000008cd86: mov rdi, rbp; mov eax, ecx; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000008c65f: mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000008b760: mov rdi, rbp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000008b983: mov rdi, rbp; mov eax, r15d; syscall; 
0x0000000008e660: mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000103b16: mov rdi, rbp; mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000008badc: mov rdi, rbp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x0000000012385a: mov rdi, rbp; mov qword ptr [rsp+0x8], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000139c05: mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000b6543: mov rdi, rbp; mov r9, r15; call rbx; 
0x00000000103ba6: mov rdi, rbp; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000b5faf: mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x0000000007d1c5: mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000007ae8f: mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000813ba: mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d552: mov rdi, rbp; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x0000000007b313: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000013a4dc: mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000139d4b: mov rdi, rbp; pop rcx; mov r12d, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x0000000014c744: mov rdi, rbp; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x00000000123923: mov rdi, rbp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000103b04: mov rdi, rbp; xor esi, esi; call r12; 
0x000000000b6159: mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000b615a: mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x0000000008eca6: mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000140e0e: mov rdi, rbx; add dword ptr [rax], 0x1; mov rax, [r15+0x60]; call qword ptr [rax+0x8]; 
0x000000000829ca: mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000076d63: mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000081de9: mov rdi, rbx; call qword ptr [r12+0x80]; 
0x00000000082221: mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000077512: mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d8e: mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007e627: mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007015e: mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000849ba: mov rdi, rbx; call qword ptr [r15+0x18]; 
0x00000000077a3c: mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000008445c: mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000013a034: mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000140dfc: mov rdi, rbx; call qword ptr [rax+0x28]; 
0x00000000078db8: mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000008365b: mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x0000000007ae0c: mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b681: mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x00000000078fcd: mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000081c0a: mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000007d8a7: mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000080f4c: mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x0000000011c70e: mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000002e078: mov rdi, rbx; call r12; 
0x0000000002ed74: mov rdi, rbx; call r14; 
0x000000000d995e: mov rdi, rbx; call r15; 
0x000000000760af: mov rdi, rbx; call r8; 
0x00000000075b89: mov rdi, rbx; call rax; 
0x0000000002df05: mov rdi, rbx; call rbp; 
0x00000000140e4d: mov rdi, rbx; call rcx; 
0x00000000080e49: mov rdi, rbx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x00000000130b8b: mov rdi, rbx; mov rcx, r13; call r10; 
0x00000000080dc8: mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x0000000007c33a: mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082ba0: mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x0000000013a2a0: mov rdi, rbx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x00000000108abf: mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x00000000055705: mov rdi, rdx; cmp rax, 0x9; ja short 0x00000000000556e0; mov rax, r8; ret; 
0x0000000017096e: mov rdi, rdx; inc ecx; jne 0x00000000001708a0; vzeroupper; ret; 
0x00000000177c22: mov rdi, rdx; inc ecx; jne 0x0000000000177b40; vzeroupper; ret; 
0x00000000186238: mov rdi, rdx; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d618: mov rdi, rdx; test ecx, ecx; jne 0x000000000018d500; ret; 
0x0000000018d00a: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018ba8a: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000017418e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x0000000009a235: mov rdi, rsi; call rax; 
0x00000000144900: mov rdi, rsp; call r8; 
0x00000000143040: mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x0000000004071c: mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret; 
0x0000000014d01e: mov rdx, 0xfffffffffffffffe; rol rdx, cl; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000003a203: mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000d856f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x000000000d843f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000012363f: mov rdx, 0xffffffffffffffff; ret; 
0x0000000011532c: mov rdx, [r13-0x10]; mov dword ptr [rbp-0x80], 0x0; mov [rbp-0x70], rdx; mov rdx, r12; call rax; 
0x00000000142460: mov rdx, [r14+0x8]; mov dword ptr [r10], 0xe; lea rsi, [r10+0x8]; mov rdi, r14; call qword ptr [rdx+0x10]; 
0x0000000007caf7: mov rdx, [r15+0x40]; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x00000000130941: mov rdx, [r15]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12; 
0x0000000007fbb7: mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret; 
0x00000000086ea2: mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x000000000f8adc: mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000003a2c9: mov rdx, [rax+0xc0]; mov rax, [rip+0x1b2c29]; mov [rax], rdx; ret; 
0x00000000089602: mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x0000000002d1cd: mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x00000000081610: mov rdx, [rbp+0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax; 
0x00000000086c06: mov rdx, [rbp]; test rdx, rdx; je short 0x0000000000086be0; call rdx; 
0x00000000085bd9: mov rdx, [rbx+0x10]; mov [rdx], rax; pop rbx; ret; 
0x00000000087222: mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000085ca8: mov rdx, [rbx+0x20]; push r10; call rax; 
0x00000000087ae7: mov rdx, [rbx+0x28]; and [rdx+0x10], rcx; pop rbx; ret; 
0x0000000007c337: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082b9d: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000f8a23: mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x000000000f23d9: mov rdx, [rbx]; mov r11, [rbp-0x1c8]; call r11; 
0x0000000014c514: mov rdx, [rcx]; add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x28; ret; 
0x0000000014c653: mov rdx, [rcx]; add rdx, [rax+0x8]; mov rax, rdx; add rsp, 0x48; ret; 
0x000000000d677b: mov rdx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x000000000d6783: mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret; 
0x00000000085b4c: mov rdx, [rdi+0x30]; mov [rax], rdx; pop rbx; ret; 
0x00000000085bb3: mov rdx, [rdi+0x460]; mov [rax], rdx; pop rbx; ret; 
0x000000000e0908: mov rdx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000e083d; ret; 
0x000000000e08b6: mov rdx, [rdi+0x70]; xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000e083d; ret; 
0x000000000868f1: mov rdx, [rdi+0x8]; mov [rcx+0x8], rdx; mov [rdx], rcx; mov qword ptr [rax+0x1018], 0x0; ret; 
0x00000000141a40: mov rdx, [rdi+0x8]; mov [rsp], rax; call qword ptr [rdx+0x20]; 
0x00000000140c63: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 0x1; ret; 
0x00000000140b6b: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 0x1; ret; 
0x000000000770df: mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret; 
0x0000000007fc0a: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faea: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x000000000500c6: mov rdx, [rdx+0x88]; xor eax, eax; ret; 
0x000000000d8070: mov rdx, [rip+0x114d99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d8000: mov rdx, [rip+0x114e09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7dc0: mov rdx, [rip+0x115049]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d7d60: mov rdx, [rip+0x1150a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6a00: mov rdx, [rip+0x116409]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6900: mov rdx, [rip+0x116509]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d6848: mov rdx, [rip+0x1165c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d3db8: mov rdx, [rip+0x119051]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d2e60: mov rdx, [rip+0x119fa9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000d2250: mov rdx, [rip+0x11abb9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000d21d8: mov rdx, [rip+0x11ac31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9ba0: mov rdx, [rip+0x123269]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c9b70: mov rdx, [rip+0x123299]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c7548: mov rdx, [rip+0x1258c1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c73c8: mov rdx, [rip+0x125a41]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c72b0: mov rdx, [rip+0x125b59]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000945c8: mov rdx, [rip+0x158841]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094578: mov rdx, [rip+0x158891]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094528: mov rdx, [rip+0x1588e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000940d0: mov rdx, [rip+0x158d39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000094018: mov rdx, [rip+0x158df1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000093f70: mov rdx, [rip+0x158e99]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093ee8: mov rdx, [rip+0x158f21]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000093ab0: mov rdx, [rip+0x159359]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c198: mov rdx, [rip+0x190c71]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005c160: mov rdx, [rip+0x190ca9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000044a90: mov rdx, [rip+0x1a8379]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000041720: mov rdx, [rip+0x1ab6e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000041698: mov rdx, [rip+0x1ab771]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000413e0: mov rdx, [rip+0x1aba29]; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000003aa2e: mov rdx, [rip+0x1b23b3]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x0000000002d143: mov rdx, [rip+0x1bfd3e]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x0000000014eb30: mov rdx, [rip+0x9e2d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000014cf7c: mov rdx, [rip+0x9ff45]; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000014b2b1: mov rdx, [rip+0xa1b58]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000014b269: mov rdx, [rip+0xa1ba0]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x00000000116ca8: mov rdx, [rip+0xd6161]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b3a8: mov rdx, [rip+0xe1a61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b338: mov rdx, [rip+0xe1ad1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b300: mov rdx, [rip+0xe1b09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b2d0: mov rdx, [rip+0xe1b39]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b2a8: mov rdx, [rip+0xe1b61]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b278: mov rdx, [rip+0xe1b91]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1e0: mov rdx, [rip+0xe1c29]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b1a0: mov rdx, [rip+0xe1c69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b140: mov rdx, [rip+0xe1cc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b0f8: mov rdx, [rip+0xe1d11]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b038: mov rdx, [rip+0xe1dd1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010aed8: mov rdx, [rip+0xe1f31]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ae30: mov rdx, [rip+0xe1fd9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010ad78: mov rdx, [rip+0xe2091]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010aa38: mov rdx, [rip+0xe23d1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a9f0: mov rdx, [rip+0xe2419]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a930: mov rdx, [rip+0xe24d9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a888: mov rdx, [rip+0xe2581]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a7d0: mov rdx, [rip+0xe2639]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a730: mov rdx, [rip+0xe26d9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a668: mov rdx, [rip+0xe27a1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010a598: mov rdx, [rip+0xe2871]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a4f0: mov rdx, [rip+0xe2919]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010a420: mov rdx, [rip+0xe29e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001099c8: mov rdx, [rip+0xe3441]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109970: mov rdx, [rip+0xe3499]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109920: mov rdx, [rip+0xe34e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001098d0: mov rdx, [rip+0xe3539]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109890: mov rdx, [rip+0xe3579]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109868: mov rdx, [rip+0xe35a1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109838: mov rdx, [rip+0xe35d1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109808: mov rdx, [rip+0xe3601]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001097a8: mov rdx, [rip+0xe3661]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109770: mov rdx, [rip+0xe3699]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001096c0: mov rdx, [rip+0xe3749]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001095e0: mov rdx, [rip+0xe3829]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109540: mov rdx, [rip+0xe38c9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109478: mov rdx, [rip+0xe3991]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000001093c8: mov rdx, [rip+0xe3a41]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109318: mov rdx, [rip+0xe3af1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001091a0: mov rdx, [rip+0xe3c69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109150: mov rdx, [rip+0xe3cb9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000109040: mov rdx, [rip+0xe3dc9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000109010: mov rdx, [rip+0xe3df9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000104e40: mov rdx, [rip+0xe7fc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000102b60: mov rdx, [rip+0xea2a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010bd7a: mov rdx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000001012f0: mov rdx, [rip+0xebb19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001012c0: mov rdx, [rip+0xebb49]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100698: mov rdx, [rip+0xec771]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000100140: mov rdx, [rip+0xeccc9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000001000c0: mov rdx, [rip+0xecd49]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000100000: mov rdx, [rip+0xece09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff9a8: mov rdx, [rip+0xed461]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff918: mov rdx, [rip+0xed4f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff890: mov rdx, [rip+0xed579]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff820: mov rdx, [rip+0xed5e9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000ff4c0: mov rdx, [rip+0xed949]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff410: mov rdx, [rip+0xed9f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff360: mov rdx, [rip+0xedaa9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff2c0: mov rdx, [rip+0xedb49]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff060: mov rdx, [rip+0xedda9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed80: mov rdx, [rip+0xee089]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed50: mov rdx, [rip+0xee0b9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fed10: mov rdx, [rip+0xee0f9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000feb88: mov rdx, [rip+0xee281]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe9f0: mov rdx, [rip+0xee419]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe810: mov rdx, [rip+0xee5f9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7e8: mov rdx, [rip+0xee621]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe7b0: mov rdx, [rip+0xee659]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe788: mov rdx, [rip+0xee681]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe718: mov rdx, [rip+0xee6f1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe680: mov rdx, [rip+0xee789]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe628: mov rdx, [rip+0xee7e1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe5b0: mov rdx, [rip+0xee859]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe568: mov rdx, [rip+0xee8a1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe4b8: mov rdx, [rip+0xee951]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe0d0: mov rdx, [rip+0xeed39]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe098: mov rdx, [rip+0xeed71]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fe050: mov rdx, [rip+0xeedb9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000fda60: mov rdx, [rip+0xef3a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa530: mov rdx, [rip+0xf28d9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000fa3b0: mov rdx, [rip+0xf2a59]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9e10: mov rdx, [rip+0xf2ff9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9de0: mov rdx, [rip+0xf3029]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9da0: mov rdx, [rip+0xf3069]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9d00: mov rdx, [rip+0xf3109]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f96d0: mov rdx, [rip+0xf3739]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f96a0: mov rdx, [rip+0xf3769]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9660: mov rdx, [rip+0xf37a9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9318: mov rdx, [rip+0xf3af1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f90f8: mov rdx, [rip+0xf3d11]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f80a8: mov rdx, [rip+0xf4d61]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f7ff8: mov rdx, [rip+0xf4e11]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000f01a0: mov rdx, [rip+0xfcc69]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f0100: mov rdx, [rip+0xfcd09]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000086b51: mov rdx, [rsi+0x18]; imul rax, rcx; lea rax, [rax+rdx+0x4000]; ret; 
0x00000000159640: mov rdx, [rsi+0x1]; mov rcx, [rsi]; mov [rdi+0x1], rdx; mov [rdi], rcx; ret; 
0x000000001595d0: mov rdx, [rsi+0x2]; mov rcx, [rsi]; mov [rdi+0x2], rdx; mov [rdi], rcx; ret; 
0x00000000159560: mov rdx, [rsi+0x3]; mov rcx, [rsi]; mov [rdi+0x3], rdx; mov [rdi], rcx; ret; 
0x000000001594f0: mov rdx, [rsi+0x4]; mov rcx, [rsi]; mov [rdi+0x4], rdx; mov [rdi], rcx; ret; 
0x000000000b0f83: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd3: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000af943: mov rdx, [rsi+0x5]; mov [rdi], rcx; mov [rdi+0x5], rdx; ret; 
0x00000000159480: mov rdx, [rsi+0x5]; mov rcx, [rsi]; mov [rdi+0x5], rdx; mov [rdi], rcx; ret; 
0x000000000b0fa3: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xd]; ret; 
0x000000000b1df3: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000af953: mov rdx, [rsi+0x6]; mov [rdi], rcx; mov [rdi+0x6], rdx; ret; 
0x00000000159410: mov rdx, [rsi+0x6]; mov rcx, [rsi]; mov [rdi+0x6], rdx; mov [rdi], rcx; ret; 
0x000000000b0fc3: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xe]; ret; 
0x000000000b1e13: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; lea rax, [rdi+0xf]; ret; 
0x000000000af963: mov rdx, [rsi+0x7]; mov [rdi], rcx; mov [rdi+0x7], rdx; ret; 
0x000000001593a0: mov rdx, [rsi+0x7]; mov rcx, [rsi]; mov [rdi+0x7], rdx; mov [rdi], rcx; ret; 
0x00000000187eb3: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; lea rax, [rdi+r8]; ret; 
0x0000000018a353: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b303: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; ret; 
0x000000001760d3: mov rdx, [rsi+r8-0x8]; mov [rdi], rcx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x00000000153404: mov rdx, [rsi-0x8]; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153d56: mov rdx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153d58: mov rdx, [rsi-0x8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f56: mov rdx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f58: mov rdx, [rsi-0x8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154158: mov rdx, [rsi-0x8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x000000001533e8: mov rdx, [rsi-0x8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153420: mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000153d72: mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153d74: mov rdx, [rsi-0x8]; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f74: mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f72: mov rdx, [rsi-0x8]; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154174: mov rdx, [rsi-0x8]; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000158ed0: mov rdx, [rsi-0x9]; mov ecx, [rsi-0x4]; mov [rdi-0x9], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158e50: mov rdx, [rsi-0xa]; mov ecx, [rsi-0x4]; mov [rdi-0xa], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158dd0: mov rdx, [rsi-0xb]; mov ecx, [rsi-0x4]; mov [rdi-0xb], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158d50: mov rdx, [rsi-0xc]; mov ecx, [rsi-0x4]; mov [rdi-0xc], rdx; mov [rdi-0x4], ecx; ret; 
0x00000000158cc0: mov rdx, [rsi-0xd]; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c30: mov rdx, [rsi-0xe]; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158ba0: mov rdx, [rsi-0xf]; mov rcx, [rsi-0x8]; mov [rdi-0xf], rdx; mov [rdi-0x8], rcx; ret; 
0x000000000b0f00: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000b1d40: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000af8f0: mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000b3970: mov rdx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000000a1540: mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x000000000a15f0: mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000d68d5: mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x0000000010c698: mov rdx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x38; ret; 
0x0000000010c6f9: mov rdx, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rax, [rsp]; add rsp, 0x40; ret; 
0x0000000011a616: mov rdx, [rsp+0x10]; mov rcx, rbp; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010e5a6: mov rdx, [rsp+0x10]; mov rcx, rbp; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000010a700: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x0000000010a852: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a632: mov rdx, [rsp+0x10]; mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000110f9d: mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000a1470: mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret; 
0x0000000010a9b9: mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000139418: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010b0be: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fde: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x0000000011a14f: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000ffed2: mov rdx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x000000000c148a: mov rdx, [rsp+0x20]; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x00000000085eb7: mov rdx, [rsp+0x28]; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x00000000119084: mov rdx, [rsp+0x38]; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x000000000d377d: mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000030432: mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f38: mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x00000000123594: mov rdx, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x0000000014be60: mov rdx, [rsp+0x8]; mov rax, [rsp]; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000009409c: mov rdx, [rsp+0x8]; mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x00000000081d22: mov rdx, [rsp+0x8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000130d05: mov rdx, [rsp+0xa0]; mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x00000000125a50: mov rdx, [rsp]; mov rdi, r14; call rdx; 
0x0000000006b19e: mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000011b120: mov rdx, r12; call qword ptr [rsp+0x48]; 
0x00000000114a98: mov rdx, r12; call rax; 
0x000000000930a0: mov rdx, r12; mov eax, 0x81; syscall; 
0x0000000013aff8: mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b032: mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x000000000809bb: mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000007261f: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc2d: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000077a36: mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x00000000081b0e: mov rdx, r12; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x0000000007750c: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d88: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000078db2: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000013bf53: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000009a914: mov rdx, r12; pop r12; pop r13; ret; 
0x000000001148fd: mov rdx, r13; call rax; 
0x000000000fdac1: mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000d621b: mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d470b: mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x00000000103ba9: mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000b5fa7: mov rdx, r13; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx; 
0x00000000110a97: mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12; 
0x000000000d5eeb: mov rdx, r13; mov rdi, [rsp+0x8]; mov rsi, r12; call qword ptr [rsp+0x38]; 
0x000000000d4acb: mov rdx, r13; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x0000000006dcf2: mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006d328: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c423: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000006b670: mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013be98: mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x0000000006e0aa: mov rdx, r13; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000007998b: mov rdx, r13; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000b5e6b: mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000f8733: mov rdx, r14; mov [rsp+0x138], r13; mov [rsp+0x148], eax; mov eax, 0xe; syscall; 
0x000000000d3a01: mov rdx, r14; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000000428b5: mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x000000000429d8: mov rdx, r14; mov rax, [rsp+0x8]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000011f581: mov rdx, r14; mov rdi, r13; mov rsi, [rsp+0x8]; call rbp; 
0x000000000b6233: mov rdx, r14; mov rdi, rbp; call rbx; 
0x000000000b6157: mov rdx, r14; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000b653b: mov rdx, r14; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x000000000742cf: mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000042a2a: mov rdx, r14; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx; 
0x0000000004284a: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000006f6e7: mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e332: mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000080dcb: mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78]; 
0x000000000b6418: mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000ffd15: mov rdx, r15; mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000011c708: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x000000000fe9d5: mov rdx, r8; mov [rsp-0x15], al; mov eax, 0x10; syscall; 
0x00000000108fb0: mov rdx, r8; mov r8, r9; mov r10, [rsp+0x8]; mov eax, 0x38; syscall; 
0x00000000074127: mov rdx, r8; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000057496: mov rdx, r8; mov rsi, r13; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x0000000007fdc0: mov rdx, r8; mov rsi, rbx; mov edi, 0x2; mov eax, r10d; syscall; 
0x0000000011110f: mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000111b36: mov rdx, rax; call qword ptr [rbx+0x28]; 
0x00000000084add: mov rdx, rax; mov rax, [rax]; test rax, rax; jne short 0x0000000000084ad8; ret; 
0x00000000104f45: mov rdx, rax; mov rsi, r13; xor edi, edi; mov eax, ebx; syscall; 
0x000000001136be: mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000e9e96: mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000a1128: mov rdx, rax; xor eax, eax; mov [rdi], rdx; ret; 
0x000000000424ee: mov rdx, rbp; call rbx; 
0x000000000426ef: mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000118b8a: mov rdx, rbp; mov rdi, r12; mov r9, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x000000000423f9: mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000042563: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000042420: mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx; 
0x0000000004243b: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000142213: mov rdx, rbp; mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x0000000007032d: mov rdx, rbx; call qword ptr [r13+0x38]; 
0x00000000114e41: mov rdx, rbx; call rax; 
0x00000000089ec5: mov rdx, rbx; mov eax, 0xe; lea rsi, [rip+0x11f52c]; syscall; 
0x0000000006c54f: mov rdx, rbx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x00000000072fbe: mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000788ce: mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x00000000080b1e: mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x00000000073397: mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000074697: mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x00000000071c35: mov rdx, rbx; mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006e15b: mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000001099ab: mov rdx, rcx; cmp r9d, 0x1; ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x00000000102869: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x0000000006c8e2: mov rdx, rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006f025: mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e631: mov rdx, rcx; mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000b4b30: mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001778b7: mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x0000000014eb10: mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014eaa0: mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000d20f2: mov rdx, rsi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000008aa40: mov rdx, rsi; mov edi, [rdi+0x2d0]; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x000000000fdd5b: mov rdx, rsi; xor esi, esi; syscall; 
0x00000000104e8a: mov rdx, rsp; syscall; 
0x0000000002d3c1: mov rsi, [r12]; lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3a8: mov rsi, [r12]; lea rdi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000428ad: mov rsi, [r13]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+0x8]; call rax; 
0x0000000013f6ca: mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x00000000086e9a: mov rsi, [rax+0x10]; mov rdi, [rax+0x8]; mov rdx, [rax+0x18]; mov eax, [rax]; syscall; 
0x00000000075507: mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000895fe: mov rsi, [rax+0x8]; mov rdx, [rax]; mov eax, 0xcb; syscall; 
0x00000000103cab: mov rsi, [rax+0x8]; test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x0000000008721a: mov rsi, [rbx+0x10]; mov rdi, [rbx+0x8]; mov rdx, [rbx+0x18]; mov eax, [rbx]; syscall; 
0x00000000139b65: mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000007c333: mov rsi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x0000000013aff4: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02e: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x00000000139c01: mov rsi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000f8a2a: mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88]; 
0x00000000103f97: mov rsi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12; 
0x000000000b4563: mov rsi, [rsi]; mov [rdi+rdx-0x8], rcx; mov [rdi], rsi; ret; 
0x0000000017ba06: mov rsi, [rsi]; mov rcx, [rcx-0x8]; mov [rdi], rsi; mov [r9-0x8], rcx; ret; 
0x0000000013941d: mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000010b0c3: mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+0x8]; syscall; 
0x00000000093fe3: mov rsi, [rsp+0x10]; mov eax, 0xf3; mov edi, [rsp+0x8]; syscall; 
0x000000000f9bf3: mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x000000000fe022: mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010aea6: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e6: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x000000000ff28a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x13; syscall; 
0x000000000ff32a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x14; syscall; 
0x000000000f9d6c: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x1; syscall; 
0x0000000010a8fa: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2e; syscall; 
0x0000000010a79a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2f; syscall; 
0x000000000f9ccc: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0x8]; xor eax, eax; syscall; 
0x0000000010a3ec: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall; 
0x00000000044a5b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x13e; syscall; 
0x00000000102b2b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x1a; syscall; 
0x000000000fda2b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+0x8]; mov eax, 0x7; syscall; 
0x0000000013904d: mov rsi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x00000000083d25: mov rsi, [rsp+0x10]; mov rdi, [rsp+0x8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000426ea: mov rsi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000b5fb2: mov rsi, [rsp+0x18]; call rbx; 
0x000000000ffedc: mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall; 
0x0000000011b5b6: mov rsi, [rsp+0x18]; mov edi, [rsp+0x30]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x000000000c131f: mov rsi, [rsp+0x18]; mov rcx, r13; mov rdx, rbp; call rbx; 
0x0000000011b116: mov rsi, [rsp+0x18]; mov rdi, [rsp+0x10]; mov rdx, r12; call qword ptr [rsp+0x48]; 
0x0000000013de63: mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x000000000b653e: mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x000000000b653d: mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx; 
0x0000000002d1c8: mov rsi, [rsp+0x18]; mov rdx, [rax]; mov rax, [rsp+0x8]; call rax; 
0x000000000b622e: mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx; 
0x0000000002dce5: mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000fb9a4: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x1; call qword ptr [rbp+0x40]; 
0x000000000fbcf4: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x2; call qword ptr [rbp+0x40]; 
0x000000000fbc74: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 0x5; call qword ptr [rbp+0x40]; 
0x0000000014c9bd: mov rsi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x24]; call rax; 
0x0000000013a2a5: mov rsi, [rsp+0x2a00]; call rcx; 
0x0000000013de92: mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x0000000013e084: mov rsi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140e44: mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x000000000314f4: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x00000000070156: mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000366d0: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000003682c: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x00000000033241: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax; 
0x00000000032549: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x00000000033e7e: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000002ff8a: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309d4: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x00000000030437: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f3d: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x000000000d3785: mov rsi, [rsp+0x60]; call r12; 
0x000000000c71fb: mov rsi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp; 
0x0000000003199f: mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r14; 
0x000000000345d7: mov rsi, [rsp+0x68]; mov rdi, [rsp+0x60]; call r13; 
0x0000000011f587: mov rsi, [rsp+0x8]; call rbp; 
0x00000000109120: mov rsi, [rsp+0x8]; mov eax, 0x119; mov edi, [rsp+0x4]; syscall; 
0x000000000ff3e4: mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff494: mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x0000000010ae00: mov rsi, [rsp+0x8]; mov eax, 0x12b; mov edi, [rsp+0x4]; syscall; 
0x000000000d6817: mov rsi, [rsp+0x8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe488: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad48: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b008: mov rsi, [rsp+0x8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000109447: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fc8: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f8078: mov rsi, [rsp+0x8]; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x0000000011a154: mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x0000000010a705: mov rsi, [rsp+0x8]; syscall; 
0x0000000010a857: mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a637: mov rsi, [rsp+0x8]; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000130d0d: mov rsi, [rsp+0x98]; mov rdi, [rsp+0x90]; call qword ptr [rsp+0x30]; 
0x000000000940a1: mov rsi, [rsp]; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000001095a9: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000010a4b9: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000006dcee: mov rsi, [rsp]; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000072fba: mov rsi, [rsp]; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x000000000788d1: mov rsi, r12; call qword ptr [r14+0x38]; 
0x000000000d5ef3: mov rsi, r12; call qword ptr [rsp+0x38]; 
0x0000000011f8f5: mov rsi, r12; call qword ptr [rsp+0x58]; 
0x000000000423fc: mov rsi, r12; call rbx; 
0x00000000092e2f: mov rsi, r12; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000002d2a7: mov rsi, r12; mov edi, ebp; add rax, [r15]; call rax; 
0x0000000002d2fe: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000002d25c: mov rsi, r12; mov edi, ebp; call r15; 
0x0000000009419b: mov rsi, r12; mov edi, ebp; mov eax, 0xde; syscall; 
0x000000000d2180: mov rsi, r12; mov edi, ebp; mov eax, 0xe5; syscall; 
0x0000000013de7b: mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000042566: mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000131f50: mov rsi, r12; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x00000000131f51: mov rsi, r12; mov rdi, r14; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000006d32b: mov rsi, r12; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006c426: mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000010465d: mov rsi, r12; mov rdi, r14; call r13; 
0x00000000130f48: mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx; 
0x000000001045d0: mov rsi, r12; mov rdi, r15; call r13; 
0x00000000042423: mov rsi, r12; mov rdi, r15; call rbx; 
0x00000000080b22: mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000007339a: mov rsi, r12; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x000000000816a1: mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80]; 
0x0000000006b673: mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013b3e6: mov rsi, r12; mov rdi, rbp; call qword ptr [rax]; 
0x000000000742d1: mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000007412a: mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000013be9b: mov rsi, r12; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x000000000f91e2: mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall; 
0x0000000014590d: mov rsi, r12; mov rdi, rbx; call rcx; 
0x00000000130b88: mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10; 
0x0000000014c80d: mov rsi, r12; xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000042a2c: mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx; 
0x00000000042a2d: mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx; 
0x000000000809be: mov rsi, r13; call qword ptr [r14+0x38]; 
0x00000000139169: mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000013bdb3: mov rsi, r13; call qword ptr [rbp+0x40]; 
0x000000000f8ad2: mov rsi, r13; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000111d52: mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000010b6c1: mov rsi, r13; mov edi, r12d; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x000000000fb51a: mov rsi, r13; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000139177: mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000004284c: mov rsi, r13; mov rdi, r12; call rax; 
0x0000000004284d: mov rsi, r13; mov rdi, r12; call rax; 
0x00000000057499: mov rsi, r13; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x00000000071c38: mov rsi, r13; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006c8e5: mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc30: mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000078175: mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x000000000781da: mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000006e15e: mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000139024: mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000006f6ea: mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006f6e9: mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e334: mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000006e335: mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000081c07: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000104f48: mov rsi, r13; xor edi, edi; mov eax, ebx; syscall; 
0x00000000139115: mov rsi, r14; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x00000000141ad1: mov rsi, r14; call qword ptr [rax]; 
0x0000000013bc88: mov rsi, r14; call qword ptr [rbp+0x40]; 
0x0000000009a194: mov rsi, r14; call rax; 
0x000000000f87ce: mov rsi, r14; mov edi, 0x2; mov eax, 0xe; syscall; 
0x000000000ff5af: mov rsi, r14; mov edi, ebp; mov eax, 0x147; syscall; 
0x000000000ff71f: mov rsi, r14; mov edi, ebp; mov eax, 0x148; syscall; 
0x000000000ffd18: mov rsi, r14; mov edi, r12d; mov eax, 0x10e; syscall; 
0x0000000013a340: mov rsi, r14; mov rdi, [rsp+0x2a00]; rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x000000001447fb: mov rsi, r14; mov rdi, r12; call r13; 
0x0000000004243e: mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000130a2d: mov rsi, r14; mov rdi, r15; mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x0000000006e0ad: mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000077a39: mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000011c70b: mov rsi, r14; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x00000000042303: mov rsi, r15; call r14; 
0x000000000c6ff8: mov rsi, r15; call rax; 
0x00000000092c7e: mov rsi, r15; mov ebx, eax; mov edi, 0x2; mov eax, r14d; syscall; 
0x00000000111b2e: mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28]; 
0x0000000011f948: mov rsi, r15; mov rdi, r12; call rbp; 
0x000000000424e8: mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx; 
0x0000000006cc2d: mov rsi, r15; mov rdi, r14; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719bd: mov rsi, r15; mov rdi, r14; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x00000000081b11: mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40]; 
0x000000000c6cb7: mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000902c7: mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000fc121: mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x00000000108af7: mov rsi, r8; mov rdi, rbp; call r12; 
0x00000000044add: mov rsi, r8; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x000000001136c1: mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000fe6d5: mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000010b731: mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall; 
0x0000000006f028: mov rsi, r9; mov rdi, rbp; call qword ptr [r13+0x38]; 
0x0000000006e634: mov rsi, r9; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000014bcde: mov rsi, rax; shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x00000000080dce: mov rsi, rbp; call qword ptr [r12+0x78]; 
0x00000000080dcd: mov rsi, rbp; call qword ptr [r12+0x78]; 
0x00000000143043: mov rsi, rbp; call qword ptr [rax+0x18]; 
0x0000000013b761: mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x000000000d4712: mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x0000000009a08b: mov rsi, rbp; call rax; 
0x00000000111107: mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000f9a28: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000093d09: mov rsi, rbp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x00000000093d0a: mov rsi, rbp; mov edi, r13d; mov eax, 0xf4; syscall; 
0x000000000f9a92: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000139039: mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000013e031: mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x00000000119089: mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x0000000007ccc1: mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80]; 
0x00000000081de6: mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000007750f: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d8b: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x0000000007998e: mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000078db5: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x0000000013bf56: mov rsi, rbp; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x00000000142216: mov rsi, rbx; call qword ptr [rsp+0x18]; 
0x00000000112e23: mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000089f88: mov rsi, rbx; mov edi, 0x2; mov eax, 0xe; syscall; 
0x0000000007fdc3: mov rsi, rbx; mov edi, 0x2; mov eax, r10d; syscall; 
0x00000000041ee7: mov rsi, rbx; mov r8d, eax; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000140e30: mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000013f1d4: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000142de4: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x0000000011f021: mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x18]; 
0x000000000c7530: mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x0000000014c2b7: mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000013e6c9: mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000055753: mov rsi, rdx; add rsp, 0x20; sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x000000001144d7: mov rsi, rdx; call rax; 
0x000000001098b6: mov rsi, rdx; cmp r8d, 0x1; ja short 0x00000000001098e8; mov eax, 0x4; syscall; 
0x00000000109905: mov rsi, rdx; cmp r8d, 0x1; ja short 0x0000000000109938; mov eax, 0x5; syscall; 
0x00000000109956: mov rsi, rdx; cmp r8d, 0x1; ja short 0x0000000000109988; mov eax, 0x6; syscall; 
0x000000000c6bb3: mov rsi, rdx; mov [rsp+0x58], r12; mov rdi, rbp; call rbx; 
0x0000000013e6e9: mov rsi, rdx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x00000000140b19: mov rsi, rdx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000140289: mov rsi, rdx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x0000000013db99: mov rsi, rdx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x00000000101430: mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x00000000144af4: mov rsi, rsp; call qword ptr [rax]; 
0x0000000013b40b: mov rsi, rsp; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000142cc0: mov rsi, rsp; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; mov dword ptr [rsp+0x20], 0x5; call qword ptr [rax+0x18]; 
0x00000000142c8c: mov rsi, rsp; mov dword ptr [rsp+0x8], 0x1; mov dword ptr [rsp+0x10], 0x1; mov dword ptr [rsp+0x18], 0x1; call qword ptr [rax+0x18]; 
0x000000000767b0: mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90]; 
0x00000000080f49: mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x000000000412b8: mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000d75c6: mov rsp, rbx; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000017ba2b: mov si, [rsi]; mov cx, [rcx-0x2]; mov [rdi], si; mov [r9-0x2], cx; ret; 
0x00000000093f74: mov ss, [rip+0x64d8f700]; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000406c4: movapd xmm0, xmm1; ret; 
0x00000000151fe6: movaps [rdi+0x10], xmm3; jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x00000000152136: movaps [rdi+0x10], xmm3; jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x00000000152286: movaps [rdi+0x10], xmm3; jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x000000001523d6: movaps [rdi+0x10], xmm3; jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x00000000152526: movaps [rdi+0x10], xmm3; jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x00000000152676: movaps [rdi+0x10], xmm3; jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x000000001527c6: movaps [rdi+0x10], xmm3; jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x00000000152916: movaps [rdi+0x10], xmm3; jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x00000000152a66: movaps [rdi+0x10], xmm3; jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152bb6: movaps [rdi+0x10], xmm3; jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152d06: movaps [rdi+0x10], xmm3; jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152e56: movaps [rdi+0x10], xmm3; jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152fa6: movaps [rdi+0x10], xmm3; jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x000000001530f6: movaps [rdi+0x10], xmm3; jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x00000000153246: movaps [rdi+0x10], xmm3; jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x000000001549b6: movaps [rdi+0x10], xmm3; jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x00000000154b06: movaps [rdi+0x10], xmm3; jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154c56: movaps [rdi+0x10], xmm3; jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154da6: movaps [rdi+0x10], xmm3; jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154ef6: movaps [rdi+0x10], xmm3; jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000155046: movaps [rdi+0x10], xmm3; jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x00000000155196: movaps [rdi+0x10], xmm3; jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001552e6: movaps [rdi+0x10], xmm3; jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x00000000155436: movaps [rdi+0x10], xmm3; jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x00000000155586: movaps [rdi+0x10], xmm3; jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x000000001556d6: movaps [rdi+0x10], xmm3; jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x00000000155826: movaps [rdi+0x10], xmm3; jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x00000000155976: movaps [rdi+0x10], xmm3; jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x00000000155ac6: movaps [rdi+0x10], xmm3; jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155c16: movaps [rdi+0x10], xmm3; jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x00000000151f42: movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151f3e: movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151f38: movaps [rdi-0x30], xmm3; jb short 0x0000000000151f4b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152088: movaps [rdi-0x30], xmm3; jb short 0x000000000015209b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001521d8: movaps [rdi-0x30], xmm3; jb short 0x00000000001521eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152328: movaps [rdi-0x30], xmm3; jb short 0x000000000015233b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152478: movaps [rdi-0x30], xmm3; jb short 0x000000000015248b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001525c8: movaps [rdi-0x30], xmm3; jb short 0x00000000001525db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152718: movaps [rdi-0x30], xmm3; jb short 0x000000000015272b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152866: movaps [rdi-0x30], xmm3; jb short 0x0000000000152880; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001529b8: movaps [rdi-0x30], xmm3; jb short 0x00000000001529cb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152b08: movaps [rdi-0x30], xmm3; jb short 0x0000000000152b1b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152c58: movaps [rdi-0x30], xmm3; jb short 0x0000000000152c6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152da8: movaps [rdi-0x30], xmm3; jb short 0x0000000000152dbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152ef8: movaps [rdi-0x30], xmm3; jb short 0x0000000000152f0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000153048: movaps [rdi-0x30], xmm3; jb short 0x000000000015305b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000153198: movaps [rdi-0x30], xmm3; jb short 0x00000000001531ab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154908: movaps [rdi-0x30], xmm3; jb short 0x000000000015491b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154a58: movaps [rdi-0x30], xmm3; jb short 0x0000000000154a6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154ba8: movaps [rdi-0x30], xmm3; jb short 0x0000000000154bbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154cf8: movaps [rdi-0x30], xmm3; jb short 0x0000000000154d0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154e48: movaps [rdi-0x30], xmm3; jb short 0x0000000000154e5b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154f98: movaps [rdi-0x30], xmm3; jb short 0x0000000000154fab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001550e8: movaps [rdi-0x30], xmm3; jb short 0x00000000001550fb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155236: movaps [rdi-0x30], xmm3; jb short 0x0000000000155250; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155388: movaps [rdi-0x30], xmm3; jb short 0x000000000015539b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001554d8: movaps [rdi-0x30], xmm3; jb short 0x00000000001554eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155628: movaps [rdi-0x30], xmm3; jb short 0x000000000015563b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155778: movaps [rdi-0x30], xmm3; jb short 0x000000000015578b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001558c8: movaps [rdi-0x30], xmm3; jb short 0x00000000001558db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155a18: movaps [rdi-0x30], xmm3; jb short 0x0000000000155a2b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155b68: movaps [rdi-0x30], xmm3; jb short 0x0000000000155b7b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151fec: movaps [rdi], xmm4; jmp r9; 
0x000000000406c5: movaps xmm0, xmm1; ret; 
0x00000000151eda: movaps xmm1, [rsi-0x1]; jb short 0x0000000000151ee7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000151f8a: movaps xmm1, [rsi-0x1]; jb short 0x0000000000151f97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001548aa: movaps xmm1, [rsi-0x1]; jb short 0x00000000001548b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015495a: movaps xmm1, [rsi-0x1]; jb short 0x0000000000154967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015202a: movaps xmm1, [rsi-0x2]; jb short 0x0000000000152037; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001520da: movaps xmm1, [rsi-0x2]; jb short 0x00000000001520e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001549fa: movaps xmm1, [rsi-0x2]; jb short 0x0000000000154a07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154aaa: movaps xmm1, [rsi-0x2]; jb short 0x0000000000154ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015217a: movaps xmm1, [rsi-0x3]; jb short 0x0000000000152187; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015222a: movaps xmm1, [rsi-0x3]; jb short 0x0000000000152237; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154b4a: movaps xmm1, [rsi-0x3]; jb short 0x0000000000154b57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154bfa: movaps xmm1, [rsi-0x3]; jb short 0x0000000000154c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001522ca: movaps xmm1, [rsi-0x4]; jb short 0x00000000001522d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015237a: movaps xmm1, [rsi-0x4]; jb short 0x0000000000152387; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154c9a: movaps xmm1, [rsi-0x4]; jb short 0x0000000000154ca7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154d4a: movaps xmm1, [rsi-0x4]; jb short 0x0000000000154d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015241a: movaps xmm1, [rsi-0x5]; jb short 0x0000000000152427; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001524ca: movaps xmm1, [rsi-0x5]; jb short 0x00000000001524d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154dea: movaps xmm1, [rsi-0x5]; jb short 0x0000000000154df7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154e9a: movaps xmm1, [rsi-0x5]; jb short 0x0000000000154ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015256a: movaps xmm1, [rsi-0x6]; jb short 0x0000000000152577; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015261a: movaps xmm1, [rsi-0x6]; jb short 0x0000000000152627; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154f3a: movaps xmm1, [rsi-0x6]; jb short 0x0000000000154f47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154fea: movaps xmm1, [rsi-0x6]; jb short 0x0000000000154ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001526ba: movaps xmm1, [rsi-0x7]; jb short 0x00000000001526c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015276a: movaps xmm1, [rsi-0x7]; jb short 0x0000000000152777; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015508a: movaps xmm1, [rsi-0x7]; jb short 0x0000000000155097; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015513a: movaps xmm1, [rsi-0x7]; jb short 0x0000000000155147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015280a: movaps xmm1, [rsi-0x8]; jb short 0x0000000000152817; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001528ba: movaps xmm1, [rsi-0x8]; jb short 0x00000000001528c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001551da: movaps xmm1, [rsi-0x8]; jb short 0x00000000001551e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015528a: movaps xmm1, [rsi-0x8]; jb short 0x0000000000155297; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015295a: movaps xmm1, [rsi-0x9]; jb short 0x0000000000152967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152a0a: movaps xmm1, [rsi-0x9]; jb short 0x0000000000152a17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015532a: movaps xmm1, [rsi-0x9]; jb short 0x0000000000155337; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001553da: movaps xmm1, [rsi-0x9]; jb short 0x00000000001553e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152aaa: movaps xmm1, [rsi-0xa]; jb short 0x0000000000152ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152b5a: movaps xmm1, [rsi-0xa]; jb short 0x0000000000152b67; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015547a: movaps xmm1, [rsi-0xa]; jb short 0x0000000000155487; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015552a: movaps xmm1, [rsi-0xa]; jb short 0x0000000000155537; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152bfa: movaps xmm1, [rsi-0xb]; jb short 0x0000000000152c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152caa: movaps xmm1, [rsi-0xb]; jb short 0x0000000000152cb7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001555ca: movaps xmm1, [rsi-0xb]; jb short 0x00000000001555d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015567a: movaps xmm1, [rsi-0xb]; jb short 0x0000000000155687; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152d4a: movaps xmm1, [rsi-0xc]; jb short 0x0000000000152d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152dfa: movaps xmm1, [rsi-0xc]; jb short 0x0000000000152e07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015571a: movaps xmm1, [rsi-0xc]; jb short 0x0000000000155727; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001557ca: movaps xmm1, [rsi-0xc]; jb short 0x00000000001557d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152e9a: movaps xmm1, [rsi-0xd]; jb short 0x0000000000152ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152f4a: movaps xmm1, [rsi-0xd]; jb short 0x0000000000152f57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015586a: movaps xmm1, [rsi-0xd]; jb short 0x0000000000155877; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015591a: movaps xmm1, [rsi-0xd]; jb short 0x0000000000155927; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152fea: movaps xmm1, [rsi-0xe]; jb short 0x0000000000152ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015309a: movaps xmm1, [rsi-0xe]; jb short 0x00000000001530a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001559ba: movaps xmm1, [rsi-0xe]; jb short 0x00000000001559c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155a6a: movaps xmm1, [rsi-0xe]; jb short 0x0000000000155a77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015313a: movaps xmm1, [rsi-0xf]; jb short 0x0000000000153147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001531ea: movaps xmm1, [rsi-0xf]; jb short 0x00000000001531f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155b0a: movaps xmm1, [rsi-0xf]; jb short 0x0000000000155b17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155bba: movaps xmm1, [rsi-0xf]; jb short 0x0000000000155bc7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000004048c: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000406aa: movd mm0, eax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x0000000004072b: movd mm0, eax; ret; 
0x000000000409a6: movd mm0, ecx; andps xmm0, [rip+0x178770]; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040981: movd mm0, ecx; andps xmm0, [rip+0x178795]; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x00000000040602: movd mm0, ecx; ret; 
0x000000000409ff: movd mm0, edi; mulss xmm0, [rip+0x17907e]; ret; 
0x0000000004052c: movd mm0, edx; ret; 
0x000000000408c4: movd mm0, esi; ret; 
0x00000000040578: movd mm1, eax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x000000000408d5: movd mm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret; 
0x00000000040a77: movd xmm0, eax; ret; 
0x000000000409a4: movd xmm0, ecx; andps xmm0, [rip+0x178770]; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040980: movd xmm0, ecx; andps xmm0, [rip+0x178795]; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000409fe: movd xmm0, edi; mulss xmm0, [rip+0x17907e]; ret; 
0x000000000408c3: movd xmm0, esi; ret; 
0x000000000408d4: movd xmm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret; 
0x0000000005523b: movdqa xmm0, [rsp-0x18]; ret; 
0x00000000040fa1: movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000410ea: movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000041060: movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000041058: movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000155c2a: movdqu [r8], xmm0; lea r11, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155ada: movdqu [r8], xmm0; lea r11, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015598a: movdqu [r8], xmm0; lea r11, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015583a: movdqu [r8], xmm0; lea r11, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556ea: movdqu [r8], xmm0; lea r11, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015559a: movdqu [r8], xmm0; lea r11, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015544a: movdqu [r8], xmm0; lea r11, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001552fa: movdqu [r8], xmm0; lea r11, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155262: movdqu [r8], xmm0; lea r11, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551aa: movdqu [r8], xmm0; lea r11, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015505a: movdqu [r8], xmm0; lea r11, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f0a: movdqu [r8], xmm0; lea r11, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dba: movdqu [r8], xmm0; lea r11, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c6a: movdqu [r8], xmm0; lea r11, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b1a: movdqu [r8], xmm0; lea r11, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549ca: movdqu [r8], xmm0; lea r11, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015325a: movdqu [r8], xmm0; lea r11, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015310a: movdqu [r8], xmm0; lea r11, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fba: movdqu [r8], xmm0; lea r11, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e6a: movdqu [r8], xmm0; lea r11, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d1a: movdqu [r8], xmm0; lea r11, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bca: movdqu [r8], xmm0; lea r11, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a7a: movdqu [r8], xmm0; lea r11, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015292a: movdqu [r8], xmm0; lea r11, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152892: movdqu [r8], xmm0; lea r11, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527da: movdqu [r8], xmm0; lea r11, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015268a: movdqu [r8], xmm0; lea r11, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015253a: movdqu [r8], xmm0; lea r11, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523ea: movdqu [r8], xmm0; lea r11, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015229a: movdqu [r8], xmm0; lea r11, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015214a: movdqu [r8], xmm0; lea r11, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ffa: movdqu [r8], xmm0; lea r11, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b4bfe: movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bf8: movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bf2: movdqu [rax+rdx-0x30], xmm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bec: movdqu [rax+rdx-0x40], xmm0; movdqu [rax+rdx-0x30], xmm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x00000000159331: movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b11cd: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b202d: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000b0830: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000b3c80: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000afb3d: movdqu [rdi+0x10], xmm2; ret; 
0x000000000b051d: movdqu [rdi+0x10], xmm2; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b3c5d: movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000001599af: movdqu [rdi+0x1], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000b0a64: movdqu [rdi+0x20], xmm6; sub r8, 0x10; jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x0000000015993f: movdqu [rdi+0x2], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000b2293: movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x000000000b0a73: movdqu [rdi+0x30], xmm7; ret; 
0x000000000b3cd3: movdqu [rdi+0x30], xmm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000001598cf: movdqu [rdi+0x3], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015985f: movdqu [rdi+0x4], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001597ef: movdqu [rdi+0x5], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015977f: movdqu [rdi+0x6], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015970f: movdqu [rdi+0x7], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015969f: movdqu [rdi+0x8], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015962f: movdqu [rdi+0x9], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001595bf: movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015954f: movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret; 
0x000000001594df: movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret; 
0x0000000015946f: movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000b116d: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fcd: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afadd: movdqu [rdi+0xd], xmm2; ret; 
0x000000000b048d: movdqu [rdi+0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b3bfd: movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000001593ff: movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000b118d: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fed: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afafd: movdqu [rdi+0xe], xmm2; ret; 
0x000000000b04bd: movdqu [rdi+0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b3c1d: movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x0000000015938f: movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000b11ad: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b200d: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb1d: movdqu [rdi+0xf], xmm2; ret; 
0x000000000b04ed: movdqu [rdi+0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b3c3d: movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000b4af8: movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret; 
0x000000000b4b9e: movdqu [rdi+rdx-0x10], xmm0; ret; 
0x000000000b4b98: movdqu [rdi+rdx-0x20], xmm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x00000000158b1b: movdqu [rdi-0x10], xmm0; ret; 
0x00000000158b8b: movdqu [rdi-0x10], xmm1; ret; 
0x000000001592c6: movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159246: movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001591b6: movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159136: movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001590b6: movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159036: movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158fb6: movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158f36: movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158eb6: movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000000b0930: movdqu [rdi-0x1], xmm0; ret; 
0x00000000158e36: movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158db6: movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158d36: movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158ca6: movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158c16: movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b86: movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b11: movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000000b1e34: movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fe4: movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000b1e47: movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b0657: movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000b3a77: movdqu [rdi], xmm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000b1008: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e68: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af998: movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000b3a98: movdqu [rdi], xmm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b0ff4: movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000af984: movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000b1047: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000b1067: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000af9d7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000b1eca: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000b06aa: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000af9c7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000b3ad7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000b10c8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f28: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000b10e8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000afa58: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa38: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000b3b58: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b112b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f8b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000afa9b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b1f4b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b072b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b110c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f6c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000afa7c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b114b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1fab: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000afabb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b1088: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b1ee8: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000af9f8: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000b3b18: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b1027: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b1e87: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000af9b7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000b3ab7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000b10a8: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f08: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000afa18: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000b3b38: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000b11c9: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b2029: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000b082c: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000afb39: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b3c59: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000b1169: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fc9: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afad9: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b3bf9: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000b1189: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fe9: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afaf9: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b3c19: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000b11a9: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b2009: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb19: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b3c39: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000af974: movdqu [rdi], xmm0; ret; 
0x000000000b02a4: movdqu [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b3a64: movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x00000000159394: movdqu [rdi], xmm1; ret; 
0x00000000140328: movdqu xmm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x00000000140b80: movdqu xmm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x00000000140264: movdqu xmm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000140af4: movdqu xmm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000013db74: movdqu xmm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000013dc48: movdqu xmm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x000000000b0650: movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000af990: movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000af9c0: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000af9b0: movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000afa30: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000af9f0: movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000afa10: movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000b1e30: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fe0: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000b0ff0: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000af980: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000af970: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b3a60: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000afb30: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000afad0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000afaf0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000afb10: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000001233db: movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x0000000013dc58: movdqu xmm1, [r8+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x00000000140b90: movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000140340: movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000140bb0: movdqu xmm2, [r8]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x00000000140350: movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [r8], xmm2; ret; 
0x00000000123461: movdqu xmm2, [rdi+r9+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000b11c4: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b2024: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000afb34: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b1164: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fc4: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afad4: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b1184: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fe4: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afaf4: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b11a4: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b2004: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb14: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x00000000140bc0: movdqu xmm3, [rdi+0x20]; mov eax, 0x1; movups [r8], xmm3; ret; 
0x00000000133a70: movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000140ba0: movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm4; ret; 
0x000000000f8537: movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e49: movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8587: movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8ed9: movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000087800: movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x000000000f8540: movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e55: movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8590: movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8ee5: movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000ac572: movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac592: movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5b2: movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000ac3fc: movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af1e3: movlpd [rdx+0x8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000ac4e9: movlpd [rdx], xmm0; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000ac509: movlpd [rdx], xmm0; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000ac529: movlpd [rdx], xmm0; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000ac549: movlpd [rdx], xmm0; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000ac3a6: movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac3f8: movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac569: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac589: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5a9: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0f9: movlpd [rdx], xmm0; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af17a: movlpd [rdx], xmm0; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000ac3a2: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac56d: movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58d: movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5ad: movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0fd: movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac3f3: movlpd xmm1, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac573: movlps [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac593: movlps [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5b3: movlps [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000ac3fd: movlps [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af1e4: movlps [rdx+0x8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000ac4ea: movlps [rdx], xmm0; mov al, [rcx+0x8]; mov [rdx+0x8], al; mov rax, rdi; ret; 
0x000000000ac50a: movlps [rdx], xmm0; mov ax, [rcx+0x8]; mov [rdx+0x8], ax; mov rax, rdi; ret; 
0x000000000ac52a: movlps [rdx], xmm0; mov eax, [rcx+0x7]; mov [rdx+0x7], eax; mov rax, rdi; ret; 
0x000000000ac54a: movlps [rdx], xmm0; mov eax, [rcx+0x8]; mov [rdx+0x8], eax; mov rax, rdi; ret; 
0x000000000ac3a7: movlps [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac3f9: movlps [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac56a: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58a: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5aa: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0fa: movlps [rdx], xmm0; movlpd xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af17b: movlps [rdx], xmm0; xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x000000000ac3a3: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac56e: movlps xmm1, [rcx+0x5]; movlpd [rdx+0x5], xmm1; mov rax, rdi; ret; 
0x000000000ac58e: movlps xmm1, [rcx+0x6]; movlpd [rdx+0x6], xmm1; mov rax, rdi; ret; 
0x000000000ac5ae: movlps xmm1, [rcx+0x7]; movlpd [rdx+0x7], xmm1; mov rax, rdi; ret; 
0x000000000af0fe: movlps xmm1, [rcx+0x8]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000ac3f4: movlps xmm1, [rcx+0x8]; movlpd [rdx], xmm0; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x00000000040fd0: movmskps eax, xmm0; and eax, 0x8; ret; 
0x0000000017c4c1: movnti [r14+0x66], r12d; nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x000000000af9bc: movnti [r8+0x66f0ff3], r10; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000af9bd: movnti [rax+0x66f0ff3], edx; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x0000000017c4c2: movnti [rsi+0x66], esp; nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x00000000155c2c: movq [r8], mm0; lea r11, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155adc: movq [r8], mm0; lea r11, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015598c: movq [r8], mm0; lea r11, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015583c: movq [r8], mm0; lea r11, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556ec: movq [r8], mm0; lea r11, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015559c: movq [r8], mm0; lea r11, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015544c: movq [r8], mm0; lea r11, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001552fc: movq [r8], mm0; lea r11, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155263: movq [r8], mm0; lea r11, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551ac: movq [r8], mm0; lea r11, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015505c: movq [r8], mm0; lea r11, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f0c: movq [r8], mm0; lea r11, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dbc: movq [r8], mm0; lea r11, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c6c: movq [r8], mm0; lea r11, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b1c: movq [r8], mm0; lea r11, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549cc: movq [r8], mm0; lea r11, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015325c: movq [r8], mm0; lea r11, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015310c: movq [r8], mm0; lea r11, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fbc: movq [r8], mm0; lea r11, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e6c: movq [r8], mm0; lea r11, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d1c: movq [r8], mm0; lea r11, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bcc: movq [r8], mm0; lea r11, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a7c: movq [r8], mm0; lea r11, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015292c: movq [r8], mm0; lea r11, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152893: movq [r8], mm0; lea r11, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527dc: movq [r8], mm0; lea r11, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015268c: movq [r8], mm0; lea r11, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015253c: movq [r8], mm0; lea r11, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523ec: movq [r8], mm0; lea r11, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015229c: movq [r8], mm0; lea r11, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015214c: movq [r8], mm0; lea r11, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ffc: movq [r8], mm0; lea r11, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b4bff: movq [rax+rdx-0x10], mm0; rep ret; 
0x000000000b4bf9: movq [rax+rdx-0x20], mm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bf3: movq [rax+rdx-0x30], mm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x000000000b4bed: movq [rax+rdx-0x40], mm0; movdqu [rax+rdx-0x30], xmm0; movdqu [rax+rdx-0x20], xmm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x00000000155c2d: movq [rax], mm0; lea r11, [rip+0x64409]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155add: movq [rax], mm0; lea r11, [rip+0x64559]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015598d: movq [rax], mm0; lea r11, [rip+0x646a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015583d: movq [rax], mm0; lea r11, [rip+0x647f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556ed: movq [rax], mm0; lea r11, [rip+0x64949]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015559d: movq [rax], mm0; lea r11, [rip+0x64a99]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015544d: movq [rax], mm0; lea r11, [rip+0x64be9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001552fd: movq [rax], mm0; lea r11, [rip+0x64d39]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155264: movq [rax], mm0; lea r11, [rip+0x64dd2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551ad: movq [rax], mm0; lea r11, [rip+0x64e89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015505d: movq [rax], mm0; lea r11, [rip+0x64fd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f0d: movq [rax], mm0; lea r11, [rip+0x65129]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dbd: movq [rax], mm0; lea r11, [rip+0x65279]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c6d: movq [rax], mm0; lea r11, [rip+0x653c9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b1d: movq [rax], mm0; lea r11, [rip+0x65519]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549cd: movq [rax], mm0; lea r11, [rip+0x65669]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015325d: movq [rax], mm0; lea r11, [rip+0x66c19]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015310d: movq [rax], mm0; lea r11, [rip+0x66d69]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fbd: movq [rax], mm0; lea r11, [rip+0x66eb9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e6d: movq [rax], mm0; lea r11, [rip+0x67009]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d1d: movq [rax], mm0; lea r11, [rip+0x67159]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bcd: movq [rax], mm0; lea r11, [rip+0x672a9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a7d: movq [rax], mm0; lea r11, [rip+0x673f9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015292d: movq [rax], mm0; lea r11, [rip+0x67549]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152894: movq [rax], mm0; lea r11, [rip+0x675e2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527dd: movq [rax], mm0; lea r11, [rip+0x67699]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015268d: movq [rax], mm0; lea r11, [rip+0x677e9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015253d: movq [rax], mm0; lea r11, [rip+0x67939]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523ed: movq [rax], mm0; lea r11, [rip+0x67a89]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015229d: movq [rax], mm0; lea r11, [rip+0x67bd9]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015214d: movq [rax], mm0; lea r11, [rip+0x67d29]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ffd: movq [rax], mm0; lea r11, [rip+0x67e79]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159332: movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b11ce: movq [rdi+0x10], mm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b202e: movq [rdi+0x10], mm2; lea rax, [rdi+0x20]; ret; 
0x000000000b0831: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; ret; 
0x000000000b3c81: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000afb3e: movq [rdi+0x10], mm2; ret; 
0x000000000b051e: movq [rdi+0x10], mm2; sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b3c5e: movq [rdi+0x10], mm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000001599b0: movq [rdi+0x1], mm0; movdqu [rdi], xmm1; ret; 
0x000000000b0a65: movq [rdi+0x20], mm6; sub r8, 0x10; jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x00000000159940: movq [rdi+0x2], mm0; movdqu [rdi], xmm1; ret; 
0x000000000b2294: movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret; 
0x000000000b0a74: movq [rdi+0x30], mm7; ret; 
0x000000000b3cd4: movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000001598d0: movq [rdi+0x3], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159860: movq [rdi+0x4], mm0; movdqu [rdi], xmm1; ret; 
0x000000001597f0: movq [rdi+0x5], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159780: movq [rdi+0x6], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159710: movq [rdi+0x7], mm0; movdqu [rdi], xmm1; ret; 
0x000000001596a0: movq [rdi+0x8], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159630: movq [rdi+0x9], mm0; movdqu [rdi], xmm1; ret; 
0x000000001595c0: movq [rdi+0xa], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159550: movq [rdi+0xb], mm0; movdqu [rdi], xmm1; ret; 
0x000000001594e0: movq [rdi+0xc], mm0; movdqu [rdi], xmm1; ret; 
0x00000000159470: movq [rdi+0xd], mm0; movdqu [rdi], xmm1; ret; 
0x000000000b116e: movq [rdi+0xd], mm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fce: movq [rdi+0xd], mm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afade: movq [rdi+0xd], mm2; ret; 
0x000000000b048e: movq [rdi+0xd], mm2; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b3bfe: movq [rdi+0xd], mm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x00000000159400: movq [rdi+0xe], mm0; movdqu [rdi], xmm1; ret; 
0x000000000b118e: movq [rdi+0xe], mm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fee: movq [rdi+0xe], mm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afafe: movq [rdi+0xe], mm2; ret; 
0x000000000b04be: movq [rdi+0xe], mm2; sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b3c1e: movq [rdi+0xe], mm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x00000000159390: movq [rdi+0xf], mm0; movdqu [rdi], xmm1; ret; 
0x000000000b11ae: movq [rdi+0xf], mm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b200e: movq [rdi+0xf], mm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb1e: movq [rdi+0xf], mm2; ret; 
0x000000000b04ee: movq [rdi+0xf], mm2; sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b3c3e: movq [rdi+0xf], mm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000b4af9: movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x000000000b4b9f: movq [rdi+rdx-0x10], mm0; ret; 
0x000000000b4b99: movq [rdi+rdx-0x20], mm0; movdqu [rdi+rdx-0x10], xmm0; ret; 
0x00000000158b1c: movq [rdi-0x10], mm0; ret; 
0x00000000158b8c: movq [rdi-0x10], mm1; ret; 
0x000000001592c7: movq [rdi-0x11], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159247: movq [rdi-0x12], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001591b7: movq [rdi-0x13], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159137: movq [rdi-0x14], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000001590b7: movq [rdi-0x15], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000159037: movq [rdi-0x16], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158fb7: movq [rdi-0x17], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158f37: movq [rdi-0x18], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158eb7: movq [rdi-0x19], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x000000000b0931: movq [rdi-0x1], mm0; ret; 
0x00000000158e37: movq [rdi-0x1a], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158db7: movq [rdi-0x1b], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158d37: movq [rdi-0x1c], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158ca7: movq [rdi-0x1d], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158c17: movq [rdi-0x1e], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b87: movq [rdi-0x1f], mm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000158b12: movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret; 
0x000000000b1e35: movq [rdi], mm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fe5: movq [rdi], mm0; lea rax, [rdi+0xf]; ret; 
0x000000000b1e48: movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret; 
0x000000000b0658: movq [rdi], mm0; mov [rdi+0x10], cl; ret; 
0x000000000b3a78: movq [rdi], mm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000b1009: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret; 
0x000000000b1e69: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret; 
0x000000000af999: movq [rdi], mm0; mov [rdi+0x10], cx; ret; 
0x000000000b3a99: movq [rdi], mm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b0ff5: movq [rdi], mm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000af985: movq [rdi], mm0; mov [rdi+0x10], dh; ret; 
0x000000000b1048: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1ea8: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret; 
0x000000000b1068: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret; 
0x000000000af9d8: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret; 
0x000000000b1ecb: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret; 
0x000000000b06ab: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret; 
0x000000000af9c8: movq [rdi], mm0; mov [rdi+0x10], ecx; ret; 
0x000000000b3ad8: movq [rdi], mm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000b10c9: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b1f29: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret; 
0x000000000b10e9: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret; 
0x000000000afa59: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret; 
0x000000000afa39: movq [rdi], mm0; mov [rdi+0x10], rcx; ret; 
0x000000000b3b59: movq [rdi], mm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b112c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret; 
0x000000000b1f8c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000afa9c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret; 
0x000000000b1f4c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret; 
0x000000000b072c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000b110d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret; 
0x000000000b1f6d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret; 
0x000000000afa7d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000b114c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret; 
0x000000000b1fac: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret; 
0x000000000afabc: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b1089: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret; 
0x000000000b1ee9: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000af9f9: movq [rdi], mm0; mov [rdi+0xe], rcx; ret; 
0x000000000b3b19: movq [rdi], mm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b1028: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b1e88: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000af9b8: movq [rdi], mm0; mov [rdi+0xf], ecx; ret; 
0x000000000b3ab8: movq [rdi], mm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000b10a9: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b1f09: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000afa19: movq [rdi], mm0; mov [rdi+0xf], rcx; ret; 
0x000000000b3b39: movq [rdi], mm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000b11ca: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b202a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000b082d: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret; 
0x000000000afb3a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b3c5a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000b116a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fca: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afada: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b3bfa: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000b118a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fea: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afafa: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b3c1a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000b11aa: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b200a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb1a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b3c3a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000af975: movq [rdi], mm0; ret; 
0x000000000b02a5: movq [rdi], mm0; sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b3a65: movq [rdi], mm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x00000000159395: movq [rdi], mm1; ret; 
0x00000000140329: movq mm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x00000000140b81: movq mm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x00000000140265: movq mm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000140af5: movq mm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000013db75: movq mm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x0000000014032a: movq mm0, [rax]; mov eax, esi; mov dword ptr [rdi+0x18], 0x1; movups [rdi+0x8], xmm0; ret; 
0x00000000140b82: movq mm0, [rax]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x0000000013dc49: movq mm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x000000000b0651: movq mm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret; 
0x000000000af991: movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret; 
0x000000000af9c1: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret; 
0x000000000af9b1: movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret; 
0x000000000afa31: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret; 
0x000000000af9f1: movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret; 
0x000000000afa11: movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret; 
0x000000000b1e31: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fe1: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000b0ff1: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret; 
0x000000000af981: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x000000000af971: movq mm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x000000000b3a61: movq mm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000afb31: movq mm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000afad1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000afaf1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000afb11: movq mm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x000000001233dc: movq mm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x0000000005523c: movq mm0, [rsp-0x18]; ret; 
0x00000000040fa2: movq mm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000410eb: movq mm0, mm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000041061: movq mm0, mm2; pop rbp; ret; 
0x000000000406a9: movq mm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x0000000004072a: movq mm0, rax; ret; 
0x00000000040601: movq mm0, rcx; ret; 
0x0000000004052b: movq mm0, rdx; ret; 
0x0000000013dc59: movq mm1, [r8+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x0000000013dc5a: movq mm1, [rax+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x00000000140b91: movq mm1, [rdi+0x30]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000140341: movq mm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x00000000040577: movq mm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000140bb1: movq mm2, [r8]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x00000000140bb2: movq mm2, [rax]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x00000000140351: movq mm2, [rdi+0x1c]; mov eax, 0x1; movups [r8], xmm2; ret; 
0x00000000123462: movq mm2, [rdi+r9+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x00000000123463: movq mm2, [rdi+rcx+0x8]; movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x000000000b11c5: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b2025: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret; 
0x000000000afb35: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret; 
0x000000000b1165: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fc5: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afad5: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b1185: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000b1fe5: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000afaf5: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret; 
0x000000000b11a5: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b2005: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000afb15: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret; 
0x00000000041059: movq mm2, mm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000140bc1: movq mm3, [rdi+0x20]; mov eax, 0x1; movups [r8], xmm3; ret; 
0x00000000133a71: movq mm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000140ba1: movq mm4, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm4; ret; 
0x000000000f8538: movq mm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e4a: movq mm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8588: movq mm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8eda: movq mm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x00000000087801: movq mm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x000000000f8541: movq mm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e56: movq mm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8591: movq mm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8ee6: movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x0000000004048b: movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000004048a: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000406a8: movq xmm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x00000000040729: movq xmm0, rax; ret; 
0x00000000040600: movq xmm0, rcx; ret; 
0x0000000004052a: movq xmm0, rdx; ret; 
0x00000000040576: movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x000000000deb71: movsb [rdi], [rsi]; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000b44ca: movsb [rdi], [rsi]; cld; ret; 
0x00000000193058: movsb [rdi], [rsi]; cmp al, 0x6; add [rbp-0x17], bl; cmp bh, ch; jmp qword ptr [rsi+0xf]; 
0x0000000005bef8: movsb [rdi], [rsi]; jge short 0x000000000005bf10; add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x00000000139bf6: movsb [rdi], [rsi]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000044344: movsb [rdi], [rsi]; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000128668: movsb [rdi], [rsi]; or al, 0x0; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000009bfb4: movsb [rdi], [rsi]; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x00000000058a98: movsb [rdi], [rsi]; ret far; 
0x00000000068488: movsb [rdi], [rsi]; ret; 
0x00000000044842: movsd [rbx], xmm0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000a18de: movsd [rdi], [rsi]; adc al, 0x0; mov rax, [rax+rdi*8]; ret; 
0x00000000128ba7: movsd [rdi], [rsi]; add rsp, 0x188; ret; 
0x00000000050cd1: movsd [rdi], [rsi]; enter 0x894c, 0x7; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x0000000011f48f: movsd [rdi], [rsi]; ja short 0x000000000011f49f; add [rbx+0x507f01f8], al; add rsp, 0x8; ret; 
0x00000000050d02: movsd [rdi], [rsi]; ret; 
0x00000000040523: movsd [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000004063e: movsd xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040618: movsd xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000446c8: movsd xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000c6a28: movsd xmm0, [rsp-0x10]; ret; 
0x00000000128ba6: movsq [rdi], [rsi]; add rsp, 0x188; ret; 
0x0000000014bce5: movsq [rdi], [rsi]; ret; 
0x000000000408bf: movss [rdi], xmm0; movd xmm0, esi; ret; 
0x00000000192608: movss xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x00000000040870: movss xmm3, [rip+0x162b68]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x0000000011088f: movsx eax, bl; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000145670: movsx eax, byte ptr [rsi]; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000144d89: movsx eax, ch; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144cd1: movsx eax, word ptr [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000145590: movsx eax, word ptr [rsi]; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000000584c7: movsx ecx, dl; cmp edi, ecx; ja short 0x00000000000584b0; mov eax, r8d; ret; 
0x0000000009ad21: movsx edx, al; mov eax, edx; ret; 
0x000000000a1314: movsx edx, byte ptr [rdi+rax]; cmp edx, esi; je short 0x00000000000a1310; ret; 
0x00000000144d88: movsx rax, bpl; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000144cd0: movsx rax, word ptr [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000739cb: movsxd eax, [rax+rax*4]; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x0000000006df5f: movsxd eax, [rax+rax*4]; add rax, rsi; jmp rax; 
0x0000000010b214: movsxd eax, [rax+rcx*4]; add rax, r8; jmp rax; 
0x00000000073d7c: movsxd eax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x0000000006e6f5: movsxd eax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x00000000073c36: movsxd eax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cf9: movsxd eax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x0000000007132b: movsxd eax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x00000000083b0b: movsxd eax, [rax-0x77]; add ebx, [rbx+0x5d]; pop r12; ret; 
0x0000000010a141: movsxd eax, [rax]; add [rax], al; syscall; 
0x000000000f89d6: movsxd eax, [rbp+rax*4]; add rax, r13; jmp rax; 
0x0000000009beb9: movsxd eax, [rbp-0x72b7ffff]; add eax, 0x1861c; cmove rax, rdx; ret; 
0x000000000e9e9a: movsxd eax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x00000000073938: movsxd eax, [rbx+rax*4]; add rax, rcx; jmp rax; 
0x00000000073208: movsxd eax, [rbx+rax*4]; add rax, rdi; jmp rax; 
0x00000000072b64: movsxd eax, [rbx+rdi*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d765: movsxd eax, [rbx+rsi*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000127f5b: movsxd eax, [rcx+rax*4]; add rax, r9; jmp rax; 
0x0000000005c6c2: movsxd eax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000006e8c2: movsxd eax, [rcx+rax*4]; add rax, rsi; mov r13d, 0x1; jmp rax; 
0x000000000e2780: movsxd eax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x00000000140316: movsxd eax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x00000000131b9a: movsxd eax, [rcx+rsi*4]; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x0000000009c2d9: movsxd eax, [rcx-0x72b7ffff]; add eax, 0x1821c; cmove rax, rdx; ret; 
0x000000000c5bf9: movsxd eax, [rcx]; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x0000000013ab16: movsxd eax, [rdi+0x18]; cmp eax, 0x3; jbe short 0x000000000013ab28; mov eax, 0x2; ret; 
0x00000000073de2: movsxd eax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x0000000006503d: movsxd eax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ee25: movsxd eax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000007496b: movsxd eax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x000000000738d7: movsxd eax, [rdi+rax*4]; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b57: movsxd eax, [rdi+rax*4]; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x0000000013dc33: movsxd eax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x0000000005d2d2: movsxd eax, [rdi]; add rax, rdi; jmp rax; 
0x0000000002d788: movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000006e814: movsxd eax, [rdx+rax*4]; add rax, rsi; jmp rax; 
0x000000000d8ab4: movsxd eax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x0000000018f58e: movsxd eax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax; 
0x0000000018f379: movsxd eax, [rdx+rbx*4]; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax; 
0x000000000b4da7: movsxd eax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000d86ec: movsxd eax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x00000000164139: movsxd eax, [rdx]; add [rax], al; ret; 
0x00000000115ef9: movsxd eax, [rip-0x72b7fff9]; add eax, 0x705cc; cmove rax, rdx; ret; 
0x0000000006ebc1: movsxd eax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006c29e: movsxd eax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d08e: movsxd eax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000cfab5: movsxd eax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x0000000013b379: movsxd eax, [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013b409: movsxd eax, [rsi]; mov rsi, rsp; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000441e4: movsxd eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x000000000f5ba5: movsxd eax, [rsp+rax*4]; add rax, r12; jmp rax; 
0x0000000016f509: movsxd eax, ecx; add rax, rdi; ret; 
0x0000000016f32b: movsxd eax, ecx; ret; 
0x000000001577d9: movsxd ebp, [rsi+rax]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000395f2: movsxd ebx, [ebx]; add [rax-0x73], cl; add eax, 0x1b6303; ret; 
0x0000000008cac9: movsxd ebx, [rbp-0x74b70001]; jl short 0x000000000008caf5; or bl, ch; ret far; 
0x000000000395f3: movsxd ebx, [rbx]; add [rax-0x73], cl; add eax, 0x1b6303; ret; 
0x000000001546d9: movsxd ebx, [rcx+0x6]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000018f5d4: movsxd ebx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000003ee49: movsxd ebx, [rdi+rbx*4]; add r11, r15; jmp r11; 
0x000000001586d9: movsxd ebx, [rip+0x63490006]; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010bb7e: movsxd ebx, ebx; mov [rip+0xe1899], rbx; pop rbx; ret; 
0x0000000010bb68: movsxd ebx, ebx; mov [rip+0xe18af], rbx; pop rbx; ret; 
0x0000000007032b: movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x000000000ed1fe: movsxd ecx, [rax+rcx*4]; add rcx, r8; jmp rcx; 
0x00000000191f44: movsxd ecx, [rax-0x77]; ret far; 
0x000000001921ac: movsxd ecx, [rax-0x77]; rol dword ptr [rbp+0x31], cl; ror byte ptr [rax+0x9], cl; ret far; 
0x000000001014a8: movsxd ecx, [rbx+0xf]; add [rbx], ah; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000affab: movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000156f9c: movsxd ecx, [rbx+rcx*4]; add r9, r11; jmp r9; 
0x00000000151a1c: movsxd ecx, [rbx+rcx*4]; lea r9, [r11+r9]; jmp r9; 
0x0000000017944e: movsxd ecx, [rbx+rdx*4]; add rcx, r11; jmp rcx; 
0x000000001519b1: movsxd ecx, [rbx+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x000000000af73a: movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018f43d: movsxd ecx, [rcx+rbx*4]; add rcx, r9; jmp rcx; 
0x000000000389b9: movsxd ecx, [rdi+rcx*4]; add rcx, rdi; jmp rcx; 
0x0000000012b609: movsxd ecx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x0000000006bb90: movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000a1a92: movsxd ecx, [rdx+rcx*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000169a3e: movsxd ecx, [rdx+rcx*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c8e: movsxd ecx, [rdx+rcx*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000064948: movsxd ecx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000016f35b: movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000014448e: movsxd ecx, ecx; mov byte ptr [rsi+r9], 0x0; ret; 
0x0000000003ec03: movsxd edi, [rdx+rax*4]; add rdi, r10; jmp rdi; 
0x000000000b5259: movsxd edi, [rdx]; or al, 0x0; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x0000000012b7d5: movsxd edi, [rip+0x81cbd]; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x000000000a18b8: movsxd edi, edi; lea rax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18d8: movsxd edi, edi; lea rax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x0000000007560b: movsxd edi, edi; lea rax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x0000000003a955: movsxd edi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a318: movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000003a718: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6f8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a798: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6d8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a658: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a618: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a698: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5f8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6b8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a678: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a638: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5d8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a935: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a915: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a815: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a8f5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a885: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a855: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a8c5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a835: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a8e5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a8a5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a865: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a825: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x00000000099f03: movsxd edi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx; 
0x0000000013a6bf: movsxd edx, [rax+rcx*4]; add rdx, r8; jmp rdx; 
0x000000000a15e3: movsxd edx, [rax+rdx*4]; add rdx, r8; jmp rdx; 
0x00000000099eff: movsxd edx, [rax-0x2]; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx; 
0x000000000cb75f: movsxd edx, [rbx+rdx*4]; add rdx, r11; jmp rdx; 
0x00000000151af0: movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b5d53: movsxd edx, [rbx]; add [rax+0x39], cl; ret; 
0x0000000004e2a8: movsxd edx, [rcx+rdx*4]; add rdx, r9; jmp rdx; 
0x00000000075e87: movsxd edx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000501bc: movsxd edx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000a1536: movsxd edx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cfadb: movsxd edx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000ecae5: movsxd edx, [rsi+rdx*4]; add rdx, r14; jmp rdx; 
0x000000000cd566: movsxd edx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000d2a58: movsxd edx, [rsp+0xa0]; mov [rbx+0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000007f76e: movsxd edx, ebp; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000007015c: movsxd edx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000781d8: movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000012362e: movsxd edx, ecx; ret; 
0x00000000123111: movsxd edx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000012b502: movsxd esi, [rax+rdi*4]; add rsi, r8; jmp rsi; 
0x0000000010c591: movsxd esi, [rcx+0x76e8000a]; fcomip st, st(2); jmp qword ptr [rsi+0xf]; 
0x000000000b4f69: movsxd esi, [rcx]; or al, 0x0; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000cfb43: movsxd esi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000116bd4: movsxd esi, ecx; jmp qword ptr [rsi+0xf]; 
0x0000000011136e: movsxd esi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000014cfb7: movsxd esi, esi; and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x00000000099fb6: movsxd esi, esi; mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx; 
0x00000000139079: movsxd esp, [rax-0x74b80000]; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000006b19c: movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000003ee48: movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000006b19b: movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000006d764: movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b63: movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x000000000a1a91: movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000169a3d: movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c8d: movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000156f9b: movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000151a1b: movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001519b0: movsxd r9, [r11+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x0000000014448d: movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x0000000006e813: movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x00000000073937: movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073207: movsxd rax, [r11+rax*4]; add rax, rdi; jmp rax; 
0x000000000f5ba4: movsxd rax, [r12+rax*4]; add rax, r12; jmp rax; 
0x000000000f89d5: movsxd rax, [r13+rax*4]; add rax, r13; jmp rax; 
0x000000000739ca: movsxd rax, [r8+rax*4]; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x0000000006df5e: movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x0000000010b213: movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x00000000127f5a: movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x0000000006e8c1: movsxd rax, [r9+rax*4]; add rax, rsi; mov r13d, 0x1; jmp rax; 
0x00000000073d7b: movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x0000000006e6f4: movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x00000000073c35: movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xbc3]; add rax, rcx; jmp rax; 
0x00000000073cf8: movsxd rax, [rax+rcx*4]; lea rcx, [rip-0xc86]; add rax, rcx; jmp rax; 
0x0000000007132a: movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x000000000e9e99: movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x0000000005c6c1: movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000e277f: movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x00000000140315: movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x00000000140314: movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x00000000131b99: movsxd rax, [rcx+rsi*4]; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x0000000013ab15: movsxd rax, [rdi+0x18]; cmp eax, 0x3; jbe short 0x000000000013ab28; mov eax, 0x2; ret; 
0x0000000005d2d1: movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x00000000073de1: movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x0000000006503c: movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ee24: movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000007496a: movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x18f8]; add rax, rdi; jmp rax; 
0x000000000738d6: movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b56: movsxd rax, [rdi+rax*4]; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x0000000013dc32: movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax; 
0x000000000e2866: movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000002d787: movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000d8ab3: movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x0000000018f58d: movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax; 
0x0000000018f378: movsxd rax, [rdx+rbx*4]; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax; 
0x000000000b4da6: movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000d86eb: movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x0000000006ebc0: movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006c29d: movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d08d: movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000cfab4: movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x0000000013b378: movsxd rax, [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013b408: movsxd rax, [rsi]; mov rsi, rsp; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000441e3: movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000016f508: movsxd rax, ecx; add rax, rdi; ret; 
0x0000000016f32a: movsxd rax, ecx; ret; 
0x0000000018f5d3: movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000010bb7d: movsxd rbx, ebx; mov [rip+0xe1899], rbx; pop rbx; ret; 
0x0000000010bb67: movsxd rbx, ebx; mov [rip+0xe18af], rbx; pop rbx; ret; 
0x0000000007032a: movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x000000000affaa: movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000017944d: movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000af739: movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000ed1fd: movsxd rcx, [r8+rcx*4]; add rcx, r8; jmp rcx; 
0x0000000018f43c: movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x000000000389b8: movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx; 
0x0000000012b608: movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x0000000006bb8f: movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000064947: movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000016f35a: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000003ec02: movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi; 
0x0000000012b7d4: movsxd rdi, [rip+0x81cbd]; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x000000000a18b7: movsxd rdi, edi; lea rax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18d7: movsxd rdi, edi; lea rax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x0000000007560a: movsxd rdi, edi; lea rax, [rip+0x17622c]; mov rax, [rax+rdi*8]; ret; 
0x0000000003a954: movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000003a317: movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x0000000003a717: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6f7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a797: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6d7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a657: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a617: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a697: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5f7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6b7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a677: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a637: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5d7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x0000000003a934: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a914: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a814: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a8f4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a884: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a854: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a8c4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a834: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a8e4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a8a4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a864: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a824: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x00000000099f02: movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx; 
0x000000000cb75e: movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x00000000151aef: movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000ecae4: movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx; 
0x0000000013a6be: movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx; 
0x000000000a15e2: movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx; 
0x0000000004e2a7: movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x00000000075e86: movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000501bb: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000a1535: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cfada: movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cd565: movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000d2a57: movsxd rdx, [rsp+0xa0]; mov [rbx+0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000007550b: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000781d7: movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000012362d: movsxd rdx, ecx; ret; 
0x00000000123110: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000007015a: movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x0000000012b501: movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x000000000cfb42: movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000011136d: movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000014cfb6: movsxd rsi, esi; and rax, [rdi+rsi*8]; setne al; movzx eax, al; ret; 
0x00000000099fb5: movsxd rsi, esi; mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx; 
0x000000000b46a0: movups [r11], xmm4; ret; 
0x000000000b4723: movups [r11], xmm8; ret; 
0x000000000e0f0e: movups [r12], xmm0; pop r12; ret; 
0x000000000fea94: movups [r8+0x11], xmm0; mov [r8+0x34], eax; mov [r8+0x38], eax; mov eax, r9d; ret; 
0x000000000415c5: movups [r8+0x68], xmm6; movups [r8+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000415ca: movups [r8+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x0000000013dc4e: movups [r8+0x8], xmm0; ret; 
0x0000000014034a: movups [r8], xmm1; ret; 
0x0000000014035a: movups [r8], xmm2; ret; 
0x00000000140bca: movups [r8], xmm3; ret; 
0x00000000140baa: movups [r8], xmm4; ret; 
0x000000000fea95: movups [rax+0x11], xmm0; mov [r8+0x34], eax; mov [r8+0x38], eax; mov eax, r9d; ret; 
0x000000000415c6: movups [rax+0x68], xmm6; movups [r8+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x000000000415cb: movups [rax+0x78], xmm7; mov eax, r9d; add rsp, 0xd0; ret; 
0x0000000013dc4f: movups [rax+0x8], xmm0; ret; 
0x00000000133a69: movups [rax+0xa0], xmm2; movdqu xmm3, [rdi+0xb0]; mov dword ptr [rax+0xc0], 0x0; movups [rax+0xb0], xmm3; ret; 
0x00000000133a82: movups [rax+0xb0], xmm3; ret; 
0x0000000014cdf9: movups [rax], xmm0; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000014034b: movups [rax], xmm1; ret; 
0x0000000014035b: movups [rax], xmm2; ret; 
0x00000000140bcb: movups [rax], xmm3; ret; 
0x00000000140bab: movups [rax], xmm4; ret; 
0x000000000f9583: movups [rbx+0xe0], xmm6; movups [rbx+0xf0], xmm7; add rsp, 0x190; pop rbx; ret; 
0x000000000f958a: movups [rbx+0xf0], xmm7; add rsp, 0x190; pop rbx; ret; 
0x00000000044843: movups [rbx], xmm0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000d2ad0: movups [rbx], xmm0; add rsp, 0xd0; pop rbx; ret; 
0x000000000b4724: movups [rbx], xmm0; ret; 
0x000000000b46a1: movups [rbx], xmm4; ret; 
0x000000000b4693: movups [rcx-0x10], xmm6; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000b4697: movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000b469c: movups [rcx-0x30], xmm0; movups [r11], xmm4; ret; 
0x000000000b469b: movups [rcx-0x30], xmm8; movups [r11], xmm4; ret; 
0x000000000f8129: movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x000000000b4600: movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b4717: movups [rdi+0x10], xmm5; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000f812d: movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x00000000140bba: movups [rdi+0x20], xmm2; ret; 
0x000000000b471b: movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000f8131: movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret; 
0x00000000140b87: movups [rdi+0x30], xmm0; ret; 
0x000000000b471f: movups [rdi+0x30], xmm7; movups [r11], xmm8; ret; 
0x000000000f8135: movups [rdi+0x40], xmm0; ret; 
0x000000000f858c: movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret; 
0x000000000f8595: movups [rdi+0x78], xmm7; ret; 
0x00000000140336: movups [rdi+0x8], xmm0; ret; 
0x000000000f8ede: movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret; 
0x000000000f8eea: movups [rdi+0xf8], xmm7; ret; 
0x000000001233df: movups [rdi+rdx+0x8], xmm0; ret; 
0x000000000b4462: movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000b4604: movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b48c4: movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45d7: movups [rdi+rdx-0x10], xmm4; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b48bf: movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b4609: movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b45dc: movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b48ba: movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45e1: movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret; 
0x000000000b48b5: movups [rdi+rdx-0x40], xmm0; movups [rdi+rdx-0x30], xmm1; movups [rdi+rdx-0x20], xmm2; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45e6: movups [rdi+rdx-0x40], xmm7; ret; 
0x00000000040524: movups [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000408c0: movups [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000b45fd: movups [rdi], xmm0; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret; 
0x000000000b445f: movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000e24a6: movups [rdi], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000013dc63: movups [rdx], xmm1; ret; 
0x00000000132845: movups [rip+0xc5b5c], xmm4; call rbx; 
0x000000001327d5: movups [rip+0xc6c0c], xmm3; mov qword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x000000000877fc: movups [rsi+0x60], xmm6; movdqu xmm7, [rax+0x80]; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x000000000f853c: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f8e51: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret; 
0x0000000008780a: movups [rsi+0x70], xmm7; ret; 
0x00000000123468: movups [rsi+r9+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x00000000123469: movups [rsi+rcx+0x8], xmm2; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x00000000140269: movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x00000000140af7: movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x0000000013db7c: movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret; 
0x00000000041519: movups [rsp+0x10], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x00000000142bab: movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000000942cc: movups [rsp+0x40], xmm0; mov [rsp+0x30], eax; mov eax, 0xde; movups [rsp+0x50], xmm0; syscall; 
0x000000000942da: movups [rsp+0x50], xmm0; syscall; 
0x00000000142f13: movups [rsp+0xb8], xmm1; call rax; 
0x00000000142fbd: movups [rsp+0xb8], xmm2; call rax; 
0x000000000e0f0f: movups [rsp], xmm0; pop r12; ret; 
0x00000000041515: movups [rsp], xmm6; movups [rsp+0x10], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x0000000004063f: movups xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040619: movups xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x00000000192609: movups xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x000000000b4457: movups xmm0, [rsi]; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x000000000446c9: movups xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000c6a29: movups xmm0, [rsp-0x10]; ret; 
0x000000000b445a: movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret; 
0x00000000040871: movups xmm3, [rip+0x162b68]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000128e1f: movzx eax, al; add rsp, 0x100; pop rbp; ret; 
0x0000000013c070: movzx eax, al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000091972: movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x000000000c477b: movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x000000000d863e: movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x00000000086787: movzx eax, al; mov [rdi+0x10], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x2f8], rdi; ret; 
0x00000000086254: movzx eax, al; mov [rdi+0x58], eax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000000f5ba1: movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax; 
0x00000000127f57: movzx eax, al; movsxd rax, [r9+rax*4]; add rax, r9; jmp rax; 
0x000000000f6f77: movzx eax, al; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000757e7: movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000082586: movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x0000000005d46d: movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000005d08a: movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000005c137: movzx eax, al; neg eax; pop rbp; ret; 
0x0000000002d8d8: movzx eax, al; neg eax; ret; 
0x00000000128947: movzx eax, al; pop r12; pop r13; ret; 
0x0000000013bde0: movzx eax, al; pop rbp; pop r12; pop r13; ret; 
0x0000000013aecf: movzx eax, al; pop rbp; pop r12; ret; 
0x00000000128d98: movzx eax, al; pop rbp; ret; 
0x00000000091dea: movzx eax, al; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807d9: movzx eax, al; pop rbx; neg eax; ret; 
0x0000000010103d: movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000128ecc: movzx eax, al; pop rbx; ret; 
0x00000000041c8b: movzx eax, al; ret; 
0x000000000a5343: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000fb41e: movzx eax, al; sbb eax, 0x0; ret; 
0x000000000fbf33: movzx eax, al; shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x0000000009190d: movzx eax, al; sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000012c6ad: movzx eax, ax; ret; 
0x00000000082d9f: movzx eax, bl; pop rbx; pop rbp; pop r12; ret; 
0x00000000144df8: movzx eax, bpl; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000df315: movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+0x8], 0x1; mov [rdi], al; mov eax, 0x1; ret; 
0x000000001862d0: movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001709f0: movzx eax, byte ptr [rax+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000e9e92: movzx eax, byte ptr [rax+0x8]; mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000001892c5: movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x0000000016f962: movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000189178: movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x0000000016f87c: movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000007392c: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0x8ba]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073aa7: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0xa35]; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073dd6: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0xd64]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e92: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0xe20]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073203: movzx eax, byte ptr [rax+rcx]; movsxd rax, [r11+rax*4]; add rax, rdi; jmp rax; 
0x000000000739c6: movzx eax, byte ptr [rax+rcx]; movsxd rax, [r8+rax*4]; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x000000000738d2: movzx eax, byte ptr [rax+rcx]; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b52: movzx eax, byte ptr [rax+rcx]; movsxd rax, [rdi+rax*4]; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x00000000073b00: movzx eax, byte ptr [rax+rcx]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x000000000a2ffd: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000016f817: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000018913f: movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000016f840: movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000018915f: movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x0000000016f860: movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000018a856: movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000016fcb7: movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000be35e: movzx eax, byte ptr [rax+rdx]; cmp r8d, 0xff; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x0000000007397d: movzx eax, byte ptr [rax+rdx]; mov edx, 0x1; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000081eec: movzx eax, byte ptr [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000080752: movzx eax, byte ptr [rax]; ret; 
0x00000000073e39: movzx eax, byte ptr [rcx+rax]; lea rcx, [rip-0xdc7]; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x000000000df316: movzx eax, byte ptr [rcx+rax]; mov byte ptr [rdi+0x8], 0x1; mov [rdi], al; mov eax, 0x1; ret; 
0x000000001228ef: movzx eax, byte ptr [rdi+0x1]; lea rax, [rdi+rax+0x2]; cmp rdx, rax; sbb eax, eax; ret; 
0x00000000123486: movzx eax, byte ptr [rdi+0x1]; shl eax, 0x3; shr rax, 0x4; and eax, 0x7f; ret; 
0x000000000f11e0: movzx eax, byte ptr [rdi+0x9]; and eax, 0xf; ret; 
0x000000001860f8: movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000170859: movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; vzeroupper; ret; 
0x00000000186108: movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x00000000170878: movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001862eb: movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000170a2b: movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000018630b: movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000170a0b: movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000006f686: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip+0x138baf]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ebb5: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xe15]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ec19: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xe79]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006ed51: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xfb1]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax; 
0x0000000006e80f: movzx eax, byte ptr [rdi+rax]; movsxd rax, [r10+rax*4]; add rax, rsi; jmp rax; 
0x0000000006df5a: movzx eax, byte ptr [rdi+rax]; movsxd rax, [r8+rax*4]; add rax, rsi; jmp rax; 
0x0000000006e8bd: movzx eax, byte ptr [rdi+rax]; movsxd rax, [r9+rax*4]; add rax, rsi; mov r13d, 0x1; jmp rax; 
0x000000001860e8: movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000170838: movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000186154: movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x000000001708bf: movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; vzeroupper; ret; 
0x00000000169acb: movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x00000000188ef8: movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x0000000016f6b4: movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000188f18: movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x0000000016f6d4: movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000188f38: movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x0000000016f6f4: movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000009cca9: movzx eax, byte ptr [rdi+rdx]; mov [rsi+rdx], cl; mov [rsi+rdx+0x1], al; jne short 0x000000000009cca0; ret; 
0x000000000a2e8f: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000016f696: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000a2e28: movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x0000000017d7d0: movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x0000000017db8a: movzx eax, byte ptr [rdi-0x1]; cmp al, [rsi-0x1]; jne 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017dce2: movzx eax, byte ptr [rdi-0x1]; cmp al, [rsi-0x1]; jne short 0x000000000017dd05; xor eax, eax; ret; 
0x0000000017a300: movzx eax, byte ptr [rdi-0x1]; movzx ecx, byte ptr [rsi-0x1]; sub eax, ecx; ret; 
0x0000000017a0b3: movzx eax, byte ptr [rdi-0x1]; movzx edx, byte ptr [rsi-0x1]; sub eax, edx; ret; 
0x0000000017d7b7: movzx eax, byte ptr [rdi-0x9]; movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x0000000017d830: movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x0000000017d820: movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017d810: movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d800: movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7f0: movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7e0: movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x00000000131c2b: movzx eax, byte ptr [rdi]; add eax, ecx; sub rdx, 0x1; jne short 0x0000000000131bb8; ret; 
0x00000000179460: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000a5320: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000a2e43: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000016fe93: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000d90bb: movzx eax, byte ptr [rdi]; test al, al; jne short 0x00000000000d909f; xor eax, eax; ret; 
0x000000000ee1eb: movzx eax, byte ptr [rdi]; test al, al; jne short 0x00000000000ee1cf; xor eax, eax; ret; 
0x000000000d90d8: movzx eax, byte ptr [rdi]; test al, al; mov eax, 0x0; cmovne rax, rdi; ret; 
0x0000000008fe58: movzx eax, byte ptr [rdx+0x971]; mov [rsi], eax; mov [rdx+0x971], dil; xor eax, eax; ret; 
0x0000000006c292: movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x3e0]; movsxd rax, [rsi+rax*4]; add rax, rdx; jmp rax; 
0x0000000013cbba: movzx eax, byte ptr [rdx+rax]; mov [rdi-0x1], al; cmp rdi, rcx; jne short 0x000000000013cbb0; ret; 
0x0000000006ee19: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1079]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee7e: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x10de]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006eee1: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1141]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x000000001456e0: movzx eax, byte ptr [rsi]; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x00000000144df9: movzx eax, ch; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000b4b2d: movzx eax, dh; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x0000000002fd51: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000b4b2c: movzx eax, sil; mov rdx, rdi; rep stosb [rdi]; mov rax, rdx; ret; 
0x0000000002fd50: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000013dcbd: movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x0000000013dcbe: movzx eax, word ptr [rax+0x88]; mov [rdx+0x6c], ax; mov eax, 0x1; ret; 
0x0000000003a983: movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret; 
0x0000000003a71e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret; 
0x0000000003a6fe: movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret; 
0x0000000003a79e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x1; ret; 
0x0000000003a6de: movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret; 
0x0000000003a65e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret; 
0x0000000003a61e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x2; ret; 
0x0000000003a69e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret; 
0x0000000003a5fe: movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret; 
0x0000000003a6be: movzx eax, word ptr [rax+rdi*2]; and eax, 0x4; ret; 
0x0000000003a67e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret; 
0x0000000003a63e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret; 
0x0000000003a5de: movzx eax, word ptr [rax+rdi*2]; and eax, 0x8; ret; 
0x000000001155c2: movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 0x1; ret; 
0x000000000f85a0: movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x00000000144d40: movzx eax, word ptr [rsi]; lea rsi, [rsp+0x8]; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000145600: movzx eax, word ptr [rsi]; lea rsi, [rsp+0xc]; mov [rsp+0xc], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x000000000e277b: movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e2710: movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000e277c: movzx ebp, ch; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e2711: movzx ebp, ch; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x0000000003ee45: movzx ebx, bl; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x00000000073d70: movzx ecx, byte ptr [rcx+rax]; lea rax, [rip+0x134845]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x0000000006ecb5: movzx ecx, byte ptr [rdi+rax]; lea rax, [rip+0x139500]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000006e6e9: movzx ecx, byte ptr [rdi+rax]; lea rax, [rip+0x139a4c]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x00000000128d18: movzx ecx, byte ptr [rdi]; test rcx, rcx; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x000000000ed1f9: movzx ecx, byte ptr [rdx+0x8]; movsxd rcx, [r8+rcx*4]; add rcx, r8; jmp rcx; 
0x000000000a1109: movzx ecx, byte ptr [rdx]; test cl, cl; jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x000000001860f3: movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000170854: movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; vzeroupper; ret; 
0x00000000186104: movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x00000000170874: movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001862cb: movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x000000001709eb: movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000001862e6: movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000170a26: movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; vzeroupper; ret; 
0x00000000186306: movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x00000000170a06: movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000001860e4: movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000170834: movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000186159: movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x000000001708c4: movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000b3e7a: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3e70; ret; 
0x000000000b3f2a: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b3f20; ret; 
0x000000000b41ea: movzx ecx, byte ptr [rsi+rdx+0x3]; test cl, cl; jne short 0x00000000000b41e0; sub rax, 0x1; ret; 
0x000000000a2e24: movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x00000000189453: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018ac10: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne 0x000000000018aa50; sub eax, ecx; ret; 
0x000000001892f7: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne short 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018aa6c: movzx ecx, byte ptr [rsi+rdx]; test eax, eax; jne short 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000017a304: movzx ecx, byte ptr [rsi-0x1]; sub eax, ecx; ret; 
0x000000000b4558: movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret; 
0x000000000a2e40: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000016fe90: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000179463: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000b457c: movzx ecx, word ptr [rsi+rdx-0x2]; movzx esi, word ptr [rsi]; mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x000000001876f0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001888d0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x00000000174c50: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x0000000018b2d0: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x0000000012b4fe: movzx edi, al; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x00000000117d3c: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000010af1b: movzx edi, di; lea rax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x00000000117d3b: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000108a54: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000ecadf: movzx edx, byte ptr [r15+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx; 
0x000000000ecae0: movzx edx, byte ptr [rdi+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx; 
0x0000000003f5ec: movzx edx, byte ptr [rdi]; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x000000001892c9: movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x0000000016f966: movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000018917d: movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x0000000016f881: movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000a3001: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x0000000016f81b: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000189144: movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000016f845: movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000189163: movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x0000000016f864: movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000018a85a: movzx edx, byte ptr [rdx+rdi]; sub eax, edx; ret; 
0x0000000016fcbb: movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000b409a: movzx edx, byte ptr [rsi+rax+0x3]; test dl, dl; jne short 0x00000000000b4090; lea rax, [rcx-0x1]; ret; 
0x00000000169acf: movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x00000000188efd: movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x0000000016f6b9: movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000188f1c: movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x0000000016f6d8: movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000188f3d: movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x0000000016f6f9: movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000a2e93: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x0000000016f69a: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000017d7d4: movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x000000001592e0: movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x0000000017a0b7: movzx edx, byte ptr [rsi-0x1]; sub eax, edx; ret; 
0x0000000017d7bb: movzx edx, byte ptr [rsi-0x9]; sub eax, edx; ret; 
0x0000000017d834: movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x0000000017d824: movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017d814: movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d804: movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d802: movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7f4: movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7f2: movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7e4: movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x00000000187e50: movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x00000000176da0: movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x0000000018a2f0: movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x000000001754c0: movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; vzeroupper; ret; 
0x000000001599c0: movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x00000000176070: movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x000000000a5323: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000a1502: movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x000000000a15af: movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a1694: movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a1568: movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x000000000a14ab: movzx edx, byte ptr [rsp-0x6]; mov [rdi+0x2], dl; ret; 
0x000000000a1586: movzx edx, byte ptr [rsp-0xc]; mov [rax+0x4], dl; ret; 
0x000000000a14c9: movzx edx, byte ptr [rsp-0xc]; mov [rdi+0x4], dl; ret; 
0x000000000cd52f: movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cd562: movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000108a53: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000cb75b: movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x0000000004e2a4: movzx edx, dl; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx; 
0x000000000f7453: movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000a5349: movzx edx, dl; sub eax, edx; ret; 
0x00000000187e73: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x0000000018a313: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b2d3: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x00000000176093: movzx edx, word ptr [rsi+r8-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000187e74: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; lea rax, [rdi+r8]; ret; 
0x0000000018a314: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b2d4: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; ret; 
0x00000000176094: movzx edx, word ptr [rsi+rax-0x2]; mov [rdi], cx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000159260: movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001876e0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000001766d0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; vzeroupper; ret; 
0x00000000187e60: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x00000000176db0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x0000000018a300: movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001754d0: movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000159950: movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000174c40: movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x000000000a14f9: movzx edx, word ptr [rsp+0x14]; mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+0x6], dl; ret; 
0x000000000a15a6: movzx edx, word ptr [rsp+0xc]; mov [rax+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a168b: movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a14e1: movzx edx, word ptr [rsp+0xc]; mov [rdi+0x4], dx; ret; 
0x000000000a1596: movzx edx, word ptr [rsp-0x14]; mov [rax+0x4], dx; ret; 
0x000000000a1673: movzx edx, word ptr [rsp-0x14]; mov [rdi+0x4], dx; ret; 
0x000000000a1560: movzx edx, word ptr [rsp-0x8]; mov [rax], dx; movzx edx, byte ptr [rsp-0x6]; mov [rax+0x2], dl; ret; 
0x0000000012b605: movzx esi, al; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x00000000083c23: movzx esi, byte ptr [r15]; lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x00000000083c24: movzx esi, byte ptr [rdi]; lea rbx, [r15+0x1]; mov rdi, r13; call qword ptr [rax+0x18]; 
0x00000000170aac: movzx esi, byte ptr [rsi+rdx-0x1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x00000000117da0: movzx esi, dh; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000e2863: movzx esi, dh; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x00000000110b2e: movzx esi, dl; test byte ptr [r8+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x00000000117d83: movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000117d9f: movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000b4581: movzx esi, word ptr [rsi]; mov [rdi+rdx-0x2], cx; mov [rdi], si; ret; 
0x0000000005d2c7: movzx esp, ah; mov r9, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000005d804: movzx esp, ah; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000018f380: movzx esp, bh; add rax, rdx; jmp rax; 
0x0000000003ee44: movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11; 
0x0000000018f37f: movzx r12d, dil; add rax, rdx; jmp rax; 
0x0000000005d2c6: movzx r12d, r12b; mov r9, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000005d803: movzx r12d, r12b; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x000000000e2862: movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x00000000081eeb: movzx r8, byte ptr [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000be35d: movzx r8d, byte ptr [rax+rdx]; cmp r8d, 0xff; je short 0x00000000000be36f; mov eax, r8d; ret; 
0x000000000fb244: movzx rax, al; ret; 
0x00000000178e00: mul dword ptr [rip+0x11111111]; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret; 
0x000000000406ae: mulps xmm0, [rip+0x178d3b]; ret; 
0x00000000040a03: mulps xmm0, [rip+0x17907e]; ret; 
0x000000000409b8: mulps xmm0, [rip+0x1790c1]; ret; 
0x00000000040993: mulps xmm0, [rip+0x1790ea]; ret; 
0x00000000040629: mulps xmm0, xmm1; ret; 
0x000000000406ad: mulsd xmm0, [rip+0x178d3b]; ret; 
0x00000000040628: mulsd xmm0, xmm1; ret; 
0x00000000040a02: mulss xmm0, [rip+0x17907e]; ret; 
0x000000000409b7: mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040992: mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000ff0f3: neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41]; 
0x00000000100371: neg eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000141b63: neg eax; add rsp, 0x18; ret; 
0x000000000866ba: neg eax; add rsp, 0x28; pop rbp; pop r12; ret; 
0x00000000141e7f: neg eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000009220d: neg eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000c58bf: neg eax; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret; 
0x00000000041667: neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000004169f: neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000044a97: neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000d6f17: neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000f0177: neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000018be0a: neg eax; or eax, 0x1; ret; 
0x00000000178114: neg eax; or eax, 0x1; vzeroupper; ret; 
0x000000000df552: neg eax; pop r14; pop r15; ret; 
0x0000000005c13a: neg eax; pop rbp; ret; 
0x00000000129e9f: neg eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000002d8db: neg eax; ret; 
0x0000000008fccf: neg edx; cmp eax, 0xfffff000; mov eax, 0x0; cmova eax, edx; ret; 
0x000000000c58be: neg r8d; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret; 
0x00000000145a5a: nop [rax+rax]; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x00000000145a5b: nop [rax+rax]; add [rdi+0x28], edx; mov eax, 0x1; ret; 
0x0000000005c2b8: nop [rax+rax]; add dword ptr [rdx+0x4], 0x1; xor eax, eax; ret; 
0x000000000c5fa5: nop [rax+rax]; add rax, 0x3; ret; 
0x000000000c5fa8: nop [rax+rax]; add rax, 0x3; ret; 
0x000000000c5fa7: nop [rax+rax]; add rax, 0x3; ret; 
0x00000000128e2b: nop [rax+rax]; add rsp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000c0d58: nop [rax+rax]; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000009ded3: nop [rax+rax]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x0000000009ded2: nop [rax+rax]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000087f68: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000014d0e3: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000087f67: nop [rax+rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000192783: nop [rax+rax]; add rsp, 0x8; ret; 
0x000000000406b6: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000406b7: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000406b8: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000040a0b: nop [rax+rax]; addss xmm0, xmm0; ret; 
0x0000000008e5c2: nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x0000000008e5c3: nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000087a1a: nop [rax+rax]; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000087a1b: nop [rax+rax]; and eax, 0xfffffffd; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000a4c08: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a4c07: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x00000000186ea8: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x00000000186ea7: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; ret; 
0x00000000186ebb: nop [rax+rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000186eba: nop [rax+rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; ret; 
0x00000000186eca: nop [rax+rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000186ecb: nop [rax+rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000186e98: nop [rax+rax]; bsr eax, eax; add rax, rdi; ret; 
0x000000001705d8: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001705d5: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001705d7: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000a50c8: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a50c7: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x00000000052283: nop [rax+rax]; bts rdx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x00000000052282: nop [rax+rax]; bts rdx, 0x30; mov eax, 0x2; mov [rdi+0x8], rdx; ret; 
0x00000000052098: nop [rax+rax]; bts rdx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x00000000052097: nop [rax+rax]; bts rdx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x00000000052096: nop [rax+rax]; bts rdx, 0x34; mov eax, 0x1; mov [rdi], rdx; ret; 
0x00000000192dc3: nop [rax+rax]; call qword ptr [rbx]; 
0x000000000d924a: nop [rax+rax]; call qword ptr [rdx+0x40]; 
0x000000000d924b: nop [rax+rax]; call qword ptr [rdx+0x40]; 
0x000000000983d6: nop [rax+rax]; cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x000000000983d7: nop [rax+rax]; cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x000000000983d8: nop [rax+rax]; cmp byte ptr [rip+0x15cdc1], 0x0; jne short 0x00000000000983f0; ret; 
0x000000000862fb: nop [rax+rax]; cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x000000000862fa: nop [rax+rax]; cmp dword ptr [rdi], 0x1; je short 0x0000000000086310; ret; 
0x0000000013efb8: nop [rax+rax]; cmp dword ptr [rsi+0x10], 0xc; je short 0x000000000013efd0; xor eax, eax; ret; 
0x00000000144a1b: nop [rax+rax]; cmp eax, 0x1; jne short 0x0000000000144a11; mov rax, [rdi+0x8]; jmp qword ptr [rax]; 
0x00000000087ee8: nop [rax+rax]; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x00000000087ee6: nop [rax+rax]; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x00000000087ee7: nop [rax+rax]; cmp edi, 0x20; je short 0x0000000000087f00; ret; 
0x000000000d20b8: nop [rax+rax]; cmp esi, 0x1; je short 0x00000000000d20d0; xor eax, eax; ret; 
0x0000000011130b: nop [rax+rax]; cmp qword ptr [rdi+0x10], 0x0; je short 0x0000000000111320; xor eax, eax; ret; 
0x0000000008763b: nop [rax+rax]; cmp qword ptr [rdi+0x28], 0x0; je short 0x0000000000087650; xor eax, eax; ret; 
0x000000000d8518: nop [rax+rax]; cmp rax, 0x517b; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000d8517: nop [rax+rax]; cmp rax, 0x517b; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x000000000880eb: nop [rax+rax]; cmp rdx, rbp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x000000000880ea: nop [rax+rax]; cmp rdx, rbp; jbe short 0x0000000000088140; mov rdi, [rbx+0x8]; call qword ptr [rbx]; 
0x00000000116c87: nop [rax+rax]; cmp rdx, rcx; ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x00000000116c88: nop [rax+rax]; cmp rdx, rcx; ja short 0x0000000000116cbc; xor eax, eax; syscall; 
0x000000000403b3: nop [rax+rax]; fld st, tbyte ptr [rsp+0x8]; fadd st, st(0); ret; 
0x00000000122756: nop [rax+rax]; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000122758: nop [rax+rax]; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000122757: nop [rax+rax]; lea eax, [rdi+0x9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000b34a6: nop [rax+rax]; lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34a7: nop [rax+rax]; lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34a8: nop [rax+rax]; lea r11, [rip+0xf6f5d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b161b: nop [rax+rax]; lea r11, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b161a: nop [rax+rax]; lea r11, [rip+0xf8c19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff6a: nop [rax+rax]; lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff6b: nop [rax+rax]; lea r11, [rip+0xfa0e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000017c4e5: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x0000000017c4e8: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x0000000017c4e7: nop [rax+rax]; lea rax, [rdi+0x2]; ret; 
0x0000000017c4f8: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x0000000017c4f5: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x0000000017c4f7: nop [rax+rax]; lea rax, [rdi+0x3]; ret; 
0x0000000017c508: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x0000000017c507: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x0000000017c505: nop [rax+rax]; lea rax, [rdi+0x4]; ret; 
0x0000000017c517: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x0000000017c515: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x0000000017c518: nop [rax+rax]; lea rax, [rdi+0x5]; ret; 
0x0000000017c528: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x0000000017c527: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x0000000017c525: nop [rax+rax]; lea rax, [rdi+0x6]; ret; 
0x0000000017c538: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x0000000017c537: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x0000000017c535: nop [rax+rax]; lea rax, [rdi+0x8]; ret; 
0x0000000017c545: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x0000000017c547: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x0000000017c548: nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x0000000017c557: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x0000000017c558: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x0000000017c555: nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x0000000017c568: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x0000000017c567: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x0000000017c565: nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x0000000017c578: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x0000000017c575: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x0000000017c577: nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x0000000017c585: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x0000000017c587: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x0000000017c588: nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x0000000017c597: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x0000000017c595: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x0000000017c598: nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x000000000c5d77: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000c5d78: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000c5d75: nop [rax+rax]; lea rax, [rdi-0x4]; ret; 
0x000000000c5d65: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000c5d67: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000c5d68: nop [rax+rax]; lea rax, [rdi-0x8]; ret; 
0x000000000c5d57: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x000000000c5d55: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x000000000c5d58: nop [rax+rax]; lea rax, [rdi-0xc]; ret; 
0x00000000039643: nop [rax+rax]; lea rax, [rip+0x175e46]; ret; 
0x00000000039642: nop [rax+rax]; lea rax, [rip+0x175e46]; ret; 
0x0000000002d3f8: nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000002d3f7: nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000002d3f6: nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000002d408: nop [rax+rax]; lea rax, [rip+0x183a80]; ret; 
0x000000000b6658: nop [rax+rax]; lea rax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b6657: nop [rax+rax]; lea rax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b6656: nop [rax+rax]; lea rax, [rip+0xd6519]; test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x000000000b50a8: nop [rax+rax]; lea rax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b50a7: nop [rax+rax]; lea rax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b50a6: nop [rax+rax]; lea rax, [rip+0xd7289]; test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x0000000009aae2: nop [rax+rax]; lea rax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aae3: nop [rax+rax]; lea rax, [rip+0xede91]; test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x000000000fe608: nop [rax+rax]; lea rdx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000fe607: nop [rax+rax]; lea rdx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000fe606: nop [rax+rax]; lea rdx, [rsp-0x50]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000164268: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x00000000164267: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x3], edx; ret; 
0x00000000164256: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x00000000164258: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x00000000164257: nop [rax+rax]; mov [rcx], edx; mov [rcx+0x4], dx; ret; 
0x00000000164238: nop [rax+rax]; mov [rcx], edx; ret; 
0x00000000164237: nop [rax+rax]; mov [rcx], edx; ret; 
0x000000001642c8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642c7: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642d8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x6], rdx; ret; 
0x000000001642a8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x000000001642e8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], rdx; ret; 
0x00000000164297: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x00000000164298: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000001642b8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x000000001642b7: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], edx; ret; 
0x000000001642f8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], rdx; ret; 
0x00000000164278: nop [rax+rax]; mov [rcx], rdx; ret; 
0x00000000164276: nop [rax+rax]; mov [rcx], rdx; ret; 
0x00000000164277: nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000000879e8: nop [rax+rax]; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000879e6: nop [rax+rax]; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000879e7: nop [rax+rax]; mov [rdi+0x10], rsi; xor eax, eax; ret; 
0x000000000f85d8: nop [rax+rax]; mov [rdi+0x4], esi; xor eax, eax; ret; 
0x000000000b08a8: nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000b08a7: nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000b0e78: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000b0e77: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000b0e76: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret; 
0x000000000af877: nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000af876: nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000af878: nop [rax+rax]; mov [rdi], dh; ret; 
0x00000000187f57: nop [rax+rax]; mov [rdi], dl; ret; 
0x00000000187f58: nop [rax+rax]; mov [rdi], dl; ret; 
0x00000000187f55: nop [rax+rax]; mov [rdi], dl; ret; 
0x00000000176167: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000176168: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-0x2], dx; vzeroupper; ret; 
0x00000000176156: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x00000000176157: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x00000000176158: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret; 
0x000000000a1638: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000a1637: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000a1636: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000b0897: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000b0896: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x000000000b0898: nop [rax+rax]; mov [rdi], edx; mov [rdi+0x4], dx; ret; 
0x00000000187f8b: nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x00000000187f8a: nop [rax+rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; ret; 
0x000000000b0908: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b0907: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b0918: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x6], rdx; ret; 
0x000000000b08e8: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000b08d7: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000b08d8: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x000000000b08f7: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x000000000b08f8: nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], edx; ret; 
0x00000000187f98: nop [rax+rax]; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; ret; 
0x0000000017618b: nop [rax+rax]; mov [rdi], rdx; mov [rdi+r8-0x8], rdx; vzeroupper; ret; 
0x000000000b08b7: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000b08b8: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000b08b5: nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000a1488: nop [rax+rax]; mov [rdi], si; add rax, rdi; ret; 
0x000000000a1487: nop [rax+rax]; mov [rdi], si; add rax, rdi; ret; 
0x00000000166578: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+0x1]; ret; 
0x00000000162248: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret; 
0x00000000124917: nop [rax+rax]; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x00000000124918: nop [rax+rax]; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x000000000df326: nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df328: nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df327: nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1a; mov eax, 0x2; ret; 
0x000000000df33a: nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x000000000df33b: nop [rax+rax]; mov byte ptr [rdi+0x8], 0x1c; mov eax, 0x2; ret; 
0x0000000006f4c2: nop [rax+rax]; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000006f4c3: nop [rax+rax]; mov byte ptr [rsp+0x28], 0x20; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x000000000af897: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x000000000af898: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+0x2], dh; ret; 
0x0000000013dcdb: nop [rax+rax]; mov dword ptr [r8+0x4], 0x1; mov eax, 0x1; ret; 
0x0000000014036b: nop [rax+rax]; mov dword ptr [rdi+0x4], 0x1; mov eax, 0x1; ret; 
0x00000000087eb8: nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000087eb7: nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008949a: nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000008949b: nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000013a717: nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a718: nop [rax+rax]; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a708: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a707: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6f7: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6f8: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6e8: nop [rax+rax]; mov dword ptr [rsi], 0xc; ret; 
0x0000000013a6e7: nop [rax+rax]; mov dword ptr [rsi], 0xc; ret; 
0x0000000006f4b3: nop [rax+rax]; mov dword ptr [rsp+0x38], 0x1; jmp rax; 
0x0000000006f563: nop [rax+rax]; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000006f562: nop [rax+rax]; mov dword ptr [rsp+0x4c], 0x1; jmp rax; 
0x0000000007493b: nop [rax+rax]; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x0000000007493a: nop [rax+rax]; mov dword ptr [rsp+0x50], 0x1; jmp rax; 
0x0000000006f69b: nop [rax+rax]; mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x0000000006f69a: nop [rax+rax]; mov dword ptr [rsp+0x58], 0x1; jmp rax; 
0x0000000014b27b: nop [rax+rax]; mov dword ptr fs:[rdx], 0x16; add rsp, 0x18; ret; 
0x000000000b0e88: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b0e86: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b0e87: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x000000000b0558: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000b0555: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000b0557: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000f998b: nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb39b: nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000904e6: nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000008f65b: nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000005c2c7: nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000904e7: nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000005c2c8: nop [rax+rax]; mov eax, 0x10; ret; 
0x000000000ff217: nop [rax+rax]; mov eax, 0x10; syscall; 
0x000000000ff218: nop [rax+rax]; mov eax, 0x10; syscall; 
0x000000000fb2db: nop [rax+rax]; mov eax, 0x10a; syscall; 
0x000000000f98bb: nop [rax+rax]; mov eax, 0x10c; syscall; 
0x000000000f98ba: nop [rax+rax]; mov eax, 0x10c; syscall; 
0x0000000010a16b: nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1cb: nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e6b: nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa43b: nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa49b: nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f8b: nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1fb: nop [rax+rax]; mov eax, 0x12c; syscall; 
0x000000001000eb: nop [rax+rax]; mov eax, 0x132; syscall; 
0x0000000010a28b: nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2bb: nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2eb: nop [rax+rax]; mov eax, 0x14b; syscall; 
0x00000000087bdb: nop [rax+rax]; mov eax, 0x16; cmp rsi, 0x3fff; ja short 0x0000000000087bf0; ret; 
0x00000000087edb: nop [rax+rax]; mov eax, 0x16; ret; 
0x0000000008e567: nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000879d7: nop [rax+rax]; mov eax, 0x16; ret; 
0x0000000008e566: nop [rax+rax]; mov eax, 0x16; ret; 
0x00000000087eda: nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000879d8: nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000fa46b: nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f005b: nop [rax+rax]; mov eax, 0x18; syscall; 
0x00000000091918: nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000017e31b: nop [rax+rax]; mov eax, 0x1; jg short 0x000000000017e330; neg eax; ret; 
0x0000000009a1d7: nop [rax+rax]; mov eax, 0x1; ret; 
0x000000000d91f3: nop [rax+rax]; mov eax, 0x1; ret; 
0x0000000009a1d8: nop [rax+rax]; mov eax, 0x1; ret; 
0x0000000009a1d6: nop [rax+rax]; mov eax, 0x1; ret; 
0x0000000010a35b: nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102bbb: nop [rax+rax]; mov eax, 0x1b; syscall; 
0x00000000102b8b: nop [rax+rax]; mov eax, 0x1c; syscall; 
0x0000000010b2bb: nop [rax+rax]; mov eax, 0x1e; syscall; 
0x0000000010b2ba: nop [rax+rax]; mov eax, 0x1e; syscall; 
0x000000000fa3db: nop [rax+rax]; mov eax, 0x20; syscall; 
0x000000000fa40b: nop [rax+rax]; mov eax, 0x21; syscall; 
0x000000000d692b: nop [rax+rax]; mov eax, 0x25; syscall; 
0x000000000d7c88: nop [rax+rax]; mov eax, 0x27; syscall; 
0x000000000d7c87: nop [rax+rax]; mov eax, 0x27; syscall; 
0x0000000010aa7b: nop [rax+rax]; mov eax, 0x29; syscall; 
0x000000000ede73: nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000013ad37: nop [rax+rax]; mov eax, 0x2; ret; 
0x000000000ede72: nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000013ad38: nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000013ad36: nop [rax+rax]; mov eax, 0x2; ret; 
0x0000000010aa4a: nop [rax+rax]; mov eax, 0x30; syscall; 
0x0000000010aa4b: nop [rax+rax]; mov eax, 0x30; syscall; 
0x0000000010a44b: nop [rax+rax]; mov eax, 0x31; syscall; 
0x0000000010a5ab: nop [rax+rax]; mov eax, 0x32; syscall; 
0x0000000010a5aa: nop [rax+rax]; mov eax, 0x32; syscall; 
0x0000000010a54b: nop [rax+rax]; mov eax, 0x33; syscall; 
0x0000000010a51b: nop [rax+rax]; mov eax, 0x34; syscall; 
0x0000000008a968: nop [rax+rax]; mov eax, 0x3; ret; 
0x000000000d7368: nop [rax+rax]; mov eax, 0x3b; syscall; 
0x000000000d7366: nop [rax+rax]; mov eax, 0x3b; syscall; 
0x000000000d7367: nop [rax+rax]; mov eax, 0x3b; syscall; 
0x0000000010b1c7: nop [rax+rax]; mov eax, 0x40; syscall; 
0x0000000010b1c8: nop [rax+rax]; mov eax, 0x40; syscall; 
0x000000000fa20b: nop [rax+rax]; mov eax, 0x49; syscall; 
0x000000000fa55b: nop [rax+rax]; mov eax, 0x50; syscall; 
0x000000000fa58b: nop [rax+rax]; mov eax, 0x51; syscall; 
0x0000000005c147: nop [rax+rax]; mov eax, 0x52; syscall; 
0x0000000005c148: nop [rax+rax]; mov eax, 0x52; syscall; 
0x000000000fb3cb: nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb30b: nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f9778: nop [rax+rax]; mov eax, 0x5a; syscall; 
0x000000000f97ab: nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadcb: nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadfb: nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d673b: nop [rax+rax]; mov eax, 0x64; syscall; 
0x000000000d7ca8: nop [rax+rax]; mov eax, 0x66; syscall; 
0x00000000109feb: nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7cc8: nop [rax+rax]; mov eax, 0x68; syscall; 
0x000000000d7cb8: nop [rax+rax]; mov eax, 0x6b; syscall; 
0x000000000d7cd8: nop [rax+rax]; mov eax, 0x6c; syscall; 
0x000000000d7e8b: nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7c98: nop [rax+rax]; mov eax, 0x6e; syscall; 
0x000000000d7ebb: nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f1b: nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7ce8: nop [rax+rax]; mov eax, 0x73; syscall; 
0x000000000d7f4b: nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f7b: nop [rax+rax]; mov eax, 0x78; syscall; 
0x0000000010908b: nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109dab: nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a19b: nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000eff98: nop [rax+rax]; mov eax, 0x8e; syscall; 
0x000000000effcb: nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000efffb: nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f002b: nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f008b: nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00bb: nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00eb: nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c4b: nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c7b: nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102cab: nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109d0b: nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a0ab: nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff6b: nop [rax+rax]; mov eax, 0xa1; syscall; 
0x0000000010002b: nop [rax+rax]; mov eax, 0xa2; syscall; 
0x00000000108ff8: nop [rax+rax]; mov eax, 0xa6; syscall; 
0x00000000108ff7: nop [rax+rax]; mov eax, 0xa6; syscall; 
0x0000000010040b: nop [rax+rax]; mov eax, 0xa7; syscall; 
0x0000000010043b: nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102abb: nop [rax+rax]; mov eax, 0xa; syscall; 
0x000000000ffb38: nop [rax+rax]; mov eax, 0xaa; syscall; 
0x000000000ffb37: nop [rax+rax]; mov eax, 0xaa; syscall; 
0x000000000ffb36: nop [rax+rax]; mov eax, 0xaa; syscall; 
0x00000000108f4b: nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f1b: nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000109ddb: nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109e0b: nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000008f668: nop [rax+rax]; mov eax, 0xb; ret; 
0x0000000008f666: nop [rax+rax]; mov eax, 0xb; ret; 
0x0000000008f667: nop [rax+rax]; mov eax, 0xb; ret; 
0x0000000008b40b: nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000001054ab: nop [rax+rax]; mov eax, 0xc6; syscall; 
0x0000000010538b: nop [rax+rax]; mov eax, 0xc7; syscall; 
0x000000000ff118: nop [rax+rax]; mov eax, 0xc; syscall; 
0x000000000ff117: nop [rax+rax]; mov eax, 0xc; syscall; 
0x000000000f0187: nop [rax+rax]; mov eax, 0xcb; syscall; 
0x000000000f0188: nop [rax+rax]; mov eax, 0xcb; syscall; 
0x000000000f0186: nop [rax+rax]; mov eax, 0xcb; syscall; 
0x00000000109e3b: nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d3b: nop [rax+rax]; mov eax, 0xe4; syscall; 
0x0000000010a328: nop [rax+rax]; mov eax, 0xea; syscall; 
0x00000000093f58: nop [rax+rax]; mov eax, 0xf5; syscall; 
0x00000000109f5b: nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109fbb: nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000100587: nop [rax+rax]; mov eax, 0xffffffff; add rsp, 0x48; ret; 
0x00000000100588: nop [rax+rax]; mov eax, 0xffffffff; add rsp, 0x48; ret; 
0x0000000007d1d7: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007d1d6: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007d1d8: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x000000001230b6: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000001230b7: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000001230b8: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000080306: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000007c807: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000041e53: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000007c808: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000080307: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000082cfa: nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x00000000169958: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x00000000169957: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret; 
0x000000000f8e7b: nop [rax+rax]; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c56f8: nop [rax+rax]; mov eax, [rdi+0x14]; cmp eax, [rsi+0x14]; jne 0x00000000000c57e0; ret; 
0x0000000012f716: nop [rax+rax]; mov eax, [rdi+0x20]; ret; 
0x0000000012f717: nop [rax+rax]; mov eax, [rdi+0x20]; ret; 
0x0000000012f718: nop [rax+rax]; mov eax, [rdi+0x20]; ret; 
0x000000000c5758: nop [rax+rax]; mov eax, [rdi+0x24]; cmp eax, [rsi+0x24]; jne short 0x00000000000c57e0; ret; 
0x000000000c5698: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x000000000c5697: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x000000000c5696: nop [rax+rax]; mov eax, [rdi+0x4]; cmp eax, [rsi+0x4]; jne 0x00000000000c57e0; ret; 
0x00000000087787: nop [rax+rax]; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000087788: nop [rax+rax]; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000094a98: nop [rax+rax]; mov eax, [rip+0x160716]; test eax, eax; jne short 0x0000000000094ab0; ret; 
0x00000000041e17: nop [rax+rax]; mov eax, [rip+0x1ab39e]; ret; 
0x00000000041e18: nop [rax+rax]; mov eax, [rip+0x1ab39e]; ret; 
0x000000000d6f73: nop [rax+rax]; mov eax, edx; syscall; 
0x000000000f9c88: nop [rax+rax]; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9c87: nop [rax+rax]; mov eax, fs:[0x18]; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000af8b7: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000af8b8: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x000000000af8b5: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+0x4], dh; mov [rdi], ecx; ret; 
0x0000000012191b: nop [rax+rax]; mov edi, [rbx]; mov eax, 0x3; syscall; 
0x0000000008fcbb: nop [rax+rax]; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x0000000008fcba: nop [rax+rax]; mov edi, [rdi+0x2d0]; mov eax, 0xcb; syscall; 
0x0000000012188a: nop [rax+rax]; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x0000000012188b: nop [rax+rax]; mov edi, [rdi]; mov eax, 0x3; syscall; 
0x00000000078168: nop [rax+rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x00000000079cc3: nop [rax+rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000007497b: nop [rax+rax]; mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x0000000007497a: nop [rax+rax]; mov edx, 0x1; xor r12d, r12d; jmp rax; 
0x000000000af8ab: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000af8aa: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x0000000004167b: nop [rax+rax]; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x0000000009a868: nop [rax+rax]; mov qword ptr [r8], 0x0; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x0000000009a867: nop [rax+rax]; mov qword ptr [r8], 0x0; xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x0000000014ef98: nop [rax+rax]; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000014ef96: nop [rax+rax]; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000014ef97: nop [rax+rax]; mov qword ptr [rcx], 0x0; mov eax, 0xffffffff; ret; 
0x0000000008fc58: nop [rax+rax]; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000086078: nop [rax+rax]; mov qword ptr fs:[rbx], 0x0; pop rbx; ret; 
0x000000000fae2b: nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fb27b: nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb33b: nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x00000000109d48: nop [rax+rax]; mov r10, rcx; mov eax, 0x12d; syscall; 
0x0000000010a22b: nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010981a: nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x0000000010981b: nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000fdf8b: nop [rax+rax]; mov r10, rcx; mov eax, 0x28; syscall; 
0x0000000010aaab: nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010a57b: nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a01b: nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109efb: nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0db: nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010553b: nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054db: nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053bb: nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x0000000010544b: nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000102beb: nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x0000000010b28b: nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000010b28a: nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000109e9b: nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x000000000f95b8: nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall; 
0x0000000010917b: nop [rax+rax]; mov r10d, edx; mov eax, 0x121; mov edx, 0x8; syscall; 
0x0000000006f627: nop [rax+rax]; mov r14d, 0x1; jmp rax; 
0x0000000006f628: nop [rax+rax]; mov r14d, 0x1; jmp rax; 
0x0000000006f626: nop [rax+rax]; mov r14d, 0x1; jmp rax; 
0x00000000128adb: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x00000000128ada: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0x0; ret; 
0x000000001454b8: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000001454b7: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000007fb33: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000007fb32: nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000008eed3: nop [rax+rax]; mov r8d, 0x23; mov eax, r8d; ret; 
0x0000000008eed2: nop [rax+rax]; mov r8d, 0x23; mov eax, r8d; ret; 
0x00000000074923: nop [rax+rax]; mov r9d, 0x1; jmp rax; 
0x00000000074922: nop [rax+rax]; mov r9d, 0x1; jmp rax; 
0x0000000007328b: nop [rax+rax]; mov r9d, 0x1; xor r10d, r10d; jmp rax; 
0x0000000007328a: nop [rax+rax]; mov r9d, 0x1; xor r10d, r10d; jmp rax; 
0x000000000e06f6: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000e06f8: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000e06f7: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret; 
0x000000000c5fd8: nop [rax+rax]; mov rax, 0x2; ret; 
0x000000000c5fe8: nop [rax+rax]; mov rax, 0x3; ret; 
0x000000000c5ff8: nop [rax+rax]; mov rax, 0x4; ret; 
0x000000000c6008: nop [rax+rax]; mov rax, 0x5; ret; 
0x000000000c6018: nop [rax+rax]; mov rax, 0x6; ret; 
0x000000000c6028: nop [rax+rax]; mov rax, 0x7; ret; 
0x00000000040583: nop [rax+rax]; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret; 
0x000000000904f6: nop [rax+rax]; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000904f8: nop [rax+rax]; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000904f7: nop [rax+rax]; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x000000000c69a7: nop [rax+rax]; mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x000000000c69a6: nop [rax+rax]; mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x000000000c69a8: nop [rax+rax]; mov rax, 0xffffffffffffffff; add rsp, 0x18; ret; 
0x00000000084d86: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000084d88: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000084d87: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000014c4a8: nop [rax+rax]; mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x0000000014c523: nop [rax+rax]; mov rax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x0000000008567b: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x0000000008567a: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x000000000856c7: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x000000000856c8: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x0000000014c663: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x0000000014c662: nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x58]; 
0x00000000085713: nop [rax+rax]; mov rax, [rax+0x370]; mov rax, [rax+0x8]; jmp rax; 
0x000000001055c3: nop [rax+rax]; mov rax, [rax+0x60]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000013f268: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f266: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013f267: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000145458: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000145457: nop [rax+rax]; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x00000000139908: nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139907: nop [rax+rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000142dd8: nop [rax+rax]; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000142dd7: nop [rax+rax]; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000142dd6: nop [rax+rax]; mov rax, [rbp+0x8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax]; 
0x00000000139017: nop [rax+rax]; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000139018: nop [rax+rax]; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000169968: nop [rax+rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000008775b: nop [rax+rax]; mov rax, [rdi+0x10]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000087838: nop [rax+rax]; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000087837: nop [rax+rax]; mov rax, [rdi+0x18]; mov [rsi], rax; xor eax, eax; ret; 
0x00000000139158: nop [rax+rax]; mov rax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10]; 
0x0000000009304b: nop [rax+rax]; mov rax, [rdi+0x78]; ret; 
0x0000000014487b: nop [rax+rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x0000000014487a: nop [rax+rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x18]; 
0x000000001454cb: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000001454ca: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000001454d6: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x000000001454d8: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x00000000144a2b: nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x8]; 
0x00000000144fd3: nop [rax+rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x18]; call qword ptr [rax]; 
0x00000000144a8b: nop [rax+rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000144aeb: nop [rax+rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000009485b: nop [rax+rax]; mov rax, [rdi]; cmp rax, 0x408; jbe short 0x0000000000094870; ret; 
0x000000000948cb: nop [rax+rax]; mov rax, [rdi]; cmp rax, 0xa0; jbe short 0x00000000000948e0; ret; 
0x000000000948b8: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158ade], rax; ret; 
0x0000000009484b: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158afe], rax; ret; 
0x00000000094837: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094838: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094835: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x158b16], rax; ret; 
0x00000000094807: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x00000000094805: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x00000000094808: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1609a3], eax; ret; 
0x0000000008bf7a: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x0000000008bf7b: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x1612f6], rax; ret; 
0x000000000862eb: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862ea: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f83], eax; ret; 
0x000000000862db: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862da: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f8f], eax; ret; 
0x000000000862cb: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x000000000862ca: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x166f9b], eax; ret; 
0x0000000009481a: nop [rax+rax]; mov rax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x0000000009481b: nop [rax+rax]; mov rax, [rdi]; mov dword ptr [rip+0x158b47], 0x1; mov [rip+0x158b0c], rax; ret; 
0x000000000d2263: nop [rax+rax]; mov rax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d2262: nop [rax+rax]; mov rax, [rip+0x11aba1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000d21f3: nop [rax+rax]; mov rax, [rip+0x11ac11]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000009a028: nop [rax+rax]; mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x0000000009a027: nop [rax+rax]; mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x00000000093efb: nop [rax+rax]; mov rax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093efa: nop [rax+rax]; mov rax, [rip+0x158f09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a7a: nop [rax+rax]; mov rax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000093a7b: nop [rax+rax]; mov rax, [rip+0x159389]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000091032: nop [rax+rax]; mov rax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000091033: nop [rax+rax]; mov rax, [rip+0x15bdd1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c13: nop [rax+rax]; mov rax, [rip+0x1ab1f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000004140b: nop [rax+rax]; mov rax, [rip+0x1ab9f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041398: nop [rax+rax]; mov rax, [rip+0x1aba69]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000003f846: nop [rax+rax]; mov rax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003f848: nop [rax+rax]; mov rax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000003f847: nop [rax+rax]; mov rax, [rip+0x1ad5b9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x0000000002d66b: nop [rax+rax]; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002deb8: nop [rax+rax]; mov rax, [rip+0x1c1839]; ret; 
0x0000000002dea8: nop [rax+rax]; mov rax, [rip+0x1c1841]; ret; 
0x0000000002dea7: nop [rax+rax]; mov rax, [rip+0x1c1841]; ret; 
0x0000000014ef48: nop [rax+rax]; mov rax, [rip+0x9deb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ec08: nop [rax+rax]; mov rax, [rip+0x9e1f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d05a: nop [rax+rax]; mov rax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000014d05b: nop [rax+rax]; mov rax, [rip+0x9fda9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000001426d3: nop [rax+rax]; mov rax, [rip+0xaa751]; pop rbx; ret; 
0x0000000014252b: nop [rax+rax]; mov rax, [rip+0xaa891]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000128f3b: nop [rax+rax]; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000117fbb: nop [rax+rax]; mov rax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x00000000117fba: nop [rax+rax]; mov rax, [rip+0xd4e89]; add rax, fs:[0x0]; ret; 
0x0000000010a38b: nop [rax+rax]; mov rax, [rip+0xe2a79]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000109a48: nop [rax+rax]; mov rax, [rip+0xe33b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a47: nop [rax+rax]; mov rax, [rip+0xe33b9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099da: nop [rax+rax]; mov rax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001099db: nop [rax+rax]; mov rax, [rip+0xe3429]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109982: nop [rax+rax]; mov rax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109983: nop [rax+rax]; mov rax, [rip+0xe3481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109932: nop [rax+rax]; mov rax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109933: nop [rax+rax]; mov rax, [rip+0xe34d1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e3: nop [rax+rax]; mov rax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001098e2: nop [rax+rax]; mov rax, [rip+0xe3521]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109743: nop [rax+rax]; mov rax, [rip+0xe36c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109713: nop [rax+rax]; mov rax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109712: nop [rax+rax]; mov rax, [rip+0xe36f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104e52: nop [rax+rax]; mov rax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000104e53: nop [rax+rax]; mov rax, [rip+0xe7fb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000001038ab: nop [rax+rax]; mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000001038aa: nop [rax+rax]; mov rax, [rip+0xe9559]; mov dword ptr fs:[rax], 0x16; ret; 
0x0000000010067a: nop [rax+rax]; mov rax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000010067b: nop [rax+rax]; mov rax, [rip+0xec789]; mov dword ptr fs:[rax], 0x0; mov rax, [rsp-0x50]; ret; 
0x0000000010051b: nop [rax+rax]; mov rax, [rip+0xec8e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fea03: nop [rax+rax]; mov rax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fea02: nop [rax+rax]; mov rax, [rip+0xee401]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fd9ba: nop [rax+rax]; mov rax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fd9bb: nop [rax+rax]; mov rax, [rip+0xef449]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000fc21b: nop [rax+rax]; mov rax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fc21a: nop [rax+rax]; mov rax, [rip+0xf0be9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9672: nop [rax+rax]; mov rax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f9673: nop [rax+rax]; mov rax, [rip+0xf3791]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000f92b8: nop [rax+rax]; mov rax, [rip+0xf3b49]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000003a95b: nop [rax+rax]; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000008fca8: nop [rax+rax]; mov rax, fs:[0x10]; ret; 
0x0000000008fca6: nop [rax+rax]; mov rax, fs:[0x10]; ret; 
0x0000000008fca7: nop [rax+rax]; mov rax, fs:[0x10]; ret; 
0x00000000055762: nop [rax+rax]; mov rax, r10; add rsp, 0x20; ret; 
0x00000000055763: nop [rax+rax]; mov rax, r10; add rsp, 0x20; ret; 
0x0000000011620b: nop [rax+rax]; mov rax, r8; ret; 
0x000000000b0b1b: nop [rax+rax]; mov rax, rdi; ret; 
0x00000000084df5: nop [rax+rax]; mov rax, rdi; ret; 
0x00000000084df8: nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b0b1a: nop [rax+rax]; mov rax, rdi; ret; 
0x00000000084df7: nop [rax+rax]; mov rax, rdi; ret; 
0x00000000177108: nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000177107: nop [rax+rax]; mov rax, rdi; vzeroupper; ret; 
0x000000000af8f7: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x000000000af8f8: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+0x8], dh; mov [rdi], rcx; ret; 
0x00000000085873: nop [rax+rax]; mov rdi, [rbp+0x10]; call qword ptr [rbx+0x358]; 
0x00000000085903: nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x358]; 
0x00000000085902: nop [rax+rax]; mov rdi, rax; call qword ptr [rbx+0x358]; 
0x0000000009a158: nop [rax+rax]; mov rdi, rbp; call rax; 
0x0000000009a157: nop [rax+rax]; mov rdi, rbp; call rax; 
0x00000000143038: nop [rax+rax]; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x00000000143037: nop [rax+rax]; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18]; 
0x000000000af8eb: nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x000000000a15eb: nop [rax+rax]; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x000000000a146b: nop [rax+rax]; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret; 
0x0000000007077b: nop [rax+rax]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000007077a: nop [rax+rax]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000004241b: nop [rax+rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx; 
0x0000000014eb08: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014eb06: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x0000000014eb07: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall; 
0x000000000424e3: nop [rax+rax]; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx; 
0x000000000424e2: nop [rax+rax]; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx; 
0x000000000c752b: nop [rax+rax]; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall; 
0x000000000b0928: nop [rax+rax]; movdqu [rdi-0x1], xmm0; ret; 
0x000000000b0936: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000b0937: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x000000000b0938: nop [rax+rax]; movdqu [rdi], xmm0; ret; 
0x0000000013dc43: nop [rax+rax]; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+0x8], xmm0; ret; 
0x0000000014033b: nop [rax+rax]; movdqu xmm1, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x0000000017d82b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret; 
0x0000000017d81b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret; 
0x0000000017d80b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret; 
0x0000000017d7fb: nop [rax+rax]; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret; 
0x0000000017d7eb: nop [rax+rax]; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret; 
0x0000000017d7db: nop [rax+rax]; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret; 
0x00000000179458: nop [rax+rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000f859b: nop [rax+rax]; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x000000000f859a: nop [rax+rax]; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret; 
0x000000000a4938: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000a4937: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001888c8: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x000000001888c7: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000018b2a7: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000018b2a8: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000018b2a5: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000017606b: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x0000000017606a: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret; 
0x00000000187e5b: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x00000000187e5a: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x0000000018a2fb: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000018a2fa: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+0x2], 0x0; ret; 
0x0000000018a226: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000018a227: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x0000000018a228: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000175417: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x00000000175416: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x00000000175418: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x000000000f9981: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000f9982: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000f9983: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall; 
0x000000000fb392: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb391: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb393: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall; 
0x000000000fb2d1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x000000000fb2d3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x000000000fb2d2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall; 
0x0000000010a162: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a163: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a161: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall; 
0x0000000010a1c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x0000000010a1c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x0000000010a1c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall; 
0x00000000109e61: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall; 
0x00000000109e62: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall; 
0x00000000109e63: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall; 
0x000000000fa431: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa433: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa432: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall; 
0x000000000fa492: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall; 
0x000000000fa493: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall; 
0x000000000fa491: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall; 
0x00000000109f83: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall; 
0x00000000109f82: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall; 
0x00000000109f81: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall; 
0x0000000010a1f2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a1f3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a1f1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall; 
0x0000000010a281: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a282: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a283: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall; 
0x0000000010a2b1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2b2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2b3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall; 
0x0000000010a2e3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x0000000010a2e2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x0000000010a2e1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall; 
0x000000000fa461: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000fa462: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000fa463: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall; 
0x000000000f0053: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall; 
0x000000000f0051: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall; 
0x000000000f0052: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall; 
0x0000000010a353: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x0000000010a352: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x0000000010a351: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b4; syscall; 
0x00000000102bb3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x00000000102bb2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x00000000102bb1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall; 
0x000000000fa402: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall; 
0x000000000fa401: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall; 
0x000000000fa403: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall; 
0x0000000010aa71: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010aa73: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010aa72: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall; 
0x0000000010a541: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall; 
0x0000000010a543: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall; 
0x0000000010a542: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall; 
0x000000000fa582: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fa581: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fa583: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall; 
0x000000000fb3c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb3c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb3c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall; 
0x000000000fb302: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000fb301: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000fb303: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall; 
0x000000000f97a3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000f97a2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000f97a1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall; 
0x000000000fadc3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadc2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadc1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall; 
0x000000000fadf1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000fadf3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000fadf2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall; 
0x000000000d6731: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall; 
0x000000000d6732: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall; 
0x000000000d6733: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall; 
0x00000000109fe2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall; 
0x00000000109fe1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall; 
0x00000000109fe3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall; 
0x000000000d7e83: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7e82: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7e81: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall; 
0x000000000d7eb3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7eb2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7eb1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; 
0x000000000d7f13: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f12: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f11: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall; 
0x000000000d7f43: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f41: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f42: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall; 
0x000000000d7f71: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall; 
0x000000000d7f72: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall; 
0x000000000d7f73: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall; 
0x00000000109083: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109081: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109082: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall; 
0x00000000109da2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x00000000109da1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x00000000109da3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall; 
0x0000000010a191: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall; 
0x0000000010a192: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall; 
0x0000000010a193: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall; 
0x000000000effc1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000effc2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000effc3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall; 
0x000000000efff1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000efff2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000efff3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall; 
0x000000000f0022: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f0021: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f0023: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall; 
0x000000000f0083: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f0082: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f0081: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall; 
0x000000000f00b3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00b2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00b1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall; 
0x000000000f00e3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall; 
0x000000000f00e1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall; 
0x000000000f00e2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall; 
0x00000000102c41: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c42: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c43: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall; 
0x00000000102c72: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102c73: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102c71: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall; 
0x00000000102ca1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000102ca3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000102ca2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall; 
0x00000000109d02: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x00000000109d01: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x00000000109d03: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall; 
0x0000000010a0a1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x0000000010a0a3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x0000000010a0a2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall; 
0x000000000fff63: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x000000000fff61: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x000000000fff62: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall; 
0x00000000100401: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x00000000100403: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x00000000100402: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall; 
0x00000000100433: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000100432: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000100431: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall; 
0x00000000102ab2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000102ab3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000102ab1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall; 
0x00000000108f43: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f41: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f42: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall; 
0x00000000108f12: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000108f13: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000108f11: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall; 
0x00000000109dd2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109dd3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109dd1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall; 
0x00000000109e03: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x00000000109e01: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x00000000109e02: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall; 
0x0000000010a312: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; 
0x0000000010a311: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; 
0x0000000010a313: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; 
0x000000001054a1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x000000001054a3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x000000001054a2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall; 
0x00000000105383: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000105381: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000105382: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall; 
0x00000000109e32: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109e31: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109e33: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall; 
0x00000000109d32: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109d33: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109d31: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; 
0x00000000109f51: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109f52: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109f53: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall; 
0x00000000109fb1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000109fb2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000109fb3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall; 
0x00000000041673: nop [rax+rax]; nop [rax+rax]; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000041671: nop [rax+rax]; nop [rax+rax]; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x00000000041672: nop [rax+rax]; nop [rax+rax]; mov esi, 0x8; mov eax, 0x7f; syscall; 
0x000000000fae23: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fae21: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fae22: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000fb272: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb271: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb273: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000fb331: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000fb332: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000fb333: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x0000000010a223: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010a221: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010a222: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x0000000010aaa2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010aaa3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010aaa1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x0000000010a571: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a572: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a573: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x0000000010a012: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x0000000010a013: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x0000000010a011: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000109ef3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000109ef1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000109ef2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x0000000010a0d3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010a0d2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall; 
0x0000000010a0d1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000105533: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000105531: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000105532: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000001054d2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001054d3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001054d1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000001053b2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000001053b1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000001053b3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000105443: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000105442: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000105441: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000102be1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000102be3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000102be2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000109e92: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000109e91: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000109e93: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000002d661: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002d662: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x0000000002d663: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x1bf799]; add rax, fs:[0x0]; ret; 
0x00000000128f31: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000128f33: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000128f32: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xc40a1]; mov rax, fs:[rax]; ret; 
0x00000000138f22: nop [rax+rax]; nop [rax+rax]; ret; 
0x00000000138f21: nop [rax+rax]; nop [rax+rax]; ret; 
0x00000000138f23: nop [rax+rax]; nop [rax+rax]; ret; 
0x00000000188c6e: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188c6d: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188c6b: nop [rax+rax]; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x000000000a4e34: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000a4e35: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000a4e32: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x00000000164201: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x00000000164204: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x00000000164203: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret; 
0x000000000b0843: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000b0841: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000b0844: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret; 
0x000000000b0544: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000b0543: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000b0541: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x000000000946e4: nop [rax+rax]; nop [rax]; mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x000000000946e1: nop [rax+rax]; nop [rax]; mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x000000000946e3: nop [rax+rax]; nop [rax]; mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x000000001091b4: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall; 
0x000000001091b2: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall; 
0x000000001091b3: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall; 
0x00000000138d91: nop [rax+rax]; nop [rax]; mov eax, 0x1; ret; 
0x00000000138d93: nop [rax+rax]; nop [rax]; mov eax, 0x1; ret; 
0x00000000138d94: nop [rax+rax]; nop [rax]; mov eax, 0x1; ret; 
0x000000000c9b82: nop [rax+rax]; nop [rax]; mov eax, 0x26; syscall; 
0x000000000c9b84: nop [rax+rax]; nop [rax]; mov eax, 0x26; syscall; 
0x000000000c9b83: nop [rax+rax]; nop [rax]; mov eax, 0x26; syscall; 
0x000000000fe595: nop [rax+rax]; nop [rax]; mov eax, 0x3; syscall; 
0x000000000fe594: nop [rax+rax]; nop [rax]; mov eax, 0x3; syscall; 
0x000000000fe593: nop [rax+rax]; nop [rax]; mov eax, 0x3; syscall; 
0x000000001012a4: nop [rax+rax]; nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012a3: nop [rax+rax]; nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012a2: nop [rax+rax]; nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012d2: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall; 
0x000000001012d4: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall; 
0x000000001012d3: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall; 
0x000000000fad94: nop [rax+rax]; nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fad95: nop [rax+rax]; nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fad93: nop [rax+rax]; nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fed63: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall; 
0x000000000fed62: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall; 
0x000000000fed64: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall; 
0x000000000f96b3: nop [rax+rax]; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000f96b2: nop [rax+rax]; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000f96b4: nop [rax+rax]; nop [rax]; mov eax, 0x8a; syscall; 
0x000000000ff073: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall; 
0x000000000ff072: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall; 
0x000000000ff074: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall; 
0x00000000109cd4: nop [rax+rax]; nop [rax]; mov eax, 0x9e; syscall; 
0x00000000109cd2: nop [rax+rax]; nop [rax]; mov eax, 0x9e; syscall; 
0x00000000109cd3: nop [rax+rax]; nop [rax]; mov eax, 0x9e; syscall; 
0x000000000fff33: nop [rax+rax]; nop [rax]; mov eax, 0xa3; syscall; 
0x000000000fff34: nop [rax+rax]; nop [rax]; mov eax, 0xa3; syscall; 
0x000000000fff35: nop [rax+rax]; nop [rax]; mov eax, 0xa3; syscall; 
0x00000000109022: nop [rax+rax]; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000109024: nop [rax+rax]; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000109023: nop [rax+rax]; nop [rax]; mov eax, 0xbb; syscall; 
0x00000000099e23: nop [rax+rax]; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000099e24: nop [rax+rax]; nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000099e21: nop [rax+rax]; nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000007fb44: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret; 
0x0000000007fb42: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret; 
0x0000000007fb43: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret; 
0x00000000159141: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000159144: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x00000000159143: nop [rax+rax]; nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x0000000005c174: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000005c173: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000005c172: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000109783: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000109782: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000109784: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000fdb65: nop [rax+rax]; nop [rax]; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x000000000fdb64: nop [rax+rax]; nop [rax]; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x000000000fdb63: nop [rax+rax]; nop [rax]; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000041463: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x00000000041461: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x00000000041464: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x00000000145703: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x00000000145701: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x00000000145704: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x00000000084dc3: nop [rax+rax]; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x00000000084dc4: nop [rax+rax]; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x00000000084dc1: nop [rax+rax]; nop [rax]; mov rax, [rip+0x169889]; ret; 
0x0000000003a9c3: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a9c4: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a9c1: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a9a1: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x0000000003a9a3: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x0000000003a9a4: nop [rax+rax]; nop [rax]; mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x000000000af1f4: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x000000000af1f1: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x000000000af1f3: nop [rax+rax]; nop [rax]; mov rax, rdi; ret; 
0x00000000153411: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000153413: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x00000000153414: nop [rax+rax]; nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x000000001592d4: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000001592d1: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000001592d3: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x00000000159251: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000159254: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000159253: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000086621: nop [rax+rax]; nop [rax]; ret; 
0x00000000086624: nop [rax+rax]; nop [rax]; ret; 
0x00000000086623: nop [rax+rax]; nop [rax]; ret; 
0x00000000188e12: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x00000000188e15: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x00000000188e14: nop [rax+rax]; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000000a5164: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000a5162: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000089462: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000089463: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000a5165: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000089464: nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x00000000174205: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000178941: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000174204: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000174202: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000178943: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000178944: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000010b312: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x0000000010b314: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x0000000010b313: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000145a46: nop [rax+rax]; nop; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000145a45: nop [rax+rax]; nop; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x00000000145a47: nop [rax+rax]; nop; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000017c4d7: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4d6: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4d4: nop [rax+rax]; nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4c7: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x0000000017c4c6: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x0000000017c4c4: nop [rax+rax]; nop; lea rax, [rdi]; ret; 
0x00000000164226: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x00000000164224: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x00000000164227: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x00000000164284: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x00000000164287: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x00000000164286: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x000000000b0866: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x000000000b0867: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x000000000b0864: nop [rax+rax]; nop; mov [rdi-0x1], edx; ret; 
0x00000000187f77: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x00000000187f74: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x00000000187f76: nop [rax+rax]; nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000b0877: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000b0876: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000b0874: nop [rax+rax]; nop; mov [rdi], edx; ret; 
0x000000000b08c7: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000b08c4: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000b08c6: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x00000000143895: nop [rax+rax]; nop; mov eax, 0x2; ret; 
0x00000000143897: nop [rax+rax]; nop; mov eax, 0x2; ret; 
0x00000000143896: nop [rax+rax]; nop; mov eax, 0x2; ret; 
0x0000000010b126: nop [rax+rax]; nop; mov eax, 0x44; syscall; 
0x0000000010b125: nop [rax+rax]; nop; mov eax, 0x44; syscall; 
0x0000000010b127: nop [rax+rax]; nop; mov eax, 0x44; syscall; 
0x00000000041a96: nop [rax+rax]; nop; mov eax, 0x83; syscall; 
0x00000000041a95: nop [rax+rax]; nop; mov eax, 0x83; syscall; 
0x00000000041a97: nop [rax+rax]; nop; mov eax, 0x83; syscall; 
0x00000000102a87: nop [rax+rax]; nop; mov eax, 0xb; syscall; 
0x00000000102a85: nop [rax+rax]; nop; mov eax, 0xb; syscall; 
0x00000000102a86: nop [rax+rax]; nop; mov eax, 0xb; syscall; 
0x0000000014ef87: nop [rax+rax]; nop; mov eax, 0xffffffff; ret; 
0x0000000014ef84: nop [rax+rax]; nop; mov eax, 0xffffffff; ret; 
0x0000000014ef86: nop [rax+rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000084af7: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000084af6: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000084af4: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x00000000117d16: nop [rax+rax]; nop; mov eax, edi; rol ax, 0x8; ret; 
0x00000000117d17: nop [rax+rax]; nop; mov eax, edi; rol ax, 0x8; ret; 
0x00000000117d15: nop [rax+rax]; nop; mov eax, edi; rol ax, 0x8; ret; 
0x000000000f90d6: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0x142; syscall; 
0x000000000f90d5: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0x142; syscall; 
0x000000000f90d7: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0x142; syscall; 
0x00000000105326: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000105327: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000105325: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x000000000f92f7: nop [rax+rax]; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000f92f6: nop [rax+rax]; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000f92f5: nop [rax+rax]; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000c5fc6: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000c5fc7: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000c5fc4: nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000861c6: nop [rax+rax]; nop; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000000861c7: nop [rax+rax]; nop; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000000861c4: nop [rax+rax]; nop; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x000000001763c6: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x000000001763c4: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x000000001763c7: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret; 
0x00000000040fc7: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000040fc6: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000040fc5: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 0x8; ret; 
0x00000000040a86: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x00000000040a87: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x00000000040a85: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x00000000115cd6: nop [rax+rax]; nop; ret; 
0x00000000115cd7: nop [rax+rax]; nop; ret; 
0x00000000115cd5: nop [rax+rax]; nop; ret; 
0x00000000145a74: nop [rax+rax]; nop; xor eax, eax; ret; 
0x00000000145a77: nop [rax+rax]; nop; xor eax, eax; ret; 
0x00000000145a76: nop [rax+rax]; nop; xor eax, eax; ret; 
0x0000000017c306: nop [rax+rax]; nop; xor rax, rax; ret; 
0x0000000017c307: nop [rax+rax]; nop; xor rax, rax; ret; 
0x0000000017c304: nop [rax+rax]; nop; xor rax, rax; ret; 
0x00000000081196: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000081198: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000081197: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000087a9b: nop [rax+rax]; or dword ptr [rdi+0x8], 0x40; xor eax, eax; mov [rdi+0x4], esi; ret; 
0x0000000008e59b: nop [rax+rax]; or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x0000000013950b: nop [rax+rax]; pop rbp; ret; 
0x000000000d6f28: nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall; 
0x000000000d6f27: nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall; 
0x000000000d6f26: nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall; 
0x000000000388c7: nop [rax+rax]; ret; 
0x000000000388c8: nop [rax+rax]; ret; 
0x0000000005cbe7: nop [rax+rax]; ret; 
0x0000000006451b: nop [rax+rax]; ret; 
0x00000000086822: nop [rax+rax]; ret; 
0x000000000388c6: nop [rax+rax]; ret; 
0x0000000007e343: nop [rax+rax]; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e342: nop [rax+rax]; shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e403: nop [rax+rax]; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e402: nop [rax+rax]; shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x0000000014a4d6: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x0000000014a4d7: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x0000000014a4d8: nop [rax+rax]; sub ecx, 0x5; cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x00000000084382: nop [rax+rax]; sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x00000000084383: nop [rax+rax]; sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x0000000007b763: nop [rax+rax]; sub rcx, rax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000007b762: nop [rax+rax]; sub rcx, rax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000010960b: nop [rax+rax]; test edx, edx; je short 0x0000000000109640; mov eax, 0x145; syscall; 
0x00000000133a8a: nop [rax+rax]; test rax, rax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x00000000133a8b: nop [rax+rax]; test rax, rax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x000000000c73a8: nop [rax+rax]; test rsi, rsi; jne short 0x00000000000c73e0; mov eax, 0x60; syscall; 
0x00000000185ee5: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000185ee8: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000185ee7: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000018d127: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d128: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d13b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d13a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d14b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d14a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d15b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018d15a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000188ca8: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188ca6: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188ca7: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185efb: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185d6b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185d6a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188c78: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188c77: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d7a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d7b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188c76: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d8b: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x00000000185d8a: nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000001898fb: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x0000000018990b: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x0000000018991b: nop [rax+rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x000000001756d8: nop [rax+rax]; vzeroupper; ret; 
0x000000001756d7: nop [rax+rax]; vzeroupper; ret; 
0x00000000164213: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x00000000164215: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x00000000164216: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret; 
0x00000000164245: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x00000000164246: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x00000000164243: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000b0855: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000b0856: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000b0853: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret; 
0x000000000b0883: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000b0886: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000b0885: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x00000000090454: nop [rax+rax]; xchg ax, ax; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x00000000090456: nop [rax+rax]; xchg ax, ax; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x00000000090455: nop [rax+rax]; xchg ax, ax; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x000000000af883: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000af886: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x000000000af885: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a254: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall; 
0x0000000010a255: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall; 
0x0000000010a256: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000f9df4: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall; 
0x000000000f9df6: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall; 
0x000000000f9df5: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall; 
0x000000000c9b55: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x000000000c9b54: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x000000000c9b56: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x00000000093a95: nop [rax+rax]; xchg ax, ax; mov eax, 0x3; syscall; 
0x00000000093a96: nop [rax+rax]; xchg ax, ax; mov eax, 0x3; syscall; 
0x00000000093a94: nop [rax+rax]; xchg ax, ax; mov eax, 0x3; syscall; 
0x0000000010b2e5: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall; 
0x0000000010b2e4: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall; 
0x0000000010b2e6: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall; 
0x000000000fb365: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb366: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb364: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2a6: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall; 
0x000000000fb2a5: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall; 
0x000000000fb2a4: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a136: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall; 
0x0000000010a135: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall; 
0x0000000010a134: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall; 
0x00000000109056: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109055: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109054: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109d75: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall; 
0x00000000109d76: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall; 
0x00000000109d74: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall; 
0x00000000109264: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall; 
0x00000000109266: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall; 
0x00000000109265: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall; 
0x000000000ff034: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall; 
0x000000000ff036: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall; 
0x000000000ff035: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall; 
0x00000000102c14: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall; 
0x00000000102c16: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall; 
0x00000000102c15: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall; 
0x000000001003d5: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall; 
0x000000001003d6: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall; 
0x000000001003d4: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall; 
0x00000000109ec4: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall; 
0x00000000109ec5: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall; 
0x00000000109ec6: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a075: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall; 
0x0000000010a074: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall; 
0x0000000010a076: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall; 
0x00000000105414: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall; 
0x00000000105415: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall; 
0x00000000105416: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall; 
0x00000000105476: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall; 
0x00000000105474: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall; 
0x00000000105475: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall; 
0x00000000105355: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall; 
0x00000000105356: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall; 
0x00000000105354: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall; 
0x00000000105504: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000105505: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000105506: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f24: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall; 
0x00000000109f26: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall; 
0x00000000109f25: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall; 
0x00000000084da6: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x00000000084da5: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x00000000084da3: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000fe826: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000fe824: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000fe825: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000d2e75: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret; 
0x000000000d2e76: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret; 
0x000000000d2e74: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret; 
0x00000000117d05: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret; 
0x00000000117d04: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret; 
0x00000000117d06: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret; 
0x000000000fe7c4: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000fe7c6: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000fe7c5: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000010a046: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a044: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a045: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a105: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000010a106: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000010a104: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053e6: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001053e5: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000001053e4: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000084de3: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x00000000084de6: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x00000000084de5: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x0000000018b645: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x0000000018b643: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x0000000018b646: nop [rax+rax]; xchg ax, ax; mov rax, rdi; ret; 
0x00000000040764: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000040765: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000040766: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000002d154: nop [rax+rax]; xchg ax, ax; ret; 
0x0000000002d156: nop [rax+rax]; xchg ax, ax; ret; 
0x0000000002d155: nop [rax+rax]; xchg ax, ax; ret; 
0x0000000018dc05: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dc06: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dc03: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de76: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de73: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de75: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000187233: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000187235: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000187236: nop [rax+rax]; xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x000000000b38c6: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000b38c5: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000b38c3: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x000000000c4b16: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000c4b13: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000c4b15: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000c5a76: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x000000000c5a75: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x000000000c5a73: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret; 
0x000000000ed548: nop [rax+rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000001017f3: nop [rax+rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000001017f2: nop [rax+rax]; xor eax, eax; add rsp, 0x8; ret; 
0x0000000003a7f6: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000003a7f8: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000003a7f7: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000008a98b: nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000918da: nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000100913: nop [rax+rax]; xor eax, eax; pop rbp; ret; 
0x00000000043513: nop [rax+rax]; xor eax, eax; ret; 
0x00000000084d98: nop [rax+rax]; xor eax, eax; ret; 
0x0000000008fc27: nop [rax+rax]; xor eax, eax; ret; 
0x000000000c0b36: nop [rax+rax]; xor eax, eax; ret; 
0x000000000c0b37: nop [rax+rax]; xor eax, eax; ret; 
0x00000000043512: nop [rax+rax]; xor eax, eax; ret; 
0x000000000fe79b: nop [rax+rax]; xor eax, eax; syscall; 
0x000000000fe79a: nop [rax+rax]; xor eax, eax; syscall; 
0x0000000007fb58: nop [rax+rax]; xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x000000001701b5: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000001701b7: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x000000001701b8: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x0000000016fe7b: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x0000000016fe7a: nop [rax+rax]; xor eax, eax; vzeroupper; ret; 
0x0000000002d1f8: nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000002d1f6: nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000002d1f7: nop [rax+rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000b4ce6: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x0000000009ad63: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x0000000009ad62: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x000000000b4ce7: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x000000000b4ce8: nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x00000000128a3b: nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x00000000128a3a: nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x0000000006dff2: nop [rax+rax]; xor r11d, r11d; mov r14d, 0x1; jmp rax; 
0x0000000006dff3: nop [rax+rax]; xor r11d, r11d; mov r14d, 0x1; jmp rax; 
0x0000000006f638: nop [rax+rax]; xor r13d, r13d; mov edx, 0x1; jmp rax; 
0x00000000145758: nop [rax+rax]; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000011771b: nop [rax+rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000116c58: nop [rax+rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000df1c7: nop [rax+rax]; xor r9d, r9d; mov eax, r9d; ret; 
0x000000000df1c8: nop [rax+rax]; xor r9d, r9d; mov eax, r9d; ret; 
0x000000000c57eb: nop [rax+rax]; xor rax, rax; ret; 
0x000000000c5d88: nop [rax+rax]; xor rax, rax; ret; 
0x000000000c5d87: nop [rax+rax]; xor rax, rax; ret; 
0x000000000c5d85: nop [rax+rax]; xor rax, rax; ret; 
0x000000000c57ea: nop [rax+rax]; xor rax, rax; ret; 
0x00000000145b39: nop [rax]; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x000000000c5f9c: nop [rax]; add rax, 0x1; ret; 
0x00000000128d9d: nop [rax]; add rsp, 0x100; xor eax, eax; pop rbp; ret; 
0x00000000144a79: nop [rax]; add rsp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x0000000013f049: nop [rax]; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000013c209: nop [rax]; add rsp, 0x30; mov eax, 0x3; pop rbx; ret; 
0x00000000192fb5: nop [rax]; add rsp, 0x8; ret; 
0x00000000040a7c: nop [rax]; addss xmm0, xmm0; ret; 
0x00000000087ac5: nop [rax]; and dword ptr [rdi+0x8], 0xfffffffb; xor eax, eax; ret; 
0x000000000806dd: nop [rax]; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000017aa5c: nop [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x0000000004090c: nop [rax]; and esi, 0x80000000; movd xmm0, esi; ret; 
0x000000000a4bf9: nop [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000a4c19: nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a4e3d: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x000000000a4bec: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret; 
0x0000000017060d: nop [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000a523d: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret; 
0x000000000a50d9: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret; 
0x000000000a50e9: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret; 
0x0000000018b69d: nop [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000000d973d: nop [rax]; call qword ptr [r12+0x28]; 
0x0000000014c8b4: nop [rax]; call r14; 
0x0000000013f7cd: nop [rax]; cmp dword ptr [rsi], 0x2; je short 0x000000000013f7e0; mov eax, 0x1; ret; 
0x000000001144ac: nop [rax]; cmp edi, 0x56; je short 0x00000000001144c0; mov eax, 0x7; ret; 
0x0000000008e58d: nop [rax]; cmp esi, 0x1; je short 0x000000000008e5a0; mov eax, 0x16; ret; 
0x000000000d208d: nop [rax]; cmp esi, 0x1; je short 0x00000000000d20a0; xor eax, eax; ret; 
0x00000000083a89: nop [rax]; cmp qword ptr [rdi+0x38], 0x0; je short 0x0000000000083aa0; ret; 
0x000000000d222d: nop [rax]; cmp qword ptr [rsi+0x8], 0x3b9ac9ff; ja short 0x00000000000d2268; mov eax, 0xe3; syscall; 
0x000000000df22d: nop [rax]; lea r9d, [rcx+0x1]; mov eax, r9d; ret; 
0x000000000b4f09: nop [rax]; lea rax, [rip+0xd6c09]; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f79: nop [rax]; lea rax, [rip+0xd6e19]; test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b5169: nop [rax]; lea rax, [rip+0xd7349]; test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b5269: nop [rax]; lea rax, [rip+0xd7c19]; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000a16f9: nop [rax]; lea rax, [rip+0xe5589]; test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x0000000009d429: nop [rax]; lea rax, [rip+0xeb7e9]; test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x0000000009aee9: nop [rax]; lea rax, [rip+0xee9c9]; test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009af59: nop [rax]; lea rax, [rip+0xf06f9]; test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b189: nop [rax]; lea rax, [rip+0xf0789]; test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x000000000c74ac: nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret; 
0x000000000c739c: nop [rax]; lea rax, [rip-0x107]; ret; 
0x000000000c74bc: nop [rax]; lea rax, [rip-0x117]; ret; 
0x000000000c738c: nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret; 
0x0000000013ab24: nop [rax]; lea rdx, [rip+0xb2071]; jmp qword ptr [rdx+rax*8]; 
0x000000000fe665: nop [rax]; lea rdx, [rsp-0x8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000009041d: nop [rax]; lock dec dword ptr [rdi]; jne short 0x0000000000090430; xor eax, eax; ret; 
0x000000000a1571: nop [rax]; mov [rax], ecx; ret; 
0x000000000a1554: nop [rax]; mov [rax], si; ret; 
0x00000000092349: nop [rax]; mov [rcx+0x20], rdx; ret; 
0x0000000016420c: nop [rax]; mov [rcx], dl; ret; 
0x000000000b084c: nop [rax]; mov [rdi], dl; ret; 
0x0000000017614c: nop [rax]; mov [rdi], dl; vzeroupper; ret; 
0x0000000017617d: nop [rax]; mov [rdi], edx; mov [rdi+r8-0x4], edx; vzeroupper; ret; 
0x000000000a147c: nop [rax]; mov [rdi], r10b; add rax, rdi; ret; 
0x000000000a14b4: nop [rax]; mov [rdi], r8d; add rax, rdi; ret; 
0x000000000a1609: nop [rax]; mov [rdi], si; lea rax, [rdi+rax-0x1]; ret; 
0x00000000090add: nop [rax]; mov [rdx+0x8], rax; ret; 
0x000000000948ac: nop [rax]; mov [rip+0x158ae9], rax; ret; 
0x000000000947ac: nop [rax]; mov [rip+0x158b99], rax; mov dword ptr [rip+0x158bb3], 0x1; ret; 
0x0000000016223d: nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret; 
0x000000000a1549: nop [rax]; mov byte ptr [rax], 0x0; ret; 
0x000000000df2f9: nop [rax]; mov byte ptr [rdi+0x8], 0x15; mov eax, 0x1; ret; 
0x000000000a1114: nop [rax]; mov byte ptr [rdx-0x1], 0x0; mov [rdi], rdx; ret; 
0x000000000b054c: nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret; 
0x0000000014037d: nop [rax]; mov dword ptr [rdi+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000008e4bc: nop [rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000946ec: nop [rax]; mov dword ptr [rip+0x160a0a], 0x0; mov dword ptr [rip+0x1609fc], 0x0; ret; 
0x00000000093cd9: nop [rax]; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x00000000108ea4: nop [rax]; mov dword ptr [rip+0xed2ce], 0x0; mov qword ptr [rip+0xed2cb], 0x0; ret; 
0x00000000074911: nop [rax]; mov dword ptr [rsp+0x60], 0x1; jmp rax; 
0x0000000006f554: nop [rax]; mov dword ptr [rsp+0x64], 0x1; jmp rax; 
0x0000000005bc24: nop [rax]; mov dword ptr fs:[rax], 0x11; mov eax, 0xffffffff; add rsp, 0x98; ret; 
0x000000000b1cb9: nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+0x2]; ret; 
0x0000000010975c: nop [rax]; mov eax, 0x11f; syscall; 
0x000000001091bc: nop [rax]; mov eax, 0x122; syscall; 
0x0000000010987c: nop [rax]; mov eax, 0x131; syscall; 
0x00000000087b9d: nop [rax]; mov eax, 0x16; cmp rdx, 0x3fff; ja short 0x0000000000087bb0; ret; 
0x00000000087cb4: nop [rax]; mov eax, 0x16; ret; 
0x0000000008fecd: nop [rax]; mov eax, 0x16; ret; 
0x000000000890c9: nop [rax]; mov eax, 0x16; ret; 
0x000000000c57d9: nop [rax]; mov eax, 0x1; jg short 0x00000000000c57e9; neg eax; ret; 
0x000000000f8374: nop [rax]; mov eax, 0x1; pop rbx; ret; 
0x00000000144f29: nop [rax]; mov eax, 0x1; ret; 
0x00000000131534: nop [rax]; mov eax, 0x1; ret; 
0x000000000fe7fc: nop [rax]; mov eax, 0x1; syscall; 
0x000000000d88ad: nop [rax]; mov eax, 0x1; test edi, edi; js short 0x00000000000d88c0; ret; 
0x000000000c9b8c: nop [rax]; mov eax, 0x26; syscall; 
0x00000000122f65: nop [rax]; mov eax, 0x2; ret; 
0x0000000008807d: nop [rax]; mov eax, 0x3; ret; 
0x000000000fe59d: nop [rax]; mov eax, 0x3; syscall; 
0x00000000041649: nop [rax]; mov eax, 0x3e; syscall; 
0x000000001012ac: nop [rax]; mov eax, 0x4c; syscall; 
0x000000001012dc: nop [rax]; mov eax, 0x4d; syscall; 
0x000000000f9959: nop [rax]; mov eax, 0x53; syscall; 
0x000000000fb249: nop [rax]; mov eax, 0x56; syscall; 
0x000000000fad9d: nop [rax]; mov eax, 0x5c; syscall; 
0x000000000fed6c: nop [rax]; mov eax, 0x62; syscall; 
0x000000000d7ee9: nop [rax]; mov eax, 0x7c; syscall; 
0x000000001236b5: nop [rax]; mov eax, 0x7fffffff; ret; 
0x000000000f968c: nop [rax]; mov eax, 0x89; syscall; 
0x000000000f9dcd: nop [rax]; mov eax, 0x8; syscall; 
0x000000000f96bc: nop [rax]; mov eax, 0x8a; syscall; 
0x000000000ff07c: nop [rax]; mov eax, 0x8d; syscall; 
0x0000000010963d: nop [rax]; mov eax, 0x95; syscall; 
0x00000000109cdc: nop [rax]; mov eax, 0x9e; syscall; 
0x000000000fff3d: nop [rax]; mov eax, 0xa3; syscall; 
0x0000000008b4b1: nop [rax]; mov eax, 0xba; syscall; 
0x0000000010902c: nop [rax]; mov eax, 0xbb; syscall; 
0x000000000d21c4: nop [rax]; mov eax, 0xe4; syscall; 
0x000000000d8454: nop [rax]; mov eax, 0xfc17; ret; 
0x000000000d8584: nop [rax]; mov eax, 0xff; ret; 
0x000000001232c9: nop [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000044345: nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000007de14: nop [rax]; mov eax, 0xffffffff; ret; 
0x00000000122791: nop [rax]; mov eax, 0xffffffff; ret; 
0x000000001665ac: nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+0x3]; ret; 
0x000000000f8e6c: nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c572d: nop [rax]; mov eax, [rdi+0x1c]; cmp eax, [rsi+0x1c]; jne 0x00000000000c57e0; ret; 
0x00000000145a69: nop [rax]; mov eax, [rdi+0x28]; ret; 
0x000000000f85cc: nop [rax]; mov eax, [rdi+0x4]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000c56cd: nop [rax]; mov eax, [rdi+0xc]; cmp eax, [rsi+0xc]; jne 0x00000000000c57e0; ret; 
0x0000000017e22d: nop [rax]; mov eax, [rdi-0x4]; cmp eax, [rsi-0x4]; jne 0x000000000017e320; ret; 
0x0000000007fb79: nop [rax]; mov eax, [rdi]; and eax, 0x200; ret; 
0x0000000007fb4c: nop [rax]; mov eax, [rdi]; and eax, 0x804; ret; 
0x0000000008777d: nop [rax]; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000806f9: nop [rax]; mov eax, [rdi]; shr eax, 0x5; and eax, 0x1; ret; 
0x00000000041e0c: nop [rax]; mov eax, [rip+0x1ab3b2]; ret; 
0x0000000013951c: nop [rax]; mov eax, [rip+0xc305a]; test eax, eax; je short 0x0000000000139530; ret; 
0x000000000f8f1d: nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret; 
0x0000000003a7ed: nop [rax]; mov eax, edi; and eax, 0x7f; ret; 
0x0000000015914c: nop [rax]; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x000000000b1cec: nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x4]; ret; 
0x000000000b057d: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x00000000159869: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret; 
0x000000000fa07d: nop [rax]; mov edx, r12d; mov eax, 0x10d; syscall; 
0x0000000010136c: nop [rax]; mov qword ptr [rdi], 0x0; mov qword ptr [rdi+0x8], 0x0; ret; 
0x00000000084e9c: nop [rax]; mov qword ptr [rip+0x16b865], 0x0; mov qword ptr [rip+0x16b862], 0x0; ret; 
0x0000000014ce09: nop [rax]; mov qword ptr fs:[r12], 0x0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax; 
0x0000000005c17c: nop [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x0000000010978c: nop [rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000109239: nop [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000010984c: nop [rax]; mov r10, rcx; mov eax, 0x137; syscall; 
0x0000000010aa1d: nop [rax]; mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000fe07d: nop [rax]; mov r10d, ecx; mov eax, 0x118; syscall; 
0x000000000fdb6d: nop [rax]; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000006f611: nop [rax]; mov r14d, 0x1; mov r11d, 0x1; jmp rax; 
0x00000000074a69: nop [rax]; mov r9d, 0x1; mov r10d, 0x1; jmp rax; 
0x00000000040554: nop [rax]; mov rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000004146c: nop [rax]; mov rax, 0xf; syscall; 
0x000000000910bd: nop [rax]; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x00000000123631: nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x00000000084249: nop [rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000d72e5: nop [rax]; mov rax, [rax+0x10]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x000000001055d5: nop [rax]; mov rax, [rax+0x320]; mov [rsi], rax; mov eax, 0x1; ret; 
0x0000000010564d: nop [rax]; mov rax, [rax+0x320]; ret; 
0x00000000105641: nop [rax]; mov rax, [rax+0x60]; ret; 
0x000000000d732c: nop [rax]; mov rax, [rax+0x8]; test rax, rax; je short 0x00000000000d72ce; call rax; 
0x00000000142f1d: nop [rax]; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x00000000085b55: nop [rax]; mov rax, [rbx+0x10]; mov [rax], rdi; pop rbx; ret; 
0x000000001664fd: nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+0x7]; ret; 
0x000000001621cd: nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000014570c: nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret; 
0x000000001448bd: nop [rax]; mov rax, [rdi+0x8]; call qword ptr [rax+0x10]; 
0x0000000013b355: nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000145565: nop [rax]; mov rax, [rdi+0x8]; lea rsi, [rsp+0xc]; call qword ptr [rax+0x40]; 
0x0000000010b3cc: nop [rax]; mov rax, [rdi]; mov [rdx], rax; mov eax, 0x1; ret; 
0x0000000008bf69: nop [rax]; mov rax, [rdi]; mov [rip+0x161313], eax; ret; 
0x000000000862b9: nop [rax]; mov rax, [rdi]; mov [rip+0x166fa7], eax; ret; 
0x0000000009067d: nop [rax]; mov rax, [rdi]; mov [rsi], eax; xor eax, eax; ret; 
0x000000000947cd: nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x158b97], 0x1; mov [rip+0x158b89], eax; ret; 
0x00000000099f6c: nop [rax]; mov rax, [rip+0x152e69]; call qword ptr [rax]; 
0x000000000911e5: nop [rax]; mov rax, [rip+0x15bc21]; mov dword ptr fs:[rax], 0xb; mov eax, 0xffffffff; ret; 
0x00000000090ab5: nop [rax]; mov rax, [rip+0x15c351]; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000906a9: nop [rax]; mov rax, [rip+0x15c759]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009061d: nop [rax]; mov rax, [rip+0x15c7e9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000860a4: nop [rax]; mov rax, [rip+0x166e19]; mov rdi, [rdi+0x10]; call qword ptr [rax+0x358]; 
0x00000000084dcc: nop [rax]; mov rax, [rip+0x169889]; ret; 
0x0000000007ff19: nop [rax]; mov rax, [rip+0x16cee9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000078ac5: nop [rax]; mov rax, [rip+0x174341]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000004462d: nop [rax]; mov rax, [rip+0x1a87d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000044595: nop [rax]; mov rax, [rip+0x1a8871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041df1: nop [rax]; mov rax, [rip+0x1ab011]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041db1: nop [rax]; mov rax, [rip+0x1ab051]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c55: nop [rax]; mov rax, [rip+0x1ab1b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041445: nop [rax]; mov rax, [rip+0x1ab9c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000003a9cc: nop [rax]; mov rax, [rip+0x1b2411]; add rax, fs:[0x0]; ret; 
0x0000000003a9ac: nop [rax]; mov rax, [rip+0x1b2641]; add rax, fs:[0x0]; ret; 
0x00000000036ab9: nop [rax]; mov rax, [rip+0x1b8c79]; ret; 
0x00000000149f4c: nop [rax]; mov rax, [rip+0xa2eb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000001427b5: nop [rax]; mov rax, [rip+0xaa619]; pop rbx; ret; 
0x00000000142745: nop [rax]; mov rax, [rip+0xaa879]; pop rbx; ret; 
0x00000000131ec4: nop [rax]; mov rax, [rip+0xbaf41]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x000000001285e4: nop [rax]; mov rax, [rip+0xc4821]; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x00000000117785: nop [rax]; mov rax, [rip+0xd5681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010b25d: nop [rax]; mov rax, [rip+0xe1ba9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000109a11: nop [rax]; mov rax, [rip+0xe33f1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000010bff9: nop [rax]; mov rax, [rip+0xea2f1]; mov rax, [rax+0x18]; add word ptr [rax], 0x1; ret; 
0x00000000102a0d: nop [rax]; mov rax, [rip+0xea3f9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000001004ed: nop [rax]; mov rax, [rip+0xec919]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000ff139: nop [rax]; mov rax, [rip+0xedcc9]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000fd88c: nop [rax]; mov rax, [rip+0xef579]; mov dword ptr fs:[rax], 0x16; mov eax, 0x1; ret; 
0x0000000003a94c: nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret; 
0x0000000013f7b1: nop [rax]; mov rax, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000918cd: nop [rax]; mov rax, fs:[0x10]; ret; 
0x0000000009178c: nop [rax]; mov rax, rbp; mov rbp, [rbp+0x18]; mov rdi, [rax+0x8]; call qword ptr [rax]; 
0x00000000043dfd: nop [rax]; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000043e09: nop [rax]; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000af1fc: nop [rax]; mov rax, rdi; ret; 
0x0000000009a205: nop [rax]; mov rdi, [rbx+0x48]; call rax; 
0x0000000009a204: nop [rax]; mov rdi, [rbx+0x48]; call rax; 
0x0000000015341c: nop [rax]; mov rdx, [rsi-0x8]; mov [rdi-0x8], rdx; ret; 
0x000000001596a9: nop [rax]; mov rdx, [rsi]; mov [rdi], rdx; ret; 
0x0000000006b66d: nop [rax]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000013be94: nop [rax]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rsp+0x8]; 
0x000000000a1125: nop [rax]; mov rdx, rax; xor eax, eax; mov [rdi], rdx; ret; 
0x0000000014ea9c: nop [rax]; mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall; 
0x000000000d217c: nop [rax]; mov rsi, r12; mov edi, ebp; mov eax, 0xe5; syscall; 
0x00000000140b7d: nop [rax]; movdqu xmm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret; 
0x000000000af979: nop [rax]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret; 
0x0000000013dc54: nop [rax]; movdqu xmm1, [r8+0x8]; mov eax, 0x1; movups [rdx], xmm1; ret; 
0x00000000140b8c: nop [rax]; movdqu xmm1, [rdi+0x30]; mov eax, 0x1; movups [r8], xmm1; ret; 
0x0000000016f505: nop [rax]; movsxd rax, ecx; add rax, rdi; ret; 
0x000000000f11dd: nop [rax]; movzx eax, byte ptr [rdi+0x9]; and eax, 0xf; ret; 
0x0000000017d7cd: nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret; 
0x000000000a531d: nop [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000a2e3d: nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000001592dc: nop [rax]; movzx edx, byte ptr [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x00000000187e49: nop [rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x000000001599b9: nop [rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret; 
0x0000000015925c: nop [rax]; movzx edx, word ptr [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000001876dd: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+0x1]; ret; 
0x00000000159949: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x000000001888bd: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret; 
0x00000000174c39: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret; 
0x00000000087bcc: nop [rax]; or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000110ba5: nop [rax]; pop rbp; pop r12; pop r13; ret; 
0x00000000141f71: nop [rax]; pop rbp; ret; 
0x000000000c0cfd: nop [rax]; pop rbp; ret; 
0x0000000008621d: nop [rax]; ret; 
0x0000000003a1a4: nop [rax]; ret; 
0x0000000004f7e9: nop [rax]; ret; 
0x000000000c4771: nop [rax]; setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x00000000129174: nop [rax]; shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x000000000831ed: nop [rax]; test byte ptr [rdi], 0x80; jne short 0x0000000000083200; ret; 
0x000000000c5d1d: nop [rax]; test rax, 0x1; je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x000000000b4b19: nop [rax]; test rdx, rdx; jne short 0x00000000000b4b29; mov rax, rdi; ret; 
0x000000000aa79c: nop [rax]; test rsi, rsi; jne short 0x00000000000aa7a9; xor rax, rax; ret; 
0x0000000018cbe9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbd9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6d9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6c9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6bc: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x0000000018b6a9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cbf9: nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d359: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018de8d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018de9d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d2bc: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x00000000188e29: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d2cc: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185f8c: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018d9dd: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9ed: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000018734d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000188e1d: nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001898ec: nop [rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018b89c: nop [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8ad: nop [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000017619c: nop [rax]; vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x00000000187fa9: nop [rax]; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000095c9d: nop [rax]; xor eax, eax; add rsp, 0x8; ret; 
0x000000000e08d1: nop [rax]; xor eax, eax; cmp [rsi], cl; je 0x00000000000e083d; ret; 
0x0000000005bb7c: nop [rax]; xor eax, eax; pop rbx; ret; 
0x0000000009066d: nop [rax]; xor eax, eax; ret; 
0x0000000014c2a1: nop [rax]; xor eax, eax; ret; 
0x0000000003f5f4: nop [rax]; xor eax, eax; ret; 
0x0000000007fb69: nop [rax]; xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x0000000017420d: nop [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000017894c: nop [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000898ad: nop [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000010b31c: nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000080ab1: nop [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000798a4: nop [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x0000000015892d: nop [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000fe262: nop; add [rax], al; add [rax+0x1], bh; pop rbx; ret; 
0x00000000031925: nop; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000002d474: nop; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000007c354: nop; add [rax], al; add [rcx+0x1], cl; ret; 
0x000000000cbf76: nop; add [rax], eax; add [rbp+0x6b], al; ret; 
0x000000000ffbfb: nop; add [rax], eax; add [rbx+0x5d], bl; pop r12; ret; 
0x000000000f935f: nop; add [rax], eax; add [rcx+rcx*4-0x40], al; pop rbx; ret; 
0x0000000009b2d9: nop; add [rax], eax; cmovne rax, rdx; ret; 
0x0000000018fb4c: nop; add al, [rax]; add [rcx-0x7d], al; ret far; 
0x00000000145a4f: nop; add dword ptr [rdi+0x28], 0x4; mov eax, 0x1; ret; 
0x0000000004d829: nop; add eax, [rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000c00e6: nop; add ebx, ebp; ret; 
0x000000000a15e5: nop; add rdx, r8; jmp rdx; 
0x0000000005bbdf: nop; add rsp, 0x1000; xor eax, eax; pop rbp; ret; 
0x0000000002de9f: nop; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000408df: nop; and esi, 0x80000000; mov [rdi], esi; ret; 
0x0000000017fe1f: nop; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000a50bf: nop; bsr eax, eax; add rax, rdi; ret; 
0x000000001743df: nop; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000436cf: nop; call qword ptr [rbx]; 
0x000000000fe64f: nop; cmp esi, 0x9; je short 0x00000000000fe668; mov eax, 0x48; syscall; 
0x00000000041e5f: nop; lea eax, [rdx-0x1]; mov [rip+0x1ab35b], eax; mov eax, edx; ret; 
0x0000000017c4df: nop; lea rax, [rdi+0x1]; ret; 
0x0000000017c4cf: nop; lea rax, [rdi]; ret; 
0x0000000007132d: nop; lea rdx, [rip-0x29f]; add rax, rdx; jmp rax; 
0x0000000007b86e: nop; mov [rax], rdx; xor eax, eax; ret; 
0x0000000016422f: nop; mov [rcx], dx; mov [rcx+0x2], dl; ret; 
0x0000000016421f: nop; mov [rcx], dx; ret; 
0x0000000016424f: nop; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x0000000016428f: nop; mov [rcx], rdx; mov [rcx+0x8], dl; ret; 
0x00000000087bef: nop; mov [rdi+0x20], rsi; xor eax, eax; ret; 
0x000000000b086f: nop; mov [rdi-0x1], edx; ret; 
0x00000000187f7f: nop; mov [rdi], dx; mov [rdi+r8-0x2], dx; ret; 
0x000000000b085f: nop; mov [rdi], dx; ret; 
0x000000000b088f: nop; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x000000000b087f: nop; mov [rdi], edx; ret; 
0x000000001286af: nop; mov [rdi], rcx; xor eax, eax; ret; 
0x000000000b08cf: nop; mov [rdi], rdx; mov [rdi+0x8], dl; ret; 
0x000000000d211f: nop; mov [rdx], edi; mov eax, r8d; ret; 
0x000000000f8ade: nop; mov al, 0x0; add [rax], al; call qword ptr [rax+0x88]; 
0x0000000016656f: nop; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000df2bf: nop; mov byte ptr [rdi+0x8], 0x2; xor eax, eax; ret; 
0x000000000a15ff: nop; mov byte ptr [rdi], 0x0; lea rax, [rdi+rax-0x1]; ret; 
0x000000001535ef: nop; mov dl, [rsi-0x1]; mov [rdi-0x1], dl; ret; 
0x000000000b1caf: nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+0x1]; ret; 
0x0000000013dcef: nop; mov dword ptr [r8+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000009045f: nop; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x00000000074a7f: nop; mov dword ptr [rsp+0x34], 0x1; jmp rax; 
0x000000001537cf: nop; mov dx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x000000000af88f: nop; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a25f: nop; mov eax, 0x134; syscall; 
0x000000000f9dff: nop; mov eax, 0x15; syscall; 
0x00000000087a8f: nop; mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000087aa0; ret; 
0x0000000008936f: nop; mov eax, 0x16; ret; 
0x000000000c9b5f: nop; mov eax, 0x24; syscall; 
0x0000000014389f: nop; mov eax, 0x2; ret; 
0x00000000093a9f: nop; mov eax, 0x3; syscall; 
0x000000000d670f: nop; mov eax, 0x3f; syscall; 
0x0000000010b2ef: nop; mov eax, 0x43; syscall; 
0x0000000010b12f: nop; mov eax, 0x44; syscall; 
0x000000000fb36f: nop; mov eax, 0x57; syscall; 
0x000000000fb2af: nop; mov eax, 0x58; syscall; 
0x000000000f976f: nop; mov eax, 0x5f; syscall; 
0x0000000010a13f: nop; mov eax, 0x63; syscall; 
0x0000000010905f: nop; mov eax, 0x7a; syscall; 
0x00000000109d7f: nop; mov eax, 0x7d; syscall; 
0x000000000d845f: nop; mov eax, 0x7e; ret; 
0x00000000041a9f: nop; mov eax, 0x83; syscall; 
0x0000000010926f: nop; mov eax, 0x87; syscall; 
0x000000000ff03f: nop; mov eax, 0x8c; syscall; 
0x00000000102c1f: nop; mov eax, 0x95; syscall; 
0x000000001003df: nop; mov eax, 0x99; syscall; 
0x000000000ffc4f: nop; mov eax, 0xab; syscall; 
0x00000000109ecf: nop; mov eax, 0xb1; syscall; 
0x0000000010a07f: nop; mov eax, 0xb4; syscall; 
0x00000000102a8f: nop; mov eax, 0xb; syscall; 
0x0000000010541f: nop; mov eax, 0xc2; syscall; 
0x0000000010547f: nop; mov eax, 0xc3; syscall; 
0x0000000010535f: nop; mov eax, 0xc4; syscall; 
0x0000000010550f: nop; mov eax, 0xc5; syscall; 
0x00000000109f2f: nop; mov eax, 0xfe; syscall; 
0x0000000005c13f: nop; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007b8df: nop; mov eax, 0xffffffff; ret; 
0x0000000013dccf: nop; mov eax, [r8]; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000114be8: nop; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x00000000084aff: nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret; 
0x0000000013a67f: nop; mov eax, [rdi+0x20]; mov dword ptr [rsi], 0x7; mov [rsi+0x8], eax; ret; 
0x000000000c577f: nop; mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000c57e0; ret; 
0x000000000c57af: nop; mov eax, [rdi+0x34]; cmp eax, [rsi+0x34]; jne short 0x00000000000c57e0; ret; 
0x000000000c57cf: nop; mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000c57e0; ret; 
0x000000000fe82f: nop; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x0000000017e1ff: nop; mov eax, [rdi-0xc]; cmp eax, [rsi-0xc]; jne 0x000000000017e320; ret; 
0x0000000014035f: nop; mov eax, [rdi]; mov [r8], eax; mov eax, 0x1; ret; 
0x000000000d2e7f: nop; mov eax, [rdi]; ret; 
0x000000000806ef: nop; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008ae3f: nop; mov eax, [rip+0x16996a]; ret; 
0x00000000117d4f: nop; mov eax, edi; and eax, 0xffffff; ret; 
0x00000000117d0f: nop; mov eax, edi; bswap eax; ret; 
0x00000000117d1f: nop; mov eax, edi; rol ax, 0x8; ret; 
0x0000000005cb8f: nop; mov eax, r8d; ret; 
0x0000000014aebf: nop; mov edi, [rip+0xa2662]; test edi, edi; jns short 0x000000000014aed0; ret; 
0x00000000114efa: nop; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x00000000114e38: nop; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x00000000114a91: nop; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000114c94: nop; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x000000001148f6: nop; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x0000000011513d: nop; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax; 
0x00000000153b8f: nop; mov edx, [rsi-0x4]; mov [rdi-0x4], edx; ret; 
0x000000000b0eaf: nop; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x00000000174c5f: nop; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x0000000008780f: nop; mov qword ptr [rsi], 0x0; mov eax, 0xffffffff; ret; 
0x000000000fe7cf: nop; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000f90df: nop; mov r10, rcx; mov eax, 0x142; syscall; 
0x0000000010a04f: nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a10f: nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053ef: nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x0000000010532f: nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x000000000f92ff: nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000012f9ff: nop; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000c5fcf: nop; mov rax, 0x1; ret; 
0x00000000090eff: nop; mov rax, 0xffffffff00000000; lock add [rdi], rax; ret; 
0x00000000084d6f: nop; mov rax, 0xffffffffffffffff; ret; 
0x00000000144b5f: nop; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000014536f: nop; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000007fc1f: nop; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x0000000007faff: nop; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x000000000861cf: nop; mov rax, [rdi+0x48]; mov fs:[0x300], rax; ret; 
0x00000000084def: nop; mov rax, [rdi+0x68]; ret; 
0x000000001452ef: nop; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x0000000013b3cf: nop; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000007b06f: nop; mov rax, [rdi+0xa0]; cmp qword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x0000000009479f: nop; mov rax, [rdi]; cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x0000000009489f: nop; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x000000000947ef: nop; mov rax, [rdi]; mov dword ptr [rip+0x158b77], 0x1; mov [rip+0x158b44], rax; ret; 
0x000000000b4e5f: nop; mov rax, [rip+0x138061]; mov rax, [rax+0x240]; ret; 
0x000000000b4e4f: nop; mov rax, [rip+0x138071]; mov rax, [rax+0x238]; ret; 
0x000000000b4e3f: nop; mov rax, [rip+0x138081]; mov rax, [rax+0x230]; ret; 
0x000000000b4e2f: nop; mov rax, [rip+0x138091]; mov rax, [rax+0x228]; ret; 
0x000000000b4e1f: nop; mov rax, [rip+0x1380a1]; mov rax, [rax+0x220]; ret; 
0x000000000b4e0f: nop; mov rax, [rip+0x1380b1]; mov rax, [rax+0x218]; ret; 
0x000000000b4dff: nop; mov rax, [rip+0x1380c1]; mov rax, [rax+0x210]; ret; 
0x000000000b4def: nop; mov rax, [rip+0x1380d1]; mov rax, [rax+0x208]; ret; 
0x000000000b4ddf: nop; mov rax, [rip+0x1380e1]; mov rax, [rax+0x200]; ret; 
0x000000000b4dcf: nop; mov rax, [rip+0x1380f1]; mov rax, [rax+0x1f8]; ret; 
0x000000000b4dbf: nop; mov rax, [rip+0x138101]; mov rax, [rax+0x1f0]; ret; 
0x000000000b4daf: nop; mov rax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x00000000044b2f: nop; mov rax, [rip+0x1a82d9]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000041d6f: nop; mov rax, [rip+0x1ab099]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041caf: nop; mov rax, [rip+0x1ab159]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000041c8f: nop; mov rax, [rip+0x1ab179]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000002d8df: nop; mov rax, [rip+0x1bf529]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000014ef6f: nop; mov rax, [rip+0x9de99]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ee5f: nop; mov rax, [rip+0x9dfa9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014ec2f: nop; mov rax, [rip+0x9e1d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebcf: nop; mov rax, [rip+0x9e239]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ebaf: nop; mov rax, [rip+0x9e259]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014eb8f: nop; mov rax, [rip+0x9e279]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d10f: nop; mov rax, [rip+0x9fcf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014c44f: nop; mov rax, [rip+0xa0a71]; jmp qword ptr [rax+0x348]; 
0x000000001431ef: nop; mov rax, [rip+0xa9c19]; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x0000000014265f: nop; mov rax, [rip+0xaa8e1]; pop rbx; ret; 
0x0000000012f0df: nop; mov rax, [rip+0xc8161]; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000010562f: nop; mov rax, [rip+0xe77d9]; mov dword ptr fs:[rax], 0x2; xor eax, eax; ret; 
0x000000001003bf: nop; mov rax, [rip+0xeca49]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000011712f: nop; mov rax, r8; ret; 
0x0000000018b64f: nop; mov rax, rdi; ret; 
0x000000001763cf: nop; mov rax, rdi; vzeroupper; ret; 
0x000000000b0eff: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x7]; ret; 
0x000000000b1d3f: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+0x8]; ret; 
0x000000000a153f: nop; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x0000000011533a: nop; mov rdx, r12; call rax; 
0x0000000010b74f: nop; mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall; 
0x000000000b1e2f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fdf: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x000000000af96f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret; 
0x00000000140baf: nop; movdqu xmm2, [r8]; mov eax, 0x1; movups [rdi+0x20], xmm2; ret; 
0x0000000014034f: nop; movdqu xmm2, [rdi+0x1c]; mov eax, 0x1; movups [r8], xmm2; ret; 
0x00000000140bbf: nop; movdqu xmm3, [rdi+0x20]; mov eax, 0x1; movups [r8], xmm3; ret; 
0x00000000140b9f: nop; movdqu xmm4, [rdi+0x8]; mov eax, 0x1; movups [r8], xmm4; ret; 
0x00000000040fcf: nop; movmskps eax, xmm0; and eax, 0x8; ret; 
0x0000000012310f: nop; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000018aa8f: nop; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000018a2ef: nop; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x00000000041460: nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall; 
0x0000000009aad9: nop; or eax, 0x8c5f600; jne short 0x000000000009aaa1; ret; 
0x000000000a931d: nop; or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001432fb: nop; out dx, al; jmp qword ptr [rsi-0x70]; 
0x00000000040bbf: nop; pand xmm1, [rip+0x178598]; pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x0000000004076f: nop; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000040a8f: nop; pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000d2a0f: nop; pop rbp; ret; 
0x000000000b420f: nop; rep ret; 
0x0000000002d15f: nop; ret; 
0x000000000d6ec7: nop; rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x000000000607a3: nop; sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x000000000fc9fc: nop; std; dec dword ptr [rax-0x77]; ret; 
0x00000000084b2f: nop; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x000000000c5c6f: nop; test rax, 0x1; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x00000000082a0f: nop; test rdx, rdx; jne short 0x0000000000082a20; xor eax, eax; ret; 
0x000000000c620f: nop; test rsi, rsi; jne short 0x00000000000c6219; xor rax, rax; ret; 
0x0000000018dc0f: nop; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de7f: nop; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018723f: nop; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018733f: nop; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000b38cf: nop; xor ch, ch; mov [rdi], ch; ret; 
0x0000000014b7ef: nop; xor eax, eax; pop rbp; ret; 
0x000000000f836f: nop; xor eax, eax; pop rbx; ret; 
0x000000000507bf: nop; xor eax, eax; ret; 
0x0000000004072f: nop; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000c5a7f: nop; xor rax, rax; ret; 
0x0000000004012d: not eax; and eax, ecx; ret; 
0x0000000004046d: not eax; and eax, edx; ret; 
0x0000000008ae5a: not eax; lea eax, [rax*8+0x6]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000128f2b: not eax; shr eax, 0x1f; ret; 
0x0000000008b766: not esi; and esi, 0x80; syscall; 
0x00000000140ba3: or [eax+0x1], bh; movups [r8], xmm4; ret; 
0x000000000df331: or [r10], r11b; mov eax, 0x2; ret; 
0x000000000df2c1: or [r10], r8b; xor eax, eax; ret; 
0x00000000037238: or [r11+0x1974fdf8], al; pop rbx; ret; 
0x00000000133c77: or [r11+0x27f01f8], r8b; ret; 
0x00000000099bd4: or [r11+0x557709f8], r8b; lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000db6a2: or [r11+0x5d], bl; pop r12; ret; 
0x000000000fd959: or [r11+0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x00000000087751: or [r11+0x68901e0], r8b; xor eax, eax; ret; 
0x000000001155e1: or [r13+0x480975c0], r8b; cmp dword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x0000000013a7d3: or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000013a88c: or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000ac3f6: or [r14+0xf], spl; adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af100: or [r14+0xf], spl; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x000000000ac50f: or [r14-0x77], spl; or [rax-0x77], cl; clc; ret; 
0x000000000df2b6: or [r14], r10b; mov eax, 0x1; ret; 
0x000000000df356: or [r14], r11b; mov eax, 0x2; ret; 
0x000000000fec30: or [r8+0x100], r15b; mov [rdi+0x16], ax; ret; 
0x00000000140343: or [r8+0x1], r15b; movups [r8], xmm1; ret; 
0x00000000143545: or [r8+0x1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x00000000084ee8: or [r8+0x39], r9b; shl byte ptr [rbx+0x21], 0x1; movzx eax, byte ptr [rax]; ret; 
0x00000000081ec2: or [r8+0x3b], r9b; adc [r11+0x6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000083862: or [r8+0x3b], r9b; adc [r15], r9b; or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x000000000df6ac: or [r8+0x63], cl; add al, 0xeb; ret; 
0x000000000df341: or [r8+r15*4], r11b; add al, [rax]; add [rax], al; ret; 
0x00000000144b40: or [r8-0x3f], r9b; cli; and [rax-0x77], cl; adc al, 0x24; call qword ptr [rax+0x8]; 
0x000000000522c4: or [r8-0x402f], r15b; sub eax, r8d; mov [rsi], eax; mov eax, 0x2; ret; 
0x00000000085b32: or [r8-0x73], cl; adc eax, 0x1236c1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000013f272: or [r8-0x73], r9b; jae short 0x000000000013f290; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013b420: or [r8-0x73], r9b; je short 0x000000000013b44a; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000013f1e3: or [r8-0x73], r9b; je short 0x000000000013f20d; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000013f288: or [r8-0x73], r9b; je short 0x000000000013f2b2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x00000000144aff: or [r8-0x73], r9b; je short 0x0000000000144b29; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144b62: or [r8-0x73], r9b; je short 0x0000000000144b8c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000144bcf: or [r8-0x73], r9b; je short 0x0000000000144bf9; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144c32: or [r8-0x73], r9b; je short 0x0000000000144c5c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000145302: or [r8-0x73], r9b; je short 0x000000000014532c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x00000000145372: or [r8-0x73], r9b; je short 0x000000000014539c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001453f2: or [r8-0x73], r9b; je short 0x000000000014541c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x00000000145462: or [r8-0x73], r9b; je short 0x000000000014548c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000014194e: or [r8-0x73], r9b; push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x000000001419ce: or [r8-0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000011564c: or [r8-0x75], cl; adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000009a189: or [r8-0x75], r9b; je short 0x000000000009a19c; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x000000000ac4ee: or [r8-0x76b7f7be], cl; clc; ret; 
0x00000000162228: or [r8-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x0000000012f8bb: or [r8-0x77], cl; ret far; 
0x0000000013f1d2: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x00000000142de2: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x000000001458db: or [r8-0x77], r9b; ja short 0x0000000000145901; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000145e1b: or [r8-0x77], r9b; ja short 0x0000000000145e39; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x00000000139831: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000142fdb: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28]; 
0x00000000142f22: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x000000000dcbff: or [r8-0x7d], cl; ret; 
0x0000000011e641: or [r8-0x7d], r9b; ret; 
0x0000000009a395: or [r8], al; add al, 0x0; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000005c2f4: or [r8], r8b; add [rax], al; add [rdi+0x1f88307], al; jg short 0x000000000005c308; ret; 
0x00000000097537: or [r8], r8b; add [rax], al; add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000555a7: or [r8], r8b; mov [rdi], rax; mov rax, rdi; ret; 
0x00000000087bd1: or [r8], r9b; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000087bb4: or [r8], r9b; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x0000000013b3e4: or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x00000000139c4d: or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000013f6c8: or [r9-0x75], r9b; jo short 0x000000000013f70e; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000000ac54e: or [r9-0x76b7f7be], cl; clc; ret; 
0x0000000013b3d2: or [r9-0x77], r9b; in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x00000000103c77: or [r9], al; je short 0x0000000000103cb5; test byte ptr [r10+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x000000000df288: or [r9], r11b; mov eax, 0x1; ret; 
0x00000000122784: or [r9], r13b; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x00000000133c72: or [r9], r14b; rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x0000000000133c80; ret; 
0x000000000df31b: or [r9], r8b; mov [rdi], al; mov eax, 0x1; ret; 
0x000000000df2ed: or [r9], r8b; mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x000000000df2a6: or [r9], r8b; mov eax, 0x1; ret; 
0x000000000879d1: or [r9], r8b; xor eax, eax; ret; 
0x000000000f8107: or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000fec31: or [rax+0x100], bh; mov [rdi+0x16], ax; ret; 
0x00000000138fb3: or [rax+0x10], bh; pop rbx; pop rbp; ret; 
0x0000000010939e: or [rax+0x114], bh; syscall; 
0x00000000109124: or [rax+0x119], bh; mov edi, [rsp+0x4]; syscall; 
0x000000000fe53f: or [rax+0x11d], bh; syscall; 
0x000000000ff3e8: or [rax+0x127], bh; syscall; 
0x000000000ff498: or [rax+0x128], bh; syscall; 
0x0000000010ae04: or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x000000001095b3: or [rax+0x130], bh; syscall; 
0x000000000ff295: or [rax+0x13], bh; syscall; 
0x00000000044a67: or [rax+0x13e], bh; syscall; 
0x000000000ff335: or [rax+0x14], bh; syscall; 
0x0000000008e542: or [rax+0x16], bh; pop rbx; pop rbp; ret; 
0x00000000140344: or [rax+0x1], bh; movups [r8], xmm1; ret; 
0x00000000140ba4: or [rax+0x1], bh; movups [r8], xmm4; ret; 
0x0000000013dc5d: or [rax+0x1], bh; movups [rdx], xmm1; ret; 
0x000000001448b3: or [rax+0x1], bh; pop rbp; pop r12; ret; 
0x00000000143546: or [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000077965: or [rax+0x1], bh; pop rbx; pop rbp; ret; 
0x000000000f9d77: or [rax+0x1], bh; syscall; 
0x00000000116185: or [rax+0x1], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret; 
0x00000000148061: or [rax+0x1], cl; ret; 
0x0000000013dc5c: or [rax+0x1], dil; movups [rdx], xmm1; ret; 
0x00000000102b37: or [rax+0x1a], bh; syscall; 
0x000000000f8f36: or [rax+0x1c], edi; syscall; 
0x000000000d521b: or [rax+0x29], cl; ret; 
0x0000000018b811: or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8ca: or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x0000000010a4c3: or [rax+0x2a], bh; syscall; 
0x0000000010a905: or [rax+0x2e], bh; syscall; 
0x0000000010a7a5: or [rax+0x2f], bh; syscall; 
0x00000000108fba: or [rax+0x38], bh; syscall; 
0x00000000105073: or [rax+0x39], cl; ret; 
0x00000000084ee9: or [rax+0x39], cl; shl byte ptr [rbx+0x21], 0x1; movzx eax, byte ptr [rax]; ret; 
0x00000000081ec3: or [rax+0x3b], cl; adc [r11+0x6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000083863: or [rax+0x3b], cl; adc [r15], r9b; or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x000000000d8527: or [rax+0x40], bh; ret; 
0x000000000fa1cf: or [rax+0x48], bh; syscall; 
0x00000000073b03: or [rax+0x63], cl; add al, 0x86; add rax, rdi; jmp rax; 
0x000000000738d5: or [rax+0x63], cl; add al, 0x87; lea rdi, [rip-0x864]; add rax, rdi; jmp rax; 
0x00000000073b55: or [rax+0x63], cl; add al, 0x87; lea rdi, [rip-0xae4]; add rax, rdi; jmp rax; 
0x000000000df6ad: or [rax+0x63], cl; add al, 0xeb; ret; 
0x000000000c93fa: or [rax+0x63], cl; ret; 
0x00000000152e73: or [rax+0x6], esi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000fda37: or [rax+0x7], bh; syscall; 
0x00000000106666: or [rax+0xc], bh; pop rbx; pop rbp; ret; 
0x0000000009d29f: or [rax+0xf], cl; ret; 
0x00000000094865: or [rax+rax], al; add [rsi+0x5], dh; ret; 
0x00000000150547: or [rax+rax], edx; add [rbp-0x77], cl; ret far; 
0x000000000feb22: or [rax+rax], edx; mov eax, 0x10; syscall; 
0x000000000feb57: or [rax+rax], edx; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000110b35: or [rax+rbp*8+0x44], dh; mov eax, ecx; ret; 
0x0000000005c011: or [rax+rcx*4+0x4c], al; and al, 0x7; mov [rsp], r8d; mov rax, [rsp+0x10]; call rax; 
0x000000000df342: or [rax+rdi*4], bl; add al, [rax]; add [rax], al; ret; 
0x000000000fe969: or [rax-0x1], bh; pop rbp; pop r12; ret; 
0x00000000077983: or [rax-0x1], bh; pop rbx; pop rbp; ret; 
0x000000000644ba: or [rax-0x1], edi; jbe short 0x0000000000064490; mov [rdi], rsi; ret; 
0x000000000702ba: or [rax-0x1], edi; jbe short 0x0000000000070290; mov [rdi], rsi; ret; 
0x00000000075d1a: or [rax-0x1], edi; jbe short 0x0000000000075cf0; mov [rdi], rsi; ret; 
0x00000000079b77: or [rax-0x3f], cl; clc; add cl, [rax-0x77]; ret; 
0x00000000144b41: or [rax-0x3f], cl; cli; and [rax-0x77], cl; adc al, 0x24; call qword ptr [rax+0x8]; 
0x000000001234bd: or [rax-0x3f], ecx; out 0x4, al; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x000000000522c5: or [rax-0x402f], bh; sub eax, r8d; mov [rsi], eax; mov eax, 0x2; ret; 
0x00000000085b33: or [rax-0x73], cl; adc eax, 0x1236c1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b54ac: or [rax-0x73], cl; adc eax, 0xc294c; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f65: or [rax-0x73], cl; adc eax, 0xc3163; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b5155: or [rax-0x73], cl; adc eax, 0xc33b3; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b5255: or [rax-0x73], cl; adc eax, 0xc3a63; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4ef5: or [rax-0x73], cl; adc eax, 0xc3b43; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000a16e5: or [rax-0x73], cl; adc eax, 0xcece3; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x0000000009d39c: or [rax-0x73], cl; adc eax, 0xd2ecc; lea rax, [rip+0x78d5]; cmove rax, rdx; ret; 
0x0000000009bafc: or [rax-0x73], cl; adc eax, 0xd44bc; lea rax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000009d415: or [rax-0x73], cl; adc eax, 0xd6a23; lea rax, [rip+0xccdc]; cmove rax, rdx; ret; 
0x0000000009b175: or [rax-0x73], cl; adc eax, 0xd8ed3; lea rax, [rip+0xf18c]; cmove rax, rdx; ret; 
0x0000000009aed5: or [rax-0x73], cl; adc eax, 0xd9343; lea rax, [rip+0xf71c]; cmove rax, rdx; ret; 
0x0000000009af45: or [rax-0x73], cl; adc eax, 0xd9453; lea rax, [rip+0xf84c]; cmove rax, rdx; ret; 
0x000000000c7492: or [rax-0x73], cl; adc eax, 0xffffff15; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000c7372: or [rax-0x73], cl; adc eax, 0xffffff25; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000b5061: or [rax-0x73], cl; add eax, 0x10d37; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x0000000009b9f4: or [rax-0x73], cl; add eax, 0x18394; cmove rax, rdx; ret; 
0x000000000b6611: or [rax-0x73], cl; add eax, 0xfbc7; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x00000000117286: or [rax-0x73], cl; add eax, 0xfff9d802; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x000000000b55d6: or [rax-0x73], cl; add eax, 0xfffff4c2; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000013f273: or [rax-0x73], cl; jae short 0x000000000013f290; mov rdi, rbp; call qword ptr [rax+0x48]; 
0x0000000013b421: or [rax-0x73], cl; je short 0x000000000013b44a; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000013f1e4: or [rax-0x73], cl; je short 0x000000000013f20d; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000013f289: or [rax-0x73], cl; je short 0x000000000013f2b2; add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x00000000144b00: or [rax-0x73], cl; je short 0x0000000000144b29; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144b63: or [rax-0x73], cl; je short 0x0000000000144b8c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000144bd0: or [rax-0x73], cl; je short 0x0000000000144bf9; or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000144c33: or [rax-0x73], cl; je short 0x0000000000144c5c; or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000145303: or [rax-0x73], cl; je short 0x000000000014532c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x00000000145373: or [rax-0x73], cl; je short 0x000000000014539c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000001453f3: or [rax-0x73], cl; je short 0x000000000014541c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x00000000145463: or [rax-0x73], cl; je short 0x000000000014548c; or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x000000000b01a9: or [rax-0x73], cl; jg short 0x00000000000b01b6; jne 0x00000000000b0980; ret; 
0x000000000b185d: or [rax-0x73], cl; jg short 0x00000000000b186a; jne 0x00000000000b21a0; ret; 
0x00000000073e95: or [rax-0x73], cl; or eax, 0xfffff1e0; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073dd9: or [rax-0x73], cl; or eax, 0xfffff29c; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073aaa: or [rax-0x73], cl; or eax, 0xfffff5cb; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000007392f: or [rax-0x73], cl; or eax, 0xfffff746; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000005182c: or [rax-0x73], cl; push rdi; add [rcx-0x77], ecx; push rsp; ret; 
0x00000000051dac: or [rax-0x73], cl; push rsi; add [rcx-0x77], ecx; push rsp; ret; 
0x0000000014194f: or [rax-0x73], cl; push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x000000001419cf: or [rax-0x73], cl; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x0000000011f4b0: or [rax-0x73], ecx; cmp eax, 0xd7728; call rax; 
0x000000000b01cc: or [rax-0x73], ecx; jg short 0x00000000000b01da; jne 0x00000000000b0980; ret; 
0x000000000b1880: or [rax-0x73], ecx; jg short 0x00000000000b188e; jne 0x00000000000b21a0; ret; 
0x0000000013dbe4: or [rax-0x73], ecx; mov ebp, 0xc8; call rax; 
0x00000000164132: or [rax-0x73], ecx; or [rdi], rcx; test [rbx+0x2], esp; add [rax], al; ret; 
0x00000000089601: or [rax-0x75], cl; adc [rax+0xcb], bh; syscall; 
0x0000000011564d: or [rax-0x75], cl; adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000009494b: or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x0000000010c6a1: or [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000010c702: or [rax-0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x0000000014be65: or [rax-0x75], cl; add al, 0x24; mov esi, 0x40; mov rdi, r12; call rax; 
0x0000000012540a: or [rax-0x75], cl; add al, 0x24; mov rdi, r12; call rax; 
0x00000000138e4a: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000013abbe: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x0000000013aff3: or [rax-0x75], cl; jae short 0x000000000013b008; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02d: or [rax-0x75], cl; jae short 0x000000000013b042; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000009a18a: or [rax-0x75], cl; je short 0x000000000009a19c; mov rdi, [rbx+0x48]; mov rsi, r14; call rax; 
0x00000000085ad7: or [rax-0x75], cl; jge short 0x0000000000085aec; call qword ptr [r12+0x358]; 
0x0000000013a6dd: or [rax-0x75], cl; mov [rsi+0x10], rax; ret; 
0x0000000002d2a2: or [rax-0x75], cl; or [rcx+rcx*4-0x1a], cl; mov edi, ebp; add rax, [r15]; call rax; 
0x00000000098105: or [rax-0x75], cl; push rbp; or [rax-0x77], cl; ret; 
0x0000000009a22a: or [rax-0x75], cl; test byte ptr [rbx+0x50], 0x1; jne short 0x000000000009a208; mov rdi, rsi; call rax; 
0x000000000940a0: or [rax-0x75], cl; xor al, 0x24; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x00000000077208: or [rax-0x75], ecx; mov edi, 0xe0; jmp rax; 
0x0000000013aff2: or [rax-0x75], r9b; jae short 0x000000000013b008; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10]; 
0x0000000013b02c: or [rax-0x75], r9b; jae short 0x000000000013b042; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20]; 
0x0000000013a6dc: or [rax-0x75], r9b; mov [rsi+0x10], rax; ret; 
0x000000000ac4ef: or [rax-0x76b7f7be], cl; clc; ret; 
0x00000000096f86: or [rax-0x77], cl; adc [r13+0x39], cl; ret far; 
0x00000000141a43: or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x00000000101bc3: or [rax-0x77], cl; add eax, 0xf4465; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b97: or [rax-0x77], cl; add eax, 0xf4491; mov rax, r8; ret; 
0x00000000141cf0: or [rax-0x77], cl; add esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; cmp [rbx+0x5d], bl; ret; 
0x0000000013b37f: or [rax-0x77], cl; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000100651: or [rax-0x77], cl; and al, 0xc8; mov eax, 0x65; mov dword ptr [rsp-0x48], 0x8; syscall; 
0x000000000ac3ff: or [rax-0x77], cl; clc; ret; 
0x00000000117c48: or [rax-0x77], cl; clc; sar rax, 0x6; ret; 
0x000000000b01c5: or [rax-0x77], cl; cmovns eax, [rbx-0x72b7f618]; jg short 0x00000000000b01da; jne 0x00000000000b0980; ret; 
0x0000000013f1d3: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48]; 
0x00000000142de3: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax]; 
0x000000000e9761: or [rax-0x77], cl; fisttp qword ptr [rax-0x7d], st; ret; 
0x000000001458dc: or [rax-0x77], cl; ja short 0x0000000000145901; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret; 
0x00000000145e1c: or [rax-0x77], cl; ja short 0x0000000000145e39; mov dword ptr [rdi+0x28], 0x0; mov qword ptr [rdi+0x20], 0x0; ret; 
0x000000000b39e5: or [rax-0x77], cl; jns 0xffffffffed3b4245; mov [rdi+0xc], ch; ret; 
0x0000000007ab24: or [rax-0x77], cl; jo short 0x000000000007ab39; mov [rax+0x40], rcx; mov [rax], rdx; ret; 
0x000000000b3985: or [rax-0x77], cl; js 0xffffffffed3b41e5; mov [rdi+0x9], ch; ret; 
0x00000000086932: or [rax-0x77], cl; mov qword ptr [rax+0x1018], 0x0; ret; 
0x00000000162229: or [rax-0x77], cl; or [rax-0x77], cl; clc; ret; 
0x00000000138e39: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000142fdc: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x28]; 
0x0000000013b426: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x8]; 
0x00000000144b05: or [rax-0x77], cl; out dx, eax; call qword ptr [rax]; 
0x00000000139056: or [rax-0x77], cl; out dx, eax; call rcx; 
0x0000000007b312: or [rax-0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x000000000b39a6: or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x0000000007b0c3: or [rax-0x77], cl; push 0x60894c30; cmp [rcx+0x5d5b7453], cl; pop r12; ret; 
0x0000000012f8bc: or [rax-0x77], cl; ret far; 
0x00000000098109: or [rax-0x77], cl; ret; 
0x000000001921e3: or [rax-0x77], cl; ror dword ptr [rax+0x9], cl; ret far; 
0x0000000013241c: or [rax-0x7b], cl; push qword ptr [rbp-0x22]; add rsp, 0x18; ret; 
0x0000000009a288: or [rax-0x7b], cl; shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret; 
0x0000000012f9a2: or [rax-0x7b], cl; shl byte ptr [rsi+rax+0x48], 0x39; js short 0x000000000012f9bd; jne short 0x000000000012f9a0; ret; 
0x000000000f65ec: or [rax-0x7b], cl; test byte ptr [rdi], 0x84; inc byte ptr [rip-0x7cb80000]; ret; 
0x00000000075b42: or [rax-0x7bf0dbc7], al; ret; 
0x000000000806be: or [rax-0x7d], cl; js short 0x00000000000806f3; add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x0000000003c32d: or [rax-0x7d], cl; ret; 
0x000000000c8f95: or [rax-0x7d], ecx; ret; 
0x0000000009972a: or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx]; 
0x000000000b554e: or [rax], al; add [rax-0x73], cl; add eax, 0xc24a8; jne short 0x00000000000b5500; ret; 
0x000000000b6649: or [rax], al; add [rax-0x73], cl; add eax, 0xc2a6d; jne short 0x00000000000b660b; ret; 
0x000000000b5099: or [rax], al; add [rax-0x73], cl; add eax, 0xc3e1d; jne short 0x00000000000b505b; ret; 
0x0000000009bb9e: or [rax], al; add [rax-0x73], cl; add eax, 0xd4bb8; jne short 0x000000000009bb50; ret; 
0x000000000720ce: or [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006c54c: or [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x0000000005c2f5: or [rax], al; add [rax], al; add [rdi+0x1f88307], al; jg short 0x000000000005c308; ret; 
0x00000000097538: or [rax], al; add [rax], al; add cl, ch; sar dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001090d1: or [rax], al; add [rax], al; mov eax, 0x119; syscall; 
0x00000000041681: or [rax], al; add [rax], al; mov eax, 0x7f; syscall; 
0x00000000041e89: or [rax], al; add [rax], al; mov eax, 0x80; syscall; 
0x000000000416bd: or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x00000000041520: or [rax], al; add [rax], al; mov eax, 0xd; syscall; 
0x00000000050026: or [rax], al; add [rax], al; mov eax, 0xe; syscall; 
0x00000000092c56: or [rax], al; add [rax], al; mov eax, r14d; syscall; 
0x000000000416ec: or [rax], al; add [rax], al; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000013a88f: or [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x0000000008da13: or [rax], al; add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000fdabd: or [rax], al; add [rax], al; mov rdx, r13; mov eax, 0x10f; syscall; 
0x000000000902c3: or [rax], al; add [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000013a722: or [rax], al; add [rax], al; ret; 
0x000000000f9dd1: or [rax], al; add [rax], al; syscall; 
0x0000000009aa5a: or [rax], al; add [rbp-0x4f], dh; ret; 
0x000000000a4048: or [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000007261c: or [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x000000000ea034: or [rax], al; add [rcx-0x7d], al; cld; jmp qword ptr [rsi+0xf]; 
0x0000000005e913: or [rax], al; add [rcx-0x7d], al; jmp far fword ptr [rax]; 
0x000000000ca777: or [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000ca776: or [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000017a190: or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000009a396: or [rax], al; add al, 0x0; add [rbx+0x5d], bl; pop r12; ret; 
0x00000000101851: or [rax], al; add byte ptr [rax], 0x0; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000012b7e0: or [rax], al; add rdi, r8; jmp rdi; 
0x0000000012b7d9: or [rax], al; lea r8, [rip+0x81cb6]; add rdi, r8; jmp rdi; 
0x000000000555a8: or [rax], al; mov [rdi], rax; mov rax, rdi; ret; 
0x0000000012b641: or [rax], al; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000012b4fc: or [rax], al; movzx edi, al; movsxd rsi, [r8+rdi*4]; add rsi, r8; jmp rsi; 
0x0000000012b603: or [rax], al; movzx esi, al; movsxd rcx, [rdi+rsi*4]; add rcx, rdi; jmp rcx; 
0x00000000141bc0: or [rax], al; setne al; add rsp, 0x78; ret; 
0x0000000006e139: or [rax], bl; add [rax-0x77], cl; ret; 
0x00000000087bd2: or [rax], cl; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000087bb5: or [rax], cl; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x000000000b398b: or [rax], dh; in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000b39ad: or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000b39eb: or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret; 
0x000000000564d9: or [rax], eax; add [rax-0x13343], al; jmp qword ptr [rsi+0xf]; 
0x0000000006ecf0: or [rax], eax; add [rax-0x73], cl; add eax, 0xfffff0b1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000191c55: or [rax], eax; add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000009704d: or [rax], eax; add [rax-0x77], cl; ret; 
0x000000000da1a0: or [rax], eax; add [rax-0x7d], cl; ret; 
0x0000000003f8ba: or [rax], eax; add [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000002d8ea: or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x00000000086792: or [rax], eax; add [rax], al; mov fs:[0x2f8], rdi; ret; 
0x0000000008625f: or [rax], eax; add [rax], al; mov fs:[0x300], rdi; ret; 
0x00000000108ff3: or [rax], eax; add [rax], al; nop [rax+rax]; mov eax, 0xa6; syscall; 
0x000000000f8322: or [rax], eax; add [rax], al; pop rbp; pop r12; ret; 
0x00000000086191: or [rax], eax; add [rax], al; ret; 
0x000000001029fc: or [rax], eax; add [rax], al; syscall; 
0x0000000017325f: or [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000a956d: or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000086285: or [rax], eax; add [rbx+0x37401f8], al; ret; 
0x000000000717f0: or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x00000000072266: or [rax], eax; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000009a9bb: or [rax], eax; add al, ch; lea ebx, [rcx]; stc; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000ae655: or [rax], eax; add cl, ch; ret; 
0x0000000014cf81: or [rax], eax; lea eax, [rdi+0x4]; shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x00000000154443: or [rax], eax; lea r11, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543e9: or [rax], eax; lea r11, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a73: or [rax], eax; lea r11, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a12: or [rax], eax; lea r11, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x0000000014d115: or [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014d065: or [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000014eb75: or [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014ee65: or [rax], eax; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014eb35: or [rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000b5bcc: or [rax], edx; add al, ch; cmp al, 0x49; clc; jmp qword ptr [rsi+0x2e]; 
0x00000000191c54: or [rax], rax; add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000d6903: or [rbp+0x11], esp; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000052b50: or [rbp+0x31], al; fisttp dword ptr [rax-0x39], st; ret; 
0x000000000e2ee4: or [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x0000000007dd8d: or [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x11], 0x4c; lea ecx, [rsp+0x10]; call rbp; 
0x00000000043967: or [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x000000001448a8: or [rbp+0x41], bl; pop rsp; jmp rax; 
0x00000000079438: or [rbp+0x41], bl; pop rsp; ret; 
0x00000000123106: or [rbp+0x441575c0], eax; mov eax, eax; ret; 
0x0000000007e971: or [rbp+0x44], bl; mov eax, esp; pop r12; ret; 
0x000000001155e2: or [rbp+0x480975c0], al; cmp dword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x0000000013b419: or [rbp+0x48a774c0], al; mov eax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x000000001231cf: or [rbp+0x5d5b2b04], cl; ret; 
0x000000000407a7: or [rbp+0x6], dh; addsd xmm0, xmm0; ret; 
0x000000000dcbfa: or [rbp+0x74], bl; push 0xffffffffffffff8b; or [r8-0x7d], cl; ret; 
0x0000000013b67b: or [rbp+rcx*4+0x4], al; add bl, [rbx+0x5d]; mov eax, r8d; ret; 
0x000000000b4f13: or [rbp+rcx], ebp; test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x0000000009ab5d: or [rbp-0x1b], dh; lea rax, [rip+0xd4af9]; test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009aa4d: or [rbp-0x1b], dh; lea rax, [rip+0xd9c19]; test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009afcd: or [rbp-0x1b], dh; lea rax, [rip+0xd9d09]; test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009bfad: or [rbp-0x1b], dh; lea rax, [rip+0xda429]; test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c03d: or [rbp-0x1b], dh; lea rax, [rip+0xda749]; test esi, 0x800; jne short 0x000000000009c000; ret; 
0x0000000009b0fd: or [rbp-0x1b], dh; lea rax, [rip+0xda979]; test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009abfd: or [rbp-0x1b], dh; lea rax, [rip+0xdaae9]; test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000008df55: or [rbp-0x1d7af040], al; add [rax], al; add [rax+0x1], bh; ret; 
0x0000000009aad2: or [rbp-0x1f], dh; lea rax, [rip+0xd90e4]; test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x000000000b6643: or [rbp-0x22], dh; and esi, 0x800; lea rax, [rip+0xc2a6d]; jne short 0x00000000000b660b; ret; 
0x000000000b5093: or [rbp-0x22], dh; and esi, 0x800; lea rax, [rip+0xc3e1d]; jne short 0x00000000000b505b; ret; 
0x000000000b5548: or [rbp-0x27], dh; and esi, 0x800; lea rax, [rip+0xc24a8]; jne short 0x00000000000b5500; ret; 
0x0000000009bb98: or [rbp-0x27], dh; and esi, 0x800; lea rax, [rip+0xd4bb8]; jne short 0x000000000009bb50; ret; 
0x0000000009afd3: or [rbp-0x3908fff3], ebx; add [rax], cl; add [rax], al; jne short 0x000000000009af90; ret; 
0x00000000111677: or [rbp-0x3dbbf040], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000144e98: or [rbp-0x3f6af02e], al; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000009aade: or [rbp-0x40], dh; ret; 
0x0000000014049a: or [rbp-0x74b70098], cl; jo short 0x000000000014042c; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x00000000056413: or [rbp-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rsi]; 
0x00000000088932: or [rbp-0xe], dh; and edx, 0x3; cmp edx, 0x2; je short 0x0000000000088940; ret; 
0x0000000011556c: or [rbp-0xf], dh; mov rax, [rax+0x30]; ret; 
0x000000000b5448: or [rbx+0x11394116], cl; jne short 0x00000000000b53e5; test edx, edx; jne short 0x00000000000b5430; ret; 
0x0000000007969c: or [rbx+0x11], dh; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x00000000037239: or [rbx+0x1974fdf8], al; pop rbx; ret; 
0x00000000075e1f: or [rbx+0x1f772ef9], al; lea rsi, [rip+0x13314c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000133c78: or [rbx+0x27f01f8], al; ret; 
0x000000000df29c: or [rbx+0x463b01c0], al; jl short 0x00000000000df310; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x0000000008befd: or [rbx+0x47521f8], al; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x0000000005c25d: or [rbx+0x48010447], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fead8: or [rbx+0x480c2444], ecx; add esp, 0x18; ret; 
0x00000000081e7e: or [rbx+0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x00000000099bd5: or [rbx+0x557709f8], al; lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000130769: or [rbx+0x5d5b02e0], al; sub eax, 0x1; pop r12; pop r13; ret; 
0x0000000014d0de: or [rbx+0x5d], bl; jmp rax; 
0x0000000013ada5: or [rbx+0x5d], bl; jmp rcx; 
0x0000000009a3e3: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000002f663: or [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000009a267: or [rbx+0x5d], bl; pop r12; ret; 
0x0000000002dea3: or [rbx+0x5d], bl; ret; 
0x00000000087752: or [rbx+0x68901e0], al; xor eax, eax; ret; 
0x00000000079562: or [rbx+0xb], dh; lea rcx, [rdx+0x4]; mov [rax], rcx; mov eax, [rdx]; ret; 
0x000000000e08f1: or [rbx+rax*4+0x5b], dh; ret; 
0x0000000003f83d: or [rbx+rax+0x57], cl; and [rcx+rcx*4-0x30], cl; ret; 
0x000000001933cd: or [rbx+rcx*4+0x2d], cl; ret far; 
0x000000000e377a: or [rbx+rcx*4+0x4], cl; and al, 0x85; rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret; 
0x00000000142483: or [rbx-0x17d3db84], ecx; ret; 
0x0000000004431b: or [rbx-0x3786fe17], al; xor eax, eax; ret; 
0x0000000007b346: or [rbx-0x3b7cb7fe], cl; or [rbx+0x5d], bl; ret; 
0x0000000007e457: or [rbx-0x3f7a8fb9], cl; js short 0x000000000007e460; ret; 
0x0000000010ad4c: or [rbx-0x47e7db84], cl; and [rcx], al; add [rax], al; syscall; 
0x00000000138d6a: or [rbx-0x72b7a3a9], cl; ja short 0x0000000000138dbb; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000005a57f: or [rbx-0x76bef791], ecx; ret; 
0x00000000097651: or [rbx-0x7eb7a440], eax; stc; jmp far fword ptr [rcx]; 
0x0000000008a949: or [rbx], al; add [rax], al; and eax, 0x10; jne short 0x000000000008a958; ret; 
0x00000000086da1: or [rbx], al; add [rax], al; jne short 0x0000000000086d88; pop rbx; ret; 
0x000000001850bf: or [rbx], eax; add [rax], al; xor eax, eax; ret; 
0x000000000d7d03: or [rcx+0x11], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000013b65e: or [rcx+0x29], al; rcr byte ptr [rbx+0x5d], 0x1; mov eax, r8d; ret; 
0x00000000052314: or [rcx+0x2b806], cl; add [rax], al; ret; 
0x00000000142654: or [rcx+0x3948000b], ah; shl byte ptr [rbx+rax+0x5b], 0x1; ret; 
0x000000000501ee: or [rcx+0x39], al; ret; 
0x0000000003d3c6: or [rcx+0x39], eax; ret far; 
0x000000000e0b9f: or [rcx+0x40000cb], al; add [rcx], cl; ret; 
0x00000000085e11: or [rcx+0x4c], dl; mov ecx, edx; call rax; 
0x00000000142449: or [rcx+0x55], al; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000142448: or [rcx+0x55], r8b; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000c0c0e: or [rcx+0x5bd029d8], cl; pop rbp; pop r12; pop r13; ret; 
0x000000000739c9: or [rcx+0x63], cl; add al, 0x80; add rax, rdi; mov r12d, 0x1; jmp rax; 
0x00000000073206: or [rcx+0x63], cl; add al, 0x83; add rax, rdi; jmp rax; 
0x000000000ed1fb: or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx; 
0x00000000142477: or [rcx+r9*4-0x9], r9b; call qword ptr [rax+0x20]; 
0x00000000051360: or [rcx+rax-0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000009097b: or [rcx+rcx*4+0x4], al; and al, 0xe8; ret far; 
0x000000000f8310: or [rcx+rcx*4+0x60], al; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000011e0d3: or [rcx+rcx*4+0xc], cl; and al, 0xe8; ret; 
0x000000000429df: or [rcx+rcx*4-0x12], cl; mov rdi, r12; call rax; 
0x00000000081d26: or [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000fdb0b: or [rcx+rcx*4-0x16], cl; mov eax, 0x10f; syscall; 
0x00000000110a96: or [rcx+rcx*4-0x16], cl; mov rcx, r14; mov rdi, rbx; call r12; 
0x000000000876cf: or [rcx+rcx*4-0x18], al; pop r12; pop r13; ret; 
0x0000000009a910: or [rcx+rcx*4-0x18], cl; mov rdx, r12; pop r12; pop r13; ret; 
0x0000000013971c: or [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20]; 
0x0000000007cb02: or [rcx+rcx*4-0x1], cl; call rax; 
0x0000000007b03e: or [rcx+rcx*4-0x1], cl; mov esi, r8d; call qword ptr [rbx+0x18]; 
0x000000000d5ef2: or [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x38]; 
0x0000000002d2a5: or [rcx+rcx*4-0x1a], cl; mov edi, ebp; add rax, [r15]; call rax; 
0x0000000002d2fd: or [rcx+rcx*4-0x1a], cl; mov edi, ebp; call qword ptr [rcx]; 
0x0000000013b3e5: or [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call qword ptr [rax]; 
0x000000000d4707: or [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov edi, [rsp+0x20]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x000000000d4ac7: or [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov rdi, [rsp]; mov rsi, rbp; call qword ptr [rsp+0x48]; 
0x0000000007d626: or [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x00000000055803: or [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x000000000b4ea1: or [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret; 
0x0000000009c35f: or [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x000000000f0167: or [rcx+rcx*4-0x38], al; ret; 
0x00000000087b75: or [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret; 
0x00000000101859: or [rcx+rcx*4-0x40], al; ret; 
0x000000000d2577: or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret; 
0x000000001234c6: or [rcx+rcx*4-0x40], cl; ret; 
0x0000000005c1ce: or [rcx+rcx*4-0x40], eax; ret; 
0x00000000142478: or [rcx+rcx*4-0x9], cl; call qword ptr [rax+0x20]; 
0x0000000014246e: or [rcx+rcx*4-0x9], cl; call qword ptr [rdx+0x10]; 
0x0000000013ab88: or [rcx+rcx*4-0xa], al; mov rdi, r13; call qword ptr [rax+0x30]; 
0x00000000139c4e: or [rcx+rcx*4-0xa], al; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x000000000ffd97: or [rcx+rcx*4-0xa], cl; mov edi, r12d; mov eax, 0x10e; syscall; 
0x00000000042a29: or [rcx+rcx*4-0xe], cl; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx; 
0x00000000042849: or [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000d6a03: or [rcx+rdx], esp; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000050782: or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000526f6: or [rcx-0x39], cl; ret; 
0x00000000036d08: or [rcx-0x3b7cb7ed], cl; adc [rbx+0x5d], bl; pop r12; ret; 
0x0000000014495b: or [rcx-0x3b7cb7fd], cl; adc [rax+0x1], bh; pop rbx; ret; 
0x000000000ca3b3: or [rcx-0x3f7affee], esi; jne short 0x00000000000ca3c8; mov rax, r8; add rsp, 0x8; ret; 
0x00000000041187: or [rcx-0x3fcebf8d], cl; pop rbx; ret; 
0x0000000012190e: or [rcx-0x3fcefbbd], cl; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000649e7: or [rcx-0x5c773], cl; jmp qword ptr [rdi+rax*8]; 
0x0000000013f6c9: or [rcx-0x75], cl; jo short 0x000000000013f70e; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000007cf3b: or [rcx-0x75], cl; sub [r13-0x7b], r8b; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x000000000ac54f: or [rcx-0x76b7f7be], cl; clc; ret; 
0x0000000005a582: or [rcx-0x77], al; ret; 
0x0000000013b3d3: or [rcx-0x77], cl; in al, 0x48; lea esi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000013c8f0: or [rcx-0x77], cl; ret; 
0x0000000010c778: or [rcx-0x7c172c07], cl; loopne 0x000000000010c781; ret; 
0x0000000010c808: or [rcx-0x7c172c07], cl; loopne 0x000000000010c811; ret; 
0x0000000010c898: or [rcx-0x7c172c07], cl; loopne 0x000000000010c8a1; ret; 
0x0000000010c928: or [rcx-0x7c172c07], cl; loopne 0x000000000010c931; ret; 
0x0000000010ca48: or [rcx-0x7c172c07], cl; loopne 0x000000000010ca51; ret; 
0x0000000010cad8: or [rcx-0x7c172c07], cl; loopne 0x000000000010cae1; ret; 
0x0000000010cb68: or [rcx-0x7c172c07], cl; loopne 0x000000000010cb71; ret; 
0x0000000010cbf8: or [rcx-0x7c172c07], cl; loopne 0x000000000010cc01; ret; 
0x0000000010cc88: or [rcx-0x7c172c07], cl; loopne 0x000000000010cc91; ret; 
0x0000000010cd13: or [rcx-0x7c172c07], cl; loopne 0x000000000010cd1c; ret; 
0x0000000010cda8: or [rcx-0x7c172c07], cl; loopne 0x000000000010cdb1; ret; 
0x0000000010d0ca: or [rcx-0x7c172c07], cl; loopne 0x000000000010d0d3; ret; 
0x0000000010d14a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d153; ret; 
0x0000000010d1ca: or [rcx-0x7c172c07], cl; loopne 0x000000000010d1d3; ret; 
0x0000000010d24a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d253; ret; 
0x0000000010d34a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d353; ret; 
0x0000000010d3ca: or [rcx-0x7c172c07], cl; loopne 0x000000000010d3d3; ret; 
0x0000000010d44a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d453; ret; 
0x0000000010d4ca: or [rcx-0x7c172c07], cl; loopne 0x000000000010d4d3; ret; 
0x0000000010d54a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d553; ret; 
0x0000000010d5c7: or [rcx-0x7c172c07], cl; loopne 0x000000000010d5d0; ret; 
0x0000000010d63a: or [rcx-0x7c172c07], cl; loopne 0x000000000010d643; ret; 
0x000000000e7d0c: or [rcx-0x7f], cl; ret; 
0x0000000018d33d: or [rcx], ah; enter 0xc74, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000000f8e82: or [rcx], al; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x00000000128f27: or [rcx], al; add [rax], al; not eax; shr eax, 0x1f; ret; 
0x000000000417df: or [rcx], al; add [rax], al; ret; 
0x0000000005c184: or [rcx], al; add [rax], al; syscall; 
0x000000000f8f24: or [rcx], al; add [rax], al; xor eax, eax; ret; 
0x00000000103c78: or [rcx], al; je short 0x0000000000103cb5; test byte ptr [r10+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x00000000103c7e: or [rcx], al; jne short 0x0000000000103cc0; ret; 
0x000000000df31c: or [rcx], al; mov [rdi], al; mov eax, 0x1; ret; 
0x000000000df2ee: or [rcx], al; mov eax, 0x1; mov byte ptr [rdi], 0x5b; ret; 
0x000000000df2a7: or [rcx], al; mov eax, 0x1; ret; 
0x000000000879d2: or [rcx], al; xor eax, eax; ret; 
0x000000000df289: or [rcx], bl; mov eax, 0x1; ret; 
0x00000000122785: or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x000000000e03ae: or [rcx], ch; ror dword ptr [rax+0x63], cl; ror byte ptr [rax+0x63], cl; ret far; 
0x0000000018c461: or [rcx], cl; shl bl, 0x1; bsf eax, eax; add rax, rdi; ret; 
0x00000000091013: or [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000043d06: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000004f85b: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000095a6d: or [rcx], dh; ret; 
0x000000000f13a2: or [rcx], dh; rol byte ptr [rcx-0x77], cl; ret; 
0x00000000133c73: or [rcx], dh; rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x0000000000133c80; ret; 
0x00000000095a8c: or [rcx], dh; ror byte ptr [rax+0x9], 0x1; ret; 
0x00000000087bb6: or [rcx], dh; ror byte ptr [rax-0x77], 0x57; and [rax-0x77], cl; ja short 0x0000000000087bd9; ret; 
0x000000000f8108: or [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000f81ec: or [rcx], dh; ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000f8c0a: or [rcx], dh; sar byte ptr [rsi-0x1], cl; mov eax, 0x1b4; syscall; 
0x000000000fb284: or [rcx], eax; add [rax], al; syscall; 
0x0000000010b60f: or [rcx], eax; sar byte ptr [rax+0x14], cl; syscall; 
0x000000000d7f03: or [rdi+0x11], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000018b323: or [rdi+0x16], ch; vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000188923: or [rdi+0x16], ch; vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000187ee1: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x0000000018a381: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b331: or [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000187764: or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000188934: or [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000017ed66: or [rdi+0x44], bh; adc bh, bh; vmovdqu64 [rax], xmm16; ret; 
0x00000000099bd8: or [rdi+0x55], esi; lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000017e4b4: or [rdi+0x6], ch; vmovdqu64 xmm17, [rsi+rdx-0x10]; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x00000000187fb3: or [rdi+0x7], bh; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000017e4c2: or [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000014cff7: or [rdi+rax*8], edx; xor eax, eax; ret; 
0x0000000014cff6: or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000007ea89: or [rdi+rcx-0x4a], al; and [rbx+0x5d], bl; mov eax, r12d; pop r12; ret; 
0x0000000005dc31: or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret; 
0x0000000005ce08: or [rdi+rcx-0x4a], al; cmp [rbx-0x5ff43], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000005fa83: or [rdi+rcx-0x4a], al; cmp [rbx-0x61f4b], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000005f913: or [rdi+rcx-0x4a], al; cmp [rcx+0xf], al; mov dh, 0x45; add [rax-0x7d], cl; ret; 
0x0000000005dd3f: or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret; 
0x0000000005570b: or [rdi-0x2e], esi; mov rax, r8; ret; 
0x00000000093f03: or [rdi-0x389bffeb], ecx; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x0000000017ed6e: or [rdi], bh; ret; 
0x0000000012c6ac: or [rdi], cl; mov bh, 0xc0; ret; 
0x00000000080751: or [rdi], cl; mov dh, 0x0; ret; 
0x00000000091971: or [rdi], cl; mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x0000000002d8d7: or [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000013aece: or [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x0000000010103c: or [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x0000000004d868: or [rdi], cl; mov dh, 0xc0; ret; 
0x0000000018be06: or [rdi], cl; pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x00000000151feb: or [rdi], cl; sub [rdi], esp; jmp r9; 
0x00000000162365: or [rdi], cl; xchg [rcx], ah; add [rax-0x7bf0ffc7], al; ret far; 
0x000000000f01cc: or [rdi], cl; xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x0000000010c084: or [rdi], cl; xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x0000000009f0a8: or [rdi], dh; mov eax, r8d; ret; 
0x00000000041c0e: or [rdi], eax; xor eax, eax; ret; 
0x00000000164136: or [rdi], ecx; test [rbx+0x2], esp; add [rax], al; ret; 
0x000000000cbdaf: or [rdi], ecx; xchg [rsi], dl; add eax, [rax]; add [rax-0x41], cl; ret; 
0x00000000041c0d: or [rdi], rax; xor eax, eax; ret; 
0x00000000164135: or [rdi], rcx; test [rbx+0x2], esp; add [rax], al; ret; 
0x0000000009f0a7: or [rdi], sil; mov eax, r8d; ret; 
0x0000000009a85d: or [rdx+0x10], dh; mov [r8], rsi; mov rax, rdi; ret; 
0x000000000870a9: or [rdx+0x21], bh; mov edi, eax; mov eax, 0xea; mov esi, [r9+0x10]; syscall; 
0x0000000017c0e1: or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x00000000123467: or [rdx+0xf], al; adc [rsi+rcx+0x8], edx; mov [rsi+0x3], r8b; xor eax, eax; ret; 
0x0000000003e2fa: or [rdx-0x73], cl; jl short 0x000000000003e33c; add al, ch; ret far; 
0x000000000b4dfa: or [rdx], al; add [rax], al; ret; 
0x0000000012297d: or [rdx], al; cmp rdx, rdi; jae short 0x0000000000122993; mov eax, 0xffffffff; ret; 
0x000000000df2c2: or [rdx], al; xor eax, eax; ret; 
0x000000000df332: or [rdx], bl; mov eax, 0x2; ret; 
0x0000000014c434: or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f3: or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x0000000014c6cb: or [rdx], ch; push rax; mov rax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x0000000005b13b: or [rip+0x100], ah; or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000fe832: or [rip+0x100f], ah; ret; 
0x000000000fe831: or [rip+0x100f], r12b; ret; 
0x000000000fe8c1: or [rip-0x1010], ah; or esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000000fe8c0: or [rip-0x1010], r12b; or esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x0000000018c564: or [rip-0x3fcf0000], al; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x000000000d8003: or [rsi+0x11], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000089754: or [rsi+0x18], bh; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x0000000013a7d4: or [rsi+0x20], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000416ea: or [rsi+0x8], bh; mov r8d, eax; mov eax, 0x82; syscall; 
0x0000000013a88d: or [rsi+0x8], bh; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000ac4c4: or [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret; 
0x000000000ac3f7: or [rsi+0xf], ah; adc eax, [rdx]; movlpd [rdx+0x8], xmm1; mov rax, rdi; ret; 
0x000000000af101: or [rsi+0xf], ah; adc ecx, [rdx+0x8]; mov rax, rdi; ret; 
0x0000000018cbae: or [rsi+0xf], dh; test eax, eax; je short 0x000000000018cc20; tzcnt eax, eax; ret; 
0x00000000155c33: or [rsi+rax], eax; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000ac510: or [rsi-0x77], ah; or [rax-0x77], cl; clc; ret; 
0x00000000159ef7: or [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000df357: or [rsi], bl; mov eax, 0x2; ret; 
0x000000000df2b7: or [rsi], dl; mov eax, 0x1; ret; 
0x00000000159d77: or [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000587c4: or [rsi], edx; add [rdi+rcx+0x50], al; ret far; 
0x0000000008a025: or [rsp+0xb8], eax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x0000000008a024: or [rsp+0xb8], rax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x00000000124e36: or ah, [rsi-0x7d]; call far fword ptr [rdi+rcx]; 
0x0000000008c17b: or al, 0x0; add [rax], al; add [rax+0xca], bh; syscall; 
0x00000000133a9a: or al, 0x0; add [rax], al; add [rax], al; ret; 
0x000000000ff14a: or al, 0x0; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000013f18b: or al, 0x0; add [rax], al; mov esi, 0x8; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000087508: or al, 0x0; add [rax], al; pop rbp; pop r12; ret; 
0x00000000087357: or al, 0x0; add [rax], al; pop rbx; pop rbp; ret; 
0x0000000013a6f2: or al, 0x0; add [rax], al; ret; 
0x000000000ff121: or al, 0x0; add [rax], al; syscall; 
0x00000000099229: or al, 0x0; add [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000009a2ba: or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000045cfc: or al, 0x0; add [rbp+0x1e], dh; xor eax, eax; add rsp, 0x8; ret; 
0x00000000150c78: or al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000172f5f: or al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000132841: or al, 0x0; add [rdi], cl; adc [rip+0xc5b5c], esp; call rbx; 
0x00000000065743: or al, 0x0; add al, ch; syscall; 
0x0000000012f95e: or al, 0x0; add ecx, ebp; ret; 
0x00000000138e8c: or al, 0x0; add rsp, 0x8; ret; 
0x00000000138e8b: or al, 0x0; add rsp, 0x8; ret; 
0x0000000013284a: or al, 0x0; call rbx; 
0x000000000b55e3: or al, 0x0; cmove rax, rdx; ret; 
0x0000000009abdf: or al, 0x0; cmovne rax, rdx; ret; 
0x0000000012e51e: or al, 0x0; cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x0000000012f120: or al, 0x0; cmp eax, 0x1; jg short 0x000000000012f140; pop rbx; ret; 
0x000000001328d6: or al, 0x0; cmp eax, 0x1; jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x000000000b50a0: or al, 0x0; jne short 0x00000000000b505b; ret; 
0x000000000b50a1: or al, 0x0; jne short 0x00000000000b505b; ret; 
0x000000000b5556: or al, 0x0; jne short 0x00000000000b5500; ret; 
0x000000000b6651: or al, 0x0; jne short 0x00000000000b660b; ret; 
0x0000000012f9ef: or al, 0x0; jne short 0x000000000012fa06; mov [rip+0xc789e], rcx; mov eax, r8d; ret; 
0x000000000b515b: or al, 0x0; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x000000000b525b: or al, 0x0; lea rax, [rip+0x1082c]; cmove rax, rdx; ret; 
0x000000000b4efb: or al, 0x0; lea rax, [rip+0x109fc]; cmove rax, rdx; ret; 
0x000000000a16eb: or al, 0x0; lea rax, [rip+0x378c]; cmove rax, rdx; ret; 
0x000000000b54b2: or al, 0x0; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b4f6b: or al, 0x0; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x000000000b55f8: or al, 0x0; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x00000000085ee2: or al, 0x0; mov [rbx+0x18], rax; pop rbx; ret; 
0x00000000085fa6: or al, 0x0; mov [rbx+0x20], rax; pop rbx; ret; 
0x000000001285ec: or al, 0x0; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x000000001290de: or al, 0x0; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; add rsp, 0x18; ret; 
0x00000000127d12: or al, 0x0; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x00000000129b25: or al, 0x0; mov eax, [rax+0x18]; test eax, eax; jne short 0x0000000000129b30; ret; 
0x0000000012f9f8: or al, 0x0; mov eax, r8d; ret; 
0x000000001327da: or al, 0x0; mov qword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x00000000132783: or al, 0x0; mov qword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x0000000013272c: or al, 0x0; mov qword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326d5: or al, 0x0; mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x00000000128f44: or al, 0x0; mov rax, fs:[rax]; ret; 
0x000000000ea52e: or al, 0x0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000dbb65: or al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000ddbf9: or al, 0x0; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000e2779: or al, 0x0; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000e270e: or al, 0x0; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax; 
0x000000000e2860: or al, 0x0; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax; 
0x0000000002d3f4: or al, 0x0; nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x00000000085678: or al, 0x0; nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x000000001322de: or al, 0x0; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000139524: or al, 0x0; test eax, eax; je short 0x0000000000139530; ret; 
0x0000000012e1da: or al, 0x0; test rax, rax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x0000000012f0e5: or al, 0x0; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000006bb25: or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8]; 
0x00000000178490: or al, 0x16; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178988: or al, 0x16; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c283: or al, 0x16; jne 0x000000000018be07; ret; 
0x0000000018c5ce: or al, 0x16; jne 0x000000000018c547; ret; 
0x000000001785a7: or al, 0x16; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c56e: or al, 0x16; jne short 0x000000000018c547; ret; 
0x0000000009ccae: or al, 0x16; mov [rsi+rdx+0x1], al; jne short 0x000000000009cca0; ret; 
0x000000000a2e26: or al, 0x16; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x00000000189455: or al, 0x16; test eax, eax; jne 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018ac12: or al, 0x16; test eax, eax; jne 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018c31e: or al, 0x16; test eax, eax; jne 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018cb69: or al, 0x16; test eax, eax; jne 0x000000000018ca30; sub eax, ecx; ret; 
0x000000001892f9: or al, 0x16; test eax, eax; jne short 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018aa6e: or al, 0x16; test eax, eax; jne short 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018c257: or al, 0x16; test eax, eax; jne short 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018ca4c: or al, 0x16; test eax, eax; jne short 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000017848d: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178985: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c280: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x000000000018be07; ret; 
0x0000000018c5cb: or al, 0x17; cmp ecx, [rsi+rdx]; jne 0x000000000018c547; ret; 
0x000000001785a4: or al, 0x17; cmp ecx, [rsi+rdx]; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c56b: or al, 0x17; cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x0000000005c164: or al, 0x19; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000f8e72: or al, 0x1; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x0000000013e540: or al, 0x1; add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000f98c1: or al, 0x1; add [rax], al; syscall; 
0x000000000f8f0c: or al, 0x1; add [rax], al; xor eax, eax; ret; 
0x00000000145aeb: or al, 0x1; imul ebp, [rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000073d72: or al, 0x1; lea rax, [rip+0x134845]; movsxd rax, [rax+rcx*4]; add rax, rdi; jmp rax; 
0x000000000e51fb: or al, 0x1; ret; 
0x00000000081619: or al, 0x24; mov rdi, rbp; call rax; 
0x00000000140e4b: or al, 0x24; mov rdi, rbx; call rcx; 
0x0000000013a29e: or al, 0x24; mov rdi, rbx; xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x00000000108a5a: or al, 0x30; ror byte ptr [rcx], 0xd0; ret; 
0x00000000144d7b: or al, 0x31; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x000000000f8314: or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000010ce82: or al, 0x31; test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d699: or al, 0x31; test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e6: or al, 0x31; test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x0000000014c9c7: or al, 0x33; mov esi, [rsp+0x24]; call rax; 
0x000000000e343d: or al, 0x39; ret; 
0x00000000178760: or al, 0x3a; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c812: or al, 0x3a; jne 0x000000000018c547; ret; 
0x000000000c56d1: or al, 0x3b; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x0000000017875d: or al, 0x3e; cmp ecx, [rdx+rdi]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c80f: or al, 0x3e; cmp ecx, [rdx+rdi]; jne 0x000000000018c547; ret; 
0x0000000010973b: or al, 0x3f; shr eax, cl; and eax, 0x3; ret; 
0x00000000087e69: or al, 0x40; xor dh, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000145d93: or al, 0x41; mov eax, 0x1; mov eax, r8d; ret; 
0x000000000fa380: or al, 0x41; mov eax, eax; mov eax, 0x3; syscall; 
0x000000000fffd0: or al, 0x41; mov eax, eax; mov eax, 0x4a; syscall; 
0x00000000100090: or al, 0x41; mov eax, eax; mov eax, 0x4b; syscall; 
0x000000000fa1c8: or al, 0x41; mov eax, eax; mov edi, [rsp+0x8]; mov eax, 0x48; syscall; 
0x000000000d704c: or al, 0x41; pop rsi; ret; 
0x00000000087c38: or al, 0x45; xor edx, edx; mov eax, r8d; xor sil, 0x80; syscall; 
0x0000000012f164: or al, 0x48; add dword ptr [rax+0x10], 0x1; je short 0x000000000012f190; add rsp, 0x8; ret; 
0x000000000f9181: or al, 0x48; add esp, 0x10; pop rbp; ret; 
0x000000000441e7: or al, 0x48; add esp, 0x18; ret; 
0x000000000d68f8: or al, 0x48; add esp, 0x28; ret; 
0x0000000014c379: or al, 0x48; add esp, 0x30; pop rbx; ret; 
0x000000000f9abb: or al, 0x48; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c1a: or al, 0x48; add esp, 0x78; ret; 
0x000000000fe2fb: or al, 0x48; add esp, 0x90; pop rbx; ret; 
0x00000000122c4d: or al, 0x48; cmp eax, ecx; jne short 0x0000000000122c31; mov eax, r8d; ret; 
0x00000000164192: or al, 0x48; lea ecx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000000b022f: or al, 0x48; lea edi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b18f3: or al, 0x48; lea edi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x00000000080783: or al, 0x48; lea edx, [rax+0x1]; mov [rdi+0x8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000012278c: or al, 0x48; mov [rsi], edi; ret; 
0x00000000141995: or al, 0x48; mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20]; 
0x0000000014559b: or al, 0x48; mov eax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000014534e: or al, 0x48; mov eax, [rdi+0x8]; sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000145436: or al, 0x48; mov eax, [rdi+0x8]; shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x0000000014c36a: or al, 0x48; mov edi, [rsp+0x28]; call qword ptr [rbx+0x358]; 
0x00000000083764: or al, 0x48; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000fa504: or al, 0x48; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall; 
0x00000000145308: or al, 0x48; mov edi, ebp; call qword ptr [rax+0x40]; 
0x00000000145378: or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48]; 
0x0000000010bd79: or al, 0x48; mov edx, [rip+0xea557]; add word ptr [rdx+rax*2], 0x1; ret; 
0x000000000b1910: or al, 0x49; sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x00000000131cab: or al, 0x4c; mov eax, esp; pop r12; ret; 
0x00000000103e38: or al, 0x4c; mov edi, edi; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax; 
0x000000000b0470: or al, 0x5; add [rax], al; ret; 
0x0000000011081b: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000001144e3: or al, 0x5b; ret; 
0x000000000a15aa: or al, 0x66; mov [rax+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+0x6], dl; ret; 
0x000000000a168f: or al, 0x66; mov [rdi+0x4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+0x6], dl; ret; 
0x000000000a14e5: or al, 0x66; mov [rdi+0x4], edx; ret; 
0x000000001599ff: or al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001860e6: or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x00000000170836: or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000177aea: or al, 0x6; setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x00000000091956: or al, 0x75; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000040ac3: or al, 0x75; or dh, bl; addps xmm0, xmm0; ret; 
0x0000000003a0f4: or al, 0x75; ret; 
0x00000000091d03: or al, 0x75; sub [rax+0x3], edi; add rsp, 0x8; ret; 
0x00000000091dcb: or al, 0x75; xor [rax+0x3], edi; add rsp, 0x10; pop rbx; ret; 
0x0000000006ecb7: or al, 0x7; lea rax, [rip+0x139500]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000006e6eb: or al, 0x7; lea rax, [rip+0x139a4c]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x00000000037213: or al, 0x83; inc byte ptr [rbx]; je short 0x0000000000037220; ret; 
0x000000000affac: or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000006bf7f: or al, 0x83; ret; 
0x00000000097664: or al, 0x83; shr byte ptr [rsi+0x48], 0x81; stc; jmp far fword ptr [rdi+0x2f760000]; 
0x0000000018d4ca: or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000b52bd: or al, 0x87; test ecx, ecx; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x000000000ed1ff: or al, 0x88; add rcx, r8; jmp rcx; 
0x00000000145597: or al, 0x89; and al, 0xc; mov rax, [rdi+0x8]; call qword ptr [rax+0x48]; 
0x0000000008fec3: or al, 0x89; cmp eax, 0x1648e6; xor eax, eax; ret; 
0x0000000006bb91: or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000a1a93: or al, 0x8a; lea r10, [r10+r9]; jmp r10; 
0x000000000a7864: or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000010ce7f: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d696: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e3: or al, 0x8a; mov ecx, [rcx+rsi]; test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x00000000169a3f: or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170c8f: or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000156f9d: or al, 0x8b; add r9, r11; jmp r9; 
0x000000000d22da: or al, 0x8b; cmp al, 0x24; mov eax, 0xe6; syscall; 
0x000000000fe53b: or al, 0x8b; jl short 0x00000000000fe563; or [rax+0x11d], bh; syscall; 
0x00000000151a1d: or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x0000000017ba19: or al, 0x8b; mov ecx, [rcx-0x4]; mov [rdi], esi; mov [r9-0x4], ecx; ret; 
0x000000000e51f8: or al, 0x8b; pop rbp; or al, 0x1; ret; 
0x0000000010d05f: or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x00000000064949: or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000010d048: or al, 0x8e; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d898: or al, 0x8e; mov edx, [rcx+rdx]; test edx, edx; jne short 0x000000000010d8a8; ret; 
0x000000000389ba: or al, 0x8f; add rcx, rdi; jmp rcx; 
0x000000000436ce: or al, 0x90; call qword ptr [rbx]; 
0x0000000017944f: or al, 0x93; add rcx, r11; jmp rcx; 
0x000000001519b2: or al, 0x93; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x000000000af73b: or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018f43e: or al, 0x99; add rcx, r9; jmp rcx; 
0x0000000012b60a: or al, 0xb7; add rcx, rdi; jmp rcx; 
0x0000000010190b: or al, 0xb8; add [rax], eax; add [rax], al; ret; 
0x0000000010a3f7: or al, 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x0000000010aeae: or al, 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x00000000151a21: or al, 0xb; jmp r9; 
0x000000000af73f: or al, 0xb; jmp rcx; 
0x0000000017c582: or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret; 
0x000000000f9c11: or al, 0xe8; imul eax, ebp, 0x448bfff8; and al, 0xc; add rsp, 0x78; ret; 
0x000000000fa377: or al, 0xe8; mov [0x410c247c8bfff8bd], eax; mov eax, eax; mov eax, 0x3; syscall; 
0x0000000008fea7: or al, 0xe8; ret; 
0x000000001000a9: or al, 0xe8; shl dword ptr [rax-0x8], 0x1; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000842d3: or al, 0xe8; xchg edi, eax; ret; 
0x000000000b5818: or al, 0xe9; ret; 
0x0000000018d341: or al, 0xf3; bsf eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000185f74: or al, 0xf3; bsf eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x000000000b4b73: or al, 0xf3; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x000000001594e2: or al, 0xf3; movq [rdi], mm1; ret; 
0x00000000140c80: or al, 0xf; enter 0xc089, 0x49; mov [rax], eax; mov eax, 0x1; ret; 
0x000000000c56d4: or al, 0xf; test [rcx+rax], eax; add [rax], al; ret; 
0x000000001252c8: or al, 0xf; test [rcx-0x7cfffff8], al; call far fword ptr [rsp+rsi*2]; 
0x000000000b0233: or al, 0xf; test [rsi+0x7], eax; add [rax], al; ret; 
0x000000000d5c58: or al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000074694: or al, [rax]; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x000000000713f5: or al, [rax]; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x0000000004e192: or al, [rax]; add [rax], al; add rsp, 0xd8; ret; 
0x0000000013a712: or al, [rax]; add [rax], al; ret; 
0x00000000102ac1: or al, [rax]; add [rax], al; syscall; 
0x000000000a3ec8: or al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000014be54: or al, [rax]; call qword ptr [rax+0x360]; 
0x000000001431f5: or al, [rax]; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x0000000014b26e: or al, [rax]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b280; add rsp, 0x18; ret; 
0x0000000014b2b6: or al, [rax]; cmp dword ptr fs:[rdx], 0x19; je short 0x000000000014b2c8; add rsp, 0x18; ret; 
0x0000000014c455: or al, [rax]; jmp qword ptr [rax+0x348]; 
0x00000000142535: or al, [rax]; lea rdx, [rip+0xba222]; mov fs:[rax], rdx; ret; 
0x00000000149f55: or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000149f54: or al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000010af23: or al, [rax]; mov eax, [rax+rdi*4]; ret; 
0x0000000010b20f: or al, [rax]; mov ecx, edx; movsxd rax, [r8+rcx*4]; add rax, r8; jmp rax; 
0x0000000014c6d4: or al, [rax]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x0000000014c3b2: or al, [rax]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x0000000014c2e9: or al, [rax]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x0000000014c2b5: or al, [rax]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x00000000142665: or al, [rax]; pop rbx; ret; 
0x0000000014aec3: or al, [rax]; test edi, edi; jns short 0x000000000014aed0; ret; 
0x0000000014aec4: or al, [rax]; test edi, edi; jns short 0x000000000014aed0; ret; 
0x00000000091d00: or al, [rbx+0x29750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x000000000919b5: or al, [rbx+0x2c750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091953: or al, [rbx+0x2e750cf8]; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091dc8: or al, [rbx+0x31750cf8]; mov eax, 0x3; add rsp, 0x10; pop rbx; ret; 
0x0000000010ce1d: or al, [rcx+rcx*4-0x40]; ret; 
0x0000000007af22: or al, [rcx]; add [rax], al; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x000000000fb2e1: or al, [rcx]; add [rax], al; syscall; 
0x00000000159bfe: or al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b9c91: or al, bh; jmp qword ptr [rsi+0x66]; 
0x0000000017c563: or al, bl; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x000000000fe555: or al, ch; and eax, 0x8bfff87c; and al, 0x8; add rsp, 0x28; ret; 
0x00000000127dd2: or al, ch; cmp [rbx-0x10], al; dec dword ptr [rax-0x77]; ret; 
0x000000000fd26b: or al, ch; fcomip st, st(0); bnd jmp qword ptr [rsi-0x7d]; 
0x000000000f9d8e: or al, ch; in al, dx; ret; 
0x00000000049f8b: or al, ch; jmp qword ptr [rdx]; 
0x0000000004419b: or al, ch; jmp qword ptr [rsi]; 
0x000000000e61da: or al, ch; mov al, [0x38840fc084ffffe6]; add eax, [rax]; add [rax-0x7d], cl; ret; 
0x00000000037e03: or al, ch; mov dword ptr [rdx], 0x89480000; ret; 
0x0000000010a4d9: or al, ch; mov eax, [0x480824448bfff7bc]; add esp, 0x18; ret; 
0x0000000010a7bc: or al, ch; mov esi, 0x48fff7b9; mov eax, [rsp+0x8]; add rsp, 0x28; ret; 
0x000000000e0cfb: or al, ch; mov r14b, 0xf4; dec dword ptr [rax-0x7d]; ret; 
0x0000000008cac7: or al, ch; movsxd ebx, [rbp-0x74b70001]; jl short 0x000000000008caf5; or bl, ch; ret far; 
0x0000000008a95b: or al, ch; pop rdi; ret; 
0x000000000e9c7f: or al, ch; ret far; 
0x0000000007dad7: or al, ch; ret; 
0x00000000102b4d: or al, ch; sub eax, 0x8bfff836; and al, 0x8; add rsp, 0x28; ret; 
0x000000000fda4d: or al, ch; sub eax, 0x8bfff887; and al, 0x8; add rsp, 0x28; ret; 
0x00000000080adf: or al, ch; sub esi, [rsi-0x76b70006]; ret; 
0x0000000008df02: or al, dh; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000013ab1d: or bh, [rax+0x2]; ret; 
0x00000000095fef: or bh, bh; jmp qword ptr [rsi+0xf]; 
0x0000000014559f: or bh, bh; push rax; add rsp, 0x10; pop rbx; ret; 
0x0000000007728d: or bh, bh; rol byte ptr [rbx+0xb74fff8], 0x1; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000014c3aa: or bh, bh; xor [rax-0x75], cl; add eax, 0xa0b14; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x000000000d5dd1: or bh, bl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000e694c: or bh, dh; ret; 
0x000000000efed8: or bl, [rdx+0x59]; pop rbx; ret; 
0x000000000b4c37: or bl, al; mov [rax+rdx-0x2], cx; mov [rax], cx; ret; 
0x000000000b4c30: or bl, al; mov [rax+rdx-0x4], ecx; mov [rax], ecx; ret; 
0x000000000b4c27: or bl, al; mov [rax+rdx-0x8], rcx; mov [rax], rcx; ret; 
0x000000001314ce: or bl, al; mov eax, 0x1; ret; 
0x000000000fe884: or bl, al; mov rax, [rip+0xee583]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000017c543: or bl, al; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x000000001642c5: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x5], rdx; ret; 
0x000000001642a6: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x7], edx; ret; 
0x00000000164295: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+0x8], dx; ret; 
0x000000000b0905: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x5], rdx; ret; 
0x000000000b08e6: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x7], edx; ret; 
0x000000000b08d5: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+0x8], dx; ret; 
0x00000000091916: or bl, al; nop [rax+rax]; mov eax, 0x18; syscall; 
0x00000000100f96: or bl, al; nop [rax+rax]; mov eax, 0x1; ret; 
0x0000000008a966: or bl, al; nop [rax+rax]; mov eax, 0x3; ret; 
0x00000000095ca5: or bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x000000000d21c2: or bl, al; nop [rax]; mov eax, 0xe4; syscall; 
0x000000001233e3: or bl, al; nop [rax]; mov eax, 0xffffffff; ret; 
0x0000000010136a: or bl, al; nop [rax]; mov qword ptr [rdi], 0x0; mov qword ptr [rdi+0x8], 0x0; ret; 
0x00000000100a13: or bl, al; nop [rax]; ret; 
0x00000000086617: or bl, al; nop [rax]; ret; 
0x00000000095c9b: or bl, al; nop [rax]; xor eax, eax; add rsp, 0x8; ret; 
0x0000000010b94e: or bl, al; ret; 
0x000000001871ad: or bl, al; vmovdqu64 [rax+rdx-0x10], xmm16; vmovdqu64 [rax], xmm16; ret; 
0x0000000017ed52: or bl, al; vmovdqu64 [rax+rdx-0x20], ymm16; vmovdqu64 [rax], ymm16; ret; 
0x00000000087ac9: or bl, bh; xor eax, eax; ret; 
0x00000000103d72: or bl, bpl; ret; 
0x0000000008cad1: or bl, ch; ret far; 
0x000000000428ce: or bl, ch; ret; 
0x000000001596a3: or bl, dh; movq [rdi], mm1; ret; 
0x0000000006df61: or byte ptr [rax+0x1], 0xf0; jmp rax; 
0x000000000739cd: or byte ptr [rax+0x1], 0xf8; mov r12d, 0x1; jmp rax; 
0x00000000173ff7: or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000040591: or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret; 
0x00000000040561: or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000013dcc0: or byte ptr [rax+0x66000000], 0x89; insb [rdi], dx; mov eax, 0x1; ret; 
0x00000000037f74: or byte ptr [rax-0x73], 0x5; mov [0x48d8048b48001b49], eax; test eax, eax; je short 0x0000000000037f88; call rax; 
0x00000000114e40: or byte ptr [rax-0x77], 0xda; call rax; 
0x00000000104e89: or byte ptr [rax-0x77], 0xe2; syscall; 
0x0000000009f09b: or byte ptr [rax-0x7cb7f8ec], 0xe8; add [rbp+0x40ea75c0], eax; or [rdi], dh; mov eax, r8d; ret; 
0x000000000b4df9: or byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000affef: or byte ptr [rbp+rcx*4+0x1d], 0xe9; mov al, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x000000000fe8dd: or byte ptr [rcx-0x3c3fcef9], 0x48; mov eax, [rip+0xee526]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000052179: or byte ptr [rcx-0x77], 0x0; mov eax, 0x1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000099f6b: or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x152e69; call qword ptr [rax]; 
0x000000000ca153: or byte ptr [rdi], 0x85; add byte ptr [rcx], 0x0; add [rbx-0x12f6b], cl; jmp far fword ptr [rbx]; 
0x00000000090ad5: or cl, [rax+0x39]; sbb [rsp+rax-0x3d], sil; nop [rax]; mov [rdx+0x8], rax; ret; 
0x000000000b01f1: or cl, [rax-0x73]; jg short 0x00000000000b0200; jne 0x00000000000b0980; ret; 
0x000000000b18a5: or cl, [rax-0x73]; jg short 0x00000000000b18b4; jne 0x00000000000b21a0; ret; 
0x00000000164152: or cl, [rax-0x73]; or cl, [rdi]; test [rbx+0x2], eax; add [rax], al; ret; 
0x000000000f3094: or cl, [rax-0x77]; rol dword ptr [rdi+rcx+0x44], 0x1; ret far; 
0x000000000788f5: or cl, [rax-0x7d]; ret; 
0x0000000004469c: or cl, [rcx+0x10e9c117]; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000865f5: or cl, [rdi]; add ebp, edx; xor eax, eax; ret; 
0x0000000018d075: or cl, [rdi]; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x00000000164155: or cl, [rdi]; test [rbx+0x2], eax; add [rax], al; ret; 
0x00000000168546: or cl, [rdi]; test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x000000000877a2: or cl, al; clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x000000000403c3: or cl, bl; in eax, 0xdf; loopne 0x00000000000403a6; fsub st, dword ptr [rip+0x200]; ret; 
0x0000000004031b: or cl, bl; std; fstp st(1), st; ret; 
0x0000000003f09a: or cl, bpl; ret; 
0x0000000009a9e0: or cl, ch; cli; loope 0x000000000009a9e4; jmp qword ptr [rsi+0x2e]; 
0x000000000872ee: or cl, ch; pop rsp; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000147518: or cl, ch; push rdx; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000909d9: or cl, ch; ret far; 
0x0000000003f09b: or cl, ch; ret; 
0x000000000b4365: or cl, cl; cmove rax, rdx; ret; 
0x000000000e075b: or dh, [rbp+rdi+0x48]; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000127d0a: or dh, [rbx+rsi+0x48]; mov eax, [rip+0xc50fc]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x0000000003afa9: or dh, [rdi+0x27]; lea rdx, [rip+0x167fad]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000007b756: or dh, [rdi+rcx+0x48]; cmp eax, esi; ja short 0x000000000007b750; lea eax, [rdx+rdi]; ret; 
0x00000000084376: or dh, [rdi+rcx+0x48]; cmp eax, esi; ja short 0x0000000000084370; lea eax, [rdx+rdi]; ret; 
0x00000000138994: or dh, al; adc eax, 0x8348001c; ret; 
0x00000000169ac9: or dh, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000000879ca: or dh, bh; xor eax, eax; ret; 
0x00000000040ac5: or dh, bl; addps xmm0, xmm0; ret; 
0x000000001595c3: or dh, bl; movq [rdi], mm1; ret; 
0x00000000105ec0: or dword ptr [rax+0x1000000], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007393a: or dword ptr [rax+0x1], 0xffffffc8; jmp rax; 
0x000000000e9e9c: or dword ptr [rax+0x1], 0xffffffd8; jmp rax; 
0x0000000007320a: or dword ptr [rax+0x1], 0xfffffff8; jmp rax; 
0x00000000083ff0: or dword ptr [rax+0x74], 0x80; mov rax, [rax+0x68]; test rax, rax; jne short 0x0000000000083ff0; ret; 
0x0000000003f83c: or dword ptr [rax], 0x2057034c; mov rax, r10; ret; 
0x0000000010c643: or dword ptr [rax], 0x408b000e; ret; 
0x00000000101850: or dword ptr [rax], 0x8000; add rsp, 0x8; mov eax, r8d; ret; 
0x000000001912f1: or dword ptr [rbp-0x4], 0xffffffff; dec dword ptr [rcx-0x7d]; ret; 
0x0000000018a5f0: or dword ptr [rbx+0xf000004], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000083869: or dword ptr [rbx-0x1], 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x0000000007d298: or dword ptr [rbx], 0x20; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000077253: or dword ptr [rbx], 0x20; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000131e97: or dword ptr [rbx], 0x20; mov dword ptr fs:[rax], 0x1d; mov eax, 0x1d; pop rbx; ret; 
0x000000000811a0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000853b8: or dword ptr [rbx], 0x8; pop rbx; ret; 
0x00000000088268: or dword ptr [rcx+0x45db31de], 0x1bad231; add [rax], al; add [rcx+rcx*4-0x31], cl; mov eax, 0xca; syscall; 
0x00000000088267: or dword ptr [rcx+0x45db31de], 0x1bad231; add [rax], al; add [rcx+rcx*4-0x31], cl; mov eax, 0xca; syscall; 
0x0000000017b6c7: or dword ptr [rcx+rax+0x4e8b0000], 0xfffffffc; cmp ecx, [rdi-0x4]; jne 0x000000000017b886; xor eax, eax; ret; 
0x000000000b3d73: or dword ptr [rcx-0x73], 0xc; or edi, edi; loope 0x00000000000b3de1; nop [rax+rax]; ret; 
0x00000000159fb9: or dword ptr [rcx], 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000088595: or dword ptr [rdi+0x24], 0x2; xor eax, eax; ret; 
0x000000000879d0: or dword ptr [rdi+0x8], 0x1; xor eax, eax; ret; 
0x00000000087aa0: or dword ptr [rdi+0x8], 0x40; xor eax, eax; mov [rdi+0x4], esi; ret; 
0x00000000087bd0: or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000087bb3: or dword ptr [rdi+0x8], 0x8; xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x0000000008e5b9: or dword ptr [rdi], 0x40000000; xor eax, eax; ret; 
0x0000000008e5a0: or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x00000000186f9c: or dword ptr [rdi], 0xffffffbd; ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x00000000074693: or dword ptr [rdx], 0x89480000; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x000000000b4d82: or dword ptr [rip+0x1404cf], 0x1; xor eax, eax; ret; 
0x0000000011e7e9: or dword ptr [rip-0xa81700], 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x00000000159cb9: or dword ptr [rsi+rax], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000104b74: or dword ptr [rsi], 0x0; mov rax, [rax]; test rax, rax; je short 0x0000000000104bb0; call rax; 
0x00000000104cd0: or dword ptr [rsi], 0x8b4800; test rax, rax; je 0x0000000000104d70; call rax; 
0x000000000a145b: or eax, 0x108914; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000d7f92: or eax, 0x114e79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f62: or eax, 0x114ea9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f32: or eax, 0x114ed9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7f02: or eax, 0x114f09; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7ea2: or eax, 0x114f69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7e72: or eax, 0x114f99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7d02: or eax, 0x115109; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d7382: or eax, 0x115a89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6f43: or eax, 0x115ec8; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6942: or eax, 0x1164c9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000d6722: or eax, 0x1166e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000008d06c: or eax, 0x11c807; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c37d: or eax, 0x11d2be; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008c1bf: or eax, 0x11d3e4; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000008b693: or eax, 0x11dde8; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000075e81: or eax, 0x1331ae; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000757e2: or eax, 0x13354d; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000075840: or eax, 0x1335ab; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000d73d8: or eax, 0x142b800; add [rax], al; syscall; 
0x0000000005c773: or eax, 0x14aa70; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000005c6bc: or eax, 0x14aabf; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x00000000080d5f: or eax, 0x16e1fc; mov [rdx+0xe0], rcx; pop rbx; ret; 
0x00000000040bc3: or eax, 0x178598; pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040639: or eax, 0x178aa2; movsd xmm0, [rip+0x178d9a]; orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040649: or eax, 0x178ab2; mulsd xmm0, xmm1; ret; 
0x00000000040613: or eax, 0x178ac8; movsd xmm0, [rip+0x178dc8]; orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x00000000040623: or eax, 0x178ae8; mulsd xmm0, xmm1; ret; 
0x000000000404cb: or eax, 0x178c10; orpd xmm0, xmm1; ret; 
0x00000000072b69: or eax, 0x189fba; call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d76a: or eax, 0x18f3b9; call qword ptr [rcx+r8*8-0x40]; 
0x00000000050405: or eax, 0x19ca06; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000500d2: or eax, 0x19cd39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000005003e: or eax, 0x19cdcd; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000090b04: or eax, 0x1; ret; 
0x00000000178116: or eax, 0x1; vzeroupper; ret; 
0x0000000018455a: or eax, 0x1; xtest; je short 0x0000000000184566; vzeroall; ret; 
0x00000000184bba: or eax, 0x1; xtest; je short 0x0000000000184bc6; vzeroall; ret; 
0x00000000041ab2: or eax, 0x1ab359; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000041662: or eax, 0x1ab7a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b1171: or eax, 0x1c478d48; ret; 
0x000000000b1bf1: or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b1fd1: or eax, 0x1d478d48; ret; 
0x000000000b0491: or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000001641b8: or eax, 0x1e1850f; add [rax], al; ret; 
0x0000000011f491: or eax, 0x1f88300; jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x0000000011f2b4: or eax, 0x1fa8300; jg 0x000000000011f368; add rsp, 0x10; pop rbp; ret; 
0x000000001685d9: or eax, 0x210850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000173b4f: or eax, 0x2196c; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000017246e: or eax, 0x2304d; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x000000001721aa: or eax, 0x23311; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x00000000170d95: or eax, 0x24726; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016f24f: or eax, 0x2626c; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016d5be: or eax, 0x27efd; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x0000000016d28a: or eax, 0x28231; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x0000000016b9b5: or eax, 0x29b06; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret; 
0x00000000087a11: or eax, 0x2; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000088ac3: or eax, 0x2; mov edx, eax; xor r10d, r10d; mov eax, ebx; syscall; 
0x0000000018f5ce: or eax, 0x2b74d; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x0000000018f437: or eax, 0x2b878; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx; 
0x0000000017c592: or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret; 
0x000000000fec2c: or eax, 0x30; mov [rdi+0x8], eax; mov eax, 0x100; mov [rdi+0x16], ax; ret; 
0x00000000117fc5: or eax, 0x3486400; add al, 0x25; add [rax], al; add [rax], al; ret; 
0x000000000dd97a: or eax, 0x3d8d4800; lea edx, [rax-0x7717fff3]; ret far; 
0x000000000db597: or eax, 0x3d8d4800; pop rax; or eax, 0xef6be800; cmc; jmp qword ptr [rsi+0x66]; 
0x00000000040a70: or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret; 
0x0000000007574a: or eax, 0x401f0f08; add [rcx-0x7d], cl; ret; 
0x000000000d8ab1: or eax, 0x4634800; stosb [rdi]; add rax, rdx; jmp rax; 
0x00000000091098: or eax, 0x48000000; add esp, 0x110; pop rbp; ret; 
0x000000000c0d3a: or eax, 0x48338948; add esp, 0x10; pop rbx; ret; 
0x000000000ca3ba: or eax, 0x48c0894c; add esp, 0x8; ret; 
0x000000000aa142: or eax, 0x48c0bc0f; lea eax, [rdi+rax]; ret; 
0x000000000cfad6: or eax, 0x48c68900; movsxd edx, [rdi+rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000cfb3e: or eax, 0x48c68900; movsxd esi, [rdi+rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000cfab0: or eax, 0x48ca8900; movsxd eax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x0000000018cd3f: or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2a: or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000000d86e7: or eax, 0x48f68900; movsxd eax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x000000000aa8a5: or eax, 0x48fad348; test edx, edx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x0000000010af1a: or eax, 0x48ffb70f; lea eax, [rip+0xa20bb]; mov eax, [rax+rdi*4]; ret; 
0x000000000d8f0f: or eax, 0x48fffff4; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000af7cf: or eax, 0x49000fa8; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000009af4b: or eax, 0x58d4800; clc; add [rax], al; cmove rax, rdx; ret; 
0x0000000009d41b: or eax, 0x58d4800; fmul st(4), st; add [rax], al; cmove rax, rdx; ret; 
0x000000000b54cf: or eax, 0x58d4800; push 0x48000d87; cmove eax, edx; ret; 
0x0000000009aedb: or eax, 0x58d4800; sbb al, 0xf7; add [rax], al; cmove rax, rdx; ret; 
0x000000000fc71d: or eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x000000000803da: or eax, 0x5bd88948; pop rbp; pop r12; ret; 
0x0000000003afd2: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000159b7d: or eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000116cad: or eax, 0x64d8f700; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000008e4b4: or eax, 0x6890f00; xor eax, eax; ret; 
0x00000000140b52: or eax, 0x6e3ed; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x0000000014030e: or eax, 0x6ebf1; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax; 
0x000000000b0255: or eax, 0x724850f; add [rax], al; ret; 
0x000000000b1168: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fc8: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afad8: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x000000000b3bf8: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x0000000005b141: or eax, 0x7; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000fe8d9: or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret; 
0x000000000c1b6c: or eax, 0x80000000; mov [rdx+0x4], r8d; mov [rdx], eax; xor eax, eax; ret; 
0x0000000012b63e: or eax, 0x81e41; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000017461a: or eax, 0x83d72948; rol byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000b6c56: or eax, 0x841f0f66; add [rax], al; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000b1919: or eax, 0x880850f; add [rax], al; ret; 
0x00000000082491: or eax, 0x89480000; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret; 
0x00000000071c32: or eax, 0x89480000; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000011fb78: or eax, 0x89480001; ret; 
0x00000000129fc1: or eax, 0x8948fff7; ret; 
0x000000000742cc: or eax, 0x894c0000; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000a3bc8: or eax, 0x894d0000; ret far; 
0x0000000013b642: or eax, 0x8c48348; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000009aada: or eax, 0x8c5f600; jne short 0x000000000009aaa1; ret; 
0x00000000073b92: or eax, 0x8d480000; add eax, 0xfffff4e1; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x000000000b5066: or eax, 0x8d480001; adc eax, 0x10fd0; cmovne rax, rdx; ret; 
0x00000000154440: or eax, 0x98f9b; lea r11, [rip+0x65d74]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543e6: or eax, 0x98ff5; lea r11, [rip+0x65d8e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a70: or eax, 0x9b96b; lea r11, [rip+0x68584]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a0f: or eax, 0x9b9cc; lea r11, [rip+0x685a5]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000000f5d25: or eax, 0xb6c56; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000133902: or eax, 0xbc87c6; add [rax], al; add [rbx+0x5d], bl; pop r12; ret; 
0x0000000006e848: or eax, 0xbe0f0000; ret; 
0x000000000ca79e: or eax, 0xc0b60f00; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000cb560: or eax, 0xc0b60f00; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b50b5: or eax, 0xc1f700; add [rax], al; je short 0x00000000000b508a; ret; 
0x000000000b6664: or eax, 0xc1f700; add [rax], al; je short 0x00000000000b663a; ret; 
0x000000000b6665: or eax, 0xc1f700; add [rax], al; je short 0x00000000000b663a; ret; 
0x00000000141ec0: or eax, 0xc247c83; add [rcx], ebx; rol byte ptr [rbx-0x177cfd20], 0x1; add rsp, 0x18; ret; 
0x000000000c6342: or eax, 0xc2bc0f48; shr rax, 0x2; ret; 
0x000000000b4f15: or eax, 0xc2f700; add [rax], al; je short 0x00000000000b4ee7; ret; 
0x000000000b4f85: or eax, 0xc2f700; add [rax], al; je short 0x00000000000b4f57; ret; 
0x000000000b5175: or eax, 0xc2f700; add [rax], al; je short 0x00000000000b5147; ret; 
0x000000000b5275: or eax, 0xc2f700; add [rax], al; je short 0x00000000000b5247; ret; 
0x0000000009aa55: or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x0000000012f9f5: or eax, 0xc789e; mov eax, r8d; ret; 
0x000000000e2776: or eax, 0xc941d; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x000000000cd52d: or eax, 0xd1b60f00; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000cd560: or eax, 0xd1b60f00; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000cb759: or eax, 0xd2b60f00; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x000000001641b4: or eax, 0xd4a8d48; jne 0x00000000001643a0; ret; 
0x000000001685d5: or eax, 0xd4a8d48; jne 0x00000000001687f0; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b0251: or eax, 0xd7f8d48; jne 0x00000000000b0980; ret; 
0x000000000b1915: or eax, 0xd7f8d48; jne 0x00000000000b21a0; ret; 
0x00000000151f3d: or eax, 0xe067290f; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000010aac5: or eax, 0xe2346; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa92: or eax, 0xe2379; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010aa62: or eax, 0xe23a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a5c2: or eax, 0xe2849; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a562: or eax, 0xe28a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a532: or eax, 0xe28d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a462: or eax, 0xe29a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a372: or eax, 0xe2a99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a342: or eax, 0xe2ac9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a302: or eax, 0xe2b09; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2d2: or eax, 0xe2b39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a2a2: or eax, 0xe2b69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a272: or eax, 0xe2b99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a245: or eax, 0xe2bc6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a212: or eax, 0xe2bf9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1e2: or eax, 0xe2c29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a1b2: or eax, 0xe2c59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a182: or eax, 0xe2c89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a152: or eax, 0xe2cb9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a125: or eax, 0xe2ce6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0f5: or eax, 0xe2d16; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a0c2: or eax, 0xe2d49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a092: or eax, 0xe2d79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a065: or eax, 0xe2da6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a035: or eax, 0xe2dd6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000010a002: or eax, 0xe2e09; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fd2: or eax, 0xe2e39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109fa2: or eax, 0xe2e69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f72: or eax, 0xe2e99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f42: or eax, 0xe2ec9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109f15: or eax, 0xe2ef6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109ee2: or eax, 0xe2f29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109eb5: or eax, 0xe2f56; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e82: or eax, 0xe2f89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e52: or eax, 0xe2fb9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109e22: or eax, 0xe2fe9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109df2: or eax, 0xe3019; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109dc2: or eax, 0xe3049; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d92: or eax, 0xe3079; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d65: or eax, 0xe30a6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109d22: or eax, 0xe30e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109cf2: or eax, 0xe3119; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109c38: or eax, 0xe31d3; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109282: or eax, 0xe3b89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109255: or eax, 0xe3bb6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001091d2: or eax, 0xe3c39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001090a2: or eax, 0xe3d69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000109072: or eax, 0xe3d99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108fdc: or eax, 0xe3e2f; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f62: or eax, 0xe3ea9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000108f32: or eax, 0xe3ed9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105555: or eax, 0xe78b6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105522: or eax, 0xe78e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054f5: or eax, 0xe7916; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001054c2: or eax, 0xe7949; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105492: or eax, 0xe7979; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105465: or eax, 0xe79a6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105432: or eax, 0xe79d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105405: or eax, 0xe7a06; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053d5: or eax, 0xe7a36; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001053a2: or eax, 0xe7a69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105372: or eax, 0xe7a99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000105345: or eax, 0xe7ac6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000113e1c: or eax, 0xe8388b00; pop rbx; stc; bnd jmp qword ptr [rsi+0x66]; 
0x0000000011f8a3: or eax, 0xe8c78948; and al, 0xca; add al, [rax]; mov rdi, r12; call rbp; 
0x000000000d385c: or eax, 0xe8ff894c; imul ecx, [rdx-0x76b3fff9], 0xfffffff8; call rax; 
0x00000000124276: or eax, 0xe95d5b00; and [rsi], esp; idiv bh; nop; ret; 
0x0000000008388d: or eax, 0xe9ffffff; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x00000000102cc2: or eax, 0xea149; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c92: or eax, 0xea179; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c62: or eax, 0xea1a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c32: or eax, 0xea1d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102c05: or eax, 0xea206; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102bd2: or eax, 0xea239; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ba2: or eax, 0xea269; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102ad2: or eax, 0xea339; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102aa2: or eax, 0xea369; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000102884: or eax, 0xea587; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100452: or eax, 0xec9b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100422: or eax, 0xec9e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001003f2: or eax, 0xeca19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100102: or eax, 0xecd09; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000100042: or eax, 0xecdc9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff82: or eax, 0xece89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fff52: or eax, 0xeceb9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffc62: or eax, 0xed1a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ffb52: or eax, 0xed2b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff232: or eax, 0xedbd9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000ff092: or eax, 0xedd79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000b1940: or eax, 0xee88349; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000fdfa5: or eax, 0xeee66; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000159469: or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000db59e: or eax, 0xef6be800; cmc; jmp qword ptr [rsi+0x66]; 
0x000000000fb3e2: or eax, 0xf1a29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb3b2: or eax, 0xf1a59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb382: or eax, 0xf1a89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb355: or eax, 0xf1ab6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb322: or eax, 0xf1ae9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2f2: or eax, 0xf1b19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb2c2: or eax, 0xf1b49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb295: or eax, 0xf1b76; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fb262: or eax, 0xf1ba9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae45: or eax, 0xf1fc6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fae12: or eax, 0xf1ff9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fade2: or eax, 0xf2029; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fadb2: or eax, 0xf2059; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000011136b: or eax, 0xf2634800; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x000000000fa5a2: or eax, 0xf2869; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa572: or eax, 0xf2899; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa4b2: or eax, 0xf2959; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa482: or eax, 0xf2989; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa452: or eax, 0xf29b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa422: or eax, 0xf29e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa3f2: or eax, 0xf2a19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000fa222: or eax, 0xf2be9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f99a2: or eax, 0xf3469; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9972: or eax, 0xf3499; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f97c2: or eax, 0xf3649; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9792: or eax, 0xf3679; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000159472: or eax, 0xf7f0ff3; ret; 
0x000000000f00d2: or eax, 0xfcd39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f00a2: or eax, 0xfcd69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0072: or eax, 0xfcd99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0042: or eax, 0xfcdc9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f0012: or eax, 0xfcdf9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effe2: or eax, 0xfce29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000effb2: or eax, 0xfce59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000040194: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000073e98: or eax, 0xfffff1e0; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073e3f: or eax, 0xfffff239; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073ddc: or eax, 0xfffff29c; movsxd rax, [rdi+rax*4]; add rax, rcx; jmp rax; 
0x00000000073cfe: or eax, 0xfffff37a; add rax, rcx; jmp rax; 
0x00000000073c3b: or eax, 0xfffff43d; add rax, rcx; jmp rax; 
0x00000000073aad: or eax, 0xfffff5cb; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x00000000073932: or eax, 0xfffff746; movsxd rax, [r11+rax*4]; add rax, rcx; jmp rax; 
0x0000000010ee31: or eax, 0xffffff00; inc dword ptr [rdi+0xe773b15]; add [rbx+0x1e7f01fa], al; add rsp, 0x18; ret; 
0x0000000004166d: or eax, 0xffffffff; ret; 
0x000000000b4f9b: or eax, [r8]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000014d104: or eax, [rax-0x80]; iretd; sub cl, 0x62; hlt; jmp qword ptr [rsi-0x70]; 
0x0000000014a61f: or eax, [rax]; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x000000000911f2: or eax, [rax]; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000008b35b: or eax, [rax]; add [rax], al; ret; 
0x00000000102a91: or eax, [rax]; add [rax], al; syscall; 
0x0000000004492e: or eax, [rax]; add [rax], eax; ret; 
0x000000000a3d48: or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000014b3d1: or eax, [rax]; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000009ab3f: or eax, [rax]; cmovne rax, rdx; ret; 
0x00000000149ff0: or eax, [rax]; cmp eax, 0x1; jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x0000000014a130: or eax, [rax]; cmp eax, 0x1; jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x00000000142656: or eax, [rax]; cmp rax, rdx; je short 0x0000000000142660; pop rbx; ret; 
0x0000000013ab2d: or eax, [rax]; jmp qword ptr [rdx+rax*8]; 
0x0000000009c28e: or eax, [rax]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x0000000009be6e: or eax, [rax]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x0000000009bc4e: or eax, [rax]; lea rdx, [rip+0xbdd89]; cmovne rax, rdx; ret; 
0x00000000131ecd: or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x00000000131e79: or eax, [rax]; mov dword ptr fs:[rax], 0x22; mov eax, 0x22; pop rbx; ret; 
0x000000000eebee: or eax, [rax]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x00000000149bae: or eax, [rax]; mov edx, 0x0; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000014253c: or eax, [rax]; mov fs:[rax], rdx; ret; 
0x000000000f6664: or eax, [rax]; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f8ada: or eax, [rax]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x000000000f598e: or eax, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000eebb4: or eax, [rax]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x000000000f5d28: or eax, [rax]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000f60de: or eax, [rax]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000f7451: or eax, [rax]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000b4f9c: or eax, [rax]; test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000003e7d1: or eax, [rbp+0x31]; rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x000000000879c4: or eax, [rbp-0x7ce88a0a]; or dh, bh; xor eax, eax; ret; 
0x0000000002ce0a: or eax, [rbx+0x10247c]; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000037233: or eax, [rbx+0x438901e8]; or [rbx+0x1974fdf8], al; pop rbx; ret; 
0x000000000df1b7: or eax, [rbx-0x1c86fe16]; mov r9d, 0x1; mov eax, r9d; ret; 
0x000000000b2241: or eax, [rcx+0x634b000f]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000003a35c: or eax, [rcx+rcx*4-0x40]; ret; 
0x000000000fb344: or eax, [rcx]; add [rax], al; syscall; 
0x00000000041de9: or eax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x00000000159e3a: or eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000004dfaa: or eax, eax; cmp ecx, 0x24; jne short 0x000000000004df8c; mov rax, r8; ret; 
0x0000000010afab: or eax, ebx; add rsp, 0x90; pop rbx; ret; 
0x0000000017c573: or eax, ebx; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000001155ec: or eax, ebx; xchg ax, ax; xor eax, eax; ret; 
0x000000000406a6: or eax, ecx; movq xmm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x00000000040181: or eax, ecx; ret; 
0x00000000040819: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x00000000040467: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000188e05: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185ed5: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000187323: or eax, ecx; tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000170ab1: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000aa25e: or eax, edx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x000000000401b3: or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+0x8]; ret; 
0x00000000055234: or eax, edx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000013b515: or eax, edx; mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10]; 
0x00000000040727: or eax, edx; movq xmm0, rax; ret; 
0x00000000043dfa: or eax, edx; ret; 
0x00000000040b52: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000018c462: or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000001899e0: or eax, edx; tzcnt rax, rax; add rax, rdi; ret; 
0x00000000117d70: or eax, esi; bswap eax; ret; 
0x000000000521dc: or eax, esi; movq xmm0, rax; ret; 
0x0000000010afa9: or eax, esi; or eax, ebx; add rsp, 0x90; pop rbx; ret; 
0x00000000108aa2: or eax, esi; ret; 
0x0000000010970a: or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000811de: or ebp, 0x0; add [rax], al; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x00000000046051: or ebp, [rbp-0x7cb80000]; ret; 
0x00000000084b24: or ebp, [rbx]; push rax; sbb [rbx-0x2fd6efb9], cl; ret; 
0x00000000117854: or ebp, ecx; in eax, 0xf9; jmp qword ptr [rsi+0xf]; 
0x000000001172c4: or ebp, ecx; jbe short 0x00000000001172ab; stc; jmp qword ptr [rsi+0xf]; 
0x00000000117754: or ebp, ecx; je short 0x0000000000117756; jmp qword ptr [rsi+0xf]; 
0x0000000014d054: or ebp, ecx; test byte ptr [rsi], 0xf0; jmp qword ptr [rsi+0xf]; 
0x000000001163a4: or ebp, ecx; xchg [rsi-0xf], bl; jmp qword ptr [rsi+0xf]; 
0x00000000124914: or ebx, [rbx-0x3d]; nop [rax+rax]; mov byte ptr [rbx], 0x0; pop rbx; ret; 
0x0000000017c553: or ebx, eax; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x000000000fb98b: or ebx, esi; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000159633: or ebx, esi; movq [rdi], mm1; ret; 
0x00000000105624: or ecx, [rax+0x39]; xlat [rbx]; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x0000000014273c: or ecx, [rax+0x5]; mov al, [0x1f0fc35b000000]; mov rax, [rip+0xaa879]; pop rbx; ret; 
0x000000001427ac: or ecx, [rax+0x5]; test al, 0x0; add [rax], al; pop rbx; ret; 
0x00000000133a94: or ecx, [rax-0x39]; add eax, 0xc8a48; add [rax], al; add [rax], al; ret; 
0x00000000079564: or ecx, [rax-0x73]; add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret; 
0x000000000b020f: or ecx, [rax-0x73]; jg short 0x00000000000b021f; jne 0x00000000000b0980; ret; 
0x000000000b18d3: or ecx, [rax-0x73]; jg short 0x00000000000b18e3; jne 0x00000000000b21a0; ret; 
0x000000000f8f64: or ecx, [rax-0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x00000000077294: or ecx, [rax-0x75]; and al, 0x8; add rsp, 0x18; ret; 
0x0000000009a190: or ecx, [rax-0x75]; jnp short 0x000000000009a1dd; mov rsi, r14; call rax; 
0x000000000d5416: or ecx, [rax-0x7d]; ret; 
0x00000000101b93: or ecx, [rax-0x7d]; ror byte ptr [rax], 0x48; mov [rip+0xf4491], eax; mov rax, r8; ret; 
0x000000000853b9: or ecx, [rax]; pop rbx; ret; 
0x00000000156f39: or ecx, [rbp+rcx*4+0x1d]; mov edi, 0x49000632; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000c5774: or ecx, [rbx+0x463b2847]; sub [rbp+0x63], dh; ret; 
0x000000000c57c4: or ecx, [rbx+0x463b3847]; cmp [rbp+0x13], dh; ret; 
0x000000001276f6: or ecx, [rbx-0x76fbdbbc]; add edi, [rax+0x1]; add rsp, 0x10; pop rbx; ret; 
0x0000000008e464: or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x00000000116f2c: or ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000085af5: or ecx, [rcx+rcx*4-0x9]; call qword ptr [r12+0x358]; 
0x00000000087ed4: or ecx, [rcx-0x3c3fcec9]; nop [rax+rax]; mov eax, 0x16; ret; 
0x0000000008fc94: or ecx, [rcx-0x3fcefb89]; ret; 
0x000000000b0213: or ecx, [rdi]; test [rsi+0x7], esp; add [rax], al; ret; 
0x0000000014c2e8: or ecx, [rdx]; add [rax-0x75], cl; cmp al, 0x24; mov rax, [rax+0x330]; jmp rax; 
0x000000000405fe: or ecx, eax; movq xmm0, rcx; ret; 
0x0000000014ee51: or ecx, edi; cli; jmp qword ptr [rsi+0x2e]; 
0x00000000170ab3: or ecx, esi; sub eax, ecx; ret; 
0x000000000f8c49: or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall; 
0x000000000f8d54: or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall; 
0x0000000008e594: or edi, [rax+0x16]; ret; 
0x0000000011066c: or edi, [rax+0x1]; ret; 
0x000000001144b4: or edi, [rax+0x7]; ret; 
0x000000000d83bc: or edi, [rax+0x7f]; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000d8507: or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000103d34: or edi, eax; mov [rdx], rdi; pop rbx; pop rbp; ret; 
0x00000000041114: or edi, eax; mov [rsp-0x2], di; fldcw [rsp-0x2]; ret; 
0x0000000008f51b: or edi, edi; jmp qword ptr [rsi-0x70]; 
0x000000000af873: or edi, edi; loope 0x00000000000af8dd; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b0b17: or edi, edi; loope 0x00000000000b0b81; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b2337: or edi, edi; loope 0x00000000000b23a1; nop [rax+rax]; mov rax, rdi; ret; 
0x000000000b2b23: or edi, edi; loope 0x00000000000b2b8d; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b35f3: or edi, edi; loope 0x00000000000b365d; nop [rax+rax]; mov [rdi], dh; ret; 
0x000000000b3d77: or edi, edi; loope 0x00000000000b3de1; nop [rax+rax]; ret; 
0x0000000017e326: or edi, esi; fadd st, st(3); nop [rax+rax]; ret; 
0x000000000c9b51: or edi, esi; jmp qword ptr [rsi+0x2e]; 
0x000000000409fc: or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x17907e]; ret; 
0x00000000086d99: or edx, 0x40; lock cmpxchg [r8+0x308], edx; jne short 0x0000000000086d88; pop rbx; ret; 
0x00000000102a50: or edx, 0x40; mov eax, ecx; syscall; 
0x000000000f8c46: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall; 
0x000000000f8d51: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall; 
0x0000000012e298: or edx, eax; je short 0x000000000012e2c0; mov eax, r8d; ret; 
0x00000000191e71: or edx, eax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000040b85: or edx, eax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000d83ba: or edx, eax; or edi, [rax+0x7f]; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000d8505: or edx, eax; or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000012c741: or edx, eax; sete al; movzx eax, al; ret; 
0x000000000aa78f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000014d8a8: or edx, edi; inc dword ptr [rbp-0x727af040]; or [rax], eax; add [rax-0x7d], cl; ret; 
0x00000000040301: or edx, esi; je 0x0000000000040250; ret; 
0x00000000095cf4: or esi, [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000138eb4: or esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000521a5: or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x000000000fe87e: or esi, eax; xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000000894c1: or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x0000000014b983: or esi, ebp; call far fword ptr [rbx+0x44]; 
0x00000000159553: or esi, ebx; movq [rdi], mm1; ret; 
0x00000000040970: or esi, edi; movd xmm0, esi; ret; 
0x00000000052200: or esi, edx; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret; 
0x000000000521a7: or esi, edx; movd xmm0, esi; ret; 
0x000000000521d5: or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000111373: or esi, esi; jno short 0x0000000000111379; cmovne eax, edx; ret; 
0x000000000ca68a: or esi, esi; ret; 
0x0000000007d299: or esp, [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000077254: or esp, [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000131e98: or esp, [rax]; mov dword ptr fs:[rax], 0x1d; mov eax, 0x1d; pop rbx; ret; 
0x000000000811a1: or esp, [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000fd884: or esp, [rsi-0x77]; push rsi; xor ax, ax; ret; 
0x000000000e7dba: or gs:[rax-0x77], cl; ret; 
0x00000000102a4f: or r10d, 0x40; mov eax, ecx; syscall; 
0x000000001596a2: or r11b, r14b; movq [rdi], mm1; ret; 
0x0000000017c542: or r11b, r8b; nop [rax+rax]; lea rax, [rdi+0x9]; ret; 
0x00000000159632: or r11d, r14d; movq [rdi], mm1; ret; 
0x0000000017c552: or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret; 
0x00000000169ac8: or r14b, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret; 
0x000000001595c2: or r14b, r11b; movq [rdi], mm1; ret; 
0x00000000159552: or r14d, r11d; movq [rdi], mm1; ret; 
0x0000000014559e: or r15b, r15b; push rax; add rsp, 0x10; pop rbx; ret; 
0x0000000004dfa9: or r8, rax; cmp ecx, 0x24; jne short 0x000000000004df8c; mov rax, r8; ret; 
0x0000000017c562: or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret; 
0x0000000009ab3e: or r8d, [rax]; cmovne rax, rdx; ret; 
0x0000000017c572: or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret; 
0x000000000877a1: or r9b, r8b; clc; add al, [rbx+0x68901e0]; xor eax, eax; ret; 
0x000000001641b7: or rax, 0x1e1850f; add [rax], al; ret; 
0x000000001685d8: or rax, 0x210850f; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000117fc4: or rax, 0x3486400; add al, 0x25; add [rax], al; add [rax], al; ret; 
0x00000000075749: or rax, 0x401f0f08; add [rcx-0x7d], cl; ret; 
0x0000000009ab64: or rax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x0000000004166c: or rax, 0xffffffffffffffff; ret; 
0x0000000016abd7: or rax, [r8]; add [rbp-0x77], cl; ret far; 
0x00000000041de8: or rax, [rdx]; mov [rdi], rax; xor eax, eax; ret; 
0x000000000406a5: or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x178d3b]; ret; 
0x00000000040466: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000188e04: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185ed4: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000187322: or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x000000000aa25d: or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000055233: or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000040726: or rax, rdx; movq xmm0, rax; ret; 
0x00000000043df9: or rax, rdx; ret; 
0x00000000040b51: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000001899df: or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000521db: or rax, rsi; movq xmm0, rax; ret; 
0x00000000108aa1: or rax, rsi; ret; 
0x000000000405fd: or rcx, rax; movq xmm0, rcx; ret; 
0x00000000103d33: or rdi, rax; mov [rdx], rdi; pop rbx; pop rbp; ret; 
0x0000000012e297: or rdx, rax; je short 0x000000000012e2c0; mov eax, r8d; ret; 
0x00000000191e70: or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret; 
0x00000000040b84: or rdx, rax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000012c740: or rdx, rax; sete al; movzx eax, al; ret; 
0x000000000aa78e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000404d0: orpd xmm0, xmm1; ret; 
0x00000000040646: orpd xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040620: orpd xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x000000000409b0: orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x0000000004098b: orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000404d1: orps xmm0, xmm1; ret; 
0x0000000004087e: orps xmm0, xmm3; ret; 
0x00000000040647: orps xmm1, [rip+0x178ab2]; mulsd xmm0, xmm1; ret; 
0x00000000040621: orps xmm1, [rip+0x178ae8]; mulsd xmm0, xmm1; ret; 
0x00000000170576: out 0x0, al; add [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000d22a0: out 0x0, al; add [rax], al; syscall; 
0x000000000409fa: out 0x17, eax; or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x17907e]; ret; 
0x0000000004096e: out 0x17, eax; or esi, edi; movd xmm0, esi; ret; 
0x000000001160e9: out 0x2, al; lea rax, [rip+0x68b1e]; lea rdx, [rip+0x68ac7]; cmove rax, rdx; ret; 
0x0000000009c145: out 0x2, al; lea rax, [rip+0x9512]; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0a5: out 0x2, al; lea rax, [rip+0x95a2]; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009bb60: out 0x2, al; lea rax, [rip+0x96e7]; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x0000000009c195: out 0x2, al; lea rax, [rip+0xb702]; lea rdx, [rip+0xc24ab]; cmovne rax, rdx; ret; 
0x0000000009c0f5: out 0x2, al; lea rax, [rip+0xb792]; lea rdx, [rip+0xc253b]; cmovne rax, rdx; ret; 
0x0000000009bd89: out 0x2, al; lea rax, [rip+0xe2e8e]; lea rdx, [rip+0xe2e37]; cmove rax, rdx; ret; 
0x000000000b5510: out 0x2, al; lea rax, [rip+0xf1f7]; lea rdx, [rip+0xc8800]; cmovne rax, rdx; ret; 
0x000000001172a1: out 0x20, al; lea rax, [rip+0x678f6]; lea rdx, [rip+0x6fd4f]; cmovne rax, rdx; ret; 
0x000000000b55f1: out 0x20, al; lea rax, [rip+0xc95b6]; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x000000000521d9: out 0x20, al; or rax, rsi; movq xmm0, rax; ret; 
0x00000000192604: out 0x20, eax; je short 0x0000000000192618; movss xmm0, [rip+0x27468]; divss xmm0, [rip+0x2877c]; ret; 
0x00000000059d73: out 0x27, eax; std; jmp qword ptr [rsi+0xf]; 
0x000000000d8926: out 0x37, al; cmc; dec dword ptr [rax-0x77]; ret; 
0x000000001234c0: out 0x4, al; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x0000000012917a: out 0x4, al; lea rax, [rdi+rsi+0x14]; ret; 
0x0000000008b10c: out 0x4, eax; cmp [rdx+rdi], rsi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x0000000008f49e: out 0x40, eax; xor dh, 0x81; mov eax, 0xca; syscall; 
0x000000000788d3: out 0x41, al; call qword ptr [rsi+0x38]; 
0x00000000144902: out 0x41, eax; call rax; 
0x00000000144800: out 0x41, eax; call rbp; 
0x0000000003f838: out 0x44, eax; mov edx, [rcx+rax*4+0x8]; add r10, [rdi+0x20]; mov rax, r10; ret; 
0x0000000018f37e: out 0x44, eax; movzx esp, bh; add rax, rdx; jmp rax; 
0x0000000014c80f: out 0x45, al; xor ecx, ecx; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000114019: out 0x48, al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004dff9: out 0x48, al; lea eax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000013b40d: out 0x48, al; mov [rsp+0x8], eax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x000000000d56e6: out 0x48, al; mov eax, [rip+0x117722]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000013de7d: out 0x48, al; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x00000000080b24: out 0x48, al; mov edi, ebp; call qword ptr [r13+0x38]; 
0x0000000007339c: out 0x48, al; mov edi, ebp; call qword ptr [r14+0x38]; 
0x000000000816a3: out 0x48, al; mov edi, ebp; call qword ptr [r15+0x80]; 
0x0000000006b675: out 0x48, al; mov edi, ebp; call qword ptr [rax+0x38]; 
0x0000000013b3e8: out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x0000000007412c: out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x38]; 
0x000000000767b2: out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90]; 
0x0000000013be9d: out 0x48, al; mov edi, ebp; call qword ptr [rsp+0x8]; 
0x000000000f91e4: out 0x48, al; mov edi, ebp; mov eax, 0x135; syscall; 
0x00000000080f4b: out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90]; 
0x0000000014590f: out 0x48, al; mov edi, ebx; call rcx; 
0x00000000130b8a: out 0x48, al; mov edi, ebx; mov rcx, r13; call r10; 
0x000000000426e9: out 0x48, al; mov esi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000173ddd: out 0x48, eax; add eax, edi; vzeroupper; ret; 
0x0000000018f382: out 0x48, eax; add eax, edx; jmp rax; 
0x0000000010b6c6: out 0x48, eax; mov [rbp-0x6d0], eax; mov eax, ebx; syscall; 
0x000000001136bd: out 0x48, eax; mov edx, eax; mov rsi, r9; call qword ptr [rcx+0x28]; 
0x000000000424ed: out 0x48, eax; mov edx, ebp; call rbx; 
0x000000000c1491: out 0x48, eax; mov esi, [rsp+0x18]; call rbx; 
0x00000000143042: out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18]; 
0x000000000586ae: out 0x48, eax; sub esi, eax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000153636: out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000042568: out 0x4c, al; mov edi, ebp; call rbx; 
0x000000001045d2: out 0x4c, al; mov edi, edi; call r13; 
0x00000000042425: out 0x4c, al; mov edi, edi; call rbx; 
0x00000000131f53: out 0x4c, al; mov edi, esi; add r8, fs:[0x0]; mov rcx, r15; call rbp; 
0x0000000006d32d: out 0x4c, al; mov edi, esi; call qword ptr [rbx+0x38]; 
0x0000000006c428: out 0x4c, al; mov edi, esi; call qword ptr [rcx+0x38]; 
0x0000000010465f: out 0x4c, al; mov edi, esi; call r13; 
0x00000000130f4a: out 0x4c, al; mov edi, esi; mov rcx, r13; call rbx; 
0x0000000005749e: out 0x4c, eax; mov [rbp-0xd8], eax; call rax; 
0x00000000153466: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153562: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534ae: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000118b8f: out 0x4c, eax; mov ecx, [rsp+0x20]; mov rcx, [rsp+0x48]; call qword ptr [rsp+0x68]; 
0x0000000007ae8d: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000098431: out 0x5b, al; pop rbp; pop r12; ret; 
0x00000000192726: out 0x5b, al; ret; 
0x000000000d2728: out 0x5b, eax; pop rbp; pop r12; ret; 
0x00000000143258: out 0x5b, eax; ret; 
0x00000000091094: out 0x64, al; mov dword ptr [rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x0000000009b0d6: out 0x68, al; add [rax], al; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x00000000131b97: out 0x7, al; movsxd rax, [rcx+rsi*4]; shr rdx, 0x3; add rax, rcx; jmp rax; 
0x00000000117285: out 0x8, al; lea rax, [rip-0x627fe]; lea rdx, [rip+0x605ab]; cmove rax, rdx; ret; 
0x000000000b55d5: out 0x8, al; lea rax, [rip-0xb3e]; lea rdx, [rip+0xc226b]; cmove rax, rdx; ret; 
0x0000000003a803: out 0x80, eax; sete al; ret; 
0x000000000569c9: out 0x83, eax; ret; 
0x0000000002d2a9: out 0x89, al; out dx, eax; add rax, [r15]; call rax; 
0x0000000002d300: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x0000000002d25e: out 0x89, al; out dx, eax; call r15; 
0x0000000009419d: out 0x89, al; out dx, eax; mov eax, 0xde; syscall; 
0x000000000d2182: out 0x89, al; out dx, eax; mov eax, 0xe5; syscall; 
0x000000000c0bfd: out 0x89, al; ret; 
0x000000000e527b: out 0x89, eax; ret; 
0x0000000009bb65: out 0x96, eax; add [rax], al; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x000000000d0ae5: out 0xb7, eax; cmc; jmp far fword ptr [rcx]; 
0x000000000903ca: out 0xb8, eax; sub [rcx], eax; add [rax], al; syscall; 
0x00000000092e31: out 0xbf, al; add al, [rax]; add [rax], al; mov eax, 0xe; syscall; 
0x0000000018cbe7: out 0xc3, eax; nop [rax]; tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000010ed73: out 0xd, eax; add [rbp-0x172b8701], al; shl dword ptr [rbp+0x5c7fffe], 0x1; jmp rsi; 
0x000000000fe71c: out 0xe, al; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fe7b4: out 0xe, al; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000fe62c: out 0xe, eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000013b6c7: out 0xe8, al; ret; 
0x00000000074bd2: out 0xe8, eax; clc; jbe short 0x0000000000074bd2; dec dword ptr [rax-0x77]; ret; 
0x00000000149d8b: out 0xe8, eax; cmovp edi, ebx; dec dword ptr [rax-0x77]; ret; 
0x000000000fd312: out 0xe8, eax; cmp al, dh; bnd jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000014208d: out 0xe8, eax; frstor [rcx-0x76b70012]; ret; 
0x0000000011328b: out 0xe8, eax; jmp rbx; 
0x00000000088c9b: out 0xe8, eax; mov edi, 0x8500002f; ror byte ptr [rdi], 0x44; ret; 
0x00000000036a83: out 0xe8, eax; pop r8; adc [rax], eax; mov rdi, rbx; call r12; 
0x00000000104b1b: out 0xe8, eax; pop rdi; in al, dx; jmp qword ptr [rsi+0x66]; 
0x0000000007464e: out 0xe8, eax; pushfq; jl short 0x000000000007464e; dec dword ptr [rax-0x77]; ret; 
0x000000000ed2bf: out 0xe8, eax; ret far; 
0x000000000c8637: out 0xe8, eax; ret; 
0x0000000004496d: out 0xec, al; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret; 
0x0000000010133b: out 0xf0, eax; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000006d75f: out 0xf0, eax; mov [rax], rdi; movsxd r8, [rbx+r14*4]; mov rcx, [rip+0x18f3b9]; call qword ptr [rcx+r8*8-0x40]; 
0x00000000072b5e: out 0xf0, eax; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x189fba]; call qword ptr [rcx+r8*8-0x40]; 
0x0000000010dba5: out 0xf1, eax; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000edcca: out 0xf3, al; jmp qword ptr [rsi+0xf]; 
0x00000000158e39: out 0xf3, al; movq [rdi-0x10], mm1; ret; 
0x00000000158eb9: out 0xf3, eax; movq [rdi-0x10], mm1; ret; 
0x0000000009d947: out 0xf8, al; dec dword ptr [rax+0x29]; ret; 
0x00000000115dba: out 0xf9, al; dec dword ptr [rax-0x73]; add eax, 0xfff9e72c; cmove rax, rdx; ret; 
0x0000000014b240: out 0xfa, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000007bdd1: out 0xfb, eax; jmp qword ptr [rsi+0x66]; 
0x0000000013a86d: out 0xfc, al; call qword ptr [rax+0x30]; 
0x0000000003da9f: out 0xfe, al; jmp qword ptr [rsi+0x66]; 
0x000000000894da: out 0xfe, al; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x0000000010aafe: out 0xfe, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000003bc3b: out 0xff, al; inc dword ptr [rax-0x76b7bcc8]; ret; 
0x0000000006d60f: out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x00000000074972: out 0xff, eax; dec dword ptr [rax+0x1]; clc; jmp rax; 
0x00000000115591: out 0xff, eax; jmp qword ptr [rsi+0x66]; 
0x00000000066e24: out 0xff, eax; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000ca682: out dx, al; adc al, 0x0; add dh, dh; ret; 
0x0000000008e45e: out dx, al; adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x00000000122f5e: out dx, al; add [rax-0x78], eax; ja short 0x0000000000122f65; ret; 
0x000000000c4aa6: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac6: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae6: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b06: out dx, al; add cl, [rax+0x29]; bnd jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000009121b: out dx, al; add eax, 0x70058900; rcl byte ptr [rip-0x3b7cb800], 0x8; ret; 
0x0000000017aeb6: out dx, al; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000122f56: out dx, al; add edi, [rax+0x2]; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x00000000042a2f: out dx, al; add r15, [rsp]; mov rdi, r12; call rcx; 
0x0000000014b494: out dx, al; call far fword ptr [rbx+0x44]; 
0x00000000080dd0: out dx, al; call qword ptr [r12+0x78]; 
0x000000000809c0: out dx, al; call qword ptr [r14+0x38]; 
0x0000000013916b: out dx, al; call qword ptr [rax+0x10]; 
0x00000000143045: out dx, al; call qword ptr [rax+0x18]; 
0x000000001402ed: out dx, al; call qword ptr [rax-0x17ff8275]; 
0x0000000013bdb5: out dx, al; call qword ptr [rbp+0x40]; 
0x0000000013b763: out dx, al; call qword ptr [rbx+0x40]; 
0x000000000d4714: out dx, al; call qword ptr [rsp+0x48]; 
0x0000000009a08e: out dx, al; call rax; 
0x000000000c1f3a: out dx, al; clc; dec dword ptr [rax-0x7d]; ret; 
0x0000000013fa78: out dx, al; dec dword ptr [rax-0x75]; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000001410f6: out dx, al; dec dword ptr [rax-0x77]; ret; 
0x00000000142b43: out dx, al; inc dword ptr [rbp+0x5b0775db]; pop rbp; pop r12; ret; 
0x0000000014a543: out dx, al; inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; ret; 
0x0000000013fbd3: out dx, al; inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret; 
0x000000001425db: out dx, al; jmp qword ptr [rax+rcx*2-0x39]; 
0x0000000014bed1: out dx, al; jmp qword ptr [rsi+0x2e]; 
0x00000000104914: out dx, al; jmp qword ptr [rsi+0xf]; 
0x0000000013e74c: out dx, al; jmp qword ptr [rsi-0x70]; 
0x0000000014b379: out dx, al; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000015923f: out dx, al; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000109739: out dx, al; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x000000000f8ad4: out dx, al; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x0000000015363a: out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000111109: out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28]; 
0x00000000041fc7: out dx, al; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000009309b: out dx, al; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall; 
0x00000000111d54: out dx, al; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28]; 
0x000000000f9a2a: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000008b3e8: out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000010b6c3: out dx, al; mov edi, r12d; mov [rbp-0x6d0], rax; mov eax, ebx; syscall; 
0x000000000903c7: out dx, al; mov edi, r12d; mov eax, 0x129; syscall; 
0x00000000093d0c: out dx, al; mov edi, r13d; mov eax, 0xf4; syscall; 
0x000000000fb51c: out dx, al; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000f9a94: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000001055a9: out dx, al; mov rax, [rax+0x8]; mov [rsi], rax; mov eax, 0x1; ret; 
0x00000000105629: out dx, al; mov rax, [rax+0x8]; ret; 
0x00000000139179: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000013903b: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000013e033: out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000004284f: out dx, al; mov rdi, r12; call rax; 
0x0000000005749b: out dx, al; mov rdi, r12; mov [rbp-0xd8], r8; call rax; 
0x0000000011908b: out dx, al; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x0000000004361f: out dx, al; mov rdi, r13; call rax; 
0x00000000071c3a: out dx, al; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000006c8e7: out dx, al; mov rdi, r14; call qword ptr [rbx+0x38]; 
0x0000000006bc32: out dx, al; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x00000000078177: out dx, al; mov rdi, r15; call qword ptr [r14+0x38]; 
0x0000000007ccc3: out dx, al; mov rdi, r15; call qword ptr [r14+0x80]; 
0x000000000781dc: out dx, al; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x0000000006e160: out dx, al; mov rdi, rbp; call qword ptr [r14+0x38]; 
0x00000000139026: out dx, al; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000006f6ec: out dx, al; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x0000000006e337: out dx, al; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000081de8: out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x00000000077511: out dx, al; mov rdi, rbx; call qword ptr [r13+0x38]; 
0x00000000078d8d: out dx, al; mov rdi, rbx; call qword ptr [r13+0x58]; 
0x00000000079990: out dx, al; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000078db7: out dx, al; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x00000000081c09: out dx, al; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x0000000013bf58: out dx, al; mov rdi, rbx; call qword ptr [rsp+0x18]; 
0x0000000004243a: out dx, al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000159249: out dx, al; movdqu [rdi-0x10], xmm1; ret; 
0x00000000092851: out dx, al; ret; 
0x000000000b53b9: out dx, al; xor eax, eax; ret; 
0x00000000104f4a: out dx, al; xor edi, edi; mov eax, ebx; syscall; 
0x000000000c5a6d: out dx, eax; adc [rax+0x1], cl; clc; ret; 
0x000000000570ff: out dx, eax; add [rax+0x39], ecx; ret; 
0x0000000003e8c9: out dx, eax; add [rax], al; add [rax-0x7d], cl; ret; 
0x00000000121eb2: out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx]; 
0x0000000002d2ab: out dx, eax; add rax, [r15]; call rax; 
0x00000000173fde: out dx, eax; add rax, rdi; vzeroupper; ret; 
0x0000000007b68e: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007b6ea: out dx, eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000151eb4: out dx, eax; and [rbp+rcx*4+0x1d], cl; ret; 
0x0000000013a86b: out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30]; 
0x000000000fd395: out dx, eax; bnd jmp qword ptr [rsi+0x41]; 
0x000000000fd3cb: out dx, eax; bnd jmp qword ptr [rsi-0x7d]; 
0x00000000072fc3: out dx, eax; call qword ptr [r12+0x38]; 
0x0000000007f118: out dx, eax; call qword ptr [r13+0x10]; 
0x00000000082029: out dx, eax; call qword ptr [r13+0x18]; 
0x0000000006f02d: out dx, eax; call qword ptr [r13+0x38]; 
0x0000000006e163: out dx, eax; call qword ptr [r14+0x38]; 
0x000000000816a6: out dx, eax; call qword ptr [r15+0x80]; 
0x00000000083c2d: out dx, eax; call qword ptr [rax+0x18]; 
0x00000000138e3c: out dx, eax; call qword ptr [rax+0x20]; 
0x00000000139c54: out dx, eax; call qword ptr [rax+0x28]; 
0x0000000013a7dc: out dx, eax; call qword ptr [rax+0x30]; 
0x0000000014c815: out dx, eax; call qword ptr [rax+0x338]; 
0x0000000006b678: out dx, eax; call qword ptr [rax+0x38]; 
0x0000000014530b: out dx, eax; call qword ptr [rax+0x40]; 
0x0000000013f1d9: out dx, eax; call qword ptr [rax+0x48]; 
0x000000000815ce: out dx, eax; call qword ptr [rax+0x80]; 
0x00000000139029: out dx, eax; call qword ptr [rax+0x8]; 
0x00000000081471: out dx, eax; call qword ptr [rax+0x90]; 
0x0000000014938d: out dx, eax; call qword ptr [rax-0x1a76b7ab]; 
0x0000000013b3eb: out dx, eax; call qword ptr [rax]; 
0x00000000076919: out dx, eax; call qword ptr [rbx+0x10]; 
0x0000000006dcf7: out dx, eax; call qword ptr [rbx+0x38]; 
0x00000000081b16: out dx, eax; call qword ptr [rbx+0x40]; 
0x00000000076c0b: out dx, eax; call qword ptr [rbx+0x80]; 
0x000000000823bf: out dx, eax; call qword ptr [rbx+0x88]; 
0x000000000767b5: out dx, eax; call qword ptr [rbx+0x90]; 
0x0000000006e0b2: out dx, eax; call qword ptr [rcx+0x38]; 
0x0000000002d302: out dx, eax; call qword ptr [rcx]; 
0x0000000011f026: out dx, eax; call qword ptr [rsp+0x18]; 
0x0000000011908e: out dx, eax; call qword ptr [rsp+0x58]; 
0x0000000013bea0: out dx, eax; call qword ptr [rsp+0x8]; 
0x00000000092e50: out dx, eax; call r12; 
0x0000000002d260: out dx, eax; call r15; 
0x000000000435ce: out dx, eax; call rax; 
0x0000000004256b: out dx, eax; call rbx; 
0x00000000139059: out dx, eax; call rcx; 
0x0000000006b520: out dx, eax; cld; jmp qword ptr [rsi+0x66]; 
0x000000000db5a2: out dx, eax; cmc; jmp qword ptr [rsi+0x66]; 
0x0000000013a888: out dx, eax; dec dword ptr [rax-0x75]; or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x00000000138962: out dx, eax; dec dword ptr [rax-0x77]; ret; 
0x0000000012fda8: out dx, eax; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x000000001701e6: out dx, eax; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x0000000014d1cf: out dx, eax; in eax, dx; inc dword ptr [rcx-0x80]; jl short 0x000000000014d1dd; jmp far fword ptr [rdi]; 
0x0000000014d1ce: out dx, eax; in eax, dx; inc dword ptr [rcx-0x80]; jl short 0x000000000014d1dd; jmp far fword ptr [rdi]; 
0x0000000011e4fd: out dx, eax; insb [rdi], dx; bnd jmp qword ptr [rsi-0x77]; 
0x00000000092830: out dx, eax; je short 0x0000000000092844; xor eax, eax; ret; 
0x000000001703b6: out dx, eax; jg short 0x0000000000170401; add eax, edi; vzeroupper; ret; 
0x00000000174356: out dx, eax; jg short 0x00000000001743a1; add eax, edi; vzeroupper; ret; 
0x00000000174556: out dx, eax; jg short 0x00000000001745a1; add eax, edi; vzeroupper; ret; 
0x0000000012f63b: out dx, eax; jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000013ff04: out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000018db90: out dx, eax; jmp qword ptr [rsi+0x66]; 
0x0000000012d9a8: out dx, eax; jmp qword ptr [rsi+0xf]; 
0x00000000147ec3: out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000014d044: out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000012f400: out dx, eax; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000012f8b5: out dx, eax; jns short 0x000000000012f8c4; add [rax-0x77], cl; or [r8-0x77], cl; ret far; 
0x000000001592bf: out dx, eax; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret; 
0x00000000154793: out dx, eax; lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d4: out dx, eax; lea r11, [rip+0x65963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc3: out dx, eax; lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d04: out dx, eax; lea r11, [rip+0x68173]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000013906a: out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20]; 
0x00000000141e50: out dx, eax; lea r8, [rip-0x7928]; lea rdx, [rip+0x2ab1]; call qword ptr [rax]; 
0x0000000007dcc4: out dx, eax; lea r9, [rsp+0x10]; call rbp; 
0x000000001398d6: out dx, eax; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000000b5e73: out dx, eax; lea r9, [rsp+0x70]; call rbx; 
0x00000000188ba9: out dx, eax; lea rax, [rdi+rax]; ret; 
0x000000000d1993: out dx, eax; loop 0x00000000000d1995; jmp qword ptr [rsi+0xf]; 
0x00000000139b6b: out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18]; 
0x0000000015346a: out dx, eax; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153566: out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534b2: out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x00000000093dc6: out dx, eax; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x00000000139100: out dx, eax; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139085: out dx, eax; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000013f942: out dx, eax; mov dword ptr [rsp+0x40], 0x0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28]; 
0x0000000014300d: out dx, eax; mov dword ptr [rsp+0xa8], 0x1; mov dword ptr [rsp+0xb0], 0x1; mov dword ptr [rsp+0xb8], 0x1; call qword ptr [rax+0x18]; 
0x000000000f9166: out dx, eax; mov eax, 0x135; syscall; 
0x000000000ff5b3: out dx, eax; mov eax, 0x147; syscall; 
0x000000000ff723: out dx, eax; mov eax, 0x148; syscall; 
0x000000001029fa: out dx, eax; mov eax, 0x9; syscall; 
0x0000000008b674: out dx, eax; mov eax, 0xca; syscall; 
0x0000000009419f: out dx, eax; mov eax, 0xde; syscall; 
0x000000000d2184: out dx, eax; mov eax, 0xe5; syscall; 
0x00000000093d0f: out dx, eax; mov eax, 0xf4; syscall; 
0x000000000f1190: out dx, eax; mov eax, [rdx+0x8]; ret; 
0x0000000008cd88: out dx, eax; mov eax, ecx; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000008c661: out dx, eax; mov eax, r13d; syscall; 
0x0000000008b762: out dx, eax; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000008b985: out dx, eax; mov eax, r15d; syscall; 
0x0000000008e662: out dx, eax; mov eax, r8d; syscall; 
0x00000000060e1d: out dx, eax; mov edi, 0x89410018; fmul st, dword ptr [rbx-0x61f63]; jmp qword ptr [rbx+rcx*4]; 
0x00000000092880: out dx, eax; mov edx, 0x0; cmovne rax, rdx; ret; 
0x00000000103b18: out dx, eax; mov edx, r13d; mov esi, 0x1; call r12; 
0x0000000008bade: out dx, eax; mov esi, 0x7; mov eax, 0xca; syscall; 
0x00000000121af0: out dx, eax; mov fs:[rbx], r14d; mov eax, 0x3; mov edi, [rbp-0x50]; syscall; 
0x0000000012385c: out dx, eax; mov qword ptr [rsp+0x8], 0x0; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000139c07: out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000b6545: out dx, eax; mov r9, r15; call rbx; 
0x000000000a1280: out dx, eax; mov rax, r8; ret; 
0x00000000103ba8: out dx, eax; mov rdx, r13; mov esi, 0x1; call r12; 
0x000000000b5fb1: out dx, eax; mov rsi, [rsp+0x18]; call rbx; 
0x0000000011f586: out dx, eax; mov rsi, [rsp+0x8]; call rbp; 
0x000000001592c9: out dx, eax; movdqu [rdi-0x10], xmm1; ret; 
0x0000000007d1c7: out dx, eax; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000007ae91: out dx, eax; pop rbp; pop r12; jmp rax; 
0x000000000813bc: out dx, eax; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d554: out dx, eax; pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x0000000007b315: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x0000000013a4de: out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000139d4d: out dx, eax; pop rcx; mov r12d, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x000000001703c6: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000014c746: out dx, eax; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x0000000018cbf7: out dx, eax; ret; 
0x00000000123925: out dx, eax; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x00000000050468: out dx, eax; xor eax, eax; ret; 
0x00000000103b06: out dx, eax; xor esi, esi; call r12; 
0x000000000b615c: out dx, eax; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x00000000088cee: out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000012919e: outsb dx, [rsi]; adc esi, ecx; jmp qword ptr [rsi+0x2e]; 
0x0000000009ab37: outsb dx, [rsi]; add [rax], al; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x000000000cfd48: outsb dx, [rsi]; add [rax], eax; add [rcx-0x11f43], al; jmp far fword ptr [rax]; 
0x00000000040579: outsb dx, [rsi]; enter 0x8948, 0x7; subsd xmm0, xmm1; ret; 
0x0000000009920e: outsb dx, [rsi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000168a8e: outsb dx, [rsi]; idiv edi; jmp qword ptr [rsi+0x66]; 
0x000000000b4f84: outsb dx, [rsi]; or eax, 0xc2f700; add [rax], al; je short 0x00000000000b4f57; ret; 
0x000000000f598d: outsb dx, [rsi]; or eax, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c179e: outsb dx, [rsi]; ret; 
0x000000000406ab: outsb dx, [rsi]; shl dl, 0xf; pop rcx; add eax, 0x178d3b; ret; 
0x000000000b35a0: outsb dx, [rsi]; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000e0f06: outsd dx, [rsi]; adc [r11+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret; 
0x00000000140bb3: outsd dx, [rsi]; adc [rax+0x1], bh; movups [rdi+0x20], xmm2; ret; 
0x00000000096435: outsd dx, [rsi]; adc [rax-0x7d], cl; ret far; 
0x00000000089ec3: outsd dx, [rsi]; add [rax-0x77], cl; fidivr st, dword ptr [rax+0xe]; lea rsi, [rip+0x11f52c]; syscall; 
0x0000000017e6f3: outsd dx, [rsi]; add [rdx-0x1f], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0x1f]; 
0x0000000008e25d: outsd dx, [rsi]; add al, 0x1; je 0x000000000008df8f; mov eax, 0x83; ret; 
0x0000000010bfb0: outsd dx, [rsi]; add eax, 0x1; mov [rdx], eax; ret; 
0x0000000005523d: outsd dx, [rsi]; and al, 0xe8; ret; 
0x000000000feec4: outsd dx, [rsi]; call qword ptr [rbx+0x48]; 
0x0000000017be5c: outsd dx, [rsi]; cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x00000000153bf7: outsd dx, [rsi]; data64 ret far; 
0x000000000a1c2e: outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66]; 
0x000000000f8542: outsd dx, [rsi]; jg short 0x00000000000f85bd; movups [rsi+0x70], xmm7; ret; 
0x000000000f8592: outsd dx, [rsi]; jle short 0x00000000000f8605; movups [rdi+0x78], xmm7; ret; 
0x000000000f8ee7: outsd dx, [rsi]; jle short 0x00000000000f8f5a; movups [rdi+0xf8], xmm7; ret; 
0x0000000017e6f9: outsd dx, [rsi]; jmp qword ptr [r10-0x1f]; 
0x000000000c4408: outsd dx, [rsi]; mov dl, 0xe; add al, ch; jmp qword ptr [rax-0x9]; 
0x00000000087802: outsd dx, [rsi]; mov eax, 0x80; xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x00000000153bf2: outsd dx, [rsi]; mov ebx, 0x4e6f0ff3; ret far; 
0x000000000f8e57: outsd dx, [rsi]; mov edi, 0xf8; movups [rsi+0x70], xmm7; ret; 
0x00000000140af6: outsd dx, [rsi]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret; 
0x00000000140ba2: outsd dx, [rsi]; or [eax+0x1], bh; movups [r8], xmm4; ret; 
0x00000000140342: outsd dx, [rsi]; or [r8+0x1], r15b; movups [r8], xmm1; ret; 
0x0000000013dc5b: outsd dx, [rsi]; or [rax+0x1], dil; movups [rdx], xmm1; ret; 
0x0000000005a581: outsd dx, [rsi]; or [rcx-0x77], al; ret; 
0x0000000004f85a: outsd dx, [rsi]; or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000fd26a: outsd dx, [rsi]; or al, ch; fcomip st, st(0); bnd jmp qword ptr [rsi-0x7d]; 
0x0000000009ab3d: outsd dx, [rsi]; or r8d, [rax]; cmovne rax, rdx; ret; 
0x0000000017bfb3: outsd dx, [rsi]; pop rcx; jmp qword ptr [rdx-0x2f]; 
0x00000000140bc2: outsd dx, [rsi]; pop rdi; and [rax+0x1], bh; movups [r8], xmm3; ret; 
0x0000000017a3b2: outsd dx, [rsi]; push rdi; ret far; 
0x0000000017a7ed: outsd dx, [rsi]; push rdi; ret; 
0x000000000aa43a: outsd dx, [rsi]; push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000afad6: outsd dx, [rsi]; push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x00000000040cf4: outsd dx, [rsi]; ret far; 
0x000000000aa43f: outsd dx, [rsi]; ret; 
0x000000000b34e7: outsd dx, [rsi]; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3422: outsd dx, [rsi]; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018d684: outsd dx, [rsi]; xchg rsi, rax; jmp qword ptr [rdx-0xd]; 
0x00000000140b92: outsd dx, [rsi]; xor [r8+0x1], r15b; movups [r8], xmm1; ret; 
0x0000000007a534: paddd mm7, mm7; add rsp, 0xd8; ret; 
0x000000000d6e23: paddw mm7, mm7; jmp qword ptr [rsi+0xf]; 
0x00000000040bc9: pand mm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040bc1: pand mm1, [rip+0x178598]; pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040bc8: pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000040bc0: pand xmm1, [rip+0x178598]; pand xmm0, [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000169a42: pcmpeqb mm0, mm1; lea r10, [r10+r9]; jmp r10; 
0x000000000c5772: pcmpeqb mm1, [rbx]; mov eax, [rdi+0x28]; cmp eax, [rsi+0x28]; jne short 0x00000000000c57e0; ret; 
0x000000000c57c2: pcmpeqb mm1, [rbx]; mov eax, [rdi+0x38]; cmp eax, [rsi+0x38]; jne short 0x00000000000c57e0; ret; 
0x000000000c5798: pcmpeqb mm2, [rip+0x3b30478b]; xor [rbp+0x3d], r14b; ret; 
0x000000000c5688: pcmpeqb mm2, [rip+0x63b078b]; jne 0x00000000000c57e0; ret; 
0x000000000c5712: pcmpeqb mm3, [rbx]; mov eax, [rdi+0x18]; cmp eax, [rsi+0x18]; jne 0x00000000000c57e0; ret; 
0x000000000c56b2: pcmpeqb mm3, [rbx]; mov eax, [rdi+0x8]; cmp eax, [rsi+0x8]; jne 0x00000000000c57e0; ret; 
0x0000000017e212: pcmpeqb mm3, [rbx]; mov eax, [rdi-0x8]; cmp eax, [rsi-0x8]; jne 0x000000000017e320; ret; 
0x000000000c5f94: pcmpeqb mm3, [rcx]; add rax, 0x2; ret; 
0x0000000017e1e4: pcmpeqb mm3, [rcx]; mov eax, [rdi-0x10]; cmp eax, [rsi-0x10]; jne 0x000000000017e320; ret; 
0x000000000c5f7f: pcmpeqb mm3, [rsi]; ret; 
0x00000000169a41: pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x0000000009060e: pcmpeqw mm0, [rdi]; xor eax, eax; ret; 
0x000000000c5cf1: pcmpeqw mm1, [rax+rcx*2+0x25]; call far fword ptr [rdi]; 
0x00000000090422: pcmpeqw mm1, [rbx]; xor eax, eax; ret; 
0x000000000b39a9: pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x000000000b3947: pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x000000000b1817: pcmpgtd mm1, [rcx-0x72b7fba9]; add eax, 0x6e88349; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x0000000017c104: pcmpgtd mm1, [rcx-0x7f3c01b2]; cli; add [rdx+0x2], esi; mov [rdi], cl; ret; 
0x000000000a5083: pcmpgtd mm1, [rdi]; xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x0000000016f582: pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x000000000016f630; ret; 
0x0000000016f3d0: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000174a54: pextrw edi, mm5, 0x74; ret far; 
0x0000000017028a: pextrw edi, mm5, 0xd7; rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017423c: pextrw edi, mm5, 0xd7; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x00000000040771: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x00000000040a91: pmovmskb eax, mm0; and eax, 0x8; ret; 
0x000000000a4b4c: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a5023: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000a4bb2: pmovmskb eax, mm1; test eax, eax; jne 0x00000000000a4c60; xor eax, eax; ret; 
0x000000000c4a22: pmovmskb eax, mm1; test eax, eax; jne 0x00000000000c4b00; xor eax, eax; ret; 
0x000000000a4be2: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000a4c40; xor eax, eax; ret; 
0x000000000a5085: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000a5100; xor eax, eax; ret; 
0x000000000a50b4: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000a5130; xor eax, eax; ret; 
0x000000000c4a52: pmovmskb eax, mm1; test eax, eax; jne short 0x00000000000c4ac0; xor eax, eax; ret; 
0x00000000040770: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000040a90: pmovmskb eax, xmm0; and eax, 0x8; ret; 
0x000000000a4b4b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x000000000a5022: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000a4bb1: pmovmskb eax, xmm1; test eax, eax; jne 0x00000000000a4c60; xor eax, eax; ret; 
0x000000000c4a21: pmovmskb eax, xmm1; test eax, eax; jne 0x00000000000c4b00; xor eax, eax; ret; 
0x000000000a4be1: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000a4c40; xor eax, eax; ret; 
0x000000000a5084: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000a5100; xor eax, eax; ret; 
0x000000000a50b3: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000a5130; xor eax, eax; ret; 
0x000000000c4a51: pmovmskb eax, xmm1; test eax, eax; jne short 0x00000000000c4ac0; xor eax, eax; ret; 
0x000000000aa62f: pmovmskb edx, mm4; test edx, edx; je short 0x00000000000aa63a; bsf eax, edx; ret; 
0x000000000aa62e: pmovmskb edx, xmm4; test edx, edx; je short 0x00000000000aa63a; bsf eax, edx; ret; 
0x00000000102a09: pop bx; pop rbp; ret; 
0x00000000186e8d: pop qword ptr [rax]; add [rax], al; add eax, 0x40; add rax, rdi; ret; 
0x0000000008a3f5: pop qword ptr [rax]; add [rax], al; syscall; 
0x000000001235f5: pop qword ptr [rbp+0x9]; add al, ch; adc ch, [rdi-0xf]; jmp qword ptr [rsi-0x70]; 
0x000000000ec837: pop qword ptr [rcx-0x2d]; jrcxz 0x00000000000ec7c5; sub [rcx+0x63], cl; ret far; 
0x000000000c9be5: pop qword ptr [rdx]; jbe short 0x00000000000c9bf0; ret; 
0x0000000013b9e4: pop r11; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000007ae93: pop r12; jmp rax; 
0x000000000d7046: pop r12; pop r13; and eax, 0xc; pop r14; ret; 
0x0000000002d613: pop r12; pop r13; jmp rax; 
0x000000000704a3: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000002d5c1: pop r12; pop r13; pop r14; jmp rax; 
0x00000000030158: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000002d79b: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000002ede4: pop r12; pop r13; pop r14; ret; 
0x00000000042f77: pop r12; pop r13; pop rbp; ret; 
0x0000000002ea53: pop r12; pop r13; ret; 
0x0000000011568e: pop r12; pop rbp; ret; 
0x0000000002d47a: pop r12; ret; 
0x000000000c6b89: pop r12; sub rax, rdx; ret; 
0x000000000d7048: pop r13; and eax, 0xc; pop r14; ret; 
0x0000000002d615: pop r13; jmp rax; 
0x000000000704a5: pop r13; mov rax, r9; pop r14; ret; 
0x000000000df550: pop r13; neg eax; pop r14; pop r15; ret; 
0x000000000c7729: pop r13; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret; 
0x0000000002d5c3: pop r13; pop r14; jmp rax; 
0x0000000003015a: pop r13; pop r14; pop r15; jmp rax; 
0x0000000002d98e: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000002d79d: pop r13; pop r14; pop r15; ret; 
0x0000000002ede6: pop r13; pop r14; ret; 
0x00000000042f79: pop r13; pop rbp; ret; 
0x0000000002ea55: pop r13; ret; 
0x00000000145120: pop r13; xor eax, eax; pop r14; jmp rcx; 
0x000000000c772b: pop r14; add rax, rdx; mov [rdi+0x20], rax; ret; 
0x0000000002d5c5: pop r14; jmp rax; 
0x00000000145124: pop r14; jmp rcx; 
0x0000000003015c: pop r14; pop r15; jmp rax; 
0x0000000002d990: pop r14; pop r15; pop rbp; ret; 
0x0000000002d79f: pop r14; pop r15; ret; 
0x0000000002ede8: pop r14; ret; 
0x00000000087e2b: pop r14; test edx, edx; sete al; neg eax; ret; 
0x0000000003015e: pop r15; jmp rax; 
0x0000000002d992: pop r15; pop rbp; ret; 
0x0000000002d7a1: pop r15; ret; 
0x00000000036a85: pop r8; adc [rax], eax; mov rdi, rbx; call r12; 
0x00000000140b1d: pop r8; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000086258: pop r8; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x000000001403d6: pop r8; mov eax, 0x1; ret; 
0x0000000008627e: pop r8; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x00000000036a86: pop rax; adc [rax], eax; mov rdi, rbx; call r12; 
0x000000000c7511: pop rax; adc al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000006e6a6: pop rax; add [rax-0x7bf0d505], eax; call qword ptr [rdx]; 
0x0000000006f6a3: pop rax; add [rax], eax; add [rax], al; jmp rax; 
0x00000000140b1e: pop rax; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000ed353: pop rax; add ch, al; and di, di; dec dword ptr [rax-0x77]; ret; 
0x0000000008587e: pop rax; add eax, [rax]; add bl, ch; ret far; 
0x000000000319a8: pop rax; call r14; 
0x00000000140cc5: pop rax; call rax; 
0x000000000e87bb: pop rax; cmp dh, dh; ret; 
0x0000000006c685: pop rax; idiv edi; jmp qword ptr [rax]; 
0x00000000140b26: pop rax; jmp rcx; 
0x000000000d8389: pop rax; jne short 0x00000000000d8390; ret; 
0x0000000013b490: pop rax; mov [rdx+0x68], rcx; ret; 
0x00000000086259: pop rax; mov byte ptr fs:[0x972], 0x0; mov fs:[0x300], rdi; ret; 
0x0000000013b8bb: pop rax; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000001403d7: pop rax; mov eax, 0x1; ret; 
0x0000000003a7c3: pop rax; mov eax, [rax+rdi*4+0x200]; ret; 
0x0000000003a753: pop rax; mov eax, [rax+rdx*4]; ret; 
0x000000000d84d8: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000008627f: pop rax; mov fs:[0x972], al; cmp eax, 0x1; je short 0x0000000000086290; ret; 
0x00000000141e66: pop rax; mov rax, [rbp+0x8]; pop rdx; call qword ptr [rax+0x20]; 
0x0000000002ff93: pop rax; mov rax, [rsp+0x20]; call rax; 
0x000000000309dd: pop rax; mov rax, [rsp+0x28]; call rax; 
0x00000000103329: pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x00000000140e2c: pop rax; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+0x8]; 
0x0000000003043b: pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f41: pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x0000000013fa7e: pop rax; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000000c6bbb: pop rax; mov rdi, rbp; call rbx; 
0x0000000003aa2c: pop rax; mov rdx, [rip+0x1b23b3]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x000000000c6cb6: pop rax; mov rsi, r15; mov rdi, rbp; call rbx; 
0x000000000ae654: pop rax; or [rax], eax; add cl, ch; ret; 
0x000000000e694b: pop rax; or bh, dh; ret; 
0x000000000db59c: pop rax; or eax, 0xef6be800; cmc; jmp qword ptr [rsi+0x66]; 
0x00000000108fcc: pop rax; pop rdi; call rax; 
0x00000000085cb4: pop rax; pop rdx; pop rbx; ret; 
0x00000000043e87: pop rax; ret; 
0x00000000177e87: pop rax; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000104659: pop rbp; add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13; 
0x000000000d742e: pop rbp; add bl, ch; ret; 
0x0000000006dc49: pop rbp; add dh, dh; ret; 
0x00000000139fef: pop rbp; add edi, esp; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x00000000170162: pop rbp; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001890a0: pop rbp; and [rdi], bh; ret; 
0x0000000018bfc0: pop rbp; and [rdi], bl; ret; 
0x000000000d7049: pop rbp; and eax, 0xc; pop r14; ret; 
0x000000000d75cb: pop rbp; clc; leave; ret; 
0x0000000011085f: pop rbp; cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000bce6a: pop rbp; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000128d50: pop rbp; jbe short 0x0000000000128d40; xor eax, eax; ret; 
0x00000000128dd0: pop rbp; jbe short 0x0000000000128dc0; xor eax, eax; ret; 
0x00000000128e70: pop rbp; jbe short 0x0000000000128e60; xor eax, eax; ret; 
0x00000000128f00: pop rbp; jbe short 0x0000000000128ef0; xor eax, eax; ret; 
0x0000000002d616: pop rbp; jmp rax; 
0x00000000138fa5: pop rbp; jmp rcx; 
0x0000000013a4e2: pop rbp; jmp rdx; 
0x00000000091b56: pop rbp; lea eax, [rax+rax+0x2]; pop r12; ret; 
0x000000000d264a: pop rbp; lea rax, [rax+rdx*8]; ret; 
0x00000000103299: pop rbp; lea rax, [rip+0xf2e5f]; pop r12; pop r13; ret; 
0x000000000b007f: pop rbp; mov al, [0x8d49830c634b000f]; or al, 0xb; jmp rcx; 
0x0000000012b768: pop rbp; mov al, [0xfff59de898558944]; call far fword ptr [rdi+0x4c]; 
0x0000000011c8c7: pop rbp; mov byte ptr [rcx], 0x0; pop r12; pop r13; ret; 
0x000000001117f9: pop rbp; mov eax, r10d; pop r12; ret; 
0x0000000008af63: pop rbp; mov eax, r12d; pop r12; pop r13; ret; 
0x0000000007e972: pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000013b663: pop rbp; mov eax, r8d; ret; 
0x00000000080942: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x0000000007d1c8: pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax; 
0x0000000009ba87: pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x0000000003afd7: pop rbp; mov rax, r12; pop r12; ret; 
0x0000000003e7d6: pop rbp; mov rax, r8; pop r12; ret; 
0x000000000704a6: pop rbp; mov rax, r9; pop r14; ret; 
0x000000000809ba: pop rbp; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000006b19a: pop rbp; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38]; 
0x000000000e0f0d: pop rbp; movups [r12], xmm0; pop r12; ret; 
0x00000000128946: pop rbp; movzx eax, al; pop r12; pop r13; ret; 
0x000000000df551: pop rbp; neg eax; pop r14; pop r15; ret; 
0x000000000e51fa: pop rbp; or al, 0x1; ret; 
0x0000000007ae92: pop rbp; pop r12; jmp rax; 
0x0000000002d612: pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002ede3: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000002ea52: pop rbp; pop r12; pop r13; ret; 
0x0000000002d479: pop rbp; pop r12; ret; 
0x000000000c6b88: pop rbp; pop r12; sub rax, rdx; ret; 
0x0000000007da28: pop rbp; pop r13; pop r14; pop r15; ret; 
0x000000000e25a0: pop rbp; pop r13; pop r14; ret; 
0x000000000c772a: pop rbp; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret; 
0x0000000002d5c4: pop rbp; pop r14; jmp rax; 
0x0000000003015b: pop rbp; pop r14; pop r15; jmp rax; 
0x0000000002d98f: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000002d79e: pop rbp; pop r14; pop r15; ret; 
0x0000000002ede7: pop rbp; pop r14; ret; 
0x00000000042f7a: pop rbp; pop rbp; ret; 
0x00000000050788: pop rbp; pop rbx; ret; 
0x0000000009978f: pop rbp; ret far; 
0x0000000002d6dc: pop rbp; ret; 
0x0000000002d555: pop rbp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x0000000013076e: pop rbp; sub eax, 0x1; pop r12; pop r13; ret; 
0x000000000c0b30: pop rbp; sub eax, edx; pop r12; ret; 
0x0000000009c1fe: pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x0000000004f8ae: pop rbp; xor eax, eax; pop r12; ret; 
0x00000000145121: pop rbp; xor eax, eax; pop r14; jmp rcx; 
0x000000001232ea: pop rbx; add r10, rax; mov eax, edx; mov [r9], r10; ret; 
0x0000000013ade9: pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x0000000009e168: pop rbx; cmovne rax, rdi; ret; 
0x0000000002e8ba: pop rbx; jmp qword ptr [rax+rcx*2+0x33]; 
0x00000000083744: pop rbx; jmp rax; 
0x00000000091ded: pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000001232b6: pop rbx; mov [r9], rax; mov eax, ecx; ret; 
0x00000000099dc0: pop rbx; mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000007b155: pop rbx; mov eax, 0x1; pop rbp; pop r12; ret; 
0x0000000011569e: pop rbx; mov eax, 0x5; pop r12; pop rbp; ret; 
0x000000000f4b96: pop rbx; mov eax, 0x5; pop rbp; pop r12; ret; 
0x000000000f8320: pop rbx; mov eax, 0x9; pop rbp; pop r12; ret; 
0x00000000087506: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x0000000007b178: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000043e85: pop rbx; mov eax, [rax+0x58]; ret; 
0x00000000087677: pop rbx; mov eax, fs:[rax]; ret; 
0x0000000013b9e5: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000849b4: pop rbx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18]; 
0x0000000009d7f5: pop rbx; mov qword ptr [rbp], 0x0; pop rbp; pop r12; ret; 
0x00000000043ff3: pop rbx; mov qword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x00000000192e63: pop rbx; mov qword ptr [rip+0x62541], 0x0; ret; 
0x0000000012270a: pop rbx; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000079875: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000007ae8e: pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x0000000013b436: pop rbx; movzx eax, al; pop rbp; pop r12; ret; 
0x000000000807dc: pop rbx; neg eax; ret; 
0x00000000132840: pop rbx; or al, 0x0; add [rdi], cl; adc [rip+0xc5b5c], esp; call rbx; 
0x00000000132849: pop rbx; or al, 0x0; call rbx; 
0x0000000009be6d: pop rbx; or eax, [rax]; lea rdx, [rip+0xbb079]; cmovne rax, rdx; ret; 
0x00000000085f7c: pop rbx; pop r12; jmp rax; 
0x00000000078a41: pop rbx; pop r12; pop r13; jmp rax; 
0x00000000042f76: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000005b9a6: pop rbx; pop r12; pop r13; ret; 
0x00000000055807: pop rbx; pop r12; ret; 
0x0000000019200a: pop rbx; pop r14; ret; 
0x0000000007b316: pop rbx; pop rbp; jmp rax; 
0x00000000138fa4: pop rbx; pop rbp; jmp rcx; 
0x00000000091b55: pop rbx; pop rbp; lea eax, [rax+rax+0x2]; pop r12; ret; 
0x000000000d2649: pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret; 
0x000000001117f8: pop rbx; pop rbp; mov eax, r10d; pop r12; ret; 
0x0000000007ea8e: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000013b662: pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000003afd6: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000003e7d5: pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x000000000e0f0c: pop rbx; pop rbp; movups [r12], xmm0; pop r12; ret; 
0x00000000085897: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000b5749: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002ea51: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000002d478: pop rbx; pop rbp; pop r12; ret; 
0x000000000c6b87: pop rbx; pop rbp; pop r12; sub rax, rdx; ret; 
0x000000000e259f: pop rbx; pop rbp; pop r13; pop r14; ret; 
0x0000000002d6db: pop rbx; pop rbp; ret; 
0x000000000c0b2f: pop rbx; pop rbp; sub eax, edx; pop r12; ret; 
0x000000001225f4: pop rbx; ret; 
0x0000000002ff71: pop rbx; ret; 
0x00000000092e9e: pop rbx; sar eax, 0x1f; pop rbp; pop r12; ret; 
0x000000000f836a: pop rbx; setl al; ret; 
0x00000000082a2c: pop rbx; setne al; movzx eax, al; neg eax; ret; 
0x0000000010384e: pop rbx; setne al; movzx eax, al; ret; 
0x00000000113e21: pop rbx; stc; bnd jmp qword ptr [rsi+0x66]; 
0x000000000b5cb7: pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000081e7f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000043e54: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000001702b8: pop rbx; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x00000000174244: pop rbx; tzcnt eax, eax; vzeroupper; ret; 
0x0000000011568b: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000013a4df: pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000004f87a: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000f8ff1: pop rbx; xor esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x0000000009c016: pop rcx; add [rax], al; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x000000001517f7: pop rcx; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000406af: pop rcx; add eax, 0x178d3b; ret; 
0x00000000040a04: pop rcx; add eax, 0x17907e; ret; 
0x000000000409b9: pop rcx; add eax, 0x1790c1; ret; 
0x00000000040994: pop rcx; add eax, 0x1790ea; ret; 
0x000000000a7a54: pop rcx; and al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000100f8b: pop rcx; idiv edi; mov eax, 0x1; add rsp, 0x8; ret; 
0x0000000017bfb5: pop rcx; jmp qword ptr [rdx-0x2f]; 
0x0000000017b988: pop rcx; jmp qword ptr [rdx-0xf]; 
0x0000000013a656: pop rcx; mov dword ptr [rsi], 0x0; ret; 
0x0000000008e2bb: pop rcx; mov ecx, 0x63480011; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000139d4e: pop rcx; mov r12d, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x0000000016acc7: pop rcx; or al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000010326c: pop rcx; pop rbp; pop r12; pop r13; ret; 
0x000000000efeda: pop rcx; pop rbx; ret; 
0x000000000979c2: pop rcx; sbb [rax-0x7d], cl; sub [rax], r9; add [rbp+0x39], ecx; ret far; 
0x000000000d8bb3: pop rcx; sbb esi, esi; jmp qword ptr [rsi+0xf]; 
0x0000000003a313: pop rcx; sub al, 0x1b; add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000018722a: pop rcx; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001898e6: pop rcx; tzcnt eax, eax; ret; 
0x000000000b9c8c: pop rcx; verw ax; jl short 0x00000000000b9c9a; clc; jmp qword ptr [rsi+0x66]; 
0x00000000151fe8: pop rdi; adc [rdx+0x8], dh; movaps [rdi], xmm4; jmp r9; 
0x00000000187f4b: pop rdi; add [rax-0x72b7bfb1], ecx; ret; 
0x00000000087ab8: pop rdi; add [rax], al; add [rax+0x16], bh; cmove eax, edx; ret; 
0x00000000083c29: pop rdi; add [rcx+rcx*4-0x11], ecx; call qword ptr [rax+0x18]; 
0x0000000011c68a: pop rdi; add ebx, ebp; fwait; xor eax, eax; ret; 
0x00000000179067: pop rdi; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001703c7: pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000fa2c5: pop rdi; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000140bc3: pop rdi; and [rax+0x1], bh; movups [r8], xmm3; ret; 
0x00000000170452: pop rdi; and ch, al; std; xlat [rbx]; ret; 
0x00000000108fcd: pop rdi; call rax; 
0x0000000009519a: pop rdi; cld; call far fword ptr [rax+0x48]; 
0x00000000104b1d: pop rdi; in al, dx; jmp qword ptr [rsi+0x66]; 
0x00000000153a09: pop rdi; in al, dx; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153819: pop rdi; in eax, dx; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x0000000003015f: pop rdi; jmp rax; 
0x000000000d6f30: pop rdi; mov eax, 0x3a; syscall; 
0x0000000009abde: pop rdi; or al, 0x0; cmovne rax, rdx; ret; 
0x00000000153639: pop rdi; out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153469: pop rdi; out dx, eax; mov [rdi-0x9], r8; mov [rdi-0x4], edx; ret; 
0x00000000153565: pop rdi; out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x1], dl; ret; 
0x000000001534b1: pop rdi; out dx, eax; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x0000000002d993: pop rdi; pop rbp; ret; 
0x0000000002d7a2: pop rdi; ret; 
0x00000000152868: pop rdi; shl byte ptr [rdx+0x14], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151f3a: pop rdi; shl byte ptr [rdx+0xd], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000010329d: pop rdi; sldt [rcx+0x5c]; pop r13; ret; 
0x0000000008e03b: pop rdi; xor eax, eax; ret; 
0x000000001285f2: pop rdx; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000098892: pop rdx; add [rax], eax; add [rax-0x7d], cl; call far fword ptr [rdi]; 
0x00000000141e6b: pop rdx; call qword ptr [rax+0x20]; 
0x0000000006ecec: pop rdx; jbe 0x000000000006f668; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000073b8e: pop rdx; jbe 0x0000000000074950; lea rax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x00000000087355: pop rdx; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000b9892: pop rdx; mov ecx, edi; jmp qword ptr [rsi+0x2e]; 
0x00000000083655: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18]; 
0x000000000fa522: pop rdx; mov esp, 0x48bfff8; and al, 0x48; add esp, 0x18; ret; 
0x000000001453ef: pop rdx; mov rax, [rbp+0x8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x40]; 
0x0000000010332d: pop rdx; pop r12; ret; 
0x00000000085cb5: pop rdx; pop rbx; ret; 
0x000000000efed9: pop rdx; pop rcx; pop rbx; ret; 
0x000000000d67ed: pop rdx; ret; 
0x00000000076a7f: pop rdx; sti; jmp qword ptr [rsi+0x2e]; 
0x000000000c5d35: pop rdx; test al, 0xf0; jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x00000000139522: pop rdx; xor [rax+rax], cl; test eax, eax; je short 0x0000000000139530; ret; 
0x0000000009adb5: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000192612: pop rsi; add eax, 0x2877c; ret; 
0x000000000c772c: pop rsi; add rax, rdx; mov [rdi+0x20], rax; ret; 
0x000000000b76ae: pop rsi; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c113e: pop rsi; in eax, dx; sti; jmp qword ptr [rsi+0x66]; 
0x00000000052eae: pop rsi; jbe short 0x0000000000052eaf; jmp qword ptr [rsi+0x66]; 
0x0000000002d5c6: pop rsi; jmp rax; 
0x00000000145125: pop rsi; jmp rcx; 
0x000000000df284: pop rsi; jne short 0x00000000000df2b0; mov byte ptr [rdi+0x8], 0x19; mov eax, 0x1; ret; 
0x0000000010a91e: pop rsi; mov eax, 0x8b48fff7; and al, 0x8; add rsp, 0x28; ret; 
0x00000000170ac1: pop rsi; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000003015d: pop rsi; pop r15; jmp rax; 
0x0000000002d991: pop rsi; pop r15; pop rbp; ret; 
0x0000000002d7a0: pop rsi; pop r15; ret; 
0x0000000002ede9: pop rsi; ret; 
0x00000000069526: pop rsi; sbb al, [rax]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000087e2c: pop rsi; test edx, edx; sete al; neg eax; ret; 
0x00000000103e42: pop rsp; and al, 0x10; call rax; 
0x000000000c6a25: pop rsp; and al, 0xf0; movsd xmm0, [rsp-0x10]; ret; 
0x000000000872f0: pop rsp; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x0000000007ae94: pop rsp; jmp rax; 
0x00000000138d6e: pop rsp; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000010ae20: pop rsp; mov bl, 0xf7; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x000000000c9be4: pop rsp; pop qword ptr [rdx]; jbe short 0x00000000000c9bf0; ret; 
0x000000000d7047: pop rsp; pop r13; and eax, 0xc; pop r14; ret; 
0x0000000002d614: pop rsp; pop r13; jmp rax; 
0x000000000704a4: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000002d5c2: pop rsp; pop r13; pop r14; jmp rax; 
0x00000000030159: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x0000000002d79c: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000002ede5: pop rsp; pop r13; pop r14; ret; 
0x00000000042f78: pop rsp; pop r13; pop rbp; ret; 
0x0000000002ea54: pop rsp; pop r13; ret; 
0x0000000011568f: pop rsp; pop rbp; ret; 
0x00000000132848: pop rsp; pop rbx; or al, 0x0; call rbx; 
0x0000000002d47b: pop rsp; ret; 
0x000000000408dc: pop rsp; rol ebx, 0x90; and esi, 0x80000000; mov [rdi], esi; ret; 
0x000000000c6b8a: pop rsp; sub rax, rdx; ret; 
0x000000000f66d2: popfq; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x000000000d31bf: popfq; jp short 0x00000000000d31be; jmp qword ptr [rsi+0x2e]; 
0x000000000b3512: popfq; lea r11, [rip+0xf6f7a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1682: popfq; lea r11, [rip+0xf8c36]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affd2: popfq; lea r11, [rip+0xfa106]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000009afd4: popfq; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x000000001425da: popfq; out dx, al; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000000f38ed: popfq; ret; 
0x00000000040bd1: por mm0, mm1; ret; 
0x00000000040bd0: por xmm0, xmm1; ret; 
0x00000000159392: psllq mm1, [r15]; jg short 0x00000000001593a7; ret; 
0x0000000015beb2: psllq mm1, [r15]; jg short 0x000000000015bec7; ret; 
0x000000000af9b5: psllq mm1, [rdi]; jg short 0x00000000000af9c2; mov [rdi+0xf], ecx; ret; 
0x000000000afa16: psllq mm1, [rdi]; jg short 0x00000000000afa23; mov [rdi+0xf], rcx; ret; 
0x000000000afb18: psllq mm1, [rdi]; jg short 0x00000000000afb24; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b0685: psllq mm1, [rdi]; jg short 0x00000000000b0692; mov [rdi+0xf], ecx; ret; 
0x000000000b06e6: psllq mm1, [rdi]; jg short 0x00000000000b06f3; mov [rdi+0xf], rcx; ret; 
0x000000000b07e8: psllq mm1, [rdi]; jg short 0x00000000000b07f4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b1025: psllq mm1, [rdi]; jg short 0x00000000000b1032; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret; 
0x000000000b10a6: psllq mm1, [rdi]; jg short 0x00000000000b10b3; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret; 
0x000000000b11a8: psllq mm1, [rdi]; jg short 0x00000000000b11b4; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret; 
0x000000000b1e85: psllq mm1, [rdi]; jg short 0x00000000000b1e92; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret; 
0x000000000b1f06: psllq mm1, [rdi]; jg short 0x00000000000b1f13; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret; 
0x000000000b2008: psllq mm1, [rdi]; jg short 0x00000000000b2014; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret; 
0x000000000b2c65: psllq mm1, [rdi]; jg short 0x00000000000b2c72; mov [rdi+0xf], ecx; ret; 
0x000000000b2cc6: psllq mm1, [rdi]; jg short 0x00000000000b2cd3; mov [rdi+0xf], rcx; ret; 
0x000000000b2dc8: psllq mm1, [rdi]; jg short 0x00000000000b2dd4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b3735: psllq mm1, [rdi]; jg short 0x00000000000b3742; mov [rdi+0xf], ecx; ret; 
0x000000000b3796: psllq mm1, [rdi]; jg short 0x00000000000b37a3; mov [rdi+0xf], rcx; ret; 
0x000000000b3898: psllq mm1, [rdi]; jg short 0x00000000000b38a4; movdqu [rdi+0xf], xmm2; ret; 
0x00000000159393: psllq mm1, [rdi]; jg short 0x00000000001593a7; ret; 
0x0000000015beb3: psllq mm1, [rdi]; jg short 0x000000000015bec7; ret; 
0x0000000013447d: psubb mm7, mm7; jmp qword ptr [rsi+0x66]; 
0x000000000d7d8d: push 0x0; add [rax], al; syscall; 
0x00000000179b92: push 0x0; add al, 0x0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000014c43e: push 0x0; call qword ptr [rax+0x338]; 
0x000000000c7348: push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x000000000b5ac6: push 0x0; lea r9, [rsp+0x20]; call r13; 
0x000000000b57eb: push 0x0; lea rcx, [rax+0x1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx; 
0x000000000b592a: push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x0000000014c435: push 0x0; lea rcx, [rsi+0x3a0]; push 0x0; call qword ptr [rax+0x338]; 
0x0000000014c3f4: push 0x0; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x00000000032542: push 0x0; mov r9, [rsp+0x38]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; call r15; 
0x0000000002dce0: push 0x0; mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx; 
0x000000000c1980: push 0x0; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13; 
0x0000000014c742: push 0x0; mov rdi, rbp; push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x0000000002ff88: push 0x0; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000c7346: push 0x0; push 0x0; lea r8, [rsp+0x40]; call qword ptr [rax+0x338]; 
0x0000000014c6cc: push 0x0; push rax; mov rax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x000000000fe1de: push 0x18478948; mov rax, [rsi+0x70]; mov [rdi+0x20], rdx; mov [rdi+0x28], rax; ret; 
0x00000000074933: push 0x1; jmp rax; 
0x000000000b5c8b: push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x000000000b5928: push 0x1; push 0x0; lea rcx, [rax+0x4]; lea r9, [rsp+0x20]; call rbx; 
0x000000000b5c87: push 0x1; xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x000000000b5ac1: push 0x1; xor r8d, r8d; push 0x0; lea r9, [rsp+0x20]; call r13; 
0x0000000013b939: push 0x1b804; add [rax], al; add rsp, 0x10; pop rbx; ret; 
0x00000000141ac9: push 0x1e; mov r9, rbp; mov r8, rbx; mov rsi, r14; call qword ptr [rax]; 
0x00000000140296: push 0x1f0fe1ff; add byte ptr [rax], 0x0; add [rax], al; ret; 
0x00000000030436: push 0x24748b48; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax; 
0x00000000030f3c: push 0x24748b48; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax; 
0x0000000014028d: push 0x2; add rdi, 0x68; jmp rcx; 
0x0000000014c3fd: push 0x2; call qword ptr [rax+0x338]; 
0x00000000084df2: push 0x2e6666c3; nop [rax+rax]; mov rax, rdi; ret; 
0x00000000082475: push 0x31; idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000073431: push 0x39480000; ret; 
0x0000000014049c: push 0x438b48ff; jo short 0x000000000014042c; imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18]; 
0x00000000044714: push 0x48000001; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000b54d4: push 0x48000d87; cmove eax, edx; ret; 
0x00000000177fb5: push 0x48; add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000018cdcf: push 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000013e030: push 0x48ee8948; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x000000000d3781: push 0x48ff894c; mov esi, [rsp+0x60]; call r12; 
0x0000000013b8b8: push 0x58488948; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000000b0412: push 0x5; add [rax], al; ret; 
0x0000000004d5d1: push 0x5b000003; pop rbp; pop r12; pop r13; ret; 
0x0000000012e684: push 0x5be0894c; pop rbp; pop r12; pop r13; ret; 
0x00000000030c00: push 0x5c415d5b; pop r13; pop r14; pop r15; jmp rax; 
0x000000000586df: push 0x5c415d5b; pop r13; pop r14; pop r15; ret; 
0x000000000b587f: push 0x5c415d5b; pop r13; ret; 
0x000000000f853b: push 0x6076110f; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret; 
0x000000000f830f: push 0x60894408; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000007b0c6: push 0x60894c30; cmp [rcx+0x5d5b7453], cl; pop r12; ret; 
0x000000000415c9: push 0x78110f41; js short 0x0000000000041614; mov eax, ecx; add rsp, 0xd0; ret; 
0x000000000f858f: push 0x7e6f0ff3; jo short 0x00000000000f85a5; adc [rdi+0x78], edi; ret; 
0x000000001860d0: push 0xb75c0f5; ret; 
0x0000000009d41a: push 0xd; add [rax-0x73], cl; add eax, 0xccdc; cmove rax, rdx; ret; 
0x00000000040874: push 0xf00162b; push rsp; ret; 
0x0000000003a812: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a79f; loopne 0x000000000003a81f; ret; 
0x0000000003a822: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a7af; loopne 0x000000000003a836; ret; 
0x0000000003a852: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a7df; loopne 0x000000000003a860; ret; 
0x0000000003a8e2: push 0xfff6348; mov bh, 0x4; js short 0x000000000003a86f; loopne 0x000000000003a8f2; ret; 
0x00000000168184: push 0xffffffff80000006; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x0000000002fc94: push 0xffffffff85ffffc6; shl byte ptr [rsp+rbp+0x48], 0x83; ret; 
0x00000000092268: push 0xffffffff89481d7d; and [r8-0x77], r9b; cmp eax, 0x162609; ret; 
0x00000000085a66: push 0xffffffff8b4cfffa; je short 0x0000000000085a91; sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x0000000009b0d7: push 0xffffffff8d480000; adc eax, 0xc726f; cmovne rax, rdx; ret; 
0x0000000010d64a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1000; ret; 
0x0000000010d5d2: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x100; ret; 
0x0000000010d1da: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1; ret; 
0x0000000010d55a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2000; ret; 
0x0000000010d35a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x200; ret; 
0x0000000010d25a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2; ret; 
0x0000000010d45a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4000; ret; 
0x0000000010d15a: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x400; ret; 
0x0000000010d4da: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4; ret; 
0x0000000010d3da: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8000; ret; 
0x0000000010d0da: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8; ret; 
0x0000000002d782: push 0xffffffffc0890016; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000132a5f: push 0xffffffffc4834808; or [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000b632c: push 0xffffffffe8001002; fild st, dword ptr [rcx-0x8]; jmp qword ptr [rsi+0x2e]; 
0x00000000043834: push 0xffffffffeb000430; ret far; 
0x00000000140ce4: push 0xffffffffebfffb96; ret far; 
0x000000000f2d57: push 0xffffffffebfffffe; ret; 
0x000000001410f2: push 0xffffffffeeb260e8; dec dword ptr [rax-0x77]; ret; 
0x000000000c5d27: push 0xfffffffff0478d48; ret; 
0x0000000019260c: push 0xfffffffff3000274; divps xmm0, [rip+0x2877c]; ret; 
0x00000000187175: push 0xfffffffffbc5c9f5; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000009ddab: push 0xffffffffffff19e9; jmp qword ptr [rsi+0x2e]; 
0x0000000009dd40: push 0xffffffffffff1ee9; jmp qword ptr [rsi+0x2e]; 
0x0000000013bc68: push 0xffffffffffff70e9; jmp qword ptr [rsi-0x70]; 
0x0000000013bc67: push 0xffffffffffff70e9; jmp qword ptr [rsi-0x70]; 
0x000000000bda58: push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70]; 
0x000000000b8f58: push 0xffffffffffff7fe9; jmp qword ptr [rsi-0x70]; 
0x000000000dcbfd: push 0xffffffffffffff8b; or [r8-0x7d], cl; ret; 
0x00000000041ba2: push 0xffffffffffffffb2; sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000130a62: push 0xffffffffffffffb8; add [rax], eax; mov edi, [rbx]; call qword ptr [rsp+0x28]; 
0x00000000133abd: push 0xfffffffffffffff0; jmp qword ptr [rsi+0x2e]; 
0x00000000093a6b: push 0xfffffffffffffffa; jmp qword ptr [rsi-0x70]; 
0x00000000095c95: push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x000000000af05f: push qword ptr [rax]; leave; mov [rax], cl; mov rax, rdi; ret; 
0x0000000014c3ab: push qword ptr [rax]; mov rax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x00000000041d3b: push qword ptr [rbp+0x1a]; mov rax, [rip+0x1ab0cb]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000017dce7: push qword ptr [rbp+0x1a]; xor eax, eax; ret; 
0x00000000103c1c: push qword ptr [rbp+0x27]; mov rdi, [rbp]; call rbx; 
0x00000000115722: push qword ptr [rbp+0x2]; xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x000000000f85b9: push qword ptr [rbp+0x5]; mov [rdi], si; xor eax, eax; ret; 
0x00000000101909: push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x00000000104532: push qword ptr [rbp+rax+0x48]; test esi, esi; jne short 0x0000000000104540; ret; 
0x00000000104552: push qword ptr [rbp+rax+0x48]; test esi, esi; jne short 0x0000000000104560; ret; 
0x00000000192ba7: push qword ptr [rbp+rax-0x18]; push rcx; mov dl, 0xe9; dec dword ptr [rax-0x7d]; ret; 
0x000000001929a9: push qword ptr [rbp+rdx+0x48]; mov eax, [rdi+0x20]; test rax, rax; je short 0x00000000001929bc; call rax; 
0x0000000011f3e2: push qword ptr [rbp-0x15]; pop rbx; ret; 
0x00000000129b6b: push qword ptr [rbp-0x16]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000114017: push qword ptr [rbp-0x1a]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000013241f: push qword ptr [rbp-0x22]; add rsp, 0x18; ret; 
0x00000000084340: push qword ptr [rbp-0x44]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004165c: push qword ptr [rbx+0x1]; ret; 
0x00000000050036: push qword ptr [rbx+0x3]; xor eax, eax; ret; 
0x00000000077292: push qword ptr [rbx+rcx+0x48]; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000001029f2: push qword ptr [rbx+rdi+0x41]; mov edx, ebx; mov rdi, rbp; mov eax, 0x9; syscall; 
0x0000000007785f: push qword ptr [rbx+rdx*2+0x48]; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000001390ea: push qword ptr [rbx+rsi*2+0x48]; mov eax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000005c1cc: push qword ptr [rcx+rcx+0x44]; mov eax, eax; ret; 
0x00000000142481: push qword ptr [rcx+rcx-0x75]; jl short 0x00000000001424ab; sub al, 0xe8; ret; 
0x000000000e248e: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000fd2e9: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000008762d: push qword ptr [rcx]; rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; xor eax, eax; ret; 
0x00000000065139: push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000114079: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000080c06: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x000000001446be: push qword ptr [rcx]; ror byte ptr [rcx+0x1], 0xdd; call rbp; 
0x0000000005c15c: push qword ptr [rdi+0x1]; ret; 
0x000000000d6f81: push qword ptr [rdi+0x1c]; hlt; mov eax, esi; syscall; 
0x000000000fe661: push qword ptr [rdi+0x1c]; ret; 
0x0000000010b17c: push qword ptr [rdi+0x21]; ret; 
0x000000000fe602: push qword ptr [rdi+0x23]; ret; 
0x000000000d7d38: push qword ptr [rdi+0x25]; ret; 
0x0000000010b24d: push qword ptr [rdi+0x28]; ret; 
0x000000001098cb: push qword ptr [rdi+0x2]; ret; 
0x00000000093eba: push qword ptr [rdi+0x2b]; ret; 
0x000000000fe6e9: push qword ptr [rdi+0x2c]; ret; 
0x000000000d3d88: push qword ptr [rdi+0x2d]; ret; 
0x000000000fe757: push qword ptr [rdi+0x2e]; ret; 
0x0000000010b372: push qword ptr [rdi+0x33]; ret; 
0x000000000d69c8: push qword ptr [rdi+0x35]; ret; 
0x0000000010964c: push qword ptr [rdi+0x39]; mov r8d, eax; mov eax, r8d; ret; 
0x0000000010991a: push qword ptr [rdi+0x3]; ret; 
0x000000000ff8d9: push qword ptr [rdi+0x3c]; ret; 
0x000000000fa368: push qword ptr [rdi+0x45]; ret; 
0x00000000041691: push qword ptr [rdi+0x4]; ret; 
0x000000000416cd: push qword ptr [rdi+0x50]; ret; 
0x000000000feb32: push qword ptr [rdi+0x53]; ret; 
0x00000000044a38: push qword ptr [rdi+0x55]; ret; 
0x000000000945c0: push qword ptr [rdi+0x5]; ret; 
0x000000000d67eb: push qword ptr [rdi+0x5a]; ret; 
0x000000000d689e: push qword ptr [rdi+0x5f]; ret; 
0x0000000009406b: push qword ptr [rdi+0x62]; ret; 
0x0000000010a601: push qword ptr [rdi+0x64]; ret; 
0x000000000fdad0: push qword ptr [rdi+0x65]; add rsp, 0x30; pop r13; ret; 
0x00000000102a07: push qword ptr [rdi+0x66]; pop rbx; pop rbp; ret; 
0x00000000094117: push qword ptr [rdi+0x6]; mov eax, r8d; ret; 
0x0000000005c18f: push qword ptr [rdi+0x6]; ret; 
0x00000000093fab: push qword ptr [rdi+0x6a]; ret; 
0x000000001090e1: push qword ptr [rdi+0x6c]; ret; 
0x000000000fdfdb: push qword ptr [rdi+0x72]; ret; 
0x000000000ffe8d: push qword ptr [rdi+0x78]; add rsp, 0x50; pop r12; ret; 
0x000000000d2246: push qword ptr [rdi+0x7]; ret; 
0x00000000090a96: push qword ptr [rdi+0x7]; xor eax, eax; ret; 
0x0000000009451d: push qword ptr [rdi+0x8]; ret; 
0x000000000fe0c4: push qword ptr [rdi+0x9]; ret; 
0x00000000104e33: push qword ptr [rdi+0xa]; ret; 
0x000000001394f8: push qword ptr [rdi+rax+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000013936f: push qword ptr [rdi+rcx+0x48]; mov eax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000103296: push qword ptr [rdi+rdx+0x5d]; lea rax, [rip+0xf2e5f]; pop r12; pop r13; ret; 
0x000000000d2194: push qword ptr [rdi-0x34]; add rsp, 0x8; pop rbp; pop r12; ret; 
0x00000000151edc: push qword ptr [rdx+0x7]; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000041b92: push qword ptr [rdx+rcx+0x48]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x000000000d995b: push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15; 
0x00000000043e23: push qword ptr [rdx+rdi+0x31]; rol byte ptr [rax+0x375003f], 0x5b; ret; 
0x000000000fa627: push qword ptr [rdx+rdx*8+0x48]; mov [rsp], edi; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x00000000085e0b: push qword ptr [rdx+rdx+0x48]; sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x00000000139822: push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000013981c: push qword ptr [rip+0x7fb66]; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000139705: push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000001396ff: push qword ptr [rip+0x7fc83]; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x000000000fdd66: push qword ptr [rsi+0x1f]; cmp eax, 0xffffffa1; je short 0x00000000000fdd78; neg eax; ret; 
0x000000000fdf66: push qword ptr [rsi+0x1f]; cmp eax, 0xffffffa1; je short 0x00000000000fdf78; neg eax; ret; 
0x0000000008aa59: push qword ptr [rsi+0x4]; neg eax; ret; 
0x0000000008aa14: push qword ptr [rsi+0x9]; neg eax; ret; 
0x0000000010bfef: push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x0000000003725e: push qword ptr [rsi+rbx*8-0x18]; sbb dl, [rcx+rdx]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000120397: push qword ptr [rsi+rcx+0x48]; mov eax, [rip+0xdc8c7]; ret; 
0x000000000644bf: push qword ptr [rsi-0x32]; mov [rdi], rsi; ret; 
0x000000001331ad: push qword ptr [rsi]; hlt; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000001182ad: push qword ptr [rsp+0x18]; mov r8, [rsp+0x18]; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000139d3c: push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x00000000139d35: push qword ptr [rsp+0xc8]; push qword ptr [rsp+0xc8]; lea r9, [rsp+0x30]; call qword ptr [rax]; 
0x000000000f917b: push qword ptr [rsp+rax-0x75]; and al, 0xc; add rsp, 0x10; pop rbp; ret; 
0x0000000010ace7: push qword ptr [rsp+rax-0x75]; and al, 0xc; add rsp, 0x18; ret; 
0x0000000002d259: push qword ptr [rsp+rbp+0x4c]; mov esi, esp; mov edi, ebp; call r15; 
0x00000000085cac: push r10; call rax; 
0x00000000077107: push r10; sti; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x0000000014244c: push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000001403f6: push r12; mov eax, 0x1; ret; 
0x0000000010bee3: push r13; jmp qword ptr [rsi+0xf]; 
0x0000000014244a: push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x00000000099fb2: push r8; add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx; 
0x000000000836e7: push r8; add [rax], al; add [rax], al; pop rbx; ret; 
0x0000000009a230: push r8; add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x000000000861b8: push r8; mov fs:[0x300], rdi; ret; 
0x0000000014c747: push r8; mov r8, rbx; call qword ptr [rax+0x338]; 
0x0000000007aaea: push rax; adc [rax-0x77], cl; ret; 
0x0000000013afff: push rax; adc [rbp+0x15840fc0], al; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx]; 
0x00000000084b31: push rax; adc [rbx-0x2fd6efb9], cl; ret; 
0x00000000099fb3: push rax; add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx; 
0x00000000094894: push rax; add [rax-0x77], ecx; adc eax, 0x158af3; ret; 
0x000000000b562a: push rax; add [rax-0x77], ecx; ret; 
0x000000000836e8: push rax; add [rax], al; add [rax], al; pop rbx; ret; 
0x00000000074943: push rax; add [rax], eax; add [rax], al; jmp rax; 
0x0000000009a231: push rax; add [rbp-0x2d], esi; mov rdi, rsi; call rax; 
0x000000001233a3: push rax; add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+0x2], 0x0; ret; 
0x00000000090509: push rax; add [rdi], rax; ret; 
0x000000000a9c5d: push rax; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000a156e: push rax; add al, bl; nop [rax]; mov [rax], ecx; ret; 
0x0000000004d7cf: push rax; add rsp, 0x10; pop rbx; ret; 
0x0000000014c4b8: push rax; add rsp, 0x28; ret; 
0x0000000011f497: push rax; add rsp, 0x8; ret; 
0x00000000141f5b: push rax; and [rax-0x75], cl; jge short 0x0000000000141f61; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x0000000013906f: push rax; call qword ptr [rax+0x20]; 
0x0000000002dd5f: push rax; call rbx; 
0x000000001457b4: push rax; cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000090608: push rax; cmpxchg [rdi], rcx; jne short 0x0000000000090618; xor eax, eax; ret; 
0x000000000911da: push rax; cmpxchg [rdi], rdx; jne short 0x00000000000911d3; xor eax, eax; ret; 
0x0000000007197b: push rax; idiv edi; call qword ptr [rax+0x4817048d]; 
0x00000000126832: push rax; inc dh; jmp far fword ptr [rsi]; 
0x000000000f56fc: push rax; insb [rdi], dx; call far fword ptr [rax+0x5a]; 
0x000000000fc9bb: push rax; jmp qword ptr [rsi-0x7d]; 
0x000000000fe430: push rax; mov [rdi+0x50], rdx; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x00000000140afe: push rax; mov [rsi+0x10], rax; ret; 
0x000000000861b9: push rax; mov fs:[0x300], rdi; ret; 
0x0000000014c748: push rax; mov r8, rbx; call qword ptr [rax+0x338]; 
0x000000000f25c6: push rax; mov rax, [rbp-0x1c8]; mov rcx, [rbx]; call rax; 
0x0000000014c6ce: push rax; mov rax, [rip+0xa07f2]; mov r8, [rbx+0x10]; call qword ptr [rax+0x338]; 
0x000000000999d6: push rax; mov rax, r12; pop r12; ret; 
0x000000000366ca: push rax; mov rcx, [rsp+0x20]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; call r15; 
0x0000000003254d: push rax; mov rdi, [rsp+0x48]; call r15; 
0x00000000033e82: push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000002ff8e: push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax; 
0x000000000309d8: push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax; 
0x000000001144d6: push rax; mov rsi, rdx; call rax; 
0x0000000009494a: push rax; or [rax-0x75], cl; adc [rcx-0x7d], al; ret; 
0x000000000ec907: push rax; or [rax-0x77], cl; ret; 
0x00000000127d11: push rax; or al, 0x0; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x0000000008e5f9: push rax; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000ffe93: push rax; pop r12; ret; 
0x00000000092e7c: push rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000014c530: push rax; push rax; add rsp, 0x28; ret; 
0x000000000587c9: push rax; ret far; 
0x000000000405d3: push rax; ret; 
0x00000000084b26: push rax; sbb [rbx-0x2fd6efb9], cl; ret; 
0x0000000007b1a1: push rax; sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x000000001155c5: push rax; shr ax, 0xe; and eax, 0x1; ret; 
0x0000000007759f: push rax; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000007a1de: push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x000000000942de: push rax; syscall; 
0x00000000101489: push rax; test dword ptr [rax-0xf89fe06], 0xec74203c; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x000000000fe435: push rax; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x000000000929ca: push rbp; add [rax-0x77], cl; ret far; 
0x000000000911a9: push rbp; add [rbp+0xb], dh; xor eax, eax; pop rbp; ret; 
0x00000000088030: push rbp; add rsp, 0xa0; xor eax, eax; pop rbp; ret; 
0x00000000188fa6: push rbp; and [rdi], bh; ret; 
0x0000000018bec6: push rbp; and [rdi], bl; ret; 
0x000000000650b7: push rbp; jge short 0x00000000000650d2; add [rbx-0x55763], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x00000000051015: push rbp; jmp qword ptr [rsi+0xf]; 
0x0000000010bee4: push rbp; jmp qword ptr [rsi+0xf]; 
0x00000000099bda: push rbp; lea rdx, [rip+0x11015e]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000076d62: push rbp; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000115339: push rbp; nop; mov rdx, r12; call rax; 
0x00000000098108: push rbp; or [rax-0x77], cl; ret; 
0x0000000005dd3e: push rbp; or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret; 
0x00000000114e3f: push rbp; or byte ptr [rax-0x77], 0xda; call rax; 
0x0000000014244b: push rbp; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000f9f62: push rbp; push rbx; sub rsp, 0x98; syscall; 
0x00000000044a3a: push rbp; ret; 
0x0000000007709e: push rbp; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000007709f: push rbp; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000005ad1c: push rbp; sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e]; 
0x00000000059bfc: push rbp; sub dh, al; add [rip-0xfd517], ch; jmp qword ptr [rsi+0x2e]; 
0x00000000081612: push rbp; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000003864d: push rbx; add [rax-0x7d], ecx; ret; 
0x000000000f8318: push rbx; add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000f844b: push rbx; add al, 0xeb; ret; 
0x000000000db782: push rbx; add ecx, [rax-0x7d]; ret; 
0x00000000075a3c: push rbx; add ecx, ebp; ret; 
0x00000000077861: push rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000085caa: push rbx; and [rcx+0x52], al; call rax; 
0x00000000188e70: push rbx; bsf eax, eax; add rax, rdx; ret; 
0x0000000017403a: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000189a2e: push rbx; bsf eax, eax; ret; 
0x00000000179099: push rbx; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000174389: push rbx; bsf eax, eax; vzeroupper; ret; 
0x00000000112271: push rbx; cmp [rax-0x7d], cl; ret; 
0x0000000006c69e: push rbx; idiv edi; call far fword ptr [rax+0x44]; 
0x0000000007b0cd: push rbx; je short 0x000000000007b12b; pop rbp; pop r12; ret; 
0x00000000054d89: push rbx; jne short 0x0000000000054d89; dec dword ptr [rcx-0x77]; ret; 
0x000000000c4acc: push rbx; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c5d0c: push rbx; lea rax, [rdi-0x10]; ret; 
0x0000000008e777: push rbx; mov rbx, rdi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000108abb: push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x0000000007c339: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082b9f: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000b2292: push rbx; movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret; 
0x000000000b0a72: push rbx; movq [rdi+0x30], mm7; ret; 
0x000000000b3cd2: push rbx; movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret; 
0x00000000103f82: push rbx; or [rax-0x7d], cl; ret; 
0x0000000013c8ef: push rbx; or [rcx-0x77], cl; ret; 
0x000000000d8387: push rbx; pop rax; jne short 0x00000000000d8390; ret; 
0x0000000017ecf6: push rbx; ret; 
0x000000000feb34: push rbx; ret; 
0x000000000d85e2: push rbx; setne al; ret; 
0x00000000139c0e: push rbx; sub [rbp+0x488774c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013ff18: push rbx; sub rsp, 0x438; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000000f9f63: push rbx; sub rsp, 0x98; syscall; 
0x00000000139ea9: push rbx; xchg esi, edi; jmp qword ptr [rsi+0xf]; 
0x000000000d21bc: push rbx; xor eax, eax; add rsp, 0x8; ret; 
0x000000000d8523: push rcx; add [rax], al; jne short 0x00000000000d8530; mov eax, 0x40; ret; 
0x00000000164234: push rcx; add al, bl; nop [rax+rax]; mov [rcx], edx; ret; 
0x00000000164273: push rcx; add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret; 
0x000000001426db: push rcx; cmpsd [rsi], [rdi]; or al, [rax]; pop rbx; ret; 
0x0000000018f825: push rcx; dec byte ptr [rax-0x77]; ret far; 
0x0000000006b8bb: push rcx; in al, dx; cld; call qword ptr [rax-0x1a76b7ab]; 
0x0000000017bb96: push rcx; jl short 0x000000000017bbe1; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm15; ret; 
0x0000000017bb9d: push rcx; jl short 0x000000000017bbe8; adc [rcx-0x1], edi; ret; 
0x0000000017bcfd: push rcx; jl short 0x000000000017bd48; adc [rcx+0x6], esi; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bd04: push rcx; jl short 0x000000000017bd4f; adc [rcx+0x7], edi; ret; 
0x00000000105573: push rcx; jns short 0x0000000000105584; add [rax-0x7d], cl; call qword ptr [rax]; 
0x00000000192bab: push rcx; mov dl, 0xe9; dec dword ptr [rax-0x7d]; ret; 
0x00000000085e12: push rcx; mov rcx, r10; call rax; 
0x0000000009b06c: push rcx; or eax, [rax]; cmovne rax, rdx; ret; 
0x000000000c8933: push rcx; ret far; 
0x00000000032ef4: push rcx; ret; 
0x000000000771c8: push rcx; sti; call far fword ptr [rbx+0x4c]; 
0x000000000b3c83: push rdi; adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret; 
0x000000000b3b81: push rdi; adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret; 
0x000000000b3c60: push rdi; adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret; 
0x000000000b3be1: push rdi; adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret; 
0x000000000b3bc1: push rdi; adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret; 
0x000000000b3b02: push rdi; adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret; 
0x000000000b1ed2: push rdi; adc al, 0x48; lea eax, [rdi+0x15]; ret; 
0x0000000005182f: push rdi; add [rcx-0x77], ecx; push rsp; ret; 
0x000000000b3938: push rdi; add al, 0x30; in eax, dx; mov [rdi+0x5], ch; ret; 
0x000000000b394a: push rdi; add al, 0x30; in eax, dx; mov [rdi+0x6], ch; ret; 
0x000000000b0eda: push rdi; add al, 0x48; lea eax, [rdi+0x5]; ret; 
0x000000000b1d1a: push rdi; add al, 0x48; lea eax, [rdi+0x6]; ret; 
0x000000001594f9: push rdi; add al, 0x48; mov [rdi], ecx; ret; 
0x000000000b08a4: push rdi; add al, 0xc3; nop [rax+rax]; mov [rdi-0x1], rdx; ret; 
0x000000000b390a: push rdi; add dh, [rax]; in eax, dx; mov [rdi+0x3], ch; ret; 
0x000000000b0f8c: push rdi; add eax, 0xc478d48; ret; 
0x000000000b1ddc: push rdi; add eax, 0xd478d48; ret; 
0x000000000b024c: push rdi; add eax, 0xde88349; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b3968: push rdi; add esi, [rax]; in eax, dx; mov [rdi+0x7], ch; ret; 
0x00000000087bbb: push rdi; and [rax-0x77], cl; ja short 0x0000000000087bd9; ret; 
0x000000000fe1e9: push rdi; and [rax-0x77], cl; sub r11b, r8b; mov qword ptr [rdi], 0x0; ret; 
0x0000000003f840: push rdi; and [rcx+rcx*4-0x30], cl; ret; 
0x000000001532f8: push rdi; clc; ret; 
0x00000000153470: push rdi; cld; ret; 
0x00000000153f97: push rdi; cli; mov [rdi-0x4], ecx; ret; 
0x00000000158dd9: push rdi; cmc; mov [rdi-0x4], ecx; ret; 
0x000000000b04f0: push rdi; cmovns eax, [rbx-0x72b7e018]; jg short 0x00000000000b0519; jne 0x00000000000b0980; ret; 
0x000000000d6f38: push rdi; cmp eax, 0xfffff001; jae short 0x00000000000d6f41; ret; 
0x00000000158d59: push rdi; hlt; mov [rdi-0x4], ecx; ret; 
0x000000000b08b2: push rdi; inc ebx; nop [rax+rax]; mov [rdi], rdx; ret; 
0x000000000b5035: push rdi; jb short 0x00000000000b502f; call far fword ptr [rdx+0x31]; 
0x00000000113675: push rdi; js short 0x000000000011366a; dec dword ptr [rcx-0x75]; sub [rax-0x77], r9b; ret; 
0x000000000835e0: push rdi; mov [rdi+0x18], rax; mov [rdi+0x8], rax; ret; 
0x00000000083614: push rdi; mov [rdi+0x8], rax; ret; 
0x00000000158c3a: push rdi; mov [rdi-0x8], rcx; ret; 
0x00000000141a42: push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20]; 
0x000000000b398a: push rdi; or [rax], dh; in eax, dx; mov [rdi+0x9], ch; ret; 
0x000000000b39ac: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret; 
0x000000000b39ea: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret; 
0x0000000008befc: push rdi; or [rbx+0x47521f8], al; add dword ptr [rdi+0x4], 0x1; add rsp, 0x8; ret; 
0x00000000052313: push rdi; or [rcx+0x2b806], cl; add [rax], al; ret; 
0x00000000050781: push rdi; or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x00000000080750: push rdi; or [rdi], cl; mov dh, 0x0; ret; 
0x0000000012278b: push rdi; or al, 0x48; mov [rsi], edi; ret; 
0x000000000b1170: push rdi; or eax, 0x1c478d48; ret; 
0x000000000b1fd0: push rdi; or eax, 0x1d478d48; ret; 
0x000000000b0490: push rdi; or eax, 0x1de88349; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x0000000009c28d: push rdi; or eax, [rax]; lea rdx, [rip+0xbac79]; cmovne rax, rdx; ret; 
0x000000000fe434: push rdi; push rax; xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x0000000017a3b3: push rdi; ret far; 
0x0000000017a7ee: push rdi; ret; 
0x0000000014584a: push rdi; sbb [rcx+rcx*4-0x40], al; ret; 
0x00000000154197: push rdi; stc; mov [rdi-0x4], ecx; ret; 
0x00000000056e3c: push rdi; std; call qword ptr [rax+0xb60f41]; 
0x000000001539ba: push rdi; std; mov [rdi-0x2], cx; ret; 
0x00000000076ddf: push rdi; sti; jmp qword ptr [rsi+0x2e]; 
0x00000000153d97: push rdi; sti; mov [rdi-0x4], ecx; ret; 
0x000000000b4da3: push rdi; str [rax+0x63]; add al, 0xba; add rax, rdx; jmp rax; 
0x00000000145a61: push rdi; sub [rax+0x1], bh; ret; 
0x0000000007caf9: push rdi; sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x000000000b3c40: push rdi; wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x000000000ecae2: push rdi; xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x0000000011fb73: push rdi; xor [rcx], cl; add al, ch; or eax, 0x89480001; ret; 
0x000000000aa43b: push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000a4be8: push rdi; xor eax, eax; ret; 
0x00000000158cca: push rdi; xrelease mov [rdi-0x8], rcx; ret; 
0x00000000142473: push rdx; adc [rcx-0x75], cl; or [rcx+r9*4-0x9], r9b; call qword ptr [rax+0x20]; 
0x000000000d20da: push rdx; add [rax], al; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x0000000004e454: push rdx; add al, [rcx-0x77]; ret; 
0x00000000085cad: push rdx; call rax; 
0x0000000014751a: push rdx; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000d8553: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d8555: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000d3a00: push rdx; mov rdx, r14; mov r9, [rsp+0x18]; mov rax, [rsp+0x10]; call rax; 
0x000000001432fa: push rdx; nop; out dx, al; jmp qword ptr [rsi-0x70]; 
0x00000000077108: push rdx; sti; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x0000000008526e: push rdx; sti; jmp qword ptr [rsi+0x66]; 
0x00000000149fee: push rdx; sub [rbx], ecx; add [rbx+0x197f01f8], al; add rsp, 0x8; ret; 
0x000000000946bb: push rsi; adc [rax], eax; sub rsp, 0x8; syscall; 
0x000000000afb37: push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret; 
0x00000000159801: push rsi; add [rbx+0x157890e], ecx; mov [rdi], ecx; ret; 
0x00000000051daf: push rsi; add [rcx-0x77], ecx; push rsp; ret; 
0x0000000017c1e9: push rsi; add ah, [rdx-0xf]; jl short 0x000000000017c237; adc [rsi+0x3], edx; ret; 
0x000000000b3904: push rsi; add ah, [rsi-0x77]; js 0xffffffffed3b3b65; mov [rdi+0x3], ch; ret; 
0x000000000b3933: push rsi; add al, 0x89; js 0xffffffffed3b3d93; mov [rdi+0x5], ch; ret; 
0x000000000b3944: push rsi; add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+0x6], ch; ret; 
0x00000000159791: push rsi; add cl, [rbx+0x257890e]; mov [rdi], ecx; ret; 
0x000000000409b1: push rsi; add eax, 0x178779; mulss xmm0, [rip+0x1790c1]; ret; 
0x0000000004098c: push rsi; add eax, 0x1787ae; mulss xmm0, [rip+0x1790ea]; ret; 
0x00000000159482: push rsi; add eax, 0x480e8b48; mov [rdi+0x5], edx; mov [rdi], rcx; ret; 
0x000000000b0f85: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xc]; ret; 
0x000000000b1dd5: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; lea rax, [rdi+0xd]; ret; 
0x000000000af945: push rsi; add eax, 0x480f8948; mov [rdi+0x5], edx; ret; 
0x0000000017c27f: push rsi; add eax, 0x487cf162; adc [rsi+0x6], edx; vmovups [rsi+0x1c0], zmm2; ret; 
0x00000000159721: push rsi; add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret; 
0x000000000b0ef3: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+0x6]; ret; 
0x000000000b1d33: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+0x7]; ret; 
0x000000000af8e3: push rsi; add ecx, [rcx+0x357890f]; ret; 
0x000000000b3963: push rsi; add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+0x7], ch; ret; 
0x0000000009b9ed: push rsi; and byte ptr [rcx+rax+0x48080000], 0x8d; add eax, 0x18394; cmove rax, rdx; ret; 
0x000000000b5eb6: push rsi; clc; jmp qword ptr [rsi+0xf]; 
0x00000000153406: push rsi; clc; mov [rdi-0x10], r11; mov [rdi-0x8], rdx; ret; 
0x00000000153422: push rsi; clc; mov [rdi-0x8], rdx; ret; 
0x00000000153d76: push rsi; clc; mov [rdi-0xd], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153f76: push rsi; clc; mov [rdi-0xe], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000154176: push rsi; clc; mov [rdi-0xf], rcx; mov [rdi-0x8], rdx; ret; 
0x00000000153b91: push rsi; cld; mov [rdi-0x4], edx; ret; 
0x000000001535e5: push rsi; cld; mov [rdi-0x9], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537c5: push rsi; cld; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x000000001539a5: push rsi; cld; mov [rdi-0xb], rcx; mov [rdi-0x4], edx; ret; 
0x00000000153b85: push rsi; cld; mov [rdi-0xc], rcx; mov [rdi-0x4], edx; ret; 
0x00000000086c80: push rsi; cli; jmp qword ptr [rax+rcx*2-0x39]; 
0x000000000c16e6: push rsi; cli; jmp qword ptr [rsi+0xf]; 
0x0000000017d826: push rsi; cmc; sub eax, edx; ret; 
0x000000000788d6: push rsi; cmp [rax+0x39], cl; ret; 
0x00000000146bb6: push rsi; cmp edi, ebp; jmp qword ptr [rsi+0xf]; 
0x0000000017d816: push rsi; hlt; sub eax, edx; ret; 
0x000000000c91a6: push rsi; ja short 0x00000000000c91a4; dec dword ptr [rax+0x39]; ret; 
0x000000001144b2: push rsi; je short 0x00000000001144c0; mov eax, 0x7; ret; 
0x000000000e7fce: push rsi; jmp far fword ptr [rcx]; 
0x0000000017c0d2: push rsi; loopne 0x000000000017c098; vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x00000000158cc2: push rsi; mov rcx, [rsi-0x8]; mov [rdi-0xd], rdx; mov [rdi-0x8], rcx; ret; 
0x00000000158c32: push rsi; mov rcx, [rsi-0x8]; mov [rdi-0xe], rdx; mov [rdi-0x8], rcx; ret; 
0x0000000018aa29: push rsi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000b39e4: push rsi; or [rax-0x77], cl; jns 0xffffffffed3b4245; mov [rdi+0xc], ch; ret; 
0x000000000b3984: push rsi; or [rax-0x77], cl; js 0xffffffffed3b41e5; mov [rdi+0x9], ch; ret; 
0x000000000b39a5: push rsi; or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret; 
0x0000000004431a: push rsi; or [rbx-0x3786fe17], al; xor eax, eax; ret; 
0x0000000005dc30: push rsi; or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret; 
0x0000000005ce07: push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x5ff43], cl; dec dword ptr [rax-0x7d]; ret; 
0x0000000005fa82: push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x61f4b], cl; dec dword ptr [rax-0x7d]; ret; 
0x00000000040648: push rsi; or eax, 0x178ab2; mulsd xmm0, xmm1; ret; 
0x00000000040622: push rsi; or eax, 0x178ae8; mulsd xmm0, xmm1; ret; 
0x000000000b1167: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret; 
0x000000000b1fc7: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret; 
0x000000000afad7: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret; 
0x000000000afb17: push rsi; psllq mm1, [rdi]; jg short 0x00000000000afb24; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b07e7: push rsi; psllq mm1, [rdi]; jg short 0x00000000000b07f4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b2dc7: push rsi; psllq mm1, [rdi]; jg short 0x00000000000b2dd4; movdqu [rdi+0xf], xmm2; ret; 
0x000000000b3897: push rsi; psllq mm1, [rdi]; jg short 0x00000000000b38a4; movdqu [rdi+0xf], xmm2; ret; 
0x000000001147db: push rsi; ret; 
0x0000000004087f: push rsi; ret; 
0x0000000002d4a3: push rsi; sbb ebx, [rax]; add [rdi], cl; xchg ebp, eax; ret; 
0x0000000017c081: push rsi; std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x00000000076f44: push rsi; sti; jmp qword ptr [rsi+0xf]; 
0x0000000006bfca: push rsi; sub dh, al; add [rcx-0x7d], cl; ret; 
0x0000000017d806: push rsi; sub eax, edx; ret; 
0x0000000017d7f6: push rsi; sub eax, edx; ret; 
0x00000000158ed2: push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000fd887: push rsi; xor ax, ax; ret; 
0x00000000037263: push rsp; adc [rax], eax; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x000000000fea2a: push rsp; add [rax], al; mov eax, 0x10; syscall; 
0x000000000feb58: push rsp; add [rax], al; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000409aa: push rsp; add eax, 0x178770; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040985: push rsp; add eax, 0x178795; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x000000000404c2: push rsp; add eax, 0x178c28; andpd xmm1, [rip+0x178c10]; orpd xmm0, xmm1; ret; 
0x00000000083dcd: push rsp; add eax, 0xc0834800; add [rax+0x39], ecx; ret; 
0x000000000a1542: push rsp; and al, 0x10; mov [rax], rdx; ret; 
0x000000000a15f2: push rsp; and al, 0x10; mov [rdi], rdx; lea rax, [rdi+rax-0x1]; ret; 
0x0000000002d378: push rsp; and al, 0x10; mov [rsp+0x8], rax; cmovne rdi, r15; call rsi; 
0x000000000d68d7: push rsp; and al, 0x10; mov eax, 0xf7; syscall; 
0x0000000010a702: push rsp; and al, 0x10; mov rsi, [rsp+0x8]; syscall; 
0x00000000110f9f: push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax; 
0x000000000ff3e1: push rsp; and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff491: push rsp; and al, 0x14; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000a1504: push rsp; and al, 0x16; mov [rdi+0x6], dl; ret; 
0x00000000114efd: push rsp; and al, 0x18; mov [rbp-0x80], edx; mov rdx, r13; call rax; 
0x000000000a1472: push rsp; and al, 0x18; mov [rdi], rdx; add rax, rdi; ret; 
0x00000000141952: push rsp; and al, 0x18; mov esi, 0x6; call qword ptr [rax+0x28]; 
0x0000000014191b: push rsp; and al, 0x18; mov esi, 0x6; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x0000000013941a: push rsp; and al, 0x18; mov rsi, [rsp+0x10]; call qword ptr [rax]; 
0x0000000011a151: push rsp; and al, 0x18; mov rsi, [rsp+0x8]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000d68d2: push rsp; and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x00000000085981: push rsp; and al, 0x1f; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x0000000014c32d: push rsp; and al, 0x1f; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [rbx+0x350]; 
0x000000000c148c: push rsp; and al, 0x20; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x00000000085eb9: push rsp; and al, 0x28; mov rax, [rax]; add rsp, 0x28; jmp rax; 
0x00000000119086: push rsp; and al, 0x38; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x58]; 
0x00000000142ba8: push rsp; and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x000000001182b7: push rsp; and al, 0x40; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x00000000142d68: push rsp; and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x00000000114e3b: push rsp; and al, 0x60; mov [rbp-0x80], edx; mov rdx, rbx; call rax; 
0x000000000d377f: push rsp; and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12; 
0x00000000123596: push rsp; and al, 0x8; add rsp, 0x10; pop rbp; ret; 
0x00000000145358: push rsp; and al, 0x8; call qword ptr [rax+0x48]; 
0x00000000108fb8: push rsp; and al, 0x8; mov eax, 0x38; syscall; 
0x0000000002d2fb: push rsp; and al, 0x8; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000081d24: push rsp; and al, 0x8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x000000000fe612: push rsp; and al, 0xb0; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000fea25: push rsp; and al, 0xc8; mov esi, 0x5401; mov eax, 0x10; syscall; 
0x000000000a14e3: push rsp; and al, 0xc; mov [rdi+0x4], dx; ret; 
0x000000001419d2: push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28]; 
0x000000000a15b1: push rsp; and al, 0xe; mov [rax+0x6], dl; ret; 
0x000000000a1696: push rsp; and al, 0xe; mov [rdi+0x6], dl; ret; 
0x000000000a1598: push rsp; and al, 0xec; mov [rax+0x4], dx; ret; 
0x000000000a1675: push rsp; and al, 0xec; mov [rdi+0x4], dx; ret; 
0x00000000191e75: push rsp; and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret; 
0x000000000a1588: push rsp; and al, 0xf4; mov [rax+0x4], dl; ret; 
0x000000000a14cb: push rsp; and al, 0xf4; mov [rdi+0x4], dl; ret; 
0x000000000fe66a: push rsp; and al, 0xf8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000008b194: push rsp; and al, 0xf8; ret; 
0x000000000a156a: push rsp; and al, 0xfa; mov [rax+0x2], dl; ret; 
0x000000000a14ad: push rsp; and al, 0xfa; mov [rdi+0x2], dl; ret; 
0x000000000d4448: push rsp; and al, 0xfb; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000189146: push rsp; cmp ah, [rax]; sub eax, edx; ret; 
0x0000000016f847: push rsp; cmp ah, [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000192882: push rsp; fld st, qword ptr [rax]; test rax, rax; je short 0x000000000019288c; call rax; 
0x0000000014244d: push rsp; lea r9, [rsp+0x3a]; call qword ptr [rax]; 
0x000000000a511b: push rsp; lea rax, [rdi+rax+0x10]; ret; 
0x0000000010b028: push rsp; mov cl, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000001403f7: push rsp; mov eax, 0x1; ret; 
0x000000000d8413: push rsp; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x00000000144afc: push rsp; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax]; 
0x0000000003f83b: push rsp; or dword ptr [rax], 0x2057034c; mov rax, r10; ret; 
0x000000000404ca: push rsp; or eax, 0x178c10; orpd xmm0, xmm1; ret; 
0x0000000016e539: push rsp; or eax, 0x894d0000; ret far; 
0x000000000d85e0: push rsp; push rbx; setne al; ret; 
0x000000001030bd: push rsp; ret far; 
0x00000000040879: push rsp; ret; 
0x00000000179a60: pushfq; add [rax+rax], eax; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000007c84a: pushfq; add bh, bl; jmp qword ptr [rsi-0x70]; 
0x000000000deb6f: pushfq; and al, 0xa4; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000eb8f2: pushfq; and al, 0xb0; add [rax], al; add [rax-0x77], cl; ret far; 
0x000000000738dd: pushfq; idiv edi; dec dword ptr [rax+0x1]; clc; jmp rax; 
0x00000000074650: pushfq; jl short 0x000000000007464e; dec dword ptr [rax-0x77]; ret; 
0x00000000127b11: pushfq; nop [rax+rax]; xor eax, eax; ret; 
0x000000001431f4: pushfq; or al, [rax]; cmp dword ptr fs:[rax], 0x18; je short 0x0000000000143200; ret; 
0x0000000009aa54: pushfq; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x000000000f836c: pushfq; rol bl, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000018be08: pushfq; shl bh, 0xd8; or eax, 0x1; ret; 
0x00000000178112: pushfq; shl bh, 0xd8; or eax, 0x1; vzeroupper; ret; 
0x000000000780e1: pushfq; sti; jmp qword ptr [rsi+0x2e]; 
0x000000000cbf75: rcl byte ptr [rax+0x45000001], 0x6b; ret; 
0x000000000a89dd: rcl byte ptr [rax+rax], 0x1; add [rbp-0x77], cl; ret far; 
0x0000000016f322: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x000000000b223c: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0xf810b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a1c: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0xf974b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0b0c: rcl byte ptr [rbp+0x634b000f], 0x1; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000011f739: rcl byte ptr [rbx+0x48], 0x89; ret far; 
0x0000000008d8ec: rcl byte ptr [rcx], 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000002d129: rcl byte ptr [rcx], 0x48; mov [rip+0x1c35b6], eax; ret; 
0x0000000008c37f: rcl byte ptr [rcx], cl; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x00000000100a08: rcl byte ptr [rdi+rcx], 0x1; add [rax], al; add [rax], al; add rsp, 0x8; ret; 
0x00000000091221: rcl byte ptr [rip-0x3b7cb800], 0x8; ret; 
0x00000000086e57: rcl byte ptr [rsi], 0x83; loopne 0x0000000000086e53; jne short 0x0000000000086e11; pop rbx; ret; 
0x00000000040e63: rcl dword ptr [rax+rax], 0x1; add rsp, 0x10; pop rbx; ret; 
0x0000000008d74c: rcl dword ptr [rcx], 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000008c1c1: rcl dword ptr [rcx], cl; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x00000000098e75: rcl dword ptr [rcx], cl; add al, ch; ret; 
0x00000000132d5c: rcl ebx, cl; jrcxz 0x0000000000132d69; ret; 
0x00000000040287: rcr bl, 0x3f; fld st, tbyte ptr [rsp+0x8]; fsubrp; ret; 
0x0000000015f2ad: rcr byte ptr [rax], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000081e82: rcr byte ptr [rbp+0x41], 0x1; pop rsp; ret; 
0x0000000002ede2: rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000092e59: rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x00000000036bf0: rcr byte ptr [rbp+0x41], 0x5c; ret; 
0x00000000078c16: rcr byte ptr [rbp+0x41], cl; pop rsp; pop r13; jmp rax; 
0x00000000050787: rcr byte ptr [rbp+0x5b], 0x1; ret; 
0x000000001421b6: rcr byte ptr [rbp-0x17], cl; ret; 
0x0000000011c8c6: rcr byte ptr [rbp-0x3a], 0x1; add [rcx+0x5c], al; pop r13; ret; 
0x00000000042fc5: rcr byte ptr [rbx+0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000df74c: rcr byte ptr [rbx+0x41], 0x5c; pop r13; ret; 
0x0000000008f068: rcr byte ptr [rbx+0x44], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000097653: rcr byte ptr [rbx+0x48], 0x81; stc; jmp far fword ptr [rcx]; 
0x0000000013b661: rcr byte ptr [rbx+0x5d], 0x1; mov eax, r8d; ret; 
0x000000001928e7: rcr byte ptr [rbx+0x5d], 0x1; pop r12; pop r13; pop r14; ret; 
0x000000000c0c12: rcr byte ptr [rbx+0x5d], 0x1; pop r12; pop r13; ret; 
0x0000000009c49e: rcr byte ptr [rbx+0x5d], 0x1; pop r12; ret; 
0x000000000e25d6: rcr byte ptr [rbx+0x5d], 0x41; pop rbp; pop r14; ret; 
0x0000000008061b: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000043d08: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000036ce9: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000003e7d4: rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x00000000091b54: rcr byte ptr [rbx+0x5d], 0x8d; add [rdx], r8b; pop r12; ret; 
0x00000000144ae7: rcr byte ptr [rbx+0x5d], 0xc3; nop [rax+rax]; mov rax, [rdi+0x8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000001452eb: rcr byte ptr [rbx+0x5d], 0xc3; nop; mov rax, [rdi+0x8]; lea rsi, [rsp+0x8]; call qword ptr [rax+0x40]; 
0x000000000be415: rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x0000000008766d: rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0x165799]; pop rbx; mov eax, fs:[rax]; ret; 
0x00000000103878: rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0xe958e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000008762f: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; xor eax, eax; ret; 
0x00000000091dec: rcr byte ptr [rbx-0x73], 0x44; add [rdx], al; ret; 
0x000000000807db: rcr byte ptr [rbx-0x9], 0xd8; ret; 
0x000000000a82ed: rcr byte ptr [rbx], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000175e0e: rcr byte ptr [rdi+0x49], 0x29; ror byte ptr [rax-0x73], 0x1; jl short 0x0000000000175e2e; and ecx, ebp; ret; 
0x000000001837ee: rcr byte ptr [rdi+0x49], 0x29; ror byte ptr [rax-0x73], 0x1; jl short 0x000000000018380e; and ecx, ebp; ret; 
0x000000000436c7: rcr byte ptr [rdx], 0x0; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x000000000c754b: rcr dword ptr [rax+0x12], 0x0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005fcc5: rcr dword ptr [rax], 0x1; add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x000000000507b5: rcr dword ptr [rcx], 0xc0; and eax, 0x2; sub eax, 0x1; ret; 
0x0000000010b03b: rcr dword ptr [rip-0x2708fff2], 0x1; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000c463b: rcr dword ptr [rsi-0x9], 0x1; call qword ptr [rax+0x31d18948]; 
0x0000000005fcc4: rcr qword ptr [rax], 0x1; add [rbx-0x5ef7b], cl; jmp qword ptr [rcx+rax*2-0x77]; 
0x00000000109737: rdpkru; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 0x3; ret; 
0x000000000b44c9: rep movsb [rdi], [rsi]; cld; ret; 
0x000000000b44bb: rep movsb [rdi], [rsi]; ret; 
0x00000000128ba5: rep movsq [rdi], [rsi]; add rsp, 0x188; ret; 
0x0000000014bce4: rep movsq [rdi], [rsi]; ret; 
0x000000000b4210: rep ret; 
0x000000000b4b33: rep stosb [rdi]; mov rax, rdx; ret; 
0x000000001778ba: rep stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x00000000097ecb: rep stosq [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012339e: rep stosq [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x000000000f84eb: rep stosq [rdi]; ret; 
0x0000000006e2b8: ret far; 
0x0000000002ceda: ret far; 
0x00000000061bd7: ret; 
0x0000000002c495: ret; 
0x000000000cff9e: ret; 
0x000000000c913e: ret; 
0x0000000012278f: ret; 
0x00000000187221: rol ah, 0xc2; jp short 0x000000000018721d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000018dae1: rol ah, 0xc2; jp short 0x000000000018dadd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000013a34b: rol ax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x00000000117d22: rol ax, 0x8; ret; 
0x00000000122782: rol bh, 0x47; or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret; 
0x00000000084b37: rol bl, 0x1; mov eax, 0xffffffff; ret; 
0x00000000075648: rol bl, 0x1; nop [rax+rax]; xor eax, eax; ret; 
0x000000000b4ce4: rol bl, 0x1; nop [rax+rax]; xor edx, edx; mov eax, edx; ret; 
0x00000000128a38: rol bl, 0x1; nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x000000000a534d: rol bl, 0x1; nop; xor eax, eax; ret; 
0x000000000f8fba: rol bl, 0x45; xor eax, eax; mov eax, r8d; ret; 
0x00000000041bd3: rol bl, 0x48; mov eax, [rip+0x1ab234]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041b9d: rol bl, 0x48; mov eax, [rip+0x1ab26a]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000fe8e1: rol bl, 0x48; mov eax, [rip+0xee526]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000b3f35: rol bl, 0x48; mov eax, edi; ret; 
0x0000000008e5c0: rol bl, 0x66; nop [rax+rax]; and dword ptr [rdi], 0xbfffffff; xor eax, eax; ret; 
0x00000000089498: rol bl, 0x66; nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000087eb5: rol bl, 0x66; nop [rax+rax]; mov dword ptr [rdi], 0x0; xor eax, eax; ret; 
0x0000000005c2c5: rol bl, 0x66; nop [rax+rax]; mov eax, 0x10; ret; 
0x00000000087ed8: rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret; 
0x000000000879d5: rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret; 
0x0000000009a1d4: rol bl, 0x66; nop [rax+rax]; mov eax, 0x1; ret; 
0x000000001454b5: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x0000000007fb30: rol bl, 0x66; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000001454c8: rol bl, 0x66; nop [rax+rax]; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x40]; 
0x000000000c5fc2: rol bl, 0x66; nop [rax+rax]; nop; mov rax, 0x1; ret; 
0x000000000d6f24: rol bl, 0x66; nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall; 
0x00000000084da1: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret; 
0x00000000084de1: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x00000000138d81: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret; 
0x00000000145a81: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x000000000a50bc: rol bl, 0x66; nop; bsr eax, eax; add rax, rdi; ret; 
0x0000000007b8dc: rol bl, 0x66; nop; mov eax, 0xffffffff; ret; 
0x0000000012f9fc: rol bl, 0x66; nop; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000879ce: rol bl, 0x83; or [r9], r8b; xor eax, eax; ret; 
0x000000001286ad: rol bl, 0x90; mov [rdi], rcx; xor eax, eax; ret; 
0x000000000d211d: rol bl, 0x90; mov [rdx], edi; mov eax, r8d; ret; 
0x0000000008b3ad: rol bl, 0x90; mov eax, 0x16; ret; 
0x00000000041d6d: rol bl, 0x90; mov rax, [rip+0x1ab099]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000041c8d: rol bl, 0x90; mov rax, [rip+0x1ab179]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000012310d: rol bl, 0x90; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0x0; ret; 
0x000000000f836d: rol bl, 0x90; xor eax, eax; pop rbx; ret; 
0x0000000004072d: rol bl, 0x90; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x0000000010403c: rol byte ptr [r13-0x77], 0xf7; mov rax, [rbp-0x50]; call rax; 
0x000000000b469e: rol byte ptr [r9+0xf], 0x1; adc [rbx], esp; ret; 
0x000000000b53b4: rol byte ptr [rax*4+0x31ee75d2], 0xc0; ret; 
0x00000000043e27: rol byte ptr [rax+0x375003f], 0x5b; ret; 
0x00000000188c04: rol byte ptr [rax+0x3a], 0x34; add dh, [rbp-0x72]; add rax, rdx; ret; 
0x00000000186e92: rol byte ptr [rax+0x48], 0x1; clc; ret; 
0x000000001705cc: rol byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000e1b0d: rol byte ptr [rax+0x49], 0x83; ret; 
0x00000000124239: rol byte ptr [rax+rax*8-0x7cb7f58b], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000c6002: rol byte ptr [rax+rax], 0x0; add bl, al; nop [rax+rax]; mov rax, 0x5; ret; 
0x00000000031b27: rol byte ptr [rax+rcx*2], 0x39; ret; 
0x00000000036690: rol byte ptr [rax+rcx*2], 0x83; ret; 
0x000000000324d5: rol byte ptr [rax+rcx*2], 0x89; test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000003191f: rol byte ptr [rax+rcx*2], 0x89; test [rax+rdx*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x00000000093ea3: rol byte ptr [rax-0xa], cl; mov byte ptr [rax+0x75], 0x16; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x0000000003a2cc: rol byte ptr [rax], 0x0; add [rax-0x75], cl; add eax, 0x1b2c29; mov [rax], rdx; ret; 
0x0000000004306c: rol byte ptr [rax], 0x0; add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret; 
0x000000000e894c: rol byte ptr [rax], 0x0; add al, ch; ret far; 
0x000000000f11f5: rol byte ptr [rax], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000000c7628: rol byte ptr [rax], 0x1; add [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000c6fef: rol byte ptr [rax], 0x1; add [rax], al; mov rax, [rsp+0x20]; mov rsi, r15; call rax; 
0x0000000013e547: rol byte ptr [rax], 0x1; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013de5f: rol byte ptr [rax], 0x1; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+0x8]; 
0x0000000009478e: rol byte ptr [rax], 0x1; add [rax], al; pop rbp; ret; 
0x000000000c765c: rol byte ptr [rax], 0x1; add [rax], al; pop rbx; ret; 
0x000000000415d5: rol byte ptr [rax], 0x1; add [rax], al; ret; 
0x00000000141bb6: rol byte ptr [rbp+0x310a75d2], 0xc0; cmp byte ptr [rsp+0x8], 0x0; setne al; add rsp, 0x78; ret; 
0x0000000018613c: rol byte ptr [rbp+0x62ae75c0], 0xb3; jge short 0x0000000000186165; ret; 
0x00000000188c5a: rol byte ptr [rbp+0x7d840fc0], 0x0; add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018d071: rol byte ptr [rbp+0xf0a74c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000186f98: rol byte ptr [rbp+0xf8374c0], 0x1; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x00000000124e53: rol byte ptr [rbp+0xf], 0x44; ret; 
0x0000000018d04c: rol byte ptr [rbp+0xfb374c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000170697: rol byte ptr [rbp+0xfc474c0], 0x1; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000186f4a: rol byte ptr [rbp+0xfd174c0], 0x1; mov ebp, 0xf80148c0; ret; 
0x000000000a5199: rol byte ptr [rbp+0xfd274c0], 0x1; mov ebp, 0xf80148c0; ret; 
0x0000000006513b: rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000013c1fd: rol byte ptr [rbp-0x3f6bf025], 0x48; add esp, 0x30; pop rbx; ret; 
0x000000000fe843: rol byte ptr [rbp-0x74f7872e], 0x47; or [rip+0x100f], ah; ret; 
0x0000000010403d: rol byte ptr [rbp-0x77], 0xf7; mov rax, [rbp-0x50]; call rax; 
0x000000000fe2f6: rol byte ptr [rbp-0x7b], 0xc0; je short 0x00000000000fe308; add rsp, 0x90; pop rbx; ret; 
0x00000000191d41: rol byte ptr [rbp-0x7b], 0xc0; jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x000000001871fe: rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001702b4: rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000187226: rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x00000000123aa2: rol byte ptr [rbx*2+0x5d415c41], 0x41; pop rsi; pop r15; ret; 
0x00000000186eb2: rol byte ptr [rbx+0x14820c0], 0xf8; ret; 
0x000000001705f2: rol byte ptr [rbx+0x14820c0], 0xf8; vzeroupper; ret; 
0x00000000186ec2: rol byte ptr [rbx+0x14840c0], 0xf8; ret; 
0x00000000170602: rol byte ptr [rbx+0x14840c0], 0xf8; vzeroupper; ret; 
0x00000000170612: rol byte ptr [rbx+0x14860c0], 0xf8; ret; 
0x00000000132539: rol byte ptr [rbx+0x197502f8], 0x44; mov eax, eax; ret; 
0x000000000e0758: rol byte ptr [rbx+0x3d740afb], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008b3a1: rol byte ptr [rbx+0x48f001c2], 0x1; cmpxchg [rdi], edx; jne short 0x000000000008b3b0; xor eax, eax; ret; 
0x000000000f8f31: rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0x0; add [rax], al; syscall; 
0x0000000005c1c9: rol byte ptr [rbx+0x974fff8], 0x44; mov eax, eax; ret; 
0x0000000007728f: rol byte ptr [rbx+0xb74fff8], 0x1; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000a18b1: rol byte ptr [rbx+0xe7740ff], 0x48; movsxd edi, edi; lea rax, [rip+0x14a3bf]; mov rax, [rax+rdi*8]; ret; 
0x000000000a18d1: rol byte ptr [rbx+0xe7740ff], 0x48; movsxd edi, edi; lea rax, [rip+0x14a5bf]; mov rax, [rax+rdi*8]; ret; 
0x0000000017dd06: rol byte ptr [rbx+0xfc3ffd8], 0x1f; add [rax], r8b; xor eax, eax; ret; 
0x000000000e3780: rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret; 
0x000000000f4617: rol byte ptr [rbx+rcx*4+0x7c], 0x24; cmp al, 0xf; xchg ebp, eax; ret; 
0x00000000141ec7: rol byte ptr [rbx-0x177cfd20], 0x1; add rsp, 0x18; ret; 
0x000000000507b7: rol byte ptr [rbx-0x177cfd20], 0x1; ret; 
0x0000000004dfab: rol byte ptr [rbx-0x248adb07], 0x4c; mov eax, eax; ret; 
0x0000000018b8c3: rol byte ptr [rbx-0x39c6bf12], 0x72; or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018ce23: rol byte ptr [rbx-0x39c6ef12], 0x72; or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x000000001701a3: rol byte ptr [rbx-0x3dc67f16], 0x76; adc eax, 0x48c7ff48; add eax, edi; vzeroupper; ret; 
0x000000001005ec: rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000005bc13: rol byte ptr [rbx-0x6af0fd06], 0xc0; add rsp, 0x98; neg eax; ret; 
0x0000000003a801: rol byte ptr [rbx-0x6bf07f19], 0xc0; ret; 
0x000000000f3091: rol byte ptr [rbx-0x76b7f502], cl; rol dword ptr [rdi+rcx+0x44], 0x1; ret far; 
0x0000000009190f: rol byte ptr [rbx-0x7cb7fd18], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0x18; syscall; 
0x000000000c5ff2: rol byte ptr [rbx], 0x0; add [rax], al; ret; 
0x0000000012205d: rol byte ptr [rbx], 0x25; cld; inc dword ptr [rcx]; add [rax+0x29], cl; ret; 
0x000000000c5fb2: rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret; 
0x000000000ebcd0: rol byte ptr [rcx+0x29], 0x1; ret; 
0x000000001793bf: rol byte ptr [rcx+0x48], 0x1; clc; shr rax, 0x2; vzeroupper; ret; 
0x0000000017461f: rol byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000c0bad: rol byte ptr [rcx+0x5c], 0x1; pop r13; pop r14; ret; 
0x000000000c0b32: rol byte ptr [rcx+0x5c], 0x1; ret; 
0x000000000d7045: rol byte ptr [rcx+0x5c], 0x41; pop rbp; and eax, 0xc; pop r14; ret; 
0x000000000f3fd2: rol byte ptr [rcx+0x5c], 0x41; pop rbp; pop r14; ret; 
0x0000000009c200: rol byte ptr [rcx+0x5c], 0x41; pop rbp; ret; 
0x0000000011568d: rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x000000001743f3: rol byte ptr [rcx+0x81e9], 0x0; add eax, ecx; vzeroupper; ret; 
0x000000000f11f1: rol byte ptr [rcx+0xc0fef9], 0x0; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x000000000b469f: rol byte ptr [rcx+0xf], 0x1; adc [rbx], esp; ret; 
0x00000000117d44: rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000079431: rol byte ptr [rcx+rcx*4+0x22], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x0000000004e07f: rol byte ptr [rcx+rcx*4-0x18], 0xf; ret; 
0x00000000087dce: rol byte ptr [rcx+rcx*4-0x1e], cl; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000128a42: rol byte ptr [rcx+rcx*4-0x30], cl; ret; 
0x00000000087d1e: rol byte ptr [rcx+rcx*4-0x36], cl; mov rdi, r8; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000044ae1: rol byte ptr [rcx+rcx*4-0x38], cl; sub rsi, rdi; syscall; 
0x0000000013bc84: rol byte ptr [rcx+rcx*4-0x3e], 0x1; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x0000000013b75d: rol byte ptr [rcx+rcx*4-0x3e], 0x1; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x00000000109706: rol byte ptr [rcx+rcx*4-0x3e], 0x1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000e2ee7: rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x0000000007fb2d: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000d2119: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop; mov [rdx], edi; mov eax, r8d; ret; 
0x00000000123112: rol byte ptr [rcx+rcx*4-0x40], cl; mov byte ptr [rdi+rdx], 0x0; ret; 
0x0000000008852b: rol byte ptr [rcx+rcx*4-0x40], cl; syscall; 
0x00000000087c3b: rol byte ptr [rcx+rcx*4-0x40], cl; xor sil, 0x80; syscall; 
0x00000000145812: rol byte ptr [rcx+rcx*4], 0x50; cld; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000000b6685: rol byte ptr [rcx+rdi], 0xf2; je short 0x00000000000b668f; test edx, edx; jne short 0x00000000000b6680; ret; 
0x00000000128ae5: rol byte ptr [rcx-0x3a], 0x1; add [rax], al; ret; 
0x000000001233a7: rol byte ptr [rcx-0x3a], 0x40; add al, [rax]; ret; 
0x00000000041eec: rol byte ptr [rcx-0x46], 0x8; add [rax], al; add [rax+0x80], bh; syscall; 
0x000000000c9bf4: rol byte ptr [rcx-0x5c28f401], 0x0; setb al; add eax, 0x16d; ret; 
0x00000000044441: rol byte ptr [rcx-0x77], 0x1b; pop rbx; pop rbp; ret; 
0x000000000ff3dc: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x127; syscall; 
0x000000000ff48c: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+0x8]; mov eax, 0x128; syscall; 
0x000000000d68cc: rol byte ptr [rcx-0x77], 0xc1; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000f13a4: rol byte ptr [rcx-0x77], cl; ret; 
0x00000000132d4e: rol byte ptr [rcx-0x80], 0x1; jmp qword ptr [rcx]; 
0x000000000c58bd: rol byte ptr [rcx-0x9], 0xd8; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret; 
0x000000000c5fd2: rol byte ptr [rcx], 0x0; add [rax], al; ret; 
0x0000000005b77b: rol byte ptr [rcx], 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x00000000087e15: rol byte ptr [rcx], 0x39; ret; 
0x000000000df29e: rol byte ptr [rcx], 0x3b; jl short 0x00000000000df310; mov byte ptr [rdi+0x8], 0x1; mov eax, 0x1; ret; 
0x0000000007dd18: rol byte ptr [rcx], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000501e9: rol byte ptr [rcx], 0x48; add ecx, 0x8; cmp r11d, eax; jne short 0x00000000000501b0; ret; 
0x00000000050462: rol byte ptr [rcx], 0x48; cmp edx, eax; jne short 0x0000000000050458; xor eax, eax; ret; 
0x0000000005054a: rol byte ptr [rcx], 0x48; cmp edx, eax; jne short 0x0000000000050540; xor eax, eax; ret; 
0x0000000010bff3: rol byte ptr [rcx], 0x66; mov [rdx], eax; ret; 
0x0000000004f802: rol byte ptr [rcx], 0x80; js short 0x000000000004f808; add [rbp-0xa], dh; pop rbx; ret; 
0x0000000009de92: rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000a13cb: rol byte ptr [rcx], 0x84; shl byte ptr [rdi+rcx+0x39], 0xf0; jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x0000000009371b: rol byte ptr [rcx], 0x89; mov [r8-0x7d], r9b; ret; 
0x0000000009b822: rol byte ptr [rcx], 0x89; ret far; 
0x000000001430b2: rol byte ptr [rcx], 0x89; ret; 
0x000000000c5fa2: rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 0x3; ret; 
0x0000000004e392: rol byte ptr [rcx], 0xc6; jmp qword ptr [rax]; 
0x000000001862e3: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi+rax-0x20]; movzx eax, byte ptr [rdi+rax-0x20]; sub eax, ecx; ret; 
0x00000000186303: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi+rax-0x40]; movzx eax, byte ptr [rdi+rax-0x40]; sub eax, ecx; ret; 
0x000000000a1312: rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je short 0x00000000000a1310; ret; 
0x000000000d71f4: rol byte ptr [rdi+0x11e58505], 0x0; cmp eax, 0x1; jg short 0x00000000000d7208; pop rbx; ret; 
0x000000000c84e6: rol byte ptr [rdi+0x12cf3305], 0x0; cmp eax, 0x1; jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x00000000044053: rol byte ptr [rdi+0x1ac3ae05], 0x0; cmp eax, 0x1; jg short 0x0000000000044080; pop rbp; ret; 
0x0000000008e321: rol byte ptr [rdi+0x1fa8317], cl; jg short 0x000000000008e358; add rsp, 0x18; ret; 
0x0000000014a12b: rol byte ptr [rdi+0xb281205], 0x0; cmp eax, 0x1; jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x00000000149feb: rol byte ptr [rdi+0xb295205], 0x0; cmp eax, 0x1; jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x0000000012f11b: rol byte ptr [rdi+0xc811e05], 0x0; cmp eax, 0x1; jg short 0x000000000012f140; pop rbx; ret; 
0x0000000012e519: rol byte ptr [rdi+0xc8d2005], 0x0; cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x000000001328d1: rol byte ptr [rdi+0xc9bf405], 0x0; cmp eax, 0x1; jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x0000000011f48c: rol byte ptr [rdi+0xd77a505], 0x0; cmp eax, 0x1; jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x00000000108e84: rol byte ptr [rdi+0xed2f505], 0x1; add [rbx+0x87f01f8], al; ret; 
0x000000001457af: rol byte ptr [rdi+rcx], 0xca; mov [rax-0x4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x000000001457df: rol byte ptr [rdi+rcx], 0xca; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret; 
0x00000000133c75: rol byte ptr [rdi-0x77cf7b9], 0x1; jg short 0x0000000000133c80; ret; 
0x000000000c6032: rol byte ptr [rdi], 0x0; add [rax], al; ret; 
0x000000001292e9: rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret; 
0x000000000c5fe2: rol byte ptr [rdx], 0x0; add [rax], al; ret; 
0x0000000008f6aa: rol byte ptr [rdx], 0x1; add [rax], al; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000008bfea: rol byte ptr [rdx], 0x1; add [rax], al; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x000000000d6ec8: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x38; syscall; 
0x00000000089628: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0x90; lea rdx, [rbx+0x638]; syscall; 
0x0000000008fcc2: rol byte ptr [rdx], 0x1; add [rax], al; mov eax, 0xcb; syscall; 
0x0000000008aa45: rol byte ptr [rdx], 0x1; add [rax], al; mov esi, 0x80; mov eax, 0xcc; syscall; 
0x00000000123245: rol byte ptr [rdx], 0x41; mov [rax], edx; mov [r9], rax; mov eax, ecx; ret; 
0x000000000c5f99: rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 0x1; ret; 
0x0000000011f074: rol byte ptr [rdx], cl; add [rax-0x75], cl; add al, 0x24; mov rdi, rbx; call rax; 
0x0000000011f01e: rol byte ptr [rdx], cl; add [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x18]; 
0x0000000016851a: rol byte ptr [rdx], cl; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000c6022: rol byte ptr [rsi], 0x0; add [rax], al; ret; 
0x000000001604ad: rol byte ptr [rsi], 0x0; add [rbp-0x77], cl; ret far; 
0x000000001773d8: rol ch, 0x7e; jg short 0x000000000017741e; mov al, [0x77f8c5237f7ec1c4]; ret; 
0x00000000170661: rol ch, 0xf8; ja short 0x0000000000170629; nop [rax+rax]; xor eax, eax; ret; 
0x000000001743d6: rol ch, 0xf8; ja short 0x000000000017439e; xor eax, eax; ret; 
0x0000000017798d: rol ch, 0xfe; jg short 0x00000000001779d6; adc al, ah; vzeroupper; ret; 
0x000000001800bd: rol ch, 0xfe; jg short 0x0000000000180106; adc al, ah; vzeroupper; ret; 
0x000000001740d6: rol ch, cl; std; xlat [rbx]; ret; 
0x000000001014af: rol dh, 0x46; inc dword ptr [rax]; ret; 
0x000000000c5f7c: rol dword ptr [rax+0x1e740fe1], 0x1; ret; 
0x0000000014bcd9: rol dword ptr [rax+0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret; 
0x0000000016fe20: rol dword ptr [rax+0x49], 0x29; ret far; 
0x000000000b4df3: rol dword ptr [rax-0x74b7ffed], 0x1; or byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000b4e03: rol dword ptr [rax-0x74b7ffed], 0x80; adc [rdx], al; add [rax], al; ret; 
0x000000000b50b8: rol dword ptr [rax], 0x0; add [rax+0x74], al; ret far; 
0x000000000c4a29: rol dword ptr [rax], cl; add [rax], al; xor eax, eax; ret; 
0x000000000a4be4: rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000c4a54: rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000a5087: rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x000000000a50b6: rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000001921af: rol dword ptr [rbp+0x31], cl; ror byte ptr [rax+0x9], cl; ret far; 
0x0000000017c2ff: rol dword ptr [rbp+0x661075c0], cl; nop [rax+rax]; nop; xor rax, rax; ret; 
0x000000000c4a24: rol dword ptr [rbp-0x2c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000a4bb4: rol dword ptr [rbp-0x5c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000115d99: rol dword ptr [rbp-0x72b7fffa], cl; add eax, 0x6863c; cmove rax, rdx; ret; 
0x0000000009855e: rol dword ptr [rbp-0x7c], 0x1; shl byte ptr [rdi+rax+0x48], 0x89; adc eax, 0x15cc45; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x0000000017028e: rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000173e75: rol dword ptr [rbp-0xc998b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000174240: rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000d68cf: rol dword ptr [rbx+rcx*4+0x54], 0x24; sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x0000000008645b: rol dword ptr [rbx], 0x1; add [rax], al; xor eax, eax; add rsp, 0x8; ret; 
0x000000000704a2: rol dword ptr [rcx+0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x000000001900db: rol dword ptr [rcx+0xf], cl; xchg edx, eax; ret; 
0x000000000e5d26: rol dword ptr [rcx+rcx*2], 0x39; ret far; 
0x000000000e0702: rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret; 
0x000000001285d5: rol dword ptr [rcx], 0x4c; sub ecx, ecx; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000f3097: rol dword ptr [rdi+rcx+0x44], 0x1; ret far; 
0x000000000b19c9: rol dword ptr [rdi], cl; add [rax], al; ret; 
0x00000000087e12: rol dword ptr [rdx], 0x83; rol byte ptr [rcx], 0x39; ret; 
0x0000000006c76b: rol dword ptr [rsi], 0x0; add [rax+0x29], cl; ret far; 
0x0000000012b0ef: rol dx, 0x8; add edx, 0x1; rol dx, 0x8; mov [rsi+0xa], dx; ret; 
0x0000000012b0f6: rol dx, 0x8; mov [rsi+0xa], dx; ret; 
0x0000000002d128: rol eax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x0000000013a34c: rol eax, 0x8; mov [rsp+0xa2], ax; call qword ptr [rsp+0x2a08]; 
0x00000000117d23: rol eax, 0x8; ret; 
0x00000000041c4d: rol eax, cl; and [rdi], rax; xor eax, eax; ret; 
0x0000000017000f: rol ebp, 0xf8; ja short 0x000000000016ffd7; xor eax, eax; ret; 
0x00000000177e52: rol ebp, 0xf8; ja short 0x0000000000177e1a; xor eax, eax; ret; 
0x0000000012362f: rol ebx, 0x1; nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000408dd: rol ebx, 0x90; and esi, 0x80000000; mov [rdi], esi; ret; 
0x0000000012b0f0: rol edx, 0x8; add edx, 0x1; rol dx, 0x8; mov [rsi+0xa], dx; ret; 
0x0000000012b0f7: rol edx, 0x8; mov [rsi+0xa], dx; ret; 
0x0000000014d026: rol edx, cl; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000011031f: rol esi, 0x1; jmp qword ptr [rax]; 
0x000000001860cd: rol esp, 0xe2; push 0xb75c0f5; ret; 
0x0000000002d127: rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x00000000041c4c: rol rax, cl; and [rdi], rax; xor eax, eax; ret; 
0x0000000017000e: rol rbp, 0xf8; ja short 0x000000000016ffd7; xor eax, eax; ret; 
0x00000000177e51: rol rbp, 0xf8; ja short 0x0000000000177e1a; xor eax, eax; ret; 
0x0000000014d025: rol rdx, cl; and [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000015478f: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dbf: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000003e41b: ror byte ptr [rax+0x1], 0x1; ret; 
0x0000000018722e: ror byte ptr [rax+0x1], 0xc8; ret; 
0x000000001702bc: ror byte ptr [rax+0x1], 0xc8; vzeroupper; ret; 
0x0000000018017c: ror byte ptr [rax+0x1], 0xc8; xtest; je short 0x0000000000180189; vzeroall; ret; 
0x000000001862c7: ror byte ptr [rax+0x1], 0xd0; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000188e74: ror byte ptr [rax+0x1], 0xd0; ret; 
0x0000000017403e: ror byte ptr [rax+0x1], 0xd0; vzeroupper; ret; 
0x00000000180b7e: ror byte ptr [rax+0x1], 0xd0; xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x00000000186f9f: ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x000000001706f0: ror byte ptr [rax+0x1], 0xf8; add rax, r8; vzeroupper; ret; 
0x000000000a4cdc: ror byte ptr [rax+0x1], 0xf8; add rax, rcx; ret; 
0x000000000a51f8: ror byte ptr [rax+0x1], 0xf8; add rax, rsi; ret; 
0x000000001889c6: ror byte ptr [rax+0x1], 0xf8; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x000000000a4c02: ror byte ptr [rax+0x1], 0xf8; ret; 
0x0000000017930c: ror byte ptr [rax+0x1], 0xf8; shr rax, 0x2; vzeroupper; ret; 
0x0000000016fff5: ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x0000000017ee28: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017fd05: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x0000000018568b: ror byte ptr [rax+0x1], 0xf8; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x000000000aa794: ror byte ptr [rax+0x1], cl; ror byte ptr [rax+0x29], 0x1; clc; ret; 
0x000000000c61d4: ror byte ptr [rax+0x1], cl; ror byte ptr [rax+0x29], 0x1; clc; shr rax, 0x2; ret; 
0x00000000041c4e: ror byte ptr [rax+0x21], 0x7; xor eax, eax; ret; 
0x000000000404b2: ror byte ptr [rax+0x23], 0x1; and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000aa797: ror byte ptr [rax+0x29], 0x1; clc; ret; 
0x000000000c61d7: ror byte ptr [rax+0x29], 0x1; clc; shr rax, 0x2; ret; 
0x000000000a49cb: ror byte ptr [rax+0x29], 0xc2; jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000a4c32: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c42: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c52: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c62: ror byte ptr [rax+0x29], 0xc2; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x000000001745f3: ror byte ptr [rax+0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001745e3: ror byte ptr [rax+0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000018b8a3: ror byte ptr [rax+0x29], 0xd7; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8b3: ror byte ptr [rax+0x29], 0xd7; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018ce03: ror byte ptr [rax+0x29], 0xd7; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cde3: ror byte ptr [rax+0x29], 0xd7; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000018b916: ror byte ptr [rax+0x39], 0xc6; cmovb eax, esi; ret; 
0x00000000174663: ror byte ptr [rax+0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x000000000fe150: ror byte ptr [rax+0x39], 0xca; je short 0x00000000000fe160; ret; 
0x0000000008a991: ror byte ptr [rax+0x39], 0xf7; sete al; ret; 
0x0000000008610c: ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x00000000030ea2: ror byte ptr [rax+0x39], cl; ret; 
0x000000000f6f79: ror byte ptr [rax+0x63], 0x4; or dword ptr [rax+0x1], 0xffffffd8; jmp rax; 
0x00000000082588: ror byte ptr [rax+0x63], 0x4; xchg [rax+0x1], ecx; clc; jmp rax; 
0x000000000f7455: ror byte ptr [rax+0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x000000000a1534: ror byte ptr [rax+0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000e03b3: ror byte ptr [rax+0x63], cl; ret far; 
0x00000000095a8e: ror byte ptr [rax+0x9], 0x1; ret; 
0x000000001921b2: ror byte ptr [rax+0x9], cl; ret far; 
0x000000000c6202: ror byte ptr [rax+0xf], cl; ret; 
0x00000000122c4c: ror byte ptr [rax+rcx*2], 0x39; enter 0xde75, 0x44; mov eax, eax; ret; 
0x000000000b42b8: ror byte ptr [rax-0x1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000b42b5: ror byte ptr [rax-0x1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000170053: ror byte ptr [rax-0x1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000a5345: ror byte ptr [rax-0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x000000000aa675: ror byte ptr [rax-0x2d], 0xfa; test rdx, rdx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa6d6: ror byte ptr [rax-0x2d], 0xfa; test rdx, rdx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000fbf35: ror byte ptr [rax-0x3f], 0xe0; add al, 0x8b; adc al, 0x2; call qword ptr [rsp+0x50]; 
0x0000000009bd36: ror byte ptr [rax-0x73], 0x15; mov ebx, 0x8d48000d; add eax, 0xdbb9b; cmove rax, rdx; ret; 
0x00000000116101: ror byte ptr [rax-0x73], 0x15; xchg [rsi-0x72b7fffa], ebx; add eax, 0x69ee0; cmove rax, rdx; ret; 
0x000000001156e9: ror byte ptr [rax-0x73], 0x1; cmp eax, 0xffffff1f; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x00000000175e12: ror byte ptr [rax-0x73], 0x1; jl short 0x0000000000175e2e; and ecx, ebp; ret; 
0x000000001837f2: ror byte ptr [rax-0x73], 0x1; jl short 0x000000000018380e; and ecx, ebp; ret; 
0x000000000d8640: ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x0000000010b236: ror byte ptr [rax-0x73], 0x44; and al, 0xd0; mov [rsp-0x38], rax; mov eax, 0x42; syscall; 
0x000000000a4c22: ror byte ptr [rax-0x73], 0x44; cmp [rax], ah; ret; 
0x000000000a50f2: ror byte ptr [rax-0x73], 0x44; cmp [rax], dh; ret; 
0x000000000a4c12: ror byte ptr [rax-0x73], 0x44; cmp [rax], dl; ret; 
0x000000000a4bf2: ror byte ptr [rax-0x73], 0x44; cmp al, dh; ret; 
0x0000000018d133: ror byte ptr [rax-0x73], 0x44; xchg [rax], esp; ret; 
0x0000000018d00f: ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000018bb66: ror byte ptr [rax-0x73], 0x4; xchg [rbx], edi; xor [rbp+0x21], dh; ret; 
0x0000000018d0d5: ror byte ptr [rax-0x73], 0x4; xchg ebx, eax; xor eax, eax; ret; 
0x0000000014b3cb: ror byte ptr [rax-0x73], 0x5; sbb eax, 0x48000b17; cmovne eax, edx; add rsp, 0x8; ret; 
0x0000000002e8b7: ror byte ptr [rax-0x73], 0x5b; jmp qword ptr [rax+rcx*2+0x33]; 
0x00000000160d73: ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000160daf: ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000018d345: ror byte ptr [rax-0x73], 0x84; xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000142fc6: ror byte ptr [rax-0x75], 0x1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x8]; 
0x0000000009a285: ror byte ptr [rax-0x75], 0x40; or [rax-0x7b], cl; shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret; 
0x0000000013df7a: ror byte ptr [rax-0x75], 0x44; and al, 0x10; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x000000000c1489: ror byte ptr [rax-0x75], 0x54; and al, 0x20; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x000000001260e5: ror byte ptr [rax-0x75], 0x5; and ebp, [rbp+0xc]; add [rbx-0x46363], cl; jmp qword ptr [rcx+rcx*4+0x18]; 
0x000000000d005a: ror byte ptr [rax-0x75], 0x5c; ret; 
0x00000000115726: ror byte ptr [rax-0x75], 0x5d; clc; leave; ret; 
0x000000000f9bf2: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall; 
0x0000000010aea5: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall; 
0x000000001092e5: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall; 
0x0000000013904c: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000c131e: ror byte ptr [rax-0x75], 0x74; and al, 0x18; mov rcx, r13; mov rdx, rbp; call rbx; 
0x0000000013de91: ror byte ptr [rax-0x75], 0x74; and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x0000000013e083: ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140e43: ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x000000000d6816: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall; 
0x000000000fe487: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall; 
0x0000000010ad47: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall; 
0x0000000010b007: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall; 
0x00000000109446: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x116; syscall; 
0x000000000f7fc7: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x11; syscall; 
0x000000000f8077: ror byte ptr [rax-0x75], 0x74; and al, 0x8; mov edi, [rsp]; mov eax, 0x12; syscall; 
0x000000000d1cc8: ror byte ptr [rax-0x75], 0x74; ret; 
0x00000000044a62: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x13e; syscall; 
0x00000000102b32: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x1a; syscall; 
0x000000000fda32: ror byte ptr [rax-0x75], 0x7c; and al, 0x8; mov eax, 0x7; syscall; 
0x0000000014c3ef: ror byte ptr [rax-0x75], 0x7f; or [rdx], ch; lea rcx, [rsi+0x3a0]; push 0x2; call qword ptr [rax+0x338]; 
0x000000000a112c: ror byte ptr [rax-0x77], 0x17; ret; 
0x00000000085e17: ror byte ptr [rax-0x77], 0x1; adc [r8+0x5a], bl; pop rbx; ret; 
0x0000000010b23b: ror byte ptr [rax-0x77], 0x1; and al, 0xc8; mov eax, 0x42; syscall; 
0x00000000055235: ror byte ptr [rax-0x77], 0x1; and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret; 
0x0000000003dc56: ror byte ptr [rax-0x77], 0x1; fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000f933f: ror byte ptr [rax-0x77], 0x1; ret far; 
0x0000000007d169: ror byte ptr [rax-0x77], 0x1; ret; 
0x00000000085caf: ror byte ptr [rax-0x77], 0x1; sbb [r8+0x5a], bl; pop rbx; ret; 
0x0000000018d009: ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000013dd0a: ror byte ptr [rax-0x77], 0x2; mov eax, 0x1; ret; 
0x00000000145d22: ror byte ptr [rax-0x77], 0x3; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x0000000010384a: ror byte ptr [rax-0x77], 0x3; pop rbx; setne al; movzx eax, al; ret; 
0x00000000144e9d: ror byte ptr [rax-0x77], 0x44; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000087bb8: ror byte ptr [rax-0x77], 0x57; and [rax-0x77], cl; ja short 0x0000000000087bd9; ret; 
0x00000000052310: ror byte ptr [rax-0x77], 0x57; or [rcx+0x2b806], cl; add [rax], al; ret; 
0x0000000010183d: ror byte ptr [rax-0x77], 0x5; ret; 
0x0000000013e6c8: ror byte ptr [rax-0x77], 0xd6; add rdi, 0x10; jmp rcx; 
0x0000000013e6e8: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x00000000140b18: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000140288: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x0000000013db98: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x0000000009e164: ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x0000000005bb71: ror byte ptr [rax-0x77], 0xd8; test r8d, r8d; jne short 0x000000000005bb80; pop rbx; ret; 
0x000000000b5e70: ror byte ptr [rax-0x77], 0xef; lea r9, [rsp+0x70]; call rbx; 
0x000000000fa629: ror byte ptr [rax-0x77], cl; cmp al, 0x24; mov rdi, [rsp]; mov eax, 0x4f; syscall; 
0x00000000089f87: ror byte ptr [rax-0x77], cl; fidivr st, word ptr [rdi+0x2]; mov eax, 0xe; syscall; 
0x00000000081de5: ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x000000000815cb: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80]; 
0x000000000818bd: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80]; 
0x0000000008b671: ror byte ptr [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000008badb: ror byte ptr [rax-0x77], cl; out dx, eax; mov esi, 0x7; mov eax, 0xca; syscall; 
0x00000000043efc: ror byte ptr [rax-0x7b], 0xff; je short 0x0000000000043f08; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x0000000019288b: ror byte ptr [rax-0x7d], 0x1; ret; 
0x00000000031b24: ror byte ptr [rax-0x7d], 0x1; rol byte ptr [rax+rcx*2], 0x39; ret; 
0x000000001037cb: ror byte ptr [rax-0x7d], 0x3e; add [rax-0x77], cl; je short 0x00000000001037e0; pop rbx; ret; 
0x0000000007fb24: ror byte ptr [rax-0x7d], 0x7f; sbb [rax], al; setne r8b; mov eax, r8d; ret; 
0x0000000007c8f7: ror byte ptr [rax-0x7d], 0xc4; adc [rbx+0x5d], bl; pop r12; ret; 
0x0000000014acfd: ror byte ptr [rax-0x7d], 0xc4; and [rbx+0x5d], bl; pop r12; ret; 
0x00000000141cf5: ror byte ptr [rax-0x7d], 0xc4; cmp [rbx+0x5d], bl; ret; 
0x000000000faec2: ror byte ptr [rax-0x7d], 0xc4; mov rax, r8; pop rbp; ret; 
0x000000000fb240: ror byte ptr [rax-0x7d], 0xc4; movzx rax, al; ret; 
0x0000000011407b: ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000090209: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000448af: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000145dc5: ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000009196d: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; lea eax, [rax+rax+0x2]; ret; 
0x0000000002d8d3: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000004d864: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000001314ca: ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x1; ret; 
0x0000000008a962: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0x3; ret; 
0x00000000095ca1: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax+rax]; xor eax, eax; ret; 
0x000000000d21be: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax]; mov eax, 0xe4; syscall; 
0x00000000086613: ror byte ptr [rax-0x7d], 0xc4; or bl, al; nop [rax]; ret; 
0x0000000008c0b6: ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x00000000080c08: ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x000000001238aa: ror byte ptr [rax-0x7d], 0xc4; sbb [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret; 
0x0000000005c104: ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000145c5a: ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; ret; 
0x000000001451d1: ror byte ptr [rax-0x7d], 0xc4; sub [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x00000000085c35: ror byte ptr [rax-0x7d], 0xc4; sub [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000001211d1: ror byte ptr [rax-0x7d], 0xc4; xor [rbx+0x5d], bl; pop r12; ret; 
0x00000000170073: ror byte ptr [rax-0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x00000000170063: ror byte ptr [rax-0x7d], 0xc7; and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x00000000173ff3: ror byte ptr [rax-0x7d], 0xc7; or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x0000000005056f: ror byte ptr [rax-0x7d], 0xea; add [rbp-0x1e], esi; mov eax, 0x1; ret; 
0x000000000a5102: ror byte ptr [rax-0x7d], 0xea; add rdx, rax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x00000000156ebf: ror byte ptr [rax-0x7d], 0xea; lea r11, [rip+0x63175]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000041790: ror byte ptr [rax-0x7d], 0xec; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000173fdb: ror byte ptr [rax-0x7d], 0xef; add rax, rdi; vzeroupper; ret; 
0x000000001701e3: ror byte ptr [rax-0x7d], 0xef; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x000000001703b3: ror byte ptr [rax-0x7d], 0xef; jg short 0x0000000000170401; add eax, edi; vzeroupper; ret; 
0x00000000174353: ror byte ptr [rax-0x7d], 0xef; jg short 0x00000000001743a1; add eax, edi; vzeroupper; ret; 
0x00000000174553: ror byte ptr [rax-0x7d], 0xef; jg short 0x00000000001745a1; add eax, edi; vzeroupper; ret; 
0x00000000154790: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc0: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001703c3: ror byte ptr [rax-0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x00000000128e21: ror byte ptr [rax-0x7f], 0xc4; add [rcx], al; add [rax], al; pop rbp; ret; 
0x00000000128eb4: ror byte ptr [rax-0x7f], 0xc4; add [rcx], al; add [rax], al; pop rbx; ret; 
0x000000000b42bb: ror byte ptr [rax-0x7f], 0xc4; add [rcx], al; add [rax], al; sub rax, rdx; ret; 
0x000000000d85dc: ror byte ptr [rax-0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x00000000101bc2: ror byte ptr [rax], 0x48; mov [rip+0xf4465], eax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000101b96: ror byte ptr [rax], 0x48; mov [rip+0xf4491], eax; mov rax, r8; ret; 
0x0000000013a34d: ror byte ptr [rax], 0x66; mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x000000000b4364: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000015526a: ror byte ptr [rbp+0x6], cl; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000008ae5b: ror byte ptr [rbp+0x6c504], 0x1; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x000000000afe46: ror byte ptr [rbp+rcx*4+0x1d], cl; adc ah, [rdx+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d89: ror byte ptr [rbp+rcx*4+0x1d], cl; and edx, [rdi+rcx+0xc634900]; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7cb: ror byte ptr [rbp+rcx*4+0x1d], cl; or eax, 0x49000fa8; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b150f: ror byte ptr [rbp+rcx*4+0x1d], cl; sub [rbp+0x6349000f], ecx; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e03: ror byte ptr [rbp+rcx*4+0x1d], cl; test eax, 0x49000f93; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a6: ror byte ptr [rbp+rcx*4+0x1d], cl; xor ch, [rax+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000005bef4: ror byte ptr [rbp+rcx*4+0x35], 0xa4; jge short 0x000000000005bf10; add [rax-0x43], cl; call qword ptr [rbx-0x59]; 
0x000000000c7cba: ror byte ptr [rbp+rcx*4+0x44], 0x24; sbb al, ch; ret far; 
0x000000000c7be7: ror byte ptr [rbp+rcx*4+0x44], 0x24; sbb al, ch; sahf; stc; call far fword ptr [rdx+0x59]; 
0x000000001232ef: ror byte ptr [rbp-0x77], 0x1; adc ebx, eax; mov eax, 0xffffffff; ret; 
0x000000000f9cd3: ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x0000000018d4d7: ror byte ptr [rbx+0x3120874c], 0xd2; cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4ed: ror byte ptr [rbx+0x3140874c], 0xd2; cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000001787d7: ror byte ptr [rbx+0x343b0e34], 0xa; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c886: ror byte ptr [rbx+0x343b0e34], 0xa; jne 0x000000000018c547; ret; 
0x000000001782c4: ror byte ptr [rbx+0x3b203e4c], 0x4c; cmp ah, [rax]; jne 0x0000000000178111; vzeroupper; ret; 
0x0000000018c076: ror byte ptr [rbx+0x3b203e4c], 0x4c; cmp ah, [rax]; jne 0x000000000018be07; ret; 
0x00000000178292: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178718: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c046: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x000000000018be07; ret; 
0x0000000018c7cc: ror byte ptr [rbx+0x3c3b0e3c], 0xa; jne 0x000000000018c547; ret; 
0x0000000017848b: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x0000000000178111; vzeroupper; ret; 
0x00000000178983: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c27e: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x000000000018be07; ret; 
0x0000000018c5c9: ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x000000000018c547; ret; 
0x000000001785a2: ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x0000000000178575; vzeroupper; ret; 
0x0000000018c569: ror byte ptr [rbx+0xc3b170c], 0x16; jne short 0x000000000018c547; ret; 
0x0000000017875b: ror byte ptr [rbx+0xc3b3e0c], 0x3a; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c80d: ror byte ptr [rbx+0xc3b3e0c], 0x3a; jne 0x000000000018c547; ret; 
0x0000000018d4c3: ror byte ptr [rbx-0x2dce78f4], 0x3b; or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000109396: ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 0x8; mov eax, 0x114; syscall; 
0x000000000d22d6: ror byte ptr [rbx-0x74f3db8c], 0x3c; and al, 0xb8; out 0x0, al; add [rax], al; syscall; 
0x000000000fe537: ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 0x8; mov eax, 0x11d; syscall; 
0x000000000d83bb: ror byte ptr [rbx], 0x1; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret; 
0x000000000d8506: ror byte ptr [rbx], 0x1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000fecf4: ror byte ptr [rcx+0x12eb8fe], cl; add [rax], al; xor edi, edi; syscall; 
0x000000001446c0: ror byte ptr [rcx+0x1], 0xdd; call rbp; 
0x000000000894df: ror byte ptr [rcx+0x1f0fc337], 0x44; add [rax], al; mov eax, 0x16; ret; 
0x000000000c4aa2: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac2: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae2: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b02: ror byte ptr [rcx+0x2eec1c6], 0x48; sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x000000001036ef: ror byte ptr [rcx+0x312b0102], 0xc0; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000002fe23: ror byte ptr [rcx+0x39], cl; ret; 
0x000000000fe881: ror byte ptr [rcx+0x48c30877], 0x8b; add eax, 0xee583; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000008b97e: ror byte ptr [rcx+0x48f631ca], cl; mov edi, ebp; mov eax, r15d; syscall; 
0x000000000f8316: ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000005a643: ror byte ptr [rcx+0x63], 0x1; ret far; 
0x000000000f5ba3: ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; jmp rax; 
0x0000000004e2a6: ror byte ptr [rcx+0x63], cl; adc al, 0x91; add rdx, r9; jmp rdx; 
0x000000000cb75d: ror byte ptr [rcx+0x63], cl; adc al, 0x93; add rdx, r11; jmp rdx; 
0x00000000139c28: ror byte ptr [rcx+rbp-0x20], 0x48; mov [rbx+0x18], eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x00000000097ad4: ror byte ptr [rcx+rcx*2], 0x8d; push rsp; ret; 
0x0000000005a5a1: ror byte ptr [rcx+rcx*4+0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000445f2: ror byte ptr [rcx+rcx*4+0x7], 0x1; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x0000000007dcc1: ror byte ptr [rcx+rcx*4-0x11], 0x4c; lea ecx, [rsp+0x10]; call rbp; 
0x0000000007caa9: ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x80]; 
0x0000000007d079: ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x00000000092e2e: ror byte ptr [rcx+rcx*4-0x1a], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000130f47: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, r14; mov rcx, r13; call rbx; 
0x000000000f91e1: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000130b87: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10; 
0x00000000092c7d: ror byte ptr [rcx+rcx*4-0x2], cl; mov ebx, eax; mov edi, 0x2; mov eax, r14d; syscall; 
0x0000000006cc2c: ror byte ptr [rcx+rcx*4-0x2], cl; mov rdi, r14; mov [rbp-0x8c8], r9b; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719bc: ror byte ptr [rcx+rcx*4-0x2], cl; mov rdi, r14; mov [rbp-0x920], r8b; mov [rbp-0x8f0], r9b; call rax; 
0x00000000128ae2: ror byte ptr [rcx+rcx*4-0x30], 0x1; mov byte ptr [r8], 0x0; ret; 
0x000000000884ae: ror byte ptr [rcx+rcx*4-0x31], cl; mov eax, ebp; syscall; 
0x0000000004396a: ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x0000000005570d: ror byte ptr [rcx+rcx*4-0x40], cl; ret; 
0x000000000f87cd: ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000130a2c: ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, r15; mov [rsp+0x8], rax; mov rcx, rax; call r12; 
0x000000000882f5: ror byte ptr [rcx-0x1776bb36], cl; syscall; 
0x000000000401b4: ror byte ptr [rcx-0x24efdbbc], 0x1; insb [rdi], dx; and al, 0x8; ret; 
0x00000000144e81: ror byte ptr [rcx-0x3b7cb7fd], 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000ca3d1: ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x00000000140396: ror byte ptr [rcx-0x77], 0x0; mov eax, 0x1; ret; 
0x00000000087832: ror byte ptr [rcx-0x77], 0x10; ret; 
0x000000000f81ee: ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000132f14: ror byte ptr [rcx], 0x1; ret; 
0x00000000108a5c: ror byte ptr [rcx], 0xd0; ret; 
0x00000000041472: ror byte ptr [rdi], 0x0; add [rax], al; syscall; 
0x0000000015fbad: ror byte ptr [rdi], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000087809: ror byte ptr [rdi], 0x11; jle short 0x000000000008787e; ret; 
0x000000000b48be: ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x20], edx; movups [rdi+rdx-0x10], xmm3; ret; 
0x000000000b45e5: ror byte ptr [rdi], 0x1; adc [rdi+rdx-0x40], edi; ret; 
0x000000000b506c: ror byte ptr [rdi], 0x1; add [rax], eax; cmovne rax, rdx; ret; 
0x000000000efece: ror byte ptr [rdi], 0x1; add [rbx+0x105f710d], cl; add [rcx+0x5b595a0a], cl; ret; 
0x0000000018055f: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x0000000000180569; vzeroall; ret; 
0x00000000180b81: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x0000000000180b8b; vzeroall; ret; 
0x00000000182f6f: ror byte ptr [rdi], 0x1; add esi, edx; je short 0x0000000000182f79; vzeroall; ret; 
0x0000000003f5eb: ror byte ptr [rdi], 0x1; mov dh, 0x17; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x000000000de492: ror byte ptr [rdi], 0x1; test [rdi+rsi*8-0x1d160001], ch; idiv edi; jmp qword ptr [rsi-0x70]; 
0x000000000fa55a: ror byte ptr [rdi], 0x1f; add [rax], r8b; mov eax, 0x50; syscall; 
0x000000000ace30: ror byte ptr [rdi], 0x28; jmp qword ptr [r14+0x66]; 
0x00000000151fe5: ror byte ptr [rdi], 0x29; pop rdi; adc [rdx+0x8], dh; movaps [rdi], xmm4; jmp r9; 
0x00000000088ca2: ror byte ptr [rdi], 0x44; ret; 
0x000000000fe7a1: ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x00000000000fe7b0; ret; 
0x00000000116c96: ror byte ptr [rdi], 0x5; cmp rax, 0xfffffffffffff000; ja short 0x0000000000116ca8; ret; 
0x000000000466ce: ror byte ptr [rdi], 0x84; adc al, 0x0; add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x0000000013b002: ror byte ptr [rdi], 0x84; adc eax, 0x4c000001; mov edi, esp; call qword ptr [rbx]; 
0x000000001284c5: ror byte ptr [rdi], 0x84; add fs:[rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000009f586: ror byte ptr [rdi], 0x84; call qword ptr [rbx]; 
0x000000000a522c: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000c90a1: ror byte ptr [rdi], 0x84; leave; idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x0000000007f08d: ror byte ptr [rdi], 0x84; ret far; 
0x0000000002e5e0: ror byte ptr [rdi], 0x84; ret; 
0x0000000004b5de: ror byte ptr [rdi], 0x84; scasd [rdi]; adc eax, [rax]; add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x00000000102efa: ror byte ptr [rdi], 0x84; scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000531ee: ror byte ptr [rdi], 0x84; sti; adc eax, 0x80400000; jmp qword ptr [rbp+0xf]; 
0x000000000a4ff6: ror byte ptr [rdi], 0x85; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x00000000160d7a: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000056416: ror byte ptr [rdi], 0x85; call qword ptr [rsi]; 
0x000000000717ec: ror byte ptr [rdi], 0x85; cld; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x00000000189458: ror byte ptr [rdi], 0x85; cmp esi, 0xc829ffff; ret; 
0x0000000013df8b: ror byte ptr [rdi], 0x85; cmp esi, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000d9644: ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; add al, [rax]; add [rbx-0x2d773], al; call qword ptr [rax]; 
0x00000000168a72: ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000168a2c: ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000008df57: ror byte ptr [rdi], 0x85; loop 0x000000000008df5c; add [rax], al; mov eax, 0x1; ret; 
0x000000000ae651: ror byte ptr [rdi], 0x85; pop rax; or [rax], eax; add cl, ch; ret; 
0x00000000030f73: ror byte ptr [rdi], 0x85; ret far; 
0x000000000acc66: ror byte ptr [rdi], 0x85; ret; 
0x000000000c4a26: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add [rax], al; xor eax, eax; ret; 
0x000000001704dc: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlat [rbx]; ret; 
0x00000000147832: ror byte ptr [rdi], 0x86; ret; 
0x0000000006c348: ror byte ptr [rdi], 0x88; imul edi, ecx, 0xffffffff; inc dword ptr [rcx]; ret; 
0x0000000010c4ef: ror byte ptr [rdi], 0x88; ret far; 
0x0000000003f936: ror byte ptr [rdi], 0x88; ret; 
0x000000000e7290: ror byte ptr [rdi], 0x8e; ret far; 
0x00000000101dc9: ror byte ptr [rdi], 0x94; ret; 
0x000000000fb23d: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; movzx rax, al; ret; 
0x0000000004d861: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000001314c7: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x1; ret; 
0x0000000013cbda: ror byte ptr [rdi], 0x95; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x0000000013c06c: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000005c133: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret; 
0x000000001860e3: ror byte ptr [rdi], 0xb6; or al, 0x6; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000000d863d: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x0000000013c06f: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000005c136: ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret; 
0x00000000082a2f: ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x00000000138f1b: ror byte ptr [rdi], 0xb6; shr bl, 0x96; nop [rax+rax]; nop [rax+rax]; ret; 
0x0000000012d13e: ror byte ptr [rdi], cl; mov ds, bx; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000a519d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x000000000c62bc: ror byte ptr [rdi], cl; test [rbp+0x48000000], bl; bsf eax, edx; shr rax, 0x2; ret; 
0x00000000060436: ror byte ptr [rdi], cl; test [rbx], ch; ret far; 
0x000000000aa83b: ror byte ptr [rdi], cl; test [rsi+0x48000000], bl; bsf eax, edx; ret; 
0x000000000aa67b: ror byte ptr [rdi], cl; test [rsi], bh; add [rax], al; bsf rax, rdx; ret; 
0x000000000985bf: ror byte ptr [rdi], cl; test dl, al; add [rax], al; add [rcx+rdi+0x25], cl; ret; 
0x00000000141b5f: ror byte ptr [rdi], cl; xchg ebp, eax; shl bh, 0xd8; add rsp, 0x18; ret; 
0x00000000087e2e: ror byte ptr [rdi], cl; xchg esp, eax; shl bh, 0xd8; ret; 
0x00000000159b7c: ror byte ptr [rip+0x63490006], 0x14; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000011a864: ror byte ptr [rip-0x3fcb1800], 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000011a914: ror byte ptr [rip-0x407b1800], 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000108e88: ror byte ptr [rsi], cl; add [rbx+0x87f01f8], al; ret; 
0x000000000ffb54: ror byte ptr [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000016f50a: ror dword ptr [rax+0x1], 0xf8; ret; 
0x000000000aa3ea: ror dword ptr [rax+0x21], 0xce; je 0x00000000000aa520; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x0000000006ce67: ror dword ptr [rax+0x29], 0x1; ret far; 
0x00000000083b86: ror dword ptr [rax+0x39], 0x1; enter 0x2476, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x0000000007b67b: ror dword ptr [rax+0x39], 0x1; enter 0x2f76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x00000000084296: ror dword ptr [rax+0x39], 0x1; enter 0x3476, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x000000000823b7: ror dword ptr [rax+0x39], 0x1; enter 0x3b76, 0x48; mov edi, ebp; call qword ptr [rbx+0x88]; 
0x0000000007ae06: ror dword ptr [rax+0x39], 0x1; enter 0x3c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x20]; 
0x00000000078fc7: ror dword ptr [rax+0x39], 0x1; enter 0x3d76, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x0000000007f10e: ror dword ptr [rax+0x39], 0x1; enter 0x4476, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x00000000076d5d: ror dword ptr [rax+0x39], 0x1; enter 0x5576, 0x48; mov edi, ebx; call qword ptr [r12+0x60]; 
0x000000000809b5: ror dword ptr [rax+0x39], 0x1; enter 0x5d76, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38]; 
0x0000000006b195: ror dword ptr [rax+0x39], 0x1; enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000083ad4: ror dword ptr [rax+0x39], 0x1; enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68]; 
0x00000000082470: ror dword ptr [rax+0x39], 0x1; enter 0x6a76, 0x31; idiv byte ptr [rdx+0x2]; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000070324: ror dword ptr [rax+0x39], 0x1; enter 0x7676, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38]; 
0x0000000014c173: ror dword ptr [rax+0x39], 0x1; ret far; 
0x000000000cd564: ror dword ptr [rax+0x63], 0x1; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x000000000cd531: ror dword ptr [rax+0x63], 0x1; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000e03b0: ror dword ptr [rax+0x63], cl; ror byte ptr [rax+0x63], cl; ret far; 
0x000000000d06b5: ror dword ptr [rax+0x69], cl; call far fword ptr [rdi]; 
0x000000001921e6: ror dword ptr [rax+0x9], cl; ret far; 
0x000000000fa8e5: ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x00000000086b58: ror dword ptr [rax-0x73], 0x84; adc [rax], al; add [rax], al; ret; 
0x000000000e0c7e: ror dword ptr [rax-0x75], 0x1; cmp cl, [rax-0x7d]; ret; 
0x00000000191eba: ror dword ptr [rax-0x75], 0x1; je short 0x0000000000191ee3; adc [rcx-0x77], cl; ret; 
0x000000000fdb06: ror dword ptr [rax-0x75], 0x7c; and al, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x0000000006c54b: ror dword ptr [rax], 0x0; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x9]; call qword ptr [r12+0x38]; 
0x000000000501ed: ror dword ptr [rax], 0x41; cmp ebx, eax; jne short 0x00000000000501b0; ret; 
0x0000000010adfb: ror dword ptr [rbx+0x48102454], 0x8b; je short 0x000000000010ae28; or [rax+0x12b], bh; mov edi, [rsp+0x4]; syscall; 
0x000000000ff3df: ror dword ptr [rbx+0x48142454], 0x8b; je short 0x00000000000ff40c; or [rax+0x127], bh; syscall; 
0x000000000ff48f: ror dword ptr [rbx+0x48142454], 0x8b; je short 0x00000000000ff4bc; or [rax+0x128], bh; syscall; 
0x000000000ec834: ror dword ptr [rbx-0x2cbe70f4], cl; jrcxz 0x00000000000ec7c5; sub [rcx+0x63], cl; ret far; 
0x000000000c6dc5: ror dword ptr [rcx+0x1fe8c1c8], 0x29; ret; 
0x0000000013a6bd: ror dword ptr [rcx+0x63], 0x14; mov [rcx+rax-0x3e], cl; jmp rdx; 
0x0000000010b212: ror dword ptr [rcx+0x63], 0x1; add al, 0x88; add rax, r8; jmp rax; 
0x00000000041b74: ror dword ptr [rcx+0x8824b4], 0x0; add bl, ch; ret far; 
0x0000000008d152: ror dword ptr [rcx+0xe181c2], 0x0; clc; inc dword ptr [rcx+0x39]; ret far; 
0x000000001892c1: ror dword ptr [rcx+rax-0x3f], 0x1; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; ret; 
0x00000000103d6f: ror dword ptr [rcx+rcx*4+0x48], 0x1; or bl, ch; ret; 
0x000000000781d9: ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38]; 
0x00000000100adb: ror dword ptr [rcx+rcx*4-0x40], cl; ret; 
0x000000000ff51b: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff68b: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000445ef: ror dword ptr [rcx-0x77], 0xd0; mov [rdi], r8; xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x0000000007769e: ror dword ptr [rdi-0x5], 0x1; jmp qword ptr [rsi+0x2e]; 
0x00000000186f4e: ror dword ptr [rdi], 0x1; mov ebp, 0xf80148c0; ret; 
0x000000000409a8: ror dword ptr [rdi], 0x54; add eax, 0x178770; orps xmm0, [rip+0x178779]; mulss xmm0, [rip+0x1790c1]; ret; 
0x00000000040983: ror dword ptr [rdi], 0x54; add eax, 0x178795; orps xmm0, [rip+0x1787ae]; mulss xmm0, [rip+0x1790ea]; ret; 
0x0000000017a028: ror dword ptr [rdi], 0x85; adc [rdx], cl; add [rax], al; xor eax, eax; ret; 
0x0000000017a734: ror dword ptr [rdi], 0x85; add al, 0x3; add [rax], al; xor eax, eax; ret; 
0x00000000096253: ror dword ptr [rdi], 0x85; add dword ptr [rbx], 0x0; add [rax-0x7d], cl; ret far; 
0x0000000017a506: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x0000000017b630: ror dword ptr [rdi], 0x85; cmp al, 0x2; add [rax], al; xor eax, eax; ret; 
0x0000000017a486: ror dword ptr [rdi], 0x85; cmpsb [rsi], [rdi]; add eax, 0xc0310000; ret; 
0x0000000017a7c4: ror dword ptr [rdi], 0x85; je short 0x000000000017a7cb; add [rax], al; xor eax, eax; ret; 
0x0000000017a2bb: ror dword ptr [rdi], 0x85; jno short 0x000000000017a2c7; add [rax], al; xor eax, eax; ret; 
0x0000000017a383: ror dword ptr [rdi], 0x85; mov ch, 0x6; add [rax], al; xor eax, eax; ret; 
0x0000000017a000: ror dword ptr [rdi], 0x85; sub al, 0xa; add [rax], al; xor eax, eax; ret; 
0x000000000a5025: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001704fe: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000060c46: ror dword ptr [rdi], cl; test [rbx], bl; ret; 
0x00000000071c31: ror dword ptr [rip-0x76b80000], cl; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000009b179: ror dword ptr [rsi-0x72b7fff3], cl; add eax, 0xf18c; cmove rax, rdx; ret; 
0x000000000ffc64: ror dword ptr [rsi], 0x1; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000011562e: ror eax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000002d557: ror eax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000043d79: ror eax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000123927: ror eax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x000000000983e2: ror ebp, 0x15; add [rax], al; jne short 0x00000000000983f0; ret; 
0x000000001322e1: ror edi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000000c9bde: ror edx, 0x2; cmp edx, 0x28f5c28; jbe short 0x00000000000c9bf0; ret; 
0x000000000d06b4: ror qword ptr [r8+0x69], cl; call far fword ptr [rdi]; 
0x0000000011562d: ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x0000000002d556: ror rax, 0x11; xor rax, fs:[0x30]; jmp rax; 
0x00000000043d78: ror rax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x00000000123926: ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x000000001322e0: ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x00000000070630: sahf; cld; jmp qword ptr [rsi+0x66]; 
0x0000000006d80e: sahf; in al, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000012f9f6: sahf; js short 0x000000000012fa05; add [rcx+rcx*4-0x40], al; ret; 
0x00000000188a52: sahf; lea rax, [rdi+rax+0x40]; ret; 
0x000000000619c6: sahf; mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000006d60e: sahf; out 0xff, al; jmp qword ptr [rsi+0xf]; 
0x000000000c7bee: sahf; stc; call far fword ptr [rdx+0x59]; 
0x00000000038eae: sahf; xor al, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000006f256: sar ah, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000607a4: sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000008df2b: sar bh, 0x1; loopne 0x000000000008df95; nop; mov eax, 0x16; ret; 
0x000000000b4dac: sar bh, 0x1; loopne 0x00000000000b4d40; mov rax, [rip+0x138111]; mov rax, [rax+0x248]; ret; 
0x00000000139c0c: sar bh, 0x53; sub [rbp+0x488774c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000acc8b: sar bh, 0xff; call qword ptr [rax+0xf11280f]; 
0x0000000016263d: sar bh, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000169493: sar bh, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000052185: sar bh, 0xff; ret; 
0x0000000005215a: sar bh, 0xff; sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000098b3e: sar bh, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000136b27: sar bh, cl; jmp qword ptr [rsi+0xf]; 
0x0000000004d85c: sar bl, 0xff; inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; movzx eax, al; ret; 
0x000000001204f3: sar bl, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000013d100: sar bl, cl; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000d2e4e: sar byte ptr [r8+0xd9], 0x1; syscall; 
0x000000000ffa22: sar byte ptr [rax+0x100], 0xf; add al, 0x24; add rsp, 0x18; ret; 
0x0000000008f6bf: sar byte ptr [rax+0x10], 0x1; ret; 
0x00000000091f75: sar byte ptr [rax+0x10], 0x48; add esp, 0x110; pop rbp; ret; 
0x000000000f8364: sar byte ptr [rax+0x11], 0x48; cmp ebx, eax; pop rbx; setl al; ret; 
0x000000000fdd55: sar byte ptr [rax+0x11d], cl; mov rdx, rsi; xor esi, esi; syscall; 
0x00000000109182: sar byte ptr [rax+0x121], cl; mov edx, 0x8; syscall; 
0x0000000010b611: sar byte ptr [rax+0x14], cl; syscall; 
0x0000000007e45c: sar byte ptr [rax+0x1], 0xc3; mov rax, [rip+0x16e9a9]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000010b322: sar byte ptr [rax+0x1d], cl; syscall; 
0x0000000014a182: sar byte ptr [rax+0x24], 0x48; mov eax, [rsp+0x8]; add rsp, 0x10; pop rbp; ret; 
0x00000000149f9b: sar byte ptr [rax+0x2b], 0x48; mov eax, [rsp+0x8]; add rsp, 0x18; ret; 
0x00000000084e3d: sar byte ptr [rax+0x5b010016], cl; ret; 
0x00000000100670: sar byte ptr [rax+0x6], 0x41; cmp eax, 0x2; jbe short 0x0000000000100680; ret; 
0x000000000fe845: sar byte ptr [rax+0x8], cl; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000fead6: sar byte ptr [rax+0x9], 0x8b; and al, 0xc; add rsp, 0x18; ret; 
0x00000000149f23: sar byte ptr [rax+0xa], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x00000000131ca9: sar byte ptr [rax+0xc], 0x4c; mov eax, esp; pop r12; ret; 
0x0000000008e286: sar byte ptr [rax+0xca], cl; syscall; 
0x000000000889a6: sar byte ptr [rax+0xca], cl; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000d2e4f: sar byte ptr [rax+0xd9], 0x1; syscall; 
0x00000000091078: sar byte ptr [rax+0xd], 0x48; add esp, 0x110; pop rbp; ret; 
0x00000000123627: sar byte ptr [rax+0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000109c1b: sar byte ptr [rax+rbx+0x74], 0x1; ret; 
0x00000000127744: sar byte ptr [rax-0x1], 0xf; and al, 0x4; add rsp, 0x18; ret; 
0x00000000085e97: sar byte ptr [rax], 0x48; cmove eax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c497: sar byte ptr [rax], 0x48; cmove eax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d8c: sar byte ptr [rax], 0x48; cmove eax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c3: sar byte ptr [rax], 0x48; cmove eax, ebx; pop rbx; ret; 
0x000000000d90dc: sar byte ptr [rax], 0x48; cmovne eax, edi; ret; 
0x000000000e08d9: sar byte ptr [rax], 0xe; je 0x00000000000e083d; ret; 
0x00000000108fc4: sar byte ptr [rbx+rdx+0x74], 0x1; ret; 
0x0000000018bd33: sar byte ptr [rbx], 0x34; xchg [rbp-0x14], esi; lea rax, [rdi+rax*4]; ret; 
0x0000000018bbc3: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd43: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d4c8: sar byte ptr [rbx], cl; or al, 0x86; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4dd: sar byte ptr [rbx], cl; xchg [rax], r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6cb: sar byte ptr [rbx], cl; xchg al, r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6eb: sar byte ptr [rbx], cl; xchg al, r8b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000100484: sar byte ptr [rcx+0x5], 0x41; mov byte ptr [rsp], 0x0; mov rax, r12; pop r12; ret; 
0x00000000115fac: sar byte ptr [rcx-0x72b7fffd], 0x15; sub [rdi], ecx; add al, 0x0; cmovne rax, rdx; ret; 
0x00000000185e8a: sar byte ptr [rcx], 0xc2; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d262: sar byte ptr [rcx], 0xc2; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d970: sar byte ptr [rcx], 0xc2; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018de0d: sar byte ptr [rcx], 0xc2; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018b83f: sar byte ptr [rcx], 0xc6; jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b80d: sar byte ptr [rcx], 0xc6; jb short 0x000000000018b81b; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b88b: sar byte ptr [rcx], 0xc6; jb short 0x000000000018b8d4; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000009490f: sar byte ptr [rdi+0x1], 0xe8; mov bl, 0xfe; jmp qword ptr [rsi+0xf]; 
0x00000000110e8c: sar byte ptr [rdi+0x2000001], 0x21; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x00000000050059: sar byte ptr [rdi+0x2], cl; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000008e462: sar byte ptr [rdi+0xb], cl; mov [rsi], eax; xor eax, eax; add rsp, 0x18; ret; 
0x000000000f9a97: sar byte ptr [rdi-0x64], 0xb8; add [rcx], eax; add [rax], al; syscall; 
0x000000000d84a2: sar byte ptr [rdx+0x100], 0x1; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000086411: sar byte ptr [rdx+0x1], 0xf0; cmpxchg [rdi], edx; jne short 0x0000000000086453; xor eax, eax; ret; 
0x000000000865a0: sar byte ptr [rdx+0x1], 0xf0; cmpxchg [rdi], edx; setne al; movzx eax, al; ret; 
0x00000000086e2d: sar byte ptr [rdx+0x1], cl; mov dword ptr [r8+0x61c], 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000008dfe3: sar byte ptr [rdx+0x1], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000868c6: sar byte ptr [rdx+0x1], cl; mov eax, 0xca; syscall; 
0x00000000088b6a: sar byte ptr [rdx+0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e20b: sar byte ptr [rdx+0x1], cl; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000000898e7: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; lea rdi, [rax+0x61c]; mov eax, 0xca; syscall; 
0x000000000868a2: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef4: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff4: sar byte ptr [rdx+0x1], cl; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000088635: sar byte ptr [rdx+0x1], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000886bf: sar byte ptr [rdx+0x1], cl; mov esi, ebx; mov rdi, r9; mov eax, 0xca; syscall; 
0x0000000008f496: sar byte ptr [rdx+0x1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000088ce6: sar byte ptr [rdx+0x1], cl; mov rdi, r13; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000088946: sar byte ptr [rdx+0x1], cl; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000008826f: sar byte ptr [rdx+0x1], cl; mov rdi, r9; mov eax, 0xca; syscall; 
0x00000000088fcf: sar byte ptr [rdx+0x1], cl; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008f812: sar byte ptr [rdx+0x1], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008684a: sar byte ptr [rdx+0x2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000867e4: sar byte ptr [rdx+0x2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000001236a9: sar byte ptr [rdx+0x7fffffff], 0x1; add eax, ecx; cmovs eax, edx; ret; 
0x000000000883bb: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; syscall; 
0x00000000087d8a: sar byte ptr [rdx+0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e738: sar byte ptr [rdx+0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000008f733: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000008eca0: sar byte ptr [rdx+0x7fffffff], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000001447f5: sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, r12; call r13; 
0x00000000145907: sar byte ptr [rdx-0x1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx; 
0x00000000086de4: sar byte ptr [rdx-0x2], cl; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000a9f25: sar byte ptr [rdx], 0x48; lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret; 
0x0000000009de95: sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000012490d: sar byte ptr [rsi+0x5], 0x80; cmp ebp, [rsi]; je short 0x0000000000124920; pop rbx; ret; 
0x00000000089996: sar byte ptr [rsi+0x80], cl; mov eax, r8d; syscall; 
0x00000000087169: sar byte ptr [rsi+0x80], cl; mov rdi, r15; mov eax, r9d; syscall; 
0x0000000008e65a: sar byte ptr [rsi+0x80], cl; mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000086f59: sar byte ptr [rsi+0x81], cl; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000008c172: sar byte ptr [rsi+0x87], cl; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x0000000008da11: sar byte ptr [rsi+0x8], cl; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000f8c0c: sar byte ptr [rsi-0x1], cl; mov eax, 0x1b4; syscall; 
0x0000000008e42a: sar byte ptr [rsi-0x21], cl; mov eax, [rip+0x15ee61]; mov [rsi], eax; xor eax, eax; ret; 
0x00000000179e2c: sar ch, 0x1; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017bf97: sar ch, 0xff; jmp qword ptr [rdx-0xf]; 
0x000000000fceee: sar ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000063e3b: sar cl, 0xff; dec dword ptr [rax-0x7d]; ret; 
0x0000000014947f: sar dh, 0xff; call qword ptr [rax+rax]; 
0x0000000017f27a: sar dh, 0xff; jmp qword ptr [rsi-0x70]; 
0x0000000004d23b: sar dh, cl; jmp qword ptr [rsi-0x70]; 
0x000000000cd386: sar di, 0x1; jmp qword ptr [rsi+0xf]; 
0x0000000009753e: sar dl, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000080330: sar dl, 0xff; xor eax, eax; pop rbp; ret; 
0x0000000007fad2: sar dl, cl; jmp qword ptr [rsi+0x2e]; 
0x000000001055f3: sar dword ptr [rax+0xe], 0x1; add [rax-0x7d], cl; call qword ptr [rax]; 
0x0000000017b955: sar dword ptr [rax+rcx*2+0x11], 0x1; imul edi, ebp, 0x487cd162; adc [rcx-0x2], esi; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bded: sar dword ptr [rax+rcx*2+0x11], 0x1; jmp qword ptr [r10-0x2f]; 
0x0000000017b95c: sar dword ptr [rax+rcx*2+0x11], 0x1; jno short 0x000000000017b960; vmovups [r9-0x40], zmm7; ret; 
0x0000000017b963: sar dword ptr [rax+rcx*2+0x11], 0x1; jns short 0x000000000017b968; ret; 
0x00000000045ce2: sar dword ptr [rax], 0x1; test dil, dil; cmovne eax, ecx; add rsp, 0x8; ret; 
0x0000000009103b: sar dword ptr [rbp-0x389bffeb], 0x1; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000123216: sar dword ptr [rcx], 0x1; iretd; ja short 0x0000000000123204; mov eax, 0xffffffff; ret; 
0x0000000014cfed: sar dword ptr [rdx+0x1], 0x1; shl rdx, cl; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x0000000010af65: sar dword ptr [rdx], 0x1; cmovb rax, rdx; ret; 
0x000000001773df: sar dword ptr [rsi+0x7f], 0x23; vzeroupper; ret; 
0x00000000087773: sar eax, 0x1; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e482: sar eax, 0x1c; and eax, 0x3; mov [rsi], eax; xor eax, eax; ret; 
0x0000000008e4a2: sar eax, 0x1e; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000004081b: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x00000000092e9f: sar eax, 0x1f; pop rbp; pop r12; ret; 
0x000000000ff028: sar eax, 0x1f; pop rbp; ret; 
0x0000000014ec04: sar eax, 0x1f; ret; 
0x00000000040128: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x000000000877a3: sar eax, 0x2; and eax, 0x1; mov [rsi], eax; xor eax, eax; ret; 
0x0000000007e082: sar eax, 0x2; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000007b80f: sar eax, 0x2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret; 
0x0000000007bef9: sar eax, 0x2; ret; 
0x00000000040b55: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000004046a: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x00000000117c4d: sar eax, 0x6; ret; 
0x000000000ed563: sar eax, 0xf; add [rbx+rcx*4], cl; mov [rax], rdi; mov rax, r8; ret; 
0x000000000f029a: sar eax, cl; test esi, eax; jne short 0x00000000000f0278; mov eax, [rdi+0x14]; ret; 
0x000000001867da: sar ebp, 0x28; jg short 0x0000000000186828; jmp qword ptr [rdx-0x3f]; 
0x0000000017e720: sar ebp, 0x48; jg short 0x000000000017e76e; jmp qword ptr [rdx-0x3f]; 
0x00000000124576: sar ebp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000c51fb: sar ebx, 0xff; call qword ptr [rax+0x166f0ff3]; 
0x0000000007b76c: sar ecx, 0x2; lea eax, [rcx-0x1]; ret; 
0x00000000136b0e: sar edi, 0x1; jmp qword ptr [rsi+0x66]; 
0x0000000002ee84: sar edi, 0x1; jmp qword ptr [rsi+0xf]; 
0x000000000c9c26: sar edi, 0x1; jmp qword ptr [rsi+0xf]; 
0x00000000085e15: sar edi, 0x1; ror byte ptr [rax-0x77], 0x1; adc [r8+0x5a], bl; pop rbx; ret; 
0x0000000018c386: sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c396: sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a6: sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c376: sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x0000000018cd44: sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2f: sar edi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd4: sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd85: sar edi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000001709d3: sar edi, 0xc0; jne short 0x0000000000170a20; vzeroupper; ret; 
0x00000000177c93: sar edi, 0xc0; jne short 0x0000000000177ce0; vzeroupper; ret; 
0x00000000145354: sar edx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144b43: sar edx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000127563: sar edx, 0x4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x000000000c699b: sar edx, 0x7; sub rdx, rcx; lea rax, [rsi+rdx]; ret; 
0x000000000a5347: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000aa677: sar edx, cl; test rdx, rdx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa837: sar edx, cl; test rdx, rdx; je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000aa6d8: sar edx, cl; test rdx, rdx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8a7: sar edx, cl; test rdx, rdx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x00000000186767: sar esi, 0x28; jg short 0x000000000018678f; ret; 
0x0000000017e6a0: sar esi, 0x48; jg short 0x000000000017e6c8; ret; 
0x000000000c53bb: sar esi, 0xff; call qword ptr [rax+0xf6f0ff3]; 
0x00000000185b0e: sar esi, 0xff; jmp qword ptr [rsi+0x66]; 
0x0000000007cf0a: sar esi, 0xff; jmp qword ptr [rsi-0x70]; 
0x00000000183ac1: sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000182e13: sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000007e081: sar rax, 0x2; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000007b80e: sar rax, 0x2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret; 
0x0000000007bef8: sar rax, 0x2; ret; 
0x00000000040b54: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000040469: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000117c4c: sar rax, 0x6; ret; 
0x0000000007b76b: sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000018cd43: sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2e: sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd3: sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd84: sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x00000000145353: sar rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144b42: sar rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000127562: sar rdx, 0x4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 0x1; syscall; 
0x000000000c699a: sar rdx, 0x7; sub rdx, rcx; lea rax, [rsi+rdx]; ret; 
0x000000000a5346: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000aa676: sar rdx, cl; test rdx, rdx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa836: sar rdx, cl; test rdx, rdx; je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000aa6d7: sar rdx, cl; test rdx, rdx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8a6: sar rdx, cl; test rdx, rdx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x000000000aa8b6: sar rdx, cl; test rdx, rdx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x0000000018c4aa: sarx eax, eax, ecx; test eax, eax; je 0x000000000018c3c7; tzcnt eax, eax; ret; 
0x00000000189a22: sarx eax, eax, edx; test eax, eax; je 0x0000000000189947; tzcnt eax, eax; ret; 
0x0000000008375f: sbb [r11+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000013ab17: sbb [r11+0xa7603f8], r8b; mov eax, 0x2; ret; 
0x00000000115684: sbb [r11], dil; sbb al, 0x74; adc ebx, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x00000000085cb2: sbb [r8+0x5a], bl; pop rbx; ret; 
0x0000000002deb3: sbb [r8+rax], bl; ret; 
0x000000000fe1e1: sbb [r8-0x75], r9b; jo short 0x00000000000fe230; mov [rdi+0x20], edx; mov [rdi+0x28], rax; ret; 
0x00000000083610: sbb [r8-0x77], r9b; push rdi; mov [rdi+0x8], rax; ret; 
0x00000000145102: sbb [r8-0x7d], cl; ret; 
0x000000000d4242: sbb [r8-0x7d], r9b; ret; 
0x000000000b3b84: sbb [r8], r14b; in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000b3ba6: sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000b3be4: sbb [r8], r14b; in eax, dx; mov [rdi+0x1c], ch; ret; 
0x0000000007f3ee: sbb [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000001457b8: sbb [r9+r9*4-0x40], r8b; ret; 
0x00000000143988: sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x00000000140330: sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x000000000f9bfb: sbb [rax+0x101], bh; syscall; 
0x000000000fe490: sbb [rax+0x115], bh; syscall; 
0x0000000010ad50: sbb [rax+0x120], bh; syscall; 
0x0000000014eed6: sbb [rax+0x1], bh; add rsp, 0x10; pop rbx; ret; 
0x000000000df28a: sbb [rax+0x1], edi; ret; 
0x0000000010a9bd: sbb [rax+0x2c], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010b010: sbb [rax+0x45], bh; syscall; 
0x0000000010b16f: sbb [rax+0x47], bh; syscall; 
0x00000000085cb3: sbb [rax+0x5a], bl; pop rbx; ret; 
0x00000000140209: sbb [rax+rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000929c5: sbb [rax+rax], al; add [rbx-0x76b7ffab], cl; ret far; 
0x0000000002deb4: sbb [rax+rax], bl; ret; 
0x000000000ea52d: sbb [rax+rax], cl; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000000d8412: sbb [rax+rdi*4+0x7f], edx; add [rax], al; add [rdx+0x7d00], bh; cmove rax, rdx; ret; 
0x0000000007d326: sbb [rax-0x1], bh; pop rbx; pop rbp; ret; 
0x00000000046017: sbb [rax-0x39], cl; ret; 
0x0000000011562b: sbb [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax; 
0x0000000008d8e7: sbb [rax-0x73], cl; adc eax, 0x11c0b1; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b03b3: sbb [rax-0x73], cl; jg short 0x00000000000b03d0; jne 0x00000000000b0980; ret; 
0x000000000b1b07: sbb [rax-0x73], cl; jg short 0x00000000000b1b24; jne 0x00000000000b21a0; ret; 
0x000000000fb515: sbb [rax-0x73], cl; sub [r9+r9*4-0x12], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x000000000b03d6: sbb [rax-0x73], ecx; jg short 0x00000000000b03f4; jne 0x00000000000b0980; ret; 
0x000000000b1b3a: sbb [rax-0x73], ecx; jg short 0x00000000000b1b58; jne 0x00000000000b21a0; ret; 
0x0000000002d1cc: sbb [rax-0x75], cl; adc [rax-0x75], cl; and al, 0x8; call rax; 
0x000000000d3a08: sbb [rax-0x75], cl; and al, 0x10; call rax; 
0x00000000093fe2: sbb [rax-0x75], cl; je short 0x000000000009400b; adc [rax+0xf3], bh; mov edi, [rsp+0x8]; syscall; 
0x000000000f9ccb: sbb [rax-0x75], cl; je short 0x00000000000f9cf4; adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall; 
0x000000000fb9a3: sbb [rax-0x75], cl; je short 0x00000000000fb9cc; sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbc73: sbb [rax-0x75], cl; je short 0x00000000000fbc9c; sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbcf3: sbb [rax-0x75], cl; je short 0x00000000000fbd1c; sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x0000000010b0c2: sbb [rax-0x75], cl; je short 0x000000000010b0eb; adc [rax+0x46], bh; mov edi, [rsp+0x8]; syscall; 
0x0000000011b11a: sbb [rax-0x75], cl; jl short 0x000000000011b143; adc [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x000000000fe1e2: sbb [rax-0x75], cl; jo short 0x00000000000fe230; mov [rdi+0x20], edx; mov [rdi+0x28], rax; ret; 
0x00000000091796: sbb [rax-0x75], cl; js short 0x00000000000917a3; call qword ptr [rax]; 
0x00000000043fee: sbb [rax-0x75], ecx; adc [rbx+0x48], bl; mov dword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x000000000cbd0c: sbb [rax-0x76a7dbbc], cl; ret; 
0x000000001008bf: sbb [rax-0x77], cl; add eax, 0xf5619; mov eax, 0x1; add rsp, 0x8; ret; 
0x00000000144f86: sbb [rax-0x77], cl; and al, 0x18; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000013f277: sbb [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x48]; 
0x000000000b6542: sbb [rax-0x77], cl; out dx, eax; mov r9, r15; call rbx; 
0x00000000083611: sbb [rax-0x77], cl; push rdi; mov [rdi+0x8], rax; ret; 
0x0000000007cf1e: sbb [rax-0x77], cl; ret far; 
0x00000000037fff: sbb [rax-0x77], cl; ret; 
0x000000000c848c: sbb [rax-0x77], cl; sub [r11+0x5d], bl; pop r12; ret; 
0x000000000d91df: sbb [rax-0x7b], cl; div byte ptr [rcx+rbx-0x17]; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000ee30f: sbb [rax-0x7b], cl; div byte ptr [rcx+rbx-0x17]; jbe short 0x00000000000ee2e0; cli; jmp qword ptr [rsi+0xf]; 
0x0000000009284b: sbb [rax-0x7b], cl; shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x000000000d4243: sbb [rax-0x7d], cl; ret; 
0x000000000979c3: sbb [rax-0x7d], cl; sub [rax], r9; add [rbp+0x39], ecx; ret far; 
0x00000000149910: sbb [rax-0x7d], ecx; ret; 
0x000000000c5f96: sbb [rax-0x7d], ecx; rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 0x1; ret; 
0x0000000012395b: sbb [rax-0xa], bh; pop rbx; pop rbp; ret; 
0x000000000e7567: sbb [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret; 
0x00000000089756: sbb [rax], al; add [rax], al; lea rdi, [rbx+0x2e0]; mov eax, 0x111; syscall; 
0x00000000091921: sbb [rax], al; add [rax], al; syscall; 
0x000000000f9c94: sbb [rax], al; add [rax], al; test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x0000000015f2ae: sbb [rax], al; add [rbp-0x77], cl; ret far; 
0x0000000006d76d: sbb [rax], al; call qword ptr [rcx+r8*8-0x40]; 
0x0000000006d76c: sbb [rax], al; call qword ptr [rcx+r8*8-0x40]; 
0x0000000002d405: sbb [rax], al; ret; 
0x0000000007fb28: sbb [rax], al; setne r8b; mov eax, r8d; ret; 
0x0000000002d3b1: sbb [rax], al; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000b3b85: sbb [rax], dh; in eax, dx; mov [rdi+0x19], ch; ret; 
0x000000000b3ba7: sbb [rax], dh; in eax, dx; mov [rdi+0x1a], ch; ret; 
0x000000000b3be5: sbb [rax], dh; in eax, dx; mov [rdi+0x1c], ch; ret; 
0x000000000868ff: sbb [rax], dl; add [rax], al; add [rax], al; add [rax], al; ret; 
0x00000000065972: sbb [rax], eax; add [rax+0x1], cl; ret; 
0x0000000010a054: sbb [rax], eax; add [rax], al; syscall; 
0x000000000a853e: sbb [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000006e32f: sbb [rax], eax; add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000050041: sbb [rax], eax; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000005c165: sbb [rax], eax; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000004f8ac: sbb [rax], eax; pop rbp; xor eax, eax; pop r12; ret; 
0x00000000144b54: sbb [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret; 
0x0000000010a80e: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5ee: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000139590: sbb [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000154b23: sbb [rbp+0x6], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000132742: sbb [rbp+0xc], edi; add [rax], al; call rbx; 
0x000000000b6663: sbb [rbp+0xd], esp; add bh, dh; rol dword ptr [rax], 0x0; add [rax+0x74], al; ret far; 
0x000000000c46d2: sbb [rbp+rcx*4+0x5], cl; mov byte ptr [rdx-0x2dceffee], 0xe8; jmp qword ptr [rdi+rdi*8]; 
0x0000000009aa53: sbb [rbp+rcx+0xc6f700], ebx; or [rax], al; add [rbp-0x4f], dh; ret; 
0x000000000b5273: sbb [rbp+rcx], edi; test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x000000000d9958: sbb [rbp-0x7b], cl; push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15; 
0x000000000d3c94: sbb [rbp], cl; add [rax-0x77], cl; ret; 
0x0000000013a636: sbb [rbx+0x247401f8], eax; mov dword ptr [rsi], 0x10; mov [rsi+0x8], rax; ret; 
0x00000000083760: sbb [rbx+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000001182b5: sbb [rbx+0x48402454], cl; mov edi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x0000000008e776: sbb [rbx+0x48], edx; mov ebx, edi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x000000001232b5: sbb [rbx+0x49], bl; mov [rcx], eax; mov eax, ecx; ret; 
0x0000000011b5ba: sbb [rbx+0x4c30247c], cl; mov edx, esp; call qword ptr [rsp+0x48]; 
0x0000000007f361: sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000070396: sbb [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000e259e: sbb [rbx+0x5d], bl; pop r13; pop r14; ret; 
0x00000000040fa9: sbb [rbx+0x5d], bl; ret; 
0x000000000d2dc6: sbb [rbx+0x5d], ebx; pop r12; ret; 
0x0000000013ab18: sbb [rbx+0xa7603f8], al; mov eax, 0x2; ret; 
0x000000001182b0: sbb [rbx+rcx*4+0x44], cl; and al, 0x18; mov edx, [rsp+0x40]; mov rdi, [rsp+0x10]; call qword ptr [rsp+0x58]; 
0x000000000412ad: sbb [rbx+rcx*4+0x77], cl; and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000001012f3: sbb [rbx-0x2708fff2], edi; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000084b27: sbb [rbx-0x2fd6efb9], cl; ret; 
0x000000000326ed: sbb [rbx-0x3c7cb6fe], ecx; add [rbx+0x394907e0], eax; ret; 
0x0000000010939a: sbb [rbx-0x47f7db84], cl; adc al, 0x1; add [rax], al; syscall; 
0x0000000010c019: sbb [rbx-0x6f3cff00], al; ret; 
0x000000000d2146: sbb [rbx], al; add [rax], al; test rax, rax; je short 0x00000000000d2180; call rax; 
0x00000000115685: sbb [rbx], bh; sbb al, 0x74; adc ebx, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x00000000109c1d: sbb [rcx+rax-0x3d], dh; xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x00000000143989: sbb [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x20]; 
0x000000000c1323: sbb [rcx+rcx*4-0x17], cl; mov rdx, rbp; call rbx; 
0x0000000013de67: sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x8]; 
0x000000000586ab: sbb [rcx+rcx*4-0x19], cl; sub rsi, rax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000004ff69: sbb [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret; 
0x00000000139628: sbb [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x0000000007f3ef: sbb [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000800b7: sbb [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000d2e16: sbb [rcx+rcx*4-0x20], ecx; pop rbx; pop rbp; pop r12; ret; 
0x0000000012382d: sbb [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret; 
0x00000000145753: sbb [rcx+rcx*4-0x40], al; ret; 
0x0000000014578b: sbb [rcx+rcx*4-0x40], cl; ret; 
0x0000000013253e: sbb [rcx+rcx*4-0x40], eax; ret; 
0x000000000b6232: sbb [rcx+rcx*4-0xe], cl; mov rdi, rbp; call rbx; 
0x000000000f56f6: sbb [rcx-0x17efdbbc], cl; push rax; insb [rdi], dx; call far fword ptr [rax+0x5a]; 
0x000000000fa373: sbb [rcx-0x17f3db84], cl; mov [0x410c247c8bfff8bd], eax; mov eax, eax; mov eax, 0x3; syscall; 
0x0000000008fea3: sbb [rcx-0x17f3dbbc], cl; ret; 
0x000000001090ce: sbb [rcx-0x47], eax; or [rax], al; add [rax], al; mov eax, 0x119; syscall; 
0x00000000064bdb: sbb [rcx-0x56f63], cl; dec dword ptr [rax-0x39]; ret; 
0x000000000e3785: sbb [rcx-0x77], al; ret; 
0x00000000138e83: sbb [rcx-0xb], ebx; dec dword ptr [rax-0x73]; add eax, 0xc3692; add rsp, 0x8; ret; 
0x00000000140331: sbb [rcx], al; add [rax], al; add [rdi], cl; adc [rdi+0x8], eax; ret; 
0x000000000fe084: sbb [rcx], al; add [rax], al; syscall; 
0x000000000dd14b: sbb [rcx], bh; ret; 
0x0000000006e07b: sbb [rcx], ch; ret; 
0x000000000e25d4: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rbp; pop r14; ret; 
0x0000000007d8da: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000130b85: sbb [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10; 
0x000000000d83d4: sbb [rcx], eax; add [rax+0x7f], bh; mov edx, 0x7d00; cmove rax, rdx; ret; 
0x00000000109126: sbb [rcx], eax; add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x000000001090d6: sbb [rcx], eax; add [rax], al; syscall; 
0x000000000b1623: sbb [rdi+rcx+0xc634900], ecx; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000085b83: sbb [rdi-0x6], esp; jmp qword ptr [rsi+0xf]; 
0x00000000146bb2: sbb [rdi], al; add al, ch; push rsi; cmp edi, ebp; jmp qword ptr [rsi+0xf]; 
0x0000000005c108: sbb [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000145c5e: sbb [rdi], cl; mov dh, 0xc0; ret; 
0x0000000011088e: sbb [rdi], cl; mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret; 
0x000000000cbc2d: sbb [rdi], cl; test bh, bl; add [rax], al; add dh, dh; ret; 
0x000000000f6f76: sbb [rdi], ecx; mov dh, 0xc0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x0000000003d1a9: sbb [rdi], ecx; ret far; 
0x000000000b1b3e: sbb [rdi], ecx; test [rbx+0x6], ebx; add [rax], al; ret; 
0x0000000010b5cc: sbb [rdx+0x40], edi; mov eax, 0x14; syscall; 
0x0000000014b273: sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x000000000b4e1a: sbb [rdx], al; add [rax], al; ret; 
0x0000000012916a: sbb [rdx], al; add [rax], al; test rax, rax; je short 0x0000000000129178; ret; 
0x00000000100124: sbb [rdx], edx; sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall; 
0x000000000398f3: sbb [rip+0x3145001b], esi; jmp qword ptr [rdi+rax*8]; 
0x000000000d9234: sbb [rip+0xf000], ah; cmp eax, 0x4000; sete al; add rsp, 0x98; ret; 
0x000000000860ab: sbb [rsi+0x16], ebp; add [rax-0x75], cl; jg short 0x00000000000860c3; call qword ptr [rax+0x358]; 
0x0000000007b1a2: sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18]; 
0x00000000141954: sbb [rsi+0x6], bh; call qword ptr [rax+0x28]; 
0x0000000014191d: sbb [rsi+0x6], bh; mov rax, [rdi+0x8]; call qword ptr [rax+0x28]; 
0x000000000a9ea4: sbb [rsi+0xc8b000e], dh; mov cl, [rbx-0x37d67dfc]; ret; 
0x000000001008c3: sbb [rsi+0xf], edx; add [rax+0x1], bh; add rsp, 0x8; ret; 
0x00000000153263: sbb [rsi+rax], ebp; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010a9f3: sbb [rsi+rcx], esp; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000010c00a: sbb [rsi-0x7d], ah; add [rcx], al; ret; 
0x0000000010c009: sbb [rsi-0x7d], spl; add [rcx], al; ret; 
0x00000000090ad9: sbb [rsp+rax-0x3d], dh; nop [rax]; mov [rdx+0x8], rax; ret; 
0x00000000090ad8: sbb [rsp+rax-0x3d], sil; nop [rax]; mov [rdx+0x8], rax; ret; 
0x000000000f8f38: sbb al, 0x0; add [rax], al; syscall; 
0x0000000016d649: sbb al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000016d5a3: sbb al, 0x0; add [rcx+0x29], cl; ret far; 
0x0000000002d130: sbb al, 0x0; ret; 
0x000000001144df: sbb al, 0x20; je short 0x00000000001144f0; pop rbx; ret; 
0x000000000f6668: sbb al, 0x24; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000c7b52: sbb al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000007a05e: sbb al, 0x2a; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000018d974: sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x000000000b0469: sbb al, 0x48; lea edi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b1bcd: sbb al, 0x48; lea edi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x0000000014c2e3: sbb al, 0x48; mov eax, [rip+0xa0bdd]; mov rdi, [rsp]; mov rax, [rax+0x330]; jmp rax; 
0x000000000d68d4: sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall; 
0x000000000b1bf4: sbb al, 0x49; sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x0000000009419a: sbb al, 0x4c; mov esi, esp; mov edi, ebp; mov eax, 0xde; syscall; 
0x00000000192ec3: sbb al, 0x5b; ret; 
0x000000000898f5: sbb al, 0x6; add [rax], al; mov eax, 0xca; syscall; 
0x00000000115687: sbb al, 0x74; adc ebx, [rbx+0x31]; rol byte ptr [rcx+0x5c], 0x5d; ret; 
0x0000000009c2e0: sbb al, 0x82; add [rax], eax; cmove rax, rdx; ret; 
0x0000000008e484: sbb al, 0x83; loopne 0x000000000008e48b; mov [rsi], eax; xor eax, eax; ret; 
0x0000000009bec0: sbb al, 0x86; add [rax], eax; cmove rax, rdx; ret; 
0x0000000012b7df: sbb al, 0x8; add [rcx+rax-0x39], cl; jmp rdi; 
0x0000000018f5d5: sbb al, 0x99; add rcx, rbx; jmp rcx; 
0x00000000103268: sbb al, 0x99; ltr [rcx+0x5d]; pop r12; pop r13; ret; 
0x0000000003ee4a: sbb al, 0x9f; add r11, r15; jmp r11; 
0x00000000140354: sbb al, 0xb8; add [rax], eax; add [rax], al; movups [r8], xmm2; ret; 
0x000000000df343: sbb al, 0xb8; add al, [rax]; add [rax], al; ret; 
0x000000000416bb: sbb al, 0xbe; or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x0000000008ebf3: sbb al, 0xbf; add byte ptr [rax], 0x0; add [rbp-0x7b], al; inc dword ptr [rdi+rcx+0x45]; jmp far fword ptr [rax-0xff88afe]; 
0x000000000f66d0: sbb al, 0xe9; popfq; idiv edi; jmp qword ptr [rsi+0x2e]; 
0x0000000010b144: sbb al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000037e7f: sbb al, 0xec; mov rax, [rax+r13*8]; test rax, rax; je short 0x0000000000037e8c; call rax; 
0x0000000014a542: sbb al, 0xee; inc dword ptr [rbp-0x3f6bf040]; add rsp, 0x8; ret; 
0x000000000d6f83: sbb al, 0xf4; mov eax, esi; syscall; 
0x0000000009aee0: sbb al, 0xf7; add [rax], al; cmove rax, rdx; ret; 
0x0000000013982c: sbb al, 0xff; adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000043ff9: sbb al, [rax]; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret; 
0x00000000102afd: sbb al, [rax]; add [rax], al; syscall; 
0x0000000016d82a: sbb al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000006943d: sbb al, [rax]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000447c5: sbb al, [rax]; add rsp, 0x8; ret; 
0x00000000044058: sbb al, [rax]; cmp eax, 0x1; jg short 0x0000000000044080; pop rbp; ret; 
0x000000000436c8: sbb al, [rax]; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x0000000004dfff: sbb al, [rax]; mov byte ptr [rax+rdx], 0x0; ret; 
0x00000000041415: sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000413a5: sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000004042f: sbb al, [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000041cb5: sbb al, [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000003f855: sbb al, [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret; 
0x00000000044b35: sbb al, [rax]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x0000000003f8b5: sbb al, [rax]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000041e67: sbb al, [rax]; mov eax, edx; ret; 
0x000000000413e5: sbb al, [rax]; mov fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000586b7: sbb al, [rax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000041665: sbb al, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000004169d: sbb al, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000044a95: sbb al, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000041e14: sbb al, [rax]; ret; 
0x00000000158796: sbb al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000005b31f: sbb al, ch; fstp tbyte ptr [rsi], st; add al, [rax]; add rsp, 0xd8; ret; 
0x000000000d69d3: sbb al, ch; idiv r10d; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall; 
0x000000000f13af: sbb al, ch; imul ebp, esi, 0xffffffff; inc dword ptr [rcx+0x39]; ret; 
0x000000001048e8: sbb al, ch; mov [0xd8c48148fffffd], al; add [rax], al; ret; 
0x00000000116458: sbb al, ch; mov dl, 0x2c; idiv bh; add rsp, 0xd8; ret; 
0x00000000117a5c: sbb al, ch; mov esi, 0x48fff675; add esp, 0xd8; ret; 
0x000000000c7cbf: sbb al, ch; ret far; 
0x000000000c7bec: sbb al, ch; sahf; stc; call far fword ptr [rdx+0x59]; 
0x0000000007a531: sbb al, ch; stc; paddd mm7, mm7; add rsp, 0xd8; ret; 
0x0000000016d829: sbb al, fs:[rax]; add [rbp-0x77], cl; ret far; 
0x00000000158496: sbb ax, 0x6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000df333: sbb bh, [rax+0x2]; ret; 
0x000000000fe5f5: sbb bh, [rax+0x48]; syscall; 
0x0000000009a809: sbb bh, cl; call far fword ptr [rbx+0x44]; 
0x0000000014eb6e: sbb bl, al; mov rax, [rip+0x9e299]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000018ce36: sbb bl, al; mov rax, r8; ret; 
0x0000000014b279: sbb bl, al; nop [rax+rax]; mov dword ptr fs:[rdx], 0x16; add rsp, 0x18; ret; 
0x000000000eff96: sbb bl, al; nop [rax+rax]; mov eax, 0x8e; syscall; 
0x00000000040af4: sbb bl, al; sbb al, [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x000000000b072a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000afa7b: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000afaba: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000b0729: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret; 
0x000000000afa7a: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret; 
0x000000000afab9: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret; 
0x000000000868fe: sbb byte ptr [rax], 0x10; add [rax], al; add [rax], al; add [rax], al; ret; 
0x000000000b4e19: sbb byte ptr [rax], 0x2; add [rax], al; ret; 
0x000000000d2145: sbb byte ptr [rax], 0x3; add [rax], al; test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000b4f9f: sbb byte ptr [rbp+0x2000000], 0x48; lea eax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x00000000093b99: sbb byte ptr [rbp+0x41], 0x5c; pop r13; ret; 
0x000000000903e6: sbb byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000041794: sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000145c0f: sbb byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x0000000015ebed: sbb byte ptr [rdi], 0x0; add [rbp-0x77], cl; ret far; 
0x0000000009b2cf: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1af: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac3f: sbb byte ptr [rsi+0x10000000], 0x48; lea eax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x000000000b3576: sbb ch, [rdi+0xf]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000013a887: sbb ch, bh; dec dword ptr [rax-0x75]; or [r14+0x8], r15b; mov rdi, rbp; call qword ptr [rax+0x30]; 
0x000000000b040b: sbb cl, [rax-0x73]; jg short 0x00000000000b042a; jne 0x00000000000b0980; ret; 
0x000000000b1b6f: sbb cl, [rax-0x73]; jg short 0x00000000000b1b8e; jne 0x00000000000b21a0; ret; 
0x00000000041d3d: sbb cl, [rax-0x75]; add eax, 0x1ab0cb; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000fb324: sbb cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000b040f: sbb cl, [rdi]; test [rdx+0x5], ebp; add [rax], al; ret; 
0x0000000010b33c: sbb cl, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000dd148: sbb cl, al; clc; sbb [rcx], bh; ret; 
0x000000000dc9e7: sbb cl, ch; ret far; 
0x00000000037262: sbb dl, [rcx+rdx]; mov qword ptr [rbx+0x10], 0x0; pop rbx; ret; 
0x00000000056e3b: sbb dl, [rdi-0x3]; call qword ptr [rax+0xb60f41]; 
0x0000000003d74b: sbb dl, [rdi]; add cl, ch; ret; 
0x000000001544bb: sbb dword ptr [rbx+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000e08f3: sbb dword ptr [rbx-0x3d], 0x66; nop [rax+rax]; ret; 
0x00000000044a94: sbb dword ptr [rdx], 0x0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000010b38b: sbb dword ptr [rdx], 0xc764000e; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000fb421: sbb eax, 0x0; ret; 
0x00000000040873: sbb eax, 0x162b68; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret; 
0x00000000084e36: sbb eax, 0x16b8dd; add dword ptr [rip+0x16b8d2], 0x1; pop rbx; ret; 
0x000000000b0495: sbb eax, 0x1d7f8d48; jne 0x00000000000b0980; ret; 
0x000000000b1bf9: sbb eax, 0x1d7f8d48; jne 0x00000000000b21a0; ret; 
0x000000000b1c24: sbb eax, 0x1ee88349; lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x00000000192780: sbb eax, 0x1f0ffff7; add [rax], r8b; add rsp, 0x8; ret; 
0x0000000009226b: sbb eax, 0x20478948; mov [rip+0x162609], rdi; ret; 
0x000000000441e2: sbb eax, 0x24446348; or al, 0x48; add esp, 0x18; ret; 
0x0000000006b253: sbb eax, 0x2ebf000a; add [rax], al; add [rax-0x77], cl; ret; 
0x0000000017b4d5: sbb eax, 0x3e866; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b45b: sbb eax, 0x3e8e0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3cc: sbb eax, 0x3e96f; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1c1: sbb eax, 0x3eb7a; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08f: sbb eax, 0x3ecac; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc9: sbb eax, 0x3ed72; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af4b: sbb eax, 0x3edf0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeb4: sbb eax, 0x3ee87; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb8: sbb eax, 0x3f083; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab87: sbb eax, 0x3f1b4; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa86: sbb eax, 0x3f2b5; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea5: sbb eax, 0x3fd56; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e2b: sbb eax, 0x3fdd0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d9c: sbb eax, 0x3fe5f; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x000000000e2777: sbb eax, 0x40000c94; movzx ebp, ch; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax; 
0x00000000179b91: sbb eax, 0x4006a; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5f: sbb eax, 0x4019c; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179999: sbb eax, 0x40262; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017991b: sbb eax, 0x402e0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179884: sbb eax, 0x40377; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179688: sbb eax, 0x40573; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179557: sbb eax, 0x406a4; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179448: sbb eax, 0x407b3; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000159464: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret; 
0x000000000fdd57: sbb eax, 0x48000001; mov edx, esi; xor esi, esi; syscall; 
0x00000000112e1f: sbb eax, 0x48000027; mov esi, ebx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28]; 
0x0000000014b3cf: sbb eax, 0x48000b17; cmovne eax, edx; add rsp, 0x8; ret; 
0x00000000156d1f: sbb eax, 0x49000633; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b0499: sbb eax, 0x4e0850f; add [rax], al; ret; 
0x000000000b1bfd: sbb eax, 0x59c850f; add [rax], al; ret; 
0x00000000131ea2: sbb eax, 0x5b000000; ret; 
0x00000000192d2d: sbb eax, 0x5d9be; test rbx, rbx; jne short 0x0000000000192d18; pop rbx; ret; 
0x0000000015b5d3: sbb eax, 0x5f128; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b275: sbb eax, 0x5f486; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b420: sbb eax, 0x5f51b; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b0f5: sbb eax, 0x5f606; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b1b8: sbb eax, 0x5f783; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015af75: sbb eax, 0x5f786; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b038: sbb eax, 0x5f903; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015adf5: sbb eax, 0x5f906; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aeb8: sbb eax, 0x5fa83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ac75: sbb eax, 0x5fa86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ad39: sbb eax, 0x5fc02; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aaf5: sbb eax, 0x5fc06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015abb8: sbb eax, 0x5fd83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a975: sbb eax, 0x5fd86; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aa38: sbb eax, 0x5ff03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a7f5: sbb eax, 0x5ff06; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a8b8: sbb eax, 0x60083; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a675: sbb eax, 0x60086; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a738: sbb eax, 0x60203; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a4f5: sbb eax, 0x60206; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a5b8: sbb eax, 0x60383; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a375: sbb eax, 0x60386; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a438: sbb eax, 0x60503; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a1f5: sbb eax, 0x60506; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a2b8: sbb eax, 0x60683; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a075: sbb eax, 0x60686; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a138: sbb eax, 0x60803; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ef5: sbb eax, 0x60806; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159fb8: sbb eax, 0x60983; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159d75: sbb eax, 0x60986; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159bfc: sbb eax, 0x60aff; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159e38: sbb eax, 0x60b03; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159cb8: sbb eax, 0x60c83; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001599fd: sbb eax, 0x60cfe; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b7b: sbb eax, 0x60dc0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1f: sbb eax, 0x60f1c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ad1: sbb eax, 0x610ea; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000159a6a: sbb eax, 0x61111; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000158abf: sbb eax, 0x6173c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158795: sbb eax, 0x61a66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015892c: sbb eax, 0x61b0f; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158615: sbb eax, 0x61be6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001586d8: sbb eax, 0x61d63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158495: sbb eax, 0x61d66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158558: sbb eax, 0x61ee3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158315: sbb eax, 0x61ee6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001583d8: sbb eax, 0x62063; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158195: sbb eax, 0x62066; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158259: sbb eax, 0x621e2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158015: sbb eax, 0x621e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001580d8: sbb eax, 0x62363; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157e95: sbb eax, 0x62366; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157f58: sbb eax, 0x624e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157d15: sbb eax, 0x624e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157dd8: sbb eax, 0x62663; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157b95: sbb eax, 0x62666; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157c58: sbb eax, 0x627e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157a15: sbb eax, 0x627e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157ad8: sbb eax, 0x62963; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157895: sbb eax, 0x62966; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157958: sbb eax, 0x62ae3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157715: sbb eax, 0x62ae6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001577d8: sbb eax, 0x62c63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157595: sbb eax, 0x62c66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157658: sbb eax, 0x62de3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157415: sbb eax, 0x62de6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001574d8: sbb eax, 0x62f63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157295: sbb eax, 0x62f66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015711c: sbb eax, 0x630df; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157358: sbb eax, 0x630e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156ec6: sbb eax, 0x63175; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156e09: sbb eax, 0x63232; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001571d8: sbb eax, 0x63263; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f3c: sbb eax, 0x632bf; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d1e: sbb eax, 0x6331d; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015709b: sbb eax, 0x633a0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156c53: sbb eax, 0x633e8; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158497: sbb eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000f89d2: sbb eax, 0x6349018b; test [rax], r8d; add rax, r13; jmp rax; 
0x00000000156f29: sbb eax, 0x63512; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156ff1: sbb eax, 0x636ca; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000156f8f: sbb eax, 0x636ec; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000155c32: sbb eax, 0x64409; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155b94: sbb eax, 0x644a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155ae2: sbb eax, 0x64559; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155a44: sbb eax, 0x645f7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155992: sbb eax, 0x646a9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001558f4: sbb eax, 0x64747; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155842: sbb eax, 0x647f9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001557a4: sbb eax, 0x64897; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001556f2: sbb eax, 0x64949; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155654: sbb eax, 0x649e7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001555a2: sbb eax, 0x64a99; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155504: sbb eax, 0x64b37; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155452: sbb eax, 0x64be9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001553b4: sbb eax, 0x64c87; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155302: sbb eax, 0x64d39; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155269: sbb eax, 0x64dd2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001551b2: sbb eax, 0x64e89; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155114: sbb eax, 0x64f27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000155062: sbb eax, 0x64fd9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154fc4: sbb eax, 0x65077; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154f12: sbb eax, 0x65129; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154e74: sbb eax, 0x651c7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154dc2: sbb eax, 0x65279; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154d24: sbb eax, 0x65317; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154c72: sbb eax, 0x653c9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154bd4: sbb eax, 0x65467; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154b22: sbb eax, 0x65519; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154a84: sbb eax, 0x655b7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001549d2: sbb eax, 0x65669; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154934: sbb eax, 0x65707; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154888: sbb eax, 0x657b3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154797: sbb eax, 0x658a4; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d8: sbb eax, 0x65963; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015466e: sbb eax, 0x659cd; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457f: sbb eax, 0x65abc; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154345: sbb eax, 0x65b36; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544ba: sbb eax, 0x65b81; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015426b: sbb eax, 0x65c10; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154447: sbb eax, 0x65d74; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x000000001543ed: sbb eax, 0x65d8e; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000153262: sbb eax, 0x66c19; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001531c4: sbb eax, 0x66cb7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153112: sbb eax, 0x66d69; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000153074: sbb eax, 0x66e07; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152fc2: sbb eax, 0x66eb9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152f24: sbb eax, 0x66f57; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152e72: sbb eax, 0x67009; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152dd4: sbb eax, 0x670a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152d22: sbb eax, 0x67159; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152c84: sbb eax, 0x671f7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bd2: sbb eax, 0x672a9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152b34: sbb eax, 0x67347; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152a82: sbb eax, 0x673f9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001529e4: sbb eax, 0x67497; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152932: sbb eax, 0x67549; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152899: sbb eax, 0x675e2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001527e2: sbb eax, 0x67699; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152744: sbb eax, 0x67737; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152692: sbb eax, 0x677e9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001525f4: sbb eax, 0x67887; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152542: sbb eax, 0x67939; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001524a4: sbb eax, 0x679d7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001523f2: sbb eax, 0x67a89; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152354: sbb eax, 0x67b27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001522a2: sbb eax, 0x67bd9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152204: sbb eax, 0x67c77; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152152: sbb eax, 0x67d29; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001520b4: sbb eax, 0x67dc7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152002: sbb eax, 0x67e79; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151f64: sbb eax, 0x67f17; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151eb8: sbb eax, 0x67fc3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc7: sbb eax, 0x680b4; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d08: sbb eax, 0x68173; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151c9e: sbb eax, 0x681dd; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151baf: sbb eax, 0x682cc; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151aea: sbb eax, 0x68391; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151a77: sbb eax, 0x68584; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x00000000151a16: sbb eax, 0x685a5; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9; 
0x0000000015ee2d: sbb eax, 0x894d0000; ret far; 
0x0000000009a2ad: sbb eax, 0x8b48fff9; add eax, 0x152b59; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000e2eba: sbb eax, 0x8c48348; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000bb549: sbb eax, 0x8d000003; dec dword ptr [r8+0x63]; ret far; 
0x00000000154392: sbb eax, 0x930c634d; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x000000000f5b9e: sbb eax, 0xb60f0f77; ror byte ptr [rcx+0x63], 0x4; test [rcx+rax-0x20], cl; jmp rax; 
0x00000000131e9d: sbb eax, 0xb8000000; sbb eax, 0x5b000000; ret; 
0x000000000ea52b: sbb eax, 0xc18e4; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax; 
0x000000001327d7: sbb eax, 0xc6c0c; mov qword ptr [rip+0xc5bd9], 0x0; mov byte ptr [rip+0xc6c0c], 0x0; mov byte ptr [rip+0xc5beb], 0x0; call rbx; 
0x0000000010b03c: sbb eax, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010b0fc: sbb eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000cb756: sbb eax, 0xdf169; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx; 
0x0000000010bb82: sbb eax, 0xe1899; pop rbx; ret; 
0x0000000010bb6c: sbb eax, 0xe18af; pop rbx; ret; 
0x000000000829f6: sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret; 
0x00000000076722: sbb eax, 0xe8c48148; add [rax], al; add [rbx+0x5d], bl; ret; 
0x000000000b3d6b: sbb eax, 0xf6724; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35e7: sbb eax, 0xf6ea8; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b35be: sbb eax, 0xf6ed1; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b359e: sbb eax, 0xf6ef1; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3575: sbb eax, 0xf6f1a; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3550: sbb eax, 0xf6f3f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3532: sbb eax, 0xf6f5d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34b2: sbb eax, 0xf6f5d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3497: sbb eax, 0xf6f78; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3515: sbb eax, 0xf6f7a; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b34e5: sbb eax, 0xf6faa; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3462: sbb eax, 0xf6fad; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3436: sbb eax, 0xf6fd9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3420: sbb eax, 0xf6fef; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33fe: sbb eax, 0xf7011; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33d9: sbb eax, 0xf7036; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b33bc: sbb eax, 0xf7053; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3355: sbb eax, 0xf70ba; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2b17: sbb eax, 0xf7878; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ae2: sbb eax, 0xf78ad; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2ab6: sbb eax, 0xf78d9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2aa0: sbb eax, 0xf78ef; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a7e: sbb eax, 0xf7911; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a59: sbb eax, 0xf7936; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a3c: sbb eax, 0xf7953; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b29e4: sbb eax, 0xf79ab; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b232b: sbb eax, 0xf7f90; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2240: sbb eax, 0xf810b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b222b: sbb eax, 0xf8120; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b220c: sbb eax, 0xf813f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1757: sbb eax, 0xf8b64; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b172e: sbb eax, 0xf8b8d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b170e: sbb eax, 0xf8bad; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16e5: sbb eax, 0xf8bd6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16c0: sbb eax, 0xf8bfb; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b16a2: sbb eax, 0xf8c19; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1622: sbb eax, 0xf8c19; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1685: sbb eax, 0xf8c36; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1655: sbb eax, 0xf8c66; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1540: sbb eax, 0xf8cfb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b1512: sbb eax, 0xf8d29; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b14e9: sbb eax, 0xf8d52; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e67: sbb eax, 0xf9348; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e32: sbb eax, 0xf937d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e06: sbb eax, 0xf93a9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0df0: sbb eax, 0xf93bf; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dce: sbb eax, 0xf93e1; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0da9: sbb eax, 0xf9406; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d8c: sbb eax, 0xf9423; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d34: sbb eax, 0xf947b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0b0b: sbb eax, 0xf95d0; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a20: sbb eax, 0xf974b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0a0b: sbb eax, 0xf9760; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b09ec: sbb eax, 0xf977f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b00a7: sbb eax, 0xfa034; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b007e: sbb eax, 0xfa05d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b005e: sbb eax, 0xfa07d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0035: sbb eax, 0xfa0a6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0010: sbb eax, 0xfa0cb; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afff2: sbb eax, 0xfa0e9; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000aff72: sbb eax, 0xfa0e9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affd5: sbb eax, 0xfa106; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000affa5: sbb eax, 0xfa136; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afea0: sbb eax, 0xfa1bb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe72: sbb eax, 0xfa1e9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe49: sbb eax, 0xfa212; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af867: sbb eax, 0xfa774; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af832: sbb eax, 0xfa7a9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af806: sbb eax, 0xfa7d5; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7f0: sbb eax, 0xfa7eb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ce: sbb eax, 0xfa80d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a9: sbb eax, 0xfa832; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af78c: sbb eax, 0xfa84f; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af734: sbb eax, 0xfa8a7; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000fcd90: sbb eax, 0xffff03e9; jmp qword ptr [rsi+0x2e]; 
0x0000000013e965: sbb eax, 0xffffffff; add rsp, 0x8; ret; 
0x0000000016818c: sbb eax, 0xffffffff; ret; 
0x000000000af05d: sbb eax, 0xffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x00000000090a7d: sbb eax, [rax-0x80]; test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x00000000102bc1: sbb eax, [rax]; add [rax], al; syscall; 
0x000000000a82ee: sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000006e0a7: sbb eax, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x0000000006bc2a: sbb eax, [rax]; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x000000000cfe7e: sbb eax, [rax]; add [rcx], ch; ret; 
0x0000000003aa33: sbb eax, [rax]; add rax, 0x200; mov fs:[rdx], rax; ret; 
0x0000000002d675: sbb eax, [rax]; add rax, fs:[0x0]; ret; 
0x0000000003a9b3: sbb eax, [rax]; add rax, fs:[0x0]; ret; 
0x0000000002d148: sbb eax, [rax]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x000000000395f4: sbb eax, [rax]; lea rax, [rip+0x1b6303]; ret; 
0x0000000003a2d5: sbb eax, [rax]; mov [rax], rdx; ret; 
0x0000000002d8e5: sbb eax, [rax]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000037f7b: sbb eax, [rax]; mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x00000000039665: sbb eax, [rax]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret; 
0x0000000003a315: sbb eax, [rax]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret; 
0x00000000036ac5: sbb eax, [rax]; ret; 
0x0000000009bd34: sbb eax, [rbp+0x158d48c0]; mov ebx, 0x8d48000d; add eax, 0xdbb9b; cmove rax, rdx; ret; 
0x0000000008aac4: sbb eax, [rcx+rcx*4-0x20]; pop r12; ret; 
0x000000000435c9: sbb eax, [rcx]; add [rax], al; mov edi, ebp; call rax; 
0x000000001037a1: sbb eax, [rcx]; add [rax], al; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000010a1d1: sbb eax, [rcx]; add [rax], al; syscall; 
0x00000000158617: sbb eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000141ec6: sbb eax, eax; and eax, 0x2; sub eax, 0x1; add rsp, 0x18; ret; 
0x000000000507b6: sbb eax, eax; and eax, 0x2; sub eax, 0x1; ret; 
0x00000000090b02: sbb eax, eax; or eax, 0x1; ret; 
0x000000001228fb: sbb eax, eax; ret; 
0x0000000017dd05: sbb eax, eax; sbb eax, 0xffffffff; ret; 
0x0000000002d4a4: sbb ebx, [rax]; add [rdi], cl; xchg ebp, eax; ret; 
0x0000000002d404: sbb ebx, [rax]; add bl, al; nop [rax+rax]; lea rax, [rip+0x183a80]; ret; 
0x00000000044444: sbb ebx, [rbx+0x5d]; ret; 
0x00000000103f7d: sbb ebx, ebp; cmp [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret; 
0x000000000fa8e0: sbb ebx, esi; dec dword ptr [rax-0x77]; ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15]; 
0x00000000108b7f: sbb ebx, esi; jmp qword ptr [rsi+0x2e]; 
0x000000000fc35c: sbb ecx, [rax+0x63]; imul al; ret far; 
0x000000000b0439: sbb ecx, [rax-0x73]; jg short 0x00000000000b0459; jne 0x00000000000b0980; ret; 
0x000000000b1b9d: sbb ecx, [rax-0x73]; jg short 0x00000000000b1bbd; jne 0x00000000000b21a0; ret; 
0x00000000052084: sbb ecx, [rax-0x7b]; shl byte ptr [rbp+0x26], cl; mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x0000000017e214: sbb ecx, [rbx+0x463bf847]; clc; jne 0x000000000017e320; ret; 
0x000000000fb264: sbb ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000014b26d: sbb ecx, [rdx]; add [rbx+rax*4+0x3a], ah; sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x0000000010b27c: sbb ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000010b2d4: sbb ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000d91e4: sbb ecx, ebp; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000ee314: sbb ecx, ebp; jbe short 0x00000000000ee2e0; cli; jmp qword ptr [rsi+0xf]; 
0x0000000009a9c0: sbb ecx, edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000051ef1: sbb edx, ebx; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000007c9cd: sbb esi, 0x6; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90]; 
0x0000000015b421: sbb esi, ebp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000d8bb4: sbb esi, esi; jmp qword ptr [rsi+0xf]; 
0x0000000008e913: sbb esi, esi; xor r10d, r10d; and esi, 0x80; add esi, 0x1; syscall; 
0x000000000d91e7: sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x00000000051eef: sbb r10, r11; mov [rdi+0x8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000003d74a: sbb r10b, [rdi]; add cl, ch; ret; 
0x000000000586b5: sbb r8b, [eax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000000586b6: sbb r8b, [rax]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x0000000016818b: sbb rax, 0xffffffffffffffff; ret; 
0x000000000af05c: sbb rax, 0xffffffffffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x00000000037f7a: sbb rax, [r8]; mov rax, [rax+rbx*8]; test rax, rax; je short 0x0000000000037f88; call rax; 
0x000000000fb2c3: sbb rcx, [r15]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000172adf: scasb [rdi]; adc [rax], al; add [rbp-0x77], cl; ret far; 
0x000000001727df: scasb [rdi]; adc eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000001739df: scasb [rdi]; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000001736df: scasb [rdi]; add al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000001927de: scasb [rdi]; add dh, bh; jmp qword ptr [rsi+0xf]; 
0x000000001730df: scasb [rdi]; or al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000095fee: scasb [rdi]; or bh, bh; jmp qword ptr [rsi+0xf]; 
0x00000000172ddf: scasb [rdi]; or eax, 0x894d0000; ret far; 
0x00000000044056: scasb [rdi]; ret; 
0x0000000004098e: scasb [rdi]; xchg [rdi], edx; add bl, dh; mulps xmm0, [rip+0x1790ea]; ret; 
0x0000000004b5e1: scasd [rdi]; adc eax, [rax]; add [rax-0x80], al; jmp qword ptr [rbp+0xf]; 
0x00000000102efd: scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret; 
0x00000000139988: scasd [rdi]; add [rax], al; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x000000001386dd: scasd [rdi]; mov ch, 0xff; jmp qword ptr [rsi+0x66]; 
0x000000000c7fda: scasd [rdi]; mov dword ptr [rcx-0x77], 0xe9143544; cmp dh, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000001171e8: scasd [rdi]; mov rax, r8; ret; 
0x00000000131ecb: scasd [rdi]; or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0x16; ret; 
0x0000000013ff03: scasd [rdi]; out dx, eax; jmp qword ptr [rsi+0x2e]; 
0x0000000006836e: scasd [rdi]; ret; 
0x00000000086b57: scasd [rdi]; ror dword ptr [rax-0x73], 0x84; adc [rax], al; add [rax], al; ret; 
0x000000000422fd: scasd [rdi]; sti; add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000007f5d1: scasd [rdi]; sti; jmp qword ptr [rsi+0x66]; 
0x0000000010c085: seta al; movzx eax, al; neg eax; ret; 
0x000000000fb41b: seta al; movzx eax, al; sbb eax, 0x0; ret; 
0x00000000086110: setae al; ret; 
0x000000000c9bfb: setb al; add eax, 0x16d; ret; 
0x0000000010c9d2: setbe al; mov eax, r8d; ret; 
0x0000000010c9d1: setbe r8b; mov eax, r8d; ret; 
0x0000000005c102: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000145c58: sete al; add rsp, 0x18; movzx eax, al; ret; 
0x0000000013c200: sete al; add rsp, 0x30; pop rbx; ret; 
0x000000000fb23e: sete al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000145dc3: sete al; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000009196b: sete al; add rsp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x0000000009303e: sete al; add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000004d862: sete al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001314c8: sete al; add rsp, 0x8; ret; 
0x000000000d923f: sete al; add rsp, 0x98; ret; 
0x000000000d863b: sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x000000000d863a: sete al; movzx eax, al; lea rax, [rax+rax-0x1]; ret; 
0x0000000012c6fd: sete al; movzx eax, al; ret; 
0x0000000009190a: sete al; movzx eax, al; sub eax, 0x2; add rsp, 0x8; ret; 
0x00000000087e2f: sete al; neg eax; ret; 
0x0000000003a805: sete al; ret; 
0x00000000193022: sete al; test al, al; jne short 0x0000000000193030; pop rbp; ret; 
0x000000000411a2: sete dh; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x0000000014d09d: sete dl; mov [rbx], edx; pop rbx; ret; 
0x00000000145dc2: sete r8b; add rsp, 0x8; mov eax, r8d; ret; 
0x000000000411a1: sete sil; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x000000000c4778: setg al; movzx eax, al; lea eax, [rax+rax-0x1]; ret; 
0x00000000177dea: setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x00000000177aec: setg dl; lea eax, [rdx+rdx-0x1]; vzeroupper; ret; 
0x0000000018be07: setl al; neg eax; or eax, 0x1; ret; 
0x00000000178111: setl al; neg eax; or eax, 0x1; vzeroupper; ret; 
0x000000000f836b: setl al; ret; 
0x0000000010922c: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000085c33: setne al; add rsp, 0x28; movzx eax, al; neg eax; ret; 
0x00000000141bc2: setne al; add rsp, 0x78; ret; 
0x0000000002d8d1: setne al; add rsp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000010192f: setne al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000005bc17: setne al; add rsp, 0x98; neg eax; ret; 
0x000000000f11f8: setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000008ee01: setne al; mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x00000000144e9b: setne al; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x0000000007fb2b: setne al; mov eax, r8d; ret; 
0x0000000005c134: setne al; movzx eax, al; neg eax; pop rbp; ret; 
0x00000000082a2d: setne al; movzx eax, al; neg eax; ret; 
0x00000000041c88: setne al; movzx eax, al; ret; 
0x00000000141b60: setne al; neg eax; add rsp, 0x18; ret; 
0x000000000d85cc: setne al; ret; 
0x000000000a12f2: setne dl; test cl, dl; jne short 0x00000000000a12d8; mov rax, r8; ret; 
0x000000000a1421: setne dl; test cl, dl; jne short 0x00000000000a1408; mov rax, r8; ret; 
0x0000000007fb2a: setne r8b; mov eax, r8d; ret; 
0x00000000156e03: sfence; lea r11, [rip+0x63232]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156c4e: sfence; lea r11, [rip+0x633e8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015433f: sfence; lea r11, [rip+0x65b36]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000154266: sfence; lea r11, [rip+0x65c10]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b506d: sgdt [rax]; cmovne rax, rdx; ret; 
0x00000000115e8c: shl ah, 0x1; add eax, [rax]; lea rdx, [rip+0x43b39]; cmovne rax, rdx; ret; 
0x00000000109141: shl bh, 0x1; dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop r12; ret; 
0x00000000100370: shl bh, 0xd8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000141b62: shl bh, 0xd8; add rsp, 0x18; ret; 
0x00000000141e7e: shl bh, 0xd8; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000009220c: shl bh, 0xd8; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000018be09: shl bh, 0xd8; or eax, 0x1; ret; 
0x00000000178113: shl bh, 0xd8; or eax, 0x1; vzeroupper; ret; 
0x0000000005c139: shl bh, 0xd8; pop rbp; ret; 
0x0000000002d8da: shl bh, 0xd8; ret; 
0x0000000018c463: shl bl, 0x1; bsf eax, eax; add rax, rdi; ret; 
0x000000001899e1: shl bl, 0x1; bsf rax, rax; add rax, rdi; ret; 
0x000000000b4bf7: shl bl, 0x1; movq [rax+rdx-0x20], mm0; movdqu [rax+rdx-0x10], xmm0; rep ret; 
0x00000000189a00: shl bl, 0x48; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b887: shl bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d96c: shl bl, 0xf; mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x00000000170614: shl byte ptr [rax+0x48], 0x1; clc; ret; 
0x0000000017064d: shl byte ptr [rax+0x48], 0x1; clc; vzeroupper; ret; 
0x000000000db667: shl byte ptr [rax+0x48], 0x8d; add al, 0xeb; test [rbx-0x7cb7f3ad], cl; ret; 
0x000000001880e2: shl byte ptr [rax+0xf], 0x8c; ret far; 
0x00000000177e85: shl byte ptr [rax+rbx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000001008bd: shl byte ptr [rax+rbx+0x48], 0x89; add eax, 0xf5619; mov eax, 0x1; add rsp, 0x8; ret; 
0x00000000139170: shl byte ptr [rax+rcx*2+0x49], 0x8b; cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10]; 
0x0000000003a779: shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret; 
0x00000000185d55: shl byte ptr [rax+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000144a55: shl byte ptr [rax+rcx+0x31], 0xc0; add rsp, 0x10; pop rbp; ret; 
0x0000000018d005: shl byte ptr [rax+rdi*2-0x77], cl; ror byte ptr [rax-0x77], 0x1; test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000013b3df: shl byte ptr [rax+rdx+0x48], 0x8b; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax]; 
0x0000000013cced: shl byte ptr [rax+rdx+0x48], cl; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000787cd: shl byte ptr [rax+rdx+0x4c], 0x89; loopne 0x0000000000078831; pop r12; pop r13; ret; 
0x000000000f91ad: shl byte ptr [rax+rsi+0x31], 0xd2; call rax; 
0x00000000186eb4: shl byte ptr [rax], 0x48; add eax, edi; ret; 
0x000000001705f4: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000017c301: shl byte ptr [rbp+0x10], 0x66; nop [rax+rax]; nop; xor rax, rax; ret; 
0x000000000f7f8c: shl byte ptr [rbp+0x11], 0xb8; adc [rax], eax; add [rax], al; syscall; 
0x0000000010935c: shl byte ptr [rbp+0x11], 0xb8; adc al, 0x1; add [rax], al; syscall; 
0x000000000f803c: shl byte ptr [rbp+0x11], 0xb8; adc al, [rax]; add [rax], al; syscall; 
0x000000001094bc: shl byte ptr [rbp+0x11], 0xb8; adc eax, [rcx]; add [rax], al; syscall; 
0x0000000010ad0c: shl byte ptr [rbp+0x11], 0xb8; and [rcx], al; add [rax], al; syscall; 
0x000000000d229c: shl byte ptr [rbp+0x11], 0xb8; out 0x0, al; add [rax], al; syscall; 
0x0000000010a96c: shl byte ptr [rbp+0x11], 0xb8; sub al, 0x0; add [rax], al; syscall; 
0x0000000010adbc: shl byte ptr [rbp+0x11], 0xb8; sub eax, [rcx]; add [rax], al; syscall; 
0x0000000010ae6c: shl byte ptr [rbp+0x11], 0xb8; xor eax, [rcx]; add [rax], al; syscall; 
0x0000000008e30b: shl byte ptr [rbp+0x12], cl; mov dword ptr [rdi], 0x0; xor eax, eax; add rsp, 0x18; ret; 
0x000000000ff2f9: shl byte ptr [rbp+0x14], 0xb8; adc al, 0x0; add [rax], al; syscall; 
0x000000000ff259: shl byte ptr [rbp+0x14], 0xb8; adc eax, [rax]; add [rax], al; syscall; 
0x000000000f9d39: shl byte ptr [rbp+0x14], 0xb8; add [rax], eax; add [rax], al; syscall; 
0x000000000fa359: shl byte ptr [rbp+0x14], 0xb8; add eax, [rax]; add [rax], al; syscall; 
0x000000000d69b9: shl byte ptr [rbp+0x14], 0xb8; and al, [rax]; add [rax], al; syscall; 
0x00000000102af9: shl byte ptr [rbp+0x14], 0xb8; sbb al, [rax]; add [rax], al; syscall; 
0x0000000010a489: shl byte ptr [rbp+0x14], 0xb8; sub al, [rax]; add [rax], al; syscall; 
0x0000000010a3b9: shl byte ptr [rbp+0x14], 0xb8; sub eax, [rax]; add [rax], al; syscall; 
0x00000000109579: shl byte ptr [rbp+0x14], 0xb8; xor [rcx], al; add [rax], al; syscall; 
0x00000000123108: shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret; 
0x000000000408b6: shl byte ptr [rbp+0x17], 0x1; and esi, 0x80000000; movss [rdi], xmm0; movd xmm0, esi; ret; 
0x000000001090cc: shl byte ptr [rbp+0x19], 0x41; mov ecx, 0x8; mov eax, 0x119; syscall; 
0x000000000ff39c: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0x127; syscall; 
0x000000000ff44c: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0x128; syscall; 
0x000000000d688c: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0xf7; syscall; 
0x0000000010a80c: shl byte ptr [rbp+0x19], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5ec: shl byte ptr [rbp+0x19], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000416b9: shl byte ptr [rbp+0x1c], 0xbe; or [rax], al; add [rax], al; mov eax, 0x82; syscall; 
0x00000000139715: shl byte ptr [rbp+0x20], 0x49; mov eax, [rsp+0x8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x000000000fdab8: shl byte ptr [rbp+0x25], 0x41; mov eax, 0x8; mov rdx, r13; mov eax, 0x10f; syscall; 
0x00000000052087: shl byte ptr [rbp+0x26], cl; mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000192205: shl byte ptr [rbp+0x29], cl; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000018d2a0: shl byte ptr [rbp+0x2d], 0xc5; std; xlat [rbx]; ret; 
0x0000000018d9bc: shl byte ptr [rbp+0x31], 0xc5; sti; xchg ebx, eax; ret; 
0x00000000170389: shl byte ptr [rbp+0x34], 0xc5; std; xlat [rbx]; ret; 
0x00000000187317: shl byte ptr [rbp+0x36], 0xc5; std; xlat [rbx]; ret; 
0x000000000fe3aa: shl byte ptr [rbp+0x3], 0x5d; ret; 
0x000000000fae93: shl byte ptr [rbp+0x3a], 0x48; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x0000000018dbf2: shl byte ptr [rbp+0x3b], 0xc5; sti; xchg ebx, eax; ret; 
0x0000000018de5f: shl byte ptr [rbp+0x3e], 0xc5; sti; xchg ebx, eax; ret; 
0x000000000f9b88: shl byte ptr [rbp+0x45], 0xb8; add [rcx], eax; add [rax], al; syscall; 
0x00000000041e84: shl byte ptr [rbp+0x49], 0x41; mov edx, 0x8; mov eax, 0x80; syscall; 
0x000000000928aa: shl byte ptr [rbp+0x4], cl; mov rax, [r8+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000b4b22: shl byte ptr [rbp+0x4], cl; mov rax, rdi; ret; 
0x000000000a4e22: shl byte ptr [rbp+0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret; 
0x00000000091ef1: shl byte ptr [rbp+0x4c], 0x81; ret far; 
0x00000000192003: shl byte ptr [rbp+0x4d], cl; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000017017d: shl byte ptr [rbp+0x60], 0xc5; std; xlat [rbx]; ret; 
0x0000000005bb77: shl byte ptr [rbp+0x6], 0x5b; ret; 
0x00000000052273: shl byte ptr [rbp+0x6a], cl; mov dword ptr [rsi], 0x0; mov eax, 0x2; ret; 
0x0000000016f49b: shl byte ptr [rbp+0x6a], cl; test esi, esi; je short 0x000000000016f480; xor eax, eax; ret; 
0x0000000014cdca: shl byte ptr [rbp+0x73], 0x48; mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x00000000192410: shl byte ptr [rbp+0x77], cl; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000193026: shl byte ptr [rbp+0x7], 0x5d; ret; 
0x0000000010d04e: shl byte ptr [rbp+0x7], cl; ret; 
0x00000000128c85: shl byte ptr [rbp+0x8], 0x5b; ret; 
0x000000000d6a44: shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x000000001155e4: shl byte ptr [rbp+0x9], 0x48; cmp dword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x0000000008c010: shl byte ptr [rbp+0x9], cl; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x0000000012423b: shl byte ptr [rbp+0xa], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000413d3: shl byte ptr [rbp+0xa], 0x5d; ret; 
0x000000000865f3: shl byte ptr [rbp+0xa], 0xf; add ebp, edx; xor eax, eax; ret; 
0x0000000010ce1b: shl byte ptr [rbp+0xa], cl; mov eax, r8d; ret; 
0x00000000138eb2: shl byte ptr [rbp+0xb], 0x31; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000003a35a: shl byte ptr [rbp+0xb], 0x44; mov eax, eax; ret; 
0x0000000004162a: shl byte ptr [rbp+0xb], 0x48; add esp, 0x8; ret; 
0x000000000f8f62: shl byte ptr [rbp+0xb], 0x48; mov eax, [rsp]; add rsp, 0x18; ret; 
0x00000000082a12: shl byte ptr [rbp+0xb], cl; xor eax, eax; ret; 
0x00000000145d91: shl byte ptr [rbp+0xc], cl; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000ca3b8: shl byte ptr [rbp+0xd], 0x4c; mov eax, eax; add rsp, 0x8; ret; 
0x00000000139995: shl byte ptr [rbp+0xf], 0x48; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000ea9d3: shl byte ptr [rbp+rax+0x48], 0x39; ret; 
0x00000000138e51: shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax; 
0x0000000013abc5: shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax; 
0x00000000183e10: shl byte ptr [rbp+rbp*2-0xd], 0xf; mov esp, 0x26de9c0; add [rax], al; xor eax, eax; ret; 
0x000000001743d0: shl byte ptr [rbp+rbp*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001144d0: shl byte ptr [rbp+rbp+0x48], 0x8b; jp short 0x0000000000114527; mov rsi, rdx; call rax; 
0x000000000c6340: shl byte ptr [rbp+rcx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x00000000187200: shl byte ptr [rbp+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000170290: shl byte ptr [rbp+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000014269d: shl byte ptr [rbp+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x000000001116e7: shl byte ptr [rbp+rdx+0x48], 0x83; ret; 
0x000000000c5f78: shl byte ptr [rbp+rdx-0x78], cl; rol dword ptr [rax+0x1e740fe1], 0x1; ret; 
0x00000000084ae5: shl byte ptr [rbp-0x10], 0xc3; add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret; 
0x0000000009284f: shl byte ptr [rbp-0x12], 0xc3; nop [rax+rax]; ret; 
0x000000000b53b7: shl byte ptr [rbp-0x12], cl; xor eax, eax; ret; 
0x0000000009a1d0: shl byte ptr [rbp-0x13], 0x31; rol bl, 0x66; nop [rax+rax]; mov eax, 0x1; ret; 
0x0000000007aab0: shl byte ptr [rbp-0x13], 0x4c; mov eax, eax; ret; 
0x000000000b40a0: shl byte ptr [rbp-0x13], cl; lea rax, [rcx-0x1]; ret; 
0x000000000a12b2: shl byte ptr [rbp-0x15], 0x1; mov rax, r8; ret; 
0x00000000092292: shl byte ptr [rbp-0x15], 0x48; mov [rdi+0x20], eax; mov [rsi+0x20], rdi; ret; 
0x0000000009f0a4: shl byte ptr [rbp-0x16], 0x40; or [rdi], dh; mov eax, r8d; ret; 
0x00000000133b04: shl byte ptr [rbp-0x17], 0x1; mov rax, r8; add rsp, 0x8; ret; 
0x000000000c5884: shl byte ptr [rbp-0x17], 0x45; xor eax, eax; mov eax, r8d; ret; 
0x00000000143256: shl byte ptr [rbp-0x19], 0x5b; ret; 
0x000000000f8447: shl byte ptr [rbp-0x1c], 0x8b; push rbx; add al, 0xeb; ret; 
0x0000000017844a: shl byte ptr [rbp-0x1d], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000000a30eb: shl byte ptr [rbp-0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000016f99c: shl byte ptr [rbp-0x1f], 0x29; enter 0xf8c5, 0x77; ret; 
0x00000000128a33: shl byte ptr [rbp-0x20], 0x44; mov eax, edx; ret; 
0x0000000017891f: shl byte ptr [rbp-0x22], 0x29; enter 0xf8c5, 0x77; ret; 
0x0000000016fe71: shl byte ptr [rbp-0x24], 0x29; enter 0xf8c5, 0x77; ret; 
0x000000000b5451: shl byte ptr [rbp-0x24], cl; ret; 
0x0000000003f5f0: shl byte ptr [rbp-0x27], cl; ret; 
0x00000000100966: shl byte ptr [rbp-0x29], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000001009c7: shl byte ptr [rbp-0x2a], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000097d37: shl byte ptr [rbp-0x34], 0xe9; ret; 
0x0000000014a1a6: shl byte ptr [rbp-0x35], 0x48; add esp, 0x10; xor eax, eax; pop rbp; ret; 
0x0000000005056d: shl byte ptr [rbp-0x40], 0x48; sub edx, 0x1; jne short 0x0000000000050558; mov eax, 0x1; ret; 
0x00000000050485: shl byte ptr [rbp-0x47], 0x48; sub edx, 0x1; jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x0000000018d51e: shl byte ptr [rbp-0x4d], 0x62; mov bl, 0x7d; and [rdi], bl; ret; 
0x0000000018613e: shl byte ptr [rbp-0x52], 0x62; mov bl, 0x7d; and [rsi], bh; ret; 
0x00000000177b50: shl byte ptr [rbp-0x53], 0xc5; std; xlat [rbx]; ret; 
0x00000000116317: shl byte ptr [rbp-0x59], 0x4c; mov eax, ecx; ret; 
0x000000001708b0: shl byte ptr [rbp-0x63], 0xc5; std; xlat [rbx]; ret; 
0x000000000f11ca: shl byte ptr [rbp-0x69], cl; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x0000000019229f: shl byte ptr [rbp-0x71], cl; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000009a28c: shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret; 
0x000000000b668c: shl byte ptr [rbp-0xf], cl; ret; 
0x00000000100cbc: shl byte ptr [rbx+0x148fff2], 0x1; ret; 
0x00000000084eec: shl byte ptr [rbx+0x21], 0x1; movzx eax, byte ptr [rax]; ret; 
0x000000000a139a: shl byte ptr [rbx+0x4c], 0x1; mov eax, eax; ret; 
0x00000000145854: shl byte ptr [rbx+0x9], 0x1; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000115566: shl byte ptr [rbx+0xf], 0x1; cmp [rax+0x8], rdi; jne short 0x0000000000115560; mov rax, [rax+0x30]; ret; 
0x000000000829f1: shl byte ptr [rbx+rax*4+0x7d], 0x0; sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret; 
0x00000000186f9a: shl byte ptr [rbx+rax*4+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; add rax, r8; ret; 
0x0000000014265a: shl byte ptr [rbx+rax+0x5b], 0x1; ret; 
0x0000000007cf42: shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x0000000018b692: shl byte ptr [rbx+rbp*2-0xd], 0xf; mov esp, 0xc031c3c0; ret; 
0x000000000d26a6: shl byte ptr [rbx+rbp+0x5b], 0x5d; pop r12; ret; 
0x00000000174242: shl byte ptr [rbx+rbx*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001702b6: shl byte ptr [rbx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000170042: shl byte ptr [rbx+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000009064a: shl byte ptr [rbx+rcx+0x31], 0xc0; add rsp, 0x8; ret; 
0x0000000013a5b2: shl byte ptr [rbx+rcx+0x31], 0xc0; ret; 
0x0000000014273a: shl byte ptr [rbx+rcx+0x48], 0x1; add eax, 0xa0; pop rbx; ret; 
0x000000001427aa: shl byte ptr [rbx+rcx+0x48], 0x1; add eax, 0xa8; pop rbx; ret; 
0x000000001426ca: shl byte ptr [rbx+rcx+0x48], 0x1; sub eax, 0xffffff80; pop rbx; ret; 
0x00000000101b91: shl byte ptr [rbx+rcx+0x48], 0x83; ror byte ptr [rax], 0x48; mov [rip+0xf4491], eax; mov rax, r8; ret; 
0x00000000133a92: shl byte ptr [rbx+rcx+0x48], 0xc7; add eax, 0xc8a48; add [rax], al; add [rax], al; ret; 
0x00000000105622: shl byte ptr [rbx+rcx+0x48], cl; cmp edi, edx; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x00000000085af3: shl byte ptr [rbx+rcx+0x4c], cl; mov edi, esi; call qword ptr [r12+0x358]; 
0x00000000122276: shl byte ptr [rbx+rcx-0x3a], 0x2; jmp far fword ptr [rax+0x2f850f02]; 
0x000000000d3358: shl byte ptr [rbx+rdi*2+0x4d], 0x85; in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12; 
0x00000000128662: shl byte ptr [rbx+rdi+0x48], 0x8b; add eax, 0xc47a4; mov dword ptr fs:[rax], 0x5a; mov eax, 0xffffffff; ret; 
0x0000000018d04e: shl byte ptr [rbx+rsi*4+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x000000000f912a: shl byte ptr [rbx+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax; 
0x0000000017935b: shl byte ptr [rcx+0x48], 0x1; clc; shr rax, 0x2; vzeroupper; ret; 
0x000000001745cb: shl byte ptr [rcx+0x48], 0x1; clc; vzeroupper; ret; 
0x0000000013b34c: shl byte ptr [rcx+rbp+0x48], cl; add esp, 0x10; pop rbx; ret; 
0x00000000187228: shl byte ptr [rcx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; ret; 
0x00000000043fec: shl byte ptr [rcx+rbx+0x48], 0x8b; adc [rbx+0x48], bl; mov dword ptr [rip+0x1ac401], 0x0; mov eax, [rax+0x58]; ret; 
0x0000000008e774: shl byte ptr [rcx+rbx+0x53], 0x48; mov ebx, edi; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000142635: shl byte ptr [rcx+rcx*8+0x64], 0x48; mov [rbx], eax; pop rbx; ret; 
0x0000000010b60d: shl byte ptr [rcx+rcx+0x1], cl; sar byte ptr [rax+0x14], cl; syscall; 
0x00000000077206: shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000011f4ae: shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xd7728; call rax; 
0x0000000013dbe2: shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax; 
0x00000000186f4c: shl byte ptr [rcx+rdx*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x0000000007563c: shl byte ptr [rcx+rdx+0x48], 0x8d; adc eax, 0x1330da; add rax, rdx; ret; 
0x000000000aa6dc: shl byte ptr [rcx+rdx+0x48], cl; bsf eax, edx; ret; 
0x000000000c611c: shl byte ptr [rcx+rdx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000584c4: shl byte ptr [rcx+rdx+0xf], cl; mov esi, 0x77cf39ca; loop 0x0000000000058513; mov eax, eax; ret; 
0x0000000014493c: shl byte ptr [rcx+rsi+0x48], cl; add esp, 0x10; pop rbx; ret; 
0x0000000015e9ad: shl byte ptr [rcx], 0x0; add [rbp-0x77], cl; ret far; 
0x00000000086109: shl byte ptr [rcx], 0x1; ror byte ptr [rax+0x39], 0xfa; setae al; ret; 
0x000000001792b1: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 0x2; vzeroupper; ret; 
0x00000000174546: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000018d0e3: shl byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x00000000185d23: shl byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x0000000002dd5a: shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x0000000018d6e9: shl byte ptr [rcx], 0xd2; cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000d6ebd: shl byte ptr [rcx], cl; idiv byte ptr [rdi+0x1200011]; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x0000000008b66f: shl byte ptr [rcx], cl; ror byte ptr [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000008e284: shl byte ptr [rcx], cl; sar byte ptr [rax+0xca], cl; syscall; 
0x00000000089994: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x80], cl; mov eax, r8d; syscall; 
0x0000000008c170: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x87], cl; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x0000000008da0f: shl byte ptr [rcx], cl; sar byte ptr [rsi+0x8], cl; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000084706: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58]; 
0x000000000f912e: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; call rax; 
0x000000000f9161: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall; 
0x0000000008c65c: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, r13d; syscall; 
0x00000000109c0c: shl byte ptr [rdi+0x49], cl; mov eax, ecx; mov eax, 0x1b3; syscall; 
0x000000000b4fee: shl byte ptr [rdi+0x4c], 0x89; loopne 0x00000000000b5050; pop rbp; pop r12; ret; 
0x000000000f4b93: shl byte ptr [rdi+0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x00000000139c11: shl byte ptr [rdi+rax*4+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000098561: shl byte ptr [rdi+rax+0x48], 0x89; adc eax, 0x15cc45; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x000000000d4dc9: shl byte ptr [rdi+rax-0x3a], 0x3; add [rax-0x7d], cl; ret; 
0x00000000129ae6: shl byte ptr [rdi+rbx+0x48], 0x83; ret; 
0x000000000a13ce: shl byte ptr [rdi+rcx+0x39], 0xf0; jne short 0x00000000000a13c0; mov rax, r8; ret; 
0x000000000772c6: shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000104416: shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret; 
0x00000000152869: shl byte ptr [rdx+0x14], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000013923b: shl byte ptr [rdx+0x48], 0x8b; and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x000000000aa8ab: shl byte ptr [rdx+0x48], cl; bsf eax, edx; ret; 
0x000000000c632b: shl byte ptr [rdx+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x00000000151f3b: shl byte ptr [rdx+0xd], 0x1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000018d073: shl byte ptr [rdx+rcx+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000091951: shl byte ptr [rdx+rcx-0x7d], 0xf8; or al, 0x75; mov eax, 0x3; add rsp, 0x8; ret; 
0x00000000091cfe: shl byte ptr [rdx+rcx-0x7d], 0xf8; or al, 0x75; sub [rax+0x3], edi; add rsp, 0x8; ret; 
0x00000000143983: shl byte ptr [rdx+rdi+0x48], 0x8b; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20]; 
0x000000000a519b: shl byte ptr [rdx+rdx*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x0000000014be4c: shl byte ptr [rdx+rdx+0x48], 0x8b; add eax, 0xa1072; call qword ptr [rax+0x360]; 
0x00000000139111: shl byte ptr [rdx], 0x0; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 0x1; mov rdi, rbp; call qword ptr [rax+0x18]; 
0x000000000fe73e: shl byte ptr [rip+0x410000], cl; cmp eax, 0x410000; je short 0x00000000000fe760; mov eax, 0x101; syscall; 
0x00000000083cf5: shl byte ptr [rsi+0x10], 0x48; mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000012c6d7: shl byte ptr [rsi+0x39], 0xd1; je short 0x000000000012c6e0; ret; 
0x00000000040728: shl byte ptr [rsi+0x48], 0x1; movd mm0, eax; ret; 
0x00000000040575: shl byte ptr [rsi+0x48], 0x1; movd mm1, eax; mov [rdi], rax; subsd xmm0, xmm1; ret; 
0x000000000aa476: shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x000000000867df: shl byte ptr [rsi+rax*2+0x45], 0x31; sar byte ptr [rdx+0x2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000012f9a6: shl byte ptr [rsi+rax+0x48], 0x39; js short 0x000000000012f9bd; jne short 0x000000000012f9a0; ret; 
0x000000001402cf: shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x000000000014033e; call rax; 
0x00000000140cbf: shl byte ptr [rsi+rax+0x48], 0x8d; jge short 0x0000000000140d1e; call rax; 
0x000000000d287f: shl byte ptr [rsi+rbp+0x48], 0x89; ret; 
0x0000000007727f: shl byte ptr [rsi+rbx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+0x8]; call rax; 
0x000000000d64aa: shl byte ptr [rsi+rbx+0xf], 0x1f; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x000000000df6a7: shl byte ptr [rsi+rcx+0x48], 0x89; or [r8+0x63], cl; add al, 0xeb; ret; 
0x00000000141f50: shl byte ptr [rsi+rcx+0x49], 0x8b; cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20]; 
0x000000000c60bf: shl byte ptr [rsi+rdi*2+0x48], cl; bsf eax, edx; shr rax, 0x2; ret; 
0x0000000016f357: shl byte ptr [rsi+rdx*8+0x48], cl; movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000001322d6: shl byte ptr [rsi+rdx+0x48], 0x8b; cmp eax, 0xca1e0; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax; 
0x000000000a4cd7: shl byte ptr [rsi+rdx+0xf], 0xbc; ror byte ptr [rax+0x1], 0xf8; add rax, rcx; ret; 
0x00000000173e77: shl byte ptr [rsi-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000001005f1: shl byte ptr [rsi], 0x64; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000139bf4: shl byte ptr [rsp+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x00000000170699: shl byte ptr [rsp+rax*8+0xf], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000087669: shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x000000000a12ae: shl byte ptr [rsp+rax+0x39], 0xd0; jne short 0x00000000000a12a0; mov rax, r8; ret; 
0x000000000a127a: shl byte ptr [rsp+rax+0x39], 0xf0; jne short 0x00000000000a1270; mov rax, r8; ret; 
0x00000000137e16: shl byte ptr [rsp+rax+0x48], 0x83; ret; 
0x0000000010135d: shl byte ptr [rsp+rax+0x48], 0x89; js short 0x000000000010136c; mov [rdi], rax; mov [rdi+0x8], rsi; ret; 
0x00000000043ca1: shl byte ptr [rsp+rbp*2+0x48], 0x89; sub [rax-0x77], cl; ret; 
0x0000000002fc99: shl byte ptr [rsp+rbp+0x48], 0x83; ret; 
0x00000000144d79: shl byte ptr [rsp+rcx+0x31], 0xc0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000001051a3: shl byte ptr [rsp+rdi+0x48], 0x39; ret; 
0x000000001390f5: shl byte ptr [rsp+rdi+0x48], 0x8b; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000128d49: shl byte ptr [rsp+rdx-0x7d], 0xe8; and [rbx*2-0x3fce128a], edi; ret; 
0x000000001144dd: shl dh, 0x43; sbb al, 0x20; je short 0x00000000001144f0; pop rbx; ret; 
0x000000000e090d: shl dh, 0x82; enter 0x0, 0x0; jne 0x00000000000e083d; ret; 
0x000000000406ac: shl dl, 0xf; pop rcx; add eax, 0x178d3b; ret; 
0x0000000016fd28: shl dword ptr [rax+0x49], 0x39; ret far; 
0x000000001000ab: shl dword ptr [rax-0x8], 0x1; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d684b: shl dword ptr [rbp+0x11], 0x0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f9644: shl dword ptr [rbp+0x31], 0x41; mov edx, ecx; mov eax, 0x103; syscall; 
0x0000000010ed7b: shl dword ptr [rbp+0x5c7fffe], 0x1; jmp rsi; 
0x0000000008df53: shl dword ptr [rbp+0x8], 0x1; test eax, eax; jne 0x000000000008e040; mov eax, 0x1; ret; 
0x000000000a11d4: shl dword ptr [rbp-0x17], 0x1; mov byte ptr [rdi], 0x0; mov [r8], rax; mov rax, r9; ret; 
0x000000000a1395: shl dword ptr [rbp-0x18], 0x1; cmp eax, r10d; je short 0x00000000000a1380; mov rax, r8; ret; 
0x000000000a1425: shl dword ptr [rbp-0x20], 0x1; mov rax, r8; ret; 
0x000000000a12f6: shl dword ptr [rbp-0x21], 0x1; mov rax, r8; ret; 
0x000000000e06e1: shl dword ptr [rbp-0x34], 0x44; mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret; 
0x00000000128632: shl dword ptr [rbx-0x4d], 0x1; mov byte ptr [r9], 0x0; ret; 
0x0000000010d059: shl dword ptr [rbx], 0x4e; adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret; 
0x00000000178489: shl dword ptr [rcx], 0x1; ror byte ptr [rbx+0xc3b170c], 0x16; jne 0x0000000000178111; vzeroupper; ret; 
0x000000000c4642: shl dword ptr [rcx], 0x1; shr cl, cl; cmpsb [rsi], [rdi]; fdivp st(7), st; jmp qword ptr [rsi+0xf]; 
0x000000000b9612: shl dword ptr [rcx], 0x1; shr cl, cl; cmpsb [rsi], [rdi]; loopne 0x00000000000b9618; jmp qword ptr [rsi+0xf]; 
0x0000000004d242: shl dword ptr [rcx], 0x1; shr cl, cl; loopne 0x000000000004d248; jmp qword ptr [rsi+0xf]; 
0x0000000003a633: shl dword ptr [rdi], 0x1b; add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000fe238: shl dword ptr [rdx+0x1d], 0x1; add rsp, 0x90; pop rbx; ret; 
0x0000000010983b: shl dword ptr [rip-0x2708fff2], 0x1; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000a4926: shl dword ptr [rsi+0xb], cl; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret; 
0x000000000aa472: shl dword ptr [rsi+0xf], 0xd7; shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x000000000b3e1b: shl dword ptr [rsi+0xf], 0xda; ret; 
0x000000000da7b6: shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf]; 
0x00000000085b37: shl dword ptr [rsi], 0x12; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000108a9b: shl eax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x000000001899dc: shl eax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000405f7: shl eax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000012348a: shl eax, 0x3; shr rax, 0x4; and eax, 0x7f; ret; 
0x0000000008b36f: shl eax, 0x4; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x000000000fbf37: shl eax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x0000000014cf87: shl eax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x0000000018c45f: shl eax, 0x8; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000041c83: shl eax, cl; and rax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000041c0b: shl eax, cl; or [rdi], rax; xor eax, eax; ret; 
0x000000000b4543: shl ebx, 0x1; movsb [rdi], [rsi]; ret; 
0x00000000128ba4: shl ebx, 0x1; movsq [rdi], [rsi]; add rsp, 0x188; ret; 
0x00000000066303: shl ebx, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000f015e: shl ebx, 0xff; xor r9d, r9d; add rsp, 0x8; mov eax, r9d; ret; 
0x0000000010f183: shl ecx, 0x1; jmp qword ptr [rsp+rax*2-0x77]; 
0x00000000188e01: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000050d4c: shl ecx, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cd7: shl ecx, cl; mov [rdi-0x8], r9; ret; 
0x00000000050ca6: shl ecx, cl; mov [rdi], r9; ret; 
0x000000000409f9: shl edi, 0x17; or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x17907e]; ret; 
0x0000000004096d: shl edi, 0x17; or esi, edi; movd xmm0, esi; ret; 
0x0000000008b10b: shl edi, 0x4; cmp [rdx+rdi], rsi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x000000000fe6a2: shl edi, 0xd8; ret; 
0x00000000043df6: shl edx, 0x20; or rax, rdx; ret; 
0x0000000006bb20: shl edx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x000000000aa25a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x00000000123338: shl edx, 0x4; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000123337: shl edx, 0x4; add edx, 0x8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000013c4d6: shl edx, 0x4; xor rax, rdx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x000000000520c3: shl edx, cl; mov [rdi], rdx; mov [rsi], eax; mov eax, 0x1; ret; 
0x0000000014cff4: shl edx, cl; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000001196a9: shl esi, 0x1; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000521d8: shl esi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000001234bf: shl esi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x00000000129179: shl esi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000119519: shl esi, cl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000074fe3: shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000050d4b: shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cd6: shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000050ca5: shl r9, cl; mov [rdi], r9; ret; 
0x00000000108a9a: shl rax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x000000001899db: shl rax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000405f6: shl rax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000008b36e: shl rax, 0x4; mov [r8+rax+0x8], rsi; xor eax, eax; mov [rdi], ecx; ret; 
0x000000000fbf36: shl rax, 0x4; mov edx, [rdx+rax]; call qword ptr [rsp+0x50]; 
0x0000000014cf86: shl rax, 0x5; lea rax, [rax+rdx+0x4]; ret; 
0x00000000041c82: shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret; 
0x00000000041c0a: shl rax, cl; or [rdi], rax; xor eax, eax; ret; 
0x00000000188e00: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x0000000008b10a: shl rdi, 0x4; cmp [rdx+rdi], rsi; jne short 0x000000000008b150; mov rax, r8; ret; 
0x00000000043df5: shl rdx, 0x20; or rax, rdx; ret; 
0x0000000006bb1e: shl rdx, 0x2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8]; 
0x000000000aa259: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret; 
0x0000000013c4d5: shl rdx, 0x4; xor rax, rdx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x000000000520c2: shl rdx, cl; mov [rdi], rdx; mov [rsi], eax; mov eax, 0x1; ret; 
0x0000000014cff3: shl rdx, cl; or [rdi+rax*8], rdx; xor eax, eax; ret; 
0x000000000521d7: shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000001234be: shl rsi, 0x4; lea r8, [rdi+rsi+0x8]; mov rax, r8; ret; 
0x00000000129178: shl rsi, 0x4; lea rax, [rdi+rsi+0x14]; ret; 
0x00000000050d44: shld eax, ecx, cl; mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050cd0: shld eax, ecx, cl; mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x00000000050d43: shld r8, r9, cl; mov [rdi-0x8], r8; shl r9, cl; mov [rdi-0x10], r9; ret; 
0x00000000050ccf: shld r8, r9, cl; mov [rdi], r8; shl r9, cl; mov [rdi-0x8], r9; ret; 
0x0000000011d5ca: shr al, 0x70; ret far; 
0x00000000117e21: shr al, 0x79; xor al, 0xf4; call far fword ptr [rax+0x4c]; 
0x0000000011d74f: shr al, 0x7b; fdivr st(3), st; call far fword ptr [rsi+0x5f]; 
0x000000000c46db: shr al, cl; jmp qword ptr [rdi+rdi*8]; 
0x000000001155c6: shr ax, 0xe; and eax, 0x1; ret; 
0x00000000138f1e: shr bl, 0x96; nop [rax+rax]; nop [rax+rax]; ret; 
0x000000000c74a9: shr bl, 0xe4; nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret; 
0x000000000c7389: shr bl, 0xe4; nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret; 
0x000000000fa07a: shr bl, 0xe4; nop [rax]; mov edx, r12d; mov eax, 0x10d; syscall; 
0x000000001298a4: shr bl, cl; xchg ecx, eax; nop [rax+rax]; ret; 
0x000000000a30ef: shr byte ptr [rcx], 0xc8; ret; 
0x00000000170a0f: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x00000000174263: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000174273: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000174283: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000174253: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x000000001898f3: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x20]; ret; 
0x00000000189903: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x40]; ret; 
0x00000000189913: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x60]; ret; 
0x00000000189923: shr byte ptr [rcx], 0xd7; lea eax, [rdi+rax+0x80]; ret; 
0x0000000018c383: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c393: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a3: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c373: shr byte ptr [rcx], 0xd7; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000000a534b: shr byte ptr [rcx], cl; rol bl, 0x1; nop; xor eax, eax; ret; 
0x000000000b5c8a: shr byte ptr [rdx+0x1], cl; lea r9, [rsp+0x20]; call rbx; 
0x000000000b5ac5: shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x20]; call r13; 
0x00000000097666: shr byte ptr [rsi+0x48], 0x81; stc; jmp far fword ptr [rdi+0x2f760000]; 
0x0000000013a2c8: shr cl, 0x1; cmp esi, 0xffffffff; jmp qword ptr [rsi-0x70]; 
0x00000000062791: shr cl, 0x1; cmpsb [rsi], [rdi]; mov cl, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001173a8: shr cl, 0x22; xor dh, dh; jmp qword ptr [rsi-0x70]; 
0x0000000014b23d: shr cl, 0xad; out 0xfa, eax; jmp qword ptr [rsi+0x2e]; 
0x00000000125c28: shr cl, 0xbe; idiv bh; jmp qword ptr [rsi-0x70]; 
0x000000000c4644: shr cl, cl; cmpsb [rsi], [rdi]; fdivp st(7), st; jmp qword ptr [rsi+0xf]; 
0x000000000b9614: shr cl, cl; cmpsb [rsi], [rdi]; loopne 0x00000000000b9618; jmp qword ptr [rsi+0xf]; 
0x00000000085674: shr cl, cl; data16 push 0xc; nop [rax+rax]; mov rax, [rax+0x370]; jmp qword ptr [rax+0x28]; 
0x0000000004d244: shr cl, cl; loopne 0x000000000004d248; jmp qword ptr [rsi+0xf]; 
0x000000000904e0: shr cl, cl; mov edx, 0x66ffffac; nop [rax+rax]; mov eax, 0x10; ret; 
0x0000000014bd55: shr dword ptr [rax-0x1], 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000192ebb: shr dword ptr [rax], 0x6; add [rbx+0x1c7f01f8], al; pop rbx; ret; 
0x000000000ca4e9: shr dword ptr [rcx], 0x1; enter 0x4789, 0x18; ret; 
0x000000000b35bf: shr dword ptr [rsi+0xf], 0x1; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000117dc3: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000008c029: shr eax, 0x13; mov [rsi], eax; xor eax, eax; ret; 
0x00000000117dd2: shr eax, 0x18; ret; 
0x000000000423dd: shr eax, 0x1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x0000000008e492: shr eax, 0x1f; mov [rsi], eax; xor eax, eax; ret; 
0x0000000004019b: shr eax, 0x1f; ret; 
0x0000000004017b: shr eax, 0x1f; shr ecx, 0x10; or eax, ecx; ret; 
0x00000000108a3d: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000017b87c: shr eax, 0x20; cmp ecx, eax; jne short 0x000000000017b886; xor eax, eax; ret; 
0x000000000449f1: shr eax, 0x20; mov [rdi+0x4], ax; xor eax, eax; ret; 
0x000000000888dd: shr eax, 0x2; cmp eax, 0x3; je short 0x00000000000888f0; ret; 
0x000000000c607a: shr eax, 0x2; ret; 
0x00000000178eed: shr eax, 0x2; vzeroupper; ret; 
0x00000000184b3e: shr eax, 0x2; xtest; je short 0x0000000000184b4a; vzeroall; ret; 
0x0000000018df96: shr eax, 0x38; ret; 
0x00000000088524: shr eax, 0x3; je short 0x0000000000088560; xor r10d, r10d; mov eax, r8d; syscall; 
0x00000000040e60: shr eax, 0x3a; rcl dword ptr [rax+rax], 0x1; add rsp, 0x10; pop rbx; ret; 
0x00000000040498: shr eax, 0x3f; ret; 
0x000000000806f2: shr eax, 0x4; and eax, 0x1; ret; 
0x0000000012348e: shr eax, 0x4; and eax, 0x7f; ret; 
0x0000000009488f: shr eax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x00000000080702: shr eax, 0x5; and eax, 0x1; ret; 
0x0000000008631d: shr eax, 0xb; and eax, 0x1; mov [rip+0x16a42b], eax; ret; 
0x00000000108a58: shr eax, 0xc; xor al, al; or eax, edx; ret; 
0x000000001155c7: shr eax, 0xe; and eax, 0x1; ret; 
0x0000000010c77b: shr eax, cl; and eax, 0x1; ret; 
0x0000000010973d: shr eax, cl; and eax, 0x3; ret; 
0x0000000010c9b9: shr eax, cl; and r8d, 0x1; mov eax, r8d; ret; 
0x00000000082a23: shr eax, cl; jrcxz 0x0000000000082a27; dec dword ptr [rax+0x39]; ret; 
0x0000000007bdeb: shr ebp, 0xff; call qword ptr [rax-0x48]; 
0x000000000422f9: shr ebx, 0x1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000012b115: shr ebx, 0x1; lodsd [rsi]; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000017edef: shr ebx, 0x3a; xor eax, eax; ret; 
0x0000000004469f: shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x0000000004017e: shr ecx, 0x10; or eax, ecx; ret; 
0x0000000014bce1: shr ecx, 0x3; rep movsq [rdi], [rsi]; ret; 
0x000000000f84e8: shr ecx, 0x3; rep stosq [rdi]; ret; 
0x000000001916b0: shr ecx, 0x7a; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x00000000116cf7: shr ecx, 0xe3; cmp bh, bh; call qword ptr [rax-0x18]; 
0x00000000050e5c: shr ecx, cl; mov [rdi+0x10], r9; ret; 
0x00000000050de1: shr ecx, cl; mov [rdi+0x8], r9; ret; 
0x00000000050db0: shr ecx, cl; mov [rdi], r9; ret; 
0x0000000004dff5: shr edi, 0x6; jne short 0x000000000004dfe0; lea rax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000014543c: shr edx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144c13: shr edx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000131b9e: shr edx, 0x3; add rax, rcx; jmp rax; 
0x00000000128ba0: shr edx, 0x3; mov ecx, edx; rep movsq [rdi], [rsi]; add rsp, 0x188; ret; 
0x0000000007e348: shr edx, 0x4; mov eax, edx; and eax, 0x1; ret; 
0x0000000007e408: shr edx, 0x5; mov eax, edx; and eax, 0x1; ret; 
0x000000000c4aa5: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac5: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae5: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b05: shr esi, 0x2; sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x00000000122f55: shr esi, 0x3; mov eax, 0x2; sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x0000000012b114: shr r11, 0x1; lodsd [rsi]; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000010c9b8: shr r8d, cl; and r8d, 0x1; mov eax, r8d; ret; 
0x00000000050e5b: shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000050de0: shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000050daf: shr r9, cl; mov [rdi], r9; ret; 
0x000000000423dc: shr rax, 0x1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x00000000108a3c: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000017b87b: shr rax, 0x20; cmp ecx, eax; jne short 0x000000000017b886; xor eax, eax; ret; 
0x000000000449f0: shr rax, 0x20; mov [rdi+0x4], ax; xor eax, eax; ret; 
0x000000000c6079: shr rax, 0x2; ret; 
0x00000000179031: shr rax, 0x2; vzeroupper; ret; 
0x0000000018df95: shr rax, 0x38; ret; 
0x00000000040497: shr rax, 0x3f; ret; 
0x0000000012348d: shr rax, 0x4; and eax, 0x7f; ret; 
0x0000000009488e: shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x00000000108a57: shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000422f8: shr rbx, 0x1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14; 
0x0000000017edee: shr rbx, 0x3a; xor eax, eax; ret; 
0x0000000004dff4: shr rdi, 0x6; jne short 0x000000000004dfe0; lea rax, [rip+0x1a259f]; mov byte ptr [rax+rdx], 0x0; ret; 
0x0000000014543b: shr rdx, 0x20; mov [rsp+0x8], edx; call qword ptr [rax+0x48]; 
0x00000000144c12: shr rdx, 0x20; mov [rsp], rdx; call qword ptr [rax+0x8]; 
0x00000000131b9d: shr rdx, 0x3; add rax, rcx; jmp rax; 
0x00000000050e54: shrd eax, ecx, cl; mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000050dda: shrd eax, ecx, cl; mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x00000000050e53: shrd r8, r9, cl; mov [rdi+0x8], r8; shr r9, cl; mov [rdi+0x10], r9; ret; 
0x00000000050dd8: shrd r8, r9, cl; mov [rdi], r8; shr r9, cl; mov [rdi+0x8], r9; ret; 
0x000000001876f5: shufps xmm0, [rdi+0x2], 0x0; lea rax, [rdi+0x2]; ret; 
0x000000001766e5: shufps xmm0, [rdi+0x2], 0x0; lea rax, [rdi+0x2]; vzeroupper; ret; 
0x000000001888d5: shufps xmm0, [rdi+0x2], 0x0; ret; 
0x0000000018b1a5: shufps xmm0, [rdi+0x2], 0x0; sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x00000000174c55: shufps xmm0, [rdi+0x2], 0x0; vzeroupper; ret; 
0x00000000108a43: sldt [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000008e407: sldt [rax]; je short 0x000000000008e418; mov [rsi], eax; xor eax, eax; ret; 
0x000000000fae90: sldt [rbp+0x483a75c0]; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x00000000102713: sldt [rbx+0x167f01f8]; pop rbp; pop r12; pop r13; ret; 
0x00000000102786: sldt [rbx+0x337f01f8]; pop rbp; ret; 
0x0000000010057a: sldt [rbx]; and al, 0x38; add rsp, 0x48; ret; 
0x0000000010329e: sldt [rcx+0x5c]; pop r13; ret; 
0x0000000010329f: sldt [rcx+0x5c]; pop r13; ret; 
0x00000000059d0b: stc; adc eax, 0x358d4c00; call far fword ptr [rcx+0x15]; 
0x0000000008b353: stc; add [rax+rax], al; add [rbp-0x1e], dh; mov eax, 0xb; ret; 
0x0000000012dafe: stc; add [rax-0x77], ecx; ret far; 
0x0000000016b627: stc; add [rax], al; add [rbp-0x77], cl; ret far; 
0x000000001099b0: stc; add [rdi+0x2c], esi; mov eax, 0x106; syscall; 
0x000000000d0999: stc; add ch, [rcx]; ret far; 
0x0000000015adf7: stc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000f84e1: stc; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000014a4e5: stc; add esi, [rsi+0x7]; ret; 
0x0000000004dfad: stc; and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret; 
0x0000000003a973: stc; and eax, 0x6348001b; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000113e22: stc; bnd jmp qword ptr [rsi+0x66]; 
0x0000000009c1fc: stc; call far fword ptr [rbp+0x31]; 
0x0000000009a80a: stc; call far fword ptr [rbx+0x44]; 
0x0000000009a24a: stc; call far fword ptr [rbx+0x5d]; 
0x000000000c7cc2: stc; call far fword ptr [rcx+0x5e]; 
0x0000000009adb3: stc; call far fword ptr [rdx+0x31]; 
0x000000000c7bef: stc; call far fword ptr [rdx+0x59]; 
0x000000001177fc: stc; call qword ptr [rax-0x18]; 
0x00000000131f62: stc; call rbp; 
0x000000000b6548: stc; call rbx; 
0x00000000050819: stc; clc; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x000000000d6837: stc; cli; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x00000000109013: stc; cmp eax, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000011728c: stc; dec dword ptr [rax-0x73]; adc eax, 0x605ab; cmove rax, rdx; ret; 
0x00000000115ffb: stc; dec dword ptr [rax-0x73]; add eax, 0xfff9e4cc; cmove rax, rdx; ret; 
0x00000000115edb: stc; dec dword ptr [rax-0x73]; add eax, 0xfff9e60c; cmove rax, rdx; ret; 
0x00000000115dbb: stc; dec dword ptr [rax-0x73]; add eax, 0xfff9e72c; cmove rax, rdx; ret; 
0x000000001160b7: stc; dec dword ptr [rax-0x73]; add eax, 0xfff9ea00; cmovne rax, rdx; ret; 
0x000000000946d1: stc; dec dword ptr [rax-0x77]; out dx, eax; call rbx; 
0x00000000090cc7: stc; dec dword ptr [rax-0x77]; ret; 
0x000000000b73c3: stc; dec dword ptr [rax-0x7d]; ret; 
0x00000000092e4c: stc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x00000000074fab: stc; in al, 0xff; call qword ptr [rax+0x2444894c]; 
0x000000001285dc: stc; inc dword ptr [rax]; add [rax], al; jg short 0x00000000001285e8; ret; 
0x000000001526bc: stc; jb short 0x00000000001526c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015276c: stc; jb short 0x0000000000152777; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015508c: stc; jb short 0x0000000000155097; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015513c: stc; jb short 0x0000000000155147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000170c92: stc; je short 0x0000000000170c56; lea r10, [r10+r9]; jmp r10; 
0x00000000172322: stc; je short 0x00000000001722e6; lea r10, [r10+r9]; jmp r10; 
0x00000000128acf: stc; jg short 0x0000000000128a8d; mov byte ptr [r8], 0x0; mov rax, r10; ret; 
0x00000000097657: stc; jmp far fword ptr [rcx]; 
0x0000000009766a: stc; jmp far fword ptr [rdi+0x2f760000]; 
0x0000000009973d: stc; jmp far fword ptr [rdi-0x78f10000]; 
0x0000000009a9c1: stc; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000000a10c1: stc; jmp qword ptr [rsi+0x2e]; 
0x000000000918b3: stc; jmp qword ptr [rsi+0x66]; 
0x000000000c1f05: stc; jmp qword ptr [rsi+0xf]; 
0x000000000a17e4: stc; jmp qword ptr [rsp+rax*2-0x77]; 
0x000000000389be: stc; jmp rcx; 
0x00000000072a43: stc; jrcxz 0x0000000000072a45; jmp qword ptr [rsi+0xf]; 
0x0000000018773f: stc; lea rax, [rdi+rdx]; ret; 
0x0000000017673f: stc; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000154198: stc; mov [rdi-0x4], ecx; ret; 
0x00000000187737: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; lea rax, [rdi+rdx]; ret; 
0x00000000188907: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; ret; 
0x00000000174c87: stc; mov [rdi], rcx; mov [rdi+rdx-0x7], r9; vzeroupper; ret; 
0x000000000ee143: stc; mov dword ptr [rsi], 0x0; mov qword ptr [rsi+0x10], 0x0; mov qword ptr [rsi+0x8], 0x0; ret; 
0x00000000154192: stc; mov ecx, [rsi-0x4]; mov [rdi-0x7], edx; mov [rdi-0x4], ecx; ret; 
0x0000000007de93: stc; mov rdi, r14; xor r8d, r8d; call r12; 
0x0000000018913e: stc; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000018915e: stc; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x00000000150f57: stc; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000009ab63: stc; or rax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x0000000007a533: stc; paddd mm7, mm7; add rsp, 0xd8; ret; 
0x0000000018890f: stc; ret; 
0x0000000010c77a: stc; shr eax, cl; and eax, 0x1; ret; 
0x0000000017be64: stc; vmovups [rdi-0x200], zmm15; ret; 
0x00000000174c8f: stc; vzeroupper; ret; 
0x0000000019198a: std; add [rax], al; add [rcx-0x77], cl; ret; 
0x000000000d83c4: std; add [rax], al; cmove rax, rdx; ret; 
0x000000000d20fe: std; add al, [rax]; add [rax], al; syscall; 
0x0000000016d2bf: std; add dword ptr [rdx], 0x8a0c8b00; mov eax, [rdx+rax*4]; sub eax, ecx; ret; 
0x0000000015a977: std; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000179e2d: std; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000004f878: std; call far fword ptr [rbx+0x31]; 
0x00000000056e3d: std; call qword ptr [rax+0xb60f41]; 
0x0000000012f1a6: std; cmp eax, 0x61e80008; mov bl, 0xf0; call qword ptr [rax+0x53555441]; 
0x0000000004dd70: std; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x000000000fc9fe: std; dec dword ptr [rax-0x77]; ret; 
0x000000000fc9fd: std; dec dword ptr [rax-0x77]; ret; 
0x00000000054d8b: std; dec dword ptr [rcx-0x77]; ret; 
0x0000000004031d: std; fstp st(1), st; ret; 
0x000000000f8c44: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall; 
0x000000000f8d4f: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall; 
0x0000000015217c: std; jb short 0x0000000000152187; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015222c: std; jb short 0x0000000000152237; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154b4c: std; jb short 0x0000000000154b57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154bfc: std; jb short 0x0000000000154c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000003723c: std; je short 0x0000000000037258; pop rbx; ret; 
0x0000000017e721: std; jg short 0x000000000017e76e; jmp qword ptr [rdx-0x3f]; 
0x0000000005a37f: std; jmp qword ptr [rsi+0x2e]; 
0x00000000052c28: std; jmp qword ptr [rsi+0xf]; 
0x000000000fb9f9: std; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000018771b: std; lea rax, [rdi+rdx]; ret; 
0x0000000017671b: std; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000087a22: std; mov [rdi+0x8], eax; xor eax, eax; ret; 
0x00000000187717: std; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; ret; 
0x00000000176717: std; mov [rdi+rdx-0x3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x000000001888f7: std; mov [rdi+rdx-0x3], ecx; ret; 
0x00000000174c77: std; mov [rdi+rdx-0x3], ecx; vzeroupper; ret; 
0x000000001539bb: std; mov [rdi-0x2], cx; ret; 
0x000000001539b3: std; mov cx, [rsi-0x2]; mov [rdi-0x3], dx; mov [rdi-0x2], cx; ret; 
0x0000000014d064: std; or [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000894c0: std; or esi, eax; xor eax, eax; mov [rdi], esi; ret; 
0x000000000b44c8: std; rep movsb [rdi], [rsi]; cld; ret; 
0x0000000007ff4f: std; ret; 
0x0000000002d146: std; sbb eax, [rax]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x0000000002d147: std; sbb eax, [rax]; cmp [rdx+0xd8], rax; jne short 0x000000000002d117; ret; 
0x000000001867db: std; sub [rdi+0x49], bh; jmp qword ptr [rdx-0x3f]; 
0x00000000038e77: std; test rax, rax; je short 0x0000000000038e7f; call rax; 
0x00000000186764: std; vmovdqu64 [r11], ymm20; ret; 
0x0000000017e69d: std; vmovdqu64 [r11], zmm20; ret; 
0x00000000187143: std; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ece6: std; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017e58d: std; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x00000000186a29: std; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x00000000186654: std; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x0000000017e97e: std; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017bb94: std; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b95a: std; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017c082: std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x00000000174c7b: std; vzeroupper; ret; 
0x0000000016f723: std; xlat [rbx]; ret far; 
0x00000000170181: std; xlat [rbx]; ret; 
0x0000000017423e: std; xlat [rbx]; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000007966e: std; xor bh, bl; jmp qword ptr [rsi+0x2e]; 
0x000000000531f1: sti; adc eax, 0x80400000; jmp qword ptr [rbp+0xf]; 
0x000000000b4f71: sti; add [rax], al; cmove rax, rdx; ret; 
0x000000000b661d: sti; add [rax], al; cmovne rax, rdx; ret; 
0x000000000b6616: sti; add [rax], al; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x000000001683f1: sti; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000422fe: sti; add r15, [rsp]; mov rsi, r15; call r14; 
0x000000000771c9: sti; call far fword ptr [rbx+0x4c]; 
0x0000000007049c: sti; call far fword ptr [rbx+0x5d]; 
0x000000000799cd: sti; call qword ptr [rax+0x55415641]; 
0x0000000008a92b: sti; cli; jmp qword ptr [rsi-0x70]; 
0x000000000a1901: sti; cmp al, 0xfd; jmp qword ptr [rsi+0x2e]; 
0x000000000c8e0e: sti; dec dword ptr [rax+0x39]; ret; 
0x00000000074652: sti; dec dword ptr [rax-0x77]; ret; 
0x00000000077109: sti; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000001494c0: sti; dec dword ptr [rbx-0x1537b]; jmp qword ptr [rcx+rcx*4+0x3]; 
0x0000000019266d: sti; dec dword ptr [rcx-0x75]; jge short 0x0000000000192683; add rdi, rbx; call r12; 
0x0000000014bc61: sti; in al, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000001045cd: sti; jae short 0x0000000000104600; mov rsi, r12; mov rdi, r15; call r13; 
0x0000000015241c: sti; jb short 0x0000000000152427; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001524cc: sti; jb short 0x00000000001524d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154dec: sti; jb short 0x0000000000154df7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154e9c: sti; jb short 0x0000000000154ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000000d3e5a: sti; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000076a80: sti; jmp qword ptr [rsi+0x2e]; 
0x000000000789a2: sti; jmp qword ptr [rsi+0x2e]; 
0x0000000007bdd2: sti; jmp qword ptr [rsi+0x66]; 
0x00000000076f45: sti; jmp qword ptr [rsi+0xf]; 
0x0000000007c84c: sti; jmp qword ptr [rsi-0x70]; 
0x0000000013e719: sti; jmp qword ptr [rsi-0x7d]; 
0x0000000013d102: sti; jmp qword ptr [rsp+rax*2-0x77]; 
0x0000000003ee4e: sti; jmp r11; 
0x00000000153d98: sti; mov [rdi-0x4], ecx; ret; 
0x0000000004d758: sti; mov eax, 0x3e; sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x00000000153d92: sti; mov ecx, [rsi-0x4]; mov [rdi-0x5], edx; mov [rdi-0x4], ecx; ret; 
0x0000000008e77a: sti; mov rdi, [rdi+0x8]; call qword ptr [rbx]; 
0x00000000108abe: sti; mov rdi, rcx; sub rsp, 0x8; call rsi; 
0x0000000003a0f3: sti; or al, 0x75; ret; 
0x00000000040de8: sti; push rax; ret; 
0x00000000107911: sti; ret far; 
0x000000000dd147: sti; sbb cl, al; clc; sbb [rcx], bh; ret; 
0x0000000007b086: sti; test byte ptr [rdi], 0x2; jne short 0x000000000007b0f0; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000017be55: sti; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x00000000186d1e: sti; xchg ebx, eax; ret; 
0x0000000018613a: sti; xchg ebx, eax; rol byte ptr [rbp+0x62ae75c0], 0xb3; jge short 0x0000000000186165; ret; 
0x000000001871fc: sti; xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001860cb: sti; xchg ebx, eax; rol esp, 0xe2; push 0xb75c0f5; ret; 
0x00000000186dc5: sti; xchg ebx, eax; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x00000000187179: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1c: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x00000000087acb: sti; xor eax, eax; ret; 
0x0000000005c6be: stosb [rdi]; adc al, 0x0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000388c2: stosb [rdi]; add eax, 0x2e660000; nop [rax+rax]; ret; 
0x000000000d8ab6: stosb [rdi]; add rax, rdx; jmp rax; 
0x0000000008d562: stosb [rdi]; iretd; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000b4b34: stosb [rdi]; mov rax, rdx; ret; 
0x000000001778bb: stosb [rdi]; mov rax, rdx; vzeroupper; ret; 
0x0000000009ac04: stosb [rdi]; or eax, 0xc6f700; or [rax], al; add [rbp-0x4f], dh; ret; 
0x00000000059d0a: stosb [rdi]; stc; adc eax, 0x358d4c00; call far fword ptr [rcx+0x15]; 
0x000000000918b2: stosb [rdi]; stc; jmp qword ptr [rsi+0x66]; 
0x000000001785ca: stosb [rdi]; vzeroupper; ret; 
0x000000000d226c: stosd [rdi]; adc [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000009c151: stosd [rdi]; add ecx, [rax+rax]; cmovne rax, rdx; ret; 
0x00000000097ecd: stosd [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x000000000aa954: stosd [rdi]; fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000ff9fe: stosd [rdi]; jmp qword ptr [rsi+0x2e]; 
0x000000001233a0: stosd [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x000000000c88b9: stosd [rdi]; ret far; 
0x000000000f84ed: stosd [rdi]; ret; 
0x000000000d2961: stosd [rdi]; xchg edi, eax; cmc; dec dword ptr [rax-0x77]; ret; 
0x00000000075841: stosd [rdi]; xor eax, 0x63480013; add al, 0x81; add rax, rcx; jmp rax; 
0x00000000097ecc: stosq [rdi]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012339f: stosq [rdi]; mov [r8+0x1], dl; mov rax, r8; mov byte ptr [r8+0x2], 0x0; ret; 
0x000000000f84ec: stosq [rdi]; ret; 
0x000000000b3d6d: str [ebx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000101904: str [r8-0x7b]; push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x000000000b4da4: str [rax+0x63]; add al, 0xba; add rax, rdx; jmp rax; 
0x00000000101905: str [rax-0x7b]; push qword ptr [rbp+0xc]; mov eax, 0x1; ret; 
0x000000000f68ed: str [rax-0x7d]; ret; 
0x000000000efecf: str [rbx+0x105f710d]; add [rcx+0x5b595a0a], cl; ret; 
0x000000000affa8: str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000ed565: str [rbx+rcx*4]; mov [rax], rdi; mov rax, r8; ret; 
0x000000000af737: str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000101bc8: str [rcx+rcx*4-0x40]; add rsp, 0x8; ret; 
0x00000000101b9c: str [rcx+rcx*4-0x40]; ret; 
0x00000000101bc7: str gs:[rcx+rcx*4-0x40]; add rsp, 0x8; ret; 
0x000000000fb9ab: sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbcfb: sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbc7b: sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x000000000c848f: sub [r11+0x5d], bl; pop r12; ret; 
0x000000000c5776: sub [r11], r15b; sub [rbp+0x63], r14b; ret; 
0x0000000007cf3e: sub [r13-0x7b], r8b; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x0000000010a5c3: sub [r14], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000006b1ce: sub [r15+rcx-0x4a], r8b; ret; 
0x00000000145a51: sub [r8+r15*4], r8b; add [rax], eax; add [rax], al; ret; 
0x0000000014574e: sub [r8-0x77], r9b; ja short 0x000000000014576c; mov eax, r8d; ret; 
0x00000000087665: sub [r8-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x00000000145783: sub [r9+r8-0x3a], r9b; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000fb518: sub [r9+r9*4-0x12], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x00000000145851: sub [r9], r15b; shl byte ptr [rbx+0x9], 0x1; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000010950c: sub [rax+0x113], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x000000000fe01c: sub [rax+0x146], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x00000000086723: sub [rax+0x16], bh; pop rbp; pop r12; ret; 
0x000000000e48d5: sub [rax+0x1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000145a62: sub [rax+0x1], bh; ret; 
0x00000000178c2b: sub [rax+0x1], cl; clc; vzeroupper; ret; 
0x0000000009b4c5: sub [rax+0x1], cl; ret; 
0x00000000142734: sub [rax+0x3948000b], ah; shl byte ptr [rbx+rcx+0x48], 0x1; add eax, 0xa0; pop rbx; ret; 
0x00000000091d05: sub [rax+0x3], edi; add rsp, 0x8; ret; 
0x000000001098be: sub [rax+0x4], edi; syscall; 
0x0000000010995e: sub [rax+0x6], edi; syscall; 
0x000000000d837e: sub [rax+0x7fffffff], edi; cmp rdx, 0x58465342; jne short 0x00000000000d8390; ret; 
0x000000000b54b1: sub [rax+rax], ecx; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x000000000b54b0: sub [rax+rax], r9; lea rax, [rip+0xf2d5]; cmove rax, rdx; ret; 
0x00000000145a52: sub [rax+rdi*4], al; add [rax], eax; add [rax], al; ret; 
0x0000000008072a: sub [rax-0x3f76bbfe], cl; ret; 
0x00000000080729: sub [rax-0x3f76bbfe], r9b; ret; 
0x0000000008de93: sub [rax-0x73], cl; adc eax, 0x11bc15; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000fc11b: sub [rax-0x73], cl; and al, 0x38; mov rsi, r8; mov edx, [rax+0x18]; call qword ptr [rsp+0x50]; 
0x000000000fb9a8: sub [rax-0x73], cl; sub [r10+0x1], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbcf8: sub [rax-0x73], cl; sub [r10+0x2], r15b; call qword ptr [rbp+0x40]; 
0x000000000fbc78: sub [rax-0x73], cl; sub [r10+0x5], r15b; call qword ptr [rbp+0x40]; 
0x0000000014574f: sub [rax-0x77], cl; ja short 0x000000000014576c; mov eax, r8d; ret; 
0x00000000043ca6: sub [rax-0x77], cl; ret; 
0x0000000011367b: sub [rax-0x77], r9b; ret; 
0x0000000007a1df: sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret; 
0x00000000110f93: sub [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000087666: sub [rax-0x7b], cl; shl byte ptr [rsp+rax+0x31], 0xc0; pop rbx; ret; 
0x000000000e76cb: sub [rax-0x7d], cl; ret; 
0x0000000006f4cb: sub [rax], ah; mov dword ptr [rsp+0x18], 0x1; jmp rax; 
0x0000000006df03: sub [rax], ah; mov dword ptr [rsp+0x8], 0xffffffff; jmp rax; 
0x000000000fdf94: sub [rax], al; add [rax], al; syscall; 
0x00000000087643: sub [rax], al; je short 0x0000000000087650; xor eax, eax; ret; 
0x0000000014c348: sub [rax], al; jne short 0x000000000014c352; add rsp, 0x30; pop rbx; ret; 
0x000000001109c5: sub [rax], al; mov eax, 0x0; cmovns rax, [rbx+0x28]; pop rbx; ret; 
0x00000000064ce0: sub [rax], dh; adc al, 0x0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000122786: sub [rax], eax; add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x0000000010aa81: sub [rax], eax; add [rax], al; syscall; 
0x000000000673a0: sub [rax], eax; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000006739f: sub [rax], eax; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000979c7: sub [rax], ecx; add [rbp+0x39], ecx; ret far; 
0x000000000979c6: sub [rax], r9; add [rbp+0x39], ecx; ret far; 
0x00000000144d77: sub [rbp+0x310c74c0], eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret; 
0x00000000088b67: sub [rbp+0x31], al; sar byte ptr [rdx+0x1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000866bf: sub [rbp+0x41], bl; pop rsp; ret; 
0x00000000139c0f: sub [rbp+0x488774c0], al; mov eax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000d26a4: sub [rbp+0x5b2b74c0], al; pop rbp; pop r12; ret; 
0x000000000b1513: sub [rbp+0x6349000f], ecx; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c577a: sub [rbp+0x63], dh; ret; 
0x000000000c5779: sub [rbp+0x63], r14b; ret; 
0x00000000152153: sub [rbp+0x6], edi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000009bfb3: sub [rbp+rcx+0xc6f700], esp; or [rax], al; add [rbp-0x4f], dh; ret; 
0x0000000012b318: sub [rbp-0x28], dh; mov eax, 0x1; ret; 
0x000000000ec830: sub [rbp-0x77], al; ror dword ptr [rbx-0x2cbe70f4], cl; jrcxz 0x00000000000ec7c5; sub [rcx+0x63], cl; ret far; 
0x0000000007cf3f: sub [rbp-0x7b], al; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+0x1], r9b; ret; 
0x0000000011f374: sub [rbp-0xa], dh; dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x0000000013a666: sub [rbx+0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+0x8], 0x1; mov [rsi+0x10], rax; ret; 
0x00000000079f28: sub [rbx+0x15], dh; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000079f27: sub [rbx+0x15], sil; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x00000000145c04: sub [rbx+0x27401fb], al; xor eax, eax; sub rsp, 0xffffffffffffff80; pop rbx; ret; 
0x00000000085f7b: sub [rbx+0x41], bl; pop rsp; jmp rax; 
0x0000000008af61: sub [rbx+0x5d], bl; mov eax, r12d; pop r12; pop r13; ret; 
0x0000000002ea50: sub [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x0000000005cbe1: sub [rbx+0x5d], bl; pop r12; ret; 
0x000000001344d7: sub [rbx+0x5d], bl; pop r13; pop r14; ret; 
0x0000000004d3c5: sub [rbx+0x5d], bl; ret; 
0x0000000007a08f: sub [rbx+0xe], dh; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000007a08e: sub [rbx+0xe], sil; lea rsi, [rcx+0x4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret; 
0x0000000014a53c: sub [rbx+rcx], ah; add al, ch; ret far; 
0x0000000014c298: sub [rbx-0x1b], dh; mov eax, 0x1; ret; 
0x0000000014c297: sub [rbx-0x1b], sil; mov eax, 0x1; ret; 
0x00000000123a9f: sub [rbx-0x7d], bl; rol byte ptr [rbx*2+0x5d415c41], 0x41; pop rsi; pop r15; ret; 
0x000000000c5777: sub [rbx], bh; sub [rbp+0x63], r14b; ret; 
0x0000000003a5d4: sub [rbx], bl; add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000014a12f: sub [rbx], cl; add [rbx+0x197f01f8], al; add rsp, 0x8; ret; 
0x0000000014a0c6: sub [rbx], cl; add [rbx+0x227f01f8], al; mov rax, r12; pop r12; ret; 
0x00000000164073: sub [rbx], eax; add [rax], al; ret; 
0x00000000149fef: sub [rbx], ecx; add [rbx+0x197f01f8], al; add rsp, 0x8; ret; 
0x0000000004eab1: sub [rcx+0x1], al; ret; 
0x000000000ec83c: sub [rcx+0x63], cl; ret far; 
0x00000000154f13: sub [rcx+0x6], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000145784: sub [rcx+rax-0x3a], cl; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x000000000fb519: sub [rcx+rcx*4-0x12], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40]; 
0x0000000013de9b: sub [rcx+rcx*4-0x19], cl; call rcx; 
0x0000000011f8f4: sub [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58]; 
0x0000000011f78d: sub [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret; 
0x0000000005bae9: sub [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret; 
0x000000000412b5: sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x00000000070390: sub [rcx-0x3b7cb718], cl; sbb [rbx+0x5d], bl; pop r12; pop r13; ret; 
0x000000000446c4: sub [rcx], al; add [rax], al; movsd xmm0, [rsp+0x8]; add rsp, 0x18; ret; 
0x000000000ff453: sub [rcx], al; add [rax], al; syscall; 
0x00000000092266: sub [rcx], bh; push 0xffffffff89481d7d; and [r8-0x77], r9b; cmp eax, 0x162609; ret; 
0x00000000145852: sub [rcx], bh; shl byte ptr [rbx+0x9], 0x1; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000014345e: sub [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000903cc: sub [rcx], eax; add [rax], al; syscall; 
0x00000000128883: sub [rcx], edi; ret; 
0x00000000151fe7: sub [rdi+0x10], ebx; jb short 0x0000000000151ff4; movaps [rdi], xmm4; jmp r9; 
0x00000000152137: sub [rdi+0x10], ebx; jb short 0x0000000000152144; movaps [rdi], xmm4; jmp r9; 
0x00000000152287: sub [rdi+0x10], ebx; jb short 0x0000000000152294; movaps [rdi], xmm4; jmp r9; 
0x000000001523d7: sub [rdi+0x10], ebx; jb short 0x00000000001523e4; movaps [rdi], xmm4; jmp r9; 
0x00000000152527: sub [rdi+0x10], ebx; jb short 0x0000000000152534; movaps [rdi], xmm4; jmp r9; 
0x00000000152677: sub [rdi+0x10], ebx; jb short 0x0000000000152684; movaps [rdi], xmm4; jmp r9; 
0x000000001527c7: sub [rdi+0x10], ebx; jb short 0x00000000001527d4; movaps [rdi], xmm4; jmp r9; 
0x00000000152917: sub [rdi+0x10], ebx; jb short 0x0000000000152924; movaps [rdi], xmm4; jmp r9; 
0x00000000152a67: sub [rdi+0x10], ebx; jb short 0x0000000000152a74; movaps [rdi], xmm4; jmp r9; 
0x00000000152bb7: sub [rdi+0x10], ebx; jb short 0x0000000000152bc4; movaps [rdi], xmm4; jmp r9; 
0x00000000152d07: sub [rdi+0x10], ebx; jb short 0x0000000000152d14; movaps [rdi], xmm4; jmp r9; 
0x00000000152e57: sub [rdi+0x10], ebx; jb short 0x0000000000152e64; movaps [rdi], xmm4; jmp r9; 
0x00000000152fa7: sub [rdi+0x10], ebx; jb short 0x0000000000152fb4; movaps [rdi], xmm4; jmp r9; 
0x000000001530f7: sub [rdi+0x10], ebx; jb short 0x0000000000153104; movaps [rdi], xmm4; jmp r9; 
0x00000000153247: sub [rdi+0x10], ebx; jb short 0x0000000000153254; movaps [rdi], xmm4; jmp r9; 
0x000000001549b7: sub [rdi+0x10], ebx; jb short 0x00000000001549c4; movaps [rdi], xmm4; jmp r9; 
0x00000000154b07: sub [rdi+0x10], ebx; jb short 0x0000000000154b14; movaps [rdi], xmm4; jmp r9; 
0x00000000154c57: sub [rdi+0x10], ebx; jb short 0x0000000000154c64; movaps [rdi], xmm4; jmp r9; 
0x00000000154da7: sub [rdi+0x10], ebx; jb short 0x0000000000154db4; movaps [rdi], xmm4; jmp r9; 
0x00000000154ef7: sub [rdi+0x10], ebx; jb short 0x0000000000154f04; movaps [rdi], xmm4; jmp r9; 
0x00000000155047: sub [rdi+0x10], ebx; jb short 0x0000000000155054; movaps [rdi], xmm4; jmp r9; 
0x00000000155197: sub [rdi+0x10], ebx; jb short 0x00000000001551a4; movaps [rdi], xmm4; jmp r9; 
0x000000001552e7: sub [rdi+0x10], ebx; jb short 0x00000000001552f4; movaps [rdi], xmm4; jmp r9; 
0x00000000155437: sub [rdi+0x10], ebx; jb short 0x0000000000155444; movaps [rdi], xmm4; jmp r9; 
0x00000000155587: sub [rdi+0x10], ebx; jb short 0x0000000000155594; movaps [rdi], xmm4; jmp r9; 
0x000000001556d7: sub [rdi+0x10], ebx; jb short 0x00000000001556e4; movaps [rdi], xmm4; jmp r9; 
0x00000000155827: sub [rdi+0x10], ebx; jb short 0x0000000000155834; movaps [rdi], xmm4; jmp r9; 
0x00000000155977: sub [rdi+0x10], ebx; jb short 0x0000000000155984; movaps [rdi], xmm4; jmp r9; 
0x00000000155ac7: sub [rdi+0x10], ebx; jb short 0x0000000000155ad4; movaps [rdi], xmm4; jmp r9; 
0x00000000155c17: sub [rdi+0x10], ebx; jb short 0x0000000000155c24; movaps [rdi], xmm4; jmp r9; 
0x00000000075d8d: sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000018b343: sub [rdi+0x16], ch; vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x00000000188953: sub [rdi+0x16], ch; vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000187f43: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x0000000018a3e3: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000018b373: sub [rdi+0x17], bh; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x00000000187f11: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x0000000018a3b1: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b351: sub [rdi+0x17], bh; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x00000000187794: sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000188964: sub [rdi+0x17], bh; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000186769: sub [rdi+0x23], bh; ret; 
0x00000000075734: sub [rdi+0x31], esi; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x00000000186819: sub [rdi+0x3], bh; ret; 
0x00000000186762: sub [rdi+0x41], bh; std; vmovdqu64 [r11], ymm20; ret; 
0x0000000018714f: sub [rdi+0x44], bh; adc bh, bh; rep ret; 
0x0000000017ed57: sub [rdi+0x44], bh; adc bh, bh; vmovdqu64 [rax], ymm16; ret; 
0x0000000018713f: sub [rdi+0x44], bh; adc ch, bh; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x00000000187147: sub [rdi+0x44], bh; adc dh, bh; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x000000001867dc: sub [rdi+0x49], bh; jmp qword ptr [rdx-0x3f]; 
0x000000001867b9: sub [rdi+0x49], ch; jmp qword ptr [rdx-0x1f]; 
0x0000000018d683: sub [rdi+0x4c], ch; xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x00000000187f49: sub [rdi+0x5f], bh; add [rax-0x72b7bfb1], ecx; ret; 
0x0000000017e497: sub [rdi+0x6], ch; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000186754: sub [rdi+0x71], bh; jmp qword ptr [rdx-0x1f]; 
0x00000000188fa0: sub [rdi+0x76], ch; add esp, [rdx-0x4d]; push rbp; and [rdi], bh; ret; 
0x0000000018bec0: sub [rdi+0x76], ch; add esp, [rdx-0x4d]; push rbp; and [rdi], bl; ret; 
0x00000000187054: sub [rdi+0x7], bh; ret; 
0x0000000018667e: sub [rdi+0x7], bh; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x0000000017e4a5: sub [rdi+0x7], bh; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000018a44f: sub [rdi+0x7f], bh; add eax, esi; xchg [rax], eax; ret; 
0x0000000018754a: sub [rdi+0x7f], bh; jmp qword ptr [rdx-0x1f]; 
0x000000000c9be3: sub [rdi+rcx*4+0x2], bl; jbe short 0x00000000000c9bf0; ret; 
0x0000000006b1cf: sub [rdi+rcx-0x4a], al; ret; 
0x000000000404c4: sub [rdi+rdx+0x540f6600], cl; or eax, 0x178c10; orpd xmm0, xmm1; ret; 
0x00000000151f43: sub [rdi-0x10], ebp; jmp r9; 
0x00000000100126: sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall; 
0x0000000013b4b4: sub [rdi-0x17], dh; mov [rdx+0x20], rsi; ret; 
0x00000000151f3f: sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000151f39: sub [rdi-0x30], ebx; jb short 0x0000000000151f4b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152089: sub [rdi-0x30], ebx; jb short 0x000000000015209b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001521d9: sub [rdi-0x30], ebx; jb short 0x00000000001521eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152329: sub [rdi-0x30], ebx; jb short 0x000000000015233b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152479: sub [rdi-0x30], ebx; jb short 0x000000000015248b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001525c9: sub [rdi-0x30], ebx; jb short 0x00000000001525db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152719: sub [rdi-0x30], ebx; jb short 0x000000000015272b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152867: sub [rdi-0x30], ebx; jb short 0x0000000000152880; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001529b9: sub [rdi-0x30], ebx; jb short 0x00000000001529cb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152b09: sub [rdi-0x30], ebx; jb short 0x0000000000152b1b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152c59: sub [rdi-0x30], ebx; jb short 0x0000000000152c6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152da9: sub [rdi-0x30], ebx; jb short 0x0000000000152dbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000152ef9: sub [rdi-0x30], ebx; jb short 0x0000000000152f0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000153049: sub [rdi-0x30], ebx; jb short 0x000000000015305b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000153199: sub [rdi-0x30], ebx; jb short 0x00000000001531ab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154909: sub [rdi-0x30], ebx; jb short 0x000000000015491b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154a59: sub [rdi-0x30], ebx; jb short 0x0000000000154a6b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154ba9: sub [rdi-0x30], ebx; jb short 0x0000000000154bbb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154cf9: sub [rdi-0x30], ebx; jb short 0x0000000000154d0b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154e49: sub [rdi-0x30], ebx; jb short 0x0000000000154e5b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000154f99: sub [rdi-0x30], ebx; jb short 0x0000000000154fab; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001550e9: sub [rdi-0x30], ebx; jb short 0x00000000001550fb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155237: sub [rdi-0x30], ebx; jb short 0x0000000000155250; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155389: sub [rdi-0x30], ebx; jb short 0x000000000015539b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001554d9: sub [rdi-0x30], ebx; jb short 0x00000000001554eb; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155629: sub [rdi-0x30], ebx; jb short 0x000000000015563b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155779: sub [rdi-0x30], ebx; jb short 0x000000000015578b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x000000001558c9: sub [rdi-0x30], ebx; jb short 0x00000000001558db; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155a19: sub [rdi-0x30], ebx; jb short 0x0000000000155a2b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x00000000155b69: sub [rdi-0x30], ebx; jb short 0x0000000000155b7b; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9; 
0x0000000017ed5f: sub [rdi], bh; ret; 
0x000000000fa574: sub [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000fa534: sub [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000085c39: sub [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000074fdb: sub [rdi], cl; test [rbp-0x16000010], eax; shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000115fb3: sub [rdi], ecx; add al, 0x0; cmovne rax, rdx; ret; 
0x000000000fa424: sub [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000018717f: sub [rdi], edi; ret; 
0x00000000151fed: sub [rdi], esp; jmp r9; 
0x000000000fb9ac: sub [rdx+0x1], bh; call qword ptr [rbp+0x40]; 
0x000000000fbcfc: sub [rdx+0x2], bh; call qword ptr [rbp+0x40]; 
0x000000000fbc7c: sub [rdx+0x5], bh; call qword ptr [rbp+0x40]; 
0x000000000413e3: sub [rdx-0x769bffe6], edi; add bh, [rax-0x1]; pop rbp; ret; 
0x000000000b4e3a: sub [rdx], al; add [rax], al; ret; 
0x0000000017b659: sub [rdx], eax; add [rax], al; xor eax, eax; ret; 
0x000000000928e2: sub [rdx], edx; add al, ch; jl short 0x00000000000928e3; jmp qword ptr [rsi+0xf]; 
0x000000000d8ab0: sub [rip+0x4634800], cl; stosb [rdi]; add rax, rdx; jmp rax; 
0x000000000d8edd: sub [rip+0x48f68900], cl; movsxd eax, [rdx+rsi*4]; add rax, rdx; jmp rax; 
0x0000000016a9f7: sub [rip-0x76b30000], ecx; ret far; 
0x0000000010a1e3: sub [rsi+rcx], ebp; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010b1e3: sub [rsi+rcx], ebx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000151edb: sub [rsi-0x1], cl; jb short 0x0000000000151ee7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000151f8b: sub [rsi-0x1], cl; jb short 0x0000000000151f97; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001548ab: sub [rsi-0x1], cl; jb short 0x00000000001548b7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015495b: sub [rsi-0x1], cl; jb short 0x0000000000154967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015202b: sub [rsi-0x2], cl; jb short 0x0000000000152037; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001520db: sub [rsi-0x2], cl; jb short 0x00000000001520e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001549fb: sub [rsi-0x2], cl; jb short 0x0000000000154a07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154aab: sub [rsi-0x2], cl; jb short 0x0000000000154ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015217b: sub [rsi-0x3], cl; jb short 0x0000000000152187; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015222b: sub [rsi-0x3], cl; jb short 0x0000000000152237; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154b4b: sub [rsi-0x3], cl; jb short 0x0000000000154b57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154bfb: sub [rsi-0x3], cl; jb short 0x0000000000154c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001522cb: sub [rsi-0x4], cl; jb short 0x00000000001522d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015237b: sub [rsi-0x4], cl; jb short 0x0000000000152387; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154c9b: sub [rsi-0x4], cl; jb short 0x0000000000154ca7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154d4b: sub [rsi-0x4], cl; jb short 0x0000000000154d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015241b: sub [rsi-0x5], cl; jb short 0x0000000000152427; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001524cb: sub [rsi-0x5], cl; jb short 0x00000000001524d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154deb: sub [rsi-0x5], cl; jb short 0x0000000000154df7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154e9b: sub [rsi-0x5], cl; jb short 0x0000000000154ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015256b: sub [rsi-0x6], cl; jb short 0x0000000000152577; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015261b: sub [rsi-0x6], cl; jb short 0x0000000000152627; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154f3b: sub [rsi-0x6], cl; jb short 0x0000000000154f47; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000154feb: sub [rsi-0x6], cl; jb short 0x0000000000154ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001526bb: sub [rsi-0x7], cl; jb short 0x00000000001526c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015276b: sub [rsi-0x7], cl; jb short 0x0000000000152777; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015508b: sub [rsi-0x7], cl; jb short 0x0000000000155097; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015513b: sub [rsi-0x7], cl; jb short 0x0000000000155147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015280b: sub [rsi-0x8], cl; jb short 0x0000000000152817; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001528bb: sub [rsi-0x8], cl; jb short 0x00000000001528c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001551db: sub [rsi-0x8], cl; jb short 0x00000000001551e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015528b: sub [rsi-0x8], cl; jb short 0x0000000000155297; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015295b: sub [rsi-0x9], cl; jb short 0x0000000000152967; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152a0b: sub [rsi-0x9], cl; jb short 0x0000000000152a17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015532b: sub [rsi-0x9], cl; jb short 0x0000000000155337; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001553db: sub [rsi-0x9], cl; jb short 0x00000000001553e7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152aab: sub [rsi-0xa], cl; jb short 0x0000000000152ab7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152b5b: sub [rsi-0xa], cl; jb short 0x0000000000152b67; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015547b: sub [rsi-0xa], cl; jb short 0x0000000000155487; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015552b: sub [rsi-0xa], cl; jb short 0x0000000000155537; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152bfb: sub [rsi-0xb], cl; jb short 0x0000000000152c07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152cab: sub [rsi-0xb], cl; jb short 0x0000000000152cb7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001555cb: sub [rsi-0xb], cl; jb short 0x00000000001555d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015567b: sub [rsi-0xb], cl; jb short 0x0000000000155687; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152d4b: sub [rsi-0xc], cl; jb short 0x0000000000152d57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152dfb: sub [rsi-0xc], cl; jb short 0x0000000000152e07; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015571b: sub [rsi-0xc], cl; jb short 0x0000000000155727; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001557cb: sub [rsi-0xc], cl; jb short 0x00000000001557d7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152e9b: sub [rsi-0xd], cl; jb short 0x0000000000152ea7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152f4b: sub [rsi-0xd], cl; jb short 0x0000000000152f57; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015586b: sub [rsi-0xd], cl; jb short 0x0000000000155877; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015591b: sub [rsi-0xd], cl; jb short 0x0000000000155927; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000152feb: sub [rsi-0xe], cl; jb short 0x0000000000152ff7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015309b: sub [rsi-0xe], cl; jb short 0x00000000001530a7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001559bb: sub [rsi-0xe], cl; jb short 0x00000000001559c7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155a6b: sub [rsi-0xe], cl; jb short 0x0000000000155a77; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x0000000015313b: sub [rsi-0xf], cl; jb short 0x0000000000153147; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x000000001531eb: sub [rsi-0xf], cl; jb short 0x00000000001531f7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155b0b: sub [rsi-0xf], cl; jb short 0x0000000000155b17; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000155bbb: sub [rsi-0xf], cl; jb short 0x0000000000155bc7; lea r9, [r9-0x7]; lea rdx, [rdx-0x40]; jmp r9; 
0x00000000192ebc: sub [rsi], al; add [rbx+0x1c7f01f8], al; pop rbx; ret; 
0x00000000192eb6: sub [rsi], al; add [rdi+0x628c105], al; add [rbx+0x1c7f01f8], al; pop rbx; ret; 
0x00000000157896: sub [rsi], ax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010a534: sub [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010a59c: sub [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000157897: sub [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000010a464: sub [rsi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010a424: sub [rsi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000008f6a5: sub ah, [rbx+rcx*4+0x4]; and eax, 0x2d0; mov [rdi+0x18], eax; xor eax, eax; ret; 
0x0000000010a9bf: sub al, 0x0; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+0x8]; syscall; 
0x0000000010a816: sub al, 0x0; add [rax], al; syscall; 
0x000000000b6e26: sub al, 0x1; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000aa3f0: sub al, 0x1; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x0000000010a201: sub al, 0x1; add [rax], al; syscall; 
0x0000000004d7c8: sub al, 0x1a; add [rbx+0x507f01f8], al; add rsp, 0x10; pop rbx; ret; 
0x0000000003a314: sub al, 0x1b; add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75]; 
0x000000001447f3: sub al, 0x31; sar byte ptr [rdx-0x1], 0x4c; mov esi, esi; mov rdi, r12; call r13; 
0x000000000c5781: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x000000000e06e6: sub al, 0x44; mov [rdi+0x30], ecx; ret; 
0x0000000002d25b: sub al, 0x4c; mov esi, esp; mov edi, ebp; call r15; 
0x00000000157596: sub al, 0x6; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000085ee0: sub al, 0x6d; or al, 0x0; mov [rbx+0x18], rax; pop rbx; ret; 
0x000000001779b8: sub al, 0x72; add cl, [rax+0x77f8c508]; ret; 
0x000000000c5784: sub al, 0x75; pop rax; ret; 
0x00000000144a53: sub al, 0x85; shl byte ptr [rax+rcx+0x31], 0xc0; add rsp, 0x10; pop rbp; ret; 
0x000000000b5260: sub al, 0x8; add [rax], eax; cmove rax, rdx; ret; 
0x0000000017a003: sub al, 0xa; add [rax], al; xor eax, eax; ret; 
0x000000000919ba: sub al, 0xb8; add eax, [rax]; add [rax], al; add rsp, 0x8; ret; 
0x00000000149d04: sub al, 0xb; add al, ch; xchg esp, eax; ret far; 
0x000000000d86e6: sub al, 0xd; add [rcx+0x46348f6], cl; mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000142487: sub al, 0xe8; ret; 
0x0000000010a127: sub al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000089ed0: sub al, 0xf5; adc [rax], eax; syscall; 
0x00000000116493: sub al, 0xf6; call qword ptr [rax-0x18]; 
0x000000001292e6: sub al, 0xf; xchg ebp, eax; rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret; 
0x000000000c56e5: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x10]; cmp eax, [rsi+0x10]; jne 0x00000000000c57e0; ret; 
0x000000000c5745: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x20]; cmp eax, [rsi+0x20]; jne 0x00000000000c57e0; ret; 
0x000000000c5795: sub al, [rax+0x15740fe2]; mov eax, [rdi+0x30]; cmp eax, [rsi+0x30]; jne short 0x00000000000c57e0; ret; 
0x000000000c5685: sub al, [rax+0x15740fe2]; mov eax, [rdi]; cmp eax, [rsi]; jne 0x00000000000c57e0; ret; 
0x0000000003f85a: sub al, [rax]; add [rax], al; mov rax, r10; ret; 
0x0000000010a48d: sub al, [rax]; add [rax], al; syscall; 
0x0000000013a348: sub al, [rax]; add [rsi-0x3f], ah; ror byte ptr [rax], 0x66; mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x00000000187dc2: sub al, [rdx]; add [rax], al; ret; 
0x00000000157717: sub al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000095197: sub al, ch; mov bl, 0x5f; cld; call far fword ptr [rax+0x48]; 
0x0000000011cf2f: sub al, ch; ret far; 
0x000000000fe0b7: sub bh, [rax+0x118]; syscall; 
0x0000000010990d: sub bh, [rax+0x5]; syscall; 
0x000000000b65e2: sub bh, [rdi]; clc; jmp qword ptr [rsi+0x2e]; 
0x00000000052117: sub bh, al; add al, [rax]; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000d3e59: sub bh, bl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000007a05f: sub bh, bl; jmp qword ptr [rsi+0x2e]; 
0x000000000d22f8: sub bh, dh; fadd st, st(3); nop [rax]; mov eax, 0x16; ret; 
0x000000000fe1ee: sub bl, al; mov qword ptr [rdi], 0x0; ret; 
0x0000000014c4a6: sub bl, al; nop [rax+rax]; mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x0000000014c521: sub bl, al; nop [rax+rax]; mov rax, [rax+0x370]; call qword ptr [rax+0x50]; 
0x000000001012a0: sub bl, al; nop [rax+rax]; nop [rax]; mov eax, 0x4c; syscall; 
0x00000000145a72: sub bl, al; nop [rax+rax]; nop; xor eax, eax; ret; 
0x0000000007a1b2: sub bl, bh; jmp qword ptr [rsi+0x2e]; 
0x00000000085a6d: sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x000000001177ef: sub byte ptr [rax+0x48000000], 0x39; enter 0x577, 0xe9; loop 0x00000000001177df; stc; call qword ptr [rax-0x18]; 
0x0000000013dd02: sub byte ptr [rax+0xf000000], 0xc8; mov eax, eax; mov [rdx], rax; mov eax, 0x1; ret; 
0x000000000b4e39: sub byte ptr [rax], 0x2; add [rax], al; ret; 
0x00000000065038: sub byte ptr [rip+0x63480014], 0x4; xchg [rax+0x1], ecx; clc; jmp rax; 
0x0000000014d108: sub cl, 0x62; hlt; jmp qword ptr [rsi-0x70]; 
0x000000000b6650: sub cl, [rax+rax]; jne short 0x00000000000b660b; ret; 
0x0000000005c770: sub cl, [rax-0x73]; or eax, 0x14aa70; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000010066d: sub cl, [rax-0x7b]; sar byte ptr [rax+0x6], 0x41; cmp eax, 0x2; jbe short 0x0000000000100680; ret; 
0x000000000fa3f4: sub cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000fa3b4: sub cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000082585: sub cl, [rdi]; mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax; 
0x00000000124275: sub cl, [rip-0x16a2a500]; and [rsi], esp; idiv bh; nop; ret; 
0x0000000010a344: sub cl, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000406c6: sub cl, al; ret; 
0x00000000059f04: sub cl, ch; imul ebp, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x0000000015b5d4: sub cl, dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000145905: sub dh, [rcx]; sar byte ptr [rdx-0x1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx; 
0x0000000006bfcb: sub dh, al; add [rcx-0x7d], cl; ret; 
0x0000000005ad1d: sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e]; 
0x00000000059bfd: sub dh, al; add [rip-0xfd517], ch; jmp qword ptr [rsi+0x2e]; 
0x000000000ca3cc: sub dl, [rdx]; add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x000000000eebb2: sub dl, ch; or eax, [rax]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax; 
0x0000000013911a: sub dword ptr [rax+0x1000022], 0x48; mov edi, ebp; call qword ptr [rax+0x18]; 
0x0000000018c5c3: sub dword ptr [rax+0x31000004], 0xffffffc0; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x000000000018c547; ret; 
0x0000000013b937: sub dword ptr [rax+0x68], 0x4; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000000b4c80: sub dword ptr [rbx], 0xe274b104; ret; 
0x000000000862f5: sub dword ptr [rdi+0x16], 0x0; ret; 
0x0000000008e25c: sub dword ptr [rdi+0x4], 0x1; je 0x000000000008df8f; mov eax, 0x83; ret; 
0x0000000017a7e6: sub dword ptr [rip-0xcfffffe], 0xf; outsd dx, [rsi]; push rdi; ret; 
0x00000000081465: sub dword ptr [rsi+0x48000004], 0xffffff8d; je short 0x0000000000081492; adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90]; 
0x0000000016a8b1: sub dword ptr [rsi+0xe], 0x0; add [rcx+0x29], cl; ret far; 
0x0000000018a5cd: sub dword ptr [rsi+0xf000004], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x00000000091f8b: sub dword ptr [rsi-0x7c9bffeb], 0xe375013a; mov dword ptr fs:[rdx], 0xd; add rsp, 0x110; pop rbp; ret; 
0x000000000b0a6a: sub eax, 0x10; jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x000000000b228a: sub eax, 0x10; jb 0x00000000000b16d9; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x00000000163e52: sub eax, 0x10; lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x000000000b02a9: sub eax, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b199d: sub eax, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x000000000b02cc: sub eax, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x000000000b19c0: sub eax, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x0000000009488b: sub eax, 0x11; shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x000000000b02f1: sub eax, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b19e5: sub eax, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b030f: sub eax, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b0980; ret; 
0x000000000b1a13: sub eax, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b032f: sub eax, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b1a43: sub eax, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b0352: sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1a76: sub eax, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b0371: sub eax, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b1aa5: sub eax, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b0391: sub eax, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b1ad5: sub eax, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b03b1: sub eax, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b1b05: sub eax, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b03d4: sub eax, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000b1b38: sub eax, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x00000000141ecb: sub eax, 0x1; add rsp, 0x18; ret; 
0x0000000013dd1b: sub eax, 0x1; bswap eax; mov [r8+0xa8], eax; mov eax, 0x1; ret; 
0x000000001403a3: sub eax, 0x1; bswap eax; mov [rdi+0x48], eax; mov eax, 0x1; ret; 
0x00000000140c2a: sub eax, 0x1; bswap eax; mov [rdx], eax; mov eax, 0x1; ret; 
0x00000000164048: sub eax, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x000000000b00c3: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b0980; ret; 
0x000000000b1776: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000175da9: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac1: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187b59: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018afd1: sub eax, 0x1; lea rdi, [rdi+0x1]; jne 0x000000000018b420; ret; 
0x00000000175fc0: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cf4: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d84: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1f0: sub eax, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x0000000008e034: sub eax, 0x1; mov [rdi+0x4], eax; je short 0x000000000008e09b; xor eax, eax; ret; 
0x0000000003724c: sub eax, 0x1; mov [rdx+0x8], eax; pop rbx; ret; 
0x0000000013076f: sub eax, 0x1; pop r12; pop r13; ret; 
0x000000000507bb: sub eax, 0x1; ret; 
0x000000000b0409: sub eax, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b1b6d: sub eax, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b0437: sub eax, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b0980; ret; 
0x000000000b1b9b: sub eax, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b0467: sub eax, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b1bcb: sub eax, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b0493: sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b1bf7: sub eax, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b04c3: sub eax, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b1c27: sub eax, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b04f3: sub eax, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b1c57: sub eax, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000001762dd: sub eax, 0x20; jb 0x0000000000175ef5; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x00000000188113: sub eax, 0x20; jb 0x0000000000187cb5; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x0000000018a443: sub eax, 0x20; jb 0x000000000018a1d5; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000018b543: sub eax, 0x20; jb 0x000000000018b125; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000000b0523: sub eax, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b1c87: sub eax, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x00000000128d4c: sub eax, 0x21; cmp al, 0x5d; jbe short 0x0000000000128d40; xor eax, eax; ret; 
0x00000000128dcc: sub eax, 0x21; cmp al, 0x5d; jbe short 0x0000000000128dc0; xor eax, eax; ret; 
0x00000000128e6c: sub eax, 0x21; cmp al, 0x5d; jbe short 0x0000000000128e60; xor eax, eax; ret; 
0x00000000128efc: sub eax, 0x21; cmp al, 0x5d; jbe short 0x0000000000128ef0; xor eax, eax; ret; 
0x00000000091910: sub eax, 0x2; add rsp, 0x8; ret; 
0x0000000016406a: sub eax, 0x2; lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x000000000b00e7: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x000000000b179b: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000175f57: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176c8b: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d1b: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x0000000018b187: sub eax, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x00000000164090: sub eax, 0x3; lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x000000000b010a: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b17be: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000175f7b: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176caf: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d3f: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x0000000018b1ab: sub eax, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x000000000db402: sub eax, 0x4742a3c; cmp al, 0x3f; jne short 0x00000000000db421; mov eax, 0x1; ret; 
0x000000000df2b2: sub eax, 0x47c6f075; or [rsi], dl; mov eax, 0x1; ret; 
0x0000000010a6fc: sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+0x8]; syscall; 
0x000000000f924f: sub eax, 0x4800004e; add esp, 0x28; ret; 
0x00000000117caf: sub eax, 0x48fff146; add esp, 0x8; ret; 
0x000000001640a8: sub eax, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000000b0125: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x000000000b17d9: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000175f95: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cc9: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d59: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x0000000018b1c5: sub eax, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000001144d2: sub eax, 0x507a8b48; mov rsi, rdx; call rax; 
0x000000001640ce: sub eax, 0x5; lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x000000000b0148: sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b0980; ret; 
0x000000000b17fc: sub eax, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x00000000079392: sub eax, 0x5be08944; pop rbp; pop r12; ret; 
0x00000000065039: sub eax, 0x63480014; add al, 0x87; add rax, rdi; jmp rax; 
0x00000000157417: sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001640f0: sub eax, 0x6; lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x000000000b016d: sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b1821: sub eax, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x0000000017ed44: sub eax, 0x7304fa80; xor [rax+0x337701fa], eax; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000016410e: sub eax, 0x7; lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x000000000b018b: sub eax, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b183f: sub eax, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x0000000004085f: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000070d3d: sub eax, 0x83000000; ret; 
0x00000000149c3c: sub eax, 0x850f000b; ret far; 
0x000000001392d7: sub eax, 0x8948ffef; ret; 
0x00000000143f1f: sub eax, 0x89fffc66; ret; 
0x00000000163dea: sub eax, 0x8; lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x000000000b01a7: sub eax, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000b185b: sub eax, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x00000000102b4f: sub eax, 0x8bfff836; and al, 0x8; add rsp, 0x28; ret; 
0x000000000fda4f: sub eax, 0x8bfff887; and al, 0x8; add rsp, 0x28; ret; 
0x00000000164130: sub eax, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x000000000b01ca: sub eax, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000000b187e: sub eax, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x00000000164150: sub eax, 0xa; lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x000000000b01ef: sub eax, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b18a3: sub eax, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x00000000164170: sub eax, 0xb; lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x000000000b020d: sub eax, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b0980; ret; 
0x000000000b18d1: sub eax, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x000000000cd4f3: sub eax, 0xbd412275; sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x000000001454b2: sub eax, 0xc3c08944; nop [rax+rax]; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000001704df: sub eax, 0xc5000001; std; xlat [rbx]; ret; 
0x00000000132780: sub eax, 0xc6c93; mov qword ptr [rip+0xc6c70], 0x0; mov byte ptr [rip+0xc7ca3], 0x0; mov byte ptr [rip+0xc6c82], 0x0; call rbx; 
0x00000000131eb7: sub eax, 0xc74d285; xor eax, eax; cmp edx, 0x1; jne short 0x0000000000131ee0; ret; 
0x00000000132729: sub eax, 0xc7d2a; mov qword ptr [rip+0xc7d07], 0x0; mov byte ptr [rip+0xc8d3a], 0x0; mov byte ptr [rip+0xc7d19], 0x0; call rbx; 
0x000000001326d2: sub eax, 0xc8dc1; mov qword ptr [rip+0xc8d9e], 0x0; mov byte ptr [rip+0xc9dd1], 0x0; mov byte ptr [rip+0xc8db0], 0x0; call rbx; 
0x00000000164190: sub eax, 0xc; lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000000b022d: sub eax, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b18f1: sub eax, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x0000000010a037: sub eax, 0xd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001641b2: sub eax, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000000b024f: sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b1913: sub eax, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000001641d2: sub eax, 0xe; lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x000000000b026f: sub eax, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b1943: sub eax, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000000cd4f8: sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf]; 
0x000000001641f2: sub eax, 0xf; lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x000000000b028f: sub eax, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b1973: sub eax, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x00000000059c00: sub eax, 0xfff02ae9; jmp qword ptr [rsi+0x2e]; 
0x0000000005ad20: sub eax, 0xffff16e9; jmp qword ptr [rsi+0x2e]; 
0x00000000170b05: sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x00000000177d7a: sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x0000000017f405: sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x00000000185c5a: sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x000000001426ce: sub eax, 0xffffff80; pop rbx; ret; 
0x0000000010a3bd: sub eax, [rax]; add [rax], al; syscall; 
0x0000000003b13f: sub eax, [rbx+0x8]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000006bf7b: sub eax, [rcx+0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x00000000043804: sub eax, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000b4c81: sub eax, [rcx+rsi*4]; je short 0x00000000000b4c68; ret; 
0x0000000010ae06: sub eax, [rcx]; add [rax], al; mov edi, [rsp+0x4]; syscall; 
0x0000000010adc0: sub eax, [rcx]; add [rax], al; syscall; 
0x000000000853ce: sub eax, [rdi+0x18]; ret; 
0x0000000007fc25: sub eax, [rdi+0x20]; ret; 
0x00000000110665: sub eax, [rdi+0x38]; cmp rax, rsi; jb short 0x0000000000110678; mov eax, 0x1; ret; 
0x0000000007fb05: sub eax, [rdi+0x38]; ret; 
0x0000000007bef5: sub eax, [rdx+0x10]; sar rax, 0x2; ret; 
0x0000000007fc16: sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faf6: sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000084b03: sub eax, [rsi+0x10]; ret; 
0x0000000005230f: sub eax, eax; mov [rdi+0x8], rdx; mov [rsi], eax; mov eax, 0x2; ret; 
0x000000000522cc: sub eax, eax; mov [rsi], eax; mov eax, 0x2; ret; 
0x0000000007b817: sub eax, eax; mov eax, r8d; ret; 
0x000000000b5cb9: sub eax, ebp; pop rbp; pop r12; ret; 
0x0000000012494f: sub eax, ebx; add rsp, 0x10; pop rbx; ret; 
0x0000000018b905: sub eax, ecx; cmp rsi, rax; ja 0x000000000018b707; mov eax, esi; ret; 
0x0000000018ce68: sub eax, ecx; cmp rsi, rax; ja 0x000000000018cc27; mov eax, esi; ret; 
0x00000000170b93: sub eax, ecx; je short 0x0000000000170b9c; sbb eax, eax; or eax, 0x1; ret; 
0x0000000017f493: sub eax, ecx; je short 0x000000000017f49c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000186433: sub eax, ecx; je short 0x000000000018643c; sbb eax, eax; or eax, 0x1; ret; 
0x000000000ca4ea: sub eax, ecx; mov [rdi+0x18], eax; ret; 
0x0000000005215d: sub eax, ecx; mov [rdx], eax; mov eax, 0x1; ret; 
0x000000000a2e2c: sub eax, ecx; ret; 
0x0000000016f99f: sub eax, ecx; vzeroupper; ret; 
0x0000000017f13c: sub eax, ecx; xtest; je short 0x000000000017f147; vzeroall; ret; 
0x000000000aa799: sub eax, edi; ret; 
0x000000000c61d9: sub eax, edi; shr rax, 0x2; ret; 
0x0000000007eb18: sub eax, edx; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000008782c: sub eax, edx; mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x0000000013bc83: sub eax, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x0000000013b75c: sub eax, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x000000000c0bac: sub eax, edx; pop r12; pop r13; pop r14; ret; 
0x000000000c0b31: sub eax, edx; pop r12; ret; 
0x00000000081e81: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000013b660: sub eax, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000017d807: sub eax, edx; ret; 
0x0000000017d7f7: sub eax, edx; ret; 
0x00000000043dc5: sub eax, edx; ret; 
0x0000000004083f: sub eax, edx; shr eax, 0x1f; ret; 
0x00000000040495: sub eax, edx; shr rax, 0x3f; ret; 
0x00000000187d81: sub eax, edx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1ed: sub eax, edx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x0000000016f69e: sub eax, edx; vzeroupper; ret; 
0x0000000018055e: sub eax, edx; xtest; je short 0x0000000000180569; vzeroall; ret; 
0x00000000182f6e: sub eax, edx; xtest; je short 0x0000000000182f79; vzeroall; ret; 
0x00000000139c2a: sub eax, esp; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x0000000005230e: sub eax, r8d; mov [rdi+0x8], rdx; mov [rsi], eax; mov eax, 0x2; ret; 
0x000000000522cb: sub eax, r8d; mov [rsi], eax; mov eax, 0x2; ret; 
0x000000000d5621: sub ebp, [rbp-0xb]; jmp qword ptr [rbp+rax*2-0x77]; 
0x0000000006f254: sub ebp, ecx; sar ah, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000002d8e3: sub ebp, esi; sbb eax, [rax]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000005a216: sub ebx, 0xffffffff; jmp qword ptr [rsi+0xf]; 
0x000000000d34f7: sub ebx, [rbx+0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000005a5a4: sub ebx, [rbx+0x5d]; pop r12; pop r13; ret; 
0x000000000d26a8: sub ebx, [rbx+0x5d]; pop r12; ret; 
0x000000001231d2: sub ebx, [rbx+0x5d]; ret; 
0x00000000050ea0: sub ecx, 0x1; jae short 0x0000000000050e98; mov rax, rdx; ret; 
0x0000000004431c: sub ecx, 0x1; jns short 0x00000000000442e9; xor eax, eax; ret; 
0x00000000174424: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x00000000174414: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000014a4e0: sub ecx, 0x5; cmp cx, 0x3; jbe short 0x000000000014a4f0; ret; 
0x00000000174404: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000001743f4: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x00000000050814: sub ecx, 0x8; cmp rcx, 0xfffffffffffffff8; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x0000000014c292: sub ecx, [rax+0x10]; cmp rcx, [rax+0x28]; jae short 0x000000000014c280; mov eax, 0x1; ret; 
0x00000000149f9d: sub ecx, [rax-0x75]; and al, 0x8; add rsp, 0x18; ret; 
0x000000000f8104: sub ecx, [rax-0x77]; or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000e3c51: sub ecx, [rax-0x7d]; ret; 
0x000000000b0151: sub ecx, [rax]; add [rax], al; ret; 
0x0000000010465c: sub ecx, [rcx+rcx*4-0x1a]; mov rdi, r14; call r13; 
0x000000000d3e2a: sub ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000fa224: sub ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010a214: sub ecx, [rsi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000084389: sub ecx, eax; lea eax, [rcx-0x1]; ret; 
0x0000000007b769: sub ecx, eax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x0000000012861f: sub ecx, ecx; cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285d8: sub ecx, ecx; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000a79b8: sub ecx, ecx; lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a5758: sub ecx, ecx; lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a3198: sub ecx, ecx; lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a88: sub ecx, ecx; lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015e768: sub ecx, ecx; lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5f8: sub ecx, ecx; lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001502a8: sub ecx, ecx; lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f028: sub ecx, ecx; lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000f84e0: sub ecx, edi; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000007e61c: sub ecx, edx; cmp rax, rcx; jbe 0x000000000007e780; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f93c: sub ecx, edx; cmp rax, rcx; jbe 0x000000000007fa90; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000082216: sub ecx, edx; cmp rax, rcx; jbe 0x0000000000082350; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000083e1f: sub ecx, edx; cmp rax, rcx; jbe 0x0000000000083ed8; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000076d5c: sub ecx, edx; cmp rax, rcx; jbe short 0x0000000000076db8; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000078fc6: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000007900a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000007ae05: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000007ae48; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b67a: sub ecx, edx; cmp rax, rcx; jbe short 0x000000000007b6b0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x000000000807c6: sub ecx, edx; cmp rax, rcx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x000000000823b6: sub ecx, edx; cmp rax, rcx; jbe short 0x00000000000823f8; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x00000000083ad3: sub ecx, edx; cmp rax, rcx; jbe short 0x0000000000083b40; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000083b85: sub ecx, edx; cmp rax, rcx; jbe short 0x0000000000083bb0; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084295: sub ecx, edx; cmp rax, rcx; jbe short 0x00000000000842d0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000004012b: sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000040179: sub ecx, edx; shr eax, 0x1f; shr ecx, 0x10; or eax, ecx; ret; 
0x000000000ca4e8: sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret; 
0x0000000013b48b: sub ecx, esi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x000000000c5a6c: sub edi, 0x10; add rax, rdi; ret; 
0x00000000154883: sub edi, 0x20; lea r11, [rip+0x657b3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151eb3: sub edi, 0x20; lea r11, [rip+0x67fc3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017902b: sub edi, 0x3f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000017039d: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000173fdd: sub edi, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000154792: sub edi, 0x40; lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d3: sub edi, 0x40; lea r11, [rip+0x65963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc2: sub edi, 0x40; lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d03: sub edi, 0x40; lea r11, [rip+0x68173]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000179065: sub edi, 0x5f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001703c5: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000174005: sub edi, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000179045: sub edi, 0x7f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001703b5: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000170191: sub edi, 0xffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000001701e5: sub edi, 0xffffffdf; add rax, rdi; vzeroupper; ret; 
0x00000000144da3: sub edi, [rax+0x1]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000c73b4: sub edi, [rax+0x60]; syscall; 
0x00000000079e1f: sub edi, ebx; jmp qword ptr [rsi+0x2e]; 
0x0000000009a249: sub edi, ecx; call far fword ptr [rbx+0x5d]; 
0x00000000080c85: sub edi, ecx; cmp rax, rdi; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000008d2df: sub edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000174543: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000017461c: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000001745c8: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000174264: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000174274: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000174284: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000174579: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000174254: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000001898f4: sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x00000000189904: sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x00000000189914: sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x00000000189924: sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x0000000015b5cf: sub edi, edx; lea r11, [rip+0x5f128]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158abb: sub edi, edx; lea r11, [rip+0x6173c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000018b845: sub edi, edx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b813: sub edi, edx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8cc: sub edi, edx; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018b891: sub edi, edx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018c384: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c394: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a4: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c374: sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x0000000018cd41: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2c: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd1: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd82: sub edi, edx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000a5154: sub edx, 0x10; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x30]; ret; 
0x00000000050489: sub edx, 0x1; jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x00000000050571: sub edx, 0x1; jne short 0x0000000000050558; mov eax, 0x1; ret; 
0x00000000131c31: sub edx, 0x1; jne short 0x0000000000131bb8; ret; 
0x000000000df1b8: sub edx, 0x1; jns short 0x00000000000df1a0; mov r9d, 0x1; mov eax, r9d; ret; 
0x000000000a5134: sub edx, 0x20; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x20]; ret; 
0x00000000128d08: sub edx, 0x2d; cmp dl, 0x32; jbe short 0x0000000000128ce0; xor eax, eax; ret; 
0x000000000a5114: sub edx, 0x30; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a5104: sub edx, 0x40; add rdx, rax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x00000000156ec1: sub edx, 0x40; lea r11, [rip+0x63175]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000186e37: sub edx, 0x80; add rdx, rax; jl 0x0000000000186f20; add rax, rdi; ret; 
0x00000000156f95: sub edx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000099846: sub edx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x00000000185ea4: sub edx, 0xffffff80; cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d984: sub edx, 0xffffff80; cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d274: sub edx, 0xffffffe0; cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018de24: sub edx, 0xffffffe0; cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000084b30: sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x00000000084b25: sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x000000000b4cde: sub edx, [rcx+rsi*4]; je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x0000000009a2b4: sub edx, [rip+0xc76400]; or al, 0x0; add [rax], al; xor eax, eax; ret; 
0x00000000040875: sub edx, [rsi]; add [rdi], cl; push rsp; ret; 
0x000000000a49cd: sub edx, eax; jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000a4c34: sub edx, eax; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c44: sub edx, eax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c54: sub edx, eax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c64: sub edx, eax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x0000000013bdb1: sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40]; 
0x000000000ff054: sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000b341c: sub edx, ecx; lea r11, [rip+0xf6fef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a9c: sub edx, ecx; lea r11, [rip+0xf78ef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b153c: sub edx, ecx; lea r11, [rip+0xf8cfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0dec: sub edx, ecx; lea r11, [rip+0xf93bf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe9c: sub edx, ecx; lea r11, [rip+0xfa1bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ec: sub edx, ecx; lea r11, [rip+0xfa7eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c699f: sub edx, ecx; lea rax, [rsi+rdx]; ret; 
0x000000000c9c70: sub edx, ecx; mov [rbx+0x8], dx; add rsp, 0x10; pop rbx; ret; 
0x000000000c7653: sub edx, ecx; mov [rbx+0x8], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000007c33f: sub edx, esi; call qword ptr [rax+0x70]; 
0x00000000082ba5: sub edx, esi; call qword ptr [rbp+0x70]; 
0x0000000016f324: sub edx, esi; cmp edx, ecx; jle short 0x000000000016f33c; movsxd rax, ecx; ret; 
0x000000000c4812: sub edx, esi; jbe 0x00000000000c4b20; add rax, rdi; add rax, rcx; ret; 
0x000000000c4aa9: sub edx, esi; jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac9: sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae9: sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b09: sub edx, esi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000007cafc: sub edx, esi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x00000000081615: sub edx, esi; mov [rsp], rcx; mov rdi, rbp; call rax; 
0x00000000122f5d: sub esi, 0x1; mov [rdi+0x1], sil; ret; 
0x000000001031b7: sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000080ae1: sub esi, [rsi-0x76b70006]; ret; 
0x0000000005575b: sub esi, eax; lea rax, [r10+rsi]; ret; 
0x000000000586b0: sub esi, eax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x000000000df286: sub esi, eax; or [r9], r11b; mov eax, 0x1; ret; 
0x00000000044ae6: sub esi, edi; syscall; 
0x0000000015b271: sub esi, edx; lea r11, [rip+0x5f486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b0f1: sub esi, edx; lea r11, [rip+0x5f606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015af71: sub esi, edx; lea r11, [rip+0x5f786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015adf1: sub esi, edx; lea r11, [rip+0x5f906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ac71: sub esi, edx; lea r11, [rip+0x5fa86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aaf1: sub esi, edx; lea r11, [rip+0x5fc06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a971: sub esi, edx; lea r11, [rip+0x5fd86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a7f1: sub esi, edx; lea r11, [rip+0x5ff06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a671: sub esi, edx; lea r11, [rip+0x60086]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a4f1: sub esi, edx; lea r11, [rip+0x60206]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a371: sub esi, edx; lea r11, [rip+0x60386]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a1f1: sub esi, edx; lea r11, [rip+0x60506]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a071: sub esi, edx; lea r11, [rip+0x60686]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ef1: sub esi, edx; lea r11, [rip+0x60806]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159d71: sub esi, edx; lea r11, [rip+0x60986]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159bf8: sub esi, edx; lea r11, [rip+0x60aff]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158791: sub esi, edx; lea r11, [rip+0x61a66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158611: sub esi, edx; lea r11, [rip+0x61be6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158491: sub esi, edx; lea r11, [rip+0x61d66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158311: sub esi, edx; lea r11, [rip+0x61ee6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158191: sub esi, edx; lea r11, [rip+0x62066]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158011: sub esi, edx; lea r11, [rip+0x621e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157e91: sub esi, edx; lea r11, [rip+0x62366]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157d11: sub esi, edx; lea r11, [rip+0x624e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157b91: sub esi, edx; lea r11, [rip+0x62666]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157a11: sub esi, edx; lea r11, [rip+0x627e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157891: sub esi, edx; lea r11, [rip+0x62966]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157711: sub esi, edx; lea r11, [rip+0x62ae6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157591: sub esi, edx; lea r11, [rip+0x62c66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157411: sub esi, edx; lea r11, [rip+0x62de6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157291: sub esi, edx; lea r11, [rip+0x62f66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157118: sub esi, edx; lea r11, [rip+0x630df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000080e47: sub esi, edx; mov rdi, rbx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x0000000004d75f: sub esp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x0000000013ff1a: sub esp, 0x438; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000000d21b4: sub esp, 0x8; call rax; 
0x00000000108ac3: sub esp, 0x8; call rsi; 
0x00000000085cf4: sub esp, 0x8; mov rax, [rax+0x340]; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x0000000014c3a8: sub esp, 0x8; push qword ptr [rax]; mov rax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x00000000085e0f: sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x000000000946bf: sub esp, 0x8; syscall; 
0x000000000f9f65: sub esp, 0x98; syscall; 
0x00000000093b97: sub esp, 0xffffff80; pop rbp; pop r12; pop r13; ret; 
0x00000000041792: sub esp, 0xffffff80; pop rbx; pop rbp; pop r12; ret; 
0x00000000145c0d: sub esp, 0xffffff80; pop rbx; ret; 
0x0000000006067b: sub esp, 0xffffffff; call qword ptr [rax-0x170876b4]; 
0x000000001194e4: sub esp, [rcx+rcx*4+0x2b]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000013b936: sub qword ptr [rax+0x68], 0x4; mov eax, 0x1; add rsp, 0x10; pop rbx; ret; 
0x000000000fe1ed: sub r11b, r8b; mov qword ptr [rdi], 0x0; ret; 
0x00000000145a71: sub r11b, r8b; nop [rax+rax]; nop; xor eax, eax; ret; 
0x000000000d3e58: sub r15b, bl; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000079efe: sub r15d, ebx; jmp qword ptr [rsi+0x2e]; 
0x000000000b0a69: sub r8, 0x10; jb 0x00000000000b0029; movdqu [rdi+0x30], xmm7; ret; 
0x000000000b2289: sub r8, 0x10; jb 0x00000000000b16d9; movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret; 
0x00000000163e51: sub r8, 0x10; lea rcx, [rdx+0x10]; jne 0x00000000001643a0; ret; 
0x000000000b02a8: sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b0980; ret; 
0x000000000b199c: sub r8, 0x10; lea rdi, [rdi+0x10]; jne 0x00000000000b21a0; ret; 
0x000000000b02cb: sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b0980; ret; 
0x000000000b19bf: sub r8, 0x11; lea rdi, [rdi+0x11]; jne 0x00000000000b21a0; ret; 
0x000000000b02f0: sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b0980; ret; 
0x000000000b19e4: sub r8, 0x12; lea rdi, [rdi+0x12]; jne 0x00000000000b21a0; ret; 
0x000000000b030e: sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b0980; ret; 
0x000000000b1a12: sub r8, 0x13; lea rdi, [rdi+0x13]; jne 0x00000000000b21a0; ret; 
0x000000000b032e: sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b0980; ret; 
0x000000000b1a42: sub r8, 0x14; lea rdi, [rdi+0x14]; jne 0x00000000000b21a0; ret; 
0x000000000b0351: sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b0980; ret; 
0x000000000b1a75: sub r8, 0x15; lea rdi, [rdi+0x15]; jne 0x00000000000b21a0; ret; 
0x000000000b0370: sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b0980; ret; 
0x000000000b1aa4: sub r8, 0x16; lea rdi, [rdi+0x16]; jne 0x00000000000b21a0; ret; 
0x000000000b0390: sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b0980; ret; 
0x000000000b1ad4: sub r8, 0x17; lea rdi, [rdi+0x17]; jne 0x00000000000b21a0; ret; 
0x000000000b03b0: sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b0980; ret; 
0x000000000b1b04: sub r8, 0x18; lea rdi, [rdi+0x18]; jne 0x00000000000b21a0; ret; 
0x000000000b03d3: sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b0980; ret; 
0x000000000b1b37: sub r8, 0x19; lea rdi, [rdi+0x19]; jne 0x00000000000b21a0; ret; 
0x00000000164047: sub r8, 0x1; lea rcx, [rdx+0x1]; jne 0x00000000001643a0; ret; 
0x000000000b00c2: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b0980; ret; 
0x000000000b1775: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000000b21a0; ret; 
0x00000000175da8: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176ac0: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187b58: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018afd0: sub r8, 0x1; lea rdi, [rdi+0x1]; jne 0x000000000018b420; ret; 
0x00000000175fbf: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cf3: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d83: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1ef: sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x000000000b0408: sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b0980; ret; 
0x000000000b1b6c: sub r8, 0x1a; lea rdi, [rdi+0x1a]; jne 0x00000000000b21a0; ret; 
0x000000000b0436: sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b0980; ret; 
0x000000000b1b9a: sub r8, 0x1b; lea rdi, [rdi+0x1b]; jne 0x00000000000b21a0; ret; 
0x000000000b0466: sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b0980; ret; 
0x000000000b1bca: sub r8, 0x1c; lea rdi, [rdi+0x1c]; jne 0x00000000000b21a0; ret; 
0x000000000b0492: sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b0980; ret; 
0x000000000b1bf6: sub r8, 0x1d; lea rdi, [rdi+0x1d]; jne 0x00000000000b21a0; ret; 
0x000000000b04c2: sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b0980; ret; 
0x000000000b1c26: sub r8, 0x1e; lea rdi, [rdi+0x1e]; jne 0x00000000000b21a0; ret; 
0x000000000b04f2: sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b0980; ret; 
0x000000000b1c56: sub r8, 0x1f; lea rdi, [rdi+0x1f]; jne 0x00000000000b21a0; ret; 
0x000000001762db: sub r8, 0x20; jb 0x0000000000175ef5; vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x00000000188112: sub r8, 0x20; jb 0x0000000000187cb5; vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x0000000018a442: sub r8, 0x20; jb 0x000000000018a1d5; vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000018b542: sub r8, 0x20; jb 0x000000000018b125; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x000000000b0522: sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b0980; ret; 
0x000000000b1c86: sub r8, 0x20; lea rdi, [rdi+0x20]; jne 0x00000000000b21a0; ret; 
0x00000000164069: sub r8, 0x2; lea rcx, [rdx+0x2]; jne 0x00000000001643a0; ret; 
0x000000000b00e6: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b0980; ret; 
0x000000000b179a: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000000b21a0; ret; 
0x00000000175f56: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176c8a: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d1a: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x0000000000187ff0; ret; 
0x0000000018b186: sub r8, 0x2; lea rdi, [rdi+0x2]; jne 0x000000000018b420; ret; 
0x0000000016408f: sub r8, 0x3; lea rcx, [rdx+0x3]; jne 0x00000000001643a0; ret; 
0x000000000b0109: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b0980; ret; 
0x000000000b17bd: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000000b21a0; ret; 
0x00000000175f7a: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cae: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d3e: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x0000000000187ff0; ret; 
0x0000000018b1aa: sub r8, 0x3; lea rdi, [rdi+0x3]; jne 0x000000000018b420; ret; 
0x000000001640a7: sub r8, 0x4; lea rcx, [rdx+0x4]; jne 0x00000000001643a0; ret; 
0x000000000b0124: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b0980; ret; 
0x000000000b17d8: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000000b21a0; ret; 
0x00000000175f94: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x00000000001761e0; vzeroupper; ret; 
0x00000000176cc8: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000176f10; vzeroupper; ret; 
0x00000000187d58: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x0000000000187ff0; ret; 
0x0000000018b1c4: sub r8, 0x4; lea rdi, [rdi+0x4]; jne 0x000000000018b420; ret; 
0x000000001640cd: sub r8, 0x5; lea rcx, [rdx+0x5]; jne 0x00000000001643a0; ret; 
0x000000000b0147: sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b0980; ret; 
0x000000000b17fb: sub r8, 0x5; lea rdi, [rdi+0x5]; jne 0x00000000000b21a0; ret; 
0x000000001640ef: sub r8, 0x6; lea rcx, [rdx+0x6]; jne 0x00000000001643a0; ret; 
0x000000000b016c: sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b0980; ret; 
0x000000000b1820: sub r8, 0x6; lea rdi, [rdi+0x6]; jne 0x00000000000b21a0; ret; 
0x0000000016410d: sub r8, 0x7; lea rcx, [rdx+0x7]; jne 0x00000000001643a0; ret; 
0x000000000b018a: sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b0980; ret; 
0x000000000b183e: sub r8, 0x7; lea rdi, [rdi+0x7]; jne 0x00000000000b21a0; ret; 
0x00000000163de9: sub r8, 0x8; lea rcx, [rdx+0x8]; jne 0x00000000001643a0; ret; 
0x000000000b01a6: sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b0980; ret; 
0x000000000b185a: sub r8, 0x8; lea rdi, [rdi+0x8]; jne 0x00000000000b21a0; ret; 
0x0000000016412f: sub r8, 0x9; lea rcx, [rdx+0x9]; jne 0x00000000001643a0; ret; 
0x000000000b01c9: sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b0980; ret; 
0x000000000b187d: sub r8, 0x9; lea rdi, [rdi+0x9]; jne 0x00000000000b21a0; ret; 
0x0000000016414f: sub r8, 0xa; lea rcx, [rdx+0xa]; jne 0x00000000001643a0; ret; 
0x000000000b01ee: sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b0980; ret; 
0x000000000b18a2: sub r8, 0xa; lea rdi, [rdi+0xa]; jne 0x00000000000b21a0; ret; 
0x0000000016416f: sub r8, 0xb; lea rcx, [rdx+0xb]; jne 0x00000000001643a0; ret; 
0x000000000b020c: sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b0980; ret; 
0x000000000b18d0: sub r8, 0xb; lea rdi, [rdi+0xb]; jne 0x00000000000b21a0; ret; 
0x0000000016418f: sub r8, 0xc; lea rcx, [rdx+0xc]; jne 0x00000000001643a0; ret; 
0x000000000b022c: sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b0980; ret; 
0x000000000b18f0: sub r8, 0xc; lea rdi, [rdi+0xc]; jne 0x00000000000b21a0; ret; 
0x000000001641b1: sub r8, 0xd; lea rcx, [rdx+0xd]; jne 0x00000000001643a0; ret; 
0x000000000b024e: sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b0980; ret; 
0x000000000b1912: sub r8, 0xd; lea rdi, [rdi+0xd]; jne 0x00000000000b21a0; ret; 
0x000000001641d1: sub r8, 0xe; lea rcx, [rdx+0xe]; jne 0x00000000001643a0; ret; 
0x000000000b026e: sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b0980; ret; 
0x000000000b1942: sub r8, 0xe; lea rdi, [rdi+0xe]; jne 0x00000000000b21a0; ret; 
0x000000001641f1: sub r8, 0xf; lea rcx, [rdx+0xf]; jne 0x00000000001643a0; ret; 
0x000000000b028e: sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b0980; ret; 
0x000000000b1972: sub r8, 0xf; lea rdi, [rdi+0xf]; jne 0x00000000000b21a0; ret; 
0x00000000187d80: sub r8, rdx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x0000000000187ff0; ret; 
0x0000000018b1ec: sub r8, rdx; sub r8, 0x1; lea rdi, [rdi+rdx+0x1]; jne 0x000000000018b420; ret; 
0x0000000007b816: sub r8d, eax; mov eax, r8d; ret; 
0x0000000013bc82: sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40]; 
0x0000000013b75b: sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40]; 
0x0000000013b65f: sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000a79b7: sub r9, rcx; lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a5757: sub r9, rcx; lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a3197: sub r9, rcx; lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a87: sub r9, rcx; lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015e767: sub r9, rcx; lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5f7: sub r9, rcx; lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001502a7: sub r9, rcx; lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f027: sub r9, rcx; lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000009488a: sub rax, 0x11; shr rax, 0x4; lea rdx, [rax+0x1]; mov [rip+0x158af3], rdx; ret; 
0x000000000b41f3: sub rax, 0x1; ret; 
0x0000000010a0c3: sub rax, 0xffffffffd8f7000e; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000001426cd: sub rax, 0xffffffffffffff80; pop rbx; ret; 
0x000000000853cd: sub rax, [rdi+0x18]; ret; 
0x0000000007fc24: sub rax, [rdi+0x20]; ret; 
0x00000000110662: sub rax, [rdi+0x38]; cmp rax, rsi; jb short 0x0000000000110678; mov eax, 0x1; ret; 
0x0000000007fb02: sub rax, [rdi+0x38]; ret; 
0x0000000007bef4: sub rax, [rdx+0x10]; sar rax, 0x2; ret; 
0x0000000007fc15: sub rax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faf5: sub rax, [rdx+0x30]; sar rax, 0x2; ret; 
0x00000000139c29: sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+0x8]; call qword ptr [rax+0x28]; 
0x000000000b5cb8: sub rax, rbp; pop rbp; pop r12; ret; 
0x00000000170b92: sub rax, rcx; je short 0x0000000000170b9c; sbb eax, eax; or eax, 0x1; ret; 
0x0000000017f492: sub rax, rcx; je short 0x000000000017f49c; sbb eax, eax; or eax, 0x1; ret; 
0x00000000186432: sub rax, rcx; je short 0x000000000018643c; sbb eax, eax; or eax, 0x1; ret; 
0x000000000aa798: sub rax, rdi; ret; 
0x000000000c61d8: sub rax, rdi; shr rax, 0x2; ret; 
0x0000000007eb17: sub rax, rdx; mov [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000008782b: sub rax, rdx; mov [rsi], rax; xor eax, eax; mov [r8], rdx; ret; 
0x00000000081e80: sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000043dd8: sub rax, rdx; ret; 
0x00000000040494: sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000050e9f: sub rcx, 0x1; jae short 0x0000000000050e98; mov rax, rdx; ret; 
0x00000000050813: sub rcx, 0x8; cmp rcx, 0xfffffffffffffff8; jne short 0x0000000000050808; mov rax, rdx; ret; 
0x0000000014c291: sub rcx, [rax+0x10]; cmp rcx, [rax+0x28]; jae short 0x000000000014c280; mov eax, 0x1; ret; 
0x0000000012861e: sub rcx, r9; cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285d7: sub rcx, r9; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x00000000084388: sub rcx, rax; lea eax, [rcx-0x1]; ret; 
0x0000000007b768: sub rcx, rax; sar rcx, 0x2; lea eax, [rcx-0x1]; ret; 
0x000000000f84df: sub rcx, rdi; add ecx, 0x150; shr ecx, 0x3; rep stosq [rdi]; ret; 
0x0000000007e61b: sub rcx, rdx; cmp rax, rcx; jbe 0x000000000007e780; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f93b: sub rcx, rdx; cmp rax, rcx; jbe 0x000000000007fa90; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000082215: sub rcx, rdx; cmp rax, rcx; jbe 0x0000000000082350; mov rdi, rbx; call qword ptr [r12+0x88]; 
0x00000000083e1e: sub rcx, rdx; cmp rax, rcx; jbe 0x0000000000083ed8; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x00000000076d5b: sub rcx, rdx; cmp rax, rcx; jbe short 0x0000000000076db8; mov rdi, rbx; call qword ptr [r12+0x60]; 
0x00000000078fc5: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000007900a; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x0000000007ae04: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000007ae48; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x0000000007b679: sub rcx, rdx; cmp rax, rcx; jbe short 0x000000000007b6b0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x000000000807c5: sub rcx, rdx; cmp rax, rcx; jbe short 0x00000000000807e8; call qword ptr [rbx+0x60]; 
0x000000000823b5: sub rcx, rdx; cmp rax, rcx; jbe short 0x00000000000823f8; mov rdi, rbp; call qword ptr [rbx+0x88]; 
0x00000000083ad2: sub rcx, rdx; cmp rax, rcx; jbe short 0x0000000000083b40; mov rdi, rbx; call qword ptr [rbp+0x68]; 
0x00000000083b84: sub rcx, rdx; cmp rax, rcx; jbe short 0x0000000000083bb0; mov rdi, rbx; call qword ptr [rbp+0x20]; 
0x00000000084294: sub rcx, rdx; cmp rax, rcx; jbe short 0x00000000000842d0; mov rdi, rbx; call qword ptr [rbp+0x30]; 
0x0000000013b48a: sub rcx, rsi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret; 
0x000000000c5a6b: sub rdi, 0x10; add rax, rdi; ret; 
0x00000000154882: sub rdi, 0x20; lea r11, [rip+0x657b3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151eb2: sub rdi, 0x20; lea r11, [rip+0x67fc3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000017902a: sub rdi, 0x3f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x0000000017039c: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000173fdc: sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000154791: sub rdi, 0x40; lea r11, [rip+0x658a4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001546d1: sub rdi, 0x40; lea r11, [rip+0x65963]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151dc1: sub rdi, 0x40; lea r11, [rip+0x680b4]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151d01: sub rdi, 0x40; lea r11, [rip+0x68173]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000179064: sub rdi, 0x5f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001703c4: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000174004: sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000179044: sub rdi, 0x7f; add rax, rdi; shr rax, 0x2; vzeroupper; ret; 
0x000000001703b4: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000170190: sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000001701e4: sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x00000000080c84: sub rdi, rcx; cmp rax, rdi; jbe short 0x0000000000080cb0; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000174541: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000017461b: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000001745c7: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000174578: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000015b5ce: sub rdi, rdx; lea r11, [rip+0x5f128]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158aba: sub rdi, rdx; lea r11, [rip+0x6173c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000018b844: sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b812: sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8cb: sub rdi, rdx; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018b88f: sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018cd40: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2b: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd0: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd81: sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000a5153: sub rdx, 0x10; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x30]; ret; 
0x00000000050488: sub rdx, 0x1; jne short 0x0000000000050470; mov eax, 0x1; ret; 
0x00000000050570: sub rdx, 0x1; jne short 0x0000000000050558; mov eax, 0x1; ret; 
0x00000000131c30: sub rdx, 0x1; jne short 0x0000000000131bb8; ret; 
0x000000000a5133: sub rdx, 0x20; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a5113: sub rdx, 0x30; add rdx, rax; jl short 0x00000000000a5170; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a5103: sub rdx, 0x40; add rdx, rax; jl short 0x00000000000a5170; add rax, rdi; ret; 
0x00000000156ec0: sub rdx, 0x40; lea r11, [rip+0x63175]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000186e36: sub rdx, 0x80; add rdx, rax; jl 0x0000000000186f20; add rax, rdi; ret; 
0x00000000156f94: sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9; 
0x00000000099845: sub rdx, 0x8; and eax, 0x1; cmovne rax, rdx; ret; 
0x000000000a49cc: sub rdx, rax; jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000a4c33: sub rdx, rax; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c43: sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c53: sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c63: sub rdx, rax; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x000000000b341b: sub rdx, rcx; lea r11, [rip+0xf6fef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b2a9b: sub rdx, rcx; lea r11, [rip+0xf78ef]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b153b: sub rdx, rcx; lea r11, [rip+0xf8cfb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0deb: sub rdx, rcx; lea r11, [rip+0xf93bf]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000afe9b: sub rdx, rcx; lea r11, [rip+0xfa1bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7eb: sub rdx, rcx; lea r11, [rip+0xfa7eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c699e: sub rdx, rcx; lea rax, [rsi+rdx]; ret; 
0x000000000c9c6f: sub rdx, rcx; mov [rbx+0x8], dx; add rsp, 0x10; pop rbx; ret; 
0x000000000c7652: sub rdx, rcx; mov [rbx+0x8], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000007c33e: sub rdx, rsi; call qword ptr [rax+0x70]; 
0x00000000082ba4: sub rdx, rsi; call qword ptr [rbp+0x70]; 
0x000000000c4811: sub rdx, rsi; jbe 0x00000000000c4b20; add rax, rdi; add rax, rcx; ret; 
0x000000000c4aa8: sub rdx, rsi; jbe short 0x00000000000c4b20; add rax, rdi; ret; 
0x000000000c4ac8: sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x10]; ret; 
0x000000000c4ae8: sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x20]; ret; 
0x000000000c4b08: sub rdx, rsi; jbe short 0x00000000000c4b20; lea rax, [rdi+rax+0x30]; ret; 
0x0000000007cafa: sub rdx, rsi; mov [rsp+0x8], rcx; mov rdi, r15; call rax; 
0x00000000081613: sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax; 
0x0000000005575a: sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x000000000586af: sub rsi, rax; mov rax, [rip+0x1a4467]; mov rcx, r14; call qword ptr [rax+r8*8]; 
0x00000000044ae5: sub rsi, rdi; syscall; 
0x0000000015b270: sub rsi, rdx; lea r11, [rip+0x5f486]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b0f0: sub rsi, rdx; lea r11, [rip+0x5f606]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015af70: sub rsi, rdx; lea r11, [rip+0x5f786]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015adf0: sub rsi, rdx; lea r11, [rip+0x5f906]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015ac70: sub rsi, rdx; lea r11, [rip+0x5fa86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015aaf0: sub rsi, rdx; lea r11, [rip+0x5fc06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a970: sub rsi, rdx; lea r11, [rip+0x5fd86]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a7f0: sub rsi, rdx; lea r11, [rip+0x5ff06]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a670: sub rsi, rdx; lea r11, [rip+0x60086]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a4f0: sub rsi, rdx; lea r11, [rip+0x60206]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a370: sub rsi, rdx; lea r11, [rip+0x60386]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a1f0: sub rsi, rdx; lea r11, [rip+0x60506]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015a070: sub rsi, rdx; lea r11, [rip+0x60686]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159ef0: sub rsi, rdx; lea r11, [rip+0x60806]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159d70: sub rsi, rdx; lea r11, [rip+0x60986]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159bf7: sub rsi, rdx; lea r11, [rip+0x60aff]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158790: sub rsi, rdx; lea r11, [rip+0x61a66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158610: sub rsi, rdx; lea r11, [rip+0x61be6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158490: sub rsi, rdx; lea r11, [rip+0x61d66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158310: sub rsi, rdx; lea r11, [rip+0x61ee6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158190: sub rsi, rdx; lea r11, [rip+0x62066]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158010: sub rsi, rdx; lea r11, [rip+0x621e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157e90: sub rsi, rdx; lea r11, [rip+0x62366]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157d10: sub rsi, rdx; lea r11, [rip+0x624e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157b90: sub rsi, rdx; lea r11, [rip+0x62666]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157a10: sub rsi, rdx; lea r11, [rip+0x627e6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157890: sub rsi, rdx; lea r11, [rip+0x62966]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157710: sub rsi, rdx; lea r11, [rip+0x62ae6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157590: sub rsi, rdx; lea r11, [rip+0x62c66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157410: sub rsi, rdx; lea r11, [rip+0x62de6]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157290: sub rsi, rdx; lea r11, [rip+0x62f66]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157117: sub rsi, rdx; lea r11, [rip+0x630df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000080e46: sub rsi, rdx; mov rdi, rbx; mov edx, 0x1; call qword ptr [r12+0x80]; 
0x0000000004d75e: sub rsp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x0000000013ff19: sub rsp, 0x438; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000000d21b3: sub rsp, 0x8; call rax; 
0x00000000108ac2: sub rsp, 0x8; call rsi; 
0x00000000085cf3: sub rsp, 0x8; mov rax, [rax+0x340]; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x0000000014c3a7: sub rsp, 0x8; push qword ptr [rax]; mov rax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x00000000085e0e: sub rsp, 0x8; push rcx; mov rcx, r10; call rax; 
0x000000000946be: sub rsp, 0x8; syscall; 
0x000000000f9f64: sub rsp, 0x98; syscall; 
0x00000000093b96: sub rsp, 0xffffffffffffff80; pop rbp; pop r12; pop r13; ret; 
0x00000000041791: sub rsp, 0xffffffffffffff80; pop rbx; pop rbp; pop r12; ret; 
0x00000000145c0c: sub rsp, 0xffffffffffffff80; pop rbx; ret; 
0x0000000004057f: subps xmm0, xmm1; ret; 
0x0000000004057e: subsd xmm0, xmm1; ret; 
0x000000000408da: subss xmm0, xmm1; ret; 
0x0000000002d204: syscall; 
0x0000000007a6fd: sysenter; 
0x000000000b1c8f: test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret; 
0x0000000003a7c6: test [rax+0x200], bh; ret; 
0x0000000018b1b3: test [rax+0x2], ebp; add [rax], al; ret; 
0x00000000175f83: test [rax+0x2], ebx; add [rax], al; vzeroupper; ret; 
0x00000000176c93: test [rax+0x2], edi; add [rax], al; vzeroupper; ret; 
0x00000000065135: test [rax+0x31fffffa], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000001770fb: test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000b052b: test [rax+0x4], edx; add [rax], al; ret; 
0x000000000f8acd: test [rax+0x4cfffffe], ebx; mov esi, ebp; lea rdi, [rip+0xb6bad]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88]; 
0x00000000168183: test [rax+0x6], ebp; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000b1a4b: test [rax+0x7], edx; add [rax], al; ret; 
0x000000000b194b: test [rax+0x8], edx; add [rax], al; ret; 
0x0000000017a0ae: test [rax+0xf000009], eax; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx]; 
0x00000000068364: test [rax+0xfffffa], esp; add [rax], al; add cl, ch; scasd [rdi]; ret; 
0x0000000005e844: test [rax+0xfffffb], edi; add [rax], al; add [rax-0x7d], cl; ret; 
0x000000000324d9: test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000e9946: test [rax+rax*4], ah; add al, [rax]; add [rax-0x73], cl; ret; 
0x000000000e894a: test [rax+rax*8], ah; add [rax], al; add al, ch; ret far; 
0x0000000017c45f: test [rax+rax+0x40a80000], edi; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x000000000c5cbf: test [rax+rax-0xf580000], ebp; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000e9294: test [rax+rbx*4], ah; add [rax], al; add [rax+0x63], cl; ret; 
0x0000000016da08: test [rax+rbx-0x76b30000], al; ret far; 
0x000000000f873f: test [rax+rcx*2], ah; add [rax], eax; add [rax+0xe], bh; syscall; 
0x0000000006e472: test [rax+rcx*4], ah; add [rax], al; add al, ch; ret; 
0x0000000008a026: test [rax+rdi*4], ah; add [rax], al; add [rdi+0x1], bh; mov eax, 0xe; syscall; 
0x000000000eb02a: test [rax+rdi*4], ah; add [rax], al; add cl, al; call far fword ptr [rax]; 
0x00000000031923: test [rax+rdx*4], ah; add [rax], al; add [rax+0x39], cl; ret; 
0x000000000662fd: test [rax-0x16000006], ebp; shl ebx, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000061bd1: test [rax-0x16000007], ebx; ret; 
0x000000001432c7: test [rax-0x5], esi; jmp qword ptr [rsi-0x7d]; 
0x0000000006cfb5: test [rax-0x76000009], ecx; ret; 
0x0000000006c342: test [rax-0x7a000009], ecx; ror byte ptr [rdi], 0x88; imul edi, ecx, 0xffffffff; inc dword ptr [rcx]; ret; 
0x0000000016863b: test [rax-0x7fffffff], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000179135: test [rax-0x81], cl; shr eax, 0x2; vzeroupper; ret; 
0x000000000e7288: test [rax], ah; add [rax], al; add [rbp-0x7b], al; ror byte ptr [rdi], 0x8e; ret far; 
0x0000000015f96c: test [rax], al; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000c5faa: test [rax], al; add [rax], al; add [rax], al; add rax, 0x3; ret; 
0x0000000017c4ea: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x2]; ret; 
0x0000000017c4fa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x3]; ret; 
0x0000000017c50a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x4]; ret; 
0x0000000017c51a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x5]; ret; 
0x0000000017c52a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x6]; ret; 
0x0000000017c53a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x8]; ret; 
0x0000000017c54a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0x9]; ret; 
0x0000000017c55a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret; 
0x0000000017c56a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret; 
0x0000000017c57a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret; 
0x0000000017c58a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret; 
0x0000000017c59a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret; 
0x000000000c5d7a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0x4]; ret; 
0x000000000c5d6a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0x8]; ret; 
0x000000000c5d5a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret; 
0x0000000002d3fa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x181bef]; ret; 
0x0000000002d40a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x183a80]; ret; 
0x0000000016423a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], edx; ret; 
0x0000000016427a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; ret; 
0x000000000b08aa: test [rax], al; add [rax], al; add [rax], al; mov [rdi-0x1], rdx; ret; 
0x000000000af87a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dh; ret; 
0x00000000187f5a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dl; ret; 
0x000000000b08ba: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; ret; 
0x0000000013a71a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0x8; ret; 
0x0000000013a70a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000013a6fa: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret; 
0x0000000013a6ea: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x0000000005c2ca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x10; ret; 
0x000000000ff21a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x10; syscall; 
0x000000000879da: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x16; ret; 
0x0000000009191a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x18; syscall; 
0x0000000009a1da: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x1; ret; 
0x000000000d7c8a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x27; syscall; 
0x0000000013ad3a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x2; ret; 
0x0000000008a96a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x3; ret; 
0x000000000d736a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x3b; syscall; 
0x0000000010b1ca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x40; syscall; 
0x0000000005c14a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x52; syscall; 
0x000000000f977a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x5a; syscall; 
0x000000000d7caa: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x66; syscall; 
0x000000000d7cca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x68; syscall; 
0x000000000d7cba: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6b; syscall; 
0x000000000d7cda: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6c; syscall; 
0x000000000d7c9a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6e; syscall; 
0x000000000d7cea: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x73; syscall; 
0x000000000eff9a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x8e; syscall; 
0x00000000108ffa: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xa6; syscall; 
0x000000000ffb3a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xaa; syscall; 
0x0000000008f66a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xb; ret; 
0x000000000ff11a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xc; syscall; 
0x000000000f018a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xcb; syscall; 
0x0000000010a32a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xea; syscall; 
0x00000000093f5a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xf5; syscall; 
0x0000000007c80a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xffffffff; ret; 
0x0000000012f71a: test [rax], al; add [rax], al; add [rax], al; mov eax, [rdi+0x20]; ret; 
0x00000000041e1a: test [rax], al; add [rax], al; add [rax], al; mov eax, [rip+0x1ab39e]; ret; 
0x0000000006f62a: test [rax], al; add [rax], al; add [rax], al; mov r14d, 0x1; jmp rax; 
0x000000000c5fda: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x2; ret; 
0x000000000c5fea: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x3; ret; 
0x000000000c5ffa: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x4; ret; 
0x000000000c600a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x5; ret; 
0x000000000c601a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x6; ret; 
0x000000000c602a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0x7; ret; 
0x00000000084d8a: test [rax], al; add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000014c4aa: test [rax], al; add [rax], al; add [rax], al; mov rax, [rax+0x370]; call qword ptr [rax+0x48]; 
0x000000000856ca: test [rax], al; add [rax], al; add [rax], al; mov rax, [rax+0x370]; jmp qword ptr [rax+0x30]; 
0x000000001454da: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi+0x8]; jmp qword ptr [rax+0x48]; 
0x0000000009a02a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x152da9]; call qword ptr [rax]; 
0x0000000002deba: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x1c1839]; ret; 
0x0000000002deaa: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x1c1841]; ret; 
0x0000000008fcaa: test [rax], al; add [rax], al; add [rax], al; mov rax, fs:[0x10]; ret; 
0x00000000084dfa: test [rax], al; add [rax], al; add [rax], al; mov rax, rdi; ret; 
0x0000000009a15a: test [rax], al; add [rax], al; add [rax], al; mov rdi, rbp; call rax; 
0x000000000b092a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi-0x1], xmm0; ret; 
0x000000000b093a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret; 
0x00000000138f25: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; ret; 
0x00000000086626: test [rax], al; add [rax], al; add [rax], al; nop [rax]; ret; 
0x00000000115cd9: test [rax], al; add [rax], al; add [rax], al; nop; ret; 
0x000000000388ca: test [rax], al; add [rax], al; add [rax], al; ret; 
0x000000001756da: test [rax], al; add [rax], al; add [rax], al; vzeroupper; ret; 
0x0000000002d158: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; ret; 
0x00000000084d9a: test [rax], al; add [rax], al; add [rax], al; xor eax, eax; ret; 
0x000000000c5d8a: test [rax], al; add [rax], al; add [rax], al; xor rax, rax; ret; 
0x0000000016026c: test [rax], al; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000015f06c: test [rax], al; sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000e61e3: test [rax], bh; add eax, [rax]; add [rax-0x7d], cl; ret; 
0x000000000929e3: test [rax], bl; add [rax], eax; add [rax-0x77], cl; ret; 
0x000000000929c4: test [rax], bl; add al, 0x0; add [rbx-0x76b7ffab], cl; ret far; 
0x000000000a8e7c: test [rax], dh; adc [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000487d2: test [rax], eax; add [rax-0x7d], cl; ret; 
0x00000000070356: test [rax], eax; add [rax], al; add [rax+0x29], cl; ret; 
0x0000000013cc1a: test [rax], eax; add [rbp-0x3f6af040], al; add rsp, 0x8; movzx eax, al; ret; 
0x000000000f89d8: test [rax], eax; add rax, r13; jmp rax; 
0x000000001685db: test [rax], edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000071594: test [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000715a1: test [rax], esp; idiv edi; jmp qword ptr [rax]; 
0x000000000f89d7: test [rax], r8d; add rax, r13; jmp rax; 
0x000000000bad5b: test [rbp+0x1], al; dec dword ptr [rax-0x7d]; ret; 
0x000000000652ce: test [rbp+0x31000044], ebx; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000006da70: test [rbp+0x36e9ffff], ecx; loop 0x000000000006da78; jmp qword ptr [rsi+0xf]; 
0x000000000c62be: test [rbp+0x48000000], bl; bsf eax, edx; shr rax, 0x2; ret; 
0x00000000164556: test [rbp+0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret; 
0x0000000013a2bf: test [rbp+0x48fffffe], cl; mov edi, ebx; call rax; 
0x00000000151a78: test [rbp+0x634f0006], al; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x0000000016e538: test [rbp+rcx], dl; add [rbp-0x77], cl; ret far; 
0x0000000010fe3b: test [rbp+rdi*8+0x3c6ffff], dl; add [rax-0x7d], cl; ret; 
0x00000000075a6b: test [rbp+rdi*8-0x7cb60001], ecx; ret; 
0x00000000074fdd: test [rbp-0x16000010], eax; shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000005d3e7: test [rbp-0x76ffff9d], ebx; ret; 
0x00000000188c5e: test [rbp], bh; add [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000c5690: test [rbx+0x1], ecx; add [rax], al; ret; 
0x000000000c5bf8: test [rbx+0x1], esp; add [rax], al; lea rax, [rdi-0x10]; ret; 
0x00000000164158: test [rbx+0x2], eax; add [rax], al; ret; 
0x00000000164138: test [rbx+0x2], esp; add [rax], al; ret; 
0x00000000164050: test [rbx+0x3], ecx; add [rax], al; ret; 
0x000000001412b5: test [rbx+0x48fffffa], bh; mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000140e55: test [rbx+0x5], ah; add [rax], al; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x000000000b1b40: test [rbx+0x6], ebx; add [rax], al; ret; 
0x0000000017a2e7: test [rbx+0x7], edx; add [rax], al; xor eax, eax; ret; 
0x000000001684e7: test [rbx+rax], eax; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x0000000017a736: test [rbx+rax], eax; add [rax], al; xor eax, eax; ret; 
0x00000000168487: test [rbx+rax], esp; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000004f0cc: test [rbx+rbx*4], ah; add [rax], al; add [rcx-0x7d], cl; ret; 
0x0000000016e718: test [rbx+rcx], dh; add [rbp-0x77], cl; ret far; 
0x00000000072888: test [rbx-0x7c00001b], dh; ret; 
0x000000000db66f: test [rbx-0x7cb7f3ad], cl; ret; 
0x00000000060c48: test [rbx], bl; ret; 
0x00000000060438: test [rbx], ch; ret far; 
0x0000000002ef74: test [rbx], cl; add al, [rax]; add [rax-0x7d], cl; ret; 
0x00000000039dd8: test [rcx+0x1b], bl; add al, ch; call far fword ptr [rax+0x5]; 
0x00000000163e5a: test [rcx+0x5], eax; add [rax], al; ret; 
0x0000000017a2bd: test [rcx+0x7], esi; add [rax], al; xor eax, eax; ret; 
0x000000000b0112: test [rcx+0x8], ebp; add [rax], al; ret; 
0x0000000017a1cd: test [rcx+0x8], esp; add [rax], al; xor eax, eax; ret; 
0x0000000017a0dd: test [rcx+0x9], edx; add [rax], al; xor eax, eax; ret; 
0x000000000f5ba7: test [rcx+rax-0x20], cl; jmp rax; 
0x000000001284c7: test [rcx+rax], ah; add [rbp-0x77], cl; ret far; 
0x000000000aa3ef: test [rcx+rax], ch; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret; 
0x0000000013e53f: test [rcx+rax], cl; add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x000000000c56d7: test [rcx+rax], eax; add [rax], al; ret; 
0x0000000017e207: test [rcx+rax], edx; add [rax], al; ret; 
0x000000000c56a7: test [rcx+rax], esi; add [rax], al; ret; 
0x0000000016e8f8: test [rcx+rcx-0x76b30000], dl; ret far; 
0x0000000006079d: test [rcx-0x16000023], cl; nop; sar bh, 0x1; jmp qword ptr [rsi+0xf]; 
0x000000001641fa: test [rcx-0x3cffffff], esp; ret; 
0x000000000771c7: test [rcx-0x5], edx; call far fword ptr [rbx+0x4c]; 
0x000000001252ca: test [rcx-0x7cfffff8], al; call far fword ptr [rsp+rsi*2]; 
0x0000000004526a: test [rcx-0x7cffffff], al; jmp qword ptr [rdi+rcx]; 
0x0000000010ef18: test [rcx-0x9], bh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x00000000174036: test [rcx-0xc000002], ch; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000001790f2: test [rcx-0xd000000], cl; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x0000000012db8a: test [rcx], ah; add al, [rax]; add [rcx-0x7d], cl; ret; 
0x00000000151516: test [rcx], bh; add al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000016aae6: test [rcx], bh; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000150826: test [rcx], ch; adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x0000000016a9f6: test [rcx], ch; or eax, 0x894d0000; ret far; 
0x00000000150546: test [rcx], cl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000093712: test [rcx], dl; add [rax], eax; add [rbx-0x3f7c77bb], cl; add [rcx-0x7cb777bb], ecx; ret; 
0x0000000009beba: test [rcx], eax; add [rax-0x73], cl; add eax, 0x1861c; cmove rax, rdx; ret; 
0x00000000132d54: test [rdi+0x21000001], dl; fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x000000000694b0: test [rdi+0x3100001a], ebx; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000883b4: test [rdi+0x45000000], bl; xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000018bbb5: test [rdi+0x80], al; ret; 
0x0000000018de96: test [rdi+0xa0], al; ret; 
0x0000000018dea6: test [rdi+0xc0], al; ret; 
0x0000000018de6c: test [rdi+0xe0], al; ret; 
0x000000000d4ef3: test [rdi+0xf000000], bh; mov dh, 0x43; add [rax-0x7d], ecx; ret; 
0x0000000016ead8: test [rdi+rax-0x76b30000], dh; ret far; 
0x000000000b0277: test [rdi+rax], eax; add [rax], al; ret; 
0x000000000b0257: test [rdi+rax], esp; add [rax], al; ret; 
0x0000000018ba6f: test [rdi+rdi*8-0x1], ch; jmp qword ptr [rsi+0x66]; 
0x000000000e08c4: test [rdi+rdi*8-0x1], dh; inc ebx; nop [rax+rax]; ret; 
0x00000000146e71: test [rdi+rdi*8-0x1], ebp; jmp far fword ptr [rax+0x412e7501]; 
0x00000000123ce9: test [rdi+rdi*8-0x1], edx; inc dword ptr [rax]; add [rax], al; add [rcx-0x877b], cl; jmp qword ptr [rsi+0x44]; 
0x000000000717e6: test [rdi+rsi*8-0x1], ecx; inc dword ptr [rbp-0x37af040]; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x000000000de494: test [rdi+rsi*8-0x1d160001], ch; idiv edi; jmp qword ptr [rsi-0x70]; 
0x00000000139987: test [rdi-0x72b40000], ebp; and al, 0x18; call qword ptr [rax]; 
0x00000000178ee4: test [rdi-0xd000000], dl; bsf eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x000000000b01f8: test [rdi], al; add [rax], al; ret; 
0x0000000018d9c9: test [rdi], al; loopne 0x000000000018d9cd; add [rax], al; ret; 
0x0000000018d9e6: test [rdi], al; mov al, [0xf3001f0fc3000000]; bsf eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000004caa6: test [rdi], bh; add al, 0x0; add [rax+0x39], cl; ret; 
0x000000000cfe7c: test [rdi], bl; sbb eax, [rax]; add [rcx], ch; ret; 
0x0000000014a94d: test [rdi], eax; add [rax], eax; add [rax-0x7d], cl; ret; 
0x00000000040bc5: test [rdi], edx; add [rsi+0xf], ah; fild st, dword ptr [rip+0x1785a0]; por xmm0, xmm1; ret; 
0x00000000176061: test [rdx+0x1], edi; add [rax], al; vzeroupper; ret; 
0x000000001685a9: test [rdx+0x2], eax; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000168579: test [rdx+0x2], esi; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x000000000aa361: test [rdx+0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x0000000018afd9: test [rdx+0x4], eax; add [rax], al; ret; 
0x00000000176ac9: test [rdx+0x4], eax; add [rax], al; vzeroupper; ret; 
0x000000000b0411: test [rdx+0x5], ebp; add [rax], al; ret; 
0x000000000b1829: test [rdx+0x9], esi; add [rax], al; ret; 
0x0000000017b632: test [rdx+rax], edi; add [rax], al; xor eax, eax; ret; 
0x0000000016d828: test [rdx+rbx], ah; add [rbp-0x77], cl; ret far; 
0x0000000017a002: test [rdx+rcx], ebp; add [rax], al; xor eax, eax; ret; 
0x00000000168b59: test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66]; 
0x00000000168461: test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000168439: test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000168549: test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret; 
0x00000000164117: test [rdx], eax; add [rax], al; ret; 
0x000000001684b9: test [rdx], esi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000013b004: test [rip+0x4c000001], dl; mov edi, esp; call qword ptr [rbx]; 
0x000000000a522e: test [rip+0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000008388c: test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e]; 
0x000000000619c0: test [rip-0x16000015], ah; sahf; mov ch, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000001704de: test [rip-0x3affffff], ebp; std; xlat [rbx]; ret; 
0x0000000017db92: test [rsi+0x1], ebp; add [rax], al; xor eax, eax; ret; 
0x00000000176d95: test [rsi+0x1], esi; add [rax], al; vzeroupper; ret; 
0x0000000016ffad: test [rsi+0x29fffffe], ebx; enter 0xf8c5, 0x77; ret; 
0x00000000187d8d: test [rsi+0x2], ebx; add [rax], al; ret; 
0x0000000018b1cd: test [rsi+0x2], ecx; add [rax], al; ret; 
0x00000000102a84: test [rsi+0x2e], esp; nop [rax+rax]; nop; mov eax, 0xb; syscall; 
0x0000000006524e: test [rsi+0x31000047], ecx; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x000000000aa83d: test [rsi+0x48000000], bl; bsf eax, edx; ret; 
0x000000000c5c9d: test [rsi+0x48000000], edi; lea eax, [rdi-0x10]; ret; 
0x000000000a501d: test [rsi+0x66000000], ebp; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000b0235: test [rsi+0x7], eax; add [rax], al; ret; 
0x000000000b0215: test [rsi+0x7], esp; add [rax], al; ret; 
0x000000000b012d: test [rsi+0x8], ecx; add [rax], al; ret; 
0x000000001333aa: test [rsi+rdi*8-0x1], al; call qword ptr [rax+0xb885c7]; 
0x0000000011fb83: test [rsi+rdi*8-0x1], dh; dec dword ptr [rax-0x77]; fucomip st, st(0); mov dword ptr [rdx], 0xe7894c00; call rbx; 
0x0000000016dbd8: test [rsi+rdx-0x76b30000], dh; ret far; 
0x000000000dc9df: test [rsi+rsi*8-0x1], ch; dec dword ptr [rcx-0x16e7dbbc]; ret far; 
0x0000000016ffed: test [rsi-0xd000000], bl; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000177e2d: test [rsi-0xd000000], ch; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000018d0cd: test [rsi-0xd000000], ch; bsf eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000185d0d: test [rsi-0xd000000], cl; bsf eax, eax; add rax, rdi; ret; 
0x00000000115eba: test [rsi], al; add [rax-0x73], cl; add eax, 0x6851c; cmove rax, rdx; ret; 
0x000000000aa67d: test [rsi], bh; add [rax], al; bsf rax, rdx; ret; 
0x0000000017295e: test [rsi], ch; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000017265e: test [rsi], ch; adc eax, 0x894d0000; ret far; 
0x000000000dc1fd: test [rsi], ch; add al, 0x0; add [rbx-0x6bf0a301], al; ret; 
0x0000000017385e: test [rsi], ch; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000017325e: test [rsi], ch; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000172f5e: test [rsi], ch; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x00000000115d9a: test [rsi], eax; add [rax-0x73], cl; add eax, 0x6863c; cmove rax, rdx; ret; 
0x00000000151a18: test [rsi], eax; add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9; 
0x0000000017a508: test [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000016d648: test [rsp+rbx], al; add [rbp-0x77], cl; ret far; 
0x000000000e868b: test [rsp+rsi*4], ah; add [rax], eax; add [rcx], bh; ret; 
0x0000000017c4b6: test ah, 0x40; jne 0x000000000017c5a0; lea rax, [rdi+0xf]; ret; 
0x000000000548b8: test ah, ah; add eax, [rax]; add [rax+0x39], cl; ret; 
0x0000000016df98: test ah, dh; adc al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016ee98: test ah, dh; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016ddb8: test ah, dl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000d1b20: test ah, dl; add [rax], al; add [rbx+rcx*4+0x74], cl; ret; 
0x0000000016ecb8: test ah, dl; add eax, 0x894d0000; ret far; 
0x0000000013de49: test al, 0x0; add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18]; 
0x00000000043664: test al, 0x0; add [rax], al; call rax; 
0x0000000013dd23: test al, 0x0; add [rax], al; mov eax, 0x1; ret; 
0x000000000d868f: test al, 0x0; add [rax], al; pop rbx; pop rbp; ret; 
0x000000001427af: test al, 0x0; add [rax], al; pop rbx; ret; 
0x00000000039670: test al, 0x0; add [rax], al; ret; 
0x00000000100441: test al, 0x0; add [rax], al; syscall; 
0x00000000187e44: test al, 0x1; add [rax], al; ret; 
0x0000000008f604: test al, 0x1; jne short 0x000000000008f610; xor eax, eax; ret; 
0x0000000008f6bc: test al, 0x1; jne short 0x000000000008f690; mov eax, 0x10; ret; 
0x0000000013911b: test al, 0x22; add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18]; 
0x000000000b5554: test al, 0x24; or al, 0x0; jne short 0x00000000000b5500; ret; 
0x00000000088591: test al, 0x2; je short 0x0000000000088599; or dword ptr [rdi+0x24], 0x2; xor eax, eax; ret; 
0x0000000008e7a2: test al, 0x2; je short 0x000000000008e7b0; xor eax, eax; ret; 
0x0000000017c464: test al, 0x40; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x0000000008a3c1: test al, 0x40; jne short 0x000000000008a3e3; xor edi, edi; mov eax, 0x91; syscall; 
0x000000000ede71: test al, 0x66; nop [rax+rax]; mov eax, 0x2; ret; 
0x000000000b35e8: test al, 0x6e; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000e08ee: test al, 0x83; jrcxz 0x00000000000e08fa; je short 0x00000000000e0877; pop rbx; ret; 
0x00000000142534: test al, 0xa; add [rax-0x73], cl; adc eax, 0xba222; mov fs:[rax], rdx; ret; 
0x000000000d0124: test al, 0xc1; cmc; jmp far fword ptr [rcx]; 
0x000000000c5bf5: test al, 0xf0; jne 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x000000000c5d08: test al, 0xf0; jne short 0x00000000000c5d60; lea rax, [rdi-0x10]; ret; 
0x0000000011c021: test al, 0xf6; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x000000000af736: test al, 0xf; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000eb3d3: test al, ah; add eax, 0x85450000; in al, 0x74; ret; 
0x000000000a90cc: test al, ah; or eax, 0x894d0000; ret far; 
0x0000000004306b: test al, al; add [rax], al; add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret; 
0x0000000015e9ac: test al, al; and [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000090649: test al, al; je short 0x0000000000090658; xor eax, eax; add rsp, 0x8; ret; 
0x00000000098560: test al, al; je short 0x000000000009856b; mov [rip+0x15cc45], rdx; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x000000000a30ea: test al, al; jne short 0x00000000000a30d0; xor eax, eax; sub eax, ecx; ret; 
0x000000000d90be: test al, al; jne short 0x00000000000d909f; xor eax, eax; ret; 
0x000000000db429: test al, al; jne short 0x00000000000db3f9; xor eax, eax; ret; 
0x000000000ee1ee: test al, al; jne short 0x00000000000ee1cf; xor eax, eax; ret; 
0x00000000116316: test al, al; jne short 0x00000000001162c1; mov rax, r9; ret; 
0x00000000128a32: test al, al; jne short 0x0000000000128a16; mov eax, r10d; ret; 
0x00000000193025: test al, al; jne short 0x0000000000193030; pop rbp; ret; 
0x000000000d90db: test al, al; mov eax, 0x0; cmovne rax, rdi; ret; 
0x0000000015f2ac: test al, al; sbb [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000a82ec: test al, al; sbb eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000019188a: test al, bl; add [rax], al; add [rcx-0x77], cl; ret; 
0x000000000a89dc: test al, dl; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000006bbdb: test al, dl; add [rax], al; add [rbx-0x88f63], cl; jmp far fword ptr [rcx]; 
0x0000000007563a: test ax, ax; je short 0x0000000000075650; lea rdx, [rip+0x1330da]; add rax, rdx; ret; 
0x00000000143ce1: test bh, 0x43; adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28]; 
0x00000000045ce9: test bh, bh; cmovne eax, ecx; add rsp, 0x8; ret; 
0x000000000cbc2f: test bh, bl; add [rax], al; add dh, dh; ret; 
0x0000000007710f: test bl, al; add [rax], al; add [rax-0x77], cl; ret; 
0x000000000531f0: test bl, bh; adc eax, 0x80400000; jmp qword ptr [rbp+0xf]; 
0x000000000354ff: test bl, bl; add [rax], al; add [rax-0x73], cl; add r9b, [rax+0x39]; ret far; 
0x00000000103c7c: test byte ptr [r10+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x00000000110b30: test byte ptr [r8+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x00000000110b31: test byte ptr [r8+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x000000001537c9: test byte ptr [r9-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x0000000013b4ad: test byte ptr [rax+0x1], 0xc6; cmp rsi, [rdx+0x28]; ja short 0x000000000013b4a0; mov [rdx+0x20], rsi; ret; 
0x0000000009b9ee: test byte ptr [rax+0x1a4], 0x8; lea rax, [rip+0x18394]; cmove rax, rdx; ret; 
0x000000000b4d79: test byte ptr [rax+0x1a6], 0x2; je short 0x00000000000b4d89; or dword ptr [rip+0x1404cf], 0x1; xor eax, eax; ret; 
0x000000000d86ea: test byte ptr [rax+0x63], 0x4; mov dl, 0x48; add eax, edx; jmp rax; 
0x000000000b4f9e: test byte ptr [rax+0x9d], 0x2; lea rax, [rip+0x10924]; cmovne rax, rdx; ret; 
0x0000000009b2ce: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19094]; cmovne rax, rdx; ret; 
0x0000000009b1ae: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x19114]; cmovne rax, rdx; ret; 
0x0000000009ac3e: test byte ptr [rax+0x9e], 0x10; lea rax, [rip+0x195e4]; cmovne rax, rdx; ret; 
0x00000000110b32: test byte ptr [rax+rsi*2], 0x8; je short 0x0000000000110b20; mov eax, r9d; ret; 
0x0000000009bb19: test byte ptr [rax-0x73], 0x15; mov edi, 0x48000ea1; lea eax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x00000000077a3b: test byte ptr [rax-0x77], 0xdf; call qword ptr [r15+0x38]; 
0x00000000084708: test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58]; 
0x0000000011c70d: test byte ptr [rax-0x77], 0xdf; call qword ptr [rsp+0x18]; 
0x0000000007f115: test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10]; 
0x00000000139c51: test byte ptr [rax-0x77], 0xef; call qword ptr [rax+0x28]; 
0x00000000076916: test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000006e0af: test byte ptr [rax-0x77], 0xef; call qword ptr [rcx+0x38]; 
0x000000000f9130: test byte ptr [rax-0x77], 0xef; call rax; 
0x000000001390fd: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139082: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000f9163: test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall; 
0x0000000008c65e: test byte ptr [rax-0x77], 0xef; mov eax, r13d; syscall; 
0x0000000008b982: test byte ptr [rax-0x77], 0xef; mov eax, r15d; syscall; 
0x00000000050e9e: test byte ptr [rax-0x7d], 0xe9; add [rbx-0xd], esi; mov rax, rdx; ret; 
0x000000000d06fc: test byte ptr [rbp+0x1b8db], 0x0; add [rdi], cl; ret; 
0x0000000008e914: test byte ptr [rbp+0x31], 0xd2; and esi, 0x80; add esi, 0x1; syscall; 
0x0000000016f355: test byte ptr [rbp+0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000004119e: test byte ptr [rbp-0x6bf0bf40], 0xc6; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x0000000016f499: test byte ptr [rbp-0x7a958a2e], 0xf6; je short 0x000000000016f480; xor eax, eax; ret; 
0x00000000084216: test byte ptr [rbp], 0x80; jne short 0x0000000000084240; pop rbp; ret; 
0x000000001144de: test byte ptr [rbx+0x1c], 0x20; je short 0x00000000001144f0; pop rbx; ret; 
0x0000000009a22d: test byte ptr [rbx+0x50], 0x1; jne short 0x000000000009a208; mov rdi, rsi; call rax; 
0x000000001537a6: test byte ptr [rbx-0x76b303aa], 0x5f; out dx, al; mov [rdi-0xa], rcx; mov [rdi-0x4], edx; ret; 
0x000000001537c2: test byte ptr [rbx-0x76b703aa], 0x4f; test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000145781: test byte ptr [rcx+0x14c2847], 0xc6; mov [rdi+0x18], rsi; mov rax, r8; ret; 
0x00000000103c76: test byte ptr [rcx+0x8], 0x1; je short 0x0000000000103cb5; test byte ptr [r10+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x00000000087e6c: test byte ptr [rcx+0xc741], 0x0; add [rax], al; syscall; 
0x00000000088cf1: test byte ptr [rcx+0xcab8], 0x0; syscall; 
0x00000000117d85: test byte ptr [rcx+0xff009f8], 0xc8; ret; 
0x00000000119c77: test byte ptr [rcx+rcx*4+0x35], 0xd9; ret far; 
0x0000000013760d: test byte ptr [rcx+rcx*4-0x11], 0xe8; jp short 0x000000000013765e; dec dword ptr [rax-0x77]; ret; 
0x000000001447fd: test byte ptr [rcx+rcx*4-0x19], 0x41; call rbp; 
0x00000000130a2f: test byte ptr [rcx+rcx*4-0x1], 0x48; mov [rsp+0x8], eax; mov rcx, rax; call r12; 
0x0000000012c7dc: test byte ptr [rcx+rcx*4-0x1], 0xe8; ret far; 
0x00000000043b10: test byte ptr [rcx+rcx*4-0x31], 0x41; call rbp; 
0x0000000011e4f8: test byte ptr [rcx+rcx*4-0x9], 0xe8; out dx, eax; insb [rdi], dx; bnd jmp qword ptr [rsi-0x77]; 
0x00000000111374: test byte ptr [rcx+rsi*2+0x1], 0x40; cmovne eax, edx; ret; 
0x0000000012ce02: test byte ptr [rcx-0x276b72a], 0xe8; ret; 
0x000000000868c2: test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rax+0xca], bh; syscall; 
0x00000000088942: test byte ptr [rcx-0x452dcebb], 0x1; add [rax], al; add [rcx+rcx*4-0x39], cl; mov eax, 0xca; syscall; 
0x000000001537ca: test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-0x2]; mov [rdi-0x2], dx; ret; 
0x00000000099fb7: test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx; 
0x0000000008e280: test byte ptr [rdi+0x31d23145], 0xd2; mov eax, 0xca; syscall; 
0x0000000009a07e: test byte ptr [rdi+0x50], 0x1; je 0x000000000009a160; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax; 
0x0000000007b087: test byte ptr [rdi], 0x2; jne short 0x000000000007b0f0; mov rax, [rax+0xe0]; call qword ptr [rax+0x68]; 
0x0000000007fb62: test byte ptr [rdi], 0x4; sete al; ret; 
0x000000000831f0: test byte ptr [rdi], 0x80; jne short 0x0000000000083200; ret; 
0x000000000f65ef: test byte ptr [rdi], 0x84; inc byte ptr [rip-0x7cb80000]; ret; 
0x000000000ef67d: test byte ptr [rdi], 0x85; ret; 
0x000000000c274e: test byte ptr [rdi], 0x88; ret far; 
0x0000000007fb72: test byte ptr [rdi], 0x8; sete al; ret; 
0x000000000e2865: test byte ptr [rdx+0x63], 0x4; mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000103c7d: test byte ptr [rdx+0x8], 0x1; jne short 0x0000000000103cc0; ret; 
0x0000000009bf7c: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x134b6]; lea rdx, [rip+0xc8f3f]; cmovne rax, rdx; ret; 
0x0000000009abcc: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x14786]; lea rdx, [rip+0xc5fbf]; cmovne rax, rdx; ret; 
0x0000000009aa1c: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x17926]; lea rdx, [rip+0xff8f]; cmovne rax, rdx; ret; 
0x0000000009c00c: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x5946]; lea rdx, [rip+0xca6bf]; cmovne rax, rdx; ret; 
0x0000000009b0cc: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x68e6]; lea rdx, [rip+0xc726f]; cmovne rax, rdx; ret; 
0x0000000009af9c: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x6966]; lea rdx, [rip+0x1162f]; cmovne rax, rdx; ret; 
0x0000000009ab2c: test byte ptr [rdx+0x9d], 0x2; lea rax, [rip+0x6ed6]; lea rdx, [rip+0xb446f]; cmovne rax, rdx; ret; 
0x000000000b505b: test byte ptr [rdx+0x9e], 0x8; lea rax, [rip+0x10d37]; lea rdx, [rip+0x10fd0]; cmovne rax, rdx; ret; 
0x000000000b660b: test byte ptr [rdx+0x9e], 0x8; lea rax, [rip+0xfbc7]; lea rdx, [rip+0xfbf0]; cmovne rax, rdx; ret; 
0x000000000e090e: test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000e083d; ret; 
0x000000000e08bc: test byte ptr [rdx+0xc8], 0x80; je 0x00000000000e083d; ret; 
0x0000000015b0f7: test byte ptr [rip+0x14634900], 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000143356: test byte ptr [rsi-0x72b70001], 0x5; call qword ptr [rdx-0x76b6fff6]; 
0x0000000014d056: test byte ptr [rsi], 0xf0; jmp qword ptr [rsi+0xf]; 
0x0000000009aadc: test ch, 0x8; jne short 0x000000000009aaa1; ret; 
0x00000000132b0e: test ch, ah; add al, [rax]; add [rcx-0x77], cl; jmp qword ptr [rsi+0x2e]; 
0x00000000191989: test ch, bh; add [rax], al; add [rcx-0x77], cl; ret; 
0x00000000065741: test cl, ah; or al, 0x0; add al, ch; syscall; 
0x0000000016d4ab: test cl, ah; sbb eax, 0x894d0000; ret far; 
0x0000000016b626: test cl, bh; add [rax], al; add [rbp-0x77], cl; ret far; 
0x00000000150f56: test cl, bh; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000bf6d7: test cl, bl; add [rax], al; add [rbp-0x77], cl; ret; 
0x0000000016b446: test cl, bl; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000150c76: test cl, bl; or al, 0x0; add [rbp-0x77], cl; ret far; 
0x000000000a3746: test cl, ch; adc [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000a3446: test cl, ch; adc al, 0x0; add [rbp-0x77], cl; ret far; 
0x0000000016b536: test cl, ch; add [rax], eax; add [rbp-0x77], cl; ret far; 
0x000000000a4646: test cl, ch; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000a4346: test cl, ch; add eax, 0x894d0000; ret far; 
0x000000000a4046: test cl, ch; or [rax], al; add [rbp-0x77], cl; ret far; 
0x000000000a3d46: test cl, ch; or eax, [rax]; add [rbp-0x77], cl; ret far; 
0x00000000151686: test cl, cl; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016b356: test cl, cl; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x000000000c90a3: test cl, cl; idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x000000000a110c: test cl, cl; jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x000000000b3e7f: test cl, cl; jne short 0x00000000000b3e70; ret; 
0x000000000b3f2f: test cl, cl; jne short 0x00000000000b3f20; ret; 
0x000000000b41ef: test cl, cl; jne short 0x00000000000b41e0; sub rax, 0x1; ret; 
0x000000000a12f5: test cl, dl; jne short 0x00000000000a12d8; mov rax, r8; ret; 
0x000000000a1424: test cl, dl; jne short 0x00000000000a1408; mov rax, r8; ret; 
0x00000000103cb0: test dh, 0x1; jne short 0x0000000000103cd0; ret; 
0x0000000017c3d7: test dh, 0x40; jne 0x000000000017c310; lea rax, [rdi+0xf]; ret; 
0x00000000093ea5: test dh, 0x40; jne short 0x0000000000093ec0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x0000000017c41d: test dh, 0x4; jne 0x000000000017c310; lea rax, [rdi+0xb]; ret; 
0x000000000f65f1: test dh, bh; add eax, 0x83480000; ret; 
0x000000000ca681: test dh, ch; adc al, 0x0; add dh, dh; ret; 
0x0000000006e3bd: test dh, cl; adc [rax], eax; add [rbx-0x78f0d008], al; call qword ptr [rax+rax]; 
0x0000000002fd55: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000045ce8: test dil, dil; cmovne eax, ecx; add rsp, 0x8; ret; 
0x0000000017c354: test dl, 0x40; jne short 0x000000000017c310; lea rax, [rdi+0x7]; ret; 
0x0000000017c382: test dl, 0x4; jne short 0x000000000017c310; lea rax, [rdi+0x3]; ret; 
0x000000000985c1: test dl, al; add [rax], al; add [rcx+rdi+0x25], cl; ret; 
0x000000001207c9: test dl, bl; add [rax], al; add [rcx-0xa], al; ret; 
0x00000000045ccb: test dl, dl; cmovne eax, ecx; add rsp, 0x8; ret; 
0x00000000085af2: test dl, dl; je short 0x0000000000085b01; mov rdi, r14; call qword ptr [r12+0x358]; 
0x0000000003f5ef: test dl, dl; jne short 0x000000000003f5cc; ret; 
0x000000000b409f: test dl, dl; jne short 0x00000000000b4090; lea rax, [rcx-0x1]; ret; 
0x0000000009de94: test dl, dl; mov edx, 0x0; cmove rax, rdx; ret; 
0x0000000006cc32: test dword ptr [rax+rcx*4-0x73], 0xfffff738; mov [rbp-0x8d8], r8b; call rax; 
0x000000000719c2: test dword ptr [rax+rcx*4-0x7b], 0xfffff6e0; mov [rbp-0x8f0], r9b; call rax; 
0x0000000013f6c5: test dword ptr [rax-0x75], 0x8b490847; jo short 0x000000000013f70e; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x000000001099a7: test dword ptr [rax-0x77], 0xca8948d6; cmp r9d, 0x1; ja short 0x00000000001099e0; mov eax, 0x106; syscall; 
0x00000000102865: test dword ptr [rax-0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, [rsp+0x8]; syscall; 
0x000000000423d8: test dword ptr [rax-0x77], 0xe8d148ea; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx; 
0x000000001098b5: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x29], esi; mov eax, 0x4; syscall; 
0x00000000109955: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x29], esi; mov eax, 0x6; syscall; 
0x00000000109904: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x2a], esi; mov eax, 0x5; syscall; 
0x0000000010148a: test dword ptr [rax-0xf89fe06], 0xec74203c; mov byte ptr [rsi-0x1], 0x0; mov rax, r8; ret; 
0x000000000d6893: test dword ptr [rax], 0x50f0000; cmp rax, 0xfffffffffffff000; ja short 0x00000000000d6900; ret; 
0x00000000099c4d: test dword ptr [rax], 0x89440000; loopne 0x0000000000099cb0; pop rbp; pop r12; ret; 
0x00000000155a45: test dword ptr [rbp+0x6], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000a79b2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a5752: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a3192: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a82: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015e762: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5f2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001502a2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f022: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001535e3: test dword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000158ed3: test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000145118: test dword ptr [rcx+0x5c], 0xffffffba; inc dword ptr [rcx+0x5d]; xor eax, eax; pop r14; jmp rcx; 
0x000000000ee08b: test dword ptr [rcx-0x77], 0xe2bce8c4; call far fword ptr [rax+0x5a]; 
0x000000000edf79: test dword ptr [rcx-0x77], 0xe3cee8c4; call far fword ptr [rax+0x5a]; 
0x0000000005f5ea: test dword ptr [rcx-0x7d], 0x1ce801c4; ret far; 
0x00000000072265: test dword ptr [rcx], 0x894c0000; loop 0x00000000000722b9; mov esi, ebp; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000018d00c: test dword ptr [rdi], 0x8d48c0bd; xchg eax, r12d; ret; 
0x0000000008e1e5: test dword ptr [rdi], 0xfffe1a84; call qword ptr [rax+0x48]; 
0x000000000c5c71: test eax, 0x1; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x000000000c5d21: test eax, 0x1; je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x0000000011f2bb: test eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x00000000155993: test eax, 0x49000646; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000152bd3: test eax, 0x49000672; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000b0e07: test eax, 0x49000f93; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af833: test eax, 0x49000fa7; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000187225: test eax, 0x5974c085; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001702b3: test eax, 0x5b74c085; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000014ee63: test eax, 0x640009df; mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000014d063: test eax, 0x640009fd; mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000010b263: test eax, 0x64000e1b; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000007e463: test eax, 0x640016e9; mov dword ptr [rax], 0x9; mov eax, 0xffffffff; ret; 
0x00000000040904: test eax, 0x7fffff; je short 0x0000000000040910; ret; 
0x00000000141a22: test eax, 0x8948ffee; ret; 
0x0000000013af50: test eax, 0x894c0000; loopne 0x000000000013af98; pop rsp; ret; 
0x000000000ffc4e: test eax, 0xabb890; add [rax], al; syscall; 
0x0000000009b104: test eax, 0xc6f7000d; add [rax], cl; add [rax], al; jne short 0x000000000009b0c0; ret; 
0x0000000010ef13: test eax, 0xe8000e76; test [rcx-0x9], bh; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000008defd: test eax, 0xe8001226; or al, dh; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000b8328: test eax, 0xe9fffff4; ret; 
0x00000000174037: test eax, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000010aa63: test eax, 0xf7000e23; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010a563: test eax, 0xf7000e28; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000010a463: test eax, 0xf7000e29; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000108f63: test eax, 0xf7000e3e; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000102c63: test eax, 0xf7000ea1; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000102b63: test eax, 0xf7000ea2; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000ffc63: test eax, 0xf7000ed1; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000ff363: test eax, 0xf7000eda; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000ff063: test eax, 0xf7000edd; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fda63: test eax, 0xf7000ef3; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000fb263: test eax, 0xf7000f1b; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000f9663: test eax, 0xf7000f37; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d7f63: test eax, 0xf700114e; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000d7d63: test eax, 0xf7001150; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000000d2e63: test eax, 0xf700119f; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000005c163: test eax, 0xf700190c; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x00000000041663: test eax, 0xf7001ab7; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x0000000019310d: test eax, 0xf9b12de8; jmp qword ptr [rsi+0x2e]; 
0x000000000b4208: test eax, 0xfffd3be9; jmp qword ptr [rsi-0x70]; 
0x0000000010531d: test eax, eax; cmove eax, edx; ret; 
0x00000000087ca9: test eax, eax; cmovne eax, edx; mov [rdi+0xc], eax; xor eax, eax; ret; 
0x000000000873a5: test eax, eax; cmovne eax, edx; ret; 
0x000000000ff056: test eax, eax; cmovns eax, edx; ret; 
0x00000000043e55: test eax, eax; cmovs eax, edx; ret; 
0x0000000013fa72: test eax, eax; je 0x000000000002d05c; mov rax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000104cd7: test eax, eax; je 0x0000000000104d70; call rax; 
0x0000000013a2bc: test eax, eax; je 0x000000000013a151; mov rdi, rbx; call rax; 
0x0000000013b001: test eax, eax; je 0x000000000013b11e; mov rdi, r12; call qword ptr [rbx]; 
0x0000000013e53c: test eax, eax; je 0x000000000013e650; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000140964: test eax, eax; je 0x0000000000140a50; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000140e52: test eax, eax; je 0x00000000001413bd; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x00000000174382: test eax, eax; je 0x00000000001742a4; tzcnt eax, eax; vzeroupper; ret; 
0x00000000185d0a: test eax, eax; je 0x0000000000185da0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000188c5b: test eax, eax; je 0x0000000000188ce0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000188e69: test eax, eax; je 0x0000000000188ce4; tzcnt eax, eax; add rax, rdx; ret; 
0x00000000189a27: test eax, eax; je 0x0000000000189947; tzcnt eax, eax; ret; 
0x0000000018c4af: test eax, eax; je 0x000000000018c3c7; tzcnt eax, eax; ret; 
0x0000000018d0ca: test eax, eax; je 0x000000000018d180; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d7ea: test eax, eax; je 0x000000000018d880; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dc6a: test eax, eax; je 0x000000000018dd20; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000037e86: test eax, eax; je short 0x0000000000037e8c; call rax; 
0x00000000037f82: test eax, eax; je short 0x0000000000037f88; call rax; 
0x00000000038e79: test eax, eax; je short 0x0000000000038e7f; call rax; 
0x0000000004e0c3: test eax, eax; je short 0x000000000004e0d0; pop rbp; ret; 
0x0000000005c1b4: test eax, eax; je short 0x000000000005c1f8; mov eax, 0x13c; syscall; 
0x0000000007563b: test eax, eax; je short 0x0000000000075650; lea rdx, [rip+0x1330da]; add rax, rdx; ret; 
0x00000000077205: test eax, eax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007723e: test eax, eax; je short 0x0000000000077253; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000007727e: test eax, eax; je short 0x00000000000772a0; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x000000000772c5: test eax, eax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000080d3d: test eax, eax; je short 0x0000000000080d48; pop rbx; ret; 
0x000000000840a9: test eax, eax; je short 0x00000000000840bc; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x00000000087668: test eax, eax; je short 0x0000000000087670; xor eax, eax; pop rbx; ret; 
0x0000000009a2ec: test eax, eax; je short 0x000000000009a32b; add rsp, 0x10; pop r12; ret; 
0x000000000a519a: test eax, eax; je short 0x00000000000a5170; bsr eax, eax; add rax, rdi; ret; 
0x000000000aa13f: test eax, eax; je short 0x00000000000aa150; bsf eax, eax; lea rax, [rdi+rax]; ret; 
0x000000000d214b: test eax, eax; je short 0x00000000000d2180; call rax; 
0x000000000d21af: test eax, eax; je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x000000000d7282: test eax, eax; je short 0x00000000000d7288; call rax; 
0x000000000d72ed: test eax, eax; je short 0x00000000000d72ce; call rax; 
0x000000000f91ac: test eax, eax; je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x000000000fe2f8: test eax, eax; je short 0x00000000000fe308; add rsp, 0x90; pop rbx; ret; 
0x000000000ff9dc: test eax, eax; je short 0x00000000000ff9e1; ret; 
0x00000000101391: test eax, eax; je short 0x0000000000101398; mov [rax], rdx; ret; 
0x00000000104b7b: test eax, eax; je short 0x0000000000104bb0; call rax; 
0x000000001144cf: test eax, eax; je short 0x0000000000114500; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x00000000116d6a: test eax, eax; je short 0x0000000000116d78; add rsp, 0x8; ret; 
0x0000000011f0ed: test eax, eax; je short 0x000000000011f0f6; mov rdi, rbx; call rax; 
0x0000000011f3fd: test eax, eax; je short 0x000000000011f406; mov rdi, rbx; call rax; 
0x0000000011f4ad: test eax, eax; je short 0x000000000011f4ba; lea rdi, [rip+0xd7728]; call rax; 
0x0000000012916f: test eax, eax; je short 0x0000000000129178; ret; 
0x0000000012e1dd: test eax, eax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x0000000012f9a5: test eax, eax; je short 0x000000000012f9af; cmp [rax+0x10], rdi; jne short 0x000000000012f9a0; ret; 
0x00000000133a91: test eax, eax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x00000000138e50: test eax, eax; je short 0x0000000000138e59; mov rdi, rbp; call rax; 
0x00000000139257: test eax, eax; je short 0x0000000000139260; mov rdi, rbp; call rax; 
0x0000000013923a: test eax, eax; je short 0x00000000001392a0; mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000139526: test eax, eax; je short 0x0000000000139530; ret; 
0x00000000139bf3: test eax, eax; je short 0x0000000000139b9b; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013a028: test eax, eax; je short 0x0000000000139fe6; mov rax, [rsp+0xd8]; mov rdi, rbx; call qword ptr [rax+0x20]; 
0x0000000013a04a: test eax, eax; je short 0x000000000013a053; mov rdi, rbx; call rax; 
0x0000000013a3ad: test eax, eax; je short 0x000000000013a3b6; mov rdi, rbx; call rax; 
0x0000000013a5b1: test eax, eax; je short 0x000000000013a5c0; xor eax, eax; ret; 
0x0000000013abc4: test eax, eax; je short 0x000000000013abcd; mov rdi, r13; call rax; 
0x0000000013ae53: test eax, eax; je short 0x000000000013ae70; mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x0000000013dbe1: test eax, eax; je short 0x000000000013dbee; lea rdi, [rbp+0xc8]; call rax; 
0x0000000013e564: test eax, eax; je short 0x000000000013e56d; mov rdi, rbp; call rax; 
0x0000000013e72c: test eax, eax; je short 0x000000000013e737; lea rdi, [r12+0x10]; call rax; 
0x0000000013f79f: test eax, eax; je short 0x000000000013f7a8; mov rdi, rbp; call rax; 
0x0000000013f910: test eax, eax; je short 0x000000000013f919; mov rdi, r13; call rax; 
0x000000001402ce: test eax, eax; je short 0x00000000001402d8; lea rdi, [rbp+0x68]; call rax; 
0x00000000140983: test eax, eax; je short 0x000000000014098c; mov rdi, rbp; call rax; 
0x00000000140cbe: test eax, eax; je short 0x0000000000140cc8; lea rdi, [rbp+0x58]; call rax; 
0x00000000141603: test eax, eax; je short 0x0000000000141670; mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x00000000141f4f: test eax, eax; je short 0x0000000000141f61; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x00000000142634: test eax, eax; je short 0x0000000000142601; mov fs:[rbx], rax; pop rbx; ret; 
0x000000001425fd: test eax, eax; je short 0x0000000000142608; pop rbx; ret; 
0x0000000014269c: test eax, eax; je short 0x000000000014265d; mov fs:[rbx], rax; pop rbx; ret; 
0x000000001432dc: test eax, eax; je short 0x00000000001432e7; lea rdi, [r12+0x10]; call rax; 
0x00000000143915: test eax, eax; je short 0x0000000000143920; lea rdi, [r12+0x10]; call rax; 
0x00000000143982: test eax, eax; je short 0x00000000001439c0; mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20]; 
0x000000001454af: test eax, eax; je short 0x00000000001454e0; mov eax, r8d; ret; 
0x000000001454ff: test eax, eax; je short 0x0000000000145530; mov eax, r8d; ret; 
0x0000000014be4b: test eax, eax; je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x0000000016a713: test eax, eax; je short 0x000000000016a718; xchg edx, eax; sub eax, edx; ret; 
0x0000000016b6f8: test eax, eax; je short 0x000000000016b6fd; xchg edx, eax; sub eax, edx; ret; 
0x00000000174241: test eax, eax; je short 0x00000000001742a0; tzcnt eax, eax; vzeroupper; ret; 
0x000000001743cf: test eax, eax; je short 0x0000000000174440; tzcnt eax, eax; vzeroupper; ret; 
0x00000000185d54: test eax, eax; je short 0x0000000000185da0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000186f4b: test eax, eax; je short 0x0000000000186f20; bsr eax, eax; add rax, rdi; ret; 
0x000000001871ff: test eax, eax; je short 0x0000000000187280; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000187227: test eax, eax; je short 0x0000000000187284; tzcnt eax, eax; add rax, rcx; ret; 
0x000000001898e3: test eax, eax; je short 0x0000000000189940; tzcnt eax, eax; ret; 
0x0000000018b691: test eax, eax; je short 0x000000000018b700; tzcnt eax, eax; ret; 
0x0000000018bacd: test eax, eax; je short 0x000000000018ba84; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000018baf2: test eax, eax; je short 0x000000000018bb00; bsr eax, eax; lea rax, [rdi+rax-0x20]; ret; 
0x0000000018c363: test eax, eax; je short 0x000000000018c3c0; tzcnt eax, eax; ret; 
0x0000000018cbb1: test eax, eax; je short 0x000000000018cc20; tzcnt eax, eax; ret; 
0x0000000018d04d: test eax, eax; je short 0x000000000018d004; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018d072: test eax, eax; je short 0x000000000018d080; bsr eax, eax; lea rax, [rdi+rax*4-0x20]; ret; 
0x0000000018d11a: test eax, eax; je short 0x000000000018d180; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d834: test eax, eax; je short 0x000000000018d880; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dabf: test eax, eax; je short 0x000000000018db40; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018dae7: test eax, eax; je short 0x000000000018db44; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000018dcba: test eax, eax; je short 0x000000000018dd20; tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x00000000192886: test eax, eax; je short 0x000000000019288c; call rax; 
0x000000001929b1: test eax, eax; je short 0x00000000001929bc; call rax; 
0x00000000108fc3: test eax, eax; jl short 0x0000000000108fda; je short 0x0000000000108fca; ret; 
0x00000000109c1a: test eax, eax; jl short 0x0000000000109c36; je short 0x0000000000109c21; ret; 
0x0000000008df56: test eax, eax; jne 0x000000000008e040; mov eax, 0x1; ret; 
0x000000000a4bb5: test eax, eax; jne 0x00000000000a4c60; xor eax, eax; ret; 
0x000000000c4a25: test eax, eax; jne 0x00000000000c4b00; xor eax, eax; ret; 
0x00000000142fd1: test eax, eax; jne 0x0000000000142f32; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x28]; 
0x0000000016fa91: test eax, eax; jne 0x000000000016f980; sub eax, ecx; vzeroupper; ret; 
0x0000000016ffaa: test eax, eax; jne 0x000000000016fe50; sub eax, ecx; vzeroupper; ret; 
0x000000001784fa: test eax, eax; jne 0x0000000000178430; sub eax, ecx; vzeroupper; ret; 
0x00000000178a15: test eax, eax; jne 0x0000000000178900; sub eax, ecx; vzeroupper; ret; 
0x000000001863b0: test eax, eax; jne 0x00000000001860e0; ret; 
0x00000000189457: test eax, eax; jne 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018ac14: test eax, eax; jne 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018c320: test eax, eax; jne 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018cb6b: test eax, eax; jne 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000018d745: test eax, eax; jne 0x000000000018d4c0; ret; 
0x00000000191d43: test eax, eax; jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x0000000003a359: test eax, eax; jne short 0x000000000003a368; mov eax, r8d; ret; 
0x000000000413d2: test eax, eax; jne short 0x00000000000413e0; pop rbp; ret; 
0x00000000041629: test eax, eax; jne short 0x0000000000041638; add rsp, 0x8; ret; 
0x000000000416b8: test eax, eax; jne short 0x00000000000416d8; mov esi, 0x8; mov eax, 0x82; syscall; 
0x00000000041e83: test eax, eax; jne short 0x0000000000041ed0; mov r10d, 0x8; mov eax, 0x80; syscall; 
0x00000000044a28: test eax, eax; jne short 0x0000000000044a40; mov eax, 0x13e; syscall; 
0x0000000005bb76: test eax, eax; jne short 0x000000000005bb80; pop rbx; ret; 
0x0000000007aaaf: test eax, eax; jne short 0x000000000007aaa0; mov rax, r8; ret; 
0x000000000833ff: test eax, eax; jne short 0x00000000000833f0; mov rax, r8; ret; 
0x00000000083ffc: test eax, eax; jne short 0x0000000000083ff0; ret; 
0x00000000084ae4: test eax, eax; jne short 0x0000000000084ad8; ret; 
0x000000000865f2: test eax, eax; jne short 0x0000000000086600; xend; xor eax, eax; ret; 
0x00000000092291: test eax, eax; jne short 0x0000000000092280; mov [rdi+0x20], rax; mov [rsi+0x20], rdi; ret; 
0x0000000009284e: test eax, eax; jne short 0x0000000000092840; ret; 
0x00000000093f9b: test eax, eax; jne short 0x0000000000093fb0; mov eax, 0xf3; syscall; 
0x0000000009405b: test eax, eax; jne short 0x0000000000094070; mov eax, 0xf2; syscall; 
0x00000000094aa6: test eax, eax; jne short 0x0000000000094ab0; ret; 
0x0000000009a1cf: test eax, eax; jne short 0x000000000009a1c0; xor eax, eax; ret; 
0x0000000009a28b: test eax, eax; jne short 0x000000000009a280; mov eax, r8d; ret; 
0x0000000009f0a3: test eax, eax; jne short 0x000000000009f091; or [rdi], sil; mov eax, r8d; ret; 
0x000000000a4be5: test eax, eax; jne short 0x00000000000a4c40; xor eax, eax; ret; 
0x000000000a5088: test eax, eax; jne short 0x00000000000a5100; xor eax, eax; ret; 
0x000000000a50b7: test eax, eax; jne short 0x00000000000a5130; xor eax, eax; ret; 
0x000000000c4a55: test eax, eax; jne short 0x00000000000c4ac0; xor eax, eax; ret; 
0x000000000ca3b7: test eax, eax; jne short 0x00000000000ca3c8; mov rax, r8; add rsp, 0x8; ret; 
0x000000000d21b9: test eax, eax; jne short 0x00000000000d2210; xor eax, eax; add rsp, 0x8; ret; 
0x000000000d229b: test eax, eax; jne short 0x00000000000d22b0; mov eax, 0xe6; syscall; 
0x000000000d67db: test eax, eax; jne short 0x00000000000d67f0; mov eax, 0x3d; syscall; 
0x000000000d688b: test eax, eax; jne short 0x00000000000d68a8; xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000d69b8: test eax, eax; jne short 0x00000000000d69d0; mov eax, 0x22; syscall; 
0x000000000d6a43: test eax, eax; jne short 0x00000000000d6a50; add rsp, 0x8; ret; 
0x000000000f7f8b: test eax, eax; jne short 0x00000000000f7fa0; mov eax, 0x11; syscall; 
0x000000000f803b: test eax, eax; jne short 0x00000000000f8050; mov eax, 0x12; syscall; 
0x000000000f8f61: test eax, eax; jne short 0x00000000000f8f70; mov rax, [rsp]; add rsp, 0x18; ret; 
0x000000000f9b87: test eax, eax; jne short 0x00000000000f9bd0; mov eax, 0x101; syscall; 
0x000000000f9c98: test eax, eax; jne short 0x00000000000f9cb0; syscall; 
0x000000000f9d38: test eax, eax; jne short 0x00000000000f9d50; mov eax, 0x1; syscall; 
0x000000000fa188: test eax, eax; jne short 0x00000000000fa1b0; mov eax, 0x48; syscall; 
0x000000000fa358: test eax, eax; jne short 0x00000000000fa370; mov eax, 0x3; syscall; 
0x000000000fa4d8: test eax, eax; jne short 0x00000000000fa4f0; mov eax, 0x55; syscall; 
0x000000000fd9f8: test eax, eax; jne short 0x00000000000fda10; mov eax, 0x7; syscall; 
0x000000000fdfcb: test eax, eax; jne short 0x00000000000fdfe0; mov eax, 0x146; syscall; 
0x000000000fe3a9: test eax, eax; jne short 0x00000000000fe3b0; pop rbp; ret; 
0x000000000fe44b: test eax, eax; jne short 0x00000000000fe460; mov eax, 0x115; syscall; 
0x000000000fe4fb: test eax, eax; jne short 0x00000000000fe510; mov eax, 0x11d; syscall; 
0x000000000ff258: test eax, eax; jne short 0x00000000000ff270; mov eax, 0x13; syscall; 
0x000000000ff2f8: test eax, eax; jne short 0x00000000000ff310; mov eax, 0x14; syscall; 
0x000000000ff39b: test eax, eax; jne short 0x00000000000ff3b8; xor r8d, r8d; mov eax, 0x127; syscall; 
0x000000000ff44b: test eax, eax; jne short 0x00000000000ff468; xor r8d, r8d; mov eax, 0x128; syscall; 
0x000000000ffe7c: test eax, eax; jne short 0x00000000000ffea0; mov eax, 0x10e; syscall; 
0x000000000fffa8: test eax, eax; jne short 0x00000000000fffc0; mov eax, 0x4a; syscall; 
0x00000000100068: test eax, eax; jne short 0x0000000000100080; mov eax, 0x4b; syscall; 
0x00000000100a88: test eax, eax; jne short 0x0000000000100a50; xor eax, eax; pop rbp; ret; 
0x00000000102af8: test eax, eax; jne short 0x0000000000102b10; mov eax, 0x1a; syscall; 
0x000000001090cb: test eax, eax; jne short 0x00000000001090e8; mov r9d, 0x8; mov eax, 0x119; syscall; 
0x000000001092ab: test eax, eax; jne short 0x00000000001092c0; mov eax, 0xe8; syscall; 
0x0000000010935b: test eax, eax; jne short 0x0000000000109370; mov eax, 0x114; syscall; 
0x0000000010940b: test eax, eax; jne short 0x0000000000109420; mov eax, 0x116; syscall; 
0x000000001094bb: test eax, eax; jne short 0x00000000001094d0; mov eax, 0x113; syscall; 
0x00000000109578: test eax, eax; jne short 0x0000000000109590; mov eax, 0x130; syscall; 
0x0000000010a3b8: test eax, eax; jne short 0x000000000010a3d0; mov eax, 0x2b; syscall; 
0x0000000010a488: test eax, eax; jne short 0x000000000010a4a0; mov eax, 0x2a; syscall; 
0x0000000010a6ab: test eax, eax; jne short 0x000000000010a6c0; mov eax, 0x2d; syscall; 
0x0000000010a768: test eax, eax; jne short 0x000000000010a780; mov eax, 0x2f; syscall; 
0x0000000010a8c8: test eax, eax; jne short 0x000000000010a8e0; mov eax, 0x2e; syscall; 
0x0000000010a96b: test eax, eax; jne short 0x000000000010a980; mov eax, 0x2c; syscall; 
0x0000000010ad0b: test eax, eax; jne short 0x000000000010ad20; mov eax, 0x120; syscall; 
0x0000000010adbb: test eax, eax; jne short 0x000000000010add0; mov eax, 0x12b; syscall; 
0x0000000010ae6b: test eax, eax; jne short 0x000000000010ae80; mov eax, 0x133; syscall; 
0x0000000010afcb: test eax, eax; jne short 0x000000000010afe0; mov eax, 0x45; syscall; 
0x0000000010b07b: test eax, eax; jne short 0x000000000010b090; mov eax, 0x46; syscall; 
0x000000001155e3: test eax, eax; jne short 0x00000000001155f0; cmp qword ptr [rdi], 0x0; je short 0x00000000001155f8; ret; 
0x00000000123107: test eax, eax; jne short 0x0000000000123120; mov eax, r8d; ret; 
0x00000000128c84: test eax, eax; jne short 0x0000000000128c90; pop rbx; ret; 
0x00000000129b2a: test eax, eax; jne short 0x0000000000129b30; ret; 
0x0000000012f0e8: test eax, eax; jne short 0x000000000012f0f0; ret; 
0x00000000139714: test eax, eax; jne short 0x0000000000139738; mov rax, [r12+0x8]; mov rdi, r12; call qword ptr [rax+0x20]; 
0x00000000139994: test eax, eax; jne short 0x00000000001399a7; mov rax, [rbp+0x8]; mov rdi, rbp; call qword ptr [rax+0x20]; 
0x0000000013a653: test eax, eax; jne short 0x000000000013a6b0; mov dword ptr [rsi], 0x0; ret; 
0x0000000013e946: test eax, eax; jne short 0x000000000013e950; ret; 
0x00000000143255: test eax, eax; jne short 0x0000000000143240; pop rbx; ret; 
0x000000001434d6: test eax, eax; jne short 0x00000000001434e0; ret; 
0x00000000149fc5: test eax, eax; jne short 0x0000000000149f90; xor eax, eax; add rsp, 0x18; ret; 
0x0000000014cdc9: test eax, eax; jne short 0x000000000014ce40; mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx; 
0x0000000016f99b: test eax, eax; jne short 0x000000000016f980; sub eax, ecx; vzeroupper; ret; 
0x0000000016fe70: test eax, eax; jne short 0x000000000016fe50; sub eax, ecx; vzeroupper; ret; 
0x00000000178449: test eax, eax; jne short 0x0000000000178430; sub eax, ecx; vzeroupper; ret; 
0x0000000017891e: test eax, eax; jne short 0x0000000000178900; sub eax, ecx; vzeroupper; ret; 
0x00000000186274: test eax, eax; jne short 0x00000000001862c4; ret; 
0x000000001862b5: test eax, eax; jne short 0x00000000001862e0; ret; 
0x000000001892fb: test eax, eax; jne short 0x00000000001892e0; sub eax, ecx; ret; 
0x0000000018aa70: test eax, eax; jne short 0x000000000018aa50; sub eax, ecx; ret; 
0x0000000018c259: test eax, eax; jne short 0x000000000018c240; sub eax, ecx; ret; 
0x0000000018ca4e: test eax, eax; jne short 0x000000000018ca30; sub eax, ecx; ret; 
0x0000000018d654: test eax, eax; jne short 0x000000000018d6a4; ret; 
0x0000000018d695: test eax, eax; jne short 0x000000000018d6c0; ret; 
0x000000000417d1: test eax, eax; js short 0x00000000000417e4; mov eax, [rsp+0x80]; add rsp, 0x108; ret; 
0x00000000041824: test eax, eax; js short 0x0000000000041837; mov eax, [rsp+0x80]; add rsp, 0x108; ret; 
0x0000000007e45b: test eax, eax; js short 0x000000000007e460; ret; 
0x00000000091077: test eax, eax; js short 0x0000000000091088; add rsp, 0x110; pop rbp; ret; 
0x00000000091f74: test eax, eax; js short 0x0000000000091f88; add rsp, 0x110; pop rbp; ret; 
0x000000000fead5: test eax, eax; js short 0x00000000000feae2; mov eax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000010066f: test eax, eax; js short 0x0000000000100679; cmp r8d, 0x2; jbe short 0x0000000000100680; ret; 
0x00000000131ca8: test eax, eax; js short 0x0000000000131cb8; mov rax, r12; pop r12; ret; 
0x00000000149f9a: test eax, eax; js short 0x0000000000149fc9; mov rax, [rsp+0x8]; add rsp, 0x18; ret; 
0x0000000014b3ca: test eax, eax; lea rax, [rip+0xb171d]; cmovne rax, rdx; add rsp, 0x8; ret; 
0x0000000009bd50: test eax, eax; lea rdx, [rip+0x18df7]; lea rax, [rip+0x18d70]; cmovne rax, rdx; ret; 
0x00000000116095: test eax, eax; lea rdx, [rip+0x617d2]; lea rax, [rip+0x6182b]; cmove rax, rdx; ret; 
0x00000000116100: test eax, eax; lea rdx, [rip+0x69e87]; lea rax, [rip+0x69ee0]; cmove rax, rdx; ret; 
0x0000000011612c: test eax, eax; lea rdx, [rip+0x70eeb]; lea rax, [rip+0x70f34]; cmove rax, rdx; ret; 
0x0000000009bd35: test eax, eax; lea rdx, [rip+0xdbb42]; lea rax, [rip+0xdbb9b]; cmove rax, rdx; ret; 
0x0000000009bda0: test eax, eax; lea rdx, [rip+0xe41f7]; lea rax, [rip+0xe4250]; cmove rax, rdx; ret; 
0x0000000009bdcc: test eax, eax; lea rdx, [rip+0xeb25b]; lea rax, [rip+0xeb2a4]; cmove rax, rdx; ret; 
0x000000001160b0: test eax, eax; lea rdx, [rip-0x61579]; lea rax, [rip-0x61600]; cmovne rax, rdx; ret; 
0x00000000085e96: test eax, eax; mov eax, 0x0; cmove rax, [rsp+0x10]; add rsp, 0x28; ret; 
0x0000000014c496: test eax, eax; mov eax, 0x0; cmove rax, [rsp+0x18]; add rsp, 0x28; ret; 
0x00000000085d8b: test eax, eax; mov eax, 0x0; cmove rax, [rsp+0x18]; add rsp, 0x38; ret; 
0x000000001004c2: test eax, eax; mov eax, 0x0; cmove rax, rbx; pop rbx; ret; 
0x000000000ffa21: test eax, eax; mov eax, 0x100; cmovns eax, [rsp]; add rsp, 0x18; ret; 
0x00000000127743: test eax, eax; mov eax, 0xffffffff; cmovne eax, [rsp+0x4]; add rsp, 0x18; ret; 
0x00000000041362: test eax, eax; mov rax, 0xffffffffffffffff; cmovns rax, [rsp+0xa0]; add rsp, 0x148; ret; 
0x0000000009e163: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000fb23c: test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x0000000004d860: test eax, eax; sete al; add rsp, 0x8; movzx eax, al; ret; 
0x000000001314c6: test eax, eax; sete al; add rsp, 0x8; ret; 
0x0000000013cbd9: test eax, eax; setne al; add rsp, 0x8; movzx eax, al; ret; 
0x0000000009a247: test eax, ebp; sub edi, ecx; call far fword ptr [rbx+0x5d]; 
0x00000000168413: test eax, ebx; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x0000000013e546: test eax, edx; add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000016860b: test eax, esp; add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x00000000168a2e: test ebp, ebp; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000009a169: test ebp, ebp; jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x00000000102de1: test ebp, esi; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000014d08c: test ebx, ebx; jne short 0x000000000014d098; pop rbx; ret; 
0x00000000192723: test ebx, ebx; jne short 0x000000000019270d; pop rbx; ret; 
0x00000000192c99: test ebx, ebx; jne short 0x0000000000192c85; pop rbx; ret; 
0x00000000192d33: test ebx, ebx; jne short 0x0000000000192d18; pop rbx; ret; 
0x000000001931ec: test ebx, ebx; jne short 0x00000000001931e0; mov qword ptr [rip+0x692e5], 0x0; pop rbx; ret; 
0x00000000125a48: test ebx, ebx; js 0x0000000000125503; mov rdx, [rsp]; mov rdi, r14; call rdx; 
0x0000000013c1fe: test ebx, ebx; sete al; add rsp, 0x30; pop rbx; ret; 
0x000000001683f0: test ebx, edi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000a4ff8: test ebx, esi; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret; 
0x000000000b50b7: test ecx, 0x40000000; je short 0x00000000000b508a; ret; 
0x000000000b6667: test ecx, 0x40000000; je short 0x00000000000b663a; ret; 
0x00000000142617: test ecx, eax; hlt; jmp qword ptr [rax+rcx*2-0x75]; 
0x0000000018623b: test ecx, ecx; jne 0x0000000000186120; ret; 
0x00000000186094: test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d61b: test ecx, ecx; jne 0x000000000018d500; ret; 
0x0000000018d46e: test ecx, ecx; jne 0x000000000018d503; ret; 
0x000000000b52bf: test ecx, ecx; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x0000000010ce84: test ecx, ecx; jne short 0x000000000010ce90; ret; 
0x0000000010d69b: test ecx, ecx; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e8: test ecx, ecx; jne short 0x000000000010d6f0; ret; 
0x000000001171e5: test ecx, ecx; jne short 0x0000000000117198; mov rax, r8; ret; 
0x00000000128d1c: test ecx, ecx; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x000000000bf787: test ecx, esp; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000003e8c8: test edi, ebp; add [rax], al; add [rax-0x7d], cl; ret; 
0x0000000002d258: test edi, edi; je short 0x000000000002d288; mov rsi, r12; mov edi, ebp; call r15; 
0x00000000041b91: test edi, edi; je short 0x0000000000041b9f; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000041e45: test edi, edi; je short 0x0000000000041e60; lea edx, [rax+0x1]; mov [rip+0x1ab376], edx; ret; 
0x00000000043efe: test edi, edi; je short 0x0000000000043f08; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x000000000d995a: test edi, edi; je short 0x00000000000d9968; mov rdi, rbx; call r15; 
0x000000000eea8a: test edi, edi; je short 0x00000000000eea98; mov rdi, rbx; call r15; 
0x00000000104531: test edi, edi; je short 0x000000000010453a; test rsi, rsi; jne short 0x0000000000104540; ret; 
0x00000000104551: test edi, edi; je short 0x000000000010455a; test rsi, rsi; jne short 0x0000000000104560; ret; 
0x00000000120396: test edi, edi; je short 0x00000000001203a8; mov rax, [rip+0xdc8c7]; ret; 
0x000000001390e9: test edi, edi; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x0000000013936e: test edi, edi; je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f7: test edi, edi; je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000000ea776: test edi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000101908: test edi, edi; jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x00000000103c1b: test edi, edi; jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x0000000011f3e1: test edi, edi; jne short 0x000000000011f3d0; pop rbx; ret; 
0x0000000013241e: test edi, edi; jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x0000000014aec6: test edi, edi; jns short 0x000000000014aed0; ret; 
0x0000000008fec0: test edi, edi; js short 0x000000000008fed0; mov [rip+0x1648e6], edi; xor eax, eax; ret; 
0x000000000d88b5: test edi, edi; js short 0x00000000000d88c0; ret; 
0x0000000010e338: test edi, esi; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000010e339: test edi, esi; jmp qword ptr [rcx+rcx*4+0x2b]; 
0x0000000009aaef: test edx, 0x40000000; je short 0x000000000009aac9; ret; 
0x0000000009aef7: test edx, 0x40000000; je short 0x000000000009aec7; ret; 
0x0000000009af67: test edx, 0x40000000; je short 0x000000000009af37; ret; 
0x0000000009b197: test edx, 0x40000000; je short 0x000000000009b167; ret; 
0x0000000009d437: test edx, 0x40000000; je short 0x000000000009d407; ret; 
0x000000000a1707: test edx, 0x40000000; je short 0x00000000000a16d7; ret; 
0x000000000b4f17: test edx, 0x40000000; je short 0x00000000000b4ee7; ret; 
0x000000000b4f87: test edx, 0x40000000; je short 0x00000000000b4f57; ret; 
0x000000000b5177: test edx, 0x40000000; je short 0x00000000000b5147; ret; 
0x000000000b5277: test edx, 0x40000000; je short 0x00000000000b5247; ret; 
0x0000000004054f: test edx, eax; je short 0x0000000000040558; ret; 
0x00000000168a51: test edx, ecx; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000168519: test edx, edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret; 
0x000000000aa67a: test edx, edx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa83a: test edx, edx; je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000c62bb: test edx, edx; je 0x00000000000c6360; bsf rax, rdx; shr rax, 0x2; ret; 
0x0000000007fedf: test edx, edx; je short 0x000000000007fee8; ret; 
0x000000000802bf: test edx, edx; je short 0x00000000000802c8; ret; 
0x00000000086c0b: test edx, edx; je short 0x0000000000086be0; call rdx; 
0x000000000aa632: test edx, edx; je short 0x00000000000aa63a; bsf eax, edx; ret; 
0x000000000aa6db: test edx, edx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8aa: test edx, edx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x000000000c6072: test edx, edx; je short 0x00000000000c607e; bsf eax, edx; shr rax, 0x2; ret; 
0x000000000c611b: test edx, edx; je short 0x00000000000c6130; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c60be: test edx, edx; je short 0x00000000000c6140; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c632a: test edx, edx; je short 0x00000000000c6350; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000109610: test edx, edx; je short 0x0000000000109640; mov eax, 0x145; syscall; 
0x00000000109c0b: test edx, edx; je short 0x0000000000109c36; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x0000000010b60c: test edx, edx; je short 0x000000000010b619; add edx, edx; mov eax, 0x14; syscall; 
0x0000000013b34b: test edx, edx; je short 0x000000000013b378; add rsp, 0x10; pop rbx; ret; 
0x0000000014493b: test edx, edx; je short 0x0000000000144970; add rsp, 0x10; pop rbx; ret; 
0x000000001449ab: test edx, edx; je short 0x00000000001449e0; add rsp, 0x10; pop rbx; ret; 
0x00000000144c9b: test edx, edx; je short 0x0000000000144cd0; add rsp, 0x10; pop rbx; ret; 
0x00000000144d0b: test edx, edx; je short 0x0000000000144d40; add rsp, 0x10; pop rbx; ret; 
0x00000000144e5b: test edx, edx; je short 0x0000000000144e90; add rsp, 0x10; pop rbx; ret; 
0x00000000144ecb: test edx, edx; je short 0x0000000000144f00; add rsp, 0x10; pop rbx; ret; 
0x0000000014555b: test edx, edx; je short 0x0000000000145590; add rsp, 0x10; pop rbx; ret; 
0x000000001455cb: test edx, edx; je short 0x0000000000145600; add rsp, 0x10; pop rbx; ret; 
0x0000000014563b: test edx, edx; je short 0x0000000000145670; add rsp, 0x10; pop rbx; ret; 
0x000000001456ab: test edx, edx; je short 0x00000000001456e0; add rsp, 0x10; pop rbx; ret; 
0x00000000052086: test edx, edx; jne short 0x00000000000520b0; mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000052272: test edx, edx; jne short 0x00000000000522e0; mov dword ptr [rsi], 0x0; mov eax, 0x2; ret; 
0x00000000082a11: test edx, edx; jne short 0x0000000000082a20; xor eax, eax; ret; 
0x0000000008c00f: test edx, edx; jne short 0x000000000008c01c; mov dword ptr [rdi+0x10], 0xffffffff; xor eax, eax; ret; 
0x000000000928a9: test edx, edx; jne short 0x00000000000928b1; mov rax, [r8+0x18]; mov [rdi+0x18], rax; ret; 
0x000000000b4b21: test edx, edx; jne short 0x00000000000b4b29; mov rax, rdi; ret; 
0x000000000b53b6: test edx, edx; jne short 0x00000000000b53a8; xor eax, eax; ret; 
0x000000000b5450: test edx, edx; jne short 0x00000000000b5430; ret; 
0x000000000b668b: test edx, edx; jne short 0x00000000000b6680; ret; 
0x0000000010ce1a: test edx, edx; jne short 0x000000000010ce28; mov eax, r8d; ret; 
0x0000000010d04d: test edx, edx; jne short 0x000000000010d058; ret; 
0x0000000010d89d: test edx, edx; jne short 0x000000000010d8a8; ret; 
0x00000000145d90: test edx, edx; jne short 0x0000000000145da0; mov r8d, 0x1; mov eax, r8d; ret; 
0x00000000145dd0: test edx, edx; jne short 0x0000000000145de0; mov r8d, 0x1; mov eax, r8d; ret; 
0x000000000fe844: test edx, edx; js short 0x00000000000fe850; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x00000000123626: test edx, edx; js short 0x0000000000123638; mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000087e2d: test edx, edx; sete al; neg eax; ret; 
0x00000000041d69: test edx, edx; sete al; ret; 
0x0000000008edff: test edx, edx; setne al; mov [rdi+0x1c], eax; xor eax, eax; ret; 
0x00000000144e99: test edx, edx; setne al; mov [rsp+0x8], rax; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000141b5e: test edx, edx; setne al; neg eax; add rsp, 0x18; ret; 
0x0000000006739e: test edx, esi; sub [rax], eax; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x0000000008df59: test edx, esp; add [rax], al; add [rax+0x1], bh; ret; 
0x000000000f85b6: test esi, 0x575ff00; mov [rdi], si; xor eax, eax; ret; 
0x0000000009aa57: test esi, 0x800; jne short 0x000000000009aa10; ret; 
0x0000000009ab67: test esi, 0x800; jne short 0x000000000009ab20; ret; 
0x0000000009ac07: test esi, 0x800; jne short 0x000000000009abc0; ret; 
0x0000000009afd7: test esi, 0x800; jne short 0x000000000009af90; ret; 
0x0000000009b107: test esi, 0x800; jne short 0x000000000009b0c0; ret; 
0x0000000009bfb7: test esi, 0x800; jne short 0x000000000009bf70; ret; 
0x0000000009c047: test esi, 0x800; jne short 0x000000000009c000; ret; 
0x000000000f029c: test esi, eax; jne short 0x00000000000f0278; mov eax, [rdi+0x14]; ret; 
0x00000000043da1: test esi, edi; jmp qword ptr [rax+rcx*2-0x75]; 
0x00000000037210: test esi, esi; je short 0x0000000000037220; cmp esi, 0x3; je short 0x0000000000037220; ret; 
0x000000000fe0b4: test esi, esi; je short 0x00000000000fe0e2; mov eax, 0x118; syscall; 
0x0000000016f49e: test esi, esi; je short 0x000000000016f480; xor eax, eax; ret; 
0x00000000052114: test esi, esi; jne short 0x0000000000052140; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000000879c5: test esi, esi; jne short 0x00000000000879e0; and dword ptr [rdi+0x8], 0xfffffffe; xor eax, eax; ret; 
0x0000000008e580: test esi, esi; jne short 0x000000000008e590; and dword ptr [rdi], 0x7fffffff; xor eax, eax; ret; 
0x000000000aa7a1: test esi, esi; jne short 0x00000000000aa7a9; xor rax, rax; ret; 
0x000000000c6211: test esi, esi; jne short 0x00000000000c6219; xor rax, rax; ret; 
0x000000000c73b1: test esi, esi; jne short 0x00000000000c73e0; mov eax, 0x60; syscall; 
0x00000000104536: test esi, esi; jne short 0x0000000000104540; ret; 
0x00000000104556: test esi, esi; jne short 0x0000000000104560; ret; 
0x000000001256c2: test esi, esi; js 0x0000000000125503; mov rax, [rsp]; mov rdi, r12; call rax; 
0x000000000b54c8: test esi, esi; lea rdx, [rip+0xd7bcf]; lea rax, [rip+0xd8768]; cmove rax, rdx; ret; 
0x0000000009d3b8: test esi, esi; lea rdx, [rip+0xe9e1f]; lea rax, [rip+0xf06d8]; cmove rax, rdx; ret; 
0x0000000009bb18: test esi, esi; lea rdx, [rip+0xea1bf]; lea rax, [rip+0xf1c98]; cmove rax, rdx; ret; 
0x000000000808ee: test esp, eax; cli; jmp qword ptr [rsi+0x2e]; 
0x000000000717ee: test esp, edi; or [rax], eax; add [rbx-0x89f43], al; call qword ptr [rbx+0xf]; 
0x000000000d335c: test esp, esp; je short 0x00000000000d3375; mov rbx, r13; mov rdi, rbp; call r12; 
0x00000000108af3: test esp, esp; je short 0x0000000000108b05; mov rsi, r8; mov rdi, rbp; call r12; 
0x000000001535e2: test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000d335b: test r12, r12; je short 0x00000000000d3375; mov rbx, r13; mov rdi, rbp; call r12; 
0x00000000108af2: test r12, r12; je short 0x0000000000108b05; mov rsi, r8; mov rdi, rbp; call r12; 
0x0000000009a168: test r13, r13; jne 0x000000000009a09d; mov rax, [rip+0x152c68]; call qword ptr [rax]; 
0x000000001256c1: test r14d, r14d; js 0x0000000000125503; mov rax, [rsp]; mov rdi, r12; call rax; 
0x0000000002d257: test r15, r15; je short 0x000000000002d288; mov rsi, r12; mov edi, ebp; call r15; 
0x000000000d9959: test r15, r15; je short 0x00000000000d9968; mov rdi, rbx; call r15; 
0x000000000eea89: test r15, r15; je short 0x00000000000eea98; mov rdi, rbx; call r15; 
0x000000001390e8: test r15d, r15d; je short 0x0000000000139160; mov rax, [rdi+0x38]; call qword ptr [rax+0x18]; 
0x00000000141f4e: test r8, r8; je short 0x0000000000141f61; mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20]; 
0x0000000009855f: test r8b, r8b; je short 0x000000000009856b; mov [rip+0x15cc45], rdx; mov dword ptr [rip+0x15cc37], 0x0; ret; 
0x0000000005c1b3: test r8d, r8d; je short 0x000000000005c1f8; mov eax, 0x13c; syscall; 
0x000000000fe2f7: test r8d, r8d; je short 0x00000000000fe308; add rsp, 0x90; pop rbx; ret; 
0x0000000016a712: test r8d, r8d; je short 0x000000000016a718; xchg edx, eax; sub eax, edx; ret; 
0x0000000016b6f7: test r8d, r8d; je short 0x000000000016b6fd; xchg edx, eax; sub eax, edx; ret; 
0x00000000191d42: test r8d, r8d; jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x0000000005bb75: test r8d, r8d; jne short 0x000000000005bb80; pop rbx; ret; 
0x000000000c5c70: test rax, 0x1; je 0x00000000000c5bd5; lea rax, [rdi-0x10]; ret; 
0x000000000c5d20: test rax, 0x1; je short 0x00000000000c5d90; lea rax, [rdi-0x10]; ret; 
0x00000000104cd6: test rax, rax; je 0x0000000000104d70; call rax; 
0x0000000013a2bb: test rax, rax; je 0x000000000013a151; mov rdi, rbx; call rax; 
0x00000000037e85: test rax, rax; je short 0x0000000000037e8c; call rax; 
0x00000000037f81: test rax, rax; je short 0x0000000000037f88; call rax; 
0x00000000038e78: test rax, rax; je short 0x0000000000038e7f; call rax; 
0x00000000077204: test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x0000000007723d: test rax, rax; je short 0x0000000000077253; mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax; 
0x0000000007727d: test rax, rax; je short 0x00000000000772a0; mov rdi, [rdi+0xe0]; lea rsi, [rsp+0x8]; call rax; 
0x000000000772c4: test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000080d3c: test rax, rax; je short 0x0000000000080d48; pop rbx; ret; 
0x000000000840a8: test rax, rax; je short 0x00000000000840bc; mov qword ptr [rax], 0x0; mov qword ptr [rax+0x8], 0x0; ret; 
0x00000000087667: test rax, rax; je short 0x0000000000087670; xor eax, eax; pop rbx; ret; 
0x0000000009a2eb: test rax, rax; je short 0x000000000009a32b; add rsp, 0x10; pop r12; ret; 
0x000000000d214a: test rax, rax; je short 0x00000000000d2180; call rax; 
0x000000000d21ae: test rax, rax; je short 0x00000000000d21c8; sub rsp, 0x8; call rax; 
0x000000000d7281: test rax, rax; je short 0x00000000000d7288; call rax; 
0x000000000d72ec: test rax, rax; je short 0x00000000000d72ce; call rax; 
0x000000000f91ab: test rax, rax; je short 0x00000000000f91e0; xor edx, edx; call rax; 
0x000000000ff9db: test rax, rax; je short 0x00000000000ff9e1; ret; 
0x00000000101390: test rax, rax; je short 0x0000000000101398; mov [rax], rdx; ret; 
0x00000000104b7a: test rax, rax; je short 0x0000000000104bb0; call rax; 
0x000000001144ce: test rax, rax; je short 0x0000000000114500; mov rdi, [rdx+0x50]; mov rsi, rdx; call rax; 
0x00000000116d69: test rax, rax; je short 0x0000000000116d78; add rsp, 0x8; ret; 
0x0000000011f0ec: test rax, rax; je short 0x000000000011f0f6; mov rdi, rbx; call rax; 
0x0000000011f3fc: test rax, rax; je short 0x000000000011f406; mov rdi, rbx; call rax; 
0x0000000011f4ac: test rax, rax; je short 0x000000000011f4ba; lea rdi, [rip+0xd7728]; call rax; 
0x0000000012916e: test rax, rax; je short 0x0000000000129178; ret; 
0x0000000012e1dc: test rax, rax; je short 0x000000000012e1f0; add rsp, 0x8; ret; 
0x0000000012f9a4: test rax, rax; je short 0x000000000012f9af; cmp [rax+0x10], rdi; jne short 0x000000000012f9a0; ret; 
0x00000000133a90: test rax, rax; je short 0x0000000000133aa0; mov qword ptr [rip+0xc8a48], 0x0; ret; 
0x00000000138e4f: test rax, rax; je short 0x0000000000138e59; mov rdi, rbp; call rax; 
0x00000000139256: test rax, rax; je short 0x0000000000139260; mov rdi, rbp; call rax; 
0x0000000013a049: test rax, rax; je short 0x000000000013a053; mov rdi, rbx; call rax; 
0x0000000013a3ac: test rax, rax; je short 0x000000000013a3b6; mov rdi, rbx; call rax; 
0x0000000013abc3: test rax, rax; je short 0x000000000013abcd; mov rdi, r13; call rax; 
0x0000000013dbe0: test rax, rax; je short 0x000000000013dbee; lea rdi, [rbp+0xc8]; call rax; 
0x0000000013e563: test rax, rax; je short 0x000000000013e56d; mov rdi, rbp; call rax; 
0x0000000013e72b: test rax, rax; je short 0x000000000013e737; lea rdi, [r12+0x10]; call rax; 
0x0000000013f79e: test rax, rax; je short 0x000000000013f7a8; mov rdi, rbp; call rax; 
0x0000000013f90f: test rax, rax; je short 0x000000000013f919; mov rdi, r13; call rax; 
0x000000001402cd: test rax, rax; je short 0x00000000001402d8; lea rdi, [rbp+0x68]; call rax; 
0x00000000140982: test rax, rax; je short 0x000000000014098c; mov rdi, rbp; call rax; 
0x00000000140cbd: test rax, rax; je short 0x0000000000140cc8; lea rdi, [rbp+0x58]; call rax; 
0x00000000142633: test rax, rax; je short 0x0000000000142601; mov fs:[rbx], rax; pop rbx; ret; 
0x000000001425fc: test rax, rax; je short 0x0000000000142608; pop rbx; ret; 
0x0000000014269b: test rax, rax; je short 0x000000000014265d; mov fs:[rbx], rax; pop rbx; ret; 
0x000000001432db: test rax, rax; je short 0x00000000001432e7; lea rdi, [r12+0x10]; call rax; 
0x00000000143914: test rax, rax; je short 0x0000000000143920; lea rdi, [r12+0x10]; call rax; 
0x0000000014be49: test rax, rax; je short 0x000000000014be61; mov rax, [rip+0xa1072]; call qword ptr [rax+0x360]; 
0x00000000192885: test rax, rax; je short 0x000000000019288c; call rax; 
0x000000001929b0: test rax, rax; je short 0x00000000001929bc; call rax; 
0x00000000108fc2: test rax, rax; jl short 0x0000000000108fda; je short 0x0000000000108fca; ret; 
0x00000000109c19: test rax, rax; jl short 0x0000000000109c36; je short 0x0000000000109c21; ret; 
0x0000000007aaae: test rax, rax; jne short 0x000000000007aaa0; mov rax, r8; ret; 
0x000000000833fe: test rax, rax; jne short 0x00000000000833f0; mov rax, r8; ret; 
0x00000000083ffb: test rax, rax; jne short 0x0000000000083ff0; ret; 
0x00000000084ae3: test rax, rax; jne short 0x0000000000084ad8; ret; 
0x00000000092290: test rax, rax; jne short 0x0000000000092280; mov [rdi+0x20], rax; mov [rsi+0x20], rdi; ret; 
0x0000000009284d: test rax, rax; jne short 0x0000000000092840; ret; 
0x0000000009a1ce: test rax, rax; jne short 0x000000000009a1c0; xor eax, eax; ret; 
0x0000000009a28a: test rax, rax; jne short 0x000000000009a280; mov eax, r8d; ret; 
0x00000000100a87: test rax, rax; jne short 0x0000000000100a50; xor eax, eax; pop rbp; ret; 
0x0000000012f0e7: test rax, rax; jne short 0x000000000012f0f0; ret; 
0x00000000143254: test rax, rax; jne short 0x0000000000143240; pop rbx; ret; 
0x00000000149fc4: test rax, rax; jne short 0x0000000000149f90; xor eax, eax; add rsp, 0x18; ret; 
0x0000000010066e: test rax, rax; js short 0x0000000000100679; cmp r8d, 0x2; jbe short 0x0000000000100680; ret; 
0x0000000009e162: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000001314c5: test rax, rax; sete al; add rsp, 0x8; ret; 
0x00000000102de0: test rbp, r14; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret; 
0x0000000014d08b: test rbx, rbx; jne short 0x000000000014d098; pop rbx; ret; 
0x00000000192722: test rbx, rbx; jne short 0x000000000019270d; pop rbx; ret; 
0x00000000192c98: test rbx, rbx; jne short 0x0000000000192c85; pop rbx; ret; 
0x00000000192d32: test rbx, rbx; jne short 0x0000000000192d18; pop rbx; ret; 
0x000000001931eb: test rbx, rbx; jne short 0x00000000001931e0; mov qword ptr [rip+0x692e5], 0x0; pop rbx; ret; 
0x00000000128d1b: test rcx, rcx; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x00000000041b90: test rdi, rdi; je short 0x0000000000041b9f; mov qword ptr [rdi], 0x0; xor eax, eax; ret; 
0x00000000043efd: test rdi, rdi; je short 0x0000000000043f08; mov dword ptr [rdi], 0x0; pop rbx; ret; 
0x00000000104530: test rdi, rdi; je short 0x000000000010453a; test rsi, rsi; jne short 0x0000000000104540; ret; 
0x00000000104550: test rdi, rdi; je short 0x000000000010455a; test rsi, rsi; jne short 0x0000000000104560; ret; 
0x0000000013936d: test rdi, rdi; je short 0x0000000000139381; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x000000001394f6: test rdi, rdi; je short 0x0000000000139502; mov rax, [rdi+0x8]; call qword ptr [rax+0x20]; 
0x00000000101907: test rdi, rdi; jne short 0x0000000000101918; mov eax, 0x1; ret; 
0x00000000103c1a: test rdi, rdi; jne short 0x0000000000103c46; mov rdi, [rbp]; call rbx; 
0x0000000011f3df: test rdi, rdi; jne short 0x000000000011f3d0; pop rbx; ret; 
0x0000000013241d: test rdi, rdi; jne short 0x0000000000132400; add rsp, 0x18; ret; 
0x0000000004054e: test rdx, rax; je short 0x0000000000040558; ret; 
0x000000000aa679: test rdx, rdx; je 0x00000000000aa700; bsf rax, rdx; ret; 
0x000000000aa839: test rdx, rdx; je 0x00000000000aa8e0; bsf rax, rdx; ret; 
0x000000000c62ba: test rdx, rdx; je 0x00000000000c6360; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000086c0a: test rdx, rdx; je short 0x0000000000086be0; call rdx; 
0x000000000aa6da: test rdx, rdx; je short 0x00000000000aa6f0; bsf rax, rdx; ret; 
0x000000000aa8a9: test rdx, rdx; je short 0x00000000000aa8d0; bsf rax, rdx; ret; 
0x000000000c611a: test rdx, rdx; je short 0x00000000000c6130; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c60bd: test rdx, rdx; je short 0x00000000000c6140; bsf rax, rdx; shr rax, 0x2; ret; 
0x000000000c6329: test rdx, rdx; je short 0x00000000000c6350; bsf rax, rdx; shr rax, 0x2; ret; 
0x00000000109c0a: test rdx, rdx; je short 0x0000000000109c36; mov r8, rcx; mov eax, 0x1b3; syscall; 
0x00000000052085: test rdx, rdx; jne short 0x00000000000520b0; mov dword ptr [rsi], 0x0; mov eax, 0x1; ret; 
0x00000000052271: test rdx, rdx; jne short 0x00000000000522e0; mov dword ptr [rsi], 0x0; mov eax, 0x2; ret; 
0x00000000082a10: test rdx, rdx; jne short 0x0000000000082a20; xor eax, eax; ret; 
0x000000000b4b20: test rdx, rdx; jne short 0x00000000000b4b29; mov rax, rdi; ret; 
0x00000000123625: test rdx, rdx; js short 0x0000000000123638; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000fe0b3: test rsi, rsi; je short 0x00000000000fe0e2; mov eax, 0x118; syscall; 
0x00000000052113: test rsi, rsi; jne short 0x0000000000052140; mov dword ptr [rdx], 0x0; mov eax, 0x1; ret; 
0x000000000aa7a0: test rsi, rsi; jne short 0x00000000000aa7a9; xor rax, rax; ret; 
0x000000000c6210: test rsi, rsi; jne short 0x00000000000c6219; xor rax, rax; ret; 
0x000000000c73b0: test rsi, rsi; jne short 0x00000000000c73e0; mov eax, 0x60; syscall; 
0x00000000104535: test rsi, rsi; jne short 0x0000000000104540; ret; 
0x00000000104555: test rsi, rsi; jne short 0x0000000000104560; ret; 
0x000000000f85b5: test si, 0xff00; jne short 0x00000000000f85c1; mov [rdi], si; xor eax, eax; ret; 
0x00000000103caf: test sil, 0x1; jne short 0x0000000000103cd0; ret; 
0x00000000093ea4: test sil, 0x40; jne short 0x0000000000093ec0; add rdi, 0x1; mov eax, 0xf0; syscall; 
0x0000000002fd54: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000173e79: tzcnt ax, ax; add rax, rdi; vzeroupper; ret; 
0x0000000018722b: tzcnt eax, eax; add rax, rcx; ret; 
0x000000001702b9: tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000001889c3: tzcnt eax, eax; add rax, rdi; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x00000000185d12: tzcnt eax, eax; add rax, rdi; ret; 
0x0000000016fff2: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000188e71: tzcnt eax, eax; add rax, rdx; ret; 
0x0000000017403b: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000170060: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000170070: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000170080: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000173ff0: tzcnt eax, eax; add rdi, 0xffffffffffffff80; add rax, rdi; vzeroupper; ret; 
0x00000000185e87: tzcnt eax, eax; cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018d25f: tzcnt eax, eax; cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d96d: tzcnt eax, eax; cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018de0a: tzcnt eax, eax; cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbc0: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd40: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x20]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd15: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x40]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bb80: tzcnt eax, eax; cmp esi, [rdi+rax*4+0x60]; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bd30: tzcnt eax, eax; cmp esi, [rdi+rax*4]; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x0000000018bd89: tzcnt eax, eax; cmp esi, [rdx+rax*4]; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x0000000018b913: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000174660: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000188a20: tzcnt eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x20]; ret; 
0x00000000188bb0: tzcnt eax, eax; cmp sil, [rdi+rax+0x20]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x20]; ret; 
0x000000001889e0: tzcnt eax, eax; cmp sil, [rdi+rax+0x60]; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x60]; ret; 
0x00000000188ba0: tzcnt eax, eax; cmp sil, [rdi+rax]; jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x00000000188c01: tzcnt eax, eax; cmp sil, [rdx+rax]; jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000170050: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000179170: tzcnt eax, eax; lea eax, [rax+rcx*4-0x21]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179160: tzcnt eax, eax; lea eax, [rax+rcx*4-0x41]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179150: tzcnt eax, eax; lea eax, [rax+rcx*4-0x61]; shr eax, 0x2; vzeroupper; ret; 
0x00000000179130: tzcnt eax, eax; lea eax, [rax+rcx*4-0x81]; shr eax, 0x2; vzeroupper; ret; 
0x0000000018cbf0: tzcnt eax, eax; lea eax, [rcx+rax-0x11]; ret; 
0x0000000018cbe0: tzcnt eax, eax; lea eax, [rcx+rax-0x19]; ret; 
0x0000000018b6e0: tzcnt eax, eax; lea eax, [rcx+rax-0x21]; ret; 
0x0000000018b6d0: tzcnt eax, eax; lea eax, [rcx+rax-0x41]; ret; 
0x0000000018b6c0: tzcnt eax, eax; lea eax, [rcx+rax-0x61]; ret; 
0x0000000018b6b0: tzcnt eax, eax; lea eax, [rcx+rax-0x81]; ret; 
0x0000000018cc00: tzcnt eax, eax; lea eax, [rcx+rax-0x9]; ret; 
0x0000000018d130: tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018d140: tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018d150: tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d160: tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018de90: tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018dea0: tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018de66: tzcnt eax, eax; lea rax, [rdi+rax*4+0xe0]; ret; 
0x0000000018bb63: tzcnt eax, eax; lea rax, [rdi+rax*4]; cmp esi, [rax]; jne short 0x000000000018bb90; ret; 
0x0000000018d0d2: tzcnt eax, eax; lea rax, [rdi+rax*4]; ret; 
0x0000000018d2c0: tzcnt eax, eax; lea rax, [rdi+rax*4]; vzeroupper; ret; 
0x0000000018c47f: tzcnt eax, eax; lea rax, [rdi+rax+0x10]; ret; 
0x00000000185d60: tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x00000000185f00: tzcnt eax, eax; lea rax, [rdi+rax+0x20]; vzeroupper; ret; 
0x00000000185d70: tzcnt eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185d80: tzcnt eax, eax; lea rax, [rdi+rax+0x60]; ret; 
0x00000000185d90: tzcnt eax, eax; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d9e0: tzcnt eax, eax; lea rax, [rdi+rax+0xa0]; ret; 
0x0000000018d9f0: tzcnt eax, eax; lea rax, [rdi+rax+0xc0]; ret; 
0x0000000018d9c3: tzcnt eax, eax; lea rax, [rdi+rax+0xe0]; ret; 
0x00000000187350: tzcnt eax, eax; lea rax, [rdi+rax-0x60]; vzeroupper; ret; 
0x00000000187340: tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x00000000188e20: tzcnt eax, eax; lea rax, [rdi+rax]; ret; 
0x000000001860ef: tzcnt eax, eax; movzx ecx, byte ptr [rsi+rax+0x20]; movzx eax, byte ptr [rdi+rax+0x20]; sub eax, ecx; ret; 
0x00000000186100: tzcnt eax, eax; movzx ecx, byte ptr [rsi+rax+0x40]; movzx eax, byte ptr [rdi+rax+0x40]; sub eax, ecx; ret; 
0x000000001860e0: tzcnt eax, eax; movzx ecx, byte ptr [rsi+rax]; movzx eax, byte ptr [rdi+rax]; sub eax, ecx; ret; 
0x000000001898e7: tzcnt eax, eax; ret; 
0x00000000178ee9: tzcnt eax, eax; shr eax, 0x2; vzeroupper; ret; 
0x00000000174420: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x00000000174410: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x00000000174400: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000001743f0: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000001898f0: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x20]; ret; 
0x00000000189900: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x40]; ret; 
0x00000000189910: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x60]; ret; 
0x00000000189920: tzcnt eax, eax; sub edi, edx; lea eax, [rdi+rax+0x80]; ret; 
0x0000000018c380: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c390: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a0: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c370: tzcnt eax, eax; sub edi, edx; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000001703c0: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000174000: tzcnt eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000001703b0: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000170260: tzcnt eax, eax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x000000001701e0: tzcnt eax, eax; sub rdi, 0xffffffffffffffdf; add rax, rdi; vzeroupper; ret; 
0x0000000018b8a0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8b0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018ce00: tzcnt eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cde0: tzcnt eax, eax; sub rdi, rdx; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x00000000174245: tzcnt eax, eax; vzeroupper; ret; 
0x000000001824ba: tzcnt eax, eax; xtest; je short 0x00000000001824c7; vzeroall; ret; 
0x00000000186150: tzcnt ecx, ecx; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x0000000018911b: tzcnt ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000189174: tzcnt ecx, esi; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; ret; 
0x0000000018913b: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x0000000018915b: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; ret; 
0x00000000188ef4: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; ret; 
0x00000000188f14: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; ret; 
0x00000000188f34: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; ret; 
0x00000000188ed6: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret; 
0x000000001899e2: tzcnt rax, rax; add rax, rdi; ret; 
0x00000000188b87: tzcnt rax, rax; cmp sil, [rdi+rax+0x40]; jne short 0x0000000000188b99; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188e07: tzcnt rax, rax; lea rax, [rdi+rax+0x40]; ret; 
0x00000000185ed7: tzcnt rax, rax; lea rax, [rdi+rax+0x40]; vzeroupper; ret; 
0x00000000187325: tzcnt rax, rax; lea rax, [rdi+rax-0x40]; vzeroupper; ret; 
0x00000000170397: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000173fd7: tzcnt rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000017018b: tzcnt rax, rax; sub rdi, 0xffffffffffffffbf; add rax, rdi; vzeroupper; ret; 
0x0000000018921b: tzcnt rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x000000000407a2: ucomisd xmm0, xmm4; jp short 0x00000000000407b0; jne short 0x00000000000407b0; addsd xmm0, xmm0; ret; 
0x000000000407a3: ucomiss xmm0, xmm4; jp short 0x00000000000407b0; jne short 0x00000000000407b0; addsd xmm0, xmm0; ret; 
0x00000000040abf: ucomiss xmm0, xmm4; jp short 0x0000000000040ad0; jne short 0x0000000000040ad0; addss xmm0, xmm0; ret; 
0x00000000139456: ud0 edi, edi; jmp qword ptr [rsi+0xf]; 
0x0000000002ce09: ud2; cmp dword ptr [rsp+0x10], 0x0; je short 0x000000000002ce2c; mov rdi, [rsp+0x8]; call qword ptr [rsp]; 
0x00000000156f38: ud2; lea r11, [rip+0x632bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001014a9: verr [r11]; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000f95de: verr [rbx+rcx*4]; cmp eax, 0x26; je short 0x00000000000f95f0; mov eax, r9d; ret; 
0x000000001014aa: verr [rbx]; mov rax, r8; mov byte ptr [rsi-0x1], 0x0; ret; 
0x000000000f92c5: verr [rdi+rax*8]; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret; 
0x000000000b9c8d: verw ax; jl short 0x00000000000b9c9a; clc; jmp qword ptr [rsi+0x66]; 
0x000000000bc1bb: verw ax; jrcxz 0x00000000000bc1b8; jmp qword ptr [rsi+0x66]; 
0x000000000b76ab: verw ax; pop rsi; clc; jmp qword ptr [rsi+0x66]; 
0x000000000c113b: verw ax; pop rsi; in eax, dx; sti; jmp qword ptr [rsi+0x66]; 
0x000000001773de: vmovdqu [r11], ymm4; vzeroupper; ret; 
0x00000000177472: vmovdqu [r11], ymm8; vzeroupper; ret; 
0x0000000017b9fa: vmovdqu [r9-0x10], xmm1; ret; 
0x0000000017b9e6: vmovdqu [r9-0x20], ymm1; ret; 
0x0000000017b9cd: vmovdqu [r9-0x20], ymm3; ret; 
0x0000000017b9c7: vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x000000001779c1: vmovdqu [rax+rdx-0x10], xmm0; vmovdqu [rax], xmm0; vzeroupper; ret; 
0x0000000017798e: vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000177988: vmovdqu [rax+rdx-0x40], ymm0; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000177982: vmovdqu [rax+rdx-0x60], ymm0; vmovdqu [rax+rdx-0x40], ymm0; vmovdqu [rax+rdx-0x20], ymm0; vzeroupper; ret; 
0x000000001779c7: vmovdqu [rax], xmm0; vzeroupper; ret; 
0x000000001773d4: vmovdqu [rcx-0x40], ymm7; vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret; 
0x000000001773d9: vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret; 
0x0000000017b9c2: vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x00000000177320: vmovdqu [rdi+0x20], ymm1; vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x00000000176e70: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret; 
0x00000000175590: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; vzeroupper; ret; 
0x00000000176140: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x00000000177468: vmovdqu [rdi+0x40], ymm6; vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret; 
0x00000000177016: vmovdqu [rdi+0x60], ymm7; lea rax, [rdi+0x80]; vzeroupper; ret; 
0x000000001755e6: vmovdqu [rdi+0x60], ymm7; mov byte ptr [rdi+0x80], 0x0; vzeroupper; ret; 
0x0000000017746d: vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret; 
0x000000001762e6: vmovdqu [rdi+0x60], ymm7; vzeroupper; ret; 
0x000000001761a4: vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x00000000176e2f: vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000017554f: vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001760ff: vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x00000000176e4f: vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000017556f: vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000017611f: vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x00000000177251: vmovdqu [rdi+rdx-0x10], xmm1; vzeroupper; ret; 
0x0000000017677e: vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000174cce: vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000017789c: vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x00000000177931: vmovdqu [rdi+rdx-0x20], ymm0; vzeroupper; ret; 
0x00000000180051: vmovdqu [rdi+rdx-0x20], ymm0; xtest; je short 0x0000000000180060; vzeroall; ret; 
0x00000000177175: vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x0000000017f551: vmovdqu [rdi+rdx-0x20], ymm1; xtest; je short 0x000000000017f560; vzeroall; ret; 
0x00000000177325: vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x00000000177644: vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x0000000017792b: vmovdqu [rdi+rdx-0x40], ymm0; vmovdqu [rdi+rdx-0x20], ymm0; vzeroupper; ret; 
0x0000000017763e: vmovdqu [rdi+rdx-0x40], ymm2; vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x0000000017732b: vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret; 
0x000000001772f1: vmovdqu [rdi+rdx-0x40], ymm5; vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x00000000177638: vmovdqu [rdi+rdx-0x60], ymm1; vmovdqu [rdi+rdx-0x40], ymm2; vmovdqu [rdi+rdx-0x20], ymm3; vzeroupper; ret; 
0x000000001772f7: vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x000000001772fd: vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret; 
0x0000000017675e: vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000174cae: vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000017b9f6: vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x000000001761a0: vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret; 
0x0000000017724d: vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; vzeroupper; ret; 
0x0000000017c0d5: vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret; 
0x00000000176e2b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000017554b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x000000001760fb: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x0000000017675a: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000174caa: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000017b9e2: vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x0000000017b9be: vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret; 
0x00000000177171: vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x000000001778a2: vmovdqu [rdi], ymm0; vzeroupper; ret; 
0x0000000017613c: vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret; 
0x00000000176e4b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret; 
0x0000000017556b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0x0; vzeroupper; ret; 
0x0000000017611b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x0000000017677a: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret; 
0x00000000174cca: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x0000000017c0cb: vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000017c0d9: vmovdqu [rsi-0x10], xmm0; ret; 
0x0000000017c0cf: vmovdqu [rsi-0x20], ymm2; ret; 
0x0000000017b9ed: vmovdqu xmm0, [rsi]; vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x0000000017b9f1: vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret; 
0x00000000177247: vmovdqu xmm1, [rsi+rdx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; vzeroupper; ret; 
0x000000001760f4: vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret; 
0x00000000174ca4: vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret; 
0x0000000017b9d9: vmovdqu ymm0, [rsi]; vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x0000000017b9dd: vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret; 
0x0000000017716b: vmovdqu ymm1, [rsi+rdx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret; 
0x00000000176114: vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret; 
0x00000000174cc4: vmovdqu ymm3, [rsi+rdx-0x1f]; vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret; 
0x00000000186766: vmovdqu64 [r11], ymm20; ret; 
0x00000000186816: vmovdqu64 [r11], ymm24; ret; 
0x0000000017e69f: vmovdqu64 [r11], zmm20; ret; 
0x0000000017e75f: vmovdqu64 [r11], zmm24; ret; 
0x0000000017ecd7: vmovdqu64 [rax+rdx-0x100], zmm16; vmovdqu64 [rax+rdx-0xc0], zmm16; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ed63: vmovdqu64 [rax+rdx-0x10], xmm16; vmovdqu64 [rax], xmm16; ret; 
0x0000000018714c: vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ed54: vmovdqu64 [rax+rdx-0x20], ymm16; vmovdqu64 [rax], ymm16; ret; 
0x00000000187144: vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ecef: vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000018713c: vmovdqu64 [rax+rdx-0x60], ymm16; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x00000000187134: vmovdqu64 [rax+rdx-0x80], ymm16; vmovdqu64 [rax+rdx-0x60], ymm16; vmovdqu64 [rax+rdx-0x40], ymm16; vmovdqu64 [rax+rdx-0x20], ymm16; rep ret; 
0x0000000017ece7: vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ecdf: vmovdqu64 [rax+rdx-0xc0], zmm16; vmovdqu64 [rax+rdx-0x80], zmm16; vmovdqu64 [rax+rdx-0x40], zmm16; rep ret; 
0x0000000017ed6b: vmovdqu64 [rax], xmm16; ret; 
0x0000000017ed5c: vmovdqu64 [rax], ymm16; ret; 
0x00000000186751: vmovdqu64 [rcx-0x20], ymm22; vmovdqu64 [rcx-0x40], ymm23; vmovdqu64 [rcx-0x60], ymm24; vmovdqu64 [r11], ymm20; ret; 
0x00000000186758: vmovdqu64 [rcx-0x40], ymm23; vmovdqu64 [rcx-0x60], ymm24; vmovdqu64 [r11], ymm20; ret; 
0x0000000017e68a: vmovdqu64 [rcx-0x40], zmm22; vmovdqu64 [rcx-0x80], zmm23; vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x0000000018675f: vmovdqu64 [rcx-0x60], ymm24; vmovdqu64 [r11], ymm20; ret; 
0x0000000017e691: vmovdqu64 [rcx-0x80], zmm23; vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x0000000017e698: vmovdqu64 [rcx-0xc0], zmm24; vmovdqu64 [r11], zmm20; ret; 
0x00000000186681: vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x00000000187f46: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x0000000018a3e6: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000018b376: vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x00000000186801: vmovdqu64 [rdi+0x20], ymm21; vmovdqu64 [rdi+0x40], ymm22; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [r11], ymm24; ret; 
0x0000000018b53b: vmovdqu64 [rdi+0x40], ymm22; sub r8, 0x20; jb 0x000000000018b125; vmovdqu64 [rdi+0x60], ymm23; ret; 
0x00000000186808: vmovdqu64 [rdi+0x40], ymm22; vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [r11], ymm24; ret; 
0x0000000017e5ba: vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x0000000017e74a: vmovdqu64 [rdi+0x40], zmm21; vmovdqu64 [rdi+0x80], zmm22; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [r11], zmm24; ret; 
0x0000000018811c: vmovdqu64 [rdi+0x60], ymm23; lea rax, [rdi+0x80]; ret; 
0x0000000018a44c: vmovdqu64 [rdi+0x60], ymm23; mov byte ptr [rdi+0x80], 0x0; ret; 
0x0000000018b54c: vmovdqu64 [rdi+0x60], ymm23; ret; 
0x0000000018680f: vmovdqu64 [rdi+0x60], ymm23; vmovdqu64 [r11], ymm24; ret; 
0x0000000017e751: vmovdqu64 [rdi+0x80], zmm22; vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [r11], zmm24; ret; 
0x0000000017e758: vmovdqu64 [rdi+0xc0], zmm23; vmovdqu64 [r11], zmm24; ret; 
0x00000000187fb6: vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x00000000187ee4: vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x0000000018a384: vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b334: vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000187f14: vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x0000000018a3b4: vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b354: vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x0000000017e96f: vmovdqu64 [rdi+rdx-0x100], zmm16; vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017e58e: vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x0000000017e4c5: vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x00000000187797: vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000188967: vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x000000001870d7: vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x00000000187049: vmovdqu64 [rdi+rdx-0x20], ymm16; vmovdqu64 [rdi], ymm16; ret; 
0x0000000017e4a8: vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000186688: vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x00000000186a32: vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x0000000018663d: vmovdqu64 [rdi+rdx-0x20], ymm20; vmovdqu64 [rdi+rdx-0x40], ymm21; vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x000000001870cf: vmovdqu64 [rdi+rdx-0x40], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm16; ret; 
0x00000000186a2a: vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x00000000186690: vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x00000000186645: vmovdqu64 [rdi+rdx-0x40], ymm21; vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x0000000017ec77: vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x0000000017ebec: vmovdqu64 [rdi+rdx-0x40], zmm16; vmovdqu64 [rdi], zmm16; ret; 
0x0000000017e3ae: vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e5c1: vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x0000000017e987: vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017e576: vmovdqu64 [rdi+rdx-0x40], zmm20; vmovdqu64 [rdi+rdx-0x80], zmm21; vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x00000000186a22: vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x0000000018664d: vmovdqu64 [rdi+rdx-0x60], ymm22; vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x00000000186a1a: vmovdqu64 [rdi+rdx-0x80], ymm16; vmovdqu64 [rdi+rdx-0x60], ymm17; vmovdqu64 [rdi+rdx-0x40], ymm18; vmovdqu64 [rdi+rdx-0x20], ymm19; ret; 
0x00000000186655: vmovdqu64 [rdi+rdx-0x80], ymm23; ret; 
0x0000000017ec6f: vmovdqu64 [rdi+rdx-0x80], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm16; ret; 
0x0000000017e97f: vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017e5c9: vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x0000000017e57e: vmovdqu64 [rdi+rdx-0x80], zmm21; vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x0000000017e977: vmovdqu64 [rdi+rdx-0xc0], zmm17; vmovdqu64 [rdi+rdx-0x80], zmm18; vmovdqu64 [rdi+rdx-0x40], zmm19; ret; 
0x0000000017e586: vmovdqu64 [rdi+rdx-0xc0], zmm22; vmovdqu64 [rdi+rdx-0x100], zmm23; ret; 
0x00000000187767: vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000188937: vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000187fb0: vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+r8-0x10], xmm16; ret; 
0x0000000017e4bf: vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x00000000187ede: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x0000000018a37e: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b32e: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000187761: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000188931: vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000187051: vmovdqu64 [rdi], ymm16; ret; 
0x0000000018667b: vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+0x20], ymm17; vmovdqu64 [rdi+rdx-0x20], ymm18; vmovdqu64 [rdi+rdx-0x40], ymm19; ret; 
0x0000000017e4a2: vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x00000000187f40: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; ret; 
0x0000000018a3e0: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0x0; ret; 
0x0000000018b370: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+0x20], ymm19; mov [rdi+0x40], cl; ret; 
0x00000000187f0e: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x0000000018a3ae: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b34e: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x00000000187791: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000188961: vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x0000000017ebf4: vmovdqu64 [rdi], zmm16; ret; 
0x0000000017e5b4: vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+0x40], zmm17; vmovdqu64 [rdi+rdx-0x40], zmm18; vmovdqu64 [rdi+rdx-0x80], zmm19; ret; 
0x0000000017e3a8: vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e4b1: vmovdqu64 xmm16, [rsi]; vmovdqu64 xmm17, [rsi+rdx-0x10]; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000017e4b7: vmovdqu64 xmm17, [rsi+rdx-0x10]; vmovdqu64 [rdi], xmm16; vmovdqu64 [rdi+rdx-0x10], xmm17; ret; 
0x0000000018b320: vmovdqu64 xmm18, [rsi]; vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000188920: vmovdqu64 xmm18, [rsi]; vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x00000000187ed6: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; lea rax, [rdi+r8]; ret; 
0x0000000018a376: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b326: vmovdqu64 xmm19, [rsi+r8-0x10]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+r8-0x10], xmm19; ret; 
0x00000000187756: vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; lea rax, [rdi+rdx]; ret; 
0x00000000188926: vmovdqu64 xmm19, [rsi+rdx-0xf]; vmovdqu64 [rdi], xmm18; vmovdqu64 [rdi+rdx-0xf], xmm19; ret; 
0x0000000017e494: vmovdqu64 ymm16, [rsi]; vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000017e49a: vmovdqu64 ymm17, [rsi+rdx-0x20]; vmovdqu64 [rdi], ymm16; vmovdqu64 [rdi+rdx-0x20], ymm17; ret; 
0x0000000018b340: vmovdqu64 ymm18, [rsi]; vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x00000000188950: vmovdqu64 ymm18, [rsi]; vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x00000000187f06: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; lea rax, [rdi+r8]; ret; 
0x0000000018a3a6: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; mov byte ptr [rdi+r8], 0x0; ret; 
0x0000000018b346: vmovdqu64 ymm19, [rsi+r8-0x20]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+r8-0x20], ymm19; ret; 
0x00000000187786: vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; lea rax, [rdi+rdx]; ret; 
0x00000000188956: vmovdqu64 ymm19, [rsi+rdx-0x1f]; vmovdqu64 [rdi], ymm18; vmovdqu64 [rdi+rdx-0x1f], ymm19; ret; 
0x0000000017e39a: vmovdqu64 zmm16, [rsi]; vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000017e3a0: vmovdqu64 zmm17, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm16; vmovdqu64 [rdi+rdx-0x40], zmm17; ret; 
0x0000000018717c: vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1f: vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000017c0e4: vmovq [rdi], xmm0; vmovq [rsi-0x8], xmm0; ret; 
0x0000000017c0e8: vmovq [rsi-0x8], xmm0; ret; 
0x0000000017bcee: vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcf5: vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bcfc: vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bd03: vmovups [r9+0x1c0], zmm15; ret; 
0x0000000017bb87: vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b94d: vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb9c: vmovups [r9-0x40], zmm15; ret; 
0x0000000017b99e: vmovups [r9-0x40], zmm3; ret; 
0x0000000017b962: vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb95: vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b997: vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017b95b: vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017bb8e: vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret; 
0x0000000017b954: vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret; 
0x0000000017b990: vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017c09d: vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017be50: vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be57: vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be5e: vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret; 
0x0000000017be65: vmovups [rdi-0x200], zmm15; ret; 
0x0000000017b98a: vmovups [rdi], zmm0; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret; 
0x0000000017c097: vmovups [rdi], zmm2; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c0b8: vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c273: vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c27a: vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c281: vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c288: vmovups [rsi+0x1c0], zmm2; ret; 
0x0000000017c1dd: vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1e4: vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c1eb: vmovups [rsi+0xc0], zmm2; ret; 
0x0000000017c075: vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c08a: vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c083: vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c07c: vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret; 
0x0000000017c1d7: vmovups [rsi], zmm2; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret; 
0x0000000007f76c: vpacksswb xmm2, xmm2, xmm5; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000007966c: vpaddw xmm6, xmm2, [rdx]; sti; jmp qword ptr [rsi+0x2e]; 
0x0000000018d78b: vpcmpd k1, xmm18, [rdi], 0x4; kmovd eax, k1; test eax, eax; jne 0x000000000018d4c0; ret; 
0x0000000018d73a: vpcmpd k1, xmm18, xmm17, 0x4; kmovd eax, k1; test eax, eax; jne 0x000000000018d4c0; ret; 
0x0000000018d463: vpcmpd k1, ymm16, ymm20, 0x4; kmovd ecx, k1; test ecx, ecx; jne 0x000000000018d503; ret; 
0x0000000018d688: vpcmpd k1, ymm17, [rdi+rdx*4-0x20], 0x4; kmovd eax, k1; test eax, eax; jne short 0x000000000018d6c0; ret; 
0x0000000018d648: vpcmpd k1, ymm17, [rdx+0x60], 0x4; kmovd eax, k1; test eax, eax; jne short 0x000000000018d6a4; ret; 
0x0000000018d4a3: vpcmpd k1, ymm18, [rdi], 0x4; kmovd eax, k1; bzhi eax, eax, edx; jne short 0x000000000018d4c0; ret; 
0x00000000170c91: vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10; 
0x00000000170b57: vpcmpeqb xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x0000000017f457: vpcmpeqb xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x00000000170afd: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x0000000017f3fd: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x00000000177dc7: vpcmpeqd xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x00000000185ca7: vpcmpeqd xmm2, xmm2, [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x00000000177d72: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x00000000185c52: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x000000001863fb: vpcmpub k1, xmm18, [rdi], 0x4; kmovd eax, k1; test eax, eax; jne 0x00000000001860e0; ret; 
0x000000001863a5: vpcmpub k1, xmm18, xmm17, 0x4; kmovd eax, k1; test eax, eax; jne 0x00000000001860e0; ret; 
0x00000000186089: vpcmpub k1, ymm16, ymm20, 0x4; kmovd ecx, k1; test ecx, ecx; jne 0x0000000000186123; ret; 
0x000000001862a8: vpcmpub k1, ymm17, [rdi+rdx-0x20], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001862e0; ret; 
0x00000000186268: vpcmpub k1, ymm17, [rdx+0x60], 0x4; kmovd eax, k1; test eax, eax; jne short 0x00000000001862c4; ret; 
0x000000001860c3: vpcmpub k1, ymm18, [rdi], 0x4; kmovd eax, k1; bzhi eax, eax, edx; jne short 0x00000000001860e0; ret; 
0x00000000170b01: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000170830; ret; 
0x00000000177d76: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x0000000000177ae0; ret; 
0x0000000017f401: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x000000000017f130; ret; 
0x00000000185c56: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x00000000001859c0; ret; 
0x000000001704fb: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000001709d0: vpmovmskb eax, ymm1; inc eax; jne short 0x0000000000170a20; vzeroupper; ret; 
0x00000000177c90: vpmovmskb eax, ymm1; inc eax; jne short 0x0000000000177ce0; vzeroupper; ret; 
0x0000000017099b: vpmovmskb eax, ymm4; inc eax; jne short 0x00000000001709e4; vzeroupper; ret; 
0x00000000177c5b: vpmovmskb eax, ymm4; inc eax; jne short 0x0000000000177ca4; vzeroupper; ret; 
0x00000000170823: vpmovmskb ecx, ymm7; inc ecx; jne short 0x00000000001708a3; vzeroupper; ret; 
0x00000000177ac7: vpmovmskb ecx, ymm7; inc ecx; jne short 0x0000000000177b43; vzeroupper; ret; 
0x0000000007769c: vpsrlw xmm1, xmm2, [rdi-0x5]; jmp qword ptr [rsi+0x2e]; 
0x0000000007facf: vpunpcklqdq xmm2, xmm2, xmm2; cli; jmp qword ptr [rsi+0x2e]; 
0x0000000017ee31: vzeroall; ret; 
0x0000000016f6a0: vzeroupper; ret; 
0x000000000b3abc: wrmsr; in eax, dx; mov [rdi+0x13], ch; ret; 
0x000000000b3b3e: wrmsr; in eax, dx; mov [rdi+0x17], ch; ret; 
0x000000000b3c41: wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret; 
0x0000000010970c: wrpkru; xor eax, eax; ret; 
0x0000000008898d: xadd [rdi], eax; cmp eax, 0x3; je short 0x00000000000889a0; ret; 
0x000000000888da: xadd [rdi], eax; shr eax, 0x2; cmp eax, 0x3; je short 0x00000000000888f0; ret; 
0x000000000435c1: xchg [r14], edx; cmp edx, 0x1; jg 0x00000000000436e8; mov edi, ebp; call rax; 
0x0000000004365c: xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x0000000006ebc3: xchg [rax+0x1], cl; clc; jmp rax; 
0x0000000006503f: xchg [rax+0x1], ecx; clc; jmp rax; 
0x000000000df67f: xchg [rax+0x1], edi; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000005c2a5: xchg [rax+0x48000000], ecx; mov [rax+0x8], ecx; mov dword ptr [rax+0x4], 0x1; xor eax, eax; ret; 
0x0000000007b072: xchg [rax+0x48000000], esp; cmp dword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x000000000713f3: xchg [rax+0x4800000a], cl; mov edx, ebx; mov rdi, r14; call qword ptr [r12+0x38]; 
0x000000001525f5: xchg [rax+0x6], edi; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000133904: xchg [rax+rax+0x5b000000], edi; pop rbp; pop r12; ret; 
0x000000000818b7: xchg [rax+rax-0x2dcf0000], ah; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000081ddf: xchg [rax+rax-0x2dcf0000], ch; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x0000000018ffeb: xchg [rax+rax-0x72b80000], ebp; adc eax, 0x2ad59; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000018de87: xchg [rax-0x3d000000], eax; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xa0]; ret; 
0x0000000018d349: xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018de97: xchg [rax-0x3d000000], esp; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d147: xchg [rax-0x3d], eax; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d356: xchg [rax-0x3d], eax; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bd22: xchg [rax-0x3d], eax; xor eax, eax; ret; 
0x0000000018d157: xchg [rax-0x3d], esp; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bb8d: xchg [rax-0x3d], esp; xor eax, eax; ret; 
0x0000000018d156: xchg [rax-0x3d], r12d; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bb8c: xchg [rax-0x3d], r12d; xor eax, eax; ret; 
0x0000000018d146: xchg [rax-0x3d], r8d; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018d355: xchg [rax-0x3d], r8d; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x60]; ret; 
0x0000000018bd21: xchg [rax-0x3d], r8d; xor eax, eax; ret; 
0x0000000007496d: xchg [rax-0x73], ecx; cmp eax, 0xffffe708; add rax, rdi; jmp rax; 
0x00000000073b59: xchg [rax-0x73], ecx; cmp eax, 0xfffff51c; add rax, rdi; jmp rax; 
0x000000000738d9: xchg [rax-0x73], ecx; cmp eax, 0xfffff79c; add rax, rdi; jmp rax; 
0x00000000139c13: xchg [rax-0x75], ecx; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20]; 
0x0000000007d073: xchg [rax], ah; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x1], cl; call qword ptr [rbx+0x80]; 
0x0000000018d4e0: xchg [rax], ah; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000010a1a1: xchg [rax], al; add [rax], al; syscall; 
0x0000000008c174: xchg [rax], eax; add [rax], al; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x00000000186098: xchg [rax], eax; add [rax], al; ret; 
0x00000000109271: xchg [rax], eax; add [rax], al; syscall; 
0x0000000018a454: xchg [rax], eax; ret; 
0x000000001755ec: xchg [rax], eax; vzeroupper; ret; 
0x0000000008a948: xchg [rax], ecx; add eax, [rax]; add [rbx+0x67510e0], al; ret; 
0x000000000a15dd: xchg [rax], edx; add [rcx+0x146349c2], cl; nop; add rdx, r8; jmp rdx; 
0x0000000018bbc6: xchg [rax], esp; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd46: xchg [rax], esp; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbcd: xchg [rax], esp; ret; 
0x0000000018d4df: xchg [rax], r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018bbcc: xchg [rax], r12d; ret; 
0x0000000008e281: xchg [rbp+0x31], eax; shl byte ptr [rcx], cl; sar byte ptr [rax+0xca], cl; syscall; 
0x0000000017e468: xchg [rbp+0x48000000], bl; mov ecx, edx; rep movsb [rdi], [rsi]; ret; 
0x000000000f9a3e: xchg [rbp+0x48000000], eax; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000b52be: xchg [rbp+0x4cd575c9], eax; mov eax, eax; ret; 
0x0000000006ecee: xchg [rbp+0x9], dh; add [rax], al; lea rax, [rip-0xf4f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000018ce6e: xchg [rbp+rdi*8-0xf760001], esi; ret; 
0x0000000018bd36: xchg [rbp-0x14], esi; lea rax, [rdi+rax*4]; ret; 
0x00000000102885: xchg [rbp-0x2708fff2], esp; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000018f5c7: xchg [rbx+0x48000001], ebp; lea ecx, [rip+0x2b74d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx; 
0x000000000a49d0: xchg [rbx+0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x00000000073b90: xchg [rbx+0x4800000d], bh; lea eax, [rip-0xb1f]; mov dword ptr [rsp+0x40], 0x1; jmp rax; 
0x0000000006c41e: xchg [rbx+0x4c000013], al; mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38]; 
0x0000000010cf83: xchg [rbx-0x172ceffc], cl; and eax, 0x1; ret; 
0x00000000076910: xchg [rbx], bh; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10]; 
0x0000000009bc4d: xchg [rbx], ecx; add [rax-0x73], cl; adc eax, 0xbdd89; cmovne rax, rdx; ret; 
0x0000000018bb6a: xchg [rbx], edi; xor [rbp+0x21], dh; ret; 
0x0000000007e622: xchg [rcx+0x1], bl; add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000007f942: xchg [rcx+0x1], cl; add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60]; 
0x0000000018a0ea: xchg [rcx+0x1], edx; add [rax], al; je 0x000000000018a230; mov byte ptr [rdi], 0x0; ret; 
0x00000000075502: xchg [rcx+0x48000000], bh; mov esi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x00000000070c9a: xchg [rcx+0x48000005], edx; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000074692: xchg [rcx+0x4800000a], al; mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [rax+0x38]; 
0x0000000006f6e2: xchg [rcx+0x4c000002], cl; mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x000000000f8e71: xchg [rcx+rax], ecx; add [rax], al; mov [rsi], eax; xor eax, eax; ret; 
0x000000000b8327: xchg [rcx-0x1600000c], ch; ret; 
0x000000000b4af3: xchg [rcx-0xd000000], edx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret; 
0x00000000162367: xchg [rcx], ah; add [rax-0x7bf0ffc7], al; ret far; 
0x0000000005e911: xchg [rcx], ah; or [rax], al; add [rcx-0x7d], al; jmp far fword ptr [rax]; 
0x000000000742ca: xchg [rcx], ah; or eax, 0x894c0000; mov rsi, r12; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000081c02: xchg [rcx], dl; add [rax], eax; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70]; 
0x00000000084452: xchg [rcx], dl; add [rax], eax; add [rsi-0x1], bh; mov rdi, rbx; call qword ptr [rax+0x18]; 
0x0000000009bc9a: xchg [rcx], eax; add [rax-0x73], cl; add eax, 0x1885c; cmove rax, rdx; ret; 
0x0000000009abd6: xchg [rdi+0x1], al; add [rax-0x73], cl; adc eax, 0xc5fbf; cmovne rax, rdx; ret; 
0x00000000080f44: xchg [rdi+0x48000001], dl; mov esi, esp; mov rdi, rbx; call qword ptr [rbp+0x90]; 
0x0000000006e0a5: xchg [rdi+0x4c00001b], dl; mov edx, ebp; mov rsi, r14; mov rdi, rbp; call qword ptr [rcx+0x38]; 
0x00000000133c76: xchg [rdi+0x8], eax; cmp eax, 0x1; jg short 0x0000000000133c80; ret; 
0x00000000115d35: xchg [rdi-0x72b7fffa], edx; add eax, 0x697e0; cmove rax, rdx; ret; 
0x0000000005c2fa: xchg [rdi], eax; cmp eax, 0x1; jg short 0x000000000005c308; ret; 
0x000000000409b4: xchg [rdi], edx; add bl, dh; mulps xmm0, [rip+0x1790c1]; ret; 
0x0000000004098f: xchg [rdi], edx; add bl, dh; mulps xmm0, [rip+0x1790ea]; ret; 
0x0000000008e322: xchg [rdi], edx; cmp edx, 0x1; jg short 0x000000000008e358; add rsp, 0x18; ret; 
0x000000000788c9: xchg [rdx+0x48000000], al; mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38]; 
0x000000000f9b99: xchg [rdx+0x48000000], eax; add esp, 0x78; ret; 
0x00000000077a31: xchg [rdx+0x4c000000], ch; mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38]; 
0x0000000007af21: xchg [rdx], cl; add [rax], eax; add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18]; 
0x000000000d71f5: xchg [rip+0x11e585], eax; cmp eax, 0x1; jg short 0x00000000000d7208; pop rbx; ret; 
0x000000000c84e7: xchg [rip+0x12cf33], eax; cmp eax, 0x1; jg short 0x00000000000c8510; add rsp, 0x8; ret; 
0x00000000084e7c: xchg [rip+0x16b88e], eax; cmp eax, 0x1; jg short 0x0000000000084e90; ret; 
0x00000000082f84: xchg [rip+0x16d786], eax; cmp eax, 0x1; jg short 0x0000000000082fc0; add rsp, 0x8; ret; 
0x000000000783cc: xchg [rip+0x1782fe], eax; cmp eax, 0x1; jg short 0x00000000000783e0; ret; 
0x00000000044054: xchg [rip+0x1ac3ae], eax; cmp eax, 0x1; jg short 0x0000000000044080; pop rbp; ret; 
0x00000000192eb9: xchg [rip+0x628c1], eax; cmp eax, 0x1; jg short 0x0000000000192ee0; pop rbx; ret; 
0x0000000014a12c: xchg [rip+0xb2812], eax; cmp eax, 0x1; jg short 0x000000000014a150; add rsp, 0x8; ret; 
0x00000000149fec: xchg [rip+0xb2952], eax; cmp eax, 0x1; jg short 0x000000000014a010; add rsp, 0x8; ret; 
0x0000000012f11c: xchg [rip+0xc811e], eax; cmp eax, 0x1; jg short 0x000000000012f140; pop rbx; ret; 
0x0000000012e51a: xchg [rip+0xc8d20], eax; cmp eax, 0x1; jg short 0x000000000012e550; pop rbp; ret; 
0x000000001328d2: xchg [rip+0xc9bf4], eax; cmp eax, 0x1; jg short 0x0000000000132900; add rsp, 0x8; ret; 
0x0000000011f48d: xchg [rip+0xd77a5], eax; cmp eax, 0x1; jg short 0x000000000011f4e8; add rsp, 0x8; ret; 
0x0000000010ee37: xchg [rip+0xe773b], edx; cmp edx, 0x1; jg short 0x000000000010ee60; add rsp, 0x18; ret; 
0x00000000108e85: xchg [rip+0xed2f5], eax; cmp eax, 0x1; jg short 0x0000000000108e98; ret; 
0x0000000006e7ee: xchg [rip+0xf00000e], edi; mov esi, 0x3d8d48c3; ret; 
0x00000000102782: xchg [rip+0xf38e0], eax; cmp eax, 0x1; jg short 0x00000000001027c0; pop rbp; ret; 
0x00000000083e25: xchg [rsi+0x48000000], ch; mov edi, ebx; call qword ptr [r13+0x60]; 
0x0000000005c6b5: xchg [rsi+0x48000000], esp; lea ecx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x0000000008d743: xchg [rsi+0x48fffffb], ecx; lea edx, [rip+0x11c1b9]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000001770f5: xchg [rsi+0xffffffc], esi; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000001553b5: xchg [rsi+rax], ecx; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000116105: xchg [rsi-0x72b7fffa], ebx; add eax, 0x69ee0; cmove rax, rdx; ret; 
0x000000001163a6: xchg [rsi-0xf], bl; jmp qword ptr [rsi+0xf]; 
0x000000000cbdb1: xchg [rsi], dl; add eax, [rax]; add [rax-0x41], cl; ret; 
0x000000000435c2: xchg [rsi], edx; cmp edx, 0x1; jg 0x00000000000436e8; mov edi, ebp; call rax; 
0x0000000004365d: xchg [rsi], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x0000000015b276: xchg ah, dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000121a33: xchg al, ah; add [rax], al; add [rcx-0x77], al; ret; 
0x0000000018d6ce: xchg al, ah; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6ee: xchg al, al; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000fdb27: xchg al, bh; dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x00000000131f02: xchg al, dh; jmp qword ptr [rsi+0x2e]; 
0x0000000009704b: xchg al, dh; or [rax], eax; add [rax-0x77], cl; ret; 
0x0000000018d6cd: xchg al, r12b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6ed: xchg al, r8b; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000005bbde: xchg ax, ax; add rsp, 0x1000; xor eax, eax; pop rbp; ret; 
0x0000000002de9e: xchg ax, ax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000017fe1e: xchg ax, ax; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000a50be: xchg ax, ax; bsr eax, eax; add rax, rdi; ret; 
0x000000001743de: xchg ax, ax; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000fe64e: xchg ax, ax; cmp esi, 0x9; je short 0x00000000000fe668; mov eax, 0x48; syscall; 
0x00000000041e5e: xchg ax, ax; lea eax, [rdx-0x1]; mov [rip+0x1ab35b], eax; mov eax, edx; ret; 
0x0000000016421e: xchg ax, ax; mov [rcx], dx; ret; 
0x0000000016424e: xchg ax, ax; mov [rcx], edx; mov [rcx+0x4], dl; ret; 
0x000000000b085e: xchg ax, ax; mov [rdi], dx; ret; 
0x000000000b088e: xchg ax, ax; mov [rdi], edx; mov [rdi+0x4], dl; ret; 
0x0000000016656e: xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret; 
0x000000000a15fe: xchg ax, ax; mov byte ptr [rdi], 0x0; lea rax, [rdi+rax-0x1]; ret; 
0x0000000013dcee: xchg ax, ax; mov dword ptr [r8+0x4], 0x0; mov eax, 0x1; ret; 
0x0000000009045e: xchg ax, ax; mov dword ptr [rdi], 0x1; xor eax, eax; ret; 
0x00000000074a7e: xchg ax, ax; mov dword ptr [rsp+0x34], 0x1; jmp rax; 
0x000000000af88e: xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret; 
0x0000000010a25e: xchg ax, ax; mov eax, 0x134; syscall; 
0x000000000f9dfe: xchg ax, ax; mov eax, 0x15; syscall; 
0x00000000087a8e: xchg ax, ax; mov eax, 0x16; cmp esi, 0x2; jbe short 0x0000000000087aa0; ret; 
0x0000000008df2e: xchg ax, ax; mov eax, 0x16; ret; 
0x000000000c9b5e: xchg ax, ax; mov eax, 0x24; syscall; 
0x00000000093a9e: xchg ax, ax; mov eax, 0x3; syscall; 
0x000000000d670e: xchg ax, ax; mov eax, 0x3f; syscall; 
0x0000000010b2ee: xchg ax, ax; mov eax, 0x43; syscall; 
0x000000000fb36e: xchg ax, ax; mov eax, 0x57; syscall; 
0x000000000fb2ae: xchg ax, ax; mov eax, 0x58; syscall; 
0x0000000010a13e: xchg ax, ax; mov eax, 0x63; syscall; 
0x0000000010905e: xchg ax, ax; mov eax, 0x7a; syscall; 
0x00000000109d7e: xchg ax, ax; mov eax, 0x7d; syscall; 
0x000000000d845e: xchg ax, ax; mov eax, 0x7e; ret; 
0x0000000010926e: xchg ax, ax; mov eax, 0x87; syscall; 
0x000000000ff03e: xchg ax, ax; mov eax, 0x8c; syscall; 
0x00000000102c1e: xchg ax, ax; mov eax, 0x95; syscall; 
0x000000001003de: xchg ax, ax; mov eax, 0x99; syscall; 
0x00000000109ece: xchg ax, ax; mov eax, 0xb1; syscall; 
0x0000000010a07e: xchg ax, ax; mov eax, 0xb4; syscall; 
0x0000000010541e: xchg ax, ax; mov eax, 0xc2; syscall; 
0x0000000010547e: xchg ax, ax; mov eax, 0xc3; syscall; 
0x0000000010535e: xchg ax, ax; mov eax, 0xc4; syscall; 
0x0000000010550e: xchg ax, ax; mov eax, 0xc5; syscall; 
0x00000000109f2e: xchg ax, ax; mov eax, 0xfe; syscall; 
0x0000000005c13e: xchg ax, ax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000007b8de: xchg ax, ax; mov eax, 0xffffffff; ret; 
0x000000000c577e: xchg ax, ax; mov eax, [rdi+0x2c]; cmp eax, [rsi+0x2c]; jne short 0x00000000000c57e0; ret; 
0x000000000c57ce: xchg ax, ax; mov eax, [rdi+0x3c]; cmp eax, [rsi+0x3c]; jne short 0x00000000000c57e0; ret; 
0x000000000fe82e: xchg ax, ax; mov eax, [rdi+0x8]; and eax, 0x100f; ret; 
0x000000000d2e7e: xchg ax, ax; mov eax, [rdi]; ret; 
0x000000000806ee: xchg ax, ax; mov eax, [rdi]; shr eax, 0x4; and eax, 0x1; ret; 
0x0000000008ae3e: xchg ax, ax; mov eax, [rip+0x16996a]; ret; 
0x00000000117d0e: xchg ax, ax; mov eax, edi; bswap eax; ret; 
0x0000000005cb8e: xchg ax, ax; mov eax, r8d; ret; 
0x000000000b0eae: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+0x3]; ret; 
0x00000000174c5e: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret; 
0x000000000fe7ce: xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000010a04e: xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000010a10e: xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000001053ee: xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall; 
0x0000000012f9fe: xchg ax, ax; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000144b5e: xchg ax, ax; mov rax, [rbp+0x8]; lea rsi, [rsp+0x8]; mov rdi, rbp; call qword ptr [rax+0x8]; 
0x0000000007fc1e: xchg ax, ax; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret; 
0x0000000007fafe: xchg ax, ax; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret; 
0x00000000084dee: xchg ax, ax; mov rax, [rdi+0x68]; ret; 
0x0000000013b3ce: xchg ax, ax; mov rax, [rdi+0x8]; mov r12, rsp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x0000000009479e: xchg ax, ax; mov rax, [rdi]; cmp rax, 0x2000000; jbe short 0x00000000000947b0; ret; 
0x0000000009489e: xchg ax, ax; mov rax, [rdi]; cmp rax, 0xffff; jbe short 0x00000000000948b0; ret; 
0x00000000044b2e: xchg ax, ax; mov rax, [rip+0x1a82d9]; mov dword ptr fs:[rax], 0x5; mov eax, 0xffffffff; ret; 
0x00000000041cae: xchg ax, ax; mov rax, [rip+0x1ab159]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000002d8de: xchg ax, ax; mov rax, [rip+0x1bf529]; mov dword ptr fs:[rax], 0x9; mov eax, 0xffffffff; ret; 
0x0000000014ef6e: xchg ax, ax; mov rax, [rip+0x9de99]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000014d10e: xchg ax, ax; mov rax, [rip+0x9fcf9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000014c44e: xchg ax, ax; mov rax, [rip+0xa0a71]; jmp qword ptr [rax+0x348]; 
0x0000000012f0de: xchg ax, ax; mov rax, [rip+0xc8161]; test rax, rax; jne short 0x000000000012f0f0; ret; 
0x0000000018b64e: xchg ax, ax; mov rax, rdi; ret; 
0x000000000a153e: xchg ax, ax; mov rdx, [rsp+0x10]; mov [rax], rdx; ret; 
0x0000000010b74e: xchg ax, ax; mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall; 
0x000000000b1e2e: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret; 
0x000000000b0fde: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret; 
0x0000000018aa8e: xchg ax, ax; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000018a2ee: xchg ax, ax; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+0x1], 0x0; ret; 
0x0000000004076e: xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000d2a0e: xchg ax, ax; pop rbp; ret; 
0x000000000b420e: xchg ax, ax; rep ret; 
0x0000000002d15e: xchg ax, ax; ret; 
0x00000000084b2e: xchg ax, ax; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret; 
0x000000000c620e: xchg ax, ax; test rsi, rsi; jne short 0x00000000000c6219; xor rax, rax; ret; 
0x0000000018dc0e: xchg ax, ax; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000018de7e: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018723e: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018733e: xchg ax, ax; tzcnt eax, eax; lea rax, [rdi+rax-0x80]; vzeroupper; ret; 
0x000000000b38ce: xchg ax, ax; xor ch, ch; mov [rdi], ch; ret; 
0x0000000014b7ee: xchg ax, ax; xor eax, eax; pop rbp; ret; 
0x00000000087e9e: xchg ax, ax; xor eax, eax; ret; 
0x000000000c5a7e: xchg ax, ax; xor rax, rax; ret; 
0x00000000141e55: xchg bh, bh; dec dword ptr [rax-0x73]; adc eax, 0x2ab1; call qword ptr [rax]; 
0x000000001444e0: xchg bh, bh; jmp qword ptr [rsi+0x66]; 
0x000000000331cc: xchg bh, bl; add [rax], al; add [rbp-0x77], cl; ret; 
0x0000000015af76: xchg bh, dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000071c30: xchg bl, dl; or eax, 0x89480000; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, r14; call qword ptr [r12+0x38]; 
0x0000000015a976: xchg ch, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000008201d: xchg dh, bl; add [rax], al; add [rsi-0x1], bh; mov rdi, rbp; call qword ptr [r13+0x18]; 
0x0000000007d89d: xchg dh, cl; add [rax], al; add [rdx+0x1], bh; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x0000000012d9a6: xchg dh, dh; out dx, eax; jmp qword ptr [rsi+0xf]; 
0x0000000015ac76: xchg dl, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x000000000fda50: xchg eax, edi; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x0000000018d013: xchg eax, esp; ret; 
0x0000000018d012: xchg eax, r12d; ret; 
0x0000000006ecbd: xchg ebp, eax; adc eax, [rax]; movsxd rax, [rax+rcx*4]; add rax, rsi; jmp rax; 
0x0000000009c14b: xchg ebp, eax; add [rax], al; lea rdx, [rip+0xc03ab]; cmovne rax, rdx; ret; 
0x0000000009c0ab: xchg ebp, eax; add [rax], al; lea rdx, [rip+0xc043b]; cmovne rax, rdx; ret; 
0x0000000009ac49: xchg ebp, eax; add [rax], eax; cmovne rax, rdx; ret; 
0x000000000d7338: xchg ebp, eax; call rax; 
0x000000000f55e5: xchg ebp, eax; mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70]; 
0x000000000b55f7: xchg ebp, eax; or al, 0x0; lea rdx, [rip+0xd1a0f]; cmovne rax, rdx; ret; 
0x00000000081dc7: xchg ebp, eax; ret far; 
0x0000000002d4a8: xchg ebp, eax; ret; 
0x000000001292e8: xchg ebp, eax; rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret; 
0x00000000144e9c: xchg ebp, eax; ror byte ptr [rax-0x77], 0x44; and al, 0x8; mov rax, [rdi+0x8]; call qword ptr [rax+0x8]; 
0x00000000101930: xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x00000000144e80: xchg ebp, eax; ror byte ptr [rcx-0x3b7cb7fd], 0x10; mov eax, 0x1; pop rbx; ret; 
0x0000000013c06e: xchg ebp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000005c135: xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret; 
0x00000000082a2e: xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x00000000110e8b: xchg ebp, eax; sar byte ptr [rdi+0x2000001], 0x21; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28]; 
0x00000000141b61: xchg ebp, eax; shl bh, 0xd8; add rsp, 0x18; ret; 
0x00000000092e4b: xchg ebp, eax; stc; dec dword ptr [rcx+rcx*4-0x11]; call r12; 
0x000000000b0b0d: xchg ebp, eax; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b544f: xchg ebp, eax; test edx, edx; jne short 0x00000000000b5430; ret; 
0x0000000006e846: xchg ebp, esi; or eax, 0xbe0f0000; ret; 
0x000000000a042a: xchg ebp, esp; add [rax], al; add [rax+0x29], cl; ret; 
0x00000000093ab4: xchg ebx, eax; adc eax, 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000179450: xchg ebx, eax; add rcx, r11; jmp rcx; 
0x000000000cb761: xchg ebx, eax; add rdx, r11; jmp rdx; 
0x000000001519b3: xchg ebx, eax; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9; 
0x00000000089633: xchg ebx, eax; cmp [rsi], al; add [rax], al; syscall; 
0x0000000018bd91: xchg ebx, eax; lea rax, [rdx+rax*4]; ret; 
0x000000000af73c: xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000151af2: xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000186092: xchg ebx, eax; leave; test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d46c: xchg ebx, eax; leave; test ecx, ecx; jne 0x000000000018d503; ret; 
0x00000000083b46: xchg ebx, eax; nop [rax+rax]; mov eax, 0xffffffff; ret; 
0x0000000018d125: xchg ebx, eax; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000007c353: xchg ebx, eax; nop; add [rax], al; add [rcx+0x1], cl; ret; 
0x0000000008587d: xchg ebx, eax; pop rax; add eax, [rax]; add bl, ch; ret far; 
0x00000000186d1f: xchg ebx, eax; ret; 
0x0000000018613b: xchg ebx, eax; rol byte ptr [rbp+0x62ae75c0], 0xb3; jge short 0x0000000000186165; ret; 
0x000000001871fd: xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001860cc: xchg ebx, eax; rol esp, 0xe2; push 0xb75c0f5; ret; 
0x00000000186dc6: xchg ebx, eax; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001899ff: xchg ebx, eax; shl bl, 0x48; bsf eax, eax; lea rax, [rdi+rax+0x40]; ret; 
0x000000000b0dd0: xchg ebx, eax; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000928e1: xchg ebx, eax; sub [rdx], edx; add al, ch; jl short 0x00000000000928e3; jmp qword ptr [rsi+0xf]; 
0x0000000018d0d9: xchg ebx, eax; xor eax, eax; ret; 
0x0000000007980e: xchg ebx, eax; xor ebx, edi; jmp qword ptr [rsi+0x2e]; 
0x000000000b4e33: xchg ecx, eax; adc byte ptr [rbx], 0x0; mov rax, [rax+0x228]; ret; 
0x0000000009b1b9: xchg ecx, eax; add [rax], eax; cmovne rax, rdx; ret; 
0x00000000151aeb: xchg ecx, eax; add dword ptr [rsi], 0x0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000070c9b: xchg ecx, eax; add eax, 0x63480000; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x00000000140318: xchg ecx, eax; add rax, rcx; jmp rax; 
0x0000000004e2aa: xchg ecx, eax; add rdx, r9; jmp rdx; 
0x00000000075e89: xchg ecx, eax; add rdx, rcx; jmp rdx; 
0x0000000009457b: xchg ecx, eax; mov [rip+0x64d8f700], dl; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000016d291: xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x000000001298a6: xchg ecx, eax; nop [rax+rax]; ret; 
0x00000000113e1b: xchg ecx, eax; or eax, 0xe8388b00; pop rbx; stc; bnd jmp qword ptr [rsi+0x66]; 
0x0000000017bf96: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx-0xf]; 
0x00000000101b9b: xchg ecx, eax; str [rcx+rcx*4-0x40]; ret; 
0x0000000016b9bf: xchg ecx, eax; sub eax, edx; ret; 
0x000000000b4cdd: xchg ecx, eax; sub edx, [rcx+rsi*4]; je short 0x00000000000b4cc0; mov eax, edx; ret; 
0x00000000122fca: xchg ecx, esi; add [rax], al; add [rcx-0x77], al; ret far; 
0x0000000006bb8a: xchg ecx, esp; add eax, 0x63480000; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x00000000132d55: xchg edi, eax; add [rax], eax; add [rcx], ah; fmul st, dword ptr [rcx+0x9e3d3d3]; ret; 
0x000000000501be: xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; jmp rdx; 
0x000000000a1538: xchg edi, eax; add rdx, rdi; jmp rdx; 
0x000000000d2962: xchg edi, eax; cmc; dec dword ptr [rax-0x77]; ret; 
0x000000000f11cc: xchg edi, eax; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 0x2; cmove eax, edx; ret; 
0x0000000007fc0c: xchg edi, eax; mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 0x2; ret; 
0x0000000007faec: xchg edi, eax; mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 0x2; ret; 
0x000000000770e1: xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret; 
0x000000000df354: xchg edi, eax; mov byte ptr [rdi+0x8], 0x1e; mov eax, 0x2; ret; 
0x000000000842d5: xchg edi, eax; ret; 
0x0000000010c086: xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret; 
0x000000000b09ee: xchg edi, eax; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000009c1fa: xchg edx, eax; add cl, bh; call far fword ptr [rbp+0x31]; 
0x000000000712dc: xchg edx, eax; cld; call qword ptr [rax+0x87e8b48]; 
0x0000000018717a: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1d: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000500c8: xchg edx, eax; mov [rax], al; add [rax], al; xor eax, eax; ret; 
0x00000000138e8a: xchg edx, eax; or al, 0x0; add rsp, 0x8; ret; 
0x000000000df0ca: xchg edx, eax; ret; 
0x0000000016a717: xchg edx, eax; sub eax, edx; ret; 
0x0000000009de3d: xchg edx, eax; xchg ax, ax; xor eax, eax; ret; 
0x0000000009adf6: xchg esi, eax; adc al, 0xf9; call far fword ptr [rdx+0x31]; 
0x00000000116ce6: xchg esi, eax; adc bh, dh; call qword ptr [rax-0x18]; 
0x0000000009bb66: xchg esi, eax; add [rax], al; lea rdx, [rip+0xe0a40]; cmovne rax, rdx; ret; 
0x000000000cfab7: xchg esi, eax; add rax, rsi; jmp rax; 
0x000000000ecae7: xchg esi, eax; add rdx, r14; jmp rdx; 
0x000000000cd568: xchg esi, eax; add rdx, rsi; jmp rdx; 
0x0000000013f6cf: xchg esi, eax; enter 0x1, 0x0; add rsi, 0x38; jmp qword ptr [rax+0x18]; 
0x0000000018d686: xchg esi, eax; jmp qword ptr [rdx-0xd]; 
0x000000000fa1e6: xchg esi, eax; mov edi, 0x48bfff8; and al, 0x48; add esp, 0x68; ret; 
0x00000000138f20: xchg esi, eax; nop [rax+rax]; nop [rax+rax]; ret; 
0x00000000090b65: xchg esi, eax; ret; 
0x0000000017aeb5: xchg esi, ebp; add eax, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000139eaa: xchg esi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000056ff2: xchg esp, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x00000000044208: xchg esp, eax; add al, 0x0; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000009b9f8: xchg esp, eax; add dword ptr [rcx], 0x0; cmove rax, rdx; ret; 
0x0000000004e806: xchg esp, eax; and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x00000000034556: xchg esp, eax; and al, 0x90; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000014df6b: xchg esp, eax; idiv bh; call qword ptr [rax+0x5f3d8d48]; 
0x000000000da85b: xchg esp, eax; idiv bh; call qword ptr [rax+0x6f3d8d48]; 
0x00000000093cd8: xchg esp, eax; nop [rax]; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x0000000009b2d8: xchg esp, eax; nop; add [rax], eax; cmovne rax, rdx; ret; 
0x0000000016e8f9: xchg esp, eax; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000149d08: xchg esp, eax; ret far; 
0x0000000004ce48: xchg esp, eax; ret; 
0x00000000124238: xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f58b], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000fb23f: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; movzx rax, al; ret; 
0x00000000145dc4: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000004d863: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000001314c9: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x1; ret; 
0x00000000145c59: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; ret; 
0x000000000d863c: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x00000000087e30: xchg esp, eax; shl bh, 0xd8; ret; 
0x000000000a10c0: xchg esp, eax; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000077db3: xchg esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x000000000b0d36: xchg esp, eax; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000a10bf: xchg r12, rax; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000056ff1: xchg r12d, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x000000000b0a21: xchg r15, rax; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000c00e5: xchg r8d, eax; add ebx, ebp; ret; 
0x00000000114be7: xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8; 
0x000000000b0e68: xchg rbx, rax; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000018d685: xchg rsi, rax; jmp qword ptr [rdx-0xd]; 
0x000000000865f6: xend; xor eax, eax; ret; 
0x00000000174544: xlat [rbx]; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000017461d: xlat [rbx]; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000001745c9: xlat [rbx]; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000174265: xlat [rbx]; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000174275: xlat [rbx]; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000174285: xlat [rbx]; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000001519b9: xlat [rbx]; add r9, r11; jmp r9; 
0x00000000055707: xlat [rbx]; cmp rax, 0x9; ja short 0x00000000000556e0; mov rax, r8; ret; 
0x00000000057d15: xlat [rbx]; dec dword ptr [rcx-0xf743]; inc dword ptr [rax-0x13343]; jmp qword ptr [rdi-0x75]; 
0x0000000017457a: xlat [rbx]; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000170970: xlat [rbx]; inc ecx; jne 0x00000000001708a0; vzeroupper; ret; 
0x00000000177c24: xlat [rbx]; inc ecx; jne 0x0000000000177b40; vzeroupper; ret; 
0x00000000174255: xlat [rbx]; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000b44b8: xlat [rbx]; jb short 0x00000000000b44be; rep movsb [rdi], [rsi]; ret; 
0x0000000003ec08: xlat [rbx]; jmp rdi; 
0x00000000105627: xlat [rbx]; jne short 0x0000000000105618; mov rax, [rax+0x8]; ret; 
0x000000001898f5: xlat [rbx]; lea eax, [rdi+rax+0x20]; ret; 
0x00000000189905: xlat [rbx]; lea eax, [rdi+rax+0x40]; ret; 
0x00000000189915: xlat [rbx]; lea eax, [rdi+rax+0x60]; ret; 
0x00000000189925: xlat [rbx]; lea eax, [rdi+rax+0x80]; ret; 
0x0000000017b4d2: xlat [rbx]; lea r11, [rip+0x3e866]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b458: xlat [rbx]; lea r11, [rip+0x3e8e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b3c9: xlat [rbx]; lea r11, [rip+0x3e96f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b1be: xlat [rbx]; lea r11, [rip+0x3eb7a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017b08c: xlat [rbx]; lea r11, [rip+0x3ecac]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017afc6: xlat [rbx]; lea r11, [rip+0x3ed72]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017af48: xlat [rbx]; lea r11, [rip+0x3edf0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aeb1: xlat [rbx]; lea r11, [rip+0x3ee87]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017acb5: xlat [rbx]; lea r11, [rip+0x3f083]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017ab84: xlat [rbx]; lea r11, [rip+0x3f1b4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000017aa83: xlat [rbx]; lea r11, [rip+0x3f2b5]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179ea2: xlat [rbx]; lea r11, [rip+0x3fd56]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179e28: xlat [rbx]; lea r11, [rip+0x3fdd0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179d99: xlat [rbx]; lea r11, [rip+0x3fe5f]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179b8e: xlat [rbx]; lea r11, [rip+0x4006a]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179a5c: xlat [rbx]; lea r11, [rip+0x4019c]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179996: xlat [rbx]; lea r11, [rip+0x40262]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179918: xlat [rbx]; lea r11, [rip+0x402e0]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179881: xlat [rbx]; lea r11, [rip+0x40377]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179685: xlat [rbx]; lea r11, [rip+0x40573]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179554: xlat [rbx]; lea r11, [rip+0x406a4]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x00000000179445: xlat [rbx]; lea r11, [rip+0x407b3]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx; 
0x0000000015b5d0: xlat [rbx]; lea r11, [rip+0x5f128]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015b41d: xlat [rbx]; lea r11, [rip+0x5f51b]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159b78: xlat [rbx]; lea r11, [rip+0x60dc0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000159a1c: xlat [rbx]; lea r11, [rip+0x60f1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158abc: xlat [rbx]; lea r11, [rip+0x6173c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000158929: xlat [rbx]; lea r11, [rip+0x61b0f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156d1b: xlat [rbx]; lea r11, [rip+0x6331d]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000157098: xlat [rbx]; lea r11, [rip+0x633a0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000156f26: xlat [rbx]; lea r11, [rip+0x63512]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000015457c: xlat [rbx]; lea r11, [rip+0x65abc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001544b7: xlat [rbx]; lea r11, [rip+0x65b81]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151bac: xlat [rbx]; lea r11, [rip+0x682cc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000151ae7: xlat [rbx]; lea r11, [rip+0x68391]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x0000000018b846: xlat [rbx]; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b814: xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018b8cd: xlat [rbx]; lea rax, [rdi+rax+0x60]; ret; 
0x0000000018b892: xlat [rbx]; lea rax, [rdi+rax+0x80]; ret; 
0x000000000aa0bd: xlat [rbx]; ret far; 
0x00000000038065: xlat [rbx]; ret; 
0x000000001740d5: xlat [rbx]; rol ch, cl; std; xlat [rbx]; ret; 
0x000000000a4be3: xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret; 
0x000000000c4a53: xlat [rbx]; rol dword ptr [rbp+0x316775c0], 0xc0; ret; 
0x000000000a5086: xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret; 
0x000000000a50b5: xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret; 
0x000000000c4a23: xlat [rbx]; rol dword ptr [rbp-0x2c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x000000000a4bb3: xlat [rbx]; rol dword ptr [rbp-0x5c7af040], 0x0; add [rax], al; xor eax, eax; ret; 
0x0000000017028d: xlat [rbx]; rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000173e74: xlat [rbx]; rol dword ptr [rbp-0xc998b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017423f: xlat [rbx]; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x00000000160d72: xlat [rbx]; ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000160dae: xlat [rbx]; ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000a5024: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; ret; 
0x000000001704fd: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x0000000018c385: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c395: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a5: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c375: xlat [rbx]; sar edi, 0x2; lea eax, [rdi+rax+0x8]; ret; 
0x000000001709d2: xlat [rbx]; sar edi, 0xc0; jne short 0x0000000000170a20; vzeroupper; ret; 
0x00000000177c92: xlat [rbx]; sar edi, 0xc0; jne short 0x0000000000177ce0; vzeroupper; ret; 
0x0000000018cd42: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018ce2d: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x18]; ret; 
0x0000000018cdd2: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018cd83: xlat [rbx]; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x000000000aa475: xlat [rbx]; shl byte ptr [rsi+0xf], 0x1; outsd dx, [rsi]; ret; 
0x00000000108a56: xlat [rbx]; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x0000000018b843: xlat [rbx]; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018623a: xlat [rbx]; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d61a: xlat [rbx]; test ecx, ecx; jne 0x000000000018d500; ret; 
0x0000000017246f: xor [r10], r8b; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x000000000c579c: xor [r11], r15b; xor [rbp+0x3d], r14b; ret; 
0x000000000a4b3d: xor [r14+0xf], r12b; xlat [rbx]; ret; 
0x00000000109dc3: xor [r14], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000f8133: xor [r15], r9b; adc [rdi+0x40], eax; ret; 
0x00000000140b93: xor [r8+0x1], r15b; movups [r8], xmm1; ret; 
0x0000000013953b: xor [r8+rax], cl; add rsp, 0x8; ret; 
0x0000000008368e: xor [r8-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x00000000099fb9: xor [r8-0x77], cl; xor ecx, [rax-0x77]; jnp short 0x000000000009a00a; call rcx; 
0x000000001096a7: xor [rax+0x149], bh; syscall; 
0x00000000140b94: xor [rax+0x1], bh; movups [r8], xmm1; ret; 
0x0000000005228c: xor [rax+0x2], bh; mov [rdi+0x8], rdx; ret; 
0x0000000017ed49: xor [rax+0x337701fa], eax; jb short 0x000000000017ed53; mov [rax], cl; ret; 
0x0000000009b349: xor [rax+0x39], ecx; ret; 
0x0000000013c213: xor [rax+0x3], bh; pop rbx; ret; 
0x00000000091dcd: xor [rax+0x3], edi; add rsp, 0x10; pop rbx; ret; 
0x00000000100579: xor [rax+0x42], al; sldt [rbx]; and al, 0x38; add rsp, 0x48; ret; 
0x00000000104e26: xor [rax+0x88], edi; syscall; 
0x000000000942d4: xor [rax+0xde], bh; movups [rsp+0x50], xmm0; syscall; 
0x00000000093dcb: xor [rax+0xf4], bh; mov [rsp+0x38], r12d; syscall; 
0x00000000142c2c: xor [rax+rax], al; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18]; 
0x0000000013953c: xor [rax+rax], cl; add rsp, 0x8; ret; 
0x00000000139523: xor [rax+rax], cl; test eax, eax; je short 0x0000000000139530; ret; 
0x00000000064ce1: xor [rax+rax], dl; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000b4f6a: xor [rax+rax], ecx; lea rax, [rip+0xfbbc]; cmove rax, rdx; ret; 
0x00000000064944: xor [rax+rax], edx; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000b2297: xor [rax-0x73], cl; ret; 
0x0000000014c3ac: xor [rax-0x75], cl; add eax, 0xa0b14; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x0000000013de96: xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx; 
0x000000000314f3: xor [rax-0x75], cl; je short 0x000000000003151c; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax; 
0x0000000008368f: xor [rax-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret; 
0x0000000009a862: xor [rax-0x77], cl; clc; ret; 
0x000000000b7f32: xor [rax-0x77], cl; ret; 
0x00000000099fba: xor [rax-0x77], cl; xor ecx, [rax-0x77]; jnp short 0x000000000009a00a; call rcx; 
0x00000000103b03: xor [rax-0x77], ecx; out dx, eax; xor esi, esi; call r12; 
0x0000000005dd43: xor [rax-0x7d], cl; ret; 
0x0000000008815c: xor [rax], al; add [rax+0x16], bh; ret; 
0x00000000115636: xor [rax], al; add [rax], al; call rax; 
0x0000000002d55f: xor [rax], al; add [rax], al; jmp rax; 
0x00000000043d81: xor [rax], al; add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000012392f: xor [rax], al; add [rax], al; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000002d123: xor [rax], al; add [rax], al; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x0000000010aa51: xor [rax], al; add [rax], al; syscall; 
0x0000000007b07a: xor [rax], al; je short 0x000000000007b080; ret; 
0x000000000806c2: xor [rax], al; je short 0x00000000000806d1; add rsp, 0x38; ret; 
0x000000000b3cd7: xor [rax], dh; in eax, dx; mov [rdi+0x40], ch; ret; 
0x0000000010a451: xor [rax], eax; add [rax], al; syscall; 
0x0000000018bb6c: xor [rbp+0x21], dh; ret; 
0x000000001889cc: xor [rbp+0x22], dh; ret; 
0x000000000c57a0: xor [rbp+0x3d], dh; ret; 
0x000000000c579f: xor [rbp+0x3d], r14b; ret; 
0x000000000b4722: xor [rbp+0xf], al; adc [rbx], eax; ret; 
0x000000000b3352: xor [rbp+rcx*4+0x1d], cl; mov edx, 0x49000f70; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000918ac: xor [rbp-0x3a170007], bh; stosb [rdi]; stc; jmp qword ptr [rsi+0x66]; 
0x00000000138e5c: xor [rbp-0x3d], bl; nop; ret; 
0x000000000d9953: xor [rbx+0x187414fe], al; test r15, r15; je short 0x00000000000d9968; mov rdi, rbx; call r15; 
0x000000000eea83: xor [rbx+0x187414fe], al; test r15, r15; je short 0x00000000000eea98; mov rdi, rbx; call r15; 
0x00000000127ae7: xor [rbx+0x41fc2444], cl; mov [rbx], eax; mov eax, 0x1; ret; 
0x000000000801a3: xor [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000001211a1: xor [rbx+0x5d], bl; pop r12; ret; 
0x0000000013f1c7: xor [rbx+0xf], bl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x0000000008433d: xor [rbx-0x438a0008], al; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000142bec: xor [rbx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000014c2c1: xor [rbx], al; add [rax], al; jmp rax; 
0x000000000c579d: xor [rbx], bh; xor [rbp+0x3d], r14b; ret; 
0x00000000075e83: xor [rbx], edx; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x00000000075e29: xor [rbx], edx; add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x00000000075e28: xor [rbx], r10; add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x000000000fe04a: xor [rcx+0x5c], al; ret; 
0x000000000fdad6: xor [rcx+0x5d], al; ret; 
0x000000000ecae3: xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x0000000007b0c7: xor [rcx+rcx*4+0x60], cl; cmp [rcx+0x5d5b7453], cl; pop r12; ret; 
0x00000000093dc3: xor [rcx+rcx*4-0x11], al; mov [rsp+0x30], rax; mov eax, 0xf4; mov [rsp+0x38], r12d; syscall; 
0x0000000007c9d6: xor [rcx+rcx*4-0x1], cl; call qword ptr [r14+0x90]; 
0x000000001045cf: xor [rcx+rcx*4-0x1a], cl; mov rdi, r15; call r13; 
0x0000000011b5be: xor [rcx+rcx*4-0x1e], cl; call qword ptr [rsp+0x48]; 
0x00000000192416: xor [rcx+rcx*4-0x20], cl; pop r12; ret; 
0x000000000d21db: xor [rcx+rdx+0x64d8f700], ebp; mov [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000f1a4d: xor [rcx-0x77], al; fisttp word ptr [rax-0x77], st; ret; 
0x00000000117f2b: xor [rcx-0x7d], cl; ret; 
0x000000001287ae: xor [rcx-0x7d], eax; ret; 
0x00000000142d1c: xor [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x0000000010957d: xor [rcx], al; add [rax], al; syscall; 
0x0000000011fb74: xor [rcx], cl; add al, ch; or eax, 0x89480001; ret; 
0x000000000e5faf: xor [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000654af: xor [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret; 
0x00000000130f45: xor [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, r14; mov rcx, r13; call rbx; 
0x00000000109881: xor [rcx], eax; add [rax], al; syscall; 
0x000000000f8134: xor [rdi], cl; adc [rdi+0x40], eax; ret; 
0x00000000140267: xor [rdi], cl; adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret; 
0x000000000f9da4: xor [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000f9d04: xor [rdi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000075736: xor [rdi], ecx; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000016d28b: xor [rdx+0x148b0002], eax; xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret; 
0x000000000b4e4a: xor [rdx], al; add [rax], al; ret; 
0x00000000172470: xor [rdx], al; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000008d516: xor [rdx], dl; add al, ch; iretd; cli; jmp qword ptr [rsi-0x70]; 
0x00000000092145: xor [rdx], dl; add al, ch; ret; 
0x00000000142c6c: xor [rip+0xf000000], al; adc [rsp+0x18], eax; call qword ptr [rax+0x18]; 
0x00000000092343: xor [rip-0x5314ffea], esp; nop [rax]; mov [rcx+0x20], rdx; ret; 
0x000000000aa43c: xor [rsi+0xf], ah; outsd dx, [rsi]; ret; 
0x000000000a4b3e: xor [rsi+0xf], ah; xlat [rbx]; ret; 
0x0000000015711e: xor [rsi], al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000109d24: xor [rsi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000156ec8: xor [rsi], eax; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000109c3a: xor [rsi], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x000000000af1e8: xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret; 
0x000000000af17e: xor ah, ah; mov [rdx+0x8], ah; mov rax, rdi; ret; 
0x0000000010a521: xor al, 0x0; add [rax], al; syscall; 
0x0000000009bf87: xor al, 0x1; add [rax-0x73], cl; adc eax, 0xc8f3f; cmovne rax, rdx; ret; 
0x000000000c56a8: xor al, 0x1; add [rax], al; ret; 
0x000000000b4dc9: xor al, 0x1; add [rax], al; ret; 
0x0000000010a261: xor al, 0x1; add [rax], al; syscall; 
0x0000000002d3c3: xor al, 0x24; lea rdi, [rip+0x181bf4]; xor eax, eax; call qword ptr [r14+0x328]; 
0x0000000002d3aa: xor al, 0x24; lea rdi, [rip+0x181c27]; xor eax, eax; call qword ptr [r14+0x328]; 
0x000000000940a3: xor al, 0x24; mov eax, 0xf2; mov edi, [rsp+0x10]; syscall; 
0x000000001095ab: xor al, 0x24; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x130; syscall; 
0x0000000010a4bb: xor al, 0x24; mov r8d, eax; mov edi, [rsp+0x8]; mov eax, 0x2a; syscall; 
0x0000000006dcf0: xor al, 0x24; mov rdx, r13; mov rdi, rbp; call qword ptr [rbx+0x38]; 
0x00000000072fbc: xor al, 0x24; mov rdx, rbx; mov rdi, rbp; call qword ptr [r12+0x38]; 
0x00000000041517: xor al, 0x24; movups [rsp+0x10], xmm7; mov r10d, 0x8; mov eax, 0xd; syscall; 
0x0000000009d6c3: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x00000000188c07: xor al, 0x2; jne short 0x0000000000188b99; add rax, rdx; ret; 
0x00000000173e23: xor al, 0x2; lea rax, [rdx+rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000000df62a: xor al, 0x31; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000008b110: xor al, 0x3a; jne short 0x000000000008b150; mov rax, r8; ret; 
0x000000000fea9b: xor al, 0x41; mov [rax+0x38], eax; mov eax, r9d; ret; 
0x000000000405f9: xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x000000000a513b: xor al, 0x48; lea eax, [rdi+rax+0x20]; ret; 
0x000000000760a5: xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call r8; 
0x00000000075b7f: xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 0x1; mov rdi, rbx; call rax; 
0x0000000008429b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp+0x30]; 
0x00000000173c04: xor al, 0x7; jne short 0x0000000000173c35; add rax, rdi; vzeroupper; ret; 
0x00000000173da2: xor al, 0x7; jne short 0x0000000000173dc5; add rax, rdi; vzeroupper; ret; 
0x00000000178a83: xor al, 0x7; jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x00000000178c28: xor al, 0x7; jne short 0x0000000000178c54; add rax, rdi; vzeroupper; ret; 
0x00000000188ba6: xor al, 0x7; jne short 0x0000000000188b99; lea rax, [rdi+rax]; ret; 
0x0000000018bd8e: xor al, 0x82; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x00000000186eeb: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; ret; 
0x0000000017062b: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000018bd35: xor al, 0x87; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x000000000b00a8: xor al, 0xa0; str [rbx+0x63]; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx; 
0x000000001787dc: xor al, 0xa; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c88b: xor al, 0xa; jne 0x000000000018c547; ret; 
0x00000000041bd8: xor al, 0xb2; sbb al, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000cfb44: xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000520a4: xor al, 0xb8; add [rax], eax; add [rax], al; mov [rdi], rdx; ret; 
0x0000000012b503: xor al, 0xb8; add rsi, r8; jmp rsi; 
0x0000000017038b: xor al, 0xc5; std; xlat [rbx]; ret; 
0x00000000129b24: xor al, 0xc; add [rbx-0x3f7ae7c0], cl; jne short 0x0000000000129b30; ret; 
0x00000000109924: xor al, 0xe; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x000000001787d9: xor al, 0xe; cmp esi, [rdx+rcx]; jne 0x0000000000178575; vzeroupper; ret; 
0x0000000018c888: xor al, 0xe; cmp esi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x00000000117e24: xor al, 0xf4; call far fword ptr [rax+0x4c]; 
0x000000000f9974: xor al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x1]; or rax, 0xffffffffffffffff; ret; 
0x00000000038eaf: xor al, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000010a5b1: xor al, [rax]; add [rax], al; syscall; 
0x000000001684ba: xor al, [rbx]; add [rax], al; cmp byte ptr [rax], 0x1; sbb rax, 0xffffffffffffffff; ret; 
0x00000000033183: xor al, [rcx-0x77]; ret far; 
0x000000001000f1: xor al, [rcx]; add [rax], al; syscall; 
0x00000000156e0b: xor al, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000108a5b: xor al, al; or eax, edx; ret; 
0x00000000055760: xor al, bl; nop [rax+rax]; mov rax, r10; add rsp, 0x20; ret; 
0x0000000007d157: xor al, ch; ret; 
0x000000000fd888: xor ax, ax; ret; 
0x000000001225da: xor bh, [rdi-0xf]; jmp qword ptr [rsi-0x70]; 
0x0000000007966f: xor bh, bl; jmp qword ptr [rsi+0x2e]; 
0x000000000c1f04: xor bh, cl; jmp qword ptr [rsi+0xf]; 
0x000000000408be: xor bl, 0xf; adc [rdi], eax; movd xmm0, esi; ret; 
0x000000000a5160: xor bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret; 
0x000000000c4b11: xor bl, al; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret; 
0x00000000115571: xor bl, al; nop [rax]; xor eax, eax; ret; 
0x000000000a4c6c: xor bl, al; xchg ax, ax; xor eax, eax; ret; 
0x000000000799cc: xor bl, bh; call qword ptr [rax+0x55415641]; 
0x0000000013aea5: xor byte ptr [rax+0x1000023], 0x0; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000014c4b2: xor byte ptr [rax+0x3], 0x0; add bh, bh; push rax; add rsp, 0x28; ret; 
0x0000000013dd7f: xor byte ptr [rax+rax+0x1b80000], 0x0; add [rax], al; ret; 
0x0000000013dd62: xor byte ptr [rax+rax-0x37f10000], 0x89; ror byte ptr [rax-0x77], 0x2; mov eax, 0x1; ret; 
0x0000000009cdc4: xor byte ptr [rax-0x1], 0x2a; cmp rax, rsi; jne short 0x000000000009cdc0; mov rax, r8; ret; 
0x000000000b4e49: xor byte ptr [rax], 0x2; add [rax], al; ret; 
0x0000000014c2c0: xor byte ptr [rax], 0x3; add [rax], al; jmp rax; 
0x00000000084219: xor byte ptr [rbp+0x24], 0x5d; ret; 
0x00000000092e57: xor byte ptr [rcx], 0xc0; pop rbp; pop r12; pop r13; ret; 
0x0000000008e5a5: xor byte ptr [rcx], 0xc0; ret; 
0x0000000008618f: xor byte ptr [rdx+0x9], 0x0; add [rax], al; ret; 
0x0000000018ec52: xor ch, 0xff; jmp qword ptr [rsi+0x2e]; 
0x000000000af7aa: xor ch, [rax+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b3a68: xor ch, ch; mov [rdi+0x10], ch; ret; 
0x000000000b3a7e: xor ch, ch; mov [rdi+0x11], ch; ret; 
0x000000000b3aa0: xor ch, ch; mov [rdi+0x12], ch; ret; 
0x000000000b3abe: xor ch, ch; mov [rdi+0x13], ch; ret; 
0x000000000b3ade: xor ch, ch; mov [rdi+0x14], ch; ret; 
0x000000000b3b04: xor ch, ch; mov [rdi+0x15], ch; ret; 
0x000000000b3b20: xor ch, ch; mov [rdi+0x16], ch; ret; 
0x000000000b3b40: xor ch, ch; mov [rdi+0x17], ch; ret; 
0x000000000b3b60: xor ch, ch; mov [rdi+0x18], ch; ret; 
0x000000000b3b86: xor ch, ch; mov [rdi+0x19], ch; ret; 
0x000000000b38e4: xor ch, ch; mov [rdi+0x1], ch; ret; 
0x000000000b3ba8: xor ch, ch; mov [rdi+0x1a], ch; ret; 
0x000000000b3bc6: xor ch, ch; mov [rdi+0x1b], ch; ret; 
0x000000000b3be6: xor ch, ch; mov [rdi+0x1c], ch; ret; 
0x000000000b3c02: xor ch, ch; mov [rdi+0x1d], ch; ret; 
0x000000000b3c22: xor ch, ch; mov [rdi+0x1e], ch; ret; 
0x000000000b3c42: xor ch, ch; mov [rdi+0x1f], ch; ret; 
0x000000000b3c62: xor ch, ch; mov [rdi+0x20], ch; ret; 
0x000000000b3c88: xor ch, ch; mov [rdi+0x21], ch; ret; 
0x000000000b38f6: xor ch, ch; mov [rdi+0x2], ch; ret; 
0x000000000b390c: xor ch, ch; mov [rdi+0x3], ch; ret; 
0x000000000b3cd8: xor ch, ch; mov [rdi+0x40], ch; ret; 
0x000000000b3924: xor ch, ch; mov [rdi+0x4], ch; ret; 
0x000000000b393a: xor ch, ch; mov [rdi+0x5], ch; ret; 
0x000000000b394c: xor ch, ch; mov [rdi+0x6], ch; ret; 
0x000000000b396a: xor ch, ch; mov [rdi+0x7], ch; ret; 
0x000000000b3976: xor ch, ch; mov [rdi+0x8], ch; ret; 
0x000000000b398c: xor ch, ch; mov [rdi+0x9], ch; ret; 
0x000000000b39ae: xor ch, ch; mov [rdi+0xa], ch; ret; 
0x000000000b39cc: xor ch, ch; mov [rdi+0xb], ch; ret; 
0x000000000b39ec: xor ch, ch; mov [rdi+0xc], ch; ret; 
0x000000000b3a0e: xor ch, ch; mov [rdi+0xd], ch; ret; 
0x000000000b3a2e: xor ch, ch; mov [rdi+0xe], ch; ret; 
0x000000000b3a4e: xor ch, ch; mov [rdi+0xf], ch; ret; 
0x000000000b38d0: xor ch, ch; mov [rdi], ch; ret; 
0x0000000016992d: xor cl, [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret; 
0x00000000103b15: xor cl, [rax-0x77]; out dx, eax; mov edx, r13d; mov esi, 0x1; call r12; 
0x00000000103ba5: xor cl, [rax-0x77]; out dx, eax; mov rdx, r13; mov esi, 0x1; call r12; 
0x0000000009c256: xor cl, [rsi]; add [rax-0x73], cl; add eax, 0xe32d0; cmove rax, rdx; ret; 
0x0000000011558e: xor cl, ch; cld; out 0xff, eax; jmp qword ptr [rsi+0x66]; 
0x000000000af060: xor cl, cl; mov [rax], cl; mov rax, rdi; ret; 
0x00000000086856: xor dh, 0x80; syscall; 
0x00000000087e6b: xor dh, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000088cf0: xor dh, 0x81; mov eax, 0xca; syscall; 
0x00000000087d96: xor dh, 0x81; syscall; 
0x000000000868c1: xor dh, 0x81; xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x000000000888f1: xor dh, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000008e27f: xor dh, 0x87; xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000012c6d5: xor dh, [rcx]; shl byte ptr [rsi+0x39], 0xd1; je short 0x000000000012c6e0; ret; 
0x00000000128d0d: xor dh, [rsi-0x30]; xor eax, eax; ret; 
0x000000001173ab: xor dh, dh; jmp qword ptr [rsi-0x70]; 
0x000000000889ac: xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x00000000040522: xor dl, 0xf; adc [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000c9b74: xor dl, [rdx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+0x2]; mov eax, 0xffffffff; ret; 
0x0000000013ae39: xor dword ptr [rax+0x23], 0x0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000186889: xor dword ptr [rdx-0x7effffff], 0xffffffe2; call far fword ptr [rdi]; 
0x000000000946b9: xor eax, 0x115602; sub rsp, 0x8; syscall; 
0x00000000089ecf: xor eax, 0x11f52c; syscall; 
0x00000000075e27: xor eax, 0x13314c; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000064942: xor eax, 0x1431b9; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000005d085: xor eax, 0x14a66a; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x0000000007e33a: xor eax, 0x18c48348; pop rbx; pop rbp; ret; 
0x000000000fe437: xor eax, 0x20; mov [rdi+0x48], rax; ret; 
0x000000000e3894: xor eax, 0x24448b41; or al, 0x39; ret; 
0x000000000398f4: xor eax, 0x3145001b; jmp qword ptr [rdi+rax*8]; 
0x0000000017acb9: xor eax, 0x3; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000009aaa7: xor eax, 0x480000f4; lea edx, [rip+0xe17de]; cmovne rax, rdx; ret; 
0x0000000002d11b: xor eax, 0x48640005; xor eax, [0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x0000000007998a: xor eax, 0x48ea894c; mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38]; 
0x000000000c69f7: xor eax, 0x48ffffff; add esp, 0x40; pop rbp; ret; 
0x00000000075842: xor eax, 0x63480013; add al, 0x81; add rax, rcx; jmp rax; 
0x00000000156f2b: xor eax, 0x63490006; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000139823: xor eax, 0x7fb58; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000013981d: xor eax, 0x7fb66; push qword ptr [rip+0x7fb58]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000139706: xor eax, 0x7fc75; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x00000000139700: xor eax, 0x7fc83; push qword ptr [rip+0x7fc75]; lea r9, [rsp+0x1c]; call qword ptr [rax]; 
0x0000000004f8f6: xor eax, 0x8948ffff; ret; 
0x000000000f744e: xor eax, 0xb5735; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000001098ec: xor eax, 0xc764000e; add [rsi], dl; add [rax], al; add [rax-0x1], bh; ret; 
0x000000000ddbf6: xor eax, 0xcddc9; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax; 
0x000000000d73d5: xor eax, 0xd80bb; mov eax, 0x142; syscall; 
0x00000000109894: xor eax, 0xd8f7000e; mov fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000010983c: xor eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000cfaad: xor eax, 0xdb2ca; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax; 
0x000000000cd55d: xor eax, 0xdd62e; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000f744f: xor eax, 0xf000b57; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000006eee7: xor eax, 0xffffeebf; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee84: xor eax, 0xffffef22; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x0000000006ee1f: xor eax, 0xffffef87; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax; 
0x00000000115633: xor eax, [0x30]; call rax; 
0x0000000002d55c: xor eax, [0x30]; jmp rax; 
0x00000000043d7e: xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000012392c: xor eax, [0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000002d5ba: xor eax, [0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002d60b: xor eax, [0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d120: xor eax, [0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x000000000771fd: xor eax, [0x30]; test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000772bd: xor eax, [0x30]; test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000043655: xor eax, [0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x000000000434e9: xor eax, [rax+rax]; xor eax, eax; pop rbx; ret; 
0x0000000010a551: xor eax, [rax]; add [rax], al; syscall; 
0x0000000010ae70: xor eax, [rcx]; add [rax], al; syscall; 
0x0000000013a6b9: xor eax, [rdi]; add [rcx+0x146349c1], cl; mov [rcx+rax-0x3e], cl; jmp rdx; 
0x00000000156c55: xor eax, [rsi]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001446bf: xor eax, eax; add r13, rbx; call rbp; 
0x00000000128eb3: xor eax, eax; add rsp, 0x100; pop rbx; ret; 
0x00000000144a58: xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000008bca8: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000080c07: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000008e314: xor eax, eax; add rsp, 0x18; ret; 
0x00000000141c1b: xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000000141cf4: xor eax, eax; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000faec1: xor eax, eax; add rsp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000eebd2: xor eax, eax; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000f9717: xor eax, eax; add rsp, 0x88; pop rbp; pop r12; ret; 
0x0000000014eadd: xor eax, eax; add rsp, 0x8; mov eax, r8d; ret; 
0x0000000011407a: xor eax, eax; add rsp, 0x8; pop rbp; pop r12; ret; 
0x000000000448ae: xor eax, eax; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000045d01: xor eax, eax; add rsp, 0x8; ret; 
0x000000000fefe8: xor eax, eax; add rsp, 0x90; pop rbx; ret; 
0x0000000003a800: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000002d3b3: xor eax, eax; call qword ptr [r14+0x328]; 
0x00000000139b6f: xor eax, eax; call qword ptr [rbx+0x18]; 
0x00000000139c0b: xor eax, eax; call qword ptr [rbx+0x28]; 
0x0000000007de98: xor eax, eax; call r12; 
0x0000000002dceb: xor eax, eax; call rbx; 
0x000000000e08d8: xor eax, eax; cmp [rsi], cl; je 0x00000000000e083d; ret; 
0x0000000010b3c4: xor eax, eax; cmp byte ptr [rcx], 0x0; je short 0x000000000010b3d0; ret; 
0x00000000043e26: xor eax, eax; cmp byte ptr [rdi], 0x0; jne short 0x0000000000043e30; pop rbx; ret; 
0x00000000141bbb: xor eax, eax; cmp byte ptr [rsp+0x8], 0x0; setne al; add rsp, 0x78; ret; 
0x0000000012c6d6: xor eax, eax; cmp cx, dx; je short 0x000000000012c6e0; ret; 
0x00000000132538: xor eax, eax; cmp eax, 0x2; jne short 0x0000000000132558; mov eax, r8d; ret; 
0x000000000f11f0: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+0x5]; ret; 
0x0000000008fe98: xor eax, eax; cmp edi, 0x1; je short 0x000000000008fea0; ret; 
0x0000000010c9cc: xor eax, eax; cmp edi, 0x9; setbe r8b; mov eax, r8d; ret; 
0x000000000c9bf3: xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x00000000131ebc: xor eax, eax; cmp edx, 0x1; jne short 0x0000000000131ee0; ret; 
0x000000000f8f30: xor eax, eax; cmp edx, 0x4; je short 0x00000000000f8f40; mov eax, 0x1c; syscall; 
0x0000000007fb23: xor eax, eax; cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x00000000085bc0: xor eax, eax; cmp qword ptr [rdi+0x460], 0x0; je short 0x0000000000085bd9; mov rax, [rip+0x1672f5]; call qword ptr [rax+0x360]; 
0x0000000008a990: xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000d85fb: xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x000000000d8616: xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000d85db: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x000000000d85c2: xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x000000000fe14f: xor eax, eax; cmp rdx, rcx; je short 0x00000000000fe160; ret; 
0x0000000008610b: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000b615e: xor eax, eax; lea r9, [rsp+0x28]; call rbx; 
0x00000000044440: xor eax, eax; mov [r11], ebx; pop rbx; pop rbp; ret; 
0x00000000087831: xor eax, eax; mov [r8], rdx; ret; 
0x000000000411a5: xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret; 
0x0000000007b1eb: xor eax, eax; mov [rbx], ecx; pop rbx; ret; 
0x00000000087bd4: xor eax, eax; mov [rdi+0x18], rsi; ret; 
0x00000000087bb7: xor eax, eax; mov [rdi+0x20], rdx; mov [rdi+0x18], rsi; ret; 
0x000000001233d6: xor eax, eax; mov [rdi+0x3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+0x8], xmm0; ret; 
0x00000000087aa3: xor eax, eax; mov [rdi+0x4], esi; ret; 
0x000000000906a3: xor eax, eax; mov [rdi+0x8], esi; ret; 
0x000000000445f6: xor eax, eax; mov [rdi+0x8], rcx; ret; 
0x0000000008b377: xor eax, eax; mov [rdi], ecx; ret; 
0x000000000894c3: xor eax, eax; mov [rdi], esi; ret; 
0x00000000044627: xor eax, eax; mov [rdi], r8; ret; 
0x000000000a112b: xor eax, eax; mov [rdi], rdx; ret; 
0x000000000ca3d0: xor eax, eax; mov [rdx], eax; mov rax, r8; add rsp, 0x8; ret; 
0x00000000122781: xor eax, eax; mov dword ptr [rdi+0x8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret; 
0x00000000044929: xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret; 
0x000000001448f7: xor eax, eax; mov dword ptr [rsp], 0x2; mov rdi, rsp; call r8; 
0x000000000ff3a0: xor eax, eax; mov eax, 0x127; syscall; 
0x000000000ff450: xor eax, eax; mov eax, 0x128; syscall; 
0x000000000ff520: xor eax, eax; mov eax, 0x147; syscall; 
0x000000000ff690: xor eax, eax; mov eax, 0x148; syscall; 
0x0000000010a813: xor eax, eax; mov eax, 0x2c; syscall; 
0x0000000010a5f3: xor eax, eax; mov eax, 0x2d; syscall; 
0x000000000d6890: xor eax, eax; mov eax, 0xf7; syscall; 
0x000000000e2ee6: xor eax, eax; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000be419: xor eax, eax; mov eax, r8d; ret; 
0x0000000018be1b: xor eax, eax; mov ecx, [rdi+rdx+0x20]; cmp ecx, [rsi+rdx+0x20]; jne short 0x000000000018be07; ret; 
0x0000000018be3b: xor eax, eax; mov ecx, [rdi+rdx+0x40]; cmp ecx, [rsi+rdx+0x40]; jne short 0x000000000018be07; ret; 
0x0000000018be5b: xor eax, eax; mov ecx, [rdi+rdx+0x60]; cmp ecx, [rsi+rdx+0x60]; jne short 0x000000000018be07; ret; 
0x0000000018c27d: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x000000000018be07; ret; 
0x0000000018c5c8: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne 0x000000000018c547; ret; 
0x0000000018c568: xor eax, eax; mov ecx, [rdi+rdx]; cmp ecx, [rsi+rdx]; jne short 0x000000000018c547; ret; 
0x0000000018ca80: xor eax, eax; mov ecx, [rdi]; cmp ecx, [rsi]; jne 0x000000000018c547; ret; 
0x0000000018c075: xor eax, eax; mov ecx, [rsi+rdi+0x20]; cmp ecx, [rdx+rdi+0x20]; jne 0x000000000018be07; ret; 
0x0000000018c0a5: xor eax, eax; mov ecx, [rsi+rdi+0x40]; cmp ecx, [rdx+rdi+0x40]; jne 0x000000000018be07; ret; 
0x0000000018c80c: xor eax, eax; mov ecx, [rsi+rdi]; cmp ecx, [rdx+rdi]; jne 0x000000000018c547; ret; 
0x0000000018c22e: xor eax, eax; mov edi, [rsi+rcx+0x40]; cmp edi, [rdx+rcx+0x40]; jne 0x000000000018be07; ret; 
0x0000000018c045: xor eax, eax; mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x000000000018be07; ret; 
0x0000000018c7cb: xor eax, eax; mov edi, [rsi+rcx]; cmp edi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x00000000145906: xor eax, eax; mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx; 
0x000000001447f4: xor eax, eax; mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13; 
0x0000000008667c: xor eax, eax; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000018c0ce: xor eax, eax; mov esi, [rsi+rcx+0x60]; cmp esi, [rdx+rcx+0x60]; jne 0x000000000018be07; ret; 
0x0000000018c885: xor eax, eax; mov esi, [rsi+rcx]; cmp esi, [rdx+rcx]; jne 0x000000000018c547; ret; 
0x0000000009a877: xor eax, eax; mov qword ptr [r8+0x8], 0x0; ret; 
0x00000000043969: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000004395e: xor eax, eax; mov rax, r8; ret; 
0x00000000115725: xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000007dcc0: xor eax, eax; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x000000000b5e6f: xor eax, eax; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000c1488: xor eax, eax; mov rdx, [rsp+0x20]; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x0000000013904b: xor eax, eax; mov rsi, [rsp+0x10]; mov rcx, [rsp+0x8]; mov rdi, rbp; call rcx; 
0x000000000c131d: xor eax, eax; mov rsi, [rsp+0x18]; mov rcx, r13; mov rdx, rbp; call rbx; 
0x0000000013a2a3: xor eax, eax; mov rsi, [rsp+0x2a00]; call rcx; 
0x0000000013de90: xor eax, eax; mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx; 
0x0000000013e082: xor eax, eax; mov rsi, [rsp+0x40]; mov rcx, [rsp+0x20]; mov rdi, r12; call rcx; 
0x00000000140e42: xor eax, eax; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx; 
0x0000000013e6c7: xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x0000000013e6e7: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 0x2; add rdi, 0x10; jmp rcx; 
0x00000000140b17: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 0x2; add rdi, 0x58; jmp rcx; 
0x00000000140287: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 0x2; add rdi, 0x68; jmp rcx; 
0x0000000013db97: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 0x2; add rdi, 0xc8; jmp rcx; 
0x00000000087808: xor eax, eax; movups [rsi+0x70], xmm7; ret; 
0x0000000009c1ff: xor eax, eax; pop r12; pop r13; ret; 
0x0000000011568c: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000004f8af: xor eax, eax; pop r12; ret; 
0x00000000145122: xor eax, eax; pop r14; jmp rcx; 
0x0000000013a4e0: xor eax, eax; pop rbp; jmp rdx; 
0x00000000092e58: xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000004f87b: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000003f896: xor eax, eax; pop rbp; ret; 
0x0000000013ade7: xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000138fa2: xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x00000000036ce8: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000443c3: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000004118a: xor eax, eax; pop rbx; ret; 
0x000000000b5ac4: xor eax, eax; push 0x0; lea r9, [rsp+0x20]; call r13; 
0x0000000003f5f8: xor eax, eax; ret; 
0x0000000008641c: xor eax, eax; ret; 
0x000000000a30ee: xor eax, eax; sub eax, ecx; ret; 
0x00000000145c0a: xor eax, eax; sub rsp, 0xffffffffffffff80; pop rbx; ret; 
0x000000000f9cd8: xor eax, eax; syscall; 
0x000000001144dc: xor eax, eax; test byte ptr [rbx+0x1c], 0x20; je short 0x00000000001144f0; pop rbx; ret; 
0x0000000007fb60: xor eax, eax; test byte ptr [rdi], 0x4; sete al; ret; 
0x0000000007fb70: xor eax, eax; test byte ptr [rdi], 0x8; sete al; ret; 
0x000000000e090c: xor eax, eax; test byte ptr [rdx+0xc8], 0x40; jne 0x00000000000e083d; ret; 
0x000000000e08ba: xor eax, eax; test byte ptr [rdx+0xc8], 0x80; je 0x00000000000e083d; ret; 
0x000000001454ad: xor eax, eax; test eax, eax; je short 0x00000000001454e0; mov eax, r8d; ret; 
0x000000001454fd: xor eax, eax; test eax, eax; je short 0x0000000000145530; mov eax, r8d; ret; 
0x00000000041d67: xor eax, eax; test edx, edx; sete al; ret; 
0x00000000191d40: xor eax, eax; test r8d, r8d; jne 0x0000000000191c4c; add rsp, 0x38; ret; 
0x0000000016fe80: xor eax, eax; vzeroupper; ret; 
0x00000000133c74: xor eax, eax; xchg [rdi+0x8], eax; cmp eax, 0x1; jg short 0x0000000000133c80; ret; 
0x0000000002dd59: xor eax, eax; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000446a8: xor eax, ecx; ret; 
0x0000000013c4da: xor eax, edx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x0000000003f5ea: xor eax, edx; movzx edx, byte ptr [rdi]; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x00000000043dc3: xor eax, edx; sub eax, edx; ret; 
0x00000000043dd6: xor eax, edx; sub rax, rdx; ret; 
0x00000000141a21: xor ebp, [rcx-0x76b70012]; ret; 
0x0000000009c319: xor ebp, [rsi-0x72b7fff3]; add eax, 0xdae8c; cmove rax, rdx; ret; 
0x0000000018d9be: xor ebp, eax; sti; xchg ebx, eax; ret; 
0x00000000109c21: xor ebp, ebp; and rsp, 0xfffffffffffffff0; mov rdi, r8; call rdx; 
0x0000000006f641: xor ebp, ebp; mov edx, 0x1; jmp rax; 
0x00000000108fca: xor ebp, ebp; pop rax; pop rdi; call rax; 
0x000000000fb991: xor ebp, ecx; ret far; 
0x0000000008e45d: xor ebp, esi; adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x0000000006d9ce: xor ebx, 0xd9e9ffff; loop 0x000000000006d9d5; jmp qword ptr [rsi+0xf]; 
0x000000000773a3: xor ebx, [rbx+0x5d]; pop r12; ret; 
0x0000000006dff9: xor ebx, ebx; mov r14d, 0x1; jmp rax; 
0x0000000007980f: xor ebx, edi; jmp qword ptr [rsi+0x2e]; 
0x000000000685d9: xor ecx, [rax+0x18]; add [rbx-0x55773], cl; jmp qword ptr [rcx+rcx*4+0x8]; 
0x000000000b515a: xor ecx, [rax+rax]; lea rax, [rip+0x1069c]; cmove rax, rdx; ret; 
0x00000000127d0c: xor ecx, [rax-0x75]; add eax, 0xc50fc; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret; 
0x00000000099fbd: xor ecx, [rax-0x77]; jnp short 0x000000000009a00a; call rcx; 
0x0000000005198e: xor ecx, [rax-0x7d]; ret; 
0x00000000103f99: xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12; 
0x0000000018fb49: xor ecx, [rdi]; adc dword ptr [rax+0x41000002], 0xffffff83; ret far; 
0x00000000102d53: xor ecx, [rdi]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000bc1ba: xor ecx, [rdi]; add al, ch; jrcxz 0x00000000000bc1b8; jmp qword ptr [rsi+0x66]; 
0x000000000bc1b9: xor ecx, [rdi]; add al, ch; jrcxz 0x00000000000bc1b8; jmp qword ptr [rsi+0x66]; 
0x000000001912ef: xor ecx, [rdi]; or dword ptr [rbp-0x4], 0xffffffff; dec dword ptr [rcx-0x7d]; ret; 
0x000000000f0162: xor ecx, ecx; add rsp, 0x8; mov eax, r9d; ret; 
0x00000000040730: xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x000000000df216: xor ecx, ecx; cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x0000000018d0e4: xor ecx, ecx; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x00000000185d24: xor ecx, ecx; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000139982: xor ecx, ecx; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000090445: xor ecx, ecx; lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x000000000df1d1: xor ecx, ecx; mov eax, r9d; ret; 
0x0000000014c811: xor ecx, ecx; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x0000000003682a: xor ecx, ecx; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x0000000002dd5b: xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x0000000010a810: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5f0: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000015b1b9: xor edi, 0x5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx; 
0x000000001322e6: xor edi, [0x30]; call rax; 
0x00000000121af4: xor edi, [rax+0x3]; mov edi, [rbp-0x50]; syscall; 
0x00000000078cf3: xor edi, [rbx]; sti; jmp qword ptr [rsi+0xf]; 
0x0000000012f869: xor edi, [rdx+0xc]; add [rax+0x39], cl; ret far; 
0x0000000007953f: xor edi, ebx; jmp qword ptr [rsi+0x2e]; 
0x00000000130ad5: xor edi, edi; call qword ptr [rsp+0x28]; 
0x00000000130ecd: xor edi, edi; call qword ptr [rsp+0x38]; 
0x00000000117bdd: xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x00000000117bdc: xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall; 
0x0000000008a3f2: xor edi, edi; mov eax, 0x8f; syscall; 
0x0000000008a3c5: xor edi, edi; mov eax, 0x91; syscall; 
0x00000000104f4b: xor edi, edi; mov eax, ebx; syscall; 
0x0000000002d200: xor edi, edi; mov eax, edx; syscall; 
0x00000000050022: xor edi, edi; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x00000000102a4d: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000c7538: xor edi, edi; syscall; 
0x0000000018f592: xor edi, esp; add rax, rdx; jmp rax; 
0x0000000018f37d: xor edi, esp; movzx r12d, dil; add rax, rdx; jmp rax; 
0x0000000018f591: xor edi, r12d; add rax, rdx; jmp rax; 
0x0000000018f37c: xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax; 
0x0000000012e294: xor edx, [rsi+0x10]; or rdx, rax; je short 0x000000000012e2c0; mov eax, r8d; ret; 
0x0000000012c73d: xor edx, [rsi+0x10]; or rdx, rax; sete al; movzx eax, al; ret; 
0x0000000008e916: xor edx, edx; and esi, 0x80; add esi, 0x1; syscall; 
0x000000000f91b0: xor edx, edx; call rax; 
0x0000000018d538: xor edx, edx; cmp eax, [rsi+rcx*4+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4dc: xor edx, edx; cmp ecx, [rsi+rax*4+0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4f1: xor edx, edx; cmp ecx, [rsi+rax*4+0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6ca: xor edx, edx; cmp ecx, [rsi+rax*4-0x20]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6ea: xor edx, edx; cmp ecx, [rsi+rax*4-0x40]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d4c7: xor edx, edx; cmp ecx, [rsi+rax*4]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x0000000018d6af: xor edx, edx; cmp ecx, [rsi+rax+0x60]; setg dl; lea eax, [rdx+rdx-0x1]; ret; 
0x000000000584db: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000073297: xor edx, edx; jmp rax; 
0x0000000010b321: xor edx, edx; mov eax, 0x1d; syscall; 
0x0000000008e285: xor edx, edx; mov eax, 0xca; syscall; 
0x00000000088ac9: xor edx, edx; mov eax, ebx; syscall; 
0x0000000009ad68: xor edx, edx; mov eax, edx; ret; 
0x00000000128a41: xor edx, edx; mov eax, r10d; ret; 
0x0000000008852a: xor edx, edx; mov eax, r8d; syscall; 
0x00000000087c3a: xor edx, edx; mov eax, r8d; xor sil, 0x80; syscall; 
0x00000000044ae0: xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall; 
0x00000000050058: xor edx, edx; mov edi, 0x2; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x000000000868c5: xor edx, edx; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000088b69: xor edx, edx; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e20a: xor edx, edx; mov edx, 0x1; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000000868a1: xor edx, edx; mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef3: xor edx, edx; mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff3: xor edx, edx; mov edx, 0x1; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000088634: xor edx, edx; mov edx, 0x1; mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000088945: xor edx, edx; mov edx, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000008826e: xor edx, edx; mov edx, 0x1; mov rdi, r9; mov eax, 0xca; syscall; 
0x00000000086849: xor edx, edx; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000867e3: xor edx, edx; mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000883ba: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000087d89: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e737: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000086de3: xor edx, edx; mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000882f4: xor edx, edx; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000087dcd: xor edx, edx; mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000089995: xor edx, edx; mov esi, 0x80; mov eax, r8d; syscall; 
0x00000000087168: xor edx, edx; mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x0000000008e659: xor edx, edx; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000086f58: xor edx, edx; mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x0000000008c171: xor edx, edx; mov esi, 0x87; mov dword ptr [rsp+0xc], 0x0; mov eax, 0xca; syscall; 
0x0000000008da10: xor edx, edx; mov esi, 0x8; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000f8c0b: xor edx, edx; mov esi, 0xffffffff; mov eax, 0x1b4; syscall; 
0x000000000fecf2: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000fecf3: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000008b185: xor edx, edx; mov rax, fs:[0x10]; lock cmpxchg [rsp-0x8], rdx; ret; 
0x0000000007caa8: xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80]; 
0x0000000007d078: xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80]; 
0x000000000884ad: xor edx, edx; mov rdi, r9; mov eax, ebp; syscall; 
0x000000000815ca: xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80]; 
0x000000000818bc: xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000008b670: xor edx, edx; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000008bada: xor edx, edx; mov rdi, rbp; mov esi, 0x7; mov eax, 0xca; syscall; 
0x00000000092e2d: xor edx, edx; mov rsi, r12; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000130f46: xor edx, edx; mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx; 
0x000000000f91e0: xor edx, edx; mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall; 
0x00000000130b86: xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10; 
0x000000000f87cc: xor edx, edx; mov rsi, r14; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000081de4: xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80]; 
0x00000000089f86: xor edx, edx; mov rsi, rbx; mov edi, 0x2; mov eax, 0xe; syscall; 
0x00000000073201: xor edx, edx; movzx eax, byte ptr [rax+rcx]; movsxd rax, [r11+rax*4]; add rax, rdi; jmp rax; 
0x0000000008a022: xor edx, edx; or [rsp+0xb8], rax; mov edi, 0x1; mov eax, 0xe; syscall; 
0x000000000b4363: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000078c15: xor edx, edx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000083f22: xor edx, edx; pop rbx; jmp rax; 
0x000000000b5c89: xor edx, edx; push 0x1; lea r9, [rsp+0x20]; call rbx; 
0x0000000002dd5d: xor edx, edx; push rax; call rbx; 
0x0000000008e283: xor edx, edx; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000089993: xor edx, edx; xor edx, edx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000008b66e: xor edx, edx; xor edx, edx; mov rdi, rbp; mov eax, 0xca; syscall; 
0x000000000f912d: xor edx, edx; xor esi, esi; mov rdi, rbp; call rax; 
0x000000000f9160: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall; 
0x0000000008c65b: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000084705: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000f912c: xor esi, [rcx]; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; call rax; 
0x0000000008df1b: xor esi, [rdi+0x12]; lea rdx, [rip+0x11bc23]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x0000000017ed4e: xor esi, [rdx+0x2]; mov [rax], cl; ret; 
0x0000000009bef9: xor esi, [rdx-0x72b7fff3]; add eax, 0xdb28c; cmove rax, rdx; ret; 
0x000000000f8fde: xor esi, ebx; jmp qword ptr [rsi+0x2e]; 
0x000000000b9a67: xor esi, edi; jmp qword ptr [rsi+0xf]; 
0x00000000103b07: xor esi, esi; call r12; 
0x000000000d20fa: xor esi, esi; lea edi, [rdi*8+0x2]; syscall; 
0x0000000013ae2f: xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x0000000013aea2: xor esi, esi; mov dword ptr [rax+0x23b0], 0x1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28]; 
0x00000000143ce0: xor esi, esi; mov dword ptr [rbx+0x10], 0x1; mov rdi, r13; call qword ptr [rax+0x28]; 
0x000000000829be: xor esi, esi; mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x000000000d6ebe: xor esi, esi; mov edi, 0x1200011; lea r10, [rax+0x2d0]; mov eax, 0x38; syscall; 
0x00000000110fa2: xor esi, esi; mov edi, 0x2000004; call rax; 
0x0000000007cf7f: xor esi, esi; mov edx, 0x1; mov rdi, r15; call qword ptr [rbp+0x80]; 
0x00000000081817: xor esi, esi; mov edx, 0x1; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x0000000007cd81: xor esi, esi; mov edx, 0x2; mov rdi, r15; call qword ptr [r13+0x80]; 
0x00000000076c02: xor esi, esi; mov edx, 0x2; mov rdi, rbp; call qword ptr [rbx+0x80]; 
0x00000000082476: xor esi, esi; mov edx, 0x2; mov rdi, rbx; call qword ptr [rbp+0x80]; 
0x00000000043b0f: xor esi, esi; mov rdi, r9; call r13; 
0x0000000007f114: xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x00000000076915: xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10]; 
0x000000000f912f: xor esi, esi; mov rdi, rbp; call rax; 
0x000000001390fc: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x0; call qword ptr [rax+0x28]; 
0x00000000139081: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x000000000f9162: xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall; 
0x0000000008c65d: xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000008b981: xor esi, esi; mov rdi, rbp; mov eax, r15d; syscall; 
0x00000000084707: xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58]; 
0x000000000fdd5d: xor esi, esi; syscall; 
0x000000000fdd5e: xor esi, esi; syscall; 
0x00000000050020: xor esi, esi; xor edi, edi; mov r10d, 0x8; mov eax, 0xe; syscall; 
0x0000000007f113: xor esi, r14d; mov rdi, rbp; call qword ptr [r13+0x10]; 
0x0000000014ce30: xor esp, esp; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000074986: xor esp, esp; jmp rax; 
0x0000000008e915: xor r10d, r10d; and esi, 0x80; add esi, 0x1; syscall; 
0x00000000073296: xor r10d, r10d; jmp rax; 
0x0000000010b320: xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000088ac8: xor r10d, r10d; mov eax, ebx; syscall; 
0x00000000128a40: xor r10d, r10d; mov eax, r10d; ret; 
0x00000000088529: xor r10d, r10d; mov eax, r8d; syscall; 
0x00000000087c39: xor r10d, r10d; mov eax, r8d; xor sil, 0x80; syscall; 
0x000000000868c4: xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x00000000088b68: xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e209: xor r10d, r10d; mov edx, 0x1; mov esi, 0x1; mov eax, 0xca; syscall; 
0x000000000868a0: xor r10d, r10d; mov edx, 0x1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000012fef2: xor r10d, r10d; mov edx, 0x1; mov esi, 0x81; mov eax, r12d; syscall; 
0x00000000092ff2: xor r10d, r10d; mov edx, 0x1; mov esi, 0x81; mov eax, r13d; syscall; 
0x00000000088633: xor r10d, r10d; mov edx, 0x1; mov esi, ebx; mov eax, 0xca; syscall; 
0x00000000088944: xor r10d, r10d; mov edx, 0x1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000008826d: xor r10d, r10d; mov edx, 0x1; mov rdi, r9; mov eax, 0xca; syscall; 
0x00000000086848: xor r10d, r10d; mov edx, 0x2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000867e1: xor r10d, r10d; mov edx, 0x2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000883b9: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000087d88: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000008e736: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000086de2: xor r10d, r10d; mov edx, 0xfffffffe; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000882f3: xor r10d, r10d; mov edx, ecx; mov eax, r13d; syscall; 
0x00000000087dcc: xor r10d, r10d; mov edx, r12d; mov eax, ebp; xor sil, 0x80; syscall; 
0x00000000087166: xor r10d, r10d; mov esi, 0x80; mov rdi, r15; mov eax, r9d; syscall; 
0x0000000008e657: xor r10d, r10d; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000086f57: xor r10d, r10d; mov esi, 0x81; lea rdi, [rax+0x20]; mov eax, 0xca; syscall; 
0x000000000fed32: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000fed33: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000884ac: xor r10d, r10d; mov rdi, r9; mov eax, ebp; syscall; 
0x00000000073200: xor r10d, r10d; movzx eax, byte ptr [rax+rcx]; movsxd rax, [r11+rax*4]; add rax, rdi; jmp rax; 
0x0000000008e282: xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000089992: xor r10d, r10d; xor edx, edx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000008b66d: xor r10d, r10d; xor edx, edx; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000008c659: xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000008c65a: xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000006dff8: xor r11d, r11d; mov r14d, 0x1; jmp rax; 
0x0000000014ce2f: xor r12d, r12d; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000074985: xor r12d, r12d; jmp rax; 
0x0000000006f640: xor r13d, r13d; mov edx, 0x1; jmp rax; 
0x000000000faec0: xor r8d, r8d; add rsp, 0x40; mov rax, r8; pop rbp; ret; 
0x0000000014eadc: xor r8d, r8d; add rsp, 0x8; mov eax, r8d; ret; 
0x000000001227e2: xor r8d, r8d; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000007de97: xor r8d, r8d; call r12; 
0x0000000002dcea: xor r8d, r8d; call rbx; 
0x00000000132537: xor r8d, r8d; cmp eax, 0x2; jne short 0x0000000000132558; mov eax, r8d; ret; 
0x0000000010c9cb: xor r8d, r8d; cmp edi, 0x9; setbe r8b; mov eax, r8d; ret; 
0x0000000007fb22: xor r8d, r8d; cmp qword ptr [rdi+0x18], 0x0; setne r8b; mov eax, r8d; ret; 
0x000000000b615d: xor r8d, r8d; lea r9, [rsp+0x28]; call rbx; 
0x000000000ca3cf: xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 0x8; ret; 
0x000000000ff39f: xor r8d, r8d; mov eax, 0x127; syscall; 
0x000000000ff44f: xor r8d, r8d; mov eax, 0x128; syscall; 
0x000000000ff51f: xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000ff68f: xor r8d, r8d; mov eax, 0x148; syscall; 
0x0000000010a812: xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5f2: xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000d688f: xor r8d, r8d; mov eax, 0xf7; syscall; 
0x000000000e2ee5: xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000be418: xor r8d, r8d; mov eax, r8d; ret; 
0x0000000008667b: xor r8d, r8d; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000043968: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000004395d: xor r8d, r8d; mov rax, r8; ret; 
0x0000000007dcbe: xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x10]; call rbp; 
0x000000000b641a: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000b5e6e: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x70]; call rbx; 
0x000000000c1487: xor r8d, r8d; mov rdx, [rsp+0x20]; mov rdi, r12; mov rsi, [rsp+0x18]; call rbx; 
0x000000000c131c: xor r8d, r8d; mov rsi, [rsp+0x18]; mov rcx, r13; mov rdx, rbp; call rbx; 
0x000000000b5ac3: xor r8d, r8d; push 0x0; lea r9, [rsp+0x20]; call r13; 
0x000000001454ac: xor r8d, r8d; test eax, eax; je short 0x00000000001454e0; mov eax, r8d; ret; 
0x000000001454fc: xor r8d, r8d; test eax, eax; je short 0x0000000000145530; mov eax, r8d; ret; 
0x0000000002dd58: xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000f0161: xor r9d, r9d; add rsp, 0x8; mov eax, r9d; ret; 
0x000000000df215: xor r9d, r9d; cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x000000000df1d0: xor r9d, r9d; mov eax, r9d; ret; 
0x0000000014c810: xor r9d, r9d; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000036829: xor r9d, r9d; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x0000000010a80f: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5ef: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000fe436: xor rax, 0x20; mov [rdi+0x48], rax; ret; 
0x00000000115632: xor rax, [0x30]; call rax; 
0x0000000002d55b: xor rax, [0x30]; jmp rax; 
0x00000000043d7d: xor rax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000012392b: xor rax, [0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000002d5b9: xor rax, [0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002d60a: xor rax, [0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d11f: xor rax, [0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x000000000771fc: xor rax, [0x30]; test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000772bc: xor rax, [0x30]; test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000043654: xor rax, [0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x00000000115631: xor rax, fs:[0x30]; call rax; 
0x0000000002d55a: xor rax, fs:[0x30]; jmp rax; 
0x00000000043d7c: xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+0x8]; call rax; 
0x0000000012392a: xor rax, fs:[0x30]; mov qword ptr [rsp+0x8], 0x0; call rax; 
0x0000000002d5b8: xor rax, fs:[0x30]; pop r12; pop r13; pop r14; jmp rax; 
0x0000000002d609: xor rax, fs:[0x30]; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000002d11e: xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x1c35b6], rax; ret; 
0x000000000771fb: xor rax, fs:[0x30]; test rax, rax; je short 0x0000000000077212; mov rdi, [rdi+0xe0]; jmp rax; 
0x000000000772bb: xor rax, fs:[0x30]; test rax, rax; je short 0x00000000000772d8; mov rdi, [rdi+0xe0]; jmp rax; 
0x00000000043653: xor rax, fs:[0x30]; xchg [r14], edx; cmp edx, 0x1; jg 0x0000000000043710; call rax; 
0x000000000aa7a5: xor rax, rax; ret; 
0x0000000013c4d9: xor rax, rdx; mov [r8], rsi; mov [r8+0x8], rax; ret; 
0x0000000003f5e9: xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne short 0x000000000003f5cc; ret; 
0x00000000043dd5: xor rax, rdx; sub rax, rdx; ret; 
0x00000000102d52: xor rcx, [rdi]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000001322e5: xor rdi, [0x30]; call rax; 
0x000000001322e4: xor rdi, fs:[0x30]; call rax; 
0x0000000012e293: xor rdx, [rsi+0x10]; or rdx, rax; je short 0x000000000012e2c0; mov eax, r8d; ret; 
0x0000000012c73c: xor rdx, [rsi+0x10]; or rdx, rax; sete al; movzx eax, al; ret; 
0x000000000829bd: xor rsi, rsi; mov ecx, 0x3; mov edx, 0x1; mov rdi, rbx; call qword ptr [r12+0x48]; 
0x00000000086855: xor sil, 0x80; syscall; 
0x00000000087e6a: xor sil, 0x81; mov dword ptr [r8], 0x0; syscall; 
0x00000000088cef: xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000087d95: xor sil, 0x81; syscall; 
0x000000000868c0: xor sil, 0x81; xor r10d, r10d; mov edx, 0x1; mov eax, 0xca; syscall; 
0x000000000888f0: xor sil, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000008e27e: xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000008e51c: xrelease mov [rbp], ebx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x0000000012262d: xrelease mov [rbp], rbx; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000158ccb: xrelease mov [rdi-0x8], rcx; ret; 
0x00000000153bde: xrelease mov [rdi-0x8], rdx; ret; 
0x0000000017ee2c: xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000017f13e: xtest; je short 0x000000000017f147; vzeroall; ret; 
0x0000000017f557: xtest; je short 0x000000000017f560; vzeroall; ret; 
0x0000000017fd09: xtest; je short 0x000000000017fd12; vzeroall; ret; 
0x00000000180057: xtest; je short 0x0000000000180060; vzeroall; ret; 
0x00000000180180: xtest; je short 0x0000000000180189; vzeroall; ret; 
0x0000000018050d: xtest; je short 0x0000000000180516; vzeroall; ret; 
0x00000000180560: xtest; je short 0x0000000000180569; vzeroall; ret; 
0x00000000180b82: xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x00000000180e0b: xtest; je short 0x0000000000180e14; vzeroall; ret; 
0x0000000018128e: xtest; je short 0x0000000000181297; vzeroall; ret; 
0x00000000181e68: xtest; je short 0x0000000000181e71; vzeroall; ret; 
0x00000000182218: xtest; je short 0x0000000000182221; vzeroall; ret; 
0x000000001824be: xtest; je short 0x00000000001824c7; vzeroall; ret; 
0x00000000182ad8: xtest; je short 0x0000000000182ae1; vzeroall; ret; 
0x00000000182f70: xtest; je short 0x0000000000182f79; vzeroall; ret; 
0x00000000183786: xtest; je short 0x000000000018378f; vzeroall; ret; 
0x00000000184089: xtest; je short 0x0000000000184092; vzeroall; ret; 
0x000000001841f9: xtest; je short 0x0000000000184202; vzeroall; ret; 
0x000000001844fc: xtest; je short 0x0000000000184505; vzeroall; ret; 
0x0000000018455d: xtest; je short 0x0000000000184566; vzeroall; ret; 
0x00000000184b41: xtest; je short 0x0000000000184b4a; vzeroall; ret; 
0x00000000184bbd: xtest; je short 0x0000000000184bc6; vzeroall; ret; 
0x000000001853cc: xtest; je short 0x00000000001853d5; vzeroall; ret; 
0x0000000018554e: xtest; je short 0x0000000000185557; vzeroall; ret; 
0x0000000018568f: xtest; je short 0x0000000000185698; vzeroall; ret; 
0x000000001859d3: xtest; je short 0x00000000001859dc; vzeroall; ret; 

CONFIG [ search: ROP-JOP-SYS (default), x_match: none, max_len: 5, syntax: Intel, regex_filter: none ]
RESULT [ unique_gadgets: 42827, search_time: 638.072939ms, print_time: 2.74409447s ]
