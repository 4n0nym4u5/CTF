TARGET 0 - 'libc.so.6': ELF-X64, 0x0000000002d420 entry, 1471756/1 executable bytes/segments 

0x000000000fd9db: adc [r13+0x41], r11b; pop rsp; pop r13; pop r14; ret; 
0x000000000fd9dc: adc [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000037396: adc [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000005b9a5: adc [rbx+0x41], bl; pop rsp; pop r13; ret; 
0x00000000036ce7: adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000149b60: adc [rip-0x76b40000], al; loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b80: adc [rip-0x76b40000], al; loopne 0x0000000000149bc9; pop rsp; ret; 
0x0000000014a46b: adc al, 0x48; add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x000000000f935b: adc al, 0x48; add esp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000940be: adc al, ch; mov esp, 0x8bffff20; and al, 0x10; add rsp, 0x28; ret; 
0x000000000d44c2: adc eax, 0x482b8964; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000095c0e: adc eax, 0x484e7500; add esp, 0x10; pop rbp; ret; 
0x0000000008e45f: adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x00000000064513: adc ecx, [rcx+0x415d5b28]; pop rsp; ret; 
0x00000000099dae: adc esi, [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000009d7f8: add [r8], r8b; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x0000000005b7df: add [rax+rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000d75e3: add [rax-0x1], bh; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000003af69: add [rax-0x75], cl; pop rsp; ret; 
0x00000000095c91: add [rax-0x7d], cl; clc; push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x000000000d75e1: add [rax], al; add [rax-0x1], bh; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000009d7f9: add [rax], al; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x000000000df1cd: add [rax], al; add [rbp+0x31], al; leave; mov eax, r9d; ret; 
0x0000000002d60f: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x0000000005a5bb: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000004187c: add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x000000000fc7dc: add [rax], al; add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret; 
0x0000000008042b: add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000a4c1d: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c0d: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bfd: add [rax], al; add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000045cc8: add [rax], al; add [rdx+rdx*8+0x48c1450f], al; add esp, 0x8; ret; 
0x000000001178ee: add [rax], al; add al, ch; mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x0000000007a6f9: add [rax], al; add al, ch; sysenter; 
0x00000000182e0f: add [rax], al; add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000d75e2: add [rax], al; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x000000000d785c: add [rax], al; mov rsp, rbx; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000005b77c: add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000000df1cf: add [rbp+0x31], al; leave; mov eax, r9d; ret; 
0x000000000ca3ce: add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x0000000002d611: add [rbp+0x41], bl; pop rsp; pop r13; jmp rax; 
0x0000000005c614: add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000005a5bd: add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000004187e: add [rbp+0x41], bl; pop rsp; ret; 
0x00000000041628: add [rbp+0x480b75c0], al; add esp, 0x8; ret; 
0x00000000091076: add [rbp+0x480d78c0], al; add esp, 0x110; pop rbp; ret; 
0x0000000013cceb: add [rbp+0x481074d2], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000091f73: add [rbp+0x481078c0], al; add esp, 0x110; pop rbp; ret; 
0x000000000fae91: add [rbp+0x483a75c0], al; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x0000000008802e: add [rbp+rdx*2+0x48], esi; add esp, 0xa0; xor eax, eax; pop rbp; ret; 
0x000000000d7e58: add [rbx+0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000004170d: add [rbx+0x48082444], cl; add esp, 0x18; ret; 
0x0000000008feac: add [rbx+0x480c2444], cl; add esp, 0x18; ret; 
0x0000000014c375: add [rbx+0x480c2444], cl; add esp, 0x30; pop rbx; ret; 
0x0000000014b26f: add [rbx+rax*4+0x3a], ah; sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x000000000806c3: add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x0000000011f2b5: add [rbx-0x70f0fe06], al; test eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x000000000fc7de: add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret; 
0x0000000014a410: add [rcx+0x415d5bd8], cl; pop rsp; pop r13; pop r14; ret; 
0x00000000145dc1: add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x00000000139981: add [rcx], dh; leave; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x0000000013e8ca: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000008042d: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000b4362: add [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000001140ee: add [rdi+rbx*2+0x31], esi; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x000000000a4c1f: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c0f: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bee: add [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000a4c2f: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c3e: add [rdi], cl; mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4bff: add [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000e9fb5: add [rdi], cl; xchg esp, eax; ret; 
0x00000000086f43: add [rdx+rcx+0x48], esi; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000045cca: add [rdx+rdx*8+0x48c1450f], al; add esp, 0x8; ret; 
0x0000000012f169: add [rsp+0x48], esi; add esp, 0x8; ret; 
0x0000000014a469: add [rsp+rdx+0x48], dh; add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x0000000005b7e0: add al, 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000011e7d5: add al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000012774e: add al, 0x48; add esp, 0x18; ret; 
0x00000000109147: add al, 0x48; add esp, 0x20; pop r12; ret; 
0x0000000010ae27: add al, 0x48; add esp, 0x28; ret; 
0x000000000f81f1: add al, 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fd882: add al, 0x77; or esp, [rsi-0x77]; push rsi; xor ax, ax; ret; 
0x000000001171e3: add al, 0x85; leave; jne short 0x0000000000117198; mov rax, r8; ret; 
0x0000000007a831: add al, [rax]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x000000001178f0: add al, ch; mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x0000000010dc0e: add al, ch; mov esp, 0xe9fff78b; ret far; 
0x0000000007a6fb: add al, ch; sysenter; 
0x00000000149d06: add al, ch; xchg esp, eax; ret far; 
0x00000000091097: add cl, [rip+0x48000000]; add esp, 0x110; pop rbp; ret; 
0x00000000182e11: add cl, ch; sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000115724: add dh, [rcx]; ror byte ptr [rax-0x75], 0x5d; clc; leave; ret; 
0x00000000099dab: add eax, 0x31138948; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000001156a0: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x00000000105c9d: add eax, 0x48000000; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000149b61: add eax, 0x894c0000; loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b81: add eax, 0x894c0000; loopne 0x0000000000149bc9; pop rsp; ret; 
0x0000000014c373: add eax, [rax]; add [rbx+0x480c2444], cl; add esp, 0x30; pop rbx; ret; 
0x000000000fc7e4: add ecx, [rdi]; xchg esp, eax; ret; 
0x0000000005bbd6: add esp, 0x1000; pop rbp; ret; 
0x0000000005bbe1: add esp, 0x1000; xor eax, eax; pop rbp; ret; 
0x0000000005ba1e: add esp, 0x1008; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000128d92: add esp, 0x100; movzx eax, al; pop rbp; ret; 
0x00000000128ec6: add esp, 0x100; movzx eax, al; pop rbx; ret; 
0x00000000128e23: add esp, 0x100; pop rbp; ret; 
0x00000000141fcc: add esp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x00000000128eb6: add esp, 0x100; pop rbx; ret; 
0x000000000b42bd: add esp, 0x100; sub rax, rdx; ret; 
0x00000000128da1: add esp, 0x100; xor eax, eax; pop rbp; ret; 
0x000000000b435d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000128f25: add esp, 0x108; not eax; shr eax, 0x1f; ret; 
0x000000000417dd: add esp, 0x108; ret; 
0x00000000144a81: add esp, 0x10; mov eax, 0x1; pop rbp; ret; 
0x00000000131fbe: add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x000000000f9155: add esp, 0x10; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000014a053: add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000943b2: add esp, 0x10; mov eax, r8d; pop rbx; ret; 
0x00000000091de7: add esp, 0x10; movzx eax, al; pop rbx; lea eax, [rax+rax+0x2]; ret; 
0x000000000807d6: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000009a2f1: add esp, 0x10; pop r12; ret; 
0x00000000144a73: add esp, 0x10; pop rbp; jmp rax; 
0x00000000037394: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x000000000863b3: add esp, 0x10; pop rbp; ret; 
0x00000000083741: add esp, 0x10; pop rbx; jmp rax; 
0x0000000005b9a3: add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x00000000085894: add esp, 0x10; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000036d0c: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000040e41: add esp, 0x10; pop rbx; ret; 
0x000000000902e3: add esp, 0x10; ret; 
0x00000000087862: add esp, 0x10; xor eax, eax; pop rbp; ret; 
0x000000000c0d51: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000014cdfd: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000009107c: add esp, 0x110; pop rbp; ret; 
0x00000000091f0f: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000014b576: add esp, 0x11b0; pop rbx; pop rbp; pop r12; ret; 
0x000000000fad49: add esp, 0x120; pop rbp; ret; 
0x00000000041a0c: add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x00000000041375: add esp, 0x148; ret; 
0x0000000014a46d: add esp, 0x180; mov rax, r8; pop rbp; ret; 
0x00000000128ba9: add esp, 0x188; ret; 
0x00000000123959: add esp, 0x18; mov eax, 0xfffffff6; pop rbx; pop rbp; ret; 
0x0000000007d324: add esp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000004ff67: add esp, 0x18; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000139626: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000012382b: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000005c106: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000145c5c: add esp, 0x18; movzx eax, al; ret; 
0x00000000040fa7: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000003ae66: add esp, 0x18; ret; 
0x000000000d6992: add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000f935d: add esp, 0x190; mov eax, r8d; pop rbx; ret; 
0x000000000ffbf9: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000f9592: add esp, 0x190; pop rbx; ret; 
0x0000000005b779: add esp, 0x1c0; pop rbp; pop r12; pop r13; ret; 
0x000000000fa2df: add esp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000004105d: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000109149: add esp, 0x20; pop r12; ret; 
0x000000000410f6: add esp, 0x20; pop rbp; ret; 
0x00000000083cfd: add esp, 0x20; pop rbx; jmp rax; 
0x0000000008311e: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000fa286: add esp, 0x20; pop rbx; ret; 
0x0000000005576c: add esp, 0x20; ret; 
0x00000000055757: add esp, 0x20; sub rsi, rax; lea rax, [r10+rsi]; ret; 
0x000000000fa2c7: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000083f1f: add esp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000421b9: add esp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x00000000085ec0: add esp, 0x28; jmp rax; 
0x00000000086721: add esp, 0x28; mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000011f78b: add esp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000005bae7: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000085c37: add esp, 0x28; movzx eax, al; neg eax; ret; 
0x000000000d22f6: add esp, 0x28; neg eax; ret; 
0x000000000866bd: add esp, 0x28; pop rbp; pop r12; ret; 
0x00000000085f79: add esp, 0x28; pop rbx; pop r12; jmp rax; 
0x0000000004d3c3: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000043ee2: add esp, 0x28; ret; 
0x0000000007a82e: add esp, 0x2b0; pop rbp; pop r12; pop r13; ret; 
0x0000000013c211: add esp, 0x30; mov eax, 0x3; pop rbx; ret; 
0x00000000192414: add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000fe048: add esp, 0x30; pop r12; ret; 
0x000000000fdad4: add esp, 0x30; pop r13; ret; 
0x00000000138e5a: add esp, 0x30; pop rbp; ret; 
0x0000000012119f: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000013c204: add esp, 0x30; pop rbx; ret; 
0x0000000014b7be: add esp, 0x328; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000085db1: add esp, 0x38; jmp rax; 
0x0000000008601d: add esp, 0x38; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000086041: add esp, 0x38; pop rbx; pop r12; jmp rax; 
0x00000000192007: add esp, 0x38; pop rbx; pop r14; ret; 
0x0000000002d6d8: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000806c7: add esp, 0x38; ret; 
0x0000000005b7dd: add esp, 0x400; pop rbp; pop r12; pop r13; ret; 
0x00000000104a88: add esp, 0x408; ret; 
0x000000000fae97: add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000c69fc: add esp, 0x40; pop rbp; ret; 
0x00000000139840: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000041a75: add esp, 0x40; pop rbx; ret; 
0x0000000010c708: add esp, 0x40; ret; 
0x0000000004df60: add esp, 0x418; ret; 
0x00000000055634: add esp, 0x440; mov rax, rbp; pop rbp; ret; 
0x0000000005561c: add esp, 0x440; pop rbp; ret; 
0x000000000fb242: add esp, 0x48; movzx eax, al; ret; 
0x00000000127575: add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000100583: add esp, 0x48; ret; 
0x000000000999d4: add esp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000ffe91: add esp, 0x50; pop r12; ret; 
0x00000000092e7a: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000149b5e: add esp, 0x510; mov rax, r12; pop r12; ret; 
0x000000000c7380: add esp, 0x58; ret; 
0x000000000fee43: add esp, 0x60; mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000fedf0: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000f9a44: add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000eebd5: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000fa175: add esp, 0x68; ret; 
0x00000000105115: add esp, 0x78; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000f9b9f: add esp, 0x78; ret; 
0x00000000041879: add esp, 0x88; pop rbp; pop r12; ret; 
0x000000000418db: add esp, 0x88; ret; 
0x000000000e07a5: add esp, 0x8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000001231cd: add esp, 0x8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret; 
0x00000000138fb1: add esp, 0x8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000008e540: add esp, 0x8; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x000000001448b1: add esp, 0x8; mov eax, 0x1; pop rbp; pop r12; ret; 
0x00000000077963: add esp, 0x8; mov eax, 0x1; pop rbx; pop rbp; ret; 
0x00000000106664: add esp, 0x8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000fe967: add esp, 0x8; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000077981: add esp, 0x8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000007d624: add esp, 0x8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000055801: add esp, 0x8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000876cd: add esp, 0x8; mov eax, r13d; pop r12; pop r13; ret; 
0x00000000087b73: add esp, 0x8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000101857: add esp, 0x8; mov eax, r8d; ret; 
0x000000000f0165: add esp, 0x8; mov eax, r9d; ret; 
0x000000000b4e9f: add esp, 0x8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000009c35d: add esp, 0x8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000d2575: add esp, 0x8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000007b310: add esp, 0x8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000009196f: add esp, 0x8; movzx eax, al; lea eax, [rax+rax+0x2]; ret; 
0x0000000002d8d5: add esp, 0x8; movzx eax, al; neg eax; ret; 
0x0000000013aecc: add esp, 0x8; movzx eax, al; pop rbp; pop r12; ret; 
0x0000000010103a: add esp, 0x8; movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000004d866: add esp, 0x8; movzx eax, al; ret; 
0x0000000012c6aa: add esp, 0x8; movzx eax, ax; ret; 
0x00000000145d62: add esp, 0x8; not eax; shr eax, 0x1f; ret; 
0x0000000007e96f: add esp, 0x8; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000001448a6: add esp, 0x8; pop rbp; pop r12; jmp rax; 
0x00000000079436: add esp, 0x8; pop rbp; pop r12; ret; 
0x0000000014d0dc: add esp, 0x8; pop rbx; pop rbp; jmp rax; 
0x0000000013ada3: add esp, 0x8; pop rbx; pop rbp; jmp rcx; 
0x0000000002dea1: add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000403f7: add esp, 0x8; ret; 
0x0000000014ec01: add esp, 0x8; sar eax, 0x1f; ret; 
0x00000000091011: add esp, 0x8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000084b6f: add esp, 0x8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000fe260: add esp, 0x90; mov eax, 0x1; pop rbx; ret; 
0x0000000002d472: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000fe23c: add esp, 0x90; pop rbx; ret; 
0x0000000005bc1b: add esp, 0x98; neg eax; ret; 
0x000000000d2c11: add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000081233: add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000005bc35: add esp, 0x98; ret; 
0x000000000d2c36: add esp, 0x98; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000041b59: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000088032: add esp, 0xa0; xor eax, eax; pop rbp; ret; 
0x00000000036be8: add esp, 0xa8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000d868d: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000420de: add esp, 0xa8; ret; 
0x000000000f98ac: add esp, 0xb8; mov eax, r12d; pop r12; pop r13; ret; 
0x000000000c7626: add esp, 0xd0; mov eax, r8d; pop rbx; ret; 
0x0000000009478c: add esp, 0xd0; pop rbp; ret; 
0x000000000c765a: add esp, 0xd0; pop rbx; ret; 
0x000000000415d3: add esp, 0xd0; ret; 
0x0000000004e197: add esp, 0xd8; ret; 
0x00000000076724: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000104e0f: add esp, 0xe8; ret; 
0x00000000104e87: add esp, 0xffffff80; mov rdx, rsp; syscall; 
0x00000000188fa3: add esp, [rdx-0x4d]; push rbp; and [rdi], bh; ret; 
0x0000000018bec3: add esp, [rdx-0x4d]; push rbp; and [rdi], bl; ret; 
0x00000000042561: add esp, edi; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000014ae2e: and [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000004178e: and al, 0x31; ror byte ptr [rax-0x7d], 0xec; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000009d6c4: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000e0f12: and al, 0x41; pop rsp; ret; 
0x00000000083768: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x00000000040fa5: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000f8f68: and al, 0x48; add esp, 0x18; ret; 
0x0000000010a65d: and al, 0x48; add esp, 0x20; pop r12; ret; 
0x000000000d22f4: and al, 0x48; add esp, 0x28; neg eax; ret; 
0x0000000007650b: and al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000f7fee: and al, 0x48; add esp, 0x28; ret; 
0x0000000010a723: and al, 0x48; add esp, 0x30; pop r12; ret; 
0x00000000192062: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x0000000010c6a5: and al, 0x48; add esp, 0x38; ret; 
0x0000000010c706: and al, 0x48; add esp, 0x40; ret; 
0x000000000999d2: and al, 0x48; add esp, 0x50; mov rax, r12; pop r12; ret; 
0x000000000ffefc: and al, 0x48; add esp, 0x50; pop r12; ret; 
0x000000000fa1ec: and al, 0x48; add esp, 0x68; ret; 
0x0000000012f16b: and al, 0x48; add esp, 0x8; ret; 
0x0000000011e071: and al, 0xe8; mov ecx, 0x48ffffeb; add esp, 0x18; ret; 
0x000000000940c1: and bh, bh; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x00000000109c24: and esp, 0xfffffff0; mov rdi, r8; call rdx; 
0x000000000fc7e3: clc; add ecx, [rdi]; xchg esp, eax; ret; 
0x000000000d68f2: clc; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x00000000115712: clc; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000fda51: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x00000000102b50: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fdb28: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x000000000fa39d: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000f9c15: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x78; ret; 
0x000000000fe4aa: clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000d75cc: clc; leave; ret; 
0x00000000095c94: clc; push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x000000000d69f1: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d68f3: cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000d6839: cli; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x00000000188a4f: cmc; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a0f: cmc; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbdf: cmc; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbaf: cmc; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x00000000187176: cmc; leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed18: cmc; leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000fee26: cmove esp, eax; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000183aba: cmovp ecx, [rcx-0x1607f8ac]; sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000086043: cmp [rbx+0x41], bl; pop rsp; jmp rax; 
0x00000000121550: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000110860: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000013f03c: cmp al, 0x48; add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x0000000016f3d5: cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000004f9bc: cmp cl, [rdi]; xchg esp, eax; ret; 
0x00000000115714: cmp dword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d6a3f: cmp eax, 0x85ffffb8; shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x00000000149d03: cmp eax, 0xe8000b2c; xchg esp, eax; ret far; 
0x00000000115713: cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d91e6: cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x00000000109c88: cvtdq2ps xmm3, [rbp+0x41]; pop rsp; pop r13; pop r14; ret; 
0x000000000d2c13: cwde; add [rax], al; add [rbp+0x41], bl; pop rsp; ret; 
0x0000000004dd71: dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x000000000d75e8: dec dword ptr [rax-0x75]; pop rbp; clc; leave; ret; 
0x00000000056fec: dec dword ptr [rbp+0x45c70142]; xchg esp, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x00000000109143: dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop r12; ret; 
0x0000000010ae23: dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x000000001095ce: dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret; 
0x000000000fda52: dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x000000000fdb29: dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x0000000011f377: dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x000000000d69f2: dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d68f4: dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000f9ab7: dec dword ptr [rbx+0x480c2444]; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c16: dec dword ptr [rbx+0x480c2444]; add esp, 0x78; ret; 
0x000000000940c3: dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x000000000fe4ab: dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x0000000018b90f: dec dword ptr [rcx+0xff3c3f0]; mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x00000000036ce1: dec dword ptr [rcx-0x3b7cb7fd]; adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000009bf24: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x000000000f9b97: dec dword ptr [rdi]; xchg [rdx+0x48000000], eax; add esp, 0x78; ret; 
0x00000000124236: dec dword ptr [rdi]; xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f58b], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000d91e2: div byte ptr [rcx+rbx-0x17]; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x0000000012089a: emms; mov esp, 0xfffec8e9; jmp qword ptr [rsi+0xf]; 
0x0000000013b8e8: enter 0x389, 0x48; add esp, 0x10; mov eax, 0x1; pop rbx; ret; 
0x00000000173fd6: enter 0x48f3, 0xf; mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x0000000006b198: enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000014a089: enter 0xfff3, 0x48; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000011569d: ficomp st, word ptr [rbx-0x48]; add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x0000000004f9b8: fild st, dword ptr [rax+0xf3a007d]; xchg esp, eax; ret; 
0x000000000aa955: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000c63d5: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x0000000004dd74: fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x000000000d75c8: fmul st, qword ptr [rax-0x75]; pop rbp; clc; leave; ret; 
0x000000000e248d: hlt; push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000d69f0: idiv edx; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x000000000d6a3d: imul al; cmp eax, 0x85ffffb8; shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x00000000117cad: imul al; sub eax, 0x48fff146; add esp, 0x8; ret; 
0x00000000110980: imul ebx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000102d13: imul ebx, [rsi-0x7cb7fff1], 0x415d10c4; pop rsp; pop r13; ret; 
0x000000001108e0: imul ecx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000110930: imul edx, [rax], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000018b694: imul esi, ebx, 0xf; mov esp, 0xc031c3c0; ret; 
0x00000000102aa3: imul esp, [rbx-0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x0000000015e804: imul esp, [rbx], 0x894d0000; ret far; 
0x00000000102ba3: imul esp, [rdx-0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x0000000014ce31: in al, 0x48; add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000041793: in al, dx; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000ed618: inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000f0160: inc dword ptr [rbp+0x31]; leave; add rsp, 0x8; mov eax, r9d; ret; 
0x000000000f015f: inc dword ptr [rbp+0x31]; leave; add rsp, 0x8; mov eax, r9d; ret; 
0x000000000d6a42: inc dword ptr [rbp+0x480975c0]; add esp, 0x8; ret; 
0x00000000149f21: inc dword ptr [rbp+0x480a78c0]; add esp, 0x8; pop rbp; pop r12; ret; 
0x00000000192412: ja short 0x000000000019245c; add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000001702b2: jb short 0x00000000001702ab; rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000feb76: jbe short 0x00000000000feb70; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x00000000085a6b: je short 0x0000000000085a91; sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x000000000412b4: jg short 0x00000000000412de; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000041314: jg short 0x000000000004133e; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000117c34: jg short 0x0000000000117c5e; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000004f9ba: jge short 0x000000000004f9bc; cmp cl, [rdi]; xchg esp, eax; ret; 
0x000000000fe4a9: jl short 0x00000000000fe4a3; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000fe558: jl short 0x00000000000fe552; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x00000000115723: jne short 0x0000000000115727; xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000011f375: jne short 0x000000000011f36d; dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x0000000005c0c0: jnp 0x000000004811e50a; add esp, 0x18; ret; 
0x000000000475c1: jo short 0x00000000000475ac; leave; idiv bh; jmp qword ptr [rsi+0xf]; 
0x00000000187224: jp short 0x000000000018721d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000018dae4: jp short 0x000000000018dadd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000004dd6f: jrcxz 0x000000000004dd6e; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x000000000f3d4c: jrcxz 0x00000000000f3d96; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000806c1: js short 0x00000000000806f3; add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x000000000ffe8f: js short 0x00000000000ffed9; add esp, 0x50; pop r12; ret; 
0x00000000188a0e: js short 0x0000000000188a05; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x00000000188a4e: js short 0x0000000000188a45; leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018bbae: js short 0x000000000018bba5; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bbde: js short 0x000000000018bbd5; leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x000000000d56ce: lea esp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000013ae32: lea esp, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0x0; mov rdi, r12; call qword ptr [rax+0x28]; 
0x000000000423e4: lea esp, [rcx+rax]; mov rdi, r12; call rbx; 
0x000000000436c4: lea esp, [rip+0x1ac006]; cmp rbx, r12; jae short 0x00000000000436db; nop; call qword ptr [rbx]; 
0x000000000d56cd: lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret; 
0x00000000151687: leave; add al, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000011f8ed: leave; add al, [rax]; mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58]; 
0x0000000016b357: leave; add eax, [rax]; add [rbp-0x77], cl; ret far; 
0x0000000016f35c: leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000f0163: leave; add rsp, 0x8; mov eax, r9d; ret; 
0x00000000040731: leave; addsd xmm0, xmm0; mov [rdi], ecx; ret; 
0x00000000188a4b: leave; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a0b: leave; bzhi ecx, ecx, eax; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbdb: leave; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbab: leave; bzhi ecx, ecx, eax; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x000000000b4366: leave; cmove rax, rdx; ret; 
0x000000000df217: leave; cmp [r8+rax*4], edi; je short 0x00000000000df230; mov eax, r9d; ret; 
0x00000000109043: leave; cmp eax, 0xd8f7000e; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000018d0e5: leave; cmp edx, eax; lea rax, [rdi+rax*4]; cmovle rax, rcx; ret; 
0x00000000185d25: leave; cmp edx, eax; lea rax, [rdi+rax]; cmovle rax, rcx; ret; 
0x00000000128620: leave; cmp rcx, 0xff; jg short 0x00000000001285e8; mov eax, 0x1; ret; 
0x000000001285d9: leave; cmp rcx, 0xff; jg short 0x00000000001285e8; ret; 
0x000000000c90a4: leave; idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x000000000475c3: leave; idiv bh; jmp qword ptr [rsi+0xf]; 
0x0000000018f442: leave; jmp rcx; 
0x0000000018623c: leave; jne 0x0000000000186120; ret; 
0x00000000186095: leave; jne 0x0000000000186123; ret; 
0x0000000018d61c: leave; jne 0x000000000018d500; ret; 
0x0000000018d46f: leave; jne 0x000000000018d503; ret; 
0x000000000a110d: leave; jne short 0x00000000000a1100; mov [rdi], rdx; ret; 
0x000000000b3e80: leave; jne short 0x00000000000b3e70; ret; 
0x000000000b3f30: leave; jne short 0x00000000000b3f20; ret; 
0x000000000b41f0: leave; jne short 0x00000000000b41e0; sub rax, 0x1; ret; 
0x000000000b52c0: leave; jne short 0x00000000000b5298; mov rax, r8; ret; 
0x0000000010ce85: leave; jne short 0x000000000010ce90; ret; 
0x0000000010d69c: leave; jne short 0x000000000010d6a0; ret; 
0x0000000010d6e9: leave; jne short 0x000000000010d6f0; ret; 
0x000000001171e6: leave; jne short 0x0000000000117198; mov rax, r8; ret; 
0x00000000128d1d: leave; jne short 0x0000000000128cd2; mov eax, 0x1; ret; 
0x00000000188a50: leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x40]; ret; 
0x00000000188a10: leave; jne short 0x00000000001889f1; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018bbe0: leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bbb0: leave; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000007e7c1: leave; jrcxz 0x000000000007e7be; jmp qword ptr [rsi+0x2e]; 
0x00000000187177: leave; kmovd k1, ecx; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed19: leave; kmovq k1, rcx; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000a79b9: leave; lea r10, [rip+0x10259f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a5759: leave; lea r10, [rip+0x10477f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a3199: leave; lea r10, [rip+0x106cbf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000000a1a89: leave; lea r10, [rip+0x10834f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015e769: leave; lea r10, [rip+0x4b82f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000015c5f9: leave; lea r10, [rip+0x4d91f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x000000001502a9: leave; lea r10, [rip+0x59bef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x0000000014f029: leave; lea r10, [rip+0x5adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10; 
0x00000000139983: leave; lea rdx, [rip+0xaf85]; lea r9, [rsp+0x18]; call qword ptr [rax]; 
0x00000000090446: leave; lock cmpxchg [rdi], ecx; mov eax, 0x10; cmove eax, ecx; ret; 
0x000000000af061: leave; mov [rax], cl; mov rax, rdi; ret; 
0x0000000014448f: leave; mov byte ptr [rsi+r9], 0x0; ret; 
0x000000000df1d2: leave; mov eax, r9d; ret; 
0x00000000142637: leave; mov fs:[rbx], rax; pop rbx; ret; 
0x0000000014c812: leave; mov rdi, rbp; call qword ptr [rax+0x338]; 
0x00000000186237: leave; mov rdi, rdx; test ecx, ecx; jne 0x0000000000186120; ret; 
0x0000000018d617: leave; mov rdi, rdx; test ecx, ecx; jne 0x000000000018d500; ret; 
0x0000000003682b: leave; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; lea r8, [rsp+0x98]; call r15; 
0x0000000014448c: leave; movsxd r9, r9d; mov byte ptr [rsi+r9], 0x0; ret; 
0x000000000a2ffc: leave; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret; 
0x00000000186153: leave; movzx eax, byte ptr [rdi+rcx+0x60]; movzx ecx, byte ptr [rsi+rcx+0x60]; sub eax, ecx; ret; 
0x0000000002d3f3: leave; or al, 0x0; nop [rax+rax]; lea rax, [rip+0x181bef]; ret; 
0x0000000004acd9: leave; pop r13; pop r14; pop r15; ret; 
0x00000000051e37: leave; ret; 
0x0000000004042e: leave; sbb al, [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 0x8; ret; 
0x00000000115719: leave; sbb eax, 0x0; ret; 
0x00000000186093: leave; test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d46d: leave; test ecx, ecx; jne 0x000000000018d503; ret; 
0x0000000018717b: leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1e: leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000002dd5c: leave; xor edx, edx; push rax; call rbx; 
0x0000000010a811: leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5f1: leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000009a916: loop 0x000000000009a959; pop rsp; pop r13; ret; 
0x0000000009a92f: loop 0x000000000009a972; pop rsp; pop r13; ret; 
0x000000000fa39b: loope 0x00000000000fa35a; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x0000000017ed1b: loope 0x000000000017ed18; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x0000000003afda: loopne 0x000000000003b01d; pop rsp; ret; 
0x000000000440e7: loopne 0x000000000004412a; pop rsp; ret; 
0x00000000079a02: loopne 0x0000000000079a45; pop rsp; pop r13; pop r14; ret; 
0x0000000007b62f: loopne 0x000000000007b672; pop rsp; pop r13; pop r14; ret; 
0x0000000007e975: loopne 0x000000000007e9b8; pop rsp; ret; 
0x0000000007ea92: loopne 0x000000000007ead5; pop rsp; ret; 
0x00000000080948: loopne 0x000000000008098b; pop rsp; ret; 
0x00000000080957: loopne 0x000000000008099a; pop rsp; ret; 
0x0000000008aac7: loopne 0x000000000008ab0a; pop rsp; ret; 
0x0000000008aaee: loopne 0x000000000008ab31; pop rsp; ret; 
0x0000000008af66: loopne 0x000000000008afa9; pop rsp; pop r13; ret; 
0x0000000008ffc9: loopne 0x000000000009000c; pop rsp; pop r13; ret; 
0x000000000916ab: loopne 0x00000000000916ee; pop rsp; ret; 
0x00000000094e07: loopne 0x0000000000094e4a; pop rsp; ret; 
0x000000000999d9: loopne 0x0000000000099a1c; pop rsp; ret; 
0x0000000009ba8a: loopne 0x000000000009bacd; pop rsp; pop r13; ret; 
0x0000000009d567: loopne 0x000000000009d5aa; pop rsp; ret; 
0x000000000a1246: loopne 0x00000000000a1289; pop rsp; ret; 
0x000000000c7a4f: loopne 0x00000000000c7a92; pop rsp; pop r13; pop r14; ret; 
0x000000000d27b7: loopne 0x00000000000d27fa; pop rsp; ret; 
0x000000000d28c7: loopne 0x00000000000d290a; pop rsp; pop r13; pop r14; ret; 
0x000000000edb92: loopne 0x00000000000edbd5; pop rsp; pop r13; pop r14; ret; 
0x000000000f98b4: loopne 0x00000000000f98f7; pop rsp; pop r13; ret; 
0x000000000f98db: loopne 0x00000000000f991e; pop rsp; pop r13; ret; 
0x000000000fedf5: loopne 0x00000000000fee38; pop rsp; ret; 
0x000000000fee27: loopne 0x00000000000fee72; add esp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000fee2f: loopne 0x00000000000fee72; pop rsp; ret; 
0x000000000fee4b: loopne 0x00000000000fee8e; pop rsp; ret; 
0x000000000fee9c: loopne 0x00000000000feedf; pop rsp; ret; 
0x000000000ff213: loopne 0x00000000000ff256; pop rsp; ret; 
0x0000000010048e: loopne 0x00000000001004d1; pop rsp; ret; 
0x00000000102de6: loopne 0x0000000000102e29; pop rsp; ret; 
0x00000000108b5f: loopne 0x0000000000108ba2; pop rsp; ret; 
0x00000000116f57: loopne 0x0000000000116f9a; pop rsp; ret; 
0x00000000116f7f: loopne 0x0000000000116fc2; pop rsp; ret; 
0x0000000012271f: loopne 0x0000000000122762; pop rsp; ret; 
0x00000000131cae: loopne 0x0000000000131cf1; pop rsp; ret; 
0x0000000013af55: loopne 0x000000000013af98; pop rsp; ret; 
0x0000000014916f: loopne 0x00000000001491b2; pop rsp; pop r13; pop r14; ret; 
0x00000000149b66: loopne 0x0000000000149ba9; pop rsp; ret; 
0x00000000149b86: loopne 0x0000000000149bc9; pop rsp; ret; 
0x0000000014a058: loopne 0x000000000014a09b; pop rsp; ret; 
0x0000000014a092: loopne 0x000000000014a0d5; pop rsp; ret; 
0x0000000014a0d0: loopne 0x000000000014a113; pop rsp; ret; 
0x0000000014a0fe: loopne 0x000000000014a141; pop rsp; ret; 
0x0000000014a2f8: loopne 0x000000000014a33b; pop rsp; ret; 
0x0000000014a332: loopne 0x000000000014a375; pop rsp; ret; 
0x0000000014b320: loopne 0x000000000014b363; pop rsp; pop r13; pop r14; ret; 
0x0000000014ce05: loopne 0x000000000014ce48; pop rsp; ret; 
0x0000000014ce3b: loopne 0x000000000014ce7e; pop rsp; ret; 
0x00000000192419: loopne 0x000000000019245c; pop rsp; ret; 
0x00000000192498: loopne 0x00000000001924db; pop rsp; ret; 
0x00000000102d54: ltr [rbp+0x41]; pop rsp; pop r13; ret; 
0x000000000916a2: mov [0x89445d5b00000638], eax; loopne 0x00000000000916ee; pop rsp; ret; 
0x0000000010dc0c: mov [rsi], cl; add al, ch; mov esp, 0xe9fff78b; ret far; 
0x0000000010ad69: mov ah, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x000000000d2a5b: mov al, [0x4820538948000000]; add esp, 0xd0; pop rbx; ret; 
0x0000000010ae21: mov bl, 0xf7; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x0000000018d050: mov bl, 0xf; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x0000000010b029: mov cl, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x0000000010aec7: mov dl, 0xf7; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000000d75de: mov dword ptr [rax], 0x7; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x000000000d75dd: mov dword ptr fs:[rax], 0x7; mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x000000000d75e4: mov eax, 0xffffffff; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000010a4db: mov eax, [0x480824448bfff7bc]; add esp, 0x18; ret; 
0x000000000412b6: mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000018d00e: mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x0000000008aae9: mov ebp, 0x8944ffff; loopne 0x000000000008ab31; pop rsp; ret; 
0x000000000fa281: mov ebx, 0x48fffffe; add esp, 0x20; pop rbx; ret; 
0x00000000115710: mov ebx, [rbp-0x8]; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d75ca: mov ebx, [rbp-0x8]; leave; ret; 
0x0000000011e073: mov ecx, 0x48ffffeb; add esp, 0x18; ret; 
0x000000000d8eb3: mov ecx, 0x48fffff5; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000fa1e7: mov edi, 0x48bfff8; and al, 0x48; add esp, 0x68; ret; 
0x000000000412b3: mov edi, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000d68f1: mov edi, eax; cli; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret; 
0x000000001178f2: mov edx, 0x48fff9e4; add esp, 0x28; ret; 
0x00000000117a5e: mov esi, 0x48fff675; add esp, 0xd8; ret; 
0x00000000133905: mov esp, 0x0; pop rbx; pop rbp; pop r12; ret; 
0x00000000085a6f: mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x0000000018b6c2: mov esp, 0x1448dc0; lahf; ret; 
0x0000000018cbf2: mov esp, 0x1448dc0; out dx, eax; ret; 
0x000000000739d2: mov esp, 0x1; jmp rax; 
0x000000000afe45: mov esp, 0x1d8d4cd2; adc ah, [rdx+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0d88: mov esp, 0x1d8d4cd2; and edx, [rdi+rcx+0xc634900]; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7ca: mov esp, 0x1d8d4cd2; or eax, 0x49000fa8; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b150e: mov esp, 0x1d8d4cd2; sub [rbp+0x6349000f], ecx; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000b0e02: mov esp, 0x1d8d4cd2; test eax, 0x49000f93; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx; 
0x000000000af7a5: mov esp, 0x1d8d4cd2; xor ch, [rax+0x6349000f]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x00000000098c49: mov esp, 0x1f0fffff; add [rax-0x7d], cl; ret; 
0x00000000174422: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x00000000183e15: mov esp, 0x26de9c0; add [rax], al; xor eax, eax; ret; 
0x0000000013a345: mov esp, 0x2a0024; add [rsi-0x3f], ah; ror byte ptr [rax], 0x66; mov [rsp+0xa2], eax; call qword ptr [rsp+0x2a08]; 
0x00000000178eeb: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x00000000184b3c: mov esp, 0x2e8c1c0; xtest; je short 0x0000000000184b4a; vzeroall; ret; 
0x00000000188c03: mov esp, 0x343a40c0; add dh, [rbp-0x72]; add rax, rdx; ret; 
0x00000000174412: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x00000000102b8a: mov esp, 0x441f0f; add [rax+0x1c], bh; syscall; 
0x0000000010a44a: mov esp, 0x441f0f; add [rax+0x31], bh; syscall; 
0x0000000010a4dc: mov esp, 0x448bfff7; and al, 0x8; add rsp, 0x18; ret; 
0x000000000a4c21: mov esp, 0x448d48c0; cmp [rax], ah; ret; 
0x000000000a4c11: mov esp, 0x448d48c0; cmp [rax], dl; ret; 
0x000000000a4bf1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000018d132: mov esp, 0x448d48c0; xchg [rax], esp; ret; 
0x0000000018913d: mov esp, 0x44b60ff9; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; ret; 
0x000000000b4f70: mov esp, 0x480000fb; cmove eax, edx; ret; 
0x0000000009bb00: mov esp, 0x48000d44; lea eax, [rip+0x8e45]; cmove rax, rdx; ret; 
0x0000000008c810: mov esp, 0x480011ce; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax; 
0x000000000fa523: mov esp, 0x48bfff8; and al, 0x48; add esp, 0x18; ret; 
0x0000000018bb65: mov esp, 0x48d48c0; xchg [rbx], edi; xor [rbp+0x21], dh; ret; 
0x0000000018d0d4: mov esp, 0x48d48c0; xchg ebx, eax; xor eax, eax; ret; 
0x000000000d3220: mov esp, 0x48fffff8; add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000154580: mov esp, 0x4900065a; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx; 
0x00000000177e83: mov esp, 0x5874c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000174402: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000008de98: mov esp, 0x63480011; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000c9b50: mov esp, 0x66fff709; nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall; 
0x0000000018b80c: mov esp, 0x72c639c0; or [rax+0x29], ecx; xlat [rbx]; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018cd3a: mov esp, 0x72c639c0; or eax, 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cdca: mov esp, 0x72c639c0; push 0x48d72948; sar edi, 0x2; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b88a: mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018b83e: mov esp, 0x72c639c0; xlat [rbx]; sub rdi, rdx; lea rax, [rdi+rax+0x20]; ret; 
0x00000000178a80: mov esp, 0x7343bc0; jne short 0x0000000000178ab4; add rax, rdi; vzeroupper; ret; 
0x0000000018d96f: mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x00000000174247: mov esp, 0x77f8c5c0; ret; 
0x00000000185ea2: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x0000000000185eb1; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018d982: mov esp, 0x80ea83c0; cmp edx, eax; jbe short 0x000000000018d991; lea rax, [rdi+rax+0x20]; ret; 
0x000000001743f2: mov esp, 0x81e981c0; add [rax], al; add [rcx], al; enter 0xf8c5, 0x77; ret; 
0x0000000018bd8b: mov esp, 0x82343bc0; jne short 0x000000000018bd25; lea rax, [rdx+rax*4]; ret; 
0x00000000178f42: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174272: mov esp, 0x83d729c0; mov dword ptr [rcx+0x1], 0x77f8c5f8; ret; 
0x0000000018d344: mov esp, 0x848d48c0; xchg [rax-0x3d000000], eax; tzcnt eax, eax; lea rax, [rdi+rax*4+0x40]; ret; 
0x0000000018bd32: mov esp, 0x87343bc0; jne short 0x000000000018bd25; lea rax, [rdi+rax*4]; ret; 
0x0000000018bd42: mov esp, 0x87743bc0; and [rbp-0x25], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbc2: mov esp, 0x87743bc0; and [rbp-0x3a], dh; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd17: mov esp, 0x87743bc0; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x40]; ret; 
0x00000000179152: mov esp, 0x88448dc0; lahf; shr eax, 0x2; vzeroupper; ret; 
0x000000000940c0: mov esp, 0x8bffff20; and al, 0x10; add rsp, 0x28; ret; 
0x0000000008e53e: mov esp, 0x8c48348; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x00000000084342: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000115d6d: mov esp, 0x8d480003; adc eax, 0x41189; cmovne rax, rdx; ret; 
0x0000000017c460: mov esp, 0xa8000000; jne 0x000000000017c530; lea rax, [rdi+0x7]; ret; 
0x0000000018b697: mov esp, 0xc031c3c0; ret; 
0x0000000018c382: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x10]; ret; 
0x0000000018c392: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x18]; ret; 
0x0000000018c3a2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x20]; ret; 
0x0000000018c372: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi+rax+0x8]; ret; 
0x000000000a49ca: mov esp, 0xc22948c0; jbe 0x00000000000a4c70; add rax, rdi; add rax, rcx; ret; 
0x000000000a4c31: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; add rax, rdi; ret; 
0x000000000a4c41: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x10]; ret; 
0x000000000a4c51: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x20]; ret; 
0x000000000a4c61: mov esp, 0xc22948c0; jbe short 0x00000000000a4c70; lea rax, [rdi+rax+0x30]; ret; 
0x0000000009bf26: mov esp, 0xc2440fc7; add eax, 0x1; ret; 
0x0000000018b915: mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x00000000174662: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000911ec: mov esp, 0xc7640015; add [rbx], cl; add [rax], al; add [rax-0x1], bh; ret; 
0x00000000170072: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x00000000170062: mov esp, 0xc78348c0; and [rax+0x1], ecx; clc; vzeroupper; ret; 
0x00000000173ff2: mov esp, 0xc78348c0; or byte ptr [rax+0x1], 0xf8; vzeroupper; ret; 
0x00000000170052: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x0000000018722d: mov esp, 0xc80148c0; ret; 
0x000000001702bb: mov esp, 0xc80148c0; vzeroupper; ret; 
0x0000000018017b: mov esp, 0xc80148c0; xtest; je short 0x0000000000180189; vzeroall; ret; 
0x000000000c5a64: mov esp, 0xc83948ca; ja short 0x00000000000c5a80; sub rdi, 0x10; add rax, rdi; ret; 
0x000000001862c6: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi+rax+0x60]; movzx eax, byte ptr [rax+0x60]; sub eax, ecx; ret; 
0x00000000188e73: mov esp, 0xd00148c0; ret; 
0x0000000017403d: mov esp, 0xd00148c0; vzeroupper; ret; 
0x00000000180b7d: mov esp, 0xd00148c0; xtest; je short 0x0000000000180b8b; vzeroall; ret; 
0x000000000aa793: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000c61d3: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 0x2; ret; 
0x000000000c6fed: mov esp, 0xd024; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax; 
0x0000000003c56c: mov esp, 0xd024; add [rcx-0x7d], cl; jmp far fword ptr [rdi]; 
0x000000000c5998: mov esp, 0xd03948d2; ja 0x00000000000c5a80; add rax, rdi; add rax, rcx; ret; 
0x000000001824bc: mov esp, 0xd6010fc0; je short 0x00000000001824c7; vzeroall; ret; 
0x000000001745f2: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000001745e2: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000018b8a2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x20]; ret; 
0x0000000018b8b2: mov esp, 0xd72948c0; lea rax, [rdi+rax+0x40]; ret; 
0x0000000018ce02: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x10]; ret; 
0x0000000018cde2: mov esp, 0xd72948c0; sar rdi, 0x2; lea rax, [rdi+rax+0x8]; ret; 
0x0000000018d272: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x000000000018d281; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018de22: mov esp, 0xe0ea83c0; cmp edx, eax; jbe short 0x000000000018de31; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000099e0b: mov esp, 0xe1ebffff; mov eax, 0x16; ret; 
0x0000000010dc10: mov esp, 0xe9fff78b; ret far; 
0x00000000173fda: mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x000000001701e2: mov esp, 0xef8348c0; fisttp word ptr [rax+0x1], st; clc; vzeroupper; ret; 
0x000000001703b2: mov esp, 0xef8348c0; jg short 0x0000000000170401; add eax, edi; vzeroupper; ret; 
0x00000000174352: mov esp, 0xef8348c0; jg short 0x00000000001743a1; add eax, edi; vzeroupper; ret; 
0x00000000174552: mov esp, 0xef8348c0; jg short 0x00000000001745a1; add eax, edi; vzeroupper; ret; 
0x000000001703c2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000a4cdb: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000001889c5: mov esp, 0xf80148c0; cmp sil, [rax]; jne short 0x00000000001889f1; ret; 
0x000000000a4c01: mov esp, 0xf80148c0; ret; 
0x0000000016fff4: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017ee27: mov esp, 0xf80148c0; xtest; je short 0x000000000017ee35; vzeroall; ret; 
0x0000000018568a: mov esp, 0xf80148c0; xtest; je short 0x0000000000185698; vzeroall; ret; 
0x00000000178f02: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x00000000174252: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x00000000130201: mov esp, 0xfffe67e9; jmp qword ptr [rsi+0xf]; 
0x0000000012089c: mov esp, 0xfffec8e9; jmp qword ptr [rsi+0xf]; 
0x000000000fede9: mov esp, 0xffffffff; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000085ac9: mov esp, [rip+0x1673f9]; mov [rsp], rdi; mov [rsp+0x8], rsi; mov rdi, [rbp+0x10]; call qword ptr [r12+0x358]; 
0x00000000085979: mov esp, [rip+0x167549]; lea rdx, [rsp+0x1f]; lea rsi, [rsp+0x28]; lea rdi, [rsp+0x20]; call qword ptr [r12+0x350]; 
0x00000000139d50: mov esp, eax; mov rax, [rbp+0x8]; call qword ptr [rax+0x20]; 
0x00000000080944: mov esp, eax; mov rax, r12; pop r12; ret; 
0x000000000412b9: mov esp, eax; mov rbp, r9; jmp rdx; 
0x00000000139c09: mov esp, eax; xor eax, eax; call qword ptr [rbx+0x28]; 
0x000000000d75c7: mov esp, ebx; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000115627: mov esp, edi; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax; 
0x000000000f9f60: mov esp, edx; push rbp; push rbx; sub rsp, 0x98; syscall; 
0x0000000013b3d5: mov esp, esp; lea rsi, [rsp+0x8]; call qword ptr [rax]; 
0x000000000412b2: mov r15, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000011570f: mov rbx, [rbp-0x8]; cmp qword ptr [rdx+rcx*8-0x8], 0x1; leave; sbb eax, 0x0; ret; 
0x000000000d75c9: mov rbx, [rbp-0x8]; leave; ret; 
0x000000000412b8: mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000d75c6: mov rsp, rbx; mov rbx, [rbp-0x8]; leave; ret; 
0x00000000139079: movsxd esp, [rax-0x74b80000]; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0x1; call qword ptr [rax+0x28]; 
0x0000000006b19c: movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x0000000005d2c7: movzx esp, ah; mov r9, [rbp-0x600]; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000005d804: movzx esp, ah; movsxd rax, [rdi+r12*4]; add rax, rdi; jmp rax; 
0x0000000018f380: movzx esp, bh; add rax, rdx; jmp rax; 
0x000000000806be: or [rax-0x7d], cl; js short 0x00000000000806f3; add [rbx+rcx+0x48], dh; add esp, 0x38; ret; 
0x000000001448a8: or [rbp+0x41], bl; pop rsp; jmp rax; 
0x00000000079438: or [rbp+0x41], bl; pop rsp; ret; 
0x0000000005c25d: or [rbx+0x48010447], al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fead8: or [rbx+0x480c2444], ecx; add esp, 0x18; ret; 
0x000000000f8310: or [rcx+rcx*4+0x60], al; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x00000000043d06: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000004f85b: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000f8314: or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x000000000f9181: or al, 0x48; add esp, 0x10; pop rbp; ret; 
0x000000000441e7: or al, 0x48; add esp, 0x18; ret; 
0x000000000d68f8: or al, 0x48; add esp, 0x28; ret; 
0x0000000014c379: or al, 0x48; add esp, 0x30; pop rbx; ret; 
0x000000000f9abb: or al, 0x48; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000f9c1a: or al, 0x48; add esp, 0x78; ret; 
0x000000000fe2fb: or al, 0x48; add esp, 0x90; pop rbx; ret; 
0x000000001000a9: or al, 0xe8; shl dword ptr [rax-0x8], 0x1; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x0000000010a4d9: or al, ch; mov eax, [0x480824448bfff7bc]; add esp, 0x18; ret; 
0x0000000018d075: or cl, [rdi]; mov ebp, 0x448d48c0; xchg eax, esp; ret; 
0x000000000872ee: or cl, ch; pop rsp; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x000000000e075b: or dh, [rbp+rdi+0x48]; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000105ec0: or dword ptr [rax+0x1000000], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000091098: or eax, 0x48000000; add esp, 0x110; pop rbp; ret; 
0x000000000c0d3a: or eax, 0x48338948; add esp, 0x10; pop rbx; ret; 
0x000000000ca3ba: or eax, 0x48c0894c; add esp, 0x8; ret; 
0x000000000d8f0f: or eax, 0x48fffff4; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000008e464: or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x00000000095cf4: or esi, [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000007d299: or esp, [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000077254: or esp, [rax]; add rsp, 0x8; pop rbx; pop rbp; ret; 
0x00000000131e98: or esp, [rax]; mov dword ptr fs:[rax], 0x1d; mov eax, 0x1d; pop rbx; ret; 
0x000000000811a1: or esp, [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000fd884: or esp, [rsi-0x77]; push rsi; xor ax, ax; ret; 
0x0000000018f37e: out 0x44, eax; movzx esp, bh; add rax, rdx; jmp rax; 
0x00000000114019: out 0x48, al; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000008e45e: out dx, al; adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x0000000004f85a: outsd dx, [rsi]; or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x0000000017028a: pextrw edi, mm5, 0xd7; rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017423c: pextrw edi, mm5, 0xd7; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000d75cb: pop rbp; clc; leave; ret; 
0x0000000011085f: pop rbp; cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000fa522: pop rdx; mov esp, 0x48bfff8; and al, 0x48; add esp, 0x18; ret; 
0x00000000103e42: pop rsp; and al, 0x10; call rax; 
0x000000000c6a25: pop rsp; and al, 0xf0; movsd xmm0, [rsp-0x10]; ret; 
0x000000000872f0: pop rsp; idiv bh; jmp qword ptr [rsi+0x2e]; 
0x0000000007ae94: pop rsp; jmp rax; 
0x00000000138d6e: pop rsp; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax; 
0x0000000010ae20: pop rsp; mov bl, 0xf7; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret; 
0x000000000c9be4: pop rsp; pop qword ptr [rdx]; jbe short 0x00000000000c9bf0; ret; 
0x000000000d7047: pop rsp; pop r13; and eax, 0xc; pop r14; ret; 
0x0000000002d614: pop rsp; pop r13; jmp rax; 
0x000000000704a4: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000002d5c2: pop rsp; pop r13; pop r14; jmp rax; 
0x00000000030159: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x0000000002d79c: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000002ede5: pop rsp; pop r13; pop r14; ret; 
0x00000000042f78: pop rsp; pop r13; pop rbp; ret; 
0x0000000002ea54: pop rsp; pop r13; ret; 
0x0000000011568f: pop rsp; pop rbp; ret; 
0x00000000132848: pop rsp; pop rbx; or al, 0x0; call rbx; 
0x0000000002d47b: pop rsp; ret; 
0x000000000408dc: pop rsp; rol ebx, 0x90; and esi, 0x80000000; mov [rdi], esi; ret; 
0x000000000c6b8a: pop rsp; sub rax, rdx; ret; 
0x000000000f830f: push 0x60894408; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x00000000085a66: push 0xffffffff8b4cfffa; je short 0x0000000000085a91; sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x00000000187175: push 0xfffffffffbc5c9f5; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x00000000095c95: push qword ptr [rax+rcx+0x48]; add esp, 0x8; ret; 
0x000000000af05f: push qword ptr [rax]; leave; mov [rax], cl; mov rax, rdi; ret; 
0x00000000115722: push qword ptr [rbp+0x2]; xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000007785f: push qword ptr [rbx+rdx*2+0x48]; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000fd2e9: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000e248e: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000114079: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000085e0b: push qword ptr [rdx+rdx+0x48]; sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x0000000010b028: push rsp; mov cl, 0xf7; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret; 
0x00000000081e82: rcr byte ptr [rbp+0x41], 0x1; pop rsp; ret; 
0x00000000078c16: rcr byte ptr [rbp+0x41], cl; pop rsp; pop r13; jmp rax; 
0x0000000008061b: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000043d08: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000036ce9: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x00000000187221: rol ah, 0xc2; jp short 0x000000000018721d; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000018dae1: rol ah, 0xc2; jp short 0x000000000018dadd; rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000018d071: rol byte ptr [rbp+0xf0a74c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000018d04c: rol byte ptr [rbp+0xfb374c0], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000013c1fd: rol byte ptr [rbp-0x3f6bf025], 0x48; add esp, 0x30; pop rbx; ret; 
0x000000001871fe: rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001702b4: rol byte ptr [rbp-0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000187226: rol byte ptr [rbp-0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000e0758: rol byte ptr [rbx+0x3d740afb], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x00000000079431: rol byte ptr [rcx+rcx*4+0x22], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x0000000005b77b: rol byte ptr [rcx], 0x0; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000007dd18: rol byte ptr [rcx], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000017028e: rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000173e75: rol dword ptr [rbp-0xc998b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000174240: rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001860cd: rol esp, 0xe2; push 0xb75c0f5; ret; 
0x0000000018d133: ror byte ptr [rax-0x73], 0x44; xchg [rax], esp; ret; 
0x0000000018d00f: ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000115726: ror byte ptr [rax-0x75], 0x5d; clc; leave; ret; 
0x0000000011407b: ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret; 
0x00000000041790: ror byte ptr [rax-0x7d], 0xec; sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000b4364: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000f8316: ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret; 
0x000000000ca3d1: ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x000000000c90a1: ror byte ptr [rdi], 0x84; leave; idiv bh; dec dword ptr [rax-0x7d]; ret; 
0x00000000087e2e: ror byte ptr [rdi], cl; xchg esp, eax; shl bh, 0xd8; ret; 
0x0000000006b195: ror dword ptr [rax+0x39], 0x1; enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38]; 
0x00000000091f75: sar byte ptr [rax+0x10], 0x48; add esp, 0x110; pop rbp; ret; 
0x00000000149f23: sar byte ptr [rax+0xa], 0x48; add esp, 0x8; pop rbp; pop r12; ret; 
0x00000000091078: sar byte ptr [rax+0xd], 0x48; add esp, 0x110; pop rbp; ret; 
0x0000000018bbc3: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd43: sar byte ptr [rbx], 0x74; xchg [rax], esp; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x00000000183ac1: sar esp, 0xff; jmp qword ptr [rsi+0x66]; 
0x00000000182e13: sar esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000d91df: sbb [rax-0x7b], cl; div byte ptr [rcx+rbx-0x17]; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x0000000010a80e: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x0000000010a5ee: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000139590: sbb [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000007d8da: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000014b273: sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x00000000117a5c: sbb al, ch; mov esi, 0x48fff675; add esp, 0xd8; ret; 
0x000000000903e6: sbb byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000041794: sbb byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000441e2: sbb eax, 0x24446348; or al, 0x48; add esp, 0x18; ret; 
0x0000000014b26d: sbb ecx, [rdx]; add [rbx+rax*4+0x3a], ah; sbb [rdx+rcx+0x48], esi; add esp, 0x18; ret; 
0x000000000d91e4: sbb ecx, ebp; cmpsb [rsi], [rdi]; sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x000000000d91e7: sbb esp, edi; jmp qword ptr [rsi+0xf]; 
0x00000000109141: shl bh, 0x1; dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop r12; ret; 
0x0000000018b887: shl bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi+rax+0x80]; ret; 
0x0000000018d96c: shl bl, 0xf; mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi+rax+0x40]; ret; 
0x00000000177e85: shl byte ptr [rax+rbx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000185d55: shl byte ptr [rax+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000013cced: shl byte ptr [rax+rdx+0x48], cl; add esp, 0x8; pop rbx; pop rbp; ret; 
0x000000000fae93: shl byte ptr [rbp+0x3a], 0x48; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000d6a44: shl byte ptr [rbp+0x9], 0x48; add esp, 0x8; ret; 
0x0000000012423b: shl byte ptr [rbp+0xa], 0x48; add esp, 0x8; pop rbx; pop rbp; ret; 
0x0000000004162a: shl byte ptr [rbp+0xb], 0x48; add esp, 0x8; ret; 
0x00000000183e10: shl byte ptr [rbp+rbp*2-0xd], 0xf; mov esp, 0x26de9c0; add [rax], al; xor eax, eax; ret; 
0x000000001743d0: shl byte ptr [rbp+rbp*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x00000000187200: shl byte ptr [rbp+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000170290: shl byte ptr [rbp+rdi*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000014a1a6: shl byte ptr [rbp-0x35], 0x48; add esp, 0x10; xor eax, eax; pop rbp; ret; 
0x0000000018b692: shl byte ptr [rbx+rbp*2-0xd], 0xf; mov esp, 0xc031c3c0; ret; 
0x00000000174242: shl byte ptr [rbx+rbx*2-0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001702b6: shl byte ptr [rbx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x00000000170042: shl byte ptr [rbx+rcx*2-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000018d04e: shl byte ptr [rbx+rsi*4+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x0000000013b34c: shl byte ptr [rcx+rbp+0x48], cl; add esp, 0x10; pop rbx; ret; 
0x00000000187228: shl byte ptr [rcx+rbx*2-0xd], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000014493c: shl byte ptr [rcx+rsi+0x48], cl; add esp, 0x10; pop rbx; ret; 
0x0000000018d073: shl byte ptr [rdx+rcx+0xf], 0xbd; ror byte ptr [rax-0x73], 0x44; xchg eax, esp; ret; 
0x00000000173e77: shl byte ptr [rsi-0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000001000ab: shl dword ptr [rax-0x8], 0x1; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret; 
0x00000000074fe3: shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x000000000fae90: sldt [rbp+0x483a75c0]; add esp, 0x40; mov rax, r8; pop rbp; ret; 
0x000000000d6837: stc; cli; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret; 
0x0000000004dd70: std; dec dword ptr [rax+0x39]; fisttp dword ptr [rdi], st; xchg esp, eax; ret; 
0x0000000017423e: std; xlat [rbx]; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000001871fc: sti; xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001860cb: sti; xchg ebx, eax; rol esp, 0xe2; push 0xb75c0f5; ret; 
0x00000000187179: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1c: sti; xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000aa954: stosd [rdi]; fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000866bf: sub [rbp+0x41], bl; pop rsp; ret; 
0x0000000011f374: sub [rbp-0xa], dh; dec dword ptr [rbx+0x480c2444]; add esp, 0x10; pop rbp; ret; 
0x00000000085f7b: sub [rbx+0x41], bl; pop rsp; jmp rax; 
0x0000000014345e: sub [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000188fa0: sub [rdi+0x76], ch; add esp, [rdx-0x4d]; push rbp; and [rdi], bh; ret; 
0x0000000018bec0: sub [rdi+0x76], ch; add esp, [rdx-0x4d]; push rbp; and [rdi], bl; ret; 
0x00000000074fdb: sub [rdi], cl; test [rbp-0x16000010], eax; shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x00000000149d04: sub al, 0xb; add al, ch; xchg esp, eax; ret far; 
0x00000000085a6d: sub bl, ch; mov esp, 0x107d8b48; call qword ptr [r12+0x358]; 
0x000000000ca3cc: sub dl, [rdx]; add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 0x8; ret; 
0x000000000f924f: sub eax, 0x4800004e; add esp, 0x28; ret; 
0x00000000117caf: sub eax, 0x48fff146; add esp, 0x8; ret; 
0x0000000004d75f: sub esp, 0x10; mov edi, [rdi+0x10]; syscall; 
0x0000000013ff1a: sub esp, 0x438; mov rax, [rdi+0x8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10]; 
0x000000000d21b4: sub esp, 0x8; call rax; 
0x00000000108ac3: sub esp, 0x8; call rsi; 
0x00000000085cf4: sub esp, 0x8; mov rax, [rax+0x340]; mov r8d, [rip+0x1699e3]; push r10; call rax; 
0x0000000014c3a8: sub esp, 0x8; push qword ptr [rax]; mov rax, [rip+0xa0b14]; mov rdi, [rdi]; call qword ptr [rax+0x340]; 
0x00000000085e0f: sub esp, 0x8; push rcx; mov rcx, r10; call rax; 
0x000000000946bf: sub esp, 0x8; syscall; 
0x000000000f9f65: sub esp, 0x98; syscall; 
0x00000000093b97: sub esp, 0xffffff80; pop rbp; pop r12; pop r13; ret; 
0x00000000041792: sub esp, 0xffffff80; pop rbx; pop rbp; pop r12; ret; 
0x00000000145c0d: sub esp, 0xffffff80; pop rbx; ret; 
0x0000000006067b: sub esp, 0xffffffff; call qword ptr [rax-0x170876b4]; 
0x000000001194e4: sub esp, [rcx+rcx*4+0x2b]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000007a6fd: sysenter; 
0x00000000074fdd: test [rbp-0x16000010], eax; shl esp, 0xff; jmp qword ptr [rsi+0xf]; 
0x0000000016f355: test byte ptr [rbp+0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000011f2bb: test eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x0000000013af50: test eax, 0x894c0000; loopne 0x000000000013af98; pop rsp; ret; 
0x0000000007b072: xchg [rax+0x48000000], esp; cmp dword ptr [rax+0x30], 0x0; je short 0x000000000007b080; ret; 
0x0000000018de97: xchg [rax-0x3d000000], esp; nop [rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0xc0]; ret; 
0x0000000018d157: xchg [rax-0x3d], esp; nop [rax+rax]; tzcnt eax, eax; lea rax, [rdi+rax*4+0x80]; ret; 
0x0000000018bb8d: xchg [rax-0x3d], esp; xor eax, eax; ret; 
0x0000000018bbc6: xchg [rax], esp; jne short 0x000000000018bb90; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bd46: xchg [rax], esp; jne short 0x000000000018bd25; lea rax, [rdi+rax*4+0x20]; ret; 
0x0000000018bbcd: xchg [rax], esp; ret; 
0x000000000f9a3e: xchg [rbp+0x48000000], eax; add esp, 0x68; pop rbp; pop r12; ret; 
0x00000000102885: xchg [rbp-0x2708fff2], esp; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000f9b99: xchg [rdx+0x48000000], eax; add esp, 0x78; ret; 
0x0000000005c6b5: xchg [rsi+0x48000000], esp; lea ecx, [rip+0x14aabf]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax; 
0x000000000fdb27: xchg al, bh; dec dword ptr [rbx+0x48082444]; add esp, 0x30; pop r13; ret; 
0x000000000fda50: xchg eax, edi; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret; 
0x0000000018d013: xchg eax, esp; ret; 
0x000000000a042a: xchg ebp, esp; add [rax], al; add [rax+0x29], cl; ret; 
0x00000000186092: xchg ebx, eax; leave; test ecx, ecx; jne 0x0000000000186123; ret; 
0x0000000018d46c: xchg ebx, eax; leave; test ecx, ecx; jne 0x000000000018d503; ret; 
0x000000001871fd: xchg ebx, eax; rol byte ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000001860cc: xchg ebx, eax; rol esp, 0xe2; push 0xb75c0f5; ret; 
0x0000000006bb8a: xchg ecx, esp; add eax, 0x63480000; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000018717a: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, ymm16; ret; 
0x0000000017ed1d: xchg edx, eax; leave; vmovdqu8 [rax]{k1}, zmm16; ret; 
0x000000000fa1e6: xchg esi, eax; mov edi, 0x48bfff8; and al, 0x48; add esp, 0x68; ret; 
0x00000000056ff2: xchg esp, eax; add [rax], al; add [rcx-0x1137b], cl; jmp far fword ptr [rcx]; 
0x00000000044208: xchg esp, eax; add al, 0x0; movsxd rax, [rsp+0xc]; add rsp, 0x18; ret; 
0x0000000009b9f8: xchg esp, eax; add dword ptr [rcx], 0x0; cmove rax, rdx; ret; 
0x0000000004e806: xchg esp, eax; and al, 0x88; add [rax], al; add [rcx+0x1], cl; ret; 
0x00000000034556: xchg esp, eax; and al, 0x90; add [rax], al; add [rax+0x39], cl; ret; 
0x0000000014df6b: xchg esp, eax; idiv bh; call qword ptr [rax+0x5f3d8d48]; 
0x000000000da85b: xchg esp, eax; idiv bh; call qword ptr [rax+0x6f3d8d48]; 
0x00000000093cd8: xchg esp, eax; nop [rax]; mov dword ptr [rip+0x160bf6], 0x0; ret; 
0x0000000009b2d8: xchg esp, eax; nop; add [rax], eax; cmovne rax, rdx; ret; 
0x0000000016e8f9: xchg esp, eax; or [rax], eax; add [rbp-0x77], cl; ret far; 
0x00000000149d08: xchg esp, eax; ret far; 
0x0000000004ce48: xchg esp, eax; ret; 
0x00000000124238: xchg esp, eax; rol byte ptr [rax+rax*8-0x7cb7f58b], 0xc4; or [rbx+0x5d], bl; ret; 
0x000000000fb23f: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; movzx rax, al; ret; 
0x00000000145dc4: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret; 
0x0000000004d863: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret; 
0x000000001314c9: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 0x1; ret; 
0x00000000145c59: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; ret; 
0x000000000d863c: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret; 
0x00000000087e30: xchg esp, eax; shl bh, 0xd8; ret; 
0x000000000a10c0: xchg esp, eax; stc; jmp qword ptr [rsi+0x2e]; 
0x00000000077db3: xchg esp, eax; sti; jmp qword ptr [rsi+0xf]; 
0x000000000b0d36: xchg esp, eax; str [rcx+0x63]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx; 
0x0000000017028d: xlat [rbx]; rol dword ptr [rbp-0xc828b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000173e74: xlat [rbx]; rol dword ptr [rbp-0xc998b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000017423f: xlat [rbx]; rol dword ptr [rbp-0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000e5faf: xor [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000df62a: xor al, 0x31; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret; 
0x000000000c69f7: xor eax, 0x48ffffff; add esp, 0x40; pop rbp; ret; 
0x00000000115725: xor eax, eax; mov rbx, [rbp-0x8]; leave; ret; 
0x0000000008e45d: xor ebp, esi; adc eax, 0x7fd28500; or ecx, [rcx+0x48c03106]; add esp, 0x18; ret; 
0x00000000102d53: xor ecx, [rdi]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 
0x0000000014ce30: xor esp, esp; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000074986: xor esp, esp; jmp rax; 
0x00000000102d52: xor rcx, [rdi]; add [rbp+0x41], bl; pop rsp; pop r13; ret; 

CONFIG [ search: Stack-pivot-only, x_match: none, max_len: 5, syntax: Intel, regex_filter: none ]
RESULT [ unique_gadgets: 967, search_time: 665.57219ms, print_time: 69.528631ms ]
